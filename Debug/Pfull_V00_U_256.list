
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801eff0  0801eff0  0001eff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM_P 00000080  0803f000  0803f000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .myBufSectionEEPROM_V 00000014  0803f800  0803f800  00028800  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .BOOTLOADER   00001000  0801f000  0801f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .text         0001c260  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .rodata       00000320  0801c320  0801c320  0001d320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .ARM.extab    00000000  0801c640  0801c640  00028814  2**0
                  CONTENTS, READONLY
 10 .ARM          00000008  0801c640  0801c640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .preinit_array 00000000  0801c648  0801c648  00028814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 12 .init_array   00000004  0801c648  0801c648  0001d648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .fini_array   00000004  0801c64c  0801c64c  0001d64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .data         0000035c  20000000  0801c650  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 15 .bss          00002078  20000360  0801c9ac  0001e360  2**3
                  ALLOC
 16 ._user_heap_stack 00000600  200023d8  0801c9ac  0001e3d8  2**0
                  ALLOC
 17 .ARM.attributes 00000028  00000000  00000000  00028814  2**0
                  CONTENTS, READONLY
 18 .debug_info   00031947  00000000  00000000  0002883c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000065f9  00000000  00000000  0005a183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002090  00000000  00000000  00060780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000019d3  00000000  00000000  00062810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000221cb  00000000  00000000  000641e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0000da7f  00000000  00000000  000863ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  00093e2d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007954  00000000  00000000  00093e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  0009b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000360 	.word	0x20000360
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c2f4 	.word	0x0801c2f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000364 	.word	0x20000364
 8000104:	0801c2f4 	.word	0x0801c2f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f8ed 	bl	80015f4 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f831 	bl	800148c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f8df 	bl	80015f4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8d5 	bl	80015f4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f85b 	bl	8001514 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f851 	bl	8001514 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	@ (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	ffffff21 	.word	0xffffff21
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f824 	bl	8000538 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ffef 	bl	80024f4 <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fbbc 	bl	8001c9c <__aeabi_dsub>
 8000524:	f001 ffe6 	bl	80024f4 <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 f82c 	bl	80025b4 <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 f827 	bl	80025b4 <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d434      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 800056e:	469b      	mov	fp, r3
 8000570:	4653      	mov	r3, sl
 8000572:	465a      	mov	r2, fp
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83b      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e079      	b.n	800067e <__udivmoddi4+0x146>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e076      	b.n	8000684 <__udivmoddi4+0x14c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e029      	b.n	8000604 <__udivmoddi4+0xcc>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4652      	mov	r2, sl
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0013      	movs	r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	431f      	orrs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d9c3      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d8      	beq.n	80005bc <__udivmoddi4+0x84>
 800060a:	07fb      	lsls	r3, r7, #31
 800060c:	0872      	lsrs	r2, r6, #1
 800060e:	431a      	orrs	r2, r3
 8000610:	4646      	mov	r6, r8
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	e00e      	b.n	8000634 <__udivmoddi4+0xfc>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d101      	bne.n	800061e <__udivmoddi4+0xe6>
 800061a:	42a2      	cmp	r2, r4
 800061c:	d80c      	bhi.n	8000638 <__udivmoddi4+0x100>
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	419d      	sbcs	r5, r3
 8000622:	2001      	movs	r0, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2100      	movs	r1, #0
 800062a:	3e01      	subs	r6, #1
 800062c:	1824      	adds	r4, r4, r0
 800062e:	414d      	adcs	r5, r1
 8000630:	2e00      	cmp	r6, #0
 8000632:	d006      	beq.n	8000642 <__udivmoddi4+0x10a>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d9ee      	bls.n	8000616 <__udivmoddi4+0xde>
 8000638:	3e01      	subs	r6, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2e00      	cmp	r6, #0
 8000640:	d1f8      	bne.n	8000634 <__udivmoddi4+0xfc>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	465b      	mov	r3, fp
 8000648:	1900      	adds	r0, r0, r4
 800064a:	4169      	adcs	r1, r5
 800064c:	2b00      	cmp	r3, #0
 800064e:	db24      	blt.n	800069a <__udivmoddi4+0x162>
 8000650:	002b      	movs	r3, r5
 8000652:	465a      	mov	r2, fp
 8000654:	4644      	mov	r4, r8
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	db2a      	blt.n	80006bc <__udivmoddi4+0x184>
 8000666:	0026      	movs	r6, r4
 8000668:	409e      	lsls	r6, r3
 800066a:	0033      	movs	r3, r6
 800066c:	0026      	movs	r6, r4
 800066e:	4647      	mov	r7, r8
 8000670:	40be      	lsls	r6, r7
 8000672:	0032      	movs	r2, r6
 8000674:	1a80      	subs	r0, r0, r2
 8000676:	4199      	sbcs	r1, r3
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	9101      	str	r1, [sp, #4]
 800067c:	e79e      	b.n	80005bc <__udivmoddi4+0x84>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d8bc      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000682:	e782      	b.n	800058a <__udivmoddi4+0x52>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e785      	b.n	80005a6 <__udivmoddi4+0x6e>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4646      	mov	r6, r8
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4644      	mov	r4, r8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dad4      	bge.n	8000666 <__udivmoddi4+0x12e>
 80006bc:	4642      	mov	r2, r8
 80006be:	002f      	movs	r7, r5
 80006c0:	2320      	movs	r3, #32
 80006c2:	0026      	movs	r6, r4
 80006c4:	4097      	lsls	r7, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	40de      	lsrs	r6, r3
 80006ca:	003b      	movs	r3, r7
 80006cc:	4333      	orrs	r3, r6
 80006ce:	e7cd      	b.n	800066c <__udivmoddi4+0x134>

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	b5c0      	push	{r6, r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	030e      	lsls	r6, r1, #12
 80006e2:	004c      	lsls	r4, r1, #1
 80006e4:	0fcd      	lsrs	r5, r1, #31
 80006e6:	0a71      	lsrs	r1, r6, #9
 80006e8:	9e00      	ldr	r6, [sp, #0]
 80006ea:	005f      	lsls	r7, r3, #1
 80006ec:	0f76      	lsrs	r6, r6, #29
 80006ee:	430e      	orrs	r6, r1
 80006f0:	9900      	ldr	r1, [sp, #0]
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	00c9      	lsls	r1, r1, #3
 80006f8:	4689      	mov	r9, r1
 80006fa:	0319      	lsls	r1, r3, #12
 80006fc:	0d7b      	lsrs	r3, r7, #21
 80006fe:	4698      	mov	r8, r3
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	0a49      	lsrs	r1, r1, #9
 8000704:	0fdb      	lsrs	r3, r3, #31
 8000706:	469c      	mov	ip, r3
 8000708:	9b00      	ldr	r3, [sp, #0]
 800070a:	9a00      	ldr	r2, [sp, #0]
 800070c:	0f5b      	lsrs	r3, r3, #29
 800070e:	430b      	orrs	r3, r1
 8000710:	4641      	mov	r1, r8
 8000712:	0d64      	lsrs	r4, r4, #21
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	1a61      	subs	r1, r4, r1
 8000718:	4565      	cmp	r5, ip
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x4e>
 800071c:	e0a6      	b.n	800086c <__aeabi_dadd+0x19c>
 800071e:	2900      	cmp	r1, #0
 8000720:	dd72      	ble.n	8000808 <__aeabi_dadd+0x138>
 8000722:	4647      	mov	r7, r8
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x5a>
 8000728:	e0dd      	b.n	80008e6 <__aeabi_dadd+0x216>
 800072a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800072c:	42bc      	cmp	r4, r7
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x62>
 8000730:	e19a      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000732:	2701      	movs	r7, #1
 8000734:	2938      	cmp	r1, #56	@ 0x38
 8000736:	dc17      	bgt.n	8000768 <__aeabi_dadd+0x98>
 8000738:	2780      	movs	r7, #128	@ 0x80
 800073a:	043f      	lsls	r7, r7, #16
 800073c:	433b      	orrs	r3, r7
 800073e:	291f      	cmp	r1, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0x74>
 8000742:	e1dd      	b.n	8000b00 <__aeabi_dadd+0x430>
 8000744:	2720      	movs	r7, #32
 8000746:	1a78      	subs	r0, r7, r1
 8000748:	001f      	movs	r7, r3
 800074a:	4087      	lsls	r7, r0
 800074c:	46ba      	mov	sl, r7
 800074e:	0017      	movs	r7, r2
 8000750:	40cf      	lsrs	r7, r1
 8000752:	4684      	mov	ip, r0
 8000754:	0038      	movs	r0, r7
 8000756:	4657      	mov	r7, sl
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	1af6      	subs	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	464b      	mov	r3, r9
 800076a:	1bdf      	subs	r7, r3, r7
 800076c:	45b9      	cmp	r9, r7
 800076e:	4180      	sbcs	r0, r0
 8000770:	4240      	negs	r0, r0
 8000772:	1a36      	subs	r6, r6, r0
 8000774:	0233      	lsls	r3, r6, #8
 8000776:	d400      	bmi.n	800077a <__aeabi_dadd+0xaa>
 8000778:	e0ff      	b.n	800097a <__aeabi_dadd+0x2aa>
 800077a:	0276      	lsls	r6, r6, #9
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0xb4>
 8000782:	e13c      	b.n	80009fe <__aeabi_dadd+0x32e>
 8000784:	0030      	movs	r0, r6
 8000786:	f7ff fe7b 	bl	8000480 <__clzsi2>
 800078a:	0003      	movs	r3, r0
 800078c:	3b08      	subs	r3, #8
 800078e:	2120      	movs	r1, #32
 8000790:	0038      	movs	r0, r7
 8000792:	1aca      	subs	r2, r1, r3
 8000794:	40d0      	lsrs	r0, r2
 8000796:	409e      	lsls	r6, r3
 8000798:	0002      	movs	r2, r0
 800079a:	409f      	lsls	r7, r3
 800079c:	4332      	orrs	r2, r6
 800079e:	429c      	cmp	r4, r3
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0xd4>
 80007a2:	e1a6      	b.n	8000af2 <__aeabi_dadd+0x422>
 80007a4:	1b18      	subs	r0, r3, r4
 80007a6:	3001      	adds	r0, #1
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	003e      	movs	r6, r7
 80007ac:	408f      	lsls	r7, r1
 80007ae:	40c6      	lsrs	r6, r0
 80007b0:	1e7b      	subs	r3, r7, #1
 80007b2:	419f      	sbcs	r7, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	408b      	lsls	r3, r1
 80007b8:	4337      	orrs	r7, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	40c2      	lsrs	r2, r0
 80007be:	003b      	movs	r3, r7
 80007c0:	0016      	movs	r6, r2
 80007c2:	2400      	movs	r4, #0
 80007c4:	4313      	orrs	r3, r2
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0xfa>
 80007c8:	e1df      	b.n	8000b8a <__aeabi_dadd+0x4ba>
 80007ca:	077b      	lsls	r3, r7, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x100>
 80007ce:	e332      	b.n	8000e36 <__aeabi_dadd+0x766>
 80007d0:	230f      	movs	r3, #15
 80007d2:	003a      	movs	r2, r7
 80007d4:	403b      	ands	r3, r7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d004      	beq.n	80007e4 <__aeabi_dadd+0x114>
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	42ba      	cmp	r2, r7
 80007de:	41bf      	sbcs	r7, r7
 80007e0:	427f      	negs	r7, r7
 80007e2:	19f6      	adds	r6, r6, r7
 80007e4:	0233      	lsls	r3, r6, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x11a>
 80007e8:	e323      	b.n	8000e32 <__aeabi_dadd+0x762>
 80007ea:	4b9c      	ldr	r3, [pc, #624]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80007ec:	3401      	adds	r4, #1
 80007ee:	429c      	cmp	r4, r3
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x124>
 80007f2:	e0b4      	b.n	800095e <__aeabi_dadd+0x28e>
 80007f4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a60 <__aeabi_dadd+0x390>)
 80007f6:	0564      	lsls	r4, r4, #21
 80007f8:	401e      	ands	r6, r3
 80007fa:	0d64      	lsrs	r4, r4, #21
 80007fc:	0777      	lsls	r7, r6, #29
 80007fe:	08d2      	lsrs	r2, r2, #3
 8000800:	0276      	lsls	r6, r6, #9
 8000802:	4317      	orrs	r7, r2
 8000804:	0b36      	lsrs	r6, r6, #12
 8000806:	e0ac      	b.n	8000962 <__aeabi_dadd+0x292>
 8000808:	2900      	cmp	r1, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x13e>
 800080c:	e07e      	b.n	800090c <__aeabi_dadd+0x23c>
 800080e:	4641      	mov	r1, r8
 8000810:	1b09      	subs	r1, r1, r4
 8000812:	2c00      	cmp	r4, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x148>
 8000816:	e160      	b.n	8000ada <__aeabi_dadd+0x40a>
 8000818:	0034      	movs	r4, r6
 800081a:	4648      	mov	r0, r9
 800081c:	4304      	orrs	r4, r0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x152>
 8000820:	e1c9      	b.n	8000bb6 <__aeabi_dadd+0x4e6>
 8000822:	1e4c      	subs	r4, r1, #1
 8000824:	2901      	cmp	r1, #1
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x15a>
 8000828:	e22e      	b.n	8000c88 <__aeabi_dadd+0x5b8>
 800082a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800082c:	42a9      	cmp	r1, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x162>
 8000830:	e224      	b.n	8000c7c <__aeabi_dadd+0x5ac>
 8000832:	2701      	movs	r7, #1
 8000834:	2c38      	cmp	r4, #56	@ 0x38
 8000836:	dc11      	bgt.n	800085c <__aeabi_dadd+0x18c>
 8000838:	0021      	movs	r1, r4
 800083a:	291f      	cmp	r1, #31
 800083c:	dd00      	ble.n	8000840 <__aeabi_dadd+0x170>
 800083e:	e20b      	b.n	8000c58 <__aeabi_dadd+0x588>
 8000840:	2420      	movs	r4, #32
 8000842:	0037      	movs	r7, r6
 8000844:	4648      	mov	r0, r9
 8000846:	1a64      	subs	r4, r4, r1
 8000848:	40a7      	lsls	r7, r4
 800084a:	40c8      	lsrs	r0, r1
 800084c:	4307      	orrs	r7, r0
 800084e:	4648      	mov	r0, r9
 8000850:	40a0      	lsls	r0, r4
 8000852:	40ce      	lsrs	r6, r1
 8000854:	1e44      	subs	r4, r0, #1
 8000856:	41a0      	sbcs	r0, r4
 8000858:	1b9b      	subs	r3, r3, r6
 800085a:	4307      	orrs	r7, r0
 800085c:	1bd7      	subs	r7, r2, r7
 800085e:	42ba      	cmp	r2, r7
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4665      	mov	r5, ip
 8000866:	4644      	mov	r4, r8
 8000868:	1a9e      	subs	r6, r3, r2
 800086a:	e783      	b.n	8000774 <__aeabi_dadd+0xa4>
 800086c:	2900      	cmp	r1, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x1a2>
 8000870:	e09c      	b.n	80009ac <__aeabi_dadd+0x2dc>
 8000872:	4647      	mov	r7, r8
 8000874:	2f00      	cmp	r7, #0
 8000876:	d167      	bne.n	8000948 <__aeabi_dadd+0x278>
 8000878:	001f      	movs	r7, r3
 800087a:	4317      	orrs	r7, r2
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1b0>
 800087e:	e0e4      	b.n	8000a4a <__aeabi_dadd+0x37a>
 8000880:	1e48      	subs	r0, r1, #1
 8000882:	2901      	cmp	r1, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x1b8>
 8000886:	e19b      	b.n	8000bc0 <__aeabi_dadd+0x4f0>
 8000888:	4f74      	ldr	r7, [pc, #464]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800088a:	42b9      	cmp	r1, r7
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x1c0>
 800088e:	e0eb      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000890:	2701      	movs	r7, #1
 8000892:	0001      	movs	r1, r0
 8000894:	2838      	cmp	r0, #56	@ 0x38
 8000896:	dc11      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000898:	291f      	cmp	r1, #31
 800089a:	dd00      	ble.n	800089e <__aeabi_dadd+0x1ce>
 800089c:	e1c7      	b.n	8000c2e <__aeabi_dadd+0x55e>
 800089e:	2720      	movs	r7, #32
 80008a0:	1a78      	subs	r0, r7, r1
 80008a2:	001f      	movs	r7, r3
 80008a4:	4684      	mov	ip, r0
 80008a6:	4087      	lsls	r7, r0
 80008a8:	0010      	movs	r0, r2
 80008aa:	40c8      	lsrs	r0, r1
 80008ac:	4307      	orrs	r7, r0
 80008ae:	4660      	mov	r0, ip
 80008b0:	4082      	lsls	r2, r0
 80008b2:	40cb      	lsrs	r3, r1
 80008b4:	1e50      	subs	r0, r2, #1
 80008b6:	4182      	sbcs	r2, r0
 80008b8:	18f6      	adds	r6, r6, r3
 80008ba:	4317      	orrs	r7, r2
 80008bc:	444f      	add	r7, r9
 80008be:	454f      	cmp	r7, r9
 80008c0:	4180      	sbcs	r0, r0
 80008c2:	4240      	negs	r0, r0
 80008c4:	1836      	adds	r6, r6, r0
 80008c6:	0233      	lsls	r3, r6, #8
 80008c8:	d557      	bpl.n	800097a <__aeabi_dadd+0x2aa>
 80008ca:	4b64      	ldr	r3, [pc, #400]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008cc:	3401      	adds	r4, #1
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d045      	beq.n	800095e <__aeabi_dadd+0x28e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	4b62      	ldr	r3, [pc, #392]	@ (8000a60 <__aeabi_dadd+0x390>)
 80008d6:	087a      	lsrs	r2, r7, #1
 80008d8:	401e      	ands	r6, r3
 80008da:	4039      	ands	r1, r7
 80008dc:	430a      	orrs	r2, r1
 80008de:	07f7      	lsls	r7, r6, #31
 80008e0:	4317      	orrs	r7, r2
 80008e2:	0876      	lsrs	r6, r6, #1
 80008e4:	e771      	b.n	80007ca <__aeabi_dadd+0xfa>
 80008e6:	001f      	movs	r7, r3
 80008e8:	4317      	orrs	r7, r2
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x21e>
 80008ec:	e0ad      	b.n	8000a4a <__aeabi_dadd+0x37a>
 80008ee:	1e4f      	subs	r7, r1, #1
 80008f0:	46bc      	mov	ip, r7
 80008f2:	2901      	cmp	r1, #1
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x228>
 80008f6:	e182      	b.n	8000bfe <__aeabi_dadd+0x52e>
 80008f8:	4f58      	ldr	r7, [pc, #352]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008fa:	42b9      	cmp	r1, r7
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x230>
 80008fe:	e190      	b.n	8000c22 <__aeabi_dadd+0x552>
 8000900:	4661      	mov	r1, ip
 8000902:	2701      	movs	r7, #1
 8000904:	2938      	cmp	r1, #56	@ 0x38
 8000906:	dd00      	ble.n	800090a <__aeabi_dadd+0x23a>
 8000908:	e72e      	b.n	8000768 <__aeabi_dadd+0x98>
 800090a:	e718      	b.n	800073e <__aeabi_dadd+0x6e>
 800090c:	4f55      	ldr	r7, [pc, #340]	@ (8000a64 <__aeabi_dadd+0x394>)
 800090e:	1c61      	adds	r1, r4, #1
 8000910:	4239      	tst	r1, r7
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x246>
 8000914:	e0d0      	b.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000916:	0031      	movs	r1, r6
 8000918:	4648      	mov	r0, r9
 800091a:	001f      	movs	r7, r3
 800091c:	4301      	orrs	r1, r0
 800091e:	4317      	orrs	r7, r2
 8000920:	2c00      	cmp	r4, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x256>
 8000924:	e13d      	b.n	8000ba2 <__aeabi_dadd+0x4d2>
 8000926:	2900      	cmp	r1, #0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x25c>
 800092a:	e1bc      	b.n	8000ca6 <__aeabi_dadd+0x5d6>
 800092c:	2f00      	cmp	r7, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x262>
 8000930:	e1bf      	b.n	8000cb2 <__aeabi_dadd+0x5e2>
 8000932:	464b      	mov	r3, r9
 8000934:	2100      	movs	r1, #0
 8000936:	08d8      	lsrs	r0, r3, #3
 8000938:	0777      	lsls	r7, r6, #29
 800093a:	4307      	orrs	r7, r0
 800093c:	08f0      	lsrs	r0, r6, #3
 800093e:	0306      	lsls	r6, r0, #12
 8000940:	054c      	lsls	r4, r1, #21
 8000942:	0b36      	lsrs	r6, r6, #12
 8000944:	0d64      	lsrs	r4, r4, #21
 8000946:	e00c      	b.n	8000962 <__aeabi_dadd+0x292>
 8000948:	4f44      	ldr	r7, [pc, #272]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800094a:	42bc      	cmp	r4, r7
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x280>
 800094e:	e08b      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000950:	2701      	movs	r7, #1
 8000952:	2938      	cmp	r1, #56	@ 0x38
 8000954:	dcb2      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000956:	2780      	movs	r7, #128	@ 0x80
 8000958:	043f      	lsls	r7, r7, #16
 800095a:	433b      	orrs	r3, r7
 800095c:	e79c      	b.n	8000898 <__aeabi_dadd+0x1c8>
 800095e:	2600      	movs	r6, #0
 8000960:	2700      	movs	r7, #0
 8000962:	0524      	lsls	r4, r4, #20
 8000964:	4334      	orrs	r4, r6
 8000966:	07ed      	lsls	r5, r5, #31
 8000968:	432c      	orrs	r4, r5
 800096a:	0038      	movs	r0, r7
 800096c:	0021      	movs	r1, r4
 800096e:	b002      	add	sp, #8
 8000970:	bce0      	pop	{r5, r6, r7}
 8000972:	46ba      	mov	sl, r7
 8000974:	46b1      	mov	r9, r6
 8000976:	46a8      	mov	r8, r5
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	077b      	lsls	r3, r7, #29
 800097c:	d004      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 800097e:	230f      	movs	r3, #15
 8000980:	403b      	ands	r3, r7
 8000982:	2b04      	cmp	r3, #4
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 8000986:	e728      	b.n	80007da <__aeabi_dadd+0x10a>
 8000988:	08f8      	lsrs	r0, r7, #3
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800098c:	0777      	lsls	r7, r6, #29
 800098e:	4307      	orrs	r7, r0
 8000990:	08f0      	lsrs	r0, r6, #3
 8000992:	429c      	cmp	r4, r3
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x2c8>
 8000996:	e24a      	b.n	8000e2e <__aeabi_dadd+0x75e>
 8000998:	003b      	movs	r3, r7
 800099a:	4303      	orrs	r3, r0
 800099c:	d059      	beq.n	8000a52 <__aeabi_dadd+0x382>
 800099e:	2680      	movs	r6, #128	@ 0x80
 80009a0:	0336      	lsls	r6, r6, #12
 80009a2:	4306      	orrs	r6, r0
 80009a4:	0336      	lsls	r6, r6, #12
 80009a6:	4c2d      	ldr	r4, [pc, #180]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009a8:	0b36      	lsrs	r6, r6, #12
 80009aa:	e7da      	b.n	8000962 <__aeabi_dadd+0x292>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d061      	beq.n	8000a74 <__aeabi_dadd+0x3a4>
 80009b0:	4641      	mov	r1, r8
 80009b2:	1b09      	subs	r1, r1, r4
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x2ea>
 80009b8:	e0b9      	b.n	8000b2e <__aeabi_dadd+0x45e>
 80009ba:	4c28      	ldr	r4, [pc, #160]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009bc:	45a0      	cmp	r8, r4
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2f2>
 80009c0:	e1a5      	b.n	8000d0e <__aeabi_dadd+0x63e>
 80009c2:	2701      	movs	r7, #1
 80009c4:	2938      	cmp	r1, #56	@ 0x38
 80009c6:	dc13      	bgt.n	80009f0 <__aeabi_dadd+0x320>
 80009c8:	2480      	movs	r4, #128	@ 0x80
 80009ca:	0424      	lsls	r4, r4, #16
 80009cc:	4326      	orrs	r6, r4
 80009ce:	291f      	cmp	r1, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dadd+0x304>
 80009d2:	e1c8      	b.n	8000d66 <__aeabi_dadd+0x696>
 80009d4:	2420      	movs	r4, #32
 80009d6:	0037      	movs	r7, r6
 80009d8:	4648      	mov	r0, r9
 80009da:	1a64      	subs	r4, r4, r1
 80009dc:	40a7      	lsls	r7, r4
 80009de:	40c8      	lsrs	r0, r1
 80009e0:	4307      	orrs	r7, r0
 80009e2:	4648      	mov	r0, r9
 80009e4:	40a0      	lsls	r0, r4
 80009e6:	40ce      	lsrs	r6, r1
 80009e8:	1e44      	subs	r4, r0, #1
 80009ea:	41a0      	sbcs	r0, r4
 80009ec:	199b      	adds	r3, r3, r6
 80009ee:	4307      	orrs	r7, r0
 80009f0:	18bf      	adds	r7, r7, r2
 80009f2:	4297      	cmp	r7, r2
 80009f4:	4192      	sbcs	r2, r2
 80009f6:	4252      	negs	r2, r2
 80009f8:	4644      	mov	r4, r8
 80009fa:	18d6      	adds	r6, r2, r3
 80009fc:	e763      	b.n	80008c6 <__aeabi_dadd+0x1f6>
 80009fe:	0038      	movs	r0, r7
 8000a00:	f7ff fd3e 	bl	8000480 <__clzsi2>
 8000a04:	0003      	movs	r3, r0
 8000a06:	3318      	adds	r3, #24
 8000a08:	2b1f      	cmp	r3, #31
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x33e>
 8000a0c:	e6bf      	b.n	800078e <__aeabi_dadd+0xbe>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	3808      	subs	r0, #8
 8000a12:	4082      	lsls	r2, r0
 8000a14:	429c      	cmp	r4, r3
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x34a>
 8000a18:	e083      	b.n	8000b22 <__aeabi_dadd+0x452>
 8000a1a:	1b1b      	subs	r3, r3, r4
 8000a1c:	1c58      	adds	r0, r3, #1
 8000a1e:	281f      	cmp	r0, #31
 8000a20:	dc00      	bgt.n	8000a24 <__aeabi_dadd+0x354>
 8000a22:	e1b4      	b.n	8000d8e <__aeabi_dadd+0x6be>
 8000a24:	0017      	movs	r7, r2
 8000a26:	3b1f      	subs	r3, #31
 8000a28:	40df      	lsrs	r7, r3
 8000a2a:	2820      	cmp	r0, #32
 8000a2c:	d005      	beq.n	8000a3a <__aeabi_dadd+0x36a>
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	409a      	lsls	r2, r3
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	419a      	sbcs	r2, r3
 8000a38:	4317      	orrs	r7, r2
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2f00      	cmp	r7, #0
 8000a3e:	d00a      	beq.n	8000a56 <__aeabi_dadd+0x386>
 8000a40:	077b      	lsls	r3, r7, #29
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x376>
 8000a44:	e6c4      	b.n	80007d0 <__aeabi_dadd+0x100>
 8000a46:	0026      	movs	r6, r4
 8000a48:	e79e      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	08d8      	lsrs	r0, r3, #3
 8000a50:	e79b      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000a52:	2700      	movs	r7, #0
 8000a54:	4c01      	ldr	r4, [pc, #4]	@ (8000a5c <__aeabi_dadd+0x38c>)
 8000a56:	2600      	movs	r6, #0
 8000a58:	e783      	b.n	8000962 <__aeabi_dadd+0x292>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	000007ff 	.word	0x000007ff
 8000a60:	ff7fffff 	.word	0xff7fffff
 8000a64:	000007fe 	.word	0x000007fe
 8000a68:	464b      	mov	r3, r9
 8000a6a:	0777      	lsls	r7, r6, #29
 8000a6c:	08d8      	lsrs	r0, r3, #3
 8000a6e:	4307      	orrs	r7, r0
 8000a70:	08f0      	lsrs	r0, r6, #3
 8000a72:	e791      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000a74:	4fcd      	ldr	r7, [pc, #820]	@ (8000dac <__aeabi_dadd+0x6dc>)
 8000a76:	1c61      	adds	r1, r4, #1
 8000a78:	4239      	tst	r1, r7
 8000a7a:	d16b      	bne.n	8000b54 <__aeabi_dadd+0x484>
 8000a7c:	0031      	movs	r1, r6
 8000a7e:	4648      	mov	r0, r9
 8000a80:	4301      	orrs	r1, r0
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_dadd+0x3b8>
 8000a86:	e14b      	b.n	8000d20 <__aeabi_dadd+0x650>
 8000a88:	001f      	movs	r7, r3
 8000a8a:	4317      	orrs	r7, r2
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x3c2>
 8000a90:	e181      	b.n	8000d96 <__aeabi_dadd+0x6c6>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x3c8>
 8000a96:	e74c      	b.n	8000932 <__aeabi_dadd+0x262>
 8000a98:	444a      	add	r2, r9
 8000a9a:	454a      	cmp	r2, r9
 8000a9c:	4180      	sbcs	r0, r0
 8000a9e:	18f6      	adds	r6, r6, r3
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	1836      	adds	r6, r6, r0
 8000aa4:	0233      	lsls	r3, r6, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x3da>
 8000aa8:	e1b0      	b.n	8000e0c <__aeabi_dadd+0x73c>
 8000aaa:	0017      	movs	r7, r2
 8000aac:	4691      	mov	r9, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x3e4>
 8000ab2:	e73e      	b.n	8000932 <__aeabi_dadd+0x262>
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e754      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ab8:	4649      	mov	r1, r9
 8000aba:	1a89      	subs	r1, r1, r2
 8000abc:	4688      	mov	r8, r1
 8000abe:	45c1      	cmp	r9, r8
 8000ac0:	41bf      	sbcs	r7, r7
 8000ac2:	1af1      	subs	r1, r6, r3
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	1bc9      	subs	r1, r1, r7
 8000ac8:	020f      	lsls	r7, r1, #8
 8000aca:	d461      	bmi.n	8000b90 <__aeabi_dadd+0x4c0>
 8000acc:	4647      	mov	r7, r8
 8000ace:	430f      	orrs	r7, r1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x404>
 8000ad2:	e0bd      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	e651      	b.n	800077e <__aeabi_dadd+0xae>
 8000ada:	4cb5      	ldr	r4, [pc, #724]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x412>
 8000ae0:	e100      	b.n	8000ce4 <__aeabi_dadd+0x614>
 8000ae2:	2701      	movs	r7, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x41a>
 8000ae8:	e6b8      	b.n	800085c <__aeabi_dadd+0x18c>
 8000aea:	2480      	movs	r4, #128	@ 0x80
 8000aec:	0424      	lsls	r4, r4, #16
 8000aee:	4326      	orrs	r6, r4
 8000af0:	e6a3      	b.n	800083a <__aeabi_dadd+0x16a>
 8000af2:	4eb0      	ldr	r6, [pc, #704]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000af4:	1ae4      	subs	r4, r4, r3
 8000af6:	4016      	ands	r6, r2
 8000af8:	077b      	lsls	r3, r7, #29
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x42e>
 8000afc:	e73f      	b.n	800097e <__aeabi_dadd+0x2ae>
 8000afe:	e743      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000b00:	000f      	movs	r7, r1
 8000b02:	0018      	movs	r0, r3
 8000b04:	3f20      	subs	r7, #32
 8000b06:	40f8      	lsrs	r0, r7
 8000b08:	4684      	mov	ip, r0
 8000b0a:	2920      	cmp	r1, #32
 8000b0c:	d003      	beq.n	8000b16 <__aeabi_dadd+0x446>
 8000b0e:	2740      	movs	r7, #64	@ 0x40
 8000b10:	1a79      	subs	r1, r7, r1
 8000b12:	408b      	lsls	r3, r1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	1e53      	subs	r3, r2, #1
 8000b18:	419a      	sbcs	r2, r3
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0017      	movs	r7, r2
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	e622      	b.n	8000768 <__aeabi_dadd+0x98>
 8000b22:	48a4      	ldr	r0, [pc, #656]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000b24:	1ae1      	subs	r1, r4, r3
 8000b26:	4010      	ands	r0, r2
 8000b28:	0747      	lsls	r7, r0, #29
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	e707      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b2e:	0034      	movs	r4, r6
 8000b30:	4648      	mov	r0, r9
 8000b32:	4304      	orrs	r4, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x468>
 8000b36:	e0fa      	b.n	8000d2e <__aeabi_dadd+0x65e>
 8000b38:	1e4c      	subs	r4, r1, #1
 8000b3a:	2901      	cmp	r1, #1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x470>
 8000b3e:	e0d7      	b.n	8000cf0 <__aeabi_dadd+0x620>
 8000b40:	4f9b      	ldr	r7, [pc, #620]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b42:	42b9      	cmp	r1, r7
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x478>
 8000b46:	e0e2      	b.n	8000d0e <__aeabi_dadd+0x63e>
 8000b48:	2701      	movs	r7, #1
 8000b4a:	2c38      	cmp	r4, #56	@ 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x480>
 8000b4e:	e74f      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000b50:	0021      	movs	r1, r4
 8000b52:	e73c      	b.n	80009ce <__aeabi_dadd+0x2fe>
 8000b54:	4c96      	ldr	r4, [pc, #600]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b56:	42a1      	cmp	r1, r4
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x48c>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_dadd+0x648>
 8000b5c:	444a      	add	r2, r9
 8000b5e:	454a      	cmp	r2, r9
 8000b60:	4180      	sbcs	r0, r0
 8000b62:	18f3      	adds	r3, r6, r3
 8000b64:	4240      	negs	r0, r0
 8000b66:	1818      	adds	r0, r3, r0
 8000b68:	07c7      	lsls	r7, r0, #31
 8000b6a:	0852      	lsrs	r2, r2, #1
 8000b6c:	4317      	orrs	r7, r2
 8000b6e:	0846      	lsrs	r6, r0, #1
 8000b70:	0752      	lsls	r2, r2, #29
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b74:	220f      	movs	r2, #15
 8000b76:	000c      	movs	r4, r1
 8000b78:	403a      	ands	r2, r7
 8000b7a:	2a04      	cmp	r2, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b7e:	e62c      	b.n	80007da <__aeabi_dadd+0x10a>
 8000b80:	0776      	lsls	r6, r6, #29
 8000b82:	08ff      	lsrs	r7, r7, #3
 8000b84:	4337      	orrs	r7, r6
 8000b86:	0900      	lsrs	r0, r0, #4
 8000b88:	e6d9      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e6e8      	b.n	8000962 <__aeabi_dadd+0x292>
 8000b90:	4649      	mov	r1, r9
 8000b92:	1a57      	subs	r7, r2, r1
 8000b94:	42ba      	cmp	r2, r7
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	1b9e      	subs	r6, r3, r6
 8000b9a:	4252      	negs	r2, r2
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	1ab6      	subs	r6, r6, r2
 8000ba0:	e5ed      	b.n	800077e <__aeabi_dadd+0xae>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_dadd+0x4d8>
 8000ba6:	e0c6      	b.n	8000d36 <__aeabi_dadd+0x666>
 8000ba8:	2f00      	cmp	r7, #0
 8000baa:	d167      	bne.n	8000c7c <__aeabi_dadd+0x5ac>
 8000bac:	2680      	movs	r6, #128	@ 0x80
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4c7f      	ldr	r4, [pc, #508]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000bb2:	0336      	lsls	r6, r6, #12
 8000bb4:	e6d5      	b.n	8000962 <__aeabi_dadd+0x292>
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	000c      	movs	r4, r1
 8000bba:	001e      	movs	r6, r3
 8000bbc:	08d0      	lsrs	r0, r2, #3
 8000bbe:	e6e4      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000bc0:	444a      	add	r2, r9
 8000bc2:	454a      	cmp	r2, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	18f3      	adds	r3, r6, r3
 8000bc8:	4240      	negs	r0, r0
 8000bca:	1818      	adds	r0, r3, r0
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0203      	lsls	r3, r0, #8
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_dadd+0x504>
 8000bd2:	e096      	b.n	8000d02 <__aeabi_dadd+0x632>
 8000bd4:	4b77      	ldr	r3, [pc, #476]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000bd6:	0849      	lsrs	r1, r1, #1
 8000bd8:	4018      	ands	r0, r3
 8000bda:	07c3      	lsls	r3, r0, #31
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	0844      	lsrs	r4, r0, #1
 8000be0:	0749      	lsls	r1, r1, #29
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x516>
 8000be4:	e129      	b.n	8000e3a <__aeabi_dadd+0x76a>
 8000be6:	220f      	movs	r2, #15
 8000be8:	401a      	ands	r2, r3
 8000bea:	2a04      	cmp	r2, #4
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x520>
 8000bee:	e0ea      	b.n	8000dc6 <__aeabi_dadd+0x6f6>
 8000bf0:	1d1f      	adds	r7, r3, #4
 8000bf2:	429f      	cmp	r7, r3
 8000bf4:	41b6      	sbcs	r6, r6
 8000bf6:	4276      	negs	r6, r6
 8000bf8:	1936      	adds	r6, r6, r4
 8000bfa:	2402      	movs	r4, #2
 8000bfc:	e6c4      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	1a8f      	subs	r7, r1, r2
 8000c02:	45b9      	cmp	r9, r7
 8000c04:	4180      	sbcs	r0, r0
 8000c06:	1af6      	subs	r6, r6, r3
 8000c08:	4240      	negs	r0, r0
 8000c0a:	1a36      	subs	r6, r6, r0
 8000c0c:	0233      	lsls	r3, r6, #8
 8000c0e:	d406      	bmi.n	8000c1e <__aeabi_dadd+0x54e>
 8000c10:	0773      	lsls	r3, r6, #29
 8000c12:	08ff      	lsrs	r7, r7, #3
 8000c14:	2101      	movs	r1, #1
 8000c16:	431f      	orrs	r7, r3
 8000c18:	08f0      	lsrs	r0, r6, #3
 8000c1a:	e690      	b.n	800093e <__aeabi_dadd+0x26e>
 8000c1c:	4665      	mov	r5, ip
 8000c1e:	2401      	movs	r4, #1
 8000c20:	e5ab      	b.n	800077a <__aeabi_dadd+0xaa>
 8000c22:	464b      	mov	r3, r9
 8000c24:	0777      	lsls	r7, r6, #29
 8000c26:	08d8      	lsrs	r0, r3, #3
 8000c28:	4307      	orrs	r7, r0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e6b4      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c2e:	000f      	movs	r7, r1
 8000c30:	0018      	movs	r0, r3
 8000c32:	3f20      	subs	r7, #32
 8000c34:	40f8      	lsrs	r0, r7
 8000c36:	4684      	mov	ip, r0
 8000c38:	2920      	cmp	r1, #32
 8000c3a:	d003      	beq.n	8000c44 <__aeabi_dadd+0x574>
 8000c3c:	2740      	movs	r7, #64	@ 0x40
 8000c3e:	1a79      	subs	r1, r7, r1
 8000c40:	408b      	lsls	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	1e53      	subs	r3, r2, #1
 8000c46:	419a      	sbcs	r2, r3
 8000c48:	4663      	mov	r3, ip
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	e635      	b.n	80008bc <__aeabi_dadd+0x1ec>
 8000c50:	2500      	movs	r5, #0
 8000c52:	2400      	movs	r4, #0
 8000c54:	2600      	movs	r6, #0
 8000c56:	e684      	b.n	8000962 <__aeabi_dadd+0x292>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0035      	movs	r5, r6
 8000c5c:	3c20      	subs	r4, #32
 8000c5e:	40e5      	lsrs	r5, r4
 8000c60:	2920      	cmp	r1, #32
 8000c62:	d005      	beq.n	8000c70 <__aeabi_dadd+0x5a0>
 8000c64:	2440      	movs	r4, #64	@ 0x40
 8000c66:	1a61      	subs	r1, r4, r1
 8000c68:	408e      	lsls	r6, r1
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	4331      	orrs	r1, r6
 8000c6e:	4689      	mov	r9, r1
 8000c70:	4648      	mov	r0, r9
 8000c72:	1e41      	subs	r1, r0, #1
 8000c74:	4188      	sbcs	r0, r1
 8000c76:	0007      	movs	r7, r0
 8000c78:	432f      	orrs	r7, r5
 8000c7a:	e5ef      	b.n	800085c <__aeabi_dadd+0x18c>
 8000c7c:	08d2      	lsrs	r2, r2, #3
 8000c7e:	075f      	lsls	r7, r3, #29
 8000c80:	4665      	mov	r5, ip
 8000c82:	4317      	orrs	r7, r2
 8000c84:	08d8      	lsrs	r0, r3, #3
 8000c86:	e687      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c88:	1a17      	subs	r7, r2, r0
 8000c8a:	42ba      	cmp	r2, r7
 8000c8c:	4192      	sbcs	r2, r2
 8000c8e:	1b9e      	subs	r6, r3, r6
 8000c90:	4252      	negs	r2, r2
 8000c92:	1ab6      	subs	r6, r6, r2
 8000c94:	0233      	lsls	r3, r6, #8
 8000c96:	d4c1      	bmi.n	8000c1c <__aeabi_dadd+0x54c>
 8000c98:	0773      	lsls	r3, r6, #29
 8000c9a:	08ff      	lsrs	r7, r7, #3
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	08f0      	lsrs	r0, r6, #3
 8000ca4:	e64b      	b.n	800093e <__aeabi_dadd+0x26e>
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d07b      	beq.n	8000da2 <__aeabi_dadd+0x6d2>
 8000caa:	4665      	mov	r5, ip
 8000cac:	001e      	movs	r6, r3
 8000cae:	4691      	mov	r9, r2
 8000cb0:	e63f      	b.n	8000932 <__aeabi_dadd+0x262>
 8000cb2:	1a81      	subs	r1, r0, r2
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	45c1      	cmp	r9, r8
 8000cb8:	41a4      	sbcs	r4, r4
 8000cba:	1af1      	subs	r1, r6, r3
 8000cbc:	4264      	negs	r4, r4
 8000cbe:	1b09      	subs	r1, r1, r4
 8000cc0:	2480      	movs	r4, #128	@ 0x80
 8000cc2:	0424      	lsls	r4, r4, #16
 8000cc4:	4221      	tst	r1, r4
 8000cc6:	d077      	beq.n	8000db8 <__aeabi_dadd+0x6e8>
 8000cc8:	1a10      	subs	r0, r2, r0
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	4192      	sbcs	r2, r2
 8000cce:	0007      	movs	r7, r0
 8000cd0:	1b9e      	subs	r6, r3, r6
 8000cd2:	4252      	negs	r2, r2
 8000cd4:	1ab6      	subs	r6, r6, r2
 8000cd6:	4337      	orrs	r7, r6
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dadd+0x60c>
 8000cda:	e0a0      	b.n	8000e1e <__aeabi_dadd+0x74e>
 8000cdc:	4665      	mov	r5, ip
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e63e      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	08d2      	lsrs	r2, r2, #3
 8000ce8:	4665      	mov	r5, ip
 8000cea:	4317      	orrs	r7, r2
 8000cec:	08d8      	lsrs	r0, r3, #3
 8000cee:	e653      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000cf0:	1881      	adds	r1, r0, r2
 8000cf2:	4291      	cmp	r1, r2
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	18f0      	adds	r0, r6, r3
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	1880      	adds	r0, r0, r2
 8000cfc:	0203      	lsls	r3, r0, #8
 8000cfe:	d500      	bpl.n	8000d02 <__aeabi_dadd+0x632>
 8000d00:	e768      	b.n	8000bd4 <__aeabi_dadd+0x504>
 8000d02:	0747      	lsls	r7, r0, #29
 8000d04:	08c9      	lsrs	r1, r1, #3
 8000d06:	430f      	orrs	r7, r1
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	e617      	b.n	800093e <__aeabi_dadd+0x26e>
 8000d0e:	08d2      	lsrs	r2, r2, #3
 8000d10:	075f      	lsls	r7, r3, #29
 8000d12:	4317      	orrs	r7, r2
 8000d14:	08d8      	lsrs	r0, r3, #3
 8000d16:	e63f      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e620      	b.n	8000962 <__aeabi_dadd+0x292>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d156      	bne.n	8000dd2 <__aeabi_dadd+0x702>
 8000d24:	075f      	lsls	r7, r3, #29
 8000d26:	08d2      	lsrs	r2, r2, #3
 8000d28:	4317      	orrs	r7, r2
 8000d2a:	08d8      	lsrs	r0, r3, #3
 8000d2c:	e634      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d2e:	000c      	movs	r4, r1
 8000d30:	001e      	movs	r6, r3
 8000d32:	08d0      	lsrs	r0, r2, #3
 8000d34:	e629      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000d36:	08c1      	lsrs	r1, r0, #3
 8000d38:	0770      	lsls	r0, r6, #29
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	08f0      	lsrs	r0, r6, #3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d062      	beq.n	8000e08 <__aeabi_dadd+0x738>
 8000d42:	2480      	movs	r4, #128	@ 0x80
 8000d44:	0324      	lsls	r4, r4, #12
 8000d46:	4220      	tst	r0, r4
 8000d48:	d007      	beq.n	8000d5a <__aeabi_dadd+0x68a>
 8000d4a:	08de      	lsrs	r6, r3, #3
 8000d4c:	4226      	tst	r6, r4
 8000d4e:	d104      	bne.n	8000d5a <__aeabi_dadd+0x68a>
 8000d50:	4665      	mov	r5, ip
 8000d52:	0030      	movs	r0, r6
 8000d54:	08d1      	lsrs	r1, r2, #3
 8000d56:	075b      	lsls	r3, r3, #29
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	0f4f      	lsrs	r7, r1, #29
 8000d5c:	00c9      	lsls	r1, r1, #3
 8000d5e:	08c9      	lsrs	r1, r1, #3
 8000d60:	077f      	lsls	r7, r7, #29
 8000d62:	430f      	orrs	r7, r1
 8000d64:	e618      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d66:	000c      	movs	r4, r1
 8000d68:	0030      	movs	r0, r6
 8000d6a:	3c20      	subs	r4, #32
 8000d6c:	40e0      	lsrs	r0, r4
 8000d6e:	4684      	mov	ip, r0
 8000d70:	2920      	cmp	r1, #32
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dadd+0x6b0>
 8000d74:	2440      	movs	r4, #64	@ 0x40
 8000d76:	1a61      	subs	r1, r4, r1
 8000d78:	408e      	lsls	r6, r1
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	4331      	orrs	r1, r6
 8000d7e:	4689      	mov	r9, r1
 8000d80:	4648      	mov	r0, r9
 8000d82:	1e41      	subs	r1, r0, #1
 8000d84:	4188      	sbcs	r0, r1
 8000d86:	4661      	mov	r1, ip
 8000d88:	0007      	movs	r7, r0
 8000d8a:	430f      	orrs	r7, r1
 8000d8c:	e630      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000d8e:	2120      	movs	r1, #32
 8000d90:	2700      	movs	r7, #0
 8000d92:	1a09      	subs	r1, r1, r0
 8000d94:	e50e      	b.n	80007b4 <__aeabi_dadd+0xe4>
 8000d96:	001e      	movs	r6, r3
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dadd+0x6ce>
 8000d9c:	e522      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000d9e:	2400      	movs	r4, #0
 8000da0:	e758      	b.n	8000c54 <__aeabi_dadd+0x584>
 8000da2:	2500      	movs	r5, #0
 8000da4:	2400      	movs	r4, #0
 8000da6:	2600      	movs	r6, #0
 8000da8:	e5db      	b.n	8000962 <__aeabi_dadd+0x292>
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	000007ff 	.word	0x000007ff
 8000db4:	ff7fffff 	.word	0xff7fffff
 8000db8:	4647      	mov	r7, r8
 8000dba:	430f      	orrs	r7, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x6f0>
 8000dbe:	e747      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000dc0:	000e      	movs	r6, r1
 8000dc2:	46c1      	mov	r9, r8
 8000dc4:	e5b5      	b.n	8000932 <__aeabi_dadd+0x262>
 8000dc6:	08df      	lsrs	r7, r3, #3
 8000dc8:	0764      	lsls	r4, r4, #29
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4327      	orrs	r7, r4
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	e5b5      	b.n	800093e <__aeabi_dadd+0x26e>
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	08c0      	lsrs	r0, r0, #3
 8000dd6:	0777      	lsls	r7, r6, #29
 8000dd8:	4307      	orrs	r7, r0
 8000dda:	4311      	orrs	r1, r2
 8000ddc:	08f0      	lsrs	r0, r6, #3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x714>
 8000de2:	e5d9      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0309      	lsls	r1, r1, #12
 8000de8:	4208      	tst	r0, r1
 8000dea:	d007      	beq.n	8000dfc <__aeabi_dadd+0x72c>
 8000dec:	08dc      	lsrs	r4, r3, #3
 8000dee:	420c      	tst	r4, r1
 8000df0:	d104      	bne.n	8000dfc <__aeabi_dadd+0x72c>
 8000df2:	08d2      	lsrs	r2, r2, #3
 8000df4:	075b      	lsls	r3, r3, #29
 8000df6:	431a      	orrs	r2, r3
 8000df8:	0017      	movs	r7, r2
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	0f7b      	lsrs	r3, r7, #29
 8000dfe:	00ff      	lsls	r7, r7, #3
 8000e00:	08ff      	lsrs	r7, r7, #3
 8000e02:	075b      	lsls	r3, r3, #29
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e5c7      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e08:	000f      	movs	r7, r1
 8000e0a:	e5c5      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	4033      	ands	r3, r6
 8000e12:	075f      	lsls	r7, r3, #29
 8000e14:	025b      	lsls	r3, r3, #9
 8000e16:	2401      	movs	r4, #1
 8000e18:	4317      	orrs	r7, r2
 8000e1a:	0b1e      	lsrs	r6, r3, #12
 8000e1c:	e5a1      	b.n	8000962 <__aeabi_dadd+0x292>
 8000e1e:	4226      	tst	r6, r4
 8000e20:	d012      	beq.n	8000e48 <__aeabi_dadd+0x778>
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e24:	4665      	mov	r5, ip
 8000e26:	0002      	movs	r2, r0
 8000e28:	2401      	movs	r4, #1
 8000e2a:	401e      	ands	r6, r3
 8000e2c:	e4e6      	b.n	80007fc <__aeabi_dadd+0x12c>
 8000e2e:	0021      	movs	r1, r4
 8000e30:	e585      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e32:	0017      	movs	r7, r2
 8000e34:	e5a8      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000e36:	003a      	movs	r2, r7
 8000e38:	e4d4      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	0764      	lsls	r4, r4, #29
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	0027      	movs	r7, r4
 8000e42:	2102      	movs	r1, #2
 8000e44:	0900      	lsrs	r0, r0, #4
 8000e46:	e57a      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0777      	lsls	r7, r6, #29
 8000e4c:	4307      	orrs	r7, r0
 8000e4e:	4665      	mov	r5, ip
 8000e50:	2100      	movs	r1, #0
 8000e52:	08f0      	lsrs	r0, r6, #3
 8000e54:	e573      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	ff7fffff 	.word	0xff7fffff

08000e5c <__aeabi_ddiv>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	46de      	mov	lr, fp
 8000e60:	4645      	mov	r5, r8
 8000e62:	4657      	mov	r7, sl
 8000e64:	464e      	mov	r6, r9
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	b087      	sub	sp, #28
 8000e6a:	9200      	str	r2, [sp, #0]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	030b      	lsls	r3, r1, #12
 8000e70:	0b1b      	lsrs	r3, r3, #12
 8000e72:	469b      	mov	fp, r3
 8000e74:	0fca      	lsrs	r2, r1, #31
 8000e76:	004b      	lsls	r3, r1, #1
 8000e78:	0004      	movs	r4, r0
 8000e7a:	4680      	mov	r8, r0
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	9202      	str	r2, [sp, #8]
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x28>
 8000e82:	e098      	b.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000e84:	4a7c      	ldr	r2, [pc, #496]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d037      	beq.n	8000efa <__aeabi_ddiv+0x9e>
 8000e8a:	4659      	mov	r1, fp
 8000e8c:	0f42      	lsrs	r2, r0, #29
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	430a      	orrs	r2, r1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0409      	lsls	r1, r1, #16
 8000e96:	4311      	orrs	r1, r2
 8000e98:	00c2      	lsls	r2, r0, #3
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4a77      	ldr	r2, [pc, #476]	@ (800107c <__aeabi_ddiv+0x220>)
 8000e9e:	4689      	mov	r9, r1
 8000ea0:	4692      	mov	sl, r2
 8000ea2:	449a      	add	sl, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	9e00      	ldr	r6, [sp, #0]
 8000eac:	9f01      	ldr	r7, [sp, #4]
 8000eae:	033b      	lsls	r3, r7, #12
 8000eb0:	0b1b      	lsrs	r3, r3, #12
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	007b      	lsls	r3, r7, #1
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	0ffd      	lsrs	r5, r7, #31
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d059      	beq.n	8000f74 <__aeabi_ddiv+0x118>
 8000ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d048      	beq.n	8000f58 <__aeabi_ddiv+0xfc>
 8000ec6:	4659      	mov	r1, fp
 8000ec8:	0f72      	lsrs	r2, r6, #29
 8000eca:	00c9      	lsls	r1, r1, #3
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0409      	lsls	r1, r1, #16
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	468b      	mov	fp, r1
 8000ed6:	4969      	ldr	r1, [pc, #420]	@ (800107c <__aeabi_ddiv+0x220>)
 8000ed8:	00f2      	lsls	r2, r6, #3
 8000eda:	468c      	mov	ip, r1
 8000edc:	4651      	mov	r1, sl
 8000ede:	4463      	add	r3, ip
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	9e02      	ldr	r6, [sp, #8]
 8000ee8:	406e      	eors	r6, r5
 8000eea:	b2f6      	uxtb	r6, r6
 8000eec:	2c0f      	cmp	r4, #15
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x96>
 8000ef0:	e0ce      	b.n	8001090 <__aeabi_ddiv+0x234>
 8000ef2:	4b63      	ldr	r3, [pc, #396]	@ (8001080 <__aeabi_ddiv+0x224>)
 8000ef4:	00a4      	lsls	r4, r4, #2
 8000ef6:	591b      	ldr	r3, [r3, r4]
 8000ef8:	469f      	mov	pc, r3
 8000efa:	465a      	mov	r2, fp
 8000efc:	4302      	orrs	r2, r0
 8000efe:	4691      	mov	r9, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_ddiv+0xa8>
 8000f02:	e090      	b.n	8001026 <__aeabi_ddiv+0x1ca>
 8000f04:	469a      	mov	sl, r3
 8000f06:	2302      	movs	r3, #2
 8000f08:	4690      	mov	r8, r2
 8000f0a:	2408      	movs	r4, #8
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	e7cc      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8000f10:	46cb      	mov	fp, r9
 8000f12:	4642      	mov	r2, r8
 8000f14:	9d02      	ldr	r5, [sp, #8]
 8000f16:	9903      	ldr	r1, [sp, #12]
 8000f18:	2902      	cmp	r1, #2
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xc2>
 8000f1c:	e1de      	b.n	80012dc <__aeabi_ddiv+0x480>
 8000f1e:	2903      	cmp	r1, #3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0xc8>
 8000f22:	e08d      	b.n	8001040 <__aeabi_ddiv+0x1e4>
 8000f24:	2901      	cmp	r1, #1
 8000f26:	d000      	beq.n	8000f2a <__aeabi_ddiv+0xce>
 8000f28:	e179      	b.n	800121e <__aeabi_ddiv+0x3c2>
 8000f2a:	002e      	movs	r6, r5
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2400      	movs	r4, #0
 8000f32:	4690      	mov	r8, r2
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	4323      	orrs	r3, r4
 8000f38:	07f6      	lsls	r6, r6, #31
 8000f3a:	4333      	orrs	r3, r6
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	0019      	movs	r1, r3
 8000f40:	b007      	add	sp, #28
 8000f42:	bcf0      	pop	{r4, r5, r6, r7}
 8000f44:	46bb      	mov	fp, r7
 8000f46:	46b2      	mov	sl, r6
 8000f48:	46a9      	mov	r9, r5
 8000f4a:	46a0      	mov	r8, r4
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2400      	movs	r4, #0
 8000f52:	4690      	mov	r8, r2
 8000f54:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000f56:	e7ed      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8000f58:	465a      	mov	r2, fp
 8000f5a:	9b00      	ldr	r3, [sp, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <__aeabi_ddiv+0x228>)
 8000f60:	469c      	mov	ip, r3
 8000f62:	44e2      	add	sl, ip
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d159      	bne.n	800101c <__aeabi_ddiv+0x1c0>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	469b      	mov	fp, r3
 8000f72:	e7b8      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000f74:	465a      	mov	r2, fp
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	d049      	beq.n	8001010 <__aeabi_ddiv+0x1b4>
 8000f7c:	465b      	mov	r3, fp
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x128>
 8000f82:	e19c      	b.n	80012be <__aeabi_ddiv+0x462>
 8000f84:	4658      	mov	r0, fp
 8000f86:	f7ff fa7b 	bl	8000480 <__clzsi2>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3a0b      	subs	r2, #11
 8000f90:	271d      	movs	r7, #29
 8000f92:	9e00      	ldr	r6, [sp, #0]
 8000f94:	1aba      	subs	r2, r7, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	4658      	mov	r0, fp
 8000f9a:	40d6      	lsrs	r6, r2
 8000f9c:	3908      	subs	r1, #8
 8000f9e:	4088      	lsls	r0, r1
 8000fa0:	0032      	movs	r2, r6
 8000fa2:	4302      	orrs	r2, r0
 8000fa4:	4693      	mov	fp, r2
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	408a      	lsls	r2, r1
 8000faa:	4937      	ldr	r1, [pc, #220]	@ (8001088 <__aeabi_ddiv+0x22c>)
 8000fac:	4453      	add	r3, sl
 8000fae:	468a      	mov	sl, r1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	449a      	add	sl, r3
 8000fb4:	e797      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	d021      	beq.n	8001002 <__aeabi_ddiv+0x1a6>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x16a>
 8000fc4:	e169      	b.n	800129a <__aeabi_ddiv+0x43e>
 8000fc6:	4658      	mov	r0, fp
 8000fc8:	f7ff fa5a 	bl	8000480 <__clzsi2>
 8000fcc:	230b      	movs	r3, #11
 8000fce:	425b      	negs	r3, r3
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	4484      	add	ip, r0
 8000fd6:	4666      	mov	r6, ip
 8000fd8:	231d      	movs	r3, #29
 8000fda:	1b9b      	subs	r3, r3, r6
 8000fdc:	0026      	movs	r6, r4
 8000fde:	0011      	movs	r1, r2
 8000fe0:	4658      	mov	r0, fp
 8000fe2:	40de      	lsrs	r6, r3
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	4088      	lsls	r0, r1
 8000fe8:	0033      	movs	r3, r6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	4699      	mov	r9, r3
 8000fee:	0023      	movs	r3, r4
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <__aeabi_ddiv+0x230>)
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	e753      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001002:	2300      	movs	r3, #0
 8001004:	4698      	mov	r8, r3
 8001006:	469a      	mov	sl, r3
 8001008:	3301      	adds	r3, #1
 800100a:	2404      	movs	r4, #4
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	e74c      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001010:	2301      	movs	r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	2300      	movs	r3, #0
 8001016:	2101      	movs	r1, #1
 8001018:	469b      	mov	fp, r3
 800101a:	e764      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 800101c:	2303      	movs	r3, #3
 800101e:	0032      	movs	r2, r6
 8001020:	2103      	movs	r1, #3
 8001022:	431c      	orrs	r4, r3
 8001024:	e75f      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8001026:	469a      	mov	sl, r3
 8001028:	2303      	movs	r3, #3
 800102a:	46d9      	mov	r9, fp
 800102c:	240c      	movs	r4, #12
 800102e:	9303      	str	r3, [sp, #12]
 8001030:	e73b      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001032:	2300      	movs	r3, #0
 8001034:	2480      	movs	r4, #128	@ 0x80
 8001036:	4698      	mov	r8, r3
 8001038:	2600      	movs	r6, #0
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <__aeabi_ddiv+0x21c>)
 800103c:	0324      	lsls	r4, r4, #12
 800103e:	e779      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001040:	2480      	movs	r4, #128	@ 0x80
 8001042:	465b      	mov	r3, fp
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	431c      	orrs	r4, r3
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	002e      	movs	r6, r5
 800104c:	4690      	mov	r8, r2
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001050:	0b24      	lsrs	r4, r4, #12
 8001052:	e76f      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	4223      	tst	r3, r4
 800105c:	d002      	beq.n	8001064 <__aeabi_ddiv+0x208>
 800105e:	465b      	mov	r3, fp
 8001060:	4223      	tst	r3, r4
 8001062:	d0f0      	beq.n	8001046 <__aeabi_ddiv+0x1ea>
 8001064:	2480      	movs	r4, #128	@ 0x80
 8001066:	464b      	mov	r3, r9
 8001068:	0324      	lsls	r4, r4, #12
 800106a:	431c      	orrs	r4, r3
 800106c:	0324      	lsls	r4, r4, #12
 800106e:	9e02      	ldr	r6, [sp, #8]
 8001070:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001072:	0b24      	lsrs	r4, r4, #12
 8001074:	e75e      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	000007ff 	.word	0x000007ff
 800107c:	fffffc01 	.word	0xfffffc01
 8001080:	0801c3dc 	.word	0x0801c3dc
 8001084:	fffff801 	.word	0xfffff801
 8001088:	000003f3 	.word	0x000003f3
 800108c:	fffffc0d 	.word	0xfffffc0d
 8001090:	45cb      	cmp	fp, r9
 8001092:	d200      	bcs.n	8001096 <__aeabi_ddiv+0x23a>
 8001094:	e0f8      	b.n	8001288 <__aeabi_ddiv+0x42c>
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x23e>
 8001098:	e0f3      	b.n	8001282 <__aeabi_ddiv+0x426>
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	469c      	mov	ip, r3
 80010a0:	4644      	mov	r4, r8
 80010a2:	4648      	mov	r0, r9
 80010a4:	2500      	movs	r5, #0
 80010a6:	44e2      	add	sl, ip
 80010a8:	465b      	mov	r3, fp
 80010aa:	0e17      	lsrs	r7, r2, #24
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	431f      	orrs	r7, r3
 80010b0:	0c19      	lsrs	r1, r3, #16
 80010b2:	043b      	lsls	r3, r7, #16
 80010b4:	0212      	lsls	r2, r2, #8
 80010b6:	9700      	str	r7, [sp, #0]
 80010b8:	0c1f      	lsrs	r7, r3, #16
 80010ba:	4691      	mov	r9, r2
 80010bc:	9102      	str	r1, [sp, #8]
 80010be:	9703      	str	r7, [sp, #12]
 80010c0:	f7ff f8b0 	bl	8000224 <__aeabi_uidivmod>
 80010c4:	0002      	movs	r2, r0
 80010c6:	437a      	muls	r2, r7
 80010c8:	040b      	lsls	r3, r1, #16
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	4680      	mov	r8, r0
 80010ce:	4319      	orrs	r1, r3
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d909      	bls.n	80010e8 <__aeabi_ddiv+0x28c>
 80010d4:	9f00      	ldr	r7, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	46bc      	mov	ip, r7
 80010da:	425b      	negs	r3, r3
 80010dc:	4461      	add	r1, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	44e0      	add	r8, ip
 80010e2:	428f      	cmp	r7, r1
 80010e4:	d800      	bhi.n	80010e8 <__aeabi_ddiv+0x28c>
 80010e6:	e15c      	b.n	80013a2 <__aeabi_ddiv+0x546>
 80010e8:	1a88      	subs	r0, r1, r2
 80010ea:	9902      	ldr	r1, [sp, #8]
 80010ec:	f7ff f89a 	bl	8000224 <__aeabi_uidivmod>
 80010f0:	9a03      	ldr	r2, [sp, #12]
 80010f2:	0424      	lsls	r4, r4, #16
 80010f4:	4342      	muls	r2, r0
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	0c24      	lsrs	r4, r4, #16
 80010fa:	0003      	movs	r3, r0
 80010fc:	430c      	orrs	r4, r1
 80010fe:	42a2      	cmp	r2, r4
 8001100:	d906      	bls.n	8001110 <__aeabi_ddiv+0x2b4>
 8001102:	9900      	ldr	r1, [sp, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	468c      	mov	ip, r1
 8001108:	4464      	add	r4, ip
 800110a:	42a1      	cmp	r1, r4
 800110c:	d800      	bhi.n	8001110 <__aeabi_ddiv+0x2b4>
 800110e:	e142      	b.n	8001396 <__aeabi_ddiv+0x53a>
 8001110:	1aa0      	subs	r0, r4, r2
 8001112:	4642      	mov	r2, r8
 8001114:	0412      	lsls	r2, r2, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	4693      	mov	fp, r2
 800111a:	464b      	mov	r3, r9
 800111c:	4659      	mov	r1, fp
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	001f      	movs	r7, r3
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	040b      	lsls	r3, r1, #16
 8001126:	4649      	mov	r1, r9
 8001128:	0409      	lsls	r1, r1, #16
 800112a:	0c09      	lsrs	r1, r1, #16
 800112c:	000c      	movs	r4, r1
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	435c      	muls	r4, r3
 8001132:	0c12      	lsrs	r2, r2, #16
 8001134:	437b      	muls	r3, r7
 8001136:	4688      	mov	r8, r1
 8001138:	4351      	muls	r1, r2
 800113a:	437a      	muls	r2, r7
 800113c:	0c27      	lsrs	r7, r4, #16
 800113e:	46bc      	mov	ip, r7
 8001140:	185b      	adds	r3, r3, r1
 8001142:	4463      	add	r3, ip
 8001144:	4299      	cmp	r1, r3
 8001146:	d903      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	468c      	mov	ip, r1
 800114e:	4462      	add	r2, ip
 8001150:	0c19      	lsrs	r1, r3, #16
 8001152:	0424      	lsls	r4, r4, #16
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	0c24      	lsrs	r4, r4, #16
 8001158:	188a      	adds	r2, r1, r2
 800115a:	191c      	adds	r4, r3, r4
 800115c:	4290      	cmp	r0, r2
 800115e:	d302      	bcc.n	8001166 <__aeabi_ddiv+0x30a>
 8001160:	d116      	bne.n	8001190 <__aeabi_ddiv+0x334>
 8001162:	42a5      	cmp	r5, r4
 8001164:	d214      	bcs.n	8001190 <__aeabi_ddiv+0x334>
 8001166:	465b      	mov	r3, fp
 8001168:	9f00      	ldr	r7, [sp, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	444d      	add	r5, r9
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	454d      	cmp	r5, r9
 8001172:	419b      	sbcs	r3, r3
 8001174:	46bc      	mov	ip, r7
 8001176:	425b      	negs	r3, r3
 8001178:	4463      	add	r3, ip
 800117a:	18c0      	adds	r0, r0, r3
 800117c:	4287      	cmp	r7, r0
 800117e:	d300      	bcc.n	8001182 <__aeabi_ddiv+0x326>
 8001180:	e102      	b.n	8001388 <__aeabi_ddiv+0x52c>
 8001182:	4282      	cmp	r2, r0
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x32c>
 8001186:	e129      	b.n	80013dc <__aeabi_ddiv+0x580>
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x330>
 800118a:	e124      	b.n	80013d6 <__aeabi_ddiv+0x57a>
 800118c:	9b05      	ldr	r3, [sp, #20]
 800118e:	469b      	mov	fp, r3
 8001190:	1b2c      	subs	r4, r5, r4
 8001192:	42a5      	cmp	r5, r4
 8001194:	41ad      	sbcs	r5, r5
 8001196:	9b00      	ldr	r3, [sp, #0]
 8001198:	1a80      	subs	r0, r0, r2
 800119a:	426d      	negs	r5, r5
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	4283      	cmp	r3, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x348>
 80011a2:	e10f      	b.n	80013c4 <__aeabi_ddiv+0x568>
 80011a4:	9902      	ldr	r1, [sp, #8]
 80011a6:	f7ff f83d 	bl	8000224 <__aeabi_uidivmod>
 80011aa:	9a03      	ldr	r2, [sp, #12]
 80011ac:	040b      	lsls	r3, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0c21      	lsrs	r1, r4, #16
 80011b2:	0005      	movs	r5, r0
 80011b4:	4319      	orrs	r1, r3
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x360>
 80011ba:	e0cb      	b.n	8001354 <__aeabi_ddiv+0x4f8>
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	9902      	ldr	r1, [sp, #8]
 80011c0:	f7ff f830 	bl	8000224 <__aeabi_uidivmod>
 80011c4:	9a03      	ldr	r2, [sp, #12]
 80011c6:	0424      	lsls	r4, r4, #16
 80011c8:	4342      	muls	r2, r0
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	0c24      	lsrs	r4, r4, #16
 80011ce:	0003      	movs	r3, r0
 80011d0:	430c      	orrs	r4, r1
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x37c>
 80011d6:	e0ca      	b.n	800136e <__aeabi_ddiv+0x512>
 80011d8:	4641      	mov	r1, r8
 80011da:	1aa4      	subs	r4, r4, r2
 80011dc:	042a      	lsls	r2, r5, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	9f04      	ldr	r7, [sp, #16]
 80011e2:	0413      	lsls	r3, r2, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	4359      	muls	r1, r3
 80011e8:	4640      	mov	r0, r8
 80011ea:	437b      	muls	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	0c15      	lsrs	r5, r2, #16
 80011f0:	4368      	muls	r0, r5
 80011f2:	0c0b      	lsrs	r3, r1, #16
 80011f4:	4484      	add	ip, r0
 80011f6:	4463      	add	r3, ip
 80011f8:	437d      	muls	r5, r7
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d903      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 80011fe:	2080      	movs	r0, #128	@ 0x80
 8001200:	0240      	lsls	r0, r0, #9
 8001202:	4684      	mov	ip, r0
 8001204:	4465      	add	r5, ip
 8001206:	0c18      	lsrs	r0, r3, #16
 8001208:	0409      	lsls	r1, r1, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	1940      	adds	r0, r0, r5
 8001210:	185b      	adds	r3, r3, r1
 8001212:	4284      	cmp	r4, r0
 8001214:	d327      	bcc.n	8001266 <__aeabi_ddiv+0x40a>
 8001216:	d023      	beq.n	8001260 <__aeabi_ddiv+0x404>
 8001218:	2301      	movs	r3, #1
 800121a:	0035      	movs	r5, r6
 800121c:	431a      	orrs	r2, r3
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <__aeabi_ddiv+0x614>)
 8001220:	4453      	add	r3, sl
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd60      	ble.n	80012e8 <__aeabi_ddiv+0x48c>
 8001226:	0751      	lsls	r1, r2, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x3d0>
 800122a:	e086      	b.n	800133a <__aeabi_ddiv+0x4de>
 800122c:	002e      	movs	r6, r5
 800122e:	08d1      	lsrs	r1, r2, #3
 8001230:	465a      	mov	r2, fp
 8001232:	01d2      	lsls	r2, r2, #7
 8001234:	d506      	bpl.n	8001244 <__aeabi_ddiv+0x3e8>
 8001236:	465a      	mov	r2, fp
 8001238:	4b8e      	ldr	r3, [pc, #568]	@ (8001474 <__aeabi_ddiv+0x618>)
 800123a:	401a      	ands	r2, r3
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	4693      	mov	fp, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4453      	add	r3, sl
 8001244:	4a8c      	ldr	r2, [pc, #560]	@ (8001478 <__aeabi_ddiv+0x61c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	dd00      	ble.n	800124c <__aeabi_ddiv+0x3f0>
 800124a:	e680      	b.n	8000f4e <__aeabi_ddiv+0xf2>
 800124c:	465a      	mov	r2, fp
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	430a      	orrs	r2, r1
 8001252:	4690      	mov	r8, r2
 8001254:	465a      	mov	r2, fp
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	0254      	lsls	r4, r2, #9
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	0d5b      	lsrs	r3, r3, #21
 800125e:	e669      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001260:	0035      	movs	r5, r6
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0db      	beq.n	800121e <__aeabi_ddiv+0x3c2>
 8001266:	9d00      	ldr	r5, [sp, #0]
 8001268:	1e51      	subs	r1, r2, #1
 800126a:	46ac      	mov	ip, r5
 800126c:	4464      	add	r4, ip
 800126e:	42ac      	cmp	r4, r5
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x418>
 8001272:	e09e      	b.n	80013b2 <__aeabi_ddiv+0x556>
 8001274:	4284      	cmp	r4, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x41e>
 8001278:	e0e1      	b.n	800143e <__aeabi_ddiv+0x5e2>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x422>
 800127c:	e0ee      	b.n	800145c <__aeabi_ddiv+0x600>
 800127e:	000a      	movs	r2, r1
 8001280:	e7ca      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 8001282:	4542      	cmp	r2, r8
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x42c>
 8001286:	e708      	b.n	800109a <__aeabi_ddiv+0x23e>
 8001288:	464b      	mov	r3, r9
 800128a:	07dc      	lsls	r4, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	4643      	mov	r3, r8
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	431c      	orrs	r4, r3
 8001294:	4643      	mov	r3, r8
 8001296:	07dd      	lsls	r5, r3, #31
 8001298:	e706      	b.n	80010a8 <__aeabi_ddiv+0x24c>
 800129a:	f7ff f8f1 	bl	8000480 <__clzsi2>
 800129e:	2315      	movs	r3, #21
 80012a0:	469c      	mov	ip, r3
 80012a2:	4484      	add	ip, r0
 80012a4:	0002      	movs	r2, r0
 80012a6:	4663      	mov	r3, ip
 80012a8:	3220      	adds	r2, #32
 80012aa:	2b1c      	cmp	r3, #28
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x454>
 80012ae:	e692      	b.n	8000fd6 <__aeabi_ddiv+0x17a>
 80012b0:	0023      	movs	r3, r4
 80012b2:	3808      	subs	r0, #8
 80012b4:	4083      	lsls	r3, r0
 80012b6:	4699      	mov	r9, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	4698      	mov	r8, r3
 80012bc:	e69a      	b.n	8000ff4 <__aeabi_ddiv+0x198>
 80012be:	f7ff f8df 	bl	8000480 <__clzsi2>
 80012c2:	0002      	movs	r2, r0
 80012c4:	0003      	movs	r3, r0
 80012c6:	3215      	adds	r2, #21
 80012c8:	3320      	adds	r3, #32
 80012ca:	2a1c      	cmp	r2, #28
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_ddiv+0x474>
 80012ce:	e65f      	b.n	8000f90 <__aeabi_ddiv+0x134>
 80012d0:	9900      	ldr	r1, [sp, #0]
 80012d2:	3808      	subs	r0, #8
 80012d4:	4081      	lsls	r1, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	468b      	mov	fp, r1
 80012da:	e666      	b.n	8000faa <__aeabi_ddiv+0x14e>
 80012dc:	2200      	movs	r2, #0
 80012de:	002e      	movs	r6, r5
 80012e0:	2400      	movs	r4, #0
 80012e2:	4690      	mov	r8, r2
 80012e4:	4b65      	ldr	r3, [pc, #404]	@ (800147c <__aeabi_ddiv+0x620>)
 80012e6:	e625      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 80012e8:	002e      	movs	r6, r5
 80012ea:	2101      	movs	r1, #1
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	2938      	cmp	r1, #56	@ 0x38
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_ddiv+0x498>
 80012f2:	e61b      	b.n	8000f2c <__aeabi_ddiv+0xd0>
 80012f4:	291f      	cmp	r1, #31
 80012f6:	dc7e      	bgt.n	80013f6 <__aeabi_ddiv+0x59a>
 80012f8:	4861      	ldr	r0, [pc, #388]	@ (8001480 <__aeabi_ddiv+0x624>)
 80012fa:	0014      	movs	r4, r2
 80012fc:	4450      	add	r0, sl
 80012fe:	465b      	mov	r3, fp
 8001300:	4082      	lsls	r2, r0
 8001302:	4083      	lsls	r3, r0
 8001304:	40cc      	lsrs	r4, r1
 8001306:	1e50      	subs	r0, r2, #1
 8001308:	4182      	sbcs	r2, r0
 800130a:	4323      	orrs	r3, r4
 800130c:	431a      	orrs	r2, r3
 800130e:	465b      	mov	r3, fp
 8001310:	40cb      	lsrs	r3, r1
 8001312:	0751      	lsls	r1, r2, #29
 8001314:	d009      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 8001316:	210f      	movs	r1, #15
 8001318:	4011      	ands	r1, r2
 800131a:	2904      	cmp	r1, #4
 800131c:	d005      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 800131e:	1d11      	adds	r1, r2, #4
 8001320:	4291      	cmp	r1, r2
 8001322:	4192      	sbcs	r2, r2
 8001324:	4252      	negs	r2, r2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	000a      	movs	r2, r1
 800132a:	0219      	lsls	r1, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_ddiv+0x4d4>
 800132e:	e09b      	b.n	8001468 <__aeabi_ddiv+0x60c>
 8001330:	2200      	movs	r2, #0
 8001332:	2301      	movs	r3, #1
 8001334:	2400      	movs	r4, #0
 8001336:	4690      	mov	r8, r2
 8001338:	e5fc      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800133a:	210f      	movs	r1, #15
 800133c:	4011      	ands	r1, r2
 800133e:	2904      	cmp	r1, #4
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x4e8>
 8001342:	e773      	b.n	800122c <__aeabi_ddiv+0x3d0>
 8001344:	1d11      	adds	r1, r2, #4
 8001346:	4291      	cmp	r1, r2
 8001348:	4192      	sbcs	r2, r2
 800134a:	4252      	negs	r2, r2
 800134c:	002e      	movs	r6, r5
 800134e:	08c9      	lsrs	r1, r1, #3
 8001350:	4493      	add	fp, r2
 8001352:	e76d      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 8001354:	9b00      	ldr	r3, [sp, #0]
 8001356:	3d01      	subs	r5, #1
 8001358:	469c      	mov	ip, r3
 800135a:	4461      	add	r1, ip
 800135c:	428b      	cmp	r3, r1
 800135e:	d900      	bls.n	8001362 <__aeabi_ddiv+0x506>
 8001360:	e72c      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001362:	428a      	cmp	r2, r1
 8001364:	d800      	bhi.n	8001368 <__aeabi_ddiv+0x50c>
 8001366:	e729      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001368:	1e85      	subs	r5, r0, #2
 800136a:	4461      	add	r1, ip
 800136c:	e726      	b.n	80011bc <__aeabi_ddiv+0x360>
 800136e:	9900      	ldr	r1, [sp, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	468c      	mov	ip, r1
 8001374:	4464      	add	r4, ip
 8001376:	42a1      	cmp	r1, r4
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x520>
 800137a:	e72d      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 800137c:	42a2      	cmp	r2, r4
 800137e:	d800      	bhi.n	8001382 <__aeabi_ddiv+0x526>
 8001380:	e72a      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001382:	1e83      	subs	r3, r0, #2
 8001384:	4464      	add	r4, ip
 8001386:	e727      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001388:	4287      	cmp	r7, r0
 800138a:	d000      	beq.n	800138e <__aeabi_ddiv+0x532>
 800138c:	e6fe      	b.n	800118c <__aeabi_ddiv+0x330>
 800138e:	45a9      	cmp	r9, r5
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x538>
 8001392:	e6fb      	b.n	800118c <__aeabi_ddiv+0x330>
 8001394:	e6f5      	b.n	8001182 <__aeabi_ddiv+0x326>
 8001396:	42a2      	cmp	r2, r4
 8001398:	d800      	bhi.n	800139c <__aeabi_ddiv+0x540>
 800139a:	e6b9      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 800139c:	1e83      	subs	r3, r0, #2
 800139e:	4464      	add	r4, ip
 80013a0:	e6b6      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x54c>
 80013a6:	e69f      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1e83      	subs	r3, r0, #2
 80013ac:	4698      	mov	r8, r3
 80013ae:	4461      	add	r1, ip
 80013b0:	e69a      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013b2:	000a      	movs	r2, r1
 80013b4:	4284      	cmp	r4, r0
 80013b6:	d000      	beq.n	80013ba <__aeabi_ddiv+0x55e>
 80013b8:	e72e      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013ba:	454b      	cmp	r3, r9
 80013bc:	d000      	beq.n	80013c0 <__aeabi_ddiv+0x564>
 80013be:	e72b      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013c0:	0035      	movs	r5, r6
 80013c2:	e72c      	b.n	800121e <__aeabi_ddiv+0x3c2>
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <__aeabi_ddiv+0x614>)
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <__aeabi_ddiv+0x628>)
 80013c8:	4453      	add	r3, sl
 80013ca:	4592      	cmp	sl, r2
 80013cc:	db43      	blt.n	8001456 <__aeabi_ddiv+0x5fa>
 80013ce:	2201      	movs	r2, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	4493      	add	fp, r2
 80013d4:	e72c      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	d800      	bhi.n	80013dc <__aeabi_ddiv+0x580>
 80013da:	e6d7      	b.n	800118c <__aeabi_ddiv+0x330>
 80013dc:	2302      	movs	r3, #2
 80013de:	425b      	negs	r3, r3
 80013e0:	469c      	mov	ip, r3
 80013e2:	9900      	ldr	r1, [sp, #0]
 80013e4:	444d      	add	r5, r9
 80013e6:	454d      	cmp	r5, r9
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	44e3      	add	fp, ip
 80013ec:	468c      	mov	ip, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	4463      	add	r3, ip
 80013f2:	18c0      	adds	r0, r0, r3
 80013f4:	e6cc      	b.n	8001190 <__aeabi_ddiv+0x334>
 80013f6:	201f      	movs	r0, #31
 80013f8:	4240      	negs	r0, r0
 80013fa:	1ac3      	subs	r3, r0, r3
 80013fc:	4658      	mov	r0, fp
 80013fe:	40d8      	lsrs	r0, r3
 8001400:	2920      	cmp	r1, #32
 8001402:	d004      	beq.n	800140e <__aeabi_ddiv+0x5b2>
 8001404:	4659      	mov	r1, fp
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <__aeabi_ddiv+0x62c>)
 8001408:	4453      	add	r3, sl
 800140a:	4099      	lsls	r1, r3
 800140c:	430a      	orrs	r2, r1
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	2307      	movs	r3, #7
 8001414:	0019      	movs	r1, r3
 8001416:	4302      	orrs	r2, r0
 8001418:	2400      	movs	r4, #0
 800141a:	4011      	ands	r1, r2
 800141c:	4213      	tst	r3, r2
 800141e:	d009      	beq.n	8001434 <__aeabi_ddiv+0x5d8>
 8001420:	3308      	adds	r3, #8
 8001422:	4013      	ands	r3, r2
 8001424:	2b04      	cmp	r3, #4
 8001426:	d01d      	beq.n	8001464 <__aeabi_ddiv+0x608>
 8001428:	1d13      	adds	r3, r2, #4
 800142a:	4293      	cmp	r3, r2
 800142c:	4189      	sbcs	r1, r1
 800142e:	001a      	movs	r2, r3
 8001430:	4249      	negs	r1, r1
 8001432:	0749      	lsls	r1, r1, #29
 8001434:	08d2      	lsrs	r2, r2, #3
 8001436:	430a      	orrs	r2, r1
 8001438:	4690      	mov	r8, r2
 800143a:	2300      	movs	r3, #0
 800143c:	e57a      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800143e:	4649      	mov	r1, r9
 8001440:	9f00      	ldr	r7, [sp, #0]
 8001442:	004d      	lsls	r5, r1, #1
 8001444:	454d      	cmp	r5, r9
 8001446:	4189      	sbcs	r1, r1
 8001448:	46bc      	mov	ip, r7
 800144a:	4249      	negs	r1, r1
 800144c:	4461      	add	r1, ip
 800144e:	46a9      	mov	r9, r5
 8001450:	3a02      	subs	r2, #2
 8001452:	1864      	adds	r4, r4, r1
 8001454:	e7ae      	b.n	80013b4 <__aeabi_ddiv+0x558>
 8001456:	2201      	movs	r2, #1
 8001458:	4252      	negs	r2, r2
 800145a:	e746      	b.n	80012ea <__aeabi_ddiv+0x48e>
 800145c:	4599      	cmp	r9, r3
 800145e:	d3ee      	bcc.n	800143e <__aeabi_ddiv+0x5e2>
 8001460:	000a      	movs	r2, r1
 8001462:	e7aa      	b.n	80013ba <__aeabi_ddiv+0x55e>
 8001464:	2100      	movs	r1, #0
 8001466:	e7e5      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001468:	0759      	lsls	r1, r3, #29
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	0b1c      	lsrs	r4, r3, #12
 800146e:	e7e1      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001470:	000003ff 	.word	0x000003ff
 8001474:	feffffff 	.word	0xfeffffff
 8001478:	000007fe 	.word	0x000007fe
 800147c:	000007ff 	.word	0x000007ff
 8001480:	0000041e 	.word	0x0000041e
 8001484:	fffffc02 	.word	0xfffffc02
 8001488:	0000043e 	.word	0x0000043e

0800148c <__eqdf2>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	46de      	mov	lr, fp
 8001492:	464e      	mov	r6, r9
 8001494:	4645      	mov	r5, r8
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	000d      	movs	r5, r1
 800149a:	0004      	movs	r4, r0
 800149c:	0fe8      	lsrs	r0, r5, #31
 800149e:	4683      	mov	fp, r0
 80014a0:	0309      	lsls	r1, r1, #12
 80014a2:	0fd8      	lsrs	r0, r3, #31
 80014a4:	0b09      	lsrs	r1, r1, #12
 80014a6:	4682      	mov	sl, r0
 80014a8:	4819      	ldr	r0, [pc, #100]	@ (8001510 <__eqdf2+0x84>)
 80014aa:	468c      	mov	ip, r1
 80014ac:	031f      	lsls	r7, r3, #12
 80014ae:	0069      	lsls	r1, r5, #1
 80014b0:	005e      	lsls	r6, r3, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	0b3f      	lsrs	r7, r7, #12
 80014b6:	0d76      	lsrs	r6, r6, #21
 80014b8:	4281      	cmp	r1, r0
 80014ba:	d018      	beq.n	80014ee <__eqdf2+0x62>
 80014bc:	4286      	cmp	r6, r0
 80014be:	d00f      	beq.n	80014e0 <__eqdf2+0x54>
 80014c0:	2001      	movs	r0, #1
 80014c2:	42b1      	cmp	r1, r6
 80014c4:	d10d      	bne.n	80014e2 <__eqdf2+0x56>
 80014c6:	45bc      	cmp	ip, r7
 80014c8:	d10b      	bne.n	80014e2 <__eqdf2+0x56>
 80014ca:	4294      	cmp	r4, r2
 80014cc:	d109      	bne.n	80014e2 <__eqdf2+0x56>
 80014ce:	45d3      	cmp	fp, sl
 80014d0:	d01c      	beq.n	800150c <__eqdf2+0x80>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d105      	bne.n	80014e2 <__eqdf2+0x56>
 80014d6:	4660      	mov	r0, ip
 80014d8:	4320      	orrs	r0, r4
 80014da:	1e43      	subs	r3, r0, #1
 80014dc:	4198      	sbcs	r0, r3
 80014de:	e000      	b.n	80014e2 <__eqdf2+0x56>
 80014e0:	2001      	movs	r0, #1
 80014e2:	bcf0      	pop	{r4, r5, r6, r7}
 80014e4:	46bb      	mov	fp, r7
 80014e6:	46b2      	mov	sl, r6
 80014e8:	46a9      	mov	r9, r5
 80014ea:	46a0      	mov	r8, r4
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	2001      	movs	r0, #1
 80014f0:	428e      	cmp	r6, r1
 80014f2:	d1f6      	bne.n	80014e2 <__eqdf2+0x56>
 80014f4:	4661      	mov	r1, ip
 80014f6:	4339      	orrs	r1, r7
 80014f8:	000f      	movs	r7, r1
 80014fa:	4317      	orrs	r7, r2
 80014fc:	4327      	orrs	r7, r4
 80014fe:	d1f0      	bne.n	80014e2 <__eqdf2+0x56>
 8001500:	465b      	mov	r3, fp
 8001502:	4652      	mov	r2, sl
 8001504:	1a98      	subs	r0, r3, r2
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	4198      	sbcs	r0, r3
 800150a:	e7ea      	b.n	80014e2 <__eqdf2+0x56>
 800150c:	2000      	movs	r0, #0
 800150e:	e7e8      	b.n	80014e2 <__eqdf2+0x56>
 8001510:	000007ff 	.word	0x000007ff

08001514 <__gedf2>:
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	4657      	mov	r7, sl
 8001518:	464e      	mov	r6, r9
 800151a:	4645      	mov	r5, r8
 800151c:	46de      	mov	lr, fp
 800151e:	b5e0      	push	{r5, r6, r7, lr}
 8001520:	000d      	movs	r5, r1
 8001522:	030e      	lsls	r6, r1, #12
 8001524:	0049      	lsls	r1, r1, #1
 8001526:	0d49      	lsrs	r1, r1, #21
 8001528:	468a      	mov	sl, r1
 800152a:	0fdf      	lsrs	r7, r3, #31
 800152c:	0fe9      	lsrs	r1, r5, #31
 800152e:	46bc      	mov	ip, r7
 8001530:	b083      	sub	sp, #12
 8001532:	4f2f      	ldr	r7, [pc, #188]	@ (80015f0 <__gedf2+0xdc>)
 8001534:	0004      	movs	r4, r0
 8001536:	4680      	mov	r8, r0
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	0058      	lsls	r0, r3, #1
 800153c:	0319      	lsls	r1, r3, #12
 800153e:	4691      	mov	r9, r2
 8001540:	0b36      	lsrs	r6, r6, #12
 8001542:	0b09      	lsrs	r1, r1, #12
 8001544:	0d40      	lsrs	r0, r0, #21
 8001546:	45ba      	cmp	sl, r7
 8001548:	d01d      	beq.n	8001586 <__gedf2+0x72>
 800154a:	42b8      	cmp	r0, r7
 800154c:	d00d      	beq.n	800156a <__gedf2+0x56>
 800154e:	4657      	mov	r7, sl
 8001550:	2f00      	cmp	r7, #0
 8001552:	d12a      	bne.n	80015aa <__gedf2+0x96>
 8001554:	4334      	orrs	r4, r6
 8001556:	2800      	cmp	r0, #0
 8001558:	d124      	bne.n	80015a4 <__gedf2+0x90>
 800155a:	430a      	orrs	r2, r1
 800155c:	d036      	beq.n	80015cc <__gedf2+0xb8>
 800155e:	2c00      	cmp	r4, #0
 8001560:	d141      	bne.n	80015e6 <__gedf2+0xd2>
 8001562:	4663      	mov	r3, ip
 8001564:	0058      	lsls	r0, r3, #1
 8001566:	3801      	subs	r0, #1
 8001568:	e015      	b.n	8001596 <__gedf2+0x82>
 800156a:	4311      	orrs	r1, r2
 800156c:	d138      	bne.n	80015e0 <__gedf2+0xcc>
 800156e:	4653      	mov	r3, sl
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <__gedf2+0x64>
 8001574:	4326      	orrs	r6, r4
 8001576:	d0f4      	beq.n	8001562 <__gedf2+0x4e>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	4563      	cmp	r3, ip
 800157c:	d107      	bne.n	800158e <__gedf2+0x7a>
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	3801      	subs	r0, #1
 8001584:	e007      	b.n	8001596 <__gedf2+0x82>
 8001586:	4326      	orrs	r6, r4
 8001588:	d12a      	bne.n	80015e0 <__gedf2+0xcc>
 800158a:	4550      	cmp	r0, sl
 800158c:	d021      	beq.n	80015d2 <__gedf2+0xbe>
 800158e:	2001      	movs	r0, #1
 8001590:	9b01      	ldr	r3, [sp, #4]
 8001592:	425f      	negs	r7, r3
 8001594:	4338      	orrs	r0, r7
 8001596:	b003      	add	sp, #12
 8001598:	bcf0      	pop	{r4, r5, r6, r7}
 800159a:	46bb      	mov	fp, r7
 800159c:	46b2      	mov	sl, r6
 800159e:	46a9      	mov	r9, r5
 80015a0:	46a0      	mov	r8, r4
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a4:	2c00      	cmp	r4, #0
 80015a6:	d0dc      	beq.n	8001562 <__gedf2+0x4e>
 80015a8:	e7e6      	b.n	8001578 <__gedf2+0x64>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d0ef      	beq.n	800158e <__gedf2+0x7a>
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	4563      	cmp	r3, ip
 80015b2:	d1ec      	bne.n	800158e <__gedf2+0x7a>
 80015b4:	4582      	cmp	sl, r0
 80015b6:	dcea      	bgt.n	800158e <__gedf2+0x7a>
 80015b8:	dbe1      	blt.n	800157e <__gedf2+0x6a>
 80015ba:	428e      	cmp	r6, r1
 80015bc:	d8e7      	bhi.n	800158e <__gedf2+0x7a>
 80015be:	d1de      	bne.n	800157e <__gedf2+0x6a>
 80015c0:	45c8      	cmp	r8, r9
 80015c2:	d8e4      	bhi.n	800158e <__gedf2+0x7a>
 80015c4:	2000      	movs	r0, #0
 80015c6:	45c8      	cmp	r8, r9
 80015c8:	d2e5      	bcs.n	8001596 <__gedf2+0x82>
 80015ca:	e7d8      	b.n	800157e <__gedf2+0x6a>
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0e2      	beq.n	8001596 <__gedf2+0x82>
 80015d0:	e7dd      	b.n	800158e <__gedf2+0x7a>
 80015d2:	4311      	orrs	r1, r2
 80015d4:	d104      	bne.n	80015e0 <__gedf2+0xcc>
 80015d6:	9b01      	ldr	r3, [sp, #4]
 80015d8:	4563      	cmp	r3, ip
 80015da:	d1d8      	bne.n	800158e <__gedf2+0x7a>
 80015dc:	2000      	movs	r0, #0
 80015de:	e7da      	b.n	8001596 <__gedf2+0x82>
 80015e0:	2002      	movs	r0, #2
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7d7      	b.n	8001596 <__gedf2+0x82>
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	4563      	cmp	r3, ip
 80015ea:	d0e6      	beq.n	80015ba <__gedf2+0xa6>
 80015ec:	e7cf      	b.n	800158e <__gedf2+0x7a>
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff

080015f4 <__ledf2>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4657      	mov	r7, sl
 80015f8:	464e      	mov	r6, r9
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	b5e0      	push	{r5, r6, r7, lr}
 8001600:	000d      	movs	r5, r1
 8001602:	030e      	lsls	r6, r1, #12
 8001604:	0049      	lsls	r1, r1, #1
 8001606:	0d49      	lsrs	r1, r1, #21
 8001608:	468a      	mov	sl, r1
 800160a:	0fdf      	lsrs	r7, r3, #31
 800160c:	0fe9      	lsrs	r1, r5, #31
 800160e:	46bc      	mov	ip, r7
 8001610:	b083      	sub	sp, #12
 8001612:	4f2e      	ldr	r7, [pc, #184]	@ (80016cc <__ledf2+0xd8>)
 8001614:	0004      	movs	r4, r0
 8001616:	4680      	mov	r8, r0
 8001618:	9101      	str	r1, [sp, #4]
 800161a:	0058      	lsls	r0, r3, #1
 800161c:	0319      	lsls	r1, r3, #12
 800161e:	4691      	mov	r9, r2
 8001620:	0b36      	lsrs	r6, r6, #12
 8001622:	0b09      	lsrs	r1, r1, #12
 8001624:	0d40      	lsrs	r0, r0, #21
 8001626:	45ba      	cmp	sl, r7
 8001628:	d01e      	beq.n	8001668 <__ledf2+0x74>
 800162a:	42b8      	cmp	r0, r7
 800162c:	d00d      	beq.n	800164a <__ledf2+0x56>
 800162e:	4657      	mov	r7, sl
 8001630:	2f00      	cmp	r7, #0
 8001632:	d127      	bne.n	8001684 <__ledf2+0x90>
 8001634:	4334      	orrs	r4, r6
 8001636:	2800      	cmp	r0, #0
 8001638:	d133      	bne.n	80016a2 <__ledf2+0xae>
 800163a:	430a      	orrs	r2, r1
 800163c:	d034      	beq.n	80016a8 <__ledf2+0xb4>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d140      	bne.n	80016c4 <__ledf2+0xd0>
 8001642:	4663      	mov	r3, ip
 8001644:	0058      	lsls	r0, r3, #1
 8001646:	3801      	subs	r0, #1
 8001648:	e015      	b.n	8001676 <__ledf2+0x82>
 800164a:	4311      	orrs	r1, r2
 800164c:	d112      	bne.n	8001674 <__ledf2+0x80>
 800164e:	4653      	mov	r3, sl
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <__ledf2+0x64>
 8001654:	4326      	orrs	r6, r4
 8001656:	d0f4      	beq.n	8001642 <__ledf2+0x4e>
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	4563      	cmp	r3, ip
 800165c:	d01d      	beq.n	800169a <__ledf2+0xa6>
 800165e:	2001      	movs	r0, #1
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	425f      	negs	r7, r3
 8001664:	4338      	orrs	r0, r7
 8001666:	e006      	b.n	8001676 <__ledf2+0x82>
 8001668:	4326      	orrs	r6, r4
 800166a:	d103      	bne.n	8001674 <__ledf2+0x80>
 800166c:	4550      	cmp	r0, sl
 800166e:	d1f6      	bne.n	800165e <__ledf2+0x6a>
 8001670:	4311      	orrs	r1, r2
 8001672:	d01c      	beq.n	80016ae <__ledf2+0xba>
 8001674:	2002      	movs	r0, #2
 8001676:	b003      	add	sp, #12
 8001678:	bcf0      	pop	{r4, r5, r6, r7}
 800167a:	46bb      	mov	fp, r7
 800167c:	46b2      	mov	sl, r6
 800167e:	46a9      	mov	r9, r5
 8001680:	46a0      	mov	r8, r4
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2800      	cmp	r0, #0
 8001686:	d0ea      	beq.n	800165e <__ledf2+0x6a>
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	4563      	cmp	r3, ip
 800168c:	d1e7      	bne.n	800165e <__ledf2+0x6a>
 800168e:	4582      	cmp	sl, r0
 8001690:	dce5      	bgt.n	800165e <__ledf2+0x6a>
 8001692:	db02      	blt.n	800169a <__ledf2+0xa6>
 8001694:	428e      	cmp	r6, r1
 8001696:	d8e2      	bhi.n	800165e <__ledf2+0x6a>
 8001698:	d00e      	beq.n	80016b8 <__ledf2+0xc4>
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0058      	lsls	r0, r3, #1
 800169e:	3801      	subs	r0, #1
 80016a0:	e7e9      	b.n	8001676 <__ledf2+0x82>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d0cd      	beq.n	8001642 <__ledf2+0x4e>
 80016a6:	e7d7      	b.n	8001658 <__ledf2+0x64>
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d0e4      	beq.n	8001676 <__ledf2+0x82>
 80016ac:	e7d7      	b.n	800165e <__ledf2+0x6a>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	2000      	movs	r0, #0
 80016b2:	4563      	cmp	r3, ip
 80016b4:	d0df      	beq.n	8001676 <__ledf2+0x82>
 80016b6:	e7d2      	b.n	800165e <__ledf2+0x6a>
 80016b8:	45c8      	cmp	r8, r9
 80016ba:	d8d0      	bhi.n	800165e <__ledf2+0x6a>
 80016bc:	2000      	movs	r0, #0
 80016be:	45c8      	cmp	r8, r9
 80016c0:	d2d9      	bcs.n	8001676 <__ledf2+0x82>
 80016c2:	e7ea      	b.n	800169a <__ledf2+0xa6>
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	4563      	cmp	r3, ip
 80016c8:	d0e4      	beq.n	8001694 <__ledf2+0xa0>
 80016ca:	e7c8      	b.n	800165e <__ledf2+0x6a>
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__aeabi_dmul>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4657      	mov	r7, sl
 80016d4:	464e      	mov	r6, r9
 80016d6:	46de      	mov	lr, fp
 80016d8:	4645      	mov	r5, r8
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	001f      	movs	r7, r3
 80016de:	030b      	lsls	r3, r1, #12
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	0016      	movs	r6, r2
 80016e4:	469a      	mov	sl, r3
 80016e6:	0fca      	lsrs	r2, r1, #31
 80016e8:	004b      	lsls	r3, r1, #1
 80016ea:	0004      	movs	r4, r0
 80016ec:	4691      	mov	r9, r2
 80016ee:	b085      	sub	sp, #20
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0x26>
 80016f4:	e1cf      	b.n	8001a96 <__aeabi_dmul+0x3c6>
 80016f6:	4acd      	ldr	r2, [pc, #820]	@ (8001a2c <__aeabi_dmul+0x35c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d055      	beq.n	80017a8 <__aeabi_dmul+0xd8>
 80016fc:	4651      	mov	r1, sl
 80016fe:	0f42      	lsrs	r2, r0, #29
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0409      	lsls	r1, r1, #16
 8001708:	4311      	orrs	r1, r2
 800170a:	00c2      	lsls	r2, r0, #3
 800170c:	4690      	mov	r8, r2
 800170e:	4ac8      	ldr	r2, [pc, #800]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001710:	468a      	mov	sl, r1
 8001712:	4693      	mov	fp, r2
 8001714:	449b      	add	fp, r3
 8001716:	2300      	movs	r3, #0
 8001718:	2500      	movs	r5, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	033c      	lsls	r4, r7, #12
 800171e:	007b      	lsls	r3, r7, #1
 8001720:	0ffa      	lsrs	r2, r7, #31
 8001722:	9601      	str	r6, [sp, #4]
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x5e>
 800172c:	e188      	b.n	8001a40 <__aeabi_dmul+0x370>
 800172e:	4abf      	ldr	r2, [pc, #764]	@ (8001a2c <__aeabi_dmul+0x35c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x66>
 8001734:	e092      	b.n	800185c <__aeabi_dmul+0x18c>
 8001736:	4abe      	ldr	r2, [pc, #760]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001738:	4694      	mov	ip, r2
 800173a:	4463      	add	r3, ip
 800173c:	449b      	add	fp, r3
 800173e:	2d0a      	cmp	r5, #10
 8001740:	dc42      	bgt.n	80017c8 <__aeabi_dmul+0xf8>
 8001742:	00e4      	lsls	r4, r4, #3
 8001744:	0f73      	lsrs	r3, r6, #29
 8001746:	4323      	orrs	r3, r4
 8001748:	2480      	movs	r4, #128	@ 0x80
 800174a:	4649      	mov	r1, r9
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	431c      	orrs	r4, r3
 8001750:	00f3      	lsls	r3, r6, #3
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b00      	ldr	r3, [sp, #0]
 8001756:	2000      	movs	r0, #0
 8001758:	4059      	eors	r1, r3
 800175a:	b2cb      	uxtb	r3, r1
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2d02      	cmp	r5, #2
 8001760:	dc00      	bgt.n	8001764 <__aeabi_dmul+0x94>
 8001762:	e094      	b.n	800188e <__aeabi_dmul+0x1be>
 8001764:	2301      	movs	r3, #1
 8001766:	40ab      	lsls	r3, r5
 8001768:	001d      	movs	r5, r3
 800176a:	23a6      	movs	r3, #166	@ 0xa6
 800176c:	002a      	movs	r2, r5
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	401a      	ands	r2, r3
 8001772:	421d      	tst	r5, r3
 8001774:	d000      	beq.n	8001778 <__aeabi_dmul+0xa8>
 8001776:	e229      	b.n	8001bcc <__aeabi_dmul+0x4fc>
 8001778:	2390      	movs	r3, #144	@ 0x90
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	421d      	tst	r5, r3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0xb2>
 8001780:	e24d      	b.n	8001c1e <__aeabi_dmul+0x54e>
 8001782:	2300      	movs	r3, #0
 8001784:	2480      	movs	r4, #128	@ 0x80
 8001786:	4699      	mov	r9, r3
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800178c:	0010      	movs	r0, r2
 800178e:	464a      	mov	r2, r9
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4323      	orrs	r3, r4
 8001794:	07d2      	lsls	r2, r2, #31
 8001796:	4313      	orrs	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	b005      	add	sp, #20
 800179c:	bcf0      	pop	{r4, r5, r6, r7}
 800179e:	46bb      	mov	fp, r7
 80017a0:	46b2      	mov	sl, r6
 80017a2:	46a9      	mov	r9, r5
 80017a4:	46a0      	mov	r8, r4
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	4652      	mov	r2, sl
 80017aa:	4302      	orrs	r2, r0
 80017ac:	4690      	mov	r8, r2
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dmul+0xe2>
 80017b0:	e1ac      	b.n	8001b0c <__aeabi_dmul+0x43c>
 80017b2:	469b      	mov	fp, r3
 80017b4:	2302      	movs	r3, #2
 80017b6:	4692      	mov	sl, r2
 80017b8:	2508      	movs	r5, #8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	e7ae      	b.n	800171c <__aeabi_dmul+0x4c>
 80017be:	9b00      	ldr	r3, [sp, #0]
 80017c0:	46a2      	mov	sl, r4
 80017c2:	4699      	mov	r9, r3
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	4698      	mov	r8, r3
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dmul+0x100>
 80017ce:	e1ca      	b.n	8001b66 <__aeabi_dmul+0x496>
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dmul+0x106>
 80017d4:	e192      	b.n	8001afc <__aeabi_dmul+0x42c>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d110      	bne.n	80017fc <__aeabi_dmul+0x12c>
 80017da:	2300      	movs	r3, #0
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	e7d4      	b.n	800178c <__aeabi_dmul+0xbc>
 80017e2:	2201      	movs	r2, #1
 80017e4:	087b      	lsrs	r3, r7, #1
 80017e6:	403a      	ands	r2, r7
 80017e8:	4313      	orrs	r3, r2
 80017ea:	4652      	mov	r2, sl
 80017ec:	07d2      	lsls	r2, r2, #31
 80017ee:	4313      	orrs	r3, r2
 80017f0:	4698      	mov	r8, r3
 80017f2:	4653      	mov	r3, sl
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	469a      	mov	sl, r3
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	4699      	mov	r9, r3
 80017fc:	465b      	mov	r3, fp
 80017fe:	1c58      	adds	r0, r3, #1
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	445b      	add	r3, fp
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc00      	bgt.n	800180c <__aeabi_dmul+0x13c>
 800180a:	e1b1      	b.n	8001b70 <__aeabi_dmul+0x4a0>
 800180c:	4642      	mov	r2, r8
 800180e:	0752      	lsls	r2, r2, #29
 8001810:	d00b      	beq.n	800182a <__aeabi_dmul+0x15a>
 8001812:	220f      	movs	r2, #15
 8001814:	4641      	mov	r1, r8
 8001816:	400a      	ands	r2, r1
 8001818:	2a04      	cmp	r2, #4
 800181a:	d006      	beq.n	800182a <__aeabi_dmul+0x15a>
 800181c:	4642      	mov	r2, r8
 800181e:	1d11      	adds	r1, r2, #4
 8001820:	4541      	cmp	r1, r8
 8001822:	4192      	sbcs	r2, r2
 8001824:	4688      	mov	r8, r1
 8001826:	4252      	negs	r2, r2
 8001828:	4492      	add	sl, r2
 800182a:	4652      	mov	r2, sl
 800182c:	01d2      	lsls	r2, r2, #7
 800182e:	d506      	bpl.n	800183e <__aeabi_dmul+0x16e>
 8001830:	4652      	mov	r2, sl
 8001832:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <__aeabi_dmul+0x364>)
 8001834:	401a      	ands	r2, r3
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	4692      	mov	sl, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	18c3      	adds	r3, r0, r3
 800183e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a38 <__aeabi_dmul+0x368>)
 8001840:	4293      	cmp	r3, r2
 8001842:	dd00      	ble.n	8001846 <__aeabi_dmul+0x176>
 8001844:	e18f      	b.n	8001b66 <__aeabi_dmul+0x496>
 8001846:	4642      	mov	r2, r8
 8001848:	08d1      	lsrs	r1, r2, #3
 800184a:	4652      	mov	r2, sl
 800184c:	0752      	lsls	r2, r2, #29
 800184e:	430a      	orrs	r2, r1
 8001850:	4651      	mov	r1, sl
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	024c      	lsls	r4, r1, #9
 8001856:	0b24      	lsrs	r4, r4, #12
 8001858:	0d5b      	lsrs	r3, r3, #21
 800185a:	e797      	b.n	800178c <__aeabi_dmul+0xbc>
 800185c:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800185e:	4326      	orrs	r6, r4
 8001860:	469c      	mov	ip, r3
 8001862:	44e3      	add	fp, ip
 8001864:	2e00      	cmp	r6, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x19a>
 8001868:	e16f      	b.n	8001b4a <__aeabi_dmul+0x47a>
 800186a:	2303      	movs	r3, #3
 800186c:	4649      	mov	r1, r9
 800186e:	431d      	orrs	r5, r3
 8001870:	9b00      	ldr	r3, [sp, #0]
 8001872:	4059      	eors	r1, r3
 8001874:	b2cb      	uxtb	r3, r1
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	2d0a      	cmp	r5, #10
 800187a:	dd00      	ble.n	800187e <__aeabi_dmul+0x1ae>
 800187c:	e133      	b.n	8001ae6 <__aeabi_dmul+0x416>
 800187e:	2301      	movs	r3, #1
 8001880:	40ab      	lsls	r3, r5
 8001882:	001d      	movs	r5, r3
 8001884:	2303      	movs	r3, #3
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2288      	movs	r2, #136	@ 0x88
 800188a:	422a      	tst	r2, r5
 800188c:	d197      	bne.n	80017be <__aeabi_dmul+0xee>
 800188e:	4642      	mov	r2, r8
 8001890:	4643      	mov	r3, r8
 8001892:	0412      	lsls	r2, r2, #16
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	0016      	movs	r6, r2
 8001898:	9801      	ldr	r0, [sp, #4]
 800189a:	0c1d      	lsrs	r5, r3, #16
 800189c:	0c03      	lsrs	r3, r0, #16
 800189e:	0400      	lsls	r0, r0, #16
 80018a0:	0c00      	lsrs	r0, r0, #16
 80018a2:	4346      	muls	r6, r0
 80018a4:	46b4      	mov	ip, r6
 80018a6:	001e      	movs	r6, r3
 80018a8:	436e      	muls	r6, r5
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	0016      	movs	r6, r2
 80018ae:	0007      	movs	r7, r0
 80018b0:	435e      	muls	r6, r3
 80018b2:	4661      	mov	r1, ip
 80018b4:	46b0      	mov	r8, r6
 80018b6:	436f      	muls	r7, r5
 80018b8:	0c0e      	lsrs	r6, r1, #16
 80018ba:	44b8      	add	r8, r7
 80018bc:	4446      	add	r6, r8
 80018be:	42b7      	cmp	r7, r6
 80018c0:	d905      	bls.n	80018ce <__aeabi_dmul+0x1fe>
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	4688      	mov	r8, r1
 80018c8:	9f00      	ldr	r7, [sp, #0]
 80018ca:	4447      	add	r7, r8
 80018cc:	9700      	str	r7, [sp, #0]
 80018ce:	4661      	mov	r1, ip
 80018d0:	0409      	lsls	r1, r1, #16
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	0c37      	lsrs	r7, r6, #16
 80018d6:	0436      	lsls	r6, r6, #16
 80018d8:	468c      	mov	ip, r1
 80018da:	0031      	movs	r1, r6
 80018dc:	4461      	add	r1, ip
 80018de:	9101      	str	r1, [sp, #4]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0c26      	lsrs	r6, r4, #16
 80018e4:	0424      	lsls	r4, r4, #16
 80018e6:	0c24      	lsrs	r4, r4, #16
 80018e8:	4361      	muls	r1, r4
 80018ea:	468c      	mov	ip, r1
 80018ec:	0021      	movs	r1, r4
 80018ee:	4369      	muls	r1, r5
 80018f0:	4689      	mov	r9, r1
 80018f2:	4661      	mov	r1, ip
 80018f4:	0c09      	lsrs	r1, r1, #16
 80018f6:	4688      	mov	r8, r1
 80018f8:	4372      	muls	r2, r6
 80018fa:	444a      	add	r2, r9
 80018fc:	4442      	add	r2, r8
 80018fe:	4375      	muls	r5, r6
 8001900:	4591      	cmp	r9, r2
 8001902:	d903      	bls.n	800190c <__aeabi_dmul+0x23c>
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	4688      	mov	r8, r1
 800190a:	4445      	add	r5, r8
 800190c:	0c11      	lsrs	r1, r2, #16
 800190e:	4688      	mov	r8, r1
 8001910:	4661      	mov	r1, ip
 8001912:	0409      	lsls	r1, r1, #16
 8001914:	0c09      	lsrs	r1, r1, #16
 8001916:	468c      	mov	ip, r1
 8001918:	0412      	lsls	r2, r2, #16
 800191a:	4462      	add	r2, ip
 800191c:	18b9      	adds	r1, r7, r2
 800191e:	9102      	str	r1, [sp, #8]
 8001920:	4651      	mov	r1, sl
 8001922:	0c09      	lsrs	r1, r1, #16
 8001924:	468c      	mov	ip, r1
 8001926:	4651      	mov	r1, sl
 8001928:	040f      	lsls	r7, r1, #16
 800192a:	0c3f      	lsrs	r7, r7, #16
 800192c:	0039      	movs	r1, r7
 800192e:	4341      	muls	r1, r0
 8001930:	4445      	add	r5, r8
 8001932:	4688      	mov	r8, r1
 8001934:	4661      	mov	r1, ip
 8001936:	4341      	muls	r1, r0
 8001938:	468a      	mov	sl, r1
 800193a:	4641      	mov	r1, r8
 800193c:	4660      	mov	r0, ip
 800193e:	0c09      	lsrs	r1, r1, #16
 8001940:	4689      	mov	r9, r1
 8001942:	4358      	muls	r0, r3
 8001944:	437b      	muls	r3, r7
 8001946:	4453      	add	r3, sl
 8001948:	444b      	add	r3, r9
 800194a:	459a      	cmp	sl, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_dmul+0x286>
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	4689      	mov	r9, r1
 8001954:	4448      	add	r0, r9
 8001956:	0c19      	lsrs	r1, r3, #16
 8001958:	4689      	mov	r9, r1
 800195a:	4641      	mov	r1, r8
 800195c:	0409      	lsls	r1, r1, #16
 800195e:	0c09      	lsrs	r1, r1, #16
 8001960:	4688      	mov	r8, r1
 8001962:	0039      	movs	r1, r7
 8001964:	4361      	muls	r1, r4
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4443      	add	r3, r8
 800196a:	4688      	mov	r8, r1
 800196c:	4661      	mov	r1, ip
 800196e:	434c      	muls	r4, r1
 8001970:	4371      	muls	r1, r6
 8001972:	468c      	mov	ip, r1
 8001974:	4641      	mov	r1, r8
 8001976:	4377      	muls	r7, r6
 8001978:	0c0e      	lsrs	r6, r1, #16
 800197a:	193f      	adds	r7, r7, r4
 800197c:	19f6      	adds	r6, r6, r7
 800197e:	4448      	add	r0, r9
 8001980:	42b4      	cmp	r4, r6
 8001982:	d903      	bls.n	800198c <__aeabi_dmul+0x2bc>
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	4689      	mov	r9, r1
 800198a:	44cc      	add	ip, r9
 800198c:	9902      	ldr	r1, [sp, #8]
 800198e:	9f00      	ldr	r7, [sp, #0]
 8001990:	4689      	mov	r9, r1
 8001992:	0431      	lsls	r1, r6, #16
 8001994:	444f      	add	r7, r9
 8001996:	4689      	mov	r9, r1
 8001998:	4641      	mov	r1, r8
 800199a:	4297      	cmp	r7, r2
 800199c:	4192      	sbcs	r2, r2
 800199e:	040c      	lsls	r4, r1, #16
 80019a0:	0c24      	lsrs	r4, r4, #16
 80019a2:	444c      	add	r4, r9
 80019a4:	18ff      	adds	r7, r7, r3
 80019a6:	4252      	negs	r2, r2
 80019a8:	1964      	adds	r4, r4, r5
 80019aa:	18a1      	adds	r1, r4, r2
 80019ac:	429f      	cmp	r7, r3
 80019ae:	419b      	sbcs	r3, r3
 80019b0:	4688      	mov	r8, r1
 80019b2:	4682      	mov	sl, r0
 80019b4:	425b      	negs	r3, r3
 80019b6:	4699      	mov	r9, r3
 80019b8:	4590      	cmp	r8, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	42ac      	cmp	r4, r5
 80019be:	41a4      	sbcs	r4, r4
 80019c0:	44c2      	add	sl, r8
 80019c2:	44d1      	add	r9, sl
 80019c4:	4252      	negs	r2, r2
 80019c6:	4264      	negs	r4, r4
 80019c8:	4314      	orrs	r4, r2
 80019ca:	4599      	cmp	r9, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	4582      	cmp	sl, r0
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	425b      	negs	r3, r3
 80019d4:	4252      	negs	r2, r2
 80019d6:	4313      	orrs	r3, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	0c36      	lsrs	r6, r6, #16
 80019dc:	19a4      	adds	r4, r4, r6
 80019de:	18e3      	adds	r3, r4, r3
 80019e0:	4463      	add	r3, ip
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	0dd2      	lsrs	r2, r2, #23
 80019e6:	431a      	orrs	r2, r3
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	4692      	mov	sl, r2
 80019ec:	027a      	lsls	r2, r7, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	1e50      	subs	r0, r2, #1
 80019f2:	4182      	sbcs	r2, r0
 80019f4:	0dff      	lsrs	r7, r7, #23
 80019f6:	4317      	orrs	r7, r2
 80019f8:	464a      	mov	r2, r9
 80019fa:	0252      	lsls	r2, r2, #9
 80019fc:	4317      	orrs	r7, r2
 80019fe:	46b8      	mov	r8, r7
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	d500      	bpl.n	8001a06 <__aeabi_dmul+0x336>
 8001a04:	e6ed      	b.n	80017e2 <__aeabi_dmul+0x112>
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <__aeabi_dmul+0x36c>)
 8001a08:	9a03      	ldr	r2, [sp, #12]
 8001a0a:	445b      	add	r3, fp
 8001a0c:	4691      	mov	r9, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dc00      	bgt.n	8001a14 <__aeabi_dmul+0x344>
 8001a12:	e0ac      	b.n	8001b6e <__aeabi_dmul+0x49e>
 8001a14:	003a      	movs	r2, r7
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dmul+0x34c>
 8001a1a:	e710      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	4658      	mov	r0, fp
 8001a20:	403a      	ands	r2, r7
 8001a22:	2a04      	cmp	r2, #4
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dmul+0x358>
 8001a26:	e6f9      	b.n	800181c <__aeabi_dmul+0x14c>
 8001a28:	e709      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	fffffc01 	.word	0xfffffc01
 8001a34:	feffffff 	.word	0xfeffffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	0022      	movs	r2, r4
 8001a42:	4332      	orrs	r2, r6
 8001a44:	d06f      	beq.n	8001b26 <__aeabi_dmul+0x456>
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x37c>
 8001a4a:	e0c2      	b.n	8001bd2 <__aeabi_dmul+0x502>
 8001a4c:	0020      	movs	r0, r4
 8001a4e:	f7fe fd17 	bl	8000480 <__clzsi2>
 8001a52:	0002      	movs	r2, r0
 8001a54:	0003      	movs	r3, r0
 8001a56:	3a0b      	subs	r2, #11
 8001a58:	201d      	movs	r0, #29
 8001a5a:	1a82      	subs	r2, r0, r2
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	0019      	movs	r1, r3
 8001a60:	40d0      	lsrs	r0, r2
 8001a62:	3908      	subs	r1, #8
 8001a64:	408c      	lsls	r4, r1
 8001a66:	0002      	movs	r2, r0
 8001a68:	4322      	orrs	r2, r4
 8001a6a:	0034      	movs	r4, r6
 8001a6c:	408c      	lsls	r4, r1
 8001a6e:	4659      	mov	r1, fp
 8001a70:	1acb      	subs	r3, r1, r3
 8001a72:	4986      	ldr	r1, [pc, #536]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001a74:	468b      	mov	fp, r1
 8001a76:	449b      	add	fp, r3
 8001a78:	2d0a      	cmp	r5, #10
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dmul+0x3ae>
 8001a7c:	e6a4      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001a7e:	4649      	mov	r1, r9
 8001a80:	9b00      	ldr	r3, [sp, #0]
 8001a82:	9401      	str	r4, [sp, #4]
 8001a84:	4059      	eors	r1, r3
 8001a86:	b2cb      	uxtb	r3, r1
 8001a88:	0014      	movs	r4, r2
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	9303      	str	r3, [sp, #12]
 8001a8e:	2d02      	cmp	r5, #2
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dmul+0x3c4>
 8001a92:	e667      	b.n	8001764 <__aeabi_dmul+0x94>
 8001a94:	e6fb      	b.n	800188e <__aeabi_dmul+0x1be>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	d03c      	beq.n	8001b18 <__aeabi_dmul+0x448>
 8001a9e:	4653      	mov	r3, sl
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dmul+0x3d6>
 8001aa4:	e0a3      	b.n	8001bee <__aeabi_dmul+0x51e>
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	f7fe fcea 	bl	8000480 <__clzsi2>
 8001aac:	230b      	movs	r3, #11
 8001aae:	425b      	negs	r3, r3
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	4484      	add	ip, r0
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	4650      	mov	r0, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	4088      	lsls	r0, r1
 8001abe:	231d      	movs	r3, #29
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4660      	mov	r0, ip
 8001ac4:	1a1b      	subs	r3, r3, r0
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	40d8      	lsrs	r0, r3
 8001aca:	0003      	movs	r3, r0
 8001acc:	4640      	mov	r0, r8
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	0023      	movs	r3, r4
 8001ad4:	408b      	lsls	r3, r1
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001ada:	2500      	movs	r5, #0
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	469b      	mov	fp, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	e61a      	b.n	800171c <__aeabi_dmul+0x4c>
 8001ae6:	2d0f      	cmp	r5, #15
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dmul+0x41c>
 8001aea:	e0c9      	b.n	8001c80 <__aeabi_dmul+0x5b0>
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	4652      	mov	r2, sl
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	421a      	tst	r2, r3
 8001af4:	d002      	beq.n	8001afc <__aeabi_dmul+0x42c>
 8001af6:	421c      	tst	r4, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_dmul+0x42c>
 8001afa:	e092      	b.n	8001c22 <__aeabi_dmul+0x552>
 8001afc:	2480      	movs	r4, #128	@ 0x80
 8001afe:	4653      	mov	r3, sl
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	431c      	orrs	r4, r3
 8001b04:	0324      	lsls	r4, r4, #12
 8001b06:	4642      	mov	r2, r8
 8001b08:	0b24      	lsrs	r4, r4, #12
 8001b0a:	e63e      	b.n	800178a <__aeabi_dmul+0xba>
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4680      	mov	r8, r0
 8001b12:	250c      	movs	r5, #12
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	e601      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	469a      	mov	sl, r3
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2504      	movs	r5, #4
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	e5fa      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b26:	2101      	movs	r1, #1
 8001b28:	430d      	orrs	r5, r1
 8001b2a:	2d0a      	cmp	r5, #10
 8001b2c:	dd00      	ble.n	8001b30 <__aeabi_dmul+0x460>
 8001b2e:	e64b      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b30:	4649      	mov	r1, r9
 8001b32:	9800      	ldr	r0, [sp, #0]
 8001b34:	4041      	eors	r1, r0
 8001b36:	b2c9      	uxtb	r1, r1
 8001b38:	9103      	str	r1, [sp, #12]
 8001b3a:	2d02      	cmp	r5, #2
 8001b3c:	dc00      	bgt.n	8001b40 <__aeabi_dmul+0x470>
 8001b3e:	e096      	b.n	8001c6e <__aeabi_dmul+0x59e>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2400      	movs	r4, #0
 8001b44:	2001      	movs	r0, #1
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	e60c      	b.n	8001764 <__aeabi_dmul+0x94>
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9a00      	ldr	r2, [sp, #0]
 8001b50:	432b      	orrs	r3, r5
 8001b52:	4051      	eors	r1, r2
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	9203      	str	r2, [sp, #12]
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dmul+0x48e>
 8001b5c:	e634      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d157      	bne.n	8001c12 <__aeabi_dmul+0x542>
 8001b62:	9b03      	ldr	r3, [sp, #12]
 8001b64:	4699      	mov	r9, r3
 8001b66:	2400      	movs	r4, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4b49      	ldr	r3, [pc, #292]	@ (8001c90 <__aeabi_dmul+0x5c0>)
 8001b6c:	e60e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001b6e:	4658      	mov	r0, fp
 8001b70:	2101      	movs	r1, #1
 8001b72:	1ac9      	subs	r1, r1, r3
 8001b74:	2938      	cmp	r1, #56	@ 0x38
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_dmul+0x4aa>
 8001b78:	e62f      	b.n	80017da <__aeabi_dmul+0x10a>
 8001b7a:	291f      	cmp	r1, #31
 8001b7c:	dd56      	ble.n	8001c2c <__aeabi_dmul+0x55c>
 8001b7e:	221f      	movs	r2, #31
 8001b80:	4654      	mov	r4, sl
 8001b82:	4252      	negs	r2, r2
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	40dc      	lsrs	r4, r3
 8001b88:	2920      	cmp	r1, #32
 8001b8a:	d007      	beq.n	8001b9c <__aeabi_dmul+0x4cc>
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <__aeabi_dmul+0x5c4>)
 8001b8e:	4642      	mov	r2, r8
 8001b90:	469c      	mov	ip, r3
 8001b92:	4653      	mov	r3, sl
 8001b94:	4460      	add	r0, ip
 8001b96:	4083      	lsls	r3, r0
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	1e53      	subs	r3, r2, #1
 8001ba2:	419a      	sbcs	r2, r3
 8001ba4:	000b      	movs	r3, r1
 8001ba6:	4322      	orrs	r2, r4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2400      	movs	r4, #0
 8001bac:	4211      	tst	r1, r2
 8001bae:	d009      	beq.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d05d      	beq.n	8001c74 <__aeabi_dmul+0x5a4>
 8001bb8:	1d11      	adds	r1, r2, #4
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	419b      	sbcs	r3, r3
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	075b      	lsls	r3, r3, #29
 8001bc4:	08d2      	lsrs	r2, r2, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e5df      	b.n	800178c <__aeabi_dmul+0xbc>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	4699      	mov	r9, r3
 8001bd0:	e5fa      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001bd2:	9801      	ldr	r0, [sp, #4]
 8001bd4:	f7fe fc54 	bl	8000480 <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	0003      	movs	r3, r0
 8001bdc:	3215      	adds	r2, #21
 8001bde:	3320      	adds	r3, #32
 8001be0:	2a1c      	cmp	r2, #28
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x516>
 8001be4:	e738      	b.n	8001a58 <__aeabi_dmul+0x388>
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	3808      	subs	r0, #8
 8001bea:	4082      	lsls	r2, r0
 8001bec:	e73f      	b.n	8001a6e <__aeabi_dmul+0x39e>
 8001bee:	f7fe fc47 	bl	8000480 <__clzsi2>
 8001bf2:	2315      	movs	r3, #21
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4484      	add	ip, r0
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	4663      	mov	r3, ip
 8001bfc:	3220      	adds	r2, #32
 8001bfe:	2b1c      	cmp	r3, #28
 8001c00:	dc00      	bgt.n	8001c04 <__aeabi_dmul+0x534>
 8001c02:	e758      	b.n	8001ab6 <__aeabi_dmul+0x3e6>
 8001c04:	2300      	movs	r3, #0
 8001c06:	4698      	mov	r8, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	3808      	subs	r0, #8
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	e762      	b.n	8001ad8 <__aeabi_dmul+0x408>
 8001c12:	001d      	movs	r5, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	2400      	movs	r4, #0
 8001c18:	2002      	movs	r0, #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	e5a2      	b.n	8001764 <__aeabi_dmul+0x94>
 8001c1e:	9002      	str	r0, [sp, #8]
 8001c20:	e632      	b.n	8001888 <__aeabi_dmul+0x1b8>
 8001c22:	431c      	orrs	r4, r3
 8001c24:	9b00      	ldr	r3, [sp, #0]
 8001c26:	9a01      	ldr	r2, [sp, #4]
 8001c28:	4699      	mov	r9, r3
 8001c2a:	e5ae      	b.n	800178a <__aeabi_dmul+0xba>
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <__aeabi_dmul+0x5c8>)
 8001c2e:	4652      	mov	r2, sl
 8001c30:	18c3      	adds	r3, r0, r3
 8001c32:	4640      	mov	r0, r8
 8001c34:	409a      	lsls	r2, r3
 8001c36:	40c8      	lsrs	r0, r1
 8001c38:	4302      	orrs	r2, r0
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4098      	lsls	r0, r3
 8001c3e:	0003      	movs	r3, r0
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	4183      	sbcs	r3, r0
 8001c44:	4654      	mov	r4, sl
 8001c46:	431a      	orrs	r2, r3
 8001c48:	40cc      	lsrs	r4, r1
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	d009      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c4e:	230f      	movs	r3, #15
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d005      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c56:	1d13      	adds	r3, r2, #4
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	18a4      	adds	r4, r4, r2
 8001c60:	001a      	movs	r2, r3
 8001c62:	0223      	lsls	r3, r4, #8
 8001c64:	d508      	bpl.n	8001c78 <__aeabi_dmul+0x5a8>
 8001c66:	2301      	movs	r3, #1
 8001c68:	2400      	movs	r4, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e58e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c6e:	4689      	mov	r9, r1
 8001c70:	2400      	movs	r4, #0
 8001c72:	e58b      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c74:	2300      	movs	r3, #0
 8001c76:	e7a5      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c78:	0763      	lsls	r3, r4, #29
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	e7a1      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	46a2      	mov	sl, r4
 8001c84:	4699      	mov	r9, r3
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	4698      	mov	r8, r3
 8001c8a:	e737      	b.n	8001afc <__aeabi_dmul+0x42c>
 8001c8c:	fffffc0d 	.word	0xfffffc0d
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e

08001c9c <__aeabi_dsub>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	9000      	str	r0, [sp, #0]
 8001cac:	9101      	str	r1, [sp, #4]
 8001cae:	030c      	lsls	r4, r1, #12
 8001cb0:	004d      	lsls	r5, r1, #1
 8001cb2:	0fce      	lsrs	r6, r1, #31
 8001cb4:	0a61      	lsrs	r1, r4, #9
 8001cb6:	9c00      	ldr	r4, [sp, #0]
 8001cb8:	005f      	lsls	r7, r3, #1
 8001cba:	0f64      	lsrs	r4, r4, #29
 8001cbc:	430c      	orrs	r4, r1
 8001cbe:	9900      	ldr	r1, [sp, #0]
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	00c8      	lsls	r0, r1, #3
 8001cc6:	0319      	lsls	r1, r3, #12
 8001cc8:	0d7b      	lsrs	r3, r7, #21
 8001cca:	4699      	mov	r9, r3
 8001ccc:	9b01      	ldr	r3, [sp, #4]
 8001cce:	4fcc      	ldr	r7, [pc, #816]	@ (8002000 <__aeabi_dsub+0x364>)
 8001cd0:	0fdb      	lsrs	r3, r3, #31
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	0a4b      	lsrs	r3, r1, #9
 8001cd6:	9900      	ldr	r1, [sp, #0]
 8001cd8:	4680      	mov	r8, r0
 8001cda:	0f49      	lsrs	r1, r1, #29
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	468b      	mov	fp, r1
 8001ce2:	00da      	lsls	r2, r3, #3
 8001ce4:	4692      	mov	sl, r2
 8001ce6:	0d6d      	lsrs	r5, r5, #21
 8001ce8:	45b9      	cmp	r9, r7
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x52>
 8001cec:	e0bf      	b.n	8001e6e <__aeabi_dsub+0x1d2>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4661      	mov	r1, ip
 8001cf2:	4059      	eors	r1, r3
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	468c      	mov	ip, r1
 8001cf8:	1aeb      	subs	r3, r5, r3
 8001cfa:	428e      	cmp	r6, r1
 8001cfc:	d075      	beq.n	8001dea <__aeabi_dsub+0x14e>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_dsub+0x68>
 8001d02:	e2a3      	b.n	800224c <__aeabi_dsub+0x5b0>
 8001d04:	4649      	mov	r1, r9
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x70>
 8001d0a:	e0ce      	b.n	8001eaa <__aeabi_dsub+0x20e>
 8001d0c:	42bd      	cmp	r5, r7
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x76>
 8001d10:	e200      	b.n	8002114 <__aeabi_dsub+0x478>
 8001d12:	2701      	movs	r7, #1
 8001d14:	2b38      	cmp	r3, #56	@ 0x38
 8001d16:	dc19      	bgt.n	8001d4c <__aeabi_dsub+0xb0>
 8001d18:	2780      	movs	r7, #128	@ 0x80
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	043f      	lsls	r7, r7, #16
 8001d1e:	4339      	orrs	r1, r7
 8001d20:	468b      	mov	fp, r1
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x8c>
 8001d26:	e1fa      	b.n	800211e <__aeabi_dsub+0x482>
 8001d28:	2720      	movs	r7, #32
 8001d2a:	1af9      	subs	r1, r7, r3
 8001d2c:	468c      	mov	ip, r1
 8001d2e:	4659      	mov	r1, fp
 8001d30:	4667      	mov	r7, ip
 8001d32:	40b9      	lsls	r1, r7
 8001d34:	000f      	movs	r7, r1
 8001d36:	0011      	movs	r1, r2
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	430f      	orrs	r7, r1
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	408a      	lsls	r2, r1
 8001d40:	1e51      	subs	r1, r2, #1
 8001d42:	418a      	sbcs	r2, r1
 8001d44:	4659      	mov	r1, fp
 8001d46:	40d9      	lsrs	r1, r3
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	1a64      	subs	r4, r4, r1
 8001d4c:	1bc7      	subs	r7, r0, r7
 8001d4e:	42b8      	cmp	r0, r7
 8001d50:	4180      	sbcs	r0, r0
 8001d52:	4240      	negs	r0, r0
 8001d54:	1a24      	subs	r4, r4, r0
 8001d56:	0223      	lsls	r3, r4, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dsub+0xc0>
 8001d5a:	e140      	b.n	8001fde <__aeabi_dsub+0x342>
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	0a64      	lsrs	r4, r4, #9
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0xca>
 8001d64:	e154      	b.n	8002010 <__aeabi_dsub+0x374>
 8001d66:	0020      	movs	r0, r4
 8001d68:	f7fe fb8a 	bl	8000480 <__clzsi2>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	3b08      	subs	r3, #8
 8001d70:	2120      	movs	r1, #32
 8001d72:	0038      	movs	r0, r7
 8001d74:	1aca      	subs	r2, r1, r3
 8001d76:	40d0      	lsrs	r0, r2
 8001d78:	409c      	lsls	r4, r3
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	409f      	lsls	r7, r3
 8001d7e:	4322      	orrs	r2, r4
 8001d80:	429d      	cmp	r5, r3
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0xea>
 8001d84:	e1a6      	b.n	80020d4 <__aeabi_dsub+0x438>
 8001d86:	1b58      	subs	r0, r3, r5
 8001d88:	3001      	adds	r0, #1
 8001d8a:	1a09      	subs	r1, r1, r0
 8001d8c:	003c      	movs	r4, r7
 8001d8e:	408f      	lsls	r7, r1
 8001d90:	40c4      	lsrs	r4, r0
 8001d92:	1e7b      	subs	r3, r7, #1
 8001d94:	419f      	sbcs	r7, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	4327      	orrs	r7, r4
 8001d9c:	431f      	orrs	r7, r3
 8001d9e:	40c2      	lsrs	r2, r0
 8001da0:	003b      	movs	r3, r7
 8001da2:	0014      	movs	r4, r2
 8001da4:	2500      	movs	r5, #0
 8001da6:	4313      	orrs	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x110>
 8001daa:	e1f7      	b.n	800219c <__aeabi_dsub+0x500>
 8001dac:	077b      	lsls	r3, r7, #29
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x116>
 8001db0:	e377      	b.n	80024a2 <__aeabi_dsub+0x806>
 8001db2:	230f      	movs	r3, #15
 8001db4:	0038      	movs	r0, r7
 8001db6:	403b      	ands	r3, r7
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d004      	beq.n	8001dc6 <__aeabi_dsub+0x12a>
 8001dbc:	1d38      	adds	r0, r7, #4
 8001dbe:	42b8      	cmp	r0, r7
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	427f      	negs	r7, r7
 8001dc4:	19e4      	adds	r4, r4, r7
 8001dc6:	0223      	lsls	r3, r4, #8
 8001dc8:	d400      	bmi.n	8001dcc <__aeabi_dsub+0x130>
 8001dca:	e368      	b.n	800249e <__aeabi_dsub+0x802>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002000 <__aeabi_dsub+0x364>)
 8001dce:	3501      	adds	r5, #1
 8001dd0:	429d      	cmp	r5, r3
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x13a>
 8001dd4:	e0f4      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <__aeabi_dsub+0x368>)
 8001dd8:	056d      	lsls	r5, r5, #21
 8001dda:	401c      	ands	r4, r3
 8001ddc:	0d6d      	lsrs	r5, r5, #21
 8001dde:	0767      	lsls	r7, r4, #29
 8001de0:	08c0      	lsrs	r0, r0, #3
 8001de2:	0264      	lsls	r4, r4, #9
 8001de4:	4307      	orrs	r7, r0
 8001de6:	0b24      	lsrs	r4, r4, #12
 8001de8:	e0ec      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_dsub+0x154>
 8001dee:	e329      	b.n	8002444 <__aeabi_dsub+0x7a8>
 8001df0:	4649      	mov	r1, r9
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x15c>
 8001df6:	e0d6      	b.n	8001fa6 <__aeabi_dsub+0x30a>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x164>
 8001dfe:	e12e      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x16c>
 8001e06:	e1e6      	b.n	80021d6 <__aeabi_dsub+0x53a>
 8001e08:	42bb      	cmp	r3, r7
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x172>
 8001e0c:	e182      	b.n	8002114 <__aeabi_dsub+0x478>
 8001e0e:	2701      	movs	r7, #1
 8001e10:	000b      	movs	r3, r1
 8001e12:	2938      	cmp	r1, #56	@ 0x38
 8001e14:	dc14      	bgt.n	8001e40 <__aeabi_dsub+0x1a4>
 8001e16:	2b1f      	cmp	r3, #31
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dsub+0x180>
 8001e1a:	e23c      	b.n	8002296 <__aeabi_dsub+0x5fa>
 8001e1c:	2720      	movs	r7, #32
 8001e1e:	1af9      	subs	r1, r7, r3
 8001e20:	468c      	mov	ip, r1
 8001e22:	4659      	mov	r1, fp
 8001e24:	4667      	mov	r7, ip
 8001e26:	40b9      	lsls	r1, r7
 8001e28:	000f      	movs	r7, r1
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	430f      	orrs	r7, r1
 8001e30:	4661      	mov	r1, ip
 8001e32:	408a      	lsls	r2, r1
 8001e34:	1e51      	subs	r1, r2, #1
 8001e36:	418a      	sbcs	r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	40d9      	lsrs	r1, r3
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	1864      	adds	r4, r4, r1
 8001e40:	183f      	adds	r7, r7, r0
 8001e42:	4287      	cmp	r7, r0
 8001e44:	4180      	sbcs	r0, r0
 8001e46:	4240      	negs	r0, r0
 8001e48:	1824      	adds	r4, r4, r0
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x1b4>
 8001e4e:	e0c6      	b.n	8001fde <__aeabi_dsub+0x342>
 8001e50:	4b6b      	ldr	r3, [pc, #428]	@ (8002000 <__aeabi_dsub+0x364>)
 8001e52:	3501      	adds	r5, #1
 8001e54:	429d      	cmp	r5, r3
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x1be>
 8001e58:	e0b2      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4b69      	ldr	r3, [pc, #420]	@ (8002004 <__aeabi_dsub+0x368>)
 8001e5e:	087a      	lsrs	r2, r7, #1
 8001e60:	401c      	ands	r4, r3
 8001e62:	4039      	ands	r1, r7
 8001e64:	430a      	orrs	r2, r1
 8001e66:	07e7      	lsls	r7, r4, #31
 8001e68:	4317      	orrs	r7, r2
 8001e6a:	0864      	lsrs	r4, r4, #1
 8001e6c:	e79e      	b.n	8001dac <__aeabi_dsub+0x110>
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <__aeabi_dsub+0x36c>)
 8001e70:	4311      	orrs	r1, r2
 8001e72:	468a      	mov	sl, r1
 8001e74:	18eb      	adds	r3, r5, r3
 8001e76:	2900      	cmp	r1, #0
 8001e78:	d028      	beq.n	8001ecc <__aeabi_dsub+0x230>
 8001e7a:	4566      	cmp	r6, ip
 8001e7c:	d02c      	beq.n	8001ed8 <__aeabi_dsub+0x23c>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d05b      	beq.n	8001f3a <__aeabi_dsub+0x29e>
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x1ec>
 8001e86:	e12c      	b.n	80020e2 <__aeabi_dsub+0x446>
 8001e88:	465b      	mov	r3, fp
 8001e8a:	4666      	mov	r6, ip
 8001e8c:	075f      	lsls	r7, r3, #29
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	4317      	orrs	r7, r2
 8001e92:	08dd      	lsrs	r5, r3, #3
 8001e94:	003b      	movs	r3, r7
 8001e96:	432b      	orrs	r3, r5
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x200>
 8001e9a:	e0e2      	b.n	8002062 <__aeabi_dsub+0x3c6>
 8001e9c:	2480      	movs	r4, #128	@ 0x80
 8001e9e:	0324      	lsls	r4, r4, #12
 8001ea0:	432c      	orrs	r4, r5
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	4d56      	ldr	r5, [pc, #344]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	e08c      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001eaa:	4659      	mov	r1, fp
 8001eac:	4311      	orrs	r1, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x216>
 8001eb0:	e0d5      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x21e>
 8001eb8:	e1b9      	b.n	800222e <__aeabi_dsub+0x592>
 8001eba:	42bb      	cmp	r3, r7
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x224>
 8001ebe:	e1b1      	b.n	8002224 <__aeabi_dsub+0x588>
 8001ec0:	2701      	movs	r7, #1
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	2938      	cmp	r1, #56	@ 0x38
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dsub+0x22e>
 8001ec8:	e740      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8001eca:	e72a      	b.n	8001d22 <__aeabi_dsub+0x86>
 8001ecc:	4661      	mov	r1, ip
 8001ece:	2701      	movs	r7, #1
 8001ed0:	4079      	eors	r1, r7
 8001ed2:	468c      	mov	ip, r1
 8001ed4:	4566      	cmp	r6, ip
 8001ed6:	d1d2      	bne.n	8001e7e <__aeabi_dsub+0x1e2>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x242>
 8001edc:	e0c5      	b.n	800206a <__aeabi_dsub+0x3ce>
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x248>
 8001ee2:	e155      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	0025      	movs	r5, r4
 8001ee8:	4305      	orrs	r5, r0
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x252>
 8001eec:	e212      	b.n	8002314 <__aeabi_dsub+0x678>
 8001eee:	1e59      	subs	r1, r3, #1
 8001ef0:	468c      	mov	ip, r1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x25c>
 8001ef6:	e249      	b.n	800238c <__aeabi_dsub+0x6f0>
 8001ef8:	4d41      	ldr	r5, [pc, #260]	@ (8002000 <__aeabi_dsub+0x364>)
 8001efa:	42ab      	cmp	r3, r5
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x264>
 8001efe:	e28f      	b.n	8002420 <__aeabi_dsub+0x784>
 8001f00:	2701      	movs	r7, #1
 8001f02:	2938      	cmp	r1, #56	@ 0x38
 8001f04:	dc11      	bgt.n	8001f2a <__aeabi_dsub+0x28e>
 8001f06:	4663      	mov	r3, ip
 8001f08:	2b1f      	cmp	r3, #31
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dsub+0x272>
 8001f0c:	e25b      	b.n	80023c6 <__aeabi_dsub+0x72a>
 8001f0e:	4661      	mov	r1, ip
 8001f10:	2320      	movs	r3, #32
 8001f12:	0027      	movs	r7, r4
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	0005      	movs	r5, r0
 8001f18:	4098      	lsls	r0, r3
 8001f1a:	409f      	lsls	r7, r3
 8001f1c:	40cd      	lsrs	r5, r1
 8001f1e:	1e43      	subs	r3, r0, #1
 8001f20:	4198      	sbcs	r0, r3
 8001f22:	40cc      	lsrs	r4, r1
 8001f24:	432f      	orrs	r7, r5
 8001f26:	4307      	orrs	r7, r0
 8001f28:	44a3      	add	fp, r4
 8001f2a:	18bf      	adds	r7, r7, r2
 8001f2c:	4297      	cmp	r7, r2
 8001f2e:	4192      	sbcs	r2, r2
 8001f30:	4252      	negs	r2, r2
 8001f32:	445a      	add	r2, fp
 8001f34:	0014      	movs	r4, r2
 8001f36:	464d      	mov	r5, r9
 8001f38:	e787      	b.n	8001e4a <__aeabi_dsub+0x1ae>
 8001f3a:	4f34      	ldr	r7, [pc, #208]	@ (800200c <__aeabi_dsub+0x370>)
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	423b      	tst	r3, r7
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x2a8>
 8001f42:	e0b6      	b.n	80020b2 <__aeabi_dsub+0x416>
 8001f44:	4659      	mov	r1, fp
 8001f46:	0023      	movs	r3, r4
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	000f      	movs	r7, r1
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dsub+0x2b8>
 8001f52:	e126      	b.n	80021a2 <__aeabi_dsub+0x506>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x2be>
 8001f58:	e1c0      	b.n	80022dc <__aeabi_dsub+0x640>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x2c4>
 8001f5e:	e0a1      	b.n	80020a4 <__aeabi_dsub+0x408>
 8001f60:	1a83      	subs	r3, r0, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	465b      	mov	r3, fp
 8001f66:	4540      	cmp	r0, r8
 8001f68:	41ad      	sbcs	r5, r5
 8001f6a:	1ae3      	subs	r3, r4, r3
 8001f6c:	426d      	negs	r5, r5
 8001f6e:	1b5b      	subs	r3, r3, r5
 8001f70:	2580      	movs	r5, #128	@ 0x80
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	422b      	tst	r3, r5
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x2de>
 8001f78:	e14b      	b.n	8002212 <__aeabi_dsub+0x576>
 8001f7a:	465b      	mov	r3, fp
 8001f7c:	1a10      	subs	r0, r2, r0
 8001f7e:	4282      	cmp	r2, r0
 8001f80:	4192      	sbcs	r2, r2
 8001f82:	1b1c      	subs	r4, r3, r4
 8001f84:	0007      	movs	r7, r0
 8001f86:	2601      	movs	r6, #1
 8001f88:	4663      	mov	r3, ip
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	1aa4      	subs	r4, r4, r2
 8001f8e:	4327      	orrs	r7, r4
 8001f90:	401e      	ands	r6, r3
 8001f92:	2f00      	cmp	r7, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x2fc>
 8001f96:	e142      	b.n	800221e <__aeabi_dsub+0x582>
 8001f98:	422c      	tst	r4, r5
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x302>
 8001f9c:	e26d      	b.n	800247a <__aeabi_dsub+0x7de>
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <__aeabi_dsub+0x368>)
 8001fa0:	2501      	movs	r5, #1
 8001fa2:	401c      	ands	r4, r3
 8001fa4:	e71b      	b.n	8001dde <__aeabi_dsub+0x142>
 8001fa6:	42bd      	cmp	r5, r7
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x310>
 8001faa:	e13b      	b.n	8002224 <__aeabi_dsub+0x588>
 8001fac:	2701      	movs	r7, #1
 8001fae:	2b38      	cmp	r3, #56	@ 0x38
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dsub+0x318>
 8001fb2:	e745      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 8001fb4:	2780      	movs	r7, #128	@ 0x80
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	043f      	lsls	r7, r7, #16
 8001fba:	4339      	orrs	r1, r7
 8001fbc:	468b      	mov	fp, r1
 8001fbe:	e72a      	b.n	8001e16 <__aeabi_dsub+0x17a>
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2700      	movs	r7, #0
 8001fc4:	052d      	lsls	r5, r5, #20
 8001fc6:	4325      	orrs	r5, r4
 8001fc8:	07f6      	lsls	r6, r6, #31
 8001fca:	4335      	orrs	r5, r6
 8001fcc:	0038      	movs	r0, r7
 8001fce:	0029      	movs	r1, r5
 8001fd0:	b003      	add	sp, #12
 8001fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd4:	46bb      	mov	fp, r7
 8001fd6:	46b2      	mov	sl, r6
 8001fd8:	46a9      	mov	r9, r5
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	077b      	lsls	r3, r7, #29
 8001fe0:	d004      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	403b      	ands	r3, r7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fea:	e6e7      	b.n	8001dbc <__aeabi_dsub+0x120>
 8001fec:	002b      	movs	r3, r5
 8001fee:	08f8      	lsrs	r0, r7, #3
 8001ff0:	4a03      	ldr	r2, [pc, #12]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ff2:	0767      	lsls	r7, r4, #29
 8001ff4:	4307      	orrs	r7, r0
 8001ff6:	08e5      	lsrs	r5, r4, #3
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x362>
 8001ffc:	e74a      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8001ffe:	e0a5      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002000:	000007ff 	.word	0x000007ff
 8002004:	ff7fffff 	.word	0xff7fffff
 8002008:	fffff801 	.word	0xfffff801
 800200c:	000007fe 	.word	0x000007fe
 8002010:	0038      	movs	r0, r7
 8002012:	f7fe fa35 	bl	8000480 <__clzsi2>
 8002016:	0003      	movs	r3, r0
 8002018:	3318      	adds	r3, #24
 800201a:	2b1f      	cmp	r3, #31
 800201c:	dc00      	bgt.n	8002020 <__aeabi_dsub+0x384>
 800201e:	e6a7      	b.n	8001d70 <__aeabi_dsub+0xd4>
 8002020:	003a      	movs	r2, r7
 8002022:	3808      	subs	r0, #8
 8002024:	4082      	lsls	r2, r0
 8002026:	429d      	cmp	r5, r3
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x390>
 800202a:	e08a      	b.n	8002142 <__aeabi_dsub+0x4a6>
 800202c:	1b5b      	subs	r3, r3, r5
 800202e:	1c58      	adds	r0, r3, #1
 8002030:	281f      	cmp	r0, #31
 8002032:	dc00      	bgt.n	8002036 <__aeabi_dsub+0x39a>
 8002034:	e1d8      	b.n	80023e8 <__aeabi_dsub+0x74c>
 8002036:	0017      	movs	r7, r2
 8002038:	3b1f      	subs	r3, #31
 800203a:	40df      	lsrs	r7, r3
 800203c:	2820      	cmp	r0, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dsub+0x3b0>
 8002040:	2340      	movs	r3, #64	@ 0x40
 8002042:	1a1b      	subs	r3, r3, r0
 8002044:	409a      	lsls	r2, r3
 8002046:	1e53      	subs	r3, r2, #1
 8002048:	419a      	sbcs	r2, r3
 800204a:	4317      	orrs	r7, r2
 800204c:	2500      	movs	r5, #0
 800204e:	2f00      	cmp	r7, #0
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x3b8>
 8002052:	e0e5      	b.n	8002220 <__aeabi_dsub+0x584>
 8002054:	077b      	lsls	r3, r7, #29
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x3be>
 8002058:	e6ab      	b.n	8001db2 <__aeabi_dsub+0x116>
 800205a:	002c      	movs	r4, r5
 800205c:	e7c6      	b.n	8001fec <__aeabi_dsub+0x350>
 800205e:	08c0      	lsrs	r0, r0, #3
 8002060:	e7c6      	b.n	8001ff0 <__aeabi_dsub+0x354>
 8002062:	2700      	movs	r7, #0
 8002064:	2400      	movs	r4, #0
 8002066:	4dd1      	ldr	r5, [pc, #836]	@ (80023ac <__aeabi_dsub+0x710>)
 8002068:	e7ac      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800206a:	4fd1      	ldr	r7, [pc, #836]	@ (80023b0 <__aeabi_dsub+0x714>)
 800206c:	1c6b      	adds	r3, r5, #1
 800206e:	423b      	tst	r3, r7
 8002070:	d171      	bne.n	8002156 <__aeabi_dsub+0x4ba>
 8002072:	0023      	movs	r3, r4
 8002074:	4303      	orrs	r3, r0
 8002076:	2d00      	cmp	r5, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x3e0>
 800207a:	e14e      	b.n	800231a <__aeabi_dsub+0x67e>
 800207c:	4657      	mov	r7, sl
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x3e8>
 8002082:	e1b5      	b.n	80023f0 <__aeabi_dsub+0x754>
 8002084:	2f00      	cmp	r7, #0
 8002086:	d00d      	beq.n	80020a4 <__aeabi_dsub+0x408>
 8002088:	1883      	adds	r3, r0, r2
 800208a:	4283      	cmp	r3, r0
 800208c:	4180      	sbcs	r0, r0
 800208e:	445c      	add	r4, fp
 8002090:	4240      	negs	r0, r0
 8002092:	1824      	adds	r4, r4, r0
 8002094:	0222      	lsls	r2, r4, #8
 8002096:	d500      	bpl.n	800209a <__aeabi_dsub+0x3fe>
 8002098:	e1c8      	b.n	800242c <__aeabi_dsub+0x790>
 800209a:	001f      	movs	r7, r3
 800209c:	4698      	mov	r8, r3
 800209e:	4327      	orrs	r7, r4
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x408>
 80020a2:	e0bc      	b.n	800221e <__aeabi_dsub+0x582>
 80020a4:	4643      	mov	r3, r8
 80020a6:	0767      	lsls	r7, r4, #29
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	431f      	orrs	r7, r3
 80020ac:	08e5      	lsrs	r5, r4, #3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e04c      	b.n	800214c <__aeabi_dsub+0x4b0>
 80020b2:	1a83      	subs	r3, r0, r2
 80020b4:	4698      	mov	r8, r3
 80020b6:	465b      	mov	r3, fp
 80020b8:	4540      	cmp	r0, r8
 80020ba:	41bf      	sbcs	r7, r7
 80020bc:	1ae3      	subs	r3, r4, r3
 80020be:	427f      	negs	r7, r7
 80020c0:	1bdb      	subs	r3, r3, r7
 80020c2:	021f      	lsls	r7, r3, #8
 80020c4:	d47c      	bmi.n	80021c0 <__aeabi_dsub+0x524>
 80020c6:	4647      	mov	r7, r8
 80020c8:	431f      	orrs	r7, r3
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x432>
 80020cc:	e0a6      	b.n	800221c <__aeabi_dsub+0x580>
 80020ce:	001c      	movs	r4, r3
 80020d0:	4647      	mov	r7, r8
 80020d2:	e645      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80020d4:	4cb7      	ldr	r4, [pc, #732]	@ (80023b4 <__aeabi_dsub+0x718>)
 80020d6:	1aed      	subs	r5, r5, r3
 80020d8:	4014      	ands	r4, r2
 80020da:	077b      	lsls	r3, r7, #29
 80020dc:	d000      	beq.n	80020e0 <__aeabi_dsub+0x444>
 80020de:	e780      	b.n	8001fe2 <__aeabi_dsub+0x346>
 80020e0:	e784      	b.n	8001fec <__aeabi_dsub+0x350>
 80020e2:	464b      	mov	r3, r9
 80020e4:	0025      	movs	r5, r4
 80020e6:	4305      	orrs	r5, r0
 80020e8:	d066      	beq.n	80021b8 <__aeabi_dsub+0x51c>
 80020ea:	1e5f      	subs	r7, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x456>
 80020f0:	e0fc      	b.n	80022ec <__aeabi_dsub+0x650>
 80020f2:	4dae      	ldr	r5, [pc, #696]	@ (80023ac <__aeabi_dsub+0x710>)
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0x45e>
 80020f8:	e15e      	b.n	80023b8 <__aeabi_dsub+0x71c>
 80020fa:	4666      	mov	r6, ip
 80020fc:	2f38      	cmp	r7, #56	@ 0x38
 80020fe:	dc00      	bgt.n	8002102 <__aeabi_dsub+0x466>
 8002100:	e0b4      	b.n	800226c <__aeabi_dsub+0x5d0>
 8002102:	2001      	movs	r0, #1
 8002104:	1a17      	subs	r7, r2, r0
 8002106:	42ba      	cmp	r2, r7
 8002108:	4192      	sbcs	r2, r2
 800210a:	465b      	mov	r3, fp
 800210c:	4252      	negs	r2, r2
 800210e:	464d      	mov	r5, r9
 8002110:	1a9c      	subs	r4, r3, r2
 8002112:	e620      	b.n	8001d56 <__aeabi_dsub+0xba>
 8002114:	0767      	lsls	r7, r4, #29
 8002116:	08c0      	lsrs	r0, r0, #3
 8002118:	4307      	orrs	r7, r0
 800211a:	08e5      	lsrs	r5, r4, #3
 800211c:	e6ba      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800211e:	001f      	movs	r7, r3
 8002120:	4659      	mov	r1, fp
 8002122:	3f20      	subs	r7, #32
 8002124:	40f9      	lsrs	r1, r7
 8002126:	000f      	movs	r7, r1
 8002128:	2b20      	cmp	r3, #32
 800212a:	d005      	beq.n	8002138 <__aeabi_dsub+0x49c>
 800212c:	2140      	movs	r1, #64	@ 0x40
 800212e:	1acb      	subs	r3, r1, r3
 8002130:	4659      	mov	r1, fp
 8002132:	4099      	lsls	r1, r3
 8002134:	430a      	orrs	r2, r1
 8002136:	4692      	mov	sl, r2
 8002138:	4653      	mov	r3, sl
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4193      	sbcs	r3, r2
 800213e:	431f      	orrs	r7, r3
 8002140:	e604      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8002142:	1aeb      	subs	r3, r5, r3
 8002144:	4d9b      	ldr	r5, [pc, #620]	@ (80023b4 <__aeabi_dsub+0x718>)
 8002146:	4015      	ands	r5, r2
 8002148:	076f      	lsls	r7, r5, #29
 800214a:	08ed      	lsrs	r5, r5, #3
 800214c:	032c      	lsls	r4, r5, #12
 800214e:	055d      	lsls	r5, r3, #21
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	0d6d      	lsrs	r5, r5, #21
 8002154:	e736      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002156:	4d95      	ldr	r5, [pc, #596]	@ (80023ac <__aeabi_dsub+0x710>)
 8002158:	42ab      	cmp	r3, r5
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x4c2>
 800215c:	e0d6      	b.n	800230c <__aeabi_dsub+0x670>
 800215e:	1882      	adds	r2, r0, r2
 8002160:	0021      	movs	r1, r4
 8002162:	4282      	cmp	r2, r0
 8002164:	4180      	sbcs	r0, r0
 8002166:	4459      	add	r1, fp
 8002168:	4240      	negs	r0, r0
 800216a:	1808      	adds	r0, r1, r0
 800216c:	07c7      	lsls	r7, r0, #31
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	4317      	orrs	r7, r2
 8002172:	0844      	lsrs	r4, r0, #1
 8002174:	0752      	lsls	r2, r2, #29
 8002176:	d400      	bmi.n	800217a <__aeabi_dsub+0x4de>
 8002178:	e185      	b.n	8002486 <__aeabi_dsub+0x7ea>
 800217a:	220f      	movs	r2, #15
 800217c:	001d      	movs	r5, r3
 800217e:	403a      	ands	r2, r7
 8002180:	2a04      	cmp	r2, #4
 8002182:	d000      	beq.n	8002186 <__aeabi_dsub+0x4ea>
 8002184:	e61a      	b.n	8001dbc <__aeabi_dsub+0x120>
 8002186:	08ff      	lsrs	r7, r7, #3
 8002188:	0764      	lsls	r4, r4, #29
 800218a:	4327      	orrs	r7, r4
 800218c:	0905      	lsrs	r5, r0, #4
 800218e:	e7dd      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4317      	orrs	r7, r2
 8002198:	08dd      	lsrs	r5, r3, #3
 800219a:	e67b      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800219c:	2700      	movs	r7, #0
 800219e:	2400      	movs	r4, #0
 80021a0:	e710      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dsub+0x50c>
 80021a6:	e0d6      	b.n	8002356 <__aeabi_dsub+0x6ba>
 80021a8:	2900      	cmp	r1, #0
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x512>
 80021ac:	e12f      	b.n	800240e <__aeabi_dsub+0x772>
 80021ae:	2480      	movs	r4, #128	@ 0x80
 80021b0:	2600      	movs	r6, #0
 80021b2:	4d7e      	ldr	r5, [pc, #504]	@ (80023ac <__aeabi_dsub+0x710>)
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	e705      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021b8:	4666      	mov	r6, ip
 80021ba:	465c      	mov	r4, fp
 80021bc:	08d0      	lsrs	r0, r2, #3
 80021be:	e717      	b.n	8001ff0 <__aeabi_dsub+0x354>
 80021c0:	465b      	mov	r3, fp
 80021c2:	1a17      	subs	r7, r2, r0
 80021c4:	42ba      	cmp	r2, r7
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	1b1c      	subs	r4, r3, r4
 80021ca:	2601      	movs	r6, #1
 80021cc:	4663      	mov	r3, ip
 80021ce:	4252      	negs	r2, r2
 80021d0:	1aa4      	subs	r4, r4, r2
 80021d2:	401e      	ands	r6, r3
 80021d4:	e5c4      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80021d6:	1883      	adds	r3, r0, r2
 80021d8:	4283      	cmp	r3, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	445c      	add	r4, fp
 80021de:	4240      	negs	r0, r0
 80021e0:	1825      	adds	r5, r4, r0
 80021e2:	022a      	lsls	r2, r5, #8
 80021e4:	d400      	bmi.n	80021e8 <__aeabi_dsub+0x54c>
 80021e6:	e0da      	b.n	800239e <__aeabi_dsub+0x702>
 80021e8:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <__aeabi_dsub+0x718>)
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4015      	ands	r5, r2
 80021ee:	07ea      	lsls	r2, r5, #31
 80021f0:	431a      	orrs	r2, r3
 80021f2:	0869      	lsrs	r1, r5, #1
 80021f4:	075b      	lsls	r3, r3, #29
 80021f6:	d400      	bmi.n	80021fa <__aeabi_dsub+0x55e>
 80021f8:	e14a      	b.n	8002490 <__aeabi_dsub+0x7f4>
 80021fa:	230f      	movs	r3, #15
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x568>
 8002202:	e0fc      	b.n	80023fe <__aeabi_dsub+0x762>
 8002204:	1d17      	adds	r7, r2, #4
 8002206:	4297      	cmp	r7, r2
 8002208:	41a4      	sbcs	r4, r4
 800220a:	4264      	negs	r4, r4
 800220c:	2502      	movs	r5, #2
 800220e:	1864      	adds	r4, r4, r1
 8002210:	e6ec      	b.n	8001fec <__aeabi_dsub+0x350>
 8002212:	4647      	mov	r7, r8
 8002214:	001c      	movs	r4, r3
 8002216:	431f      	orrs	r7, r3
 8002218:	d000      	beq.n	800221c <__aeabi_dsub+0x580>
 800221a:	e743      	b.n	80020a4 <__aeabi_dsub+0x408>
 800221c:	2600      	movs	r6, #0
 800221e:	2500      	movs	r5, #0
 8002220:	2400      	movs	r4, #0
 8002222:	e6cf      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	0767      	lsls	r7, r4, #29
 8002228:	4307      	orrs	r7, r0
 800222a:	08e5      	lsrs	r5, r4, #3
 800222c:	e632      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800222e:	1a87      	subs	r7, r0, r2
 8002230:	465b      	mov	r3, fp
 8002232:	42b8      	cmp	r0, r7
 8002234:	4180      	sbcs	r0, r0
 8002236:	1ae4      	subs	r4, r4, r3
 8002238:	4240      	negs	r0, r0
 800223a:	1a24      	subs	r4, r4, r0
 800223c:	0223      	lsls	r3, r4, #8
 800223e:	d428      	bmi.n	8002292 <__aeabi_dsub+0x5f6>
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	08ff      	lsrs	r7, r7, #3
 8002244:	431f      	orrs	r7, r3
 8002246:	08e5      	lsrs	r5, r4, #3
 8002248:	2301      	movs	r3, #1
 800224a:	e77f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x5b6>
 8002250:	e673      	b.n	8001f3a <__aeabi_dsub+0x29e>
 8002252:	464b      	mov	r3, r9
 8002254:	1b5f      	subs	r7, r3, r5
 8002256:	003b      	movs	r3, r7
 8002258:	2d00      	cmp	r5, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x5c2>
 800225c:	e742      	b.n	80020e4 <__aeabi_dsub+0x448>
 800225e:	2f38      	cmp	r7, #56	@ 0x38
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x5c8>
 8002262:	e0ec      	b.n	800243e <__aeabi_dsub+0x7a2>
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	000e      	movs	r6, r1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431c      	orrs	r4, r3
 800226c:	2f1f      	cmp	r7, #31
 800226e:	dc25      	bgt.n	80022bc <__aeabi_dsub+0x620>
 8002270:	2520      	movs	r5, #32
 8002272:	0023      	movs	r3, r4
 8002274:	1bed      	subs	r5, r5, r7
 8002276:	0001      	movs	r1, r0
 8002278:	40a8      	lsls	r0, r5
 800227a:	40ab      	lsls	r3, r5
 800227c:	40f9      	lsrs	r1, r7
 800227e:	1e45      	subs	r5, r0, #1
 8002280:	41a8      	sbcs	r0, r5
 8002282:	430b      	orrs	r3, r1
 8002284:	40fc      	lsrs	r4, r7
 8002286:	4318      	orrs	r0, r3
 8002288:	465b      	mov	r3, fp
 800228a:	1b1b      	subs	r3, r3, r4
 800228c:	469b      	mov	fp, r3
 800228e:	e739      	b.n	8002104 <__aeabi_dsub+0x468>
 8002290:	4666      	mov	r6, ip
 8002292:	2501      	movs	r5, #1
 8002294:	e562      	b.n	8001d5c <__aeabi_dsub+0xc0>
 8002296:	001f      	movs	r7, r3
 8002298:	4659      	mov	r1, fp
 800229a:	3f20      	subs	r7, #32
 800229c:	40f9      	lsrs	r1, r7
 800229e:	468c      	mov	ip, r1
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x614>
 80022a4:	2740      	movs	r7, #64	@ 0x40
 80022a6:	4659      	mov	r1, fp
 80022a8:	1afb      	subs	r3, r7, r3
 80022aa:	4099      	lsls	r1, r3
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4692      	mov	sl, r2
 80022b0:	4657      	mov	r7, sl
 80022b2:	1e7b      	subs	r3, r7, #1
 80022b4:	419f      	sbcs	r7, r3
 80022b6:	4663      	mov	r3, ip
 80022b8:	431f      	orrs	r7, r3
 80022ba:	e5c1      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 80022bc:	003b      	movs	r3, r7
 80022be:	0025      	movs	r5, r4
 80022c0:	3b20      	subs	r3, #32
 80022c2:	40dd      	lsrs	r5, r3
 80022c4:	2f20      	cmp	r7, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_dsub+0x636>
 80022c8:	2340      	movs	r3, #64	@ 0x40
 80022ca:	1bdb      	subs	r3, r3, r7
 80022cc:	409c      	lsls	r4, r3
 80022ce:	4320      	orrs	r0, r4
 80022d0:	4680      	mov	r8, r0
 80022d2:	4640      	mov	r0, r8
 80022d4:	1e43      	subs	r3, r0, #1
 80022d6:	4198      	sbcs	r0, r3
 80022d8:	4328      	orrs	r0, r5
 80022da:	e713      	b.n	8002104 <__aeabi_dsub+0x468>
 80022dc:	2900      	cmp	r1, #0
 80022de:	d09d      	beq.n	800221c <__aeabi_dsub+0x580>
 80022e0:	2601      	movs	r6, #1
 80022e2:	4663      	mov	r3, ip
 80022e4:	465c      	mov	r4, fp
 80022e6:	4690      	mov	r8, r2
 80022e8:	401e      	ands	r6, r3
 80022ea:	e6db      	b.n	80020a4 <__aeabi_dsub+0x408>
 80022ec:	1a17      	subs	r7, r2, r0
 80022ee:	465b      	mov	r3, fp
 80022f0:	42ba      	cmp	r2, r7
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	1b1c      	subs	r4, r3, r4
 80022f6:	4252      	negs	r2, r2
 80022f8:	1aa4      	subs	r4, r4, r2
 80022fa:	0223      	lsls	r3, r4, #8
 80022fc:	d4c8      	bmi.n	8002290 <__aeabi_dsub+0x5f4>
 80022fe:	0763      	lsls	r3, r4, #29
 8002300:	08ff      	lsrs	r7, r7, #3
 8002302:	431f      	orrs	r7, r3
 8002304:	4666      	mov	r6, ip
 8002306:	2301      	movs	r3, #1
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	e71f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800230c:	001d      	movs	r5, r3
 800230e:	2400      	movs	r4, #0
 8002310:	2700      	movs	r7, #0
 8002312:	e657      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002314:	465c      	mov	r4, fp
 8002316:	08d0      	lsrs	r0, r2, #3
 8002318:	e66a      	b.n	8001ff0 <__aeabi_dsub+0x354>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x684>
 800231e:	e737      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8002320:	4653      	mov	r3, sl
 8002322:	08c0      	lsrs	r0, r0, #3
 8002324:	0767      	lsls	r7, r4, #29
 8002326:	4307      	orrs	r7, r0
 8002328:	08e5      	lsrs	r5, r4, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x694>
 800232e:	e5b1      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	421d      	tst	r5, r3
 8002336:	d008      	beq.n	800234a <__aeabi_dsub+0x6ae>
 8002338:	4659      	mov	r1, fp
 800233a:	08c8      	lsrs	r0, r1, #3
 800233c:	4218      	tst	r0, r3
 800233e:	d104      	bne.n	800234a <__aeabi_dsub+0x6ae>
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	0749      	lsls	r1, r1, #29
 8002344:	430a      	orrs	r2, r1
 8002346:	0017      	movs	r7, r2
 8002348:	0005      	movs	r5, r0
 800234a:	0f7b      	lsrs	r3, r7, #29
 800234c:	00ff      	lsls	r7, r7, #3
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	075b      	lsls	r3, r3, #29
 8002352:	431f      	orrs	r7, r3
 8002354:	e59e      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002356:	08c0      	lsrs	r0, r0, #3
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	4318      	orrs	r0, r3
 800235c:	08e5      	lsrs	r5, r4, #3
 800235e:	2900      	cmp	r1, #0
 8002360:	d053      	beq.n	800240a <__aeabi_dsub+0x76e>
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	031b      	lsls	r3, r3, #12
 8002366:	421d      	tst	r5, r3
 8002368:	d00a      	beq.n	8002380 <__aeabi_dsub+0x6e4>
 800236a:	4659      	mov	r1, fp
 800236c:	08cc      	lsrs	r4, r1, #3
 800236e:	421c      	tst	r4, r3
 8002370:	d106      	bne.n	8002380 <__aeabi_dsub+0x6e4>
 8002372:	2601      	movs	r6, #1
 8002374:	4663      	mov	r3, ip
 8002376:	0025      	movs	r5, r4
 8002378:	08d0      	lsrs	r0, r2, #3
 800237a:	0749      	lsls	r1, r1, #29
 800237c:	4308      	orrs	r0, r1
 800237e:	401e      	ands	r6, r3
 8002380:	0f47      	lsrs	r7, r0, #29
 8002382:	00c0      	lsls	r0, r0, #3
 8002384:	08c0      	lsrs	r0, r0, #3
 8002386:	077f      	lsls	r7, r7, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	e583      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4293      	cmp	r3, r2
 8002390:	4192      	sbcs	r2, r2
 8002392:	445c      	add	r4, fp
 8002394:	4252      	negs	r2, r2
 8002396:	18a5      	adds	r5, r4, r2
 8002398:	022a      	lsls	r2, r5, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x702>
 800239c:	e724      	b.n	80021e8 <__aeabi_dsub+0x54c>
 800239e:	076f      	lsls	r7, r5, #29
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	431f      	orrs	r7, r3
 80023a4:	08ed      	lsrs	r5, r5, #3
 80023a6:	2301      	movs	r3, #1
 80023a8:	e6d0      	b.n	800214c <__aeabi_dsub+0x4b0>
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	000007ff 	.word	0x000007ff
 80023b0:	000007fe 	.word	0x000007fe
 80023b4:	ff7fffff 	.word	0xff7fffff
 80023b8:	465b      	mov	r3, fp
 80023ba:	08d2      	lsrs	r2, r2, #3
 80023bc:	075f      	lsls	r7, r3, #29
 80023be:	4666      	mov	r6, ip
 80023c0:	4317      	orrs	r7, r2
 80023c2:	08dd      	lsrs	r5, r3, #3
 80023c4:	e566      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 80023c6:	0025      	movs	r5, r4
 80023c8:	3b20      	subs	r3, #32
 80023ca:	40dd      	lsrs	r5, r3
 80023cc:	4663      	mov	r3, ip
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d005      	beq.n	80023de <__aeabi_dsub+0x742>
 80023d2:	2340      	movs	r3, #64	@ 0x40
 80023d4:	4661      	mov	r1, ip
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	409c      	lsls	r4, r3
 80023da:	4320      	orrs	r0, r4
 80023dc:	4680      	mov	r8, r0
 80023de:	4647      	mov	r7, r8
 80023e0:	1e7b      	subs	r3, r7, #1
 80023e2:	419f      	sbcs	r7, r3
 80023e4:	432f      	orrs	r7, r5
 80023e6:	e5a0      	b.n	8001f2a <__aeabi_dsub+0x28e>
 80023e8:	2120      	movs	r1, #32
 80023ea:	2700      	movs	r7, #0
 80023ec:	1a09      	subs	r1, r1, r0
 80023ee:	e4d2      	b.n	8001d96 <__aeabi_dsub+0xfa>
 80023f0:	2f00      	cmp	r7, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x75a>
 80023f4:	e713      	b.n	800221e <__aeabi_dsub+0x582>
 80023f6:	465c      	mov	r4, fp
 80023f8:	0017      	movs	r7, r2
 80023fa:	2500      	movs	r5, #0
 80023fc:	e5f6      	b.n	8001fec <__aeabi_dsub+0x350>
 80023fe:	08d7      	lsrs	r7, r2, #3
 8002400:	0749      	lsls	r1, r1, #29
 8002402:	2302      	movs	r3, #2
 8002404:	430f      	orrs	r7, r1
 8002406:	092d      	lsrs	r5, r5, #4
 8002408:	e6a0      	b.n	800214c <__aeabi_dsub+0x4b0>
 800240a:	0007      	movs	r7, r0
 800240c:	e542      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800240e:	465b      	mov	r3, fp
 8002410:	2601      	movs	r6, #1
 8002412:	075f      	lsls	r7, r3, #29
 8002414:	08dd      	lsrs	r5, r3, #3
 8002416:	4663      	mov	r3, ip
 8002418:	08d2      	lsrs	r2, r2, #3
 800241a:	4317      	orrs	r7, r2
 800241c:	401e      	ands	r6, r3
 800241e:	e539      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002420:	465b      	mov	r3, fp
 8002422:	08d2      	lsrs	r2, r2, #3
 8002424:	075f      	lsls	r7, r3, #29
 8002426:	4317      	orrs	r7, r2
 8002428:	08dd      	lsrs	r5, r3, #3
 800242a:	e533      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800242c:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <__aeabi_dsub+0x80c>)
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	4022      	ands	r2, r4
 8002432:	0757      	lsls	r7, r2, #29
 8002434:	0252      	lsls	r2, r2, #9
 8002436:	2501      	movs	r5, #1
 8002438:	431f      	orrs	r7, r3
 800243a:	0b14      	lsrs	r4, r2, #12
 800243c:	e5c2      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800243e:	000e      	movs	r6, r1
 8002440:	2001      	movs	r0, #1
 8002442:	e65f      	b.n	8002104 <__aeabi_dsub+0x468>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <__aeabi_dsub+0x7c8>
 8002448:	464b      	mov	r3, r9
 800244a:	1b5b      	subs	r3, r3, r5
 800244c:	469c      	mov	ip, r3
 800244e:	2d00      	cmp	r5, #0
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x7b8>
 8002452:	e548      	b.n	8001ee6 <__aeabi_dsub+0x24a>
 8002454:	2701      	movs	r7, #1
 8002456:	2b38      	cmp	r3, #56	@ 0x38
 8002458:	dd00      	ble.n	800245c <__aeabi_dsub+0x7c0>
 800245a:	e566      	b.n	8001f2a <__aeabi_dsub+0x28e>
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	431c      	orrs	r4, r3
 8002462:	e550      	b.n	8001f06 <__aeabi_dsub+0x26a>
 8002464:	1c6b      	adds	r3, r5, #1
 8002466:	4d11      	ldr	r5, [pc, #68]	@ (80024ac <__aeabi_dsub+0x810>)
 8002468:	422b      	tst	r3, r5
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x7d2>
 800246c:	e673      	b.n	8002156 <__aeabi_dsub+0x4ba>
 800246e:	4659      	mov	r1, fp
 8002470:	0023      	movs	r3, r4
 8002472:	4311      	orrs	r1, r2
 8002474:	468a      	mov	sl, r1
 8002476:	4303      	orrs	r3, r0
 8002478:	e600      	b.n	800207c <__aeabi_dsub+0x3e0>
 800247a:	0767      	lsls	r7, r4, #29
 800247c:	08c0      	lsrs	r0, r0, #3
 800247e:	2300      	movs	r3, #0
 8002480:	4307      	orrs	r7, r0
 8002482:	08e5      	lsrs	r5, r4, #3
 8002484:	e662      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002486:	0764      	lsls	r4, r4, #29
 8002488:	08ff      	lsrs	r7, r7, #3
 800248a:	4327      	orrs	r7, r4
 800248c:	0905      	lsrs	r5, r0, #4
 800248e:	e65d      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002490:	08d2      	lsrs	r2, r2, #3
 8002492:	0749      	lsls	r1, r1, #29
 8002494:	4311      	orrs	r1, r2
 8002496:	000f      	movs	r7, r1
 8002498:	2302      	movs	r3, #2
 800249a:	092d      	lsrs	r5, r5, #4
 800249c:	e656      	b.n	800214c <__aeabi_dsub+0x4b0>
 800249e:	0007      	movs	r7, r0
 80024a0:	e5a4      	b.n	8001fec <__aeabi_dsub+0x350>
 80024a2:	0038      	movs	r0, r7
 80024a4:	e48f      	b.n	8001dc6 <__aeabi_dsub+0x12a>
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	ff7fffff 	.word	0xff7fffff
 80024ac:	000007fe 	.word	0x000007fe

080024b0 <__aeabi_dcmpun>:
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	46c6      	mov	lr, r8
 80024b4:	031e      	lsls	r6, r3, #12
 80024b6:	0b36      	lsrs	r6, r6, #12
 80024b8:	46b0      	mov	r8, r6
 80024ba:	4e0d      	ldr	r6, [pc, #52]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024bc:	030c      	lsls	r4, r1, #12
 80024be:	004d      	lsls	r5, r1, #1
 80024c0:	005f      	lsls	r7, r3, #1
 80024c2:	b500      	push	{lr}
 80024c4:	0b24      	lsrs	r4, r4, #12
 80024c6:	0d6d      	lsrs	r5, r5, #21
 80024c8:	0d7f      	lsrs	r7, r7, #21
 80024ca:	42b5      	cmp	r5, r6
 80024cc:	d00b      	beq.n	80024e6 <__aeabi_dcmpun+0x36>
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	428f      	cmp	r7, r1
 80024d4:	d104      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024d6:	4646      	mov	r6, r8
 80024d8:	4316      	orrs	r6, r2
 80024da:	0030      	movs	r0, r6
 80024dc:	1e43      	subs	r3, r0, #1
 80024de:	4198      	sbcs	r0, r3
 80024e0:	bc80      	pop	{r7}
 80024e2:	46b8      	mov	r8, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e6:	4304      	orrs	r4, r0
 80024e8:	2001      	movs	r0, #1
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d1f8      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024ee:	e7ee      	b.n	80024ce <__aeabi_dcmpun+0x1e>
 80024f0:	000007ff 	.word	0x000007ff

080024f4 <__aeabi_d2iz>:
 80024f4:	000b      	movs	r3, r1
 80024f6:	0002      	movs	r2, r0
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4d16      	ldr	r5, [pc, #88]	@ (8002554 <__aeabi_d2iz+0x60>)
 80024fc:	030c      	lsls	r4, r1, #12
 80024fe:	b082      	sub	sp, #8
 8002500:	0049      	lsls	r1, r1, #1
 8002502:	2000      	movs	r0, #0
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	0b24      	lsrs	r4, r4, #12
 800250a:	0d49      	lsrs	r1, r1, #21
 800250c:	0fde      	lsrs	r6, r3, #31
 800250e:	42a9      	cmp	r1, r5
 8002510:	dd04      	ble.n	800251c <__aeabi_d2iz+0x28>
 8002512:	4811      	ldr	r0, [pc, #68]	@ (8002558 <__aeabi_d2iz+0x64>)
 8002514:	4281      	cmp	r1, r0
 8002516:	dd03      	ble.n	8002520 <__aeabi_d2iz+0x2c>
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <__aeabi_d2iz+0x68>)
 800251a:	18f0      	adds	r0, r6, r3
 800251c:	b002      	add	sp, #8
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	2080      	movs	r0, #128	@ 0x80
 8002522:	0340      	lsls	r0, r0, #13
 8002524:	4320      	orrs	r0, r4
 8002526:	4c0e      	ldr	r4, [pc, #56]	@ (8002560 <__aeabi_d2iz+0x6c>)
 8002528:	1a64      	subs	r4, r4, r1
 800252a:	2c1f      	cmp	r4, #31
 800252c:	dd08      	ble.n	8002540 <__aeabi_d2iz+0x4c>
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <__aeabi_d2iz+0x70>)
 8002530:	1a5b      	subs	r3, r3, r1
 8002532:	40d8      	lsrs	r0, r3
 8002534:	0003      	movs	r3, r0
 8002536:	4258      	negs	r0, r3
 8002538:	2e00      	cmp	r6, #0
 800253a:	d1ef      	bne.n	800251c <__aeabi_d2iz+0x28>
 800253c:	0018      	movs	r0, r3
 800253e:	e7ed      	b.n	800251c <__aeabi_d2iz+0x28>
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <__aeabi_d2iz+0x74>)
 8002542:	9a00      	ldr	r2, [sp, #0]
 8002544:	469c      	mov	ip, r3
 8002546:	0003      	movs	r3, r0
 8002548:	4461      	add	r1, ip
 800254a:	408b      	lsls	r3, r1
 800254c:	40e2      	lsrs	r2, r4
 800254e:	4313      	orrs	r3, r2
 8002550:	e7f1      	b.n	8002536 <__aeabi_d2iz+0x42>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000003fe 	.word	0x000003fe
 8002558:	0000041d 	.word	0x0000041d
 800255c:	7fffffff 	.word	0x7fffffff
 8002560:	00000433 	.word	0x00000433
 8002564:	00000413 	.word	0x00000413
 8002568:	fffffbed 	.word	0xfffffbed

0800256c <__aeabi_ui2d>:
 800256c:	b510      	push	{r4, lr}
 800256e:	1e04      	subs	r4, r0, #0
 8002570:	d010      	beq.n	8002594 <__aeabi_ui2d+0x28>
 8002572:	f7fd ff85 	bl	8000480 <__clzsi2>
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <__aeabi_ui2d+0x44>)
 8002578:	1a1b      	subs	r3, r3, r0
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	280a      	cmp	r0, #10
 8002580:	dc0f      	bgt.n	80025a2 <__aeabi_ui2d+0x36>
 8002582:	220b      	movs	r2, #11
 8002584:	0021      	movs	r1, r4
 8002586:	1a12      	subs	r2, r2, r0
 8002588:	40d1      	lsrs	r1, r2
 800258a:	3015      	adds	r0, #21
 800258c:	030a      	lsls	r2, r1, #12
 800258e:	4084      	lsls	r4, r0
 8002590:	0b12      	lsrs	r2, r2, #12
 8002592:	e001      	b.n	8002598 <__aeabi_ui2d+0x2c>
 8002594:	2300      	movs	r3, #0
 8002596:	2200      	movs	r2, #0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	4313      	orrs	r3, r2
 800259c:	0020      	movs	r0, r4
 800259e:	0019      	movs	r1, r3
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	0022      	movs	r2, r4
 80025a4:	380b      	subs	r0, #11
 80025a6:	4082      	lsls	r2, r0
 80025a8:	0312      	lsls	r2, r2, #12
 80025aa:	2400      	movs	r4, #0
 80025ac:	0b12      	lsrs	r2, r2, #12
 80025ae:	e7f3      	b.n	8002598 <__aeabi_ui2d+0x2c>
 80025b0:	0000041e 	.word	0x0000041e

080025b4 <__clzdi2>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d103      	bne.n	80025c2 <__clzdi2+0xe>
 80025ba:	f7fd ff61 	bl	8000480 <__clzsi2>
 80025be:	3020      	adds	r0, #32
 80025c0:	e002      	b.n	80025c8 <__clzdi2+0x14>
 80025c2:	0008      	movs	r0, r1
 80025c4:	f7fd ff5c 	bl	8000480 <__clzsi2>
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)

080025cc <getNumberPage>:
/**
  * @brief  Get Number Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint8_t getNumberPage(uint32_t Address_){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint8_t number_ = (uint8_t)((Address_ & 0x3F800)>>11);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0adb      	lsrs	r3, r3, #11
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	200f      	movs	r0, #15
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	217f      	movs	r1, #127	@ 0x7f
 80025e0:	400a      	ands	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
	return number_;
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <getAddressPage>:
/**
  * @brief  Get Address Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint64_t getAddressPage(uint32_t Address_){
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	return ( (uint64_t) (Address_ & 0xFFFFF800) );
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	000a      	movs	r2, r1
 80025fc:	2100      	movs	r1, #0
 80025fe:	000b      	movs	r3, r1
 8002600:	0ad1      	lsrs	r1, r2, #11
 8002602:	02cc      	lsls	r4, r1, #11
 8002604:	2100      	movs	r1, #0
 8002606:	400b      	ands	r3, r1
 8002608:	001d      	movs	r5, r3
 800260a:	0022      	movs	r2, r4
 800260c:	002b      	movs	r3, r5
}
 800260e:	0010      	movs	r0, r2
 8002610:	0019      	movs	r1, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bdb0      	pop	{r4, r5, r7, pc}

08002618 <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	f011 fbfd 	bl	8013e20 <HAL_FLASH_Unlock>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d1fb      	bne.n	8002622 <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 800262a:	2410      	movs	r4, #16
 800262c:	193b      	adds	r3, r7, r4
 800262e:	0018      	movs	r0, r3
 8002630:	2310      	movs	r3, #16
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f019 fc95 	bl	801bf64 <memset>
	pEraseInit.NbPages = 1;
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2201      	movs	r2, #1
 8002640:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8002652:	230c      	movs	r3, #12
 8002654:	18fa      	adds	r2, r7, r3
 8002656:	187b      	adds	r3, r7, r1
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f011 fc8e 	bl	8013f7c <HAL_FLASHEx_Erase>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	f011 fc01 	bl	8013e68 <HAL_FLASH_Lock>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d1fb      	bne.n	8002662 <erasePage+0x4a>
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b009      	add	sp, #36	@ 0x24
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Address_, uint64_t * arrayData_,uint8_t size_){
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	f011 fbcc 	bl	8013e20 <HAL_FLASH_Unlock>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d1fb      	bne.n	8002684 <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 800268c:	2317      	movs	r3, #23
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e013      	b.n	80026be <writeFLASH+0x4a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Address_, arrayData_[i]);
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	2417      	movs	r4, #23
 800269a:	193b      	adds	r3, r7, r4
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2001      	movs	r0, #1
 80026aa:	f011 fb6b 	bl	8013d84 <HAL_FLASH_Program>
		Address_++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3308      	adds	r3, #8
 80026b2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i =0; i<size_; i++){
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	3201      	adds	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	2317      	movs	r3, #23
 80026c0:	18fa      	adds	r2, r7, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3e4      	bcc.n	8002696 <writeFLASH+0x22>
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	f011 fbcb 	bl	8013e68 <HAL_FLASH_Lock>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d1fb      	bne.n	80026ce <writeFLASH+0x5a>
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b007      	add	sp, #28
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	46c6      	mov	lr, r8
 80026e4:	b500      	push	{lr}
 80026e6:	4cec      	ldr	r4, [pc, #944]	@ (8002a98 <initEEPROMEmulated+0x3b8>)
 80026e8:	44a5      	add	sp, r4
 80026ea:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 80026ec:	4beb      	ldr	r3, [pc, #940]	@ (8002a9c <initEEPROMEmulated+0x3bc>)
 80026ee:	4aec      	ldr	r2, [pc, #944]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80026f0:	2430      	movs	r4, #48	@ 0x30
 80026f2:	1912      	adds	r2, r2, r4
 80026f4:	2108      	movs	r1, #8
 80026f6:	468c      	mov	ip, r1
 80026f8:	44bc      	add	ip, r7
 80026fa:	4462      	add	r2, ip
 80026fc:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 80026fe:	4be9      	ldr	r3, [pc, #932]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 8002700:	191b      	adds	r3, r3, r4
 8002702:	2208      	movs	r2, #8
 8002704:	18ba      	adds	r2, r7, r2
 8002706:	189a      	adds	r2, r3, r2
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 800270c:	49e6      	ldr	r1, [pc, #920]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 800270e:	190b      	adds	r3, r1, r4
 8002710:	2208      	movs	r2, #8
 8002712:	18ba      	adds	r2, r7, r2
 8002714:	189a      	adds	r2, r3, r2
 8002716:	2301      	movs	r3, #1
 8002718:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 800271a:	4be4      	ldr	r3, [pc, #912]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 800271c:	191b      	adds	r3, r3, r4
 800271e:	2208      	movs	r2, #8
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	189a      	adds	r2, r3, r2
 8002724:	237e      	movs	r3, #126	@ 0x7e
 8002726:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ; //
 8002728:	4be1      	ldr	r3, [pc, #900]	@ (8002ab0 <initEEPROMEmulated+0x3d0>)
 800272a:	4ae2      	ldr	r2, [pc, #904]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 800272c:	1910      	adds	r0, r2, r4
 800272e:	2508      	movs	r5, #8
 8002730:	46ac      	mov	ip, r5
 8002732:	44bc      	add	ip, r7
 8002734:	4460      	add	r0, ip
 8002736:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){	// Verify Format Flash is correct
 8002738:	1913      	adds	r3, r2, r4
 800273a:	2208      	movs	r2, #8
 800273c:	4694      	mov	ip, r2
 800273e:	44bc      	add	ip, r7
 8002740:	4463      	add	r3, ip
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4bd5      	ldr	r3, [pc, #852]	@ (8002a9c <initEEPROMEmulated+0x3bc>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d025      	beq.n	8002798 <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 800274c:	190b      	adds	r3, r1, r4
 800274e:	2208      	movs	r2, #8
 8002750:	18ba      	adds	r2, r7, r2
 8002752:	189a      	adds	r2, r3, r2
 8002754:	2300      	movs	r3, #0
 8002756:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002758:	4bd7      	ldr	r3, [pc, #860]	@ (8002ab8 <initEEPROMEmulated+0x3d8>)
 800275a:	2295      	movs	r2, #149	@ 0x95
 800275c:	00d2      	lsls	r2, r2, #3
 800275e:	189b      	adds	r3, r3, r2
 8002760:	2230      	movs	r2, #48	@ 0x30
 8002762:	4694      	mov	ip, r2
 8002764:	2208      	movs	r2, #8
 8002766:	4690      	mov	r8, r2
 8002768:	44b8      	add	r8, r7
 800276a:	44c4      	add	ip, r8
 800276c:	4463      	add	r3, ip
 800276e:	0018      	movs	r0, r3
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	001a      	movs	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	f019 fbf4 	bl	801bf64 <memset>
	pointArray_ = arrayDataP_;
 800277c:	2390      	movs	r3, #144	@ 0x90
 800277e:	191b      	adds	r3, r3, r4
 8002780:	2208      	movs	r2, #8
 8002782:	4694      	mov	ip, r2
 8002784:	44bc      	add	ip, r7
 8002786:	4463      	add	r3, ip
 8002788:	4acc      	ldr	r2, [pc, #816]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800278a:	1912      	adds	r2, r2, r4
 800278c:	2108      	movs	r1, #8
 800278e:	468c      	mov	ip, r1
 8002790:	44bc      	add	ip, r7
 8002792:	4462      	add	r2, ip
 8002794:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 8002796:	e045      	b.n	8002824 <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 8002798:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 800279a:	4bc9      	ldr	r3, [pc, #804]	@ (8002ac0 <initEEPROMEmulated+0x3e0>)
 800279c:	4ac5      	ldr	r2, [pc, #788]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 800279e:	2430      	movs	r4, #48	@ 0x30
 80027a0:	1911      	adds	r1, r2, r4
 80027a2:	2008      	movs	r0, #8
 80027a4:	4684      	mov	ip, r0
 80027a6:	44bc      	add	ip, r7
 80027a8:	4461      	add	r1, ip
 80027aa:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){ // Verify Format Flash is correct
 80027ac:	1913      	adds	r3, r2, r4
 80027ae:	2208      	movs	r2, #8
 80027b0:	4694      	mov	ip, r2
 80027b2:	44bc      	add	ip, r7
 80027b4:	4463      	add	r3, ip
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4bc2      	ldr	r3, [pc, #776]	@ (8002ac4 <initEEPROMEmulated+0x3e4>)
 80027bc:	429a      	cmp	r2, r3
 80027be:	d100      	bne.n	80027c2 <initEEPROMEmulated+0xe2>
 80027c0:	e15d      	b.n	8002a7e <initEEPROMEmulated+0x39e>
		goto saveDataEEPROM_RAM;
	}
	varInit = (uint8_t *) Page_127;
 80027c2:	4bc0      	ldr	r3, [pc, #768]	@ (8002ac4 <initEEPROMEmulated+0x3e4>)
 80027c4:	4ab6      	ldr	r2, [pc, #728]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80027c6:	1912      	adds	r2, r2, r4
 80027c8:	2108      	movs	r1, #8
 80027ca:	468c      	mov	ip, r1
 80027cc:	44bc      	add	ip, r7
 80027ce:	4462      	add	r2, ip
 80027d0:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80027d2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ac8 <initEEPROMEmulated+0x3e8>)
 80027d4:	2295      	movs	r2, #149	@ 0x95
 80027d6:	00d2      	lsls	r2, r2, #3
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	2230      	movs	r2, #48	@ 0x30
 80027dc:	4694      	mov	ip, r2
 80027de:	2208      	movs	r2, #8
 80027e0:	4690      	mov	r8, r2
 80027e2:	44b8      	add	r8, r7
 80027e4:	44c4      	add	ip, r8
 80027e6:	4463      	add	r3, ip
 80027e8:	0018      	movs	r0, r3
 80027ea:	2390      	movs	r3, #144	@ 0x90
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f019 fbb8 	bl	801bf64 <memset>
	size_ = sizeEEPROM_V;
 80027f4:	4bab      	ldr	r3, [pc, #684]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 80027f6:	191b      	adds	r3, r3, r4
 80027f8:	2208      	movs	r2, #8
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	189a      	adds	r2, r3, r2
 80027fe:	2312      	movs	r3, #18
 8002800:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 8002802:	2308      	movs	r3, #8
 8002804:	18e3      	adds	r3, r4, r3
 8002806:	19db      	adds	r3, r3, r7
 8002808:	4aac      	ldr	r2, [pc, #688]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800280a:	1912      	adds	r2, r2, r4
 800280c:	2108      	movs	r1, #8
 800280e:	468c      	mov	ip, r1
 8002810:	44bc      	add	ip, r7
 8002812:	4462      	add	r2, ip
 8002814:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 8002816:	4ba5      	ldr	r3, [pc, #660]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 8002818:	191b      	adds	r3, r3, r4
 800281a:	2208      	movs	r2, #8
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	189a      	adds	r2, r3, r2
 8002820:	237f      	movs	r3, #127	@ 0x7f
 8002822:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 8002824:	4ba9      	ldr	r3, [pc, #676]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002826:	2230      	movs	r2, #48	@ 0x30
 8002828:	189b      	adds	r3, r3, r2
 800282a:	2208      	movs	r2, #8
 800282c:	18ba      	adds	r2, r7, r2
 800282e:	189a      	adds	r2, r3, r2
 8002830:	2300      	movs	r3, #0
 8002832:	7013      	strb	r3, [r2, #0]
 8002834:	e0d9      	b.n	80029ea <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 8002836:	4e9a      	ldr	r6, [pc, #616]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 8002838:	2230      	movs	r2, #48	@ 0x30
 800283a:	18b3      	adds	r3, r6, r2
 800283c:	2108      	movs	r1, #8
 800283e:	468c      	mov	ip, r1
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	7819      	ldrb	r1, [r3, #0]
 8002848:	48a0      	ldr	r0, [pc, #640]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 800284a:	0014      	movs	r4, r2
 800284c:	1883      	adds	r3, r0, r2
 800284e:	2208      	movs	r2, #8
 8002850:	4694      	mov	ip, r2
 8002852:	44bc      	add	ip, r7
 8002854:	4463      	add	r3, ip
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00da      	lsls	r2, r3, #3
 800285a:	4b98      	ldr	r3, [pc, #608]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800285c:	191b      	adds	r3, r3, r4
 800285e:	2508      	movs	r5, #8
 8002860:	46ac      	mov	ip, r5
 8002862:	44bc      	add	ip, r7
 8002864:	4463      	add	r3, ip
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	189b      	adds	r3, r3, r2
 800286a:	6239      	str	r1, [r7, #32]
 800286c:	2200      	movs	r2, #0
 800286e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	6019      	str	r1, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 8002878:	1903      	adds	r3, r0, r4
 800287a:	2208      	movs	r2, #8
 800287c:	4694      	mov	ip, r2
 800287e:	44bc      	add	ip, r7
 8002880:	4463      	add	r3, ip
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	00da      	lsls	r2, r3, #3
 8002886:	498d      	ldr	r1, [pc, #564]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002888:	190b      	adds	r3, r1, r4
 800288a:	2108      	movs	r1, #8
 800288c:	1879      	adds	r1, r7, r1
 800288e:	1859      	adds	r1, r3, r1
 8002890:	680b      	ldr	r3, [r1, #0]
 8002892:	189b      	adds	r3, r3, r2
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	1933      	adds	r3, r6, r4
 800289a:	2208      	movs	r2, #8
 800289c:	18ba      	adds	r2, r7, r2
 800289e:	189a      	adds	r2, r3, r2
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	17db      	asrs	r3, r3, #31
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	0012      	movs	r2, r2
 80028ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ae:	2300      	movs	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b2:	4b86      	ldr	r3, [pc, #536]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80028b4:	191b      	adds	r3, r3, r4
 80028b6:	2208      	movs	r2, #8
 80028b8:	4694      	mov	ip, r2
 80028ba:	44bc      	add	ip, r7
 80028bc:	4463      	add	r3, ip
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 80028c4:	191b      	adds	r3, r3, r4
 80028c6:	2508      	movs	r5, #8
 80028c8:	46ac      	mov	ip, r5
 80028ca:	44bc      	add	ip, r7
 80028cc:	4463      	add	r3, ip
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d4:	4302      	orrs	r2, r0
 80028d6:	613a      	str	r2, [r7, #16]
 80028d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028da:	430a      	orrs	r2, r1
 80028dc:	617a      	str	r2, [r7, #20]
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	6019      	str	r1, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80028e6:	0021      	movs	r1, r4
 80028e8:	1873      	adds	r3, r6, r1
 80028ea:	2208      	movs	r2, #8
 80028ec:	18ba      	adds	r2, r7, r2
 80028ee:	189a      	adds	r2, r3, r2
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4b77      	ldr	r3, [pc, #476]	@ (8002ad0 <initEEPROMEmulated+0x3f0>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d35b      	bcc.n	80029b0 <initEEPROMEmulated+0x2d0>
 80028f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 80028fa:	1853      	adds	r3, r2, r1
 80028fc:	2208      	movs	r2, #8
 80028fe:	4694      	mov	ip, r2
 8002900:	44bc      	add	ip, r7
 8002902:	4463      	add	r3, ip
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d052      	beq.n	80029b0 <initEEPROMEmulated+0x2d0>
			varInit++;
 800290a:	1873      	adds	r3, r6, r1
 800290c:	2208      	movs	r2, #8
 800290e:	18ba      	adds	r2, r7, r2
 8002910:	189a      	adds	r2, r3, r2
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	1872      	adds	r2, r6, r1
 8002918:	2008      	movs	r0, #8
 800291a:	4684      	mov	ip, r0
 800291c:	44bc      	add	ip, r7
 800291e:	4462      	add	r2, ip
 8002920:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 8002922:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002924:	0008      	movs	r0, r1
 8002926:	185b      	adds	r3, r3, r1
 8002928:	2208      	movs	r2, #8
 800292a:	4694      	mov	ip, r2
 800292c:	44bc      	add	ip, r7
 800292e:	4463      	add	r3, ip
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00da      	lsls	r2, r3, #3
 8002934:	4961      	ldr	r1, [pc, #388]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002936:	0004      	movs	r4, r0
 8002938:	1809      	adds	r1, r1, r0
 800293a:	2308      	movs	r3, #8
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	18c8      	adds	r0, r1, r3
 8002940:	6803      	ldr	r3, [r0, #0]
 8002942:	189b      	adds	r3, r3, r2
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	0023      	movs	r3, r4
 800294a:	001c      	movs	r4, r3
 800294c:	18f2      	adds	r2, r6, r3
 800294e:	2308      	movs	r3, #8
 8002950:	469c      	mov	ip, r3
 8002952:	44bc      	add	ip, r7
 8002954:	4462      	add	r2, ip
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002962:	0e13      	lsrs	r3, r2, #24
 8002964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002966:	0212      	lsls	r2, r2, #8
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002972:	0213      	lsls	r3, r2, #8
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b55      	ldr	r3, [pc, #340]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002978:	0026      	movs	r6, r4
 800297a:	199b      	adds	r3, r3, r6
 800297c:	2208      	movs	r2, #8
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	00da      	lsls	r2, r3, #3
 8002988:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800298a:	199b      	adds	r3, r3, r6
 800298c:	2408      	movs	r4, #8
 800298e:	46a4      	mov	ip, r4
 8002990:	44bc      	add	ip, r7
 8002992:	4463      	add	r3, ip
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	189b      	adds	r3, r3, r2
 8002998:	0002      	movs	r2, r0
 800299a:	683c      	ldr	r4, [r7, #0]
 800299c:	4322      	orrs	r2, r4
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	000a      	movs	r2, r1
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6019      	str	r1, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80029b0:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80029b2:	2130      	movs	r1, #48	@ 0x30
 80029b4:	1853      	adds	r3, r2, r1
 80029b6:	2008      	movs	r0, #8
 80029b8:	4684      	mov	ip, r0
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	1852      	adds	r2, r2, r1
 80029c4:	2008      	movs	r0, #8
 80029c6:	4684      	mov	ip, r0
 80029c8:	44bc      	add	ip, r7
 80029ca:	4462      	add	r2, ip
 80029cc:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80029ce:	4a3f      	ldr	r2, [pc, #252]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80029d0:	1853      	adds	r3, r2, r1
 80029d2:	2008      	movs	r0, #8
 80029d4:	4684      	mov	ip, r0
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	1852      	adds	r2, r2, r1
 80029de:	2108      	movs	r1, #8
 80029e0:	468c      	mov	ip, r1
 80029e2:	44bc      	add	ip, r7
 80029e4:	4462      	add	r2, ip
 80029e6:	3301      	adds	r3, #1
 80029e8:	7013      	strb	r3, [r2, #0]
 80029ea:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80029ec:	2130      	movs	r1, #48	@ 0x30
 80029ee:	185b      	adds	r3, r3, r1
 80029f0:	2208      	movs	r2, #8
 80029f2:	18ba      	adds	r2, r7, r2
 80029f4:	189a      	adds	r2, r3, r2
 80029f6:	4e2b      	ldr	r6, [pc, #172]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 80029f8:	1873      	adds	r3, r6, r1
 80029fa:	2008      	movs	r0, #8
 80029fc:	4684      	mov	ip, r0
 80029fe:	44bc      	add	ip, r7
 8002a00:	4463      	add	r3, ip
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d200      	bcs.n	8002a0c <initEEPROMEmulated+0x32c>
 8002a0a:	e714      	b.n	8002836 <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 8002a0e:	000c      	movs	r4, r1
 8002a10:	185b      	adds	r3, r3, r1
 8002a12:	2208      	movs	r2, #8
 8002a14:	4694      	mov	ip, r2
 8002a16:	44bc      	add	ip, r7
 8002a18:	4463      	add	r3, ip
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fdfb 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8002a22:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 8002a24:	0022      	movs	r2, r4
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	2108      	movs	r1, #8
 8002a2a:	468c      	mov	ip, r1
 8002a2c:	44bc      	add	ip, r7
 8002a2e:	4463      	add	r3, ip
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1f18      	subs	r0, r3, #4
 8002a34:	0014      	movs	r4, r2
 8002a36:	1933      	adds	r3, r6, r4
 8002a38:	2208      	movs	r2, #8
 8002a3a:	4694      	mov	ip, r2
 8002a3c:	44bc      	add	ip, r7
 8002a3e:	4463      	add	r3, ip
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002a44:	191b      	adds	r3, r3, r4
 8002a46:	2108      	movs	r1, #8
 8002a48:	468c      	mov	ip, r1
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0019      	movs	r1, r3
 8002a52:	f7ff fe0f 	bl	8002674 <writeFLASH>
	if(!flagVar_){
 8002a56:	4914      	ldr	r1, [pc, #80]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 8002a58:	0020      	movs	r0, r4
 8002a5a:	180b      	adds	r3, r1, r0
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4694      	mov	ip, r2
 8002a60:	44bc      	add	ip, r7
 8002a62:	4463      	add	r3, ip
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	4053      	eors	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <initEEPROMEmulated+0x3a2>
		flagVar_ = 1;
 8002a70:	180b      	adds	r3, r1, r0
 8002a72:	2208      	movs	r2, #8
 8002a74:	18ba      	adds	r2, r7, r2
 8002a76:	189a      	adds	r2, r3, r2
 8002a78:	2301      	movs	r3, #1
 8002a7a:	7013      	strb	r3, [r2, #0]
		goto initEEPROM_V;
 8002a7c:	e68d      	b.n	800279a <initEEPROMEmulated+0xba>
		goto saveDataEEPROM_RAM;
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	e000      	b.n	8002a84 <initEEPROMEmulated+0x3a4>
	}

	// Save the Data in RAM
saveDataEEPROM_RAM:
 8002a82:	46c0      	nop			@ (mov r8, r8)

	for (uint8_t i = 0; i<128; i++)
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <initEEPROMEmulated+0x3f4>)
 8002a86:	2230      	movs	r2, #48	@ 0x30
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e043      	b.n	8002b20 <initEEPROMEmulated+0x440>
 8002a98:	fffffb20 	.word	0xfffffb20
 8002a9c:	0803f000 	.word	0x0803f000
 8002aa0:	000004a4 	.word	0x000004a4
 8002aa4:	000004a3 	.word	0x000004a3
 8002aa8:	0000049b 	.word	0x0000049b
 8002aac:	0000049a 	.word	0x0000049a
 8002ab0:	0803f004 	.word	0x0803f004
 8002ab4:	00000494 	.word	0x00000494
 8002ab8:	fffffbe8 	.word	0xfffffbe8
 8002abc:	0000049c 	.word	0x0000049c
 8002ac0:	0803f804 	.word	0x0803f804
 8002ac4:	0803f800 	.word	0x0803f800
 8002ac8:	fffffb58 	.word	0xfffffb58
 8002acc:	00000493 	.word	0x00000493
 8002ad0:	0803f810 	.word	0x0803f810
 8002ad4:	00000492 	.word	0x00000492
		reePlantilla[i] = (uint8_t) findLastValue((uint32_t) &eePlantilla[i]);
 8002ad8:	4c63      	ldr	r4, [pc, #396]	@ (8002c68 <initEEPROMEmulated+0x588>)
 8002ada:	2530      	movs	r5, #48	@ 0x30
 8002adc:	1963      	adds	r3, r4, r5
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	44bc      	add	ip, r7
 8002ae4:	4463      	add	r3, ip
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	4b60      	ldr	r3, [pc, #384]	@ (8002c6c <initEEPROMEmulated+0x58c>)
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 faa9 	bl	8003044 <findLastValue>
 8002af2:	0002      	movs	r2, r0
 8002af4:	1963      	adds	r3, r4, r5
 8002af6:	2108      	movs	r1, #8
 8002af8:	468c      	mov	ip, r1
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2d1      	uxtb	r1, r2
 8002b02:	4a5b      	ldr	r2, [pc, #364]	@ (8002c70 <initEEPROMEmulated+0x590>)
 8002b04:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<128; i++)
 8002b06:	1963      	adds	r3, r4, r5
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1963      	adds	r3, r4, r5
 8002b14:	2108      	movs	r1, #8
 8002b16:	468c      	mov	ip, r1
 8002b18:	44bc      	add	ip, r7
 8002b1a:	4463      	add	r3, ip
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <initEEPROMEmulated+0x588>)
 8002b22:	2230      	movs	r2, #48	@ 0x30
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	2208      	movs	r2, #8
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dad0      	bge.n	8002ad8 <initEEPROMEmulated+0x3f8>

	reevolt_div 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_div);
 8002b36:	4b4f      	ldr	r3, [pc, #316]	@ (8002c74 <initEEPROMEmulated+0x594>)
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fa83 	bl	8003044 <findLastValue>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <initEEPROMEmulated+0x598>)
 8002b44:	701a      	strb	r2, [r3, #0]
	reevolt_mul 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_mul);
 8002b46:	4b4d      	ldr	r3, [pc, #308]	@ (8002c7c <initEEPROMEmulated+0x59c>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fa7b 	bl	8003044 <findLastValue>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <initEEPROMEmulated+0x5a0>)
 8002b54:	701a      	strb	r2, [r3, #0]
	reef_voltaje 	= 	(uint8_t) findLastValue((uint32_t) &eef_voltaje);
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <initEEPROMEmulated+0x5a4>)
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 fa73 	bl	8003044 <findLastValue>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b49      	ldr	r3, [pc, #292]	@ (8002c88 <initEEPROMEmulated+0x5a8>)
 8002b64:	701a      	strb	r2, [r3, #0]
	reeEstado1 		= 	(uint8_t) findLastValue((uint32_t) &eeEstado1);
 8002b66:	4b49      	ldr	r3, [pc, #292]	@ (8002c8c <initEEPROMEmulated+0x5ac>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fa6b 	bl	8003044 <findLastValue>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <initEEPROMEmulated+0x5b0>)
 8002b74:	701a      	strb	r2, [r3, #0]
	reeTimeUnix1 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix1);
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <initEEPROMEmulated+0x5b4>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fa63 	bl	8003044 <findLastValue>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <initEEPROMEmulated+0x5b8>)
 8002b84:	701a      	strb	r2, [r3, #0]
	reeTimeUnix2 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix2);
 8002b86:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <initEEPROMEmulated+0x5bc>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fa5b 	bl	8003044 <findLastValue>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <initEEPROMEmulated+0x5c0>)
 8002b94:	701a      	strb	r2, [r3, #0]
	reeTimeUnix3 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix3);
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <initEEPROMEmulated+0x5c4>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fa53 	bl	8003044 <findLastValue>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <initEEPROMEmulated+0x5c8>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	reeTimeUnix4 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix4);
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <initEEPROMEmulated+0x5cc>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa4b 	bl	8003044 <findLastValue>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <initEEPROMEmulated+0x5d0>)
 8002bb4:	701a      	strb	r2, [r3, #0]
	reeLat1 		= 	(uint8_t) findLastValue((uint32_t) &eeLat1);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <initEEPROMEmulated+0x5d4>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa43 	bl	8003044 <findLastValue>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb8 <initEEPROMEmulated+0x5d8>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	reeLat2 		= 	(uint8_t) findLastValue((uint32_t) &eeLat2);
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <initEEPROMEmulated+0x5dc>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa3b 	bl	8003044 <findLastValue>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc0 <initEEPROMEmulated+0x5e0>)
 8002bd4:	701a      	strb	r2, [r3, #0]
	reeLat3 		= 	(uint8_t) findLastValue((uint32_t) &eeLat3);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <initEEPROMEmulated+0x5e4>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fa33 	bl	8003044 <findLastValue>
 8002bde:	0003      	movs	r3, r0
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <initEEPROMEmulated+0x5e8>)
 8002be4:	701a      	strb	r2, [r3, #0]
	reeLat4 		= 	(uint8_t) findLastValue((uint32_t) &eeLat4);
 8002be6:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <initEEPROMEmulated+0x5ec>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fa2b 	bl	8003044 <findLastValue>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <initEEPROMEmulated+0x5f0>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	reeLong1 		= 	(uint8_t) findLastValue((uint32_t) &eeLong1);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <initEEPROMEmulated+0x5f4>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fa23 	bl	8003044 <findLastValue>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <initEEPROMEmulated+0x5f8>)
 8002c04:	701a      	strb	r2, [r3, #0]
	reeLong2 		=	(uint8_t) findLastValue((uint32_t) &eeLong2);
 8002c06:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <initEEPROMEmulated+0x5fc>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 fa1b 	bl	8003044 <findLastValue>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <initEEPROMEmulated+0x600>)
 8002c14:	701a      	strb	r2, [r3, #0]
	reeLong3 		= 	(uint8_t) findLastValue((uint32_t) &eeLong3);
 8002c16:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <initEEPROMEmulated+0x604>)
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fa13 	bl	8003044 <findLastValue>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <initEEPROMEmulated+0x608>)
 8002c24:	701a      	strb	r2, [r3, #0]
	reeLong4 		= 	(uint8_t) findLastValue((uint32_t) &eeLong4);
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <initEEPROMEmulated+0x60c>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fa0b 	bl	8003044 <findLastValue>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <initEEPROMEmulated+0x610>)
 8002c34:	701a      	strb	r2, [r3, #0]
	reeCntRegDATA 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegDATA);
 8002c36:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <initEEPROMEmulated+0x614>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fa03 	bl	8003044 <findLastValue>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <initEEPROMEmulated+0x618>)
 8002c44:	801a      	strh	r2, [r3, #0]
	reeCntRegEVENT 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegEVENT);
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <initEEPROMEmulated+0x61c>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f9fb 	bl	8003044 <findLastValue>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b2b      	ldr	r3, [pc, #172]	@ (8002d00 <initEEPROMEmulated+0x620>)
 8002c54:	801a      	strh	r2, [r3, #0]

}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	239c      	movs	r3, #156	@ 0x9c
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	449d      	add	sp, r3
 8002c60:	bc80      	pop	{r7}
 8002c62:	46b8      	mov	r8, r7
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	00000492 	.word	0x00000492
 8002c6c:	0803f000 	.word	0x0803f000
 8002c70:	20000cec 	.word	0x20000cec
 8002c74:	0803f800 	.word	0x0803f800
 8002c78:	200001b8 	.word	0x200001b8
 8002c7c:	0803f801 	.word	0x0803f801
 8002c80:	200001b9 	.word	0x200001b9
 8002c84:	0803f802 	.word	0x0803f802
 8002c88:	20000d6c 	.word	0x20000d6c
 8002c8c:	0803f803 	.word	0x0803f803
 8002c90:	200001ba 	.word	0x200001ba
 8002c94:	0803f804 	.word	0x0803f804
 8002c98:	20000d6d 	.word	0x20000d6d
 8002c9c:	0803f805 	.word	0x0803f805
 8002ca0:	20000d6e 	.word	0x20000d6e
 8002ca4:	0803f806 	.word	0x0803f806
 8002ca8:	20000d6f 	.word	0x20000d6f
 8002cac:	0803f807 	.word	0x0803f807
 8002cb0:	20000d70 	.word	0x20000d70
 8002cb4:	0803f808 	.word	0x0803f808
 8002cb8:	200001bb 	.word	0x200001bb
 8002cbc:	0803f809 	.word	0x0803f809
 8002cc0:	200001bc 	.word	0x200001bc
 8002cc4:	0803f80a 	.word	0x0803f80a
 8002cc8:	200001bd 	.word	0x200001bd
 8002ccc:	0803f80b 	.word	0x0803f80b
 8002cd0:	200001be 	.word	0x200001be
 8002cd4:	0803f80c 	.word	0x0803f80c
 8002cd8:	200001bf 	.word	0x200001bf
 8002cdc:	0803f80d 	.word	0x0803f80d
 8002ce0:	200001c0 	.word	0x200001c0
 8002ce4:	0803f80e 	.word	0x0803f80e
 8002ce8:	200001c1 	.word	0x200001c1
 8002cec:	0803f80f 	.word	0x0803f80f
 8002cf0:	200001c2 	.word	0x200001c2
 8002cf4:	0803f810 	.word	0x0803f810
 8002cf8:	20000d72 	.word	0x20000d72
 8002cfc:	0803f812 	.word	0x0803f812
 8002d00:	20000d74 	.word	0x20000d74

08002d04 <restartFlashMemory>:
/**
  * @brief  Restart Flash Memory
  * @param
  * @retval
  */
void restartFlashMemory(void){
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	4cc3      	ldr	r4, [pc, #780]	@ (8003014 <restartFlashMemory+0x310>)
 8002d08:	44a5      	add	sp, r4
 8002d0a:	af00      	add	r7, sp, #0
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002d0c:	4bc2      	ldr	r3, [pc, #776]	@ (8003018 <restartFlashMemory+0x314>)
 8002d0e:	2693      	movs	r6, #147	@ 0x93
 8002d10:	00f6      	lsls	r6, r6, #3
 8002d12:	199b      	adds	r3, r3, r6
 8002d14:	2258      	movs	r2, #88	@ 0x58
 8002d16:	4694      	mov	ip, r2
 8002d18:	44bc      	add	ip, r7
 8002d1a:	4463      	add	r3, ip
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	001a      	movs	r2, r3
 8002d24:	2100      	movs	r1, #0
 8002d26:	f019 f91d 	bl	801bf64 <memset>
	uint64_t arrayDataV_[sizeEEPROM_V] = {0};
 8002d2a:	4bbc      	ldr	r3, [pc, #752]	@ (800301c <restartFlashMemory+0x318>)
 8002d2c:	199b      	adds	r3, r3, r6
 8002d2e:	2258      	movs	r2, #88	@ 0x58
 8002d30:	4694      	mov	ip, r2
 8002d32:	44bc      	add	ip, r7
 8002d34:	4463      	add	r3, ip
 8002d36:	0018      	movs	r0, r3
 8002d38:	2390      	movs	r3, #144	@ 0x90
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f019 f911 	bl	801bf64 <memset>

	uint8_t * varInit = (uint8_t *) Page_126;
 8002d42:	4bb7      	ldr	r3, [pc, #732]	@ (8003020 <restartFlashMemory+0x31c>)
 8002d44:	4ab7      	ldr	r2, [pc, #732]	@ (8003024 <restartFlashMemory+0x320>)
 8002d46:	2158      	movs	r1, #88	@ 0x58
 8002d48:	1852      	adds	r2, r2, r1
 8002d4a:	19d2      	adds	r2, r2, r7
 8002d4c:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002d4e:	4bb6      	ldr	r3, [pc, #728]	@ (8003028 <restartFlashMemory+0x324>)
 8002d50:	2258      	movs	r2, #88	@ 0x58
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19da      	adds	r2, r3, r7
 8002d56:	2300      	movs	r3, #0
 8002d58:	7013      	strb	r3, [r2, #0]
 8002d5a:	e030      	b.n	8002dbe <restartFlashMemory+0xba>
		arrayDataP_[i] = ((uint64_t )(varInit) << 32);
 8002d5c:	48b1      	ldr	r0, [pc, #708]	@ (8003024 <restartFlashMemory+0x320>)
 8002d5e:	2358      	movs	r3, #88	@ 0x58
 8002d60:	18c3      	adds	r3, r0, r3
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d68:	17db      	asrs	r3, r3, #31
 8002d6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d6c:	4eae      	ldr	r6, [pc, #696]	@ (8003028 <restartFlashMemory+0x324>)
 8002d6e:	2358      	movs	r3, #88	@ 0x58
 8002d70:	18f3      	adds	r3, r6, r3
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	7819      	ldrb	r1, [r3, #0]
 8002d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d78:	001b      	movs	r3, r3
 8002d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d80:	4ba5      	ldr	r3, [pc, #660]	@ (8003018 <restartFlashMemory+0x314>)
 8002d82:	2293      	movs	r2, #147	@ 0x93
 8002d84:	00d2      	lsls	r2, r2, #3
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	2258      	movs	r2, #88	@ 0x58
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	189a      	adds	r2, r3, r2
 8002d8e:	00cb      	lsls	r3, r1, #3
 8002d90:	18d3      	adds	r3, r2, r3
 8002d92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d96:	6019      	str	r1, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
		varInit ++;
 8002d9a:	2358      	movs	r3, #88	@ 0x58
 8002d9c:	18c3      	adds	r3, r0, r3
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	2258      	movs	r2, #88	@ 0x58
 8002da6:	1882      	adds	r2, r0, r2
 8002da8:	19d2      	adds	r2, r2, r7
 8002daa:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002dac:	2358      	movs	r3, #88	@ 0x58
 8002dae:	18f3      	adds	r3, r6, r3
 8002db0:	19db      	adds	r3, r3, r7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2258      	movs	r2, #88	@ 0x58
 8002db6:	18b2      	adds	r2, r6, r2
 8002db8:	19d2      	adds	r2, r2, r7
 8002dba:	3301      	adds	r3, #1
 8002dbc:	7013      	strb	r3, [r2, #0]
 8002dbe:	4b9a      	ldr	r3, [pc, #616]	@ (8003028 <restartFlashMemory+0x324>)
 8002dc0:	2258      	movs	r2, #88	@ 0x58
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	19db      	adds	r3, r3, r7
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dac6      	bge.n	8002d5c <restartFlashMemory+0x58>
	}

	arrayDataP_[eedato_seg1] |= 0xAA;
 8002dce:	4b92      	ldr	r3, [pc, #584]	@ (8003018 <restartFlashMemory+0x314>)
 8002dd0:	2093      	movs	r0, #147	@ 0x93
 8002dd2:	00c0      	lsls	r0, r0, #3
 8002dd4:	181b      	adds	r3, r3, r0
 8002dd6:	2258      	movs	r2, #88	@ 0x58
 8002dd8:	4694      	mov	ip, r2
 8002dda:	44bc      	add	ip, r7
 8002ddc:	4463      	add	r3, ip
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	21aa      	movs	r1, #170	@ 0xaa
 8002de4:	4311      	orrs	r1, r2
 8002de6:	000c      	movs	r4, r1
 8002de8:	2100      	movs	r1, #0
 8002dea:	4319      	orrs	r1, r3
 8002dec:	000d      	movs	r5, r1
 8002dee:	4b8a      	ldr	r3, [pc, #552]	@ (8003018 <restartFlashMemory+0x314>)
 8002df0:	181b      	adds	r3, r3, r0
 8002df2:	2258      	movs	r2, #88	@ 0x58
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	601c      	str	r4, [r3, #0]
 8002dfc:	605d      	str	r5, [r3, #4]
	arrayDataP_[eedato_seg2] |= 0x66;
 8002dfe:	4b86      	ldr	r3, [pc, #536]	@ (8003018 <restartFlashMemory+0x314>)
 8002e00:	0005      	movs	r5, r0
 8002e02:	181b      	adds	r3, r3, r0
 8002e04:	2258      	movs	r2, #88	@ 0x58
 8002e06:	18ba      	adds	r2, r7, r2
 8002e08:	189a      	adds	r2, r3, r2
 8002e0a:	2382      	movs	r3, #130	@ 0x82
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2166      	movs	r1, #102	@ 0x66
 8002e16:	4311      	orrs	r1, r2
 8002e18:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4319      	orrs	r1, r3
 8002e1e:	6479      	str	r1, [r7, #68]	@ 0x44
 8002e20:	4b7d      	ldr	r3, [pc, #500]	@ (8003018 <restartFlashMemory+0x314>)
 8002e22:	195b      	adds	r3, r3, r5
 8002e24:	2258      	movs	r2, #88	@ 0x58
 8002e26:	18ba      	adds	r2, r7, r2
 8002e28:	189a      	adds	r2, r3, r2
 8002e2a:	2382      	movs	r3, #130	@ 0x82
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e34:	6019      	str	r1, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
	arrayDataP_[eedato_seg3] |= 0xCC;
 8002e38:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <restartFlashMemory+0x314>)
 8002e3a:	195b      	adds	r3, r3, r5
 8002e3c:	2258      	movs	r2, #88	@ 0x58
 8002e3e:	18ba      	adds	r2, r7, r2
 8002e40:	189a      	adds	r2, r3, r2
 8002e42:	23fe      	movs	r3, #254	@ 0xfe
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	18d3      	adds	r3, r2, r3
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	21cc      	movs	r1, #204	@ 0xcc
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e52:	2100      	movs	r1, #0
 8002e54:	4319      	orrs	r1, r3
 8002e56:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <restartFlashMemory+0x314>)
 8002e5a:	195b      	adds	r3, r3, r5
 8002e5c:	2258      	movs	r2, #88	@ 0x58
 8002e5e:	18ba      	adds	r2, r7, r2
 8002e60:	189a      	adds	r2, r3, r2
 8002e62:	23fe      	movs	r3, #254	@ 0xfe
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e6c:	6019      	str	r1, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion1] |= (uint32_t) versionFirm1;
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <restartFlashMemory+0x314>)
 8002e72:	195b      	adds	r3, r3, r5
 8002e74:	2258      	movs	r2, #88	@ 0x58
 8002e76:	18ba      	adds	r2, r7, r2
 8002e78:	189a      	adds	r2, r3, r2
 8002e7a:	23f6      	movs	r3, #246	@ 0xf6
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	18d3      	adds	r3, r2, r3
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	4b69      	ldr	r3, [pc, #420]	@ (800302c <restartFlashMemory+0x328>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002e92:	001a      	movs	r2, r3
 8002e94:	4302      	orrs	r2, r0
 8002e96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e98:	0023      	movs	r3, r4
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003018 <restartFlashMemory+0x314>)
 8002ea0:	002c      	movs	r4, r5
 8002ea2:	191b      	adds	r3, r3, r4
 8002ea4:	2258      	movs	r2, #88	@ 0x58
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	189a      	adds	r2, r3, r2
 8002eaa:	23f6      	movs	r3, #246	@ 0xf6
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion2] |= (uint32_t) versionFirm2;
 8002eb8:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <restartFlashMemory+0x314>)
 8002eba:	191b      	adds	r3, r3, r4
 8002ebc:	2258      	movs	r2, #88	@ 0x58
 8002ebe:	18ba      	adds	r2, r7, r2
 8002ec0:	189a      	adds	r2, r3, r2
 8002ec2:	23f8      	movs	r3, #248	@ 0xf8
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	18d3      	adds	r3, r2, r3
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4958      	ldr	r1, [pc, #352]	@ (8003030 <restartFlashMemory+0x32c>)
 8002ece:	7809      	ldrb	r1, [r1, #0]
 8002ed0:	6239      	str	r1, [r7, #32]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ed6:	6a38      	ldr	r0, [r7, #32]
 8002ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eda:	0005      	movs	r5, r0
 8002edc:	4315      	orrs	r5, r2
 8002ede:	61bd      	str	r5, [r7, #24]
 8002ee0:	4319      	orrs	r1, r3
 8002ee2:	61f9      	str	r1, [r7, #28]
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <restartFlashMemory+0x314>)
 8002ee6:	191b      	adds	r3, r3, r4
 8002ee8:	2258      	movs	r2, #88	@ 0x58
 8002eea:	18ba      	adds	r2, r7, r2
 8002eec:	189a      	adds	r2, r3, r2
 8002eee:	23f8      	movs	r3, #248	@ 0xf8
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	6019      	str	r1, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]

	varInit = (uint8_t *) Page_127;
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <restartFlashMemory+0x330>)
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <restartFlashMemory+0x320>)
 8002f00:	2158      	movs	r1, #88	@ 0x58
 8002f02:	1852      	adds	r2, r2, r1
 8002f04:	19d2      	adds	r2, r2, r7
 8002f06:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <restartFlashMemory+0x334>)
 8002f0a:	2258      	movs	r2, #88	@ 0x58
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e05a      	b.n	8002fcc <restartFlashMemory+0x2c8>
		arrayDataV_[i] |= ((uint64_t )(varInit) << 32);
 8002f16:	4c48      	ldr	r4, [pc, #288]	@ (8003038 <restartFlashMemory+0x334>)
 8002f18:	2358      	movs	r3, #88	@ 0x58
 8002f1a:	18e3      	adds	r3, r4, r3
 8002f1c:	19db      	adds	r3, r3, r7
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <restartFlashMemory+0x318>)
 8002f22:	2693      	movs	r6, #147	@ 0x93
 8002f24:	00f6      	lsls	r6, r6, #3
 8002f26:	1992      	adds	r2, r2, r6
 8002f28:	2158      	movs	r1, #88	@ 0x58
 8002f2a:	468c      	mov	ip, r1
 8002f2c:	44bc      	add	ip, r7
 8002f2e:	4462      	add	r2, ip
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	483a      	ldr	r0, [pc, #232]	@ (8003024 <restartFlashMemory+0x320>)
 8002f3a:	2158      	movs	r1, #88	@ 0x58
 8002f3c:	1841      	adds	r1, r0, r1
 8002f3e:	19c9      	adds	r1, r1, r7
 8002f40:	6809      	ldr	r1, [r1, #0]
 8002f42:	6139      	str	r1, [r7, #16]
 8002f44:	17c9      	asrs	r1, r1, #31
 8002f46:	6179      	str	r1, [r7, #20]
 8002f48:	6939      	ldr	r1, [r7, #16]
 8002f4a:	0009      	movs	r1, r1
 8002f4c:	60f9      	str	r1, [r7, #12]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	2158      	movs	r1, #88	@ 0x58
 8002f54:	1861      	adds	r1, r4, r1
 8002f56:	19c9      	adds	r1, r1, r7
 8002f58:	7809      	ldrb	r1, [r1, #0]
 8002f5a:	468c      	mov	ip, r1
 8002f5c:	68bc      	ldr	r4, [r7, #8]
 8002f5e:	68fd      	ldr	r5, [r7, #12]
 8002f60:	0021      	movs	r1, r4
 8002f62:	4311      	orrs	r1, r2
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	0029      	movs	r1, r5
 8002f68:	4319      	orrs	r1, r3
 8002f6a:	6079      	str	r1, [r7, #4]
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800301c <restartFlashMemory+0x318>)
 8002f6e:	199b      	adds	r3, r3, r6
 8002f70:	2258      	movs	r2, #88	@ 0x58
 8002f72:	18ba      	adds	r2, r7, r2
 8002f74:	189a      	adds	r2, r3, r2
 8002f76:	4663      	mov	r3, ip
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	18d3      	adds	r3, r2, r3
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA))){
 8002f84:	2358      	movs	r3, #88	@ 0x58
 8002f86:	18c3      	adds	r3, r0, r3
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <restartFlashMemory+0x338>)
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d308      	bcc.n	8002fa4 <restartFlashMemory+0x2a0>
			varInit++;
 8002f92:	2358      	movs	r3, #88	@ 0x58
 8002f94:	18c3      	adds	r3, r0, r3
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	2258      	movs	r2, #88	@ 0x58
 8002f9e:	1882      	adds	r2, r0, r2
 8002fa0:	19d2      	adds	r2, r2, r7
 8002fa2:	6013      	str	r3, [r2, #0]
		}
		varInit++;
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <restartFlashMemory+0x320>)
 8002fa6:	2358      	movs	r3, #88	@ 0x58
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	2158      	movs	r1, #88	@ 0x58
 8002fb2:	1852      	adds	r2, r2, r1
 8002fb4:	19d2      	adds	r2, r2, r7
 8002fb6:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002fb8:	491f      	ldr	r1, [pc, #124]	@ (8003038 <restartFlashMemory+0x334>)
 8002fba:	2358      	movs	r3, #88	@ 0x58
 8002fbc:	18cb      	adds	r3, r1, r3
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	2358      	movs	r3, #88	@ 0x58
 8002fc4:	18cb      	adds	r3, r1, r3
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	3201      	adds	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <restartFlashMemory+0x334>)
 8002fce:	2258      	movs	r2, #88	@ 0x58
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b11      	cmp	r3, #17
 8002fd8:	d99d      	bls.n	8002f16 <restartFlashMemory+0x212>
	}
	erasePage(126);
 8002fda:	207e      	movs	r0, #126	@ 0x7e
 8002fdc:	f7ff fb1c 	bl	8002618 <erasePage>
	erasePage(127);
 8002fe0:	207f      	movs	r0, #127	@ 0x7f
 8002fe2:	f7ff fb19 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Page_126),&arrayDataP_[0],sizeEEPROM_P);
 8002fe6:	2390      	movs	r3, #144	@ 0x90
 8002fe8:	2258      	movs	r2, #88	@ 0x58
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	480c      	ldr	r0, [pc, #48]	@ (8003020 <restartFlashMemory+0x31c>)
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	f7ff fb3e 	bl	8002674 <writeFLASH>
	writeFLASH((uint64_t *) (Page_127),&arrayDataV_[0],sizeEEPROM_V);
 8002ff8:	2358      	movs	r3, #88	@ 0x58
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	480d      	ldr	r0, [pc, #52]	@ (8003034 <restartFlashMemory+0x330>)
 8002ffe:	2212      	movs	r2, #18
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff fb37 	bl	8002674 <writeFLASH>
	initEEPROMEmulated();
 8003006:	f7ff fb6b 	bl	80026e0 <initEEPROMEmulated>
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <restartFlashMemory+0x33c>)
 8003010:	449d      	add	sp, r3
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003014:	fffffb0c 	.word	0xfffffb0c
 8003018:	fffffbf8 	.word	0xfffffbf8
 800301c:	fffffb68 	.word	0xfffffb68
 8003020:	0803f000 	.word	0x0803f000
 8003024:	00000494 	.word	0x00000494
 8003028:	00000493 	.word	0x00000493
 800302c:	0801eff0 	.word	0x0801eff0
 8003030:	0801eff1 	.word	0x0801eff1
 8003034:	0803f800 	.word	0x0803f800
 8003038:	00000492 	.word	0x00000492
 800303c:	0803f810 	.word	0x0803f810
 8003040:	000004f4 	.word	0x000004f4

08003044 <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t AddressValue_){
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	uint32_t * AddressPage_ = (uint32_t *) getAddressPage(AddressValue_);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff face 	bl	80025f0 <getAddressPage>
 8003054:	0002      	movs	r2, r0
 8003056:	000b      	movs	r3, r1
 8003058:	0013      	movs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <findLastValue+0x68>)
 8003060:	4694      	mov	ip, r2
 8003062:	4463      	add	r3, ip
 8003064:	60fb      	str	r3, [r7, #12]
	if(AddressPage_ < ((uint32_t *) 0x803F000) || AddressPage_ >= ((uint32_t *) 0x8040000)){ // Invalid Direction
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a11      	ldr	r2, [pc, #68]	@ (80030b0 <findLastValue+0x6c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d903      	bls.n	8003076 <findLastValue+0x32>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <findLastValue+0x70>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d90e      	bls.n	8003094 <findLastValue+0x50>
		return 0xFFFFFFFF;
 8003076:	2301      	movs	r3, #1
 8003078:	425b      	negs	r3, r3
 800307a:	e013      	b.n	80030a4 <findLastValue+0x60>
	}
	while(*pointValuex != AddressValue_){
		pointValuex -= 2;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b08      	subs	r3, #8
 8003080:	60fb      	str	r3, [r7, #12]
		if(pointValuex < AddressPage_){
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d204      	bcs.n	8003094 <findLastValue+0x50>
			restartFlashMemory();
 800308a:	f7ff fe3b 	bl	8002d04 <restartFlashMemory>
			return 0xFFFFFFFF;
 800308e:	2301      	movs	r3, #1
 8003090:	425b      	negs	r3, r3
 8003092:	e007      	b.n	80030a4 <findLastValue+0x60>
	while(*pointValuex != AddressValue_){
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d1ee      	bne.n	800307c <findLastValue+0x38>
		}
	}
	return *(pointValuex-1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b04      	subs	r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	000007fc 	.word	0x000007fc
 80030b0:	0803efff 	.word	0x0803efff
 80030b4:	0803ffff 	.word	0x0803ffff

080030b8 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	b08d      	sub	sp, #52	@ 0x34
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6278      	str	r0, [r7, #36]	@ 0x24
 80030c0:	6239      	str	r1, [r7, #32]
 80030c2:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 80030c4:	2200      	movs	r2, #0
 80030c6:	2300      	movs	r3, #0
 80030c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	001b      	movs	r3, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	0006      	movs	r6, r0
 80030f8:	4316      	orrs	r6, r2
 80030fa:	0034      	movs	r4, r6
 80030fc:	4319      	orrs	r1, r3
 80030fe:	000d      	movs	r5, r1
 8003100:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003102:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8003104:	2310      	movs	r3, #16
 8003106:	2218      	movs	r2, #24
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19d9      	adds	r1, r3, r7
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	2201      	movs	r2, #1
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff faaf 	bl	8002674 <writeFLASH>
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b00d      	add	sp, #52	@ 0x34
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800311e <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 800311e:	b5b0      	push	{r4, r5, r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	22ff      	movs	r2, #255	@ 0xff
 800312a:	00d2      	lsls	r2, r2, #3
 800312c:	4694      	mov	ip, r2
 800312e:	4463      	add	r3, ip
 8003130:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8003132:	e002      	b.n	800313a <currentlyPoint+0x1c>
		Pointx --;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b08      	subs	r3, #8
 8003138:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	1c51      	adds	r1, r2, #1
 8003142:	d101      	bne.n	8003148 <currentlyPoint+0x2a>
 8003144:	3301      	adds	r3, #1
 8003146:	d0f5      	beq.n	8003134 <currentlyPoint+0x16>
	}
	Pointx++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3308      	adds	r3, #8
 800314c:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	001c      	movs	r4, r3
 8003152:	17db      	asrs	r3, r3, #31
 8003154:	001d      	movs	r5, r3
 8003156:	0022      	movs	r2, r4
 8003158:	002b      	movs	r3, r5
}
 800315a:	0010      	movs	r0, r2
 800315c:	0019      	movs	r1, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bdb0      	pop	{r4, r5, r7, pc}

08003164 <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint32_t AddressValue_, uint32_t Value_){
 8003164:	b5b0      	push	{r4, r5, r7, lr}
 8003166:	b08c      	sub	sp, #48	@ 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	_Bool flag_Page127 = 1;
 800316e:	242f      	movs	r4, #47	@ 0x2f
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8003176:	252e      	movs	r5, #46	@ 0x2e
 8003178:	197b      	adds	r3, r7, r5
 800317a:	2212      	movs	r2, #18
 800317c:	701a      	strb	r2, [r3, #0]
	uint64_t * AddressPage_ = (uint64_t *) getAddressPage(AddressValue_);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff fa35 	bl	80025f0 <getAddressPage>
 8003186:	0002      	movs	r2, r0
 8003188:	000b      	movs	r3, r1
 800318a:	0013      	movs	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]
	if(AddressPage_ == (uint64_t *) (Page_126)){	// Is here Page 126?
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4a55      	ldr	r2, [pc, #340]	@ (80032e8 <FlashManager+0x184>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d105      	bne.n	80031a2 <FlashManager+0x3e>
		flag_Page127 = 0;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 800319c:	197b      	adds	r3, r7, r5
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;									// Start Page
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	61bb      	str	r3, [r7, #24]
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);		// Current Point
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff ffb8 	bl	800311e <currentlyPoint>
 80031ae:	0002      	movs	r2, r0
 80031b0:	000b      	movs	r3, r1
 80031b2:	0013      	movs	r3, r2
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;			// End Page
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	22ff      	movs	r2, #255	@ 0xff
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	4694      	mov	ip, r2
 80031be:	4463      	add	r3, ip
 80031c0:	617b      	str	r3, [r7, #20]

	if((managerPoint - 1)== managerPointEnd){	// Is here the End Page?
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	3b08      	subs	r3, #8
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d000      	beq.n	80031ce <FlashManager+0x6a>
 80031cc:	e082      	b.n	80032d4 <FlashManager+0x170>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 80031ce:	232e      	movs	r3, #46	@ 0x2e
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f018 fdf1 	bl	801bdbc <malloc>
 80031da:	0003      	movs	r3, r0
 80031dc:	613b      	str	r3, [r7, #16]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 80031e2:	2323      	movs	r3, #35	@ 0x23
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e023      	b.n	8003234 <FlashManager+0xd0>
			arrayTemp[i] = findLastValue((uint32_t) varInit);
 80031ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ee:	2323      	movs	r3, #35	@ 0x23
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	18d4      	adds	r4, r2, r3
 80031fa:	0008      	movs	r0, r1
 80031fc:	f7ff ff22 	bl	8003044 <findLastValue>
 8003200:	0003      	movs	r3, r0
 8003202:	6023      	str	r3, [r4, #0]
			varInit++;
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <FlashManager+0x188>)
 800320e:	429a      	cmp	r2, r3
 8003210:	419b      	sbcs	r3, r3
 8003212:	425b      	negs	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	001a      	movs	r2, r3
 8003218:	232f      	movs	r3, #47	@ 0x2f
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	4013      	ands	r3, r2
 8003220:	d002      	beq.n	8003228 <FlashManager+0xc4>
				varInit++;
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	3301      	adds	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8003228:	2123      	movs	r1, #35	@ 0x23
 800322a:	187b      	adds	r3, r7, r1
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	187b      	adds	r3, r7, r1
 8003230:	3201      	adds	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	2323      	movs	r3, #35	@ 0x23
 8003236:	18fa      	adds	r2, r7, r3
 8003238:	232e      	movs	r3, #46	@ 0x2e
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d3d3      	bcc.n	80031ec <FlashManager+0x88>
			}
		}
		// Erase the Page
		//uint32_t VarAux_= (((uint32_t) ) - 0x8000000);
		uint8_t numberPage = getNumberPage((uint32_t)AddressPage_); 		// Number the Page
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	250f      	movs	r5, #15
 8003248:	197c      	adds	r4, r7, r5
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff f9be 	bl	80025cc <getNumberPage>
 8003250:	0003      	movs	r3, r0
 8003252:	7023      	strb	r3, [r4, #0]

		erasePage(numberPage);
 8003254:	197b      	adds	r3, r7, r5
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff f9dd 	bl	8002618 <erasePage>

		// Return the begin Page in current Point

		managerPoint = AddressPage_;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
		varInit =  (uint8_t *) AddressPage_;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

		// Write the new Values and its Addresses
		for(uint8_t i=0; i<size_; i++){
 8003266:	2322      	movs	r3, #34	@ 0x22
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e01e      	b.n	80032ae <FlashManager+0x14a>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8003270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003272:	2322      	movs	r3, #34	@ 0x22
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff ff18 	bl	80030b8 <pushAddressData>
			varInit++;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	3301      	adds	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 800328e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <FlashManager+0x188>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d902      	bls.n	800329c <FlashManager+0x138>
				varInit++;
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	3301      	adds	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			managerPoint ++;
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	3308      	adds	r3, #8
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(uint8_t i=0; i<size_; i++){
 80032a2:	2122      	movs	r1, #34	@ 0x22
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	3201      	adds	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	2322      	movs	r3, #34	@ 0x22
 80032b0:	18fa      	adds	r2, r7, r3
 80032b2:	232e      	movs	r3, #46	@ 0x2e
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3d8      	bcc.n	8003270 <FlashManager+0x10c>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fef7 	bl	80030b8 <pushAddressData>
		free(arrayTemp);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f018 fd7f 	bl	801bdd0 <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 80032d2:	e005      	b.n	80032e0 <FlashManager+0x17c>
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff feec 	bl	80030b8 <pushAddressData>
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b00c      	add	sp, #48	@ 0x30
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	0803f000 	.word	0x0803f000
 80032ec:	0803f810 	.word	0x0803f810

080032f0 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 80032f6:	1cfb      	adds	r3, r7, #3
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 80032fc:	1cbb      	adds	r3, r7, #2
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8003302:	003b      	movs	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8003308:	2300      	movs	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e0d8      	b.n	80034c0 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3302      	adds	r3, #2
 8003312:	4a70      	ldr	r2, [pc, #448]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	2b30      	cmp	r3, #48	@ 0x30
 8003318:	d102      	bne.n	8003320 <MacStringtoHex+0x30>
			tempregister = 0x00;
 800331a:	1cfb      	adds	r3, r7, #3
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3302      	adds	r3, #2
 8003324:	4a6b      	ldr	r2, [pc, #428]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	2b31      	cmp	r3, #49	@ 0x31
 800332a:	d102      	bne.n	8003332 <MacStringtoHex+0x42>
			tempregister = 0x01;
 800332c:	1cfb      	adds	r3, r7, #3
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3302      	adds	r3, #2
 8003336:	4a67      	ldr	r2, [pc, #412]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	2b32      	cmp	r3, #50	@ 0x32
 800333c:	d102      	bne.n	8003344 <MacStringtoHex+0x54>
			tempregister = 0x02;
 800333e:	1cfb      	adds	r3, r7, #3
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3302      	adds	r3, #2
 8003348:	4a62      	ldr	r2, [pc, #392]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	2b33      	cmp	r3, #51	@ 0x33
 800334e:	d102      	bne.n	8003356 <MacStringtoHex+0x66>
			tempregister = 0x03;
 8003350:	1cfb      	adds	r3, r7, #3
 8003352:	2203      	movs	r2, #3
 8003354:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3302      	adds	r3, #2
 800335a:	4a5e      	ldr	r2, [pc, #376]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	2b34      	cmp	r3, #52	@ 0x34
 8003360:	d102      	bne.n	8003368 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8003362:	1cfb      	adds	r3, r7, #3
 8003364:	2204      	movs	r2, #4
 8003366:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3302      	adds	r3, #2
 800336c:	4a59      	ldr	r2, [pc, #356]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	2b35      	cmp	r3, #53	@ 0x35
 8003372:	d102      	bne.n	800337a <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8003374:	1cfb      	adds	r3, r7, #3
 8003376:	2205      	movs	r2, #5
 8003378:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3302      	adds	r3, #2
 800337e:	4a55      	ldr	r2, [pc, #340]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	2b36      	cmp	r3, #54	@ 0x36
 8003384:	d102      	bne.n	800338c <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8003386:	1cfb      	adds	r3, r7, #3
 8003388:	2206      	movs	r2, #6
 800338a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3302      	adds	r3, #2
 8003390:	4a50      	ldr	r2, [pc, #320]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	2b37      	cmp	r3, #55	@ 0x37
 8003396:	d102      	bne.n	800339e <MacStringtoHex+0xae>
			tempregister = 0x07;
 8003398:	1cfb      	adds	r3, r7, #3
 800339a:	2207      	movs	r2, #7
 800339c:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3302      	adds	r3, #2
 80033a2:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	2b38      	cmp	r3, #56	@ 0x38
 80033a8:	d102      	bne.n	80033b0 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 80033aa:	1cfb      	adds	r3, r7, #3
 80033ac:	2208      	movs	r2, #8
 80033ae:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3302      	adds	r3, #2
 80033b4:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	2b39      	cmp	r3, #57	@ 0x39
 80033ba:	d102      	bne.n	80033c2 <MacStringtoHex+0xd2>
			tempregister = 0x09;
 80033bc:	1cfb      	adds	r3, r7, #3
 80033be:	2209      	movs	r2, #9
 80033c0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3302      	adds	r3, #2
 80033c6:	4a43      	ldr	r2, [pc, #268]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	2b41      	cmp	r3, #65	@ 0x41
 80033cc:	d102      	bne.n	80033d4 <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	220a      	movs	r2, #10
 80033d2:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3302      	adds	r3, #2
 80033d8:	4a3e      	ldr	r2, [pc, #248]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	2b42      	cmp	r3, #66	@ 0x42
 80033de:	d102      	bne.n	80033e6 <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 80033e0:	1cfb      	adds	r3, r7, #3
 80033e2:	220b      	movs	r2, #11
 80033e4:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3302      	adds	r3, #2
 80033ea:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	2b43      	cmp	r3, #67	@ 0x43
 80033f0:	d102      	bne.n	80033f8 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	220c      	movs	r2, #12
 80033f6:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3302      	adds	r3, #2
 80033fc:	4a35      	ldr	r2, [pc, #212]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	2b44      	cmp	r3, #68	@ 0x44
 8003402:	d102      	bne.n	800340a <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8003404:	1cfb      	adds	r3, r7, #3
 8003406:	220d      	movs	r2, #13
 8003408:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3302      	adds	r3, #2
 800340e:	4a31      	ldr	r2, [pc, #196]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	2b45      	cmp	r3, #69	@ 0x45
 8003414:	d102      	bne.n	800341c <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8003416:	1cfb      	adds	r3, r7, #3
 8003418:	220e      	movs	r2, #14
 800341a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3302      	adds	r3, #2
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	2b46      	cmp	r3, #70	@ 0x46
 8003426:	d102      	bne.n	800342e <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8003428:	1cfb      	adds	r3, r7, #3
 800342a:	220f      	movs	r2, #15
 800342c:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	d105      	bne.n	8003442 <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 8003436:	1cbb      	adds	r3, r7, #2
 8003438:	1cfa      	adds	r2, r7, #3
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e03b      	b.n	80034ba <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 8003442:	1cbb      	adds	r3, r7, #2
 8003444:	1cb9      	adds	r1, r7, #2
 8003446:	1cfa      	adds	r2, r7, #3
 8003448:	7809      	ldrb	r1, [r1, #0]
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <MacStringtoHex+0x172>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d002      	beq.n	8003462 <MacStringtoHex+0x172>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d105      	bne.n	800346e <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 8003462:	1cbb      	adds	r3, r7, #2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b29a      	uxth	r2, r3
 8003468:	003b      	movs	r3, r7
 800346a:	0212      	lsls	r2, r2, #8
 800346c:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d005      	beq.n	8003480 <MacStringtoHex+0x190>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d002      	beq.n	8003480 <MacStringtoHex+0x190>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d107      	bne.n	8003490 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8003480:	1cbb      	adds	r3, r7, #2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b299      	uxth	r1, r3
 8003486:	003b      	movs	r3, r7
 8003488:	003a      	movs	r2, r7
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d103      	bne.n	800349e <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <MacStringtoHex+0x1e8>)
 8003498:	003a      	movs	r2, r7
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b07      	cmp	r3, #7
 80034a2:	d103      	bne.n	80034ac <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <MacStringtoHex+0x1e8>)
 80034a6:	003a      	movs	r2, r7
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b0b      	cmp	r3, #11
 80034b0:	d103      	bne.n	80034ba <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <MacStringtoHex+0x1e8>)
 80034b4:	003a      	movs	r2, r7
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b0b      	cmp	r3, #11
 80034c4:	dc00      	bgt.n	80034c8 <MacStringtoHex+0x1d8>
 80034c6:	e722      	b.n	800330e <MacStringtoHex+0x1e>
		}
	}
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	20001ed4 	.word	0x20001ed4
 80034d8:	20000088 	.word	0x20000088

080034dc <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	603a      	str	r2, [r7, #0]
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	1c0a      	adds	r2, r1, #0
 80034ee:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 80034f0:	210d      	movs	r1, #13
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 80034f8:	200f      	movs	r0, #15
 80034fa:	183b      	adds	r3, r7, r0
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 8003500:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	1dba      	adds	r2, r7, #6
 8003506:	8812      	ldrh	r2, [r2, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d84b      	bhi.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
 800350c:	4b29      	ldr	r3, [pc, #164]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	1d3a      	adds	r2, r7, #4
 8003512:	8812      	ldrh	r2, [r2, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d345      	bcc.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 8003518:	183b      	adds	r3, r7, r0
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	b2da      	uxtb	r2, r3
 800352e:	187b      	adds	r3, r7, r1
 8003530:	3201      	adds	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 8003534:	187b      	adds	r3, r7, r1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d32d      	bcc.n	800359e <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 8003542:	210e      	movs	r1, #14
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e017      	b.n	8003582 <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 8003552:	240e      	movs	r4, #14
 8003554:	193b      	adds	r3, r7, r4
 8003556:	7818      	ldrb	r0, [r3, #0]
 8003558:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	001a      	movs	r2, r3
 800355e:	1dbb      	adds	r3, r7, #6
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	193b      	adds	r3, r7, r4
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	18d3      	adds	r3, r2, r3
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	18d3      	adds	r3, r2, r3
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	0019      	movs	r1, r3
 8003574:	f001 f87a 	bl	800466c <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8003578:	193b      	adds	r3, r7, r4
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	193b      	adds	r3, r7, r4
 800357e:	3201      	adds	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	230e      	movs	r3, #14
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3df      	bcc.n	8003552 <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <ReadHoldingRegistersFunctionRev+0xe0>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	0018      	movs	r0, r3
 8003598:	f001 f886 	bl	80046a8 <ModbusSlaveTransaction>
 800359c:	e002      	b.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 800359e:	2003      	movs	r0, #3
 80035a0:	f001 f9ac 	bl	80048fc <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 80035a4:	230f      	movs	r3, #15
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b005      	add	sp, #20
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	2000037e 	.word	0x2000037e
 80035b8:	20000380 	.word	0x20000380
 80035bc:	200003cc 	.word	0x200003cc

080035c0 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 80035cc:	4b75      	ldr	r3, [pc, #468]	@ (80037a4 <ModbusMap+0x1e4>)
 80035ce:	78da      	ldrb	r2, [r3, #3]
 80035d0:	4b75      	ldr	r3, [pc, #468]	@ (80037a8 <ModbusMap+0x1e8>)
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <ModbusMap+0x1e8>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	4313      	orrs	r3, r2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2201      	movs	r2, #1
 80035e2:	4053      	eors	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 80035ea:	4b70      	ldr	r3, [pc, #448]	@ (80037ac <ModbusMap+0x1ec>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	e016      	b.n	8003620 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 80035f2:	4b6d      	ldr	r3, [pc, #436]	@ (80037a8 <ModbusMap+0x1e8>)
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 80035fa:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <ModbusMap+0x1ec>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e00e      	b.n	8003620 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 8003602:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <ModbusMap+0x1e8>)
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 800360a:	4b68      	ldr	r3, [pc, #416]	@ (80037ac <ModbusMap+0x1ec>)
 800360c:	2202      	movs	r2, #2
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e006      	b.n	8003620 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 8003612:	4b64      	ldr	r3, [pc, #400]	@ (80037a4 <ModbusMap+0x1e4>)
 8003614:	78db      	ldrb	r3, [r3, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 800361a:	4b64      	ldr	r3, [pc, #400]	@ (80037ac <ModbusMap+0x1ec>)
 800361c:	2206      	movs	r2, #6
 800361e:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 8003620:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <ModbusMap+0x1f0>)
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	001a      	movs	r2, r3
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <ModbusMap+0x1ec>)
 8003628:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 800362a:	4b62      	ldr	r3, [pc, #392]	@ (80037b4 <ModbusMap+0x1f4>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	001a      	movs	r2, r3
 8003630:	4b5e      	ldr	r3, [pc, #376]	@ (80037ac <ModbusMap+0x1ec>)
 8003632:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <ModbusMap+0x1f0>)
 8003636:	789b      	ldrb	r3, [r3, #2]
 8003638:	001a      	movs	r2, r3
 800363a:	4b5c      	ldr	r3, [pc, #368]	@ (80037ac <ModbusMap+0x1ec>)
 800363c:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 800363e:	4b5c      	ldr	r3, [pc, #368]	@ (80037b0 <ModbusMap+0x1f0>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	001a      	movs	r2, r3
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <ModbusMap+0x1ec>)
 8003646:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8003648:	4b57      	ldr	r3, [pc, #348]	@ (80037a8 <ModbusMap+0x1e8>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	001a      	movs	r2, r3
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <ModbusMap+0x1ec>)
 8003650:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 8003652:	4b56      	ldr	r3, [pc, #344]	@ (80037ac <ModbusMap+0x1ec>)
 8003654:	2200      	movs	r2, #0
 8003656:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8003658:	4b54      	ldr	r3, [pc, #336]	@ (80037ac <ModbusMap+0x1ec>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8003660:	4b52      	ldr	r3, [pc, #328]	@ (80037ac <ModbusMap+0x1ec>)
 8003662:	2201      	movs	r2, #1
 8003664:	81da      	strh	r2, [r3, #14]
 8003666:	e002      	b.n	800366e <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <ModbusMap+0x1ec>)
 800366a:	2200      	movs	r2, #0
 800366c:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 800366e:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <ModbusMap+0x1e8>)
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	001a      	movs	r2, r3
 8003674:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <ModbusMap+0x1ec>)
 8003676:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <ModbusMap+0x1e8>)
 800367a:	789b      	ldrb	r3, [r3, #2]
 800367c:	001a      	movs	r2, r3
 800367e:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <ModbusMap+0x1ec>)
 8003680:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <ModbusMap+0x1ec>)
 8003684:	2200      	movs	r2, #0
 8003686:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 8003688:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <ModbusMap+0x1ec>)
 800368a:	2200      	movs	r2, #0
 800368c:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 800368e:	4b45      	ldr	r3, [pc, #276]	@ (80037a4 <ModbusMap+0x1e4>)
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	001a      	movs	r2, r3
 8003694:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <ModbusMap+0x1ec>)
 8003696:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 8003698:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <ModbusMap+0x1ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 800369e:	4b46      	ldr	r3, [pc, #280]	@ (80037b8 <ModbusMap+0x1f8>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4a45      	ldr	r2, [pc, #276]	@ (80037bc <ModbusMap+0x1fc>)
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <ModbusMap+0x200>)
 80036b0:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 80036b2:	4b44      	ldr	r3, [pc, #272]	@ (80037c4 <ModbusMap+0x204>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <ModbusMap+0x208>)
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <ModbusMap+0x200>)
 80036c4:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 80036c6:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <ModbusMap+0x20c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	1c1a      	adds	r2, r3, #0
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	18d3      	adds	r3, r2, r3
 80036d0:	18db      	adds	r3, r3, r3
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <ModbusMap+0x200>)
 80036d6:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <ModbusMap+0x200>)
 80036da:	22dc      	movs	r2, #220	@ 0xdc
 80036dc:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 80036de:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <ModbusMap+0x210>)
 80036e0:	79db      	ldrb	r3, [r3, #7]
 80036e2:	001a      	movs	r2, r3
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <ModbusMap+0x214>)
 80036e6:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <ModbusMap+0x210>)
 80036ea:	799b      	ldrb	r3, [r3, #6]
 80036ec:	001a      	movs	r2, r3
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <ModbusMap+0x214>)
 80036f0:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 80036f2:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <ModbusMap+0x210>)
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	001a      	movs	r2, r3
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <ModbusMap+0x214>)
 80036fa:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 80036fc:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <ModbusMap+0x210>)
 80036fe:	789a      	ldrb	r2, [r3, #2]
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <ModbusMap+0x210>)
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	4313      	orrs	r3, r2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	001a      	movs	r2, r3
 800370a:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <ModbusMap+0x214>)
 800370c:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 800370e:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <ModbusMap+0x214>)
 8003710:	2200      	movs	r2, #0
 8003712:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 8003714:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <ModbusMap+0x210>)
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	4b2d      	ldr	r3, [pc, #180]	@ (80037d0 <ModbusMap+0x210>)
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	4313      	orrs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	001a      	movs	r2, r3
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <ModbusMap+0x214>)
 8003724:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 8003726:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <ModbusMap+0x218>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	001a      	movs	r2, r3
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <ModbusMap+0x214>)
 800372e:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8003730:	4b29      	ldr	r3, [pc, #164]	@ (80037d8 <ModbusMap+0x218>)
 8003732:	799b      	ldrb	r3, [r3, #6]
 8003734:	001a      	movs	r2, r3
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <ModbusMap+0x214>)
 8003738:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 800373a:	4b25      	ldr	r3, [pc, #148]	@ (80037d0 <ModbusMap+0x210>)
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <ModbusMap+0x210>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	4313      	orrs	r3, r2
 8003744:	b2db      	uxtb	r3, r3
 8003746:	001a      	movs	r2, r3
 8003748:	4b22      	ldr	r3, [pc, #136]	@ (80037d4 <ModbusMap+0x214>)
 800374a:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <ModbusMap+0x21c>)
 800374e:	4a24      	ldr	r2, [pc, #144]	@ (80037e0 <ModbusMap+0x220>)
 8003750:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <ModbusMap+0x21c>)
 8003754:	4a23      	ldr	r2, [pc, #140]	@ (80037e4 <ModbusMap+0x224>)
 8003756:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8003758:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <ModbusMap+0x21c>)
 800375a:	22ff      	movs	r2, #255	@ 0xff
 800375c:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 800375e:	f7ff fdc7 	bl	80032f0 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = reePlantilla[eeversion1]*256 + reePlantilla[eeversion2];
 8003762:	4b21      	ldr	r3, [pc, #132]	@ (80037e8 <ModbusMap+0x228>)
 8003764:	227b      	movs	r2, #123	@ 0x7b
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	b29b      	uxth	r3, r3
 800376c:	4a1e      	ldr	r2, [pc, #120]	@ (80037e8 <ModbusMap+0x228>)
 800376e:	217c      	movs	r1, #124	@ 0x7c
 8003770:	5c52      	ldrb	r2, [r2, r1]
 8003772:	189b      	adds	r3, r3, r2
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <ModbusMap+0x22c>)
 8003778:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 800377a:	f001 f973 	bl	8004a64 <ModbusSlavePool>
 800377e:	0002      	movs	r2, r0
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <ModbusMap+0x1d0>
 800378c:	f000 fe7d 	bl	800448a <ModbusMap+0xeca>
	    asm ("nop");
 8003790:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 8003792:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <ModbusMap+0x230>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d02c      	beq.n	80037f4 <ModbusMap+0x234>
 800379a:	2b06      	cmp	r3, #6
 800379c:	d100      	bne.n	80037a0 <ModbusMap+0x1e0>
 800379e:	e185      	b.n	8003aac <ModbusMap+0x4ec>
 80037a0:	f000 fe36 	bl	8004410 <ModbusMap+0xe50>
 80037a4:	20000bd8 	.word	0x20000bd8
 80037a8:	20000c9c 	.word	0x20000c9c
 80037ac:	20000050 	.word	0x20000050
 80037b0:	20000c04 	.word	0x20000c04
 80037b4:	20000c40 	.word	0x20000c40
 80037b8:	20000c10 	.word	0x20000c10
 80037bc:	20000c11 	.word	0x20000c11
 80037c0:	2000006c 	.word	0x2000006c
 80037c4:	20000c12 	.word	0x20000c12
 80037c8:	20000c13 	.word	0x20000c13
 80037cc:	20000c2e 	.word	0x20000c2e
 80037d0:	20000be8 	.word	0x20000be8
 80037d4:	20000074 	.word	0x20000074
 80037d8:	20000be0 	.word	0x20000be0
 80037dc:	20000088 	.word	0x20000088
 80037e0:	ffffb4a2 	.word	0xffffb4a2
 80037e4:	ffffeb4f 	.word	0xffffeb4f
 80037e8:	20000cec 	.word	0x20000cec
 80037ec:	20000090 	.word	0x20000090
 80037f0:	200003cc 	.word	0x200003cc
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 80037f4:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 80037f6:	4bdf      	ldr	r3, [pc, #892]	@ (8003b74 <ModbusMap+0x5b4>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(reePlantilla[eeescala] == 32)
 80037fc:	4bde      	ldr	r3, [pc, #888]	@ (8003b78 <ModbusMap+0x5b8>)
 80037fe:	2252      	movs	r2, #82	@ 0x52
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	2b20      	cmp	r3, #32
 8003804:	d102      	bne.n	800380c <ModbusMap+0x24c>
					PNU_0x3002 = 1;
 8003806:	4bdb      	ldr	r3, [pc, #876]	@ (8003b74 <ModbusMap+0x5b4>)
 8003808:	2201      	movs	r2, #1
 800380a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eespdiur_L]);
 800380c:	4bdb      	ldr	r3, [pc, #876]	@ (8003b7c <ModbusMap+0x5bc>)
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff fc18 	bl	8003044 <findLastValue>
 8003814:	0003      	movs	r3, r0
 8003816:	b29b      	uxth	r3, r3
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b29c      	uxth	r4, r3
 800381c:	4bd8      	ldr	r3, [pc, #864]	@ (8003b80 <ModbusMap+0x5c0>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7ff fc10 	bl	8003044 <findLastValue>
 8003824:	0003      	movs	r3, r0
 8003826:	b29b      	uxth	r3, r3
 8003828:	18e3      	adds	r3, r4, r3
 800382a:	b29a      	uxth	r2, r3
 800382c:	4bd5      	ldr	r3, [pc, #852]	@ (8003b84 <ModbusMap+0x5c4>)
 800382e:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = reePlantilla[eedifdiur_H] * 256 + reePlantilla[eedifdiur_L];
 8003830:	4bd1      	ldr	r3, [pc, #836]	@ (8003b78 <ModbusMap+0x5b8>)
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	b29b      	uxth	r3, r3
 8003838:	4acf      	ldr	r2, [pc, #828]	@ (8003b78 <ModbusMap+0x5b8>)
 800383a:	7912      	ldrb	r2, [r2, #4]
 800383c:	189b      	adds	r3, r3, r2
 800383e:	b29a      	uxth	r2, r3
 8003840:	4bd1      	ldr	r3, [pc, #836]	@ (8003b88 <ModbusMap+0x5c8>)
 8003842:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = reePlantilla[eeAddModBus];
 8003844:	4bcc      	ldr	r3, [pc, #816]	@ (8003b78 <ModbusMap+0x5b8>)
 8003846:	2272      	movs	r2, #114	@ 0x72
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	001a      	movs	r2, r3
 800384c:	4bcf      	ldr	r3, [pc, #828]	@ (8003b8c <ModbusMap+0x5cc>)
 800384e:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = reePlantilla[eetimepa];
 8003850:	4bc9      	ldr	r3, [pc, #804]	@ (8003b78 <ModbusMap+0x5b8>)
 8003852:	2249      	movs	r2, #73	@ 0x49
 8003854:	5c9b      	ldrb	r3, [r3, r2]
 8003856:	001a      	movs	r2, r3
 8003858:	4bcd      	ldr	r3, [pc, #820]	@ (8003b90 <ModbusMap+0x5d0>)
 800385a:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 800385c:	4acd      	ldr	r2, [pc, #820]	@ (8003b94 <ModbusMap+0x5d4>)
 800385e:	230e      	movs	r3, #14
 8003860:	33ff      	adds	r3, #255	@ 0xff
 8003862:	0019      	movs	r1, r3
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fe37 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <ModbusMap+0x2b6>
 8003872:	f000 fdd1 	bl	8004418 <ModbusMap+0xe58>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 8003876:	4ac8      	ldr	r2, [pc, #800]	@ (8003b98 <ModbusMap+0x5d8>)
 8003878:	49c8      	ldr	r1, [pc, #800]	@ (8003b9c <ModbusMap+0x5dc>)
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fe2c 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <ModbusMap+0x2cc>
 8003888:	f000 fdc8 	bl	800441c <ModbusMap+0xe5c>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 800388c:	4ac4      	ldr	r2, [pc, #784]	@ (8003ba0 <ModbusMap+0x5e0>)
 800388e:	2382      	movs	r3, #130	@ 0x82
 8003890:	0099      	lsls	r1, r3, #2
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fe20 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d001      	beq.n	80038a4 <ModbusMap+0x2e4>
 80038a0:	f000 fdbe 	bl	8004420 <ModbusMap+0xe60>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 80038a4:	4abf      	ldr	r2, [pc, #764]	@ (8003ba4 <ModbusMap+0x5e4>)
 80038a6:	49c0      	ldr	r1, [pc, #768]	@ (8003ba8 <ModbusMap+0x5e8>)
 80038a8:	23c0      	movs	r3, #192	@ 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fe15 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <ModbusMap+0x2fa>
 80038b6:	f000 fdb5 	bl	8004424 <ModbusMap+0xe64>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 80038ba:	4abc      	ldr	r2, [pc, #752]	@ (8003bac <ModbusMap+0x5ec>)
 80038bc:	23c4      	movs	r3, #196	@ 0xc4
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	23c4      	movs	r3, #196	@ 0xc4
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fe09 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <ModbusMap+0x312>
 80038ce:	f000 fdab 	bl	8004428 <ModbusMap+0xe68>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 80038d2:	4bb7      	ldr	r3, [pc, #732]	@ (8003bb0 <ModbusMap+0x5f0>)
 80038d4:	001a      	movs	r2, r3
 80038d6:	2110      	movs	r1, #16
 80038d8:	2010      	movs	r0, #16
 80038da:	f7ff fdff 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <ModbusMap+0x326>
 80038e2:	f000 fda3 	bl	800442c <ModbusMap+0xe6c>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 80038e6:	4ab3      	ldr	r2, [pc, #716]	@ (8003bb4 <ModbusMap+0x5f4>)
 80038e8:	23c0      	movs	r3, #192	@ 0xc0
 80038ea:	0199      	lsls	r1, r3, #6
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff fdf3 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <ModbusMap+0x33e>
 80038fa:	f000 fd99 	bl	8004430 <ModbusMap+0xe70>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 80038fe:	4b9d      	ldr	r3, [pc, #628]	@ (8003b74 <ModbusMap+0x5b4>)
 8003900:	49ad      	ldr	r1, [pc, #692]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003902:	48ad      	ldr	r0, [pc, #692]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003904:	001a      	movs	r2, r3
 8003906:	f7ff fde9 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d001      	beq.n	8003912 <ModbusMap+0x352>
 800390e:	f000 fd91 	bl	8004434 <ModbusMap+0xe74>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8003912:	4b9c      	ldr	r3, [pc, #624]	@ (8003b84 <ModbusMap+0x5c4>)
 8003914:	49a9      	ldr	r1, [pc, #676]	@ (8003bbc <ModbusMap+0x5fc>)
 8003916:	48a9      	ldr	r0, [pc, #676]	@ (8003bbc <ModbusMap+0x5fc>)
 8003918:	001a      	movs	r2, r3
 800391a:	f7ff fddf 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <ModbusMap+0x366>
 8003922:	f000 fd89 	bl	8004438 <ModbusMap+0xe78>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 8003926:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <ModbusMap+0x5c8>)
 8003928:	49a5      	ldr	r1, [pc, #660]	@ (8003bc0 <ModbusMap+0x600>)
 800392a:	48a5      	ldr	r0, [pc, #660]	@ (8003bc0 <ModbusMap+0x600>)
 800392c:	001a      	movs	r2, r3
 800392e:	f7ff fdd5 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d001      	beq.n	800393a <ModbusMap+0x37a>
 8003936:	f000 fd81 	bl	800443c <ModbusMap+0xe7c>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 800393a:	4ba2      	ldr	r3, [pc, #648]	@ (8003bc4 <ModbusMap+0x604>)
 800393c:	49a2      	ldr	r1, [pc, #648]	@ (8003bc8 <ModbusMap+0x608>)
 800393e:	48a2      	ldr	r0, [pc, #648]	@ (8003bc8 <ModbusMap+0x608>)
 8003940:	001a      	movs	r2, r3
 8003942:	f7ff fdcb 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d001      	beq.n	800394e <ModbusMap+0x38e>
 800394a:	f000 fd79 	bl	8004440 <ModbusMap+0xe80>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 800394e:	4b9f      	ldr	r3, [pc, #636]	@ (8003bcc <ModbusMap+0x60c>)
 8003950:	499f      	ldr	r1, [pc, #636]	@ (8003bd0 <ModbusMap+0x610>)
 8003952:	489f      	ldr	r0, [pc, #636]	@ (8003bd0 <ModbusMap+0x610>)
 8003954:	001a      	movs	r2, r3
 8003956:	f7ff fdc1 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <ModbusMap+0x3a2>
 800395e:	f000 fd71 	bl	8004444 <ModbusMap+0xe84>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8003962:	4b9c      	ldr	r3, [pc, #624]	@ (8003bd4 <ModbusMap+0x614>)
 8003964:	499c      	ldr	r1, [pc, #624]	@ (8003bd8 <ModbusMap+0x618>)
 8003966:	489c      	ldr	r0, [pc, #624]	@ (8003bd8 <ModbusMap+0x618>)
 8003968:	001a      	movs	r2, r3
 800396a:	f7ff fdb7 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <ModbusMap+0x3b6>
 8003972:	f000 fd69 	bl	8004448 <ModbusMap+0xe88>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 8003976:	4b99      	ldr	r3, [pc, #612]	@ (8003bdc <ModbusMap+0x61c>)
 8003978:	4999      	ldr	r1, [pc, #612]	@ (8003be0 <ModbusMap+0x620>)
 800397a:	4899      	ldr	r0, [pc, #612]	@ (8003be0 <ModbusMap+0x620>)
 800397c:	001a      	movs	r2, r3
 800397e:	f7ff fdad 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <ModbusMap+0x3ca>
 8003986:	f000 fd61 	bl	800444c <ModbusMap+0xe8c>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800398a:	4b96      	ldr	r3, [pc, #600]	@ (8003be4 <ModbusMap+0x624>)
 800398c:	4996      	ldr	r1, [pc, #600]	@ (8003be8 <ModbusMap+0x628>)
 800398e:	4896      	ldr	r0, [pc, #600]	@ (8003be8 <ModbusMap+0x628>)
 8003990:	001a      	movs	r2, r3
 8003992:	f7ff fda3 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <ModbusMap+0x3de>
 800399a:	f000 fd59 	bl	8004450 <ModbusMap+0xe90>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 800399e:	4b93      	ldr	r3, [pc, #588]	@ (8003bec <ModbusMap+0x62c>)
 80039a0:	4993      	ldr	r1, [pc, #588]	@ (8003bf0 <ModbusMap+0x630>)
 80039a2:	4893      	ldr	r0, [pc, #588]	@ (8003bf0 <ModbusMap+0x630>)
 80039a4:	001a      	movs	r2, r3
 80039a6:	f7ff fd99 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <ModbusMap+0x3f2>
 80039ae:	f000 fd51 	bl	8004454 <ModbusMap+0xe94>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 80039b2:	4b90      	ldr	r3, [pc, #576]	@ (8003bf4 <ModbusMap+0x634>)
 80039b4:	4990      	ldr	r1, [pc, #576]	@ (8003bf8 <ModbusMap+0x638>)
 80039b6:	4890      	ldr	r0, [pc, #576]	@ (8003bf8 <ModbusMap+0x638>)
 80039b8:	001a      	movs	r2, r3
 80039ba:	f7ff fd8f 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d001      	beq.n	80039c6 <ModbusMap+0x406>
 80039c2:	f000 fd49 	bl	8004458 <ModbusMap+0xe98>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 80039c6:	4b8d      	ldr	r3, [pc, #564]	@ (8003bfc <ModbusMap+0x63c>)
 80039c8:	498d      	ldr	r1, [pc, #564]	@ (8003c00 <ModbusMap+0x640>)
 80039ca:	488d      	ldr	r0, [pc, #564]	@ (8003c00 <ModbusMap+0x640>)
 80039cc:	001a      	movs	r2, r3
 80039ce:	f7ff fd85 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d001      	beq.n	80039da <ModbusMap+0x41a>
 80039d6:	f000 fd41 	bl	800445c <ModbusMap+0xe9c>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 80039da:	4b8a      	ldr	r3, [pc, #552]	@ (8003c04 <ModbusMap+0x644>)
 80039dc:	498a      	ldr	r1, [pc, #552]	@ (8003c08 <ModbusMap+0x648>)
 80039de:	488a      	ldr	r0, [pc, #552]	@ (8003c08 <ModbusMap+0x648>)
 80039e0:	001a      	movs	r2, r3
 80039e2:	f7ff fd7b 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d001      	beq.n	80039ee <ModbusMap+0x42e>
 80039ea:	f000 fd39 	bl	8004460 <ModbusMap+0xea0>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 80039ee:	4b87      	ldr	r3, [pc, #540]	@ (8003c0c <ModbusMap+0x64c>)
 80039f0:	4987      	ldr	r1, [pc, #540]	@ (8003c10 <ModbusMap+0x650>)
 80039f2:	4887      	ldr	r0, [pc, #540]	@ (8003c10 <ModbusMap+0x650>)
 80039f4:	001a      	movs	r2, r3
 80039f6:	f7ff fd71 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <ModbusMap+0x442>
 80039fe:	f000 fd31 	bl	8004464 <ModbusMap+0xea4>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8003a02:	4b84      	ldr	r3, [pc, #528]	@ (8003c14 <ModbusMap+0x654>)
 8003a04:	4984      	ldr	r1, [pc, #528]	@ (8003c18 <ModbusMap+0x658>)
 8003a06:	4884      	ldr	r0, [pc, #528]	@ (8003c18 <ModbusMap+0x658>)
 8003a08:	001a      	movs	r2, r3
 8003a0a:	f7ff fd67 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <ModbusMap+0x456>
 8003a12:	f000 fd29 	bl	8004468 <ModbusMap+0xea8>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 8003a16:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <ModbusMap+0x5cc>)
 8003a18:	4980      	ldr	r1, [pc, #512]	@ (8003c1c <ModbusMap+0x65c>)
 8003a1a:	4880      	ldr	r0, [pc, #512]	@ (8003c1c <ModbusMap+0x65c>)
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	f7ff fd5d 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <ModbusMap+0x46a>
 8003a26:	f000 fd21 	bl	800446c <ModbusMap+0xeac>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 8003a2a:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <ModbusMap+0x5d0>)
 8003a2c:	497c      	ldr	r1, [pc, #496]	@ (8003c20 <ModbusMap+0x660>)
 8003a2e:	487c      	ldr	r0, [pc, #496]	@ (8003c20 <ModbusMap+0x660>)
 8003a30:	001a      	movs	r2, r3
 8003a32:	f7ff fd53 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <ModbusMap+0x47e>
 8003a3a:	f000 fd19 	bl	8004470 <ModbusMap+0xeb0>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8003a3e:	4b79      	ldr	r3, [pc, #484]	@ (8003c24 <ModbusMap+0x664>)
 8003a40:	4979      	ldr	r1, [pc, #484]	@ (8003c28 <ModbusMap+0x668>)
 8003a42:	4879      	ldr	r0, [pc, #484]	@ (8003c28 <ModbusMap+0x668>)
 8003a44:	001a      	movs	r2, r3
 8003a46:	f7ff fd49 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <ModbusMap+0x492>
 8003a4e:	f000 fd11 	bl	8004474 <ModbusMap+0xeb4>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8003a52:	4b76      	ldr	r3, [pc, #472]	@ (8003c2c <ModbusMap+0x66c>)
 8003a54:	4976      	ldr	r1, [pc, #472]	@ (8003c30 <ModbusMap+0x670>)
 8003a56:	4876      	ldr	r0, [pc, #472]	@ (8003c30 <ModbusMap+0x670>)
 8003a58:	001a      	movs	r2, r3
 8003a5a:	f7ff fd3f 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <ModbusMap+0x4a6>
 8003a62:	f000 fd09 	bl	8004478 <ModbusMap+0xeb8>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 8003a66:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <ModbusMap+0x674>)
 8003a68:	4973      	ldr	r1, [pc, #460]	@ (8003c38 <ModbusMap+0x678>)
 8003a6a:	4873      	ldr	r0, [pc, #460]	@ (8003c38 <ModbusMap+0x678>)
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	f7ff fd35 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <ModbusMap+0x4ba>
 8003a76:	f000 fd01 	bl	800447c <ModbusMap+0xebc>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 8003a7a:	4b70      	ldr	r3, [pc, #448]	@ (8003c3c <ModbusMap+0x67c>)
 8003a7c:	4970      	ldr	r1, [pc, #448]	@ (8003c40 <ModbusMap+0x680>)
 8003a7e:	4870      	ldr	r0, [pc, #448]	@ (8003c40 <ModbusMap+0x680>)
 8003a80:	001a      	movs	r2, r3
 8003a82:	f7ff fd2b 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a86:	1e03      	subs	r3, r0, #0
 8003a88:	d001      	beq.n	8003a8e <ModbusMap+0x4ce>
 8003a8a:	f000 fcf9 	bl	8004480 <ModbusMap+0xec0>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c44 <ModbusMap+0x684>)
 8003a90:	496d      	ldr	r1, [pc, #436]	@ (8003c48 <ModbusMap+0x688>)
 8003a92:	486d      	ldr	r0, [pc, #436]	@ (8003c48 <ModbusMap+0x688>)
 8003a94:	001a      	movs	r2, r3
 8003a96:	f7ff fd21 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a9a:	1e03      	subs	r3, r0, #0
 8003a9c:	d001      	beq.n	8003aa2 <ModbusMap+0x4e2>
 8003a9e:	f000 fcf1 	bl	8004484 <ModbusMap+0xec4>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f000 ff2a 	bl	80048fc <ModbusSlaveExceptionTransaction>
				}
				break;
 8003aa8:	f000 fcef 	bl	800448a <ModbusMap+0xeca>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 8003aac:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <ModbusMap+0x68c>)
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	23c0      	movs	r3, #192	@ 0xc0
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d310      	bcc.n	8003ada <ModbusMap+0x51a>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	@ (8003c4c <ModbusMap+0x68c>)
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	23c0      	movs	r3, #192	@ 0xc0
 8003abe:	019b      	lsls	r3, r3, #6
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d80a      	bhi.n	8003ada <ModbusMap+0x51a>
					PNU_0x3000 = lowByte(_u16WriteVal);
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <ModbusMap+0x690>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	4b39      	ldr	r3, [pc, #228]	@ (8003bb4 <ModbusMap+0x5f4>)
 8003ace:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ad0:	4b60      	ldr	r3, [pc, #384]	@ (8003c54 <ModbusMap+0x694>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fde7 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 8003ada:	4b5c      	ldr	r3, [pc, #368]	@ (8003c4c <ModbusMap+0x68c>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	4a5e      	ldr	r2, [pc, #376]	@ (8003c58 <ModbusMap+0x698>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d800      	bhi.n	8003ae6 <ModbusMap+0x526>
 8003ae4:	e0c4      	b.n	8003c70 <ModbusMap+0x6b0>
 8003ae6:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <ModbusMap+0x68c>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d900      	bls.n	8003af2 <ModbusMap+0x532>
 8003af0:	e0be      	b.n	8003c70 <ModbusMap+0x6b0>
					PNU_0x3002 = lowByte(_u16WriteVal);
 8003af2:	4b57      	ldr	r3, [pc, #348]	@ (8003c50 <ModbusMap+0x690>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	001a      	movs	r2, r3
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <ModbusMap+0x5b4>)
 8003afc:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <ModbusMap+0x5b4>)
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d118      	bne.n	8003b38 <ModbusMap+0x578>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala] == 32){
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b08:	2252      	movs	r2, #82	@ 0x52
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d101      	bne.n	8003b14 <ModbusMap+0x554>
							asm ("nop");
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	e011      	b.n	8003b38 <ModbusMap+0x578>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 8003b14:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <ModbusMap+0x69c>)
 8003b16:	2220      	movs	r2, #32
 8003b18:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8003b1a:	4b50      	ldr	r3, [pc, #320]	@ (8003c5c <ModbusMap+0x69c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	001a      	movs	r2, r3
 8003b20:	4b4f      	ldr	r3, [pc, #316]	@ (8003c60 <ModbusMap+0x6a0>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f003 fbdb 	bl	80072e0 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c5c <ModbusMap+0x69c>)
 8003b2c:	7819      	ldrb	r1, [r3, #0]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b30:	2252      	movs	r2, #82	@ 0x52
 8003b32:	5499      	strb	r1, [r3, r2]
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	e7fd      	b.n	8003b34 <ModbusMap+0x574>
						}
					}
					if (PNU_0x3002 == 0){
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <ModbusMap+0x5b4>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d000      	beq.n	8003b42 <ModbusMap+0x582>
 8003b40:	e091      	b.n	8003c66 <ModbusMap+0x6a6>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala]== 32){
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b44:	2252      	movs	r2, #82	@ 0x52
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d000      	beq.n	8003b4e <ModbusMap+0x58e>
 8003b4c:	e08a      	b.n	8003c64 <ModbusMap+0x6a4>
							waux = 0;//mov			waux,#0;	/ Carga
 8003b4e:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <ModbusMap+0x69c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 8003b54:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <ModbusMap+0x69c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <ModbusMap+0x6a0>)
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	0010      	movs	r0, r2
 8003b60:	f003 fbbe 	bl	80072e0 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b64:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <ModbusMap+0x69c>)
 8003b66:	7819      	ldrb	r1, [r3, #0]
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b6a:	2252      	movs	r2, #82	@ 0x52
 8003b6c:	5499      	strb	r1, [r3, r2]
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	e7fd      	b.n	8003b6e <ModbusMap+0x5ae>
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	20000b68 	.word	0x20000b68
 8003b78:	20000cec 	.word	0x20000cec
 8003b7c:	0803f001 	.word	0x0803f001
 8003b80:	0803f002 	.word	0x0803f002
 8003b84:	20000094 	.word	0x20000094
 8003b88:	20000096 	.word	0x20000096
 8003b8c:	200000aa 	.word	0x200000aa
 8003b90:	200000ac 	.word	0x200000ac
 8003b94:	20000050 	.word	0x20000050
 8003b98:	2000006c 	.word	0x2000006c
 8003b9c:	00002003 	.word	0x00002003
 8003ba0:	20000074 	.word	0x20000074
 8003ba4:	20000088 	.word	0x20000088
 8003ba8:	00000302 	.word	0x00000302
 8003bac:	20000090 	.word	0x20000090
 8003bb0:	20000b66 	.word	0x20000b66
 8003bb4:	20000092 	.word	0x20000092
 8003bb8:	00003002 	.word	0x00003002
 8003bbc:	00003004 	.word	0x00003004
 8003bc0:	00003006 	.word	0x00003006
 8003bc4:	20000098 	.word	0x20000098
 8003bc8:	00003008 	.word	0x00003008
 8003bcc:	20000b6a 	.word	0x20000b6a
 8003bd0:	0000300a 	.word	0x0000300a
 8003bd4:	2000009a 	.word	0x2000009a
 8003bd8:	0000300c 	.word	0x0000300c
 8003bdc:	20000b6c 	.word	0x20000b6c
 8003be0:	0000300e 	.word	0x0000300e
 8003be4:	2000009c 	.word	0x2000009c
 8003be8:	00003010 	.word	0x00003010
 8003bec:	2000009e 	.word	0x2000009e
 8003bf0:	00003012 	.word	0x00003012
 8003bf4:	200000a0 	.word	0x200000a0
 8003bf8:	00003014 	.word	0x00003014
 8003bfc:	200000a2 	.word	0x200000a2
 8003c00:	00003016 	.word	0x00003016
 8003c04:	200000a4 	.word	0x200000a4
 8003c08:	00003018 	.word	0x00003018
 8003c0c:	200000a6 	.word	0x200000a6
 8003c10:	0000301a 	.word	0x0000301a
 8003c14:	200000a8 	.word	0x200000a8
 8003c18:	0000301c 	.word	0x0000301c
 8003c1c:	0000301e 	.word	0x0000301e
 8003c20:	00003104 	.word	0x00003104
 8003c24:	200000ae 	.word	0x200000ae
 8003c28:	00003106 	.word	0x00003106
 8003c2c:	200000b0 	.word	0x200000b0
 8003c30:	00003108 	.word	0x00003108
 8003c34:	200000b2 	.word	0x200000b2
 8003c38:	0000310a 	.word	0x0000310a
 8003c3c:	200000b4 	.word	0x200000b4
 8003c40:	0000310c 	.word	0x0000310c
 8003c44:	200000b6 	.word	0x200000b6
 8003c48:	0000310e 	.word	0x0000310e
 8003c4c:	20000382 	.word	0x20000382
 8003c50:	20000384 	.word	0x20000384
 8003c54:	200003cc 	.word	0x200003cc
 8003c58:	00003001 	.word	0x00003001
 8003c5c:	20000bb6 	.word	0x20000bb6
 8003c60:	0803f052 	.word	0x0803f052
						}
						else{
							asm ("nop");
 8003c64:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c66:	4bbd      	ldr	r3, [pc, #756]	@ (8003f5c <ModbusMap+0x99c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fd1c 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 8003c70:	4bbb      	ldr	r3, [pc, #748]	@ (8003f60 <ModbusMap+0x9a0>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4abb      	ldr	r2, [pc, #748]	@ (8003f64 <ModbusMap+0x9a4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d92e      	bls.n	8003cd8 <ModbusMap+0x718>
 8003c7a:	4bb9      	ldr	r3, [pc, #740]	@ (8003f60 <ModbusMap+0x9a0>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	4aba      	ldr	r2, [pc, #744]	@ (8003f68 <ModbusMap+0x9a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d829      	bhi.n	8003cd8 <ModbusMap+0x718>
					PNU_0x3004 = _u16WriteVal;
 8003c84:	4bb9      	ldr	r3, [pc, #740]	@ (8003f6c <ModbusMap+0x9ac>)
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	4bb9      	ldr	r3, [pc, #740]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c8a:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8003c8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4bb7      	ldr	r3, [pc, #732]	@ (8003f74 <ModbusMap+0x9b4>)
 8003c98:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 8003c9a:	4bb5      	ldr	r3, [pc, #724]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4bb5      	ldr	r3, [pc, #724]	@ (8003f78 <ModbusMap+0x9b8>)
 8003ca2:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 8003ca4:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <ModbusMap+0x9b4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	001a      	movs	r2, r3
 8003caa:	4bb4      	ldr	r3, [pc, #720]	@ (8003f7c <ModbusMap+0x9bc>)
 8003cac:	0019      	movs	r1, r3
 8003cae:	0010      	movs	r0, r2
 8003cb0:	f003 fb16 	bl	80072e0 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f78 <ModbusMap+0x9b8>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	001a      	movs	r2, r3
 8003cba:	4bb1      	ldr	r3, [pc, #708]	@ (8003f80 <ModbusMap+0x9c0>)
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	f003 fb0e 	bl	80072e0 <wreeprom>

					reePlantilla[eespdiur_H] = waux;
 8003cc4:	4bab      	ldr	r3, [pc, #684]	@ (8003f74 <ModbusMap+0x9b4>)
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4bae      	ldr	r3, [pc, #696]	@ (8003f84 <ModbusMap+0x9c4>)
 8003cca:	705a      	strb	r2, [r3, #1]
					reePlantilla[eespdiur_L] = wreg;
 8003ccc:	4baa      	ldr	r3, [pc, #680]	@ (8003f78 <ModbusMap+0x9b8>)
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	4bac      	ldr	r3, [pc, #688]	@ (8003f84 <ModbusMap+0x9c4>)
 8003cd2:	709a      	strb	r2, [r3, #2]

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	e7fd      	b.n	8003cd4 <ModbusMap+0x714>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 8003cd8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f60 <ModbusMap+0x9a0>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4aaa      	ldr	r2, [pc, #680]	@ (8003f88 <ModbusMap+0x9c8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d92e      	bls.n	8003d40 <ModbusMap+0x780>
 8003ce2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	4aa9      	ldr	r2, [pc, #676]	@ (8003f8c <ModbusMap+0x9cc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d829      	bhi.n	8003d40 <ModbusMap+0x780>
					PNU_0x3006 = _u16WriteVal;
 8003cec:	4b9f      	ldr	r3, [pc, #636]	@ (8003f6c <ModbusMap+0x9ac>)
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	@ (8003f90 <ModbusMap+0x9d0>)
 8003cf2:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 8003cf4:	4ba6      	ldr	r3, [pc, #664]	@ (8003f90 <ModbusMap+0x9d0>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4b9d      	ldr	r3, [pc, #628]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d00:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 8003d02:	4ba3      	ldr	r3, [pc, #652]	@ (8003f90 <ModbusMap+0x9d0>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b9b      	ldr	r3, [pc, #620]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d0a:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8003d0c:	4b99      	ldr	r3, [pc, #612]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	001a      	movs	r2, r3
 8003d12:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <ModbusMap+0x9d4>)
 8003d14:	0019      	movs	r1, r3
 8003d16:	0010      	movs	r0, r2
 8003d18:	f003 fae2 	bl	80072e0 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8003d1c:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	001a      	movs	r2, r3
 8003d22:	4b9d      	ldr	r3, [pc, #628]	@ (8003f98 <ModbusMap+0x9d8>)
 8003d24:	0019      	movs	r1, r3
 8003d26:	0010      	movs	r0, r2
 8003d28:	f003 fada 	bl	80072e0 <wreeprom>

					reePlantilla[eedifdiur_H] = waux;
 8003d2c:	4b91      	ldr	r3, [pc, #580]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	4b94      	ldr	r3, [pc, #592]	@ (8003f84 <ModbusMap+0x9c4>)
 8003d32:	70da      	strb	r2, [r3, #3]
					reePlantilla[eedifdiur_L] = wreg;
 8003d34:	4b90      	ldr	r3, [pc, #576]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	4b92      	ldr	r3, [pc, #584]	@ (8003f84 <ModbusMap+0x9c4>)
 8003d3a:	711a      	strb	r2, [r3, #4]

			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	e7fd      	b.n	8003d3c <ModbusMap+0x77c>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 8003d40:	4b87      	ldr	r3, [pc, #540]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	4a95      	ldr	r2, [pc, #596]	@ (8003f9c <ModbusMap+0x9dc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d90f      	bls.n	8003d6a <ModbusMap+0x7aa>
 8003d4a:	4b85      	ldr	r3, [pc, #532]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	4a94      	ldr	r2, [pc, #592]	@ (8003fa0 <ModbusMap+0x9e0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d80a      	bhi.n	8003d6a <ModbusMap+0x7aa>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8003d54:	4b85      	ldr	r3, [pc, #532]	@ (8003f6c <ModbusMap+0x9ac>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	4b91      	ldr	r3, [pc, #580]	@ (8003fa4 <ModbusMap+0x9e4>)
 8003d5e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d60:	4b7e      	ldr	r3, [pc, #504]	@ (8003f5c <ModbusMap+0x99c>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 fc9f 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	4a8e      	ldr	r2, [pc, #568]	@ (8003fa8 <ModbusMap+0x9e8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d90f      	bls.n	8003d94 <ModbusMap+0x7d4>
 8003d74:	4b7a      	ldr	r3, [pc, #488]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	4a8c      	ldr	r2, [pc, #560]	@ (8003fac <ModbusMap+0x9ec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d80a      	bhi.n	8003d94 <ModbusMap+0x7d4>
					PNU_0x300A = lowByte(_u16WriteVal);
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f6c <ModbusMap+0x9ac>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	001a      	movs	r2, r3
 8003d86:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb0 <ModbusMap+0x9f0>)
 8003d88:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d8a:	4b74      	ldr	r3, [pc, #464]	@ (8003f5c <ModbusMap+0x99c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fc8a 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8003d94:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	4a86      	ldr	r2, [pc, #536]	@ (8003fb4 <ModbusMap+0x9f4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d90f      	bls.n	8003dbe <ModbusMap+0x7fe>
 8003d9e:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <ModbusMap+0x9a0>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	4a85      	ldr	r2, [pc, #532]	@ (8003fb8 <ModbusMap+0x9f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d80a      	bhi.n	8003dbe <ModbusMap+0x7fe>
					PNU_0x300C = lowByte(_u16WriteVal);
 8003da8:	4b70      	ldr	r3, [pc, #448]	@ (8003f6c <ModbusMap+0x9ac>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	001a      	movs	r2, r3
 8003db0:	4b82      	ldr	r3, [pc, #520]	@ (8003fbc <ModbusMap+0x9fc>)
 8003db2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003db4:	4b69      	ldr	r3, [pc, #420]	@ (8003f5c <ModbusMap+0x99c>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fc75 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 8003dbe:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc0 <ModbusMap+0xa00>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d90f      	bls.n	8003de8 <ModbusMap+0x828>
 8003dc8:	4b65      	ldr	r3, [pc, #404]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <ModbusMap+0xa04>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d80a      	bhi.n	8003de8 <ModbusMap+0x828>
					PNU_0x300E = lowByte(_u16WriteVal);
 8003dd2:	4b66      	ldr	r3, [pc, #408]	@ (8003f6c <ModbusMap+0x9ac>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	001a      	movs	r2, r3
 8003dda:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc8 <ModbusMap+0xa08>)
 8003ddc:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dde:	4b5f      	ldr	r3, [pc, #380]	@ (8003f5c <ModbusMap+0x99c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fc60 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 8003de8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	4a77      	ldr	r2, [pc, #476]	@ (8003fcc <ModbusMap+0xa0c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d90f      	bls.n	8003e12 <ModbusMap+0x852>
 8003df2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f60 <ModbusMap+0x9a0>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	4a76      	ldr	r2, [pc, #472]	@ (8003fd0 <ModbusMap+0xa10>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d80a      	bhi.n	8003e12 <ModbusMap+0x852>
					PNU_0x3010 = lowByte(_u16WriteVal);
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <ModbusMap+0x9ac>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	001a      	movs	r2, r3
 8003e04:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <ModbusMap+0xa14>)
 8003e06:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e08:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <ModbusMap+0x99c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fc4b 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	4a70      	ldr	r2, [pc, #448]	@ (8003fd8 <ModbusMap+0xa18>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d90f      	bls.n	8003e3c <ModbusMap+0x87c>
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <ModbusMap+0xa1c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d80a      	bhi.n	8003e3c <ModbusMap+0x87c>
					PNU_0x3012 = lowByte(_u16WriteVal);
 8003e26:	4b51      	ldr	r3, [pc, #324]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe0 <ModbusMap+0xa20>)
 8003e30:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e32:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <ModbusMap+0x99c>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 fc36 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8003e3c:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	4a68      	ldr	r2, [pc, #416]	@ (8003fe4 <ModbusMap+0xa24>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90f      	bls.n	8003e66 <ModbusMap+0x8a6>
 8003e46:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	4a67      	ldr	r2, [pc, #412]	@ (8003fe8 <ModbusMap+0xa28>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d80a      	bhi.n	8003e66 <ModbusMap+0x8a6>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8003e50:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	001a      	movs	r2, r3
 8003e58:	4b64      	ldr	r3, [pc, #400]	@ (8003fec <ModbusMap+0xa2c>)
 8003e5a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f5c <ModbusMap+0x99c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 fc21 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	4a61      	ldr	r2, [pc, #388]	@ (8003ff0 <ModbusMap+0xa30>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d90f      	bls.n	8003e90 <ModbusMap+0x8d0>
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff4 <ModbusMap+0xa34>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d80a      	bhi.n	8003e90 <ModbusMap+0x8d0>
					PNU_0x3016 = lowByte(_u16WriteVal);
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	001a      	movs	r2, r3
 8003e82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <ModbusMap+0xa38>)
 8003e84:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e86:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <ModbusMap+0x99c>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fc0c 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8003e90:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	4a59      	ldr	r2, [pc, #356]	@ (8003ffc <ModbusMap+0xa3c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90f      	bls.n	8003eba <ModbusMap+0x8fa>
 8003e9a:	4b31      	ldr	r3, [pc, #196]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <ModbusMap+0xa40>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d80a      	bhi.n	8003eba <ModbusMap+0x8fa>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8003ea4:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <ModbusMap+0x9ac>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	001a      	movs	r2, r3
 8003eac:	4b55      	ldr	r3, [pc, #340]	@ (8004004 <ModbusMap+0xa44>)
 8003eae:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <ModbusMap+0x99c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fbf7 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <ModbusMap+0xa48>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d90f      	bls.n	8003ee4 <ModbusMap+0x924>
 8003ec4:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	@ (800400c <ModbusMap+0xa4c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d80a      	bhi.n	8003ee4 <ModbusMap+0x924>
					PNU_0x301A = lowByte(_u16WriteVal);
 8003ece:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <ModbusMap+0x9ac>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8004010 <ModbusMap+0xa50>)
 8003ed8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <ModbusMap+0x99c>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 fbe2 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8004014 <ModbusMap+0xa54>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90f      	bls.n	8003f0e <ModbusMap+0x94e>
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	4a49      	ldr	r2, [pc, #292]	@ (8004018 <ModbusMap+0xa58>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d80a      	bhi.n	8003f0e <ModbusMap+0x94e>
					PNU_0x301C = lowByte(_u16WriteVal);
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <ModbusMap+0x9ac>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	001a      	movs	r2, r3
 8003f00:	4b46      	ldr	r3, [pc, #280]	@ (800401c <ModbusMap+0xa5c>)
 8003f02:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003f04:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <ModbusMap+0x99c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fbcd 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <ModbusMap+0x9a0>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	4a43      	ldr	r2, [pc, #268]	@ (8004020 <ModbusMap+0xa60>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d800      	bhi.n	8003f1a <ModbusMap+0x95a>
 8003f18:	e08a      	b.n	8004030 <ModbusMap+0xa70>
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <ModbusMap+0x9a0>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	@ (8004024 <ModbusMap+0xa64>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d900      	bls.n	8003f26 <ModbusMap+0x966>
 8003f24:	e084      	b.n	8004030 <ModbusMap+0xa70>
					PNU_0x301E = lowByte(_u16WriteVal);
 8003f26:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <ModbusMap+0x9ac>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <ModbusMap+0xa68>)
 8003f30:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <ModbusMap+0xa68>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f3a:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	001a      	movs	r2, r3
 8003f42:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <ModbusMap+0xa6c>)
 8003f44:	0019      	movs	r1, r3
 8003f46:	0010      	movs	r0, r2
 8003f48:	f003 f9ca 	bl	80072e0 <wreeprom>
					reePlantilla[eeAddModBus] = waux;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <ModbusMap+0x9c4>)
 8003f52:	2272      	movs	r2, #114	@ 0x72
 8003f54:	5499      	strb	r1, [r3, r2]

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	e7fd      	b.n	8003f56 <ModbusMap+0x996>
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	200003cc 	.word	0x200003cc
 8003f60:	20000382 	.word	0x20000382
 8003f64:	00003003 	.word	0x00003003
 8003f68:	00003004 	.word	0x00003004
 8003f6c:	20000384 	.word	0x20000384
 8003f70:	20000094 	.word	0x20000094
 8003f74:	20000bb6 	.word	0x20000bb6
 8003f78:	20000bb7 	.word	0x20000bb7
 8003f7c:	0803f001 	.word	0x0803f001
 8003f80:	0803f002 	.word	0x0803f002
 8003f84:	20000cec 	.word	0x20000cec
 8003f88:	00003005 	.word	0x00003005
 8003f8c:	00003006 	.word	0x00003006
 8003f90:	20000096 	.word	0x20000096
 8003f94:	0803f003 	.word	0x0803f003
 8003f98:	0803f004 	.word	0x0803f004
 8003f9c:	00003007 	.word	0x00003007
 8003fa0:	00003008 	.word	0x00003008
 8003fa4:	20000098 	.word	0x20000098
 8003fa8:	00003009 	.word	0x00003009
 8003fac:	0000300a 	.word	0x0000300a
 8003fb0:	20000b6a 	.word	0x20000b6a
 8003fb4:	0000300b 	.word	0x0000300b
 8003fb8:	0000300c 	.word	0x0000300c
 8003fbc:	2000009a 	.word	0x2000009a
 8003fc0:	0000300d 	.word	0x0000300d
 8003fc4:	0000300e 	.word	0x0000300e
 8003fc8:	20000b6c 	.word	0x20000b6c
 8003fcc:	0000300f 	.word	0x0000300f
 8003fd0:	00003010 	.word	0x00003010
 8003fd4:	2000009c 	.word	0x2000009c
 8003fd8:	00003011 	.word	0x00003011
 8003fdc:	00003012 	.word	0x00003012
 8003fe0:	2000009e 	.word	0x2000009e
 8003fe4:	00003013 	.word	0x00003013
 8003fe8:	00003014 	.word	0x00003014
 8003fec:	200000a0 	.word	0x200000a0
 8003ff0:	00003015 	.word	0x00003015
 8003ff4:	00003016 	.word	0x00003016
 8003ff8:	200000a2 	.word	0x200000a2
 8003ffc:	00003017 	.word	0x00003017
 8004000:	00003018 	.word	0x00003018
 8004004:	200000a4 	.word	0x200000a4
 8004008:	00003019 	.word	0x00003019
 800400c:	0000301a 	.word	0x0000301a
 8004010:	200000a6 	.word	0x200000a6
 8004014:	0000301b 	.word	0x0000301b
 8004018:	0000301c 	.word	0x0000301c
 800401c:	200000a8 	.word	0x200000a8
 8004020:	0000301d 	.word	0x0000301d
 8004024:	0000301e 	.word	0x0000301e
 8004028:	200000aa 	.word	0x200000aa
 800402c:	0803f072 	.word	0x0803f072
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8004030:	4baa      	ldr	r3, [pc, #680]	@ (80042dc <ModbusMap+0xd1c>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	4aaa      	ldr	r2, [pc, #680]	@ (80042e0 <ModbusMap+0xd20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d91e      	bls.n	8004078 <ModbusMap+0xab8>
 800403a:	4ba8      	ldr	r3, [pc, #672]	@ (80042dc <ModbusMap+0xd1c>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	4aa9      	ldr	r2, [pc, #676]	@ (80042e4 <ModbusMap+0xd24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d819      	bhi.n	8004078 <ModbusMap+0xab8>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8004044:	4ba8      	ldr	r3, [pc, #672]	@ (80042e8 <ModbusMap+0xd28>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	001a      	movs	r2, r3
 800404c:	4ba7      	ldr	r3, [pc, #668]	@ (80042ec <ModbusMap+0xd2c>)
 800404e:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8004050:	4ba6      	ldr	r3, [pc, #664]	@ (80042ec <ModbusMap+0xd2c>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4ba6      	ldr	r3, [pc, #664]	@ (80042f0 <ModbusMap+0xd30>)
 8004058:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 800405a:	4ba5      	ldr	r3, [pc, #660]	@ (80042f0 <ModbusMap+0xd30>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	001a      	movs	r2, r3
 8004060:	4ba4      	ldr	r3, [pc, #656]	@ (80042f4 <ModbusMap+0xd34>)
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f003 f93b 	bl	80072e0 <wreeprom>
					reePlantilla[eetimepa] = waux;
 800406a:	4ba1      	ldr	r3, [pc, #644]	@ (80042f0 <ModbusMap+0xd30>)
 800406c:	7819      	ldrb	r1, [r3, #0]
 800406e:	4ba2      	ldr	r3, [pc, #648]	@ (80042f8 <ModbusMap+0xd38>)
 8004070:	2249      	movs	r2, #73	@ 0x49
 8004072:	5499      	strb	r1, [r3, r2]
			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	e7fd      	b.n	8004074 <ModbusMap+0xab4>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8004078:	4b98      	ldr	r3, [pc, #608]	@ (80042dc <ModbusMap+0xd1c>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	4a9f      	ldr	r2, [pc, #636]	@ (80042fc <ModbusMap+0xd3c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d90f      	bls.n	80040a2 <ModbusMap+0xae2>
 8004082:	4b96      	ldr	r3, [pc, #600]	@ (80042dc <ModbusMap+0xd1c>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	4a9e      	ldr	r2, [pc, #632]	@ (8004300 <ModbusMap+0xd40>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d80a      	bhi.n	80040a2 <ModbusMap+0xae2>
					PNU_0x3106 = lowByte(_u16WriteVal);
 800408c:	4b96      	ldr	r3, [pc, #600]	@ (80042e8 <ModbusMap+0xd28>)
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	001a      	movs	r2, r3
 8004094:	4b9b      	ldr	r3, [pc, #620]	@ (8004304 <ModbusMap+0xd44>)
 8004096:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004098:	4b9b      	ldr	r3, [pc, #620]	@ (8004308 <ModbusMap+0xd48>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fb03 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 80040a2:	4b8e      	ldr	r3, [pc, #568]	@ (80042dc <ModbusMap+0xd1c>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	4a99      	ldr	r2, [pc, #612]	@ (800430c <ModbusMap+0xd4c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d90f      	bls.n	80040cc <ModbusMap+0xb0c>
 80040ac:	4b8b      	ldr	r3, [pc, #556]	@ (80042dc <ModbusMap+0xd1c>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	4a97      	ldr	r2, [pc, #604]	@ (8004310 <ModbusMap+0xd50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d80a      	bhi.n	80040cc <ModbusMap+0xb0c>
					PNU_0x3108 = lowByte(_u16WriteVal);
 80040b6:	4b8c      	ldr	r3, [pc, #560]	@ (80042e8 <ModbusMap+0xd28>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	001a      	movs	r2, r3
 80040be:	4b95      	ldr	r3, [pc, #596]	@ (8004314 <ModbusMap+0xd54>)
 80040c0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040c2:	4b91      	ldr	r3, [pc, #580]	@ (8004308 <ModbusMap+0xd48>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 faee 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 80040cc:	4b83      	ldr	r3, [pc, #524]	@ (80042dc <ModbusMap+0xd1c>)
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	4a91      	ldr	r2, [pc, #580]	@ (8004318 <ModbusMap+0xd58>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d90f      	bls.n	80040f6 <ModbusMap+0xb36>
 80040d6:	4b81      	ldr	r3, [pc, #516]	@ (80042dc <ModbusMap+0xd1c>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	4a90      	ldr	r2, [pc, #576]	@ (800431c <ModbusMap+0xd5c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d80a      	bhi.n	80040f6 <ModbusMap+0xb36>
					PNU_0x310A = lowByte(_u16WriteVal);
 80040e0:	4b81      	ldr	r3, [pc, #516]	@ (80042e8 <ModbusMap+0xd28>)
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	001a      	movs	r2, r3
 80040e8:	4b8d      	ldr	r3, [pc, #564]	@ (8004320 <ModbusMap+0xd60>)
 80040ea:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040ec:	4b86      	ldr	r3, [pc, #536]	@ (8004308 <ModbusMap+0xd48>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fad9 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 80040f6:	4b79      	ldr	r3, [pc, #484]	@ (80042dc <ModbusMap+0xd1c>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	4a8a      	ldr	r2, [pc, #552]	@ (8004324 <ModbusMap+0xd64>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d90f      	bls.n	8004120 <ModbusMap+0xb60>
 8004100:	4b76      	ldr	r3, [pc, #472]	@ (80042dc <ModbusMap+0xd1c>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	4a88      	ldr	r2, [pc, #544]	@ (8004328 <ModbusMap+0xd68>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d80a      	bhi.n	8004120 <ModbusMap+0xb60>
					PNU_0x310C = lowByte(_u16WriteVal);
 800410a:	4b77      	ldr	r3, [pc, #476]	@ (80042e8 <ModbusMap+0xd28>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	001a      	movs	r2, r3
 8004112:	4b86      	ldr	r3, [pc, #536]	@ (800432c <ModbusMap+0xd6c>)
 8004114:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <ModbusMap+0xd48>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fac4 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8004120:	4b6e      	ldr	r3, [pc, #440]	@ (80042dc <ModbusMap+0xd1c>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	4a82      	ldr	r2, [pc, #520]	@ (8004330 <ModbusMap+0xd70>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90f      	bls.n	800414a <ModbusMap+0xb8a>
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <ModbusMap+0xd1c>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	4a81      	ldr	r2, [pc, #516]	@ (8004334 <ModbusMap+0xd74>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d80a      	bhi.n	800414a <ModbusMap+0xb8a>
					PNU_0x310E = lowByte(_u16WriteVal);
 8004134:	4b6c      	ldr	r3, [pc, #432]	@ (80042e8 <ModbusMap+0xd28>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	001a      	movs	r2, r3
 800413c:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <ModbusMap+0xd78>)
 800413e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004140:	4b71      	ldr	r3, [pc, #452]	@ (8004308 <ModbusMap+0xd48>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 faaf 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 800414a:	4b64      	ldr	r3, [pc, #400]	@ (80042dc <ModbusMap+0xd1c>)
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	23c8      	movs	r3, #200	@ 0xc8
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	429a      	cmp	r2, r3
 8004154:	d310      	bcc.n	8004178 <ModbusMap+0xbb8>
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <ModbusMap+0xd1c>)
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	23c8      	movs	r3, #200	@ 0xc8
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	429a      	cmp	r2, r3
 8004160:	d80a      	bhi.n	8004178 <ModbusMap+0xbb8>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <ModbusMap+0xd28>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	001a      	movs	r2, r3
 800416a:	4b74      	ldr	r3, [pc, #464]	@ (800433c <ModbusMap+0xd7c>)
 800416c:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800416e:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <ModbusMap+0xd48>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0018      	movs	r0, r3
 8004174:	f000 fa98 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8004178:	4b58      	ldr	r3, [pc, #352]	@ (80042dc <ModbusMap+0xd1c>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	4a70      	ldr	r2, [pc, #448]	@ (8004340 <ModbusMap+0xd80>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90f      	bls.n	80041a2 <ModbusMap+0xbe2>
 8004182:	4b56      	ldr	r3, [pc, #344]	@ (80042dc <ModbusMap+0xd1c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	4a6f      	ldr	r2, [pc, #444]	@ (8004344 <ModbusMap+0xd84>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d80a      	bhi.n	80041a2 <ModbusMap+0xbe2>
					PNU_0x3202 = lowByte(_u16WriteVal);
 800418c:	4b56      	ldr	r3, [pc, #344]	@ (80042e8 <ModbusMap+0xd28>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	001a      	movs	r2, r3
 8004194:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <ModbusMap+0xd88>)
 8004196:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004198:	4b5b      	ldr	r3, [pc, #364]	@ (8004308 <ModbusMap+0xd48>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fa83 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 80041a2:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <ModbusMap+0xd1c>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4a69      	ldr	r2, [pc, #420]	@ (800434c <ModbusMap+0xd8c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d90f      	bls.n	80041cc <ModbusMap+0xc0c>
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <ModbusMap+0xd1c>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	4a67      	ldr	r2, [pc, #412]	@ (8004350 <ModbusMap+0xd90>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d80a      	bhi.n	80041cc <ModbusMap+0xc0c>
					PNU_0x3204 = lowByte(_u16WriteVal);
 80041b6:	4b4c      	ldr	r3, [pc, #304]	@ (80042e8 <ModbusMap+0xd28>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	001a      	movs	r2, r3
 80041be:	4b65      	ldr	r3, [pc, #404]	@ (8004354 <ModbusMap+0xd94>)
 80041c0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041c2:	4b51      	ldr	r3, [pc, #324]	@ (8004308 <ModbusMap+0xd48>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 fa6e 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 80041cc:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <ModbusMap+0xd1c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	4a61      	ldr	r2, [pc, #388]	@ (8004358 <ModbusMap+0xd98>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d90f      	bls.n	80041f6 <ModbusMap+0xc36>
 80041d6:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <ModbusMap+0xd1c>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4a60      	ldr	r2, [pc, #384]	@ (800435c <ModbusMap+0xd9c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d80a      	bhi.n	80041f6 <ModbusMap+0xc36>
					PNU_0x3206 = lowByte(_u16WriteVal);
 80041e0:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <ModbusMap+0xd28>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	001a      	movs	r2, r3
 80041e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004360 <ModbusMap+0xda0>)
 80041ea:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041ec:	4b46      	ldr	r3, [pc, #280]	@ (8004308 <ModbusMap+0xd48>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fa59 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <ModbusMap+0xd1c>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004364 <ModbusMap+0xda4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d90f      	bls.n	8004220 <ModbusMap+0xc60>
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <ModbusMap+0xd1c>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	4a58      	ldr	r2, [pc, #352]	@ (8004368 <ModbusMap+0xda8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d80a      	bhi.n	8004220 <ModbusMap+0xc60>
					PNU_0x3208 = lowByte(_u16WriteVal);
 800420a:	4b37      	ldr	r3, [pc, #220]	@ (80042e8 <ModbusMap+0xd28>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	001a      	movs	r2, r3
 8004212:	4b56      	ldr	r3, [pc, #344]	@ (800436c <ModbusMap+0xdac>)
 8004214:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004216:	4b3c      	ldr	r3, [pc, #240]	@ (8004308 <ModbusMap+0xd48>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fa44 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8004220:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <ModbusMap+0xd1c>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <ModbusMap+0xdb0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d90f      	bls.n	800424a <ModbusMap+0xc8a>
 800422a:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <ModbusMap+0xd1c>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	4a51      	ldr	r2, [pc, #324]	@ (8004374 <ModbusMap+0xdb4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d80a      	bhi.n	800424a <ModbusMap+0xc8a>
					PNU_0x320A = lowByte(_u16WriteVal);
 8004234:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <ModbusMap+0xd28>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	001a      	movs	r2, r3
 800423c:	4b4e      	ldr	r3, [pc, #312]	@ (8004378 <ModbusMap+0xdb8>)
 800423e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <ModbusMap+0xd48>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fa2f 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <ModbusMap+0xd1c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	4a4b      	ldr	r2, [pc, #300]	@ (800437c <ModbusMap+0xdbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d90f      	bls.n	8004274 <ModbusMap+0xcb4>
 8004254:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <ModbusMap+0xd1c>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	4a49      	ldr	r2, [pc, #292]	@ (8004380 <ModbusMap+0xdc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d80a      	bhi.n	8004274 <ModbusMap+0xcb4>
					PNU_0x320C = lowByte(_u16WriteVal);
 800425e:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <ModbusMap+0xd28>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	001a      	movs	r2, r3
 8004266:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <ModbusMap+0xdc4>)
 8004268:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <ModbusMap+0xd48>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fa1a 	bl	80046a8 <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <ModbusMap+0xd1c>)
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	2b2f      	cmp	r3, #47	@ 0x2f
 800427a:	d91a      	bls.n	80042b2 <ModbusMap+0xcf2>
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <ModbusMap+0xd1c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	2b30      	cmp	r3, #48	@ 0x30
 8004282:	d816      	bhi.n	80042b2 <ModbusMap+0xcf2>

					if (_u16WriteVal == 1){
 8004284:	4b18      	ldr	r3, [pc, #96]	@ (80042e8 <ModbusMap+0xd28>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d104      	bne.n	8004296 <ModbusMap+0xcd6>
						if(flagsa[3]){
 800428c:	4b3e      	ldr	r3, [pc, #248]	@ (8004388 <ModbusMap+0xdc8>)
 800428e:	78db      	ldrb	r3, [r3, #3]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d000      	beq.n	8004296 <ModbusMap+0xcd6>
							asm ("nop");
 8004294:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <ModbusMap+0xd28>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <ModbusMap+0xce8>
						if(flagsa[3]){
 800429e:	4b3a      	ldr	r3, [pc, #232]	@ (8004388 <ModbusMap+0xdc8>)
 80042a0:	78db      	ldrb	r3, [r3, #3]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d100      	bne.n	80042a8 <ModbusMap+0xce8>

						}
						else{
							asm ("nop");
 80042a6:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80042a8:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <ModbusMap+0xd48>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 f9fb 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <ModbusMap+0xd1c>)
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d800      	bhi.n	80042bc <ModbusMap+0xcfc>
 80042ba:	e07e      	b.n	80043ba <ModbusMap+0xdfa>
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <ModbusMap+0xd1c>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	2b31      	cmp	r3, #49	@ 0x31
 80042c2:	d900      	bls.n	80042c6 <ModbusMap+0xd06>
 80042c4:	e079      	b.n	80043ba <ModbusMap+0xdfa>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <ModbusMap+0xd28>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d167      	bne.n	800439e <ModbusMap+0xdde>
						if(GPIOR0[1]){
 80042ce:	4b2f      	ldr	r3, [pc, #188]	@ (800438c <ModbusMap+0xdcc>)
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d05c      	beq.n	8004390 <ModbusMap+0xdd0>
							asm ("nop");
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	e061      	b.n	800439e <ModbusMap+0xdde>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	20000382 	.word	0x20000382
 80042e0:	00003103 	.word	0x00003103
 80042e4:	00003104 	.word	0x00003104
 80042e8:	20000384 	.word	0x20000384
 80042ec:	200000ac 	.word	0x200000ac
 80042f0:	20000bb6 	.word	0x20000bb6
 80042f4:	0803f049 	.word	0x0803f049
 80042f8:	20000cec 	.word	0x20000cec
 80042fc:	00003105 	.word	0x00003105
 8004300:	00003106 	.word	0x00003106
 8004304:	200000ae 	.word	0x200000ae
 8004308:	200003cc 	.word	0x200003cc
 800430c:	00003107 	.word	0x00003107
 8004310:	00003108 	.word	0x00003108
 8004314:	200000b0 	.word	0x200000b0
 8004318:	00003109 	.word	0x00003109
 800431c:	0000310a 	.word	0x0000310a
 8004320:	200000b2 	.word	0x200000b2
 8004324:	0000310b 	.word	0x0000310b
 8004328:	0000310c 	.word	0x0000310c
 800432c:	200000b4 	.word	0x200000b4
 8004330:	0000310d 	.word	0x0000310d
 8004334:	0000310e 	.word	0x0000310e
 8004338:	200000b6 	.word	0x200000b6
 800433c:	20000b6e 	.word	0x20000b6e
 8004340:	00003201 	.word	0x00003201
 8004344:	00003202 	.word	0x00003202
 8004348:	20000b70 	.word	0x20000b70
 800434c:	00003203 	.word	0x00003203
 8004350:	00003204 	.word	0x00003204
 8004354:	20000b72 	.word	0x20000b72
 8004358:	00003205 	.word	0x00003205
 800435c:	00003206 	.word	0x00003206
 8004360:	20000b74 	.word	0x20000b74
 8004364:	00003207 	.word	0x00003207
 8004368:	00003208 	.word	0x00003208
 800436c:	20000b76 	.word	0x20000b76
 8004370:	00003209 	.word	0x00003209
 8004374:	0000320a 	.word	0x0000320a
 8004378:	20000b78 	.word	0x20000b78
 800437c:	0000320b 	.word	0x0000320b
 8004380:	0000320c 	.word	0x0000320c
 8004384:	20000b7a 	.word	0x20000b7a
 8004388:	20000bd8 	.word	0x20000bd8
 800438c:	20000c04 	.word	0x20000c04
						}
						else{
							flags_accMenu |=0x01;
 8004390:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <ModbusMap+0xed4>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4313      	orrs	r3, r2
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <ModbusMap+0xed4>)
 800439c:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 800439e:	4b3e      	ldr	r3, [pc, #248]	@ (8004498 <ModbusMap+0xed8>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <ModbusMap+0xdf0>
						if(GPIOR0[1]){
 80043a6:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <ModbusMap+0xedc>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d100      	bne.n	80043b0 <ModbusMap+0xdf0>
						}
						else{
							asm ("nop");
 80043ae:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80043b0:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <ModbusMap+0xee0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f977 	bl	80046a8 <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 80043ba:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <ModbusMap+0xee4>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	2b31      	cmp	r3, #49	@ 0x31
 80043c0:	d800      	bhi.n	80043c4 <ModbusMap+0xe04>
 80043c2:	e061      	b.n	8004488 <ModbusMap+0xec8>
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <ModbusMap+0xee4>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	2b32      	cmp	r3, #50	@ 0x32
 80043ca:	d900      	bls.n	80043ce <ModbusMap+0xe0e>
 80043cc:	e05c      	b.n	8004488 <ModbusMap+0xec8>

					if (_u16WriteVal == 1){
 80043ce:	4b32      	ldr	r3, [pc, #200]	@ (8004498 <ModbusMap+0xed8>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d108      	bne.n	80043e8 <ModbusMap+0xe28>
						if(GPIOR0[2]){
 80043d6:	4b31      	ldr	r3, [pc, #196]	@ (800449c <ModbusMap+0xedc>)
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <ModbusMap+0xe22>
							asm ("nop");
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	e002      	b.n	80043e8 <ModbusMap+0xe28>
						}
						else{
							flagsb[0] = 1;
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <ModbusMap+0xee8>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 80043e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <ModbusMap+0xed8>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <ModbusMap+0xe44>
						if(GPIOR0[2]){
 80043f0:	4b2a      	ldr	r3, [pc, #168]	@ (800449c <ModbusMap+0xedc>)
 80043f2:	789b      	ldrb	r3, [r3, #2]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <ModbusMap+0xe42>
							asm ("nop");
 80043f8:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 80043fa:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <ModbusMap+0xee8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e000      	b.n	8004404 <ModbusMap+0xe44>

						}
						else{
							asm ("nop");
 8004402:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004404:	4b26      	ldr	r3, [pc, #152]	@ (80044a0 <ModbusMap+0xee0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f94d 	bl	80046a8 <ModbusSlaveTransaction>
				}
			break;
 800440e:	e03b      	b.n	8004488 <ModbusMap+0xec8>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8004410:	2001      	movs	r0, #1
 8004412:	f000 fa73 	bl	80048fc <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8004416:	e038      	b.n	800448a <ModbusMap+0xeca>
				  break;
 8004418:	46c0      	nop			@ (mov r8, r8)
 800441a:	e036      	b.n	800448a <ModbusMap+0xeca>
					break;
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	e034      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	e032      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	e030      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	e02e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	e02c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	e02a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	e028      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004438:	46c0      	nop			@ (mov r8, r8)
 800443a:	e026      	b.n	800448a <ModbusMap+0xeca>
					break;
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	e024      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	e022      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	e020      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	e01e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	e01c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	e01a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	e018      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	e016      	b.n	800448a <ModbusMap+0xeca>
					break;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e014      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e012      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	e010      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	e00e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	e00c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	e00a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	e008      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	e006      	b.n	800448a <ModbusMap+0xeca>
					break;
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	e004      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	e002      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e000      	b.n	800448a <ModbusMap+0xeca>
			break;
 8004488:	46c0      	nop			@ (mov r8, r8)
}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b003      	add	sp, #12
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	20000cb0 	.word	0x20000cb0
 8004498:	20000384 	.word	0x20000384
 800449c:	20000c04 	.word	0x20000c04
 80044a0:	200003cc 	.word	0x200003cc
 80044a4:	20000382 	.word	0x20000382
 80044a8:	20000c48 	.word	0x20000c48

080044ac <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	221e      	movs	r2, #30
 80044bc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	4929      	ldr	r1, [pc, #164]	@ (8004568 <serialEvent_RS485+0xbc>)
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <serialEvent_RS485+0xc0>)
 80044c6:	0018      	movs	r0, r3
 80044c8:	f016 f828 	bl	801a51c <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <serialEvent_RS485+0xc4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	1cbb      	adds	r3, r7, #2
 80044d4:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80044d6:	1cba      	adds	r2, r7, #2
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	8812      	ldrh	r2, [r2, #0]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d23c      	bcs.n	800455c <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <serialEvent_RS485+0xc8>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4013      	ands	r3, r2
 80044ea:	d037      	beq.n	800455c <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80044ec:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80044ee:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <serialEvent_RS485+0xc0>)
 80044f0:	0018      	movs	r0, r3
 80044f2:	f016 f87f 	bl	801a5f4 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 80044f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <serialEvent_RS485+0xc8>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2210      	movs	r2, #16
 80044fc:	4013      	ands	r3, r2
 80044fe:	d003      	beq.n	8004508 <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8004500:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <serialEvent_RS485+0xc0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004508:	1dbb      	adds	r3, r7, #6
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e00c      	b.n	800452a <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	1dbb      	adds	r3, r7, #6
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4913      	ldr	r1, [pc, #76]	@ (8004568 <serialEvent_RS485+0xbc>)
 800451a:	5c89      	ldrb	r1, [r1, r2]
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <serialEvent_RS485+0xcc>)
 800451e:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004520:	1dbb      	adds	r3, r7, #6
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	3201      	adds	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	1dbb      	adds	r3, r7, #6
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	1cbb      	adds	r3, r7, #2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	211e      	movs	r1, #30
 8004534:	1acb      	subs	r3, r1, r3
 8004536:	429a      	cmp	r2, r3
 8004538:	d3ea      	bcc.n	8004510 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <serialEvent_RS485+0xcc>)
 8004540:	2100      	movs	r1, #0
 8004542:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	1cbb      	adds	r3, r7, #2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	1a8a      	subs	r2, r1, r2
 8004554:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <serialEvent_RS485+0xd0>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000b28 	.word	0x20000b28
 800456c:	20000720 	.word	0x20000720
 8004570:	20000874 	.word	0x20000874
 8004574:	40004c00 	.word	0x40004c00
 8004578:	20000b48 	.word	0x20000b48
 800457c:	2000037c 	.word	0x2000037c

08004580 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	000a      	movs	r2, r1
 800458a:	1cfb      	adds	r3, r7, #3
 800458c:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 800458e:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8004590:	1cfb      	adds	r3, r7, #3
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <SerializeDMAArray_RS485+0x38>)
 8004598:	0018      	movs	r0, r3
 800459a:	f017 fd4d 	bl	801c038 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 800459e:	1cfb      	adds	r3, r7, #3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4904      	ldr	r1, [pc, #16]	@ (80045b8 <SerializeDMAArray_RS485+0x38>)
 80045a6:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <SerializeDMAArray_RS485+0x3c>)
 80045a8:	0018      	movs	r0, r3
 80045aa:	f015 ff25 	bl	801a3f8 <HAL_UART_Transmit_DMA>

}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	20000b08 	.word	0x20000b08
 80045bc:	20000720 	.word	0x20000720

080045c0 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	1d7b      	adds	r3, r7, #5
 80045ce:	1c0a      	adds	r2, r1, #0
 80045d0:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 80045d2:	1d7b      	adds	r3, r7, #5
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b299      	uxth	r1, r3
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	1dba      	adds	r2, r7, #6
 80045dc:	8812      	ldrh	r2, [r2, #0]
 80045de:	404a      	eors	r2, r1
 80045e0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e015      	b.n	8004614 <crc16_update+0x54>
{
if (crc & 1)
 80045e8:	1dbb      	adds	r3, r7, #6
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d008      	beq.n	8004604 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 80045f2:	1dbb      	adds	r3, r7, #6
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	1dbb      	adds	r3, r7, #6
 80045fc:	490a      	ldr	r1, [pc, #40]	@ (8004628 <crc16_update+0x68>)
 80045fe:	404a      	eors	r2, r1
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e004      	b.n	800460e <crc16_update+0x4e>
else
  crc = (crc >> 1);
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	1dba      	adds	r2, r7, #6
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b07      	cmp	r3, #7
 8004618:	dde6      	ble.n	80045e8 <crc16_update+0x28>
}

return crc;
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	881b      	ldrh	r3, [r3, #0]
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	ffffa001 	.word	0xffffa001

0800462c <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	0002      	movs	r2, r0
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <ModbusMaster_begin+0x28>)
 8004646:	1dfa      	adds	r2, r7, #7
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <ModbusMaster_begin+0x2c>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8004652:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <ModbusMaster_begin+0x30>)
 8004654:	2200      	movs	r2, #0
 8004656:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}
 8004660:	2000037d 	.word	0x2000037d
 8004664:	200003c8 	.word	0x200003c8
 8004668:	200003ca 	.word	0x200003ca

0800466c <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	0002      	movs	r2, r0
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	1c0a      	adds	r2, r1, #0
 800467c:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b1f      	cmp	r3, #31
 8004684:	d808      	bhi.n	8004698 <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 8004686:	1dfb      	adds	r3, r7, #7
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <ModbusSlave_setTransmitBuffer+0x38>)
 800468c:	0052      	lsls	r2, r2, #1
 800468e:	1d39      	adds	r1, r7, #4
 8004690:	8809      	ldrh	r1, [r1, #0]
 8004692:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	20000388 	.word	0x20000388

080046a8 <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	b0c5      	sub	sp, #276	@ 0x114
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	0002      	movs	r2, r0
 80046b0:	4b89      	ldr	r3, [pc, #548]	@ (80048d8 <ModbusSlaveTransaction+0x230>)
 80046b2:	2588      	movs	r5, #136	@ 0x88
 80046b4:	006d      	lsls	r5, r5, #1
 80046b6:	195b      	adds	r3, r3, r5
 80046b8:	19db      	adds	r3, r3, r7
 80046ba:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 80046bc:	2410      	movs	r4, #16
 80046be:	34ff      	adds	r4, #255	@ 0xff
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <ModbusSlaveTransaction+0x234>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	2104      	movs	r1, #4
 80046cc:	0018      	movs	r0, r3
 80046ce:	f00f ff60 	bl	8014592 <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046d2:	0020      	movs	r0, r4
 80046d4:	183b      	adds	r3, r7, r0
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	183a      	adds	r2, r7, r0
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	7011      	strb	r1, [r2, #0]
 80046de:	001a      	movs	r2, r3
 80046e0:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <ModbusSlaveTransaction+0x238>)
 80046e2:	7819      	ldrb	r1, [r3, #0]
 80046e4:	4b7f      	ldr	r3, [pc, #508]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80046e6:	195b      	adds	r3, r3, r5
 80046e8:	19db      	adds	r3, r3, r7
 80046ea:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046ec:	183b      	adds	r3, r7, r0
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	183a      	adds	r2, r7, r0
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	7011      	strb	r1, [r2, #0]
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b7b      	ldr	r3, [pc, #492]	@ (80048e8 <ModbusSlaveTransaction+0x240>)
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	4b79      	ldr	r3, [pc, #484]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80046fe:	195b      	adds	r3, r3, r5
 8004700:	19db      	adds	r3, r3, r7
 8004702:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 8004704:	4b74      	ldr	r3, [pc, #464]	@ (80048d8 <ModbusSlaveTransaction+0x230>)
 8004706:	195b      	adds	r3, r3, r5
 8004708:	19db      	adds	r3, r3, r7
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	dc02      	bgt.n	8004716 <ModbusSlaveTransaction+0x6e>
 8004710:	2b03      	cmp	r3, #3
 8004712:	da03      	bge.n	800471c <ModbusSlaveTransaction+0x74>
 8004714:	e079      	b.n	800480a <ModbusSlaveTransaction+0x162>
 8004716:	2b06      	cmp	r3, #6
 8004718:	d051      	beq.n	80047be <ModbusSlaveTransaction+0x116>
 800471a:	e076      	b.n	800480a <ModbusSlaveTransaction+0x162>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 800471c:	4b73      	ldr	r3, [pc, #460]	@ (80048ec <ModbusSlaveTransaction+0x244>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b2d9      	uxtb	r1, r3
 8004722:	2210      	movs	r2, #16
 8004724:	32ff      	adds	r2, #255	@ 0xff
 8004726:	18bb      	adds	r3, r7, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	18ba      	adds	r2, r7, r2
 800472c:	1c58      	adds	r0, r3, #1
 800472e:	7010      	strb	r0, [r2, #0]
 8004730:	001a      	movs	r2, r3
 8004732:	1c0b      	adds	r3, r1, #0
 8004734:	18db      	adds	r3, r3, r3
 8004736:	b2d9      	uxtb	r1, r3
 8004738:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800473a:	2088      	movs	r0, #136	@ 0x88
 800473c:	0040      	lsls	r0, r0, #1
 800473e:	181b      	adds	r3, r3, r0
 8004740:	19db      	adds	r3, r3, r7
 8004742:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004744:	2387      	movs	r3, #135	@ 0x87
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e02c      	b.n	80047aa <ModbusSlaveTransaction+0x102>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8004750:	2487      	movs	r4, #135	@ 0x87
 8004752:	0064      	lsls	r4, r4, #1
 8004754:	193b      	adds	r3, r7, r4
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	4b65      	ldr	r3, [pc, #404]	@ (80048f0 <ModbusSlaveTransaction+0x248>)
 800475a:	0052      	lsls	r2, r2, #1
 800475c:	5ad3      	ldrh	r3, [r2, r3]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b299      	uxth	r1, r3
 8004762:	2510      	movs	r5, #16
 8004764:	35ff      	adds	r5, #255	@ 0xff
 8004766:	197b      	adds	r3, r7, r5
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	197a      	adds	r2, r7, r5
 800476c:	1c58      	adds	r0, r3, #1
 800476e:	7010      	strb	r0, [r2, #0]
 8004770:	001a      	movs	r2, r3
 8004772:	b2c9      	uxtb	r1, r1
 8004774:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 8004776:	2688      	movs	r6, #136	@ 0x88
 8004778:	0076      	lsls	r6, r6, #1
 800477a:	199b      	adds	r3, r3, r6
 800477c:	19db      	adds	r3, r3, r7
 800477e:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8004780:	193b      	adds	r3, r7, r4
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	4b5a      	ldr	r3, [pc, #360]	@ (80048f0 <ModbusSlaveTransaction+0x248>)
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	5ad1      	ldrh	r1, [r2, r3]
 800478a:	197b      	adds	r3, r7, r5
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	197a      	adds	r2, r7, r5
 8004790:	1c58      	adds	r0, r3, #1
 8004792:	7010      	strb	r0, [r2, #0]
 8004794:	001a      	movs	r2, r3
 8004796:	b2c9      	uxtb	r1, r1
 8004798:	4b52      	ldr	r3, [pc, #328]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800479a:	199b      	adds	r3, r3, r6
 800479c:	19db      	adds	r3, r3, r7
 800479e:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	3201      	adds	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	4b50      	ldr	r3, [pc, #320]	@ (80048ec <ModbusSlaveTransaction+0x244>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2287      	movs	r2, #135	@ 0x87
 80047b2:	0052      	lsls	r2, r2, #1
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d3c9      	bcc.n	8004750 <ModbusSlaveTransaction+0xa8>
      }
		break;
 80047bc:	e025      	b.n	800480a <ModbusSlaveTransaction+0x162>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 80047be:	2387      	movs	r3, #135	@ 0x87
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e018      	b.n	80047fc <ModbusSlaveTransaction+0x154>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 80047ca:	2487      	movs	r4, #135	@ 0x87
 80047cc:	0064      	lsls	r4, r4, #1
 80047ce:	193b      	adds	r3, r7, r4
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	2110      	movs	r1, #16
 80047d4:	31ff      	adds	r1, #255	@ 0xff
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	1879      	adds	r1, r7, r1
 80047dc:	1c58      	adds	r0, r3, #1
 80047de:	7008      	strb	r0, [r1, #0]
 80047e0:	0019      	movs	r1, r3
 80047e2:	4b44      	ldr	r3, [pc, #272]	@ (80048f4 <ModbusSlaveTransaction+0x24c>)
 80047e4:	5c9a      	ldrb	r2, [r3, r2]
 80047e6:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80047e8:	2088      	movs	r0, #136	@ 0x88
 80047ea:	0040      	lsls	r0, r0, #1
 80047ec:	181b      	adds	r3, r3, r0
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 80047f2:	193b      	adds	r3, r7, r4
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	3201      	adds	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	2387      	movs	r3, #135	@ 0x87
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d9e0      	bls.n	80047ca <ModbusSlaveTransaction+0x122>
			}
		break;
 8004808:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 800480a:	2386      	movs	r3, #134	@ 0x86
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2201      	movs	r2, #1
 8004812:	4252      	negs	r2, r2
 8004814:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8004816:	2387      	movs	r3, #135	@ 0x87
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e019      	b.n	8004856 <ModbusSlaveTransaction+0x1ae>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8004822:	2587      	movs	r5, #135	@ 0x87
 8004824:	006d      	lsls	r5, r5, #1
 8004826:	197b      	adds	r3, r7, r5
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800482c:	2188      	movs	r1, #136	@ 0x88
 800482e:	0049      	lsls	r1, r1, #1
 8004830:	1852      	adds	r2, r2, r1
 8004832:	19d2      	adds	r2, r2, r7
 8004834:	5cd2      	ldrb	r2, [r2, r3]
 8004836:	2386      	movs	r3, #134	@ 0x86
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	18fc      	adds	r4, r7, r3
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	0011      	movs	r1, r2
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff febc 	bl	80045c0 <crc16_update>
 8004848:	0003      	movs	r3, r0
 800484a:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800484c:	197b      	adds	r3, r7, r5
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	197b      	adds	r3, r7, r5
 8004852:	3201      	adds	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	2387      	movs	r3, #135	@ 0x87
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	18fa      	adds	r2, r7, r3
 800485c:	2010      	movs	r0, #16
 800485e:	30ff      	adds	r0, #255	@ 0xff
 8004860:	183b      	adds	r3, r7, r0
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d3db      	bcc.n	8004822 <ModbusSlaveTransaction+0x17a>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 800486a:	183b      	adds	r3, r7, r0
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	183a      	adds	r2, r7, r0
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	7011      	strb	r1, [r2, #0]
 8004874:	001a      	movs	r2, r3
 8004876:	2486      	movs	r4, #134	@ 0x86
 8004878:	0064      	lsls	r4, r4, #1
 800487a:	193b      	adds	r3, r7, r4
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b2d9      	uxtb	r1, r3
 8004880:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 8004882:	2588      	movs	r5, #136	@ 0x88
 8004884:	006d      	lsls	r5, r5, #1
 8004886:	195b      	adds	r3, r3, r5
 8004888:	19db      	adds	r3, r3, r7
 800488a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 800488c:	193b      	adds	r3, r7, r4
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b299      	uxth	r1, r3
 8004894:	183b      	adds	r3, r7, r0
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	0004      	movs	r4, r0
 800489a:	183a      	adds	r2, r7, r0
 800489c:	1c58      	adds	r0, r3, #1
 800489e:	7010      	strb	r0, [r2, #0]
 80048a0:	001a      	movs	r2, r3
 80048a2:	b2c9      	uxtb	r1, r1
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80048a6:	195b      	adds	r3, r3, r5
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4a0c      	ldr	r2, [pc, #48]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80048b2:	1952      	adds	r2, r2, r5
 80048b4:	19d2      	adds	r2, r2, r7
 80048b6:	2100      	movs	r1, #0
 80048b8:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 80048ba:	193b      	adds	r3, r7, r4
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	230c      	movs	r3, #12
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff fe5b 	bl	8004580 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <ModbusSlaveTransaction+0x250>)
 80048cc:	2246      	movs	r2, #70	@ 0x46
 80048ce:	801a      	strh	r2, [r3, #0]


}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b045      	add	sp, #276	@ 0x114
 80048d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d8:	fffffef7 	.word	0xfffffef7
 80048dc:	50000800 	.word	0x50000800
 80048e0:	2000037d 	.word	0x2000037d
 80048e4:	fffffefc 	.word	0xfffffefc
 80048e8:	200003cc 	.word	0x200003cc
 80048ec:	20000380 	.word	0x20000380
 80048f0:	20000388 	.word	0x20000388
 80048f4:	20000b48 	.word	0x20000b48
 80048f8:	200021a6 	.word	0x200021a6

080048fc <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 80048fc:	b5b0      	push	{r4, r5, r7, lr}
 80048fe:	b0c4      	sub	sp, #272	@ 0x110
 8004900:	af00      	add	r7, sp, #0
 8004902:	0002      	movs	r2, r0
 8004904:	4b51      	ldr	r3, [pc, #324]	@ (8004a4c <ModbusSlaveExceptionTransaction+0x150>)
 8004906:	2588      	movs	r5, #136	@ 0x88
 8004908:	006d      	lsls	r5, r5, #1
 800490a:	195b      	adds	r3, r3, r5
 800490c:	19db      	adds	r3, r3, r7
 800490e:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8004910:	240c      	movs	r4, #12
 8004912:	34ff      	adds	r4, #255	@ 0xff
 8004914:	193b      	adds	r3, r7, r4
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 800491a:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 800491c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a50 <ModbusSlaveExceptionTransaction+0x154>)
 800491e:	2214      	movs	r2, #20
 8004920:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8004922:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <ModbusSlaveExceptionTransaction+0x158>)
 8004924:	2201      	movs	r2, #1
 8004926:	2104      	movs	r1, #4
 8004928:	0018      	movs	r0, r3
 800492a:	f00f fe32 	bl	8014592 <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 800492e:	193b      	adds	r3, r7, r4
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	193a      	adds	r2, r7, r4
 8004934:	1c59      	adds	r1, r3, #1
 8004936:	7011      	strb	r1, [r2, #0]
 8004938:	001a      	movs	r2, r3
 800493a:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <ModbusSlaveExceptionTransaction+0x15c>)
 800493c:	7819      	ldrb	r1, [r3, #0]
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004940:	195b      	adds	r3, r3, r5
 8004942:	19db      	adds	r3, r3, r7
 8004944:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004946:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <ModbusSlaveExceptionTransaction+0x164>)
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	193b      	adds	r3, r7, r4
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	1939      	adds	r1, r7, r4
 8004950:	1c58      	adds	r0, r3, #1
 8004952:	7008      	strb	r0, [r1, #0]
 8004954:	0019      	movs	r1, r3
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	425b      	negs	r3, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004960:	195b      	adds	r3, r3, r5
 8004962:	19db      	adds	r3, r3, r7
 8004964:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004966:	193b      	adds	r3, r7, r4
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	193a      	adds	r2, r7, r4
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	7011      	strb	r1, [r2, #0]
 8004970:	0019      	movs	r1, r3
 8004972:	4b3a      	ldr	r3, [pc, #232]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004974:	195b      	adds	r3, r3, r5
 8004976:	19db      	adds	r3, r3, r7
 8004978:	4a34      	ldr	r2, [pc, #208]	@ (8004a4c <ModbusSlaveExceptionTransaction+0x150>)
 800497a:	1952      	adds	r2, r2, r5
 800497c:	19d2      	adds	r2, r2, r7
 800497e:	7812      	ldrb	r2, [r2, #0]
 8004980:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8004982:	2386      	movs	r3, #134	@ 0x86
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2201      	movs	r2, #1
 800498a:	4252      	negs	r2, r2
 800498c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800498e:	2310      	movs	r3, #16
 8004990:	33ff      	adds	r3, #255	@ 0xff
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e019      	b.n	80049ce <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 800499a:	2510      	movs	r5, #16
 800499c:	35ff      	adds	r5, #255	@ 0xff
 800499e:	197b      	adds	r3, r7, r5
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 80049a4:	2188      	movs	r1, #136	@ 0x88
 80049a6:	0049      	lsls	r1, r1, #1
 80049a8:	1852      	adds	r2, r2, r1
 80049aa:	19d2      	adds	r2, r2, r7
 80049ac:	5cd2      	ldrb	r2, [r2, r3]
 80049ae:	2386      	movs	r3, #134	@ 0x86
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	18fc      	adds	r4, r7, r3
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fe00 	bl	80045c0 <crc16_update>
 80049c0:	0003      	movs	r3, r0
 80049c2:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80049c4:	197b      	adds	r3, r7, r5
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	197b      	adds	r3, r7, r5
 80049ca:	3201      	adds	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	2310      	movs	r3, #16
 80049d0:	33ff      	adds	r3, #255	@ 0xff
 80049d2:	18fa      	adds	r2, r7, r3
 80049d4:	200c      	movs	r0, #12
 80049d6:	30ff      	adds	r0, #255	@ 0xff
 80049d8:	183b      	adds	r3, r7, r0
 80049da:	7812      	ldrb	r2, [r2, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3db      	bcc.n	800499a <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80049e2:	183b      	adds	r3, r7, r0
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	183a      	adds	r2, r7, r0
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	7011      	strb	r1, [r2, #0]
 80049ec:	001a      	movs	r2, r3
 80049ee:	2486      	movs	r4, #134	@ 0x86
 80049f0:	0064      	lsls	r4, r4, #1
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b2d9      	uxtb	r1, r3
 80049f8:	4b18      	ldr	r3, [pc, #96]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 80049fa:	2588      	movs	r5, #136	@ 0x88
 80049fc:	006d      	lsls	r5, r5, #1
 80049fe:	195b      	adds	r3, r3, r5
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8004a04:	193b      	adds	r3, r7, r4
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	183b      	adds	r3, r7, r0
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	0004      	movs	r4, r0
 8004a12:	183a      	adds	r2, r7, r0
 8004a14:	1c58      	adds	r0, r3, #1
 8004a16:	7010      	strb	r0, [r2, #0]
 8004a18:	001a      	movs	r2, r3
 8004a1a:	b2c9      	uxtb	r1, r1
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004a1e:	195b      	adds	r3, r3, r5
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004a2a:	1952      	adds	r2, r2, r5
 8004a2c:	19d2      	adds	r2, r2, r7
 8004a2e:	2100      	movs	r1, #0
 8004a30:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8004a32:	193b      	adds	r3, r7, r4
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	2308      	movs	r3, #8
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7ff fd9f 	bl	8004580 <SerializeDMAArray_RS485>

}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b044      	add	sp, #272	@ 0x110
 8004a48:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	fffffef7 	.word	0xfffffef7
 8004a50:	200021a8 	.word	0x200021a8
 8004a54:	50000800 	.word	0x50000800
 8004a58:	2000037d 	.word	0x2000037d
 8004a5c:	fffffef8 	.word	0xfffffef8
 8004a60:	200003cc 	.word	0x200003cc

08004a64 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	b0c2      	sub	sp, #264	@ 0x108
 8004a68:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 8004a6a:	1cfb      	adds	r3, r7, #3
 8004a6c:	33ff      	adds	r3, #255	@ 0xff
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	33ff      	adds	r3, #255	@ 0xff
 8004a76:	22ff      	movs	r2, #255	@ 0xff
 8004a78:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 8004a7a:	1cfc      	adds	r4, r7, #3
 8004a7c:	34ff      	adds	r4, #255	@ 0xff
 8004a7e:	f7ff fd15 	bl	80044ac <serialEvent_RS485>
 8004a82:	0003      	movs	r3, r0
 8004a84:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8004a86:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8004a88:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <ModbusSlavePool+0x190>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <ModbusSlavePool+0x30>
 8004a92:	e0a8      	b.n	8004be6 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8004a94:	4b57      	ldr	r3, [pc, #348]	@ (8004bf4 <ModbusSlavePool+0x190>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	33ff      	adds	r3, #255	@ 0xff
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8004aa2:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	4b55      	ldr	r3, [pc, #340]	@ (8004bfc <ModbusSlavePool+0x198>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d000      	beq.n	8004ab0 <ModbusSlavePool+0x4c>
 8004aae:	e091      	b.n	8004bd4 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8004ab0:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004ab2:	785a      	ldrb	r2, [r3, #1]
 8004ab4:	4b52      	ldr	r3, [pc, #328]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004ab6:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8004ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	001a      	movs	r2, r3
 8004abe:	237f      	movs	r3, #127	@ 0x7f
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	33ff      	adds	r3, #255	@ 0xff
 8004ace:	22e1      	movs	r2, #225	@ 0xe1
 8004ad0:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 8004ad2:	1d7b      	adds	r3, r7, #5
 8004ad4:	33ff      	adds	r3, #255	@ 0xff
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4252      	negs	r2, r2
 8004ada:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004adc:	2308      	movs	r3, #8
 8004ade:	33ff      	adds	r3, #255	@ 0xff
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e015      	b.n	8004b14 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 8004ae8:	2508      	movs	r5, #8
 8004aea:	35ff      	adds	r5, #255	@ 0xff
 8004aec:	197b      	adds	r3, r7, r5
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4a41      	ldr	r2, [pc, #260]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004af2:	5cd2      	ldrb	r2, [r2, r3]
 8004af4:	1d7c      	adds	r4, r7, #5
 8004af6:	34ff      	adds	r4, #255	@ 0xff
 8004af8:	1d7b      	adds	r3, r7, #5
 8004afa:	33ff      	adds	r3, #255	@ 0xff
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	0011      	movs	r1, r2
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fd5d 	bl	80045c0 <crc16_update>
 8004b06:	0003      	movs	r3, r0
 8004b08:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004b0a:	197b      	adds	r3, r7, r5
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	197b      	adds	r3, r7, r5
 8004b10:	3201      	adds	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	2308      	movs	r3, #8
 8004b16:	33ff      	adds	r3, #255	@ 0xff
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	1cfb      	adds	r3, r7, #3
 8004b1e:	33ff      	adds	r3, #255	@ 0xff
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3b02      	subs	r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	dbdf      	blt.n	8004ae8 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	33ff      	adds	r3, #255	@ 0xff
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <ModbusSlavePool+0x10a>
 8004b32:	1d7b      	adds	r3, r7, #5
 8004b34:	33ff      	adds	r3, #255	@ 0xff
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	1cfb      	adds	r3, r7, #3
 8004b3c:	33ff      	adds	r3, #255	@ 0xff
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3b02      	subs	r3, #2
 8004b42:	492d      	ldr	r1, [pc, #180]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d10d      	bne.n	8004b66 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 8004b4a:	1d7b      	adds	r3, r7, #5
 8004b4c:	33ff      	adds	r3, #255	@ 0xff
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	1cfb      	adds	r3, r7, #3
 8004b58:	33ff      	adds	r3, #255	@ 0xff
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	4926      	ldr	r1, [pc, #152]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d003      	beq.n	8004b6e <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	33ff      	adds	r3, #255	@ 0xff
 8004b6a:	22e3      	movs	r2, #227	@ 0xe3
 8004b6c:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 8004b6e:	4b24      	ldr	r3, [pc, #144]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d019      	beq.n	8004baa <ModbusSlavePool+0x146>
 8004b76:	dc36      	bgt.n	8004be6 <ModbusSlavePool+0x182>
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	dc34      	bgt.n	8004be6 <ModbusSlavePool+0x182>
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	db31      	blt.n	8004be4 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004b80:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b8a:	78d2      	ldrb	r2, [r2, #3]
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <ModbusSlavePool+0x1a0>)
 8004b92:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8004b94:	4b18      	ldr	r3, [pc, #96]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b9e:	7952      	ldrb	r2, [r2, #5]
 8004ba0:	189b      	adds	r3, r3, r2
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <ModbusSlavePool+0x1a4>)
 8004ba6:	801a      	strh	r2, [r3, #0]
				break;
 8004ba8:	e01d      	b.n	8004be6 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bac:	789b      	ldrb	r3, [r3, #2]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bb4:	78d2      	ldrb	r2, [r2, #3]
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <ModbusSlavePool+0x1a8>)
 8004bbc:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bc0:	791b      	ldrb	r3, [r3, #4]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bc8:	7952      	ldrb	r2, [r2, #5]
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <ModbusSlavePool+0x1ac>)
 8004bd0:	801a      	strh	r2, [r3, #0]
				break;
 8004bd2:	e008      	b.n	8004be6 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	33ff      	adds	r3, #255	@ 0xff
 8004bd8:	22e0      	movs	r2, #224	@ 0xe0
 8004bda:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <ModbusSlavePool+0x1b0>)
 8004bde:	2214      	movs	r2, #20
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	e000      	b.n	8004be6 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 8004be4:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	33ff      	adds	r3, #255	@ 0xff
 8004bea:	781b      	ldrb	r3, [r3, #0]
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b042      	add	sp, #264	@ 0x108
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf4:	2000037c 	.word	0x2000037c
 8004bf8:	20000b48 	.word	0x20000b48
 8004bfc:	2000037d 	.word	0x2000037d
 8004c00:	200003cc 	.word	0x200003cc
 8004c04:	2000037e 	.word	0x2000037e
 8004c08:	20000380 	.word	0x20000380
 8004c0c:	20000382 	.word	0x20000382
 8004c10:	20000384 	.word	0x20000384
 8004c14:	200021a8 	.word	0x200021a8

08004c18 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 8004c28:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <AtParsing_Ble+0x3c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8004c30:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <AtParsing_Ble+0x3c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <AtParsing_Ble+0x40>)
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f017 f9a7 	bl	801bf90 <strstr>
 8004c42:	1e03      	subs	r3, r0, #0
 8004c44:	d001      	beq.n	8004c4a <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 8004c4a:	697b      	ldr	r3, [r7, #20]
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	200003ce 	.word	0x200003ce
 8004c58:	20000a78 	.word	0x20000a78

08004c5c <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8004c64:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fb fa4d 	bl	8000108 <strlen>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	240e      	movs	r4, #14
 8004c72:	193b      	adds	r3, r7, r4
 8004c74:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <SerializeString_Ble+0x40>)
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f017 f9da 	bl	801c038 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004c84:	193b      	adds	r3, r7, r4
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <SerializeString_Ble+0x40>)
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SerializeString_Ble+0x44>)
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f015 fbb3 	bl	801a3f8 <HAL_UART_Transmit_DMA>
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b005      	add	sp, #20
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	20000958 	.word	0x20000958
 8004ca0:	2000068c 	.word	0x2000068c

08004ca4 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	000a      	movs	r2, r1
 8004cae:	1cfb      	adds	r3, r7, #3
 8004cb0:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8004cb2:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8004cb4:	210e      	movs	r1, #14
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	1cfa      	adds	r2, r7, #3
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <SerializeString2+0x4c>)
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f017 f9b6 	bl	801c038 <memcpy>
    while(huart2.gState == HAL_UART_STATE_BUSY_TX);
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <SerializeString2+0x50>)
 8004cd0:	2288      	movs	r2, #136	@ 0x88
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2b21      	cmp	r3, #33	@ 0x21
 8004cd6:	d0fa      	beq.n	8004cce <SerializeString2+0x2a>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004cd8:	230e      	movs	r3, #14
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	4904      	ldr	r1, [pc, #16]	@ (8004cf0 <SerializeString2+0x4c>)
 8004ce0:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SerializeString2+0x50>)
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f015 fb88 	bl	801a3f8 <HAL_UART_Transmit_DMA>
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b004      	add	sp, #16
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000958 	.word	0x20000958
 8004cf4:	2000068c 	.word	0x2000068c

08004cf8 <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	2290      	movs	r2, #144	@ 0x90
 8004d02:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	4929      	ldr	r1, [pc, #164]	@ (8004db0 <serialEvent_Ble+0xb8>)
 8004d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f015 fc05 	bl	801a51c <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d12:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <serialEvent_Ble+0xc0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	1cbb      	adds	r3, r7, #2
 8004d1a:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8004d1c:	1cba      	adds	r2, r7, #2
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d23f      	bcs.n	8004da8 <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 8004d28:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <serialEvent_Ble+0xc4>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d03a      	beq.n	8004da8 <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 8004d32:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d34:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <serialEvent_Ble+0xc0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	1cbb      	adds	r3, r7, #2
 8004d3c:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8004d3e:	003b      	movs	r3, r7
 8004d40:	1d39      	adds	r1, r7, #4
 8004d42:	1cba      	adds	r2, r7, #2
 8004d44:	8809      	ldrh	r1, [r1, #0]
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	1a8a      	subs	r2, r1, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f015 fc50 	bl	801a5f4 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <serialEvent_Ble+0xc4>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2210      	movs	r2, #16
 8004d64:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	e00c      	b.n	8004d88 <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	490e      	ldr	r1, [pc, #56]	@ (8004db0 <serialEvent_Ble+0xb8>)
 8004d78:	5c89      	ldrb	r1, [r1, r2]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <serialEvent_Ble+0xc8>)
 8004d7c:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d7e:	1dfb      	adds	r3, r7, #7
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	3201      	adds	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	1cbb      	adds	r3, r7, #2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	2190      	movs	r1, #144	@ 0x90
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3ea      	bcc.n	8004d6e <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	@ (8004dc0 <serialEvent_Ble+0xc8>)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <serialEvent_Ble+0xcc>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
			}

		}
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	200009e8 	.word	0x200009e8
 8004db4:	2000068c 	.word	0x2000068c
 8004db8:	200007b4 	.word	0x200007b4
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	20000a78 	.word	0x20000a78
 8004dc4:	200003ce 	.word	0x200003ce

08004dc8 <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 8004dda:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	4053      	eors	r3, r2
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 8004de8:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 8004dee:	f004 fba7 	bl	8009540 <millis>
 8004df2:	0003      	movs	r3, r0
 8004df4:	001a      	movs	r2, r3
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <SendATreply_Ble+0x78>)
 8004df8:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff ff2d 	bl	8004c5c <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 8004e02:	f7ff ff79 	bl	8004cf8 <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ff03 	bl	8004c18 <AtParsing_Ble>
 8004e12:	0003      	movs	r3, r0
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 8004e16:	f004 fb93 	bl	8009540 <millis>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <SendATreply_Ble+0x78>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d802      	bhi.n	8004e30 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 8004e2a:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b00a      	add	sp, #40	@ 0x28
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	200003cd 	.word	0x200003cd
 8004e40:	200003d0 	.word	0x200003d0

08004e44 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	//if (findLastValue((uint32_t)&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
		ConfigBLE_Ble ();
 8004e48:	f000 f80c 	bl	8004e64 <ConfigBLE_Ble>
	//}
	//else{
	//	if (tick_1s == 1){
			//BluetoothState = 2;
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004e4c:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <SetUpBluetooth_Ble+0x1c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	0018      	movs	r0, r3
 8004e54:	f00f fb9d 	bl	8014592 <HAL_GPIO_WritePin>
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
	//	}
	//}
}
 8004e58:	46c0      	nop			@ (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	50000800 	.word	0x50000800

08004e64 <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 8004e6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ef8 <ConfigBLE_Ble+0x94>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8004e72:	4b22      	ldr	r3, [pc, #136]	@ (8004efc <ConfigBLE_Ble+0x98>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	2140      	movs	r1, #64	@ 0x40
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f00f fb8a 	bl	8014592 <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8004e7e:	4b20      	ldr	r3, [pc, #128]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d002      	beq.n	8004e8c <ConfigBLE_Ble+0x28>
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d014      	beq.n	8004eb4 <ConfigBLE_Ble+0x50>
 8004e8a:	e027      	b.n	8004edc <ConfigBLE_Ble+0x78>
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	001a      	movs	r2, r3
 8004e92:	491c      	ldr	r1, [pc, #112]	@ (8004f04 <ConfigBLE_Ble+0xa0>)
 8004e94:	481c      	ldr	r0, [pc, #112]	@ (8004f08 <ConfigBLE_Ble+0xa4>)
 8004e96:	23fa      	movs	r3, #250	@ 0xfa
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f7ff ff93 	bl	8004dc8 <SendATreply_Ble>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	4b16      	ldr	r3, [pc, #88]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d11f      	bne.n	8004eec <ConfigBLE_Ble+0x88>
				WaitSerAnsw_Ble_func(5);
 8004eac:	2005      	movs	r0, #5
 8004eae:	f000 fb33 	bl	8005518 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8004eb2:	e01b      	b.n	8004eec <ConfigBLE_Ble+0x88>
			}
			break;
*/
	  case 5:			//  Manuel,   Cambia el nombre de difusion
		  	//if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-HEALTH\r\n\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004eb4:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	001a      	movs	r2, r3
 8004eba:	4912      	ldr	r1, [pc, #72]	@ (8004f04 <ConfigBLE_Ble+0xa0>)
 8004ebc:	4813      	ldr	r0, [pc, #76]	@ (8004f0c <ConfigBLE_Ble+0xa8>)
 8004ebe:	23fa      	movs	r3, #250	@ 0xfa
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f7ff ff7f 	bl	8004dc8 <SendATreply_Ble>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10d      	bne.n	8004ef0 <ConfigBLE_Ble+0x8c>
				WaitSerAnsw_Ble_func(6);
 8004ed4:	2006      	movs	r0, #6
 8004ed6:	f000 fb1f 	bl	8005518 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8004eda:	e009      	b.n	8004ef0 <ConfigBLE_Ble+0x8c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <ConfigBLE_Ble+0xac>)
 8004ede:	2202      	movs	r2, #2
 8004ee0:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f000 fb18 	bl	8005518 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8004ee8:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8004eea:	e002      	b.n	8004ef2 <ConfigBLE_Ble+0x8e>
			break;
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	e000      	b.n	8004ef2 <ConfigBLE_Ble+0x8e>
			break;
 8004ef0:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	2000093b 	.word	0x2000093b
 8004efc:	50000800 	.word	0x50000800
 8004f00:	20000000 	.word	0x20000000
 8004f04:	0801c320 	.word	0x0801c320
 8004f08:	0801c32c 	.word	0x0801c32c
 8004f0c:	0801c338 	.word	0x0801c338
 8004f10:	2000004c 	.word	0x2000004c

08004f14 <GetParamBluetooth_Ble>:
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004f20:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <GetParamBluetooth_Ble+0xa4>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	2140      	movs	r1, #64	@ 0x40
 8004f26:	0018      	movs	r0, r3
 8004f28:	f00f fb33 	bl	8014592 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8004f2c:	4b23      	ldr	r3, [pc, #140]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d002      	beq.n	8004f3a <GetParamBluetooth_Ble+0x26>
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d033      	beq.n	8004fa0 <GetParamBluetooth_Ble+0x8c>
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
		 ParamItem = 1;
	 break;
	}
}
 8004f38:	e03a      	b.n	8004fb0 <GetParamBluetooth_Ble+0x9c>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004f3a:	4b20      	ldr	r3, [pc, #128]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	001a      	movs	r2, r3
 8004f40:	491f      	ldr	r1, [pc, #124]	@ (8004fc0 <GetParamBluetooth_Ble+0xac>)
 8004f42:	4820      	ldr	r0, [pc, #128]	@ (8004fc4 <GetParamBluetooth_Ble+0xb0>)
 8004f44:	23fa      	movs	r3, #250	@ 0xfa
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f7ff ff3c 	bl	8004dc8 <SendATreply_Ble>
 8004f50:	0002      	movs	r2, r0
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d129      	bne.n	8004fae <GetParamBluetooth_Ble+0x9a>
			 foo = strchr(SerialAnswBLE,'=');
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <GetParamBluetooth_Ble+0xb4>)
 8004f5c:	213d      	movs	r1, #61	@ 0x3d
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f017 f808 	bl	801bf74 <strchr>
 8004f64:	0003      	movs	r3, r0
 8004f66:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e00f      	b.n	8004f90 <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	18d2      	adds	r2, r2, r3
 8004f7a:	1dfb      	adds	r3, r7, #7
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	3302      	adds	r3, #2
 8004f80:	7811      	ldrb	r1, [r2, #0]
 8004f82:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <GetParamBluetooth_Ble+0xb8>)
 8004f84:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	1dfb      	adds	r3, r7, #7
 8004f8c:	3201      	adds	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b0b      	cmp	r3, #11
 8004f96:	d9eb      	bls.n	8004f70 <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8004f98:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	601a      	str	r2, [r3, #0]
		 break;
 8004f9e:	e006      	b.n	8004fae <GetParamBluetooth_Ble+0x9a>
		 BluetoothState = 3;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <GetParamBluetooth_Ble+0xbc>)
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	701a      	strb	r2, [r3, #0]
		 ParamItem = 1;
 8004fa6:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
	 break;
 8004fac:	e000      	b.n	8004fb0 <GetParamBluetooth_Ble+0x9c>
		 break;
 8004fae:	46c0      	nop			@ (mov r8, r8)
}
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	50000800 	.word	0x50000800
 8004fbc:	20000000 	.word	0x20000000
 8004fc0:	0801c358 	.word	0x0801c358
 8004fc4:	0801c364 	.word	0x0801c364
 8004fc8:	20000a78 	.word	0x20000a78
 8004fcc:	20001ed4 	.word	0x20001ed4
 8004fd0:	2000004c 	.word	0x2000004c

08004fd4 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
//uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
    asm ("nop");
 8004fda:	46c0      	nop			@ (mov r8, r8)

    uint8_t i_ = 0;
 8004fdc:	1dbb      	adds	r3, r7, #6
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8005150 <TransmitReceive_Ble+0x17c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2140      	movs	r1, #64	@ 0x40
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f00f fad2 	bl	8014592 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8004fee:	f7ff fe83 	bl	8004cf8 <serialEvent_Ble>
	if (receivecomplete_Ble){
 8004ff2:	4b58      	ldr	r3, [pc, #352]	@ (8005154 <TransmitReceive_Ble+0x180>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d100      	bne.n	8004ffc <TransmitReceive_Ble+0x28>
 8004ffa:	e1da      	b.n	80053b2 <TransmitReceive_Ble+0x3de>
		 receivecomplete_Ble = 0;
 8004ffc:	4b55      	ldr	r3, [pc, #340]	@ (8005154 <TransmitReceive_Ble+0x180>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 8005002:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <TransmitReceive_Ble+0x184>)
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <TransmitReceive_Ble+0x3c>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 800500a:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <TransmitReceive_Ble+0x184>)
 800500c:	2201      	movs	r2, #1
 800500e:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",(size_t) 2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8005010:	4952      	ldr	r1, [pc, #328]	@ (800515c <TransmitReceive_Ble+0x188>)
 8005012:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005014:	2202      	movs	r2, #2
 8005016:	0018      	movs	r0, r3
 8005018:	f016 ff96 	bl	801bf48 <memcmp>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d102      	bne.n	8005026 <TransmitReceive_Ble+0x52>
			 codeTX = 0x21;
 8005020:	4b50      	ldr	r3, [pc, #320]	@ (8005164 <TransmitReceive_Ble+0x190>)
 8005022:	2221      	movs	r2, #33	@ 0x21
 8005024:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8005026:	4950      	ldr	r1, [pc, #320]	@ (8005168 <TransmitReceive_Ble+0x194>)
 8005028:	4b4d      	ldr	r3, [pc, #308]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 800502a:	2202      	movs	r2, #2
 800502c:	0018      	movs	r0, r3
 800502e:	f016 ff8b 	bl	801bf48 <memcmp>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d102      	bne.n	800503c <TransmitReceive_Ble+0x68>
			 codeTX = 0x5C;
 8005036:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <TransmitReceive_Ble+0x190>)
 8005038:	225c      	movs	r2, #92	@ 0x5c
 800503a:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 800503c:	494b      	ldr	r1, [pc, #300]	@ (800516c <TransmitReceive_Ble+0x198>)
 800503e:	4b48      	ldr	r3, [pc, #288]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005040:	2202      	movs	r2, #2
 8005042:	0018      	movs	r0, r3
 8005044:	f016 ff80 	bl	801bf48 <memcmp>
 8005048:	1e03      	subs	r3, r0, #0
 800504a:	d102      	bne.n	8005052 <TransmitReceive_Ble+0x7e>
			 codeTX = 0x80;
 800504c:	4b45      	ldr	r3, [pc, #276]	@ (8005164 <TransmitReceive_Ble+0x190>)
 800504e:	2280      	movs	r2, #128	@ 0x80
 8005050:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x81",2) == 0){
 8005052:	4947      	ldr	r1, [pc, #284]	@ (8005170 <TransmitReceive_Ble+0x19c>)
 8005054:	4b42      	ldr	r3, [pc, #264]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005056:	2202      	movs	r2, #2
 8005058:	0018      	movs	r0, r3
 800505a:	f016 ff75 	bl	801bf48 <memcmp>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d102      	bne.n	8005068 <TransmitReceive_Ble+0x94>
			 codeTX = 0x81;
 8005062:	4b40      	ldr	r3, [pc, #256]	@ (8005164 <TransmitReceive_Ble+0x190>)
 8005064:	2281      	movs	r2, #129	@ 0x81
 8005066:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8005068:	4942      	ldr	r1, [pc, #264]	@ (8005174 <TransmitReceive_Ble+0x1a0>)
 800506a:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 800506c:	2202      	movs	r2, #2
 800506e:	0018      	movs	r0, r3
 8005070:	f016 ff6a 	bl	801bf48 <memcmp>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d102      	bne.n	800507e <TransmitReceive_Ble+0xaa>
			 codeTX = 0x3D;
 8005078:	4b3a      	ldr	r3, [pc, #232]	@ (8005164 <TransmitReceive_Ble+0x190>)
 800507a:	223d      	movs	r2, #61	@ 0x3d
 800507c:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 800507e:	493e      	ldr	r1, [pc, #248]	@ (8005178 <TransmitReceive_Ble+0x1a4>)
 8005080:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005082:	2202      	movs	r2, #2
 8005084:	0018      	movs	r0, r3
 8005086:	f016 ff5f 	bl	801bf48 <memcmp>
 800508a:	1e03      	subs	r3, r0, #0
 800508c:	d106      	bne.n	800509c <TransmitReceive_Ble+0xc8>
			 //timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
			 DevLock = 0x72;
 800508e:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <TransmitReceive_Ble+0x1a8>)
 8005090:	2272      	movs	r2, #114	@ 0x72
 8005092:	701a      	strb	r2, [r3, #0]
			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 8005094:	f000 fa56 	bl	8005544 <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 8005098:	f000 fa62 	bl	8005560 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 800509c:	4938      	ldr	r1, [pc, #224]	@ (8005180 <TransmitReceive_Ble+0x1ac>)
 800509e:	4b30      	ldr	r3, [pc, #192]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 80050a0:	2202      	movs	r2, #2
 80050a2:	0018      	movs	r0, r3
 80050a4:	f016 ff50 	bl	801bf48 <memcmp>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d112      	bne.n	80050d2 <TransmitReceive_Ble+0xfe>
		    asm ("nop");
 80050ac:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 80050ae:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <TransmitReceive_Ble+0x1b0>)
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	4b35      	ldr	r3, [pc, #212]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050b4:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 80050b6:	4b34      	ldr	r3, [pc, #208]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	4b34      	ldr	r3, [pc, #208]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 80050bc:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 80050be:	4b34      	ldr	r3, [pc, #208]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80050c4:	4b32      	ldr	r3, [pc, #200]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	4b30      	ldr	r3, [pc, #192]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 80050ca:	0011      	movs	r1, r2
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7ff fde9 	bl	8004ca4 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 80050d2:	4930      	ldr	r1, [pc, #192]	@ (8005194 <TransmitReceive_Ble+0x1c0>)
 80050d4:	4b22      	ldr	r3, [pc, #136]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 80050d6:	2202      	movs	r2, #2
 80050d8:	0018      	movs	r0, r3
 80050da:	f016 ff35 	bl	801bf48 <memcmp>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d16c      	bne.n	80051bc <TransmitReceive_Ble+0x1e8>
			uint8_t foo,foo2;
		    asm ("nop");
 80050e2:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 80050e4:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050e6:	781a      	ldrb	r2, [r3, #0]
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	210f      	movs	r1, #15
 80050ec:	400a      	ands	r2, r1
 80050ee:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b0b      	cmp	r3, #11
 80050f6:	d905      	bls.n	8005104 <TransmitReceive_Ble+0x130>
			  foo = PasswordALG & (~0xF8);
 80050f8:	4b23      	ldr	r3, [pc, #140]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	1dfb      	adds	r3, r7, #7
 80050fe:	2107      	movs	r1, #7
 8005100:	400a      	ands	r2, r1
 8005102:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	3302      	adds	r3, #2
 800510a:	4a23      	ldr	r2, [pc, #140]	@ (8005198 <TransmitReceive_Ble+0x1c4>)
 800510c:	5cd2      	ldrb	r2, [r2, r3]
 800510e:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b2da      	uxtb	r2, r3
 8005116:	1d7b      	adds	r3, r7, #5
 8005118:	3a01      	subs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 800511c:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	1d7a      	adds	r2, r7, #5
 8005122:	7812      	ldrb	r2, [r2, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d139      	bne.n	800519c <TransmitReceive_Ble+0x1c8>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8005128:	4b14      	ldr	r3, [pc, #80]	@ (800517c <TransmitReceive_Ble+0x1a8>)
 800512a:	2272      	movs	r2, #114	@ 0x72
 800512c:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 800512e:	4b17      	ldr	r3, [pc, #92]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 8005130:	22f1      	movs	r2, #241	@ 0xf1
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	4b15      	ldr	r3, [pc, #84]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 8005136:	223d      	movs	r2, #61	@ 0x3d
 8005138:	705a      	strb	r2, [r3, #1]
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 800513c:	2202      	movs	r2, #2
 800513e:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8005140:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 8005142:	781a      	ldrb	r2, [r3, #0]
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 8005146:	0011      	movs	r1, r2
 8005148:	0018      	movs	r0, r3
 800514a:	f7ff fdab 	bl	8004ca4 <SerializeString2>
 800514e:	e035      	b.n	80051bc <TransmitReceive_Ble+0x1e8>
 8005150:	50000800 	.word	0x50000800
 8005154:	200003ce 	.word	0x200003ce
 8005158:	20001fd0 	.word	0x20001fd0
 800515c:	0801c370 	.word	0x0801c370
 8005160:	20000a78 	.word	0x20000a78
 8005164:	20001f18 	.word	0x20001f18
 8005168:	0801c374 	.word	0x0801c374
 800516c:	0801c378 	.word	0x0801c378
 8005170:	0801c37c 	.word	0x0801c37c
 8005174:	0801c380 	.word	0x0801c380
 8005178:	0801c384 	.word	0x0801c384
 800517c:	200021e5 	.word	0x200021e5
 8005180:	0801c388 	.word	0x0801c388
 8005184:	200003dd 	.word	0x200003dd
 8005188:	200003dc 	.word	0x200003dc
 800518c:	20001f2c 	.word	0x20001f2c
 8005190:	20001f26 	.word	0x20001f26
 8005194:	0801c38c 	.word	0x0801c38c
 8005198:	20001ed4 	.word	0x20001ed4
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 800519c:	4b9a      	ldr	r3, [pc, #616]	@ (8005408 <TransmitReceive_Ble+0x434>)
 800519e:	22f1      	movs	r2, #241	@ 0xf1
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	4b99      	ldr	r3, [pc, #612]	@ (8005408 <TransmitReceive_Ble+0x434>)
 80051a4:	223e      	movs	r2, #62	@ 0x3e
 80051a6:	705a      	strb	r2, [r3, #1]
 80051a8:	4b98      	ldr	r3, [pc, #608]	@ (800540c <TransmitReceive_Ble+0x438>)
 80051aa:	2202      	movs	r2, #2
 80051ac:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 80051ae:	4b97      	ldr	r3, [pc, #604]	@ (800540c <TransmitReceive_Ble+0x438>)
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	4b95      	ldr	r3, [pc, #596]	@ (8005408 <TransmitReceive_Ble+0x434>)
 80051b4:	0011      	movs	r1, r2
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7ff fd74 	bl	8004ca4 <SerializeString2>
			}
		}

		//if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
		if ( (DevLock == 0x72) || (statComWIFIFlag) ){
 80051bc:	4b94      	ldr	r3, [pc, #592]	@ (8005410 <TransmitReceive_Ble+0x43c>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b72      	cmp	r3, #114	@ 0x72
 80051c2:	d004      	beq.n	80051ce <TransmitReceive_Ble+0x1fa>
 80051c4:	4b93      	ldr	r3, [pc, #588]	@ (8005414 <TransmitReceive_Ble+0x440>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d100      	bne.n	80051ce <TransmitReceive_Ble+0x1fa>
 80051cc:	e0f1      	b.n	80053b2 <TransmitReceive_Ble+0x3de>
		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 80051ce:	4992      	ldr	r1, [pc, #584]	@ (8005418 <TransmitReceive_Ble+0x444>)
 80051d0:	4b92      	ldr	r3, [pc, #584]	@ (800541c <TransmitReceive_Ble+0x448>)
 80051d2:	2202      	movs	r2, #2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f016 feb7 	bl	801bf48 <memcmp>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d102      	bne.n	80051e4 <TransmitReceive_Ble+0x210>
			 codeTX = 0x60;
 80051de:	4b90      	ldr	r3, [pc, #576]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80051e0:	2260      	movs	r2, #96	@ 0x60
 80051e2:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 80051e4:	498f      	ldr	r1, [pc, #572]	@ (8005424 <TransmitReceive_Ble+0x450>)
 80051e6:	4b8d      	ldr	r3, [pc, #564]	@ (800541c <TransmitReceive_Ble+0x448>)
 80051e8:	2202      	movs	r2, #2
 80051ea:	0018      	movs	r0, r3
 80051ec:	f016 feac 	bl	801bf48 <memcmp>
 80051f0:	1e03      	subs	r3, r0, #0
 80051f2:	d102      	bne.n	80051fa <TransmitReceive_Ble+0x226>
			 codeTX = 0x61;
 80051f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80051f6:	2261      	movs	r2, #97	@ 0x61
 80051f8:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 80051fa:	498b      	ldr	r1, [pc, #556]	@ (8005428 <TransmitReceive_Ble+0x454>)
 80051fc:	4b87      	ldr	r3, [pc, #540]	@ (800541c <TransmitReceive_Ble+0x448>)
 80051fe:	2202      	movs	r2, #2
 8005200:	0018      	movs	r0, r3
 8005202:	f016 fea1 	bl	801bf48 <memcmp>
 8005206:	1e03      	subs	r3, r0, #0
 8005208:	d102      	bne.n	8005210 <TransmitReceive_Ble+0x23c>
			 codeTX = 0x53;
 800520a:	4b85      	ldr	r3, [pc, #532]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800520c:	2253      	movs	r2, #83	@ 0x53
 800520e:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8005210:	4986      	ldr	r1, [pc, #536]	@ (800542c <TransmitReceive_Ble+0x458>)
 8005212:	4b82      	ldr	r3, [pc, #520]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005214:	2202      	movs	r2, #2
 8005216:	0018      	movs	r0, r3
 8005218:	f016 fe96 	bl	801bf48 <memcmp>
 800521c:	1e03      	subs	r3, r0, #0
 800521e:	d102      	bne.n	8005226 <TransmitReceive_Ble+0x252>
			 codeTX = 0x50;
 8005220:	4b7f      	ldr	r3, [pc, #508]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005222:	2250      	movs	r2, #80	@ 0x50
 8005224:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 8005226:	4982      	ldr	r1, [pc, #520]	@ (8005430 <TransmitReceive_Ble+0x45c>)
 8005228:	4b7c      	ldr	r3, [pc, #496]	@ (800541c <TransmitReceive_Ble+0x448>)
 800522a:	2202      	movs	r2, #2
 800522c:	0018      	movs	r0, r3
 800522e:	f016 fe8b 	bl	801bf48 <memcmp>
 8005232:	1e03      	subs	r3, r0, #0
 8005234:	d102      	bne.n	800523c <TransmitReceive_Ble+0x268>
			 codeTX = 0x51;
 8005236:	4b7a      	ldr	r3, [pc, #488]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005238:	2251      	movs	r2, #81	@ 0x51
 800523a:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 800523c:	497d      	ldr	r1, [pc, #500]	@ (8005434 <TransmitReceive_Ble+0x460>)
 800523e:	4b77      	ldr	r3, [pc, #476]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005240:	2202      	movs	r2, #2
 8005242:	0018      	movs	r0, r3
 8005244:	f016 fe80 	bl	801bf48 <memcmp>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d102      	bne.n	8005252 <TransmitReceive_Ble+0x27e>
			 codeTX = 0x46;
 800524c:	4b74      	ldr	r3, [pc, #464]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800524e:	2246      	movs	r2, #70	@ 0x46
 8005250:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005252:	4979      	ldr	r1, [pc, #484]	@ (8005438 <TransmitReceive_Ble+0x464>)
 8005254:	4b71      	ldr	r3, [pc, #452]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005256:	2202      	movs	r2, #2
 8005258:	0018      	movs	r0, r3
 800525a:	f016 fe75 	bl	801bf48 <memcmp>
 800525e:	1e03      	subs	r3, r0, #0
 8005260:	d102      	bne.n	8005268 <TransmitReceive_Ble+0x294>
			 codeTX = 0x49;
 8005262:	4b6f      	ldr	r3, [pc, #444]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005264:	2249      	movs	r2, #73	@ 0x49
 8005266:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005268:	4974      	ldr	r1, [pc, #464]	@ (800543c <TransmitReceive_Ble+0x468>)
 800526a:	4b6c      	ldr	r3, [pc, #432]	@ (800541c <TransmitReceive_Ble+0x448>)
 800526c:	2202      	movs	r2, #2
 800526e:	0018      	movs	r0, r3
 8005270:	f016 fe6a 	bl	801bf48 <memcmp>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d102      	bne.n	800527e <TransmitReceive_Ble+0x2aa>
			 codeTX = 0x4A;
 8005278:	4b69      	ldr	r3, [pc, #420]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800527a:	224a      	movs	r2, #74	@ 0x4a
 800527c:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 800527e:	4970      	ldr	r1, [pc, #448]	@ (8005440 <TransmitReceive_Ble+0x46c>)
 8005280:	4b66      	ldr	r3, [pc, #408]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005282:	2202      	movs	r2, #2
 8005284:	0018      	movs	r0, r3
 8005286:	f016 fe5f 	bl	801bf48 <memcmp>
 800528a:	1e03      	subs	r3, r0, #0
 800528c:	d102      	bne.n	8005294 <TransmitReceive_Ble+0x2c0>
			 codeTX = 0x54;
 800528e:	4b64      	ldr	r3, [pc, #400]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005290:	2254      	movs	r2, #84	@ 0x54
 8005292:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005294:	496b      	ldr	r1, [pc, #428]	@ (8005444 <TransmitReceive_Ble+0x470>)
 8005296:	4b61      	ldr	r3, [pc, #388]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005298:	2202      	movs	r2, #2
 800529a:	0018      	movs	r0, r3
 800529c:	f016 fe54 	bl	801bf48 <memcmp>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d102      	bne.n	80052aa <TransmitReceive_Ble+0x2d6>
	   		 codeTX = 0x80;
 80052a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052a6:	2280      	movs	r2, #128	@ 0x80
 80052a8:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 80052aa:	4967      	ldr	r1, [pc, #412]	@ (8005448 <TransmitReceive_Ble+0x474>)
 80052ac:	4b5b      	ldr	r3, [pc, #364]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052ae:	2202      	movs	r2, #2
 80052b0:	0018      	movs	r0, r3
 80052b2:	f016 fe49 	bl	801bf48 <memcmp>
 80052b6:	1e03      	subs	r3, r0, #0
 80052b8:	d102      	bne.n	80052c0 <TransmitReceive_Ble+0x2ec>
	   		 codeTX = 0x3D;
 80052ba:	4b59      	ldr	r3, [pc, #356]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052bc:	223d      	movs	r2, #61	@ 0x3d
 80052be:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 80052c0:	4962      	ldr	r1, [pc, #392]	@ (800544c <TransmitReceive_Ble+0x478>)
 80052c2:	4b56      	ldr	r3, [pc, #344]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052c4:	2202      	movs	r2, #2
 80052c6:	0018      	movs	r0, r3
 80052c8:	f016 fe3e 	bl	801bf48 <memcmp>
 80052cc:	1e03      	subs	r3, r0, #0
 80052ce:	d102      	bne.n	80052d6 <TransmitReceive_Ble+0x302>
			 codeTX = 0x55;
 80052d0:	4b53      	ldr	r3, [pc, #332]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052d2:	2255      	movs	r2, #85	@ 0x55
 80052d4:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 80052d6:	495e      	ldr	r1, [pc, #376]	@ (8005450 <TransmitReceive_Ble+0x47c>)
 80052d8:	4b50      	ldr	r3, [pc, #320]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052da:	2202      	movs	r2, #2
 80052dc:	0018      	movs	r0, r3
 80052de:	f016 fe33 	bl	801bf48 <memcmp>
 80052e2:	1e03      	subs	r3, r0, #0
 80052e4:	d102      	bne.n	80052ec <TransmitReceive_Ble+0x318>
	   		 codeTX = 0x56;
 80052e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052e8:	2256      	movs	r2, #86	@ 0x56
 80052ea:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 80052ec:	4959      	ldr	r1, [pc, #356]	@ (8005454 <TransmitReceive_Ble+0x480>)
 80052ee:	4b4b      	ldr	r3, [pc, #300]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052f0:	2202      	movs	r2, #2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f016 fe28 	bl	801bf48 <memcmp>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d102      	bne.n	8005302 <TransmitReceive_Ble+0x32e>
	   		 codeTX = 0x57;
 80052fc:	4b48      	ldr	r3, [pc, #288]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052fe:	2257      	movs	r2, #87	@ 0x57
 8005300:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 8005302:	4955      	ldr	r1, [pc, #340]	@ (8005458 <TransmitReceive_Ble+0x484>)
 8005304:	4b45      	ldr	r3, [pc, #276]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005306:	2202      	movs	r2, #2
 8005308:	0018      	movs	r0, r3
 800530a:	f016 fe1d 	bl	801bf48 <memcmp>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d102      	bne.n	8005318 <TransmitReceive_Ble+0x344>
	   		 codeTX = 0x58;
 8005312:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005314:	2258      	movs	r2, #88	@ 0x58
 8005316:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8005318:	4950      	ldr	r1, [pc, #320]	@ (800545c <TransmitReceive_Ble+0x488>)
 800531a:	4b40      	ldr	r3, [pc, #256]	@ (800541c <TransmitReceive_Ble+0x448>)
 800531c:	2202      	movs	r2, #2
 800531e:	0018      	movs	r0, r3
 8005320:	f016 fe12 	bl	801bf48 <memcmp>
 8005324:	1e03      	subs	r3, r0, #0
 8005326:	d102      	bne.n	800532e <TransmitReceive_Ble+0x35a>
	   		 codeTX = 0x59;
 8005328:	4b3d      	ldr	r3, [pc, #244]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800532a:	2259      	movs	r2, #89	@ 0x59
 800532c:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 800532e:	494c      	ldr	r1, [pc, #304]	@ (8005460 <TransmitReceive_Ble+0x48c>)
 8005330:	4b3a      	ldr	r3, [pc, #232]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005332:	2202      	movs	r2, #2
 8005334:	0018      	movs	r0, r3
 8005336:	f016 fe07 	bl	801bf48 <memcmp>
 800533a:	1e03      	subs	r3, r0, #0
 800533c:	d102      	bne.n	8005344 <TransmitReceive_Ble+0x370>
	    	 codeTX = 0x5A;
 800533e:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005340:	225a      	movs	r2, #90	@ 0x5a
 8005342:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8005344:	4947      	ldr	r1, [pc, #284]	@ (8005464 <TransmitReceive_Ble+0x490>)
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005348:	2202      	movs	r2, #2
 800534a:	0018      	movs	r0, r3
 800534c:	f016 fdfc 	bl	801bf48 <memcmp>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d102      	bne.n	800535a <TransmitReceive_Ble+0x386>
	   		 codeTX = 0x5B;
 8005354:	4b32      	ldr	r3, [pc, #200]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005356:	225b      	movs	r2, #91	@ 0x5b
 8005358:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 800535a:	4943      	ldr	r1, [pc, #268]	@ (8005468 <TransmitReceive_Ble+0x494>)
 800535c:	4b2f      	ldr	r3, [pc, #188]	@ (800541c <TransmitReceive_Ble+0x448>)
 800535e:	2202      	movs	r2, #2
 8005360:	0018      	movs	r0, r3
 8005362:	f016 fdf1 	bl	801bf48 <memcmp>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d102      	bne.n	8005370 <TransmitReceive_Ble+0x39c>
		 	 codeTX = 0x5C;
 800536a:	4b2d      	ldr	r3, [pc, #180]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800536c:	225c      	movs	r2, #92	@ 0x5c
 800536e:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8005370:	493e      	ldr	r1, [pc, #248]	@ (800546c <TransmitReceive_Ble+0x498>)
 8005372:	4b2a      	ldr	r3, [pc, #168]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005374:	2202      	movs	r2, #2
 8005376:	0018      	movs	r0, r3
 8005378:	f016 fde6 	bl	801bf48 <memcmp>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d102      	bne.n	8005386 <TransmitReceive_Ble+0x3b2>
			  codeTX = 0x5F;
 8005380:	4b27      	ldr	r3, [pc, #156]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005382:	225f      	movs	r2, #95	@ 0x5f
 8005384:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x62",2) == 0)	 		// CÓDIGO DE logger tiempo wifi
 8005386:	493a      	ldr	r1, [pc, #232]	@ (8005470 <TransmitReceive_Ble+0x49c>)
 8005388:	4b24      	ldr	r3, [pc, #144]	@ (800541c <TransmitReceive_Ble+0x448>)
 800538a:	2202      	movs	r2, #2
 800538c:	0018      	movs	r0, r3
 800538e:	f016 fddb 	bl	801bf48 <memcmp>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d102      	bne.n	800539c <TransmitReceive_Ble+0x3c8>
	   		  codeTX = 0x62;
 8005396:	4b22      	ldr	r3, [pc, #136]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005398:	2262      	movs	r2, #98	@ 0x62
 800539a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x63",2) == 0)		 	// CÓDIGO DE logger eventos wifi
 800539c:	4935      	ldr	r1, [pc, #212]	@ (8005474 <TransmitReceive_Ble+0x4a0>)
 800539e:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <TransmitReceive_Ble+0x448>)
 80053a0:	2202      	movs	r2, #2
 80053a2:	0018      	movs	r0, r3
 80053a4:	f016 fdd0 	bl	801bf48 <memcmp>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d102      	bne.n	80053b2 <TransmitReceive_Ble+0x3de>
	   		  codeTX = 0x63;
 80053ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80053ae:	2263      	movs	r2, #99	@ 0x63
 80053b0:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 80053b2:	f004 f8c5 	bl	8009540 <millis>
 80053b6:	0003      	movs	r3, r0
 80053b8:	001a      	movs	r2, r3
 80053ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005478 <TransmitReceive_Ble+0x4a4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d91d      	bls.n	8005400 <TransmitReceive_Ble+0x42c>
		TestMessMilis = millis();
 80053c4:	f004 f8bc 	bl	8009540 <millis>
 80053c8:	0003      	movs	r3, r0
 80053ca:	001a      	movs	r2, r3
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <TransmitReceive_Ble+0x4a4>)
 80053ce:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 80053d0:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <TransmitReceive_Ble+0x4a8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b55      	cmp	r3, #85	@ 0x55
 80053d6:	d102      	bne.n	80053de <TransmitReceive_Ble+0x40a>
		    asm ("nop");
 80053d8:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 80053da:	f008 fcc1 	bl	800dd60 <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 80053de:	4b27      	ldr	r3, [pc, #156]	@ (800547c <TransmitReceive_Ble+0x4a8>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b55      	cmp	r3, #85	@ 0x55
 80053e4:	d10c      	bne.n	8005400 <TransmitReceive_Ble+0x42c>
		    asm ("nop");
 80053e6:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80053e8:	4b08      	ldr	r3, [pc, #32]	@ (800540c <TransmitReceive_Ble+0x438>)
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <TransmitReceive_Ble+0x434>)
 80053ee:	0011      	movs	r1, r2
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7ff fc57 	bl	8004ca4 <SerializeString2>
			i_++;
 80053f6:	1dbb      	adds	r3, r7, #6
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	3201      	adds	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20001f2c 	.word	0x20001f2c
 800540c:	20001f26 	.word	0x20001f26
 8005410:	200021e5 	.word	0x200021e5
 8005414:	200021e7 	.word	0x200021e7
 8005418:	0801c390 	.word	0x0801c390
 800541c:	20000a78 	.word	0x20000a78
 8005420:	20001f18 	.word	0x20001f18
 8005424:	0801c394 	.word	0x0801c394
 8005428:	0801c398 	.word	0x0801c398
 800542c:	0801c39c 	.word	0x0801c39c
 8005430:	0801c3a0 	.word	0x0801c3a0
 8005434:	0801c3a4 	.word	0x0801c3a4
 8005438:	0801c3a8 	.word	0x0801c3a8
 800543c:	0801c3ac 	.word	0x0801c3ac
 8005440:	0801c3b0 	.word	0x0801c3b0
 8005444:	0801c378 	.word	0x0801c378
 8005448:	0801c380 	.word	0x0801c380
 800544c:	0801c3b4 	.word	0x0801c3b4
 8005450:	0801c3b8 	.word	0x0801c3b8
 8005454:	0801c3bc 	.word	0x0801c3bc
 8005458:	0801c3c0 	.word	0x0801c3c0
 800545c:	0801c3c4 	.word	0x0801c3c4
 8005460:	0801c3c8 	.word	0x0801c3c8
 8005464:	0801c3cc 	.word	0x0801c3cc
 8005468:	0801c374 	.word	0x0801c374
 800546c:	0801c3d0 	.word	0x0801c3d0
 8005470:	0801c3d4 	.word	0x0801c3d4
 8005474:	0801c3d8 	.word	0x0801c3d8
 8005478:	200003d8 	.word	0x200003d8
 800547c:	20001f0d 	.word	0x20001f0d

08005480 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 8005484:	4b1f      	ldr	r3, [pc, #124]	@ (8005504 <Read_Inpunts_ble+0x84>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d037      	beq.n	80054fc <Read_Inpunts_ble+0x7c>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <Read_Inpunts_ble+0x88>)
 8005492:	0019      	movs	r1, r3
 8005494:	0010      	movs	r0, r2
 8005496:	f00f f85f 	bl	8014558 <HAL_GPIO_ReadPin>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d017      	beq.n	80054ce <Read_Inpunts_ble+0x4e>
				{
					if (CntDebInp1 <= 50)
 800549e:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b32      	cmp	r3, #50	@ 0x32
 80054a4:	d805      	bhi.n	80054b2 <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 80054a6:	4b19      	ldr	r3, [pc, #100]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b17      	ldr	r3, [pc, #92]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054b0:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b32      	cmp	r3, #50	@ 0x32
 80054b8:	d120      	bne.n	80054fc <Read_Inpunts_ble+0x7c>
						{
							device_conected = 1;
 80054ba:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <Read_Inpunts_ble+0x90>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054c2:	2233      	movs	r2, #51	@ 0x33
 80054c4:	701a      	strb	r2, [r3, #0]
							statComFlag = 255;
 80054c6:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <Read_Inpunts_ble+0x94>)
 80054c8:	22ff      	movs	r2, #255	@ 0xff
 80054ca:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
					statComFlag = 0;
				}
			}
		}
}
 80054cc:	e016      	b.n	80054fc <Read_Inpunts_ble+0x7c>
				if (CntDebInp1 >= 1)
 80054ce:	4b0f      	ldr	r3, [pc, #60]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <Read_Inpunts_ble+0x62>
					CntDebInp1--;
 80054d6:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	3b01      	subs	r3, #1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054e0:	701a      	strb	r2, [r3, #0]
				if (CntDebInp1==1)
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d108      	bne.n	80054fc <Read_Inpunts_ble+0x7c>
					device_conected = 0;
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <Read_Inpunts_ble+0x90>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
					statComFlag = 0;
 80054f6:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <Read_Inpunts_ble+0x94>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
}
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	20000938 	.word	0x20000938
 8005508:	50000400 	.word	0x50000400
 800550c:	200003d4 	.word	0x200003d4
 8005510:	2000093c 	.word	0x2000093c
 8005514:	200021e6 	.word	0x200021e6

08005518 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	0002      	movs	r2, r0
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 8005524:	4b05      	ldr	r3, [pc, #20]	@ (800553c <WaitSerAnsw_Ble_func+0x24>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 800552a:	1dfb      	adds	r3, r7, #7
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <WaitSerAnsw_Ble_func+0x28>)
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	200003cd 	.word	0x200003cd
 8005540:	20000000 	.word	0x20000000

08005544 <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <grabacion_exitosa_handshake+0x18>)
 800554a:	22f1      	movs	r2, #241	@ 0xf1
 800554c:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800554e:	4b03      	ldr	r3, [pc, #12]	@ (800555c <grabacion_exitosa_handshake+0x18>)
 8005550:	223d      	movs	r2, #61	@ 0x3d
 8005552:	705a      	strb	r2, [r3, #1]
}
 8005554:	46c0      	nop			@ (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	20001ed4 	.word	0x20001ed4

08005560 <manda_transmision>:

void manda_transmision (void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <manda_transmision+0x34>)
 8005566:	4a0c      	ldr	r2, [pc, #48]	@ (8005598 <manda_transmision+0x38>)
 8005568:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <manda_transmision+0x3c>)
 800556c:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <manda_transmision+0x38>)
 800556e:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8005570:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <manda_transmision+0x40>)
 8005572:	4a0c      	ldr	r2, [pc, #48]	@ (80055a4 <manda_transmision+0x44>)
 8005574:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 8005576:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <manda_transmision+0x48>)
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 800557c:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <manda_transmision+0x4c>)
 800557e:	2201      	movs	r2, #1
 8005580:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <manda_transmision+0x50>)
 8005584:	2255      	movs	r2, #85	@ 0x55
 8005586:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <manda_transmision+0x54>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]

}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20001f08 	.word	0x20001f08
 8005598:	20001ed4 	.word	0x20001ed4
 800559c:	20001f00 	.word	0x20001f00
 80055a0:	20001f04 	.word	0x20001f04
 80055a4:	20001ed5 	.word	0x20001ed5
 80055a8:	20001f24 	.word	0x20001f24
 80055ac:	20001f10 	.word	0x20001f10
 80055b0:	20001f0d 	.word	0x20001f0d
 80055b4:	20001f18 	.word	0x20001f18

080055b8 <bootloader>:
#include "main.h"
#include "customMain.h"



void bootloader (void){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055be:	b672      	cpsid	i
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
//	//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
//	while(HAL_FLASH_Lock()!=  HAL_OK );

    // Desbloquea el controlador FLASH

	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x0801F000 + 4));
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <bootloader+0x1c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	607b      	str	r3, [r7, #4]
    //__set_MSP((*(volatile uint32_t *)(0x0801E800)) );0x801E800
	app_reset_handler();
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4798      	blx	r3
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	0801f004 	.word	0x0801f004

080055d8 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 80055dc:	4b3a      	ldr	r3, [pc, #232]	@ (80056c8 <main10+0xf0>)
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d006      	beq.n	80055f2 <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 80055e4:	4b39      	ldr	r3, [pc, #228]	@ (80056cc <main10+0xf4>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	2108      	movs	r1, #8
 80055ea:	0018      	movs	r0, r3
 80055ec:	f00e ffd1 	bl	8014592 <HAL_GPIO_WritePin>
 80055f0:	e005      	b.n	80055fe <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 80055f2:	4b36      	ldr	r3, [pc, #216]	@ (80056cc <main10+0xf4>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	2108      	movs	r1, #8
 80055f8:	0018      	movs	r0, r3
 80055fa:	f00e ffca 	bl	8014592 <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 80055fe:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <main10+0xf0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	0099      	lsls	r1, r3, #2
 800560a:	23a0      	movs	r3, #160	@ 0xa0
 800560c:	05db      	lsls	r3, r3, #23
 800560e:	2201      	movs	r2, #1
 8005610:	0018      	movs	r0, r3
 8005612:	f00e ffbe 	bl	8014592 <HAL_GPIO_WritePin>
 8005616:	e007      	b.n	8005628 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 8005618:	2380      	movs	r3, #128	@ 0x80
 800561a:	0099      	lsls	r1, r3, #2
 800561c:	23a0      	movs	r3, #160	@ 0xa0
 800561e:	05db      	lsls	r3, r3, #23
 8005620:	2200      	movs	r2, #0
 8005622:	0018      	movs	r0, r3
 8005624:	f00e ffb5 	bl	8014592 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 8005628:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <main10+0xf0>)
 800562a:	789b      	ldrb	r3, [r3, #2]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4825      	ldr	r0, [pc, #148]	@ (80056cc <main10+0xf4>)
 8005636:	2201      	movs	r2, #1
 8005638:	0019      	movs	r1, r3
 800563a:	f00e ffaa 	bl	8014592 <HAL_GPIO_WritePin>
 800563e:	e006      	b.n	800564e <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4821      	ldr	r0, [pc, #132]	@ (80056cc <main10+0xf4>)
 8005646:	2200      	movs	r2, #0
 8005648:	0019      	movs	r1, r3
 800564a:	f00e ffa2 	bl	8014592 <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 800564e:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <main10+0xf0>)
 8005650:	791b      	ldrb	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	0059      	lsls	r1, r3, #1
 800565a:	23a0      	movs	r3, #160	@ 0xa0
 800565c:	05db      	lsls	r3, r3, #23
 800565e:	2201      	movs	r2, #1
 8005660:	0018      	movs	r0, r3
 8005662:	f00e ff96 	bl	8014592 <HAL_GPIO_WritePin>
 8005666:	e007      	b.n	8005678 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8005668:	2380      	movs	r3, #128	@ 0x80
 800566a:	0059      	lsls	r1, r3, #1
 800566c:	23a0      	movs	r3, #160	@ 0xa0
 800566e:	05db      	lsls	r3, r3, #23
 8005670:	2200      	movs	r2, #0
 8005672:	0018      	movs	r0, r3
 8005674:	f00e ff8d 	bl	8014592 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8005678:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <main10+0xf8>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b13      	ldr	r3, [pc, #76]	@ (80056d0 <main10+0xf8>)
 8005682:	701a      	strb	r2, [r3, #0]
		//if(portX[rel_fn] && (cntproc & 0x01))
		//	HAL_TIM_PWM_Start (&htim1,TIM_CHANNEL_3);
		if(portX[rel_fn]){
 8005684:	4b10      	ldr	r3, [pc, #64]	@ (80056c8 <main10+0xf0>)
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <main10+0xc0>
			HAL_TIM_PWM_Start (&htim1,TIM_CHANNEL_3);
 800568c:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <main10+0xfc>)
 800568e:	2108      	movs	r1, #8
 8005690:	0018      	movs	r0, r3
 8005692:	f013 fdf3 	bl	801927c <HAL_TIM_PWM_Start>
 8005696:	e004      	b.n	80056a2 <main10+0xca>
		}
			//HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else{
			HAL_TIM_PWM_Stop (&htim1,TIM_CHANNEL_3);
 8005698:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <main10+0xfc>)
 800569a:	2108      	movs	r1, #8
 800569c:	0018      	movs	r0, r3
 800569e:	f013 fecf 	bl	8019440 <HAL_TIM_PWM_Stop>
		}
			//HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <main10+0x100>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <main10+0x100>)
 80056ac:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <main10+0x100>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b27      	cmp	r3, #39	@ 0x27
 80056b4:	d904      	bls.n	80056c0 <main10+0xe8>
        asm ("nop");
 80056b6:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 80056b8:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <main10+0x100>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	20000bb8 	.word	0x20000bb8
 80056cc:	50000800 	.word	0x50000800
 80056d0:	20000bad 	.word	0x20000bad
 80056d4:	200005a8 	.word	0x200005a8
 80056d8:	20000c1e 	.word	0x20000c1e

080056dc <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 80056e0:	4b46      	ldr	r3, [pc, #280]	@ (80057fc <retardoDeActuadores+0x120>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	4053      	eors	r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d114      	bne.n	8005718 <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80056ee:	4b44      	ldr	r3, [pc, #272]	@ (8005800 <retardoDeActuadores+0x124>)
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 80056f6:	4b42      	ldr	r3, [pc, #264]	@ (8005800 <retardoDeActuadores+0x124>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4053      	eors	r3, r2
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10e      	bne.n	8005722 <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005704:	4b3e      	ldr	r3, [pc, #248]	@ (8005800 <retardoDeActuadores+0x124>)
 8005706:	2201      	movs	r2, #1
 8005708:	705a      	strb	r2, [r3, #1]
 800570a:	e000      	b.n	800570e <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 800570c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 800570e:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <retardoDeActuadores+0x128>)
 8005710:	0018      	movs	r0, r3
 8005712:	f001 fcde 	bl	80070d2 <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 8005716:	e005      	b.n	8005724 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 8005718:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[1] = 0;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 800571a:	4b39      	ldr	r3, [pc, #228]	@ (8005800 <retardoDeActuadores+0x124>)
 800571c:	2200      	movs	r2, #0
 800571e:	705a      	strb	r2, [r3, #1]
 8005720:	e000      	b.n	8005724 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 8005722:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 8005724:	4b35      	ldr	r3, [pc, #212]	@ (80057fc <retardoDeActuadores+0x120>)
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2201      	movs	r2, #1
 800572a:	4053      	eors	r3, r2
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d114      	bne.n	800575c <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 8005732:	4b33      	ldr	r3, [pc, #204]	@ (8005800 <retardoDeActuadores+0x124>)
 8005734:	789b      	ldrb	r3, [r3, #2]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 800573a:	4b31      	ldr	r3, [pc, #196]	@ (8005800 <retardoDeActuadores+0x124>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	4053      	eors	r3, r2
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005748:	4b2d      	ldr	r3, [pc, #180]	@ (8005800 <retardoDeActuadores+0x124>)
 800574a:	2201      	movs	r2, #1
 800574c:	709a      	strb	r2, [r3, #2]
 800574e:	e000      	b.n	8005752 <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 8005750:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 8005752:	4b2d      	ldr	r3, [pc, #180]	@ (8005808 <retardoDeActuadores+0x12c>)
 8005754:	0018      	movs	r0, r3
 8005756:	f001 fcbc 	bl	80070d2 <decwreg>
			goto	revisa_ret_ventilador;		//
 800575a:	e005      	b.n	8005768 <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 800575c:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 800575e:	4b28      	ldr	r3, [pc, #160]	@ (8005800 <retardoDeActuadores+0x124>)
 8005760:	2200      	movs	r2, #0
 8005762:	709a      	strb	r2, [r3, #2]
 8005764:	e000      	b.n	8005768 <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 8005766:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 8005768:	4b28      	ldr	r3, [pc, #160]	@ (800580c <retardoDeActuadores+0x130>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	4053      	eors	r3, r2
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d114      	bne.n	80057a0 <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 8005776:	4b22      	ldr	r3, [pc, #136]	@ (8005800 <retardoDeActuadores+0x124>)
 8005778:	78db      	ldrb	r3, [r3, #3]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 800577e:	4b20      	ldr	r3, [pc, #128]	@ (8005800 <retardoDeActuadores+0x124>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	4053      	eors	r3, r2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10e      	bne.n	80057aa <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 800578c:	4b1c      	ldr	r3, [pc, #112]	@ (8005800 <retardoDeActuadores+0x124>)
 800578e:	2201      	movs	r2, #1
 8005790:	70da      	strb	r2, [r3, #3]
 8005792:	e000      	b.n	8005796 <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 8005794:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 8005796:	4b1e      	ldr	r3, [pc, #120]	@ (8005810 <retardoDeActuadores+0x134>)
 8005798:	0018      	movs	r0, r3
 800579a:	f001 fc9a 	bl	80070d2 <decwreg>
			goto	revisa_ret_lampara;		//
 800579e:	e005      	b.n	80057ac <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 80057a0:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 80057a2:	4b17      	ldr	r3, [pc, #92]	@ (8005800 <retardoDeActuadores+0x124>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	70da      	strb	r2, [r3, #3]
 80057a8:	e000      	b.n	80057ac <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 80057aa:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 80057ac:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <retardoDeActuadores+0x120>)
 80057ae:	789b      	ldrb	r3, [r3, #2]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4053      	eors	r3, r2
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d114      	bne.n	80057e4 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 80057ba:	4b11      	ldr	r3, [pc, #68]	@ (8005800 <retardoDeActuadores+0x124>)
 80057bc:	791b      	ldrb	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 80057c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <retardoDeActuadores+0x124>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4053      	eors	r3, r2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10e      	bne.n	80057ee <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <retardoDeActuadores+0x124>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	711a      	strb	r2, [r3, #4]
 80057d6:	e000      	b.n	80057da <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 80057d8:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 80057da:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <retardoDeActuadores+0x138>)
 80057dc:	0018      	movs	r0, r3
 80057de:	f001 fc78 	bl	80070d2 <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 80057e2:	e005      	b.n	80057f0 <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 80057e4:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <retardoDeActuadores+0x124>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	711a      	strb	r2, [r3, #4]
 80057ec:	e000      	b.n	80057f0 <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80057ee:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 80057f0:	4b03      	ldr	r3, [pc, #12]	@ (8005800 <retardoDeActuadores+0x124>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000c04 	.word	0x20000c04
 8005800:	20000cbc 	.word	0x20000cbc
 8005804:	20000cb6 	.word	0x20000cb6
 8005808:	20000cb7 	.word	0x20000cb7
 800580c:	20000c40 	.word	0x20000c40
 8005810:	20000cb8 	.word	0x20000cb8
 8005814:	20000cb9 	.word	0x20000cb9

08005818 <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
    asm ("nop");
 800581c:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 800581e:	4b4b      	ldr	r3, [pc, #300]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 8005824:	4b4a      	ldr	r3, [pc, #296]	@ (8005950 <calculando_tiempo_UNIX+0x138>)
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	2203      	movs	r2, #3
 800582a:	4013      	ands	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <calculando_tiempo_UNIX+0x2e>
 8005832:	4b48      	ldr	r3, [pc, #288]	@ (8005954 <calculando_tiempo_UNIX+0x13c>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d905      	bls.n	8005846 <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 800583a:	4b44      	ldr	r3, [pc, #272]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <calculando_tiempo_UNIX+0x140>)
 8005840:	189a      	adds	r2, r3, r2
 8005842:	4b42      	ldr	r3, [pc, #264]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005844:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 8005846:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <calculando_tiempo_UNIX+0x13c>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 800584e:	4b41      	ldr	r3, [pc, #260]	@ (8005954 <calculando_tiempo_UNIX+0x13c>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	4b41      	ldr	r3, [pc, #260]	@ (800595c <calculando_tiempo_UNIX+0x144>)
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	58d2      	ldr	r2, [r2, r3]
 800585a:	0013      	movs	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	189b      	adds	r3, r3, r2
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	0113      	lsls	r3, r2, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	01db      	lsls	r3, r3, #7
 800586a:	001a      	movs	r2, r3
 800586c:	4b37      	ldr	r3, [pc, #220]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	18d2      	adds	r2, r2, r3
 8005872:	4b36      	ldr	r3, [pc, #216]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005874:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 8005876:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <calculando_tiempo_UNIX+0x138>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	4a39      	ldr	r2, [pc, #228]	@ (8005960 <calculando_tiempo_UNIX+0x148>)
 800587c:	189a      	adds	r2, r3, r2
 800587e:	0013      	movs	r3, r2
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	189b      	adds	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	189b      	adds	r3, r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	189b      	adds	r3, r3, r2
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	01d3      	lsls	r3, r2, #7
 8005892:	001a      	movs	r2, r3
 8005894:	0013      	movs	r3, r2
 8005896:	001a      	movs	r2, r3
 8005898:	4b2c      	ldr	r3, [pc, #176]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	18d2      	adds	r2, r2, r3
 800589e:	4b2b      	ldr	r3, [pc, #172]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058a0:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 80058a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005950 <calculando_tiempo_UNIX+0x138>)
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <calculando_tiempo_UNIX+0x14c>)
 80058a8:	4694      	mov	ip, r2
 80058aa:	4463      	add	r3, ip
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da00      	bge.n	80058b2 <calculando_tiempo_UNIX+0x9a>
 80058b0:	3303      	adds	r3, #3
 80058b2:	109b      	asrs	r3, r3, #2
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005968 <calculando_tiempo_UNIX+0x150>)
 80058b8:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 80058ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005968 <calculando_tiempo_UNIX+0x150>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	001a      	movs	r2, r3
 80058c0:	0013      	movs	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	0113      	lsls	r3, r2, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	01db      	lsls	r3, r3, #7
 80058d0:	001a      	movs	r2, r3
 80058d2:	4b1e      	ldr	r3, [pc, #120]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	18d2      	adds	r2, r2, r3
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058da:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 80058dc:	4b23      	ldr	r3, [pc, #140]	@ (800596c <calculando_tiempo_UNIX+0x154>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	0013      	movs	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	011a      	lsls	r2, r3, #4
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	0113      	lsls	r3, r2, #4
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	01db      	lsls	r3, r3, #7
 80058f2:	001a      	movs	r2, r3
 80058f4:	4b15      	ldr	r3, [pc, #84]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	18d2      	adds	r2, r2, r3
 80058fa:	4b14      	ldr	r3, [pc, #80]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058fc:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 80058fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005970 <calculando_tiempo_UNIX+0x158>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	001a      	movs	r2, r3
 8005904:	0013      	movs	r3, r2
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	1ad2      	subs	r2, r2, r3
 800590e:	0113      	lsls	r3, r2, #4
 8005910:	001a      	movs	r2, r3
 8005912:	4b0e      	ldr	r3, [pc, #56]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	18d2      	adds	r2, r2, r3
 8005918:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800591a:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 800591c:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <calculando_tiempo_UNIX+0x15c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	001a      	movs	r2, r3
 8005922:	0013      	movs	r3, r2
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	001a      	movs	r2, r3
 800592c:	4b07      	ldr	r3, [pc, #28]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	18d2      	adds	r2, r2, r3
 8005932:	4b06      	ldr	r3, [pc, #24]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005934:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <calculando_tiempo_UNIX+0x160>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	001a      	movs	r2, r3
 800593c:	4b03      	ldr	r3, [pc, #12]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	18d2      	adds	r2, r2, r3
 8005942:	4b02      	ldr	r3, [pc, #8]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005944:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	2000218c 	.word	0x2000218c
 8005950:	20002184 	.word	0x20002184
 8005954:	20002186 	.word	0x20002186
 8005958:	00015180 	.word	0x00015180
 800595c:	200001c4 	.word	0x200001c4
 8005960:	fffff84e 	.word	0xfffff84e
 8005964:	fffff84f 	.word	0xfffff84f
 8005968:	20002190 	.word	0x20002190
 800596c:	20002187 	.word	0x20002187
 8005970:	20002188 	.word	0x20002188
 8005974:	20002189 	.word	0x20002189
 8005978:	2000218a 	.word	0x2000218a

0800597c <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;
extern uint16_t temperatureRTP;

//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	000a      	movs	r2, r1
 8005986:	1cfb      	adds	r3, r7, #3
 8005988:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 800598a:	230e      	movs	r3, #14
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 8005992:	230d      	movs	r3, #13
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e011      	b.n	80059c0 <prom8m1b+0x44>
		foo += array[i];
 800599c:	200d      	movs	r0, #13
 800599e:	183b      	adds	r3, r7, r0
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	18d3      	adds	r3, r2, r3
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	0019      	movs	r1, r3
 80059aa:	220e      	movs	r2, #14
 80059ac:	18bb      	adds	r3, r7, r2
 80059ae:	18ba      	adds	r2, r7, r2
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	188a      	adds	r2, r1, r2
 80059b4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 80059b6:	183b      	adds	r3, r7, r0
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	183b      	adds	r3, r7, r0
 80059bc:	3201      	adds	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	230d      	movs	r3, #13
 80059c2:	18fa      	adds	r2, r7, r3
 80059c4:	1cfb      	adds	r3, r7, #3
 80059c6:	7812      	ldrb	r2, [r2, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d3e6      	bcc.n	800599c <prom8m1b+0x20>
	}
	foo /=  prom;
 80059ce:	240e      	movs	r4, #14
 80059d0:	193b      	adds	r3, r7, r4
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	1cfb      	adds	r3, r7, #3
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	0019      	movs	r1, r3
 80059da:	0010      	movs	r0, r2
 80059dc:	f7fa fc26 	bl	800022c <__divsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	001a      	movs	r2, r3
 80059e4:	193b      	adds	r3, r7, r4
 80059e6:	801a      	strh	r2, [r3, #0]
	return foo;
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	881b      	ldrh	r3, [r3, #0]
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b005      	add	sp, #20
 80059f2:	bd90      	pop	{r4, r7, pc}

080059f4 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 80059fa:	4be3      	ldr	r3, [pc, #908]	@ (8005d88 <prog_param+0x394>)
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4053      	eors	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d140      	bne.n	8005a8a <prog_param+0x96>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 8005a08:	4be0      	ldr	r3, [pc, #896]	@ (8005d8c <prog_param+0x398>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 8005a0e:	4be0      	ldr	r3, [pc, #896]	@ (8005d90 <prog_param+0x39c>)
 8005a10:	2214      	movs	r2, #20
 8005a12:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 8005a14:	4bdf      	ldr	r3, [pc, #892]	@ (8005d94 <prog_param+0x3a0>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 8005a1a:	4bdf      	ldr	r3, [pc, #892]	@ (8005d98 <prog_param+0x3a4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8005a20:	2317      	movs	r3, #23
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e00a      	b.n	8005a40 <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 8005a2a:	2017      	movs	r0, #23
 8005a2c:	183b      	adds	r3, r7, r0
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4ada      	ldr	r2, [pc, #872]	@ (8005d9c <prog_param+0x3a8>)
 8005a32:	2100      	movs	r1, #0
 8005a34:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	183b      	adds	r3, r7, r0
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	2317      	movs	r3, #23
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b07      	cmp	r3, #7
 8005a48:	d9ef      	bls.n	8005a2a <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		//uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
		uint8_t *X = &eePlantilla[eedato_seg1];
 8005a4a:	4bd5      	ldr	r3, [pc, #852]	@ (8005da0 <prog_param+0x3ac>)
 8005a4c:	613b      	str	r3, [r7, #16]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8005a4e:	4bd5      	ldr	r3, [pc, #852]	@ (8005da4 <prog_param+0x3b0>)
 8005a50:	60fb      	str	r3, [r7, #12]
		uint8_t *Z = &reePlantilla[eedato_seg1];
 8005a52:	4bd5      	ldr	r3, [pc, #852]	@ (8005da8 <prog_param+0x3b4>)
 8005a54:	60bb      	str	r3, [r7, #8]
		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t)X);	//ld (Y), A
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7fd faf3 	bl	8003044 <findLastValue>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
		*Z = *Y;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	701a      	strb	r2, [r3, #0]
		//*Y = *X;
		X++;//incw X
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
		Y++;//incw Y
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
		Z++;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60bb      	str	r3, [r7, #8]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4bca      	ldr	r3, [pc, #808]	@ (8005dac <prog_param+0x3b8>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d802      	bhi.n	8005a8e <prog_param+0x9a>
			goto copy_eeprom;//jrule copy_eeprom
 8005a88:	e7e5      	b.n	8005a56 <prog_param+0x62>
			goto no_set_prog;
 8005a8a:	46c0      	nop			@ (mov r8, r8)
 8005a8c:	e000      	b.n	8005a90 <prog_param+0x9c>
		}

no_set_prog:
 8005a8e:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8005a90:	4bbe      	ldr	r3, [pc, #760]	@ (8005d8c <prog_param+0x398>)
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <prog_param+0xa8>
 8005a98:	f000 fc28 	bl	80062ec <prog_param+0x8f8>
			goto ask_btn_prsd;
 8005a9c:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8005a9e:	1dfb      	adds	r3, r7, #7
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e00d      	b.n	8005ac2 <prog_param+0xce>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8005aa6:	1dfb      	adds	r3, r7, #7
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8005db0 <prog_param+0x3bc>)
 8005aac:	5cd3      	ldrb	r3, [r2, r3]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4053      	eors	r3, r2
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10c      	bne.n	8005ad2 <prog_param+0xde>
	for(uint8_t k=0; k<8; k++){
 8005ab8:	1dfb      	adds	r3, r7, #7
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	1dfb      	adds	r3, r7, #7
 8005abe:	3201      	adds	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	1dfb      	adds	r3, r7, #7
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b07      	cmp	r3, #7
 8005ac8:	d9ed      	bls.n	8005aa6 <prog_param+0xb2>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 8005aca:	4bb1      	ldr	r3, [pc, #708]	@ (8005d90 <prog_param+0x39c>)
 8005acc:	2214      	movs	r2, #20
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e000      	b.n	8005ad4 <prog_param+0xe0>
			goto no_btn_pres; //jreq no_btn_pres
 8005ad2:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8005ad4:	4bae      	ldr	r3, [pc, #696]	@ (8005d90 <prog_param+0x39c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <prog_param+0xec>
 8005adc:	f000 fbf1 	bl	80062c2 <prog_param+0x8ce>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8005ae0:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8005ae2:	4baa      	ldr	r3, [pc, #680]	@ (8005d8c <prog_param+0x398>)
 8005ae4:	789b      	ldrb	r3, [r3, #2]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4053      	eors	r3, r2
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d114      	bne.n	8005b1a <prog_param+0x126>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8005af0:	4ba6      	ldr	r3, [pc, #664]	@ (8005d8c <prog_param+0x398>)
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d100      	bne.n	8005afa <prog_param+0x106>
 8005af8:	e268      	b.n	8005fcc <prog_param+0x5d8>
			goto jmp_nv2Menu2;
 8005afa:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 8005afc:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005afe:	4bad      	ldr	r3, [pc, #692]	@ (8005db4 <prog_param+0x3c0>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2207      	movs	r2, #7
 8005b04:	4013      	ands	r3, r2
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4bab      	ldr	r3, [pc, #684]	@ (8005db8 <prog_param+0x3c4>)
 8005b0a:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 8005b0c:	4baa      	ldr	r3, [pc, #680]	@ (8005db8 <prog_param+0x3c4>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d901      	bls.n	8005b18 <prog_param+0x124>
 8005b14:	f000 fbc3 	bl	800629e <prog_param+0x8aa>
 8005b18:	e305      	b.n	8006126 <prog_param+0x732>
			goto noMenu2;
 8005b1a:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 8005b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8005d8c <prog_param+0x398>)
 8005b1e:	78db      	ldrb	r3, [r3, #3]
 8005b20:	2201      	movs	r2, #1
 8005b22:	4053      	eors	r3, r2
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d100      	bne.n	8005b2c <prog_param+0x138>
 8005b2a:	e0cc      	b.n	8005cc6 <prog_param+0x2d2>
			goto sel_param;
 8005b2c:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 8005b2e:	4ba0      	ldr	r3, [pc, #640]	@ (8005db0 <prog_param+0x3bc>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 8005b34:	4b9e      	ldr	r3, [pc, #632]	@ (8005db0 <prog_param+0x3bc>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 8005b3a:	4b97      	ldr	r3, [pc, #604]	@ (8005d98 <prog_param+0x3a4>)
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8005db8 <prog_param+0x3c4>)
 8005b40:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 8005b42:	4b9e      	ldr	r3, [pc, #632]	@ (8005dbc <prog_param+0x3c8>)
 8005b44:	2209      	movs	r2, #9
 8005b46:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 8005b48:	4b9d      	ldr	r3, [pc, #628]	@ (8005dc0 <prog_param+0x3cc>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 8005b4e:	f000 fbd9 	bl	8006304 <md_dif_math>
		param = wreg;		//mov param,wreg
 8005b52:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc4 <prog_param+0x3d0>)
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	4b90      	ldr	r3, [pc, #576]	@ (8005d98 <prog_param+0x3a4>)
 8005b58:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 8005b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d98 <prog_param+0x3a4>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	220f      	movs	r2, #15
 8005b60:	4013      	ands	r3, r2
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b94      	ldr	r3, [pc, #592]	@ (8005db8 <prog_param+0x3c4>)
 8005b66:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005b68:	4b93      	ldr	r3, [pc, #588]	@ (8005db8 <prog_param+0x3c4>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d840      	bhi.n	8005bf2 <prog_param+0x1fe>
 8005b70:	009a      	lsls	r2, r3, #2
 8005b72:	4b95      	ldr	r3, [pc, #596]	@ (8005dc8 <prog_param+0x3d4>)
 8005b74:	18d3      	adds	r3, r2, r3
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 8005b7a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 8005b7c:	2125      	movs	r1, #37	@ 0x25
 8005b7e:	2005      	movs	r0, #5
 8005b80:	f001 fbc2 	bl	8007308 <op_menu>
		goto ask_enter;//jra ask_enter
 8005b84:	e03a      	b.n	8005bfc <prog_param+0x208>
			case 1: goto opc01m01;
 8005b86:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 8005b88:	210f      	movs	r1, #15
 8005b8a:	200d      	movs	r0, #13
 8005b8c:	f001 fbbc 	bl	8007308 <op_menu>
		goto ask_enter; // jra ask_enter
 8005b90:	e034      	b.n	8005bfc <prog_param+0x208>
			case 2: goto opc02m01;
 8005b92:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8005b94:	210a      	movs	r1, #10
 8005b96:	2020      	movs	r0, #32
 8005b98:	f001 fbb6 	bl	8007308 <op_menu>
		goto ask_enter;//jra ask_enter
 8005b9c:	e02e      	b.n	8005bfc <prog_param+0x208>
			case 3: goto opc03m01;
 8005b9e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8005ba0:	210b      	movs	r1, #11
 8005ba2:	2020      	movs	r0, #32
 8005ba4:	f001 fbb0 	bl	8007308 <op_menu>
		goto ask_enter;//jra ask_enter
 8005ba8:	e028      	b.n	8005bfc <prog_param+0x208>
			case 4: goto opc04m01;
 8005baa:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8005bac:	210f      	movs	r1, #15
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f001 fbaa 	bl	8007308 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bb4:	e022      	b.n	8005bfc <prog_param+0x208>
			case 5: goto opc05m01;
 8005bb6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 8005bb8:	2105      	movs	r1, #5
 8005bba:	2025      	movs	r0, #37	@ 0x25
 8005bbc:	f001 fba4 	bl	8007308 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bc0:	e01c      	b.n	8005bfc <prog_param+0x208>
			case 6: goto opc06m01;
 8005bc2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8005bc4:	2127      	movs	r1, #39	@ 0x27
 8005bc6:	200f      	movs	r0, #15
 8005bc8:	f001 fb9e 	bl	8007308 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bcc:	e016      	b.n	8005bfc <prog_param+0x208>
			case 7: goto opc07m01;
 8005bce:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8005bd0:	210a      	movs	r1, #10
 8005bd2:	200f      	movs	r0, #15
 8005bd4:	f001 fb98 	bl	8007308 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bd8:	e010      	b.n	8005bfc <prog_param+0x208>
			case 8: goto opc08m01;
 8005bda:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8005bdc:	210e      	movs	r1, #14
 8005bde:	2005      	movs	r0, #5
 8005be0:	f001 fb92 	bl	8007308 <op_menu>
		goto ask_enter;//jra ask_enter
 8005be4:	e00a      	b.n	8005bfc <prog_param+0x208>
			case 9: goto opc09m01;
 8005be6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 8005be8:	210e      	movs	r1, #14
 8005bea:	201f      	movs	r0, #31
 8005bec:	f001 fb8c 	bl	8007308 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bf0:	e004      	b.n	8005bfc <prog_param+0x208>
			default: goto opcNA;
 8005bf2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005bf4:	2126      	movs	r1, #38	@ 0x26
 8005bf6:	2026      	movs	r0, #38	@ 0x26
 8005bf8:	f001 fb86 	bl	8007308 <op_menu>
		datled_clear();
 8005bfc:	f001 fb9e 	bl	800733c <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 8005c00:	4b6b      	ldr	r3, [pc, #428]	@ (8005db0 <prog_param+0x3bc>)
 8005c02:	789b      	ldrb	r3, [r3, #2]
 8005c04:	2201      	movs	r2, #1
 8005c06:	4053      	eors	r3, r2
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d157      	bne.n	8005cbe <prog_param+0x2ca>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d8c <prog_param+0x398>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 8005c14:	4b60      	ldr	r3, [pc, #384]	@ (8005d98 <prog_param+0x3a4>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b09      	cmp	r3, #9
 8005c1a:	d100      	bne.n	8005c1e <prog_param+0x22a>
 8005c1c:	e353      	b.n	80062c6 <prog_param+0x8d2>
			goto ask_set_prog;//jrne ask_set_prog
 8005c1e:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 8005c20:	4b5d      	ldr	r3, [pc, #372]	@ (8005d98 <prog_param+0x3a4>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d14c      	bne.n	8005cc2 <prog_param+0x2ce>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 8005c28:	4b5c      	ldr	r3, [pc, #368]	@ (8005d9c <prog_param+0x3a8>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	4053      	eors	r3, r2
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <prog_param+0x24a>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 8005c36:	4b65      	ldr	r3, [pc, #404]	@ (8005dcc <prog_param+0x3d8>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <prog_param+0x24c>
			goto no_desh_forz;
 8005c3e:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 8005c40:	4b56      	ldr	r3, [pc, #344]	@ (8005d9c <prog_param+0x3a8>)
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2201      	movs	r2, #1
 8005c46:	4053      	eors	r3, r2
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d12f      	bne.n	8005cae <prog_param+0x2ba>
		flags_menu[1] = 0; //bres flags_menu,#1
 8005c4e:	4b53      	ldr	r3, [pc, #332]	@ (8005d9c <prog_param+0x3a8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 8005c54:	4b53      	ldr	r3, [pc, #332]	@ (8005da4 <prog_param+0x3b0>)
 8005c56:	2239      	movs	r2, #57	@ 0x39
 8005c58:	5c9a      	ldrb	r2, [r3, r2]
 8005c5a:	4b52      	ldr	r3, [pc, #328]	@ (8005da4 <prog_param+0x3b0>)
 8005c5c:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8005c5e:	4b51      	ldr	r3, [pc, #324]	@ (8005da4 <prog_param+0x3b0>)
 8005c60:	223a      	movs	r2, #58	@ 0x3a
 8005c62:	5c9a      	ldrb	r2, [r3, r2]
 8005c64:	4b4f      	ldr	r3, [pc, #316]	@ (8005da4 <prog_param+0x3b0>)
 8005c66:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 8005c68:	4b4e      	ldr	r3, [pc, #312]	@ (8005da4 <prog_param+0x3b0>)
 8005c6a:	223b      	movs	r2, #59	@ 0x3b
 8005c6c:	5c9a      	ldrb	r2, [r3, r2]
 8005c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8005da4 <prog_param+0x3b0>)
 8005c70:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8005c72:	4b4c      	ldr	r3, [pc, #304]	@ (8005da4 <prog_param+0x3b0>)
 8005c74:	223c      	movs	r2, #60	@ 0x3c
 8005c76:	5c9a      	ldrb	r2, [r3, r2]
 8005c78:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <prog_param+0x3b0>)
 8005c7a:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 8005c7c:	4b49      	ldr	r3, [pc, #292]	@ (8005da4 <prog_param+0x3b0>)
 8005c7e:	223d      	movs	r2, #61	@ 0x3d
 8005c80:	5c99      	ldrb	r1, [r3, r2]
 8005c82:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <prog_param+0x3b0>)
 8005c84:	222d      	movs	r2, #45	@ 0x2d
 8005c86:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 8005c88:	4b46      	ldr	r3, [pc, #280]	@ (8005da4 <prog_param+0x3b0>)
 8005c8a:	223e      	movs	r2, #62	@ 0x3e
 8005c8c:	5c99      	ldrb	r1, [r3, r2]
 8005c8e:	4b45      	ldr	r3, [pc, #276]	@ (8005da4 <prog_param+0x3b0>)
 8005c90:	222e      	movs	r2, #46	@ 0x2e
 8005c92:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8005c94:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <prog_param+0x3b0>)
 8005c96:	223f      	movs	r2, #63	@ 0x3f
 8005c98:	5c99      	ldrb	r1, [r3, r2]
 8005c9a:	4b42      	ldr	r3, [pc, #264]	@ (8005da4 <prog_param+0x3b0>)
 8005c9c:	222f      	movs	r2, #47	@ 0x2f
 8005c9e:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8005ca0:	4b40      	ldr	r3, [pc, #256]	@ (8005da4 <prog_param+0x3b0>)
 8005ca2:	2240      	movs	r2, #64	@ 0x40
 8005ca4:	5c99      	ldrb	r1, [r3, r2]
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <prog_param+0x3b0>)
 8005ca8:	2230      	movs	r2, #48	@ 0x30
 8005caa:	5499      	strb	r1, [r3, r2]
 8005cac:	e000      	b.n	8005cb0 <prog_param+0x2bc>
			goto no_def_param;
 8005cae:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8005cb0:	4b47      	ldr	r3, [pc, #284]	@ (8005dd0 <prog_param+0x3dc>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <prog_param+0x3e0>)
 8005cb8:	22aa      	movs	r2, #170	@ 0xaa
 8005cba:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 8005cbc:	e306      	b.n	80062cc <prog_param+0x8d8>
			goto fin_sel_param;
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	e315      	b.n	80062ee <prog_param+0x8fa>
			goto fin_sel_param; //jrne fin_sel_param
 8005cc2:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8005cc4:	e313      	b.n	80062ee <prog_param+0x8fa>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8005cc6:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 8005cc8:	4b33      	ldr	r3, [pc, #204]	@ (8005d98 <prog_param+0x3a4>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	220f      	movs	r2, #15
 8005cce:	4013      	ands	r3, r2
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4b39      	ldr	r3, [pc, #228]	@ (8005db8 <prog_param+0x3c4>)
 8005cd4:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005cd6:	4b38      	ldr	r3, [pc, #224]	@ (8005db8 <prog_param+0x3c4>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d900      	bls.n	8005ce0 <prog_param+0x2ec>
 8005cde:	e132      	b.n	8005f46 <prog_param+0x552>
 8005ce0:	009a      	lsls	r2, r3, #2
 8005ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8005dd8 <prog_param+0x3e4>)
 8005ce4:	18d3      	adds	r3, r2, r3
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 8005cea:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 8005cec:	4b3b      	ldr	r3, [pc, #236]	@ (8005ddc <prog_param+0x3e8>)
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 fbe2 	bl	80064b8 <TwoByteInArrayToWord>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	001c      	movs	r4, r3
 8005cf8:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <prog_param+0x3ec>)
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 fbdc 	bl	80064b8 <TwoByteInArrayToWord>
 8005d00:	0003      	movs	r3, r0
 8005d02:	001d      	movs	r5, r3
 8005d04:	4b37      	ldr	r3, [pc, #220]	@ (8005de4 <prog_param+0x3f0>)
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 fbd6 	bl	80064b8 <TwoByteInArrayToWord>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	001a      	movs	r2, r3
 8005d10:	2302      	movs	r3, #2
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2301      	movs	r3, #1
 8005d16:	0029      	movs	r1, r5
 8005d18:	0020      	movs	r0, r4
 8005d1a:	f001 fb49 	bl	80073b0 <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 8005d1e:	e117      	b.n	8005f50 <prog_param+0x55c>
			case 1: goto opc01m01nv2;
 8005d20:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 8005d22:	4b31      	ldr	r3, [pc, #196]	@ (8005de8 <prog_param+0x3f4>)
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 fbc7 	bl	80064b8 <TwoByteInArrayToWord>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	2304      	movs	r3, #4
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2303      	movs	r3, #3
 8005d34:	2100      	movs	r1, #0
 8005d36:	2063      	movs	r0, #99	@ 0x63
 8005d38:	f001 fb3a 	bl	80073b0 <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005d3c:	e108      	b.n	8005f50 <prog_param+0x55c>
			case 2: goto opc02m01nv2;
 8005d3e:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 8005d40:	4b26      	ldr	r3, [pc, #152]	@ (8005ddc <prog_param+0x3e8>)
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 fbb8 	bl	80064b8 <TwoByteInArrayToWord>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	3396      	adds	r3, #150	@ 0x96
 8005d4c:	001c      	movs	r4, r3
 8005d4e:	4b25      	ldr	r3, [pc, #148]	@ (8005de4 <prog_param+0x3f0>)
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 fbb1 	bl	80064b8 <TwoByteInArrayToWord>
 8005d56:	0003      	movs	r3, r0
 8005d58:	001d      	movs	r5, r3
 8005d5a:	4b23      	ldr	r3, [pc, #140]	@ (8005de8 <prog_param+0x3f4>)
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 fbab 	bl	80064b8 <TwoByteInArrayToWord>
 8005d62:	0003      	movs	r3, r0
 8005d64:	18eb      	adds	r3, r5, r3
 8005d66:	330a      	adds	r3, #10
 8005d68:	001d      	movs	r5, r3
 8005d6a:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <prog_param+0x3f8>)
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 fba3 	bl	80064b8 <TwoByteInArrayToWord>
 8005d72:	0003      	movs	r3, r0
 8005d74:	001a      	movs	r2, r3
 8005d76:	232e      	movs	r3, #46	@ 0x2e
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	232d      	movs	r3, #45	@ 0x2d
 8005d7c:	0029      	movs	r1, r5
 8005d7e:	0020      	movs	r0, r4
 8005d80:	f001 fb16 	bl	80073b0 <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005d84:	e0e4      	b.n	8005f50 <prog_param+0x55c>
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	20000c78 	.word	0x20000c78
 8005d8c:	20000c48 	.word	0x20000c48
 8005d90:	20000bd2 	.word	0x20000bd2
 8005d94:	20000c60 	.word	0x20000c60
 8005d98:	20000c5f 	.word	0x20000c5f
 8005d9c:	20000ca8 	.word	0x20000ca8
 8005da0:	0803f000 	.word	0x0803f000
 8005da4:	20000138 	.word	0x20000138
 8005da8:	20000cec 	.word	0x20000cec
 8005dac:	200001b7 	.word	0x200001b7
 8005db0:	20000c50 	.word	0x20000c50
 8005db4:	20000c5e 	.word	0x20000c5e
 8005db8:	20000934 	.word	0x20000934
 8005dbc:	20000c62 	.word	0x20000c62
 8005dc0:	20000c64 	.word	0x20000c64
 8005dc4:	20000bb7 	.word	0x20000bb7
 8005dc8:	0801c41c 	.word	0x0801c41c
 8005dcc:	20000cb0 	.word	0x20000cb0
 8005dd0:	20000cc4 	.word	0x20000cc4
 8005dd4:	20000cc3 	.word	0x20000cc3
 8005dd8:	0801c444 	.word	0x0801c444
 8005ddc:	20000147 	.word	0x20000147
 8005de0:	20000145 	.word	0x20000145
 8005de4:	20000139 	.word	0x20000139
 8005de8:	2000013b 	.word	0x2000013b
 8005dec:	20000165 	.word	0x20000165
			case 3: goto opc03m01nv2;
 8005df0:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 8005df2:	4bd4      	ldr	r3, [pc, #848]	@ (8006144 <prog_param+0x750>)
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 fb5f 	bl	80064b8 <TwoByteInArrayToWord>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	3b0a      	subs	r3, #10
 8005dfe:	001c      	movs	r4, r3
 8005e00:	4bd1      	ldr	r3, [pc, #836]	@ (8006148 <prog_param+0x754>)
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 fb58 	bl	80064b8 <TwoByteInArrayToWord>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	3b96      	subs	r3, #150	@ 0x96
 8005e0c:	001d      	movs	r5, r3
 8005e0e:	4bcf      	ldr	r3, [pc, #828]	@ (800614c <prog_param+0x758>)
 8005e10:	0018      	movs	r0, r3
 8005e12:	f000 fb51 	bl	80064b8 <TwoByteInArrayToWord>
 8005e16:	0003      	movs	r3, r0
 8005e18:	001a      	movs	r2, r3
 8005e1a:	2330      	movs	r3, #48	@ 0x30
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	232f      	movs	r3, #47	@ 0x2f
 8005e20:	0029      	movs	r1, r5
 8005e22:	0020      	movs	r0, r4
 8005e24:	f001 fac4 	bl	80073b0 <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 8005e28:	e092      	b.n	8005f50 <prog_param+0x55c>
			case 4: goto opc04m01nv2;
 8005e2a:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 8005e2c:	4bc8      	ldr	r3, [pc, #800]	@ (8006150 <prog_param+0x75c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <prog_param+0x44a>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 8005e34:	4bc6      	ldr	r3, [pc, #792]	@ (8006150 <prog_param+0x75c>)
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <prog_param+0x462>
				goto toggle_opc04m01nv2;
 8005e3c:	e000      	b.n	8005e40 <prog_param+0x44c>
				goto toggle_opc04m01nv2;
 8005e3e:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 8005e40:	4bc4      	ldr	r3, [pc, #784]	@ (8006154 <prog_param+0x760>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2201      	movs	r2, #1
 8005e46:	4053      	eors	r3, r2
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	4193      	sbcs	r3, r2
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4bc0      	ldr	r3, [pc, #768]	@ (8006154 <prog_param+0x760>)
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e000      	b.n	8005e58 <prog_param+0x464>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 8005e56:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005e58:	2101      	movs	r1, #1
 8005e5a:	2028      	movs	r0, #40	@ 0x28
 8005e5c:	f001 fa54 	bl	8007308 <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 8005e60:	4bbc      	ldr	r3, [pc, #752]	@ (8006154 <prog_param+0x760>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	4053      	eors	r3, r2
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <prog_param+0x484>
			op_menu (0x00, 0x1D);
 8005e6e:	211d      	movs	r1, #29
 8005e70:	2000      	movs	r0, #0
 8005e72:	f001 fa49 	bl	8007308 <op_menu>
 8005e76:	e000      	b.n	8005e7a <prog_param+0x486>
				goto dpy2_opc04m01nv2;
 8005e78:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005e7a:	f001 fa5f 	bl	800733c <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005e7e:	e067      	b.n	8005f50 <prog_param+0x55c>
			case 5: goto opc05m01nv2;
 8005e80:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 8005e82:	2105      	movs	r1, #5
 8005e84:	2025      	movs	r0, #37	@ 0x25
 8005e86:	f001 fa3f 	bl	8007308 <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8005e8a:	4bb3      	ldr	r3, [pc, #716]	@ (8006158 <prog_param+0x764>)
 8005e8c:	2263      	movs	r2, #99	@ 0x63
 8005e8e:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 8005e90:	4bb2      	ldr	r3, [pc, #712]	@ (800615c <prog_param+0x768>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8005e96:	4bb2      	ldr	r3, [pc, #712]	@ (8006160 <prog_param+0x76c>)
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	4bb2      	ldr	r3, [pc, #712]	@ (8006164 <prog_param+0x770>)
 8005e9c:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 8005e9e:	f000 fa31 	bl	8006304 <md_dif_math>
			key = wreg;//	mov	key,wreg
 8005ea2:	4bb1      	ldr	r3, [pc, #708]	@ (8006168 <prog_param+0x774>)
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	4bae      	ldr	r3, [pc, #696]	@ (8006160 <prog_param+0x76c>)
 8005ea8:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 8005eaa:	f000 fd3b 	bl	8006924 <soloent1>
			datled_clear();
 8005eae:	f001 fa45 	bl	800733c <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 8005eb2:	e04d      	b.n	8005f50 <prog_param+0x55c>
			case 6: goto opc06m01nv2;
 8005eb4:	46c0      	nop			@ (mov r8, r8)
			op_menu  (reePlantilla[eeversion1], reePlantilla[eeversion2]/10);
 8005eb6:	4bad      	ldr	r3, [pc, #692]	@ (800616c <prog_param+0x778>)
 8005eb8:	227b      	movs	r2, #123	@ 0x7b
 8005eba:	5c9c      	ldrb	r4, [r3, r2]
 8005ebc:	4bab      	ldr	r3, [pc, #684]	@ (800616c <prog_param+0x778>)
 8005ebe:	227c      	movs	r2, #124	@ 0x7c
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	210a      	movs	r1, #10
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7fa f927 	bl	8000118 <__udivsi3>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	0019      	movs	r1, r3
 8005ed0:	0020      	movs	r0, r4
 8005ed2:	f001 fa19 	bl	8007308 <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005ed6:	e03b      	b.n	8005f50 <prog_param+0x55c>
			case 7: goto opc07m01nv2;
 8005ed8:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8005eda:	4b9d      	ldr	r3, [pc, #628]	@ (8006150 <prog_param+0x75c>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <prog_param+0x4f8>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 8005ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8006150 <prog_param+0x75c>)
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <prog_param+0x510>
			   goto toggle_opc07m01nv2;
 8005eea:	e000      	b.n	8005eee <prog_param+0x4fa>
			   goto toggle_opc07m01nv2;
 8005eec:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8005eee:	4b99      	ldr	r3, [pc, #612]	@ (8006154 <prog_param+0x760>)
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4053      	eors	r3, r2
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	1e5a      	subs	r2, r3, #1
 8005efa:	4193      	sbcs	r3, r2
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	4b95      	ldr	r3, [pc, #596]	@ (8006154 <prog_param+0x760>)
 8005f00:	705a      	strb	r2, [r3, #1]
 8005f02:	e000      	b.n	8005f06 <prog_param+0x512>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8005f04:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005f06:	2101      	movs	r1, #1
 8005f08:	2028      	movs	r0, #40	@ 0x28
 8005f0a:	f001 f9fd 	bl	8007308 <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8005f0e:	4b91      	ldr	r3, [pc, #580]	@ (8006154 <prog_param+0x760>)
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4053      	eors	r3, r2
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <prog_param+0x532>
			op_menu (0x00, 0x1D);
 8005f1c:	211d      	movs	r1, #29
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f001 f9f2 	bl	8007308 <op_menu>
 8005f24:	e000      	b.n	8005f28 <prog_param+0x534>
				goto dpy2_opc07m01nv2;
 8005f26:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005f28:	f001 fa08 	bl	800733c <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005f2c:	e010      	b.n	8005f50 <prog_param+0x55c>
			case 8: goto opc08m01nv2;
 8005f2e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8005f30:	210e      	movs	r1, #14
 8005f32:	2005      	movs	r0, #5
 8005f34:	f001 f9e8 	bl	8007308 <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8005f38:	e00a      	b.n	8005f50 <prog_param+0x55c>
			case 9: goto opc09m01nv2;
 8005f3a:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8005f3c:	210e      	movs	r1, #14
 8005f3e:	201f      	movs	r0, #31
 8005f40:	f001 f9e2 	bl	8007308 <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8005f44:	e004      	b.n	8005f50 <prog_param+0x55c>
			default: goto opcNAnv2;
 8005f46:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8005f48:	2126      	movs	r1, #38	@ 0x26
 8005f4a:	2026      	movs	r0, #38	@ 0x26
 8005f4c:	f001 f9dc 	bl	8007308 <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8005f50:	4b7f      	ldr	r3, [pc, #508]	@ (8006150 <prog_param+0x75c>)
 8005f52:	789b      	ldrb	r3, [r3, #2]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4053      	eors	r3, r2
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d12e      	bne.n	8005fbc <prog_param+0x5c8>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8005f5e:	4b84      	ldr	r3, [pc, #528]	@ (8006170 <prog_param+0x77c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8005f64:	4b83      	ldr	r3, [pc, #524]	@ (8006174 <prog_param+0x780>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b05      	cmp	r3, #5
 8005f6a:	d129      	bne.n	8005fc0 <prog_param+0x5cc>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8005f6c:	4b82      	ldr	r3, [pc, #520]	@ (8006178 <prog_param+0x784>)
 8005f6e:	2273      	movs	r2, #115	@ 0x73
 8005f70:	5c9a      	ldrb	r2, [r3, r2]
 8005f72:	4b7b      	ldr	r3, [pc, #492]	@ (8006160 <prog_param+0x76c>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d124      	bne.n	8005fc4 <prog_param+0x5d0>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8005f7a:	4976      	ldr	r1, [pc, #472]	@ (8006154 <prog_param+0x760>)
 8005f7c:	487c      	ldr	r0, [pc, #496]	@ (8006170 <prog_param+0x77c>)
 8005f7e:	2303      	movs	r3, #3
 8005f80:	2202      	movs	r2, #2
 8005f82:	f007 fc33 	bl	800d7ec <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8005f86:	4b7d      	ldr	r3, [pc, #500]	@ (800617c <prog_param+0x788>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8005f8c:	4b78      	ldr	r3, [pc, #480]	@ (8006170 <prog_param+0x77c>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2201      	movs	r2, #1
 8005f92:	4053      	eors	r3, r2
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <prog_param+0x5ae>
			flags_menu[3] = 1;//bset flags_menu,#3
 8005f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8006154 <prog_param+0x760>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	70da      	strb	r2, [r3, #3]
 8005fa0:	e000      	b.n	8005fa4 <prog_param+0x5b0>
				goto noSetFlagLU;
 8005fa2:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8005fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8006154 <prog_param+0x760>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8005faa:	4b73      	ldr	r3, [pc, #460]	@ (8006178 <prog_param+0x784>)
 8005fac:	2252      	movs	r2, #82	@ 0x52
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d109      	bne.n	8005fc8 <prog_param+0x5d4>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8005fb4:	4b67      	ldr	r3, [pc, #412]	@ (8006154 <prog_param+0x760>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8005fba:	e198      	b.n	80062ee <prog_param+0x8fa>
				goto no_enter_nv2;
 8005fbc:	46c0      	nop			@ (mov r8, r8)
 8005fbe:	e196      	b.n	80062ee <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8005fc0:	46c0      	nop			@ (mov r8, r8)
 8005fc2:	e194      	b.n	80062ee <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2
 8005fc4:	46c0      	nop			@ (mov r8, r8)
 8005fc6:	e192      	b.n	80062ee <prog_param+0x8fa>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8005fc8:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8005fca:	e190      	b.n	80062ee <prog_param+0x8fa>
		goto menu2; //jp menu2
 8005fcc:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8005fce:	4960      	ldr	r1, [pc, #384]	@ (8006150 <prog_param+0x75c>)
 8005fd0:	485f      	ldr	r0, [pc, #380]	@ (8006150 <prog_param+0x75c>)
 8005fd2:	2305      	movs	r3, #5
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f007 fc24 	bl	800d822 <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8005fda:	4b68      	ldr	r3, [pc, #416]	@ (800617c <prog_param+0x788>)
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	4b61      	ldr	r3, [pc, #388]	@ (8006164 <prog_param+0x770>)
 8005fe0:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8005fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8006158 <prog_param+0x764>)
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8005fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800615c <prog_param+0x768>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8005fee:	f000 f989 	bl	8006304 <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8005ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8006168 <prog_param+0x774>)
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	4b61      	ldr	r3, [pc, #388]	@ (800617c <prog_param+0x788>)
 8005ff8:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005ffa:	4b60      	ldr	r3, [pc, #384]	@ (800617c <prog_param+0x788>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2207      	movs	r2, #7
 8006000:	4013      	ands	r3, r2
 8006002:	b2da      	uxtb	r2, r3
 8006004:	4b57      	ldr	r3, [pc, #348]	@ (8006164 <prog_param+0x770>)
 8006006:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8006008:	4b56      	ldr	r3, [pc, #344]	@ (8006164 <prog_param+0x770>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b04      	cmp	r3, #4
 800600e:	d822      	bhi.n	8006056 <prog_param+0x662>
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	4b5b      	ldr	r3, [pc, #364]	@ (8006180 <prog_param+0x78c>)
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 800601a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 800601c:	210f      	movs	r1, #15
 800601e:	2000      	movs	r0, #0
 8006020:	f001 f972 	bl	8007308 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006024:	e01c      	b.n	8006060 <prog_param+0x66c>
			case 1: goto opc01m02;
 8006026:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8006028:	2127      	movs	r1, #39	@ 0x27
 800602a:	2011      	movs	r0, #17
 800602c:	f001 f96c 	bl	8007308 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006030:	e016      	b.n	8006060 <prog_param+0x66c>
			case 2: goto opc02m02;
 8006032:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8006034:	211d      	movs	r1, #29
 8006036:	2027      	movs	r0, #39	@ 0x27
 8006038:	f001 f966 	bl	8007308 <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 800603c:	e010      	b.n	8006060 <prog_param+0x66c>
			case 3: goto opc03m02;
 800603e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8006040:	210e      	movs	r1, #14
 8006042:	2005      	movs	r0, #5
 8006044:	f001 f960 	bl	8007308 <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8006048:	e00a      	b.n	8006060 <prog_param+0x66c>
			case 4: goto opc04m02;
 800604a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 800604c:	210e      	movs	r1, #14
 800604e:	201f      	movs	r0, #31
 8006050:	f001 f95a 	bl	8007308 <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8006054:	e004      	b.n	8006060 <prog_param+0x66c>
			default: goto opcNA_m02;
 8006056:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8006058:	2126      	movs	r1, #38	@ 0x26
 800605a:	2026      	movs	r0, #38	@ 0x26
 800605c:	f001 f954 	bl	8007308 <op_menu>
		datled_clear();
 8006060:	f001 f96c 	bl	800733c <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8006064:	4b3a      	ldr	r3, [pc, #232]	@ (8006150 <prog_param+0x75c>)
 8006066:	789b      	ldrb	r3, [r3, #2]
 8006068:	2201      	movs	r2, #1
 800606a:	4053      	eors	r3, r2
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d155      	bne.n	800611e <prog_param+0x72a>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 8006072:	4b3f      	ldr	r3, [pc, #252]	@ (8006170 <prog_param+0x77c>)
 8006074:	2201      	movs	r2, #1
 8006076:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8006078:	4b40      	ldr	r3, [pc, #256]	@ (800617c <prog_param+0x788>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b04      	cmp	r3, #4
 800607e:	d100      	bne.n	8006082 <prog_param+0x68e>
 8006080:	e123      	b.n	80062ca <prog_param+0x8d6>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 8006082:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8006084:	4b3d      	ldr	r3, [pc, #244]	@ (800617c <prog_param+0x788>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d14a      	bne.n	8006122 <prog_param+0x72e>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 800608c:	4b38      	ldr	r3, [pc, #224]	@ (8006170 <prog_param+0x77c>)
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 8006092:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <prog_param+0x760>)
 8006094:	78db      	ldrb	r3, [r3, #3]
 8006096:	2201      	movs	r2, #1
 8006098:	4053      	eors	r3, r2
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <prog_param+0x6b4>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 80060a0:	4b33      	ldr	r3, [pc, #204]	@ (8006170 <prog_param+0x77c>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e000      	b.n	80060aa <prog_param+0x6b6>
			goto noOnLuz;
 80060a8:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <prog_param+0x760>)
 80060ac:	789b      	ldrb	r3, [r3, #2]
 80060ae:	2201      	movs	r2, #1
 80060b0:	4053      	eors	r3, r2
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <prog_param+0x6cc>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 80060b8:	4b32      	ldr	r3, [pc, #200]	@ (8006184 <prog_param+0x790>)
 80060ba:	2278      	movs	r2, #120	@ 0x78
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e000      	b.n	80060c2 <prog_param+0x6ce>
			goto noOffManto;
 80060c0:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <prog_param+0x794>)
 80060c4:	2252      	movs	r2, #82	@ 0x52
 80060c6:	2100      	movs	r1, #0
 80060c8:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 80060ca:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <prog_param+0x760>)
 80060cc:	791b      	ldrb	r3, [r3, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	4053      	eors	r3, r2
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <prog_param+0x6ee>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 80060d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <prog_param+0x794>)
 80060da:	2252      	movs	r2, #82	@ 0x52
 80060dc:	2120      	movs	r1, #32
 80060de:	5499      	strb	r1, [r3, r2]
 80060e0:	e000      	b.n	80060e4 <prog_param+0x6f0>
			goto noFahrenheitFlagDpy;
 80060e2:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == reePlantilla[eeescala]){
 80060e4:	4b28      	ldr	r3, [pc, #160]	@ (8006188 <prog_param+0x794>)
 80060e6:	2252      	movs	r2, #82	@ 0x52
 80060e8:	5c9a      	ldrb	r2, [r3, r2]
 80060ea:	4b20      	ldr	r3, [pc, #128]	@ (800616c <prog_param+0x778>)
 80060ec:	2152      	movs	r1, #82	@ 0x52
 80060ee:	5c5b      	ldrb	r3, [r3, r1]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d012      	beq.n	800611a <prog_param+0x726>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 80060f4:	4b24      	ldr	r3, [pc, #144]	@ (8006188 <prog_param+0x794>)
 80060f6:	2252      	movs	r2, #82	@ 0x52
 80060f8:	5c9a      	ldrb	r2, [r3, r2]
 80060fa:	4b24      	ldr	r3, [pc, #144]	@ (800618c <prog_param+0x798>)
 80060fc:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 80060fe:	4b23      	ldr	r3, [pc, #140]	@ (800618c <prog_param+0x798>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	001a      	movs	r2, r3
 8006104:	4b22      	ldr	r3, [pc, #136]	@ (8006190 <prog_param+0x79c>)
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f001 f8e9 	bl	80072e0 <wreeprom>
		reePlantilla[eeescala] = waux;
 800610e:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <prog_param+0x798>)
 8006110:	7819      	ldrb	r1, [r3, #0]
 8006112:	4b16      	ldr	r3, [pc, #88]	@ (800616c <prog_param+0x778>)
 8006114:	2252      	movs	r2, #82	@ 0x52
 8006116:	5499      	strb	r1, [r3, r2]
		 goto cancel_prog; //jp cancel_prog
 8006118:	e0d8      	b.n	80062cc <prog_param+0x8d8>
			goto noCambiaEscala;//	jreq noCambiaEscala
 800611a:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 800611c:	e0d6      	b.n	80062cc <prog_param+0x8d8>
			goto fin_menu2;
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	e0e5      	b.n	80062ee <prog_param+0x8fa>
			goto fin_menu2;//	jrne fin_menu2;
 8006122:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8006124:	e0e3      	b.n	80062ee <prog_param+0x8fa>
			switch(STM8_A)
 8006126:	009a      	lsls	r2, r3, #2
 8006128:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <prog_param+0x7a0>)
 800612a:	18d3      	adds	r3, r2, r3
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 8006130:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8006132:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <prog_param+0x75c>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d12e      	bne.n	8006198 <prog_param+0x7a4>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 800613a:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <prog_param+0x75c>)
 800613c:	791b      	ldrb	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d036      	beq.n	80061b0 <prog_param+0x7bc>
				goto toggle_opc00m02nv2;
 8006142:	e02a      	b.n	800619a <prog_param+0x7a6>
 8006144:	20000139 	.word	0x20000139
 8006148:	20000145 	.word	0x20000145
 800614c:	20000167 	.word	0x20000167
 8006150:	20000c50 	.word	0x20000c50
 8006154:	20000ca8 	.word	0x20000ca8
 8006158:	20000c62 	.word	0x20000c62
 800615c:	20000c64 	.word	0x20000c64
 8006160:	20000c60 	.word	0x20000c60
 8006164:	20000934 	.word	0x20000934
 8006168:	20000bb7 	.word	0x20000bb7
 800616c:	20000cec 	.word	0x20000cec
 8006170:	20000c48 	.word	0x20000c48
 8006174:	20000c5f 	.word	0x20000c5f
 8006178:	200000b8 	.word	0x200000b8
 800617c:	20000c5e 	.word	0x20000c5e
 8006180:	0801c46c 	.word	0x0801c46c
 8006184:	20000cb1 	.word	0x20000cb1
 8006188:	20000138 	.word	0x20000138
 800618c:	20000bb6 	.word	0x20000bb6
 8006190:	0803f052 	.word	0x0803f052
 8006194:	0801c480 	.word	0x0801c480
				goto toggle_opc00m02nv2;
 8006198:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 800619a:	4b57      	ldr	r3, [pc, #348]	@ (80062f8 <prog_param+0x904>)
 800619c:	789b      	ldrb	r3, [r3, #2]
 800619e:	001a      	movs	r2, r3
 80061a0:	2302      	movs	r3, #2
 80061a2:	4053      	eors	r3, r2
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	4193      	sbcs	r3, r2
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	4b53      	ldr	r3, [pc, #332]	@ (80062f8 <prog_param+0x904>)
 80061ac:	709a      	strb	r2, [r3, #2]
 80061ae:	e000      	b.n	80061b2 <prog_param+0x7be>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 80061b0:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 80061b2:	2101      	movs	r1, #1
 80061b4:	2028      	movs	r0, #40	@ 0x28
 80061b6:	f001 f8a7 	bl	8007308 <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 80061ba:	4b4f      	ldr	r3, [pc, #316]	@ (80062f8 <prog_param+0x904>)
 80061bc:	789b      	ldrb	r3, [r3, #2]
 80061be:	2201      	movs	r2, #1
 80061c0:	4053      	eors	r3, r2
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <prog_param+0x7de>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 80061c8:	211d      	movs	r1, #29
 80061ca:	2000      	movs	r0, #0
 80061cc:	f001 f89c 	bl	8007308 <op_menu>
 80061d0:	e000      	b.n	80061d4 <prog_param+0x7e0>
				goto dpy2_opc00m02nv2;
 80061d2:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 80061d4:	f001 f8b2 	bl	800733c <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 80061d8:	e066      	b.n	80062a8 <prog_param+0x8b4>
				case 1:  goto opc01m02nv2;
 80061da:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 80061dc:	4b47      	ldr	r3, [pc, #284]	@ (80062fc <prog_param+0x908>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <prog_param+0x7fa>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 80061e4:	4b45      	ldr	r3, [pc, #276]	@ (80062fc <prog_param+0x908>)
 80061e6:	791b      	ldrb	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00c      	beq.n	8006206 <prog_param+0x812>
				goto toggle_opc01m02nv2;
 80061ec:	e000      	b.n	80061f0 <prog_param+0x7fc>
				goto toggle_opc01m02nv2;
 80061ee:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 80061f0:	4b41      	ldr	r3, [pc, #260]	@ (80062f8 <prog_param+0x904>)
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	2201      	movs	r2, #1
 80061f6:	4053      	eors	r3, r2
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	1e5a      	subs	r2, r3, #1
 80061fc:	4193      	sbcs	r3, r2
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	4b3d      	ldr	r3, [pc, #244]	@ (80062f8 <prog_param+0x904>)
 8006202:	70da      	strb	r2, [r3, #3]
 8006204:	e000      	b.n	8006208 <prog_param+0x814>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8006206:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8006208:	210f      	movs	r1, #15
 800620a:	2000      	movs	r0, #0
 800620c:	f001 f87c 	bl	8007308 <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8006210:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <prog_param+0x904>)
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	2201      	movs	r2, #1
 8006216:	4053      	eors	r3, r2
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <prog_param+0x834>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 800621e:	211d      	movs	r1, #29
 8006220:	2000      	movs	r0, #0
 8006222:	f001 f871 	bl	8007308 <op_menu>
 8006226:	e000      	b.n	800622a <prog_param+0x836>
				goto dpy2_opc01m02nv2;
 8006228:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 800622a:	f001 f887 	bl	800733c <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 800622e:	e03b      	b.n	80062a8 <prog_param+0x8b4>
				case 2:  goto opc02m02nv2;
 8006230:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8006232:	4b32      	ldr	r3, [pc, #200]	@ (80062fc <prog_param+0x908>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <prog_param+0x850>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 800623a:	4b30      	ldr	r3, [pc, #192]	@ (80062fc <prog_param+0x908>)
 800623c:	791b      	ldrb	r3, [r3, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <prog_param+0x868>
			   goto toggle_opc02m02nv2;
 8006242:	e000      	b.n	8006246 <prog_param+0x852>
			   goto toggle_opc02m02nv2;
 8006244:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8006246:	4b2c      	ldr	r3, [pc, #176]	@ (80062f8 <prog_param+0x904>)
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	4053      	eors	r3, r2
 800624e:	b2db      	uxtb	r3, r3
 8006250:	1e5a      	subs	r2, r3, #1
 8006252:	4193      	sbcs	r3, r2
 8006254:	b2da      	uxtb	r2, r3
 8006256:	4b28      	ldr	r3, [pc, #160]	@ (80062f8 <prog_param+0x904>)
 8006258:	711a      	strb	r2, [r3, #4]
 800625a:	e000      	b.n	800625e <prog_param+0x86a>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 800625c:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 800625e:	210c      	movs	r1, #12
 8006260:	2029      	movs	r0, #41	@ 0x29
 8006262:	f001 f851 	bl	8007308 <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <prog_param+0x904>)
 8006268:	791b      	ldrb	r3, [r3, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	4053      	eors	r3, r2
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <prog_param+0x88a>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8006274:	210f      	movs	r1, #15
 8006276:	2029      	movs	r0, #41	@ 0x29
 8006278:	f001 f846 	bl	8007308 <op_menu>
 800627c:	e000      	b.n	8006280 <prog_param+0x88c>
				  goto dpy2_opc02m02nv2;
 800627e:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 8006280:	f001 f85c 	bl	800733c <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8006284:	e010      	b.n	80062a8 <prog_param+0x8b4>
				case 3:  goto opc03m02nv2;
 8006286:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8006288:	210e      	movs	r1, #14
 800628a:	2005      	movs	r0, #5
 800628c:	f001 f83c 	bl	8007308 <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8006290:	e00a      	b.n	80062a8 <prog_param+0x8b4>
				case 4:  goto opc04m02nv2;
 8006292:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 8006294:	210e      	movs	r1, #14
 8006296:	201f      	movs	r0, #31
 8006298:	f001 f836 	bl	8007308 <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 800629c:	e004      	b.n	80062a8 <prog_param+0x8b4>
				default: goto opcNAm02nv2;
 800629e:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 80062a0:	2126      	movs	r1, #38	@ 0x26
 80062a2:	2026      	movs	r0, #38	@ 0x26
 80062a4:	f001 f830 	bl	8007308 <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <prog_param+0x908>)
 80062aa:	789b      	ldrb	r3, [r3, #2]
 80062ac:	2201      	movs	r2, #1
 80062ae:	4053      	eors	r3, r2
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <prog_param+0x8ca>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 80062b6:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <prog_param+0x90c>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 80062bc:	e017      	b.n	80062ee <prog_param+0x8fa>
			goto no_enter_m02nv2;
 80062be:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 80062c0:	e015      	b.n	80062ee <prog_param+0x8fa>
		goto cancel_prog;
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	e002      	b.n	80062cc <prog_param+0x8d8>
		goto cancel_prog;//jp cancel_prog;
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	e000      	b.n	80062cc <prog_param+0x8d8>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 80062ca:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 80062cc:	490c      	ldr	r1, [pc, #48]	@ (8006300 <prog_param+0x90c>)
 80062ce:	480c      	ldr	r0, [pc, #48]	@ (8006300 <prog_param+0x90c>)
 80062d0:	2303      	movs	r3, #3
 80062d2:	2201      	movs	r2, #1
 80062d4:	f007 faa5 	bl	800d822 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 80062d8:	4909      	ldr	r1, [pc, #36]	@ (8006300 <prog_param+0x90c>)
 80062da:	4809      	ldr	r0, [pc, #36]	@ (8006300 <prog_param+0x90c>)
 80062dc:	2302      	movs	r3, #2
 80062de:	2205      	movs	r2, #5
 80062e0:	f007 fa9f 	bl	800d822 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <prog_param+0x90c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 80062ea:	e000      	b.n	80062ee <prog_param+0x8fa>
		goto fin_prog_param; //jp fin_prog_param
 80062ec:	46c0      	nop			@ (mov r8, r8)
}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b006      	add	sp, #24
 80062f4:	bdb0      	pop	{r4, r5, r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	20000ca8 	.word	0x20000ca8
 80062fc:	20000c50 	.word	0x20000c50
 8006300:	20000c48 	.word	0x20000c48

08006304 <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8006308:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <md_dif_math+0x20>)
 800630a:	2201      	movs	r2, #1
 800630c:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 800630e:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <md_dif_math+0x24>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	001a      	movs	r2, r3
 8006314:	4b05      	ldr	r3, [pc, #20]	@ (800632c <md_dif_math+0x28>)
 8006316:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8006318:	f000 f80a 	bl	8006330 <md_signfrac_math>
}
 800631c:	46c0      	nop			@ (mov r8, r8)
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	20000c48 	.word	0x20000c48
 8006328:	20000934 	.word	0x20000934
 800632c:	20000936 	.word	0x20000936

08006330 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8006334:	4b4b      	ldr	r3, [pc, #300]	@ (8006464 <md_signfrac_math+0x134>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d121      	bne.n	8006380 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 800633c:	4b49      	ldr	r3, [pc, #292]	@ (8006464 <md_signfrac_math+0x134>)
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d14f      	bne.n	80063e4 <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8006344:	4b48      	ldr	r3, [pc, #288]	@ (8006468 <md_signfrac_math+0x138>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d117      	bne.n	800637c <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 800634c:	4b46      	ldr	r3, [pc, #280]	@ (8006468 <md_signfrac_math+0x138>)
 800634e:	2219      	movs	r2, #25
 8006350:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8006352:	4b46      	ldr	r3, [pc, #280]	@ (800646c <md_signfrac_math+0x13c>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 800635a:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <md_signfrac_math+0x138>)
 800635c:	220a      	movs	r2, #10
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e000      	b.n	8006364 <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8006362:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8006364:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <md_signfrac_math+0x134>)
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 800636c:	4b3d      	ldr	r3, [pc, #244]	@ (8006464 <md_signfrac_math+0x134>)
 800636e:	795b      	ldrb	r3, [r3, #5]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d139      	bne.n	80063e8 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8006374:	4b3d      	ldr	r3, [pc, #244]	@ (800646c <md_signfrac_math+0x13c>)
 8006376:	2205      	movs	r2, #5
 8006378:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 800637a:	e067      	b.n	800644c <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 800637c:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 800637e:	e065      	b.n	800644c <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 8006380:	46c0      	nop			@ (mov r8, r8)
 8006382:	e000      	b.n	8006386 <md_signfrac_math+0x56>
				goto inc_sf;
 8006384:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8006386:	4b3a      	ldr	r3, [pc, #232]	@ (8006470 <md_signfrac_math+0x140>)
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b21a      	sxth	r2, r3
 800638c:	4b39      	ldr	r3, [pc, #228]	@ (8006474 <md_signfrac_math+0x144>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b21b      	sxth	r3, r3
 8006392:	429a      	cmp	r2, r3
 8006394:	db04      	blt.n	80063a0 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 8006396:	4b38      	ldr	r3, [pc, #224]	@ (8006478 <md_signfrac_math+0x148>)
 8006398:	881a      	ldrh	r2, [r3, #0]
 800639a:	4b35      	ldr	r3, [pc, #212]	@ (8006470 <md_signfrac_math+0x140>)
 800639c:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 800639e:	e052      	b.n	8006446 <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 80063a0:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 80063a2:	4b36      	ldr	r3, [pc, #216]	@ (800647c <md_signfrac_math+0x14c>)
 80063a4:	799b      	ldrb	r3, [r3, #6]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 80063aa:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <md_signfrac_math+0x140>)
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	2b63      	cmp	r3, #99	@ 0x63
 80063b2:	dc0d      	bgt.n	80063d0 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 80063b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006470 <md_signfrac_math+0x140>)
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	3364      	adds	r3, #100	@ 0x64
 80063bc:	db0a      	blt.n	80063d4 <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 80063be:	e000      	b.n	80063c2 <md_signfrac_math+0x92>
				goto inc_simple_ent;
 80063c0:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 80063c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006470 <md_signfrac_math+0x140>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	4b29      	ldr	r3, [pc, #164]	@ (8006470 <md_signfrac_math+0x140>)
 80063cc:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063ce:	e03a      	b.n	8006446 <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 80063d0:	46c0      	nop			@ (mov r8, r8)
 80063d2:	e000      	b.n	80063d6 <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 80063d4:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 80063d6:	4b26      	ldr	r3, [pc, #152]	@ (8006470 <md_signfrac_math+0x140>)
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	330a      	adds	r3, #10
 80063dc:	b29a      	uxth	r2, r3
 80063de:	4b24      	ldr	r3, [pc, #144]	@ (8006470 <md_signfrac_math+0x140>)
 80063e0:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063e2:	e030      	b.n	8006446 <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 80063e4:	46c0      	nop			@ (mov r8, r8)
 80063e6:	e000      	b.n	80063ea <md_signfrac_math+0xba>
				goto dec_sf;
 80063e8:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 80063ea:	4b21      	ldr	r3, [pc, #132]	@ (8006470 <md_signfrac_math+0x140>)
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b21a      	sxth	r2, r3
 80063f0:	4b21      	ldr	r3, [pc, #132]	@ (8006478 <md_signfrac_math+0x148>)
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b21b      	sxth	r3, r3
 80063f6:	429a      	cmp	r2, r3
 80063f8:	dc04      	bgt.n	8006404 <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 80063fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006474 <md_signfrac_math+0x144>)
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006470 <md_signfrac_math+0x140>)
 8006400:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8006402:	e020      	b.n	8006446 <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8006404:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8006406:	4b1d      	ldr	r3, [pc, #116]	@ (800647c <md_signfrac_math+0x14c>)
 8006408:	799b      	ldrb	r3, [r3, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 800640e:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <md_signfrac_math+0x140>)
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b21b      	sxth	r3, r3
 8006414:	2b64      	cmp	r3, #100	@ 0x64
 8006416:	dc0d      	bgt.n	8006434 <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8006418:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <md_signfrac_math+0x140>)
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b21b      	sxth	r3, r3
 800641e:	3363      	adds	r3, #99	@ 0x63
 8006420:	db0a      	blt.n	8006438 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8006422:	e000      	b.n	8006426 <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8006424:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8006426:	4b12      	ldr	r3, [pc, #72]	@ (8006470 <md_signfrac_math+0x140>)
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <md_signfrac_math+0x140>)
 8006430:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8006432:	e008      	b.n	8006446 <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8006434:	46c0      	nop			@ (mov r8, r8)
 8006436:	e000      	b.n	800643a <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8006438:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <md_signfrac_math+0x140>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	3b0a      	subs	r3, #10
 8006440:	b29a      	uxth	r2, r3
 8006442:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <md_signfrac_math+0x140>)
 8006444:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8006446:	4b0e      	ldr	r3, [pc, #56]	@ (8006480 <md_signfrac_math+0x150>)
 8006448:	221e      	movs	r2, #30
 800644a:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 800644c:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <md_signfrac_math+0x14c>)
 800644e:	2200      	movs	r2, #0
 8006450:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8006452:	4b07      	ldr	r3, [pc, #28]	@ (8006470 <md_signfrac_math+0x140>)
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <md_signfrac_math+0x154>)
 800645a:	701a      	strb	r2, [r3, #0]
			//ret
}
 800645c:	46c0      	nop			@ (mov r8, r8)
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	20000c50 	.word	0x20000c50
 8006468:	20000c82 	.word	0x20000c82
 800646c:	20000bd3 	.word	0x20000bd3
 8006470:	20000936 	.word	0x20000936
 8006474:	20000c62 	.word	0x20000c62
 8006478:	20000c64 	.word	0x20000c64
 800647c:	20000c48 	.word	0x20000c48
 8006480:	20000bd2 	.word	0x20000bd2
 8006484:	20000bb7 	.word	0x20000bb7

08006488 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800648e:	4b08      	ldr	r3, [pc, #32]	@ (80064b0 <tdev_to_Word+0x28>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	b29a      	uxth	r2, r3
 8006496:	4b07      	ldr	r3, [pc, #28]	@ (80064b4 <tdev_to_Word+0x2c>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	0019      	movs	r1, r3
 800649c:	1dbb      	adds	r3, r7, #6
 800649e:	1852      	adds	r2, r2, r1
 80064a0:	801a      	strh	r2, [r3, #0]
	return	foo;
 80064a2:	1dbb      	adds	r3, r7, #6
 80064a4:	881b      	ldrh	r3, [r3, #0]
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b002      	add	sp, #8
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	20000c10 	.word	0x20000c10
 80064b4:	20000c11 	.word	0x20000c11

080064b8 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3301      	adds	r3, #1
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	0019      	movs	r1, r3
 80064d0:	200e      	movs	r0, #14
 80064d2:	183b      	adds	r3, r7, r0
 80064d4:	1852      	adds	r2, r2, r1
 80064d6:	801a      	strh	r2, [r3, #0]
	return	 foo;
 80064d8:	183b      	adds	r3, r7, r0
 80064da:	881b      	ldrh	r3, [r3, #0]
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b004      	add	sp, #16
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
    asm ("nop");
 80064e8:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 80064ea:	46c0      	nop			@ (mov r8, r8)

}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <Load_ret2+0x1c>)
 80064fa:	2249      	movs	r2, #73	@ 0x49
 80064fc:	5c9b      	ldrb	r3, [r3, r2]
 80064fe:	001a      	movs	r2, r3
 8006500:	233c      	movs	r3, #60	@ 0x3c
 8006502:	4353      	muls	r3, r2
 8006504:	b29a      	uxth	r2, r3
 8006506:	4b03      	ldr	r3, [pc, #12]	@ (8006514 <Load_ret2+0x20>)
 8006508:	801a      	strh	r2, [r3, #0]
}
 800650a:	46c0      	nop			@ (mov r8, r8)
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200000b8 	.word	0x200000b8
 8006514:	20000bc6 	.word	0x20000bc6

08006518 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 800651c:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <ldadaptivo+0x38>)
 800651e:	2246      	movs	r2, #70	@ 0x46
 8006520:	5c9b      	ldrb	r3, [r3, r2]
 8006522:	001a      	movs	r2, r3
 8006524:	23e1      	movs	r3, #225	@ 0xe1
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4353      	muls	r3, r2
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <ldadaptivo+0x3c>)
 800652e:	801a      	strh	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <ldadaptivo+0x38>)
 8006532:	2256      	movs	r2, #86	@ 0x56
 8006534:	5c9b      	ldrb	r3, [r3, r2]
 8006536:	001a      	movs	r2, r3
 8006538:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <ldadaptivo+0x3c>)
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	b29b      	uxth	r3, r3
 8006540:	4353      	muls	r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <ldadaptivo+0x40>)
 8006546:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 8006548:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200000b8 	.word	0x200000b8
 8006554:	20000c16 	.word	0x20000c16
 8006558:	20000c1c 	.word	0x20000c1c

0800655c <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8006562:	1dbb      	adds	r3, r7, #6
 8006564:	2200      	movs	r2, #0
 8006566:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 8006568:	1dbb      	adds	r3, r7, #6
 800656a:	4a0e      	ldr	r2, [pc, #56]	@ (80065a4 <blink_640+0x48>)
 800656c:	8812      	ldrh	r2, [r2, #0]
 800656e:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 8006570:	1dba      	adds	r2, r7, #6
 8006572:	1dbb      	adds	r3, r7, #6
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	18db      	adds	r3, r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 800657a:	1dba      	adds	r2, r7, #6
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	18db      	adds	r3, r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 8006584:	1dbb      	adds	r3, r7, #6
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b07      	ldr	r3, [pc, #28]	@ (80065a8 <blink_640+0x4c>)
 800658c:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 800658e:	1dbb      	adds	r3, r7, #6
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	b29b      	uxth	r3, r3
 8006596:	b2da      	uxtb	r2, r3
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <blink_640+0x50>)
 800659a:	701a      	strb	r2, [r3, #0]
}
 800659c:	46c0      	nop			@ (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000bb0 	.word	0x20000bb0
 80065a8:	20000bb6 	.word	0x20000bb6
 80065ac:	20000bb7 	.word	0x20000bb7

080065b0 <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 80065b4:	4b03      	ldr	r3, [pc, #12]	@ (80065c4 <sp_dpy+0x14>)
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 f8af 	bl	800671c <convadec_math>
								//			//ret	;
}
 80065be:	46c0      	nop			@ (mov r8, r8)
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000c0c 	.word	0x20000c0c

080065c8 <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 80065ce:	1dbb      	adds	r3, r7, #6
 80065d0:	2200      	movs	r2, #0
 80065d2:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 80065d4:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <dif_dpy+0x2c>)
 80065d6:	8819      	ldrh	r1, [r3, #0]
 80065d8:	4b07      	ldr	r3, [pc, #28]	@ (80065f8 <dif_dpy+0x30>)
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	1dbb      	adds	r3, r7, #6
 80065de:	1a8a      	subs	r2, r1, r2
 80065e0:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 80065e2:	1dbb      	adds	r3, r7, #6
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 f898 	bl	800671c <convadec_math>
									// ret ;
}
 80065ec:	46c0      	nop			@ (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b002      	add	sp, #8
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000c0e 	.word	0x20000c0e
 80065f8:	20000c0c 	.word	0x20000c0c

080065fc <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 8006600:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <minbrake_load+0x2c>)
 8006602:	2265      	movs	r2, #101	@ 0x65
 8006604:	5c9a      	ldrb	r2, [r3, r2]
 8006606:	4b09      	ldr	r3, [pc, #36]	@ (800662c <minbrake_load+0x30>)
 8006608:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 800660a:	f000 f99f 	bl	800694c <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 800660e:	4b08      	ldr	r3, [pc, #32]	@ (8006630 <minbrake_load+0x34>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	b29b      	uxth	r3, r3
 8006616:	4a07      	ldr	r2, [pc, #28]	@ (8006634 <minbrake_load+0x38>)
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	189b      	adds	r3, r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <minbrake_load+0x3c>)
 8006620:	801a      	strh	r2, [r3, #0]
}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200000b8 	.word	0x200000b8
 800662c:	20000bb7 	.word	0x20000bb7
 8006630:	20000bab 	.word	0x20000bab
 8006634:	20000bac 	.word	0x20000bac
 8006638:	20000bc2 	.word	0x20000bc2

0800663c <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 8006642:	1dbb      	adds	r3, r7, #6
 8006644:	2200      	movs	r2, #0
 8006646:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 8006648:	1dbb      	adds	r3, r7, #6
 800664a:	4a31      	ldr	r2, [pc, #196]	@ (8006710 <desptdv_math+0xd4>)
 800664c:	8812      	ldrh	r2, [r2, #0]
 800664e:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 8006650:	4b30      	ldr	r3, [pc, #192]	@ (8006714 <desptdv_math+0xd8>)
 8006652:	0018      	movs	r0, r3
 8006654:	f7ff ff30 	bl	80064b8 <TwoByteInArrayToWord>
 8006658:	0003      	movs	r3, r0
 800665a:	0019      	movs	r1, r3
 800665c:	1dbb      	adds	r3, r7, #6
 800665e:	1dba      	adds	r2, r7, #6
 8006660:	8812      	ldrh	r2, [r2, #0]
 8006662:	188a      	adds	r2, r1, r2
 8006664:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 8006666:	4b2c      	ldr	r3, [pc, #176]	@ (8006718 <desptdv_math+0xdc>)
 8006668:	2252      	movs	r2, #82	@ 0x52
 800666a:	5c9b      	ldrb	r3, [r3, r2]
 800666c:	2b20      	cmp	r3, #32
 800666e:	d145      	bne.n	80066fc <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 8006670:	1dbb      	adds	r3, r7, #6
 8006672:	2200      	movs	r2, #0
 8006674:	5e9b      	ldrsh	r3, [r3, r2]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da22      	bge.n	80066c0 <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 800667a:	1dbb      	adds	r3, r7, #6
 800667c:	1dba      	adds	r2, r7, #6
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	4252      	negs	r2, r2
 8006682:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 8006684:	1dbb      	adds	r3, r7, #6
 8006686:	1dba      	adds	r2, r7, #6
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	0852      	lsrs	r2, r2, #1
 800668c:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 800668e:	1dba      	adds	r2, r7, #6
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	1c19      	adds	r1, r3, #0
 8006696:	00c9      	lsls	r1, r1, #3
 8006698:	18cb      	adds	r3, r1, r3
 800669a:	18db      	adds	r3, r3, r3
 800669c:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 800669e:	1dbc      	adds	r4, r7, #6
 80066a0:	1dbb      	adds	r3, r7, #6
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	2105      	movs	r1, #5
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7f9 fd36 	bl	8000118 <__udivsi3>
 80066ac:	0003      	movs	r3, r0
 80066ae:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 80066b0:	1dbb      	adds	r3, r7, #6
 80066b2:	1dba      	adds	r2, r7, #6
 80066b4:	8812      	ldrh	r2, [r2, #0]
 80066b6:	21a0      	movs	r1, #160	@ 0xa0
 80066b8:	0049      	lsls	r1, r1, #1
 80066ba:	1a8a      	subs	r2, r1, r2
 80066bc:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 80066be:	e01e      	b.n	80066fe <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 80066c0:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 80066c2:	1dbb      	adds	r3, r7, #6
 80066c4:	1dba      	adds	r2, r7, #6
 80066c6:	8812      	ldrh	r2, [r2, #0]
 80066c8:	0852      	lsrs	r2, r2, #1
 80066ca:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80066cc:	1dba      	adds	r2, r7, #6
 80066ce:	1dbb      	adds	r3, r7, #6
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	1c19      	adds	r1, r3, #0
 80066d4:	00c9      	lsls	r1, r1, #3
 80066d6:	18cb      	adds	r3, r1, r3
 80066d8:	18db      	adds	r3, r3, r3
 80066da:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80066dc:	1dbc      	adds	r4, r7, #6
 80066de:	1dbb      	adds	r3, r7, #6
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	2105      	movs	r1, #5
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7f9 fd17 	bl	8000118 <__udivsi3>
 80066ea:	0003      	movs	r3, r0
 80066ec:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 80066ee:	1dbb      	adds	r3, r7, #6
 80066f0:	1dba      	adds	r2, r7, #6
 80066f2:	8812      	ldrh	r2, [r2, #0]
 80066f4:	3241      	adds	r2, #65	@ 0x41
 80066f6:	32ff      	adds	r2, #255	@ 0xff
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e000      	b.n	80066fe <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 80066fc:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 80066fe:	1dbb      	adds	r3, r7, #6
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	0018      	movs	r0, r3
 8006704:	f000 f80a 	bl	800671c <convadec_math>

}
 8006708:	46c0      	nop			@ (mov r8, r8)
 800670a:	46bd      	mov	sp, r7
 800670c:	b003      	add	sp, #12
 800670e:	bd90      	pop	{r4, r7, pc}
 8006710:	20000c14 	.word	0x20000c14
 8006714:	200000bd 	.word	0x200000bd
 8006718:	200000b8 	.word	0x200000b8

0800671c <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	0002      	movs	r2, r0
 8006724:	1dbb      	adds	r3, r7, #6
 8006726:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 8006728:	f000 face 	bl	8006cc8 <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 800672c:	230f      	movs	r3, #15
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 8006734:	230e      	movs	r3, #14
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 800673c:	1dbb      	adds	r3, r7, #6
 800673e:	2200      	movs	r2, #0
 8006740:	5e9b      	ldrsh	r3, [r3, r2]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da08      	bge.n	8006758 <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 8006746:	1dbb      	adds	r3, r7, #6
 8006748:	1dba      	adds	r2, r7, #6
 800674a:	8812      	ldrh	r2, [r2, #0]
 800674c:	4252      	negs	r2, r2
 800674e:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 8006750:	4b45      	ldr	r3, [pc, #276]	@ (8006868 <convadec_math+0x14c>)
 8006752:	2201      	movs	r2, #1
 8006754:	705a      	strb	r2, [r3, #1]
 8006756:	e000      	b.n	800675a <convadec_math+0x3e>
			goto conv_temper_positiva;
 8006758:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 800675a:	1dbb      	adds	r3, r7, #6
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	210a      	movs	r1, #10
 8006760:	0018      	movs	r0, r3
 8006762:	f7f9 fd5f 	bl	8000224 <__aeabi_uidivmod>
 8006766:	000b      	movs	r3, r1
 8006768:	b29a      	uxth	r2, r3
 800676a:	230e      	movs	r3, #14
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8006770:	1dbb      	adds	r3, r7, #6
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	210a      	movs	r1, #10
 8006776:	0018      	movs	r0, r3
 8006778:	f7f9 fcce 	bl	8000118 <__udivsi3>
 800677c:	0003      	movs	r3, r0
 800677e:	b29a      	uxth	r2, r3
 8006780:	230f      	movs	r3, #15
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 8006786:	4b38      	ldr	r3, [pc, #224]	@ (8006868 <convadec_math+0x14c>)
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2201      	movs	r2, #1
 800678c:	4053      	eors	r3, r2
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d116      	bne.n	80067c2 <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 8006794:	4b35      	ldr	r3, [pc, #212]	@ (800686c <convadec_math+0x150>)
 8006796:	2223      	movs	r2, #35	@ 0x23
 8006798:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 800679a:	4b35      	ldr	r3, [pc, #212]	@ (8006870 <convadec_math+0x154>)
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2201      	movs	r2, #1
 80067a0:	4053      	eors	r3, r2
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 80067a8:	4b30      	ldr	r3, [pc, #192]	@ (800686c <convadec_math+0x150>)
 80067aa:	2264      	movs	r2, #100	@ 0x64
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e000      	b.n	80067b2 <convadec_math+0x96>
			goto cp_25;
 80067b0:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067b2:	4b2e      	ldr	r3, [pc, #184]	@ (800686c <convadec_math+0x150>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	220f      	movs	r2, #15
 80067b8:	18ba      	adds	r2, r7, r2
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d318      	bcc.n	80067f2 <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 80067c0:	e03d      	b.n	800683e <convadec_math+0x122>
			goto conv_signo_positivo;
 80067c2:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 80067c4:	4b29      	ldr	r3, [pc, #164]	@ (800686c <convadec_math+0x150>)
 80067c6:	2263      	movs	r2, #99	@ 0x63
 80067c8:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80067ca:	4b29      	ldr	r3, [pc, #164]	@ (8006870 <convadec_math+0x154>)
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4053      	eors	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 80067d8:	4b24      	ldr	r3, [pc, #144]	@ (800686c <convadec_math+0x150>)
 80067da:	2264      	movs	r2, #100	@ 0x64
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e000      	b.n	80067e2 <convadec_math+0xc6>
			goto cp_99;
 80067e0:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067e2:	4b22      	ldr	r3, [pc, #136]	@ (800686c <convadec_math+0x150>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	220f      	movs	r2, #15
 80067e8:	18ba      	adds	r2, r7, r2
 80067ea:	7812      	ldrb	r2, [r2, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d225      	bcs.n	800683c <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 80067f0:	e000      	b.n	80067f4 <convadec_math+0xd8>
		goto     convad10;
 80067f2:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 80067f4:	210f      	movs	r1, #15
 80067f6:	187b      	adds	r3, r7, r1
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b09      	cmp	r3, #9
 80067fc:	d80d      	bhi.n	800681a <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 80067fe:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 8006800:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <convadec_math+0x14c>)
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 8006806:	230e      	movs	r3, #14
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	187b      	adds	r3, r7, r1
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f000 fd78 	bl	8007308 <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 8006818:	e021      	b.n	800685e <convadec_math+0x142>
			goto soloent;
 800681a:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 800681c:	4b13      	ldr	r3, [pc, #76]	@ (800686c <convadec_math+0x150>)
 800681e:	220f      	movs	r2, #15
 8006820:	18ba      	adds	r2, r7, r2
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8006826:	f000 f891 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 800682a:	4b12      	ldr	r3, [pc, #72]	@ (8006874 <convadec_math+0x158>)
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	4b0f      	ldr	r3, [pc, #60]	@ (800686c <convadec_math+0x150>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	0019      	movs	r1, r3
 8006834:	0010      	movs	r0, r2
 8006836:	f000 fd67 	bl	8007308 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800683a:	e010      	b.n	800685e <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 800683c:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 800683e:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <convadec_math+0x15c>)
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	001a      	movs	r2, r3
 8006846:	2320      	movs	r3, #32
 8006848:	4013      	ands	r3, r2
 800684a:	d102      	bne.n	8006852 <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 800684c:	f000 fa3c 	bl	8006cc8 <offdpy>
		goto	finconvad;
 8006850:	e005      	b.n	800685e <convadec_math+0x142>
			goto convadec_j02;
 8006852:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 8006854:	2111      	movs	r1, #17
 8006856:	2010      	movs	r0, #16
 8006858:	f000 fd56 	bl	8007308 <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800685c:	46c0      	nop			@ (mov r8, r8)
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	b004      	add	sp, #16
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	20000bf0 	.word	0x20000bf0
 800686c:	20000bb7 	.word	0x20000bb7
 8006870:	20000c48 	.word	0x20000c48
 8006874:	20000bb6 	.word	0x20000bb6
 8006878:	20000bb0 	.word	0x20000bb0

0800687c <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	0002      	movs	r2, r0
 8006884:	1dfb      	adds	r3, r7, #7
 8006886:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 8006888:	210f      	movs	r1, #15
 800688a:	187b      	adds	r3, r7, r1
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8006890:	1dfb      	adds	r3, r7, #7
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b09      	cmp	r3, #9
 8006896:	d80c      	bhi.n	80068b2 <convad10+0x36>
			goto soloent;
		}
fraccion:
 8006898:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 800689a:	4b10      	ldr	r3, [pc, #64]	@ (80068dc <convad10+0x60>)
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	1dfb      	adds	r3, r7, #7
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fd2c 	bl	8007308 <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 80068b0:	e00f      	b.n	80068d2 <convad10+0x56>
			goto soloent;
 80068b2:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80068b4:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <convad10+0x64>)
 80068b6:	1dfa      	adds	r2, r7, #7
 80068b8:	7812      	ldrb	r2, [r2, #0]
 80068ba:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068bc:	f000 f846 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 80068c0:	4b08      	ldr	r3, [pc, #32]	@ (80068e4 <convad10+0x68>)
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <convad10+0x64>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	0019      	movs	r1, r3
 80068ca:	0010      	movs	r0, r2
 80068cc:	f000 fd1c 	bl	8007308 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80068d0:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	46bd      	mov	sp, r7
 80068d6:	b004      	add	sp, #16
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	20000bf0 	.word	0x20000bf0
 80068e0:	20000bb7 	.word	0x20000bb7
 80068e4:	20000bb6 	.word	0x20000bb6

080068e8 <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	0002      	movs	r2, r0
 80068f0:	1dfb      	adds	r3, r7, #7
 80068f2:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 80068f4:	4b09      	ldr	r3, [pc, #36]	@ (800691c <soloent+0x34>)
 80068f6:	1dfa      	adds	r2, r7, #7
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068fc:	f000 f826 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <soloent+0x38>)
 8006902:	781a      	ldrb	r2, [r3, #0]
 8006904:	4b05      	ldr	r3, [pc, #20]	@ (800691c <soloent+0x34>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	0019      	movs	r1, r3
 800690a:	0010      	movs	r0, r2
 800690c:	f000 fcfc 	bl	8007308 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006910:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	20000bb7 	.word	0x20000bb7
 8006920:	20000bb6 	.word	0x20000bb6

08006924 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 8006928:	f000 f810 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <soloent1+0x20>)
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <soloent1+0x24>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	0019      	movs	r1, r3
 8006936:	0010      	movs	r0, r2
 8006938:	f000 fce6 	bl	8007308 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800693c:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000bb6 	.word	0x20000bb6
 8006948:	20000bb7 	.word	0x20000bb7

0800694c <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(void){
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 8006950:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <BaBentre10_math+0x4c>)
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 8006956:	4b11      	ldr	r3, [pc, #68]	@ (800699c <BaBentre10_math+0x50>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	001a      	movs	r2, r3
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <BaBentre10_math+0x54>)
 800695e:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8006960:	4b0f      	ldr	r3, [pc, #60]	@ (80069a0 <BaBentre10_math+0x54>)
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	210a      	movs	r1, #10
 8006968:	0018      	movs	r0, r3
 800696a:	f7f9 fc5b 	bl	8000224 <__aeabi_uidivmod>
 800696e:	000b      	movs	r3, r1
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <BaBentre10_math+0x50>)
 8006974:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 8006976:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <BaBentre10_math+0x54>)
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	210a      	movs	r1, #10
 800697e:	0018      	movs	r0, r3
 8006980:	f7f9 fbca 	bl	8000118 <__udivsi3>
 8006984:	0003      	movs	r3, r0
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b03      	ldr	r3, [pc, #12]	@ (8006998 <BaBentre10_math+0x4c>)
 800698a:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 800698c:	f000 f80a 	bl	80069a4 <conv60_6_math>
}
 8006990:	46c0      	nop			@ (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	20000bb6 	.word	0x20000bb6
 800699c:	20000bb7 	.word	0x20000bb7
 80069a0:	20000936 	.word	0x20000936

080069a4 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math (void) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 80069aa:	1dbb      	adds	r3, r7, #6
 80069ac:	2200      	movs	r2, #0
 80069ae:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 80069b0:	4b11      	ldr	r3, [pc, #68]	@ (80069f8 <conv60_6_math+0x54>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	1dba      	adds	r2, r7, #6
 80069b6:	1c19      	adds	r1, r3, #0
 80069b8:	1c0b      	adds	r3, r1, #0
 80069ba:	18db      	adds	r3, r3, r3
 80069bc:	185b      	adds	r3, r3, r1
 80069be:	18db      	adds	r3, r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 80069c2:	4b0e      	ldr	r3, [pc, #56]	@ (80069fc <conv60_6_math+0x58>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	001a      	movs	r2, r3
 80069c8:	233c      	movs	r3, #60	@ 0x3c
 80069ca:	4353      	muls	r3, r2
 80069cc:	b299      	uxth	r1, r3
 80069ce:	1dbb      	adds	r3, r7, #6
 80069d0:	1dba      	adds	r2, r7, #6
 80069d2:	8812      	ldrh	r2, [r2, #0]
 80069d4:	188a      	adds	r2, r1, r2
 80069d6:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 80069d8:	1dbb      	adds	r3, r7, #6
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	b29b      	uxth	r3, r3
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <conv60_6_math+0x5c>)
 80069e4:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 80069e6:	1dbb      	adds	r3, r7, #6
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <conv60_6_math+0x60>)
 80069ee:	701a      	strb	r2, [r3, #0]
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b002      	add	sp, #8
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000bb7 	.word	0x20000bb7
 80069fc:	20000bb6 	.word	0x20000bb6
 8006a00:	20000bab 	.word	0x20000bab
 8006a04:	20000bac 	.word	0x20000bac

08006a08 <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 8006a0e:	4ba3      	ldr	r3, [pc, #652]	@ (8006c9c <fallas+0x294>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 8006a14:	4ba2      	ldr	r3, [pc, #648]	@ (8006ca0 <fallas+0x298>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 8006a1c:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 8006a1e:	e138      	b.n	8006c92 <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 8006a20:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 8006a22:	4b9f      	ldr	r3, [pc, #636]	@ (8006ca0 <fallas+0x298>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d003      	beq.n	8006a32 <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 8006a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ca4 <fallas+0x29c>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	715a      	strb	r2, [r3, #5]
 8006a30:	e000      	b.n	8006a34 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 8006a32:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 8006a34:	2300      	movs	r3, #0
 8006a36:	607b      	str	r3, [r7, #4]
 8006a38:	e014      	b.n	8006a64 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 8006a3a:	4a9b      	ldr	r2, [pc, #620]	@ (8006ca8 <fallas+0x2a0>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	18d3      	adds	r3, r2, r3
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	499a      	ldr	r1, [pc, #616]	@ (8006cac <fallas+0x2a4>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	18cb      	adds	r3, r1, r3
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	4998      	ldr	r1, [pc, #608]	@ (8006cb0 <fallas+0x2a8>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	18cb      	adds	r3, r1, r3
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <fallas+0x66>
		for(int k=0; k<8;k++){
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3301      	adds	r3, #1
 8006a62:	607b      	str	r3, [r7, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b07      	cmp	r3, #7
 8006a68:	dde7      	ble.n	8006a3a <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 8006a6a:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8006a6c:	e7d7      	b.n	8006a1e <fallas+0x16>
				goto fallas12;//jrne fallas12
 8006a6e:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8006a70:	4b90      	ldr	r3, [pc, #576]	@ (8006cb4 <fallas+0x2ac>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d12c      	bne.n	8006ad2 <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 8006a78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ca4 <fallas+0x29c>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;		//bset flagsBuzzer,#0
 8006a7e:	4b87      	ldr	r3, [pc, #540]	@ (8006c9c <fallas+0x294>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
	    //waux = 0x1F;			//mov waux,#$1F;
	    waux = 0x13;			//mov waux,#$13;
 8006a84:	4b8c      	ldr	r3, [pc, #560]	@ (8006cb8 <fallas+0x2b0>)
 8006a86:	2213      	movs	r2, #19
 8006a88:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 8006a8a:	4b87      	ldr	r3, [pc, #540]	@ (8006ca8 <fallas+0x2a0>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4053      	eors	r3, r2
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <fallas+0xa4>
	       	goto fallas_j00;
 8006a98:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 8006a9a:	4b83      	ldr	r3, [pc, #524]	@ (8006ca8 <fallas+0x2a0>)
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d019      	beq.n	8006ad6 <fallas+0xce>
	       	goto fallas_j01;
 8006aa2:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    //waux = 0x1F;//mov waux,#$1F
		waux = 0x13;			//mov waux,#$13;
 8006aa4:	4b84      	ldr	r3, [pc, #528]	@ (8006cb8 <fallas+0x2b0>)
 8006aa6:	2213      	movs	r2, #19
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e000      	b.n	8006aae <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8006aac:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8006aae:	f000 f977 	bl	8006da0 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 8006ab2:	f000 f991 	bl	8006dd8 <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 8006ab6:	f000 fc41 	bl	800733c <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		//wreg = 0x13;//mov wreg,#$13;
		wreg = 0x01;//mov wreg,#$01;
 8006aba:	4b80      	ldr	r3, [pc, #512]	@ (8006cbc <fallas+0x2b4>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8006ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb8 <fallas+0x2b0>)
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	4b7d      	ldr	r3, [pc, #500]	@ (8006cbc <fallas+0x2b4>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	0019      	movs	r1, r3
 8006aca:	0010      	movs	r0, r2
 8006acc:	f000 fc1c 	bl	8007308 <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8006ad0:	e0df      	b.n	8006c92 <fallas+0x28a>
	       	goto fallas16;//
 8006ad2:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 8006ad4:	e0dd      	b.n	8006c92 <fallas+0x28a>
	    goto fallas20;//jra fallas20
 8006ad6:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 8006ad8:	4b73      	ldr	r3, [pc, #460]	@ (8006ca8 <fallas+0x2a0>)
 8006ada:	79db      	ldrb	r3, [r3, #7]
 8006adc:	2201      	movs	r2, #1
 8006ade:	4053      	eors	r3, r2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	2127      	movs	r1, #39	@ 0x27
 8006aea:	201f      	movs	r0, #31
 8006aec:	f000 fc34 	bl	8007358 <wreg_waux_conf>
 8006af0:	e000      	b.n	8006af4 <fallas+0xec>
			goto fallas_j07;
 8006af2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8006af4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca8 <fallas+0x2a0>)
 8006af6:	799b      	ldrb	r3, [r3, #6]
 8006af8:	2201      	movs	r2, #1
 8006afa:	4053      	eors	r3, r2
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 8006b02:	2201      	movs	r2, #1
 8006b04:	2127      	movs	r1, #39	@ 0x27
 8006b06:	2026      	movs	r0, #38	@ 0x26
 8006b08:	f000 fc26 	bl	8007358 <wreg_waux_conf>
 8006b0c:	e000      	b.n	8006b10 <fallas+0x108>
			goto fallas_j08;
 8006b0e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 8006b10:	4b66      	ldr	r3, [pc, #408]	@ (8006cac <fallas+0x2a4>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	4053      	eors	r3, r2
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d105      	bne.n	8006b2a <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 8006b1e:	2200      	movs	r2, #0
 8006b20:	212f      	movs	r1, #47	@ 0x2f
 8006b22:	200e      	movs	r0, #14
 8006b24:	f000 fc18 	bl	8007358 <wreg_waux_conf>
 8006b28:	e000      	b.n	8006b2c <fallas+0x124>
			goto fallas_j08b;
 8006b2a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 8006b2c:	4b60      	ldr	r3, [pc, #384]	@ (8006cb0 <fallas+0x2a8>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2201      	movs	r2, #1
 8006b32:	4053      	eors	r3, r2
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	210a      	movs	r1, #10
 8006b3e:	200b      	movs	r0, #11
 8006b40:	f000 fc0a 	bl	8007358 <wreg_waux_conf>
 8006b44:	e000      	b.n	8006b48 <fallas+0x140>
			goto fallas_j08c;
 8006b46:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 8006b48:	4b57      	ldr	r3, [pc, #348]	@ (8006ca8 <fallas+0x2a0>)
 8006b4a:	795b      	ldrb	r3, [r3, #5]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d107      	bne.n	8006b60 <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 8006b50:	4b56      	ldr	r3, [pc, #344]	@ (8006cac <fallas+0x2a4>)
 8006b52:	79db      	ldrb	r3, [r3, #7]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4053      	eors	r3, r2
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8006b5e:	e000      	b.n	8006b62 <fallas+0x15a>
			goto fallas_j01c;
 8006b60:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x04, 1);
 8006b62:	2201      	movs	r2, #1
 8006b64:	2104      	movs	r1, #4
 8006b66:	2013      	movs	r0, #19
 8006b68:	f000 fbf6 	bl	8007358 <wreg_waux_conf>
 8006b6c:	e000      	b.n	8006b70 <fallas+0x168>
			goto fallas_j02c;
 8006b6e:	46c0      	nop			@ (mov r8, r8)
//		mov			wreg,#$13;					"H"
//		mov			waux,#$04;
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8006b70:	4b4e      	ldr	r3, [pc, #312]	@ (8006cac <fallas+0x2a4>)
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 8006b78:	4b4c      	ldr	r3, [pc, #304]	@ (8006cac <fallas+0x2a4>)
 8006b7a:	795b      	ldrb	r3, [r3, #5]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	4053      	eors	r3, r2
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 8006b86:	e000      	b.n	8006b8a <fallas+0x182>
	       	  goto fallas_j01b;
 8006b88:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x2, 1);
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	2013      	movs	r0, #19
 8006b90:	f000 fbe2 	bl	8007358 <wreg_waux_conf>
 8006b94:	e000      	b.n	8006b98 <fallas+0x190>
	       	  goto fallas_j02b;
 8006b96:	46c0      	nop			@ (mov r8, r8)
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 8006b98:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <fallas+0x2a0>)
 8006b9a:	789b      	ldrb	r3, [r3, #2]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d107      	bne.n	8006bb0 <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8006ba0:	4b41      	ldr	r3, [pc, #260]	@ (8006ca8 <fallas+0x2a0>)
 8006ba2:	78db      	ldrb	r3, [r3, #3]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	4053      	eors	r3, r2
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d107      	bne.n	8006bbe <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8006bae:	e000      	b.n	8006bb2 <fallas+0x1aa>
			goto fallas_j03;
 8006bb0:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	2113      	movs	r1, #19
 8006bb6:	201f      	movs	r0, #31
 8006bb8:	f000 fbce 	bl	8007358 <wreg_waux_conf>
 8006bbc:	e000      	b.n	8006bc0 <fallas+0x1b8>
			goto fallas_j04;
 8006bbe:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8006bc0:	4b39      	ldr	r3, [pc, #228]	@ (8006ca8 <fallas+0x2a0>)
 8006bc2:	791b      	ldrb	r3, [r3, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4053      	eors	r3, r2
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8006bce:	2201      	movs	r2, #1
 8006bd0:	211e      	movs	r1, #30
 8006bd2:	201f      	movs	r0, #31
 8006bd4:	f000 fbc0 	bl	8007358 <wreg_waux_conf>
 8006bd8:	e000      	b.n	8006bdc <fallas+0x1d4>
			goto fallas_j06;
 8006bda:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8006bdc:	4b33      	ldr	r3, [pc, #204]	@ (8006cac <fallas+0x2a4>)
 8006bde:	799b      	ldrb	r3, [r3, #6]
 8006be0:	2201      	movs	r2, #1
 8006be2:	4053      	eors	r3, r2
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 8006bea:	2201      	movs	r2, #1
 8006bec:	210a      	movs	r1, #10
 8006bee:	201f      	movs	r0, #31
 8006bf0:	f000 fbb2 	bl	8007358 <wreg_waux_conf>
 8006bf4:	e000      	b.n	8006bf8 <fallas+0x1f0>
			goto fallas_j06a;
 8006bf6:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8006cac <fallas+0x2a4>)
 8006bfa:	789b      	ldrb	r3, [r3, #2]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4053      	eors	r3, r2
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 8006c06:	2201      	movs	r2, #1
 8006c08:	210c      	movs	r1, #12
 8006c0a:	2020      	movs	r0, #32
 8006c0c:	f000 fba4 	bl	8007358 <wreg_waux_conf>
 8006c10:	e000      	b.n	8006c14 <fallas+0x20c>
			goto fallas_j04b;
 8006c12:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 8006c14:	4b25      	ldr	r3, [pc, #148]	@ (8006cac <fallas+0x2a4>)
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4053      	eors	r3, r2
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 8006c22:	2201      	movs	r2, #1
 8006c24:	210b      	movs	r1, #11
 8006c26:	2020      	movs	r0, #32
 8006c28:	f000 fb96 	bl	8007358 <wreg_waux_conf>
 8006c2c:	e000      	b.n	8006c30 <fallas+0x228>
			goto fallas_j04c;
 8006c2e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 8006c30:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <fallas+0x2a4>)
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2201      	movs	r2, #1
 8006c36:	4053      	eors	r3, r2
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 8006c3e:	2201      	movs	r2, #1
 8006c40:	210c      	movs	r1, #12
 8006c42:	201f      	movs	r0, #31
 8006c44:	f000 fb88 	bl	8007358 <wreg_waux_conf>
 8006c48:	e000      	b.n	8006c4c <fallas+0x244>
			goto fallas_j06b;
 8006c4a:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 8006c4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ca0 <fallas+0x298>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d00c      	beq.n	8006c6e <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 8006c54:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <fallas+0x2b8>)
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4a19      	ldr	r2, [pc, #100]	@ (8006cc4 <fallas+0x2bc>)
 8006c60:	215a      	movs	r1, #90	@ 0x5a
 8006c62:	5c52      	ldrb	r2, [r2, r1]
 8006c64:	4013      	ands	r3, r2
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d111      	bne.n	8006c90 <fallas+0x288>
			goto parpadeo2a;
 8006c6c:	e000      	b.n	8006c70 <fallas+0x268>
			goto parpadeo2a;
 8006c6e:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8006c70:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8006c72:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <fallas+0x2b4>)
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <fallas+0x2b0>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	0010      	movs	r0, r2
 8006c7e:	f000 fb43 	bl	8007308 <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8006c82:	4b08      	ldr	r3, [pc, #32]	@ (8006ca4 <fallas+0x29c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 8006c88:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <fallas+0x29c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	705a      	strb	r2, [r3, #1]
 8006c8e:	e000      	b.n	8006c92 <fallas+0x28a>
		goto finfallas;
 8006c90:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	0018      	movs	r0, r3
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	2000208c 	.word	0x2000208c
 8006ca0:	20000bf8 	.word	0x20000bf8
 8006ca4:	20000bf0 	.word	0x20000bf0
 8006ca8:	20000be8 	.word	0x20000be8
 8006cac:	20000be0 	.word	0x20000be0
 8006cb0:	2000219c 	.word	0x2000219c
 8006cb4:	20000c38 	.word	0x20000c38
 8006cb8:	20000bb6 	.word	0x20000bb6
 8006cbc:	20000bb7 	.word	0x20000bb7
 8006cc0:	20000bb0 	.word	0x20000bb0
 8006cc4:	200000b8 	.word	0x200000b8

08006cc8 <offdpy>:
void offdpy (){				//	offdpy:
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8006ccc:	211f      	movs	r1, #31
 8006cce:	201f      	movs	r0, #31
 8006cd0:	f000 fb1a 	bl	8007308 <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 8006cd4:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <offdpy+0x20>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 8006cda:	4b03      	ldr	r3, [pc, #12]	@ (8006ce8 <offdpy+0x20>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	705a      	strb	r2, [r3, #1]
}
 8006ce0:	46c0      	nop			@ (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	20000bf0 	.word	0x20000bf0

08006cec <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 8006cf2:	4b27      	ldr	r3, [pc, #156]	@ (8006d90 <ram_reserved+0xa4>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2baa      	cmp	r3, #170	@ 0xaa
 8006cf8:	d119      	bne.n	8006d2e <ram_reserved+0x42>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 8006cfa:	46c0      	nop			@ (mov r8, r8)
			 * Optimización de código, para que se necesite menos memoria
			 * CGM 21/04/2024
			 */
			//uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
			//if(VarAux_ % 2048 == 0){
			if(( ((uint32_t) dirPointer) & 0x7FF) == 0){
 8006cfc:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <ram_reserved+0xa8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	055b      	lsls	r3, r3, #21
 8006d02:	0d5b      	lsrs	r3, r3, #21
 8006d04:	d10a      	bne.n	8006d1c <ram_reserved+0x30>
				// Estamos a inicio de Pagina, es necesario un borrado, debido a que se necesita escribir
				uint32_t numberPage = getNumberPage((uint32_t) dirPointer); 		// Number the Page
 8006d06:	4b23      	ldr	r3, [pc, #140]	@ (8006d94 <ram_reserved+0xa8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7fb fc5e 	bl	80025cc <getNumberPage>
 8006d10:	0003      	movs	r3, r0
 8006d12:	603b      	str	r3, [r7, #0]
				erasePage(numberPage);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7fb fc7e 	bl	8002618 <erasePage>
//
//			}

			// Escritura de la FLASH
			// CGM 21/04/2025
			writeFLASH( (uint64_t *) dirPointer, (uint64_t *) dataPointer,16);
 8006d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d94 <ram_reserved+0xa8>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	4b1d      	ldr	r3, [pc, #116]	@ (8006d98 <ram_reserved+0xac>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2210      	movs	r2, #16
 8006d26:	0019      	movs	r1, r3
 8006d28:	f7fb fca4 	bl	8002674 <writeFLASH>
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			//asm ("nop");
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8006d2c:	e02b      	b.n	8006d86 <ram_reserved+0x9a>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8006d2e:	46c0      	nop			@ (mov r8, r8)
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			//HAL_IWDG_Refresh( &hiwdg );
			for(uint8_t i = 0; i < 128 ; i++){
 8006d30:	1dfb      	adds	r3, r7, #7
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e01f      	b.n	8006d78 <ram_reserved+0x8c>
				FlashManager((uint32_t)dirPointer, (uint32_t)*dataPointer);
 8006d38:	4b16      	ldr	r3, [pc, #88]	@ (8006d94 <ram_reserved+0xa8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	4b16      	ldr	r3, [pc, #88]	@ (8006d98 <ram_reserved+0xac>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	0019      	movs	r1, r3
 8006d46:	0010      	movs	r0, r2
 8006d48:	f7fc fa0c 	bl	8003164 <FlashManager>
				reePlantilla[i] = *dataPointer;		// Guardando el respaldo en RAM
 8006d4c:	4b12      	ldr	r3, [pc, #72]	@ (8006d98 <ram_reserved+0xac>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	1dfb      	adds	r3, r7, #7
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	7811      	ldrb	r1, [r2, #0]
 8006d56:	4a11      	ldr	r2, [pc, #68]	@ (8006d9c <ram_reserved+0xb0>)
 8006d58:	54d1      	strb	r1, [r2, r3]
				dataPointer++;
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d98 <ram_reserved+0xac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <ram_reserved+0xac>)
 8006d62:	601a      	str	r2, [r3, #0]
				dirPointer++;
 8006d64:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <ram_reserved+0xa8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <ram_reserved+0xa8>)
 8006d6c:	601a      	str	r2, [r3, #0]
			for(uint8_t i = 0; i < 128 ; i++){
 8006d6e:	1dfb      	adds	r3, r7, #7
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	1dfb      	adds	r3, r7, #7
 8006d74:	3201      	adds	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	1dfb      	adds	r3, r7, #7
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	b25b      	sxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dada      	bge.n	8006d38 <ram_reserved+0x4c>
				//HAL_IWDG_Refresh( &hiwdg );
			}



WAIT_FOR_GRAB_0:
 8006d82:	46c0      	nop			@ (mov r8, r8)
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8006d84:	46c0      	nop			@ (mov r8, r8)
 8006d86:	46c0      	nop			@ (mov r8, r8)
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b002      	add	sp, #8
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	46c0      	nop			@ (mov r8, r8)
 8006d90:	20000e78 	.word	0x20000e78
 8006d94:	20000e7c 	.word	0x20000e7c
 8006d98:	20000e80 	.word	0x20000e80
 8006d9c:	20000cec 	.word	0x20000cec

08006da0 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 8006da6:	1dbb      	adds	r3, r7, #6
 8006da8:	2200      	movs	r2, #0
 8006daa:	801a      	strh	r2, [r3, #0]
	foo= reePlantilla[eetiempoAhorro1]*360;
 8006dac:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <load_tiempoAhorro1+0x30>)
 8006dae:	226f      	movs	r2, #111	@ 0x6f
 8006db0:	5c9b      	ldrb	r3, [r3, r2]
 8006db2:	0019      	movs	r1, r3
 8006db4:	1dbb      	adds	r3, r7, #6
 8006db6:	22b4      	movs	r2, #180	@ 0xb4
 8006db8:	0052      	lsls	r2, r2, #1
 8006dba:	434a      	muls	r2, r1
 8006dbc:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8006dbe:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <load_tiempoAhorro1+0x34>)
 8006dc0:	1dba      	adds	r2, r7, #6
 8006dc2:	8812      	ldrh	r2, [r2, #0]
 8006dc4:	801a      	strh	r2, [r3, #0]
}
 8006dc6:	46c0      	nop			@ (mov r8, r8)
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b002      	add	sp, #8
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	46c0      	nop			@ (mov r8, r8)
 8006dd0:	20000cec 	.word	0x20000cec
 8006dd4:	20000c90 	.word	0x20000c90

08006dd8 <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 8006dde:	1dbb      	adds	r3, r7, #6
 8006de0:	2200      	movs	r2, #0
 8006de2:	801a      	strh	r2, [r3, #0]
		foo= reePlantilla[eetiempoAhorro2]*360;
 8006de4:	4b08      	ldr	r3, [pc, #32]	@ (8006e08 <load_tiempoAhorro2+0x30>)
 8006de6:	2270      	movs	r2, #112	@ 0x70
 8006de8:	5c9b      	ldrb	r3, [r3, r2]
 8006dea:	0019      	movs	r1, r3
 8006dec:	1dbb      	adds	r3, r7, #6
 8006dee:	22b4      	movs	r2, #180	@ 0xb4
 8006df0:	0052      	lsls	r2, r2, #1
 8006df2:	434a      	muls	r2, r1
 8006df4:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 8006df6:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <load_tiempoAhorro2+0x34>)
 8006df8:	1dba      	adds	r2, r7, #6
 8006dfa:	8812      	ldrh	r2, [r2, #0]
 8006dfc:	801a      	strh	r2, [r3, #0]
}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b002      	add	sp, #8
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	20000cec 	.word	0x20000cec
 8006e0c:	20000c92 	.word	0x20000c92

08006e10 <load_timeNoct>:

void load_timeNoct(){
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = reePlantilla[eetimeNoct]*60;
 8006e14:	4b05      	ldr	r3, [pc, #20]	@ (8006e2c <load_timeNoct+0x1c>)
 8006e16:	224b      	movs	r2, #75	@ 0x4b
 8006e18:	5c9b      	ldrb	r3, [r3, r2]
 8006e1a:	001a      	movs	r2, r3
 8006e1c:	233c      	movs	r3, #60	@ 0x3c
 8006e1e:	4353      	muls	r3, r2
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	4b03      	ldr	r3, [pc, #12]	@ (8006e30 <load_timeNoct+0x20>)
 8006e24:	801a      	strh	r2, [r3, #0]
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000cec 	.word	0x20000cec
 8006e30:	20000ca4 	.word	0x20000ca4

08006e34 <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 8006e3a:	4b16      	ldr	r3, [pc, #88]	@ (8006e94 <load_next_buffer+0x60>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8006e40:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <load_next_buffer+0x64>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	01db      	lsls	r3, r3, #7
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	4b14      	ldr	r3, [pc, #80]	@ (8006e9c <load_next_buffer+0x68>)
 8006e4a:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8006e4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ea0 <load_next_buffer+0x6c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a12      	ldr	r2, [pc, #72]	@ (8006e9c <load_next_buffer+0x68>)
 8006e52:	8812      	ldrh	r2, [r2, #0]
 8006e54:	189b      	adds	r3, r3, r2
 8006e56:	607b      	str	r3, [r7, #4]
	wreg = 0;
 8006e58:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <load_next_buffer+0x70>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
	point_X++;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	607b      	str	r3, [r7, #4]
	point_Y++;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	603b      	str	r3, [r7, #0]
	wreg++;
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <load_next_buffer+0x70>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea4 <load_next_buffer+0x70>)
 8006e7c:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 8006e7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <load_next_buffer+0x70>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	b25b      	sxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db00      	blt.n	8006e8a <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8006e88:	e7e9      	b.n	8006e5e <load_next_buffer+0x2a>
	}
    asm ("nop");
 8006e8a:	46c0      	nop			@ (mov r8, r8)
}
 8006e8c:	46c0      	nop			@ (mov r8, r8)
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b002      	add	sp, #8
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000e90 	.word	0x20000e90
 8006e98:	20000e86 	.word	0x20000e86
 8006e9c:	20000936 	.word	0x20000936
 8006ea0:	20000e8c 	.word	0x20000e8c
 8006ea4:	20000bb7 	.word	0x20000bb7

08006ea8 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
		//
		//waux = lowByte(cntReg);		// 		mov		waux,resull;
		//point_X++;  // cntRegPNT++;						//		incw	X
		//wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado

		FlashManager(cntRegPNT, cntReg);
 8006eac:	4b05      	ldr	r3, [pc, #20]	@ (8006ec4 <save_cntReg+0x1c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	001a      	movs	r2, r3
 8006eb2:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <save_cntReg+0x20>)
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	0019      	movs	r1, r3
 8006eb8:	0010      	movs	r0, r2
 8006eba:	f7fc f953 	bl	8003164 <FlashManager>


		//HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
		//
//		ret
}
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20002134 	.word	0x20002134
 8006ec8:	20002132 	.word	0x20002132

08006ecc <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 8006ed0:	4b25      	ldr	r3, [pc, #148]	@ (8006f68 <save_timeUNIX+0x9c>)
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	4b24      	ldr	r3, [pc, #144]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006edc:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 8006ede:	4b23      	ldr	r3, [pc, #140]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	001a      	movs	r2, r3
 8006ee4:	4b22      	ldr	r3, [pc, #136]	@ (8006f70 <save_timeUNIX+0xa4>)
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	0010      	movs	r0, r2
 8006eea:	f000 f9f9 	bl	80072e0 <wreeprom>
	reeTimeUnix1 = waux;
 8006eee:	4b1f      	ldr	r3, [pc, #124]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	4b20      	ldr	r3, [pc, #128]	@ (8006f74 <save_timeUNIX+0xa8>)
 8006ef4:	701a      	strb	r2, [r3, #0]
	//HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 8006ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8006f68 <save_timeUNIX+0x9c>)
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006efe:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 8006f00:	4b1a      	ldr	r3, [pc, #104]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	001a      	movs	r2, r3
 8006f06:	4b1c      	ldr	r3, [pc, #112]	@ (8006f78 <save_timeUNIX+0xac>)
 8006f08:	0019      	movs	r1, r3
 8006f0a:	0010      	movs	r0, r2
 8006f0c:	f000 f9e8 	bl	80072e0 <wreeprom>
	reeTimeUnix2 = waux;
 8006f10:	4b16      	ldr	r3, [pc, #88]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	4b19      	ldr	r3, [pc, #100]	@ (8006f7c <save_timeUNIX+0xb0>)
 8006f16:	701a      	strb	r2, [r3, #0]


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 8006f18:	4b19      	ldr	r3, [pc, #100]	@ (8006f80 <save_timeUNIX+0xb4>)
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f24:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8006f26:	4b11      	ldr	r3, [pc, #68]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	001a      	movs	r2, r3
 8006f2c:	4b15      	ldr	r3, [pc, #84]	@ (8006f84 <save_timeUNIX+0xb8>)
 8006f2e:	0019      	movs	r1, r3
 8006f30:	0010      	movs	r0, r2
 8006f32:	f000 f9d5 	bl	80072e0 <wreeprom>
	reeTimeUnix3 = waux;
 8006f36:	4b0d      	ldr	r3, [pc, #52]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f38:	781a      	ldrb	r2, [r3, #0]
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <save_timeUNIX+0xbc>)
 8006f3c:	701a      	strb	r2, [r3, #0]
	//HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8006f3e:	4b10      	ldr	r3, [pc, #64]	@ (8006f80 <save_timeUNIX+0xb4>)
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	4b09      	ldr	r3, [pc, #36]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f46:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8006f48:	4b08      	ldr	r3, [pc, #32]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f8c <save_timeUNIX+0xc0>)
 8006f50:	0019      	movs	r1, r3
 8006f52:	0010      	movs	r0, r2
 8006f54:	f000 f9c4 	bl	80072e0 <wreeprom>
	reeTimeUnix4 = waux;
 8006f58:	4b04      	ldr	r3, [pc, #16]	@ (8006f6c <save_timeUNIX+0xa0>)
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <save_timeUNIX+0xc4>)
 8006f5e:	701a      	strb	r2, [r3, #0]
	//HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria

}
 8006f60:	46c0      	nop			@ (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	46c0      	nop			@ (mov r8, r8)
 8006f68:	20001ea4 	.word	0x20001ea4
 8006f6c:	20000bb6 	.word	0x20000bb6
 8006f70:	0803f804 	.word	0x0803f804
 8006f74:	20000d6d 	.word	0x20000d6d
 8006f78:	0803f805 	.word	0x0803f805
 8006f7c:	20000d6e 	.word	0x20000d6e
 8006f80:	20001ea6 	.word	0x20001ea6
 8006f84:	0803f806 	.word	0x0803f806
 8006f88:	20000d6f 	.word	0x20000d6f
 8006f8c:	0803f807 	.word	0x0803f807
 8006f90:	20000d70 	.word	0x20000d70

08006f94 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	000a      	movs	r2, r1
 8006f9e:	1cfb      	adds	r3, r7, #3
 8006fa0:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8006fa2:	e011      	b.n	8006fc8 <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8006fa4:	210f      	movs	r1, #15
 8006fa6:	187b      	adds	r3, r7, r1
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 8006fae:	187b      	adds	r3, r7, r1
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f000 f860 	bl	8007078 <build_chksum>
		*point_X++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	607b      	str	r3, [r7, #4]
		waux--;
 8006fbe:	1cfb      	adds	r3, r7, #3
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	1cfb      	adds	r3, r7, #3
 8006fc4:	3a01      	subs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
	while (waux){
 8006fc8:	1cfb      	adds	r3, r7, #3
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e9      	bne.n	8006fa4 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 8006fd0:	46c0      	nop			@ (mov r8, r8)
 8006fd2:	46c0      	nop			@ (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <ld_alarmDelay+0x1c>)
 8006fe2:	224e      	movs	r2, #78	@ 0x4e
 8006fe4:	5c9b      	ldrb	r3, [r3, r2]
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	233c      	movs	r3, #60	@ 0x3c
 8006fea:	4353      	muls	r3, r2
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	4b03      	ldr	r3, [pc, #12]	@ (8006ffc <ld_alarmDelay+0x20>)
 8006ff0:	801a      	strh	r2, [r3, #0]
}
 8006ff2:	46c0      	nop			@ (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	200000b8 	.word	0x200000b8
 8006ffc:	20002094 	.word	0x20002094

08007000 <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	e007      	b.n	800701c <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 800700c:	4a07      	ldr	r2, [pc, #28]	@ (800702c <clean_buffer+0x2c>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	18d3      	adds	r3, r2, r3
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3301      	adds	r3, #1
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007020:	ddf4      	ble.n	800700c <clean_buffer+0xc>
	}
}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	46c0      	nop			@ (mov r8, r8)
 8007026:	46bd      	mov	sp, r7
 8007028:	b002      	add	sp, #8
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000d78 	.word	0x20000d78

08007030 <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e00c      	b.n	800705a <copyVector+0x2a>
		*dstY = *srcX;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	701a      	strb	r2, [r3, #0]
		srcX++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
		dstY++;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	4b06      	ldr	r3, [pc, #24]	@ (8007074 <copyVector+0x44>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	001a      	movs	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4293      	cmp	r3, r2
 8007064:	dbec      	blt.n	8007040 <copyVector+0x10>
	}
	wreg = 0;
 8007066:	4b03      	ldr	r3, [pc, #12]	@ (8007074 <copyVector+0x44>)
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
}
 800706c:	46c0      	nop			@ (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b004      	add	sp, #16
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000bb7 	.word	0x20000bb7

08007078 <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	0002      	movs	r2, r0
 8007080:	1dfb      	adds	r3, r7, #7
 8007082:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8007084:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8007086:	1dfb      	adds	r3, r7, #7
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	4b04      	ldr	r3, [pc, #16]	@ (800709c <build_chksum+0x24>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	18d2      	adds	r2, r2, r3
 8007090:	4b02      	ldr	r3, [pc, #8]	@ (800709c <build_chksum+0x24>)
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	46c0      	nop			@ (mov r8, r8)
 8007096:	46bd      	mov	sp, r7
 8007098:	b002      	add	sp, #8
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20001f28 	.word	0x20001f28

080070a0 <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 80070a4:	f7ff fe22 	bl	8006cec <ram_reserved>
Return_RAM:

}
 80070a8:	46c0      	nop			@ (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <decword+0x1c>
		(*decwreg_Reg)--;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	801a      	strh	r2, [r3, #0]
}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b002      	add	sp, #8
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <decwreg+0x1c>
		(*decwreg_Reg)--;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	701a      	strb	r2, [r3, #0]
}
 80070ee:	46c0      	nop			@ (mov r8, r8)
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b002      	add	sp, #8
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 80070fe:	4b40      	ldr	r3, [pc, #256]	@ (8007200 <buildmode+0x108>)
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 8007104:	4b3f      	ldr	r3, [pc, #252]	@ (8007204 <buildmode+0x10c>)
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d107      	bne.n	800711c <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 800710c:	4b3c      	ldr	r3, [pc, #240]	@ (8007200 <buildmode+0x108>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2201      	movs	r2, #1
 8007112:	4313      	orrs	r3, r2
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4b3a      	ldr	r3, [pc, #232]	@ (8007200 <buildmode+0x108>)
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e000      	b.n	800711e <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 800711c:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 800711e:	1dbb      	adds	r3, r7, #6
 8007120:	2200      	movs	r2, #0
 8007122:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8007124:	4b38      	ldr	r3, [pc, #224]	@ (8007208 <buildmode+0x110>)
 8007126:	2223      	movs	r2, #35	@ 0x23
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	b29b      	uxth	r3, r3
 800712e:	4a36      	ldr	r2, [pc, #216]	@ (8007208 <buildmode+0x110>)
 8007130:	2124      	movs	r1, #36	@ 0x24
 8007132:	5c52      	ldrb	r2, [r2, r1]
 8007134:	189b      	adds	r3, r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	1dbb      	adds	r3, r7, #6
 800713a:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 800713c:	4b33      	ldr	r3, [pc, #204]	@ (800720c <buildmode+0x114>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	b29b      	uxth	r3, r3
 8007144:	4a32      	ldr	r2, [pc, #200]	@ (8007210 <buildmode+0x118>)
 8007146:	7812      	ldrb	r2, [r2, #0]
 8007148:	189b      	adds	r3, r3, r2
 800714a:	b29a      	uxth	r2, r3
 800714c:	4b31      	ldr	r3, [pc, #196]	@ (8007214 <buildmode+0x11c>)
 800714e:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8007150:	4b30      	ldr	r3, [pc, #192]	@ (8007214 <buildmode+0x11c>)
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b21b      	sxth	r3, r3
 8007156:	1dba      	adds	r2, r7, #6
 8007158:	2100      	movs	r1, #0
 800715a:	5e52      	ldrsh	r2, [r2, r1]
 800715c:	429a      	cmp	r2, r3
 800715e:	dc07      	bgt.n	8007170 <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8007160:	4b27      	ldr	r3, [pc, #156]	@ (8007200 <buildmode+0x108>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2202      	movs	r2, #2
 8007166:	4313      	orrs	r3, r2
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4b25      	ldr	r3, [pc, #148]	@ (8007200 <buildmode+0x108>)
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	e000      	b.n	8007172 <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8007170:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8007172:	4b25      	ldr	r3, [pc, #148]	@ (8007208 <buildmode+0x110>)
 8007174:	2259      	movs	r2, #89	@ 0x59
 8007176:	5c9b      	ldrb	r3, [r3, r2]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d025      	beq.n	80071c8 <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 800717c:	4b26      	ldr	r3, [pc, #152]	@ (8007218 <buildmode+0x120>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	b29b      	uxth	r3, r3
 8007184:	4a25      	ldr	r2, [pc, #148]	@ (800721c <buildmode+0x124>)
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	189b      	adds	r3, r3, r2
 800718a:	b29a      	uxth	r2, r3
 800718c:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <buildmode+0x11c>)
 800718e:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 8007190:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <buildmode+0x110>)
 8007192:	2221      	movs	r2, #33	@ 0x21
 8007194:	5c9b      	ldrb	r3, [r3, r2]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	b29b      	uxth	r3, r3
 800719a:	4a1b      	ldr	r2, [pc, #108]	@ (8007208 <buildmode+0x110>)
 800719c:	2122      	movs	r1, #34	@ 0x22
 800719e:	5c52      	ldrb	r2, [r2, r1]
 80071a0:	189b      	adds	r3, r3, r2
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	1dbb      	adds	r3, r7, #6
 80071a6:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 80071a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007214 <buildmode+0x11c>)
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b21b      	sxth	r3, r3
 80071ae:	1dba      	adds	r2, r7, #6
 80071b0:	2100      	movs	r1, #0
 80071b2:	5e52      	ldrsh	r2, [r2, r1]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	dc09      	bgt.n	80071cc <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 80071b8:	4b11      	ldr	r3, [pc, #68]	@ (8007200 <buildmode+0x108>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2210      	movs	r2, #16
 80071be:	4313      	orrs	r3, r2
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <buildmode+0x108>)
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e002      	b.n	80071ce <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 80071c8:	46c0      	nop			@ (mov r8, r8)
 80071ca:	e000      	b.n	80071ce <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 80071cc:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 80071ce:	4b14      	ldr	r3, [pc, #80]	@ (8007220 <buildmode+0x128>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2201      	movs	r2, #1
 80071d4:	4053      	eors	r3, r2
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d108      	bne.n	80071ee <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 80071dc:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <buildmode+0x108>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2280      	movs	r2, #128	@ 0x80
 80071e2:	4252      	negs	r2, r2
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	4b05      	ldr	r3, [pc, #20]	@ (8007200 <buildmode+0x108>)
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	e000      	b.n	80071f0 <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 80071ee:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 80071f0:	4b03      	ldr	r3, [pc, #12]	@ (8007200 <buildmode+0x108>)
 80071f2:	781a      	ldrb	r2, [r3, #0]
 80071f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007224 <buildmode+0x12c>)
 80071f6:	701a      	strb	r2, [r3, #0]

}
 80071f8:	46c0      	nop			@ (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000bb6 	.word	0x20000bb6
 8007204:	20000c1a 	.word	0x20000c1a
 8007208:	200000b8 	.word	0x200000b8
 800720c:	20000c10 	.word	0x20000c10
 8007210:	20000c11 	.word	0x20000c11
 8007214:	20000936 	.word	0x20000936
 8007218:	20000c12 	.word	0x20000c12
 800721c:	20000c13 	.word	0x20000c13
 8007220:	20000bd8 	.word	0x20000bd8
 8007224:	20000bb4 	.word	0x20000bb4

08007228 <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 800722e:	4b26      	ldr	r3, [pc, #152]	@ (80072c8 <memodriver+0xa0>)
 8007230:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 8007232:	4b26      	ldr	r3, [pc, #152]	@ (80072cc <memodriver+0xa4>)
 8007234:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 8007236:	4b26      	ldr	r3, [pc, #152]	@ (80072d0 <memodriver+0xa8>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2baa      	cmp	r3, #170	@ 0xaa
 800723c:	d11f      	bne.n	800727e <memodriver+0x56>
				goto  loaddat;
			}
grabmemo:
 800723e:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 8007240:	4b21      	ldr	r3, [pc, #132]	@ (80072c8 <memodriver+0xa0>)
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	4b23      	ldr	r3, [pc, #140]	@ (80072d4 <memodriver+0xac>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d025      	beq.n	8007298 <memodriver+0x70>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 800724c:	4b21      	ldr	r3, [pc, #132]	@ (80072d4 <memodriver+0xac>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	001a      	movs	r2, r3
 8007252:	4b21      	ldr	r3, [pc, #132]	@ (80072d8 <memodriver+0xb0>)
 8007254:	5c9b      	ldrb	r3, [r3, r2]
 8007256:	0018      	movs	r0, r3
 8007258:	4b1e      	ldr	r3, [pc, #120]	@ (80072d4 <memodriver+0xac>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	001a      	movs	r2, r3
 800725e:	4b1b      	ldr	r3, [pc, #108]	@ (80072cc <memodriver+0xa4>)
 8007260:	18d3      	adds	r3, r2, r3
 8007262:	0019      	movs	r1, r3
 8007264:	f000 f83c 	bl	80072e0 <wreeprom>
			reePlantilla[cntmemo] = copiaPlantilla[cntmemo];
 8007268:	4b1a      	ldr	r3, [pc, #104]	@ (80072d4 <memodriver+0xac>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	0019      	movs	r1, r3
 800726e:	4b19      	ldr	r3, [pc, #100]	@ (80072d4 <memodriver+0xac>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	001a      	movs	r2, r3
 8007274:	4b18      	ldr	r3, [pc, #96]	@ (80072d8 <memodriver+0xb0>)
 8007276:	5c59      	ldrb	r1, [r3, r1]
 8007278:	4b18      	ldr	r3, [pc, #96]	@ (80072dc <memodriver+0xb4>)
 800727a:	5499      	strb	r1, [r3, r2]
			goto nextdat;
 800727c:	e00d      	b.n	800729a <memodriver+0x72>
				goto  loaddat;
 800727e:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = reePlantilla[cntmemo];
 8007280:	4b14      	ldr	r3, [pc, #80]	@ (80072d4 <memodriver+0xac>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	0019      	movs	r1, r3
 8007286:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <memodriver+0xac>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	001a      	movs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	189b      	adds	r3, r3, r2
 8007290:	4a12      	ldr	r2, [pc, #72]	@ (80072dc <memodriver+0xb4>)
 8007292:	5c52      	ldrb	r2, [r2, r1]
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e000      	b.n	800729a <memodriver+0x72>
				goto nextdat;
 8007298:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 800729a:	4b0e      	ldr	r3, [pc, #56]	@ (80072d4 <memodriver+0xac>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <memodriver+0xac>)
 80072a4:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 80072a6:	4b0b      	ldr	r3, [pc, #44]	@ (80072d4 <memodriver+0xac>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	b25b      	sxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	da06      	bge.n	80072be <memodriver+0x96>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <memodriver+0xa8>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 80072b6:	4b07      	ldr	r3, [pc, #28]	@ (80072d4 <memodriver+0xac>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 80072bc:	e000      	b.n	80072c0 <memodriver+0x98>
				goto finmemodr;
 80072be:	46c0      	nop			@ (mov r8, r8)
}
 80072c0:	46c0      	nop			@ (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	200000b8 	.word	0x200000b8
 80072cc:	0803f000 	.word	0x0803f000
 80072d0:	20000cc3 	.word	0x20000cc3
 80072d4:	20000cc4 	.word	0x20000cc4
 80072d8:	20000138 	.word	0x20000138
 80072dc:	20000cec 	.word	0x20000cec

080072e0 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	0002      	movs	r2, r0
 80072e8:	6039      	str	r1, [r7, #0]
 80072ea:	1dfb      	adds	r3, r7, #7
 80072ec:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	FlashManager((uint32_t)AddressDestination, (uint32_t)Data);
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	0011      	movs	r1, r2
 80072fa:	0018      	movs	r0, r3
 80072fc:	f7fb ff32 	bl	8003164 <FlashManager>
}
 8007300:	46c0      	nop			@ (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b004      	add	sp, #16
 8007306:	bd80      	pop	{r7, pc}

08007308 <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	0002      	movs	r2, r0
 8007310:	1dfb      	adds	r3, r7, #7
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	1dbb      	adds	r3, r7, #6
 8007316:	1c0a      	adds	r2, r1, #0
 8007318:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 800731a:	4b06      	ldr	r3, [pc, #24]	@ (8007334 <op_menu+0x2c>)
 800731c:	1dfa      	adds	r2, r7, #7
 800731e:	7812      	ldrb	r2, [r2, #0]
 8007320:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 8007322:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <op_menu+0x30>)
 8007324:	1dba      	adds	r2, r7, #6
 8007326:	7812      	ldrb	r2, [r2, #0]
 8007328:	701a      	strb	r2, [r3, #0]
}
 800732a:	46c0      	nop			@ (mov r8, r8)
 800732c:	46bd      	mov	sp, r7
 800732e:	b002      	add	sp, #8
 8007330:	bd80      	pop	{r7, pc}
 8007332:	46c0      	nop			@ (mov r8, r8)
 8007334:	20000bb3 	.word	0x20000bb3
 8007338:	20000bb2 	.word	0x20000bb2

0800733c <datled_clear>:

void datled_clear()
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 8007340:	4b04      	ldr	r3, [pc, #16]	@ (8007354 <datled_clear+0x18>)
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 8007346:	4b03      	ldr	r3, [pc, #12]	@ (8007354 <datled_clear+0x18>)
 8007348:	2200      	movs	r2, #0
 800734a:	705a      	strb	r2, [r3, #1]
}
 800734c:	46c0      	nop			@ (mov r8, r8)
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	20000bf0 	.word	0x20000bf0

08007358 <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 8007358:	b590      	push	{r4, r7, lr}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	0004      	movs	r4, r0
 8007360:	0008      	movs	r0, r1
 8007362:	0011      	movs	r1, r2
 8007364:	1dfb      	adds	r3, r7, #7
 8007366:	1c22      	adds	r2, r4, #0
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	1dbb      	adds	r3, r7, #6
 800736c:	1c02      	adds	r2, r0, #0
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	1d7b      	adds	r3, r7, #5
 8007372:	1c0a      	adds	r2, r1, #0
 8007374:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 8007376:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <wreg_waux_conf+0x4c>)
 8007378:	1dfa      	adds	r2, r7, #7
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 800737e:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <wreg_waux_conf+0x50>)
 8007380:	1dba      	adds	r2, r7, #6
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 8007386:	1d7b      	adds	r3, r7, #5
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 800738e:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <wreg_waux_conf+0x54>)
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 8007394:	e002      	b.n	800739c <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 8007396:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <wreg_waux_conf+0x54>)
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
}
 800739c:	46c0      	nop			@ (mov r8, r8)
 800739e:	46bd      	mov	sp, r7
 80073a0:	b003      	add	sp, #12
 80073a2:	bd90      	pop	{r4, r7, pc}
 80073a4:	20000bb7 	.word	0x20000bb7
 80073a8:	20000bb6 	.word	0x20000bb6
 80073ac:	2000208c 	.word	0x2000208c

080073b0 <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 80073b0:	b5b0      	push	{r4, r5, r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	0005      	movs	r5, r0
 80073b8:	000c      	movs	r4, r1
 80073ba:	0010      	movs	r0, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	1dbb      	adds	r3, r7, #6
 80073c0:	1c2a      	adds	r2, r5, #0
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	1c22      	adds	r2, r4, #0
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	1cbb      	adds	r3, r7, #2
 80073cc:	1c02      	adds	r2, r0, #0
 80073ce:	801a      	strh	r2, [r3, #0]
 80073d0:	1c7b      	adds	r3, r7, #1
 80073d2:	1c0a      	adds	r2, r1, #0
 80073d4:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 80073d6:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <opc_nv+0x78>)
 80073d8:	1dba      	adds	r2, r7, #6
 80073da:	8812      	ldrh	r2, [r2, #0]
 80073dc:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 80073de:	4b13      	ldr	r3, [pc, #76]	@ (800742c <opc_nv+0x7c>)
 80073e0:	1d3a      	adds	r2, r7, #4
 80073e2:	8812      	ldrh	r2, [r2, #0]
 80073e4:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 80073e6:	4b12      	ldr	r3, [pc, #72]	@ (8007430 <opc_nv+0x80>)
 80073e8:	1cba      	adds	r2, r7, #2
 80073ea:	8812      	ldrh	r2, [r2, #0]
 80073ec:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 80073ee:	f7fe ff9f 	bl	8006330 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 80073f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007430 <opc_nv+0x80>)
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	1c7b      	adds	r3, r7, #1
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2d1      	uxtb	r1, r2
 8007400:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <opc_nv+0x84>)
 8007402:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <opc_nv+0x80>)
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	2318      	movs	r3, #24
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b2d1      	uxtb	r1, r2
 8007410:	4a08      	ldr	r2, [pc, #32]	@ (8007434 <opc_nv+0x84>)
 8007412:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 8007414:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <opc_nv+0x80>)
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	0018      	movs	r0, r3
 800741a:	f7ff f97f 	bl	800671c <convadec_math>

}
 800741e:	46c0      	nop			@ (mov r8, r8)
 8007420:	46bd      	mov	sp, r7
 8007422:	b002      	add	sp, #8
 8007424:	bdb0      	pop	{r4, r5, r7, pc}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	20000c62 	.word	0x20000c62
 800742c:	20000c64 	.word	0x20000c64
 8007430:	20000936 	.word	0x20000936
 8007434:	20000138 	.word	0x20000138

08007438 <grabadoLoggerBloquesCompletos>:

void grabadoLoggerBloquesCompletos(uint64_t * pointX_, uint64_t * pointBuffer_){
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]

	uint64_t * pointInitPage_ = getAddressPage((uint32_t) pointX_); 		// Apuntador Inicio de Pagina
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0018      	movs	r0, r3
 8007446:	f7fb f8d3 	bl	80025f0 <getAddressPage>
 800744a:	0002      	movs	r2, r0
 800744c:	000b      	movs	r3, r1
 800744e:	0013      	movs	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
	uint32_t sizeCopy = ( ((uint32_t) cntBlockFlash & 0xF)) << 4;			// Cantidad de Bloques de 128 Bytes Completos
 8007452:	4b1e      	ldr	r3, [pc, #120]	@ (80074cc <grabadoLoggerBloquesCompletos+0x94>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	22ff      	movs	r2, #255	@ 0xff
 800745a:	4013      	ands	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
	uint8_t * pointX_126 = (uint8_t *) pointX_;								// Puntero para dirección 126 del Bloque de 128 Bytes
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	613b      	str	r3, [r7, #16]

	if(pointX_126[126] != 0 && pointX_126[126] != 0xFF){// Revisa si existe un Bloque de 128 Bytes esta incompleto
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	337e      	adds	r3, #126	@ 0x7e
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d02b      	beq.n	80074c4 <grabadoLoggerBloquesCompletos+0x8c>
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	337e      	adds	r3, #126	@ 0x7e
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2bff      	cmp	r3, #255	@ 0xff
 8007474:	d026      	beq.n	80074c4 <grabadoLoggerBloquesCompletos+0x8c>
		// Lectura de la Pagina en FLASH, hasta los bloques que estan completos
		for(uint32_t i=0; i<sizeCopy; i++){
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e00e      	b.n	800749a <grabadoLoggerBloquesCompletos+0x62>
			pointBuffer_[i] = pointInitPage_[i];// Copia de los bloques de 128 bytes completos
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	00d2      	lsls	r2, r2, #3
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	1889      	adds	r1, r1, r2
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	600a      	str	r2, [r1, #0]
 8007492:	604b      	str	r3, [r1, #4]
		for(uint32_t i=0; i<sizeCopy; i++){
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d3ec      	bcc.n	800747c <grabadoLoggerBloquesCompletos+0x44>
		}

		// Realiza El borrado de la Pagina en caso de encontrar un Bloque de 128 Bytes Incompleto
		uint32_t numberPage_ = getNumberPage((uint32_t) pointX_);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7fb f891 	bl	80025cc <getNumberPage>
 80074aa:	0003      	movs	r3, r0
 80074ac:	60fb      	str	r3, [r7, #12]
		erasePage(numberPage_);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7fb f8b1 	bl	8002618 <erasePage>

		// Grabado de Bloques de 128 Bytes Completos
		writeFLASH(pointInitPage_, pointBuffer_,sizeCopy);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	0018      	movs	r0, r3
 80074c0:	f7fb f8d8 	bl	8002674 <writeFLASH>
	}

}
 80074c4:	46c0      	nop			@ (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b008      	add	sp, #32
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000e86 	.word	0x20000e86

080074d0 <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 80074d6:	4b79      	ldr	r3, [pc, #484]	@ (80076bc <comunicacion+0x1ec>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	3b01      	subs	r3, #1
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	4b77      	ldr	r3, [pc, #476]	@ (80076bc <comunicacion+0x1ec>)
 80074e0:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 80074e2:	4b76      	ldr	r3, [pc, #472]	@ (80076bc <comunicacion+0x1ec>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2bff      	cmp	r3, #255	@ 0xff
 80074e8:	d103      	bne.n	80074f2 <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80074ea:	4b75      	ldr	r3, [pc, #468]	@ (80076c0 <comunicacion+0x1f0>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 80074f0:	e0dd      	b.n	80076ae <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 80074f2:	4b72      	ldr	r3, [pc, #456]	@ (80076bc <comunicacion+0x1ec>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80074f8:	d103      	bne.n	8007502 <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80074fa:	4b71      	ldr	r3, [pc, #452]	@ (80076c0 <comunicacion+0x1f0>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8007500:	e0d5      	b.n	80076ae <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 8007502:	4b6e      	ldr	r3, [pc, #440]	@ (80076bc <comunicacion+0x1ec>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d000      	beq.n	800750c <comunicacion+0x3c>
 800750a:	e0cd      	b.n	80076a8 <comunicacion+0x1d8>
			goto comu_01;
 800750c:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 800750e:	4b6b      	ldr	r3, [pc, #428]	@ (80076bc <comunicacion+0x1ec>)
 8007510:	2205      	movs	r2, #5
 8007512:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8007514:	4b6b      	ldr	r3, [pc, #428]	@ (80076c4 <comunicacion+0x1f4>)
 8007516:	0018      	movs	r0, r3
 8007518:	f00d fc68 	bl	8014dec <HAL_I2C_GetState>
 800751c:	0003      	movs	r3, r0
 800751e:	2b20      	cmp	r3, #32
 8007520:	d000      	beq.n	8007524 <comunicacion+0x54>
 8007522:	e0ae      	b.n	8007682 <comunicacion+0x1b2>
				countResetI2C = 0;
 8007524:	4b68      	ldr	r3, [pc, #416]	@ (80076c8 <comunicacion+0x1f8>)
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 800752a:	4b68      	ldr	r3, [pc, #416]	@ (80076cc <comunicacion+0x1fc>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 8007530:	4b66      	ldr	r3, [pc, #408]	@ (80076cc <comunicacion+0x1fc>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8007536:	230f      	movs	r3, #15
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	e00a      	b.n	8007556 <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 8007540:	200f      	movs	r0, #15
 8007542:	183b      	adds	r3, r7, r0
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	4a62      	ldr	r2, [pc, #392]	@ (80076d0 <comunicacion+0x200>)
 8007548:	2100      	movs	r1, #0
 800754a:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 800754c:	183b      	adds	r3, r7, r0
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	183b      	adds	r3, r7, r0
 8007552:	3201      	adds	r2, #1
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	230f      	movs	r3, #15
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b06      	cmp	r3, #6
 800755e:	d9ef      	bls.n	8007540 <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 8007560:	4b5b      	ldr	r3, [pc, #364]	@ (80076d0 <comunicacion+0x200>)
 8007562:	2207      	movs	r2, #7
 8007564:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 8007566:	4b5a      	ldr	r3, [pc, #360]	@ (80076d0 <comunicacion+0x200>)
 8007568:	2209      	movs	r2, #9
 800756a:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 800756c:	4b59      	ldr	r3, [pc, #356]	@ (80076d4 <comunicacion+0x204>)
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	4b57      	ldr	r3, [pc, #348]	@ (80076d0 <comunicacion+0x200>)
 8007572:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 8007574:	4b58      	ldr	r3, [pc, #352]	@ (80076d8 <comunicacion+0x208>)
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	4b55      	ldr	r3, [pc, #340]	@ (80076d0 <comunicacion+0x200>)
 800757a:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 800757c:	4b54      	ldr	r3, [pc, #336]	@ (80076d0 <comunicacion+0x200>)
 800757e:	2200      	movs	r2, #0
 8007580:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 8007582:	230e      	movs	r3, #14
 8007584:	18fb      	adds	r3, r7, r3
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e015      	b.n	80075b8 <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 800758c:	4b50      	ldr	r3, [pc, #320]	@ (80076d0 <comunicacion+0x200>)
 800758e:	791a      	ldrb	r2, [r3, #4]
 8007590:	200e      	movs	r0, #14
 8007592:	183b      	adds	r3, r7, r0
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	4951      	ldr	r1, [pc, #324]	@ (80076dc <comunicacion+0x20c>)
 8007598:	5ccb      	ldrb	r3, [r1, r3]
 800759a:	0019      	movs	r1, r3
 800759c:	183b      	adds	r3, r7, r0
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	4099      	lsls	r1, r3
 80075a2:	000b      	movs	r3, r1
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	4b49      	ldr	r3, [pc, #292]	@ (80076d0 <comunicacion+0x200>)
 80075ac:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 80075ae:	183b      	adds	r3, r7, r0
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	183b      	adds	r3, r7, r0
 80075b4:	3201      	adds	r2, #1
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	230e      	movs	r3, #14
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b07      	cmp	r3, #7
 80075c0:	d9e4      	bls.n	800758c <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 80075c2:	4b43      	ldr	r3, [pc, #268]	@ (80076d0 <comunicacion+0x200>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 80075c8:	4b41      	ldr	r3, [pc, #260]	@ (80076d0 <comunicacion+0x200>)
 80075ca:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2106      	movs	r1, #6
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7ff fcdf 	bl	8006f94 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 80075d6:	4b3d      	ldr	r3, [pc, #244]	@ (80076cc <comunicacion+0x1fc>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	4b3c      	ldr	r3, [pc, #240]	@ (80076d0 <comunicacion+0x200>)
 80075de:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 80075e0:	4b3a      	ldr	r3, [pc, #232]	@ (80076cc <comunicacion+0x1fc>)
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 80075e6:	4b3e      	ldr	r3, [pc, #248]	@ (80076e0 <comunicacion+0x210>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d034      	beq.n	8007658 <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 80075ee:	4a3d      	ldr	r2, [pc, #244]	@ (80076e4 <comunicacion+0x214>)
 80075f0:	4834      	ldr	r0, [pc, #208]	@ (80076c4 <comunicacion+0x1f4>)
 80075f2:	2309      	movs	r3, #9
 80075f4:	2154      	movs	r1, #84	@ 0x54
 80075f6:	f00d fa1f 	bl	8014a38 <HAL_I2C_Master_Receive_DMA>
 80075fa:	1e03      	subs	r3, r0, #0
 80075fc:	d123      	bne.n	8007646 <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 80075fe:	230d      	movs	r3, #13
 8007600:	18fb      	adds	r3, r7, r3
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	e015      	b.n	8007634 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8007608:	4b36      	ldr	r3, [pc, #216]	@ (80076e4 <comunicacion+0x214>)
 800760a:	799b      	ldrb	r3, [r3, #6]
 800760c:	001a      	movs	r2, r3
 800760e:	200d      	movs	r0, #13
 8007610:	183b      	adds	r3, r7, r0
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	411a      	asrs	r2, r3
 8007616:	0013      	movs	r3, r2
 8007618:	2201      	movs	r2, #1
 800761a:	401a      	ands	r2, r3
 800761c:	183b      	adds	r3, r7, r0
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	1e51      	subs	r1, r2, #1
 8007622:	418a      	sbcs	r2, r1
 8007624:	b2d1      	uxtb	r1, r2
 8007626:	4a30      	ldr	r2, [pc, #192]	@ (80076e8 <comunicacion+0x218>)
 8007628:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 800762a:	183b      	adds	r3, r7, r0
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	183b      	adds	r3, r7, r0
 8007630:	3201      	adds	r2, #1
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	230d      	movs	r3, #13
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b07      	cmp	r3, #7
 800763c:	d9e4      	bls.n	8007608 <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 800763e:	4b28      	ldr	r3, [pc, #160]	@ (80076e0 <comunicacion+0x210>)
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	e033      	b.n	80076ae <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007646:	4b1f      	ldr	r3, [pc, #124]	@ (80076c4 <comunicacion+0x1f4>)
 8007648:	0018      	movs	r0, r3
 800764a:	f00d f8bf 	bl	80147cc <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 800764e:	4b1d      	ldr	r3, [pc, #116]	@ (80076c4 <comunicacion+0x1f4>)
 8007650:	0018      	movs	r0, r3
 8007652:	f00d f815 	bl	8014680 <HAL_I2C_Init>
 8007656:	e02a      	b.n	80076ae <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 8007658:	4a1d      	ldr	r2, [pc, #116]	@ (80076d0 <comunicacion+0x200>)
 800765a:	481a      	ldr	r0, [pc, #104]	@ (80076c4 <comunicacion+0x1f4>)
 800765c:	2307      	movs	r3, #7
 800765e:	2154      	movs	r1, #84	@ 0x54
 8007660:	f00d f8e4 	bl	801482c <HAL_I2C_Master_Transmit_DMA>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d103      	bne.n	8007670 <comunicacion+0x1a0>
					  FlagTx= 1;
 8007668:	4b1d      	ldr	r3, [pc, #116]	@ (80076e0 <comunicacion+0x210>)
 800766a:	2201      	movs	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e01e      	b.n	80076ae <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007670:	4b14      	ldr	r3, [pc, #80]	@ (80076c4 <comunicacion+0x1f4>)
 8007672:	0018      	movs	r0, r3
 8007674:	f00d f8aa 	bl	80147cc <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8007678:	4b12      	ldr	r3, [pc, #72]	@ (80076c4 <comunicacion+0x1f4>)
 800767a:	0018      	movs	r0, r3
 800767c:	f00d f800 	bl	8014680 <HAL_I2C_Init>
 8007680:	e015      	b.n	80076ae <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 8007682:	4b11      	ldr	r3, [pc, #68]	@ (80076c8 <comunicacion+0x1f8>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	b2da      	uxtb	r2, r3
 800768a:	4b0f      	ldr	r3, [pc, #60]	@ (80076c8 <comunicacion+0x1f8>)
 800768c:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 800768e:	4b0e      	ldr	r3, [pc, #56]	@ (80076c8 <comunicacion+0x1f8>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 8007696:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <comunicacion+0x1f4>)
 8007698:	0018      	movs	r0, r3
 800769a:	f00d f897 	bl	80147cc <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 800769e:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <comunicacion+0x1f4>)
 80076a0:	0018      	movs	r0, r3
 80076a2:	f00c ffed 	bl	8014680 <HAL_I2C_Init>
 80076a6:	e002      	b.n	80076ae <comunicacion+0x1de>
		goto fin_comu;
 80076a8:	46c0      	nop			@ (mov r8, r8)
 80076aa:	e000      	b.n	80076ae <comunicacion+0x1de>
				}
			}
fin_comu:
 80076ac:	46c0      	nop			@ (mov r8, r8)
	detecta();
 80076ae:	f000 f81d 	bl	80076ec <detecta>


}
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	20000cd8 	.word	0x20000cd8
 80076c0:	20000bb8 	.word	0x20000bb8
 80076c4:	20000450 	.word	0x20000450
 80076c8:	200021aa 	.word	0x200021aa
 80076cc:	20001f28 	.word	0x20001f28
 80076d0:	20000004 	.word	0x20000004
 80076d4:	20000cd9 	.word	0x20000cd9
 80076d8:	20000cda 	.word	0x20000cda
 80076dc:	20000cdc 	.word	0x20000cdc
 80076e0:	200003de 	.word	0x200003de
 80076e4:	200003e0 	.word	0x200003e0
 80076e8:	20000ce4 	.word	0x20000ce4

080076ec <detecta>:

void detecta(void){
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 80076f2:	4bb0      	ldr	r3, [pc, #704]	@ (80079b4 <detecta+0x2c8>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <detecta+0x12>
 80076fa:	f000 fc2f 	bl	8007f5c <detecta+0x870>
		goto dete03;
 80076fe:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 8007700:	4bad      	ldr	r3, [pc, #692]	@ (80079b8 <detecta+0x2cc>)
 8007702:	225b      	movs	r2, #91	@ 0x5b
 8007704:	5c9b      	ldrb	r3, [r3, r2]
 8007706:	001a      	movs	r2, r3
 8007708:	2301      	movs	r3, #1
 800770a:	4013      	ands	r3, r2
 800770c:	d004      	beq.n	8007718 <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 800770e:	f7ff fb47 	bl	8006da0 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007712:	f7ff fb61 	bl	8006dd8 <load_tiempoAhorro2>
	goto closedoor_b;
 8007716:	e1cc      	b.n	8007ab2 <detecta+0x3c6>
		goto detectaPuerta;
 8007718:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 800771a:	4ba7      	ldr	r3, [pc, #668]	@ (80079b8 <detecta+0x2cc>)
 800771c:	2253      	movs	r2, #83	@ 0x53
 800771e:	5c9b      	ldrb	r3, [r3, r2]
 8007720:	001a      	movs	r2, r3
 8007722:	2308      	movs	r3, #8
 8007724:	4013      	ands	r3, r2
 8007726:	d045      	beq.n	80077b4 <detecta+0xc8>
		goto detecta_j01;
 8007728:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 800772a:	1dfb      	adds	r3, r7, #7
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e03a      	b.n	80077a8 <detecta+0xbc>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 8007732:	1dfb      	adds	r3, r7, #7
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	4ba1      	ldr	r3, [pc, #644]	@ (80079bc <detecta+0x2d0>)
 8007738:	0092      	lsls	r2, r2, #2
 800773a:	58d0      	ldr	r0, [r2, r3]
 800773c:	1dfb      	adds	r3, r7, #7
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4a9f      	ldr	r2, [pc, #636]	@ (80079c0 <detecta+0x2d4>)
 8007742:	5cd3      	ldrb	r3, [r2, r3]
 8007744:	2201      	movs	r2, #1
 8007746:	0019      	movs	r1, r3
 8007748:	f00c ff23 	bl	8014592 <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 800774c:	1dbb      	adds	r3, r7, #6
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	e013      	b.n	800777c <detecta+0x90>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007754:	1dbb      	adds	r3, r7, #6
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	4b98      	ldr	r3, [pc, #608]	@ (80079bc <detecta+0x2d0>)
 800775a:	0092      	lsls	r2, r2, #2
 800775c:	58d0      	ldr	r0, [r2, r3]
 800775e:	1dbb      	adds	r3, r7, #6
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	4a97      	ldr	r2, [pc, #604]	@ (80079c0 <detecta+0x2d4>)
 8007764:	5cd3      	ldrb	r3, [r2, r3]
 8007766:	0019      	movs	r1, r3
 8007768:	f00c fef6 	bl	8014558 <HAL_GPIO_ReadPin>
 800776c:	1e03      	subs	r3, r0, #0
 800776e:	d100      	bne.n	8007772 <detecta+0x86>
 8007770:	e1cb      	b.n	8007b0a <detecta+0x41e>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007772:	1dbb      	adds	r3, r7, #6
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	1dbb      	adds	r3, r7, #6
 8007778:	3201      	adds	r2, #1
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	1dbb      	adds	r3, r7, #6
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b04      	cmp	r3, #4
 8007782:	d9e7      	bls.n	8007754 <detecta+0x68>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 8007784:	1dfb      	adds	r3, r7, #7
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	4b8c      	ldr	r3, [pc, #560]	@ (80079bc <detecta+0x2d0>)
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	58d0      	ldr	r0, [r2, r3]
 800778e:	1dfb      	adds	r3, r7, #7
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	4a8b      	ldr	r2, [pc, #556]	@ (80079c0 <detecta+0x2d4>)
 8007794:	5cd3      	ldrb	r3, [r2, r3]
 8007796:	2200      	movs	r2, #0
 8007798:	0019      	movs	r1, r3
 800779a:	f00c fefa 	bl	8014592 <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 800779e:	1dfb      	adds	r3, r7, #7
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	1dfb      	adds	r3, r7, #7
 80077a4:	3201      	adds	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	1dfb      	adds	r3, r7, #7
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d9c0      	bls.n	8007732 <detecta+0x46>
	}
	goto detecta_j02;
 80077b0:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 80077b2:	e174      	b.n	8007a9e <detecta+0x3b2>
	goto switch_no;
 80077b4:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 80077b6:	4b83      	ldr	r3, [pc, #524]	@ (80079c4 <detecta+0x2d8>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	425a      	negs	r2, r3
 80077bc:	4153      	adcs	r3, r2
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	001a      	movs	r2, r3
 80077c2:	4b81      	ldr	r3, [pc, #516]	@ (80079c8 <detecta+0x2dc>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4013      	ands	r3, r2
 80077c8:	d022      	beq.n	8007810 <detecta+0x124>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 80077ca:	4b80      	ldr	r3, [pc, #512]	@ (80079cc <detecta+0x2e0>)
 80077cc:	6858      	ldr	r0, [r3, #4]
 80077ce:	4b80      	ldr	r3, [pc, #512]	@ (80079d0 <detecta+0x2e4>)
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2201      	movs	r2, #1
 80077d4:	0019      	movs	r1, r3
 80077d6:	f00c fedc 	bl	8014592 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80077da:	200a      	movs	r0, #10
 80077dc:	f00a fb22 	bl	8011e24 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 80077e0:	4b76      	ldr	r3, [pc, #472]	@ (80079bc <detecta+0x2d0>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4b76      	ldr	r3, [pc, #472]	@ (80079c0 <detecta+0x2d4>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	0019      	movs	r1, r3
 80077ea:	0010      	movs	r0, r2
 80077ec:	f00c feb4 	bl	8014558 <HAL_GPIO_ReadPin>
 80077f0:	1e03      	subs	r3, r0, #0
 80077f2:	d002      	beq.n	80077fa <detecta+0x10e>
			FlagPuertaX[4] = 1;// Puerta Abierta
 80077f4:	4b77      	ldr	r3, [pc, #476]	@ (80079d4 <detecta+0x2e8>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 80077fa:	4b74      	ldr	r3, [pc, #464]	@ (80079cc <detecta+0x2e0>)
 80077fc:	6858      	ldr	r0, [r3, #4]
 80077fe:	4b74      	ldr	r3, [pc, #464]	@ (80079d0 <detecta+0x2e4>)
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	2201      	movs	r2, #1
 8007804:	0019      	movs	r1, r3
 8007806:	f00c fec4 	bl	8014592 <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 800780a:	4b6f      	ldr	r3, [pc, #444]	@ (80079c8 <detecta+0x2dc>)
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 8007810:	4b6c      	ldr	r3, [pc, #432]	@ (80079c4 <detecta+0x2d8>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b0a      	cmp	r3, #10
 8007816:	d000      	beq.n	800781a <detecta+0x12e>
 8007818:	e083      	b.n	8007922 <detecta+0x236>
		for(uint8_t Px = 0; Px < 5; Px++){
 800781a:	1d7b      	adds	r3, r7, #5
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e048      	b.n	80078b4 <detecta+0x1c8>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007822:	1d7b      	adds	r3, r7, #5
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	4b65      	ldr	r3, [pc, #404]	@ (80079bc <detecta+0x2d0>)
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	58d0      	ldr	r0, [r2, r3]
 800782c:	1d7b      	adds	r3, r7, #5
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4a63      	ldr	r2, [pc, #396]	@ (80079c0 <detecta+0x2d4>)
 8007832:	5cd3      	ldrb	r3, [r2, r3]
 8007834:	0019      	movs	r1, r3
 8007836:	f00c fe8f 	bl	8014558 <HAL_GPIO_ReadPin>
 800783a:	1e03      	subs	r3, r0, #0
 800783c:	d00f      	beq.n	800785e <detecta+0x172>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 800783e:	4b66      	ldr	r3, [pc, #408]	@ (80079d8 <detecta+0x2ec>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	001a      	movs	r2, r3
 8007844:	0013      	movs	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	189a      	adds	r2, r3, r2
 800784a:	1d7b      	adds	r3, r7, #5
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	4a62      	ldr	r2, [pc, #392]	@ (80079dc <detecta+0x2f0>)
 8007852:	5cd2      	ldrb	r2, [r2, r3]
 8007854:	3201      	adds	r2, #1
 8007856:	b2d1      	uxtb	r1, r2
 8007858:	4a60      	ldr	r2, [pc, #384]	@ (80079dc <detecta+0x2f0>)
 800785a:	54d1      	strb	r1, [r2, r3]
 800785c:	e025      	b.n	80078aa <detecta+0x1be>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 800785e:	1d7b      	adds	r3, r7, #5
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	4b56      	ldr	r3, [pc, #344]	@ (80079bc <detecta+0x2d0>)
 8007864:	0092      	lsls	r2, r2, #2
 8007866:	58d0      	ldr	r0, [r2, r3]
 8007868:	1d7b      	adds	r3, r7, #5
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	4a54      	ldr	r2, [pc, #336]	@ (80079c0 <detecta+0x2d4>)
 800786e:	5cd3      	ldrb	r3, [r2, r3]
 8007870:	0019      	movs	r1, r3
 8007872:	f00c fe71 	bl	8014558 <HAL_GPIO_ReadPin>
 8007876:	1e03      	subs	r3, r0, #0
 8007878:	d117      	bne.n	80078aa <detecta+0x1be>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 800787a:	4b57      	ldr	r3, [pc, #348]	@ (80079d8 <detecta+0x2ec>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	001a      	movs	r2, r3
 8007880:	0013      	movs	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	189a      	adds	r2, r3, r2
 8007886:	1d7b      	adds	r3, r7, #5
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	18d3      	adds	r3, r2, r3
 800788c:	4a51      	ldr	r2, [pc, #324]	@ (80079d4 <detecta+0x2e8>)
 800788e:	2100      	movs	r1, #0
 8007890:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 8007892:	4b51      	ldr	r3, [pc, #324]	@ (80079d8 <detecta+0x2ec>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	001a      	movs	r2, r3
 8007898:	0013      	movs	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	189a      	adds	r2, r3, r2
 800789e:	1d7b      	adds	r3, r7, #5
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	18d3      	adds	r3, r2, r3
 80078a4:	4a4d      	ldr	r2, [pc, #308]	@ (80079dc <detecta+0x2f0>)
 80078a6:	2100      	movs	r1, #0
 80078a8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 80078aa:	1d7b      	adds	r3, r7, #5
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	1d7b      	adds	r3, r7, #5
 80078b0:	3201      	adds	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	1d7b      	adds	r3, r7, #5
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d9b2      	bls.n	8007822 <detecta+0x136>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 80078bc:	4b46      	ldr	r3, [pc, #280]	@ (80079d8 <detecta+0x2ec>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	001a      	movs	r2, r3
 80078c2:	4b42      	ldr	r3, [pc, #264]	@ (80079cc <detecta+0x2e0>)
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	58d0      	ldr	r0, [r2, r3]
 80078c8:	4b43      	ldr	r3, [pc, #268]	@ (80079d8 <detecta+0x2ec>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	001a      	movs	r2, r3
 80078ce:	4b40      	ldr	r3, [pc, #256]	@ (80079d0 <detecta+0x2e4>)
 80078d0:	5c9b      	ldrb	r3, [r3, r2]
 80078d2:	2200      	movs	r2, #0
 80078d4:	0019      	movs	r1, r3
 80078d6:	f00c fe5c 	bl	8014592 <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 80078da:	4b3f      	ldr	r3, [pc, #252]	@ (80079d8 <detecta+0x2ec>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d805      	bhi.n	80078ee <detecta+0x202>
			countMPx++;
 80078e2:	4b3d      	ldr	r3, [pc, #244]	@ (80079d8 <detecta+0x2ec>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	3301      	adds	r3, #1
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	4b3b      	ldr	r3, [pc, #236]	@ (80079d8 <detecta+0x2ec>)
 80078ec:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 80078ee:	4b3a      	ldr	r3, [pc, #232]	@ (80079d8 <detecta+0x2ec>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d102      	bne.n	80078fc <detecta+0x210>
			countMPx = 0;
 80078f6:	4b38      	ldr	r3, [pc, #224]	@ (80079d8 <detecta+0x2ec>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 80078fc:	4b36      	ldr	r3, [pc, #216]	@ (80079d8 <detecta+0x2ec>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	001a      	movs	r2, r3
 8007902:	4b32      	ldr	r3, [pc, #200]	@ (80079cc <detecta+0x2e0>)
 8007904:	0092      	lsls	r2, r2, #2
 8007906:	58d0      	ldr	r0, [r2, r3]
 8007908:	4b33      	ldr	r3, [pc, #204]	@ (80079d8 <detecta+0x2ec>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	001a      	movs	r2, r3
 800790e:	4b30      	ldr	r3, [pc, #192]	@ (80079d0 <detecta+0x2e4>)
 8007910:	5c9b      	ldrb	r3, [r3, r2]
 8007912:	2201      	movs	r2, #1
 8007914:	0019      	movs	r1, r3
 8007916:	f00c fe3c 	bl	8014592 <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 800791a:	4b2a      	ldr	r3, [pc, #168]	@ (80079c4 <detecta+0x2d8>)
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e009      	b.n	8007936 <detecta+0x24a>
	}else if(countWaitPuerta < 10){
 8007922:	4b28      	ldr	r3, [pc, #160]	@ (80079c4 <detecta+0x2d8>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b09      	cmp	r3, #9
 8007928:	d805      	bhi.n	8007936 <detecta+0x24a>
		countWaitPuerta++;
 800792a:	4b26      	ldr	r3, [pc, #152]	@ (80079c4 <detecta+0x2d8>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	b2da      	uxtb	r2, r3
 8007932:	4b24      	ldr	r3, [pc, #144]	@ (80079c4 <detecta+0x2d8>)
 8007934:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007936:	1d3b      	adds	r3, r7, #4
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	e0a5      	b.n	8007a8a <detecta+0x39e>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 800793e:	1cfb      	adds	r3, r7, #3
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	e097      	b.n	8007a76 <detecta+0x38a>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 8007946:	1d3b      	adds	r3, r7, #4
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	0013      	movs	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	189a      	adds	r2, r3, r2
 8007950:	1cfb      	adds	r3, r7, #3
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	18d3      	adds	r3, r2, r3
 8007956:	4a21      	ldr	r2, [pc, #132]	@ (80079dc <detecta+0x2f0>)
 8007958:	5cd3      	ldrb	r3, [r2, r3]
 800795a:	1e5a      	subs	r2, r3, #1
 800795c:	4193      	sbcs	r3, r2
 800795e:	b2da      	uxtb	r2, r3
 8007960:	4b18      	ldr	r3, [pc, #96]	@ (80079c4 <detecta+0x2d8>)
 8007962:	7819      	ldrb	r1, [r3, #0]
 8007964:	2009      	movs	r0, #9
 8007966:	2300      	movs	r3, #0
 8007968:	4288      	cmp	r0, r1
 800796a:	415b      	adcs	r3, r3
 800796c:	b2db      	uxtb	r3, r3
 800796e:	4013      	ands	r3, r2
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d100      	bne.n	8007978 <detecta+0x28c>
 8007976:	e079      	b.n	8007a6c <detecta+0x380>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007978:	1cfb      	adds	r3, r7, #3
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	4b0f      	ldr	r3, [pc, #60]	@ (80079bc <detecta+0x2d0>)
 800797e:	0092      	lsls	r2, r2, #2
 8007980:	58d0      	ldr	r0, [r2, r3]
 8007982:	1cfb      	adds	r3, r7, #3
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	4a0e      	ldr	r2, [pc, #56]	@ (80079c0 <detecta+0x2d4>)
 8007988:	5cd3      	ldrb	r3, [r2, r3]
 800798a:	0019      	movs	r1, r3
 800798c:	f00c fde4 	bl	8014558 <HAL_GPIO_ReadPin>
 8007990:	1e03      	subs	r3, r0, #0
 8007992:	d025      	beq.n	80079e0 <detecta+0x2f4>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	0013      	movs	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	189a      	adds	r2, r3, r2
 800799e:	1cfb      	adds	r3, r7, #3
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	18d3      	adds	r3, r2, r3
 80079a4:	4a0d      	ldr	r2, [pc, #52]	@ (80079dc <detecta+0x2f0>)
 80079a6:	5cd2      	ldrb	r2, [r2, r3]
 80079a8:	3201      	adds	r2, #1
 80079aa:	b2d1      	uxtb	r1, r2
 80079ac:	4a0b      	ldr	r2, [pc, #44]	@ (80079dc <detecta+0x2f0>)
 80079ae:	54d1      	strb	r1, [r2, r3]
 80079b0:	e03a      	b.n	8007a28 <detecta+0x33c>
 80079b2:	46c0      	nop			@ (mov r8, r8)
 80079b4:	20000bf8 	.word	0x20000bf8
 80079b8:	200000b8 	.word	0x200000b8
 80079bc:	200001f4 	.word	0x200001f4
 80079c0:	20000208 	.word	0x20000208
 80079c4:	200021d4 	.word	0x200021d4
 80079c8:	20000224 	.word	0x20000224
 80079cc:	20000210 	.word	0x20000210
 80079d0:	20000220 	.word	0x20000220
 80079d4:	200021ac 	.word	0x200021ac
 80079d8:	200021d5 	.word	0x200021d5
 80079dc:	200021c0 	.word	0x200021c0
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 80079e0:	1cfb      	adds	r3, r7, #3
 80079e2:	781a      	ldrb	r2, [r3, #0]
 80079e4:	4bcc      	ldr	r3, [pc, #816]	@ (8007d18 <detecta+0x62c>)
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	58d0      	ldr	r0, [r2, r3]
 80079ea:	1cfb      	adds	r3, r7, #3
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	4acb      	ldr	r2, [pc, #812]	@ (8007d1c <detecta+0x630>)
 80079f0:	5cd3      	ldrb	r3, [r2, r3]
 80079f2:	0019      	movs	r1, r3
 80079f4:	f00c fdb0 	bl	8014558 <HAL_GPIO_ReadPin>
 80079f8:	1e03      	subs	r3, r0, #0
 80079fa:	d115      	bne.n	8007a28 <detecta+0x33c>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	0013      	movs	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	189a      	adds	r2, r3, r2
 8007a06:	1cfb      	adds	r3, r7, #3
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	18d3      	adds	r3, r2, r3
 8007a0c:	4ac4      	ldr	r2, [pc, #784]	@ (8007d20 <detecta+0x634>)
 8007a0e:	2100      	movs	r1, #0
 8007a10:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	781a      	ldrb	r2, [r3, #0]
 8007a16:	0013      	movs	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	189a      	adds	r2, r3, r2
 8007a1c:	1cfb      	adds	r3, r7, #3
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	18d3      	adds	r3, r2, r3
 8007a22:	4ac0      	ldr	r2, [pc, #768]	@ (8007d24 <detecta+0x638>)
 8007a24:	2100      	movs	r1, #0
 8007a26:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	0013      	movs	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	189a      	adds	r2, r3, r2
 8007a32:	1cfb      	adds	r3, r7, #3
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	18d3      	adds	r3, r2, r3
 8007a38:	4aba      	ldr	r2, [pc, #744]	@ (8007d24 <detecta+0x638>)
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	2b0a      	cmp	r3, #10
 8007a3e:	d115      	bne.n	8007a6c <detecta+0x380>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8007a40:	1d3b      	adds	r3, r7, #4
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	0013      	movs	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	189a      	adds	r2, r3, r2
 8007a4a:	1cfb      	adds	r3, r7, #3
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	18d3      	adds	r3, r2, r3
 8007a50:	4ab3      	ldr	r2, [pc, #716]	@ (8007d20 <detecta+0x634>)
 8007a52:	2101      	movs	r1, #1
 8007a54:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	0013      	movs	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	189a      	adds	r2, r3, r2
 8007a60:	1cfb      	adds	r3, r7, #3
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	18d3      	adds	r3, r2, r3
 8007a66:	4aaf      	ldr	r2, [pc, #700]	@ (8007d24 <detecta+0x638>)
 8007a68:	2100      	movs	r1, #0
 8007a6a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007a6c:	1cfb      	adds	r3, r7, #3
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	1cfb      	adds	r3, r7, #3
 8007a72:	3201      	adds	r2, #1
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	1cfb      	adds	r3, r7, #3
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d800      	bhi.n	8007a80 <detecta+0x394>
 8007a7e:	e762      	b.n	8007946 <detecta+0x25a>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007a80:	1d3b      	adds	r3, r7, #4
 8007a82:	781a      	ldrb	r2, [r3, #0]
 8007a84:	1d3b      	adds	r3, r7, #4
 8007a86:	3201      	adds	r2, #1
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	1d3b      	adds	r3, r7, #4
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d800      	bhi.n	8007a94 <detecta+0x3a8>
 8007a92:	e754      	b.n	800793e <detecta+0x252>
			}
		}
	}


	if(FlagPuertaX[4]){
 8007a94:	4ba2      	ldr	r3, [pc, #648]	@ (8007d20 <detecta+0x634>)
 8007a96:	791b      	ldrb	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d138      	bne.n	8007b0e <detecta+0x422>
		goto opendoor;
	}
	goto detecta_j03;
 8007a9c:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 8007a9e:	4ba2      	ldr	r3, [pc, #648]	@ (8007d28 <detecta+0x63c>)
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7ff fb16 	bl	80070d2 <decwreg>
	if(debdoor == 0){
 8007aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8007d28 <detecta+0x63c>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d000      	beq.n	8007ab0 <detecta+0x3c4>
 8007aae:	e0a2      	b.n	8007bf6 <detecta+0x50a>
		goto closedoor_b;
 8007ab0:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 8007ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8007d2c <detecta+0x640>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 8007ab8:	4b9d      	ldr	r3, [pc, #628]	@ (8007d30 <detecta+0x644>)
 8007aba:	2248      	movs	r2, #72	@ 0x48
 8007abc:	5c9a      	ldrb	r2, [r3, r2]
 8007abe:	4b9d      	ldr	r3, [pc, #628]	@ (8007d34 <detecta+0x648>)
 8007ac0:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 8007ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8007d38 <detecta+0x64c>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 8007ac8:	f7fe fd14 	bl	80064f4 <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 8007acc:	4b9b      	ldr	r3, [pc, #620]	@ (8007d3c <detecta+0x650>)
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d100      	bne.n	8007ad6 <detecta+0x3ea>
 8007ad4:	e091      	b.n	8007bfa <detecta+0x50e>
		goto detecta_j04;
 8007ad6:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 8007ad8:	4b98      	ldr	r3, [pc, #608]	@ (8007d3c <detecta+0x650>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 8007ade:	4b97      	ldr	r3, [pc, #604]	@ (8007d3c <detecta+0x650>)
 8007ae0:	78db      	ldrb	r3, [r3, #3]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4053      	eors	r3, r2
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d100      	bne.n	8007aee <detecta+0x402>
 8007aec:	e087      	b.n	8007bfe <detecta+0x512>
		goto det_j04;
 8007aee:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 8007af0:	f7ff f98e 	bl	8006e10 <load_timeNoct>
	durdhh=0;
 8007af4:	4b92      	ldr	r3, [pc, #584]	@ (8007d40 <detecta+0x654>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	801a      	strh	r2, [r3, #0]
	//durdhl=0;
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 8007afa:	4b90      	ldr	r3, [pc, #576]	@ (8007d3c <detecta+0x650>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 8007b00:	4b90      	ldr	r3, [pc, #576]	@ (8007d44 <detecta+0x658>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8007b06:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 8007b08:	e05e      	b.n	8007bc8 <detecta+0x4dc>
				goto opendoor;
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	e000      	b.n	8007b10 <detecta+0x424>
		goto opendoor;
 8007b0e:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 8007b10:	4b85      	ldr	r3, [pc, #532]	@ (8007d28 <detecta+0x63c>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	b25b      	sxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db06      	blt.n	8007b28 <detecta+0x43c>
	debdoor++;
 8007b1a:	4b83      	ldr	r3, [pc, #524]	@ (8007d28 <detecta+0x63c>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	4b81      	ldr	r3, [pc, #516]	@ (8007d28 <detecta+0x63c>)
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	e000      	b.n	8007b2a <detecta+0x43e>
		goto noinc;
 8007b28:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 8007b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8007d28 <detecta+0x63c>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b25b      	sxtb	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da29      	bge.n	8007b88 <detecta+0x49c>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 8007b34:	4b7d      	ldr	r3, [pc, #500]	@ (8007d2c <detecta+0x640>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 8007b3a:	4b83      	ldr	r3, [pc, #524]	@ (8007d48 <detecta+0x65c>)
 8007b3c:	2205      	movs	r2, #5
 8007b3e:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 8007b40:	4b7b      	ldr	r3, [pc, #492]	@ (8007d30 <detecta+0x644>)
 8007b42:	224f      	movs	r2, #79	@ 0x4f
 8007b44:	5c9a      	ldrb	r2, [r3, r2]
 8007b46:	4b81      	ldr	r3, [pc, #516]	@ (8007d4c <detecta+0x660>)
 8007b48:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 8007b4a:	4b81      	ldr	r3, [pc, #516]	@ (8007d50 <detecta+0x664>)
 8007b4c:	2205      	movs	r2, #5
 8007b4e:	701a      	strb	r2, [r3, #0]
	if(reePlantilla[eetimepaf]!= 0){
 8007b50:	4b80      	ldr	r3, [pc, #512]	@ (8007d54 <detecta+0x668>)
 8007b52:	2248      	movs	r2, #72	@ 0x48
 8007b54:	5c9b      	ldrb	r3, [r3, r2]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d103      	bne.n	8007b62 <detecta+0x476>
	cnt_pta_fan=99;
 8007b5a:	4b76      	ldr	r3, [pc, #472]	@ (8007d34 <detecta+0x648>)
 8007b5c:	2263      	movs	r2, #99	@ 0x63
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	e000      	b.n	8007b64 <detecta+0x478>
		goto no_ld_timepaf;
 8007b62:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8007b64:	4b75      	ldr	r3, [pc, #468]	@ (8007d3c <detecta+0x650>)
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00f      	beq.n	8007b8c <detecta+0x4a0>
		goto detecta_j05;
 8007b6c:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 8007b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d58 <detecta+0x66c>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 8007b74:	4b71      	ldr	r3, [pc, #452]	@ (8007d3c <detecta+0x650>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 8007b7a:	4b72      	ldr	r3, [pc, #456]	@ (8007d44 <detecta+0x658>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 8007b80:	4b76      	ldr	r3, [pc, #472]	@ (8007d5c <detecta+0x670>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 8007b86:	e01f      	b.n	8007bc8 <detecta+0x4dc>
		goto revnocman;
 8007b88:	46c0      	nop			@ (mov r8, r8)
 8007b8a:	e000      	b.n	8007b8e <detecta+0x4a2>
	goto revnocman;
 8007b8c:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 8007b8e:	4b74      	ldr	r3, [pc, #464]	@ (8007d60 <detecta+0x674>)
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d113      	bne.n	8007bbe <detecta+0x4d2>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 8007b96:	4b67      	ldr	r3, [pc, #412]	@ (8007d34 <detecta+0x648>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <detecta+0x4c4>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 8007b9e:	4b64      	ldr	r3, [pc, #400]	@ (8007d30 <detecta+0x644>)
 8007ba0:	2249      	movs	r2, #73	@ 0x49
 8007ba2:	5c9b      	ldrb	r3, [r3, r2]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <detecta+0x4c8>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 8007ba8:	4b63      	ldr	r3, [pc, #396]	@ (8007d38 <detecta+0x64c>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 8007bae:	e00b      	b.n	8007bc8 <detecta+0x4dc>
		goto cancelAlarmPA;
 8007bb0:	46c0      	nop			@ (mov r8, r8)
 8007bb2:	e000      	b.n	8007bb6 <detecta+0x4ca>
		goto cancelAlarmPA;
 8007bb4:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 8007bb6:	4b60      	ldr	r3, [pc, #384]	@ (8007d38 <detecta+0x64c>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	711a      	strb	r2, [r3, #4]
 8007bbc:	e004      	b.n	8007bc8 <detecta+0x4dc>
		goto ahorro_off;
 8007bbe:	46c0      	nop			@ (mov r8, r8)
 8007bc0:	e002      	b.n	8007bc8 <detecta+0x4dc>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 8007bc2:	46c0      	nop			@ (mov r8, r8)
 8007bc4:	e000      	b.n	8007bc8 <detecta+0x4dc>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 8007bc6:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 8007bc8:	4b58      	ldr	r3, [pc, #352]	@ (8007d2c <detecta+0x640>)
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4053      	eors	r3, r2
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <detecta+0x4f2>
	cntdpysp=0xF0;
 8007bd6:	4b63      	ldr	r3, [pc, #396]	@ (8007d64 <detecta+0x678>)
 8007bd8:	22f0      	movs	r2, #240	@ 0xf0
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e000      	b.n	8007be0 <detecta+0x4f4>
		goto ahorro_off_00;
 8007bde:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 8007be0:	4b52      	ldr	r3, [pc, #328]	@ (8007d2c <detecta+0x640>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 8007be6:	4b51      	ldr	r3, [pc, #324]	@ (8007d2c <detecta+0x640>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 8007bec:	f7ff f8d8 	bl	8006da0 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007bf0:	f7ff f8f2 	bl	8006dd8 <load_tiempoAhorro2>
	goto fin_detecta;
 8007bf4:	e047      	b.n	8007c86 <detecta+0x59a>
		goto revbotones;
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	e002      	b.n	8007c00 <detecta+0x514>
	goto revbotones;
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	e000      	b.n	8007c00 <detecta+0x514>
	goto revbotones;
 8007bfe:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 8007c00:	4b4a      	ldr	r3, [pc, #296]	@ (8007d2c <detecta+0x640>)
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <detecta+0x536>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8007c08:	f7fe fc3e 	bl	8006488 <tdev_to_Word>
 8007c0c:	0003      	movs	r3, r0
 8007c0e:	b21c      	sxth	r4, r3
 8007c10:	4b55      	ldr	r3, [pc, #340]	@ (8007d68 <detecta+0x67c>)
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7fe fc50 	bl	80064b8 <TwoByteInArrayToWord>
 8007c18:	0003      	movs	r3, r0
 8007c1a:	b21b      	sxth	r3, r3
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	dad0      	bge.n	8007bc2 <detecta+0x4d6>
ask_ahorro:
 8007c20:	e000      	b.n	8007c24 <detecta+0x538>
		goto ask_ahorro;
 8007c22:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 8007c24:	4b41      	ldr	r3, [pc, #260]	@ (8007d2c <detecta+0x640>)
 8007c26:	79db      	ldrb	r3, [r3, #7]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0cc      	beq.n	8007bc6 <detecta+0x4da>
		goto ask_time_ahorro;
 8007c2c:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d6c <detecta+0x680>)
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <detecta+0x55c>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8007c36:	f7ff f8cf 	bl	8006dd8 <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8007c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8007d2c <detecta+0x640>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8007c40:	4b3a      	ldr	r3, [pc, #232]	@ (8007d2c <detecta+0x640>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8007c46:	e01e      	b.n	8007c86 <detecta+0x59a>
		goto modoAhorro1_ON;
 8007c48:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8007c4a:	4b38      	ldr	r3, [pc, #224]	@ (8007d2c <detecta+0x640>)
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <detecta+0x56e>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8007c52:	4b44      	ldr	r3, [pc, #272]	@ (8007d64 <detecta+0x678>)
 8007c54:	22f0      	movs	r2, #240	@ 0xf0
 8007c56:	701a      	strb	r2, [r3, #0]
 8007c58:	e000      	b.n	8007c5c <detecta+0x570>
		goto modoAhorro1_ON_2;
 8007c5a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8007c5c:	4b33      	ldr	r3, [pc, #204]	@ (8007d2c <detecta+0x640>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8007c62:	4b43      	ldr	r3, [pc, #268]	@ (8007d70 <detecta+0x684>)
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10c      	bne.n	8007c84 <detecta+0x598>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8007c6a:	4b30      	ldr	r3, [pc, #192]	@ (8007d2c <detecta+0x640>)
 8007c6c:	789b      	ldrb	r3, [r3, #2]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <detecta+0x58e>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8007c72:	4b3c      	ldr	r3, [pc, #240]	@ (8007d64 <detecta+0x678>)
 8007c74:	22f0      	movs	r2, #240	@ 0xf0
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e000      	b.n	8007c7c <detecta+0x590>
		goto modoAhorro1_ON_3;
 8007c7a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d2c <detecta+0x640>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	709a      	strb	r2, [r3, #2]
 8007c82:	e000      	b.n	8007c86 <detecta+0x59a>
		goto fin_detecta;
 8007c84:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8007c86:	1cbb      	adds	r3, r7, #2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e013      	b.n	8007cb6 <detecta+0x5ca>
		btn_pr[k] = 0;
 8007c8e:	1cbb      	adds	r3, r7, #2
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	4a38      	ldr	r2, [pc, #224]	@ (8007d74 <detecta+0x688>)
 8007c94:	2100      	movs	r1, #0
 8007c96:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007c98:	1cbb      	adds	r3, r7, #2
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4a36      	ldr	r2, [pc, #216]	@ (8007d78 <detecta+0x68c>)
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8007ca2:	1cbb      	adds	r3, r7, #2
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	4a35      	ldr	r2, [pc, #212]	@ (8007d7c <detecta+0x690>)
 8007ca8:	2100      	movs	r1, #0
 8007caa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007cac:	1cbb      	adds	r3, r7, #2
 8007cae:	781a      	ldrb	r2, [r3, #0]
 8007cb0:	1cbb      	adds	r3, r7, #2
 8007cb2:	3201      	adds	r2, #1
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	1cbb      	adds	r3, r7, #2
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b07      	cmp	r3, #7
 8007cbc:	d9e7      	bls.n	8007c8e <detecta+0x5a2>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8007cbe:	4b26      	ldr	r3, [pc, #152]	@ (8007d58 <detecta+0x66c>)
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d117      	bne.n	8007cf6 <detecta+0x60a>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8007cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8007d80 <detecta+0x694>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4053      	eors	r3, r2
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d112      	bne.n	8007cfa <detecta+0x60e>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8007cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8007d80 <detecta+0x694>)
 8007cd6:	789b      	ldrb	r3, [r3, #2]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4053      	eors	r3, r2
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <detecta+0x612>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8007ce2:	4b28      	ldr	r3, [pc, #160]	@ (8007d84 <detecta+0x698>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <detecta+0x606>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8007cea:	4b24      	ldr	r3, [pc, #144]	@ (8007d7c <detecta+0x690>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8007cf0:	e13d      	b.n	8007f6e <detecta+0x882>
		goto findet_jp;
 8007cf2:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8007cf4:	e13b      	b.n	8007f6e <detecta+0x882>
		goto no2btn;
 8007cf6:	46c0      	nop			@ (mov r8, r8)
 8007cf8:	e002      	b.n	8007d00 <detecta+0x614>
		goto no2btn;
 8007cfa:	46c0      	nop			@ (mov r8, r8)
 8007cfc:	e000      	b.n	8007d00 <detecta+0x614>
		goto no2btn;
 8007cfe:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8007d00:	4b20      	ldr	r3, [pc, #128]	@ (8007d84 <detecta+0x698>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b95      	cmp	r3, #149	@ 0x95
 8007d06:	d83f      	bhi.n	8007d88 <detecta+0x69c>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8007d08:	4b1e      	ldr	r3, [pc, #120]	@ (8007d84 <detecta+0x698>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	4b1c      	ldr	r3, [pc, #112]	@ (8007d84 <detecta+0x698>)
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e039      	b.n	8007d8a <detecta+0x69e>
 8007d16:	46c0      	nop			@ (mov r8, r8)
 8007d18:	200001f4 	.word	0x200001f4
 8007d1c:	20000208 	.word	0x20000208
 8007d20:	200021ac 	.word	0x200021ac
 8007d24:	200021c0 	.word	0x200021c0
 8007d28:	20000c21 	.word	0x20000c21
 8007d2c:	20000c9c 	.word	0x20000c9c
 8007d30:	200000b8 	.word	0x200000b8
 8007d34:	20000c87 	.word	0x20000c87
 8007d38:	20000be8 	.word	0x20000be8
 8007d3c:	20000bd8 	.word	0x20000bd8
 8007d40:	20000c18 	.word	0x20000c18
 8007d44:	20000bf0 	.word	0x20000bf0
 8007d48:	2000215a 	.word	0x2000215a
 8007d4c:	200021a4 	.word	0x200021a4
 8007d50:	20000bca 	.word	0x20000bca
 8007d54:	20000cec 	.word	0x20000cec
 8007d58:	20000c48 	.word	0x20000c48
 8007d5c:	20000ca4 	.word	0x20000ca4
 8007d60:	20000bc6 	.word	0x20000bc6
 8007d64:	20000c22 	.word	0x20000c22
 8007d68:	200000e1 	.word	0x200000e1
 8007d6c:	20000c90 	.word	0x20000c90
 8007d70:	20000c92 	.word	0x20000c92
 8007d74:	20000c50 	.word	0x20000c50
 8007d78:	20000bfc 	.word	0x20000bfc
 8007d7c:	20000c78 	.word	0x20000c78
 8007d80:	20000ce4 	.word	0x20000ce4
 8007d84:	20000c76 	.word	0x20000c76
		goto ask_btn2_f3;
 8007d88:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8007d8a:	4b9e      	ldr	r3, [pc, #632]	@ (8008004 <detecta+0x918>)
 8007d8c:	785b      	ldrb	r3, [r3, #1]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d114      	bne.n	8007dbc <detecta+0x6d0>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8007d92:	4b9d      	ldr	r3, [pc, #628]	@ (8008008 <detecta+0x91c>)
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2201      	movs	r2, #1
 8007d98:	4053      	eors	r3, r2
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10f      	bne.n	8007dc0 <detecta+0x6d4>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8007da0:	4b9a      	ldr	r3, [pc, #616]	@ (800800c <detecta+0x920>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d117      	bne.n	8007dd8 <detecta+0x6ec>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8007da8:	4b99      	ldr	r3, [pc, #612]	@ (8008010 <detecta+0x924>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 8007dae:	4b99      	ldr	r3, [pc, #612]	@ (8008014 <detecta+0x928>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 8007db4:	4b95      	ldr	r3, [pc, #596]	@ (800800c <detecta+0x920>)
 8007db6:	221e      	movs	r2, #30
 8007db8:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8007dba:	e79b      	b.n	8007cf4 <detecta+0x608>
		goto noBtn2F3;
 8007dbc:	46c0      	nop			@ (mov r8, r8)
 8007dbe:	e000      	b.n	8007dc2 <detecta+0x6d6>
		goto noBtn2F3;
 8007dc0:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 8007dc2:	4b92      	ldr	r3, [pc, #584]	@ (800800c <detecta+0x920>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b1d      	cmp	r3, #29
 8007dc8:	d808      	bhi.n	8007ddc <detecta+0x6f0>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8007dca:	4b90      	ldr	r3, [pc, #576]	@ (800800c <detecta+0x920>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800800c <detecta+0x920>)
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e002      	b.n	8007dde <detecta+0x6f2>
		goto ask_btn1;
 8007dd8:	46c0      	nop			@ (mov r8, r8)
 8007dda:	e000      	b.n	8007dde <detecta+0x6f2>
		goto ask_btn1;
 8007ddc:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 8007dde:	4b8a      	ldr	r3, [pc, #552]	@ (8008008 <detecta+0x91c>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2201      	movs	r2, #1
 8007de4:	4053      	eors	r3, r2
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d12a      	bne.n	8007e42 <detecta+0x756>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8007dec:	4b8a      	ldr	r3, [pc, #552]	@ (8008018 <detecta+0x92c>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d106      	bne.n	8007e02 <detecta+0x716>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8007df4:	4b89      	ldr	r3, [pc, #548]	@ (800801c <detecta+0x930>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8007dfa:	4b89      	ldr	r3, [pc, #548]	@ (8008020 <detecta+0x934>)
 8007dfc:	2214      	movs	r2, #20
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	e000      	b.n	8007e04 <detecta+0x718>
		goto ask_btn1_sec;
 8007e02:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8007e04:	4b7f      	ldr	r3, [pc, #508]	@ (8008004 <detecta+0x918>)
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	4053      	eors	r3, r2
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <detecta+0x736>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 8007e12:	4b84      	ldr	r3, [pc, #528]	@ (8008024 <detecta+0x938>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e18:	d822      	bhi.n	8007e60 <detecta+0x774>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8007e1a:	4b80      	ldr	r3, [pc, #512]	@ (800801c <detecta+0x930>)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	705a      	strb	r2, [r3, #1]
	goto findet;
 8007e20:	e0a5      	b.n	8007f6e <detecta+0x882>
		goto func_sec_norm_btn1;
 8007e22:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8007e24:	4b80      	ldr	r3, [pc, #512]	@ (8008028 <detecta+0x93c>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11b      	bne.n	8007e64 <detecta+0x778>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8007e2c:	4b7d      	ldr	r3, [pc, #500]	@ (8008024 <detecta+0x938>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d119      	bne.n	8007e68 <detecta+0x77c>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8007e34:	4b79      	ldr	r3, [pc, #484]	@ (800801c <detecta+0x930>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8007e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008028 <detecta+0x93c>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 8007e40:	e095      	b.n	8007f6e <detecta+0x882>
		goto no_btn1;
 8007e42:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 8007e44:	4b78      	ldr	r3, [pc, #480]	@ (8008028 <detecta+0x93c>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 8007e4a:	4b76      	ldr	r3, [pc, #472]	@ (8008024 <detecta+0x938>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b95      	cmp	r3, #149	@ 0x95
 8007e50:	d80c      	bhi.n	8007e6c <detecta+0x780>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 8007e52:	4b74      	ldr	r3, [pc, #464]	@ (8008024 <detecta+0x938>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	3303      	adds	r3, #3
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b72      	ldr	r3, [pc, #456]	@ (8008024 <detecta+0x938>)
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	e006      	b.n	8007e6e <detecta+0x782>
		goto ask_btn2;
 8007e60:	46c0      	nop			@ (mov r8, r8)
 8007e62:	e004      	b.n	8007e6e <detecta+0x782>
		goto ask_btn2;
 8007e64:	46c0      	nop			@ (mov r8, r8)
 8007e66:	e002      	b.n	8007e6e <detecta+0x782>
		goto ask_btn2;
 8007e68:	46c0      	nop			@ (mov r8, r8)
 8007e6a:	e000      	b.n	8007e6e <detecta+0x782>
		goto ask_btn2;
 8007e6c:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 8007e6e:	4b66      	ldr	r3, [pc, #408]	@ (8008008 <detecta+0x91c>)
 8007e70:	785b      	ldrb	r3, [r3, #1]
 8007e72:	2201      	movs	r2, #1
 8007e74:	4053      	eors	r3, r2
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d11a      	bne.n	8007eb2 <detecta+0x7c6>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 8007e7c:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <detecta+0x92c>)
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d106      	bne.n	8007e92 <detecta+0x7a6>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 8007e84:	4b65      	ldr	r3, [pc, #404]	@ (800801c <detecta+0x930>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 8007e8a:	4b65      	ldr	r3, [pc, #404]	@ (8008020 <detecta+0x934>)
 8007e8c:	2214      	movs	r2, #20
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e000      	b.n	8007e94 <detecta+0x7a8>
		goto ask_btn2_sec;
 8007e92:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 8007e94:	4b64      	ldr	r3, [pc, #400]	@ (8008028 <detecta+0x93c>)
 8007e96:	789b      	ldrb	r3, [r3, #2]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d119      	bne.n	8007ed0 <detecta+0x7e4>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 8007e9c:	4b63      	ldr	r3, [pc, #396]	@ (800802c <detecta+0x940>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d117      	bne.n	8007ed4 <detecta+0x7e8>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 8007ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800801c <detecta+0x930>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8007eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8008028 <detecta+0x93c>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	709a      	strb	r2, [r3, #2]
	goto findet;
 8007eb0:	e05d      	b.n	8007f6e <detecta+0x882>
		goto no_btn2;
 8007eb2:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 8007eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8008028 <detecta+0x93c>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8007eba:	4b5c      	ldr	r3, [pc, #368]	@ (800802c <detecta+0x940>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b95      	cmp	r3, #149	@ 0x95
 8007ec0:	d80a      	bhi.n	8007ed8 <detecta+0x7ec>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 8007ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800802c <detecta+0x940>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b58      	ldr	r3, [pc, #352]	@ (800802c <detecta+0x940>)
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e004      	b.n	8007eda <detecta+0x7ee>
		goto ask_btn3;
 8007ed0:	46c0      	nop			@ (mov r8, r8)
 8007ed2:	e002      	b.n	8007eda <detecta+0x7ee>
		goto ask_btn3;
 8007ed4:	46c0      	nop			@ (mov r8, r8)
 8007ed6:	e000      	b.n	8007eda <detecta+0x7ee>
		goto ask_btn3;
 8007ed8:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8007eda:	4b4b      	ldr	r3, [pc, #300]	@ (8008008 <detecta+0x91c>)
 8007edc:	789b      	ldrb	r3, [r3, #2]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4053      	eors	r3, r2
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d12a      	bne.n	8007f3e <detecta+0x852>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8008018 <detecta+0x92c>)
 8007eea:	789b      	ldrb	r3, [r3, #2]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <detecta+0x812>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 8007ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800801c <detecta+0x930>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8007ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8008020 <detecta+0x934>)
 8007ef8:	2214      	movs	r2, #20
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e000      	b.n	8007f00 <detecta+0x814>
		goto ask_btn3_sec;
 8007efe:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 8007f00:	4b40      	ldr	r3, [pc, #256]	@ (8008004 <detecta+0x918>)
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2201      	movs	r2, #1
 8007f06:	4053      	eors	r3, r2
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <detecta+0x832>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 8007f0e:	4b48      	ldr	r3, [pc, #288]	@ (8008030 <detecta+0x944>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f14:	d824      	bhi.n	8007f60 <detecta+0x874>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8007f16:	4b41      	ldr	r3, [pc, #260]	@ (800801c <detecta+0x930>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	715a      	strb	r2, [r3, #5]
	goto findet;
 8007f1c:	e027      	b.n	8007f6e <detecta+0x882>
		goto func_sec_norm_btn3;
 8007f1e:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 8007f20:	4b41      	ldr	r3, [pc, #260]	@ (8008028 <detecta+0x93c>)
 8007f22:	791b      	ldrb	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d11d      	bne.n	8007f64 <detecta+0x878>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8007f28:	4b41      	ldr	r3, [pc, #260]	@ (8008030 <detecta+0x944>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d11b      	bne.n	8007f68 <detecta+0x87c>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 8007f30:	4b3a      	ldr	r3, [pc, #232]	@ (800801c <detecta+0x930>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8007f36:	4b3c      	ldr	r3, [pc, #240]	@ (8008028 <detecta+0x93c>)
 8007f38:	2201      	movs	r2, #1
 8007f3a:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8007f3c:	e017      	b.n	8007f6e <detecta+0x882>
		goto no_btn3;
 8007f3e:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 8007f40:	4b39      	ldr	r3, [pc, #228]	@ (8008028 <detecta+0x93c>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 8007f46:	4b3a      	ldr	r3, [pc, #232]	@ (8008030 <detecta+0x944>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b95      	cmp	r3, #149	@ 0x95
 8007f4c:	d80e      	bhi.n	8007f6c <detecta+0x880>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 8007f4e:	4b38      	ldr	r3, [pc, #224]	@ (8008030 <detecta+0x944>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	3303      	adds	r3, #3
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	4b36      	ldr	r3, [pc, #216]	@ (8008030 <detecta+0x944>)
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e008      	b.n	8007f6e <detecta+0x882>
	goto findet;
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	e006      	b.n	8007f6e <detecta+0x882>
		goto ask_btn4;
 8007f60:	46c0      	nop			@ (mov r8, r8)
 8007f62:	e004      	b.n	8007f6e <detecta+0x882>
		goto ask_btn4;
 8007f64:	46c0      	nop			@ (mov r8, r8)
 8007f66:	e002      	b.n	8007f6e <detecta+0x882>
		goto ask_btn4;
 8007f68:	46c0      	nop			@ (mov r8, r8)
 8007f6a:	e000      	b.n	8007f6e <detecta+0x882>
		goto ask_btn4;
 8007f6c:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 8007f6e:	1c7b      	adds	r3, r7, #1
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	e00c      	b.n	8007f90 <detecta+0x8a4>
		Botones_COPY[k] = Botones_T[k];
 8007f76:	1c7b      	adds	r3, r7, #1
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	1c7b      	adds	r3, r7, #1
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	4922      	ldr	r1, [pc, #136]	@ (8008008 <detecta+0x91c>)
 8007f80:	5c89      	ldrb	r1, [r1, r2]
 8007f82:	4a25      	ldr	r2, [pc, #148]	@ (8008018 <detecta+0x92c>)
 8007f84:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 8007f86:	1c7b      	adds	r3, r7, #1
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	1c7b      	adds	r3, r7, #1
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	1c7b      	adds	r3, r7, #1
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b07      	cmp	r3, #7
 8007f96:	d9ee      	bls.n	8007f76 <detecta+0x88a>
	if(!flagsb[f_prog]){
 8007f98:	4b1a      	ldr	r3, [pc, #104]	@ (8008004 <detecta+0x918>)
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4053      	eors	r3, r2
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d11a      	bne.n	8007fdc <detecta+0x8f0>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 8007fa6:	003b      	movs	r3, r7
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	e011      	b.n	8007fd2 <detecta+0x8e6>
		btn_pr[k] = botonst[k];
 8007fae:	003b      	movs	r3, r7
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	003b      	movs	r3, r7
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	4919      	ldr	r1, [pc, #100]	@ (800801c <detecta+0x930>)
 8007fb8:	5c89      	ldrb	r1, [r1, r2]
 8007fba:	4a1e      	ldr	r2, [pc, #120]	@ (8008034 <detecta+0x948>)
 8007fbc:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007fbe:	003b      	movs	r3, r7
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	@ (800801c <detecta+0x930>)
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007fc8:	003b      	movs	r3, r7
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	003b      	movs	r3, r7
 8007fce:	3201      	adds	r2, #1
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	003b      	movs	r3, r7
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b07      	cmp	r3, #7
 8007fd8:	d9e9      	bls.n	8007fae <detecta+0x8c2>
	}

det_j18:
 8007fda:	e000      	b.n	8007fde <detecta+0x8f2>
		goto det_j18;
 8007fdc:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 8007fde:	4b16      	ldr	r3, [pc, #88]	@ (8008038 <detecta+0x94c>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	4053      	eors	r3, r2
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <detecta+0x90e>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8007fec:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <detecta+0x930>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <detecta+0x930>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	711a      	strb	r2, [r3, #4]

det_j19:

}
 8007ff8:	e000      	b.n	8007ffc <detecta+0x910>
		goto det_j19;
 8007ffa:	46c0      	nop			@ (mov r8, r8)
}
 8007ffc:	46c0      	nop			@ (mov r8, r8)
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b003      	add	sp, #12
 8008002:	bd90      	pop	{r4, r7, pc}
 8008004:	20000c48 	.word	0x20000c48
 8008008:	20000ce4 	.word	0x20000ce4
 800800c:	20002198 	.word	0x20002198
 8008010:	20000c78 	.word	0x20000c78
 8008014:	20000c9c 	.word	0x20000c9c
 8008018:	20000c68 	.word	0x20000c68
 800801c:	20000bfc 	.word	0x20000bfc
 8008020:	20002191 	.word	0x20002191
 8008024:	20000c70 	.word	0x20000c70
 8008028:	20000c30 	.word	0x20000c30
 800802c:	20000c71 	.word	0x20000c71
 8008030:	20000c72 	.word	0x20000c72
 8008034:	20000c50 	.word	0x20000c50
 8008038:	2000219c 	.word	0x2000219c

0800803c <display>:





void display (void){
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
	uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8008042:	1dbb      	adds	r3, r7, #6
 8008044:	4abb      	ldr	r2, [pc, #748]	@ (8008334 <display+0x2f8>)
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 800804a:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 800804c:	4bba      	ldr	r3, [pc, #744]	@ (8008338 <display+0x2fc>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d100      	bne.n	8008056 <display+0x1a>
 8008054:	e092      	b.n	800817c <display+0x140>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 8008056:	4bb9      	ldr	r3, [pc, #740]	@ (800833c <display+0x300>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d114      	bne.n	8008088 <display+0x4c>
	//	goto display_00;
	//}

	//btjf    flagsTxControl,#f_statBLE,display_00   ;¿Esta conectado un dispositivo BLE?
	//btjf		flagsTX2,#2,display_00; Se ha respondido el token BLE alguna vez ?
	if((!flagsTxControl[f_statBLE]) || (!flagsTX2[2]))
 800805e:	4bb8      	ldr	r3, [pc, #736]	@ (8008340 <display+0x304>)
 8008060:	785b      	ldrb	r3, [r3, #1]
 8008062:	2201      	movs	r2, #1
 8008064:	4053      	eors	r3, r2
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10f      	bne.n	800808c <display+0x50>
 800806c:	4bb5      	ldr	r3, [pc, #724]	@ (8008344 <display+0x308>)
 800806e:	789b      	ldrb	r3, [r3, #2]
 8008070:	2201      	movs	r2, #1
 8008072:	4053      	eors	r3, r2
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d108      	bne.n	800808c <display+0x50>
		goto display_00;


	op_menu (0x0B, 0x11);
 800807a:	2111      	movs	r1, #17
 800807c:	200b      	movs	r0, #11
 800807e:	f7ff f943 	bl	8007308 <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 8008082:	f7ff f95b 	bl	800733c <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 8008086:	e01e      	b.n	80080c6 <display+0x8a>
		goto display_00;
 8008088:	46c0      	nop			@ (mov r8, r8)
 800808a:	e000      	b.n	800808e <display+0x52>
		goto display_00;
 800808c:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(estado1_Aux, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 800808e:	1dbb      	adds	r3, r7, #6
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2201      	movs	r2, #1
 8008094:	4013      	ands	r3, r2
 8008096:	d106      	bne.n	80080a6 <display+0x6a>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 8008098:	2110      	movs	r1, #16
 800809a:	2011      	movs	r0, #17
 800809c:	f7ff f934 	bl	8007308 <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 80080a0:	f7ff f94c 	bl	800733c <datled_clear>
 80080a4:	e000      	b.n	80080a8 <display+0x6c>
		goto display_00b;
 80080a6:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 80080a8:	4ba7      	ldr	r3, [pc, #668]	@ (8008348 <display+0x30c>)
 80080aa:	78db      	ldrb	r3, [r3, #3]
 80080ac:	2201      	movs	r2, #1
 80080ae:	4053      	eors	r3, r2
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <display+0x88>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 80080b6:	211d      	movs	r1, #29
 80080b8:	201f      	movs	r0, #31
 80080ba:	f7ff f925 	bl	8007308 <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 80080be:	f7ff f93d 	bl	800733c <datled_clear>
 80080c2:	e000      	b.n	80080c6 <display+0x8a>
		goto display_01;
 80080c4:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 80080c6:	4ba1      	ldr	r3, [pc, #644]	@ (800834c <display+0x310>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d058      	beq.n	8008180 <display+0x144>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 80080ce:	4b9f      	ldr	r3, [pc, #636]	@ (800834c <display+0x310>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80080d4:	d900      	bls.n	80080d8 <display+0x9c>
 80080d6:	e09e      	b.n	8008216 <display+0x1da>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 80080d8:	4b9c      	ldr	r3, [pc, #624]	@ (800834c <display+0x310>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b31      	cmp	r3, #49	@ 0x31
 80080de:	d800      	bhi.n	80080e2 <display+0xa6>
 80080e0:	e09b      	b.n	800821a <display+0x1de>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 80080e2:	f7ff f92b 	bl	800733c <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 80080e6:	4b9a      	ldr	r3, [pc, #616]	@ (8008350 <display+0x314>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10f      	bne.n	800810e <display+0xd2>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 80080ee:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 80080f0:	2110      	movs	r1, #16
 80080f2:	2011      	movs	r0, #17
 80080f4:	f7ff f908 	bl	8007308 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(estado1_Aux, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 80080f8:	1dbb      	adds	r3, r7, #6
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2201      	movs	r2, #1
 80080fe:	4013      	ands	r3, r2
 8008100:	d003      	beq.n	800810a <display+0xce>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 8008102:	4b94      	ldr	r3, [pc, #592]	@ (8008354 <display+0x318>)
 8008104:	2201      	movs	r2, #1
 8008106:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8008108:	e0a0      	b.n	800824c <display+0x210>
		goto msg1_01;
 800810a:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 800810c:	e09e      	b.n	800824c <display+0x210>
		goto askMsg2; //jrne		askMsg2
 800810e:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 8008110:	4b8f      	ldr	r3, [pc, #572]	@ (8008350 <display+0x314>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d10f      	bne.n	8008138 <display+0xfc>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8008118:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 800811a:	2101      	movs	r1, #1
 800811c:	2011      	movs	r0, #17
 800811e:	f7ff f8f3 	bl	8007308 <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(estado1_Aux, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 8008122:	1dbb      	adds	r3, r7, #6
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2204      	movs	r2, #4
 8008128:	4013      	ands	r3, r2
 800812a:	d003      	beq.n	8008134 <display+0xf8>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 800812c:	4b8a      	ldr	r3, [pc, #552]	@ (8008358 <display+0x31c>)
 800812e:	2202      	movs	r2, #2
 8008130:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 8008132:	e08b      	b.n	800824c <display+0x210>
		goto	msg2_01;
 8008134:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8008136:	e089      	b.n	800824c <display+0x210>
		goto askMsg3; //jrne		askMsg3
 8008138:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 800813a:	4b85      	ldr	r3, [pc, #532]	@ (8008350 <display+0x314>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d10f      	bne.n	8008162 <display+0x126>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 8008142:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 8008144:	2100      	movs	r1, #0
 8008146:	2011      	movs	r0, #17
 8008148:	f7ff f8de 	bl	8007308 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(estado1_Aux, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 800814c:	1dbb      	adds	r3, r7, #6
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2240      	movs	r2, #64	@ 0x40
 8008152:	4013      	ands	r3, r2
 8008154:	d103      	bne.n	800815e <display+0x122>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 8008156:	4b7f      	ldr	r3, [pc, #508]	@ (8008354 <display+0x318>)
 8008158:	2201      	movs	r2, #1
 800815a:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 800815c:	e076      	b.n	800824c <display+0x210>
		goto msg3_01;
 800815e:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 8008160:	e074      	b.n	800824c <display+0x210>
		goto askMsg4;  //jrne askMsg4
 8008162:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 8008164:	4b7a      	ldr	r3, [pc, #488]	@ (8008350 <display+0x314>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b04      	cmp	r3, #4
 800816a:	d105      	bne.n	8008178 <display+0x13c>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 800816c:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 800816e:	211d      	movs	r1, #29
 8008170:	201f      	movs	r0, #31
 8008172:	f7ff f8c9 	bl	8007308 <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 8008176:	e069      	b.n	800824c <display+0x210>
		goto askMsg5;  //jrne		askMsg5
 8008178:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 800817a:	e067      	b.n	800824c <display+0x210>
		goto display_02;
 800817c:	46c0      	nop			@ (mov r8, r8)
 800817e:	e000      	b.n	8008182 <display+0x146>
		goto display_02;//jreq		display_02;
 8008180:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 8008182:	f7fd fc37 	bl	80059f4 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 8008186:	4b6c      	ldr	r3, [pc, #432]	@ (8008338 <display+0x2fc>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d018      	beq.n	80081c0 <display+0x184>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 800818e:	4b73      	ldr	r3, [pc, #460]	@ (800835c <display+0x320>)
 8008190:	79db      	ldrb	r3, [r3, #7]
 8008192:	2201      	movs	r2, #1
 8008194:	4053      	eors	r3, r2
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d113      	bne.n	80081c4 <display+0x188>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 800819c:	210a      	movs	r1, #10
 800819e:	200a      	movs	r0, #10
 80081a0:	f7ff f8b2 	bl	8007308 <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 80081a4:	4b6e      	ldr	r3, [pc, #440]	@ (8008360 <display+0x324>)
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	001a      	movs	r2, r3
 80081ac:	2340      	movs	r3, #64	@ 0x40
 80081ae:	4013      	ands	r3, r2
 80081b0:	d104      	bne.n	80081bc <display+0x180>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 80081b2:	211f      	movs	r1, #31
 80081b4:	201f      	movs	r0, #31
 80081b6:	f7ff f8a7 	bl	8007308 <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 80081ba:	e047      	b.n	800824c <display+0x210>
    	goto blk_aa;
 80081bc:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 80081be:	e045      	b.n	800824c <display+0x210>
    	goto display_norm3; //jreq		display_norm3;
 80081c0:	46c0      	nop			@ (mov r8, r8)
 80081c2:	e000      	b.n	80081c6 <display+0x18a>
    	goto display_norm3;
 80081c4:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 80081c6:	4b60      	ldr	r3, [pc, #384]	@ (8008348 <display+0x30c>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2201      	movs	r2, #1
 80081cc:	4053      	eors	r3, r2
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d02c      	beq.n	800822e <display+0x1f2>
    	  goto display_j00;
 80081d4:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 80081d6:	4b63      	ldr	r3, [pc, #396]	@ (8008364 <display+0x328>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d019      	beq.n	8008212 <display+0x1d6>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 80081de:	4b61      	ldr	r3, [pc, #388]	@ (8008364 <display+0x328>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80081e4:	d81b      	bhi.n	800821e <display+0x1e2>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 80081e6:	4b5f      	ldr	r3, [pc, #380]	@ (8008364 <display+0x328>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b95      	cmp	r3, #149	@ 0x95
 80081ec:	d902      	bls.n	80081f4 <display+0x1b8>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 80081ee:	f7fe f9df 	bl	80065b0 <sp_dpy>
      	  goto dpy07;
 80081f2:	e02b      	b.n	800824c <display+0x210>
    	  goto dpydif;//jrult dpydif
 80081f4:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 80081f6:	4b5b      	ldr	r3, [pc, #364]	@ (8008364 <display+0x328>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b63      	cmp	r3, #99	@ 0x63
 80081fc:	d811      	bhi.n	8008222 <display+0x1e6>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 80081fe:	4b59      	ldr	r3, [pc, #356]	@ (8008364 <display+0x328>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b31      	cmp	r3, #49	@ 0x31
 8008204:	d90f      	bls.n	8008226 <display+0x1ea>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 8008206:	f7fe f9df 	bl	80065c8 <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 800820a:	4b52      	ldr	r3, [pc, #328]	@ (8008354 <display+0x318>)
 800820c:	2200      	movs	r2, #0
 800820e:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 8008210:	e01c      	b.n	800824c <display+0x210>
    	  goto dpy02;//jreq		dpy02;
 8008212:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 8008214:	e00c      	b.n	8008230 <display+0x1f4>
		goto dpy03; //************** ?
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	e006      	b.n	8008228 <display+0x1ec>
		goto dpy03;
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	e004      	b.n	8008228 <display+0x1ec>
    	  goto dpy03;//jruge		dpy03;
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	e002      	b.n	8008228 <display+0x1ec>
    	 goto dpy03;//jruge		dpy03;
 8008222:	46c0      	nop			@ (mov r8, r8)
 8008224:	e000      	b.n	8008228 <display+0x1ec>
    	 goto dpy03;//jrult		dpy03;
 8008226:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8008228:	f7fe fd4e 	bl	8006cc8 <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 800822c:	e00e      	b.n	800824c <display+0x210>
      goto dpy06;//jra dpy06;
 800822e:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 8008230:	4b4a      	ldr	r3, [pc, #296]	@ (800835c <display+0x320>)
 8008232:	78db      	ldrb	r3, [r3, #3]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <display+0x20a>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8008238:	4b4b      	ldr	r3, [pc, #300]	@ (8008368 <display+0x32c>)
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <display+0x20e>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 8008240:	f7fe fbe2 	bl	8006a08 <fallas>
 8008244:	e002      	b.n	800824c <display+0x210>
	   goto dpy07;
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	e000      	b.n	800824c <display+0x210>
	   goto dpy07;
 800824a:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 800824c:	4b47      	ldr	r3, [pc, #284]	@ (800836c <display+0x330>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	001a      	movs	r2, r3
 8008252:	4b47      	ldr	r3, [pc, #284]	@ (8008370 <display+0x334>)
 8008254:	5c9a      	ldrb	r2, [r3, r2]
 8008256:	4b47      	ldr	r3, [pc, #284]	@ (8008374 <display+0x338>)
 8008258:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 800825a:	4b3f      	ldr	r3, [pc, #252]	@ (8008358 <display+0x31c>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	001a      	movs	r2, r3
 8008260:	4b43      	ldr	r3, [pc, #268]	@ (8008370 <display+0x334>)
 8008262:	5c9a      	ldrb	r2, [r3, r2]
 8008264:	4b44      	ldr	r3, [pc, #272]	@ (8008378 <display+0x33c>)
 8008266:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 8008268:	230f      	movs	r3, #15
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e011      	b.n	8008296 <display+0x25a>
			if(trefst[k] ){ //tnz  trefst ***************??
 8008272:	210f      	movs	r1, #15
 8008274:	187b      	adds	r3, r7, r1
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	4a40      	ldr	r2, [pc, #256]	@ (800837c <display+0x340>)
 800827a:	5cd3      	ldrb	r3, [r2, r3]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d113      	bne.n	80082a8 <display+0x26c>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 8008280:	187b      	adds	r3, r7, r1
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4a3e      	ldr	r2, [pc, #248]	@ (8008380 <display+0x344>)
 8008286:	5cd3      	ldrb	r3, [r2, r3]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <display+0x270>
		for(uint8_t k=0; k<8; k++){
 800828c:	187b      	adds	r3, r7, r1
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	187b      	adds	r3, r7, r1
 8008292:	3201      	adds	r2, #1
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	230f      	movs	r3, #15
 8008298:	18fb      	adds	r3, r7, r3
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b07      	cmp	r3, #7
 800829e:	d9e8      	bls.n	8008272 <display+0x236>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 80082a0:	4b38      	ldr	r3, [pc, #224]	@ (8008384 <display+0x348>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 80082a6:	e00d      	b.n	80082c4 <display+0x288>
				goto ask_snooze; //jrne	ask_snooze
 80082a8:	46c0      	nop			@ (mov r8, r8)
 80082aa:	e000      	b.n	80082ae <display+0x272>
				goto ask_snooze;  //jrne	ask_snooze
 80082ac:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 80082ae:	4b36      	ldr	r3, [pc, #216]	@ (8008388 <display+0x34c>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2201      	movs	r2, #1
 80082b4:	4053      	eors	r3, r2
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <display+0x286>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 80082bc:	f7fe fe8e 	bl	8006fdc <ld_alarmDelay>
 80082c0:	e000      	b.n	80082c4 <display+0x288>
			goto noLoadSnooze;
 80082c2:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 80082c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008384 <display+0x348>)
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <display+0x298>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 80082cc:	4b2f      	ldr	r3, [pc, #188]	@ (800838c <display+0x350>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	e000      	b.n	80082d6 <display+0x29a>
			goto no_snooze;//jreq no_snooze
 80082d4:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 80082d6:	4b2e      	ldr	r3, [pc, #184]	@ (8008390 <display+0x354>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <display+0x2c0>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 80082de:	4b2b      	ldr	r3, [pc, #172]	@ (800838c <display+0x350>)
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d108      	bne.n	80082f8 <display+0x2bc>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 80082e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008394 <display+0x358>)
 80082e8:	2104      	movs	r1, #4
 80082ea:	0018      	movs	r0, r3
 80082ec:	f010 ffc6 	bl	801927c <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 80082f0:	4b26      	ldr	r3, [pc, #152]	@ (800838c <display+0x350>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 80082f6:	e185      	b.n	8008604 <display+0x5c8>
			goto jp_termina_buzzer;
 80082f8:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 80082fa:	e183      	b.n	8008604 <display+0x5c8>
			goto noBtnBuzz; //jreq noBtnBuzz
 80082fc:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 80082fe:	4b23      	ldr	r3, [pc, #140]	@ (800838c <display+0x350>)
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2201      	movs	r2, #1
 8008304:	4053      	eors	r3, r2
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d14f      	bne.n	80083ac <display+0x370>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 800830c:	4b22      	ldr	r3, [pc, #136]	@ (8008398 <display+0x35c>)
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 8008312:	4b22      	ldr	r3, [pc, #136]	@ (800839c <display+0x360>)
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008318:	4b1e      	ldr	r3, [pc, #120]	@ (8008394 <display+0x358>)
 800831a:	2104      	movs	r1, #4
 800831c:	0018      	movs	r0, r3
 800831e:	f011 f88f 	bl	8019440 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 8008322:	4b1f      	ldr	r3, [pc, #124]	@ (80083a0 <display+0x364>)
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	4a1f      	ldr	r2, [pc, #124]	@ (80083a4 <display+0x368>)
 8008328:	4694      	mov	ip, r2
 800832a:	4463      	add	r3, ip
 800832c:	b29a      	uxth	r2, r3
 800832e:	4b1e      	ldr	r3, [pc, #120]	@ (80083a8 <display+0x36c>)
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	e03c      	b.n	80083ae <display+0x372>
 8008334:	200001ba 	.word	0x200001ba
 8008338:	20000bf8 	.word	0x20000bf8
 800833c:	2000219c 	.word	0x2000219c
 8008340:	200021dc 	.word	0x200021dc
 8008344:	20002038 	.word	0x20002038
 8008348:	20000bd8 	.word	0x20000bd8
 800834c:	20002158 	.word	0x20002158
 8008350:	20002159 	.word	0x20002159
 8008354:	20000bf0 	.word	0x20000bf0
 8008358:	20000bb2 	.word	0x20000bb2
 800835c:	20000c38 	.word	0x20000c38
 8008360:	20000bb0 	.word	0x20000bb0
 8008364:	20000c22 	.word	0x20000c22
 8008368:	20000c48 	.word	0x20000c48
 800836c:	20000bb3 	.word	0x20000bb3
 8008370:	2000000c 	.word	0x2000000c
 8008374:	20000cd9 	.word	0x20000cd9
 8008378:	20000cda 	.word	0x20000cda
 800837c:	20000be8 	.word	0x20000be8
 8008380:	20000be0 	.word	0x20000be0
 8008384:	20002094 	.word	0x20002094
 8008388:	20000bfc 	.word	0x20000bfc
 800838c:	2000208c 	.word	0x2000208c
 8008390:	20002191 	.word	0x20002191
 8008394:	200005f4 	.word	0x200005f4
 8008398:	20002084 	.word	0x20002084
 800839c:	2000207c 	.word	0x2000207c
 80083a0:	20002078 	.word	0x20002078
 80083a4:	00001388 	.word	0x00001388
 80083a8:	2000207a 	.word	0x2000207a
			goto noBtnBuzz_01;
 80083ac:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 80083ae:	4bd0      	ldr	r3, [pc, #832]	@ (80086f0 <display+0x6b4>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 80083b4:	4bce      	ldr	r3, [pc, #824]	@ (80086f0 <display+0x6b4>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d111      	bne.n	80083e0 <display+0x3a4>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 80083bc:	4bcd      	ldr	r3, [pc, #820]	@ (80086f4 <display+0x6b8>)
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 80083c2:	4bcd      	ldr	r3, [pc, #820]	@ (80086f8 <display+0x6bc>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 80083c8:	4bcc      	ldr	r3, [pc, #816]	@ (80086fc <display+0x6c0>)
 80083ca:	2104      	movs	r1, #4
 80083cc:	0018      	movs	r0, r3
 80083ce:	f011 f837 	bl	8019440 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 80083d2:	4bcb      	ldr	r3, [pc, #812]	@ (8008700 <display+0x6c4>)
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	3364      	adds	r3, #100	@ 0x64
 80083d8:	b29a      	uxth	r2, r3
 80083da:	4bca      	ldr	r3, [pc, #808]	@ (8008704 <display+0x6c8>)
 80083dc:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 80083de:	e111      	b.n	8008604 <display+0x5c8>
			goto buzzer_0;
 80083e0:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 80083e2:	4bc5      	ldr	r3, [pc, #788]	@ (80086f8 <display+0x6bc>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 80083e8:	4bc7      	ldr	r3, [pc, #796]	@ (8008708 <display+0x6cc>)
 80083ea:	79db      	ldrb	r3, [r3, #7]
 80083ec:	2201      	movs	r2, #1
 80083ee:	4053      	eors	r3, r2
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <display+0x3c2>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 80083f6:	4bc0      	ldr	r3, [pc, #768]	@ (80086f8 <display+0x6bc>)
 80083f8:	2202      	movs	r2, #2
 80083fa:	701a      	strb	r2, [r3, #0]
 80083fc:	e000      	b.n	8008400 <display+0x3c4>
			goto buzzer_activado_04;
 80083fe:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 8008400:	4bc1      	ldr	r3, [pc, #772]	@ (8008708 <display+0x6cc>)
 8008402:	799b      	ldrb	r3, [r3, #6]
 8008404:	2201      	movs	r2, #1
 8008406:	4053      	eors	r3, r2
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <display+0x3da>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800840e:	4bba      	ldr	r3, [pc, #744]	@ (80086f8 <display+0x6bc>)
 8008410:	2202      	movs	r2, #2
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	e000      	b.n	8008418 <display+0x3dc>
			goto buzzer_activado_05;
 8008416:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8008418:	4bbc      	ldr	r3, [pc, #752]	@ (800870c <display+0x6d0>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2201      	movs	r2, #1
 800841e:	4053      	eors	r3, r2
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d103      	bne.n	800842e <display+0x3f2>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008426:	4bb4      	ldr	r3, [pc, #720]	@ (80086f8 <display+0x6bc>)
 8008428:	2202      	movs	r2, #2
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e000      	b.n	8008430 <display+0x3f4>
			goto buzzer_activado_08;
 800842e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 8008430:	4bb7      	ldr	r3, [pc, #732]	@ (8008710 <display+0x6d4>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2201      	movs	r2, #1
 8008436:	4053      	eors	r3, r2
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <display+0x40a>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800843e:	4bae      	ldr	r3, [pc, #696]	@ (80086f8 <display+0x6bc>)
 8008440:	2202      	movs	r2, #2
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e000      	b.n	8008448 <display+0x40c>
			goto buzzer_activado_01;
 8008446:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 8008448:	4bb1      	ldr	r3, [pc, #708]	@ (8008710 <display+0x6d4>)
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2201      	movs	r2, #1
 800844e:	4053      	eors	r3, r2
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <display+0x422>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 8008456:	4ba8      	ldr	r3, [pc, #672]	@ (80086f8 <display+0x6bc>)
 8008458:	2203      	movs	r2, #3
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e000      	b.n	8008460 <display+0x424>
			goto buzzer_activado_02;
 800845e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 8008460:	4bab      	ldr	r3, [pc, #684]	@ (8008710 <display+0x6d4>)
 8008462:	789b      	ldrb	r3, [r3, #2]
 8008464:	2201      	movs	r2, #1
 8008466:	4053      	eors	r3, r2
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <display+0x43a>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800846e:	4ba2      	ldr	r3, [pc, #648]	@ (80086f8 <display+0x6bc>)
 8008470:	2201      	movs	r2, #1
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	e000      	b.n	8008478 <display+0x43c>
			goto buzzer_activado_03;
 8008476:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 8008478:	4ba4      	ldr	r3, [pc, #656]	@ (800870c <display+0x6d0>)
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2201      	movs	r2, #1
 800847e:	4053      	eors	r3, r2
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <display+0x452>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008486:	4b9c      	ldr	r3, [pc, #624]	@ (80086f8 <display+0x6bc>)
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
 800848c:	e000      	b.n	8008490 <display+0x454>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 800848e:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 8008490:	230e      	movs	r3, #14
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8008498:	230d      	movs	r3, #13
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e015      	b.n	80084ce <display+0x492>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 80084a2:	200d      	movs	r0, #13
 80084a4:	183b      	adds	r3, r7, r0
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4a97      	ldr	r2, [pc, #604]	@ (8008708 <display+0x6cc>)
 80084aa:	5cd3      	ldrb	r3, [r2, r3]
 80084ac:	001a      	movs	r2, r3
 80084ae:	183b      	adds	r3, r7, r0
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	409a      	lsls	r2, r3
 80084b4:	0013      	movs	r3, r2
 80084b6:	b2d9      	uxtb	r1, r3
 80084b8:	220e      	movs	r2, #14
 80084ba:	18bb      	adds	r3, r7, r2
 80084bc:	18ba      	adds	r2, r7, r2
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80084c4:	183b      	adds	r3, r7, r0
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	183b      	adds	r3, r7, r0
 80084ca:	3201      	adds	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	230d      	movs	r3, #13
 80084d0:	18fb      	adds	r3, r7, r3
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b07      	cmp	r3, #7
 80084d6:	d9e4      	bls.n	80084a2 <display+0x466>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 80084d8:	230e      	movs	r3, #14
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	223f      	movs	r2, #63	@ 0x3f
 80084e0:	4013      	ands	r3, r2
 80084e2:	d003      	beq.n	80084ec <display+0x4b0>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80084e4:	4b84      	ldr	r3, [pc, #528]	@ (80086f8 <display+0x6bc>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	e000      	b.n	80084ee <display+0x4b2>
			goto buzzer_activado_06;
 80084ec:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 80084ee:	230e      	movs	r3, #14
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	e013      	b.n	8008524 <display+0x4e8>
			trefst_aux_ |= trefst2[k]<<k;
 80084fc:	4a85      	ldr	r2, [pc, #532]	@ (8008714 <display+0x6d8>)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	001a      	movs	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	409a      	lsls	r2, r3
 800850a:	0013      	movs	r3, r2
 800850c:	b25a      	sxtb	r2, r3
 800850e:	210e      	movs	r1, #14
 8008510:	187b      	adds	r3, r7, r1
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b25b      	sxtb	r3, r3
 8008516:	4313      	orrs	r3, r2
 8008518:	b25a      	sxtb	r2, r3
 800851a:	187b      	adds	r3, r7, r1
 800851c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	3301      	adds	r3, #1
 8008522:	60bb      	str	r3, [r7, #8]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b07      	cmp	r3, #7
 8008528:	dde8      	ble.n	80084fc <display+0x4c0>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 800852a:	230e      	movs	r3, #14
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <display+0x500>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008534:	4b70      	ldr	r3, [pc, #448]	@ (80086f8 <display+0x6bc>)
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e000      	b.n	800853e <display+0x502>
			goto buzzer_activado_07;
 800853c:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 800853e:	4b6e      	ldr	r3, [pc, #440]	@ (80086f8 <display+0x6bc>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b04      	cmp	r3, #4
 8008544:	d85b      	bhi.n	80085fe <display+0x5c2>
 8008546:	009a      	lsls	r2, r3, #2
 8008548:	4b73      	ldr	r3, [pc, #460]	@ (8008718 <display+0x6dc>)
 800854a:	18d3      	adds	r3, r2, r3
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 8008550:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 8008552:	4b6b      	ldr	r3, [pc, #428]	@ (8008700 <display+0x6c4>)
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	3364      	adds	r3, #100	@ 0x64
 8008558:	b29a      	uxth	r2, r3
 800855a:	4b6a      	ldr	r3, [pc, #424]	@ (8008704 <display+0x6c8>)
 800855c:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 800855e:	e051      	b.n	8008604 <display+0x5c8>
			case 1: goto buzzer_etapa_1;
 8008560:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 8008562:	4b6e      	ldr	r3, [pc, #440]	@ (800871c <display+0x6e0>)
 8008564:	22fa      	movs	r2, #250	@ 0xfa
 8008566:	0052      	lsls	r2, r2, #1
 8008568:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 800856a:	4b6d      	ldr	r3, [pc, #436]	@ (8008720 <display+0x6e4>)
 800856c:	22fa      	movs	r2, #250	@ 0xfa
 800856e:	0052      	lsls	r2, r2, #1
 8008570:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8008572:	e012      	b.n	800859a <display+0x55e>
			case 2: goto buzzer_etapa_2;
 8008574:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8008576:	4b69      	ldr	r3, [pc, #420]	@ (800871c <display+0x6e0>)
 8008578:	22fa      	movs	r2, #250	@ 0xfa
 800857a:	0052      	lsls	r2, r2, #1
 800857c:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 800857e:	4b68      	ldr	r3, [pc, #416]	@ (8008720 <display+0x6e4>)
 8008580:	4a68      	ldr	r2, [pc, #416]	@ (8008724 <display+0x6e8>)
 8008582:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8008584:	e009      	b.n	800859a <display+0x55e>
			case 3: goto buzzer_etapa_3;
 8008586:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8008588:	4b64      	ldr	r3, [pc, #400]	@ (800871c <display+0x6e0>)
 800858a:	22fa      	movs	r2, #250	@ 0xfa
 800858c:	0052      	lsls	r2, r2, #1
 800858e:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 8008590:	4b63      	ldr	r3, [pc, #396]	@ (8008720 <display+0x6e4>)
 8008592:	4a65      	ldr	r2, [pc, #404]	@ (8008728 <display+0x6ec>)
 8008594:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8008596:	e000      	b.n	800859a <display+0x55e>
			case 4: goto buzzer_etapa_4;
 8008598:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 800859a:	4b59      	ldr	r3, [pc, #356]	@ (8008700 <display+0x6c4>)
 800859c:	881a      	ldrh	r2, [r3, #0]
 800859e:	4b59      	ldr	r3, [pc, #356]	@ (8008704 <display+0x6c8>)
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d12d      	bne.n	8008602 <display+0x5c6>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 80085a6:	4b53      	ldr	r3, [pc, #332]	@ (80086f4 <display+0x6b8>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2201      	movs	r2, #1
 80085ac:	4053      	eors	r3, r2
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	1e5a      	subs	r2, r3, #1
 80085b2:	4193      	sbcs	r3, r2
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	4b4f      	ldr	r3, [pc, #316]	@ (80086f4 <display+0x6b8>)
 80085b8:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 80085ba:	4b4e      	ldr	r3, [pc, #312]	@ (80086f4 <display+0x6b8>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10e      	bne.n	80085e0 <display+0x5a4>
			goto buzzer_on;
		}
buzzer_off:
 80085c2:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 80085c4:	4b4d      	ldr	r3, [pc, #308]	@ (80086fc <display+0x6c0>)
 80085c6:	2104      	movs	r1, #4
 80085c8:	0018      	movs	r0, r3
 80085ca:	f010 ff39 	bl	8019440 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 80085ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008700 <display+0x6c4>)
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	4b53      	ldr	r3, [pc, #332]	@ (8008720 <display+0x6e4>)
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	18d3      	adds	r3, r2, r3
 80085d8:	b29a      	uxth	r2, r3
 80085da:	4b4a      	ldr	r3, [pc, #296]	@ (8008704 <display+0x6c8>)
 80085dc:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 80085de:	e011      	b.n	8008604 <display+0x5c8>
			goto buzzer_on;
 80085e0:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 80085e2:	4b46      	ldr	r3, [pc, #280]	@ (80086fc <display+0x6c0>)
 80085e4:	2104      	movs	r1, #4
 80085e6:	0018      	movs	r0, r3
 80085e8:	f010 fe48 	bl	801927c <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 80085ec:	4b44      	ldr	r3, [pc, #272]	@ (8008700 <display+0x6c4>)
 80085ee:	881a      	ldrh	r2, [r3, #0]
 80085f0:	4b4a      	ldr	r3, [pc, #296]	@ (800871c <display+0x6e0>)
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	18d3      	adds	r3, r2, r3
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	4b42      	ldr	r3, [pc, #264]	@ (8008704 <display+0x6c8>)
 80085fa:	801a      	strh	r2, [r3, #0]
 80085fc:	e002      	b.n	8008604 <display+0x5c8>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 80085fe:	46c0      	nop			@ (mov r8, r8)
 8008600:	e000      	b.n	8008604 <display+0x5c8>
			goto termina_buzzer;//jrne    termina_buzzer
 8008602:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 8008604:	1dfb      	adds	r3, r7, #7
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	e009      	b.n	8008620 <display+0x5e4>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 800860c:	1dfb      	adds	r3, r7, #7
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	4a46      	ldr	r2, [pc, #280]	@ (800872c <display+0x6f0>)
 8008612:	2101      	movs	r1, #1
 8008614:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 8008616:	1dfb      	adds	r3, r7, #7
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	1dfb      	adds	r3, r7, #7
 800861c:	3201      	adds	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	1dfb      	adds	r3, r7, #7
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b07      	cmp	r3, #7
 8008626:	d9f1      	bls.n	800860c <display+0x5d0>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8008628:	4b41      	ldr	r3, [pc, #260]	@ (8008730 <display+0x6f4>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2201      	movs	r2, #1
 800862e:	4053      	eors	r3, r2
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <display+0x600>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 8008636:	4b3d      	ldr	r3, [pc, #244]	@ (800872c <display+0x6f0>)
 8008638:	2200      	movs	r2, #0
 800863a:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 800863c:	4b3c      	ldr	r3, [pc, #240]	@ (8008730 <display+0x6f4>)
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2201      	movs	r2, #1
 8008642:	4053      	eors	r3, r2
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <display+0x614>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 800864a:	4b38      	ldr	r3, [pc, #224]	@ (800872c <display+0x6f0>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 8008650:	4b37      	ldr	r3, [pc, #220]	@ (8008730 <display+0x6f4>)
 8008652:	789b      	ldrb	r3, [r3, #2]
 8008654:	2201      	movs	r2, #1
 8008656:	4053      	eors	r3, r2
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <display+0x628>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 800865e:	4b33      	ldr	r3, [pc, #204]	@ (800872c <display+0x6f0>)
 8008660:	2200      	movs	r2, #0
 8008662:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 8008664:	4b32      	ldr	r3, [pc, #200]	@ (8008730 <display+0x6f4>)
 8008666:	78db      	ldrb	r3, [r3, #3]
 8008668:	2201      	movs	r2, #1
 800866a:	4053      	eors	r3, r2
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <display+0x63c>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 8008672:	4b2e      	ldr	r3, [pc, #184]	@ (800872c <display+0x6f0>)
 8008674:	2200      	movs	r2, #0
 8008676:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 8008678:	4b2d      	ldr	r3, [pc, #180]	@ (8008730 <display+0x6f4>)
 800867a:	79db      	ldrb	r3, [r3, #7]
 800867c:	2201      	movs	r2, #1
 800867e:	4053      	eors	r3, r2
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <display+0x650>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 8008686:	4b29      	ldr	r3, [pc, #164]	@ (800872c <display+0x6f0>)
 8008688:	2200      	movs	r2, #0
 800868a:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 800868c:	4b28      	ldr	r3, [pc, #160]	@ (8008730 <display+0x6f4>)
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	4053      	eors	r3, r2
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <display+0x664>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 800869a:	4b24      	ldr	r3, [pc, #144]	@ (800872c <display+0x6f0>)
 800869c:	2200      	movs	r2, #0
 800869e:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 80086a0:	4b24      	ldr	r3, [pc, #144]	@ (8008734 <display+0x6f8>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d803      	bhi.n	80086b0 <display+0x674>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 80086a8:	4b20      	ldr	r3, [pc, #128]	@ (800872c <display+0x6f0>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 80086ae:	e058      	b.n	8008762 <display+0x726>
		goto	clt_ledInd;
 80086b0:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 80086b2:	4b1e      	ldr	r3, [pc, #120]	@ (800872c <display+0x6f0>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 80086b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008730 <display+0x6f4>)
 80086ba:	78db      	ldrb	r3, [r3, #3]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d141      	bne.n	8008744 <display+0x708>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 80086c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008738 <display+0x6fc>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d047      	beq.n	8008758 <display+0x71c>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 80086c8:	4b1c      	ldr	r3, [pc, #112]	@ (800873c <display+0x700>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4053      	eors	r3, r2
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d142      	bne.n	800875c <display+0x720>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 80086d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008740 <display+0x704>)
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	001a      	movs	r2, r3
 80086de:	2320      	movs	r3, #32
 80086e0:	4013      	ands	r3, r2
 80086e2:	d001      	beq.n	80086e8 <display+0x6ac>
	    asm ("nop");
 80086e4:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 80086e6:	e03c      	b.n	8008762 <display+0x726>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 80086e8:	4b10      	ldr	r3, [pc, #64]	@ (800872c <display+0x6f0>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 80086ee:	e038      	b.n	8008762 <display+0x726>
 80086f0:	2000208c 	.word	0x2000208c
 80086f4:	20002084 	.word	0x20002084
 80086f8:	2000207c 	.word	0x2000207c
 80086fc:	200005f4 	.word	0x200005f4
 8008700:	20002078 	.word	0x20002078
 8008704:	2000207a 	.word	0x2000207a
 8008708:	20000be8 	.word	0x20000be8
 800870c:	2000219c 	.word	0x2000219c
 8008710:	20002098 	.word	0x20002098
 8008714:	20000be0 	.word	0x20000be0
 8008718:	0801c494 	.word	0x0801c494
 800871c:	2000207e 	.word	0x2000207e
 8008720:	20002080 	.word	0x20002080
 8008724:	00007530 	.word	0x00007530
 8008728:	00003a98 	.word	0x00003a98
 800872c:	20000cdc 	.word	0x20000cdc
 8008730:	20000bf0 	.word	0x20000bf0
 8008734:	20000bf8 	.word	0x20000bf8
 8008738:	20000c87 	.word	0x20000c87
 800873c:	20000c9c 	.word	0x20000c9c
 8008740:	20000bb0 	.word	0x20000bb0
		goto	blink_dia;
 8008744:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 8008746:	4b0f      	ldr	r3, [pc, #60]	@ (8008784 <display+0x748>)
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b25b      	sxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	db07      	blt.n	8008760 <display+0x724>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 8008750:	4b0d      	ldr	r3, [pc, #52]	@ (8008788 <display+0x74c>)
 8008752:	2200      	movs	r2, #0
 8008754:	709a      	strb	r2, [r3, #2]
 8008756:	e004      	b.n	8008762 <display+0x726>
		goto	no_blk;
 8008758:	46c0      	nop			@ (mov r8, r8)
 800875a:	e002      	b.n	8008762 <display+0x726>
		goto	no_blk;
 800875c:	46c0      	nop			@ (mov r8, r8)
 800875e:	e000      	b.n	8008762 <display+0x726>
		goto	display_j11;
 8008760:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 8008762:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (estado1_Aux & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8008764:	1dbb      	adds	r3, r7, #6
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	4013      	ands	r3, r2
 800876c:	d104      	bne.n	8008778 <display+0x73c>
		goto	refriON;
	}
refriOFF_2:
 800876e:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 8008770:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <display+0x74c>)
 8008772:	2201      	movs	r2, #1
 8008774:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 8008776:	e000      	b.n	800877a <display+0x73e>
		goto	refriON;
 8008778:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 800877a:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 800877c:	46c0      	nop			@ (mov r8, r8)
 800877e:	46bd      	mov	sp, r7
 8008780:	b004      	add	sp, #16
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000bb0 	.word	0x20000bb0
 8008788:	20000cdc 	.word	0x20000cdc

0800878c <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 8008792:	4ba7      	ldr	r3, [pc, #668]	@ (8008a30 <inicio+0x2a4>)
 8008794:	2201      	movs	r2, #1
 8008796:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 8008798:	4ba5      	ldr	r3, [pc, #660]	@ (8008a30 <inicio+0x2a4>)
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 800879e:	4ba5      	ldr	r3, [pc, #660]	@ (8008a34 <inicio+0x2a8>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 80087a4:	4ba4      	ldr	r3, [pc, #656]	@ (8008a38 <inicio+0x2ac>)
 80087a6:	2281      	movs	r2, #129	@ 0x81
 80087a8:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 80087aa:	4ba4      	ldr	r3, [pc, #656]	@ (8008a3c <inicio+0x2b0>)
 80087ac:	2278      	movs	r2, #120	@ 0x78
 80087ae:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 80087b0:	4ba3      	ldr	r3, [pc, #652]	@ (8008a40 <inicio+0x2b4>)
 80087b2:	2204      	movs	r2, #4
 80087b4:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 80087b6:	4ba3      	ldr	r3, [pc, #652]	@ (8008a44 <inicio+0x2b8>)
 80087b8:	22c5      	movs	r2, #197	@ 0xc5
 80087ba:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 80087bc:	4ba2      	ldr	r3, [pc, #648]	@ (8008a48 <inicio+0x2bc>)
 80087be:	22a4      	movs	r2, #164	@ 0xa4
 80087c0:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 80087c2:	4ba2      	ldr	r3, [pc, #648]	@ (8008a4c <inicio+0x2c0>)
 80087c4:	220f      	movs	r2, #15
 80087c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 80087c8:	1cfb      	adds	r3, r7, #3
 80087ca:	2200      	movs	r2, #0
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	e009      	b.n	80087e4 <inicio+0x58>
		cruze_por_cero[k] = 0;
 80087d0:	1cfb      	adds	r3, r7, #3
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	4a9e      	ldr	r2, [pc, #632]	@ (8008a50 <inicio+0x2c4>)
 80087d6:	2100      	movs	r1, #0
 80087d8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 80087da:	1cfb      	adds	r3, r7, #3
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	1cfb      	adds	r3, r7, #3
 80087e0:	3201      	adds	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
 80087e4:	1cfb      	adds	r3, r7, #3
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d9f1      	bls.n	80087d0 <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 80087ec:	4b99      	ldr	r3, [pc, #612]	@ (8008a54 <inicio+0x2c8>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 80087f2:	4b99      	ldr	r3, [pc, #612]	@ (8008a58 <inicio+0x2cc>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = reePlantilla[eeprotype];
 80087f8:	4b98      	ldr	r3, [pc, #608]	@ (8008a5c <inicio+0x2d0>)
 80087fa:	2257      	movs	r2, #87	@ 0x57
 80087fc:	5c99      	ldrb	r1, [r3, r2]
 80087fe:	4b98      	ldr	r3, [pc, #608]	@ (8008a60 <inicio+0x2d4>)
 8008800:	2257      	movs	r2, #87	@ 0x57
 8008802:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 8008804:	4b97      	ldr	r3, [pc, #604]	@ (8008a64 <inicio+0x2d8>)
 8008806:	226e      	movs	r2, #110	@ 0x6e
 8008808:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 800880a:	4b95      	ldr	r3, [pc, #596]	@ (8008a60 <inicio+0x2d4>)
 800880c:	2257      	movs	r2, #87	@ 0x57
 800880e:	5c9b      	ldrb	r3, [r3, r2]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d103      	bne.n	800881c <inicio+0x90>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8008814:	4b93      	ldr	r3, [pc, #588]	@ (8008a64 <inicio+0x2d8>)
 8008816:	22d2      	movs	r2, #210	@ 0xd2
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	e000      	b.n	800881e <inicio+0x92>
		goto no_ini_210;
 800881c:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 800881e:	4b92      	ldr	r3, [pc, #584]	@ (8008a68 <inicio+0x2dc>)
 8008820:	2201      	movs	r2, #1
 8008822:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8008824:	4b90      	ldr	r3, [pc, #576]	@ (8008a68 <inicio+0x2dc>)
 8008826:	2200      	movs	r2, #0
 8008828:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 800882a:	4b8f      	ldr	r3, [pc, #572]	@ (8008a68 <inicio+0x2dc>)
 800882c:	2200      	movs	r2, #0
 800882e:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 8008830:	4b8e      	ldr	r3, [pc, #568]	@ (8008a6c <inicio+0x2e0>)
 8008832:	2296      	movs	r2, #150	@ 0x96
 8008834:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8008836:	4b8e      	ldr	r3, [pc, #568]	@ (8008a70 <inicio+0x2e4>)
 8008838:	2296      	movs	r2, #150	@ 0x96
 800883a:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 800883c:	4b8d      	ldr	r3, [pc, #564]	@ (8008a74 <inicio+0x2e8>)
 800883e:	2296      	movs	r2, #150	@ 0x96
 8008840:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 8008842:	4b8d      	ldr	r3, [pc, #564]	@ (8008a78 <inicio+0x2ec>)
 8008844:	2296      	movs	r2, #150	@ 0x96
 8008846:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 8008848:	4b85      	ldr	r3, [pc, #532]	@ (8008a60 <inicio+0x2d4>)
 800884a:	22aa      	movs	r2, #170	@ 0xaa
 800884c:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 800884e:	4b84      	ldr	r3, [pc, #528]	@ (8008a60 <inicio+0x2d4>)
 8008850:	2241      	movs	r2, #65	@ 0x41
 8008852:	2166      	movs	r1, #102	@ 0x66
 8008854:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 8008856:	4b82      	ldr	r3, [pc, #520]	@ (8008a60 <inicio+0x2d4>)
 8008858:	227f      	movs	r2, #127	@ 0x7f
 800885a:	21cc      	movs	r1, #204	@ 0xcc
 800885c:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = reePlantilla[eetimepaf];
 800885e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a5c <inicio+0x2d0>)
 8008860:	2248      	movs	r2, #72	@ 0x48
 8008862:	5c9a      	ldrb	r2, [r3, r2]
 8008864:	4b85      	ldr	r3, [pc, #532]	@ (8008a7c <inicio+0x2f0>)
 8008866:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 8008868:	f7fe fa9a 	bl	8006da0 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 800886c:	f7fe fab4 	bl	8006dd8 <load_tiempoAhorro2>
	//timeSeconds_HW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix1) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix2));		//	ldw		X,eeTimeUnix1
																									//	ldw		timeSeconds_HW,X
	//timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
	//timeSeconds_LW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix3) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix4));		//	ldw		X,eeTimeUnix3
																										//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 8008870:	4b83      	ldr	r3, [pc, #524]	@ (8008a80 <inicio+0x2f4>)
 8008872:	2200      	movs	r2, #0
 8008874:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 8008876:	4b83      	ldr	r3, [pc, #524]	@ (8008a84 <inicio+0x2f8>)
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 800887c:	4b82      	ldr	r3, [pc, #520]	@ (8008a88 <inicio+0x2fc>)
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 8008882:	4b82      	ldr	r3, [pc, #520]	@ (8008a8c <inicio+0x300>)
 8008884:	2200      	movs	r2, #0
 8008886:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 8008888:	4b81      	ldr	r3, [pc, #516]	@ (8008a90 <inicio+0x304>)
 800888a:	2201      	movs	r2, #1
 800888c:	70da      	strb	r2, [r3, #3]


	//timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
							//	ldw		X,#300;
	timeTxTWF = 20;
 800888e:	4b81      	ldr	r3, [pc, #516]	@ (8008a94 <inicio+0x308>)
 8008890:	2214      	movs	r2, #20
 8008892:	701a      	strb	r2, [r3, #0]
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 8008894:	4b80      	ldr	r3, [pc, #512]	@ (8008a98 <inicio+0x30c>)
 8008896:	2296      	movs	r2, #150	@ 0x96
 8008898:	0052      	lsls	r2, r2, #1
 800889a:	801a      	strh	r2, [r3, #0]
	// carga tiempo de envio de token BLE
	//	mov		timeTxTBLE,#10;
	//	ldw		X,#300;
	//	ldw		timeoutTBLE,X
	timeTxTBLE = 10;
 800889c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a9c <inicio+0x310>)
 800889e:	220a      	movs	r2, #10
 80088a0:	701a      	strb	r2, [r3, #0]
	timeoutTBLE = 300;
 80088a2:	4b7f      	ldr	r3, [pc, #508]	@ (8008aa0 <inicio+0x314>)
 80088a4:	2296      	movs	r2, #150	@ 0x96
 80088a6:	0052      	lsls	r2, r2, #1
 80088a8:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 80088aa:	4b7e      	ldr	r3, [pc, #504]	@ (8008aa4 <inicio+0x318>)
 80088ac:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	4b7d      	ldr	r3, [pc, #500]	@ (8008aa8 <inicio+0x31c>)
 80088b4:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 80088b6:	4b7c      	ldr	r3, [pc, #496]	@ (8008aa8 <inicio+0x31c>)
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	4b7c      	ldr	r3, [pc, #496]	@ (8008aac <inicio+0x320>)
 80088bc:	701a      	strb	r2, [r3, #0]
	waux = 0;
 80088be:	4b7c      	ldr	r3, [pc, #496]	@ (8008ab0 <inicio+0x324>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab4 <inicio+0x328>)
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d103      	bne.n	80088d4 <inicio+0x148>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 80088cc:	4b78      	ldr	r3, [pc, #480]	@ (8008ab0 <inicio+0x324>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 80088d2:	e015      	b.n	8008900 <inicio+0x174>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 80088d4:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 80088d6:	4b76      	ldr	r3, [pc, #472]	@ (8008ab0 <inicio+0x324>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	3301      	adds	r3, #1
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	4b74      	ldr	r3, [pc, #464]	@ (8008ab0 <inicio+0x324>)
 80088e0:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3380      	adds	r3, #128	@ 0x80
 80088e6:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	4b6e      	ldr	r3, [pc, #440]	@ (8008aa8 <inicio+0x31c>)
 80088ee:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 80088f0:	4b6d      	ldr	r3, [pc, #436]	@ (8008aa8 <inicio+0x31c>)
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	4b6d      	ldr	r3, [pc, #436]	@ (8008aac <inicio+0x320>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d100      	bne.n	80088fe <inicio+0x172>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 80088fc:	e7e2      	b.n	80088c4 <inicio+0x138>
	}
lastDataBlockFound:
 80088fe:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 8008900:	4b6b      	ldr	r3, [pc, #428]	@ (8008ab0 <inicio+0x324>)
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	4b6c      	ldr	r3, [pc, #432]	@ (8008ab8 <inicio+0x32c>)
 8008906:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 8008908:	4b6b      	ldr	r3, [pc, #428]	@ (8008ab8 <inicio+0x32c>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	01db      	lsls	r3, r3, #7
 800890e:	001a      	movs	r2, r3
 8008910:	4b6a      	ldr	r3, [pc, #424]	@ (8008abc <inicio+0x330>)
 8008912:	18d3      	adds	r3, r2, r3
 8008914:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	337e      	adds	r3, #126	@ 0x7e
 800891a:	607b      	str	r3, [r7, #4]

	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	4b67      	ldr	r3, [pc, #412]	@ (8008ac0 <inicio+0x334>)
 8008922:	701a      	strb	r2, [r3, #0]
	//cntByteBlockDATA = 0;
	dirBuffer = &data_buffer[0];
 8008924:	4b67      	ldr	r3, [pc, #412]	@ (8008ac4 <inicio+0x338>)
 8008926:	4a68      	ldr	r2, [pc, #416]	@ (8008ac8 <inicio+0x33c>)
 8008928:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 800892a:	4b68      	ldr	r3, [pc, #416]	@ (8008acc <inicio+0x340>)
 800892c:	4a63      	ldr	r2, [pc, #396]	@ (8008abc <inicio+0x330>)
 800892e:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8008930:	4b61      	ldr	r3, [pc, #388]	@ (8008ab8 <inicio+0x32c>)
 8008932:	781a      	ldrb	r2, [r3, #0]
 8008934:	4b53      	ldr	r3, [pc, #332]	@ (8008a84 <inicio+0x2f8>)
 8008936:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 8008938:	f7fe fa7c 	bl	8006e34 <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 800893c:	4b64      	ldr	r3, [pc, #400]	@ (8008ad0 <inicio+0x344>)
 800893e:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	4b58      	ldr	r3, [pc, #352]	@ (8008aa8 <inicio+0x31c>)
 8008946:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 8008948:	4b57      	ldr	r3, [pc, #348]	@ (8008aa8 <inicio+0x31c>)
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	4b57      	ldr	r3, [pc, #348]	@ (8008aac <inicio+0x320>)
 800894e:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008950:	4b57      	ldr	r3, [pc, #348]	@ (8008ab0 <inicio+0x324>)
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4b5e      	ldr	r3, [pc, #376]	@ (8008ad4 <inicio+0x348>)
 800895a:	429a      	cmp	r2, r3
 800895c:	d103      	bne.n	8008966 <inicio+0x1da>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 800895e:	4b54      	ldr	r3, [pc, #336]	@ (8008ab0 <inicio+0x324>)
 8008960:	2200      	movs	r2, #0
 8008962:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 8008964:	e015      	b.n	8008992 <inicio+0x206>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 8008966:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 8008968:	4b51      	ldr	r3, [pc, #324]	@ (8008ab0 <inicio+0x324>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	4b4f      	ldr	r3, [pc, #316]	@ (8008ab0 <inicio+0x324>)
 8008972:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3380      	adds	r3, #128	@ 0x80
 8008978:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	4b4a      	ldr	r3, [pc, #296]	@ (8008aa8 <inicio+0x31c>)
 8008980:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 8008982:	4b49      	ldr	r3, [pc, #292]	@ (8008aa8 <inicio+0x31c>)
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	4b49      	ldr	r3, [pc, #292]	@ (8008aac <inicio+0x320>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d100      	bne.n	8008990 <inicio+0x204>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 800898e:	e7e2      	b.n	8008956 <inicio+0x1ca>
		}
lastEventBlockFound:
 8008990:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 8008992:	4b47      	ldr	r3, [pc, #284]	@ (8008ab0 <inicio+0x324>)
 8008994:	781a      	ldrb	r2, [r3, #0]
 8008996:	4b50      	ldr	r3, [pc, #320]	@ (8008ad8 <inicio+0x34c>)
 8008998:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 800899a:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad8 <inicio+0x34c>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	01db      	lsls	r3, r3, #7
 80089a0:	001a      	movs	r2, r3
 80089a2:	4b4e      	ldr	r3, [pc, #312]	@ (8008adc <inicio+0x350>)
 80089a4:	18d3      	adds	r3, r2, r3
 80089a6:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	337e      	adds	r3, #126	@ 0x7e
 80089ac:	607b      	str	r3, [r7, #4]

		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ae0 <inicio+0x354>)
 80089b4:	701a      	strb	r2, [r3, #0]
		//cntByteBlockEVENT = 0;
		dirBuffer = &event_buffer[0];
 80089b6:	4b43      	ldr	r3, [pc, #268]	@ (8008ac4 <inicio+0x338>)
 80089b8:	4a4a      	ldr	r2, [pc, #296]	@ (8008ae4 <inicio+0x358>)
 80089ba:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 80089bc:	4b43      	ldr	r3, [pc, #268]	@ (8008acc <inicio+0x340>)
 80089be:	4a47      	ldr	r2, [pc, #284]	@ (8008adc <inicio+0x350>)
 80089c0:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 80089c2:	4b45      	ldr	r3, [pc, #276]	@ (8008ad8 <inicio+0x34c>)
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008a84 <inicio+0x2f8>)
 80089c8:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 80089ca:	f7fe fa33 	bl	8006e34 <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 80089ce:	4b46      	ldr	r3, [pc, #280]	@ (8008ae8 <inicio+0x35c>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 80089d4:	4b44      	ldr	r3, [pc, #272]	@ (8008ae8 <inicio+0x35c>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	719a      	strb	r2, [r3, #6]
		uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 80089da:	1cbb      	adds	r3, r7, #2
 80089dc:	4a43      	ldr	r2, [pc, #268]	@ (8008aec <inicio+0x360>)
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	701a      	strb	r2, [r3, #0]
		if(!GetRegFlagState(estado1_Aux, est1Lamp)){
 80089e2:	1cbb      	adds	r3, r7, #2
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2204      	movs	r2, #4
 80089e8:	4013      	ands	r3, r2
 80089ea:	d003      	beq.n	80089f4 <inicio+0x268>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 80089ec:	4b3e      	ldr	r3, [pc, #248]	@ (8008ae8 <inicio+0x35c>)
 80089ee:	2201      	movs	r2, #1
 80089f0:	719a      	strb	r2, [r3, #6]
 80089f2:	e000      	b.n	80089f6 <inicio+0x26a>
			goto initLampOFF;
 80089f4:	46c0      	nop			@ (mov r8, r8)
initLampOFF:
		if(GetRegFlagState(Plantilla[logicos2], funReleDesh))//btjt		logicos2,#funReleDesh,deshTypeAct_02; omite estado Lock sí se eligio función deshielo para relevador
 80089f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a60 <inicio+0x2d4>)
 80089f8:	225b      	movs	r2, #91	@ 0x5b
 80089fa:	5c9b      	ldrb	r3, [r3, r2]
 80089fc:	001a      	movs	r2, r3
 80089fe:	2308      	movs	r3, #8
 8008a00:	4013      	ands	r3, r2
 8008a02:	d10b      	bne.n	8008a1c <inicio+0x290>
			goto deshTypeAct_02;
		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 8008a04:	4b3a      	ldr	r3, [pc, #232]	@ (8008af0 <inicio+0x364>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(estado1_Aux, est1LockDr)){
 8008a0a:	1cbb      	adds	r3, r7, #2
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2240      	movs	r2, #64	@ 0x40
 8008a10:	4013      	ands	r3, r2
 8008a12:	d005      	beq.n	8008a20 <inicio+0x294>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 8008a14:	4b36      	ldr	r3, [pc, #216]	@ (8008af0 <inicio+0x364>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	705a      	strb	r2, [r3, #1]
 8008a1a:	e002      	b.n	8008a22 <inicio+0x296>
			goto deshTypeAct_02;
 8008a1c:	46c0      	nop			@ (mov r8, r8)
 8008a1e:	e000      	b.n	8008a22 <inicio+0x296>
			goto initLockDrOFF;
 8008a20:	46c0      	nop			@ (mov r8, r8)
initLockDrOFF:
deshTypeAct_02:
//		ldw			X,#90
//		ldw			cntSetName,X
		cntSetName = 90;
 8008a22:	4b34      	ldr	r3, [pc, #208]	@ (8008af4 <inicio+0x368>)
 8008a24:	225a      	movs	r2, #90	@ 0x5a
 8008a26:	801a      	strh	r2, [r3, #0]
	//jp	end_init
}
 8008a28:	46c0      	nop			@ (mov r8, r8)
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b002      	add	sp, #8
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000bd8 	.word	0x20000bd8
 8008a34:	20000baf 	.word	0x20000baf
 8008a38:	20000c2a 	.word	0x20000c2a
 8008a3c:	20000c2b 	.word	0x20000c2b
 8008a40:	20000cb7 	.word	0x20000cb7
 8008a44:	20000cb8 	.word	0x20000cb8
 8008a48:	20000cb6 	.word	0x20000cb6
 8008a4c:	20000cb9 	.word	0x20000cb9
 8008a50:	20000cbc 	.word	0x20000cbc
 8008a54:	20000cc1 	.word	0x20000cc1
 8008a58:	20000cc2 	.word	0x20000cc2
 8008a5c:	20000cec 	.word	0x20000cec
 8008a60:	200000b8 	.word	0x200000b8
 8008a64:	20000c2e 	.word	0x20000c2e
 8008a68:	20000c48 	.word	0x20000c48
 8008a6c:	20000c70 	.word	0x20000c70
 8008a70:	20000c71 	.word	0x20000c71
 8008a74:	20000c72 	.word	0x20000c72
 8008a78:	20000c73 	.word	0x20000c73
 8008a7c:	20000c87 	.word	0x20000c87
 8008a80:	20000e84 	.word	0x20000e84
 8008a84:	20000e86 	.word	0x20000e86
 8008a88:	20000e87 	.word	0x20000e87
 8008a8c:	20000e88 	.word	0x20000e88
 8008a90:	20001fbc 	.word	0x20001fbc
 8008a94:	2000202e 	.word	0x2000202e
 8008a98:	20002040 	.word	0x20002040
 8008a9c:	200021ea 	.word	0x200021ea
 8008aa0:	200021ec 	.word	0x200021ec
 8008aa4:	0803c07f 	.word	0x0803c07f
 8008aa8:	20000934 	.word	0x20000934
 8008aac:	20000bb7 	.word	0x20000bb7
 8008ab0:	20000bb6 	.word	0x20000bb6
 8008ab4:	0803efff 	.word	0x0803efff
 8008ab8:	20000e99 	.word	0x20000e99
 8008abc:	0803c000 	.word	0x0803c000
 8008ac0:	20000e98 	.word	0x20000e98
 8008ac4:	20000e90 	.word	0x20000e90
 8008ac8:	20000d78 	.word	0x20000d78
 8008acc:	20000e8c 	.word	0x20000e8c
 8008ad0:	0803707f 	.word	0x0803707f
 8008ad4:	0803bfff 	.word	0x0803bfff
 8008ad8:	20000e9b 	.word	0x20000e9b
 8008adc:	08037000 	.word	0x08037000
 8008ae0:	20000e9a 	.word	0x20000e9a
 8008ae4:	20000df8 	.word	0x20000df8
 8008ae8:	20000c9c 	.word	0x20000c9c
 8008aec:	200001ba 	.word	0x200001ba
 8008af0:	20000c04 	.word	0x20000c04
 8008af4:	200021e8 	.word	0x200021e8

08008af8 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 8008afc:	4b1f      	ldr	r3, [pc, #124]	@ (8008b7c <timeBCD_to_UNIX+0x84>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	0018      	movs	r0, r3
 8008b02:	f000 f853 	bl	8008bac <BCDtoByte>
 8008b06:	0003      	movs	r3, r0
 8008b08:	22fa      	movs	r2, #250	@ 0xfa
 8008b0a:	00d2      	lsls	r2, r2, #3
 8008b0c:	4694      	mov	ip, r2
 8008b0e:	4463      	add	r3, ip
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	4b1b      	ldr	r3, [pc, #108]	@ (8008b80 <timeBCD_to_UNIX+0x88>)
 8008b14:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 8008b16:	4b1b      	ldr	r3, [pc, #108]	@ (8008b84 <timeBCD_to_UNIX+0x8c>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	221f      	movs	r2, #31
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	0018      	movs	r0, r3
 8008b22:	f000 f843 	bl	8008bac <BCDtoByte>
 8008b26:	0003      	movs	r3, r0
 8008b28:	001a      	movs	r2, r3
 8008b2a:	4b17      	ldr	r3, [pc, #92]	@ (8008b88 <timeBCD_to_UNIX+0x90>)
 8008b2c:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 8008b2e:	4b17      	ldr	r3, [pc, #92]	@ (8008b8c <timeBCD_to_UNIX+0x94>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	0018      	movs	r0, r3
 8008b34:	f000 f83a 	bl	8008bac <BCDtoByte>
 8008b38:	0003      	movs	r3, r0
 8008b3a:	001a      	movs	r2, r3
 8008b3c:	4b14      	ldr	r3, [pc, #80]	@ (8008b90 <timeBCD_to_UNIX+0x98>)
 8008b3e:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 8008b40:	4b14      	ldr	r3, [pc, #80]	@ (8008b94 <timeBCD_to_UNIX+0x9c>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 f831 	bl	8008bac <BCDtoByte>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	001a      	movs	r2, r3
 8008b4e:	4b12      	ldr	r3, [pc, #72]	@ (8008b98 <timeBCD_to_UNIX+0xa0>)
 8008b50:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 8008b52:	4b12      	ldr	r3, [pc, #72]	@ (8008b9c <timeBCD_to_UNIX+0xa4>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 f828 	bl	8008bac <BCDtoByte>
 8008b5c:	0003      	movs	r3, r0
 8008b5e:	001a      	movs	r2, r3
 8008b60:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba0 <timeBCD_to_UNIX+0xa8>)
 8008b62:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 8008b64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba4 <timeBCD_to_UNIX+0xac>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f000 f81f 	bl	8008bac <BCDtoByte>
 8008b6e:	0003      	movs	r3, r0
 8008b70:	001a      	movs	r2, r3
 8008b72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <timeBCD_to_UNIX+0xb0>)
 8008b74:	701a      	strb	r2, [r3, #0]
}
 8008b76:	46c0      	nop			@ (mov r8, r8)
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20002164 	.word	0x20002164
 8008b80:	20002184 	.word	0x20002184
 8008b84:	20002165 	.word	0x20002165
 8008b88:	20002186 	.word	0x20002186
 8008b8c:	20002166 	.word	0x20002166
 8008b90:	20002187 	.word	0x20002187
 8008b94:	20002167 	.word	0x20002167
 8008b98:	20002188 	.word	0x20002188
 8008b9c:	20002168 	.word	0x20002168
 8008ba0:	20002189 	.word	0x20002189
 8008ba4:	20002169 	.word	0x20002169
 8008ba8:	2000218a 	.word	0x2000218a

08008bac <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	1dfb      	adds	r3, r7, #7
 8008bb6:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8008bb8:	1dfb      	adds	r3, r7, #7
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	220f      	movs	r2, #15
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	1dfb      	adds	r3, r7, #7
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	1c19      	adds	r1, r3, #0
 8008bcc:	0089      	lsls	r1, r1, #2
 8008bce:	18cb      	adds	r3, r1, r3
 8008bd0:	18db      	adds	r3, r3, r3
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	18d3      	adds	r3, r2, r3
 8008bd6:	b2db      	uxtb	r3, r3

}
 8008bd8:	0018      	movs	r0, r3
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b002      	add	sp, #8
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <logger>:





void logger (void){
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 8008be4:	4bb9      	ldr	r3, [pc, #740]	@ (8008ecc <logger+0x2ec>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d800      	bhi.n	8008bee <logger+0xe>
 8008bec:	e306      	b.n	80091fc <logger+0x61c>
			goto logger_01;//jruge	logger_01;
 8008bee:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 8008bf0:	4bb7      	ldr	r3, [pc, #732]	@ (8008ed0 <logger+0x2f0>)
 8008bf2:	79db      	ldrb	r3, [r3, #7]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d118      	bne.n	8008c2a <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8008bf8:	4bb6      	ldr	r3, [pc, #728]	@ (8008ed4 <logger+0x2f4>)
 8008bfa:	2257      	movs	r2, #87	@ 0x57
 8008bfc:	5c9b      	ldrb	r3, [r3, r2]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d005      	beq.n	8008c0e <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 8008c02:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 8008c04:	4bb4      	ldr	r3, [pc, #720]	@ (8008ed8 <logger+0x2f8>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b45      	cmp	r3, #69	@ 0x45
 8008c0a:	d90a      	bls.n	8008c22 <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8008c0c:	e005      	b.n	8008c1a <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8008c0e:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8008c10:	4bb1      	ldr	r3, [pc, #708]	@ (8008ed8 <logger+0x2f8>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2ba9      	cmp	r3, #169	@ 0xa9
 8008c16:	d906      	bls.n	8008c26 <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8008c18:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8008c1a:	4bad      	ldr	r3, [pc, #692]	@ (8008ed0 <logger+0x2f0>)
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8008c20:	e2ed      	b.n	80091fe <logger+0x61e>
		goto voltArranFAIL;//jra	voltArranFAIL
 8008c22:	46c0      	nop			@ (mov r8, r8)
 8008c24:	e2eb      	b.n	80091fe <logger+0x61e>
		goto voltArranFAIL;//jra voltArranFAIL
 8008c26:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008c28:	e2e9      	b.n	80091fe <logger+0x61e>
			goto voltFlagOK;
 8008c2a:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(flagsWIFI[f_eventLoggerSend])	//btjt		flagsWIFI,#f_eventLoggerSend,event_logg_01; No loggear hasta terminar Tx
 8008c2c:	4bab      	ldr	r3, [pc, #684]	@ (8008edc <logger+0x2fc>)
 8008c2e:	789b      	ldrb	r3, [r3, #2]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d107      	bne.n	8008c44 <logger+0x64>
			goto event_logg_01;
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8008c34:	4ba6      	ldr	r3, [pc, #664]	@ (8008ed0 <logger+0x2f0>)
 8008c36:	791b      	ldrb	r3, [r3, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	4053      	eors	r3, r2
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d102      	bne.n	8008c48 <logger+0x68>
			goto door_event;
		}
event_logg_01:
 8008c42:	e000      	b.n	8008c46 <logger+0x66>
			goto event_logg_01;
 8008c44:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; // jp fin_logger
 8008c46:	e2da      	b.n	80091fe <logger+0x61e>
			goto door_event;
 8008c48:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8008c4a:	4ba5      	ldr	r3, [pc, #660]	@ (8008ee0 <logger+0x300>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d136      	bne.n	8008cc0 <logger+0xe0>
			goto ask_DE_end;
		}
ask_DE_start:
 8008c52:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8008c54:	4ba3      	ldr	r3, [pc, #652]	@ (8008ee4 <logger+0x304>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d068      	beq.n	8008d2e <logger+0x14e>
			goto ask_DE_start_01;
 8008c5c:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8008c5e:	4ba2      	ldr	r3, [pc, #648]	@ (8008ee8 <logger+0x308>)
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	4ba0      	ldr	r3, [pc, #640]	@ (8008eec <logger+0x30c>)
 8008c6a:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8008c6c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ee8 <logger+0x308>)
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	4b9e      	ldr	r3, [pc, #632]	@ (8008eec <logger+0x30c>)
 8008c74:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8008c76:	4b9e      	ldr	r3, [pc, #632]	@ (8008ef0 <logger+0x310>)
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	4b9a      	ldr	r3, [pc, #616]	@ (8008eec <logger+0x30c>)
 8008c82:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008c84:	4b9a      	ldr	r3, [pc, #616]	@ (8008ef0 <logger+0x310>)
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b98      	ldr	r3, [pc, #608]	@ (8008eec <logger+0x30c>)
 8008c8c:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8008c8e:	4b97      	ldr	r3, [pc, #604]	@ (8008eec <logger+0x30c>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8008c94:	4b97      	ldr	r3, [pc, #604]	@ (8008ef4 <logger+0x314>)
 8008c96:	781a      	ldrb	r2, [r3, #0]
 8008c98:	4b94      	ldr	r3, [pc, #592]	@ (8008eec <logger+0x30c>)
 8008c9a:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8008c9c:	4b96      	ldr	r3, [pc, #600]	@ (8008ef8 <logger+0x318>)
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	4b92      	ldr	r3, [pc, #584]	@ (8008eec <logger+0x30c>)
 8008ca2:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8008ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8008ed8 <logger+0x2f8>)
 8008ca6:	781a      	ldrb	r2, [r3, #0]
 8008ca8:	4b90      	ldr	r3, [pc, #576]	@ (8008eec <logger+0x30c>)
 8008caa:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8008cac:	4b8c      	ldr	r3, [pc, #560]	@ (8008ee0 <logger+0x300>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8008cb2:	4b88      	ldr	r3, [pc, #544]	@ (8008ed4 <logger+0x2f4>)
 8008cb4:	2250      	movs	r2, #80	@ 0x50
 8008cb6:	5c9b      	ldrb	r3, [r3, r2]
 8008cb8:	001a      	movs	r2, r3
 8008cba:	4b90      	ldr	r3, [pc, #576]	@ (8008efc <logger+0x31c>)
 8008cbc:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8008cbe:	e039      	b.n	8008d34 <logger+0x154>
			goto ask_DE_end;
 8008cc0:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8008cc2:	4b88      	ldr	r3, [pc, #544]	@ (8008ee4 <logger+0x304>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d133      	bne.n	8008d32 <logger+0x152>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8008cca:	4b8c      	ldr	r3, [pc, #560]	@ (8008efc <logger+0x31c>)
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <logger+0xfa>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8008cd2:	4b83      	ldr	r3, [pc, #524]	@ (8008ee0 <logger+0x300>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8008cd8:	e02c      	b.n	8008d34 <logger+0x154>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8008cda:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8008cdc:	4b82      	ldr	r3, [pc, #520]	@ (8008ee8 <logger+0x308>)
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	0a1b      	lsrs	r3, r3, #8
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	4b81      	ldr	r3, [pc, #516]	@ (8008eec <logger+0x30c>)
 8008ce8:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8008cea:	4b7f      	ldr	r3, [pc, #508]	@ (8008ee8 <logger+0x308>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8008eec <logger+0x30c>)
 8008cf2:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ef0 <logger+0x310>)
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	0a1b      	lsrs	r3, r3, #8
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8008eec <logger+0x30c>)
 8008d00:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8008d02:	4b7b      	ldr	r3, [pc, #492]	@ (8008ef0 <logger+0x310>)
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	4b78      	ldr	r3, [pc, #480]	@ (8008eec <logger+0x30c>)
 8008d0a:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8008d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8008f00 <logger+0x320>)
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	4b76      	ldr	r3, [pc, #472]	@ (8008eec <logger+0x30c>)
 8008d12:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008d14:	4b7b      	ldr	r3, [pc, #492]	@ (8008f04 <logger+0x324>)
 8008d16:	781a      	ldrb	r2, [r3, #0]
 8008d18:	4b74      	ldr	r3, [pc, #464]	@ (8008eec <logger+0x30c>)
 8008d1a:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8008d1c:	4b7a      	ldr	r3, [pc, #488]	@ (8008f08 <logger+0x328>)
 8008d1e:	4a7b      	ldr	r2, [pc, #492]	@ (8008f0c <logger+0x32c>)
 8008d20:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8008d22:	f000 fac9 	bl	80092b8 <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8008d26:	4b6e      	ldr	r3, [pc, #440]	@ (8008ee0 <logger+0x300>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8008d2c:	e002      	b.n	8008d34 <logger+0x154>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	e000      	b.n	8008d34 <logger+0x154>
			goto comp_event;
 8008d32:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8008d34:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee0 <logger+0x300>)
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d130      	bne.n	8008d9e <logger+0x1be>
			goto ask_CE_end;
		}
ask_CE_start:
 8008d3c:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8008d3e:	4b74      	ldr	r3, [pc, #464]	@ (8008f10 <logger+0x330>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d05a      	beq.n	8008dfc <logger+0x21c>
			goto ask_CE_start_01;
 8008d46:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8008d48:	4b67      	ldr	r3, [pc, #412]	@ (8008ee8 <logger+0x308>)
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	0a1b      	lsrs	r3, r3, #8
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	4b70      	ldr	r3, [pc, #448]	@ (8008f14 <logger+0x334>)
 8008d54:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8008d56:	4b64      	ldr	r3, [pc, #400]	@ (8008ee8 <logger+0x308>)
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	4b6d      	ldr	r3, [pc, #436]	@ (8008f14 <logger+0x334>)
 8008d5e:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8008d60:	4b63      	ldr	r3, [pc, #396]	@ (8008ef0 <logger+0x310>)
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	0a1b      	lsrs	r3, r3, #8
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8008f14 <logger+0x334>)
 8008d6c:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008d6e:	4b60      	ldr	r3, [pc, #384]	@ (8008ef0 <logger+0x310>)
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	4b67      	ldr	r3, [pc, #412]	@ (8008f14 <logger+0x334>)
 8008d76:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8008d78:	4b66      	ldr	r3, [pc, #408]	@ (8008f14 <logger+0x334>)
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8008d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8008ef4 <logger+0x314>)
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	4b64      	ldr	r3, [pc, #400]	@ (8008f14 <logger+0x334>)
 8008d84:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8008d86:	4b5c      	ldr	r3, [pc, #368]	@ (8008ef8 <logger+0x318>)
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	4b62      	ldr	r3, [pc, #392]	@ (8008f14 <logger+0x334>)
 8008d8c:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8008d8e:	4b52      	ldr	r3, [pc, #328]	@ (8008ed8 <logger+0x2f8>)
 8008d90:	781a      	ldrb	r2, [r3, #0]
 8008d92:	4b60      	ldr	r3, [pc, #384]	@ (8008f14 <logger+0x334>)
 8008d94:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8008d96:	4b52      	ldr	r3, [pc, #328]	@ (8008ee0 <logger+0x300>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8008d9c:	e031      	b.n	8008e02 <logger+0x222>
			goto ask_CE_end;
 8008d9e:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8008da0:	4b5b      	ldr	r3, [pc, #364]	@ (8008f10 <logger+0x330>)
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d12b      	bne.n	8008e00 <logger+0x220>
			goto desh_event;
		}
comp_event_end:
 8008da8:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8008daa:	4b4f      	ldr	r3, [pc, #316]	@ (8008ee8 <logger+0x308>)
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	4b57      	ldr	r3, [pc, #348]	@ (8008f14 <logger+0x334>)
 8008db6:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8008db8:	4b4b      	ldr	r3, [pc, #300]	@ (8008ee8 <logger+0x308>)
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	4b55      	ldr	r3, [pc, #340]	@ (8008f14 <logger+0x334>)
 8008dc0:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef0 <logger+0x310>)
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	0a1b      	lsrs	r3, r3, #8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	4b51      	ldr	r3, [pc, #324]	@ (8008f14 <logger+0x334>)
 8008dce:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8008dd0:	4b47      	ldr	r3, [pc, #284]	@ (8008ef0 <logger+0x310>)
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8008f14 <logger+0x334>)
 8008dd8:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8008dda:	4b49      	ldr	r3, [pc, #292]	@ (8008f00 <logger+0x320>)
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	4b4d      	ldr	r3, [pc, #308]	@ (8008f14 <logger+0x334>)
 8008de0:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008de2:	4b48      	ldr	r3, [pc, #288]	@ (8008f04 <logger+0x324>)
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	4b4b      	ldr	r3, [pc, #300]	@ (8008f14 <logger+0x334>)
 8008de8:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8008dea:	4b47      	ldr	r3, [pc, #284]	@ (8008f08 <logger+0x328>)
 8008dec:	4a4a      	ldr	r2, [pc, #296]	@ (8008f18 <logger+0x338>)
 8008dee:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8008df0:	f000 fa62 	bl	80092b8 <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 8008df4:	4b3a      	ldr	r3, [pc, #232]	@ (8008ee0 <logger+0x300>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8008dfa:	e002      	b.n	8008e02 <logger+0x222>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8008dfc:	46c0      	nop			@ (mov r8, r8)
 8008dfe:	e000      	b.n	8008e02 <logger+0x222>
			goto desh_event;
 8008e00:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8008e02:	4b37      	ldr	r3, [pc, #220]	@ (8008ee0 <logger+0x300>)
 8008e04:	789b      	ldrb	r3, [r3, #2]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d12f      	bne.n	8008e6a <logger+0x28a>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8008e0a:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8008e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <logger+0x2ec>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d159      	bne.n	8008ec8 <logger+0x2e8>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008e14:	4b34      	ldr	r3, [pc, #208]	@ (8008ee8 <logger+0x308>)
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	0a1b      	lsrs	r3, r3, #8
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f1c <logger+0x33c>)
 8008e20:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 8008e22:	4b31      	ldr	r3, [pc, #196]	@ (8008ee8 <logger+0x308>)
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	4b3c      	ldr	r3, [pc, #240]	@ (8008f1c <logger+0x33c>)
 8008e2a:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008e2c:	4b30      	ldr	r3, [pc, #192]	@ (8008ef0 <logger+0x310>)
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	0a1b      	lsrs	r3, r3, #8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	4b39      	ldr	r3, [pc, #228]	@ (8008f1c <logger+0x33c>)
 8008e38:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef0 <logger+0x310>)
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	4b36      	ldr	r3, [pc, #216]	@ (8008f1c <logger+0x33c>)
 8008e42:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 8008e44:	4b35      	ldr	r3, [pc, #212]	@ (8008f1c <logger+0x33c>)
 8008e46:	2203      	movs	r2, #3
 8008e48:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 8008e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef4 <logger+0x314>)
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	4b33      	ldr	r3, [pc, #204]	@ (8008f1c <logger+0x33c>)
 8008e50:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 8008e52:	4b29      	ldr	r3, [pc, #164]	@ (8008ef8 <logger+0x318>)
 8008e54:	781a      	ldrb	r2, [r3, #0]
 8008e56:	4b31      	ldr	r3, [pc, #196]	@ (8008f1c <logger+0x33c>)
 8008e58:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 8008e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed8 <logger+0x2f8>)
 8008e5c:	781a      	ldrb	r2, [r3, #0]
 8008e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f1c <logger+0x33c>)
 8008e60:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 8008e62:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee0 <logger+0x300>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 8008e68:	e05d      	b.n	8008f26 <logger+0x346>
			goto ask_DhE_end;
 8008e6a:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 8008e6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ecc <logger+0x2ec>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d057      	beq.n	8008f24 <logger+0x344>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 8008e74:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008e76:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee8 <logger+0x308>)
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	4b26      	ldr	r3, [pc, #152]	@ (8008f1c <logger+0x33c>)
 8008e82:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 8008e84:	4b18      	ldr	r3, [pc, #96]	@ (8008ee8 <logger+0x308>)
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	4b24      	ldr	r3, [pc, #144]	@ (8008f1c <logger+0x33c>)
 8008e8c:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008e8e:	4b18      	ldr	r3, [pc, #96]	@ (8008ef0 <logger+0x310>)
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	4b20      	ldr	r3, [pc, #128]	@ (8008f1c <logger+0x33c>)
 8008e9a:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 8008e9c:	4b14      	ldr	r3, [pc, #80]	@ (8008ef0 <logger+0x310>)
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8008f1c <logger+0x33c>)
 8008ea4:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 8008ea6:	4b16      	ldr	r3, [pc, #88]	@ (8008f00 <logger+0x320>)
 8008ea8:	781a      	ldrb	r2, [r3, #0]
 8008eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8008f1c <logger+0x33c>)
 8008eac:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008eae:	4b15      	ldr	r3, [pc, #84]	@ (8008f04 <logger+0x324>)
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f1c <logger+0x33c>)
 8008eb4:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 8008eb6:	4b14      	ldr	r3, [pc, #80]	@ (8008f08 <logger+0x328>)
 8008eb8:	4a19      	ldr	r2, [pc, #100]	@ (8008f20 <logger+0x340>)
 8008eba:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8008ebc:	f000 f9fc 	bl	80092b8 <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8008ec0:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <logger+0x300>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 8008ec6:	e02e      	b.n	8008f26 <logger+0x346>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8008ec8:	46c0      	nop			@ (mov r8, r8)
 8008eca:	e02c      	b.n	8008f26 <logger+0x346>
 8008ecc:	20000bf8 	.word	0x20000bf8
 8008ed0:	20001ef8 	.word	0x20001ef8
 8008ed4:	200000b8 	.word	0x200000b8
 8008ed8:	20000c2e 	.word	0x20000c2e
 8008edc:	20002044 	.word	0x20002044
 8008ee0:	20001fbc 	.word	0x20001fbc
 8008ee4:	20000c9c 	.word	0x20000c9c
 8008ee8:	20001ea4 	.word	0x20001ea4
 8008eec:	20001fe0 	.word	0x20001fe0
 8008ef0:	20001ea6 	.word	0x20001ea6
 8008ef4:	20000c10 	.word	0x20000c10
 8008ef8:	20000c11 	.word	0x20000c11
 8008efc:	20001fcc 	.word	0x20001fcc
 8008f00:	20000c12 	.word	0x20000c12
 8008f04:	20000c13 	.word	0x20000c13
 8008f08:	20000e94 	.word	0x20000e94
 8008f0c:	20001fe4 	.word	0x20001fe4
 8008f10:	20000c04 	.word	0x20000c04
 8008f14:	20001ff4 	.word	0x20001ff4
 8008f18:	20001ff8 	.word	0x20001ff8
 8008f1c:	20002008 	.word	0x20002008
 8008f20:	2000200c 	.word	0x2000200c
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 8008f24:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 8008f26:	4bb7      	ldr	r3, [pc, #732]	@ (8009204 <logger+0x624>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d14c      	bne.n	8008fc8 <logger+0x3e8>
			//goto alarm_event;//	jrne	alarm_event
			goto wifi_event;
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8008f2e:	4bb6      	ldr	r3, [pc, #728]	@ (8009208 <logger+0x628>)
 8008f30:	78db      	ldrb	r3, [r3, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d04a      	beq.n	8008fcc <logger+0x3ec>
			goto power_event_end;
 8008f36:	46c0      	nop			@ (mov r8, r8)
//		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
//		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
//		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
//		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio

		BloqEventPwrOn[EPo_timeInit_4] = reeTimeUnix1;		//ldw	X,eeTimeUnix1
 8008f38:	4bb4      	ldr	r3, [pc, #720]	@ (800920c <logger+0x62c>)
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	4bb4      	ldr	r3, [pc, #720]	@ (8009210 <logger+0x630>)
 8008f3e:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = reeTimeUnix2;		//ldw	EPo_timeInit_HW,X
 8008f40:	4bb4      	ldr	r3, [pc, #720]	@ (8009214 <logger+0x634>)
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	4bb2      	ldr	r3, [pc, #712]	@ (8009210 <logger+0x630>)
 8008f46:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = reeTimeUnix3;		//ldw	X,eeTimeUnix3
 8008f48:	4bb3      	ldr	r3, [pc, #716]	@ (8009218 <logger+0x638>)
 8008f4a:	781a      	ldrb	r2, [r3, #0]
 8008f4c:	4bb0      	ldr	r3, [pc, #704]	@ (8009210 <logger+0x630>)
 8008f4e:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = reeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008f50:	4bb2      	ldr	r3, [pc, #712]	@ (800921c <logger+0x63c>)
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	4bae      	ldr	r3, [pc, #696]	@ (8009210 <logger+0x630>)
 8008f56:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 8008f58:	4bad      	ldr	r3, [pc, #692]	@ (8009210 <logger+0x630>)
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 8008f5e:	4bb0      	ldr	r3, [pc, #704]	@ (8009220 <logger+0x640>)
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	4bab      	ldr	r3, [pc, #684]	@ (8009210 <logger+0x630>)
 8008f64:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 8008f66:	4baf      	ldr	r3, [pc, #700]	@ (8009224 <logger+0x644>)
 8008f68:	781a      	ldrb	r2, [r3, #0]
 8008f6a:	4ba9      	ldr	r3, [pc, #676]	@ (8009210 <logger+0x630>)
 8008f6c:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 8008f6e:	4bae      	ldr	r3, [pc, #696]	@ (8009228 <logger+0x648>)
 8008f70:	781a      	ldrb	r2, [r3, #0]
 8008f72:	4ba7      	ldr	r3, [pc, #668]	@ (8009210 <logger+0x630>)
 8008f74:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008f76:	4bad      	ldr	r3, [pc, #692]	@ (800922c <logger+0x64c>)
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	4ba3      	ldr	r3, [pc, #652]	@ (8009210 <logger+0x630>)
 8008f82:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 8008f84:	4ba9      	ldr	r3, [pc, #676]	@ (800922c <logger+0x64c>)
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	4ba1      	ldr	r3, [pc, #644]	@ (8009210 <logger+0x630>)
 8008f8c:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008f8e:	4ba8      	ldr	r3, [pc, #672]	@ (8009230 <logger+0x650>)
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	0a1b      	lsrs	r3, r3, #8
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	4b9d      	ldr	r3, [pc, #628]	@ (8009210 <logger+0x630>)
 8008f9a:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 8008f9c:	4ba4      	ldr	r3, [pc, #656]	@ (8009230 <logger+0x650>)
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8009210 <logger+0x630>)
 8008fa4:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 8008fa6:	4ba3      	ldr	r3, [pc, #652]	@ (8009234 <logger+0x654>)
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	4b99      	ldr	r3, [pc, #612]	@ (8009210 <logger+0x630>)
 8008fac:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008fae:	4ba2      	ldr	r3, [pc, #648]	@ (8009238 <logger+0x658>)
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	4b97      	ldr	r3, [pc, #604]	@ (8009210 <logger+0x630>)
 8008fb4:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 8008fb6:	4ba1      	ldr	r3, [pc, #644]	@ (800923c <logger+0x65c>)
 8008fb8:	4aa1      	ldr	r2, [pc, #644]	@ (8009240 <logger+0x660>)
 8008fba:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8008fbc:	f000 f97c 	bl	80092b8 <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8008fc0:	4b91      	ldr	r3, [pc, #580]	@ (8009208 <logger+0x628>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	70da      	strb	r2, [r3, #3]
		goto wifi_event;		//jra		wifi_event;
 8008fc6:	e002      	b.n	8008fce <logger+0x3ee>
			goto wifi_event;
 8008fc8:	46c0      	nop			@ (mov r8, r8)
 8008fca:	e000      	b.n	8008fce <logger+0x3ee>
		goto wifi_event;
 8008fcc:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
//;										Evento de wifi
//;----------------------------------------------------------
wifi_event:
		if(flagsEvent[4])		// btjt	flagsEvent,#4,ask_wfE_end;	/ ya había iniciado evento wifi? Sí, checa si ya se termina evento
 8008fce:	4b8e      	ldr	r3, [pc, #568]	@ (8009208 <logger+0x628>)
 8008fd0:	791b      	ldrb	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d133      	bne.n	800903e <logger+0x45e>
			goto ask_wfE_end;
ask_wfE_start:
 8008fd6:	46c0      	nop			@ (mov r8, r8)
		if(!flagsTxControl[f_statWIFI])// btjf	flagsTxControl,#f_statWIFI,wifi_event_start; Hubo desconexión con servidor Wifi ? Si, inicia evento falla wifi
 8008fd8:	4b9a      	ldr	r3, [pc, #616]	@ (8009244 <logger+0x664>)
 8008fda:	789b      	ldrb	r3, [r3, #2]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	4053      	eors	r3, r2
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d05a      	beq.n	800909c <logger+0x4bc>
			goto wifi_event_start;
 8008fe6:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi

wifi_event_start:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeInit_4] = highByte(timeSeconds_HW);	//ldw		WF_timeInit_HW,X
 8008fe8:	4b90      	ldr	r3, [pc, #576]	@ (800922c <logger+0x64c>)
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	4b95      	ldr	r3, [pc, #596]	@ (8009248 <logger+0x668>)
 8008ff4:	711a      	strb	r2, [r3, #4]
		BloqEventWiFiEx[WF_timeInit_3] = lowByte(timeSeconds_HW);
 8008ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800922c <logger+0x64c>)
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	4b92      	ldr	r3, [pc, #584]	@ (8009248 <logger+0x668>)
 8008ffe:	715a      	strb	r2, [r3, #5]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeInit_2] = highByte(timeSeconds_LW);//ldw		WF_timeInit_LW,X;				/ guarda el tiempo de inicio
 8009000:	4b8b      	ldr	r3, [pc, #556]	@ (8009230 <logger+0x650>)
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	0a1b      	lsrs	r3, r3, #8
 8009006:	b29b      	uxth	r3, r3
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b8f      	ldr	r3, [pc, #572]	@ (8009248 <logger+0x668>)
 800900c:	719a      	strb	r2, [r3, #6]
		BloqEventWiFiEx[WF_timeInit_1] = lowByte(timeSeconds_LW);
 800900e:	4b88      	ldr	r3, [pc, #544]	@ (8009230 <logger+0x650>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	4b8c      	ldr	r3, [pc, #560]	@ (8009248 <logger+0x668>)
 8009016:	71da      	strb	r2, [r3, #7]

		BloqEventWiFiEx[WF_eventType] = 5;//mov		WF_eventType,#5;				/ carga el tipo de evento (5 para wifi)
 8009018:	4b8b      	ldr	r3, [pc, #556]	@ (8009248 <logger+0x668>)
 800901a:	2205      	movs	r2, #5
 800901c:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventWiFiEx[WF_tempAmbInit_H] = tdevl;		//ldw		WF_tempAmbInit,x;				/ carga temperatura ambiente
 800901e:	4b80      	ldr	r3, [pc, #512]	@ (8009220 <logger+0x640>)
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	4b89      	ldr	r3, [pc, #548]	@ (8009248 <logger+0x668>)
 8009024:	735a      	strb	r2, [r3, #13]
		BloqEventWiFiEx[WF_tempAmbInit_L] = tdevf;
 8009026:	4b7f      	ldr	r3, [pc, #508]	@ (8009224 <logger+0x644>)
 8009028:	781a      	ldrb	r2, [r3, #0]
 800902a:	4b87      	ldr	r3, [pc, #540]	@ (8009248 <logger+0x668>)
 800902c:	739a      	strb	r2, [r3, #14]
		BloqEventWiFiEx[WF_voltInit] = voltl;		//mov		WF_voltInit,voltl; /carga voltaje
 800902e:	4b7e      	ldr	r3, [pc, #504]	@ (8009228 <logger+0x648>)
 8009030:	781a      	ldrb	r2, [r3, #0]
 8009032:	4b85      	ldr	r3, [pc, #532]	@ (8009248 <logger+0x668>)
 8009034:	745a      	strb	r2, [r3, #17]
		flagsEvent[4] = 1;			//bset	flagsEvent,#4;					/ indica que el evento wifi ya inició
 8009036:	4b74      	ldr	r3, [pc, #464]	@ (8009208 <logger+0x628>)
 8009038:	2201      	movs	r2, #1
 800903a:	711a      	strb	r2, [r3, #4]
		goto alarm_event;			//jp		alarm_event;						/ continúa
 800903c:	e031      	b.n	80090a2 <logger+0x4c2>
			goto ask_wfE_end;
 800903e:	46c0      	nop			@ (mov r8, r8)
ask_wfE_end:
		if(flagsTxControl[f_statWIFI])	//btjt	flagsTxControl,#f_statWIFI,wifi_event_end; Volvió la conexión wifi ? Sí, termina evento falla de wifi
 8009040:	4b80      	ldr	r3, [pc, #512]	@ (8009244 <logger+0x664>)
 8009042:	789b      	ldrb	r3, [r3, #2]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d02b      	beq.n	80090a0 <logger+0x4c0>
			goto wifi_event_end;
 8009048:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
wifi_event_end:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		WF_timeEnd_HW,X
 800904a:	4b78      	ldr	r3, [pc, #480]	@ (800922c <logger+0x64c>)
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	0a1b      	lsrs	r3, r3, #8
 8009050:	b29b      	uxth	r3, r3
 8009052:	b2da      	uxtb	r2, r3
 8009054:	4b7c      	ldr	r3, [pc, #496]	@ (8009248 <logger+0x668>)
 8009056:	721a      	strb	r2, [r3, #8]
		BloqEventWiFiEx[WF_timeEnd_3] = lowByte(timeSeconds_HW);
 8009058:	4b74      	ldr	r3, [pc, #464]	@ (800922c <logger+0x64c>)
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	4b7a      	ldr	r3, [pc, #488]	@ (8009248 <logger+0x668>)
 8009060:	725a      	strb	r2, [r3, #9]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeEnd_2] = highByte(timeSeconds_LW);//ldw		WF_timeEnd_LW,X;				/ guarda el tiempo final
 8009062:	4b73      	ldr	r3, [pc, #460]	@ (8009230 <logger+0x650>)
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	0a1b      	lsrs	r3, r3, #8
 8009068:	b29b      	uxth	r3, r3
 800906a:	b2da      	uxtb	r2, r3
 800906c:	4b76      	ldr	r3, [pc, #472]	@ (8009248 <logger+0x668>)
 800906e:	729a      	strb	r2, [r3, #10]
		BloqEventWiFiEx[WF_timeEnd_1] = lowByte(timeSeconds_LW);
 8009070:	4b6f      	ldr	r3, [pc, #444]	@ (8009230 <logger+0x650>)
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b2da      	uxtb	r2, r3
 8009076:	4b74      	ldr	r3, [pc, #464]	@ (8009248 <logger+0x668>)
 8009078:	72da      	strb	r2, [r3, #11]
		//ldw		X,teval
		BloqEventWiFiEx[WF_tempEvaEnd_H] = teval;//ldw		WF_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 800907a:	4b6e      	ldr	r3, [pc, #440]	@ (8009234 <logger+0x654>)
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	4b72      	ldr	r3, [pc, #456]	@ (8009248 <logger+0x668>)
 8009080:	73da      	strb	r2, [r3, #15]
		BloqEventWiFiEx[WF_tempEvaEnd_L] = tevaf;
 8009082:	4b6d      	ldr	r3, [pc, #436]	@ (8009238 <logger+0x658>)
 8009084:	781a      	ldrb	r2, [r3, #0]
 8009086:	4b70      	ldr	r3, [pc, #448]	@ (8009248 <logger+0x668>)
 8009088:	741a      	strb	r2, [r3, #16]
		//ldw		X,#WF_timeInit_HW
		dirDataLoad = &BloqEventWiFiEx[WF_timeInit_4];//ldw		dirDataLoad,X;					/ indica el inicio del bloque de datos a cargar (evento wifi)
 800908a:	4b6c      	ldr	r3, [pc, #432]	@ (800923c <logger+0x65c>)
 800908c:	4a6f      	ldr	r2, [pc, #444]	@ (800924c <logger+0x66c>)
 800908e:	601a      	str	r2, [r3, #0]
		load_event();//call	load_event
 8009090:	f000 f912 	bl	80092b8 <load_event>

		flagsEvent[4] = 0;//bres	flagsEvent,#4;
 8009094:	4b5c      	ldr	r3, [pc, #368]	@ (8009208 <logger+0x628>)
 8009096:	2200      	movs	r2, #0
 8009098:	711a      	strb	r2, [r3, #4]

		goto alarm_event;//jra alarm_event;	/continúa
 800909a:	e002      	b.n	80090a2 <logger+0x4c2>
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi
 800909c:	46c0      	nop			@ (mov r8, r8)
 800909e:	e000      	b.n	80090a2 <logger+0x4c2>
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
 80090a0:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 80090a2:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsWIFI[f_timeLoggerSend])//btjt		flagsWIFI,#f_timeLoggerSend,jmp_fin_logger; No loggear hasta terminar Tx
 80090a4:	4b6a      	ldr	r3, [pc, #424]	@ (8009250 <logger+0x670>)
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d108      	bne.n	80090be <logger+0x4de>
			goto jmp_fin_logger;
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 80090ac:	4b69      	ldr	r3, [pc, #420]	@ (8009254 <logger+0x674>)
 80090ae:	795b      	ldrb	r3, [r3, #5]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <logger+0x4e2>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 80090b4:	4b68      	ldr	r3, [pc, #416]	@ (8009258 <logger+0x678>)
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <logger+0x4e6>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 80090bc:	e002      	b.n	80090c4 <logger+0x4e4>
			goto jmp_fin_logger;
 80090be:	46c0      	nop			@ (mov r8, r8)
 80090c0:	e09d      	b.n	80091fe <logger+0x61e>
			goto jmp_fin_logger;
 80090c2:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 80090c4:	e09b      	b.n	80091fe <logger+0x61e>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 80090c6:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 80090c8:	4b64      	ldr	r3, [pc, #400]	@ (800925c <logger+0x67c>)
 80090ca:	2251      	movs	r2, #81	@ 0x51
 80090cc:	5c9b      	ldrb	r3, [r3, r2]
 80090ce:	001a      	movs	r2, r3
 80090d0:	233c      	movs	r3, #60	@ 0x3c
 80090d2:	4353      	muls	r3, r2
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	4b60      	ldr	r3, [pc, #384]	@ (8009258 <logger+0x678>)
 80090d8:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG
        //cntLogger_H = 2;  // valor de prueba a cada 10 segundos tomar muestras
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 80090da:	4b54      	ldr	r3, [pc, #336]	@ (800922c <logger+0x64c>)
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	4b5e      	ldr	r3, [pc, #376]	@ (8009260 <logger+0x680>)
 80090e6:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 80090e8:	4b50      	ldr	r3, [pc, #320]	@ (800922c <logger+0x64c>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009260 <logger+0x680>)
 80090f0:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 80090f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009230 <logger+0x650>)
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	4b58      	ldr	r3, [pc, #352]	@ (8009260 <logger+0x680>)
 80090fe:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 8009100:	4b4b      	ldr	r3, [pc, #300]	@ (8009230 <logger+0x650>)
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b2da      	uxtb	r2, r3
 8009106:	4b56      	ldr	r3, [pc, #344]	@ (8009260 <logger+0x680>)
 8009108:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 800910a:	4b45      	ldr	r3, [pc, #276]	@ (8009220 <logger+0x640>)
 800910c:	781a      	ldrb	r2, [r3, #0]
 800910e:	4b54      	ldr	r3, [pc, #336]	@ (8009260 <logger+0x680>)
 8009110:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 8009112:	4b44      	ldr	r3, [pc, #272]	@ (8009224 <logger+0x644>)
 8009114:	781a      	ldrb	r2, [r3, #0]
 8009116:	4b52      	ldr	r3, [pc, #328]	@ (8009260 <logger+0x680>)
 8009118:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 800911a:	4b46      	ldr	r3, [pc, #280]	@ (8009234 <logger+0x654>)
 800911c:	781a      	ldrb	r2, [r3, #0]
 800911e:	4b50      	ldr	r3, [pc, #320]	@ (8009260 <logger+0x680>)
 8009120:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 8009122:	4b45      	ldr	r3, [pc, #276]	@ (8009238 <logger+0x658>)
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	4b4e      	ldr	r3, [pc, #312]	@ (8009260 <logger+0x680>)
 8009128:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 800912a:	4b3f      	ldr	r3, [pc, #252]	@ (8009228 <logger+0x648>)
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	4b4c      	ldr	r3, [pc, #304]	@ (8009260 <logger+0x680>)
 8009130:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 8009132:	4b4c      	ldr	r3, [pc, #304]	@ (8009264 <logger+0x684>)
 8009134:	4a4c      	ldr	r2, [pc, #304]	@ (8009268 <logger+0x688>)
 8009136:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8009138:	4b40      	ldr	r3, [pc, #256]	@ (800923c <logger+0x65c>)
 800913a:	4a49      	ldr	r2, [pc, #292]	@ (8009260 <logger+0x680>)
 800913c:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 800913e:	4b4b      	ldr	r3, [pc, #300]	@ (800926c <logger+0x68c>)
 8009140:	4a4b      	ldr	r2, [pc, #300]	@ (8009270 <logger+0x690>)
 8009142:	601a      	str	r2, [r3, #0]

         // CGM 16/04/2025;  se agrega la direccion del buffer de la Pagina del logger de Datos.
         dirBufferPage = &bufferPageDATA[0];
 8009144:	4b4b      	ldr	r3, [pc, #300]	@ (8009274 <logger+0x694>)
 8009146:	4a4c      	ldr	r2, [pc, #304]	@ (8009278 <logger+0x698>)
 8009148:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 800914a:	4b4c      	ldr	r3, [pc, #304]	@ (800927c <logger+0x69c>)
 800914c:	2260      	movs	r2, #96	@ 0x60
 800914e:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 8009150:	4b4b      	ldr	r3, [pc, #300]	@ (8009280 <logger+0x6a0>)
 8009152:	2209      	movs	r2, #9
 8009154:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 8009156:	4b4b      	ldr	r3, [pc, #300]	@ (8009284 <logger+0x6a4>)
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	4b4b      	ldr	r3, [pc, #300]	@ (8009288 <logger+0x6a8>)
 800915c:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 800915e:	4b4b      	ldr	r3, [pc, #300]	@ (800928c <logger+0x6ac>)
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	4b4b      	ldr	r3, [pc, #300]	@ (8009290 <logger+0x6b0>)
 8009164:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 8009166:	4b46      	ldr	r3, [pc, #280]	@ (8009280 <logger+0x6a0>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	0019      	movs	r1, r3
 800916c:	2080      	movs	r0, #128	@ 0x80
 800916e:	f7f7 f85d 	bl	800022c <__divsi3>
 8009172:	0003      	movs	r3, r0
 8009174:	b2da      	uxtb	r2, r3
 8009176:	4b47      	ldr	r3, [pc, #284]	@ (8009294 <logger+0x6b4>)
 8009178:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 800917a:	4b46      	ldr	r3, [pc, #280]	@ (8009294 <logger+0x6b4>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4a40      	ldr	r2, [pc, #256]	@ (8009280 <logger+0x6a0>)
 8009180:	7812      	ldrb	r2, [r2, #0]
 8009182:	4353      	muls	r3, r2
 8009184:	b2da      	uxtb	r2, r3
 8009186:	4b44      	ldr	r3, [pc, #272]	@ (8009298 <logger+0x6b8>)
 8009188:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         if(cntRegDATA>0)
 800918a:	4b44      	ldr	r3, [pc, #272]	@ (800929c <logger+0x6bc>)
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <logger+0x5be>
        	 cntRegDATA++;	//incw	X
 8009192:	4b42      	ldr	r3, [pc, #264]	@ (800929c <logger+0x6bc>)
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	4b40      	ldr	r3, [pc, #256]	@ (800929c <logger+0x6bc>)
 800919c:	801a      	strh	r2, [r3, #0]

		//;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
		//cpw		X,#1343
		if(cntRegDATA<1343)//jrult	no_clrREG_01
 800919e:	4b3f      	ldr	r3, [pc, #252]	@ (800929c <logger+0x6bc>)
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	4a3f      	ldr	r2, [pc, #252]	@ (80092a0 <logger+0x6c0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d903      	bls.n	80091b0 <logger+0x5d0>
			goto no_clrREG_01;
		cntRegDATA = 1343;// ldw		X,#1343
 80091a8:	4b3c      	ldr	r3, [pc, #240]	@ (800929c <logger+0x6bc>)
 80091aa:	4a3e      	ldr	r2, [pc, #248]	@ (80092a4 <logger+0x6c4>)
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	e000      	b.n	80091b2 <logger+0x5d2>
			goto no_clrREG_01;
 80091b0:	46c0      	nop			@ (mov r8, r8)
no_clrREG_01:


         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 80091b2:	4b3a      	ldr	r3, [pc, #232]	@ (800929c <logger+0x6bc>)
 80091b4:	881a      	ldrh	r2, [r3, #0]
 80091b6:	4b3c      	ldr	r3, [pc, #240]	@ (80092a8 <logger+0x6c8>)
 80091b8:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 80091ba:	4b3c      	ldr	r3, [pc, #240]	@ (80092ac <logger+0x6cc>)
 80091bc:	4a3c      	ldr	r2, [pc, #240]	@ (80092b0 <logger+0x6d0>)
 80091be:	601a      	str	r2, [r3, #0]
 		 reeCntRegDATA = cntReg;
 80091c0:	4b39      	ldr	r3, [pc, #228]	@ (80092a8 <logger+0x6c8>)
 80091c2:	881a      	ldrh	r2, [r3, #0]
 80091c4:	4b3b      	ldr	r3, [pc, #236]	@ (80092b4 <logger+0x6d4>)
 80091c6:	801a      	strh	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 80091c8:	f000 f904 	bl	80093d4 <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 80091cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009288 <logger+0x6a8>)
 80091ce:	781a      	ldrb	r2, [r3, #0]
 80091d0:	4b2c      	ldr	r3, [pc, #176]	@ (8009284 <logger+0x6a4>)
 80091d2:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 80091d4:	4b2e      	ldr	r3, [pc, #184]	@ (8009290 <logger+0x6b0>)
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	4b2c      	ldr	r3, [pc, #176]	@ (800928c <logger+0x6ac>)
 80091da:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 80091dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009254 <logger+0x674>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2201      	movs	r2, #1
 80091e2:	4053      	eors	r3, r2
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <logger+0x618>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 80091ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009254 <logger+0x674>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 80091f0:	4b18      	ldr	r3, [pc, #96]	@ (8009254 <logger+0x674>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 80091f6:	e002      	b.n	80091fe <logger+0x61e>
        	 	 goto noFullLoggerDATA;
 80091f8:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 80091fa:	e000      	b.n	80091fe <logger+0x61e>
		goto fin_logger; //jp fin_logger
 80091fc:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 80091fe:	46c0      	nop			@ (mov r8, r8)
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	20002192 	.word	0x20002192
 8009208:	20001fbc 	.word	0x20001fbc
 800920c:	20000d6d 	.word	0x20000d6d
 8009210:	2000201c 	.word	0x2000201c
 8009214:	20000d6e 	.word	0x20000d6e
 8009218:	20000d6f 	.word	0x20000d6f
 800921c:	20000d70 	.word	0x20000d70
 8009220:	20000c10 	.word	0x20000c10
 8009224:	20000c11 	.word	0x20000c11
 8009228:	20000c2e 	.word	0x20000c2e
 800922c:	20001ea4 	.word	0x20001ea4
 8009230:	20001ea6 	.word	0x20001ea6
 8009234:	20000c12 	.word	0x20000c12
 8009238:	20000c13 	.word	0x20000c13
 800923c:	20000e94 	.word	0x20000e94
 8009240:	20002020 	.word	0x20002020
 8009244:	200021dc 	.word	0x200021dc
 8009248:	200021f0 	.word	0x200021f0
 800924c:	200021f4 	.word	0x200021f4
 8009250:	20002044 	.word	0x20002044
 8009254:	20001ef8 	.word	0x20001ef8
 8009258:	20000e84 	.word	0x20000e84
 800925c:	200000b8 	.word	0x200000b8
 8009260:	20001ea8 	.word	0x20001ea8
 8009264:	20000e90 	.word	0x20000e90
 8009268:	20000d78 	.word	0x20000d78
 800926c:	20000e8c 	.word	0x20000e8c
 8009270:	0803c000 	.word	0x0803c000
 8009274:	20001ea0 	.word	0x20001ea0
 8009278:	20000ea0 	.word	0x20000ea0
 800927c:	20000e89 	.word	0x20000e89
 8009280:	20000e8a 	.word	0x20000e8a
 8009284:	20000e99 	.word	0x20000e99
 8009288:	20000e86 	.word	0x20000e86
 800928c:	20000e98 	.word	0x20000e98
 8009290:	20000e87 	.word	0x20000e87
 8009294:	20000934 	.word	0x20000934
 8009298:	20000bb7 	.word	0x20000bb7
 800929c:	2000212e 	.word	0x2000212e
 80092a0:	0000053e 	.word	0x0000053e
 80092a4:	0000053f 	.word	0x0000053f
 80092a8:	20002132 	.word	0x20002132
 80092ac:	20002134 	.word	0x20002134
 80092b0:	0803f810 	.word	0x0803f810
 80092b4:	20000d72 	.word	0x20000d72

080092b8 <load_event>:
void load_event(){
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 80092bc:	4b2f      	ldr	r3, [pc, #188]	@ (800937c <load_event+0xc4>)
 80092be:	4a30      	ldr	r2, [pc, #192]	@ (8009380 <load_event+0xc8>)
 80092c0:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 80092c2:	4b30      	ldr	r3, [pc, #192]	@ (8009384 <load_event+0xcc>)
 80092c4:	4a30      	ldr	r2, [pc, #192]	@ (8009388 <load_event+0xd0>)
 80092c6:	601a      	str	r2, [r3, #0]

		// CGM 16/04/2025;  se agrega la direccion del buffer de la Pagina del logger de EVENTOS.
		dirBufferPage = &bufferPageEVENT[0];
 80092c8:	4b30      	ldr	r3, [pc, #192]	@ (800938c <load_event+0xd4>)
 80092ca:	4a31      	ldr	r2, [pc, #196]	@ (8009390 <load_event+0xd8>)
 80092cc:	601a      	str	r2, [r3, #0]

		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 80092ce:	4b31      	ldr	r3, [pc, #196]	@ (8009394 <load_event+0xdc>)
 80092d0:	22a0      	movs	r2, #160	@ 0xa0
 80092d2:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 80092d4:	4b30      	ldr	r3, [pc, #192]	@ (8009398 <load_event+0xe0>)
 80092d6:	220e      	movs	r2, #14
 80092d8:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 80092da:	4b30      	ldr	r3, [pc, #192]	@ (800939c <load_event+0xe4>)
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	4b30      	ldr	r3, [pc, #192]	@ (80093a0 <load_event+0xe8>)
 80092e0:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 80092e2:	4b30      	ldr	r3, [pc, #192]	@ (80093a4 <load_event+0xec>)
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	4b30      	ldr	r3, [pc, #192]	@ (80093a8 <load_event+0xf0>)
 80092e8:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 80092ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <load_event+0xe0>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	0019      	movs	r1, r3
 80092f0:	2080      	movs	r0, #128	@ 0x80
 80092f2:	f7f6 ff9b 	bl	800022c <__divsi3>
 80092f6:	0003      	movs	r3, r0
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	4b2c      	ldr	r3, [pc, #176]	@ (80093ac <load_event+0xf4>)
 80092fc:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 80092fe:	4b2b      	ldr	r3, [pc, #172]	@ (80093ac <load_event+0xf4>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	4a25      	ldr	r2, [pc, #148]	@ (8009398 <load_event+0xe0>)
 8009304:	7812      	ldrb	r2, [r2, #0]
 8009306:	4353      	muls	r3, r2
 8009308:	b2da      	uxtb	r2, r3
 800930a:	4b29      	ldr	r3, [pc, #164]	@ (80093b0 <load_event+0xf8>)
 800930c:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 800930e:	4b29      	ldr	r3, [pc, #164]	@ (80093b4 <load_event+0xfc>)
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	4b27      	ldr	r3, [pc, #156]	@ (80093b4 <load_event+0xfc>)
 8009318:	801a      	strh	r2, [r3, #0]
//		;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
//		cpw		X,#1439
//		jrult	no_clrREG_02
//		;clrw	X
//		ldw		X,#1439
		if(cntRegEVENT<1439)
 800931a:	4b26      	ldr	r3, [pc, #152]	@ (80093b4 <load_event+0xfc>)
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	4a26      	ldr	r2, [pc, #152]	@ (80093b8 <load_event+0x100>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d903      	bls.n	800932c <load_event+0x74>
			goto no_clrREG_02;
		cntRegEVENT = 1439;
 8009324:	4b23      	ldr	r3, [pc, #140]	@ (80093b4 <load_event+0xfc>)
 8009326:	4a25      	ldr	r2, [pc, #148]	@ (80093bc <load_event+0x104>)
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e000      	b.n	800932e <load_event+0x76>
			goto no_clrREG_02;
 800932c:	46c0      	nop			@ (mov r8, r8)
no_clrREG_02:

		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800932e:	4b21      	ldr	r3, [pc, #132]	@ (80093b4 <load_event+0xfc>)
 8009330:	881a      	ldrh	r2, [r3, #0]
 8009332:	4b23      	ldr	r3, [pc, #140]	@ (80093c0 <load_event+0x108>)
 8009334:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 8009336:	4b23      	ldr	r3, [pc, #140]	@ (80093c4 <load_event+0x10c>)
 8009338:	4a23      	ldr	r2, [pc, #140]	@ (80093c8 <load_event+0x110>)
 800933a:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 800933c:	4b20      	ldr	r3, [pc, #128]	@ (80093c0 <load_event+0x108>)
 800933e:	881a      	ldrh	r2, [r3, #0]
 8009340:	4b22      	ldr	r3, [pc, #136]	@ (80093cc <load_event+0x114>)
 8009342:	801a      	strh	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 8009344:	f000 f846 	bl	80093d4 <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 8009348:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <load_event+0xe8>)
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	4b13      	ldr	r3, [pc, #76]	@ (800939c <load_event+0xe4>)
 800934e:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 8009350:	4b15      	ldr	r3, [pc, #84]	@ (80093a8 <load_event+0xf0>)
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	4b13      	ldr	r3, [pc, #76]	@ (80093a4 <load_event+0xec>)
 8009356:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8009358:	4b1d      	ldr	r3, [pc, #116]	@ (80093d0 <load_event+0x118>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2201      	movs	r2, #1
 800935e:	4053      	eors	r3, r2
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <load_event+0xbc>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 8009366:	4b1a      	ldr	r3, [pc, #104]	@ (80093d0 <load_event+0x118>)
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 800936c:	4b18      	ldr	r3, [pc, #96]	@ (80093d0 <load_event+0x118>)
 800936e:	2201      	movs	r2, #1
 8009370:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 8009372:	e000      	b.n	8009376 <load_event+0xbe>
			goto noFullLoggerEVENT;
 8009374:	46c0      	nop			@ (mov r8, r8)
}
 8009376:	46c0      	nop			@ (mov r8, r8)
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000e90 	.word	0x20000e90
 8009380:	20000df8 	.word	0x20000df8
 8009384:	20000e8c 	.word	0x20000e8c
 8009388:	08037000 	.word	0x08037000
 800938c:	20001ea0 	.word	0x20001ea0
 8009390:	200016a0 	.word	0x200016a0
 8009394:	20000e89 	.word	0x20000e89
 8009398:	20000e8a 	.word	0x20000e8a
 800939c:	20000e9b 	.word	0x20000e9b
 80093a0:	20000e86 	.word	0x20000e86
 80093a4:	20000e9a 	.word	0x20000e9a
 80093a8:	20000e87 	.word	0x20000e87
 80093ac:	20000934 	.word	0x20000934
 80093b0:	20000bb7 	.word	0x20000bb7
 80093b4:	20002130 	.word	0x20002130
 80093b8:	0000059e 	.word	0x0000059e
 80093bc:	0000059f 	.word	0x0000059f
 80093c0:	20002132 	.word	0x20002132
 80093c4:	20002134 	.word	0x20002134
 80093c8:	0803f812 	.word	0x0803f812
 80093cc:	20000d74 	.word	0x20000d74
 80093d0:	20001ef8 	.word	0x20001ef8

080093d4 <load_buffer_logger>:

void load_buffer_logger(){
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 80093da:	4b49      	ldr	r3, [pc, #292]	@ (8009500 <load_buffer_logger+0x12c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 80093e0:	4b48      	ldr	r3, [pc, #288]	@ (8009504 <load_buffer_logger+0x130>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 80093e6:	4b48      	ldr	r3, [pc, #288]	@ (8009508 <load_buffer_logger+0x134>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	001a      	movs	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 80093f2:	4b46      	ldr	r3, [pc, #280]	@ (800950c <load_buffer_logger+0x138>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3301      	adds	r3, #1
 800940a:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 800940c:	4b3f      	ldr	r3, [pc, #252]	@ (800950c <load_buffer_logger+0x138>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	b2da      	uxtb	r2, r3
 8009414:	4b3d      	ldr	r3, [pc, #244]	@ (800950c <load_buffer_logger+0x138>)
 8009416:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 8009418:	4b3b      	ldr	r3, [pc, #236]	@ (8009508 <load_buffer_logger+0x134>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	4b39      	ldr	r3, [pc, #228]	@ (8009508 <load_buffer_logger+0x134>)
 8009422:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 8009424:	4b38      	ldr	r3, [pc, #224]	@ (8009508 <load_buffer_logger+0x134>)
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	4b39      	ldr	r3, [pc, #228]	@ (8009510 <load_buffer_logger+0x13c>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d359      	bcc.n	80094e4 <load_buffer_logger+0x110>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 8009430:	4b34      	ldr	r3, [pc, #208]	@ (8009504 <load_buffer_logger+0x130>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	337f      	adds	r3, #127	@ 0x7f
 8009436:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	4b35      	ldr	r3, [pc, #212]	@ (8009514 <load_buffer_logger+0x140>)
 800943e:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 8009440:	4b34      	ldr	r3, [pc, #208]	@ (8009514 <load_buffer_logger+0x140>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	3301      	adds	r3, #1
 8009446:	b2da      	uxtb	r2, r3
 8009448:	4b32      	ldr	r3, [pc, #200]	@ (8009514 <load_buffer_logger+0x140>)
 800944a:	701a      	strb	r2, [r3, #0]
		//*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
		*point_X = 1;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3b01      	subs	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 800945e:	4b2e      	ldr	r3, [pc, #184]	@ (8009518 <load_buffer_logger+0x144>)
 8009460:	22aa      	movs	r2, #170	@ 0xaa
 8009462:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 8009464:	4b2d      	ldr	r3, [pc, #180]	@ (800951c <load_buffer_logger+0x148>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	01db      	lsls	r3, r3, #7
 800946a:	b29a      	uxth	r2, r3
 800946c:	4b2c      	ldr	r3, [pc, #176]	@ (8009520 <load_buffer_logger+0x14c>)
 800946e:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 8009470:	4b2c      	ldr	r3, [pc, #176]	@ (8009524 <load_buffer_logger+0x150>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a2a      	ldr	r2, [pc, #168]	@ (8009520 <load_buffer_logger+0x14c>)
 8009476:	8812      	ldrh	r2, [r2, #0]
 8009478:	189a      	adds	r2, r3, r2
 800947a:	4b2b      	ldr	r3, [pc, #172]	@ (8009528 <load_buffer_logger+0x154>)
 800947c:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 800947e:	4b21      	ldr	r3, [pc, #132]	@ (8009504 <load_buffer_logger+0x130>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4b2a      	ldr	r3, [pc, #168]	@ (800952c <load_buffer_logger+0x158>)
 8009484:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	607b      	str	r3, [r7, #4]

		/*
		 * CGM 16/04/2025
		 * Se realiza una copia de la pagina actual en RAM y si existe un grabado de un bloquq de 128 bytes incompletos, se realizará un borrado de pagina y solo se escribiran  los bloques de 128 bytes que estan completos
		 */
		grabadoLoggerBloquesCompletos(dirPointer, dirBufferPage);
 800948a:	4b27      	ldr	r3, [pc, #156]	@ (8009528 <load_buffer_logger+0x154>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <load_buffer_logger+0x15c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	0019      	movs	r1, r3
 8009494:	0010      	movs	r0, r2
 8009496:	f7fd ffcf 	bl	8007438 <grabadoLoggerBloquesCompletos>

		GRABA_BLOCK();		//call	GRABA_BLOCK
 800949a:	f7fd fe01 	bl	80070a0 <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 800949e:	f7fd fd15 	bl	8006ecc <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 80094a2:	f7fd fd01 	bl	8006ea8 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 80094a6:	4b1d      	ldr	r3, [pc, #116]	@ (800951c <load_buffer_logger+0x148>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	4b1b      	ldr	r3, [pc, #108]	@ (800951c <load_buffer_logger+0x148>)
 80094b0:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 80094b2:	4b1a      	ldr	r3, [pc, #104]	@ (800951c <load_buffer_logger+0x148>)
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009534 <load_buffer_logger+0x160>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d306      	bcc.n	80094cc <load_buffer_logger+0xf8>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 80094be:	4b17      	ldr	r3, [pc, #92]	@ (800951c <load_buffer_logger+0x148>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 80094c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009538 <load_buffer_logger+0x164>)
 80094c6:	2201      	movs	r2, #1
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	e000      	b.n	80094ce <load_buffer_logger+0xfa>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 80094cc:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 80094ce:	f7fd fcb1 	bl	8006e34 <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 80094d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009504 <load_buffer_logger+0x130>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <load_buffer_logger+0x134>)
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	e000      	b.n	80094e6 <load_buffer_logger+0x112>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 80094e4:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 80094e6:	4b09      	ldr	r3, [pc, #36]	@ (800950c <load_buffer_logger+0x138>)
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	4b14      	ldr	r3, [pc, #80]	@ (800953c <load_buffer_logger+0x168>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d200      	bcs.n	80094f4 <load_buffer_logger+0x120>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 80094f2:	e781      	b.n	80093f8 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 80094f4:	46c0      	nop			@ (mov r8, r8)

}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b004      	add	sp, #16
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	20000e94 	.word	0x20000e94
 8009504:	20000e90 	.word	0x20000e90
 8009508:	20000e87 	.word	0x20000e87
 800950c:	20000e88 	.word	0x20000e88
 8009510:	20000bb7 	.word	0x20000bb7
 8009514:	20000934 	.word	0x20000934
 8009518:	20000e78 	.word	0x20000e78
 800951c:	20000e86 	.word	0x20000e86
 8009520:	20000936 	.word	0x20000936
 8009524:	20000e8c 	.word	0x20000e8c
 8009528:	20000e7c 	.word	0x20000e7c
 800952c:	20000e80 	.word	0x20000e80
 8009530:	20001ea0 	.word	0x20001ea0
 8009534:	20000e89 	.word	0x20000e89
 8009538:	20001ef8 	.word	0x20001ef8
 800953c:	20000e8a 	.word	0x20000e8a

08009540 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0

    return timemilis;
 8009544:	4b02      	ldr	r3, [pc, #8]	@ (8009550 <millis+0x10>)
 8009546:	681b      	ldr	r3, [r3, #0]
}
 8009548:	0018      	movs	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	20000940 	.word	0x20000940

08009554 <reconfigura_perif>:

void reconfigura_perif(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
//	HAL_IWDG_Refresh(&hiwdg);
	initEEPROMEmulated(); // Init EEPROM Emulated
 8009558:	f7f9 f8c2 	bl	80026e0 <initEEPROMEmulated>

	HAL_Init();
 800955c:	f008 fbe7 	bl	8011d2e <HAL_Init>
	SystemClock_Config();
 8009560:	f000 fa1e 	bl	80099a0 <SystemClock_Config>

	configura_perif_2();
 8009564:	f000 f80c 	bl	8009580 <configura_perif_2>

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8009568:	2007      	movs	r0, #7
 800956a:	f009 ffd8 	bl	801351e <HAL_NVIC_DisableIRQ>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800956e:	4b03      	ldr	r3, [pc, #12]	@ (800957c <reconfigura_perif+0x28>)
 8009570:	0018      	movs	r0, r3
 8009572:	f00f fd7f 	bl	8019074 <HAL_RTCEx_DeactivateWakeUpTimer>

}
 8009576:	46c0      	nop			@ (mov r8, r8)
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000578 	.word	0x20000578

08009580 <configura_perif_2>:

void configura_perif_2(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 8009584:	f000 ff00 	bl	800a388 <MX_GPIO_Init>
	  MX_DMA_Init();
 8009588:	f000 fed8 	bl	800a33c <MX_DMA_Init>
	  MX_ADC1_Init();
 800958c:	f000 fa72 	bl	8009a74 <MX_ADC1_Init>
	  MX_I2C1_Init();
 8009590:	f000 fbcc 	bl	8009d2c <MX_I2C1_Init>
	  MX_IWDG_Init();
 8009594:	f000 fc0c 	bl	8009db0 <MX_IWDG_Init>
	  MX_TIM3_Init();
 8009598:	f000 fd70 	bl	800a07c <MX_TIM3_Init>
	  MX_TIM6_Init();
 800959c:	f000 fdf0 	bl	800a180 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80095a0:	f000 fe2e 	bl	800a200 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80095a4:	f000 fe7a 	bl	800a29c <MX_USART4_UART_Init>


}
 80095a8:	46c0      	nop			@ (mov r8, r8)
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 80095b4:	4b21      	ldr	r3, [pc, #132]	@ (800963c <check_Tick_1ms+0x8c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	4b20      	ldr	r3, [pc, #128]	@ (800963c <check_Tick_1ms+0x8c>)
 80095bc:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)							// contador prescala 1ms =
 80095be:	4b1f      	ldr	r3, [pc, #124]	@ (800963c <check_Tick_1ms+0x8c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	dd0f      	ble.n	80095e6 <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 80095c6:	4b1d      	ldr	r3, [pc, #116]	@ (800963c <check_Tick_1ms+0x8c>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;							// Manuel, levanta flag 1ms
 80095cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009640 <check_Tick_1ms+0x90>)
 80095ce:	2201      	movs	r2, #1
 80095d0:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 80095d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009644 <check_Tick_1ms+0x94>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009644 <check_Tick_1ms+0x94>)
 80095da:	601a      	str	r2, [r3, #0]
						timemilis++;							// variable contadora de milisegundos
 80095dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009648 <check_Tick_1ms+0x98>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	4b19      	ldr	r3, [pc, #100]	@ (8009648 <check_Tick_1ms+0x98>)
 80095e4:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)						// contador prescala 10ms
 80095e6:	4b17      	ldr	r3, [pc, #92]	@ (8009644 <check_Tick_1ms+0x94>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b09      	cmp	r3, #9
 80095ec:	dd0a      	ble.n	8009604 <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 80095ee:	4b15      	ldr	r3, [pc, #84]	@ (8009644 <check_Tick_1ms+0x94>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
						tick_10ms =1;							// flag base de tiempo 10ms
 80095f4:	4b15      	ldr	r3, [pc, #84]	@ (800964c <check_Tick_1ms+0x9c>)
 80095f6:	2201      	movs	r2, #1
 80095f8:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 80095fa:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <check_Tick_1ms+0xa0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	4b13      	ldr	r3, [pc, #76]	@ (8009650 <check_Tick_1ms+0xa0>)
 8009602:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)						// contador prescala 100ms
 8009604:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <check_Tick_1ms+0xa0>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b09      	cmp	r3, #9
 800960a:	dd0a      	ble.n	8009622 <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 800960c:	4b10      	ldr	r3, [pc, #64]	@ (8009650 <check_Tick_1ms+0xa0>)
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
						tick_100ms =1;							// flag base de tiempo 100ms
 8009612:	4b10      	ldr	r3, [pc, #64]	@ (8009654 <check_Tick_1ms+0xa4>)
 8009614:	2201      	movs	r2, #1
 8009616:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 8009618:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <check_Tick_1ms+0xa8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <check_Tick_1ms+0xa8>)
 8009620:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)							// contador prescala 1s
 8009622:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <check_Tick_1ms+0xa8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b09      	cmp	r3, #9
 8009628:	dd05      	ble.n	8009636 <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <check_Tick_1ms+0xa8>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8009630:	4b0a      	ldr	r3, [pc, #40]	@ (800965c <check_Tick_1ms+0xac>)
 8009632:	2201      	movs	r2, #1
 8009634:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 8009636:	46c0      	nop			@ (mov r8, r8)
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20000944 	.word	0x20000944
 8009640:	20000938 	.word	0x20000938
 8009644:	20000948 	.word	0x20000948
 8009648:	20000940 	.word	0x20000940
 800964c:	20000939 	.word	0x20000939
 8009650:	2000094c 	.word	0x2000094c
 8009654:	2000093a 	.word	0x2000093a
 8009658:	20000950 	.word	0x20000950
 800965c:	2000093b 	.word	0x2000093b

08009660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initEEPROMEmulated(); // Init EEPROM Emulated
 8009664:	f7f9 f83c 	bl	80026e0 <initEEPROMEmulated>
	timeRstBLE = 1;
 8009668:	4ba9      	ldr	r3, [pc, #676]	@ (8009910 <main+0x2b0>)
 800966a:	2201      	movs	r2, #1
 800966c:	701a      	strb	r2, [r3, #0]
	inicio ();
 800966e:	f7ff f88d 	bl	800878c <inicio>

	ProcesosC = 6;
 8009672:	4ba8      	ldr	r3, [pc, #672]	@ (8009914 <main+0x2b4>)
 8009674:	2206      	movs	r2, #6
 8009676:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009678:	f008 fb59 	bl	8011d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800967c:	f000 f990 	bl	80099a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  configura_perif_2();
 8009680:	f7ff ff7e 	bl	8009580 <configura_perif_2>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009684:	f000 fe80 	bl	800a388 <MX_GPIO_Init>
  MX_DMA_Init();
 8009688:	f000 fe58 	bl	800a33c <MX_DMA_Init>
  MX_ADC1_Init();
 800968c:	f000 f9f2 	bl	8009a74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009690:	f000 fb4c 	bl	8009d2c <MX_I2C1_Init>
  MX_IWDG_Init();
 8009694:	f000 fb8c 	bl	8009db0 <MX_IWDG_Init>
  MX_RTC_Init();
 8009698:	f000 fbac 	bl	8009df4 <MX_RTC_Init>
  MX_TIM3_Init();
 800969c:	f000 fcee 	bl	800a07c <MX_TIM3_Init>
  MX_TIM6_Init();
 80096a0:	f000 fd6e 	bl	800a180 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80096a4:	f000 fdac 	bl	800a200 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80096a8:	f000 fdf8 	bl	800a29c <MX_USART4_UART_Init>
  MX_TIM1_Init();
 80096ac:	f000 fc18 	bl	8009ee0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 80096b0:	f7fa ffbc 	bl	800462c <Modbus_ModbusSalave>
  //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin(reePlantilla[eeAddModBus]);
 80096b4:	4b98      	ldr	r3, [pc, #608]	@ (8009918 <main+0x2b8>)
 80096b6:	2272      	movs	r2, #114	@ 0x72
 80096b8:	5c9b      	ldrb	r3, [r3, r2]
 80096ba:	0018      	movs	r0, r3
 80096bc:	f7fa ffbc 	bl	8004638 <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 80096c0:	4b96      	ldr	r3, [pc, #600]	@ (800991c <main+0x2bc>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80096c6:	4b96      	ldr	r3, [pc, #600]	@ (8009920 <main+0x2c0>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	2104      	movs	r1, #4
 80096cc:	0018      	movs	r0, r3
 80096ce:	f00a ff60 	bl	8014592 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 80096d2:	4b94      	ldr	r3, [pc, #592]	@ (8009924 <main+0x2c4>)
 80096d4:	2203      	movs	r2, #3
 80096d6:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 80096d8:	4b8d      	ldr	r3, [pc, #564]	@ (8009910 <main+0x2b0>)
 80096da:	2208      	movs	r2, #8
 80096dc:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 80096de:	4b91      	ldr	r3, [pc, #580]	@ (8009924 <main+0x2c4>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 80096e4:	4b90      	ldr	r3, [pc, #576]	@ (8009928 <main+0x2c8>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	2120      	movs	r1, #32
 80096ea:	0018      	movs	r0, r3
 80096ec:	f00a ff51 	bl	8014592 <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80096f0:	2007      	movs	r0, #7
 80096f2:	f009 ff14 	bl	801351e <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80096f6:	4b8d      	ldr	r3, [pc, #564]	@ (800992c <main+0x2cc>)
 80096f8:	0018      	movs	r0, r3
 80096fa:	f00f fcbb 	bl	8019074 <HAL_RTCEx_DeactivateWakeUpTimer>

  while (1)
  {

testTimmingProcess:
	ProcesosC++;
 80096fe:	4b85      	ldr	r3, [pc, #532]	@ (8009914 <main+0x2b4>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	4b83      	ldr	r3, [pc, #524]	@ (8009914 <main+0x2b4>)
 8009708:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 800970a:	e000      	b.n	800970e <main+0xae>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 800970c:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 800970e:	4b88      	ldr	r3, [pc, #544]	@ (8009930 <main+0x2d0>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2201      	movs	r2, #1
 8009714:	4013      	ands	r3, r2
 8009716:	d0f9      	beq.n	800970c <main+0xac>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 8009718:	4b85      	ldr	r3, [pc, #532]	@ (8009930 <main+0x2d0>)
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	4b84      	ldr	r3, [pc, #528]	@ (8009930 <main+0x2d0>)
 800971e:	2101      	movs	r1, #1
 8009720:	438a      	bics	r2, r1
 8009722:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 8009724:	4b83      	ldr	r3, [pc, #524]	@ (8009934 <main+0x2d4>)
 8009726:	0018      	movs	r0, r3
 8009728:	f00d f97e 	bl	8016a28 <HAL_IWDG_Refresh>

	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO6 toogle test
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 800972c:	4b82      	ldr	r3, [pc, #520]	@ (8009938 <main+0x2d8>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	4b80      	ldr	r3, [pc, #512]	@ (8009938 <main+0x2d8>)
 8009736:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 8009738:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 800973a:	f7fb ff4d 	bl	80055d8 <main10>

    muestreo();
 800973e:	f000 feed 	bl	800a51c <muestreo>

  	if(StateSleep == 0x55){
 8009742:	4b7e      	ldr	r3, [pc, #504]	@ (800993c <main+0x2dc>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b55      	cmp	r3, #85	@ 0x55
 8009748:	d101      	bne.n	800974e <main+0xee>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 800974a:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 800974c:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 800974e:	f7fb ffc5 	bl	80056dc <retardoDeActuadores>

  	asm ("nop");
 8009752:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 8009754:	f7ff ff2c 	bl	80095b0 <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 8009758:	4b6d      	ldr	r3, [pc, #436]	@ (8009910 <main+0x2b0>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <main+0x114>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 8009760:	4b6f      	ldr	r3, [pc, #444]	@ (8009920 <main+0x2c0>)
 8009762:	2201      	movs	r2, #1
 8009764:	2140      	movs	r1, #64	@ 0x40
 8009766:	0018      	movs	r0, r3
 8009768:	f00a ff13 	bl	8014592 <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 800976c:	4b6d      	ldr	r3, [pc, #436]	@ (8009924 <main+0x2c4>)
 800976e:	2201      	movs	r2, #1
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e018      	b.n	80097a6 <main+0x146>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 8009774:	4b6a      	ldr	r3, [pc, #424]	@ (8009920 <main+0x2c0>)
 8009776:	2200      	movs	r2, #0
 8009778:	2140      	movs	r1, #64	@ 0x40
 800977a:	0018      	movs	r0, r3
 800977c:	f00a ff09 	bl	8014592 <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 8009780:	4b68      	ldr	r3, [pc, #416]	@ (8009924 <main+0x2c4>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d00b      	beq.n	80097a0 <main+0x140>
 8009788:	dc0d      	bgt.n	80097a6 <main+0x146>
 800978a:	2b01      	cmp	r3, #1
 800978c:	d002      	beq.n	8009794 <main+0x134>
 800978e:	2b02      	cmp	r3, #2
 8009790:	d003      	beq.n	800979a <main+0x13a>
 8009792:	e008      	b.n	80097a6 <main+0x146>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8009794:	f7fb fb56 	bl	8004e44 <SetUpBluetooth_Ble>
 8009798:	e005      	b.n	80097a6 <main+0x146>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 800979a:	f7fb fbbb 	bl	8004f14 <GetParamBluetooth_Ble>
 800979e:	e002      	b.n	80097a6 <main+0x146>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 80097a0:	f7fb fc18 	bl	8004fd4 <TransmitReceive_Ble>
 80097a4:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 80097a6:	f7fb fe6b 	bl	8005480 <Read_Inpunts_ble>
//  			flagsLogger [5] = 0;				// permite loggeo de datos
//  		}
//  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
//  	}

  	if(tick_1s){
 80097aa:	4b65      	ldr	r3, [pc, #404]	@ (8009940 <main+0x2e0>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d006      	beq.n	80097c0 <main+0x160>
  	  asm ("nop");
 80097b2:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 80097b4:	4b63      	ldr	r3, [pc, #396]	@ (8009944 <main+0x2e4>)
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	4b61      	ldr	r3, [pc, #388]	@ (8009944 <main+0x2e4>)
 80097be:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 80097c0:	4b61      	ldr	r3, [pc, #388]	@ (8009948 <main+0x2e8>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <main+0x174>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 80097c8:	4b60      	ldr	r3, [pc, #384]	@ (800994c <main+0x2ec>)
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	3301      	adds	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	4b5e      	ldr	r3, [pc, #376]	@ (800994c <main+0x2ec>)
 80097d2:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  	HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 80097d4:	495e      	ldr	r1, [pc, #376]	@ (8009950 <main+0x2f0>)
 80097d6:	4b55      	ldr	r3, [pc, #340]	@ (800992c <main+0x2cc>)
 80097d8:	2201      	movs	r2, #1
 80097da:	0018      	movs	r0, r3
 80097dc:	f00f f9b8 	bl	8018b50 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 80097e0:	495c      	ldr	r1, [pc, #368]	@ (8009954 <main+0x2f4>)
 80097e2:	4b52      	ldr	r3, [pc, #328]	@ (800992c <main+0x2cc>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	0018      	movs	r0, r3
 80097e8:	f00f fabc 	bl	8018d64 <HAL_RTC_GetDate>
  	timeBCD_year = hRtcDate.Year;
 80097ec:	4b59      	ldr	r3, [pc, #356]	@ (8009954 <main+0x2f4>)
 80097ee:	78da      	ldrb	r2, [r3, #3]
 80097f0:	4b59      	ldr	r3, [pc, #356]	@ (8009958 <main+0x2f8>)
 80097f2:	701a      	strb	r2, [r3, #0]
  	timeBCD_month = hRtcDate.Month;
 80097f4:	4b57      	ldr	r3, [pc, #348]	@ (8009954 <main+0x2f4>)
 80097f6:	785a      	ldrb	r2, [r3, #1]
 80097f8:	4b58      	ldr	r3, [pc, #352]	@ (800995c <main+0x2fc>)
 80097fa:	701a      	strb	r2, [r3, #0]
  	timeBCD_day = hRtcDate.Date;
 80097fc:	4b55      	ldr	r3, [pc, #340]	@ (8009954 <main+0x2f4>)
 80097fe:	789a      	ldrb	r2, [r3, #2]
 8009800:	4b57      	ldr	r3, [pc, #348]	@ (8009960 <main+0x300>)
 8009802:	701a      	strb	r2, [r3, #0]
  	timeBCD_hour = hRtcTime.Hours;
 8009804:	4b52      	ldr	r3, [pc, #328]	@ (8009950 <main+0x2f0>)
 8009806:	781a      	ldrb	r2, [r3, #0]
 8009808:	4b56      	ldr	r3, [pc, #344]	@ (8009964 <main+0x304>)
 800980a:	701a      	strb	r2, [r3, #0]
  	timeBCD_min = hRtcTime.Minutes;
 800980c:	4b50      	ldr	r3, [pc, #320]	@ (8009950 <main+0x2f0>)
 800980e:	785a      	ldrb	r2, [r3, #1]
 8009810:	4b55      	ldr	r3, [pc, #340]	@ (8009968 <main+0x308>)
 8009812:	701a      	strb	r2, [r3, #0]
  	timeBCD_sec = hRtcTime.Seconds;
 8009814:	4b4e      	ldr	r3, [pc, #312]	@ (8009950 <main+0x2f0>)
 8009816:	789a      	ldrb	r2, [r3, #2]
 8009818:	4b54      	ldr	r3, [pc, #336]	@ (800996c <main+0x30c>)
 800981a:	701a      	strb	r2, [r3, #0]


  	timeBCD_to_UNIX();
 800981c:	f7ff f96c 	bl	8008af8 <timeBCD_to_UNIX>
  	//------------------------------------------------------------------------------------------
  	calculando_tiempo_UNIX ();
 8009820:	f7fb fffa 	bl	8005818 <calculando_tiempo_UNIX>
  	//------------------------------------------------------------------------------------------
  	//if(!flagsTime[f_timeConfigRTC]){
  	//	goto noActTime;
  	//}

  	timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 8009824:	4b52      	ldr	r3, [pc, #328]	@ (8009970 <main+0x310>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	0c1b      	lsrs	r3, r3, #16
 800982a:	b29a      	uxth	r2, r3
 800982c:	4b51      	ldr	r3, [pc, #324]	@ (8009974 <main+0x314>)
 800982e:	801a      	strh	r2, [r3, #0]
  	timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 8009830:	4b4f      	ldr	r3, [pc, #316]	@ (8009970 <main+0x310>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	b29a      	uxth	r2, r3
 8009836:	4b50      	ldr	r3, [pc, #320]	@ (8009978 <main+0x318>)
 8009838:	801a      	strh	r2, [r3, #0]

  	if(timeBCD_sec_ANT == timeBCD_sec){
 800983a:	4b50      	ldr	r3, [pc, #320]	@ (800997c <main+0x31c>)
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	4b4b      	ldr	r3, [pc, #300]	@ (800996c <main+0x30c>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d008      	beq.n	8009858 <main+0x1f8>
  		goto no_inc_cnt_sec;
  	}
  	timeBCD_sec_ANT = timeBCD_sec;
 8009846:	4b49      	ldr	r3, [pc, #292]	@ (800996c <main+0x30c>)
 8009848:	781a      	ldrb	r2, [r3, #0]
 800984a:	4b4c      	ldr	r3, [pc, #304]	@ (800997c <main+0x31c>)
 800984c:	701a      	strb	r2, [r3, #0]
  	// Se comenta el decremento en tiempo de logger y se coloca aqui por cuestiones de presición de Reloj
  	// CGM 14/04/2025
  	decword(&cntLogger_H);
 800984e:	4b4c      	ldr	r3, [pc, #304]	@ (8009980 <main+0x320>)
 8009850:	0018      	movs	r0, r3
 8009852:	f7fd fc2c 	bl	80070ae <decword>
 8009856:	e000      	b.n	800985a <main+0x1fa>
  		goto no_inc_cnt_sec;
 8009858:	46c0      	nop			@ (mov r8, r8)

no_inc_cnt_sec:
noActTime:
		  asm ("nop");
 800985a:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 800985c:	4b2d      	ldr	r3, [pc, #180]	@ (8009914 <main+0x2b4>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2b07      	cmp	r3, #7
 8009862:	d843      	bhi.n	80098ec <main+0x28c>
 8009864:	009a      	lsls	r2, r3, #2
 8009866:	4b47      	ldr	r3, [pc, #284]	@ (8009984 <main+0x324>)
 8009868:	18d3      	adds	r3, r2, r3
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 800986e:	f7fd fe2f 	bl	80074d0 <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 8009872:	e03f      	b.n	80098f4 <main+0x294>
  	  		case 1:
  	  			voltmetro();
 8009874:	f007 ffe2 	bl	801183c <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 8009878:	e03c      	b.n	80098f4 <main+0x294>
  	  		case 2:
  	  			temper();
 800987a:	f002 ffef 	bl	800c85c <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 800987e:	e039      	b.n	80098f4 <main+0x294>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 8009880:	4b41      	ldr	r3, [pc, #260]	@ (8009988 <main+0x328>)
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	2240      	movs	r2, #64	@ 0x40
 8009886:	4013      	ands	r3, r2
 8009888:	d005      	beq.n	8009896 <main+0x236>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 800988a:	4b25      	ldr	r3, [pc, #148]	@ (8009920 <main+0x2c0>)
 800988c:	2200      	movs	r2, #0
 800988e:	2104      	movs	r1, #4
 8009890:	0018      	movs	r0, r3
 8009892:	f00a fe7e 	bl	8014592 <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 8009896:	f7f9 fe93 	bl	80035c0 <ModbusMap>
  	  			noctar ();
 800989a:	f001 f929 	bl	800aaf0 <noctar>
  	  			break;		// ASM: Pendiente a traducir
 800989e:	e029      	b.n	80098f4 <main+0x294>
  	  		case 4:
  	  			refrigera();
 80098a0:	f001 f92c 	bl	800aafc <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 80098a4:	e026      	b.n	80098f4 <main+0x294>
  	  		case 5:
  	  			display();
 80098a6:	f7fe fbc9 	bl	800803c <display>
  	  			break;		// ASM: Pendiente a traducir
 80098aa:	e023      	b.n	80098f4 <main+0x294>
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 80098ac:	f003 ffd4 	bl	800d858 <tiempo>
  	  			if(bandera_act_fw_j == 0)    //Parche
 80098b0:	4b36      	ldr	r3, [pc, #216]	@ (800998c <main+0x32c>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2201      	movs	r2, #1
 80098b6:	4053      	eors	r3, r2
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <main+0x262>
  	  				logger ();				// ASM: Pendiente a traducir
 80098be:	f7ff f98f 	bl	8008be0 <logger>
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 80098c2:	f004 fb61 	bl	800df88 <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 80098c6:	4b32      	ldr	r3, [pc, #200]	@ (8009990 <main+0x330>)
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2baa      	cmp	r3, #170	@ 0xaa
 80098cc:	d111      	bne.n	80098f2 <main+0x292>
  	  			    asm ("nop");
 80098ce:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 80098d0:	4b30      	ldr	r3, [pc, #192]	@ (8009994 <main+0x334>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10c      	bne.n	80098f2 <main+0x292>
  	  				    asm ("nop");
 80098d8:	46c0      	nop			@ (mov r8, r8)
 	  					bootloader();
 80098da:	f7fb fe6d 	bl	80055b8 <bootloader>
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 80098de:	e008      	b.n	80098f2 <main+0x292>
  	  		case 7:
  	  			watch();
 80098e0:	f008 f8f4 	bl	8011acc <watch>
  	  			ProcesosC = 255;
 80098e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009914 <main+0x2b4>)
 80098e6:	22ff      	movs	r2, #255	@ 0xff
 80098e8:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 80098ea:	e003      	b.n	80098f4 <main+0x294>
  	  		default:
  	  		    asm ("nop");
 80098ec:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 80098ee:	46c0      	nop			@ (mov r8, r8)
 80098f0:	e7fd      	b.n	80098ee <main+0x28e>
  	  			break;		// ASM: Pendiente a traducir
 80098f2:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 80098f4:	4b14      	ldr	r3, [pc, #80]	@ (8009948 <main+0x2e8>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 80098fa:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <main+0x338>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 8009900:	4b26      	ldr	r3, [pc, #152]	@ (800999c <main+0x33c>)
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8009906:	4b0e      	ldr	r3, [pc, #56]	@ (8009940 <main+0x2e0>)
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
  {
 800990c:	e6f7      	b.n	80096fe <main+0x9e>
 800990e:	46c0      	nop			@ (mov r8, r8)
 8009910:	20001fdc 	.word	0x20001fdc
 8009914:	20000954 	.word	0x20000954
 8009918:	20000cec 	.word	0x20000cec
 800991c:	2000093d 	.word	0x2000093d
 8009920:	50000800 	.word	0x50000800
 8009924:	2000004c 	.word	0x2000004c
 8009928:	50000400 	.word	0x50000400
 800992c:	20000578 	.word	0x20000578
 8009930:	40001000 	.word	0x40001000
 8009934:	20000564 	.word	0x20000564
 8009938:	200003dd 	.word	0x200003dd
 800993c:	20000955 	.word	0x20000955
 8009940:	2000093b 	.word	0x2000093b
 8009944:	20000b66 	.word	0x20000b66
 8009948:	20000938 	.word	0x20000938
 800994c:	20002078 	.word	0x20002078
 8009950:	2000216c 	.word	0x2000216c
 8009954:	20002180 	.word	0x20002180
 8009958:	20002164 	.word	0x20002164
 800995c:	20002165 	.word	0x20002165
 8009960:	20002166 	.word	0x20002166
 8009964:	20002167 	.word	0x20002167
 8009968:	20002168 	.word	0x20002168
 800996c:	20002169 	.word	0x20002169
 8009970:	2000218c 	.word	0x2000218c
 8009974:	20001ea4 	.word	0x20001ea4
 8009978:	20001ea6 	.word	0x20001ea6
 800997c:	200021d8 	.word	0x200021d8
 8009980:	20000e84 	.word	0x20000e84
 8009984:	0801c4a8 	.word	0x0801c4a8
 8009988:	40004c00 	.word	0x40004c00
 800998c:	200021d7 	.word	0x200021d7
 8009990:	20001fd8 	.word	0x20001fd8
 8009994:	20001f0d 	.word	0x20001f0d
 8009998:	20000939 	.word	0x20000939
 800999c:	2000093a 	.word	0x2000093a

080099a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b099      	sub	sp, #100	@ 0x64
 80099a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80099a6:	2414      	movs	r4, #20
 80099a8:	193b      	adds	r3, r7, r4
 80099aa:	0018      	movs	r0, r3
 80099ac:	234c      	movs	r3, #76	@ 0x4c
 80099ae:	001a      	movs	r2, r3
 80099b0:	2100      	movs	r1, #0
 80099b2:	f012 fad7 	bl	801bf64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	0018      	movs	r0, r3
 80099ba:	2310      	movs	r3, #16
 80099bc:	001a      	movs	r2, r3
 80099be:	2100      	movs	r1, #0
 80099c0:	f012 fad0 	bl	801bf64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80099c4:	2380      	movs	r3, #128	@ 0x80
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	0018      	movs	r0, r3
 80099ca:	f00d f84b 	bl	8016a64 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80099ce:	f00d f83b 	bl	8016a48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80099d2:	4a27      	ldr	r2, [pc, #156]	@ (8009a70 <SystemClock_Config+0xd0>)
 80099d4:	2390      	movs	r3, #144	@ 0x90
 80099d6:	58d3      	ldr	r3, [r2, r3]
 80099d8:	4925      	ldr	r1, [pc, #148]	@ (8009a70 <SystemClock_Config+0xd0>)
 80099da:	2218      	movs	r2, #24
 80099dc:	4393      	bics	r3, r2
 80099de:	2290      	movs	r2, #144	@ 0x90
 80099e0:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80099e2:	193b      	adds	r3, r7, r4
 80099e4:	2206      	movs	r2, #6
 80099e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80099e8:	193b      	adds	r3, r7, r4
 80099ea:	2281      	movs	r2, #129	@ 0x81
 80099ec:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80099ee:	193b      	adds	r3, r7, r4
 80099f0:	2280      	movs	r2, #128	@ 0x80
 80099f2:	0052      	lsls	r2, r2, #1
 80099f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80099f6:	0021      	movs	r1, r4
 80099f8:	187b      	adds	r3, r7, r1
 80099fa:	2240      	movs	r2, #64	@ 0x40
 80099fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	2202      	movs	r2, #2
 8009a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	2202      	movs	r2, #2
 8009a08:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009a0a:	187b      	adds	r3, r7, r1
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 7;
 8009a10:	187b      	adds	r3, r7, r1
 8009a12:	2207      	movs	r2, #7
 8009a14:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009a16:	187b      	adds	r3, r7, r1
 8009a18:	2280      	movs	r2, #128	@ 0x80
 8009a1a:	0292      	lsls	r2, r2, #10
 8009a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009a1e:	187b      	adds	r3, r7, r1
 8009a20:	2280      	movs	r2, #128	@ 0x80
 8009a22:	0492      	lsls	r2, r2, #18
 8009a24:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009a26:	187b      	adds	r3, r7, r1
 8009a28:	2280      	movs	r2, #128	@ 0x80
 8009a2a:	0592      	lsls	r2, r2, #22
 8009a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009a2e:	187b      	adds	r3, r7, r1
 8009a30:	0018      	movs	r0, r3
 8009a32:	f00d f8b7 	bl	8016ba4 <HAL_RCC_OscConfig>
 8009a36:	1e03      	subs	r3, r0, #0
 8009a38:	d001      	beq.n	8009a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8009a3a:	f000 fd69 	bl	800a510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	2203      	movs	r2, #3
 8009a48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009a4a:	1d3b      	adds	r3, r7, #4
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009a50:	1d3b      	adds	r3, r7, #4
 8009a52:	2200      	movs	r2, #0
 8009a54:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	2102      	movs	r1, #2
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f00d fccc 	bl	80173f8 <HAL_RCC_ClockConfig>
 8009a60:	1e03      	subs	r3, r0, #0
 8009a62:	d001      	beq.n	8009a68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8009a64:	f000 fd54 	bl	800a510 <Error_Handler>
  }
}
 8009a68:	46c0      	nop			@ (mov r8, r8)
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b019      	add	sp, #100	@ 0x64
 8009a6e:	bd90      	pop	{r4, r7, pc}
 8009a70:	40021000 	.word	0x40021000

08009a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	@ 0x28
 8009a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 8009a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009a7c:	4a9c      	ldr	r2, [pc, #624]	@ (8009cf0 <MX_ADC1_Init+0x27c>)
 8009a7e:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 8009a80:	4b9a      	ldr	r3, [pc, #616]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009a82:	4a9b      	ldr	r2, [pc, #620]	@ (8009cf0 <MX_ADC1_Init+0x27c>)
 8009a84:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 8009a86:	4b9b      	ldr	r3, [pc, #620]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009a88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009a8a:	4b9a      	ldr	r3, [pc, #616]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009a8c:	2180      	movs	r1, #128	@ 0x80
 8009a8e:	0349      	lsls	r1, r1, #13
 8009a90:	430a      	orrs	r2, r1
 8009a92:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8009a94:	4b97      	ldr	r3, [pc, #604]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009a96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a98:	4b96      	ldr	r3, [pc, #600]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009a9a:	2104      	movs	r1, #4
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8009aa0:	4b94      	ldr	r3, [pc, #592]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009aa4:	4b93      	ldr	r3, [pc, #588]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 8009aac:	4b91      	ldr	r3, [pc, #580]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009aae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ab0:	4b90      	ldr	r3, [pc, #576]	@ (8009cf4 <MX_ADC1_Init+0x280>)
 8009ab2:	2110      	movs	r1, #16
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 8009ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8009cf8 <MX_ADC1_Init+0x284>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	4b8e      	ldr	r3, [pc, #568]	@ (8009cf8 <MX_ADC1_Init+0x284>)
 8009abe:	210f      	movs	r1, #15
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8009ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8009cf8 <MX_ADC1_Init+0x284>)
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	4b8b      	ldr	r3, [pc, #556]	@ (8009cf8 <MX_ADC1_Init+0x284>)
 8009aca:	210f      	movs	r1, #15
 8009acc:	438a      	bics	r2, r1
 8009ace:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8009ad0:	23a0      	movs	r3, #160	@ 0xa0
 8009ad2:	05db      	lsls	r3, r3, #23
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	23a0      	movs	r3, #160	@ 0xa0
 8009ad8:	05db      	lsls	r3, r3, #23
 8009ada:	21fc      	movs	r1, #252	@ 0xfc
 8009adc:	0209      	lsls	r1, r1, #8
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8009ae2:	23a0      	movs	r3, #160	@ 0xa0
 8009ae4:	05db      	lsls	r3, r3, #23
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	23a0      	movs	r3, #160	@ 0xa0
 8009aea:	05db      	lsls	r3, r3, #23
 8009aec:	4983      	ldr	r1, [pc, #524]	@ (8009cfc <MX_ADC1_Init+0x288>)
 8009aee:	400a      	ands	r2, r1
 8009af0:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 8009af2:	4b83      	ldr	r3, [pc, #524]	@ (8009d00 <MX_ADC1_Init+0x28c>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	4b82      	ldr	r3, [pc, #520]	@ (8009d00 <MX_ADC1_Init+0x28c>)
 8009af8:	210c      	movs	r1, #12
 8009afa:	430a      	orrs	r2, r1
 8009afc:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8009afe:	4b80      	ldr	r3, [pc, #512]	@ (8009d00 <MX_ADC1_Init+0x28c>)
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	4b7f      	ldr	r3, [pc, #508]	@ (8009d00 <MX_ADC1_Init+0x28c>)
 8009b04:	210c      	movs	r1, #12
 8009b06:	438a      	bics	r2, r1
 8009b08:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 8009b0a:	4b78      	ldr	r3, [pc, #480]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009b0c:	22c0      	movs	r2, #192	@ 0xc0
 8009b0e:	0612      	lsls	r2, r2, #24
 8009b10:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 8009b12:	4b76      	ldr	r3, [pc, #472]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009b14:	2208      	movs	r2, #8
 8009b16:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 8009b18:	4b74      	ldr	r3, [pc, #464]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009b1a:	2280      	movs	r2, #128	@ 0x80
 8009b1c:	0552      	lsls	r2, r2, #21
 8009b1e:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 8009b20:	4b72      	ldr	r3, [pc, #456]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009b22:	4a78      	ldr	r2, [pc, #480]	@ (8009d04 <MX_ADC1_Init+0x290>)
 8009b24:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009b26:	231c      	movs	r3, #28
 8009b28:	18fb      	adds	r3, r7, r3
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	001a      	movs	r2, r3
 8009b30:	2100      	movs	r1, #0
 8009b32:	f012 fa17 	bl	801bf64 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8009b36:	1d3b      	adds	r3, r7, #4
 8009b38:	0018      	movs	r0, r3
 8009b3a:	2318      	movs	r3, #24
 8009b3c:	001a      	movs	r2, r3
 8009b3e:	2100      	movs	r1, #0
 8009b40:	f012 fa10 	bl	801bf64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009b44:	4b70      	ldr	r3, [pc, #448]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b46:	4a69      	ldr	r2, [pc, #420]	@ (8009cec <MX_ADC1_Init+0x278>)
 8009b48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b4c:	22c0      	movs	r2, #192	@ 0xc0
 8009b4e:	0612      	lsls	r2, r2, #24
 8009b50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8009b52:	4b6d      	ldr	r3, [pc, #436]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b54:	2208      	movs	r2, #8
 8009b56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009b58:	4b6b      	ldr	r3, [pc, #428]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8009b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b60:	2280      	movs	r2, #128	@ 0x80
 8009b62:	0612      	lsls	r2, r2, #24
 8009b64:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009b66:	4b68      	ldr	r3, [pc, #416]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b68:	2204      	movs	r2, #4
 8009b6a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009b6c:	4b66      	ldr	r3, [pc, #408]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8009b72:	4b65      	ldr	r3, [pc, #404]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009b78:	4b63      	ldr	r3, [pc, #396]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8009b7e:	4b62      	ldr	r3, [pc, #392]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009b84:	4b60      	ldr	r3, [pc, #384]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b86:	2220      	movs	r2, #32
 8009b88:	2100      	movs	r1, #0
 8009b8a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009b92:	4b5d      	ldr	r3, [pc, #372]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009b98:	4b5b      	ldr	r3, [pc, #364]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009b9a:	222c      	movs	r2, #44	@ 0x2c
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009ba0:	4b59      	ldr	r3, [pc, #356]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009ba6:	4b58      	ldr	r3, [pc, #352]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009bac:	4b56      	ldr	r3, [pc, #344]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009bae:	223c      	movs	r2, #60	@ 0x3c
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8009bb4:	4b54      	ldr	r3, [pc, #336]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009bb6:	2280      	movs	r2, #128	@ 0x80
 8009bb8:	0592      	lsls	r2, r2, #22
 8009bba:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009bbc:	4b52      	ldr	r3, [pc, #328]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f008 fb98 	bl	80122f4 <HAL_ADC_Init>
 8009bc4:	1e03      	subs	r3, r0, #0
 8009bc6:	d001      	beq.n	8009bcc <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8009bc8:	f000 fca2 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009bcc:	211c      	movs	r1, #28
 8009bce:	187b      	adds	r3, r7, r1
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009bd4:	187b      	adds	r3, r7, r1
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009bda:	187a      	adds	r2, r7, r1
 8009bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009bde:	0011      	movs	r1, r2
 8009be0:	0018      	movs	r0, r3
 8009be2:	f008 fdcb 	bl	801277c <HAL_ADC_ConfigChannel>
 8009be6:	1e03      	subs	r3, r0, #0
 8009be8:	d001      	beq.n	8009bee <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8009bea:	f000 fc91 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009bee:	211c      	movs	r1, #28
 8009bf0:	187b      	adds	r3, r7, r1
 8009bf2:	4a46      	ldr	r2, [pc, #280]	@ (8009d0c <MX_ADC1_Init+0x298>)
 8009bf4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009bf6:	187a      	adds	r2, r7, r1
 8009bf8:	4b43      	ldr	r3, [pc, #268]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009bfa:	0011      	movs	r1, r2
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f008 fdbd 	bl	801277c <HAL_ADC_ConfigChannel>
 8009c02:	1e03      	subs	r3, r0, #0
 8009c04:	d001      	beq.n	8009c0a <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8009c06:	f000 fc83 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009c0a:	211c      	movs	r1, #28
 8009c0c:	187b      	adds	r3, r7, r1
 8009c0e:	4a40      	ldr	r2, [pc, #256]	@ (8009d10 <MX_ADC1_Init+0x29c>)
 8009c10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009c12:	187a      	adds	r2, r7, r1
 8009c14:	4b3c      	ldr	r3, [pc, #240]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009c16:	0011      	movs	r1, r2
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f008 fdaf 	bl	801277c <HAL_ADC_ConfigChannel>
 8009c1e:	1e03      	subs	r3, r0, #0
 8009c20:	d001      	beq.n	8009c26 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8009c22:	f000 fc75 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009c26:	211c      	movs	r1, #28
 8009c28:	187b      	adds	r3, r7, r1
 8009c2a:	4a3a      	ldr	r2, [pc, #232]	@ (8009d14 <MX_ADC1_Init+0x2a0>)
 8009c2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009c2e:	187a      	adds	r2, r7, r1
 8009c30:	4b35      	ldr	r3, [pc, #212]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009c32:	0011      	movs	r1, r2
 8009c34:	0018      	movs	r0, r3
 8009c36:	f008 fda1 	bl	801277c <HAL_ADC_ConfigChannel>
 8009c3a:	1e03      	subs	r3, r0, #0
 8009c3c:	d001      	beq.n	8009c42 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8009c3e:	f000 fc67 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009c42:	211c      	movs	r1, #28
 8009c44:	187b      	adds	r3, r7, r1
 8009c46:	4a34      	ldr	r2, [pc, #208]	@ (8009d18 <MX_ADC1_Init+0x2a4>)
 8009c48:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009c4a:	187a      	adds	r2, r7, r1
 8009c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009c4e:	0011      	movs	r1, r2
 8009c50:	0018      	movs	r0, r3
 8009c52:	f008 fd93 	bl	801277c <HAL_ADC_ConfigChannel>
 8009c56:	1e03      	subs	r3, r0, #0
 8009c58:	d001      	beq.n	8009c5e <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8009c5a:	f000 fc59 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009c5e:	211c      	movs	r1, #28
 8009c60:	187b      	adds	r3, r7, r1
 8009c62:	4a2e      	ldr	r2, [pc, #184]	@ (8009d1c <MX_ADC1_Init+0x2a8>)
 8009c64:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009c66:	187a      	adds	r2, r7, r1
 8009c68:	4b27      	ldr	r3, [pc, #156]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009c6a:	0011      	movs	r1, r2
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f008 fd85 	bl	801277c <HAL_ADC_ConfigChannel>
 8009c72:	1e03      	subs	r3, r0, #0
 8009c74:	d001      	beq.n	8009c7a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8009c76:	f000 fc4b 	bl	800a510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8009c7a:	211c      	movs	r1, #28
 8009c7c:	187b      	adds	r3, r7, r1
 8009c7e:	4a28      	ldr	r2, [pc, #160]	@ (8009d20 <MX_ADC1_Init+0x2ac>)
 8009c80:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009c82:	187a      	adds	r2, r7, r1
 8009c84:	4b20      	ldr	r3, [pc, #128]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009c86:	0011      	movs	r1, r2
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f008 fd77 	bl	801277c <HAL_ADC_ConfigChannel>
 8009c8e:	1e03      	subs	r3, r0, #0
 8009c90:	d001      	beq.n	8009c96 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8009c92:	f000 fc3d 	bl	800a510 <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8009c96:	1d3b      	adds	r3, r7, #4
 8009c98:	4a22      	ldr	r2, [pc, #136]	@ (8009d24 <MX_ADC1_Init+0x2b0>)
 8009c9a:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8009c9c:	1d3b      	adds	r3, r7, #4
 8009c9e:	22c0      	movs	r2, #192	@ 0xc0
 8009ca0:	0412      	lsls	r2, r2, #16
 8009ca2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009ca4:	1d3a      	adds	r2, r7, #4
 8009ca6:	4b18      	ldr	r3, [pc, #96]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009ca8:	0011      	movs	r1, r2
 8009caa:	0018      	movs	r0, r3
 8009cac:	f008 fed2 	bl	8012a54 <HAL_ADC_AnalogWDGConfig>
 8009cb0:	1e03      	subs	r3, r0, #0
 8009cb2:	d001      	beq.n	8009cb8 <MX_ADC1_Init+0x244>
  {
    Error_Handler();
 8009cb4:	f000 fc2c 	bl	800a510 <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8009cb8:	1d3b      	adds	r3, r7, #4
 8009cba:	4a1b      	ldr	r2, [pc, #108]	@ (8009d28 <MX_ADC1_Init+0x2b4>)
 8009cbc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009cbe:	1d3a      	adds	r2, r7, #4
 8009cc0:	4b11      	ldr	r3, [pc, #68]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009cc2:	0011      	movs	r1, r2
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f008 fec5 	bl	8012a54 <HAL_ADC_AnalogWDGConfig>
 8009cca:	1e03      	subs	r3, r0, #0
 8009ccc:	d001      	beq.n	8009cd2 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8009cce:	f000 fc1f 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8009cd2:	46c0      	nop			@ (mov r8, r8)
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d08 <MX_ADC1_Init+0x294>)
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	f009 fa34 	bl	8013144 <HAL_ADCEx_Calibration_Start>
 8009cdc:	1e03      	subs	r3, r0, #0
 8009cde:	d1f9      	bne.n	8009cd4 <MX_ADC1_Init+0x260>

  /* USER CODE END ADC1_Init 2 */

}
 8009ce0:	46c0      	nop			@ (mov r8, r8)
 8009ce2:	46c0      	nop			@ (mov r8, r8)
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b00a      	add	sp, #40	@ 0x28
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	40012400 	.word	0x40012400
 8009cf0:	0fff0000 	.word	0x0fff0000
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	50000800 	.word	0x50000800
 8009cfc:	ffff03ff 	.word	0xffff03ff
 8009d00:	50000400 	.word	0x50000400
 8009d04:	00044603 	.word	0x00044603
 8009d08:	200003ec 	.word	0x200003ec
 8009d0c:	04000002 	.word	0x04000002
 8009d10:	24000200 	.word	0x24000200
 8009d14:	28000400 	.word	0x28000400
 8009d18:	38004000 	.word	0x38004000
 8009d1c:	3c008000 	.word	0x3c008000
 8009d20:	48040000 	.word	0x48040000
 8009d24:	0017ffff 	.word	0x0017ffff
 8009d28:	0027ffff 	.word	0x0027ffff

08009d2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009d30:	4b1c      	ldr	r3, [pc, #112]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d32:	4a1d      	ldr	r2, [pc, #116]	@ (8009da8 <MX_I2C1_Init+0x7c>)
 8009d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8009d36:	4b1b      	ldr	r3, [pc, #108]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d38:	4a1c      	ldr	r2, [pc, #112]	@ (8009dac <MX_I2C1_Init+0x80>)
 8009d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009d3c:	4b19      	ldr	r3, [pc, #100]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d42:	4b18      	ldr	r3, [pc, #96]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d44:	2201      	movs	r2, #1
 8009d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d48:	4b16      	ldr	r3, [pc, #88]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009d4e:	4b15      	ldr	r3, [pc, #84]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009d54:	4b13      	ldr	r3, [pc, #76]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d5a:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d60:	4b10      	ldr	r3, [pc, #64]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009d66:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f00a fc89 	bl	8014680 <HAL_I2C_Init>
 8009d6e:	1e03      	subs	r3, r0, #0
 8009d70:	d001      	beq.n	8009d76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009d72:	f000 fbcd 	bl	800a510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8009d76:	2380      	movs	r3, #128	@ 0x80
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d7c:	0011      	movs	r1, r2
 8009d7e:	0018      	movs	r0, r3
 8009d80:	f00c fd30 	bl	80167e4 <HAL_I2CEx_ConfigAnalogFilter>
 8009d84:	1e03      	subs	r3, r0, #0
 8009d86:	d001      	beq.n	8009d8c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8009d88:	f000 fbc2 	bl	800a510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <MX_I2C1_Init+0x78>)
 8009d8e:	2100      	movs	r1, #0
 8009d90:	0018      	movs	r0, r3
 8009d92:	f00c fd73 	bl	801687c <HAL_I2CEx_ConfigDigitalFilter>
 8009d96:	1e03      	subs	r3, r0, #0
 8009d98:	d001      	beq.n	8009d9e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8009d9a:	f000 fbb9 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009d9e:	46c0      	nop			@ (mov r8, r8)
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20000450 	.word	0x20000450
 8009da8:	40005400 	.word	0x40005400
 8009dac:	201060ff 	.word	0x201060ff

08009db0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8009db4:	4b0d      	ldr	r3, [pc, #52]	@ (8009dec <MX_IWDG_Init+0x3c>)
 8009db6:	4a0e      	ldr	r2, [pc, #56]	@ (8009df0 <MX_IWDG_Init+0x40>)
 8009db8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 8009dba:	4b0c      	ldr	r3, [pc, #48]	@ (8009dec <MX_IWDG_Init+0x3c>)
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <MX_IWDG_Init+0x3c>)
 8009dc2:	22fa      	movs	r2, #250	@ 0xfa
 8009dc4:	0112      	lsls	r2, r2, #4
 8009dc6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 8009dc8:	4b08      	ldr	r3, [pc, #32]	@ (8009dec <MX_IWDG_Init+0x3c>)
 8009dca:	22fa      	movs	r2, #250	@ 0xfa
 8009dcc:	0112      	lsls	r2, r2, #4
 8009dce:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 8009dd0:	4b06      	ldr	r3, [pc, #24]	@ (8009dec <MX_IWDG_Init+0x3c>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8009dd6:	4b05      	ldr	r3, [pc, #20]	@ (8009dec <MX_IWDG_Init+0x3c>)
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f00c fd9b 	bl	8016914 <HAL_IWDG_Init>
 8009dde:	1e03      	subs	r3, r0, #0
 8009de0:	d001      	beq.n	8009de6 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 8009de2:	f000 fb95 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8009de6:	46c0      	nop			@ (mov r8, r8)
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000564 	.word	0x20000564
 8009df0:	40003000 	.word	0x40003000

08009df4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009dfa:	1d3b      	adds	r3, r7, #4
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	2314      	movs	r3, #20
 8009e00:	001a      	movs	r2, r3
 8009e02:	2100      	movs	r1, #0
 8009e04:	f012 f8ae 	bl	801bf64 <memset>
  RTC_DateTypeDef sDate = {0};
 8009e08:	003b      	movs	r3, r7
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009e0e:	4b32      	ldr	r3, [pc, #200]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e10:	4a32      	ldr	r2, [pc, #200]	@ (8009edc <MX_RTC_Init+0xe8>)
 8009e12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009e14:	4b30      	ldr	r3, [pc, #192]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e1c:	227f      	movs	r2, #127	@ 0x7f
 8009e1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009e20:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e22:	22ff      	movs	r2, #255	@ 0xff
 8009e24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009e26:	4b2c      	ldr	r3, [pc, #176]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009e32:	4b29      	ldr	r3, [pc, #164]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009e38:	4b27      	ldr	r3, [pc, #156]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e3a:	2280      	movs	r2, #128	@ 0x80
 8009e3c:	05d2      	lsls	r2, r2, #23
 8009e3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009e40:	4b25      	ldr	r3, [pc, #148]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009e46:	4b24      	ldr	r3, [pc, #144]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009e4c:	4b22      	ldr	r3, [pc, #136]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f00e fd18 	bl	8018884 <HAL_RTC_Init>
 8009e54:	1e03      	subs	r3, r0, #0
 8009e56:	d001      	beq.n	8009e5c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8009e58:	f000 fb5a 	bl	800a510 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8009e5c:	1d3b      	adds	r3, r7, #4
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8009e62:	1d3b      	adds	r3, r7, #4
 8009e64:	2200      	movs	r2, #0
 8009e66:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8009e68:	1d3b      	adds	r3, r7, #4
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009e6e:	1d3b      	adds	r3, r7, #4
 8009e70:	2200      	movs	r2, #0
 8009e72:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009e74:	1d3b      	adds	r3, r7, #4
 8009e76:	2200      	movs	r2, #0
 8009e78:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009e7a:	1d39      	adds	r1, r7, #4
 8009e7c:	4b16      	ldr	r3, [pc, #88]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009e7e:	2201      	movs	r2, #1
 8009e80:	0018      	movs	r0, r3
 8009e82:	f00e fda5 	bl	80189d0 <HAL_RTC_SetTime>
 8009e86:	1e03      	subs	r3, r0, #0
 8009e88:	d001      	beq.n	8009e8e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8009e8a:	f000 fb41 	bl	800a510 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009e8e:	003b      	movs	r3, r7
 8009e90:	2201      	movs	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8009e94:	003b      	movs	r3, r7
 8009e96:	2201      	movs	r2, #1
 8009e98:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8009e9a:	003b      	movs	r3, r7
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8009ea0:	003b      	movs	r3, r7
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009ea6:	0039      	movs	r1, r7
 8009ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	0018      	movs	r0, r3
 8009eae:	f00e feb3 	bl	8018c18 <HAL_RTC_SetDate>
 8009eb2:	1e03      	subs	r3, r0, #0
 8009eb4:	d001      	beq.n	8009eba <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8009eb6:	f000 fb2b 	bl	800a510 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8009eba:	2380      	movs	r3, #128	@ 0x80
 8009ebc:	0199      	lsls	r1, r3, #6
 8009ebe:	4806      	ldr	r0, [pc, #24]	@ (8009ed8 <MX_RTC_Init+0xe4>)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f00f f834 	bl	8018f30 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009ec8:	1e03      	subs	r3, r0, #0
 8009eca:	d001      	beq.n	8009ed0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8009ecc:	f000 fb20 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009ed0:	46c0      	nop			@ (mov r8, r8)
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	b006      	add	sp, #24
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000578 	.word	0x20000578
 8009edc:	40002800 	.word	0x40002800

08009ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b09c      	sub	sp, #112	@ 0x70
 8009ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ee6:	2360      	movs	r3, #96	@ 0x60
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	0018      	movs	r0, r3
 8009eec:	2310      	movs	r3, #16
 8009eee:	001a      	movs	r2, r3
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	f012 f837 	bl	801bf64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ef6:	2354      	movs	r3, #84	@ 0x54
 8009ef8:	18fb      	adds	r3, r7, r3
 8009efa:	0018      	movs	r0, r3
 8009efc:	230c      	movs	r3, #12
 8009efe:	001a      	movs	r2, r3
 8009f00:	2100      	movs	r1, #0
 8009f02:	f012 f82f 	bl	801bf64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f06:	2338      	movs	r3, #56	@ 0x38
 8009f08:	18fb      	adds	r3, r7, r3
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	231c      	movs	r3, #28
 8009f0e:	001a      	movs	r2, r3
 8009f10:	2100      	movs	r1, #0
 8009f12:	f012 f827 	bl	801bf64 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	0018      	movs	r0, r3
 8009f1a:	2334      	movs	r3, #52	@ 0x34
 8009f1c:	001a      	movs	r2, r3
 8009f1e:	2100      	movs	r1, #0
 8009f20:	f012 f820 	bl	801bf64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009f24:	4b51      	ldr	r3, [pc, #324]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f26:	4a52      	ldr	r2, [pc, #328]	@ (800a070 <MX_TIM1_Init+0x190>)
 8009f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009f2a:	4b50      	ldr	r3, [pc, #320]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f30:	4b4e      	ldr	r3, [pc, #312]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14000;
 8009f36:	4b4d      	ldr	r3, [pc, #308]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f38:	4a4e      	ldr	r2, [pc, #312]	@ (800a074 <MX_TIM1_Init+0x194>)
 8009f3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009f42:	4b4a      	ldr	r3, [pc, #296]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f48:	4b48      	ldr	r3, [pc, #288]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009f4e:	4b47      	ldr	r3, [pc, #284]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f50:	0018      	movs	r0, r3
 8009f52:	f00f f8db 	bl	801910c <HAL_TIM_Base_Init>
 8009f56:	1e03      	subs	r3, r0, #0
 8009f58:	d001      	beq.n	8009f5e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8009f5a:	f000 fad9 	bl	800a510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f5e:	2160      	movs	r1, #96	@ 0x60
 8009f60:	187b      	adds	r3, r7, r1
 8009f62:	2280      	movs	r2, #128	@ 0x80
 8009f64:	0152      	lsls	r2, r2, #5
 8009f66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009f68:	187a      	adds	r2, r7, r1
 8009f6a:	4b40      	ldr	r3, [pc, #256]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f6c:	0011      	movs	r1, r2
 8009f6e:	0018      	movs	r0, r3
 8009f70:	f00f fbec 	bl	801974c <HAL_TIM_ConfigClockSource>
 8009f74:	1e03      	subs	r3, r0, #0
 8009f76:	d001      	beq.n	8009f7c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8009f78:	f000 faca 	bl	800a510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009f7e:	0018      	movs	r0, r3
 8009f80:	f00f f91c 	bl	80191bc <HAL_TIM_PWM_Init>
 8009f84:	1e03      	subs	r3, r0, #0
 8009f86:	d001      	beq.n	8009f8c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8009f88:	f000 fac2 	bl	800a510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f8c:	2154      	movs	r1, #84	@ 0x54
 8009f8e:	187b      	adds	r3, r7, r1
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009f94:	187b      	adds	r3, r7, r1
 8009f96:	2200      	movs	r2, #0
 8009f98:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f9a:	187b      	adds	r3, r7, r1
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009fa0:	187a      	adds	r2, r7, r1
 8009fa2:	4b32      	ldr	r3, [pc, #200]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009fa4:	0011      	movs	r1, r2
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f010 f886 	bl	801a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8009fac:	1e03      	subs	r3, r0, #0
 8009fae:	d001      	beq.n	8009fb4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8009fb0:	f000 faae 	bl	800a510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009fb4:	2138      	movs	r1, #56	@ 0x38
 8009fb6:	187b      	adds	r3, r7, r1
 8009fb8:	2260      	movs	r2, #96	@ 0x60
 8009fba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7000;
 8009fbc:	187b      	adds	r3, r7, r1
 8009fbe:	4a2e      	ldr	r2, [pc, #184]	@ (800a078 <MX_TIM1_Init+0x198>)
 8009fc0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009fc2:	187b      	adds	r3, r7, r1
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009fc8:	187b      	adds	r3, r7, r1
 8009fca:	2200      	movs	r2, #0
 8009fcc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009fce:	187b      	adds	r3, r7, r1
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009fd4:	187b      	adds	r3, r7, r1
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	2200      	movs	r2, #0
 8009fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009fe0:	1879      	adds	r1, r7, r1
 8009fe2:	4b22      	ldr	r3, [pc, #136]	@ (800a06c <MX_TIM1_Init+0x18c>)
 8009fe4:	2208      	movs	r2, #8
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	f00f fab0 	bl	801954c <HAL_TIM_PWM_ConfigChannel>
 8009fec:	1e03      	subs	r3, r0, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8009ff0:	f000 fa8e 	bl	800a510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009ff4:	1d3b      	adds	r3, r7, #4
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009ffa:	1d3b      	adds	r3, r7, #4
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a000:	1d3b      	adds	r3, r7, #4
 800a002:	2200      	movs	r2, #0
 800a004:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a006:	1d3b      	adds	r3, r7, #4
 800a008:	2200      	movs	r2, #0
 800a00a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a00c:	1d3b      	adds	r3, r7, #4
 800a00e:	2200      	movs	r2, #0
 800a010:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a012:	1d3b      	adds	r3, r7, #4
 800a014:	2280      	movs	r2, #128	@ 0x80
 800a016:	0192      	lsls	r2, r2, #6
 800a018:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a01a:	1d3b      	adds	r3, r7, #4
 800a01c:	2200      	movs	r2, #0
 800a01e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a020:	1d3b      	adds	r3, r7, #4
 800a022:	2200      	movs	r2, #0
 800a024:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a026:	1d3b      	adds	r3, r7, #4
 800a028:	2200      	movs	r2, #0
 800a02a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a02c:	1d3b      	adds	r3, r7, #4
 800a02e:	2280      	movs	r2, #128	@ 0x80
 800a030:	0492      	lsls	r2, r2, #18
 800a032:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a034:	1d3b      	adds	r3, r7, #4
 800a036:	2200      	movs	r2, #0
 800a038:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a03a:	1d3b      	adds	r3, r7, #4
 800a03c:	2200      	movs	r2, #0
 800a03e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a040:	1d3b      	adds	r3, r7, #4
 800a042:	2200      	movs	r2, #0
 800a044:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a046:	1d3a      	adds	r2, r7, #4
 800a048:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <MX_TIM1_Init+0x18c>)
 800a04a:	0011      	movs	r1, r2
 800a04c:	0018      	movs	r0, r3
 800a04e:	f010 f8a1 	bl	801a194 <HAL_TIMEx_ConfigBreakDeadTime>
 800a052:	1e03      	subs	r3, r0, #0
 800a054:	d001      	beq.n	800a05a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800a056:	f000 fa5b 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a05a:	4b04      	ldr	r3, [pc, #16]	@ (800a06c <MX_TIM1_Init+0x18c>)
 800a05c:	0018      	movs	r0, r3
 800a05e:	f002 f8e1 	bl	800c224 <HAL_TIM_MspPostInit>

}
 800a062:	46c0      	nop			@ (mov r8, r8)
 800a064:	46bd      	mov	sp, r7
 800a066:	b01c      	add	sp, #112	@ 0x70
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	46c0      	nop			@ (mov r8, r8)
 800a06c:	200005a8 	.word	0x200005a8
 800a070:	40012c00 	.word	0x40012c00
 800a074:	000036b0 	.word	0x000036b0
 800a078:	00001b58 	.word	0x00001b58

0800a07c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08e      	sub	sp, #56	@ 0x38
 800a080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a082:	2328      	movs	r3, #40	@ 0x28
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	0018      	movs	r0, r3
 800a088:	2310      	movs	r3, #16
 800a08a:	001a      	movs	r2, r3
 800a08c:	2100      	movs	r1, #0
 800a08e:	f011 ff69 	bl	801bf64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a092:	231c      	movs	r3, #28
 800a094:	18fb      	adds	r3, r7, r3
 800a096:	0018      	movs	r0, r3
 800a098:	230c      	movs	r3, #12
 800a09a:	001a      	movs	r2, r3
 800a09c:	2100      	movs	r1, #0
 800a09e:	f011 ff61 	bl	801bf64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0a2:	003b      	movs	r3, r7
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	231c      	movs	r3, #28
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	f011 ff5a 	bl	801bf64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a0b0:	4b2f      	ldr	r3, [pc, #188]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0b2:	4a30      	ldr	r2, [pc, #192]	@ (800a174 <MX_TIM3_Init+0xf8>)
 800a0b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a0b6:	4b2e      	ldr	r3, [pc, #184]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0bc:	4b2c      	ldr	r3, [pc, #176]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14000;
 800a0c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0c4:	4a2c      	ldr	r2, [pc, #176]	@ (800a178 <MX_TIM3_Init+0xfc>)
 800a0c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0c8:	4b29      	ldr	r3, [pc, #164]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0ce:	4b28      	ldr	r3, [pc, #160]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a0d4:	4b26      	ldr	r3, [pc, #152]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	f00f f818 	bl	801910c <HAL_TIM_Base_Init>
 800a0dc:	1e03      	subs	r3, r0, #0
 800a0de:	d001      	beq.n	800a0e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800a0e0:	f000 fa16 	bl	800a510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0e4:	2128      	movs	r1, #40	@ 0x28
 800a0e6:	187b      	adds	r3, r7, r1
 800a0e8:	2280      	movs	r2, #128	@ 0x80
 800a0ea:	0152      	lsls	r2, r2, #5
 800a0ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a0ee:	187a      	adds	r2, r7, r1
 800a0f0:	4b1f      	ldr	r3, [pc, #124]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a0f2:	0011      	movs	r1, r2
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f00f fb29 	bl	801974c <HAL_TIM_ConfigClockSource>
 800a0fa:	1e03      	subs	r3, r0, #0
 800a0fc:	d001      	beq.n	800a102 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800a0fe:	f000 fa07 	bl	800a510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a102:	4b1b      	ldr	r3, [pc, #108]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a104:	0018      	movs	r0, r3
 800a106:	f00f f859 	bl	80191bc <HAL_TIM_PWM_Init>
 800a10a:	1e03      	subs	r3, r0, #0
 800a10c:	d001      	beq.n	800a112 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800a10e:	f000 f9ff 	bl	800a510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a112:	211c      	movs	r1, #28
 800a114:	187b      	adds	r3, r7, r1
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a11a:	187b      	adds	r3, r7, r1
 800a11c:	2200      	movs	r2, #0
 800a11e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a120:	187a      	adds	r2, r7, r1
 800a122:	4b13      	ldr	r3, [pc, #76]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a124:	0011      	movs	r1, r2
 800a126:	0018      	movs	r0, r3
 800a128:	f00f ffc6 	bl	801a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 800a12c:	1e03      	subs	r3, r0, #0
 800a12e:	d001      	beq.n	800a134 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800a130:	f000 f9ee 	bl	800a510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a134:	003b      	movs	r3, r7
 800a136:	2260      	movs	r2, #96	@ 0x60
 800a138:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7000;
 800a13a:	003b      	movs	r3, r7
 800a13c:	4a0f      	ldr	r2, [pc, #60]	@ (800a17c <MX_TIM3_Init+0x100>)
 800a13e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a140:	003b      	movs	r3, r7
 800a142:	2200      	movs	r2, #0
 800a144:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a146:	003b      	movs	r3, r7
 800a148:	2200      	movs	r2, #0
 800a14a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a14c:	0039      	movs	r1, r7
 800a14e:	4b08      	ldr	r3, [pc, #32]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a150:	2204      	movs	r2, #4
 800a152:	0018      	movs	r0, r3
 800a154:	f00f f9fa 	bl	801954c <HAL_TIM_PWM_ConfigChannel>
 800a158:	1e03      	subs	r3, r0, #0
 800a15a:	d001      	beq.n	800a160 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800a15c:	f000 f9d8 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a160:	4b03      	ldr	r3, [pc, #12]	@ (800a170 <MX_TIM3_Init+0xf4>)
 800a162:	0018      	movs	r0, r3
 800a164:	f002 f85e 	bl	800c224 <HAL_TIM_MspPostInit>

}
 800a168:	46c0      	nop			@ (mov r8, r8)
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b00e      	add	sp, #56	@ 0x38
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	200005f4 	.word	0x200005f4
 800a174:	40000400 	.word	0x40000400
 800a178:	000036b0 	.word	0x000036b0
 800a17c:	00001b58 	.word	0x00001b58

0800a180 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a186:	1d3b      	adds	r3, r7, #4
 800a188:	0018      	movs	r0, r3
 800a18a:	230c      	movs	r3, #12
 800a18c:	001a      	movs	r2, r3
 800a18e:	2100      	movs	r1, #0
 800a190:	f011 fee8 	bl	801bf64 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a194:	4b18      	ldr	r3, [pc, #96]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a196:	4a19      	ldr	r2, [pc, #100]	@ (800a1fc <MX_TIM6_Init+0x7c>)
 800a198:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 800a19a:	4b17      	ldr	r3, [pc, #92]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a19c:	221f      	movs	r2, #31
 800a19e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1a0:	4b15      	ldr	r3, [pc, #84]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 438;
 800a1a6:	4b14      	ldr	r3, [pc, #80]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a1a8:	22db      	movs	r2, #219	@ 0xdb
 800a1aa:	0052      	lsls	r2, r2, #1
 800a1ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1ae:	4b12      	ldr	r3, [pc, #72]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a1b4:	4b10      	ldr	r3, [pc, #64]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f00e ffa8 	bl	801910c <HAL_TIM_Base_Init>
 800a1bc:	1e03      	subs	r3, r0, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800a1c0:	f000 f9a6 	bl	800a510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1ca:	1d3b      	adds	r3, r7, #4
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a1d0:	1d3a      	adds	r2, r7, #4
 800a1d2:	4b09      	ldr	r3, [pc, #36]	@ (800a1f8 <MX_TIM6_Init+0x78>)
 800a1d4:	0011      	movs	r1, r2
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f00f ff6e 	bl	801a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 800a1dc:	1e03      	subs	r3, r0, #0
 800a1de:	d001      	beq.n	800a1e4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800a1e0:	f000 f996 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 800a1e4:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <MX_TIM6_Init+0x7c>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b04      	ldr	r3, [pc, #16]	@ (800a1fc <MX_TIM6_Init+0x7c>)
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 800a1f0:	46c0      	nop			@ (mov r8, r8)
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	b004      	add	sp, #16
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000640 	.word	0x20000640
 800a1fc:	40001000 	.word	0x40001000

0800a200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a204:	4b23      	ldr	r3, [pc, #140]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a206:	4a24      	ldr	r2, [pc, #144]	@ (800a298 <MX_USART2_UART_Init+0x98>)
 800a208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a20a:	4b22      	ldr	r3, [pc, #136]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a20c:	22e1      	movs	r2, #225	@ 0xe1
 800a20e:	0252      	lsls	r2, r2, #9
 800a210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a212:	4b20      	ldr	r3, [pc, #128]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a214:	2200      	movs	r2, #0
 800a216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a218:	4b1e      	ldr	r3, [pc, #120]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a21e:	4b1d      	ldr	r3, [pc, #116]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a220:	2200      	movs	r2, #0
 800a222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a224:	4b1b      	ldr	r3, [pc, #108]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a226:	220c      	movs	r2, #12
 800a228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a22a:	4b1a      	ldr	r3, [pc, #104]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a230:	4b18      	ldr	r3, [pc, #96]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a232:	2200      	movs	r2, #0
 800a234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a236:	4b17      	ldr	r3, [pc, #92]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a238:	2200      	movs	r2, #0
 800a23a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a23c:	4b15      	ldr	r3, [pc, #84]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a23e:	2200      	movs	r2, #0
 800a240:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a242:	4b14      	ldr	r3, [pc, #80]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a244:	2200      	movs	r2, #0
 800a246:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a248:	4b12      	ldr	r3, [pc, #72]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a24a:	0018      	movs	r0, r3
 800a24c:	f010 f83e 	bl	801a2cc <HAL_UART_Init>
 800a250:	1e03      	subs	r3, r0, #0
 800a252:	d001      	beq.n	800a258 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a254:	f000 f95c 	bl	800a510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a258:	4b0e      	ldr	r3, [pc, #56]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a25a:	2100      	movs	r1, #0
 800a25c:	0018      	movs	r0, r3
 800a25e:	f011 fccd 	bl	801bbfc <HAL_UARTEx_SetTxFifoThreshold>
 800a262:	1e03      	subs	r3, r0, #0
 800a264:	d001      	beq.n	800a26a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a266:	f000 f953 	bl	800a510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a26a:	4b0a      	ldr	r3, [pc, #40]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a26c:	2100      	movs	r1, #0
 800a26e:	0018      	movs	r0, r3
 800a270:	f011 fd04 	bl	801bc7c <HAL_UARTEx_SetRxFifoThreshold>
 800a274:	1e03      	subs	r3, r0, #0
 800a276:	d001      	beq.n	800a27c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a278:	f000 f94a 	bl	800a510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a27c:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <MX_USART2_UART_Init+0x94>)
 800a27e:	0018      	movs	r0, r3
 800a280:	f011 fc82 	bl	801bb88 <HAL_UARTEx_DisableFifoMode>
 800a284:	1e03      	subs	r3, r0, #0
 800a286:	d001      	beq.n	800a28c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a288:	f000 f942 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a28c:	46c0      	nop			@ (mov r8, r8)
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	46c0      	nop			@ (mov r8, r8)
 800a294:	2000068c 	.word	0x2000068c
 800a298:	40004400 	.word	0x40004400

0800a29c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a2a0:	4b24      	ldr	r3, [pc, #144]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2a2:	4a25      	ldr	r2, [pc, #148]	@ (800a338 <MX_USART4_UART_Init+0x9c>)
 800a2a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800a2a6:	4b23      	ldr	r3, [pc, #140]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2a8:	2296      	movs	r2, #150	@ 0x96
 800a2aa:	0212      	lsls	r2, r2, #8
 800a2ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800a2ae:	4b21      	ldr	r3, [pc, #132]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2b0:	2280      	movs	r2, #128	@ 0x80
 800a2b2:	0152      	lsls	r2, r2, #5
 800a2b4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a2b6:	4b1f      	ldr	r3, [pc, #124]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800a2bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2be:	2280      	movs	r2, #128	@ 0x80
 800a2c0:	00d2      	lsls	r2, r2, #3
 800a2c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a2c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2c6:	220c      	movs	r2, #12
 800a2c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2d0:	4b18      	ldr	r3, [pc, #96]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a2d6:	4b17      	ldr	r3, [pc, #92]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a2dc:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a2e2:	4b14      	ldr	r3, [pc, #80]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a2e8:	4b12      	ldr	r3, [pc, #72]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	f00f ffee 	bl	801a2cc <HAL_UART_Init>
 800a2f0:	1e03      	subs	r3, r0, #0
 800a2f2:	d001      	beq.n	800a2f8 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 800a2f4:	f000 f90c 	bl	800a510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f011 fc7d 	bl	801bbfc <HAL_UARTEx_SetTxFifoThreshold>
 800a302:	1e03      	subs	r3, r0, #0
 800a304:	d001      	beq.n	800a30a <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 800a306:	f000 f903 	bl	800a510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a30a:	4b0a      	ldr	r3, [pc, #40]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a30c:	2100      	movs	r1, #0
 800a30e:	0018      	movs	r0, r3
 800a310:	f011 fcb4 	bl	801bc7c <HAL_UARTEx_SetRxFifoThreshold>
 800a314:	1e03      	subs	r3, r0, #0
 800a316:	d001      	beq.n	800a31c <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 800a318:	f000 f8fa 	bl	800a510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <MX_USART4_UART_Init+0x98>)
 800a31e:	0018      	movs	r0, r3
 800a320:	f011 fc32 	bl	801bb88 <HAL_UARTEx_DisableFifoMode>
 800a324:	1e03      	subs	r3, r0, #0
 800a326:	d001      	beq.n	800a32c <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 800a328:	f000 f8f2 	bl	800a510 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a32c:	46c0      	nop			@ (mov r8, r8)
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	46c0      	nop			@ (mov r8, r8)
 800a334:	20000720 	.word	0x20000720
 800a338:	40004c00 	.word	0x40004c00

0800a33c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a342:	4b10      	ldr	r3, [pc, #64]	@ (800a384 <MX_DMA_Init+0x48>)
 800a344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a346:	4b0f      	ldr	r3, [pc, #60]	@ (800a384 <MX_DMA_Init+0x48>)
 800a348:	2101      	movs	r1, #1
 800a34a:	430a      	orrs	r2, r1
 800a34c:	649a      	str	r2, [r3, #72]	@ 0x48
 800a34e:	4b0d      	ldr	r3, [pc, #52]	@ (800a384 <MX_DMA_Init+0x48>)
 800a350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a352:	2201      	movs	r2, #1
 800a354:	4013      	ands	r3, r2
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a35a:	2200      	movs	r2, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	200a      	movs	r0, #10
 800a360:	f009 f8b8 	bl	80134d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a364:	200a      	movs	r0, #10
 800a366:	f009 f8ca 	bl	80134fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 800a36a:	2200      	movs	r2, #0
 800a36c:	2100      	movs	r1, #0
 800a36e:	200b      	movs	r0, #11
 800a370:	f009 f8b0 	bl	80134d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a374:	200b      	movs	r0, #11
 800a376:	f009 f8c2 	bl	80134fe <HAL_NVIC_EnableIRQ>

}
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	46bd      	mov	sp, r7
 800a37e:	b002      	add	sp, #8
 800a380:	bd80      	pop	{r7, pc}
 800a382:	46c0      	nop			@ (mov r8, r8)
 800a384:	40021000 	.word	0x40021000

0800a388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a388:	b590      	push	{r4, r7, lr}
 800a38a:	b089      	sub	sp, #36	@ 0x24
 800a38c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a38e:	240c      	movs	r4, #12
 800a390:	193b      	adds	r3, r7, r4
 800a392:	0018      	movs	r0, r3
 800a394:	2314      	movs	r3, #20
 800a396:	001a      	movs	r2, r3
 800a398:	2100      	movs	r1, #0
 800a39a:	f011 fde3 	bl	801bf64 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a39e:	4b56      	ldr	r3, [pc, #344]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3a2:	4b55      	ldr	r3, [pc, #340]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3a4:	2104      	movs	r1, #4
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3aa:	4b53      	ldr	r3, [pc, #332]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ae:	2204      	movs	r2, #4
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	60bb      	str	r3, [r7, #8]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3b6:	4b50      	ldr	r3, [pc, #320]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3ba:	4b4f      	ldr	r3, [pc, #316]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3bc:	2101      	movs	r1, #1
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3c2:	4b4d      	ldr	r3, [pc, #308]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	607b      	str	r3, [r7, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3ce:	4b4a      	ldr	r3, [pc, #296]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3d2:	4b49      	ldr	r3, [pc, #292]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3d4:	2102      	movs	r1, #2
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3da:	4b47      	ldr	r3, [pc, #284]	@ (800a4f8 <MX_GPIO_Init+0x170>)
 800a3dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3de:	2202      	movs	r2, #2
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a3e6:	4945      	ldr	r1, [pc, #276]	@ (800a4fc <MX_GPIO_Init+0x174>)
 800a3e8:	4b45      	ldr	r3, [pc, #276]	@ (800a500 <MX_GPIO_Init+0x178>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f00a f8d0 	bl	8014592 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a3f2:	4944      	ldr	r1, [pc, #272]	@ (800a504 <MX_GPIO_Init+0x17c>)
 800a3f4:	4b44      	ldr	r3, [pc, #272]	@ (800a508 <MX_GPIO_Init+0x180>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f00a f8ca 	bl	8014592 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800a3fe:	23b0      	movs	r3, #176	@ 0xb0
 800a400:	0119      	lsls	r1, r3, #4
 800a402:	23a0      	movs	r3, #160	@ 0xa0
 800a404:	05db      	lsls	r3, r3, #23
 800a406:	2200      	movs	r2, #0
 800a408:	0018      	movs	r0, r3
 800a40a:	f00a f8c2 	bl	8014592 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a40e:	193b      	adds	r3, r7, r4
 800a410:	4a3a      	ldr	r2, [pc, #232]	@ (800a4fc <MX_GPIO_Init+0x174>)
 800a412:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a414:	193b      	adds	r3, r7, r4
 800a416:	2201      	movs	r2, #1
 800a418:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41a:	193b      	adds	r3, r7, r4
 800a41c:	2200      	movs	r2, #0
 800a41e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a420:	193b      	adds	r3, r7, r4
 800a422:	2200      	movs	r2, #0
 800a424:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a426:	193b      	adds	r3, r7, r4
 800a428:	4a35      	ldr	r2, [pc, #212]	@ (800a500 <MX_GPIO_Init+0x178>)
 800a42a:	0019      	movs	r1, r3
 800a42c:	0010      	movs	r0, r2
 800a42e:	f009 fe3f 	bl	80140b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a432:	193b      	adds	r3, r7, r4
 800a434:	4a33      	ldr	r2, [pc, #204]	@ (800a504 <MX_GPIO_Init+0x17c>)
 800a436:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a438:	193b      	adds	r3, r7, r4
 800a43a:	2201      	movs	r2, #1
 800a43c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43e:	193b      	adds	r3, r7, r4
 800a440:	2200      	movs	r2, #0
 800a442:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a444:	193b      	adds	r3, r7, r4
 800a446:	2200      	movs	r2, #0
 800a448:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a44a:	193b      	adds	r3, r7, r4
 800a44c:	4a2e      	ldr	r2, [pc, #184]	@ (800a508 <MX_GPIO_Init+0x180>)
 800a44e:	0019      	movs	r1, r3
 800a450:	0010      	movs	r0, r2
 800a452:	f009 fe2d 	bl	80140b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_4;
 800a456:	193b      	adds	r3, r7, r4
 800a458:	4a2c      	ldr	r2, [pc, #176]	@ (800a50c <MX_GPIO_Init+0x184>)
 800a45a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a45c:	193b      	adds	r3, r7, r4
 800a45e:	2200      	movs	r2, #0
 800a460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a462:	193b      	adds	r3, r7, r4
 800a464:	2200      	movs	r2, #0
 800a466:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a468:	193b      	adds	r3, r7, r4
 800a46a:	4a27      	ldr	r2, [pc, #156]	@ (800a508 <MX_GPIO_Init+0x180>)
 800a46c:	0019      	movs	r1, r3
 800a46e:	0010      	movs	r0, r2
 800a470:	f009 fe1e 	bl	80140b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800a474:	0021      	movs	r1, r4
 800a476:	187b      	adds	r3, r7, r1
 800a478:	22b0      	movs	r2, #176	@ 0xb0
 800a47a:	0112      	lsls	r2, r2, #4
 800a47c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a47e:	000c      	movs	r4, r1
 800a480:	193b      	adds	r3, r7, r4
 800a482:	2201      	movs	r2, #1
 800a484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a486:	193b      	adds	r3, r7, r4
 800a488:	2200      	movs	r2, #0
 800a48a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48c:	193b      	adds	r3, r7, r4
 800a48e:	2200      	movs	r2, #0
 800a490:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a492:	193a      	adds	r2, r7, r4
 800a494:	23a0      	movs	r3, #160	@ 0xa0
 800a496:	05db      	lsls	r3, r3, #23
 800a498:	0011      	movs	r1, r2
 800a49a:	0018      	movs	r0, r3
 800a49c:	f009 fe08 	bl	80140b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a4a0:	0021      	movs	r1, r4
 800a4a2:	187b      	adds	r3, r7, r1
 800a4a4:	2280      	movs	r2, #128	@ 0x80
 800a4a6:	0212      	lsls	r2, r2, #8
 800a4a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a4aa:	187b      	adds	r3, r7, r1
 800a4ac:	2288      	movs	r2, #136	@ 0x88
 800a4ae:	0352      	lsls	r2, r2, #13
 800a4b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b2:	187b      	adds	r3, r7, r1
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4b8:	187a      	adds	r2, r7, r1
 800a4ba:	23a0      	movs	r3, #160	@ 0xa0
 800a4bc:	05db      	lsls	r3, r3, #23
 800a4be:	0011      	movs	r1, r2
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f009 fdf5 	bl	80140b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	2007      	movs	r0, #7
 800a4cc:	f009 f802 	bl	80134d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a4d0:	2007      	movs	r0, #7
 800a4d2:	f009 f814 	bl	80134fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a508 <MX_GPIO_Init+0x180>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	2108      	movs	r1, #8
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f00a f858 	bl	8014592 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 800a4e2:	2380      	movs	r3, #128	@ 0x80
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	4a06      	ldr	r2, [pc, #24]	@ (800a500 <MX_GPIO_Init+0x178>)
 800a4e8:	0019      	movs	r1, r3
 800a4ea:	0010      	movs	r0, r2
 800a4ec:	f00a f86e 	bl	80145cc <HAL_GPIO_TogglePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800a4f0:	46c0      	nop			@ (mov r8, r8)
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	b009      	add	sp, #36	@ 0x24
 800a4f6:	bd90      	pop	{r4, r7, pc}
 800a4f8:	40021000 	.word	0x40021000
 800a4fc:	0000074c 	.word	0x0000074c
 800a500:	50000800 	.word	0x50000800
 800a504:	0000142c 	.word	0x0000142c
 800a508:	50000400 	.word	0x50000400
 800a50c:	00004810 	.word	0x00004810

0800a510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a514:	b672      	cpsid	i
}
 800a516:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a518:	46c0      	nop			@ (mov r8, r8)
 800a51a:	e7fd      	b.n	800a518 <Error_Handler+0x8>

0800a51c <muestreo>:
#include "stm32u0xx_hal_pwr_ex.h"

uint32_t cnt_veces_muestreo_2 = 0;
//*************************************************************************************************

void muestreo(void){
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0


	     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);  PIn TEST


		cnt_veces_muestreo++; //inc cnt_veces_muestreo/// A,cnt_veces_muestreo
 800a522:	4bd7      	ldr	r3, [pc, #860]	@ (800a880 <muestreo+0x364>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	3301      	adds	r3, #1
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	4bd5      	ldr	r3, [pc, #852]	@ (800a880 <muestreo+0x364>)
 800a52c:	701a      	strb	r2, [r3, #0]


		if(cnt_veces_muestreo <= 200){ // 200){ //cp  A,#200
 800a52e:	4bd4      	ldr	r3, [pc, #848]	@ (800a880 <muestreo+0x364>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2bc8      	cmp	r3, #200	@ 0xc8
 800a534:	d800      	bhi.n	800a538 <muestreo+0x1c>
 800a536:	e12c      	b.n	800a792 <muestreo+0x276>
//			cnt_veces_muestreo_2 = 0;
//
//		if(cnt_veces_muestreo_2 < 200)
//			goto detecta_flanco;

	    cnt_veces_muestreo = 0;  //clr cnt_veces_muestreo
 800a538:	4bd1      	ldr	r3, [pc, #836]	@ (800a880 <muestreo+0x364>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	701a      	strb	r2, [r3, #0]
	    cruze_por_cero[0] = 1;		//bset    cruze_por_cero,#0
 800a53e:	4bd1      	ldr	r3, [pc, #836]	@ (800a884 <muestreo+0x368>)
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
//        }
//	  	flagsLogger2 [2] = 1;//bset	flagsLogger2,#2
//	  	goto error_muestreo; //jp error_muestreo

//batOFF_OK:
	    flagsLogger2 [0] = 1; //bset flagsLogger2,#0
 800a544:	4bd0      	ldr	r3, [pc, #832]	@ (800a888 <muestreo+0x36c>)
 800a546:	2201      	movs	r2, #1
 800a548:	701a      	strb	r2, [r3, #0]


grabadoEmergencia:

		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;//mov		cntBlockFlash,cntBlockDATA;
 800a54a:	4bd0      	ldr	r3, [pc, #832]	@ (800a88c <muestreo+0x370>)
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	4bd0      	ldr	r3, [pc, #832]	@ (800a890 <muestreo+0x374>)
 800a550:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800a552:	4bd0      	ldr	r3, [pc, #832]	@ (800a894 <muestreo+0x378>)
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	4bd0      	ldr	r3, [pc, #832]	@ (800a898 <muestreo+0x37c>)
 800a558:	701a      	strb	r2, [r3, #0]
		//ldw		X,#data_buffer
		//ldw		dirBuffer,X
		dirBuffer = &data_buffer[0]; //--------------------
 800a55a:	4bd0      	ldr	r3, [pc, #832]	@ (800a89c <muestreo+0x380>)
 800a55c:	4ad0      	ldr	r2, [pc, #832]	@ (800a8a0 <muestreo+0x384>)
 800a55e:	601a      	str	r2, [r3, #0]
		//ldw		X,#dataLogger
		//ldw		dirLogger,X
		dirLogger = &dataLogger[0];// ------------------------
 800a560:	4bd0      	ldr	r3, [pc, #832]	@ (800a8a4 <muestreo+0x388>)
 800a562:	4ad1      	ldr	r2, [pc, #836]	@ (800a8a8 <muestreo+0x38c>)
 800a564:	601a      	str	r2, [r3, #0]
	    //	LDW		X,dirBuffer
	    //  resulh = 0; //clr resulh
	    //  resull = 126;//mov resull,#126
//	    dirBuffer = dirBuffer + 126; //addw	X,resulh
        //ld		A,cntByteBlock
	    dirBuffer[126] = cntByteBlock;	//ld		(X),A ---------?
 800a566:	4bcd      	ldr	r3, [pc, #820]	@ (800a89c <muestreo+0x380>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	337e      	adds	r3, #126	@ 0x7e
 800a56c:	4aca      	ldr	r2, [pc, #808]	@ (800a898 <muestreo+0x37c>)
 800a56e:	7812      	ldrb	r2, [r2, #0]
 800a570:	701a      	strb	r2, [r3, #0]


		//;---- Graba buffer en bloque de flash
	    ProgMemCode = 0xAA; //mov ProgMemCode,#$AA;
 800a572:	4bce      	ldr	r3, [pc, #824]	@ (800a8ac <muestreo+0x390>)
 800a574:	22aa      	movs	r2, #170	@ 0xaa
 800a576:	701a      	strb	r2, [r3, #0]
	                   //ld    A,cntBlockFlash;
	                   //ldw		X,#128;
	    			   //mul		X,A; -----------------?
	    			   //addw	X,dirLogger;--------------?
//	    dirPointer = dirLogger + (128 * cntBlockFlash);//LDW dirPointer,X
	    dirPointer = &dirLogger[128*cntBlockFlash];
 800a578:	4bca      	ldr	r3, [pc, #808]	@ (800a8a4 <muestreo+0x388>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4ac4      	ldr	r2, [pc, #784]	@ (800a890 <muestreo+0x374>)
 800a57e:	7812      	ldrb	r2, [r2, #0]
 800a580:	01d2      	lsls	r2, r2, #7
 800a582:	189a      	adds	r2, r3, r2
 800a584:	4bca      	ldr	r3, [pc, #808]	@ (800a8b0 <muestreo+0x394>)
 800a586:	601a      	str	r2, [r3, #0]
	    // cntBlockFlash = dirBuffer;//LDW X,dirBuffer;
	    dataPointer = &dirBuffer[0];//LDW dataPointer,X
 800a588:	4bc4      	ldr	r3, [pc, #784]	@ (800a89c <muestreo+0x380>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	4bc9      	ldr	r3, [pc, #804]	@ (800a8b4 <muestreo+0x398>)
 800a58e:	601a      	str	r2, [r3, #0]
	    GRABA_BLOCK();			//call GRABA_BLOCK
 800a590:	f7fc fd86 	bl	80070a0 <GRABA_BLOCK>



	//---------------------------------------------------------------------------------------------
	    // ldw		X,cntRegDATA
	    cntReg = cntRegDATA;//ldw cntReg,X
 800a594:	4bc8      	ldr	r3, [pc, #800]	@ (800a8b8 <muestreo+0x39c>)
 800a596:	881a      	ldrh	r2, [r3, #0]
 800a598:	4bc8      	ldr	r3, [pc, #800]	@ (800a8bc <muestreo+0x3a0>)
 800a59a:	801a      	strh	r2, [r3, #0]
	    // ldw X,#eeCntRegDATA
	    cntRegPNT = &eeCntRegDATA;//ldw cntRegPNT,X
 800a59c:	4bc8      	ldr	r3, [pc, #800]	@ (800a8c0 <muestreo+0x3a4>)
 800a59e:	4ac9      	ldr	r2, [pc, #804]	@ (800a8c4 <muestreo+0x3a8>)
 800a5a0:	601a      	str	r2, [r3, #0]
	    // call save_cntReg
	    save_cntReg();
 800a5a2:	f7fc fc81 	bl	8006ea8 <save_cntReg>

	    //;primero guarda lo que aun hay en el buffer .
	    cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT
 800a5a6:	4bc8      	ldr	r3, [pc, #800]	@ (800a8c8 <muestreo+0x3ac>)
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	4bb9      	ldr	r3, [pc, #740]	@ (800a890 <muestreo+0x374>)
 800a5ac:	701a      	strb	r2, [r3, #0]
	    cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800a5ae:	4bc7      	ldr	r3, [pc, #796]	@ (800a8cc <muestreo+0x3b0>)
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	4bb9      	ldr	r3, [pc, #740]	@ (800a898 <muestreo+0x37c>)
 800a5b4:	701a      	strb	r2, [r3, #0]
	    //ldw X,#event_buffer
	    //ldw dirBuffer,X
	    dirBuffer = &event_buffer[0];
 800a5b6:	4bb9      	ldr	r3, [pc, #740]	@ (800a89c <muestreo+0x380>)
 800a5b8:	4ac5      	ldr	r2, [pc, #788]	@ (800a8d0 <muestreo+0x3b4>)
 800a5ba:	601a      	str	r2, [r3, #0]
	    //ldw X,#eventLogger
	    //ldw dirLogger,X
	    dirLogger = &eventLogger[0];
 800a5bc:	4bb9      	ldr	r3, [pc, #740]	@ (800a8a4 <muestreo+0x388>)
 800a5be:	4ac5      	ldr	r2, [pc, #788]	@ (800a8d4 <muestreo+0x3b8>)
 800a5c0:	601a      	str	r2, [r3, #0]
	                    							//clr		resulh
	                    							//mov		resull,#126
//	    point_X = dirBuffer + 126; //addw	X,resulh
	    //ld		A,cntByteBlock
//	    *point_X = cntByteBlock;//ld (X),A ----------------?
	    dirBuffer[126] = cntByteBlock;
 800a5c2:	4bb6      	ldr	r3, [pc, #728]	@ (800a89c <muestreo+0x380>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	337e      	adds	r3, #126	@ 0x7e
 800a5c8:	4ab3      	ldr	r2, [pc, #716]	@ (800a898 <muestreo+0x37c>)
 800a5ca:	7812      	ldrb	r2, [r2, #0]
 800a5cc:	701a      	strb	r2, [r3, #0]

	    //;---- Graba buffer en bloque de flash
	    ProgMemCode = 0xAA; //mov		ProgMemCode,#$AA;
 800a5ce:	4bb7      	ldr	r3, [pc, #732]	@ (800a8ac <muestreo+0x390>)
 800a5d0:	22aa      	movs	r2, #170	@ 0xaa
 800a5d2:	701a      	strb	r2, [r3, #0]
	    //ldw		X,#128;
	    //;//mul		X,A;
	    //addw	X,dirLogger; ------------------?
	    //LDW		dirPointer,X
	    //LDW		X,dirBuffer;
	    dirPointer = &dirLogger[128 * cntBlockFlash]; // -----------------------------------?
 800a5d4:	4bb3      	ldr	r3, [pc, #716]	@ (800a8a4 <muestreo+0x388>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4aad      	ldr	r2, [pc, #692]	@ (800a890 <muestreo+0x374>)
 800a5da:	7812      	ldrb	r2, [r2, #0]
 800a5dc:	01d2      	lsls	r2, r2, #7
 800a5de:	189a      	adds	r2, r3, r2
 800a5e0:	4bb3      	ldr	r3, [pc, #716]	@ (800a8b0 <muestreo+0x394>)
 800a5e2:	601a      	str	r2, [r3, #0]
	    //LDW		dataPointer,X
	    dataPointer = &dirBuffer[0];//------------------------------------?
 800a5e4:	4bad      	ldr	r3, [pc, #692]	@ (800a89c <muestreo+0x380>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	4bb2      	ldr	r3, [pc, #712]	@ (800a8b4 <muestreo+0x398>)
 800a5ea:	601a      	str	r2, [r3, #0]
	    GRABA_BLOCK();//call GRABA_BLOCK
 800a5ec:	f7fc fd58 	bl	80070a0 <GRABA_BLOCK>

	    //ldw		X,cntRegEVENT
	    //ldw		cntReg,X
	    cntReg = cntRegEVENT;
 800a5f0:	4bb9      	ldr	r3, [pc, #740]	@ (800a8d8 <muestreo+0x3bc>)
 800a5f2:	881a      	ldrh	r2, [r3, #0]
 800a5f4:	4bb1      	ldr	r3, [pc, #708]	@ (800a8bc <muestreo+0x3a0>)
 800a5f6:	801a      	strh	r2, [r3, #0]
	    //ldw		X,#eeCntRegEVENT
	    //ldw		cntRegPNT,X
	    cntRegPNT = &eeCntRegEVENT;
 800a5f8:	4bb1      	ldr	r3, [pc, #708]	@ (800a8c0 <muestreo+0x3a4>)
 800a5fa:	4ab8      	ldr	r2, [pc, #736]	@ (800a8dc <muestreo+0x3c0>)
 800a5fc:	601a      	str	r2, [r3, #0]
	    save_cntReg();		//call	save_cntReg
 800a5fe:	f7fc fc53 	bl	8006ea8 <save_cntReg>
	    save_timeUNIX();	//call	save_timeUNIX
 800a602:	f7fc fc63 	bl	8006ecc <save_timeUNIX>

	    for(uint8_t i=0; i<8; i++)
 800a606:	1dfb      	adds	r3, r7, #7
 800a608:	2200      	movs	r2, #0
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	e009      	b.n	800a622 <muestreo+0x106>
	    	flagsEvent[i] = 0;
 800a60e:	1dfb      	adds	r3, r7, #7
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	4ab3      	ldr	r2, [pc, #716]	@ (800a8e0 <muestreo+0x3c4>)
 800a614:	2100      	movs	r1, #0
 800a616:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t i=0; i<8; i++)
 800a618:	1dfb      	adds	r3, r7, #7
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	1dfb      	adds	r3, r7, #7
 800a61e:	3201      	adds	r2, #1
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	1dfb      	adds	r3, r7, #7
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b07      	cmp	r3, #7
 800a628:	d9f1      	bls.n	800a60e <muestreo+0xf2>

grabadoEmergenciaFin:
 800a62a:	46c0      	nop			@ (mov r8, r8)
	save_timeUNIX();
 800a62c:	f7fc fc4e 	bl	8006ecc <save_timeUNIX>
	GPIOA->MODER |= 0x3FFFFFFF;
 800a630:	23a0      	movs	r3, #160	@ 0xa0
 800a632:	05db      	lsls	r3, r3, #23
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	23a0      	movs	r3, #160	@ 0xa0
 800a638:	05db      	lsls	r3, r3, #23
 800a63a:	49aa      	ldr	r1, [pc, #680]	@ (800a8e4 <muestreo+0x3c8>)
 800a63c:	430a      	orrs	r2, r1
 800a63e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 0xFFFFFFFF;
 800a640:	4ba9      	ldr	r3, [pc, #676]	@ (800a8e8 <muestreo+0x3cc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4ba8      	ldr	r3, [pc, #672]	@ (800a8e8 <muestreo+0x3cc>)
 800a646:	2201      	movs	r2, #1
 800a648:	4252      	negs	r2, r2
 800a64a:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= 0xFFFDFFFF;
 800a64c:	4ba7      	ldr	r3, [pc, #668]	@ (800a8ec <muestreo+0x3d0>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	4ba6      	ldr	r3, [pc, #664]	@ (800a8ec <muestreo+0x3d0>)
 800a652:	49a7      	ldr	r1, [pc, #668]	@ (800a8f0 <muestreo+0x3d4>)
 800a654:	430a      	orrs	r2, r1
 800a656:	601a      	str	r2, [r3, #0]
	GPIOD->MODER |= 0xFFFFFFFF;
 800a658:	4ba6      	ldr	r3, [pc, #664]	@ (800a8f4 <muestreo+0x3d8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4ba5      	ldr	r3, [pc, #660]	@ (800a8f4 <muestreo+0x3d8>)
 800a65e:	2201      	movs	r2, #1
 800a660:	4252      	negs	r2, r2
 800a662:	601a      	str	r2, [r3, #0]
	GPIOE->MODER |= 0xFFFFFFFF;
 800a664:	4ba4      	ldr	r3, [pc, #656]	@ (800a8f8 <muestreo+0x3dc>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4ba3      	ldr	r3, [pc, #652]	@ (800a8f8 <muestreo+0x3dc>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	4252      	negs	r2, r2
 800a66e:	601a      	str	r2, [r3, #0]
	GPIOF->MODER |= 0xFFFFFFFF;
 800a670:	4ba2      	ldr	r3, [pc, #648]	@ (800a8fc <muestreo+0x3e0>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4ba1      	ldr	r3, [pc, #644]	@ (800a8fc <muestreo+0x3e0>)
 800a676:	2201      	movs	r2, #1
 800a678:	4252      	negs	r2, r2
 800a67a:	601a      	str	r2, [r3, #0]

	__HAL_RCC_GPIOB_CLK_DISABLE();
 800a67c:	4ba0      	ldr	r3, [pc, #640]	@ (800a900 <muestreo+0x3e4>)
 800a67e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a680:	4b9f      	ldr	r3, [pc, #636]	@ (800a900 <muestreo+0x3e4>)
 800a682:	2102      	movs	r1, #2
 800a684:	438a      	bics	r2, r1
 800a686:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800a688:	4b9d      	ldr	r3, [pc, #628]	@ (800a900 <muestreo+0x3e4>)
 800a68a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a68c:	4b9c      	ldr	r3, [pc, #624]	@ (800a900 <muestreo+0x3e4>)
 800a68e:	2108      	movs	r1, #8
 800a690:	438a      	bics	r2, r1
 800a692:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 800a694:	4b9a      	ldr	r3, [pc, #616]	@ (800a900 <muestreo+0x3e4>)
 800a696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a698:	4b99      	ldr	r3, [pc, #612]	@ (800a900 <muestreo+0x3e4>)
 800a69a:	2110      	movs	r1, #16
 800a69c:	438a      	bics	r2, r1
 800a69e:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOF_CLK_DISABLE();
 800a6a0:	4b97      	ldr	r3, [pc, #604]	@ (800a900 <muestreo+0x3e4>)
 800a6a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6a4:	4b96      	ldr	r3, [pc, #600]	@ (800a900 <muestreo+0x3e4>)
 800a6a6:	2120      	movs	r1, #32
 800a6a8:	438a      	bics	r2, r1
 800a6aa:	64da      	str	r2, [r3, #76]	@ 0x4c

	while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 800a6ac:	46c0      	nop			@ (mov r8, r8)
 800a6ae:	4b95      	ldr	r3, [pc, #596]	@ (800a904 <muestreo+0x3e8>)
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f00a f88b 	bl	80147cc <HAL_I2C_DeInit>
 800a6b6:	1e03      	subs	r3, r0, #0
 800a6b8:	d1f9      	bne.n	800a6ae <muestreo+0x192>
	while(HAL_UART_DeInit(&huart2) != HAL_OK);
 800a6ba:	46c0      	nop			@ (mov r8, r8)
 800a6bc:	4b92      	ldr	r3, [pc, #584]	@ (800a908 <muestreo+0x3ec>)
 800a6be:	0018      	movs	r0, r3
 800a6c0:	f00f fe5a 	bl	801a378 <HAL_UART_DeInit>
 800a6c4:	1e03      	subs	r3, r0, #0
 800a6c6:	d1f9      	bne.n	800a6bc <muestreo+0x1a0>
	while(HAL_UART_DeInit(&huart4) != HAL_OK);
 800a6c8:	46c0      	nop			@ (mov r8, r8)
 800a6ca:	4b90      	ldr	r3, [pc, #576]	@ (800a90c <muestreo+0x3f0>)
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	f00f fe53 	bl	801a378 <HAL_UART_DeInit>
 800a6d2:	1e03      	subs	r3, r0, #0
 800a6d4:	d1f9      	bne.n	800a6ca <muestreo+0x1ae>
	//ADC_Deinit_Func();
	while(HAL_ADC_DeInit(&hadc1) != HAL_OK);
 800a6d6:	46c0      	nop			@ (mov r8, r8)
 800a6d8:	4b8d      	ldr	r3, [pc, #564]	@ (800a910 <muestreo+0x3f4>)
 800a6da:	0018      	movs	r0, r3
 800a6dc:	f007 ffb2 	bl	8012644 <HAL_ADC_DeInit>
 800a6e0:	1e03      	subs	r3, r0, #0
 800a6e2:	d1f9      	bne.n	800a6d8 <muestreo+0x1bc>
	__HAL_RCC_DMA1_CLK_DISABLE();
 800a6e4:	4b86      	ldr	r3, [pc, #536]	@ (800a900 <muestreo+0x3e4>)
 800a6e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6e8:	4b85      	ldr	r3, [pc, #532]	@ (800a900 <muestreo+0x3e4>)
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	438a      	bics	r2, r1
 800a6ee:	649a      	str	r2, [r3, #72]	@ 0x48

	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a6f0:	4b88      	ldr	r3, [pc, #544]	@ (800a914 <muestreo+0x3f8>)
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800a6f6:	2380      	movs	r3, #128	@ 0x80
 800a6f8:	0199      	lsls	r1, r3, #6
 800a6fa:	4887      	ldr	r0, [pc, #540]	@ (800a918 <muestreo+0x3fc>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	2200      	movs	r2, #0
 800a700:	f00e fc16 	bl	8018f30 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a704:	1e03      	subs	r3, r0, #0
 800a706:	d001      	beq.n	800a70c <muestreo+0x1f0>
	{
		Error_Handler();
 800a708:	f7ff ff02 	bl	800a510 <Error_Handler>
	}

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a70c:	2007      	movs	r0, #7
 800a70e:	f008 fef6 	bl	80134fe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 800a712:	200a      	movs	r0, #10
 800a714:	f008 ff03 	bl	801351e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a718:	200b      	movs	r0, #11
 800a71a:	f008 ff00 	bl	801351e <HAL_NVIC_DisableIRQ>



sleep_rt:

	HAL_SuspendTick();
 800a71e:	f007 fba3 	bl	8011e68 <HAL_SuspendTick>

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800a722:	2001      	movs	r0, #1
 800a724:	f00c fa0a 	bl	8016b3c <HAL_PWREx_EnterSTOP2Mode>

	HAL_ResumeTick();
 800a728:	f007 fbac 	bl	8011e84 <HAL_ResumeTick>
	if(bandera_RTC)
 800a72c:	4b7b      	ldr	r3, [pc, #492]	@ (800a91c <muestreo+0x400>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <muestreo+0x220>
	{
		bandera_RTC = 0;
 800a734:	4b79      	ldr	r3, [pc, #484]	@ (800a91c <muestreo+0x400>)
 800a736:	2200      	movs	r2, #0
 800a738:	701a      	strb	r2, [r3, #0]
		goto sleep_rt;
 800a73a:	e7f0      	b.n	800a71e <muestreo+0x202>
	}

	//HAL_IWDG_Refresh(&hiwdg);
	reconfigura_perif();
 800a73c:	f7fe ff0a 	bl	8009554 <reconfigura_perif>
	//	HAL_Delay (15);
	//	HAL_IWDG_Refresh(&hiwdg);
	//}
	//HAL_IWDG_Refresh(&hiwdg);

	flagsEvent[3] = 1;
 800a740:	4b67      	ldr	r3, [pc, #412]	@ (800a8e0 <muestreo+0x3c4>)
 800a742:	2201      	movs	r2, #1
 800a744:	70da      	strb	r2, [r3, #3]
	retPowerOn = 10;
 800a746:	4b76      	ldr	r3, [pc, #472]	@ (800a920 <muestreo+0x404>)
 800a748:	220a      	movs	r2, #10
 800a74a:	701a      	strb	r2, [r3, #0]
	edorefri = 0;
 800a74c:	4b75      	ldr	r3, [pc, #468]	@ (800a924 <muestreo+0x408>)
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]
	cntblkh = 0;
 800a752:	4b75      	ldr	r3, [pc, #468]	@ (800a928 <muestreo+0x40c>)
 800a754:	2200      	movs	r2, #0
 800a756:	801a      	strh	r2, [r3, #0]
	flagsa[7] = 1;// flagsa = 0x81;
 800a758:	4b74      	ldr	r3, [pc, #464]	@ (800a92c <muestreo+0x410>)
 800a75a:	2201      	movs	r2, #1
 800a75c:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 800a75e:	4b73      	ldr	r3, [pc, #460]	@ (800a92c <muestreo+0x410>)
 800a760:	2201      	movs	r2, #1
 800a762:	701a      	strb	r2, [r3, #0]
	cntseg = 0;
 800a764:	4b72      	ldr	r3, [pc, #456]	@ (800a930 <muestreo+0x414>)
 800a766:	2200      	movs	r2, #0
 800a768:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0; k<8; k++)
 800a76a:	1dbb      	adds	r3, r7, #6
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e009      	b.n	800a786 <muestreo+0x26a>
		flagsBattery[k] = 0;
 800a772:	1dbb      	adds	r3, r7, #6
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	4a6f      	ldr	r2, [pc, #444]	@ (800a934 <muestreo+0x418>)
 800a778:	2100      	movs	r1, #0
 800a77a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++)
 800a77c:	1dbb      	adds	r3, r7, #6
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	1dbb      	adds	r3, r7, #6
 800a782:	3201      	adds	r2, #1
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	1dbb      	adds	r3, r7, #6
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b07      	cmp	r3, #7
 800a78c:	d9f1      	bls.n	800a772 <muestreo+0x256>

		//;Apaga Perifericos RGM_07-AGO-2023


ibus_ocupado_halt:
 800a78e:	46c0      	nop			@ (mov r8, r8)


DoSleep:
goto error_muestreo;//jp error_muestreo
 800a790:	e185      	b.n	800aa9e <muestreo+0x582>
			goto detecta_flanco;//jrule detecta_flanco
 800a792:	46c0      	nop			@ (mov r8, r8)

//;=========================================  Rutina DETECCIÓN DE FLANCO DE SUBIDA
//;La detección de cruce por cero se realiza por umbral en el pin de MUESTREO.

detecta_flanco:						 //;Más de 50ms sin cruces por cero
		s_reloj[2] = 0;//bres s_reloj,#2
 800a794:	4b68      	ldr	r3, [pc, #416]	@ (800a938 <muestreo+0x41c>)
 800a796:	2200      	movs	r2, #0
 800a798:	709a      	strb	r2, [r3, #2]

up_anterior:

		if(s_reloj[0]){	//btjt s_reloj,#0,alto   [actual]	   ;¿El valor de la bandera "actual" es 1?
 800a79a:	4b67      	ldr	r3, [pc, #412]	@ (800a938 <muestreo+0x41c>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <muestreo+0x28e>
			goto alto;
		}
		s_reloj[1] = 0;   				//bres s_reloj,#1    ;[anterior]  ;NO: Anterior <- 0
 800a7a2:	4b65      	ldr	r3, [pc, #404]	@ (800a938 <muestreo+0x41c>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	705a      	strb	r2, [r3, #1]
		goto end_up_anterior;//jra end_up_anterior
 800a7a8:	e003      	b.n	800a7b2 <muestreo+0x296>
			goto alto;
 800a7aa:	46c0      	nop			@ (mov r8, r8)

alto:
		s_reloj[1] = 1; 	//bset s_reloj,#1		;[anterior]   ;SI: Anterior <- 1
 800a7ac:	4b62      	ldr	r3, [pc, #392]	@ (800a938 <muestreo+0x41c>)
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	705a      	strb	r2, [r3, #1]
			// 19-AGO-2024		HAL_ADC_Stop(&hadc);
		// ----------------------Codigo Julio Torres
//---Toogle  GPIOA->BSRR = GPIO_BSRR_BS_11;
		//ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
//		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
		ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800a7b2:	4b62      	ldr	r3, [pc, #392]	@ (800a93c <muestreo+0x420>)
 800a7b4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a7b6:	4b61      	ldr	r3, [pc, #388]	@ (800a93c <muestreo+0x420>)
 800a7b8:	2280      	movs	r2, #128	@ 0x80
 800a7ba:	00d2      	lsls	r2, r2, #3
 800a7bc:	400a      	ands	r2, r1
 800a7be:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800a7c0:	4b5e      	ldr	r3, [pc, #376]	@ (800a93c <muestreo+0x420>)
 800a7c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800a93c <muestreo+0x420>)
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	400a      	ands	r2, r1
 800a7ca:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800a7cc:	4b5b      	ldr	r3, [pc, #364]	@ (800a93c <muestreo+0x420>)
 800a7ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a7d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a93c <muestreo+0x420>)
 800a7d2:	2280      	movs	r2, #128	@ 0x80
 800a7d4:	02d2      	lsls	r2, r2, #11
 800a7d6:	400a      	ands	r2, r1
 800a7d8:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL14;  // Canal 0
 800a7da:	4b58      	ldr	r3, [pc, #352]	@ (800a93c <muestreo+0x420>)
 800a7dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a7de:	4b57      	ldr	r3, [pc, #348]	@ (800a93c <muestreo+0x420>)
 800a7e0:	2280      	movs	r2, #128	@ 0x80
 800a7e2:	01d2      	lsls	r2, r2, #7
 800a7e4:	400a      	ands	r2, r1
 800a7e6:	629a      	str	r2, [r3, #40]	@ 0x28

		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800a7e8:	4b54      	ldr	r3, [pc, #336]	@ (800a93c <muestreo+0x420>)
 800a7ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7ec:	4b53      	ldr	r3, [pc, #332]	@ (800a93c <muestreo+0x420>)
 800a7ee:	2180      	movs	r1, #128	@ 0x80
 800a7f0:	0089      	lsls	r1, r1, #2
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	629a      	str	r2, [r3, #40]	@ 0x28
		//ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
		//ADC->CCR |= ADC_CCR_VREFEN;
		capturaAD();
 800a7f6:	f002 ff73 	bl	800d6e0 <capturaAD>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		//---Toogle  GPIOA->BSRR = GPIO_BSRR_BR_11;
		// ----------------------Codigo Julio Torres

		asm ("nop");
 800a7fa:	46c0      	nop			@ (mov r8, r8)
		//if(adcramh >= 10){//cpw     Y,#10
		//if(adcramh >= 20){//cpw     Y,#10
		//if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
		if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
 800a7fc:	4b50      	ldr	r3, [pc, #320]	@ (800a940 <muestreo+0x424>)
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	2b22      	cmp	r3, #34	@ 0x22
 800a802:	d803      	bhi.n	800a80c <muestreo+0x2f0>

			goto pin_cruce_alto;//jruge   pin_cruce_alto
		}
		s_reloj[0] = 0;		// bres    s_reloj,#0;
 800a804:	4b4c      	ldr	r3, [pc, #304]	@ (800a938 <muestreo+0x41c>)
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
		goto end_up_actual;//jra     end_up_actual;
 800a80a:	e003      	b.n	800a814 <muestreo+0x2f8>
			goto pin_cruce_alto;//jruge   pin_cruce_alto
 800a80c:	46c0      	nop			@ (mov r8, r8)
pin_cruce_alto:
		s_reloj[0] = 1;	 		//bset    s_reloj,#0;
 800a80e:	4b4a      	ldr	r3, [pc, #296]	@ (800a938 <muestreo+0x41c>)
 800a810:	2201      	movs	r2, #1
 800a812:	701a      	strb	r2, [r3, #0]

determina_flanco: //---------------------------------------------------------?
		//ld A,s_reloj
		//and A,#$03
		//-----if(!(s_reloj[0] | s_reloj[1])){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
        if((!s_reloj[1]) & (s_reloj[0]) ){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
 800a814:	4b48      	ldr	r3, [pc, #288]	@ (800a938 <muestreo+0x41c>)
 800a816:	785b      	ldrb	r3, [r3, #1]
 800a818:	2201      	movs	r2, #1
 800a81a:	4053      	eors	r3, r2
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	001a      	movs	r2, r3
 800a820:	4b45      	ldr	r3, [pc, #276]	@ (800a938 <muestreo+0x41c>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	4013      	ands	r3, r2
 800a826:	d007      	beq.n	800a838 <muestreo+0x31c>

			goto flanco_subida;			//jreq flanco_subida/ salta si z=1
 800a828:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_detecta_flanco;//jra fin_detecta_flanco


flanco_subida:
		s_reloj[2] = 1;	//bset    s_reloj,#2								;[b_flancos]	;Activar bandera de flanco de subida
 800a82a:	4b43      	ldr	r3, [pc, #268]	@ (800a938 <muestreo+0x41c>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	709a      	strb	r2, [r3, #2]
		//bcpl    PA_ODR,#0					// Test por, prueba
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
		cruze_por_cero[0] = 1;			//bset    cruze_por_cero,#0			;Activa bandera de cruce por cero
 800a830:	4b14      	ldr	r3, [pc, #80]	@ (800a884 <muestreo+0x368>)
 800a832:	2201      	movs	r2, #1
 800a834:	701a      	strb	r2, [r3, #0]
 800a836:	e000      	b.n	800a83a <muestreo+0x31e>
		goto fin_detecta_flanco;//jra fin_detecta_flanco
 800a838:	46c0      	nop			@ (mov r8, r8)

fin_detecta_flanco:

//;=====================================  FIN Rutina DETECCIÓN DE FLANCO DE BAJADA

		if(s_reloj[2]){			//btjt    s_reloj,#2,pregunta_edo_muestreo
 800a83a:	4b3f      	ldr	r3, [pc, #252]	@ (800a938 <muestreo+0x41c>)
 800a83c:	789b      	ldrb	r3, [r3, #2]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d105      	bne.n	800a84e <muestreo+0x332>
			goto pregunta_edo_muestreo;
		}
		//ld    A,edo_muestreo
		if(edo_muestreo == 1){//cp    A,#1 ***************???
 800a842:	4b40      	ldr	r3, [pc, #256]	@ (800a944 <muestreo+0x428>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d000      	beq.n	800a84c <muestreo+0x330>
 800a84a:	e132      	b.n	800aab2 <muestreo+0x596>
			goto muestrea; //jreq  muestrea
 800a84c:	e009      	b.n	800a862 <muestreo+0x346>
			goto pregunta_edo_muestreo;
 800a84e:	46c0      	nop			@ (mov r8, r8)


pregunta_edo_muestreo:

		//ld A,cnt_mues
		if(cnt_mues == 0){//cp A,#0
 800a850:	4b3d      	ldr	r3, [pc, #244]	@ (800a948 <muestreo+0x42c>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d000      	beq.n	800a85a <muestreo+0x33e>
 800a858:	e120      	b.n	800aa9c <muestreo+0x580>
			goto no_error_muestreo;//jreq no_error_muestreo
 800a85a:	46c0      	nop			@ (mov r8, r8)
		}
		goto error_muestreo;//jp error_muestreo


no_error_muestreo:
		edo_muestreo = 1; //mov edo_muestreo,#1
 800a85c:	4b39      	ldr	r3, [pc, #228]	@ (800a944 <muestreo+0x428>)
 800a85e:	2201      	movs	r2, #1
 800a860:	701a      	strb	r2, [r3, #0]


muestrea:
	    //ld A,cnt_mues
		if(cnt_mues != 32 ){ //cp A,#32 ****************
 800a862:	4b39      	ldr	r3, [pc, #228]	@ (800a948 <muestreo+0x42c>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b20      	cmp	r3, #32
 800a868:	d172      	bne.n	800a950 <muestreo+0x434>
			goto adq_muesn; //jrne    adq_muesn
		}
		cnt_mues = 0;//clr     cnt_mues         ;SI, limpia el contador de muestras
 800a86a:	4b37      	ldr	r3, [pc, #220]	@ (800a948 <muestreo+0x42c>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
		edo_muestreo = 0;//mov     edo_muestreo,#0
 800a870:	4b34      	ldr	r3, [pc, #208]	@ (800a944 <muestreo+0x428>)
 800a872:	2200      	movs	r2, #0
 800a874:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	 //28-May-2024: Salida IO7 toogle test
		goto voltaje_rms;//jp      voltaje_rms
 800a876:	46c0      	nop			@ (mov r8, r8)
voltaje_rms:
		//sigma_cuad_sampl_1 = 0;			//clr     sigma_cuad_sampl_1
		//sigma_cuad_sampl_2 = 0;			//clr     sigma_cuad_sampl_2
		//sigma_cuad_sampl_3 = 0;			//clr     sigma_cuad_sampl_3
		//sigma_cuad_sampl_4 = 0;			//clr     sigma_cuad_sampl_4
		sigma_cuad_sampl = 0;
 800a878:	4b34      	ldr	r3, [pc, #208]	@ (800a94c <muestreo+0x430>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e0a8      	b.n	800a9d2 <muestreo+0x4b6>
 800a880:	20000ba8 	.word	0x20000ba8
 800a884:	20000cbc 	.word	0x20000cbc
 800a888:	20002070 	.word	0x20002070
 800a88c:	20000e99 	.word	0x20000e99
 800a890:	20000e86 	.word	0x20000e86
 800a894:	20000e98 	.word	0x20000e98
 800a898:	20000e87 	.word	0x20000e87
 800a89c:	20000e90 	.word	0x20000e90
 800a8a0:	20000d78 	.word	0x20000d78
 800a8a4:	20000e8c 	.word	0x20000e8c
 800a8a8:	0803c000 	.word	0x0803c000
 800a8ac:	20000e78 	.word	0x20000e78
 800a8b0:	20000e7c 	.word	0x20000e7c
 800a8b4:	20000e80 	.word	0x20000e80
 800a8b8:	2000212e 	.word	0x2000212e
 800a8bc:	20002132 	.word	0x20002132
 800a8c0:	20002134 	.word	0x20002134
 800a8c4:	0803f810 	.word	0x0803f810
 800a8c8:	20000e9b 	.word	0x20000e9b
 800a8cc:	20000e9a 	.word	0x20000e9a
 800a8d0:	20000df8 	.word	0x20000df8
 800a8d4:	08037000 	.word	0x08037000
 800a8d8:	20002130 	.word	0x20002130
 800a8dc:	0803f812 	.word	0x0803f812
 800a8e0:	20001fbc 	.word	0x20001fbc
 800a8e4:	3fffffff 	.word	0x3fffffff
 800a8e8:	50000400 	.word	0x50000400
 800a8ec:	50000800 	.word	0x50000800
 800a8f0:	fffdffff 	.word	0xfffdffff
 800a8f4:	50000c00 	.word	0x50000c00
 800a8f8:	50001000 	.word	0x50001000
 800a8fc:	50001400 	.word	0x50001400
 800a900:	40021000 	.word	0x40021000
 800a904:	20000450 	.word	0x20000450
 800a908:	2000068c 	.word	0x2000068c
 800a90c:	20000720 	.word	0x20000720
 800a910:	200003ec 	.word	0x200003ec
 800a914:	40002800 	.word	0x40002800
 800a918:	20000578 	.word	0x20000578
 800a91c:	200021d6 	.word	0x200021d6
 800a920:	20002192 	.word	0x20002192
 800a924:	20000bf8 	.word	0x20000bf8
 800a928:	20000bb0 	.word	0x20000bb0
 800a92c:	20000bd8 	.word	0x20000bd8
 800a930:	20000baf 	.word	0x20000baf
 800a934:	2000219c 	.word	0x2000219c
 800a938:	20000b7c 	.word	0x20000b7c
 800a93c:	40012400 	.word	0x40012400
 800a940:	20000bc0 	.word	0x20000bc0
 800a944:	20000baa 	.word	0x20000baa
 800a948:	20000b7f 	.word	0x20000b7f
 800a94c:	20000b80 	.word	0x20000b80
			goto adq_muesn; //jrne    adq_muesn
 800a950:	46c0      	nop			@ (mov r8, r8)
		ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800a952:	4b5a      	ldr	r3, [pc, #360]	@ (800aabc <muestreo+0x5a0>)
 800a954:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a956:	4b59      	ldr	r3, [pc, #356]	@ (800aabc <muestreo+0x5a0>)
 800a958:	2280      	movs	r2, #128	@ 0x80
 800a95a:	00d2      	lsls	r2, r2, #3
 800a95c:	400a      	ands	r2, r1
 800a95e:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800a960:	4b56      	ldr	r3, [pc, #344]	@ (800aabc <muestreo+0x5a0>)
 800a962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a964:	4b55      	ldr	r3, [pc, #340]	@ (800aabc <muestreo+0x5a0>)
 800a966:	2101      	movs	r1, #1
 800a968:	400a      	ands	r2, r1
 800a96a:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800a96c:	4b53      	ldr	r3, [pc, #332]	@ (800aabc <muestreo+0x5a0>)
 800a96e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a970:	4b52      	ldr	r3, [pc, #328]	@ (800aabc <muestreo+0x5a0>)
 800a972:	2280      	movs	r2, #128	@ 0x80
 800a974:	02d2      	lsls	r2, r2, #11
 800a976:	400a      	ands	r2, r1
 800a978:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL14;  // Canal 0
 800a97a:	4b50      	ldr	r3, [pc, #320]	@ (800aabc <muestreo+0x5a0>)
 800a97c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a97e:	4b4f      	ldr	r3, [pc, #316]	@ (800aabc <muestreo+0x5a0>)
 800a980:	2280      	movs	r2, #128	@ 0x80
 800a982:	01d2      	lsls	r2, r2, #7
 800a984:	400a      	ands	r2, r1
 800a986:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800a988:	4b4c      	ldr	r3, [pc, #304]	@ (800aabc <muestreo+0x5a0>)
 800a98a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a98c:	4b4b      	ldr	r3, [pc, #300]	@ (800aabc <muestreo+0x5a0>)
 800a98e:	2180      	movs	r1, #128	@ 0x80
 800a990:	0089      	lsls	r1, r1, #2
 800a992:	430a      	orrs	r2, r1
 800a994:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD();
 800a996:	f002 fea3 	bl	800d6e0 <capturaAD>
		asm ("nop");
 800a99a:	46c0      	nop			@ (mov r8, r8)
		adcramh >>= 1;    			//srlw    Y             ;Convierte la muestra de 10 bits en 9 bits ****************?????
 800a99c:	4b48      	ldr	r3, [pc, #288]	@ (800aac0 <muestreo+0x5a4>)
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	085b      	lsrs	r3, r3, #1
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	4b46      	ldr	r3, [pc, #280]	@ (800aac0 <muestreo+0x5a4>)
 800a9a6:	801a      	strh	r2, [r3, #0]
		adcramh >>= 1; 				//srlw    Y             ;Convierte la muestra de  9 bits en 8 bits ****************???
 800a9a8:	4b45      	ldr	r3, [pc, #276]	@ (800aac0 <muestreo+0x5a4>)
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	085b      	lsrs	r3, r3, #1
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	4b43      	ldr	r3, [pc, #268]	@ (800aac0 <muestreo+0x5a4>)
 800a9b2:	801a      	strh	r2, [r3, #0]
		vl_ram [cnt_mues] = (uint8_t) adcramh;
 800a9b4:	4b42      	ldr	r3, [pc, #264]	@ (800aac0 <muestreo+0x5a4>)
 800a9b6:	8819      	ldrh	r1, [r3, #0]
 800a9b8:	4b42      	ldr	r3, [pc, #264]	@ (800aac4 <muestreo+0x5a8>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	001a      	movs	r2, r3
 800a9be:	b2c9      	uxtb	r1, r1
 800a9c0:	4b41      	ldr	r3, [pc, #260]	@ (800aac8 <muestreo+0x5ac>)
 800a9c2:	5499      	strb	r1, [r3, r2]
		cnt_mues++;			//inc     cnt_mues			;Una muestra más
 800a9c4:	4b3f      	ldr	r3, [pc, #252]	@ (800aac4 <muestreo+0x5a8>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	4b3d      	ldr	r3, [pc, #244]	@ (800aac4 <muestreo+0x5a8>)
 800a9ce:	701a      	strb	r2, [r3, #0]
		goto fin_voltrms;//jp      fin_voltrms
 800a9d0:	e070      	b.n	800aab4 <muestreo+0x598>
				// ldw X,#vl_ram
				// ld A,XL
				// add A,cnt_mues
				// ld  XL,A
				// ld A,(X)  ////////////?????
				wreg= vl_ram[cnt_mues]; //ld wreg,A
 800a9d2:	4b3c      	ldr	r3, [pc, #240]	@ (800aac4 <muestreo+0x5a8>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	001a      	movs	r2, r3
 800a9d8:	4b3b      	ldr	r3, [pc, #236]	@ (800aac8 <muestreo+0x5ac>)
 800a9da:	5c9a      	ldrb	r2, [r3, r2]
 800a9dc:	4b3b      	ldr	r3, [pc, #236]	@ (800aacc <muestreo+0x5b0>)
 800a9de:	701a      	strb	r2, [r3, #0]
take_sampling:
//----------------------- Factor
					//ldw     X,waux
					//ld      A,eevolt_mul
	                //eevolt_mul = waux * eevolt_mul;//mul     X,A ***************************????
					uint16_t	foo = 0;
 800a9e0:	1d3b      	adds	r3, r7, #4
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	801a      	strh	r2, [r3, #0]
					//foo = (uint16_t)(wreg * eevolt_mul);
					foo = (uint16_t)(wreg * reevolt_mul);
 800a9e6:	4b39      	ldr	r3, [pc, #228]	@ (800aacc <muestreo+0x5b0>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	001a      	movs	r2, r3
 800a9ec:	4b38      	ldr	r3, [pc, #224]	@ (800aad0 <muestreo+0x5b4>)
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	0019      	movs	r1, r3
 800a9f2:	1d3b      	adds	r3, r7, #4
 800a9f4:	434a      	muls	r2, r1
 800a9f6:	801a      	strh	r2, [r3, #0]
					//resul = (uint16_t)(wreg * 100);
					//ld      A,eevolt_div
					//div     X,A
	                //eevolt_div = waux / eevolt_div; //************************************?????
					//foo = foo / eevolt_div;
					foo = foo / reevolt_div;
 800a9f8:	1d3b      	adds	r3, r7, #4
 800a9fa:	881a      	ldrh	r2, [r3, #0]
 800a9fc:	4b35      	ldr	r3, [pc, #212]	@ (800aad4 <muestreo+0x5b8>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	0019      	movs	r1, r3
 800aa02:	0010      	movs	r0, r2
 800aa04:	f7f5 fc12 	bl	800022c <__divsi3>
 800aa08:	0003      	movs	r3, r0
 800aa0a:	001a      	movs	r2, r3
 800aa0c:	1d3b      	adds	r3, r7, #4
 800aa0e:	801a      	strh	r2, [r3, #0]
					//ld      XL,A
					//ld      A,resulh //----------------------------------------------?
					//mul     X,A
	                //resulh = waux*resulh;
	                //level_4st_mult_H = resulh;//ldw level_4st_mult_H,X
					level_4st_mult = (uint32_t)(foo * foo);
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	1d3a      	adds	r2, r7, #4
 800aa16:	8812      	ldrh	r2, [r2, #0]
 800aa18:	4353      	muls	r3, r2
 800aa1a:	001a      	movs	r2, r3
 800aa1c:	4b2e      	ldr	r3, [pc, #184]	@ (800aad8 <muestreo+0x5bc>)
 800aa1e:	601a      	str	r2, [r3, #0]
			//addw X,level_2st_result_H
			//level_2st_result_H = waux + level_2st_result_H;
			//addw X,sigma_cuad_sampl_4
			//ldw sigma_cuad_sampl_4,X
			//sigma_cuad_sampl_4 = waux + sigma_cuad_sampl_4;
              sigma_cuad_sampl +=  level_4st_mult;
 800aa20:	4b2e      	ldr	r3, [pc, #184]	@ (800aadc <muestreo+0x5c0>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	4b2c      	ldr	r3, [pc, #176]	@ (800aad8 <muestreo+0x5bc>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	18d2      	adds	r2, r2, r3
 800aa2a:	4b2c      	ldr	r3, [pc, #176]	@ (800aadc <muestreo+0x5c0>)
 800aa2c:	601a      	str	r2, [r3, #0]

	//================================================= FIN Rutina CALCULA SUMATORIA

			cnt_mues++;//inc cnt_mues
 800aa2e:	4b25      	ldr	r3, [pc, #148]	@ (800aac4 <muestreo+0x5a8>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	4b23      	ldr	r3, [pc, #140]	@ (800aac4 <muestreo+0x5a8>)
 800aa38:	701a      	strb	r2, [r3, #0]
			//ld      A,cnt_mues
			if(cnt_mues >= 32){//cp A,#32 -------------------------?
 800aa3a:	4b22      	ldr	r3, [pc, #136]	@ (800aac4 <muestreo+0x5a8>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b1f      	cmp	r3, #31
 800aa40:	d800      	bhi.n	800aa44 <muestreo+0x528>
				goto sumatoria_completa;//jreq sumatoria_completa
			}
			goto suma_cuad;//jp suma_cuad
 800aa42:	e7c6      	b.n	800a9d2 <muestreo+0x4b6>
				goto sumatoria_completa;//jreq sumatoria_completa
 800aa44:	46c0      	nop			@ (mov r8, r8)

sumatoria_completa:
			cnt_mues = 0;//clr cnt_mues
 800aa46:	4b1f      	ldr	r3, [pc, #124]	@ (800aac4 <muestreo+0x5a8>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
			//		   goto taking_prom;//jrne taking_prom
			//	   }
				   //ldw X,sigma_cuad_sampl_2
				   //ldw	sigma_prom_h,X
			//	   sigma_prom_h = sigma_cuad_sampl_2;
			sigma_cuad_sampl  >>= 5;
 800aa4c:	4b23      	ldr	r3, [pc, #140]	@ (800aadc <muestreo+0x5c0>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	095a      	lsrs	r2, r3, #5
 800aa52:	4b22      	ldr	r3, [pc, #136]	@ (800aadc <muestreo+0x5c0>)
 800aa54:	601a      	str	r2, [r3, #0]
	//				addw sp,#6

					//ld A, XL
					//ld volt_trms, A
					//volt_trms = sigma_prom_h;
					volt_trms = (uint8_t)(sqrt(sigma_cuad_sampl));
 800aa56:	4b21      	ldr	r3, [pc, #132]	@ (800aadc <muestreo+0x5c0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f7f7 fd86 	bl	800256c <__aeabi_ui2d>
 800aa60:	0002      	movs	r2, r0
 800aa62:	000b      	movs	r3, r1
 800aa64:	0010      	movs	r0, r2
 800aa66:	0019      	movs	r1, r3
 800aa68:	f011 fb3a 	bl	801c0e0 <sqrt>
 800aa6c:	0002      	movs	r2, r0
 800aa6e:	000b      	movs	r3, r1
 800aa70:	0010      	movs	r0, r2
 800aa72:	0019      	movs	r1, r3
 800aa74:	f7f5 fd42 	bl	80004fc <__aeabi_d2uiz>
 800aa78:	0003      	movs	r3, r0
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	4b18      	ldr	r3, [pc, #96]	@ (800aae0 <muestreo+0x5c4>)
 800aa7e:	701a      	strb	r2, [r3, #0]
					cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800aa80:	4b18      	ldr	r3, [pc, #96]	@ (800aae4 <muestreo+0x5c8>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	701a      	strb	r2, [r3, #0]

					flagsLogger2[0] = 0;//bres flagsLogger2, #0
 800aa86:	4b18      	ldr	r3, [pc, #96]	@ (800aae8 <muestreo+0x5cc>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	701a      	strb	r2, [r3, #0]
					flagsLogger2[1] = 0;//bres flagsLogger2, #1
 800aa8c:	4b16      	ldr	r3, [pc, #88]	@ (800aae8 <muestreo+0x5cc>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	705a      	strb	r2, [r3, #1]
					flagsLogger2[2] = 0;//BRES flagsLogger2, #2
 800aa92:	4b15      	ldr	r3, [pc, #84]	@ (800aae8 <muestreo+0x5cc>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	709a      	strb	r2, [r3, #2]

					// SAlto por lo mientras
					goto fin_calibra_voltaje;
 800aa98:	46c0      	nop			@ (mov r8, r8)
			asm ("nop");
			asm ("nop");
	        goto calibra_reset;//jp      calibra_reset

fin_calibra_voltaje:
	        goto fin_voltrms;// jp fin_voltrms
 800aa9a:	e00b      	b.n	800aab4 <muestreo+0x598>
		goto error_muestreo;//jp error_muestreo
 800aa9c:	46c0      	nop			@ (mov r8, r8)
error_muestreo:
			cnt_mues = 0;//clr cnt_mues
 800aa9e:	4b09      	ldr	r3, [pc, #36]	@ (800aac4 <muestreo+0x5a8>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
			cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800aaa4:	4b0f      	ldr	r3, [pc, #60]	@ (800aae4 <muestreo+0x5c8>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
			edo_muestreo = 0;//mov edo_muestreo,#0
 800aaaa:	4b10      	ldr	r3, [pc, #64]	@ (800aaec <muestreo+0x5d0>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
fin_voltrms:


}
 800aab0:	e000      	b.n	800aab4 <muestreo+0x598>
		goto fin_voltrms;//jp fin_voltrms
 800aab2:	46c0      	nop			@ (mov r8, r8)
}
 800aab4:	46c0      	nop			@ (mov r8, r8)
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b002      	add	sp, #8
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	40012400 	.word	0x40012400
 800aac0:	20000bc0 	.word	0x20000bc0
 800aac4:	20000b7f 	.word	0x20000b7f
 800aac8:	20000b88 	.word	0x20000b88
 800aacc:	20000bb7 	.word	0x20000bb7
 800aad0:	200001b9 	.word	0x200001b9
 800aad4:	200001b8 	.word	0x200001b8
 800aad8:	20000b84 	.word	0x20000b84
 800aadc:	20000b80 	.word	0x20000b80
 800aae0:	20000ba9 	.word	0x20000ba9
 800aae4:	20000ba8 	.word	0x20000ba8
 800aae8:	20002070 	.word	0x20002070
 800aaec:	20000baa 	.word	0x20000baa

0800aaf0 <noctar>:


void noctar (void){
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0

	asm ("nop");
 800aaf4:	46c0      	nop			@ (mov r8, r8)

}
 800aaf6:	46c0      	nop			@ (mov r8, r8)
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 800aafc:	b590      	push	{r4, r7, lr}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800ab02:	2300      	movs	r3, #0
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	e00c      	b.n	800ab22 <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800ab08:	4ad4      	ldr	r2, [pc, #848]	@ (800ae5c <refrigera+0x360>)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	18d3      	adds	r3, r2, r3
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800ab12:	4ad3      	ldr	r2, [pc, #844]	@ (800ae60 <refrigera+0x364>)
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	18d3      	adds	r3, r2, r3
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b07      	cmp	r3, #7
 800ab26:	ddef      	ble.n	800ab08 <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800ab28:	4bce      	ldr	r3, [pc, #824]	@ (800ae64 <refrigera+0x368>)
 800ab2a:	2253      	movs	r2, #83	@ 0x53
 800ab2c:	5c9a      	ldrb	r2, [r3, r2]
 800ab2e:	4bce      	ldr	r3, [pc, #824]	@ (800ae68 <refrigera+0x36c>)
 800ab30:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800ab32:	4bcd      	ldr	r3, [pc, #820]	@ (800ae68 <refrigera+0x36c>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	001a      	movs	r2, r3
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	d003      	beq.n	800ab46 <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800ab3e:	4bc7      	ldr	r3, [pc, #796]	@ (800ae5c <refrigera+0x360>)
 800ab40:	2201      	movs	r2, #1
 800ab42:	70da      	strb	r2, [r3, #3]
 800ab44:	e000      	b.n	800ab48 <refrigera+0x4c>
					goto refrigera_j00;
 800ab46:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 800ab48:	4bc7      	ldr	r3, [pc, #796]	@ (800ae68 <refrigera+0x36c>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	001a      	movs	r2, r3
 800ab4e:	2302      	movs	r3, #2
 800ab50:	4013      	ands	r3, r2
 800ab52:	d003      	beq.n	800ab5c <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 800ab54:	4bc1      	ldr	r3, [pc, #772]	@ (800ae5c <refrigera+0x360>)
 800ab56:	2201      	movs	r2, #1
 800ab58:	711a      	strb	r2, [r3, #4]
 800ab5a:	e000      	b.n	800ab5e <refrigera+0x62>
					goto refrigera_j01;
 800ab5c:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 800ab5e:	4bc1      	ldr	r3, [pc, #772]	@ (800ae64 <refrigera+0x368>)
 800ab60:	2262      	movs	r2, #98	@ 0x62
 800ab62:	5c9a      	ldrb	r2, [r3, r2]
 800ab64:	4bc0      	ldr	r3, [pc, #768]	@ (800ae68 <refrigera+0x36c>)
 800ab66:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 800ab68:	f7fb fef0 	bl	800694c <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 800ab6c:	4bbd      	ldr	r3, [pc, #756]	@ (800ae64 <refrigera+0x368>)
 800ab6e:	2257      	movs	r2, #87	@ 0x57
 800ab70:	5c9b      	ldrb	r3, [r3, r2]
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d11e      	bne.n	800abb4 <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 800ab76:	4bbb      	ldr	r3, [pc, #748]	@ (800ae64 <refrigera+0x368>)
 800ab78:	2243      	movs	r2, #67	@ 0x43
 800ab7a:	5c9b      	ldrb	r3, [r3, r2]
 800ab7c:	3364      	adds	r3, #100	@ 0x64
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	4bba      	ldr	r3, [pc, #744]	@ (800ae6c <refrigera+0x370>)
 800ab82:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 800ab84:	4bb9      	ldr	r3, [pc, #740]	@ (800ae6c <refrigera+0x370>)
 800ab86:	781a      	ldrb	r2, [r3, #0]
 800ab88:	4bb9      	ldr	r3, [pc, #740]	@ (800ae70 <refrigera+0x374>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	18d3      	adds	r3, r2, r3
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	4bb8      	ldr	r3, [pc, #736]	@ (800ae74 <refrigera+0x378>)
 800ab92:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 800ab94:	4bb3      	ldr	r3, [pc, #716]	@ (800ae64 <refrigera+0x368>)
 800ab96:	2244      	movs	r2, #68	@ 0x44
 800ab98:	5c9b      	ldrb	r3, [r3, r2]
 800ab9a:	3b38      	subs	r3, #56	@ 0x38
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	4bb6      	ldr	r3, [pc, #728]	@ (800ae78 <refrigera+0x37c>)
 800aba0:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 800aba2:	4bb5      	ldr	r3, [pc, #724]	@ (800ae78 <refrigera+0x37c>)
 800aba4:	781a      	ldrb	r2, [r3, #0]
 800aba6:	4bb0      	ldr	r3, [pc, #704]	@ (800ae68 <refrigera+0x36c>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	b2da      	uxtb	r2, r3
 800abae:	4bb3      	ldr	r3, [pc, #716]	@ (800ae7c <refrigera+0x380>)
 800abb0:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800abb2:	e021      	b.n	800abf8 <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 800abb4:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 800abb6:	4bab      	ldr	r3, [pc, #684]	@ (800ae64 <refrigera+0x368>)
 800abb8:	2257      	movs	r2, #87	@ 0x57
 800abba:	5c9b      	ldrb	r3, [r3, r2]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d11f      	bne.n	800ac00 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800abc0:	4ba8      	ldr	r3, [pc, #672]	@ (800ae64 <refrigera+0x368>)
 800abc2:	2242      	movs	r2, #66	@ 0x42
 800abc4:	5c9a      	ldrb	r2, [r3, r2]
 800abc6:	4ba9      	ldr	r3, [pc, #676]	@ (800ae6c <refrigera+0x370>)
 800abc8:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 800abca:	4ba8      	ldr	r3, [pc, #672]	@ (800ae6c <refrigera+0x370>)
 800abcc:	781a      	ldrb	r2, [r3, #0]
 800abce:	4ba8      	ldr	r3, [pc, #672]	@ (800ae70 <refrigera+0x374>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	18d3      	adds	r3, r2, r3
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	4ba7      	ldr	r3, [pc, #668]	@ (800ae74 <refrigera+0x378>)
 800abd8:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 800abda:	4ba2      	ldr	r3, [pc, #648]	@ (800ae64 <refrigera+0x368>)
 800abdc:	2243      	movs	r2, #67	@ 0x43
 800abde:	5c9b      	ldrb	r3, [r3, r2]
 800abe0:	3364      	adds	r3, #100	@ 0x64
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	4ba4      	ldr	r3, [pc, #656]	@ (800ae78 <refrigera+0x37c>)
 800abe6:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 800abe8:	4ba3      	ldr	r3, [pc, #652]	@ (800ae78 <refrigera+0x37c>)
 800abea:	781a      	ldrb	r2, [r3, #0]
 800abec:	4b9e      	ldr	r3, [pc, #632]	@ (800ae68 <refrigera+0x36c>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	4ba1      	ldr	r3, [pc, #644]	@ (800ae7c <refrigera+0x380>)
 800abf6:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 800abf8:	4b98      	ldr	r3, [pc, #608]	@ (800ae5c <refrigera+0x360>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	719a      	strb	r2, [r3, #6]
 800abfe:	e000      	b.n	800ac02 <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800ac00:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800ac02:	4b97      	ldr	r3, [pc, #604]	@ (800ae60 <refrigera+0x364>)
 800ac04:	2201      	movs	r2, #1
 800ac06:	705a      	strb	r2, [r3, #1]
				if(GetRegFlagState(Plantilla[logicos2],funReleDesh))	// btjt		logicos2,#funReleDesh,deshTypeAct_01
 800ac08:	4b96      	ldr	r3, [pc, #600]	@ (800ae64 <refrigera+0x368>)
 800ac0a:	225b      	movs	r2, #91	@ 0x5b
 800ac0c:	5c9b      	ldrb	r3, [r3, r2]
 800ac0e:	001a      	movs	r2, r3
 800ac10:	2308      	movs	r3, #8
 800ac12:	4013      	ands	r3, r2
 800ac14:	d104      	bne.n	800ac20 <refrigera+0x124>
					goto deshTypeAct_01;
				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 800ac16:	4b93      	ldr	r3, [pc, #588]	@ (800ae64 <refrigera+0x368>)
 800ac18:	2255      	movs	r2, #85	@ 0x55
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	5499      	strb	r1, [r3, r2]
 800ac1e:	e000      	b.n	800ac22 <refrigera+0x126>
					goto deshTypeAct_01;
 800ac20:	46c0      	nop			@ (mov r8, r8)
deshTypeAct_01:
              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800ac22:	4b97      	ldr	r3, [pc, #604]	@ (800ae80 <refrigera+0x384>)
 800ac24:	0018      	movs	r0, r3
 800ac26:	f7fb fc47 	bl	80064b8 <TwoByteInArrayToWord>
 800ac2a:	0003      	movs	r3, r0
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	4b95      	ldr	r3, [pc, #596]	@ (800ae84 <refrigera+0x388>)
 800ac30:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800ac32:	4b95      	ldr	r3, [pc, #596]	@ (800ae88 <refrigera+0x38c>)
 800ac34:	0018      	movs	r0, r3
 800ac36:	f7fb fc3f 	bl	80064b8 <TwoByteInArrayToWord>
 800ac3a:	0003      	movs	r3, r0
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	4b91      	ldr	r3, [pc, #580]	@ (800ae84 <refrigera+0x388>)
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	18d3      	adds	r3, r2, r3
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	4b91      	ldr	r3, [pc, #580]	@ (800ae8c <refrigera+0x390>)
 800ac48:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 800ac4a:	4b91      	ldr	r3, [pc, #580]	@ (800ae90 <refrigera+0x394>)
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4053      	eors	r3, r2
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d137      	bne.n	800acc8 <refrigera+0x1cc>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800ac58:	4b8e      	ldr	r3, [pc, #568]	@ (800ae94 <refrigera+0x398>)
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f7fb fc2c 	bl	80064b8 <TwoByteInArrayToWord>
 800ac60:	0003      	movs	r3, r0
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	4b87      	ldr	r3, [pc, #540]	@ (800ae84 <refrigera+0x388>)
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	18d3      	adds	r3, r2, r3
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	4b85      	ldr	r3, [pc, #532]	@ (800ae84 <refrigera+0x388>)
 800ac6e:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800ac70:	4b88      	ldr	r3, [pc, #544]	@ (800ae94 <refrigera+0x398>)
 800ac72:	0018      	movs	r0, r3
 800ac74:	f7fb fc20 	bl	80064b8 <TwoByteInArrayToWord>
 800ac78:	0003      	movs	r3, r0
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	4b83      	ldr	r3, [pc, #524]	@ (800ae8c <refrigera+0x390>)
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	18d3      	adds	r3, r2, r3
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	4b81      	ldr	r3, [pc, #516]	@ (800ae8c <refrigera+0x390>)
 800ac86:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 800ac88:	4b81      	ldr	r3, [pc, #516]	@ (800ae90 <refrigera+0x394>)
 800ac8a:	789b      	ldrb	r3, [r3, #2]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	4053      	eors	r3, r2
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d11a      	bne.n	800accc <refrigera+0x1d0>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800ac96:	4b80      	ldr	r3, [pc, #512]	@ (800ae98 <refrigera+0x39c>)
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f7fb fc0d 	bl	80064b8 <TwoByteInArrayToWord>
 800ac9e:	0003      	movs	r3, r0
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	4b78      	ldr	r3, [pc, #480]	@ (800ae84 <refrigera+0x388>)
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	18d3      	adds	r3, r2, r3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	4b76      	ldr	r3, [pc, #472]	@ (800ae84 <refrigera+0x388>)
 800acac:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800acae:	4b7a      	ldr	r3, [pc, #488]	@ (800ae98 <refrigera+0x39c>)
 800acb0:	0018      	movs	r0, r3
 800acb2:	f7fb fc01 	bl	80064b8 <TwoByteInArrayToWord>
 800acb6:	0003      	movs	r3, r0
 800acb8:	b29a      	uxth	r2, r3
 800acba:	4b74      	ldr	r3, [pc, #464]	@ (800ae8c <refrigera+0x390>)
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	18d3      	adds	r3, r2, r3
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	4b72      	ldr	r3, [pc, #456]	@ (800ae8c <refrigera+0x390>)
 800acc4:	801a      	strh	r2, [r3, #0]
 800acc6:	e002      	b.n	800acce <refrigera+0x1d2>
					goto no_ahorro1;
 800acc8:	46c0      	nop			@ (mov r8, r8)
 800acca:	e000      	b.n	800acce <refrigera+0x1d2>
					goto no_ahorro1;
 800accc:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 800acce:	4b73      	ldr	r3, [pc, #460]	@ (800ae9c <refrigera+0x3a0>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	001a      	movs	r2, r3
 800acd4:	2302      	movs	r3, #2
 800acd6:	4013      	ands	r3, r2
 800acd8:	d138      	bne.n	800ad4c <refrigera+0x250>
					goto refrigera_j04;
 800acda:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 800acdc:	f7fb fff4 	bl	8006cc8 <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800ace0:	2313      	movs	r3, #19
 800ace2:	18fb      	adds	r3, r7, r3
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	e00f      	b.n	800ad0a <refrigera+0x20e>
					if(k!=4)
 800acea:	2213      	movs	r2, #19
 800acec:	18bb      	adds	r3, r7, r2
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b04      	cmp	r3, #4
 800acf2:	d004      	beq.n	800acfe <refrigera+0x202>
						datled[k] = 0;
 800acf4:	18bb      	adds	r3, r7, r2
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	4a69      	ldr	r2, [pc, #420]	@ (800aea0 <refrigera+0x3a4>)
 800acfa:	2100      	movs	r1, #0
 800acfc:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 800acfe:	2113      	movs	r1, #19
 800ad00:	187b      	adds	r3, r7, r1
 800ad02:	781a      	ldrb	r2, [r3, #0]
 800ad04:	187b      	adds	r3, r7, r1
 800ad06:	3201      	adds	r2, #1
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	2313      	movs	r3, #19
 800ad0c:	18fb      	adds	r3, r7, r3
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b06      	cmp	r3, #6
 800ad12:	d9ea      	bls.n	800acea <refrigera+0x1ee>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 800ad14:	4b61      	ldr	r3, [pc, #388]	@ (800ae9c <refrigera+0x3a0>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	001a      	movs	r2, r3
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	d100      	bne.n	800ad22 <refrigera+0x226>
 800ad20:	e1fb      	b.n	800b11a <refrigera+0x61e>
					goto refrigera_j05;
 800ad22:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 800ad24:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 800ad26:	4b5f      	ldr	r3, [pc, #380]	@ (800aea4 <refrigera+0x3a8>)
 800ad28:	781a      	ldrb	r2, [r3, #0]
 800ad2a:	4b4f      	ldr	r3, [pc, #316]	@ (800ae68 <refrigera+0x36c>)
 800ad2c:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800ad2e:	4b4e      	ldr	r3, [pc, #312]	@ (800ae68 <refrigera+0x36c>)
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	001a      	movs	r2, r3
 800ad34:	4b5c      	ldr	r3, [pc, #368]	@ (800aea8 <refrigera+0x3ac>)
 800ad36:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 800ad38:	f7fb fc10 	bl	800655c <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800ad3c:	4b4a      	ldr	r3, [pc, #296]	@ (800ae68 <refrigera+0x36c>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <refrigera+0x24c>
 800ad44:	f000 fb98 	bl	800b478 <refrigera+0x97c>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 800ad48:	f000 fb9a 	bl	800b480 <refrigera+0x984>
				goto refrige10;
 800ad4c:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800ad4e:	f7fb fc75 	bl	800663c <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 800ad52:	4953      	ldr	r1, [pc, #332]	@ (800aea0 <refrigera+0x3a4>)
 800ad54:	4852      	ldr	r0, [pc, #328]	@ (800aea0 <refrigera+0x3a4>)
 800ad56:	2303      	movs	r3, #3
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f002 fd62 	bl	800d822 <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800ad5e:	4b53      	ldr	r3, [pc, #332]	@ (800aeac <refrigera+0x3b0>)
 800ad60:	791b      	ldrb	r3, [r3, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	4053      	eors	r3, r2
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d137      	bne.n	800addc <refrigera+0x2e0>
            cntMsgCmd = 250;
 800ad6c:	4b50      	ldr	r3, [pc, #320]	@ (800aeb0 <refrigera+0x3b4>)
 800ad6e:	22fa      	movs	r2, #250	@ 0xfa
 800ad70:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 800ad72:	4b50      	ldr	r3, [pc, #320]	@ (800aeb4 <refrigera+0x3b8>)
 800ad74:	2203      	movs	r2, #3
 800ad76:	701a      	strb	r2, [r3, #0]
            estado1[est1LockDr] ^= 0x1;
 800ad78:	4b4f      	ldr	r3, [pc, #316]	@ (800aeb8 <refrigera+0x3bc>)
 800ad7a:	799b      	ldrb	r3, [r3, #6]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	4053      	eors	r3, r2
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	1e5a      	subs	r2, r3, #1
 800ad84:	4193      	sbcs	r3, r2
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	4b4b      	ldr	r3, [pc, #300]	@ (800aeb8 <refrigera+0x3bc>)
 800ad8a:	719a      	strb	r2, [r3, #6]
            waux = reeEstado1;
 800ad8c:	4b4b      	ldr	r3, [pc, #300]	@ (800aebc <refrigera+0x3c0>)
 800ad8e:	781a      	ldrb	r2, [r3, #0]
 800ad90:	4b37      	ldr	r3, [pc, #220]	@ (800ae70 <refrigera+0x374>)
 800ad92:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 800ad94:	4b36      	ldr	r3, [pc, #216]	@ (800ae70 <refrigera+0x374>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2240      	movs	r2, #64	@ 0x40
 800ad9a:	4393      	bics	r3, r2
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	4b34      	ldr	r3, [pc, #208]	@ (800ae70 <refrigera+0x374>)
 800ada0:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 800ada2:	4b45      	ldr	r3, [pc, #276]	@ (800aeb8 <refrigera+0x3bc>)
 800ada4:	799b      	ldrb	r3, [r3, #6]
 800ada6:	2201      	movs	r2, #1
 800ada8:	4053      	eors	r3, r2
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	d107      	bne.n	800adc0 <refrigera+0x2c4>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 800adb0:	4b2f      	ldr	r3, [pc, #188]	@ (800ae70 <refrigera+0x374>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2240      	movs	r2, #64	@ 0x40
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b2d      	ldr	r3, [pc, #180]	@ (800ae70 <refrigera+0x374>)
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e000      	b.n	800adc2 <refrigera+0x2c6>
            	goto func_lock_01;
 800adc0:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 800adc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae70 <refrigera+0x374>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	001a      	movs	r2, r3
 800adc8:	4b3d      	ldr	r3, [pc, #244]	@ (800aec0 <refrigera+0x3c4>)
 800adca:	0019      	movs	r1, r3
 800adcc:	0010      	movs	r0, r2
 800adce:	f7fc fa87 	bl	80072e0 <wreeprom>
			reeEstado1 = waux;
 800add2:	4b27      	ldr	r3, [pc, #156]	@ (800ae70 <refrigera+0x374>)
 800add4:	781a      	ldrb	r2, [r3, #0]
 800add6:	4b39      	ldr	r3, [pc, #228]	@ (800aebc <refrigera+0x3c0>)
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	e000      	b.n	800adde <refrigera+0x2e2>
            	goto no_Func_Lock;
 800addc:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 800adde:	4b33      	ldr	r3, [pc, #204]	@ (800aeac <refrigera+0x3b0>)
 800ade0:	789b      	ldrb	r3, [r3, #2]
 800ade2:	2201      	movs	r2, #1
 800ade4:	4053      	eors	r3, r2
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d16b      	bne.n	800aec4 <refrigera+0x3c8>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 800adec:	4b30      	ldr	r3, [pc, #192]	@ (800aeb0 <refrigera+0x3b4>)
 800adee:	22fa      	movs	r2, #250	@ 0xfa
 800adf0:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 800adf2:	4b30      	ldr	r3, [pc, #192]	@ (800aeb4 <refrigera+0x3b8>)
 800adf4:	2202      	movs	r2, #2
 800adf6:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800adf8:	4b25      	ldr	r3, [pc, #148]	@ (800ae90 <refrigera+0x394>)
 800adfa:	799b      	ldrb	r3, [r3, #6]
 800adfc:	2201      	movs	r2, #1
 800adfe:	4053      	eors	r3, r2
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	1e5a      	subs	r2, r3, #1
 800ae04:	4193      	sbcs	r3, r2
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	4b21      	ldr	r3, [pc, #132]	@ (800ae90 <refrigera+0x394>)
 800ae0a:	719a      	strb	r2, [r3, #6]
               waux = reeEstado1;
 800ae0c:	4b2b      	ldr	r3, [pc, #172]	@ (800aebc <refrigera+0x3c0>)
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	4b17      	ldr	r3, [pc, #92]	@ (800ae70 <refrigera+0x374>)
 800ae12:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 800ae14:	4b16      	ldr	r3, [pc, #88]	@ (800ae70 <refrigera+0x374>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2204      	movs	r2, #4
 800ae1a:	4393      	bics	r3, r2
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	4b14      	ldr	r3, [pc, #80]	@ (800ae70 <refrigera+0x374>)
 800ae20:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 800ae22:	4b1b      	ldr	r3, [pc, #108]	@ (800ae90 <refrigera+0x394>)
 800ae24:	799b      	ldrb	r3, [r3, #6]
 800ae26:	2201      	movs	r2, #1
 800ae28:	4053      	eors	r3, r2
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d107      	bne.n	800ae40 <refrigera+0x344>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 800ae30:	4b0f      	ldr	r3, [pc, #60]	@ (800ae70 <refrigera+0x374>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2204      	movs	r2, #4
 800ae36:	4313      	orrs	r3, r2
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <refrigera+0x374>)
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	e000      	b.n	800ae42 <refrigera+0x346>
            	   goto refrigera_j06d;
 800ae40:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 800ae42:	4b0b      	ldr	r3, [pc, #44]	@ (800ae70 <refrigera+0x374>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	001a      	movs	r2, r3
 800ae48:	4b1d      	ldr	r3, [pc, #116]	@ (800aec0 <refrigera+0x3c4>)
 800ae4a:	0019      	movs	r1, r3
 800ae4c:	0010      	movs	r0, r2
 800ae4e:	f7fc fa47 	bl	80072e0 <wreeprom>
				reeEstado1 = waux;
 800ae52:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <refrigera+0x374>)
 800ae54:	781a      	ldrb	r2, [r3, #0]
 800ae56:	4b19      	ldr	r3, [pc, #100]	@ (800aebc <refrigera+0x3c0>)
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	e034      	b.n	800aec6 <refrigera+0x3ca>
 800ae5c:	20000c04 	.word	0x20000c04
 800ae60:	20000c40 	.word	0x20000c40
 800ae64:	200000b8 	.word	0x200000b8
 800ae68:	20000bb7 	.word	0x20000bb7
 800ae6c:	20000c84 	.word	0x20000c84
 800ae70:	20000bb6 	.word	0x20000bb6
 800ae74:	20000c86 	.word	0x20000c86
 800ae78:	20000c83 	.word	0x20000c83
 800ae7c:	20000c85 	.word	0x20000c85
 800ae80:	200000b9 	.word	0x200000b9
 800ae84:	20000c0c 	.word	0x20000c0c
 800ae88:	200000bb 	.word	0x200000bb
 800ae8c:	20000c0e 	.word	0x20000c0e
 800ae90:	20000c9c 	.word	0x20000c9c
 800ae94:	200000d3 	.word	0x200000d3
 800ae98:	200000d5 	.word	0x200000d5
 800ae9c:	20000bf8 	.word	0x20000bf8
 800aea0:	20000bf0 	.word	0x20000bf0
 800aea4:	20000bcc 	.word	0x20000bcc
 800aea8:	20000c1a 	.word	0x20000c1a
 800aeac:	20000bfc 	.word	0x20000bfc
 800aeb0:	20002158 	.word	0x20002158
 800aeb4:	20002159 	.word	0x20002159
 800aeb8:	20002138 	.word	0x20002138
 800aebc:	200001ba 	.word	0x200001ba
 800aec0:	0803f803 	.word	0x0803f803
            	   goto refrigera_j06c;
 800aec4:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800aec6:	4bd0      	ldr	r3, [pc, #832]	@ (800b208 <refrigera+0x70c>)
 800aec8:	789b      	ldrb	r3, [r3, #2]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d121      	bne.n	800af12 <refrigera+0x416>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 800aece:	4bcf      	ldr	r3, [pc, #828]	@ (800b20c <refrigera+0x710>)
 800aed0:	78db      	ldrb	r3, [r3, #3]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d11f      	bne.n	800af16 <refrigera+0x41a>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800aed6:	4bce      	ldr	r3, [pc, #824]	@ (800b210 <refrigera+0x714>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	2201      	movs	r2, #1
 800aedc:	4053      	eors	r3, r2
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d11a      	bne.n	800af1a <refrigera+0x41e>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 800aee4:	4bc8      	ldr	r3, [pc, #800]	@ (800b208 <refrigera+0x70c>)
 800aee6:	799b      	ldrb	r3, [r3, #6]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10b      	bne.n	800af04 <refrigera+0x408>
                if(retLampOff != 0){ //tnz retLampOff
 800aeec:	4bc9      	ldr	r3, [pc, #804]	@ (800b214 <refrigera+0x718>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d109      	bne.n	800af08 <refrigera+0x40c>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 800aef4:	4bc4      	ldr	r3, [pc, #784]	@ (800b208 <refrigera+0x70c>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2201      	movs	r2, #1
 800aefa:	4053      	eors	r3, r2
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10d      	bne.n	800af1e <refrigera+0x422>
refrigera_j06a:
 800af02:	e002      	b.n	800af0a <refrigera+0x40e>
                	goto refrigera_j06a;
 800af04:	46c0      	nop			@ (mov r8, r8)
 800af06:	e000      	b.n	800af0a <refrigera+0x40e>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 800af08:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 800af0a:	4bc3      	ldr	r3, [pc, #780]	@ (800b218 <refrigera+0x71c>)
 800af0c:	2201      	movs	r2, #1
 800af0e:	709a      	strb	r2, [r3, #2]
 800af10:	e006      	b.n	800af20 <refrigera+0x424>
                	goto refrigera_j06;
 800af12:	46c0      	nop			@ (mov r8, r8)
 800af14:	e004      	b.n	800af20 <refrigera+0x424>
                	goto refrigera_j06;
 800af16:	46c0      	nop			@ (mov r8, r8)
 800af18:	e002      	b.n	800af20 <refrigera+0x424>
                	goto refrigera_j06;
 800af1a:	46c0      	nop			@ (mov r8, r8)
 800af1c:	e000      	b.n	800af20 <refrigera+0x424>
                	goto refrigera_j06;
 800af1e:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 800af20:	4bbe      	ldr	r3, [pc, #760]	@ (800b21c <refrigera+0x720>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	001a      	movs	r2, r3
 800af26:	2301      	movs	r3, #1
 800af28:	4013      	ands	r3, r2
 800af2a:	d101      	bne.n	800af30 <refrigera+0x434>
 800af2c:	f000 fc16 	bl	800b75c <refrigera+0xc60>
                	goto refrigera_j07;
 800af30:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 800af32:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800af34:	49ba      	ldr	r1, [pc, #744]	@ (800b220 <refrigera+0x724>)
 800af36:	48ba      	ldr	r0, [pc, #744]	@ (800b220 <refrigera+0x724>)
 800af38:	2307      	movs	r3, #7
 800af3a:	2203      	movs	r2, #3
 800af3c:	f002 fc56 	bl	800d7ec <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 800af40:	4bb8      	ldr	r3, [pc, #736]	@ (800b224 <refrigera+0x728>)
 800af42:	2259      	movs	r2, #89	@ 0x59
 800af44:	5c9b      	ldrb	r3, [r3, r2]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d001      	beq.n	800af4e <refrigera+0x452>
 800af4a:	f000 fe40 	bl	800bbce <refrigera+0x10d2>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 800af4e:	f000 fe4e 	bl	800bbee <refrigera+0x10f2>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 800af52:	4bb5      	ldr	r3, [pc, #724]	@ (800b228 <refrigera+0x72c>)
 800af54:	2200      	movs	r2, #0
 800af56:	801a      	strh	r2, [r3, #0]
				goto finref;
 800af58:	e061      	b.n	800b01e <refrigera+0x522>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 800af5a:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 800af5c:	4bb1      	ldr	r3, [pc, #708]	@ (800b224 <refrigera+0x728>)
 800af5e:	2264      	movs	r2, #100	@ 0x64
 800af60:	5c9a      	ldrb	r2, [r3, r2]
 800af62:	4bb2      	ldr	r3, [pc, #712]	@ (800b22c <refrigera+0x730>)
 800af64:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800af66:	f7fb fcf1 	bl	800694c <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 800af6a:	4bb1      	ldr	r3, [pc, #708]	@ (800b230 <refrigera+0x734>)
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	001a      	movs	r2, r3
 800af70:	233c      	movs	r3, #60	@ 0x3c
 800af72:	4353      	muls	r3, r2
 800af74:	b29a      	uxth	r2, r3
 800af76:	4baf      	ldr	r3, [pc, #700]	@ (800b234 <refrigera+0x738>)
 800af78:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 800af7a:	4bac      	ldr	r3, [pc, #688]	@ (800b22c <refrigera+0x730>)
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	001a      	movs	r2, r3
 800af80:	233c      	movs	r3, #60	@ 0x3c
 800af82:	4353      	muls	r3, r2
 800af84:	b29a      	uxth	r2, r3
 800af86:	4bac      	ldr	r3, [pc, #688]	@ (800b238 <refrigera+0x73c>)
 800af88:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 800af8a:	f7fb fb37 	bl	80065fc <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 800af8e:	4ba3      	ldr	r3, [pc, #652]	@ (800b21c <refrigera+0x720>)
 800af90:	2202      	movs	r2, #2
 800af92:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 800af94:	e040      	b.n	800b018 <refrigera+0x51c>
				retvent = 20;
 800af96:	4ba9      	ldr	r3, [pc, #676]	@ (800b23c <refrigera+0x740>)
 800af98:	2214      	movs	r2, #20
 800af9a:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 800af9c:	4ba8      	ldr	r3, [pc, #672]	@ (800b240 <refrigera+0x744>)
 800af9e:	2232      	movs	r2, #50	@ 0x32
 800afa0:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 800afa2:	4b9e      	ldr	r3, [pc, #632]	@ (800b21c <refrigera+0x720>)
 800afa4:	2202      	movs	r2, #2
 800afa6:	701a      	strb	r2, [r3, #0]
				goto todh20;
 800afa8:	e036      	b.n	800b018 <refrigera+0x51c>
                  goto todh; //jp todh
 800afaa:	46c0      	nop			@ (mov r8, r8)
 800afac:	e000      	b.n	800afb0 <refrigera+0x4b4>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 800afae:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 800afb0:	4ba4      	ldr	r3, [pc, #656]	@ (800b244 <refrigera+0x748>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 800afb6:	f7fb faaf 	bl	8006518 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 800afba:	4b9a      	ldr	r3, [pc, #616]	@ (800b224 <refrigera+0x728>)
 800afbc:	2247      	movs	r2, #71	@ 0x47
 800afbe:	5c9a      	ldrb	r2, [r3, r2]
 800afc0:	4b9a      	ldr	r3, [pc, #616]	@ (800b22c <refrigera+0x730>)
 800afc2:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 800afc4:	4b97      	ldr	r3, [pc, #604]	@ (800b224 <refrigera+0x728>)
 800afc6:	2255      	movs	r2, #85	@ 0x55
 800afc8:	5c9b      	ldrb	r3, [r3, r2]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d102      	bne.n	800afd4 <refrigera+0x4d8>
				BaBentre10_math();					//call BaBentre10_math
 800afce:	f7fb fcbd 	bl	800694c <BaBentre10_math>
				goto todh2;
 800afd2:	e014      	b.n	800affe <refrigera+0x502>
					goto todh1;
 800afd4:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 800afd6:	4b95      	ldr	r3, [pc, #596]	@ (800b22c <refrigera+0x730>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	001a      	movs	r2, r3
 800afdc:	233c      	movs	r3, #60	@ 0x3c
 800afde:	4353      	muls	r3, r2
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	4b99      	ldr	r3, [pc, #612]	@ (800b248 <refrigera+0x74c>)
 800afe4:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800afe6:	4b98      	ldr	r3, [pc, #608]	@ (800b248 <refrigera+0x74c>)
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	0a1b      	lsrs	r3, r3, #8
 800afec:	b29b      	uxth	r3, r3
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	4b96      	ldr	r3, [pc, #600]	@ (800b24c <refrigera+0x750>)
 800aff2:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800aff4:	4b94      	ldr	r3, [pc, #592]	@ (800b248 <refrigera+0x74c>)
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	4b95      	ldr	r3, [pc, #596]	@ (800b250 <refrigera+0x754>)
 800affc:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 800affe:	4b93      	ldr	r3, [pc, #588]	@ (800b24c <refrigera+0x750>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	b29b      	uxth	r3, r3
 800b006:	4a92      	ldr	r2, [pc, #584]	@ (800b250 <refrigera+0x754>)
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	189b      	adds	r3, r3, r2
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	4b91      	ldr	r3, [pc, #580]	@ (800b254 <refrigera+0x758>)
 800b010:	801a      	strh	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800b012:	4b82      	ldr	r3, [pc, #520]	@ (800b21c <refrigera+0x720>)
 800b014:	2203      	movs	r2, #3
 800b016:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 800b018:	4b8f      	ldr	r3, [pc, #572]	@ (800b258 <refrigera+0x75c>)
 800b01a:	2204      	movs	r2, #4
 800b01c:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 800b01e:	4b7e      	ldr	r3, [pc, #504]	@ (800b218 <refrigera+0x71c>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d103      	bne.n	800b02e <refrigera+0x532>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 800b026:	4b7e      	ldr	r3, [pc, #504]	@ (800b220 <refrigera+0x724>)
 800b028:	2200      	movs	r2, #0
 800b02a:	709a      	strb	r2, [r3, #2]
 800b02c:	e000      	b.n	800b030 <refrigera+0x534>
                	goto refrigera_j11;
 800b02e:	46c0      	nop			@ (mov r8, r8)
				estado1_Aux = reeEstado1;
 800b030:	1dfb      	adds	r3, r7, #7
 800b032:	4a8a      	ldr	r2, [pc, #552]	@ (800b25c <refrigera+0x760>)
 800b034:	7812      	ldrb	r2, [r2, #0]
 800b036:	701a      	strb	r2, [r3, #0]
                if(!GetRegFlagState(estado1_Aux,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800b038:	1dfb      	adds	r3, r7, #7
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2240      	movs	r2, #64	@ 0x40
 800b03e:	4013      	ands	r3, r2
 800b040:	d003      	beq.n	800b04a <refrigera+0x54e>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 800b042:	4b75      	ldr	r3, [pc, #468]	@ (800b218 <refrigera+0x71c>)
 800b044:	2201      	movs	r2, #1
 800b046:	705a      	strb	r2, [r3, #1]
 800b048:	e000      	b.n	800b04c <refrigera+0x550>
                	goto refrigeraLockDrOFF;
 800b04a:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 800b04c:	4b84      	ldr	r3, [pc, #528]	@ (800b260 <refrigera+0x764>)
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00f      	beq.n	800b074 <refrigera+0x578>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 800b054:	4b70      	ldr	r3, [pc, #448]	@ (800b218 <refrigera+0x71c>)
 800b056:	2200      	movs	r2, #0
 800b058:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800b05a:	4b6f      	ldr	r3, [pc, #444]	@ (800b218 <refrigera+0x71c>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 800b060:	4b80      	ldr	r3, [pc, #512]	@ (800b264 <refrigera+0x768>)
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800b066:	496e      	ldr	r1, [pc, #440]	@ (800b220 <refrigera+0x724>)
 800b068:	486d      	ldr	r0, [pc, #436]	@ (800b220 <refrigera+0x724>)
 800b06a:	2307      	movs	r3, #7
 800b06c:	2202      	movs	r2, #2
 800b06e:	f002 fbd8 	bl	800d822 <Bclear_Clear_trfst>
               goto endNoct;
 800b072:	e01b      	b.n	800b0ac <refrigera+0x5b0>
            	   goto endNocturno;
 800b074:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800b076:	4b65      	ldr	r3, [pc, #404]	@ (800b20c <refrigera+0x710>)
 800b078:	78db      	ldrb	r3, [r3, #3]
 800b07a:	2201      	movs	r2, #1
 800b07c:	4053      	eors	r3, r2
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d112      	bne.n	800b0aa <refrigera+0x5ae>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 800b084:	4961      	ldr	r1, [pc, #388]	@ (800b20c <refrigera+0x710>)
 800b086:	4862      	ldr	r0, [pc, #392]	@ (800b210 <refrigera+0x714>)
 800b088:	2303      	movs	r3, #3
 800b08a:	2200      	movs	r2, #0
 800b08c:	f002 fbae 	bl	800d7ec <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 800b090:	4963      	ldr	r1, [pc, #396]	@ (800b220 <refrigera+0x724>)
 800b092:	485d      	ldr	r0, [pc, #372]	@ (800b208 <refrigera+0x70c>)
 800b094:	2304      	movs	r3, #4
 800b096:	2201      	movs	r2, #1
 800b098:	f002 fba8 	bl	800d7ec <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 800b09c:	4b72      	ldr	r3, [pc, #456]	@ (800b268 <refrigera+0x76c>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 800b0a2:	4b72      	ldr	r3, [pc, #456]	@ (800b26c <refrigera+0x770>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	801a      	strh	r2, [r3, #0]
 800b0a8:	e000      	b.n	800b0ac <refrigera+0x5b0>
            	  goto endNoct;
 800b0aa:	46c0      	nop			@ (mov r8, r8)
			estado1_Aux = reeEstado1;
 800b0ac:	1dfb      	adds	r3, r7, #7
 800b0ae:	4a6b      	ldr	r2, [pc, #428]	@ (800b25c <refrigera+0x760>)
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	701a      	strb	r2, [r3, #0]
			if(GetRegFlagState (estado1_Aux, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 800b0b4:	1dfb      	adds	r3, r7, #7
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	d118      	bne.n	800b0f0 <refrigera+0x5f4>
refriOFF:
 800b0be:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 800b0c0:	f000 fe08 	bl	800bcd4 <st_refri>
           for(uint8_t k=0; k<8; k++){
 800b0c4:	2312      	movs	r3, #18
 800b0c6:	18fb      	adds	r3, r7, r3
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	e00a      	b.n	800b0e4 <refrigera+0x5e8>
        	   datled[k] = 0;
 800b0ce:	2012      	movs	r0, #18
 800b0d0:	183b      	adds	r3, r7, r0
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	4a52      	ldr	r2, [pc, #328]	@ (800b220 <refrigera+0x724>)
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 800b0da:	183b      	adds	r3, r7, r0
 800b0dc:	781a      	ldrb	r2, [r3, #0]
 800b0de:	183b      	adds	r3, r7, r0
 800b0e0:	3201      	adds	r2, #1
 800b0e2:	701a      	strb	r2, [r3, #0]
 800b0e4:	2312      	movs	r3, #18
 800b0e6:	18fb      	adds	r3, r7, r3
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b07      	cmp	r3, #7
 800b0ec:	d9ef      	bls.n	800b0ce <refrigera+0x5d2>
refriON:
 800b0ee:	e000      	b.n	800b0f2 <refrigera+0x5f6>
            	 goto refriON;
 800b0f0:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 800b0f2:	4b5f      	ldr	r3, [pc, #380]	@ (800b270 <refrigera+0x774>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4053      	eors	r3, r2
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d109      	bne.n	800b114 <refrigera+0x618>
         st_refri();
 800b100:	f000 fde8 	bl	800bcd4 <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 800b104:	4b5b      	ldr	r3, [pc, #364]	@ (800b274 <refrigera+0x778>)
 800b106:	2201      	movs	r2, #1
 800b108:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 800b10a:	4b3f      	ldr	r3, [pc, #252]	@ (800b208 <refrigera+0x70c>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800b110:	f000 fda2 	bl	800bc58 <refrigera+0x115c>
        	 goto ac_OK;
 800b114:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 800b116:	f000 fd9f 	bl	800bc58 <refrigera+0x115c>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 800b11a:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800b11c:	4b56      	ldr	r3, [pc, #344]	@ (800b278 <refrigera+0x77c>)
 800b11e:	2200      	movs	r2, #0
 800b120:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 800b122:	f7fb f9df 	bl	80064e4 <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 800b126:	f7fb f9e5 	bl	80064f4 <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 800b12a:	4954      	ldr	r1, [pc, #336]	@ (800b27c <refrigera+0x780>)
 800b12c:	4853      	ldr	r0, [pc, #332]	@ (800b27c <refrigera+0x780>)
 800b12e:	2307      	movs	r3, #7
 800b130:	2206      	movs	r2, #6
 800b132:	f002 fb76 	bl	800d822 <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 800b136:	4b52      	ldr	r3, [pc, #328]	@ (800b280 <refrigera+0x784>)
 800b138:	2202      	movs	r2, #2
 800b13a:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800b13c:	4b3b      	ldr	r3, [pc, #236]	@ (800b22c <refrigera+0x730>)
 800b13e:	2205      	movs	r2, #5
 800b140:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 800b142:	4b4d      	ldr	r3, [pc, #308]	@ (800b278 <refrigera+0x77c>)
 800b144:	799b      	ldrb	r3, [r3, #6]
 800b146:	2201      	movs	r2, #1
 800b148:	4053      	eors	r3, r2
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d103      	bne.n	800b158 <refrigera+0x65c>
          wreg = 0x01;
 800b150:	4b36      	ldr	r3, [pc, #216]	@ (800b22c <refrigera+0x730>)
 800b152:	2201      	movs	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	e000      	b.n	800b15a <refrigera+0x65e>
        	  goto no_change_time;
 800b158:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 800b15a:	4b34      	ldr	r3, [pc, #208]	@ (800b22c <refrigera+0x730>)
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	4b37      	ldr	r3, [pc, #220]	@ (800b23c <refrigera+0x740>)
 800b160:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 800b162:	4b32      	ldr	r3, [pc, #200]	@ (800b22c <refrigera+0x730>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	001a      	movs	r2, r3
 800b168:	4b46      	ldr	r3, [pc, #280]	@ (800b284 <refrigera+0x788>)
 800b16a:	801a      	strh	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 800b16c:	f7fb f9f6 	bl	800655c <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800b170:	4b2d      	ldr	r3, [pc, #180]	@ (800b228 <refrigera+0x72c>)
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	2b63      	cmp	r3, #99	@ 0x63
 800b176:	d929      	bls.n	800b1cc <refrigera+0x6d0>
			if(cntblkh <= 250){
 800b178:	4b2b      	ldr	r3, [pc, #172]	@ (800b228 <refrigera+0x72c>)
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	2bfa      	cmp	r3, #250	@ 0xfa
 800b17e:	d92d      	bls.n	800b1dc <refrigera+0x6e0>
			if(cntblkh < 300){
 800b180:	4b29      	ldr	r3, [pc, #164]	@ (800b228 <refrigera+0x72c>)
 800b182:	881a      	ldrh	r2, [r3, #0]
 800b184:	2396      	movs	r3, #150	@ 0x96
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	429a      	cmp	r2, r3
 800b18a:	d321      	bcc.n	800b1d0 <refrigera+0x6d4>
			if(cntblkh < 450){
 800b18c:	4b26      	ldr	r3, [pc, #152]	@ (800b228 <refrigera+0x72c>)
 800b18e:	881a      	ldrh	r2, [r3, #0]
 800b190:	23e1      	movs	r3, #225	@ 0xe1
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	429a      	cmp	r2, r3
 800b196:	d200      	bcs.n	800b19a <refrigera+0x69e>
 800b198:	e08d      	b.n	800b2b6 <refrigera+0x7ba>
			if(cntblkh < 500){
 800b19a:	4b23      	ldr	r3, [pc, #140]	@ (800b228 <refrigera+0x72c>)
 800b19c:	881a      	ldrh	r2, [r3, #0]
 800b19e:	23fa      	movs	r3, #250	@ 0xfa
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d316      	bcc.n	800b1d4 <refrigera+0x6d8>
			if(cntblkh < 650){
 800b1a6:	4b20      	ldr	r3, [pc, #128]	@ (800b228 <refrigera+0x72c>)
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	4a37      	ldr	r2, [pc, #220]	@ (800b288 <refrigera+0x78c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d800      	bhi.n	800b1b2 <refrigera+0x6b6>
 800b1b0:	e0d8      	b.n	800b364 <refrigera+0x868>
			if(cntblkh < 700){
 800b1b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b228 <refrigera+0x72c>)
 800b1b4:	881a      	ldrh	r2, [r3, #0]
 800b1b6:	23af      	movs	r3, #175	@ 0xaf
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d30c      	bcc.n	800b1d8 <refrigera+0x6dc>
			if(cntblkh < 850){
 800b1be:	4b1a      	ldr	r3, [pc, #104]	@ (800b228 <refrigera+0x72c>)
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	4a32      	ldr	r2, [pc, #200]	@ (800b28c <refrigera+0x790>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d800      	bhi.n	800b1ca <refrigera+0x6ce>
 800b1c8:	e0ea      	b.n	800b3a0 <refrigera+0x8a4>
indi_off:
 800b1ca:	e006      	b.n	800b1da <refrigera+0x6de>
				goto indi_off; //jrult	indi_off
 800b1cc:	46c0      	nop			@ (mov r8, r8)
 800b1ce:	e105      	b.n	800b3dc <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b1d0:	46c0      	nop			@ (mov r8, r8)
 800b1d2:	e103      	b.n	800b3dc <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b1d4:	46c0      	nop			@ (mov r8, r8)
 800b1d6:	e101      	b.n	800b3dc <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b1d8:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 800b1da:	e0ff      	b.n	800b3dc <refrigera+0x8e0>
				goto Indi_int; //jrule	Indi_int
 800b1dc:	46c0      	nop			@ (mov r8, r8)
			soloent (reePlantilla[interdh]);
 800b1de:	4b2c      	ldr	r3, [pc, #176]	@ (800b290 <refrigera+0x794>)
 800b1e0:	2246      	movs	r2, #70	@ 0x46
 800b1e2:	5c9b      	ldrb	r3, [r3, r2]
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f7fb fb7f 	bl	80068e8 <soloent>
			op_menu (reePlantilla[eeD1_Msg1] , reePlantilla[eeD2_Msg1]);
 800b1ea:	4b29      	ldr	r3, [pc, #164]	@ (800b290 <refrigera+0x794>)
 800b1ec:	225f      	movs	r2, #95	@ 0x5f
 800b1ee:	5c9a      	ldrb	r2, [r3, r2]
 800b1f0:	4b27      	ldr	r3, [pc, #156]	@ (800b290 <refrigera+0x794>)
 800b1f2:	2160      	movs	r1, #96	@ 0x60
 800b1f4:	5c5b      	ldrb	r3, [r3, r1]
 800b1f6:	0019      	movs	r1, r3
 800b1f8:	0010      	movs	r0, r2
 800b1fa:	f7fc f885 	bl	8007308 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b1fe:	2311      	movs	r3, #17
 800b200:	18fb      	adds	r3, r7, r3
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	e050      	b.n	800b2aa <refrigera+0x7ae>
 800b208:	20000c9c 	.word	0x20000c9c
 800b20c:	20000bd8 	.word	0x20000bd8
 800b210:	20000c48 	.word	0x20000c48
 800b214:	2000215a 	.word	0x2000215a
 800b218:	20000c04 	.word	0x20000c04
 800b21c:	20000bf8 	.word	0x20000bf8
 800b220:	20000bf0 	.word	0x20000bf0
 800b224:	200000b8 	.word	0x200000b8
 800b228:	20000bb0 	.word	0x20000bb0
 800b22c:	20000bb7 	.word	0x20000bb7
 800b230:	20000bb6 	.word	0x20000bb6
 800b234:	20000c5a 	.word	0x20000c5a
 800b238:	20000c5c 	.word	0x20000c5c
 800b23c:	20000bca 	.word	0x20000bca
 800b240:	20000bc2 	.word	0x20000bc2
 800b244:	20000bcd 	.word	0x20000bcd
 800b248:	20000936 	.word	0x20000936
 800b24c:	20000bab 	.word	0x20000bab
 800b250:	20000bac 	.word	0x20000bac
 800b254:	20000c18 	.word	0x20000c18
 800b258:	20000bcb 	.word	0x20000bcb
 800b25c:	200001ba 	.word	0x200001ba
 800b260:	20000ca4 	.word	0x20000ca4
 800b264:	20000c40 	.word	0x20000c40
 800b268:	20000c90 	.word	0x20000c90
 800b26c:	20000c92 	.word	0x20000c92
 800b270:	2000219c 	.word	0x2000219c
 800b274:	20001fdc 	.word	0x20001fdc
 800b278:	20000c38 	.word	0x20000c38
 800b27c:	20000be8 	.word	0x20000be8
 800b280:	20000bce 	.word	0x20000bce
 800b284:	20000c16 	.word	0x20000c16
 800b288:	00000289 	.word	0x00000289
 800b28c:	00000351 	.word	0x00000351
 800b290:	20000cec 	.word	0x20000cec
            	 datled[k] = 0;
 800b294:	2011      	movs	r0, #17
 800b296:	183b      	adds	r3, r7, r0
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	4ac0      	ldr	r2, [pc, #768]	@ (800b59c <refrigera+0xaa0>)
 800b29c:	2100      	movs	r1, #0
 800b29e:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b2a0:	183b      	adds	r3, r7, r0
 800b2a2:	781a      	ldrb	r2, [r3, #0]
 800b2a4:	183b      	adds	r3, r7, r0
 800b2a6:	3201      	adds	r2, #1
 800b2a8:	701a      	strb	r2, [r3, #0]
 800b2aa:	2311      	movs	r3, #17
 800b2ac:	18fb      	adds	r3, r7, r3
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b07      	cmp	r3, #7
 800b2b2:	d9ef      	bls.n	800b294 <refrigera+0x798>
             goto defindi;
 800b2b4:	e092      	b.n	800b3dc <refrigera+0x8e0>
				goto Indi_time;//rult Indi_time
 800b2b6:	46c0      	nop			@ (mov r8, r8)
            if(reePlantilla[dhmode] != 1){
 800b2b8:	4bb9      	ldr	r3, [pc, #740]	@ (800b5a0 <refrigera+0xaa4>)
 800b2ba:	2255      	movs	r2, #85	@ 0x55
 800b2bc:	5c9b      	ldrb	r3, [r3, r2]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d109      	bne.n	800b2d6 <refrigera+0x7da>
            soloent( reePlantilla[timedh] );
 800b2c2:	4bb7      	ldr	r3, [pc, #732]	@ (800b5a0 <refrigera+0xaa4>)
 800b2c4:	2247      	movs	r2, #71	@ 0x47
 800b2c6:	5c9b      	ldrb	r3, [r3, r2]
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f7fb fb0d 	bl	80068e8 <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 800b2ce:	4bb3      	ldr	r3, [pc, #716]	@ (800b59c <refrigera+0xaa0>)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800b2d4:	e082      	b.n	800b3dc <refrigera+0x8e0>
				goto indica45;
 800b2d6:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800b2d8:	4bb2      	ldr	r3, [pc, #712]	@ (800b5a4 <refrigera+0xaa8>)
 800b2da:	2247      	movs	r2, #71	@ 0x47
 800b2dc:	5c9b      	ldrb	r3, [r3, r2]
 800b2de:	0018      	movs	r0, r3
 800b2e0:	f7fb facc 	bl	800687c <convad10>
            if(reePlantilla[eeprotype]){
 800b2e4:	4bae      	ldr	r3, [pc, #696]	@ (800b5a0 <refrigera+0xaa4>)
 800b2e6:	2257      	movs	r2, #87	@ 0x57
 800b2e8:	5c9b      	ldrb	r3, [r3, r2]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10c      	bne.n	800b308 <refrigera+0x80c>
            if(reePlantilla[eeprotype] == 2){
 800b2ee:	4bac      	ldr	r3, [pc, #688]	@ (800b5a0 <refrigera+0xaa4>)
 800b2f0:	2257      	movs	r2, #87	@ 0x57
 800b2f2:	5c9b      	ldrb	r3, [r3, r2]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d00f      	beq.n	800b318 <refrigera+0x81c>
indica_na:
 800b2f8:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800b2fa:	4bab      	ldr	r3, [pc, #684]	@ (800b5a8 <refrigera+0xaac>)
 800b2fc:	2226      	movs	r2, #38	@ 0x26
 800b2fe:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 800b300:	4baa      	ldr	r3, [pc, #680]	@ (800b5ac <refrigera+0xab0>)
 800b302:	2226      	movs	r2, #38	@ 0x26
 800b304:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800b306:	e00f      	b.n	800b328 <refrigera+0x82c>
            	goto indica_110v; //jreq indica_110v
 800b308:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800b30a:	4ba7      	ldr	r3, [pc, #668]	@ (800b5a8 <refrigera+0xaac>)
 800b30c:	221f      	movs	r2, #31
 800b30e:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 800b310:	4ba6      	ldr	r3, [pc, #664]	@ (800b5ac <refrigera+0xab0>)
 800b312:	220b      	movs	r2, #11
 800b314:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800b316:	e007      	b.n	800b328 <refrigera+0x82c>
            	goto indica_220v; //jreq indica_220v
 800b318:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800b31a:	4ba3      	ldr	r3, [pc, #652]	@ (800b5a8 <refrigera+0xaac>)
 800b31c:	221f      	movs	r2, #31
 800b31e:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 800b320:	4ba2      	ldr	r3, [pc, #648]	@ (800b5ac <refrigera+0xab0>)
 800b322:	220a      	movs	r2, #10
 800b324:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800b326:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800b328:	4b9f      	ldr	r3, [pc, #636]	@ (800b5a8 <refrigera+0xaac>)
 800b32a:	781a      	ldrb	r2, [r3, #0]
 800b32c:	4b9f      	ldr	r3, [pc, #636]	@ (800b5ac <refrigera+0xab0>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	0019      	movs	r1, r3
 800b332:	0010      	movs	r0, r2
 800b334:	f7fb ffe8 	bl	8007308 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b338:	2310      	movs	r3, #16
 800b33a:	18fb      	adds	r3, r7, r3
 800b33c:	2200      	movs	r2, #0
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	e00a      	b.n	800b358 <refrigera+0x85c>
            	 datled[k] = 0;
 800b342:	2010      	movs	r0, #16
 800b344:	183b      	adds	r3, r7, r0
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4a94      	ldr	r2, [pc, #592]	@ (800b59c <refrigera+0xaa0>)
 800b34a:	2100      	movs	r1, #0
 800b34c:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b34e:	183b      	adds	r3, r7, r0
 800b350:	781a      	ldrb	r2, [r3, #0]
 800b352:	183b      	adds	r3, r7, r0
 800b354:	3201      	adds	r2, #1
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	2310      	movs	r3, #16
 800b35a:	18fb      	adds	r3, r7, r3
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b07      	cmp	r3, #7
 800b360:	d9ef      	bls.n	800b342 <refrigera+0x846>
             goto defindi;
 800b362:	e03b      	b.n	800b3dc <refrigera+0x8e0>
				goto Indi_sp; //rult Indi_sp
 800b364:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 800b366:	f7fb f923 	bl	80065b0 <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800b36a:	4b91      	ldr	r3, [pc, #580]	@ (800b5b0 <refrigera+0xab4>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	0018      	movs	r0, r3
 800b370:	f7fb faba 	bl	80068e8 <soloent>
			for(uint8_t k=0; k<8; k++){
 800b374:	230f      	movs	r3, #15
 800b376:	18fb      	adds	r3, r7, r3
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e00a      	b.n	800b394 <refrigera+0x898>
				datled[k] = 0;
 800b37e:	200f      	movs	r0, #15
 800b380:	183b      	adds	r3, r7, r0
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	4a85      	ldr	r2, [pc, #532]	@ (800b59c <refrigera+0xaa0>)
 800b386:	2100      	movs	r1, #0
 800b388:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 800b38a:	183b      	adds	r3, r7, r0
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	183b      	adds	r3, r7, r0
 800b390:	3201      	adds	r2, #1
 800b392:	701a      	strb	r2, [r3, #0]
 800b394:	230f      	movs	r3, #15
 800b396:	18fb      	adds	r3, r7, r3
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b07      	cmp	r3, #7
 800b39c:	d9ef      	bls.n	800b37e <refrigera+0x882>
			goto defindi;
 800b39e:	e01d      	b.n	800b3dc <refrigera+0x8e0>
				goto Indi_dif; //rult Indi_dif
 800b3a0:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 800b3a2:	f7fb f911 	bl	80065c8 <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 800b3a6:	4b83      	ldr	r3, [pc, #524]	@ (800b5b4 <refrigera+0xab8>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	0018      	movs	r0, r3
 800b3ac:	f7fb fa9c 	bl	80068e8 <soloent>
            for(uint8_t k=0; k<8; k++){
 800b3b0:	230e      	movs	r3, #14
 800b3b2:	18fb      	adds	r3, r7, r3
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e00a      	b.n	800b3d0 <refrigera+0x8d4>
            	datled[k] = 0;
 800b3ba:	200e      	movs	r0, #14
 800b3bc:	183b      	adds	r3, r7, r0
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	4a76      	ldr	r2, [pc, #472]	@ (800b59c <refrigera+0xaa0>)
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 800b3c6:	183b      	adds	r3, r7, r0
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	183b      	adds	r3, r7, r0
 800b3cc:	3201      	adds	r2, #1
 800b3ce:	701a      	strb	r2, [r3, #0]
 800b3d0:	230e      	movs	r3, #14
 800b3d2:	18fb      	adds	r3, r7, r3
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	d9ef      	bls.n	800b3ba <refrigera+0x8be>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	f7fb fe8c 	bl	80070f8 <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 800b3e0:	4b75      	ldr	r3, [pc, #468]	@ (800b5b8 <refrigera+0xabc>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	b25b      	sxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	db2a      	blt.n	800b440 <refrigera+0x944>
        	   goto indica_j00;
 800b3ea:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 800b3ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b5a4 <refrigera+0xaa8>)
 800b3ee:	2259      	movs	r2, #89	@ 0x59
 800b3f0:	5c9b      	ldrb	r3, [r3, r2]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d104      	bne.n	800b400 <refrigera+0x904>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b3f6:	4b71      	ldr	r3, [pc, #452]	@ (800b5bc <refrigera+0xac0>)
 800b3f8:	791b      	ldrb	r3, [r3, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d01c      	beq.n	800b438 <refrigera+0x93c>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b3fe:	e018      	b.n	800b432 <refrigera+0x936>
            	goto indica_j00b;
 800b400:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 800b402:	4b6f      	ldr	r3, [pc, #444]	@ (800b5c0 <refrigera+0xac4>)
 800b404:	78db      	ldrb	r3, [r3, #3]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10e      	bne.n	800b428 <refrigera+0x92c>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800b40a:	4b6d      	ldr	r3, [pc, #436]	@ (800b5c0 <refrigera+0xac4>)
 800b40c:	789b      	ldrb	r3, [r3, #2]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10c      	bne.n	800b42c <refrigera+0x930>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 800b412:	4b6a      	ldr	r3, [pc, #424]	@ (800b5bc <refrigera+0xac0>)
 800b414:	791b      	ldrb	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <refrigera+0x934>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800b41a:	4b67      	ldr	r3, [pc, #412]	@ (800b5b8 <refrigera+0xabc>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	001a      	movs	r2, r3
 800b420:	2310      	movs	r3, #16
 800b422:	4013      	ands	r3, r2
 800b424:	d00a      	beq.n	800b43c <refrigera+0x940>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b426:	e004      	b.n	800b432 <refrigera+0x936>
            	 goto indica_j01;
 800b428:	46c0      	nop			@ (mov r8, r8)
 800b42a:	e002      	b.n	800b432 <refrigera+0x936>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 800b42c:	46c0      	nop			@ (mov r8, r8)
 800b42e:	e000      	b.n	800b432 <refrigera+0x936>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 800b430:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b432:	f7fb f871 	bl	8006518 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b436:	e5ae      	b.n	800af96 <refrigera+0x49a>
            goto indica_j02;
 800b438:	46c0      	nop			@ (mov r8, r8)
 800b43a:	e5ac      	b.n	800af96 <refrigera+0x49a>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 800b43c:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b43e:	e5aa      	b.n	800af96 <refrigera+0x49a>
           goto defind10;				/// No, pregunta por otro modo
 800b440:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 800b442:	4b60      	ldr	r3, [pc, #384]	@ (800b5c4 <refrigera+0xac8>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d112      	bne.n	800b470 <refrigera+0x974>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800b44a:	4b5d      	ldr	r3, [pc, #372]	@ (800b5c0 <refrigera+0xac4>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d010      	beq.n	800b474 <refrigera+0x978>
            	 goto indica_j04;
 800b452:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 800b454:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800b456:	4b5c      	ldr	r3, [pc, #368]	@ (800b5c8 <refrigera+0xacc>)
 800b458:	2211      	movs	r2, #17
 800b45a:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 800b45c:	4b5b      	ldr	r3, [pc, #364]	@ (800b5cc <refrigera+0xad0>)
 800b45e:	2208      	movs	r2, #8
 800b460:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 800b462:	4b5b      	ldr	r3, [pc, #364]	@ (800b5d0 <refrigera+0xad4>)
 800b464:	2201      	movs	r2, #1
 800b466:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800b468:	4b5a      	ldr	r3, [pc, #360]	@ (800b5d4 <refrigera+0xad8>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e570      	b.n	800af52 <refrigera+0x456>
            	 goto finindi;
 800b470:	46c0      	nop			@ (mov r8, r8)
 800b472:	e5d4      	b.n	800b01e <refrigera+0x522>
             goto finindi;
 800b474:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800b476:	e5d2      	b.n	800b01e <refrigera+0x522>
            fauto[7] = 1;						//bset		fauto,#7
 800b478:	4b57      	ldr	r3, [pc, #348]	@ (800b5d8 <refrigera+0xadc>)
 800b47a:	2201      	movs	r2, #1
 800b47c:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 800b47e:	e156      	b.n	800b72e <refrigera+0xc32>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 800b480:	4b55      	ldr	r3, [pc, #340]	@ (800b5d8 <refrigera+0xadc>)
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d150      	bne.n	800b52a <refrigera+0xa2e>
			wreg = num_ver;			//;		/ Versión del Firmware
 800b488:	4b47      	ldr	r3, [pc, #284]	@ (800b5a8 <refrigera+0xaac>)
 800b48a:	2205      	movs	r2, #5
 800b48c:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 800b48e:	f7fb fa49 	bl	8006924 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 800b492:	4b42      	ldr	r3, [pc, #264]	@ (800b59c <refrigera+0xaa0>)
 800b494:	2201      	movs	r2, #1
 800b496:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 800b498:	4b4f      	ldr	r3, [pc, #316]	@ (800b5d8 <refrigera+0xadc>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 800b49e:	4b4a      	ldr	r3, [pc, #296]	@ (800b5c8 <refrigera+0xacc>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d90c      	bls.n	800b4c0 <refrigera+0x9c4>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 800b4a6:	4b4d      	ldr	r3, [pc, #308]	@ (800b5dc <refrigera+0xae0>)
 800b4a8:	2110      	movs	r1, #16
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f009 f854 	bl	8014558 <HAL_GPIO_ReadPin>
 800b4b0:	1e03      	subs	r3, r0, #0
 800b4b2:	d003      	beq.n	800b4bc <refrigera+0x9c0>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 800b4b4:	4b42      	ldr	r3, [pc, #264]	@ (800b5c0 <refrigera+0xac4>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 800b4ba:	e020      	b.n	800b4fe <refrigera+0xa02>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 800b4bc:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 800b4be:	e136      	b.n	800b72e <refrigera+0xc32>
        	   goto door_det; //jrule door_det
 800b4c0:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 800b4c2:	4b41      	ldr	r3, [pc, #260]	@ (800b5c8 <refrigera+0xacc>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b0d      	cmp	r3, #13
 800b4c8:	d915      	bls.n	800b4f6 <refrigera+0x9fa>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 800b4ca:	4b34      	ldr	r3, [pc, #208]	@ (800b59c <refrigera+0xaa0>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 800b4d0:	4b42      	ldr	r3, [pc, #264]	@ (800b5dc <refrigera+0xae0>)
 800b4d2:	2110      	movs	r1, #16
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f009 f83f 	bl	8014558 <HAL_GPIO_ReadPin>
 800b4da:	1e03      	subs	r3, r0, #0
 800b4dc:	d009      	beq.n	800b4f2 <refrigera+0x9f6>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 800b4de:	4b3e      	ldr	r3, [pc, #248]	@ (800b5d8 <refrigera+0xadc>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 800b4e4:	4b2d      	ldr	r3, [pc, #180]	@ (800b59c <refrigera+0xaa0>)
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 800b4ea:	4b3d      	ldr	r3, [pc, #244]	@ (800b5e0 <refrigera+0xae4>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	705a      	strb	r2, [r3, #1]
			goto defap;
 800b4f0:	e11d      	b.n	800b72e <refrigera+0xc32>
            	goto no_det_door;				//	¿La puerta está abierta?
 800b4f2:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 800b4f4:	e11b      	b.n	800b72e <refrigera+0xc32>
            	goto do_sec;
 800b4f6:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800b4f8:	4b37      	ldr	r3, [pc, #220]	@ (800b5d8 <refrigera+0xadc>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 800b4fe:	2300      	movs	r3, #0
 800b500:	60bb      	str	r3, [r7, #8]
 800b502:	e00e      	b.n	800b522 <refrigera+0xa26>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 800b504:	4a2e      	ldr	r2, [pc, #184]	@ (800b5c0 <refrigera+0xac4>)
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	18d3      	adds	r3, r2, r3
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10e      	bne.n	800b52e <refrigera+0xa32>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 800b510:	4a34      	ldr	r2, [pc, #208]	@ (800b5e4 <refrigera+0xae8>)
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	18d3      	adds	r3, r2, r3
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10a      	bne.n	800b532 <refrigera+0xa36>
			for(int k=0;k<8;k++){
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3301      	adds	r3, #1
 800b520:	60bb      	str	r3, [r7, #8]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2b07      	cmp	r3, #7
 800b526:	dded      	ble.n	800b504 <refrigera+0xa08>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800b528:	e085      	b.n	800b636 <refrigera+0xb3a>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800b52a:	46c0      	nop			@ (mov r8, r8)
 800b52c:	e004      	b.n	800b538 <refrigera+0xa3c>
           		   goto fail_det;//jrne fail_det
 800b52e:	46c0      	nop			@ (mov r8, r8)
 800b530:	e002      	b.n	800b538 <refrigera+0xa3c>
           		   goto fail_det; //jrne fail_det
 800b532:	46c0      	nop			@ (mov r8, r8)
 800b534:	e000      	b.n	800b538 <refrigera+0xa3c>
				goto fail_det;
 800b536:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800b538:	210a      	movs	r1, #10
 800b53a:	200a      	movs	r0, #10
 800b53c:	f7fb fee4 	bl	8007308 <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 800b540:	4b29      	ldr	r3, [pc, #164]	@ (800b5e8 <refrigera+0xaec>)
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	001a      	movs	r2, r3
 800b548:	2340      	movs	r3, #64	@ 0x40
 800b54a:	4013      	ands	r3, r2
 800b54c:	d104      	bne.n	800b558 <refrigera+0xa5c>
			op_menu (0x1F, 0X1F);
 800b54e:	211f      	movs	r1, #31
 800b550:	201f      	movs	r0, #31
 800b552:	f7fb fed9 	bl	8007308 <op_menu>
 800b556:	e000      	b.n	800b55a <refrigera+0xa5e>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800b558:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800b55a:	4b1f      	ldr	r3, [pc, #124]	@ (800b5d8 <refrigera+0xadc>)
 800b55c:	2201      	movs	r2, #1
 800b55e:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 800b560:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d8 <refrigera+0xadc>)
 800b562:	2201      	movs	r2, #1
 800b564:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800b566:	4b16      	ldr	r3, [pc, #88]	@ (800b5c0 <refrigera+0xac4>)
 800b568:	79db      	ldrb	r3, [r3, #7]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d107      	bne.n	800b57e <refrigera+0xa82>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 800b56e:	4b14      	ldr	r3, [pc, #80]	@ (800b5c0 <refrigera+0xac4>)
 800b570:	799b      	ldrb	r3, [r3, #6]
 800b572:	2201      	movs	r2, #1
 800b574:	4053      	eors	r3, r2
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d15a      	bne.n	800b632 <refrigera+0xb36>
dpy_volt_f:
 800b57c:	e000      	b.n	800b580 <refrigera+0xa84>
        	   goto dpy_volt_f;
 800b57e:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 800b580:	4b15      	ldr	r3, [pc, #84]	@ (800b5d8 <refrigera+0xadc>)
 800b582:	2200      	movs	r2, #0
 800b584:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800b586:	4b11      	ldr	r3, [pc, #68]	@ (800b5cc <refrigera+0xad0>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	001a      	movs	r2, r3
 800b58c:	2301      	movs	r3, #1
 800b58e:	4013      	ands	r3, r2
 800b590:	d12c      	bne.n	800b5ec <refrigera+0xaf0>
              fauto[3] = 1;					//bset		fauto,#3
 800b592:	4b11      	ldr	r3, [pc, #68]	@ (800b5d8 <refrigera+0xadc>)
 800b594:	2201      	movs	r2, #1
 800b596:	70da      	strb	r2, [r3, #3]
 800b598:	e029      	b.n	800b5ee <refrigera+0xaf2>
 800b59a:	46c0      	nop			@ (mov r8, r8)
 800b59c:	20000bf0 	.word	0x20000bf0
 800b5a0:	20000cec 	.word	0x20000cec
 800b5a4:	200000b8 	.word	0x200000b8
 800b5a8:	20000bb7 	.word	0x20000bb7
 800b5ac:	20000bb6 	.word	0x20000bb6
 800b5b0:	0801eff0 	.word	0x0801eff0
 800b5b4:	0801eff1 	.word	0x0801eff1
 800b5b8:	20000bb4 	.word	0x20000bb4
 800b5bc:	20000c04 	.word	0x20000c04
 800b5c0:	20000be8 	.word	0x20000be8
 800b5c4:	20000bb5 	.word	0x20000bb5
 800b5c8:	20000bcc 	.word	0x20000bcc
 800b5cc:	20000c88 	.word	0x20000c88
 800b5d0:	20000bf8 	.word	0x20000bf8
 800b5d4:	20000baf 	.word	0x20000baf
 800b5d8:	20000c38 	.word	0x20000c38
 800b5dc:	50000400 	.word	0x50000400
 800b5e0:	20000c40 	.word	0x20000c40
 800b5e4:	20000be0 	.word	0x20000be0
 800b5e8:	20000bb0 	.word	0x20000bb0
            	  goto no_dpy_f;
 800b5ec:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 800b5ee:	4bc0      	ldr	r3, [pc, #768]	@ (800b8f0 <refrigera+0xdf4>)
 800b5f0:	781a      	ldrb	r2, [r3, #0]
 800b5f2:	4bc0      	ldr	r3, [pc, #768]	@ (800b8f4 <refrigera+0xdf8>)
 800b5f4:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 800b5f6:	4bbf      	ldr	r3, [pc, #764]	@ (800b8f4 <refrigera+0xdf8>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b63      	cmp	r3, #99	@ 0x63
 800b5fc:	d910      	bls.n	800b620 <refrigera+0xb24>
				wreg = wreg - 100;
 800b5fe:	4bbd      	ldr	r3, [pc, #756]	@ (800b8f4 <refrigera+0xdf8>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	3b64      	subs	r3, #100	@ 0x64
 800b604:	b2da      	uxtb	r2, r3
 800b606:	4bbb      	ldr	r3, [pc, #748]	@ (800b8f4 <refrigera+0xdf8>)
 800b608:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b60a:	4bba      	ldr	r3, [pc, #744]	@ (800b8f4 <refrigera+0xdf8>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b63      	cmp	r3, #99	@ 0x63
 800b610:	d908      	bls.n	800b624 <refrigera+0xb28>
				wreg = wreg - 100;
 800b612:	4bb8      	ldr	r3, [pc, #736]	@ (800b8f4 <refrigera+0xdf8>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	3b64      	subs	r3, #100	@ 0x64
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	4bb6      	ldr	r3, [pc, #728]	@ (800b8f4 <refrigera+0xdf8>)
 800b61c:	701a      	strb	r2, [r3, #0]
 800b61e:	e002      	b.n	800b626 <refrigera+0xb2a>
					goto under_100_f; //jrult under_100_f
 800b620:	46c0      	nop			@ (mov r8, r8)
 800b622:	e000      	b.n	800b626 <refrigera+0xb2a>
					goto under_100_f;
 800b624:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 800b626:	f7fb f97d 	bl	8006924 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 800b62a:	4bb3      	ldr	r3, [pc, #716]	@ (800b8f8 <refrigera+0xdfc>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 800b630:	e07d      	b.n	800b72e <refrigera+0xc32>
        	   goto no_dpy_volt_f;
 800b632:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 800b634:	e07b      	b.n	800b72e <refrigera+0xc32>
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 800b636:	4bb1      	ldr	r3, [pc, #708]	@ (800b8fc <refrigera+0xe00>)
 800b638:	789b      	ldrb	r3, [r3, #2]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d100      	bne.n	800b640 <refrigera+0xb44>
 800b63e:	e77a      	b.n	800b536 <refrigera+0xa3a>
					goto on_compres;
 800b640:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 800b642:	4baf      	ldr	r3, [pc, #700]	@ (800b900 <refrigera+0xe04>)
 800b644:	2201      	movs	r2, #1
 800b646:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800b648:	4bab      	ldr	r3, [pc, #684]	@ (800b8f8 <refrigera+0xdfc>)
 800b64a:	2201      	movs	r2, #1
 800b64c:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 800b64e:	4bad      	ldr	r3, [pc, #692]	@ (800b904 <refrigera+0xe08>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b0b      	cmp	r3, #11
 800b654:	d864      	bhi.n	800b720 <refrigera+0xc24>
            	 	 goto on_desh;
 800b656:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800b658:	4ba9      	ldr	r3, [pc, #676]	@ (800b900 <refrigera+0xe04>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 800b65e:	49a6      	ldr	r1, [pc, #664]	@ (800b8f8 <refrigera+0xdfc>)
 800b660:	48a5      	ldr	r0, [pc, #660]	@ (800b8f8 <refrigera+0xdfc>)
 800b662:	2302      	movs	r3, #2
 800b664:	2203      	movs	r2, #3
 800b666:	f002 f8c1 	bl	800d7ec <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800b66a:	4ba5      	ldr	r3, [pc, #660]	@ (800b900 <refrigera+0xe04>)
 800b66c:	2201      	movs	r2, #1
 800b66e:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 800b670:	4ba1      	ldr	r3, [pc, #644]	@ (800b8f8 <refrigera+0xdfc>)
 800b672:	2201      	movs	r2, #1
 800b674:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 800b676:	4ba3      	ldr	r3, [pc, #652]	@ (800b904 <refrigera+0xe08>)
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2b09      	cmp	r3, #9
 800b67c:	d852      	bhi.n	800b724 <refrigera+0xc28>
            		goto on_vent;//jrule on_vent
 800b67e:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 800b680:	4b9f      	ldr	r3, [pc, #636]	@ (800b900 <refrigera+0xe04>)
 800b682:	2200      	movs	r2, #0
 800b684:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 800b686:	499c      	ldr	r1, [pc, #624]	@ (800b8f8 <refrigera+0xdfc>)
 800b688:	489b      	ldr	r0, [pc, #620]	@ (800b8f8 <refrigera+0xdfc>)
 800b68a:	2303      	movs	r3, #3
 800b68c:	2207      	movs	r2, #7
 800b68e:	f002 f8ad 	bl	800d7ec <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 800b692:	4b9d      	ldr	r3, [pc, #628]	@ (800b908 <refrigera+0xe0c>)
 800b694:	2201      	movs	r2, #1
 800b696:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 800b698:	4b9a      	ldr	r3, [pc, #616]	@ (800b904 <refrigera+0xe08>)
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b07      	cmp	r3, #7
 800b69e:	d843      	bhi.n	800b728 <refrigera+0xc2c>
					goto on_lamp; //jrule	on_lamp
 800b6a0:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 800b6a2:	4b99      	ldr	r3, [pc, #612]	@ (800b908 <refrigera+0xe0c>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 800b6a8:	4993      	ldr	r1, [pc, #588]	@ (800b8f8 <refrigera+0xdfc>)
 800b6aa:	4893      	ldr	r0, [pc, #588]	@ (800b8f8 <refrigera+0xdfc>)
 800b6ac:	2307      	movs	r3, #7
 800b6ae:	2204      	movs	r2, #4
 800b6b0:	f002 f89c 	bl	800d7ec <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 800b6b4:	4b92      	ldr	r3, [pc, #584]	@ (800b900 <refrigera+0xe04>)
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 800b6ba:	4b92      	ldr	r3, [pc, #584]	@ (800b904 <refrigera+0xe08>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b05      	cmp	r3, #5
 800b6c0:	d834      	bhi.n	800b72c <refrigera+0xc30>
					goto dpy_volt; //jrule	dpy_volt
 800b6c2:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 800b6c4:	4b8e      	ldr	r3, [pc, #568]	@ (800b900 <refrigera+0xe04>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 800b6ca:	4b8b      	ldr	r3, [pc, #556]	@ (800b8f8 <refrigera+0xdfc>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 800b6d0:	4b87      	ldr	r3, [pc, #540]	@ (800b8f0 <refrigera+0xdf4>)
 800b6d2:	781a      	ldrb	r2, [r3, #0]
 800b6d4:	4b87      	ldr	r3, [pc, #540]	@ (800b8f4 <refrigera+0xdf8>)
 800b6d6:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b6d8:	4b86      	ldr	r3, [pc, #536]	@ (800b8f4 <refrigera+0xdf8>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b63      	cmp	r3, #99	@ 0x63
 800b6de:	d910      	bls.n	800b702 <refrigera+0xc06>
				wreg = wreg - 100;
 800b6e0:	4b84      	ldr	r3, [pc, #528]	@ (800b8f4 <refrigera+0xdf8>)
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	3b64      	subs	r3, #100	@ 0x64
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	4b82      	ldr	r3, [pc, #520]	@ (800b8f4 <refrigera+0xdf8>)
 800b6ea:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b6ec:	4b81      	ldr	r3, [pc, #516]	@ (800b8f4 <refrigera+0xdf8>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b63      	cmp	r3, #99	@ 0x63
 800b6f2:	d908      	bls.n	800b706 <refrigera+0xc0a>
				wreg = wreg - 100;
 800b6f4:	4b7f      	ldr	r3, [pc, #508]	@ (800b8f4 <refrigera+0xdf8>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	3b64      	subs	r3, #100	@ 0x64
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	4b7d      	ldr	r3, [pc, #500]	@ (800b8f4 <refrigera+0xdf8>)
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	e002      	b.n	800b708 <refrigera+0xc0c>
					goto under_100; //jrult	under_100
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	e000      	b.n	800b708 <refrigera+0xc0c>
					goto under_100;
 800b706:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800b708:	f7fb f90c 	bl	8006924 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800b70c:	4b7a      	ldr	r3, [pc, #488]	@ (800b8f8 <refrigera+0xdfc>)
 800b70e:	2200      	movs	r2, #0
 800b710:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 800b712:	4b7a      	ldr	r3, [pc, #488]	@ (800b8fc <refrigera+0xe00>)
 800b714:	2201      	movs	r2, #1
 800b716:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800b718:	4b78      	ldr	r3, [pc, #480]	@ (800b8fc <refrigera+0xe00>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	71da      	strb	r2, [r3, #7]
 800b71e:	e006      	b.n	800b72e <refrigera+0xc32>
             	 goto defap;
 800b720:	46c0      	nop			@ (mov r8, r8)
 800b722:	e004      	b.n	800b72e <refrigera+0xc32>
            	goto defap;
 800b724:	46c0      	nop			@ (mov r8, r8)
 800b726:	e002      	b.n	800b72e <refrigera+0xc32>
				goto defap;
 800b728:	46c0      	nop			@ (mov r8, r8)
 800b72a:	e000      	b.n	800b72e <refrigera+0xc32>
				goto defap;
 800b72c:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 800b72e:	f7fb fce3 	bl	80070f8 <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 800b732:	4b76      	ldr	r3, [pc, #472]	@ (800b90c <refrigera+0xe10>)
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	001a      	movs	r2, r3
 800b738:	2301      	movs	r3, #1
 800b73a:	4013      	ands	r3, r2
 800b73c:	d00c      	beq.n	800b758 <refrigera+0xc5c>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 800b73e:	46c0      	nop			@ (mov r8, r8)
 800b740:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 800b742:	4b73      	ldr	r3, [pc, #460]	@ (800b910 <refrigera+0xe14>)
 800b744:	2201      	movs	r2, #1
 800b746:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800b748:	4b72      	ldr	r3, [pc, #456]	@ (800b914 <refrigera+0xe18>)
 800b74a:	2202      	movs	r2, #2
 800b74c:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 800b74e:	4b72      	ldr	r3, [pc, #456]	@ (800b918 <refrigera+0xe1c>)
 800b750:	2200      	movs	r2, #0
 800b752:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 800b754:	f7ff fbfd 	bl	800af52 <refrigera+0x456>
					goto finap;
 800b758:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800b75a:	e460      	b.n	800b01e <refrigera+0x522>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800b75c:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 800b75e:	4b66      	ldr	r3, [pc, #408]	@ (800b8f8 <refrigera+0xdfc>)
 800b760:	2200      	movs	r2, #0
 800b762:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 800b764:	4b6d      	ldr	r3, [pc, #436]	@ (800b91c <refrigera+0xe20>)
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d000      	beq.n	800b76e <refrigera+0xc72>
 800b76c:	e060      	b.n	800b830 <refrigera+0xd34>
					goto ask_door_fan; //jreq ask_door_fan
 800b76e:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b770:	4b6b      	ldr	r3, [pc, #428]	@ (800b920 <refrigera+0xe24>)
 800b772:	225b      	movs	r2, #91	@ 0x5b
 800b774:	5c9b      	ldrb	r3, [r3, r2]
 800b776:	001a      	movs	r2, r3
 800b778:	2302      	movs	r3, #2
 800b77a:	4013      	ands	r3, r2
 800b77c:	d108      	bne.n	800b790 <refrigera+0xc94>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 800b77e:	4b69      	ldr	r3, [pc, #420]	@ (800b924 <refrigera+0xe28>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d006      	beq.n	800b794 <refrigera+0xc98>
               if(retvent == 0){ //tnz retvent
 800b786:	4b68      	ldr	r3, [pc, #416]	@ (800b928 <refrigera+0xe2c>)
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d152      	bne.n	800b834 <refrigera+0xd38>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 800b78e:	e002      	b.n	800b796 <refrigera+0xc9a>
            	   goto ask_fan_on;
 800b790:	46c0      	nop			@ (mov r8, r8)
 800b792:	e000      	b.n	800b796 <refrigera+0xc9a>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 800b794:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 800b796:	4b65      	ldr	r3, [pc, #404]	@ (800b92c <refrigera+0xe30>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2201      	movs	r2, #1
 800b79c:	4053      	eors	r3, r2
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d104      	bne.n	800b7ae <refrigera+0xcb2>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 800b7a4:	4b62      	ldr	r3, [pc, #392]	@ (800b930 <refrigera+0xe34>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d033      	beq.n	800b814 <refrigera+0xd18>
					goto fan_off; //jrne fan_off
 800b7ac:	e047      	b.n	800b83e <refrigera+0xd42>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b7ae:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 800b7b0:	4b5b      	ldr	r3, [pc, #364]	@ (800b920 <refrigera+0xe24>)
 800b7b2:	2268      	movs	r2, #104	@ 0x68
 800b7b4:	5c9a      	ldrb	r2, [r3, r2]
 800b7b6:	4b4f      	ldr	r3, [pc, #316]	@ (800b8f4 <refrigera+0xdf8>)
 800b7b8:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 800b7ba:	f7fb f8c7 	bl	800694c <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 800b7be:	4b5d      	ldr	r3, [pc, #372]	@ (800b934 <refrigera+0xe38>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d038      	beq.n	800b838 <refrigera+0xd3c>
					goto ciclof_00;					// No, pregunta por parte baja
 800b7c6:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 800b7c8:	4b4a      	ldr	r3, [pc, #296]	@ (800b8f4 <refrigera+0xdf8>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d023      	beq.n	800b818 <refrigera+0xd1c>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 800b7d0:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b7d2:	4b56      	ldr	r3, [pc, #344]	@ (800b92c <refrigera+0xe30>)
 800b7d4:	78db      	ldrb	r3, [r3, #3]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	4053      	eors	r3, r2
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00e      	beq.n	800b7fe <refrigera+0xd02>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b7e0:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 800b7e2:	4b55      	ldr	r3, [pc, #340]	@ (800b938 <refrigera+0xe3c>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d128      	bne.n	800b83c <refrigera+0xd40>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 800b7ea:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 800b7ec:	4b53      	ldr	r3, [pc, #332]	@ (800b93c <refrigera+0xe40>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d113      	bne.n	800b81c <refrigera+0xd20>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 800b7f4:	4b4f      	ldr	r3, [pc, #316]	@ (800b934 <refrigera+0xe38>)
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	4b50      	ldr	r3, [pc, #320]	@ (800b93c <refrigera+0xe40>)
 800b7fa:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800b7fc:	e011      	b.n	800b822 <refrigera+0xd26>
				goto ciclo_on;					/// Si, ciclo de encendido
 800b7fe:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 800b800:	4b4e      	ldr	r3, [pc, #312]	@ (800b93c <refrigera+0xe40>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10b      	bne.n	800b820 <refrigera+0xd24>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800b808:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800b80a:	4b3a      	ldr	r3, [pc, #232]	@ (800b8f4 <refrigera+0xdf8>)
 800b80c:	781a      	ldrb	r2, [r3, #0]
 800b80e:	4b4a      	ldr	r3, [pc, #296]	@ (800b938 <refrigera+0xe3c>)
 800b810:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 800b812:	e014      	b.n	800b83e <refrigera+0xd42>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 800b814:	46c0      	nop			@ (mov r8, r8)
 800b816:	e004      	b.n	800b822 <refrigera+0xd26>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800b818:	46c0      	nop			@ (mov r8, r8)
 800b81a:	e002      	b.n	800b822 <refrigera+0xd26>
					goto fan_on; //jrne fan_on
 800b81c:	46c0      	nop			@ (mov r8, r8)
 800b81e:	e000      	b.n	800b822 <refrigera+0xd26>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 800b820:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 800b822:	4b39      	ldr	r3, [pc, #228]	@ (800b908 <refrigera+0xe0c>)
 800b824:	2201      	movs	r2, #1
 800b826:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800b828:	4b33      	ldr	r3, [pc, #204]	@ (800b8f8 <refrigera+0xdfc>)
 800b82a:	2201      	movs	r2, #1
 800b82c:	71da      	strb	r2, [r3, #7]
 800b82e:	e006      	b.n	800b83e <refrigera+0xd42>
				goto fan_off;
 800b830:	46c0      	nop			@ (mov r8, r8)
 800b832:	e004      	b.n	800b83e <refrigera+0xd42>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 800b834:	46c0      	nop			@ (mov r8, r8)
 800b836:	e002      	b.n	800b83e <refrigera+0xd42>
				goto fan_off;							// Si, manten apagado el ventilador
 800b838:	46c0      	nop			@ (mov r8, r8)
 800b83a:	e000      	b.n	800b83e <refrigera+0xd42>
				goto fan_off;						// No, manten apagado el ventilador
 800b83c:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 800b83e:	4b40      	ldr	r3, [pc, #256]	@ (800b940 <refrigera+0xe44>)
 800b840:	881a      	ldrh	r2, [r3, #0]
 800b842:	4b40      	ldr	r3, [pc, #256]	@ (800b944 <refrigera+0xe48>)
 800b844:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800b846:	4b40      	ldr	r3, [pc, #256]	@ (800b948 <refrigera+0xe4c>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d107      	bne.n	800b85e <refrigera+0xd62>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 800b84e:	4b3e      	ldr	r3, [pc, #248]	@ (800b948 <refrigera+0xe4c>)
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	2201      	movs	r2, #1
 800b854:	4053      	eors	r3, r2
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d103      	bne.n	800b864 <refrigera+0xd68>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 800b85c:	e000      	b.n	800b860 <refrigera+0xd64>
            	   goto control_j02;
 800b85e:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 800b860:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 800b862:	e029      	b.n	800b8b8 <refrigera+0xdbc>
            	   goto control_j03;
 800b864:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800b866:	4b39      	ldr	r3, [pc, #228]	@ (800b94c <refrigera+0xe50>)
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d13a      	bne.n	800b8e4 <refrigera+0xde8>
ctl13:
 800b86e:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 800b870:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 800b872:	f7fa fe09 	bl	8006488 <tdev_to_Word>
 800b876:	0003      	movs	r3, r0
 800b878:	b21a      	sxth	r2, r3
 800b87a:	4b35      	ldr	r3, [pc, #212]	@ (800b950 <refrigera+0xe54>)
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	b21b      	sxth	r3, r3
 800b880:	429a      	cmp	r2, r3
 800b882:	db09      	blt.n	800b898 <refrigera+0xd9c>
ctl15:			//	ld			A,tminstopl;
 800b884:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800b886:	4b33      	ldr	r3, [pc, #204]	@ (800b954 <refrigera+0xe58>)
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d12c      	bne.n	800b8e8 <refrigera+0xdec>
				if(drp_comph != 0){
 800b88e:	4b32      	ldr	r3, [pc, #200]	@ (800b958 <refrigera+0xe5c>)
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01e      	beq.n	800b8d4 <refrigera+0xdd8>
					goto defctl;
 800b896:	e066      	b.n	800b966 <refrigera+0xe6a>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 800b898:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 800b89a:	f7fa fdf5 	bl	8006488 <tdev_to_Word>
 800b89e:	0003      	movs	r3, r0
 800b8a0:	b21a      	sxth	r2, r3
 800b8a2:	4b2e      	ldr	r3, [pc, #184]	@ (800b95c <refrigera+0xe60>)
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	b21b      	sxth	r3, r3
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	dc0d      	bgt.n	800b8c8 <refrigera+0xdcc>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 800b8ac:	4912      	ldr	r1, [pc, #72]	@ (800b8f8 <refrigera+0xdfc>)
 800b8ae:	482c      	ldr	r0, [pc, #176]	@ (800b960 <refrigera+0xe64>)
 800b8b0:	2306      	movs	r3, #6
 800b8b2:	2207      	movs	r2, #7
 800b8b4:	f001 ff9a 	bl	800d7ec <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b92c <refrigera+0xe30>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d015      	beq.n	800b8ec <refrigera+0xdf0>
					goto control_j04;
 800b8c0:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 800b8c2:	f7fa fe9b 	bl	80065fc <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 800b8c6:	e04e      	b.n	800b966 <refrigera+0xe6a>
					goto equal;
 800b8c8:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b8ca:	4b18      	ldr	r3, [pc, #96]	@ (800b92c <refrigera+0xe30>)
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d048      	beq.n	800b964 <refrigera+0xe68>
					goto control_j05;
 800b8d2:	e000      	b.n	800b8d6 <refrigera+0xdda>
				goto on_comp;						// Enciende el compresor
 800b8d4:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 800b8d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b900 <refrigera+0xe04>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 800b8dc:	4b06      	ldr	r3, [pc, #24]	@ (800b8f8 <refrigera+0xdfc>)
 800b8de:	2201      	movs	r2, #1
 800b8e0:	709a      	strb	r2, [r3, #2]
				goto defctl;
 800b8e2:	e040      	b.n	800b966 <refrigera+0xe6a>
             		 goto defctl;
 800b8e4:	46c0      	nop			@ (mov r8, r8)
 800b8e6:	e03e      	b.n	800b966 <refrigera+0xe6a>
					goto defctl;					// No, espera
 800b8e8:	46c0      	nop			@ (mov r8, r8)
 800b8ea:	e03c      	b.n	800b966 <refrigera+0xe6a>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 800b8ec:	46c0      	nop			@ (mov r8, r8)
 800b8ee:	e03a      	b.n	800b966 <refrigera+0xe6a>
 800b8f0:	20000c2e 	.word	0x20000c2e
 800b8f4:	20000bb7 	.word	0x20000bb7
 800b8f8:	20000bf0 	.word	0x20000bf0
 800b8fc:	20000c38 	.word	0x20000c38
 800b900:	20000c04 	.word	0x20000c04
 800b904:	20000bcc 	.word	0x20000bcc
 800b908:	20000c40 	.word	0x20000c40
 800b90c:	20000bb4 	.word	0x20000bb4
 800b910:	20000bd8 	.word	0x20000bd8
 800b914:	20000baf 	.word	0x20000baf
 800b918:	20000bf8 	.word	0x20000bf8
 800b91c:	20000c5c 	.word	0x20000c5c
 800b920:	200000b8 	.word	0x200000b8
 800b924:	20000c87 	.word	0x20000c87
 800b928:	20000bca 	.word	0x20000bca
 800b92c:	20000bb8 	.word	0x20000bb8
 800b930:	20000bd4 	.word	0x20000bd4
 800b934:	20000bb6 	.word	0x20000bb6
 800b938:	20000c59 	.word	0x20000c59
 800b93c:	20000c58 	.word	0x20000c58
 800b940:	20000c16 	.word	0x20000c16
 800b944:	20000c1a 	.word	0x20000c1a
 800b948:	20000be8 	.word	0x20000be8
 800b94c:	20000be0 	.word	0x20000be0
 800b950:	20000c0e 	.word	0x20000c0e
 800b954:	20000bc2 	.word	0x20000bc2
 800b958:	20000c5a 	.word	0x20000c5a
 800b95c:	20000c0c 	.word	0x20000c0c
 800b960:	20000c9c 	.word	0x20000c9c
        		goto defctl;
 800b964:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 800b966:	4bbe      	ldr	r3, [pc, #760]	@ (800bc60 <refrigera+0x1164>)
 800b968:	224d      	movs	r2, #77	@ 0x4d
 800b96a:	2100      	movs	r1, #0
 800b96c:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800b96e:	4bbc      	ldr	r3, [pc, #752]	@ (800bc60 <refrigera+0x1164>)
 800b970:	224d      	movs	r2, #77	@ 0x4d
 800b972:	5c9b      	ldrb	r3, [r3, r2]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d100      	bne.n	800b97a <refrigera+0xe7e>
 800b978:	e0a4      	b.n	800bac4 <refrigera+0xfc8>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b97a:	4bba      	ldr	r3, [pc, #744]	@ (800bc64 <refrigera+0x1168>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d120      	bne.n	800b9c4 <refrigera+0xec8>
				STM8_16_X = Plantilla[timeDefi] *60;
 800b982:	4bb7      	ldr	r3, [pc, #732]	@ (800bc60 <refrigera+0x1164>)
 800b984:	224d      	movs	r2, #77	@ 0x4d
 800b986:	5c9b      	ldrb	r3, [r3, r2]
 800b988:	001a      	movs	r2, r3
 800b98a:	233c      	movs	r3, #60	@ 0x3c
 800b98c:	4353      	muls	r3, r2
 800b98e:	b29a      	uxth	r2, r3
 800b990:	4bb5      	ldr	r3, [pc, #724]	@ (800bc68 <refrigera+0x116c>)
 800b992:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 800b994:	4bb4      	ldr	r3, [pc, #720]	@ (800bc68 <refrigera+0x116c>)
 800b996:	881a      	ldrh	r2, [r3, #0]
 800b998:	4bb4      	ldr	r3, [pc, #720]	@ (800bc6c <refrigera+0x1170>)
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d005      	beq.n	800b9ac <refrigera+0xeb0>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 800b9a0:	4baf      	ldr	r3, [pc, #700]	@ (800bc60 <refrigera+0x1164>)
 800b9a2:	2259      	movs	r2, #89	@ 0x59
 800b9a4:	5c9b      	ldrb	r3, [r3, r2]
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d134      	bne.n	800ba14 <refrigera+0xf18>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800b9aa:	e05c      	b.n	800ba66 <refrigera+0xf6a>
					goto loadDefiCnts;
 800b9ac:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 800b9ae:	4bae      	ldr	r3, [pc, #696]	@ (800bc68 <refrigera+0x116c>)
 800b9b0:	881a      	ldrh	r2, [r3, #0]
 800b9b2:	4bae      	ldr	r3, [pc, #696]	@ (800bc6c <refrigera+0x1170>)
 800b9b4:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 800b9b6:	4bac      	ldr	r3, [pc, #688]	@ (800bc68 <refrigera+0x116c>)
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	4bac      	ldr	r3, [pc, #688]	@ (800bc70 <refrigera+0x1174>)
 800b9c0:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 800b9c2:	e084      	b.n	800bace <refrigera+0xfd2>
					goto chkTimeDefi;
 800b9c4:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 800b9c6:	4ba6      	ldr	r3, [pc, #664]	@ (800bc60 <refrigera+0x1164>)
 800b9c8:	2259      	movs	r2, #89	@ 0x59
 800b9ca:	5c9b      	ldrb	r3, [r3, r2]
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d03c      	beq.n	800ba4a <refrigera+0xf4e>
chkTimeDefi_1s:
 800b9d0:	46c0      	nop			@ (mov r8, r8)
 800b9d2:	e002      	b.n	800b9da <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800b9d4:	46c0      	nop			@ (mov r8, r8)
 800b9d6:	e000      	b.n	800b9da <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800b9d8:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800b9da:	4ba6      	ldr	r3, [pc, #664]	@ (800bc74 <refrigera+0x1178>)
 800b9dc:	791b      	ldrb	r3, [r3, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d000      	beq.n	800b9e4 <refrigera+0xee8>
 800b9e2:	e066      	b.n	800bab2 <refrigera+0xfb6>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 800b9e4:	4ba3      	ldr	r3, [pc, #652]	@ (800bc74 <refrigera+0x1178>)
 800b9e6:	795b      	ldrb	r3, [r3, #5]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d000      	beq.n	800b9ee <refrigera+0xef2>
 800b9ec:	e063      	b.n	800bab6 <refrigera+0xfba>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800b9ee:	4b9f      	ldr	r3, [pc, #636]	@ (800bc6c <refrigera+0x1170>)
 800b9f0:	881a      	ldrh	r2, [r3, #0]
 800b9f2:	4b9f      	ldr	r3, [pc, #636]	@ (800bc70 <refrigera+0x1174>)
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d106      	bne.n	800ba08 <refrigera+0xf0c>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800b9fa:	f7fa fd45 	bl	8006488 <tdev_to_Word>
 800b9fe:	0003      	movs	r3, r0
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	4b9d      	ldr	r3, [pc, #628]	@ (800bc78 <refrigera+0x117c>)
 800ba04:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800ba06:	e062      	b.n	800bace <refrigera+0xfd2>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800ba08:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800ba0a:	4b98      	ldr	r3, [pc, #608]	@ (800bc6c <refrigera+0x1170>)
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d15a      	bne.n	800bac8 <refrigera+0xfcc>
chkTimeDefi_1s_02:
 800ba12:	e000      	b.n	800ba16 <refrigera+0xf1a>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 800ba14:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800ba16:	4b98      	ldr	r3, [pc, #608]	@ (800bc78 <refrigera+0x117c>)
 800ba18:	881a      	ldrh	r2, [r3, #0]
 800ba1a:	4b93      	ldr	r3, [pc, #588]	@ (800bc68 <refrigera+0x116c>)
 800ba1c:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800ba1e:	4b92      	ldr	r3, [pc, #584]	@ (800bc68 <refrigera+0x116c>)
 800ba20:	881c      	ldrh	r4, [r3, #0]
 800ba22:	f7fa fd31 	bl	8006488 <tdev_to_Word>
 800ba26:	0003      	movs	r3, r0
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	1ae3      	subs	r3, r4, r3
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	4b8e      	ldr	r3, [pc, #568]	@ (800bc68 <refrigera+0x116c>)
 800ba30:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800ba32:	4b92      	ldr	r3, [pc, #584]	@ (800bc7c <refrigera+0x1180>)
 800ba34:	0018      	movs	r0, r3
 800ba36:	f7fa fd3f 	bl	80064b8 <TwoByteInArrayToWord>
 800ba3a:	0003      	movs	r3, r0
 800ba3c:	b21a      	sxth	r2, r3
 800ba3e:	4b8a      	ldr	r3, [pc, #552]	@ (800bc68 <refrigera+0x116c>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	b21b      	sxth	r3, r3
 800ba44:	429a      	cmp	r2, r3
 800ba46:	dc28      	bgt.n	800ba9a <refrigera+0xf9e>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800ba48:	e038      	b.n	800babc <refrigera+0xfc0>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800ba4a:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 800ba4c:	4b89      	ldr	r3, [pc, #548]	@ (800bc74 <refrigera+0x1178>)
 800ba4e:	791b      	ldrb	r3, [r3, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1bf      	bne.n	800b9d4 <refrigera+0xed8>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 800ba54:	4b87      	ldr	r3, [pc, #540]	@ (800bc74 <refrigera+0x1178>)
 800ba56:	795b      	ldrb	r3, [r3, #5]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1bd      	bne.n	800b9d8 <refrigera+0xedc>
                   if(cntDefi_H != 1){ //cpw X,#1
 800ba5c:	4b83      	ldr	r3, [pc, #524]	@ (800bc6c <refrigera+0x1170>)
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d133      	bne.n	800bacc <refrigera+0xfd0>
chkTimeDefi_3s_01:
 800ba64:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800ba66:	f7fa fd0f 	bl	8006488 <tdev_to_Word>
 800ba6a:	0003      	movs	r3, r0
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	4b7e      	ldr	r3, [pc, #504]	@ (800bc68 <refrigera+0x116c>)
 800ba70:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 800ba72:	4b7d      	ldr	r3, [pc, #500]	@ (800bc68 <refrigera+0x116c>)
 800ba74:	881a      	ldrh	r2, [r3, #0]
 800ba76:	4b82      	ldr	r3, [pc, #520]	@ (800bc80 <refrigera+0x1184>)
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	4b7a      	ldr	r3, [pc, #488]	@ (800bc68 <refrigera+0x116c>)
 800ba80:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800ba82:	4b7e      	ldr	r3, [pc, #504]	@ (800bc7c <refrigera+0x1180>)
 800ba84:	0018      	movs	r0, r3
 800ba86:	f7fa fd17 	bl	80064b8 <TwoByteInArrayToWord>
 800ba8a:	0003      	movs	r3, r0
 800ba8c:	b21a      	sxth	r2, r3
 800ba8e:	4b76      	ldr	r3, [pc, #472]	@ (800bc68 <refrigera+0x116c>)
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	b21b      	sxth	r3, r3
 800ba94:	429a      	cmp	r2, r3
 800ba96:	dd10      	ble.n	800baba <refrigera+0xfbe>
alarmDefi:
 800ba98:	e000      	b.n	800ba9c <refrigera+0xfa0>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 800ba9a:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 800ba9c:	4b75      	ldr	r3, [pc, #468]	@ (800bc74 <refrigera+0x1178>)
 800ba9e:	2201      	movs	r2, #1
 800baa0:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 800baa2:	4b78      	ldr	r3, [pc, #480]	@ (800bc84 <refrigera+0x1188>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	801a      	strh	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 800baa8:	4b76      	ldr	r3, [pc, #472]	@ (800bc84 <refrigera+0x1188>)
 800baaa:	881a      	ldrh	r2, [r3, #0]
 800baac:	4b76      	ldr	r3, [pc, #472]	@ (800bc88 <refrigera+0x118c>)
 800baae:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 800bab0:	e00d      	b.n	800bace <refrigera+0xfd2>
                	  goto noAlarmDefi;
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	e002      	b.n	800babc <refrigera+0xfc0>
                	  goto noAlarmDefi;
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	e000      	b.n	800babc <refrigera+0xfc0>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800baba:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800babc:	4b6d      	ldr	r3, [pc, #436]	@ (800bc74 <refrigera+0x1178>)
 800babe:	2200      	movs	r2, #0
 800bac0:	719a      	strb	r2, [r3, #6]
 800bac2:	e004      	b.n	800bace <refrigera+0xfd2>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 800bac4:	46c0      	nop			@ (mov r8, r8)
 800bac6:	e002      	b.n	800bace <refrigera+0xfd2>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800bac8:	46c0      	nop			@ (mov r8, r8)
 800baca:	e000      	b.n	800bace <refrigera+0xfd2>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800bacc:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 800bace:	f7fa fcdb 	bl	8006488 <tdev_to_Word>
 800bad2:	0003      	movs	r3, r0
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	4b64      	ldr	r3, [pc, #400]	@ (800bc68 <refrigera+0x116c>)
 800bad8:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800bada:	4b6c      	ldr	r3, [pc, #432]	@ (800bc8c <refrigera+0x1190>)
 800badc:	0018      	movs	r0, r3
 800bade:	f7fa fceb 	bl	80064b8 <TwoByteInArrayToWord>
 800bae2:	0003      	movs	r3, r0
 800bae4:	b21a      	sxth	r2, r3
 800bae6:	4b60      	ldr	r3, [pc, #384]	@ (800bc68 <refrigera+0x116c>)
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	b21b      	sxth	r3, r3
 800baec:	429a      	cmp	r2, r3
 800baee:	dc02      	bgt.n	800baf6 <refrigera+0xffa>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 800baf0:	f7fa fd12 	bl	8006518 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800baf4:	e058      	b.n	800bba8 <refrigera+0x10ac>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800baf6:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800baf8:	4b59      	ldr	r3, [pc, #356]	@ (800bc60 <refrigera+0x1164>)
 800bafa:	2259      	movs	r2, #89	@ 0x59
 800bafc:	5c9b      	ldrb	r3, [r3, r2]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d03c      	beq.n	800bb7c <refrigera+0x1080>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800bb02:	4b63      	ldr	r3, [pc, #396]	@ (800bc90 <refrigera+0x1194>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	021b      	lsls	r3, r3, #8
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	4a62      	ldr	r2, [pc, #392]	@ (800bc94 <refrigera+0x1198>)
 800bb0c:	7812      	ldrb	r2, [r2, #0]
 800bb0e:	189b      	adds	r3, r3, r2
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	4b55      	ldr	r3, [pc, #340]	@ (800bc68 <refrigera+0x116c>)
 800bb14:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800bb16:	4b60      	ldr	r3, [pc, #384]	@ (800bc98 <refrigera+0x119c>)
 800bb18:	785b      	ldrb	r3, [r3, #1]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d130      	bne.n	800bb80 <refrigera+0x1084>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 800bb1e:	4b5e      	ldr	r3, [pc, #376]	@ (800bc98 <refrigera+0x119c>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d12e      	bne.n	800bb84 <refrigera+0x1088>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800bb26:	4b5d      	ldr	r3, [pc, #372]	@ (800bc9c <refrigera+0x11a0>)
 800bb28:	0018      	movs	r0, r3
 800bb2a:	f7fa fcc5 	bl	80064b8 <TwoByteInArrayToWord>
 800bb2e:	0003      	movs	r3, r0
 800bb30:	b21a      	sxth	r2, r3
 800bb32:	4b4d      	ldr	r3, [pc, #308]	@ (800bc68 <refrigera+0x116c>)
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	b21b      	sxth	r3, r3
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	dd25      	ble.n	800bb88 <refrigera+0x108c>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800bb3c:	4b58      	ldr	r3, [pc, #352]	@ (800bca0 <refrigera+0x11a4>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4a57      	ldr	r2, [pc, #348]	@ (800bca4 <refrigera+0x11a8>)
 800bb46:	7812      	ldrb	r2, [r2, #0]
 800bb48:	189b      	adds	r3, r3, r2
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	4b46      	ldr	r3, [pc, #280]	@ (800bc68 <refrigera+0x116c>)
 800bb4e:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 800bb50:	4b51      	ldr	r3, [pc, #324]	@ (800bc98 <refrigera+0x119c>)
 800bb52:	78db      	ldrb	r3, [r3, #3]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d119      	bne.n	800bb8c <refrigera+0x1090>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800bb58:	4b4f      	ldr	r3, [pc, #316]	@ (800bc98 <refrigera+0x119c>)
 800bb5a:	789b      	ldrb	r3, [r3, #2]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d117      	bne.n	800bb90 <refrigera+0x1094>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 800bb60:	4b51      	ldr	r3, [pc, #324]	@ (800bca8 <refrigera+0x11ac>)
 800bb62:	0018      	movs	r0, r3
 800bb64:	f7fa fca8 	bl	80064b8 <TwoByteInArrayToWord>
 800bb68:	0003      	movs	r3, r0
 800bb6a:	b21a      	sxth	r2, r3
 800bb6c:	4b3e      	ldr	r3, [pc, #248]	@ (800bc68 <refrigera+0x116c>)
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b21b      	sxth	r3, r3
 800bb72:	429a      	cmp	r2, r3
 800bb74:	dd01      	ble.n	800bb7a <refrigera+0x107e>
 800bb76:	f7ff fa18 	bl	800afaa <refrigera+0x4ae>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 800bb7a:	e00a      	b.n	800bb92 <refrigera+0x1096>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 800bb7c:	46c0      	nop			@ (mov r8, r8)
 800bb7e:	e008      	b.n	800bb92 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb80:	46c0      	nop			@ (mov r8, r8)
 800bb82:	e006      	b.n	800bb92 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb84:	46c0      	nop			@ (mov r8, r8)
 800bb86:	e004      	b.n	800bb92 <refrigera+0x1096>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 800bb88:	46c0      	nop			@ (mov r8, r8)
 800bb8a:	e002      	b.n	800bb92 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb8c:	46c0      	nop			@ (mov r8, r8)
 800bb8e:	e000      	b.n	800bb92 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb90:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 800bb92:	f7fb fab1 	bl	80070f8 <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 800bb96:	4b45      	ldr	r3, [pc, #276]	@ (800bcac <refrigera+0x11b0>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	001a      	movs	r2, r3
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4013      	ands	r3, r2
 800bba0:	d001      	beq.n	800bba6 <refrigera+0x10aa>
 800bba2:	f7ff fa04 	bl	800afae <refrigera+0x4b2>
            	   goto control_j06;
 800bba6:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800bba8:	4b41      	ldr	r3, [pc, #260]	@ (800bcb0 <refrigera+0x11b4>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d108      	bne.n	800bbc2 <refrigera+0x10c6>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 800bbb0:	4b40      	ldr	r3, [pc, #256]	@ (800bcb4 <refrigera+0x11b8>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d007      	beq.n	800bbc8 <refrigera+0x10cc>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800bbb8:	4b3e      	ldr	r3, [pc, #248]	@ (800bcb4 <refrigera+0x11b8>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 800bbbe:	f7ff f9f7 	bl	800afb0 <refrigera+0x4b4>
					goto finctl; //jrne	finctl;
 800bbc2:	46c0      	nop			@ (mov r8, r8)
 800bbc4:	f7ff fa2b 	bl	800b01e <refrigera+0x522>
            		goto control_j07;
 800bbc8:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800bbca:	f7ff fa28 	bl	800b01e <refrigera+0x522>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 800bbce:	4b24      	ldr	r3, [pc, #144]	@ (800bc60 <refrigera+0x1164>)
 800bbd0:	2255      	movs	r2, #85	@ 0x55
 800bbd2:	5c9b      	ldrb	r3, [r3, r2]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d103      	bne.n	800bbe0 <refrigera+0x10e4>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800bbd8:	4b37      	ldr	r3, [pc, #220]	@ (800bcb8 <refrigera+0x11bc>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	e000      	b.n	800bbe2 <refrigera+0x10e6>
					goto deshie20;				/// No
 800bbe0:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc60 <refrigera+0x1164>)
 800bbe4:	2255      	movs	r2, #85	@ 0x55
 800bbe6:	5c9b      	ldrb	r3, [r3, r2]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d114      	bne.n	800bc16 <refrigera+0x111a>
deshXvent:
 800bbec:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800bbee:	4b1c      	ldr	r3, [pc, #112]	@ (800bc60 <refrigera+0x1164>)
 800bbf0:	225b      	movs	r2, #91	@ 0x5b
 800bbf2:	5c9b      	ldrb	r3, [r3, r2]
 800bbf4:	001a      	movs	r2, r3
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	d104      	bne.n	800bc06 <refrigera+0x110a>
				if(retvent != 0){ //tnz retvent
 800bbfc:	4b2f      	ldr	r3, [pc, #188]	@ (800bcbc <refrigera+0x11c0>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10d      	bne.n	800bc20 <refrigera+0x1124>
deshie24:
 800bc04:	e000      	b.n	800bc08 <refrigera+0x110c>
					goto deshie24;
 800bc06:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800bc08:	4b2d      	ldr	r3, [pc, #180]	@ (800bcc0 <refrigera+0x11c4>)
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 800bc0e:	4b2d      	ldr	r3, [pc, #180]	@ (800bcc4 <refrigera+0x11c8>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 800bc14:	e005      	b.n	800bc22 <refrigera+0x1126>
					goto deshie25;				//;		/ No, acciona el deshielo
 800bc16:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800bc18:	4b27      	ldr	r3, [pc, #156]	@ (800bcb8 <refrigera+0x11bc>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	705a      	strb	r2, [r3, #1]
 800bc1e:	e000      	b.n	800bc22 <refrigera+0x1126>
					goto deshie30; //jrne		deshie30;		/ No, espera
 800bc20:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 800bc22:	4b29      	ldr	r3, [pc, #164]	@ (800bcc8 <refrigera+0x11cc>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800bc28:	4b0d      	ldr	r3, [pc, #52]	@ (800bc60 <refrigera+0x1164>)
 800bc2a:	224c      	movs	r2, #76	@ 0x4c
 800bc2c:	5c9a      	ldrb	r2, [r3, r2]
 800bc2e:	4b27      	ldr	r3, [pc, #156]	@ (800bccc <refrigera+0x11d0>)
 800bc30:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 800bc32:	4b27      	ldr	r3, [pc, #156]	@ (800bcd0 <refrigera+0x11d4>)
 800bc34:	881a      	ldrh	r2, [r3, #0]
 800bc36:	4b14      	ldr	r3, [pc, #80]	@ (800bc88 <refrigera+0x118c>)
 800bc38:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800bc3a:	f7fb fa5d 	bl	80070f8 <buildmode>
				 if((0x13 & modo ) == 0){
 800bc3e:	4b1b      	ldr	r3, [pc, #108]	@ (800bcac <refrigera+0x11b0>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2213      	movs	r2, #19
 800bc44:	4013      	ands	r3, r2
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <refrigera+0x1154>
 800bc4c:	f7ff f985 	bl	800af5a <refrigera+0x45e>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 800bc50:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 800bc52:	46c0      	nop			@ (mov r8, r8)
 800bc54:	f7ff f9e3 	bl	800b01e <refrigera+0x522>


main_refrigera:


}
 800bc58:	46c0      	nop			@ (mov r8, r8)
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b007      	add	sp, #28
 800bc5e:	bd90      	pop	{r4, r7, pc}
 800bc60:	200000b8 	.word	0x200000b8
 800bc64:	20000bb8 	.word	0x20000bb8
 800bc68:	20000936 	.word	0x20000936
 800bc6c:	20000c96 	.word	0x20000c96
 800bc70:	20000c9a 	.word	0x20000c9a
 800bc74:	20000be0 	.word	0x20000be0
 800bc78:	20000c98 	.word	0x20000c98
 800bc7c:	200000eb 	.word	0x200000eb
 800bc80:	20000cb4 	.word	0x20000cb4
 800bc84:	20000c16 	.word	0x20000c16
 800bc88:	20000c1a 	.word	0x20000c1a
 800bc8c:	200000cb 	.word	0x200000cb
 800bc90:	20000c10 	.word	0x20000c10
 800bc94:	20000c11 	.word	0x20000c11
 800bc98:	20000be8 	.word	0x20000be8
 800bc9c:	200000cf 	.word	0x200000cf
 800bca0:	20000c12 	.word	0x20000c12
 800bca4:	20000c13 	.word	0x20000c13
 800bca8:	200000cd 	.word	0x200000cd
 800bcac:	20000bb4 	.word	0x20000bb4
 800bcb0:	20000bcb 	.word	0x20000bcb
 800bcb4:	20000cb0 	.word	0x20000cb0
 800bcb8:	20000c04 	.word	0x20000c04
 800bcbc:	20000bca 	.word	0x20000bca
 800bcc0:	20000c40 	.word	0x20000c40
 800bcc4:	20000bf0 	.word	0x20000bf0
 800bcc8:	20000bb5 	.word	0x20000bb5
 800bccc:	20000c27 	.word	0x20000c27
 800bcd0:	20000c18 	.word	0x20000c18

0800bcd4 <st_refri>:

void st_refri (void)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd04 <st_refri+0x30>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800bcde:	4b09      	ldr	r3, [pc, #36]	@ (800bd04 <st_refri+0x30>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 800bce4:	4b07      	ldr	r3, [pc, #28]	@ (800bd04 <st_refri+0x30>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <st_refri+0x34>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 800bcf0:	f7fa fc84 	bl	80065fc <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 800bcf4:	4b05      	ldr	r3, [pc, #20]	@ (800bd0c <st_refri+0x38>)
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800bcfa:	f7fa fc0d 	bl	8006518 <ldadaptivo>
}
 800bcfe:	46c0      	nop			@ (mov r8, r8)
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20000c04 	.word	0x20000c04
 800bd08:	20000c40 	.word	0x20000c40
 800bd0c:	20000bf8 	.word	0x20000bf8

0800bd10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800bd16:	4b0f      	ldr	r3, [pc, #60]	@ (800bd54 <HAL_MspInit+0x44>)
 800bd18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd54 <HAL_MspInit+0x44>)
 800bd1c:	2180      	movs	r1, #128	@ 0x80
 800bd1e:	0549      	lsls	r1, r1, #21
 800bd20:	430a      	orrs	r2, r1
 800bd22:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd24:	4b0b      	ldr	r3, [pc, #44]	@ (800bd54 <HAL_MspInit+0x44>)
 800bd26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd28:	2380      	movs	r3, #128	@ 0x80
 800bd2a:	055b      	lsls	r3, r3, #21
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	607b      	str	r3, [r7, #4]
 800bd30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd32:	4b08      	ldr	r3, [pc, #32]	@ (800bd54 <HAL_MspInit+0x44>)
 800bd34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bd36:	4b07      	ldr	r3, [pc, #28]	@ (800bd54 <HAL_MspInit+0x44>)
 800bd38:	2101      	movs	r1, #1
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	661a      	str	r2, [r3, #96]	@ 0x60
 800bd3e:	4b05      	ldr	r3, [pc, #20]	@ (800bd54 <HAL_MspInit+0x44>)
 800bd40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd42:	2201      	movs	r2, #1
 800bd44:	4013      	ands	r3, r2
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd4a:	46c0      	nop			@ (mov r8, r8)
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	b002      	add	sp, #8
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	46c0      	nop			@ (mov r8, r8)
 800bd54:	40021000 	.word	0x40021000

0800bd58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bd58:	b590      	push	{r4, r7, lr}
 800bd5a:	b09d      	sub	sp, #116	@ 0x74
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd60:	235c      	movs	r3, #92	@ 0x5c
 800bd62:	18fb      	adds	r3, r7, r3
 800bd64:	0018      	movs	r0, r3
 800bd66:	2314      	movs	r3, #20
 800bd68:	001a      	movs	r2, r3
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	f010 f8fa 	bl	801bf64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd70:	2418      	movs	r4, #24
 800bd72:	193b      	adds	r3, r7, r4
 800bd74:	0018      	movs	r0, r3
 800bd76:	2344      	movs	r3, #68	@ 0x44
 800bd78:	001a      	movs	r2, r3
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f010 f8f2 	bl	801bf64 <memset>
  if(hadc->Instance==ADC1)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a3b      	ldr	r2, [pc, #236]	@ (800be74 <HAL_ADC_MspInit+0x11c>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d16f      	bne.n	800be6a <HAL_ADC_MspInit+0x112>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800bd8a:	193b      	adds	r3, r7, r4
 800bd8c:	2280      	movs	r2, #128	@ 0x80
 800bd8e:	01d2      	lsls	r2, r2, #7
 800bd90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800bd92:	193b      	adds	r3, r7, r4
 800bd94:	2200      	movs	r2, #0
 800bd96:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd98:	193b      	adds	r3, r7, r4
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f00b fd42 	bl	8017824 <HAL_RCCEx_PeriphCLKConfig>
 800bda0:	1e03      	subs	r3, r0, #0
 800bda2:	d001      	beq.n	800bda8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800bda4:	f7fe fbb4 	bl	800a510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800bda8:	4b33      	ldr	r3, [pc, #204]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bdac:	4b32      	ldr	r3, [pc, #200]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdae:	2180      	movs	r1, #128	@ 0x80
 800bdb0:	0349      	lsls	r1, r1, #13
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	661a      	str	r2, [r3, #96]	@ 0x60
 800bdb6:	4b30      	ldr	r3, [pc, #192]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bdba:	2380      	movs	r3, #128	@ 0x80
 800bdbc:	035b      	lsls	r3, r3, #13
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bdc4:	4b2c      	ldr	r3, [pc, #176]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdc8:	4b2b      	ldr	r3, [pc, #172]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdca:	2104      	movs	r1, #4
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bdd0:	4b29      	ldr	r3, [pc, #164]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	613b      	str	r3, [r7, #16]
 800bdda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bddc:	4b26      	ldr	r3, [pc, #152]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bde0:	4b25      	ldr	r3, [pc, #148]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bde2:	2101      	movs	r1, #1
 800bde4:	430a      	orrs	r2, r1
 800bde6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bde8:	4b23      	ldr	r3, [pc, #140]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdec:	2201      	movs	r2, #1
 800bdee:	4013      	ands	r3, r2
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bdf4:	4b20      	ldr	r3, [pc, #128]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf8:	4b1f      	ldr	r3, [pc, #124]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800bdfa:	2102      	movs	r1, #2
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be00:	4b1d      	ldr	r3, [pc, #116]	@ (800be78 <HAL_ADC_MspInit+0x120>)
 800be02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be04:	2202      	movs	r2, #2
 800be06:	4013      	ands	r3, r2
 800be08:	60bb      	str	r3, [r7, #8]
 800be0a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800be0c:	245c      	movs	r4, #92	@ 0x5c
 800be0e:	193b      	adds	r3, r7, r4
 800be10:	2213      	movs	r2, #19
 800be12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be14:	193b      	adds	r3, r7, r4
 800be16:	2203      	movs	r2, #3
 800be18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be1a:	193b      	adds	r3, r7, r4
 800be1c:	2200      	movs	r2, #0
 800be1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be20:	193b      	adds	r3, r7, r4
 800be22:	4a16      	ldr	r2, [pc, #88]	@ (800be7c <HAL_ADC_MspInit+0x124>)
 800be24:	0019      	movs	r1, r3
 800be26:	0010      	movs	r0, r2
 800be28:	f008 f942 	bl	80140b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800be2c:	193b      	adds	r3, r7, r4
 800be2e:	22e0      	movs	r2, #224	@ 0xe0
 800be30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be32:	193b      	adds	r3, r7, r4
 800be34:	2203      	movs	r2, #3
 800be36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be38:	193b      	adds	r3, r7, r4
 800be3a:	2200      	movs	r2, #0
 800be3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be3e:	193a      	adds	r2, r7, r4
 800be40:	23a0      	movs	r3, #160	@ 0xa0
 800be42:	05db      	lsls	r3, r3, #23
 800be44:	0011      	movs	r1, r2
 800be46:	0018      	movs	r0, r3
 800be48:	f008 f932 	bl	80140b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800be4c:	193b      	adds	r3, r7, r4
 800be4e:	2202      	movs	r2, #2
 800be50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be52:	193b      	adds	r3, r7, r4
 800be54:	2203      	movs	r2, #3
 800be56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be58:	193b      	adds	r3, r7, r4
 800be5a:	2200      	movs	r2, #0
 800be5c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be5e:	193b      	adds	r3, r7, r4
 800be60:	4a07      	ldr	r2, [pc, #28]	@ (800be80 <HAL_ADC_MspInit+0x128>)
 800be62:	0019      	movs	r1, r3
 800be64:	0010      	movs	r0, r2
 800be66:	f008 f923 	bl	80140b0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800be6a:	46c0      	nop			@ (mov r8, r8)
 800be6c:	46bd      	mov	sp, r7
 800be6e:	b01d      	add	sp, #116	@ 0x74
 800be70:	bd90      	pop	{r4, r7, pc}
 800be72:	46c0      	nop			@ (mov r8, r8)
 800be74:	40012400 	.word	0x40012400
 800be78:	40021000 	.word	0x40021000
 800be7c:	50000800 	.word	0x50000800
 800be80:	50000400 	.word	0x50000400

0800be84 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a0e      	ldr	r2, [pc, #56]	@ (800becc <HAL_ADC_MspDeInit+0x48>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d115      	bne.n	800bec2 <HAL_ADC_MspDeInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800be96:	4b0e      	ldr	r3, [pc, #56]	@ (800bed0 <HAL_ADC_MspDeInit+0x4c>)
 800be98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800be9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bed0 <HAL_ADC_MspDeInit+0x4c>)
 800be9c:	490d      	ldr	r1, [pc, #52]	@ (800bed4 <HAL_ADC_MspDeInit+0x50>)
 800be9e:	400a      	ands	r2, r1
 800bea0:	661a      	str	r2, [r3, #96]	@ 0x60
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 800bea2:	4b0d      	ldr	r3, [pc, #52]	@ (800bed8 <HAL_ADC_MspDeInit+0x54>)
 800bea4:	2113      	movs	r1, #19
 800bea6:	0018      	movs	r0, r3
 800bea8:	f008 fa76 	bl	8014398 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800beac:	23a0      	movs	r3, #160	@ 0xa0
 800beae:	05db      	lsls	r3, r3, #23
 800beb0:	21e0      	movs	r1, #224	@ 0xe0
 800beb2:	0018      	movs	r0, r3
 800beb4:	f008 fa70 	bl	8014398 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 800beb8:	4b08      	ldr	r3, [pc, #32]	@ (800bedc <HAL_ADC_MspDeInit+0x58>)
 800beba:	2102      	movs	r1, #2
 800bebc:	0018      	movs	r0, r3
 800bebe:	f008 fa6b 	bl	8014398 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800bec2:	46c0      	nop			@ (mov r8, r8)
 800bec4:	46bd      	mov	sp, r7
 800bec6:	b002      	add	sp, #8
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	46c0      	nop			@ (mov r8, r8)
 800becc:	40012400 	.word	0x40012400
 800bed0:	40021000 	.word	0x40021000
 800bed4:	ffefffff 	.word	0xffefffff
 800bed8:	50000800 	.word	0x50000800
 800bedc:	50000400 	.word	0x50000400

0800bee0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bee0:	b590      	push	{r4, r7, lr}
 800bee2:	b09b      	sub	sp, #108	@ 0x6c
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bee8:	2354      	movs	r3, #84	@ 0x54
 800beea:	18fb      	adds	r3, r7, r3
 800beec:	0018      	movs	r0, r3
 800beee:	2314      	movs	r3, #20
 800bef0:	001a      	movs	r2, r3
 800bef2:	2100      	movs	r1, #0
 800bef4:	f010 f836 	bl	801bf64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bef8:	2410      	movs	r4, #16
 800befa:	193b      	adds	r3, r7, r4
 800befc:	0018      	movs	r0, r3
 800befe:	2344      	movs	r3, #68	@ 0x44
 800bf00:	001a      	movs	r2, r3
 800bf02:	2100      	movs	r1, #0
 800bf04:	f010 f82e 	bl	801bf64 <memset>
  if(hi2c->Instance==I2C1)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a50      	ldr	r2, [pc, #320]	@ (800c050 <HAL_I2C_MspInit+0x170>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d000      	beq.n	800bf14 <HAL_I2C_MspInit+0x34>
 800bf12:	e099      	b.n	800c048 <HAL_I2C_MspInit+0x168>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800bf14:	193b      	adds	r3, r7, r4
 800bf16:	2220      	movs	r2, #32
 800bf18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800bf1a:	193b      	adds	r3, r7, r4
 800bf1c:	2280      	movs	r2, #128	@ 0x80
 800bf1e:	0192      	lsls	r2, r2, #6
 800bf20:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf22:	193b      	adds	r3, r7, r4
 800bf24:	0018      	movs	r0, r3
 800bf26:	f00b fc7d 	bl	8017824 <HAL_RCCEx_PeriphCLKConfig>
 800bf2a:	1e03      	subs	r3, r0, #0
 800bf2c:	d001      	beq.n	800bf32 <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800bf2e:	f7fe faef 	bl	800a510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf32:	4b48      	ldr	r3, [pc, #288]	@ (800c054 <HAL_I2C_MspInit+0x174>)
 800bf34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf36:	4b47      	ldr	r3, [pc, #284]	@ (800c054 <HAL_I2C_MspInit+0x174>)
 800bf38:	2102      	movs	r1, #2
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf3e:	4b45      	ldr	r3, [pc, #276]	@ (800c054 <HAL_I2C_MspInit+0x174>)
 800bf40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf42:	2202      	movs	r2, #2
 800bf44:	4013      	ands	r3, r2
 800bf46:	60fb      	str	r3, [r7, #12]
 800bf48:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bf4a:	2154      	movs	r1, #84	@ 0x54
 800bf4c:	187b      	adds	r3, r7, r1
 800bf4e:	22c0      	movs	r2, #192	@ 0xc0
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bf54:	187b      	adds	r3, r7, r1
 800bf56:	2212      	movs	r2, #18
 800bf58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5a:	187b      	adds	r3, r7, r1
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf60:	187b      	adds	r3, r7, r1
 800bf62:	2203      	movs	r2, #3
 800bf64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800bf66:	187b      	adds	r3, r7, r1
 800bf68:	2204      	movs	r2, #4
 800bf6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf6c:	187b      	adds	r3, r7, r1
 800bf6e:	4a3a      	ldr	r2, [pc, #232]	@ (800c058 <HAL_I2C_MspInit+0x178>)
 800bf70:	0019      	movs	r1, r3
 800bf72:	0010      	movs	r0, r2
 800bf74:	f008 f89c 	bl	80140b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bf78:	4b36      	ldr	r3, [pc, #216]	@ (800c054 <HAL_I2C_MspInit+0x174>)
 800bf7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf7c:	4b35      	ldr	r3, [pc, #212]	@ (800c054 <HAL_I2C_MspInit+0x174>)
 800bf7e:	2180      	movs	r1, #128	@ 0x80
 800bf80:	0389      	lsls	r1, r1, #14
 800bf82:	430a      	orrs	r2, r1
 800bf84:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf86:	4b33      	ldr	r3, [pc, #204]	@ (800c054 <HAL_I2C_MspInit+0x174>)
 800bf88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf8a:	2380      	movs	r3, #128	@ 0x80
 800bf8c:	039b      	lsls	r3, r3, #14
 800bf8e:	4013      	ands	r3, r2
 800bf90:	60bb      	str	r3, [r7, #8]
 800bf92:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800bf94:	4b31      	ldr	r3, [pc, #196]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bf96:	4a32      	ldr	r2, [pc, #200]	@ (800c060 <HAL_I2C_MspInit+0x180>)
 800bf98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800bf9a:	4b30      	ldr	r3, [pc, #192]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bf9c:	2209      	movs	r2, #9
 800bf9e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bfa0:	4b2e      	ldr	r3, [pc, #184]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bfa6:	4b2d      	ldr	r3, [pc, #180]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bfac:	4b2b      	ldr	r3, [pc, #172]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfae:	2280      	movs	r2, #128	@ 0x80
 800bfb0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bfb2:	4b2a      	ldr	r3, [pc, #168]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bfb8:	4b28      	ldr	r3, [pc, #160]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800bfbe:	4b27      	ldr	r3, [pc, #156]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bfc4:	4b25      	ldr	r3, [pc, #148]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800bfca:	4b24      	ldr	r3, [pc, #144]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f007 fac3 	bl	8013558 <HAL_DMA_Init>
 800bfd2:	1e03      	subs	r3, r0, #0
 800bfd4:	d001      	beq.n	800bfda <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800bfd6:	f7fe fa9b 	bl	800a510 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a1f      	ldr	r2, [pc, #124]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfde:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bfe0:	4b1e      	ldr	r3, [pc, #120]	@ (800c05c <HAL_I2C_MspInit+0x17c>)
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800bfe6:	4b1f      	ldr	r3, [pc, #124]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800bfe8:	4a1f      	ldr	r2, [pc, #124]	@ (800c068 <HAL_I2C_MspInit+0x188>)
 800bfea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800bfec:	4b1d      	ldr	r3, [pc, #116]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800bfee:	220a      	movs	r2, #10
 800bff0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bff2:	4b1c      	ldr	r3, [pc, #112]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800bff4:	2210      	movs	r2, #16
 800bff6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bff8:	4b1a      	ldr	r3, [pc, #104]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bffe:	4b19      	ldr	r3, [pc, #100]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c000:	2280      	movs	r2, #128	@ 0x80
 800c002:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c004:	4b17      	ldr	r3, [pc, #92]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c006:	2200      	movs	r2, #0
 800c008:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c00a:	4b16      	ldr	r3, [pc, #88]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c010:	4b14      	ldr	r3, [pc, #80]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c012:	2200      	movs	r2, #0
 800c014:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c016:	4b13      	ldr	r3, [pc, #76]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c018:	2200      	movs	r2, #0
 800c01a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c01c:	4b11      	ldr	r3, [pc, #68]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c01e:	0018      	movs	r0, r3
 800c020:	f007 fa9a 	bl	8013558 <HAL_DMA_Init>
 800c024:	1e03      	subs	r3, r0, #0
 800c026:	d001      	beq.n	800c02c <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 800c028:	f7fe fa72 	bl	800a510 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a0d      	ldr	r2, [pc, #52]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c030:	639a      	str	r2, [r3, #56]	@ 0x38
 800c032:	4b0c      	ldr	r3, [pc, #48]	@ (800c064 <HAL_I2C_MspInit+0x184>)
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c038:	2200      	movs	r2, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	2017      	movs	r0, #23
 800c03e:	f007 fa49 	bl	80134d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c042:	2017      	movs	r0, #23
 800c044:	f007 fa5b 	bl	80134fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800c048:	46c0      	nop			@ (mov r8, r8)
 800c04a:	46bd      	mov	sp, r7
 800c04c:	b01b      	add	sp, #108	@ 0x6c
 800c04e:	bd90      	pop	{r4, r7, pc}
 800c050:	40005400 	.word	0x40005400
 800c054:	40021000 	.word	0x40021000
 800c058:	50000400 	.word	0x50000400
 800c05c:	200004a4 	.word	0x200004a4
 800c060:	40020080 	.word	0x40020080
 800c064:	20000504 	.word	0x20000504
 800c068:	4002006c 	.word	0x4002006c

0800c06c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a13      	ldr	r2, [pc, #76]	@ (800c0c8 <HAL_I2C_MspDeInit+0x5c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d120      	bne.n	800c0c0 <HAL_I2C_MspDeInit+0x54>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800c07e:	4b13      	ldr	r3, [pc, #76]	@ (800c0cc <HAL_I2C_MspDeInit+0x60>)
 800c080:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c082:	4b12      	ldr	r3, [pc, #72]	@ (800c0cc <HAL_I2C_MspDeInit+0x60>)
 800c084:	4912      	ldr	r1, [pc, #72]	@ (800c0d0 <HAL_I2C_MspDeInit+0x64>)
 800c086:	400a      	ands	r2, r1
 800c088:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800c08a:	2380      	movs	r3, #128	@ 0x80
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	4a11      	ldr	r2, [pc, #68]	@ (800c0d4 <HAL_I2C_MspDeInit+0x68>)
 800c090:	0019      	movs	r1, r3
 800c092:	0010      	movs	r0, r2
 800c094:	f008 f980 	bl	8014398 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800c098:	2380      	movs	r3, #128	@ 0x80
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4a0d      	ldr	r2, [pc, #52]	@ (800c0d4 <HAL_I2C_MspDeInit+0x68>)
 800c09e:	0019      	movs	r1, r3
 800c0a0:	0010      	movs	r0, r2
 800c0a2:	f008 f979 	bl	8014398 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0aa:	0018      	movs	r0, r3
 800c0ac:	f007 fb00 	bl	80136b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	f007 fafb 	bl	80136b0 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800c0ba:	2017      	movs	r0, #23
 800c0bc:	f007 fa2f 	bl	801351e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800c0c0:	46c0      	nop			@ (mov r8, r8)
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	b002      	add	sp, #8
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	40005400 	.word	0x40005400
 800c0cc:	40021000 	.word	0x40021000
 800c0d0:	ffdfffff 	.word	0xffdfffff
 800c0d4:	50000400 	.word	0x50000400

0800c0d8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c0d8:	b590      	push	{r4, r7, lr}
 800c0da:	b095      	sub	sp, #84	@ 0x54
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c0e0:	240c      	movs	r4, #12
 800c0e2:	193b      	adds	r3, r7, r4
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	2344      	movs	r3, #68	@ 0x44
 800c0e8:	001a      	movs	r2, r3
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	f00f ff3a 	bl	801bf64 <memset>
  if(hrtc->Instance==RTC)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a1a      	ldr	r2, [pc, #104]	@ (800c160 <HAL_RTC_MspInit+0x88>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d12e      	bne.n	800c158 <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c0fa:	193b      	adds	r3, r7, r4
 800c0fc:	2280      	movs	r2, #128	@ 0x80
 800c0fe:	0212      	lsls	r2, r2, #8
 800c100:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c102:	193b      	adds	r3, r7, r4
 800c104:	2280      	movs	r2, #128	@ 0x80
 800c106:	0052      	lsls	r2, r2, #1
 800c108:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c10a:	193b      	adds	r3, r7, r4
 800c10c:	0018      	movs	r0, r3
 800c10e:	f00b fb89 	bl	8017824 <HAL_RCCEx_PeriphCLKConfig>
 800c112:	1e03      	subs	r3, r0, #0
 800c114:	d001      	beq.n	800c11a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c116:	f7fe f9fb 	bl	800a510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c11a:	4a12      	ldr	r2, [pc, #72]	@ (800c164 <HAL_RTC_MspInit+0x8c>)
 800c11c:	2390      	movs	r3, #144	@ 0x90
 800c11e:	58d3      	ldr	r3, [r2, r3]
 800c120:	4910      	ldr	r1, [pc, #64]	@ (800c164 <HAL_RTC_MspInit+0x8c>)
 800c122:	2280      	movs	r2, #128	@ 0x80
 800c124:	0212      	lsls	r2, r2, #8
 800c126:	4313      	orrs	r3, r2
 800c128:	2290      	movs	r2, #144	@ 0x90
 800c12a:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c12c:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <HAL_RTC_MspInit+0x8c>)
 800c12e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c130:	4b0c      	ldr	r3, [pc, #48]	@ (800c164 <HAL_RTC_MspInit+0x8c>)
 800c132:	2180      	movs	r1, #128	@ 0x80
 800c134:	00c9      	lsls	r1, r1, #3
 800c136:	430a      	orrs	r2, r1
 800c138:	659a      	str	r2, [r3, #88]	@ 0x58
 800c13a:	4b0a      	ldr	r3, [pc, #40]	@ (800c164 <HAL_RTC_MspInit+0x8c>)
 800c13c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c13e:	2380      	movs	r3, #128	@ 0x80
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	4013      	ands	r3, r2
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800c148:	2200      	movs	r2, #0
 800c14a:	2100      	movs	r1, #0
 800c14c:	2002      	movs	r0, #2
 800c14e:	f007 f9c1 	bl	80134d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800c152:	2002      	movs	r0, #2
 800c154:	f007 f9d3 	bl	80134fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800c158:	46c0      	nop			@ (mov r8, r8)
 800c15a:	46bd      	mov	sp, r7
 800c15c:	b015      	add	sp, #84	@ 0x54
 800c15e:	bd90      	pop	{r4, r7, pc}
 800c160:	40002800 	.word	0x40002800
 800c164:	40021000 	.word	0x40021000

0800c168 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b097      	sub	sp, #92	@ 0x5c
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c170:	2414      	movs	r4, #20
 800c172:	193b      	adds	r3, r7, r4
 800c174:	0018      	movs	r0, r3
 800c176:	2344      	movs	r3, #68	@ 0x44
 800c178:	001a      	movs	r2, r3
 800c17a:	2100      	movs	r1, #0
 800c17c:	f00f fef2 	bl	801bf64 <memset>
  if(htim_base->Instance==TIM1)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a23      	ldr	r2, [pc, #140]	@ (800c214 <HAL_TIM_Base_MspInit+0xac>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d11d      	bne.n	800c1c6 <HAL_TIM_Base_MspInit+0x5e>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800c18a:	193b      	adds	r3, r7, r4
 800c18c:	2280      	movs	r2, #128	@ 0x80
 800c18e:	00d2      	lsls	r2, r2, #3
 800c190:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800c192:	193b      	adds	r3, r7, r4
 800c194:	2200      	movs	r2, #0
 800c196:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c198:	193b      	adds	r3, r7, r4
 800c19a:	0018      	movs	r0, r3
 800c19c:	f00b fb42 	bl	8017824 <HAL_RCCEx_PeriphCLKConfig>
 800c1a0:	1e03      	subs	r3, r0, #0
 800c1a2:	d001      	beq.n	800c1a8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800c1a4:	f7fe f9b4 	bl	800a510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1ae:	2180      	movs	r1, #128	@ 0x80
 800c1b0:	0109      	lsls	r1, r1, #4
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	661a      	str	r2, [r3, #96]	@ 0x60
 800c1b6:	4b18      	ldr	r3, [pc, #96]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c1ba:	2380      	movs	r3, #128	@ 0x80
 800c1bc:	011b      	lsls	r3, r3, #4
 800c1be:	4013      	ands	r3, r2
 800c1c0:	613b      	str	r3, [r7, #16]
 800c1c2:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800c1c4:	e022      	b.n	800c20c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a14      	ldr	r2, [pc, #80]	@ (800c21c <HAL_TIM_Base_MspInit+0xb4>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d10c      	bne.n	800c1ea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c1d0:	4b11      	ldr	r3, [pc, #68]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c1d4:	4b10      	ldr	r3, [pc, #64]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1d6:	2102      	movs	r1, #2
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	659a      	str	r2, [r3, #88]	@ 0x58
 800c1dc:	4b0e      	ldr	r3, [pc, #56]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1e0:	2202      	movs	r2, #2
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
}
 800c1e8:	e010      	b.n	800c20c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM6)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a0c      	ldr	r2, [pc, #48]	@ (800c220 <HAL_TIM_Base_MspInit+0xb8>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d10b      	bne.n	800c20c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c1f4:	4b08      	ldr	r3, [pc, #32]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c1f8:	4b07      	ldr	r3, [pc, #28]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c1fa:	2110      	movs	r1, #16
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	659a      	str	r2, [r3, #88]	@ 0x58
 800c200:	4b05      	ldr	r3, [pc, #20]	@ (800c218 <HAL_TIM_Base_MspInit+0xb0>)
 800c202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c204:	2210      	movs	r2, #16
 800c206:	4013      	ands	r3, r2
 800c208:	60bb      	str	r3, [r7, #8]
 800c20a:	68bb      	ldr	r3, [r7, #8]
}
 800c20c:	46c0      	nop			@ (mov r8, r8)
 800c20e:	46bd      	mov	sp, r7
 800c210:	b017      	add	sp, #92	@ 0x5c
 800c212:	bd90      	pop	{r4, r7, pc}
 800c214:	40012c00 	.word	0x40012c00
 800c218:	40021000 	.word	0x40021000
 800c21c:	40000400 	.word	0x40000400
 800c220:	40001000 	.word	0x40001000

0800c224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c224:	b590      	push	{r4, r7, lr}
 800c226:	b08b      	sub	sp, #44	@ 0x2c
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c22c:	2414      	movs	r4, #20
 800c22e:	193b      	adds	r3, r7, r4
 800c230:	0018      	movs	r0, r3
 800c232:	2314      	movs	r3, #20
 800c234:	001a      	movs	r2, r3
 800c236:	2100      	movs	r1, #0
 800c238:	f00f fe94 	bl	801bf64 <memset>
  if(htim->Instance==TIM1)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a29      	ldr	r2, [pc, #164]	@ (800c2e8 <HAL_TIM_MspPostInit+0xc4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d124      	bne.n	800c290 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c246:	4b29      	ldr	r3, [pc, #164]	@ (800c2ec <HAL_TIM_MspPostInit+0xc8>)
 800c248:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c24a:	4b28      	ldr	r3, [pc, #160]	@ (800c2ec <HAL_TIM_MspPostInit+0xc8>)
 800c24c:	2101      	movs	r1, #1
 800c24e:	430a      	orrs	r2, r1
 800c250:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c252:	4b26      	ldr	r3, [pc, #152]	@ (800c2ec <HAL_TIM_MspPostInit+0xc8>)
 800c254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c256:	2201      	movs	r2, #1
 800c258:	4013      	ands	r3, r2
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c25e:	193b      	adds	r3, r7, r4
 800c260:	2280      	movs	r2, #128	@ 0x80
 800c262:	00d2      	lsls	r2, r2, #3
 800c264:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c266:	0021      	movs	r1, r4
 800c268:	187b      	adds	r3, r7, r1
 800c26a:	2202      	movs	r2, #2
 800c26c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c26e:	187b      	adds	r3, r7, r1
 800c270:	2200      	movs	r2, #0
 800c272:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c274:	187b      	adds	r3, r7, r1
 800c276:	2200      	movs	r2, #0
 800c278:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c27a:	187b      	adds	r3, r7, r1
 800c27c:	2201      	movs	r2, #1
 800c27e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c280:	187a      	adds	r2, r7, r1
 800c282:	23a0      	movs	r3, #160	@ 0xa0
 800c284:	05db      	lsls	r3, r3, #23
 800c286:	0011      	movs	r1, r2
 800c288:	0018      	movs	r0, r3
 800c28a:	f007 ff11 	bl	80140b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c28e:	e026      	b.n	800c2de <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a16      	ldr	r2, [pc, #88]	@ (800c2f0 <HAL_TIM_MspPostInit+0xcc>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d121      	bne.n	800c2de <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c29a:	4b14      	ldr	r3, [pc, #80]	@ (800c2ec <HAL_TIM_MspPostInit+0xc8>)
 800c29c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c29e:	4b13      	ldr	r3, [pc, #76]	@ (800c2ec <HAL_TIM_MspPostInit+0xc8>)
 800c2a0:	2104      	movs	r1, #4
 800c2a2:	430a      	orrs	r2, r1
 800c2a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c2a6:	4b11      	ldr	r3, [pc, #68]	@ (800c2ec <HAL_TIM_MspPostInit+0xc8>)
 800c2a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c2b2:	2114      	movs	r1, #20
 800c2b4:	187b      	adds	r3, r7, r1
 800c2b6:	2280      	movs	r2, #128	@ 0x80
 800c2b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ba:	187b      	adds	r3, r7, r1
 800c2bc:	2202      	movs	r2, #2
 800c2be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2c0:	187b      	adds	r3, r7, r1
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2c6:	187b      	adds	r3, r7, r1
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c2cc:	187b      	adds	r3, r7, r1
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c2d2:	187b      	adds	r3, r7, r1
 800c2d4:	4a07      	ldr	r2, [pc, #28]	@ (800c2f4 <HAL_TIM_MspPostInit+0xd0>)
 800c2d6:	0019      	movs	r1, r3
 800c2d8:	0010      	movs	r0, r2
 800c2da:	f007 fee9 	bl	80140b0 <HAL_GPIO_Init>
}
 800c2de:	46c0      	nop			@ (mov r8, r8)
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	b00b      	add	sp, #44	@ 0x2c
 800c2e4:	bd90      	pop	{r4, r7, pc}
 800c2e6:	46c0      	nop			@ (mov r8, r8)
 800c2e8:	40012c00 	.word	0x40012c00
 800c2ec:	40021000 	.word	0x40021000
 800c2f0:	40000400 	.word	0x40000400
 800c2f4:	50000800 	.word	0x50000800

0800c2f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c2f8:	b590      	push	{r4, r7, lr}
 800c2fa:	b09d      	sub	sp, #116	@ 0x74
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c300:	235c      	movs	r3, #92	@ 0x5c
 800c302:	18fb      	adds	r3, r7, r3
 800c304:	0018      	movs	r0, r3
 800c306:	2314      	movs	r3, #20
 800c308:	001a      	movs	r2, r3
 800c30a:	2100      	movs	r1, #0
 800c30c:	f00f fe2a 	bl	801bf64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c310:	2418      	movs	r4, #24
 800c312:	193b      	adds	r3, r7, r4
 800c314:	0018      	movs	r0, r3
 800c316:	2344      	movs	r3, #68	@ 0x44
 800c318:	001a      	movs	r2, r3
 800c31a:	2100      	movs	r1, #0
 800c31c:	f00f fe22 	bl	801bf64 <memset>
  if(huart->Instance==USART2)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4aa0      	ldr	r2, [pc, #640]	@ (800c5a8 <HAL_UART_MspInit+0x2b0>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d000      	beq.n	800c32c <HAL_UART_MspInit+0x34>
 800c32a:	e09a      	b.n	800c462 <HAL_UART_MspInit+0x16a>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c32c:	193b      	adds	r3, r7, r4
 800c32e:	2202      	movs	r2, #2
 800c330:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c332:	193b      	adds	r3, r7, r4
 800c334:	2200      	movs	r2, #0
 800c336:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c338:	193b      	adds	r3, r7, r4
 800c33a:	0018      	movs	r0, r3
 800c33c:	f00b fa72 	bl	8017824 <HAL_RCCEx_PeriphCLKConfig>
 800c340:	1e03      	subs	r3, r0, #0
 800c342:	d001      	beq.n	800c348 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800c344:	f7fe f8e4 	bl	800a510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c348:	4b98      	ldr	r3, [pc, #608]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c34a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c34c:	4b97      	ldr	r3, [pc, #604]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c34e:	2180      	movs	r1, #128	@ 0x80
 800c350:	0289      	lsls	r1, r1, #10
 800c352:	430a      	orrs	r2, r1
 800c354:	659a      	str	r2, [r3, #88]	@ 0x58
 800c356:	4b95      	ldr	r3, [pc, #596]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c358:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c35a:	2380      	movs	r3, #128	@ 0x80
 800c35c:	029b      	lsls	r3, r3, #10
 800c35e:	4013      	ands	r3, r2
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c364:	4b91      	ldr	r3, [pc, #580]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c368:	4b90      	ldr	r3, [pc, #576]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c36a:	2101      	movs	r1, #1
 800c36c:	430a      	orrs	r2, r1
 800c36e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c370:	4b8e      	ldr	r3, [pc, #568]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c374:	2201      	movs	r2, #1
 800c376:	4013      	ands	r3, r2
 800c378:	613b      	str	r3, [r7, #16]
 800c37a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c37c:	215c      	movs	r1, #92	@ 0x5c
 800c37e:	187b      	adds	r3, r7, r1
 800c380:	220c      	movs	r2, #12
 800c382:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c384:	187b      	adds	r3, r7, r1
 800c386:	2202      	movs	r2, #2
 800c388:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c38a:	187b      	adds	r3, r7, r1
 800c38c:	2200      	movs	r2, #0
 800c38e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c390:	187b      	adds	r3, r7, r1
 800c392:	2200      	movs	r2, #0
 800c394:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c396:	187b      	adds	r3, r7, r1
 800c398:	2207      	movs	r2, #7
 800c39a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c39c:	187a      	adds	r2, r7, r1
 800c39e:	23a0      	movs	r3, #160	@ 0xa0
 800c3a0:	05db      	lsls	r3, r3, #23
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	f007 fe83 	bl	80140b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800c3aa:	4b81      	ldr	r3, [pc, #516]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3ac:	4a81      	ldr	r2, [pc, #516]	@ (800c5b4 <HAL_UART_MspInit+0x2bc>)
 800c3ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800c3b0:	4b7f      	ldr	r3, [pc, #508]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3b2:	2247      	movs	r2, #71	@ 0x47
 800c3b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c3b6:	4b7e      	ldr	r3, [pc, #504]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3bc:	4b7c      	ldr	r3, [pc, #496]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c3c2:	4b7b      	ldr	r3, [pc, #492]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3c4:	2280      	movs	r2, #128	@ 0x80
 800c3c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c3c8:	4b79      	ldr	r3, [pc, #484]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c3ce:	4b78      	ldr	r3, [pc, #480]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800c3d4:	4b76      	ldr	r3, [pc, #472]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c3da:	4b75      	ldr	r3, [pc, #468]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c3e0:	4b73      	ldr	r3, [pc, #460]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	f007 f8b8 	bl	8013558 <HAL_DMA_Init>
 800c3e8:	1e03      	subs	r3, r0, #0
 800c3ea:	d001      	beq.n	800c3f0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800c3ec:	f7fe f890 	bl	800a510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2180      	movs	r1, #128	@ 0x80
 800c3f4:	4a6e      	ldr	r2, [pc, #440]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3f6:	505a      	str	r2, [r3, r1]
 800c3f8:	4b6d      	ldr	r3, [pc, #436]	@ (800c5b0 <HAL_UART_MspInit+0x2b8>)
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800c3fe:	4b6e      	ldr	r3, [pc, #440]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c400:	4a6e      	ldr	r2, [pc, #440]	@ (800c5bc <HAL_UART_MspInit+0x2c4>)
 800c402:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800c404:	4b6c      	ldr	r3, [pc, #432]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c406:	2248      	movs	r2, #72	@ 0x48
 800c408:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c40a:	4b6b      	ldr	r3, [pc, #428]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c40c:	2210      	movs	r2, #16
 800c40e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c410:	4b69      	ldr	r3, [pc, #420]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c412:	2200      	movs	r2, #0
 800c414:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c416:	4b68      	ldr	r3, [pc, #416]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c418:	2280      	movs	r2, #128	@ 0x80
 800c41a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c41c:	4b66      	ldr	r3, [pc, #408]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c41e:	2200      	movs	r2, #0
 800c420:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c422:	4b65      	ldr	r3, [pc, #404]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c424:	2200      	movs	r2, #0
 800c426:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c428:	4b63      	ldr	r3, [pc, #396]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c42e:	4b62      	ldr	r3, [pc, #392]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c430:	2200      	movs	r2, #0
 800c432:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c434:	4b60      	ldr	r3, [pc, #384]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c436:	0018      	movs	r0, r3
 800c438:	f007 f88e 	bl	8013558 <HAL_DMA_Init>
 800c43c:	1e03      	subs	r3, r0, #0
 800c43e:	d001      	beq.n	800c444 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 800c440:	f7fe f866 	bl	800a510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a5c      	ldr	r2, [pc, #368]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c448:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c44a:	4b5b      	ldr	r3, [pc, #364]	@ (800c5b8 <HAL_UART_MspInit+0x2c0>)
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800c450:	2200      	movs	r2, #0
 800c452:	2100      	movs	r1, #0
 800c454:	201c      	movs	r0, #28
 800c456:	f007 f83d 	bl	80134d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800c45a:	201c      	movs	r0, #28
 800c45c:	f007 f84f 	bl	80134fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 800c460:	e09e      	b.n	800c5a0 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a56      	ldr	r2, [pc, #344]	@ (800c5c0 <HAL_UART_MspInit+0x2c8>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d000      	beq.n	800c46e <HAL_UART_MspInit+0x176>
 800c46c:	e098      	b.n	800c5a0 <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 800c46e:	2118      	movs	r1, #24
 800c470:	187b      	adds	r3, r7, r1
 800c472:	2280      	movs	r2, #128	@ 0x80
 800c474:	0292      	lsls	r2, r2, #10
 800c476:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c478:	187b      	adds	r3, r7, r1
 800c47a:	0018      	movs	r0, r3
 800c47c:	f00b f9d2 	bl	8017824 <HAL_RCCEx_PeriphCLKConfig>
 800c480:	1e03      	subs	r3, r0, #0
 800c482:	d001      	beq.n	800c488 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800c484:	f7fe f844 	bl	800a510 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 800c488:	4b48      	ldr	r3, [pc, #288]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c48a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c48c:	4b47      	ldr	r3, [pc, #284]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c48e:	2180      	movs	r1, #128	@ 0x80
 800c490:	0309      	lsls	r1, r1, #12
 800c492:	430a      	orrs	r2, r1
 800c494:	659a      	str	r2, [r3, #88]	@ 0x58
 800c496:	4b45      	ldr	r3, [pc, #276]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c498:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c49a:	2380      	movs	r3, #128	@ 0x80
 800c49c:	031b      	lsls	r3, r3, #12
 800c49e:	4013      	ands	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4a4:	4b41      	ldr	r3, [pc, #260]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c4a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4a8:	4b40      	ldr	r3, [pc, #256]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	430a      	orrs	r2, r1
 800c4ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c4b0:	4b3e      	ldr	r3, [pc, #248]	@ (800c5ac <HAL_UART_MspInit+0x2b4>)
 800c4b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	60bb      	str	r3, [r7, #8]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c4bc:	215c      	movs	r1, #92	@ 0x5c
 800c4be:	187b      	adds	r3, r7, r1
 800c4c0:	2203      	movs	r2, #3
 800c4c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4c4:	187b      	adds	r3, r7, r1
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ca:	187b      	adds	r3, r7, r1
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4d0:	187b      	adds	r3, r7, r1
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 800c4d6:	187b      	adds	r3, r7, r1
 800c4d8:	2208      	movs	r2, #8
 800c4da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4dc:	187a      	adds	r2, r7, r1
 800c4de:	23a0      	movs	r3, #160	@ 0xa0
 800c4e0:	05db      	lsls	r3, r3, #23
 800c4e2:	0011      	movs	r1, r2
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	f007 fde3 	bl	80140b0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800c4ea:	4b36      	ldr	r3, [pc, #216]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c4ec:	4a36      	ldr	r2, [pc, #216]	@ (800c5c8 <HAL_UART_MspInit+0x2d0>)
 800c4ee:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800c4f0:	4b34      	ldr	r3, [pc, #208]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c4f2:	224b      	movs	r2, #75	@ 0x4b
 800c4f4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4f6:	4b33      	ldr	r3, [pc, #204]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c4fc:	4b31      	ldr	r3, [pc, #196]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c502:	4b30      	ldr	r3, [pc, #192]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c504:	2280      	movs	r2, #128	@ 0x80
 800c506:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c508:	4b2e      	ldr	r3, [pc, #184]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c50e:	4b2d      	ldr	r3, [pc, #180]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c510:	2200      	movs	r2, #0
 800c512:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800c514:	4b2b      	ldr	r3, [pc, #172]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c516:	2200      	movs	r2, #0
 800c518:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c51a:	4b2a      	ldr	r3, [pc, #168]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800c520:	4b28      	ldr	r3, [pc, #160]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c522:	0018      	movs	r0, r3
 800c524:	f007 f818 	bl	8013558 <HAL_DMA_Init>
 800c528:	1e03      	subs	r3, r0, #0
 800c52a:	d001      	beq.n	800c530 <HAL_UART_MspInit+0x238>
      Error_Handler();
 800c52c:	f7fd fff0 	bl	800a510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2180      	movs	r1, #128	@ 0x80
 800c534:	4a23      	ldr	r2, [pc, #140]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c536:	505a      	str	r2, [r3, r1]
 800c538:	4b22      	ldr	r3, [pc, #136]	@ (800c5c4 <HAL_UART_MspInit+0x2cc>)
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 800c53e:	4b23      	ldr	r3, [pc, #140]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c540:	4a23      	ldr	r2, [pc, #140]	@ (800c5d0 <HAL_UART_MspInit+0x2d8>)
 800c542:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800c544:	4b21      	ldr	r3, [pc, #132]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c546:	224c      	movs	r2, #76	@ 0x4c
 800c548:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c54a:	4b20      	ldr	r3, [pc, #128]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c54c:	2210      	movs	r2, #16
 800c54e:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c550:	4b1e      	ldr	r3, [pc, #120]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c552:	2200      	movs	r2, #0
 800c554:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c556:	4b1d      	ldr	r3, [pc, #116]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c558:	2280      	movs	r2, #128	@ 0x80
 800c55a:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c55c:	4b1b      	ldr	r3, [pc, #108]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c55e:	2200      	movs	r2, #0
 800c560:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c562:	4b1a      	ldr	r3, [pc, #104]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c564:	2200      	movs	r2, #0
 800c566:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800c568:	4b18      	ldr	r3, [pc, #96]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c56e:	4b17      	ldr	r3, [pc, #92]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c570:	2200      	movs	r2, #0
 800c572:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800c574:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c576:	0018      	movs	r0, r3
 800c578:	f006 ffee 	bl	8013558 <HAL_DMA_Init>
 800c57c:	1e03      	subs	r3, r0, #0
 800c57e:	d001      	beq.n	800c584 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800c580:	f7fd ffc6 	bl	800a510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a11      	ldr	r2, [pc, #68]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c588:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c58a:	4b10      	ldr	r3, [pc, #64]	@ (800c5cc <HAL_UART_MspInit+0x2d4>)
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 800c590:	2200      	movs	r2, #0
 800c592:	2100      	movs	r1, #0
 800c594:	201e      	movs	r0, #30
 800c596:	f006 ff9d 	bl	80134d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 800c59a:	201e      	movs	r0, #30
 800c59c:	f006 ffaf 	bl	80134fe <HAL_NVIC_EnableIRQ>
}
 800c5a0:	46c0      	nop			@ (mov r8, r8)
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	b01d      	add	sp, #116	@ 0x74
 800c5a6:	bd90      	pop	{r4, r7, pc}
 800c5a8:	40004400 	.word	0x40004400
 800c5ac:	40021000 	.word	0x40021000
 800c5b0:	200007b4 	.word	0x200007b4
 800c5b4:	40020058 	.word	0x40020058
 800c5b8:	20000814 	.word	0x20000814
 800c5bc:	40020044 	.word	0x40020044
 800c5c0:	40004c00 	.word	0x40004c00
 800c5c4:	20000874 	.word	0x20000874
 800c5c8:	4002001c 	.word	0x4002001c
 800c5cc:	200008d4 	.word	0x200008d4
 800c5d0:	40020030 	.word	0x40020030

0800c5d4 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a20      	ldr	r2, [pc, #128]	@ (800c664 <HAL_UART_MspDeInit+0x90>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d11a      	bne.n	800c61c <HAL_UART_MspDeInit+0x48>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800c5e6:	4b20      	ldr	r3, [pc, #128]	@ (800c668 <HAL_UART_MspDeInit+0x94>)
 800c5e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c5ea:	4b1f      	ldr	r3, [pc, #124]	@ (800c668 <HAL_UART_MspDeInit+0x94>)
 800c5ec:	491f      	ldr	r1, [pc, #124]	@ (800c66c <HAL_UART_MspDeInit+0x98>)
 800c5ee:	400a      	ands	r2, r1
 800c5f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800c5f2:	23a0      	movs	r3, #160	@ 0xa0
 800c5f4:	05db      	lsls	r3, r3, #23
 800c5f6:	210c      	movs	r1, #12
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	f007 fecd 	bl	8014398 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2280      	movs	r2, #128	@ 0x80
 800c602:	589b      	ldr	r3, [r3, r2]
 800c604:	0018      	movs	r0, r3
 800c606:	f007 f853 	bl	80136b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c60e:	0018      	movs	r0, r3
 800c610:	f007 f84e 	bl	80136b0 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_LPUART2_IRQn);
 800c614:	201c      	movs	r0, #28
 800c616:	f006 ff82 	bl	801351e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART4_MspDeInit 1 */

    /* USER CODE END USART4_MspDeInit 1 */
  }

}
 800c61a:	e01e      	b.n	800c65a <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==USART4)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a13      	ldr	r2, [pc, #76]	@ (800c670 <HAL_UART_MspDeInit+0x9c>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d119      	bne.n	800c65a <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_USART4_CLK_DISABLE();
 800c626:	4b10      	ldr	r3, [pc, #64]	@ (800c668 <HAL_UART_MspDeInit+0x94>)
 800c628:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c62a:	4b0f      	ldr	r3, [pc, #60]	@ (800c668 <HAL_UART_MspDeInit+0x94>)
 800c62c:	4911      	ldr	r1, [pc, #68]	@ (800c674 <HAL_UART_MspDeInit+0xa0>)
 800c62e:	400a      	ands	r2, r1
 800c630:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800c632:	23a0      	movs	r3, #160	@ 0xa0
 800c634:	05db      	lsls	r3, r3, #23
 800c636:	2103      	movs	r1, #3
 800c638:	0018      	movs	r0, r3
 800c63a:	f007 fead 	bl	8014398 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2280      	movs	r2, #128	@ 0x80
 800c642:	589b      	ldr	r3, [r3, r2]
 800c644:	0018      	movs	r0, r3
 800c646:	f007 f833 	bl	80136b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c64e:	0018      	movs	r0, r3
 800c650:	f007 f82e 	bl	80136b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART4_LPUART3_IRQn);
 800c654:	201e      	movs	r0, #30
 800c656:	f006 ff62 	bl	801351e <HAL_NVIC_DisableIRQ>
}
 800c65a:	46c0      	nop			@ (mov r8, r8)
 800c65c:	46bd      	mov	sp, r7
 800c65e:	b002      	add	sp, #8
 800c660:	bd80      	pop	{r7, pc}
 800c662:	46c0      	nop			@ (mov r8, r8)
 800c664:	40004400 	.word	0x40004400
 800c668:	40021000 	.word	0x40021000
 800c66c:	fffdffff 	.word	0xfffdffff
 800c670:	40004c00 	.word	0x40004c00
 800c674:	fff7ffff 	.word	0xfff7ffff

0800c678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c67c:	46c0      	nop			@ (mov r8, r8)
 800c67e:	e7fd      	b.n	800c67c <NMI_Handler+0x4>

0800c680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c684:	46c0      	nop			@ (mov r8, r8)
 800c686:	e7fd      	b.n	800c684 <HardFault_Handler+0x4>

0800c688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c68c:	46c0      	nop			@ (mov r8, r8)
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c696:	46c0      	nop			@ (mov r8, r8)
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c6a0:	f005 fba6 	bl	8011df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c6a4:	46c0      	nop			@ (mov r8, r8)
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c6b0:	4b03      	ldr	r3, [pc, #12]	@ (800c6c0 <RTC_TAMP_IRQHandler+0x14>)
 800c6b2:	0018      	movs	r0, r3
 800c6b4:	f00c fd08 	bl	80190c8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800c6b8:	46c0      	nop			@ (mov r8, r8)
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	46c0      	nop			@ (mov r8, r8)
 800c6c0:	20000578 	.word	0x20000578

0800c6c4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800c6c8:	2380      	movs	r3, #128	@ 0x80
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	f007 ff99 	bl	8014604 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800c6d2:	46c0      	nop			@ (mov r8, r8)
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c6dc:	4b05      	ldr	r3, [pc, #20]	@ (800c6f4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c6de:	0018      	movs	r0, r3
 800c6e0:	f007 f9cc 	bl	8013a7c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c6e4:	4b04      	ldr	r3, [pc, #16]	@ (800c6f8 <DMA1_Channel2_3_IRQHandler+0x20>)
 800c6e6:	0018      	movs	r0, r3
 800c6e8:	f007 f9c8 	bl	8013a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c6ec:	46c0      	nop			@ (mov r8, r8)
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	46c0      	nop			@ (mov r8, r8)
 800c6f4:	20000874 	.word	0x20000874
 800c6f8:	200008d4 	.word	0x200008d4

0800c6fc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c700:	4b09      	ldr	r3, [pc, #36]	@ (800c728 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 800c702:	0018      	movs	r0, r3
 800c704:	f007 f9ba 	bl	8013a7c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c708:	4b08      	ldr	r3, [pc, #32]	@ (800c72c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800c70a:	0018      	movs	r0, r3
 800c70c:	f007 f9b6 	bl	8013a7c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c710:	4b07      	ldr	r3, [pc, #28]	@ (800c730 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 800c712:	0018      	movs	r0, r3
 800c714:	f007 f9b2 	bl	8013a7c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c718:	4b06      	ldr	r3, [pc, #24]	@ (800c734 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800c71a:	0018      	movs	r0, r3
 800c71c:	f007 f9ae 	bl	8013a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 800c720:	46c0      	nop			@ (mov r8, r8)
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	46c0      	nop			@ (mov r8, r8)
 800c728:	20000814 	.word	0x20000814
 800c72c:	200007b4 	.word	0x200007b4
 800c730:	20000504 	.word	0x20000504
 800c734:	200004a4 	.word	0x200004a4

0800c738 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c73c:	4b09      	ldr	r3, [pc, #36]	@ (800c764 <I2C1_IRQHandler+0x2c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	699a      	ldr	r2, [r3, #24]
 800c742:	23e0      	movs	r3, #224	@ 0xe0
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	4013      	ands	r3, r2
 800c748:	d004      	beq.n	800c754 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c74a:	4b06      	ldr	r3, [pc, #24]	@ (800c764 <I2C1_IRQHandler+0x2c>)
 800c74c:	0018      	movs	r0, r3
 800c74e:	f008 fa93 	bl	8014c78 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c752:	e003      	b.n	800c75c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c754:	4b03      	ldr	r3, [pc, #12]	@ (800c764 <I2C1_IRQHandler+0x2c>)
 800c756:	0018      	movs	r0, r3
 800c758:	f008 fa74 	bl	8014c44 <HAL_I2C_EV_IRQHandler>
}
 800c75c:	46c0      	nop			@ (mov r8, r8)
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	46c0      	nop			@ (mov r8, r8)
 800c764:	20000450 	.word	0x20000450

0800c768 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c76c:	4b03      	ldr	r3, [pc, #12]	@ (800c77c <USART2_LPUART2_IRQHandler+0x14>)
 800c76e:	0018      	movs	r0, r3
 800c770:	f00d fff4 	bl	801a75c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800c774:	46c0      	nop			@ (mov r8, r8)
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	46c0      	nop			@ (mov r8, r8)
 800c77c:	2000068c 	.word	0x2000068c

0800c780 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c784:	4b03      	ldr	r3, [pc, #12]	@ (800c794 <USART4_LPUART3_IRQHandler+0x14>)
 800c786:	0018      	movs	r0, r3
 800c788:	f00d ffe8 	bl	801a75c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 800c78c:	46c0      	nop			@ (mov r8, r8)
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	46c0      	nop			@ (mov r8, r8)
 800c794:	20000720 	.word	0x20000720

0800c798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c7a0:	4a14      	ldr	r2, [pc, #80]	@ (800c7f4 <_sbrk+0x5c>)
 800c7a2:	4b15      	ldr	r3, [pc, #84]	@ (800c7f8 <_sbrk+0x60>)
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c7ac:	4b13      	ldr	r3, [pc, #76]	@ (800c7fc <_sbrk+0x64>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c7b4:	4b11      	ldr	r3, [pc, #68]	@ (800c7fc <_sbrk+0x64>)
 800c7b6:	4a12      	ldr	r2, [pc, #72]	@ (800c800 <_sbrk+0x68>)
 800c7b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c7ba:	4b10      	ldr	r3, [pc, #64]	@ (800c7fc <_sbrk+0x64>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	18d3      	adds	r3, r2, r3
 800c7c2:	693a      	ldr	r2, [r7, #16]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d207      	bcs.n	800c7d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c7c8:	f00f fc0a 	bl	801bfe0 <__errno>
 800c7cc:	0003      	movs	r3, r0
 800c7ce:	220c      	movs	r2, #12
 800c7d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	425b      	negs	r3, r3
 800c7d6:	e009      	b.n	800c7ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c7d8:	4b08      	ldr	r3, [pc, #32]	@ (800c7fc <_sbrk+0x64>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c7de:	4b07      	ldr	r3, [pc, #28]	@ (800c7fc <_sbrk+0x64>)
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	18d2      	adds	r2, r2, r3
 800c7e6:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <_sbrk+0x64>)
 800c7e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
}
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	b006      	add	sp, #24
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20008000 	.word	0x20008000
 800c7f8:	00000400 	.word	0x00000400
 800c7fc:	20002204 	.word	0x20002204
 800c800:	200023d8 	.word	0x200023d8

0800c804 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c80a:	4b12      	ldr	r3, [pc, #72]	@ (800c854 <SystemInit+0x50>)
 800c80c:	2280      	movs	r2, #128	@ 0x80
 800c80e:	0512      	lsls	r2, r2, #20
 800c810:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800c812:	4a11      	ldr	r2, [pc, #68]	@ (800c858 <SystemInit+0x54>)
 800c814:	2380      	movs	r3, #128	@ 0x80
 800c816:	58d3      	ldr	r3, [r2, r3]
 800c818:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800c81a:	4b0f      	ldr	r3, [pc, #60]	@ (800c858 <SystemInit+0x54>)
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	2380      	movs	r3, #128	@ 0x80
 800c824:	025b      	lsls	r3, r3, #9
 800c826:	4013      	ands	r3, r2
 800c828:	d010      	beq.n	800c84c <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	22ff      	movs	r2, #255	@ 0xff
 800c82e:	4013      	ands	r3, r2
 800c830:	2bcc      	cmp	r3, #204	@ 0xcc
 800c832:	d00b      	beq.n	800c84c <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	22ff      	movs	r2, #255	@ 0xff
 800c838:	4013      	ands	r3, r2
 800c83a:	2baa      	cmp	r3, #170	@ 0xaa
 800c83c:	d006      	beq.n	800c84c <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800c83e:	4b06      	ldr	r3, [pc, #24]	@ (800c858 <SystemInit+0x54>)
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	4b05      	ldr	r3, [pc, #20]	@ (800c858 <SystemInit+0x54>)
 800c844:	2180      	movs	r1, #128	@ 0x80
 800c846:	02c9      	lsls	r1, r1, #11
 800c848:	430a      	orrs	r2, r1
 800c84a:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800c84c:	46c0      	nop			@ (mov r8, r8)
 800c84e:	46bd      	mov	sp, r7
 800c850:	b002      	add	sp, #8
 800c852:	bd80      	pop	{r7, pc}
 800c854:	e000ed00 	.word	0xe000ed00
 800c858:	40022000 	.word	0x40022000

0800c85c <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0


	cnttemp++;
 800c862:	4bc5      	ldr	r3, [pc, #788]	@ (800cb78 <temper+0x31c>)
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	3301      	adds	r3, #1
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	4bc3      	ldr	r3, [pc, #780]	@ (800cb78 <temper+0x31c>)
 800c86c:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 800c86e:	4bc2      	ldr	r3, [pc, #776]	@ (800cb78 <temper+0x31c>)
 800c870:	781a      	ldrb	r2, [r3, #0]
 800c872:	4bc2      	ldr	r3, [pc, #776]	@ (800cb7c <temper+0x320>)
 800c874:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800c876:	4bc1      	ldr	r3, [pc, #772]	@ (800cb7c <temper+0x320>)
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	2b31      	cmp	r3, #49	@ 0x31
 800c87c:	d801      	bhi.n	800c882 <temper+0x26>
 800c87e:	f000 fd8b 	bl	800d398 <temper+0xb3c>
		goto tempe05;  // Sí no tomes muestras
 800c882:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800c884:	4bbe      	ldr	r3, [pc, #760]	@ (800cb80 <temper+0x324>)
 800c886:	0018      	movs	r0, r3
 800c888:	f7fa fc23 	bl	80070d2 <decwreg>
		decwreg(&retcncfe);
 800c88c:	4bbd      	ldr	r3, [pc, #756]	@ (800cb84 <temper+0x328>)
 800c88e:	0018      	movs	r0, r3
 800c890:	f7fa fc1f 	bl	80070d2 <decwreg>
		decwreg(&retcncfr);
 800c894:	4bbc      	ldr	r3, [pc, #752]	@ (800cb88 <temper+0x32c>)
 800c896:	0018      	movs	r0, r3
 800c898:	f7fa fc1b 	bl	80070d2 <decwreg>
		decwreg(&retcncfc);
 800c89c:	4bbb      	ldr	r3, [pc, #748]	@ (800cb8c <temper+0x330>)
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f7fa fc17 	bl	80070d2 <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 800c8a4:	4bb4      	ldr	r3, [pc, #720]	@ (800cb78 <temper+0x31c>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]

		/*
		 * PRUEBAS DEBUGGER // Comentar de ser necesario
		 */

		ADC1->CHSELR = 0;
 800c8aa:	4bb9      	ldr	r3, [pc, #740]	@ (800cb90 <temper+0x334>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 800c8b0:	4bb7      	ldr	r3, [pc, #732]	@ (800cb90 <temper+0x334>)
 800c8b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8b4:	4bb6      	ldr	r3, [pc, #728]	@ (800cb90 <temper+0x334>)
 800c8b6:	2180      	movs	r1, #128	@ 0x80
 800c8b8:	0209      	lsls	r1, r1, #8
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD ();
 800c8be:	f000 ff0f 	bl	800d6e0 <capturaAD>
		tRTP1000[cntmues] = adcramh;
 800c8c2:	4bb4      	ldr	r3, [pc, #720]	@ (800cb94 <temper+0x338>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	001a      	movs	r2, r3
 800c8c8:	4bb3      	ldr	r3, [pc, #716]	@ (800cb98 <temper+0x33c>)
 800c8ca:	8819      	ldrh	r1, [r3, #0]
 800c8cc:	4bb3      	ldr	r3, [pc, #716]	@ (800cb9c <temper+0x340>)
 800c8ce:	0052      	lsls	r2, r2, #1
 800c8d0:	52d1      	strh	r1, [r2, r3]
		if(cntmues == 7){
 800c8d2:	4bb0      	ldr	r3, [pc, #704]	@ (800cb94 <temper+0x338>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b07      	cmp	r3, #7
 800c8d8:	d171      	bne.n	800c9be <temper+0x162>
			tRTP1000_p = 0;
 800c8da:	4bb1      	ldr	r3, [pc, #708]	@ (800cba0 <temper+0x344>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800c8e0:	230f      	movs	r3, #15
 800c8e2:	18fb      	adds	r3, r7, r3
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
 800c8e8:	e010      	b.n	800c90c <temper+0xb0>
				tRTP1000_p += tRTP1000[i];
 800c8ea:	210f      	movs	r1, #15
 800c8ec:	187b      	adds	r3, r7, r1
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	4baa      	ldr	r3, [pc, #680]	@ (800cb9c <temper+0x340>)
 800c8f2:	0052      	lsls	r2, r2, #1
 800c8f4:	5ad2      	ldrh	r2, [r2, r3]
 800c8f6:	4baa      	ldr	r3, [pc, #680]	@ (800cba0 <temper+0x344>)
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	18d3      	adds	r3, r2, r3
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	4ba8      	ldr	r3, [pc, #672]	@ (800cba0 <temper+0x344>)
 800c900:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800c902:	187b      	adds	r3, r7, r1
 800c904:	781a      	ldrb	r2, [r3, #0]
 800c906:	187b      	adds	r3, r7, r1
 800c908:	3201      	adds	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	230f      	movs	r3, #15
 800c90e:	18fb      	adds	r3, r7, r3
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b07      	cmp	r3, #7
 800c914:	d9e9      	bls.n	800c8ea <temper+0x8e>
			}

			tRTP1000_p = tRTP1000_p/8;
 800c916:	4ba2      	ldr	r3, [pc, #648]	@ (800cba0 <temper+0x344>)
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	08db      	lsrs	r3, r3, #3
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	4ba0      	ldr	r3, [pc, #640]	@ (800cba0 <temper+0x344>)
 800c920:	801a      	strh	r2, [r3, #0]
			vRTP1000_p = 330*tRTP1000_p/1024;
 800c922:	4b9f      	ldr	r3, [pc, #636]	@ (800cba0 <temper+0x344>)
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	001a      	movs	r2, r3
 800c928:	0013      	movs	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	189b      	adds	r3, r3, r2
 800c92e:	015a      	lsls	r2, r3, #5
 800c930:	189b      	adds	r3, r3, r2
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	d502      	bpl.n	800c93c <temper+0xe0>
 800c936:	4a9b      	ldr	r2, [pc, #620]	@ (800cba4 <temper+0x348>)
 800c938:	4694      	mov	ip, r2
 800c93a:	4463      	add	r3, ip
 800c93c:	129b      	asrs	r3, r3, #10
 800c93e:	b29a      	uxth	r2, r3
 800c940:	4b99      	ldr	r3, [pc, #612]	@ (800cba8 <temper+0x34c>)
 800c942:	801a      	strh	r2, [r3, #0]
			uint32_t mul1 = vRTP1000_p+(R169/1000)*VSEN/R170;
 800c944:	4b98      	ldr	r3, [pc, #608]	@ (800cba8 <temper+0x34c>)
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	4a98      	ldr	r2, [pc, #608]	@ (800cbac <temper+0x350>)
 800c94a:	4694      	mov	ip, r2
 800c94c:	4463      	add	r3, ip
 800c94e:	607b      	str	r3, [r7, #4]
			uint32_t mul2 = ((2*R169/R170+1000)*VSEN)/1000;
 800c950:	4b97      	ldr	r3, [pc, #604]	@ (800cbb0 <temper+0x354>)
 800c952:	603b      	str	r3, [r7, #0]
			constantRTP = 1000*mul1/mul2;
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	0013      	movs	r3, r2
 800c958:	015b      	lsls	r3, r3, #5
 800c95a:	1a9b      	subs	r3, r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	189b      	adds	r3, r3, r2
 800c960:	00db      	lsls	r3, r3, #3
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	0018      	movs	r0, r3
 800c966:	f7f3 fbd7 	bl	8000118 <__udivsi3>
 800c96a:	0003      	movs	r3, r0
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	4b91      	ldr	r3, [pc, #580]	@ (800cbb4 <temper+0x358>)
 800c970:	801a      	strh	r2, [r3, #0]
			RTP1000 = constantRTP*R157/(1000-constantRTP);
 800c972:	4b90      	ldr	r3, [pc, #576]	@ (800cbb4 <temper+0x358>)
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	001a      	movs	r2, r3
 800c978:	0013      	movs	r3, r2
 800c97a:	015b      	lsls	r3, r3, #5
 800c97c:	1a9b      	subs	r3, r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	189b      	adds	r3, r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	0018      	movs	r0, r3
 800c986:	4b8b      	ldr	r3, [pc, #556]	@ (800cbb4 <temper+0x358>)
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	001a      	movs	r2, r3
 800c98c:	23fa      	movs	r3, #250	@ 0xfa
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	1a9b      	subs	r3, r3, r2
 800c992:	0019      	movs	r1, r3
 800c994:	f7f3 fc4a 	bl	800022c <__divsi3>
 800c998:	0003      	movs	r3, r0
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	4b86      	ldr	r3, [pc, #536]	@ (800cbb8 <temper+0x35c>)
 800c99e:	801a      	strh	r2, [r3, #0]
			temperatureRTP = pendienteRTP*RTP1000/100 + (ordenadaRTP*10) ;
 800c9a0:	4b85      	ldr	r3, [pc, #532]	@ (800cbb8 <temper+0x35c>)
 800c9a2:	881b      	ldrh	r3, [r3, #0]
 800c9a4:	021b      	lsls	r3, r3, #8
 800c9a6:	2164      	movs	r1, #100	@ 0x64
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f7f3 fc3f 	bl	800022c <__divsi3>
 800c9ae:	0003      	movs	r3, r0
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	4a82      	ldr	r2, [pc, #520]	@ (800cbbc <temper+0x360>)
 800c9b4:	4694      	mov	ip, r2
 800c9b6:	4463      	add	r3, ip
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	4b81      	ldr	r3, [pc, #516]	@ (800cbc0 <temper+0x364>)
 800c9bc:	801a      	strh	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800c9be:	4b74      	ldr	r3, [pc, #464]	@ (800cb90 <temper+0x334>)
 800c9c0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c9c2:	4b73      	ldr	r3, [pc, #460]	@ (800cb90 <temper+0x334>)
 800c9c4:	2280      	movs	r2, #128	@ 0x80
 800c9c6:	01d2      	lsls	r2, r2, #7
 800c9c8:	400a      	ands	r2, r1
 800c9ca:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c9cc:	4b70      	ldr	r3, [pc, #448]	@ (800cb90 <temper+0x334>)
 800c9ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c9d0:	4b6f      	ldr	r3, [pc, #444]	@ (800cb90 <temper+0x334>)
 800c9d2:	2280      	movs	r2, #128	@ 0x80
 800c9d4:	00d2      	lsls	r2, r2, #3
 800c9d6:	400a      	ands	r2, r1
 800c9d8:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c9da:	4b6d      	ldr	r3, [pc, #436]	@ (800cb90 <temper+0x334>)
 800c9dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c9de:	4b6c      	ldr	r3, [pc, #432]	@ (800cb90 <temper+0x334>)
 800c9e0:	2280      	movs	r2, #128	@ 0x80
 800c9e2:	02d2      	lsls	r2, r2, #11
 800c9e4:	400a      	ands	r2, r1
 800c9e6:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 800c9e8:	4b69      	ldr	r3, [pc, #420]	@ (800cb90 <temper+0x334>)
 800c9ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9ec:	4b68      	ldr	r3, [pc, #416]	@ (800cb90 <temper+0x334>)
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 800c9f4:	f000 fe74 	bl	800d6e0 <capturaAD>

//lookshort_S4:
		Y_A();
 800c9f8:	f000 fee2 	bl	800d7c0 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 800c9fc:	4b5f      	ldr	r3, [pc, #380]	@ (800cb7c <temper+0x320>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d005      	beq.n	800ca10 <temper+0x1b4>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800ca04:	4b6f      	ldr	r3, [pc, #444]	@ (800cbc4 <temper+0x368>)
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	4a6f      	ldr	r2, [pc, #444]	@ (800cbc8 <temper+0x36c>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d808      	bhi.n	800ca20 <temper+0x1c4>
			goto lookopen_S04;          // No, revise límite inferior
 800ca0e:	e010      	b.n	800ca32 <temper+0x1d6>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 800ca10:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800ca12:	4b6c      	ldr	r3, [pc, #432]	@ (800cbc4 <temper+0x368>)
 800ca14:	881a      	ldrh	r2, [r3, #0]
 800ca16:	23e2      	movs	r3, #226	@ 0xe2
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d308      	bcc.n	800ca30 <temper+0x1d4>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 800ca1e:	e000      	b.n	800ca22 <temper+0x1c6>
		goto sens_short_S04;
 800ca20:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800ca22:	496a      	ldr	r1, [pc, #424]	@ (800cbcc <temper+0x370>)
 800ca24:	486a      	ldr	r0, [pc, #424]	@ (800cbd0 <temper+0x374>)
 800ca26:	2307      	movs	r3, #7
 800ca28:	2205      	movs	r2, #5
 800ca2a:	f000 fedf 	bl	800d7ec <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 800ca2e:	e01c      	b.n	800ca6a <temper+0x20e>
			goto lookopen_S04;          // No, revise límite inferior
 800ca30:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 800ca32:	4b68      	ldr	r3, [pc, #416]	@ (800cbd4 <temper+0x378>)
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	4b51      	ldr	r3, [pc, #324]	@ (800cb7c <temper+0x320>)
 800ca38:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800ca3a:	4b50      	ldr	r3, [pc, #320]	@ (800cb7c <temper+0x320>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d004      	beq.n	800ca4c <temper+0x1f0>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800ca42:	4b60      	ldr	r3, [pc, #384]	@ (800cbc4 <temper+0x368>)
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca48:	d908      	bls.n	800ca5c <temper+0x200>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800ca4a:	e013      	b.n	800ca74 <temper+0x218>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 800ca4c:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 800ca4e:	4b5d      	ldr	r3, [pc, #372]	@ (800cbc4 <temper+0x368>)
 800ca50:	881a      	ldrh	r2, [r3, #0]
 800ca52:	23d7      	movs	r3, #215	@ 0xd7
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d20b      	bcs.n	800ca72 <temper+0x216>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800ca5a:	e000      	b.n	800ca5e <temper+0x202>
		goto sens_open_S04;
 800ca5c:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 800ca5e:	495c      	ldr	r1, [pc, #368]	@ (800cbd0 <temper+0x374>)
 800ca60:	485a      	ldr	r0, [pc, #360]	@ (800cbcc <temper+0x370>)
 800ca62:	2305      	movs	r3, #5
 800ca64:	2207      	movs	r2, #7
 800ca66:	f000 fec1 	bl	800d7ec <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800ca6a:	4b48      	ldr	r3, [pc, #288]	@ (800cb8c <temper+0x330>)
 800ca6c:	220f      	movs	r2, #15
 800ca6e:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 800ca70:	e010      	b.n	800ca94 <temper+0x238>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800ca72:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 800ca74:	4b45      	ldr	r3, [pc, #276]	@ (800cb8c <temper+0x330>)
 800ca76:	781a      	ldrb	r2, [r3, #0]
 800ca78:	4b40      	ldr	r3, [pc, #256]	@ (800cb7c <temper+0x320>)
 800ca7a:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 800ca7c:	4b3f      	ldr	r3, [pc, #252]	@ (800cb7c <temper+0x320>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d106      	bne.n	800ca92 <temper+0x236>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800ca84:	4951      	ldr	r1, [pc, #324]	@ (800cbcc <temper+0x370>)
 800ca86:	4852      	ldr	r0, [pc, #328]	@ (800cbd0 <temper+0x374>)
 800ca88:	2307      	movs	r3, #7
 800ca8a:	2205      	movs	r2, #5
 800ca8c:	f000 fec9 	bl	800d822 <Bclear_Clear_trfst>
 800ca90:	e000      	b.n	800ca94 <temper+0x238>
			goto tempeLoad_s04;
 800ca92:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800ca94:	4b3f      	ldr	r3, [pc, #252]	@ (800cb94 <temper+0x338>)
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	001a      	movs	r2, r3
 800ca9a:	4b3f      	ldr	r3, [pc, #252]	@ (800cb98 <temper+0x33c>)
 800ca9c:	8819      	ldrh	r1, [r3, #0]
 800ca9e:	4b4e      	ldr	r3, [pc, #312]	@ (800cbd8 <temper+0x37c>)
 800caa0:	0052      	lsls	r2, r2, #1
 800caa2:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800caa4:	4b3a      	ldr	r3, [pc, #232]	@ (800cb90 <temper+0x334>)
 800caa6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800caa8:	4b39      	ldr	r3, [pc, #228]	@ (800cb90 <temper+0x334>)
 800caaa:	2280      	movs	r2, #128	@ 0x80
 800caac:	00d2      	lsls	r2, r2, #3
 800caae:	400a      	ands	r2, r1
 800cab0:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800cab2:	4b37      	ldr	r3, [pc, #220]	@ (800cb90 <temper+0x334>)
 800cab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cab6:	4b36      	ldr	r3, [pc, #216]	@ (800cb90 <temper+0x334>)
 800cab8:	2101      	movs	r1, #1
 800caba:	400a      	ands	r2, r1
 800cabc:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cabe:	4b34      	ldr	r3, [pc, #208]	@ (800cb90 <temper+0x334>)
 800cac0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cac2:	4b33      	ldr	r3, [pc, #204]	@ (800cb90 <temper+0x334>)
 800cac4:	2280      	movs	r2, #128	@ 0x80
 800cac6:	02d2      	lsls	r2, r2, #11
 800cac8:	400a      	ands	r2, r1
 800caca:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 800cacc:	4b30      	ldr	r3, [pc, #192]	@ (800cb90 <temper+0x334>)
 800cace:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cad0:	4b2f      	ldr	r3, [pc, #188]	@ (800cb90 <temper+0x334>)
 800cad2:	2180      	movs	r1, #128	@ 0x80
 800cad4:	02c9      	lsls	r1, r1, #11
 800cad6:	430a      	orrs	r2, r1
 800cad8:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 800cada:	f000 fe01 	bl	800d6e0 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 800cade:	f000 fe6f 	bl	800d7c0 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cae2:	4b26      	ldr	r3, [pc, #152]	@ (800cb7c <temper+0x320>)
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d005      	beq.n	800caf6 <temper+0x29a>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800caea:	4b36      	ldr	r3, [pc, #216]	@ (800cbc4 <temper+0x368>)
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	4a3b      	ldr	r2, [pc, #236]	@ (800cbdc <temper+0x380>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d808      	bhi.n	800cb06 <temper+0x2aa>
		goto lookopen_S03;      // No, revise límite inferior
 800caf4:	e010      	b.n	800cb18 <temper+0x2bc>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 800caf6:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800caf8:	4b32      	ldr	r3, [pc, #200]	@ (800cbc4 <temper+0x368>)
 800cafa:	881a      	ldrh	r2, [r3, #0]
 800cafc:	23e2      	movs	r3, #226	@ 0xe2
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d308      	bcc.n	800cb16 <temper+0x2ba>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 800cb04:	e000      	b.n	800cb08 <temper+0x2ac>
	goto sens_short_S03;
 800cb06:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800cb08:	4930      	ldr	r1, [pc, #192]	@ (800cbcc <temper+0x370>)
 800cb0a:	4830      	ldr	r0, [pc, #192]	@ (800cbcc <temper+0x370>)
 800cb0c:	2305      	movs	r3, #5
 800cb0e:	2204      	movs	r2, #4
 800cb10:	f000 fe6c 	bl	800d7ec <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 800cb14:	e01c      	b.n	800cb50 <temper+0x2f4>
			goto lookopen_S03; // No, revise límite inferior
 800cb16:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800cb18:	4b2e      	ldr	r3, [pc, #184]	@ (800cbd4 <temper+0x378>)
 800cb1a:	781a      	ldrb	r2, [r3, #0]
 800cb1c:	4b17      	ldr	r3, [pc, #92]	@ (800cb7c <temper+0x320>)
 800cb1e:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cb20:	4b16      	ldr	r3, [pc, #88]	@ (800cb7c <temper+0x320>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d004      	beq.n	800cb32 <temper+0x2d6>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800cb28:	4b26      	ldr	r3, [pc, #152]	@ (800cbc4 <temper+0x368>)
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb2e:	d908      	bls.n	800cb42 <temper+0x2e6>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800cb30:	e013      	b.n	800cb5a <temper+0x2fe>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 800cb32:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cb34:	4b23      	ldr	r3, [pc, #140]	@ (800cbc4 <temper+0x368>)
 800cb36:	881a      	ldrh	r2, [r3, #0]
 800cb38:	23d7      	movs	r3, #215	@ 0xd7
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d20b      	bcs.n	800cb58 <temper+0x2fc>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 800cb40:	e000      	b.n	800cb44 <temper+0x2e8>
		goto sens_open_S03;
 800cb42:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 800cb44:	4921      	ldr	r1, [pc, #132]	@ (800cbcc <temper+0x370>)
 800cb46:	4821      	ldr	r0, [pc, #132]	@ (800cbcc <temper+0x370>)
 800cb48:	2304      	movs	r3, #4
 800cb4a:	2205      	movs	r2, #5
 800cb4c:	f000 fe4e 	bl	800d7ec <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 800cb50:	4b0d      	ldr	r3, [pc, #52]	@ (800cb88 <temper+0x32c>)
 800cb52:	220f      	movs	r2, #15
 800cb54:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800cb56:	e044      	b.n	800cbe2 <temper+0x386>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800cb58:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800cb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb88 <temper+0x32c>)
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	4b07      	ldr	r3, [pc, #28]	@ (800cb7c <temper+0x320>)
 800cb60:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 800cb62:	4b06      	ldr	r3, [pc, #24]	@ (800cb7c <temper+0x320>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d13a      	bne.n	800cbe0 <temper+0x384>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800cb6a:	4918      	ldr	r1, [pc, #96]	@ (800cbcc <temper+0x370>)
 800cb6c:	4817      	ldr	r0, [pc, #92]	@ (800cbcc <temper+0x370>)
 800cb6e:	2305      	movs	r3, #5
 800cb70:	2204      	movs	r2, #4
 800cb72:	f000 fe56 	bl	800d822 <Bclear_Clear_trfst>
 800cb76:	e034      	b.n	800cbe2 <temper+0x386>
 800cb78:	20000c1f 	.word	0x20000c1f
 800cb7c:	20002256 	.word	0x20002256
 800cb80:	20000c24 	.word	0x20000c24
 800cb84:	20000c25 	.word	0x20000c25
 800cb88:	20000cb2 	.word	0x20000cb2
 800cb8c:	20000cb3 	.word	0x20000cb3
 800cb90:	40012400 	.word	0x40012400
 800cb94:	20000c20 	.word	0x20000c20
 800cb98:	20000bc0 	.word	0x20000bc0
 800cb9c:	20000260 	.word	0x20000260
 800cba0:	20002208 	.word	0x20002208
 800cba4:	000003ff 	.word	0x000003ff
 800cba8:	2000220a 	.word	0x2000220a
 800cbac:	000003e2 	.word	0x000003e2
 800cbb0:	00000903 	.word	0x00000903
 800cbb4:	2000220c 	.word	0x2000220c
 800cbb8:	2000220e 	.word	0x2000220e
 800cbbc:	fffff600 	.word	0xfffff600
 800cbc0:	20002210 	.word	0x20002210
 800cbc4:	20002258 	.word	0x20002258
 800cbc8:	000003ad 	.word	0x000003ad
 800cbcc:	20000be0 	.word	0x20000be0
 800cbd0:	20000be8 	.word	0x20000be8
 800cbd4:	20000bf8 	.word	0x20000bf8
 800cbd8:	20002214 	.word	0x20002214
 800cbdc:	000003b5 	.word	0x000003b5
			goto tempeLoad_s03;
 800cbe0:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cbe2:	4bd0      	ldr	r3, [pc, #832]	@ (800cf24 <temper+0x6c8>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	001a      	movs	r2, r3
 800cbe8:	4bcf      	ldr	r3, [pc, #828]	@ (800cf28 <temper+0x6cc>)
 800cbea:	8819      	ldrh	r1, [r3, #0]
 800cbec:	4bcf      	ldr	r3, [pc, #828]	@ (800cf2c <temper+0x6d0>)
 800cbee:	0052      	lsls	r2, r2, #1
 800cbf0:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800cbf2:	4bcf      	ldr	r3, [pc, #828]	@ (800cf30 <temper+0x6d4>)
 800cbf4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cbf6:	4bce      	ldr	r3, [pc, #824]	@ (800cf30 <temper+0x6d4>)
 800cbf8:	2280      	movs	r2, #128	@ 0x80
 800cbfa:	01d2      	lsls	r2, r2, #7
 800cbfc:	400a      	ands	r2, r1
 800cbfe:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800cc00:	4bcb      	ldr	r3, [pc, #812]	@ (800cf30 <temper+0x6d4>)
 800cc02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc04:	4bca      	ldr	r3, [pc, #808]	@ (800cf30 <temper+0x6d4>)
 800cc06:	2101      	movs	r1, #1
 800cc08:	400a      	ands	r2, r1
 800cc0a:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cc0c:	4bc8      	ldr	r3, [pc, #800]	@ (800cf30 <temper+0x6d4>)
 800cc0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cc10:	4bc7      	ldr	r3, [pc, #796]	@ (800cf30 <temper+0x6d4>)
 800cc12:	2280      	movs	r2, #128	@ 0x80
 800cc14:	02d2      	lsls	r2, r2, #11
 800cc16:	400a      	ands	r2, r1
 800cc18:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 800cc1a:	4bc5      	ldr	r3, [pc, #788]	@ (800cf30 <temper+0x6d4>)
 800cc1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc1e:	4bc4      	ldr	r3, [pc, #784]	@ (800cf30 <temper+0x6d4>)
 800cc20:	2180      	movs	r1, #128	@ 0x80
 800cc22:	00c9      	lsls	r1, r1, #3
 800cc24:	430a      	orrs	r2, r1
 800cc26:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 800cc28:	f000 fd5a 	bl	800d6e0 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 800cc2c:	f000 fdc8 	bl	800d7c0 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 800cc30:	4bc0      	ldr	r3, [pc, #768]	@ (800cf34 <temper+0x6d8>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d005      	beq.n	800cc44 <temper+0x3e8>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cc38:	4bbf      	ldr	r3, [pc, #764]	@ (800cf38 <temper+0x6dc>)
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	4abf      	ldr	r2, [pc, #764]	@ (800cf3c <temper+0x6e0>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d808      	bhi.n	800cc54 <temper+0x3f8>
			goto lookopen;     // No, revise límite inferior
 800cc42:	e010      	b.n	800cc66 <temper+0x40a>
			goto cmp_man_01;   // En autoprueba deja estos límites
 800cc44:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cc46:	4bbc      	ldr	r3, [pc, #752]	@ (800cf38 <temper+0x6dc>)
 800cc48:	881a      	ldrh	r2, [r3, #0]
 800cc4a:	23e2      	movs	r3, #226	@ 0xe2
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d308      	bcc.n	800cc64 <temper+0x408>
			goto lookopen;     // No, revise límite inferior

sens_short:
 800cc52:	e000      	b.n	800cc56 <temper+0x3fa>
		goto sens_short;
 800cc54:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800cc56:	49ba      	ldr	r1, [pc, #744]	@ (800cf40 <temper+0x6e4>)
 800cc58:	48b9      	ldr	r0, [pc, #740]	@ (800cf40 <temper+0x6e4>)
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f000 fdc5 	bl	800d7ec <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 800cc62:	e01c      	b.n	800cc9e <temper+0x442>
			goto lookopen;     // No, revise límite inferior
 800cc64:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 800cc66:	4bb7      	ldr	r3, [pc, #732]	@ (800cf44 <temper+0x6e8>)
 800cc68:	781a      	ldrb	r2, [r3, #0]
 800cc6a:	4bb2      	ldr	r3, [pc, #712]	@ (800cf34 <temper+0x6d8>)
 800cc6c:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cc6e:	4bb1      	ldr	r3, [pc, #708]	@ (800cf34 <temper+0x6d8>)
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d004      	beq.n	800cc80 <temper+0x424>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cc76:	4bb0      	ldr	r3, [pc, #704]	@ (800cf38 <temper+0x6dc>)
 800cc78:	881b      	ldrh	r3, [r3, #0]
 800cc7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc7c:	d908      	bls.n	800cc90 <temper+0x434>
			goto sens_ok;       // Sí, indica sensor OK
 800cc7e:	e016      	b.n	800ccae <temper+0x452>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800cc80:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cc82:	4bad      	ldr	r3, [pc, #692]	@ (800cf38 <temper+0x6dc>)
 800cc84:	881a      	ldrh	r2, [r3, #0]
 800cc86:	23d7      	movs	r3, #215	@ 0xd7
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d20e      	bcs.n	800ccac <temper+0x450>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800cc8e:	e000      	b.n	800cc92 <temper+0x436>
		goto sens_open;
 800cc90:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800cc92:	49ab      	ldr	r1, [pc, #684]	@ (800cf40 <temper+0x6e4>)
 800cc94:	48aa      	ldr	r0, [pc, #680]	@ (800cf40 <temper+0x6e4>)
 800cc96:	2300      	movs	r3, #0
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f000 fda7 	bl	800d7ec <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800cc9e:	4baa      	ldr	r3, [pc, #680]	@ (800cf48 <temper+0x6ec>)
 800cca0:	220f      	movs	r2, #15
 800cca2:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 800cca4:	4ba9      	ldr	r3, [pc, #676]	@ (800cf4c <temper+0x6f0>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 800ccaa:	e010      	b.n	800ccce <temper+0x472>
			goto sens_ok;       // Sí, indica sensor OK
 800ccac:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800ccae:	4ba6      	ldr	r3, [pc, #664]	@ (800cf48 <temper+0x6ec>)
 800ccb0:	781a      	ldrb	r2, [r3, #0]
 800ccb2:	4ba0      	ldr	r3, [pc, #640]	@ (800cf34 <temper+0x6d8>)
 800ccb4:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 800ccb6:	4b9f      	ldr	r3, [pc, #636]	@ (800cf34 <temper+0x6d8>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d106      	bne.n	800cccc <temper+0x470>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800ccbe:	49a0      	ldr	r1, [pc, #640]	@ (800cf40 <temper+0x6e4>)
 800ccc0:	489f      	ldr	r0, [pc, #636]	@ (800cf40 <temper+0x6e4>)
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f000 fdac 	bl	800d822 <Bclear_Clear_trfst>
 800ccca:	e000      	b.n	800ccce <temper+0x472>
			goto tempe13;
 800cccc:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800ccce:	4b95      	ldr	r3, [pc, #596]	@ (800cf24 <temper+0x6c8>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	001a      	movs	r2, r3
 800ccd4:	4b94      	ldr	r3, [pc, #592]	@ (800cf28 <temper+0x6cc>)
 800ccd6:	8819      	ldrh	r1, [r3, #0]
 800ccd8:	4b9d      	ldr	r3, [pc, #628]	@ (800cf50 <temper+0x6f4>)
 800ccda:	0052      	lsls	r2, r2, #1
 800ccdc:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800ccde:	4b94      	ldr	r3, [pc, #592]	@ (800cf30 <temper+0x6d4>)
 800cce0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cce2:	4b93      	ldr	r3, [pc, #588]	@ (800cf30 <temper+0x6d4>)
 800cce4:	2280      	movs	r2, #128	@ 0x80
 800cce6:	00d2      	lsls	r2, r2, #3
 800cce8:	400a      	ands	r2, r1
 800ccea:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800ccec:	4b90      	ldr	r3, [pc, #576]	@ (800cf30 <temper+0x6d4>)
 800ccee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ccf0:	4b8f      	ldr	r3, [pc, #572]	@ (800cf30 <temper+0x6d4>)
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	400a      	ands	r2, r1
 800ccf6:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800ccf8:	4b8d      	ldr	r3, [pc, #564]	@ (800cf30 <temper+0x6d4>)
 800ccfa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ccfc:	4b8c      	ldr	r3, [pc, #560]	@ (800cf30 <temper+0x6d4>)
 800ccfe:	2280      	movs	r2, #128	@ 0x80
 800cd00:	02d2      	lsls	r2, r2, #11
 800cd02:	400a      	ands	r2, r1
 800cd04:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800cd06:	4b8a      	ldr	r3, [pc, #552]	@ (800cf30 <temper+0x6d4>)
 800cd08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd0a:	4b89      	ldr	r3, [pc, #548]	@ (800cf30 <temper+0x6d4>)
 800cd0c:	2180      	movs	r1, #128	@ 0x80
 800cd0e:	01c9      	lsls	r1, r1, #7
 800cd10:	430a      	orrs	r2, r1
 800cd12:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800cd14:	f000 fce4 	bl	800d6e0 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800cd18:	f000 fd52 	bl	800d7c0 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cd1c:	4b85      	ldr	r3, [pc, #532]	@ (800cf34 <temper+0x6d8>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d005      	beq.n	800cd30 <temper+0x4d4>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cd24:	4b84      	ldr	r3, [pc, #528]	@ (800cf38 <temper+0x6dc>)
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	4a84      	ldr	r2, [pc, #528]	@ (800cf3c <temper+0x6e0>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d808      	bhi.n	800cd40 <temper+0x4e4>
		goto lookopene;    // No, revise límite inferior
 800cd2e:	e010      	b.n	800cd52 <temper+0x4f6>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800cd30:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cd32:	4b81      	ldr	r3, [pc, #516]	@ (800cf38 <temper+0x6dc>)
 800cd34:	881a      	ldrh	r2, [r3, #0]
 800cd36:	23e2      	movs	r3, #226	@ 0xe2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d308      	bcc.n	800cd50 <temper+0x4f4>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800cd3e:	e000      	b.n	800cd42 <temper+0x4e6>
	goto senshorte;
 800cd40:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cd42:	497f      	ldr	r1, [pc, #508]	@ (800cf40 <temper+0x6e4>)
 800cd44:	487e      	ldr	r0, [pc, #504]	@ (800cf40 <temper+0x6e4>)
 800cd46:	2303      	movs	r3, #3
 800cd48:	2202      	movs	r2, #2
 800cd4a:	f000 fd4f 	bl	800d7ec <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800cd4e:	e01c      	b.n	800cd8a <temper+0x52e>
		goto lookopene;    // No, revise límite inferior
 800cd50:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800cd52:	4b7c      	ldr	r3, [pc, #496]	@ (800cf44 <temper+0x6e8>)
 800cd54:	781a      	ldrb	r2, [r3, #0]
 800cd56:	4b77      	ldr	r3, [pc, #476]	@ (800cf34 <temper+0x6d8>)
 800cd58:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800cd5a:	4b76      	ldr	r3, [pc, #472]	@ (800cf34 <temper+0x6d8>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d004      	beq.n	800cd6c <temper+0x510>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cd62:	4b75      	ldr	r3, [pc, #468]	@ (800cf38 <temper+0x6dc>)
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd68:	d908      	bls.n	800cd7c <temper+0x520>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800cd6a:	e013      	b.n	800cd94 <temper+0x538>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800cd6c:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cd6e:	4b72      	ldr	r3, [pc, #456]	@ (800cf38 <temper+0x6dc>)
 800cd70:	881a      	ldrh	r2, [r3, #0]
 800cd72:	23d7      	movs	r3, #215	@ 0xd7
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d20b      	bcs.n	800cd92 <temper+0x536>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800cd7a:	e000      	b.n	800cd7e <temper+0x522>
	goto sens_opene;
 800cd7c:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800cd7e:	4970      	ldr	r1, [pc, #448]	@ (800cf40 <temper+0x6e4>)
 800cd80:	486f      	ldr	r0, [pc, #444]	@ (800cf40 <temper+0x6e4>)
 800cd82:	2302      	movs	r3, #2
 800cd84:	2203      	movs	r2, #3
 800cd86:	f000 fd31 	bl	800d7ec <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800cd8a:	4b72      	ldr	r3, [pc, #456]	@ (800cf54 <temper+0x6f8>)
 800cd8c:	2214      	movs	r2, #20
 800cd8e:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800cd90:	e010      	b.n	800cdb4 <temper+0x558>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800cd92:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800cd94:	4b6f      	ldr	r3, [pc, #444]	@ (800cf54 <temper+0x6f8>)
 800cd96:	781a      	ldrb	r2, [r3, #0]
 800cd98:	4b66      	ldr	r3, [pc, #408]	@ (800cf34 <temper+0x6d8>)
 800cd9a:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800cd9c:	4b65      	ldr	r3, [pc, #404]	@ (800cf34 <temper+0x6d8>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <temper+0x556>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cda4:	4966      	ldr	r1, [pc, #408]	@ (800cf40 <temper+0x6e4>)
 800cda6:	4866      	ldr	r0, [pc, #408]	@ (800cf40 <temper+0x6e4>)
 800cda8:	2303      	movs	r3, #3
 800cdaa:	2202      	movs	r2, #2
 800cdac:	f000 fd39 	bl	800d822 <Bclear_Clear_trfst>
 800cdb0:	e000      	b.n	800cdb4 <temper+0x558>
		goto tempe16;
 800cdb2:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800cdb4:	4b62      	ldr	r3, [pc, #392]	@ (800cf40 <temper+0x6e4>)
 800cdb6:	789b      	ldrb	r3, [r3, #2]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d004      	beq.n	800cdc6 <temper+0x56a>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800cdbc:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800cdbe:	4b5a      	ldr	r3, [pc, #360]	@ (800cf28 <temper+0x6cc>)
 800cdc0:	220a      	movs	r2, #10
 800cdc2:	801a      	strh	r2, [r3, #0]
 800cdc4:	e000      	b.n	800cdc8 <temper+0x56c>
	goto tempe16a;                 // No, revisa temperatura alta
 800cdc6:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cdc8:	4b56      	ldr	r3, [pc, #344]	@ (800cf24 <temper+0x6c8>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	001a      	movs	r2, r3
 800cdce:	4b56      	ldr	r3, [pc, #344]	@ (800cf28 <temper+0x6cc>)
 800cdd0:	8819      	ldrh	r1, [r3, #0]
 800cdd2:	4b61      	ldr	r3, [pc, #388]	@ (800cf58 <temper+0x6fc>)
 800cdd4:	0052      	lsls	r2, r2, #1
 800cdd6:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800cdd8:	4b52      	ldr	r3, [pc, #328]	@ (800cf24 <temper+0x6c8>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	3301      	adds	r3, #1
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	4b50      	ldr	r3, [pc, #320]	@ (800cf24 <temper+0x6c8>)
 800cde2:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800cde4:	4b4f      	ldr	r3, [pc, #316]	@ (800cf24 <temper+0x6c8>)
 800cde6:	781a      	ldrb	r2, [r3, #0]
 800cde8:	4b52      	ldr	r3, [pc, #328]	@ (800cf34 <temper+0x6d8>)
 800cdea:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800cdec:	4b51      	ldr	r3, [pc, #324]	@ (800cf34 <temper+0x6d8>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b07      	cmp	r3, #7
 800cdf2:	d800      	bhi.n	800cdf6 <temper+0x59a>
 800cdf4:	e2d2      	b.n	800d39c <temper+0xb40>
			goto tempe17;  // Si, obten el promedio
 800cdf6:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800cdf8:	4b58      	ldr	r3, [pc, #352]	@ (800cf5c <temper+0x700>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cdfe:	230e      	movs	r3, #14
 800ce00:	18fb      	adds	r3, r7, r3
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	e010      	b.n	800ce2a <temper+0x5ce>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800ce08:	210e      	movs	r1, #14
 800ce0a:	187b      	adds	r3, r7, r1
 800ce0c:	781a      	ldrb	r2, [r3, #0]
 800ce0e:	4b54      	ldr	r3, [pc, #336]	@ (800cf60 <temper+0x704>)
 800ce10:	0052      	lsls	r2, r2, #1
 800ce12:	5ad2      	ldrh	r2, [r2, r3]
 800ce14:	4b51      	ldr	r3, [pc, #324]	@ (800cf5c <temper+0x700>)
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	18d3      	adds	r3, r2, r3
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	4b4f      	ldr	r3, [pc, #316]	@ (800cf5c <temper+0x700>)
 800ce1e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ce20:	187b      	adds	r3, r7, r1
 800ce22:	781a      	ldrb	r2, [r3, #0]
 800ce24:	187b      	adds	r3, r7, r1
 800ce26:	3201      	adds	r2, #1
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	230e      	movs	r3, #14
 800ce2c:	18fb      	adds	r3, r7, r3
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b07      	cmp	r3, #7
 800ce32:	d9e9      	bls.n	800ce08 <temper+0x5ac>
	}
	resul = resul / 8;
 800ce34:	4b49      	ldr	r3, [pc, #292]	@ (800cf5c <temper+0x700>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	08db      	lsrs	r3, r3, #3
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	4b47      	ldr	r3, [pc, #284]	@ (800cf5c <temper+0x700>)
 800ce3e:	801a      	strh	r2, [r3, #0]
	linealiza();
 800ce40:	f000 fb16 	bl	800d470 <linealiza>
	X = tempo;
 800ce44:	4b47      	ldr	r3, [pc, #284]	@ (800cf64 <temper+0x708>)
 800ce46:	881a      	ldrh	r2, [r3, #0]
 800ce48:	4b47      	ldr	r3, [pc, #284]	@ (800cf68 <temper+0x70c>)
 800ce4a:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800ce4c:	4b46      	ldr	r3, [pc, #280]	@ (800cf68 <temper+0x70c>)
 800ce4e:	881a      	ldrh	r2, [r3, #0]
 800ce50:	4b46      	ldr	r3, [pc, #280]	@ (800cf6c <temper+0x710>)
 800ce52:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800ce54:	4b41      	ldr	r3, [pc, #260]	@ (800cf5c <temper+0x700>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ce5a:	230d      	movs	r3, #13
 800ce5c:	18fb      	adds	r3, r7, r3
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	e010      	b.n	800ce86 <temper+0x62a>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800ce64:	210d      	movs	r1, #13
 800ce66:	187b      	adds	r3, r7, r1
 800ce68:	781a      	ldrb	r2, [r3, #0]
 800ce6a:	4b30      	ldr	r3, [pc, #192]	@ (800cf2c <temper+0x6d0>)
 800ce6c:	0052      	lsls	r2, r2, #1
 800ce6e:	5ad2      	ldrh	r2, [r2, r3]
 800ce70:	4b3a      	ldr	r3, [pc, #232]	@ (800cf5c <temper+0x700>)
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	18d3      	adds	r3, r2, r3
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	4b38      	ldr	r3, [pc, #224]	@ (800cf5c <temper+0x700>)
 800ce7a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ce7c:	187b      	adds	r3, r7, r1
 800ce7e:	781a      	ldrb	r2, [r3, #0]
 800ce80:	187b      	adds	r3, r7, r1
 800ce82:	3201      	adds	r2, #1
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	230d      	movs	r3, #13
 800ce88:	18fb      	adds	r3, r7, r3
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b07      	cmp	r3, #7
 800ce8e:	d9e9      	bls.n	800ce64 <temper+0x608>
	}
	resul = resul / 8;
 800ce90:	4b32      	ldr	r3, [pc, #200]	@ (800cf5c <temper+0x700>)
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	08db      	lsrs	r3, r3, #3
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	4b30      	ldr	r3, [pc, #192]	@ (800cf5c <temper+0x700>)
 800ce9a:	801a      	strh	r2, [r3, #0]
	linealiza();
 800ce9c:	f000 fae8 	bl	800d470 <linealiza>
	X = tempo;
 800cea0:	4b30      	ldr	r3, [pc, #192]	@ (800cf64 <temper+0x708>)
 800cea2:	881a      	ldrh	r2, [r3, #0]
 800cea4:	4b30      	ldr	r3, [pc, #192]	@ (800cf68 <temper+0x70c>)
 800cea6:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800cea8:	4b2f      	ldr	r3, [pc, #188]	@ (800cf68 <temper+0x70c>)
 800ceaa:	881a      	ldrh	r2, [r3, #0]
 800ceac:	4b30      	ldr	r3, [pc, #192]	@ (800cf70 <temper+0x714>)
 800ceae:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800ceb0:	4b2a      	ldr	r3, [pc, #168]	@ (800cf5c <temper+0x700>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	18fb      	adds	r3, r7, r3
 800ceba:	2200      	movs	r2, #0
 800cebc:	701a      	strb	r2, [r3, #0]
 800cebe:	e010      	b.n	800cee2 <temper+0x686>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800cec0:	210c      	movs	r1, #12
 800cec2:	187b      	adds	r3, r7, r1
 800cec4:	781a      	ldrb	r2, [r3, #0]
 800cec6:	4b24      	ldr	r3, [pc, #144]	@ (800cf58 <temper+0x6fc>)
 800cec8:	0052      	lsls	r2, r2, #1
 800ceca:	5ad2      	ldrh	r2, [r2, r3]
 800cecc:	4b23      	ldr	r3, [pc, #140]	@ (800cf5c <temper+0x700>)
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	4b21      	ldr	r3, [pc, #132]	@ (800cf5c <temper+0x700>)
 800ced6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ced8:	187b      	adds	r3, r7, r1
 800ceda:	781a      	ldrb	r2, [r3, #0]
 800cedc:	187b      	adds	r3, r7, r1
 800cede:	3201      	adds	r2, #1
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	230c      	movs	r3, #12
 800cee4:	18fb      	adds	r3, r7, r3
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b07      	cmp	r3, #7
 800ceea:	d9e9      	bls.n	800cec0 <temper+0x664>
	}
	resul = resul / 8;
 800ceec:	4b1b      	ldr	r3, [pc, #108]	@ (800cf5c <temper+0x700>)
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	08db      	lsrs	r3, r3, #3
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	4b19      	ldr	r3, [pc, #100]	@ (800cf5c <temper+0x700>)
 800cef6:	801a      	strh	r2, [r3, #0]
	linealiza();
 800cef8:	f000 faba 	bl	800d470 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800cefc:	4b19      	ldr	r3, [pc, #100]	@ (800cf64 <temper+0x708>)
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	4b1c      	ldr	r3, [pc, #112]	@ (800cf74 <temper+0x718>)
 800cf04:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800cf06:	4b17      	ldr	r3, [pc, #92]	@ (800cf64 <temper+0x708>)
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	0a1b      	lsrs	r3, r3, #8
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	4b19      	ldr	r3, [pc, #100]	@ (800cf78 <temper+0x71c>)
 800cf12:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800cf14:	4b11      	ldr	r3, [pc, #68]	@ (800cf5c <temper+0x700>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cf1a:	230b      	movs	r3, #11
 800cf1c:	18fb      	adds	r3, r7, r3
 800cf1e:	2200      	movs	r2, #0
 800cf20:	701a      	strb	r2, [r3, #0]
 800cf22:	e03c      	b.n	800cf9e <temper+0x742>
 800cf24:	20000c20 	.word	0x20000c20
 800cf28:	20000bc0 	.word	0x20000bc0
 800cf2c:	20002224 	.word	0x20002224
 800cf30:	40012400 	.word	0x40012400
 800cf34:	20002256 	.word	0x20002256
 800cf38:	20002258 	.word	0x20002258
 800cf3c:	000003b5 	.word	0x000003b5
 800cf40:	20000be8 	.word	0x20000be8
 800cf44:	20000bf8 	.word	0x20000bf8
 800cf48:	20000c24 	.word	0x20000c24
 800cf4c:	20000c27 	.word	0x20000c27
 800cf50:	20002234 	.word	0x20002234
 800cf54:	20000c25 	.word	0x20000c25
 800cf58:	20002244 	.word	0x20002244
 800cf5c:	2000225c 	.word	0x2000225c
 800cf60:	20002214 	.word	0x20002214
 800cf64:	2000225e 	.word	0x2000225e
 800cf68:	2000225a 	.word	0x2000225a
 800cf6c:	20002194 	.word	0x20002194
 800cf70:	20000cb4 	.word	0x20000cb4
 800cf74:	20000c13 	.word	0x20000c13
 800cf78:	20000c12 	.word	0x20000c12
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800cf7c:	210b      	movs	r1, #11
 800cf7e:	187b      	adds	r3, r7, r1
 800cf80:	781a      	ldrb	r2, [r3, #0]
 800cf82:	4bb4      	ldr	r3, [pc, #720]	@ (800d254 <temper+0x9f8>)
 800cf84:	0052      	lsls	r2, r2, #1
 800cf86:	5ad2      	ldrh	r2, [r2, r3]
 800cf88:	4bb3      	ldr	r3, [pc, #716]	@ (800d258 <temper+0x9fc>)
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	18d3      	adds	r3, r2, r3
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	4bb1      	ldr	r3, [pc, #708]	@ (800d258 <temper+0x9fc>)
 800cf92:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cf94:	187b      	adds	r3, r7, r1
 800cf96:	781a      	ldrb	r2, [r3, #0]
 800cf98:	187b      	adds	r3, r7, r1
 800cf9a:	3201      	adds	r2, #1
 800cf9c:	701a      	strb	r2, [r3, #0]
 800cf9e:	230b      	movs	r3, #11
 800cfa0:	18fb      	adds	r3, r7, r3
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b07      	cmp	r3, #7
 800cfa6:	d9e9      	bls.n	800cf7c <temper+0x720>
	}
	resul = resul / 8;
 800cfa8:	4bab      	ldr	r3, [pc, #684]	@ (800d258 <temper+0x9fc>)
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	08db      	lsrs	r3, r3, #3
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	4ba9      	ldr	r3, [pc, #676]	@ (800d258 <temper+0x9fc>)
 800cfb2:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800cfb4:	4ba9      	ldr	r3, [pc, #676]	@ (800d25c <temper+0xa00>)
 800cfb6:	881a      	ldrh	r2, [r3, #0]
 800cfb8:	4ba9      	ldr	r3, [pc, #676]	@ (800d260 <temper+0xa04>)
 800cfba:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800cfbc:	4ba8      	ldr	r3, [pc, #672]	@ (800d260 <temper+0xa04>)
 800cfbe:	881a      	ldrh	r2, [r3, #0]
 800cfc0:	4ba5      	ldr	r3, [pc, #660]	@ (800d258 <temper+0x9fc>)
 800cfc2:	881b      	ldrh	r3, [r3, #0]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	4ba5      	ldr	r3, [pc, #660]	@ (800d260 <temper+0xa04>)
 800cfca:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800cfcc:	4ba4      	ldr	r3, [pc, #656]	@ (800d260 <temper+0xa04>)
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d100      	bne.n	800cfd6 <temper+0x77a>
 800cfd4:	e07d      	b.n	800d0d2 <temper+0x876>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800cfd6:	4ba2      	ldr	r3, [pc, #648]	@ (800d260 <temper+0xa04>)
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	b21b      	sxth	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	da18      	bge.n	800d012 <temper+0x7b6>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800cfe0:	4b9f      	ldr	r3, [pc, #636]	@ (800d260 <temper+0xa04>)
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	4b9d      	ldr	r3, [pc, #628]	@ (800d260 <temper+0xa04>)
 800cfea:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800cfec:	4b9c      	ldr	r3, [pc, #624]	@ (800d260 <temper+0xa04>)
 800cfee:	881b      	ldrh	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d028      	beq.n	800d046 <temper+0x7ea>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800cff4:	4b98      	ldr	r3, [pc, #608]	@ (800d258 <temper+0x9fc>)
 800cff6:	881a      	ldrh	r2, [r3, #0]
 800cff8:	4b99      	ldr	r3, [pc, #612]	@ (800d260 <temper+0xa04>)
 800cffa:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800cffc:	4b98      	ldr	r3, [pc, #608]	@ (800d260 <temper+0xa04>)
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	3b01      	subs	r3, #1
 800d002:	b29a      	uxth	r2, r3
 800d004:	4b96      	ldr	r3, [pc, #600]	@ (800d260 <temper+0xa04>)
 800d006:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800d008:	4b95      	ldr	r3, [pc, #596]	@ (800d260 <temper+0xa04>)
 800d00a:	881a      	ldrh	r2, [r3, #0]
 800d00c:	4b92      	ldr	r3, [pc, #584]	@ (800d258 <temper+0x9fc>)
 800d00e:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800d010:	e048      	b.n	800d0a4 <temper+0x848>
		goto tempe25b;            //La diferencia de promedios es positiva?
 800d012:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800d014:	4b92      	ldr	r3, [pc, #584]	@ (800d260 <temper+0xa04>)
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	3b01      	subs	r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	4b90      	ldr	r3, [pc, #576]	@ (800d260 <temper+0xa04>)
 800d01e:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d020:	4b8f      	ldr	r3, [pc, #572]	@ (800d260 <temper+0xa04>)
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d010      	beq.n	800d04a <temper+0x7ee>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800d028:	4b8b      	ldr	r3, [pc, #556]	@ (800d258 <temper+0x9fc>)
 800d02a:	881a      	ldrh	r2, [r3, #0]
 800d02c:	4b8c      	ldr	r3, [pc, #560]	@ (800d260 <temper+0xa04>)
 800d02e:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800d030:	4b8b      	ldr	r3, [pc, #556]	@ (800d260 <temper+0xa04>)
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	b29a      	uxth	r2, r3
 800d038:	4b89      	ldr	r3, [pc, #548]	@ (800d260 <temper+0xa04>)
 800d03a:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800d03c:	4b88      	ldr	r3, [pc, #544]	@ (800d260 <temper+0xa04>)
 800d03e:	881a      	ldrh	r2, [r3, #0]
 800d040:	4b85      	ldr	r3, [pc, #532]	@ (800d258 <temper+0x9fc>)
 800d042:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800d044:	e02e      	b.n	800d0a4 <temper+0x848>
		goto vesiestab;  		  // Si, revisa estabilidad
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	e000      	b.n	800d04c <temper+0x7f0>
			goto vesiestab;       // Si, revisa estabilidad
 800d04a:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800d04c:	4b85      	ldr	r3, [pc, #532]	@ (800d264 <temper+0xa08>)
 800d04e:	881a      	ldrh	r2, [r3, #0]
 800d050:	4b83      	ldr	r3, [pc, #524]	@ (800d260 <temper+0xa04>)
 800d052:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800d054:	4b82      	ldr	r3, [pc, #520]	@ (800d260 <temper+0xa04>)
 800d056:	881a      	ldrh	r2, [r3, #0]
 800d058:	4b7f      	ldr	r3, [pc, #508]	@ (800d258 <temper+0x9fc>)
 800d05a:	881b      	ldrh	r3, [r3, #0]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	b29a      	uxth	r2, r3
 800d060:	4b7f      	ldr	r3, [pc, #508]	@ (800d260 <temper+0xa04>)
 800d062:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d064:	4b7e      	ldr	r3, [pc, #504]	@ (800d260 <temper+0xa04>)
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <temper+0x818>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800d06c:	4b7e      	ldr	r3, [pc, #504]	@ (800d268 <temper+0xa0c>)
 800d06e:	2200      	movs	r2, #0
 800d070:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800d072:	e006      	b.n	800d082 <temper+0x826>
			goto estable;  // El nuevo dato es igual a último?
 800d074:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800d076:	4b7c      	ldr	r3, [pc, #496]	@ (800d268 <temper+0xa0c>)
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	3301      	adds	r3, #1
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	4b7a      	ldr	r3, [pc, #488]	@ (800d268 <temper+0xa0c>)
 800d080:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800d082:	4b75      	ldr	r3, [pc, #468]	@ (800d258 <temper+0x9fc>)
 800d084:	881a      	ldrh	r2, [r3, #0]
 800d086:	4b76      	ldr	r3, [pc, #472]	@ (800d260 <temper+0xa04>)
 800d088:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800d08a:	4b75      	ldr	r3, [pc, #468]	@ (800d260 <temper+0xa04>)
 800d08c:	881a      	ldrh	r2, [r3, #0]
 800d08e:	4b75      	ldr	r3, [pc, #468]	@ (800d264 <temper+0xa08>)
 800d090:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800d092:	4b75      	ldr	r3, [pc, #468]	@ (800d268 <temper+0xa0c>)
 800d094:	781a      	ldrb	r2, [r3, #0]
 800d096:	4b75      	ldr	r3, [pc, #468]	@ (800d26c <temper+0xa10>)
 800d098:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800d09a:	4b74      	ldr	r3, [pc, #464]	@ (800d26c <temper+0xa10>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b0e      	cmp	r3, #14
 800d0a0:	d920      	bls.n	800d0e4 <temper+0x888>
			goto tempe29;

tempe26:
 800d0a2:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800d0a4:	4b6c      	ldr	r3, [pc, #432]	@ (800d258 <temper+0x9fc>)
 800d0a6:	881a      	ldrh	r2, [r3, #0]
 800d0a8:	4b71      	ldr	r3, [pc, #452]	@ (800d270 <temper+0xa14>)
 800d0aa:	801a      	strh	r2, [r3, #0]
		promant = X;
 800d0ac:	4b70      	ldr	r3, [pc, #448]	@ (800d270 <temper+0xa14>)
 800d0ae:	881a      	ldrh	r2, [r3, #0]
 800d0b0:	4b6a      	ldr	r3, [pc, #424]	@ (800d25c <temper+0xa00>)
 800d0b2:	801a      	strh	r2, [r3, #0]
		linealiza();
 800d0b4:	f000 f9dc 	bl	800d470 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800d0b8:	4b6e      	ldr	r3, [pc, #440]	@ (800d274 <temper+0xa18>)
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	4b6e      	ldr	r3, [pc, #440]	@ (800d278 <temper+0xa1c>)
 800d0c0:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800d0c2:	4b6c      	ldr	r3, [pc, #432]	@ (800d274 <temper+0xa18>)
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	0a1b      	lsrs	r3, r3, #8
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	4b6b      	ldr	r3, [pc, #428]	@ (800d27c <temper+0xa20>)
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	e000      	b.n	800d0d4 <temper+0x878>
		goto tempe27;                //nota1: checar comparaciones
 800d0d2:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800d0d4:	4b61      	ldr	r3, [pc, #388]	@ (800d25c <temper+0xa00>)
 800d0d6:	881a      	ldrh	r2, [r3, #0]
 800d0d8:	4b62      	ldr	r3, [pc, #392]	@ (800d264 <temper+0xa08>)
 800d0da:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800d0dc:	4b62      	ldr	r3, [pc, #392]	@ (800d268 <temper+0xa0c>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	e000      	b.n	800d0e6 <temper+0x88a>
			goto tempe29;
 800d0e4:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800d0e6:	f7f9 f9cf 	bl	8006488 <tdev_to_Word>
 800d0ea:	0003      	movs	r3, r0
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	4b60      	ldr	r3, [pc, #384]	@ (800d270 <temper+0xa14>)
 800d0f0:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d0f2:	4b5f      	ldr	r3, [pc, #380]	@ (800d270 <temper+0xa14>)
 800d0f4:	881a      	ldrh	r2, [r3, #0]
 800d0f6:	4b62      	ldr	r3, [pc, #392]	@ (800d280 <temper+0xa24>)
 800d0f8:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800d0fa:	4b62      	ldr	r3, [pc, #392]	@ (800d284 <temper+0xa28>)
 800d0fc:	2259      	movs	r2, #89	@ 0x59
 800d0fe:	5c9a      	ldrb	r2, [r3, r2]
 800d100:	4b5a      	ldr	r3, [pc, #360]	@ (800d26c <temper+0xa10>)
 800d102:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800d104:	4b59      	ldr	r3, [pc, #356]	@ (800d26c <temper+0xa10>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d91d      	bls.n	800d148 <temper+0x8ec>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800d10c:	4b5d      	ldr	r3, [pc, #372]	@ (800d284 <temper+0xa28>)
 800d10e:	2253      	movs	r2, #83	@ 0x53
 800d110:	5c9b      	ldrb	r3, [r3, r2]
 800d112:	b25b      	sxtb	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	da19      	bge.n	800d14c <temper+0x8f0>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800d118:	4b5b      	ldr	r3, [pc, #364]	@ (800d288 <temper+0xa2c>)
 800d11a:	791b      	ldrb	r3, [r3, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d107      	bne.n	800d130 <temper+0x8d4>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800d120:	4b59      	ldr	r3, [pc, #356]	@ (800d288 <temper+0xa2c>)
 800d122:	795b      	ldrb	r3, [r3, #5]
 800d124:	2201      	movs	r2, #1
 800d126:	4053      	eors	r3, r2
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d102      	bne.n	800d134 <temper+0x8d8>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800d12e:	e000      	b.n	800d132 <temper+0x8d6>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800d130:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800d132:	e00c      	b.n	800d14e <temper+0x8f2>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800d134:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800d136:	4b55      	ldr	r3, [pc, #340]	@ (800d28c <temper+0xa30>)
 800d138:	881a      	ldrh	r2, [r3, #0]
 800d13a:	4b4d      	ldr	r3, [pc, #308]	@ (800d270 <temper+0xa14>)
 800d13c:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d13e:	4b4c      	ldr	r3, [pc, #304]	@ (800d270 <temper+0xa14>)
 800d140:	881a      	ldrh	r2, [r3, #0]
 800d142:	4b4f      	ldr	r3, [pc, #316]	@ (800d280 <temper+0xa24>)
 800d144:	801a      	strh	r2, [r3, #0]
 800d146:	e002      	b.n	800d14e <temper+0x8f2>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800d148:	46c0      	nop			@ (mov r8, r8)
 800d14a:	e000      	b.n	800d14e <temper+0x8f2>
			goto tempe26a;
 800d14c:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800d14e:	4b50      	ldr	r3, [pc, #320]	@ (800d290 <temper+0xa34>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d014      	beq.n	800d180 <temper+0x924>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800d156:	4b4e      	ldr	r3, [pc, #312]	@ (800d290 <temper+0xa34>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b08      	cmp	r3, #8
 800d15c:	d800      	bhi.n	800d160 <temper+0x904>
 800d15e:	e073      	b.n	800d248 <temper+0x9ec>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800d160:	4b43      	ldr	r3, [pc, #268]	@ (800d270 <temper+0xa14>)
 800d162:	4a4c      	ldr	r2, [pc, #304]	@ (800d294 <temper+0xa38>)
 800d164:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800d166:	4b42      	ldr	r3, [pc, #264]	@ (800d270 <temper+0xa14>)
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	4b42      	ldr	r3, [pc, #264]	@ (800d27c <temper+0xa20>)
 800d172:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800d174:	4b3e      	ldr	r3, [pc, #248]	@ (800d270 <temper+0xa14>)
 800d176:	881b      	ldrh	r3, [r3, #0]
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b3f      	ldr	r3, [pc, #252]	@ (800d278 <temper+0xa1c>)
 800d17c:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800d17e:	e0cc      	b.n	800d31a <temper+0xabe>
			goto tempe30;              // Si
 800d180:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800d182:	4b45      	ldr	r3, [pc, #276]	@ (800d298 <temper+0xa3c>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	2201      	movs	r2, #1
 800d188:	4053      	eors	r3, r2
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d05d      	beq.n	800d24c <temper+0x9f0>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800d190:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800d192:	4b42      	ldr	r3, [pc, #264]	@ (800d29c <temper+0xa40>)
 800d194:	881a      	ldrh	r2, [r3, #0]
 800d196:	4b32      	ldr	r3, [pc, #200]	@ (800d260 <temper+0xa04>)
 800d198:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800d19a:	4b31      	ldr	r3, [pc, #196]	@ (800d260 <temper+0xa04>)
 800d19c:	881a      	ldrh	r2, [r3, #0]
 800d19e:	4b38      	ldr	r3, [pc, #224]	@ (800d280 <temper+0xa24>)
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	4b2e      	ldr	r3, [pc, #184]	@ (800d260 <temper+0xa04>)
 800d1a8:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d1aa:	4b2d      	ldr	r3, [pc, #180]	@ (800d260 <temper+0xa04>)
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d100      	bne.n	800d1b4 <temper+0x958>
 800d1b2:	e0ad      	b.n	800d310 <temper+0xab4>
			goto tempe40;
		else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800d1b4:	4b2a      	ldr	r3, [pc, #168]	@ (800d260 <temper+0xa04>)
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	b21b      	sxth	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	da48      	bge.n	800d250 <temper+0x9f4>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800d1be:	4b31      	ldr	r3, [pc, #196]	@ (800d284 <temper+0xa28>)
 800d1c0:	2254      	movs	r2, #84	@ 0x54
 800d1c2:	5c9a      	ldrb	r2, [r3, r2]
 800d1c4:	4b29      	ldr	r3, [pc, #164]	@ (800d26c <temper+0xa10>)
 800d1c6:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800d1c8:	4b28      	ldr	r3, [pc, #160]	@ (800d26c <temper+0xa10>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d06b      	beq.n	800d2a8 <temper+0xa4c>
			goto tempe39;
		A = A << 1;
 800d1d0:	4b26      	ldr	r3, [pc, #152]	@ (800d26c <temper+0xa10>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	18db      	adds	r3, r3, r3
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	4b24      	ldr	r3, [pc, #144]	@ (800d26c <temper+0xa10>)
 800d1da:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800d1dc:	4b30      	ldr	r3, [pc, #192]	@ (800d2a0 <temper+0xa44>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	4b2e      	ldr	r3, [pc, #184]	@ (800d2a0 <temper+0xa44>)
 800d1e6:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800d1e8:	4b20      	ldr	r3, [pc, #128]	@ (800d26c <temper+0xa10>)
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	4b2c      	ldr	r3, [pc, #176]	@ (800d2a0 <temper+0xa44>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d900      	bls.n	800d1f6 <temper+0x99a>
 800d1f4:	e095      	b.n	800d322 <temper+0xac6>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800d1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d260 <temper+0xa04>)
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	425b      	negs	r3, r3
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	4b18      	ldr	r3, [pc, #96]	@ (800d260 <temper+0xa04>)
 800d200:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800d202:	4b17      	ldr	r3, [pc, #92]	@ (800d260 <temper+0xa04>)
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	2b0a      	cmp	r3, #10
 800d208:	d90e      	bls.n	800d228 <temper+0x9cc>
			goto tempe37b;

		X = tDisplay_w;
 800d20a:	4b1d      	ldr	r3, [pc, #116]	@ (800d280 <temper+0xa24>)
 800d20c:	881a      	ldrh	r2, [r3, #0]
 800d20e:	4b18      	ldr	r3, [pc, #96]	@ (800d270 <temper+0xa14>)
 800d210:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800d212:	4b17      	ldr	r3, [pc, #92]	@ (800d270 <temper+0xa14>)
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	3b0a      	subs	r3, #10
 800d218:	b29a      	uxth	r2, r3
 800d21a:	4b15      	ldr	r3, [pc, #84]	@ (800d270 <temper+0xa14>)
 800d21c:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d21e:	4b14      	ldr	r3, [pc, #80]	@ (800d270 <temper+0xa14>)
 800d220:	881a      	ldrh	r2, [r3, #0]
 800d222:	4b20      	ldr	r3, [pc, #128]	@ (800d2a4 <temper+0xa48>)
 800d224:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d226:	e04b      	b.n	800d2c0 <temper+0xa64>
			goto tempe37b;
 800d228:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800d22a:	4b1c      	ldr	r3, [pc, #112]	@ (800d29c <temper+0xa40>)
 800d22c:	881a      	ldrh	r2, [r3, #0]
 800d22e:	4b10      	ldr	r3, [pc, #64]	@ (800d270 <temper+0xa14>)
 800d230:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800d232:	4b0f      	ldr	r3, [pc, #60]	@ (800d270 <temper+0xa14>)
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	3301      	adds	r3, #1
 800d238:	b29a      	uxth	r2, r3
 800d23a:	4b0d      	ldr	r3, [pc, #52]	@ (800d270 <temper+0xa14>)
 800d23c:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d23e:	4b0c      	ldr	r3, [pc, #48]	@ (800d270 <temper+0xa14>)
 800d240:	881a      	ldrh	r2, [r3, #0]
 800d242:	4b18      	ldr	r3, [pc, #96]	@ (800d2a4 <temper+0xa48>)
 800d244:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d246:	e03b      	b.n	800d2c0 <temper+0xa64>
			goto tempe39;              // Si, cargalo al display
 800d248:	46c0      	nop			@ (mov r8, r8)
 800d24a:	e02e      	b.n	800d2aa <temper+0xa4e>
		goto tempe39;
 800d24c:	46c0      	nop			@ (mov r8, r8)
 800d24e:	e02c      	b.n	800d2aa <temper+0xa4e>
			goto tempe39;      // La diferencia es positiva?
 800d250:	46c0      	nop			@ (mov r8, r8)
 800d252:	e02a      	b.n	800d2aa <temper+0xa4e>
 800d254:	20002234 	.word	0x20002234
 800d258:	2000225c 	.word	0x2000225c
 800d25c:	20002262 	.word	0x20002262
 800d260:	20002258 	.word	0x20002258
 800d264:	20002264 	.word	0x20002264
 800d268:	20000c26 	.word	0x20000c26
 800d26c:	20002256 	.word	0x20002256
 800d270:	2000225a 	.word	0x2000225a
 800d274:	2000225e 	.word	0x2000225e
 800d278:	20000c11 	.word	0x20000c11
 800d27c:	20000c10 	.word	0x20000c10
 800d280:	20002196 	.word	0x20002196
 800d284:	200000b8 	.word	0x200000b8
 800d288:	20000be0 	.word	0x20000be0
 800d28c:	20000cb4 	.word	0x20000cb4
 800d290:	20000c24 	.word	0x20000c24
 800d294:	fffffe34 	.word	0xfffffe34
 800d298:	20000bd8 	.word	0x20000bd8
 800d29c:	20000c14 	.word	0x20000c14
 800d2a0:	20000c23 	.word	0x20000c23
 800d2a4:	20002260 	.word	0x20002260
			goto tempe39;
 800d2a8:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800d2aa:	4b5d      	ldr	r3, [pc, #372]	@ (800d420 <temper+0xbc4>)
 800d2ac:	881a      	ldrh	r2, [r3, #0]
 800d2ae:	4b5d      	ldr	r3, [pc, #372]	@ (800d424 <temper+0xbc8>)
 800d2b0:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d2b2:	4b5c      	ldr	r3, [pc, #368]	@ (800d424 <temper+0xbc8>)
 800d2b4:	881a      	ldrh	r2, [r3, #0]
 800d2b6:	4b5c      	ldr	r3, [pc, #368]	@ (800d428 <temper+0xbcc>)
 800d2b8:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800d2ba:	4b5c      	ldr	r3, [pc, #368]	@ (800d42c <temper+0xbd0>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	701a      	strb	r2, [r3, #0]
tempe39a:
//		tnz			cntHoldP;		/ Ya terminó el tiempo de bloqueo por puerta?
//		jrne		tempe40;  / no, congela display
//		;sí, pregunta por tiemmpo de bloqueo por deshielo

		if(cntHoldP)
 800d2c0:	4b5b      	ldr	r3, [pc, #364]	@ (800d430 <temper+0xbd4>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d125      	bne.n	800d314 <temper+0xab8>
			goto tempe40;

		A = cnthold;
 800d2c8:	4b58      	ldr	r3, [pc, #352]	@ (800d42c <temper+0xbd0>)
 800d2ca:	781a      	ldrb	r2, [r3, #0]
 800d2cc:	4b59      	ldr	r3, [pc, #356]	@ (800d434 <temper+0xbd8>)
 800d2ce:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800d2d0:	4b58      	ldr	r3, [pc, #352]	@ (800d434 <temper+0xbd8>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d011      	beq.n	800d2fc <temper+0xaa0>
			goto tempe39b;            // Si, carga el dato a tdevdpy

		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800d2d8:	4b57      	ldr	r3, [pc, #348]	@ (800d438 <temper+0xbdc>)
 800d2da:	881a      	ldrh	r2, [r3, #0]
 800d2dc:	4b57      	ldr	r3, [pc, #348]	@ (800d43c <temper+0xbe0>)
 800d2de:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800d2e0:	4b56      	ldr	r3, [pc, #344]	@ (800d43c <temper+0xbe0>)
 800d2e2:	881a      	ldrh	r2, [r3, #0]
 800d2e4:	4b50      	ldr	r3, [pc, #320]	@ (800d428 <temper+0xbcc>)
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	4b53      	ldr	r3, [pc, #332]	@ (800d43c <temper+0xbe0>)
 800d2ee:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800d2f0:	4b52      	ldr	r3, [pc, #328]	@ (800d43c <temper+0xbe0>)
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	db0e      	blt.n	800d318 <temper+0xabc>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800d2fa:	e000      	b.n	800d2fe <temper+0xaa2>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800d2fc:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800d2fe:	4b4a      	ldr	r3, [pc, #296]	@ (800d428 <temper+0xbcc>)
 800d300:	881a      	ldrh	r2, [r3, #0]
 800d302:	4b48      	ldr	r3, [pc, #288]	@ (800d424 <temper+0xbc8>)
 800d304:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800d306:	4b47      	ldr	r3, [pc, #284]	@ (800d424 <temper+0xbc8>)
 800d308:	881a      	ldrh	r2, [r3, #0]
 800d30a:	4b4d      	ldr	r3, [pc, #308]	@ (800d440 <temper+0xbe4>)
 800d30c:	801a      	strh	r2, [r3, #0]
 800d30e:	e004      	b.n	800d31a <temper+0xabe>
			goto tempe40;
 800d310:	46c0      	nop			@ (mov r8, r8)
 800d312:	e002      	b.n	800d31a <temper+0xabe>
			goto tempe40;
 800d314:	46c0      	nop			@ (mov r8, r8)
 800d316:	e000      	b.n	800d31a <temper+0xabe>
			goto tempe40;             // Si, congela el display en limsup
 800d318:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800d31a:	4b4a      	ldr	r3, [pc, #296]	@ (800d444 <temper+0xbe8>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	701a      	strb	r2, [r3, #0]
 800d320:	e000      	b.n	800d324 <temper+0xac8>
			goto tempe50;
 800d322:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800d324:	4b48      	ldr	r3, [pc, #288]	@ (800d448 <temper+0xbec>)
 800d326:	2200      	movs	r2, #0
 800d328:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800d32a:	4b48      	ldr	r3, [pc, #288]	@ (800d44c <temper+0xbf0>)
 800d32c:	78db      	ldrb	r3, [r3, #3]
 800d32e:	2201      	movs	r2, #1
 800d330:	4053      	eors	r3, r2
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10f      	bne.n	800d358 <temper+0xafc>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800d338:	4b3a      	ldr	r3, [pc, #232]	@ (800d424 <temper+0xbc8>)
 800d33a:	4a45      	ldr	r2, [pc, #276]	@ (800d450 <temper+0xbf4>)
 800d33c:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800d33e:	4b39      	ldr	r3, [pc, #228]	@ (800d424 <temper+0xbc8>)
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	b2da      	uxtb	r2, r3
 800d344:	4b43      	ldr	r3, [pc, #268]	@ (800d454 <temper+0xbf8>)
 800d346:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800d348:	4b36      	ldr	r3, [pc, #216]	@ (800d424 <temper+0xbc8>)
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	0a1b      	lsrs	r3, r3, #8
 800d34e:	b29b      	uxth	r3, r3
 800d350:	b2da      	uxtb	r2, r3
 800d352:	4b41      	ldr	r3, [pc, #260]	@ (800d458 <temper+0xbfc>)
 800d354:	701a      	strb	r2, [r3, #0]
 800d356:	e000      	b.n	800d35a <temper+0xafe>
			goto tempe52;
 800d358:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800d35a:	4b40      	ldr	r3, [pc, #256]	@ (800d45c <temper+0xc00>)
 800d35c:	795b      	ldrb	r3, [r3, #5]
 800d35e:	2201      	movs	r2, #1
 800d360:	4053      	eors	r3, r2
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b00      	cmp	r3, #0
 800d366:	d107      	bne.n	800d378 <temper+0xb1c>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800d368:	4b2e      	ldr	r3, [pc, #184]	@ (800d424 <temper+0xbc8>)
 800d36a:	4a39      	ldr	r2, [pc, #228]	@ (800d450 <temper+0xbf4>)
 800d36c:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800d36e:	4b2d      	ldr	r3, [pc, #180]	@ (800d424 <temper+0xbc8>)
 800d370:	881a      	ldrh	r2, [r3, #0]
 800d372:	4b3b      	ldr	r3, [pc, #236]	@ (800d460 <temper+0xc04>)
 800d374:	801a      	strh	r2, [r3, #0]
 800d376:	e000      	b.n	800d37a <temper+0xb1e>
			goto tempe53;
 800d378:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800d37a:	4b38      	ldr	r3, [pc, #224]	@ (800d45c <temper+0xc00>)
 800d37c:	79db      	ldrb	r3, [r3, #7]
 800d37e:	2201      	movs	r2, #1
 800d380:	4053      	eors	r3, r2
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10b      	bne.n	800d3a0 <temper+0xb44>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800d388:	4b26      	ldr	r3, [pc, #152]	@ (800d424 <temper+0xbc8>)
 800d38a:	4a31      	ldr	r2, [pc, #196]	@ (800d450 <temper+0xbf4>)
 800d38c:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800d38e:	4b25      	ldr	r3, [pc, #148]	@ (800d424 <temper+0xbc8>)
 800d390:	881a      	ldrh	r2, [r3, #0]
 800d392:	4b34      	ldr	r3, [pc, #208]	@ (800d464 <temper+0xc08>)
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	e004      	b.n	800d3a2 <temper+0xb46>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800d398:	46c0      	nop			@ (mov r8, r8)
 800d39a:	e002      	b.n	800d3a2 <temper+0xb46>
			goto fintemp;
 800d39c:	46c0      	nop			@ (mov r8, r8)
 800d39e:	e000      	b.n	800d3a2 <temper+0xb46>
			goto fintemp;
 800d3a0:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800d3a2:	4b31      	ldr	r3, [pc, #196]	@ (800d468 <temper+0xc0c>)
 800d3a4:	781a      	ldrb	r2, [r3, #0]
 800d3a6:	4b23      	ldr	r3, [pc, #140]	@ (800d434 <temper+0xbd8>)
 800d3a8:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800d3aa:	4b22      	ldr	r3, [pc, #136]	@ (800d434 <temper+0xbd8>)
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d02c      	beq.n	800d40c <temper+0xbb0>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800d3b2:	4b2e      	ldr	r3, [pc, #184]	@ (800d46c <temper+0xc10>)
 800d3b4:	2259      	movs	r2, #89	@ 0x59
 800d3b6:	5c9a      	ldrb	r2, [r3, r2]
 800d3b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d434 <temper+0xbd8>)
 800d3ba:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800d3bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d434 <temper+0xbd8>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b04      	cmp	r3, #4
 800d3c2:	d025      	beq.n	800d410 <temper+0xbb4>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800d3c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d434 <temper+0xbd8>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d017      	beq.n	800d3fc <temper+0xba0>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800d3cc:	4b19      	ldr	r3, [pc, #100]	@ (800d434 <temper+0xbd8>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d00b      	beq.n	800d3ec <temper+0xb90>
			goto clrRetFail;
		if (A != 1)
 800d3d4:	4b17      	ldr	r3, [pc, #92]	@ (800d434 <temper+0xbd8>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d11b      	bne.n	800d414 <temper+0xbb8>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800d3dc:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800d3de:	491b      	ldr	r1, [pc, #108]	@ (800d44c <temper+0xbf0>)
 800d3e0:	481a      	ldr	r0, [pc, #104]	@ (800d44c <temper+0xbf0>)
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	f000 fa1c 	bl	800d822 <Bclear_Clear_trfst>
 800d3ea:	e000      	b.n	800d3ee <temper+0xb92>
			goto clrRetFail;
 800d3ec:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800d3ee:	491b      	ldr	r1, [pc, #108]	@ (800d45c <temper+0xc00>)
 800d3f0:	481a      	ldr	r0, [pc, #104]	@ (800d45c <temper+0xc00>)
 800d3f2:	2305      	movs	r3, #5
 800d3f4:	2204      	movs	r2, #4
 800d3f6:	f000 fa14 	bl	800d822 <Bclear_Clear_trfst>
 800d3fa:	e000      	b.n	800d3fe <temper+0xba2>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800d3fc:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800d3fe:	4917      	ldr	r1, [pc, #92]	@ (800d45c <temper+0xc00>)
 800d400:	4812      	ldr	r0, [pc, #72]	@ (800d44c <temper+0xbf0>)
 800d402:	2307      	movs	r3, #7
 800d404:	2205      	movs	r2, #5
 800d406:	f000 fa0c 	bl	800d822 <Bclear_Clear_trfst>
 800d40a:	e004      	b.n	800d416 <temper+0xbba>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800d40c:	46c0      	nop			@ (mov r8, r8)
 800d40e:	e002      	b.n	800d416 <temper+0xbba>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800d410:	46c0      	nop			@ (mov r8, r8)
 800d412:	e000      	b.n	800d416 <temper+0xbba>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800d414:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800d416:	46c0      	nop			@ (mov r8, r8)




}
 800d418:	46c0      	nop			@ (mov r8, r8)
 800d41a:	46bd      	mov	sp, r7
 800d41c:	b004      	add	sp, #16
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	20002196 	.word	0x20002196
 800d424:	2000225a 	.word	0x2000225a
 800d428:	20002260 	.word	0x20002260
 800d42c:	20000c27 	.word	0x20000c27
 800d430:	200021a4 	.word	0x200021a4
 800d434:	20002256 	.word	0x20002256
 800d438:	20000c0e 	.word	0x20000c0e
 800d43c:	20002258 	.word	0x20002258
 800d440:	20000c14 	.word	0x20000c14
 800d444:	20000c23 	.word	0x20000c23
 800d448:	20000c20 	.word	0x20000c20
 800d44c:	20000be8 	.word	0x20000be8
 800d450:	fffffe34 	.word	0xfffffe34
 800d454:	20000c13 	.word	0x20000c13
 800d458:	20000c12 	.word	0x20000c12
 800d45c:	20000be0 	.word	0x20000be0
 800d460:	20000cb4 	.word	0x20000cb4
 800d464:	20002194 	.word	0x20002194
 800d468:	20000bf8 	.word	0x20000bf8
 800d46c:	200000b8 	.word	0x200000b8

0800d470 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
	tempo = 0;
 800d474:	4b57      	ldr	r3, [pc, #348]	@ (800d5d4 <linealiza+0x164>)
 800d476:	2200      	movs	r2, #0
 800d478:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800d47a:	4b57      	ldr	r3, [pc, #348]	@ (800d5d8 <linealiza+0x168>)
 800d47c:	881a      	ldrh	r2, [r3, #0]
 800d47e:	4b57      	ldr	r3, [pc, #348]	@ (800d5dc <linealiza+0x16c>)
 800d480:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800d482:	4b56      	ldr	r3, [pc, #344]	@ (800d5dc <linealiza+0x16c>)
 800d484:	881a      	ldrh	r2, [r3, #0]
 800d486:	4b56      	ldr	r3, [pc, #344]	@ (800d5e0 <linealiza+0x170>)
 800d488:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800d48a:	4b55      	ldr	r3, [pc, #340]	@ (800d5e0 <linealiza+0x170>)
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	4a55      	ldr	r2, [pc, #340]	@ (800d5e4 <linealiza+0x174>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d80e      	bhi.n	800d4b2 <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800d494:	4b52      	ldr	r3, [pc, #328]	@ (800d5e0 <linealiza+0x170>)
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	4a53      	ldr	r2, [pc, #332]	@ (800d5e8 <linealiza+0x178>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d810      	bhi.n	800d4c0 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800d49e:	4b50      	ldr	r3, [pc, #320]	@ (800d5e0 <linealiza+0x170>)
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	4a52      	ldr	r2, [pc, #328]	@ (800d5ec <linealiza+0x17c>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d812      	bhi.n	800d4ce <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800d4a8:	4b4d      	ldr	r3, [pc, #308]	@ (800d5e0 <linealiza+0x170>)
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	2bca      	cmp	r3, #202	@ 0xca
 800d4ae:	d91c      	bls.n	800d4ea <linealiza+0x7a>
		goto lil_principal;
 800d4b0:	e015      	b.n	800d4de <linealiza+0x6e>
		goto wise_hot_3;
 800d4b2:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800d4b4:	4b4e      	ldr	r3, [pc, #312]	@ (800d5f0 <linealiza+0x180>)
 800d4b6:	0019      	movs	r1, r3
 800d4b8:	2053      	movs	r0, #83	@ 0x53
 800d4ba:	f000 f94d 	bl	800d758 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800d4be:	e01b      	b.n	800d4f8 <linealiza+0x88>
		goto wise_hot_2;
 800d4c0:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800d4c2:	4b4c      	ldr	r3, [pc, #304]	@ (800d5f4 <linealiza+0x184>)
 800d4c4:	0019      	movs	r1, r3
 800d4c6:	2034      	movs	r0, #52	@ 0x34
 800d4c8:	f000 f946 	bl	800d758 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800d4cc:	e014      	b.n	800d4f8 <linealiza+0x88>
		goto wise_hot_1;
 800d4ce:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800d4d0:	2393      	movs	r3, #147	@ 0x93
 800d4d2:	01db      	lsls	r3, r3, #7
 800d4d4:	0019      	movs	r1, r3
 800d4d6:	201d      	movs	r0, #29
 800d4d8:	f000 f93e 	bl	800d758 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800d4dc:	e00c      	b.n	800d4f8 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800d4de:	4b46      	ldr	r3, [pc, #280]	@ (800d5f8 <linealiza+0x188>)
 800d4e0:	0019      	movs	r1, r3
 800d4e2:	2013      	movs	r0, #19
 800d4e4:	f000 f938 	bl	800d758 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800d4e8:	e006      	b.n	800d4f8 <linealiza+0x88>
		goto curva_fria;
 800d4ea:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800d4ec:	23de      	movs	r3, #222	@ 0xde
 800d4ee:	019b      	lsls	r3, r3, #6
 800d4f0:	0019      	movs	r1, r3
 800d4f2:	201e      	movs	r0, #30
 800d4f4:	f000 f930 	bl	800d758 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800d4f8:	4b36      	ldr	r3, [pc, #216]	@ (800d5d4 <linealiza+0x164>)
 800d4fa:	881a      	ldrh	r2, [r3, #0]
 800d4fc:	4b3f      	ldr	r3, [pc, #252]	@ (800d5fc <linealiza+0x18c>)
 800d4fe:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800d500:	4b3e      	ldr	r3, [pc, #248]	@ (800d5fc <linealiza+0x18c>)
 800d502:	881a      	ldrh	r2, [r3, #0]
 800d504:	4b35      	ldr	r3, [pc, #212]	@ (800d5dc <linealiza+0x16c>)
 800d506:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800d508:	4b34      	ldr	r3, [pc, #208]	@ (800d5dc <linealiza+0x16c>)
 800d50a:	881b      	ldrh	r3, [r3, #0]
 800d50c:	b21b      	sxth	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	da05      	bge.n	800d51e <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800d512:	4b3a      	ldr	r3, [pc, #232]	@ (800d5fc <linealiza+0x18c>)
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	425b      	negs	r3, r3
 800d518:	b29a      	uxth	r2, r3
 800d51a:	4b38      	ldr	r3, [pc, #224]	@ (800d5fc <linealiza+0x18c>)
 800d51c:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800d51e:	4b37      	ldr	r3, [pc, #220]	@ (800d5fc <linealiza+0x18c>)
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	0a1b      	lsrs	r3, r3, #8
 800d524:	b29b      	uxth	r3, r3
 800d526:	b2da      	uxtb	r2, r3
 800d528:	4b35      	ldr	r3, [pc, #212]	@ (800d600 <linealiza+0x190>)
 800d52a:	701a      	strb	r2, [r3, #0]
	waux = A;
 800d52c:	4b34      	ldr	r3, [pc, #208]	@ (800d600 <linealiza+0x190>)
 800d52e:	781a      	ldrb	r2, [r3, #0]
 800d530:	4b34      	ldr	r3, [pc, #208]	@ (800d604 <linealiza+0x194>)
 800d532:	701a      	strb	r2, [r3, #0]
	A = 10;
 800d534:	4b32      	ldr	r3, [pc, #200]	@ (800d600 <linealiza+0x190>)
 800d536:	220a      	movs	r2, #10
 800d538:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800d53a:	4b30      	ldr	r3, [pc, #192]	@ (800d5fc <linealiza+0x18c>)
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	001a      	movs	r2, r3
 800d542:	4b2f      	ldr	r3, [pc, #188]	@ (800d600 <linealiza+0x190>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4353      	muls	r3, r2
 800d548:	b29a      	uxth	r2, r3
 800d54a:	4b2c      	ldr	r3, [pc, #176]	@ (800d5fc <linealiza+0x18c>)
 800d54c:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800d54e:	4b2b      	ldr	r3, [pc, #172]	@ (800d5fc <linealiza+0x18c>)
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	0a1b      	lsrs	r3, r3, #8
 800d554:	b29b      	uxth	r3, r3
 800d556:	b2da      	uxtb	r2, r3
 800d558:	4b29      	ldr	r3, [pc, #164]	@ (800d600 <linealiza+0x190>)
 800d55a:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800d55c:	4b27      	ldr	r3, [pc, #156]	@ (800d5fc <linealiza+0x18c>)
 800d55e:	2200      	movs	r2, #0
 800d560:	801a      	strh	r2, [r3, #0]
	X = A;
 800d562:	4b27      	ldr	r3, [pc, #156]	@ (800d600 <linealiza+0x190>)
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	001a      	movs	r2, r3
 800d568:	4b24      	ldr	r3, [pc, #144]	@ (800d5fc <linealiza+0x18c>)
 800d56a:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800d56c:	4b23      	ldr	r3, [pc, #140]	@ (800d5fc <linealiza+0x18c>)
 800d56e:	881a      	ldrh	r2, [r3, #0]
 800d570:	4b18      	ldr	r3, [pc, #96]	@ (800d5d4 <linealiza+0x164>)
 800d572:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800d574:	4b23      	ldr	r3, [pc, #140]	@ (800d604 <linealiza+0x194>)
 800d576:	781a      	ldrb	r2, [r3, #0]
 800d578:	4b21      	ldr	r3, [pc, #132]	@ (800d600 <linealiza+0x190>)
 800d57a:	701a      	strb	r2, [r3, #0]
	X = A;
 800d57c:	4b20      	ldr	r3, [pc, #128]	@ (800d600 <linealiza+0x190>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	001a      	movs	r2, r3
 800d582:	4b1e      	ldr	r3, [pc, #120]	@ (800d5fc <linealiza+0x18c>)
 800d584:	801a      	strh	r2, [r3, #0]

	A = 10;
 800d586:	4b1e      	ldr	r3, [pc, #120]	@ (800d600 <linealiza+0x190>)
 800d588:	220a      	movs	r2, #10
 800d58a:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800d58c:	4b1b      	ldr	r3, [pc, #108]	@ (800d5fc <linealiza+0x18c>)
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	b2db      	uxtb	r3, r3
 800d592:	001a      	movs	r2, r3
 800d594:	4b1a      	ldr	r3, [pc, #104]	@ (800d600 <linealiza+0x190>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	4353      	muls	r3, r2
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	4b17      	ldr	r3, [pc, #92]	@ (800d5fc <linealiza+0x18c>)
 800d59e:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800d5a0:	4b16      	ldr	r3, [pc, #88]	@ (800d5fc <linealiza+0x18c>)
 800d5a2:	881a      	ldrh	r2, [r3, #0]
 800d5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d4 <linealiza+0x164>)
 800d5a6:	881b      	ldrh	r3, [r3, #0]
 800d5a8:	18d3      	adds	r3, r2, r3
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	4b13      	ldr	r3, [pc, #76]	@ (800d5fc <linealiza+0x18c>)
 800d5ae:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5dc <linealiza+0x16c>)
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	b21b      	sxth	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	da05      	bge.n	800d5c6 <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800d5ba:	4b10      	ldr	r3, [pc, #64]	@ (800d5fc <linealiza+0x18c>)
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	425b      	negs	r3, r3
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800d5fc <linealiza+0x18c>)
 800d5c4:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800d5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d5fc <linealiza+0x18c>)
 800d5c8:	881a      	ldrh	r2, [r3, #0]
 800d5ca:	4b02      	ldr	r3, [pc, #8]	@ (800d5d4 <linealiza+0x164>)
 800d5cc:	801a      	strh	r2, [r3, #0]
}
 800d5ce:	46c0      	nop			@ (mov r8, r8)
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	2000225e 	.word	0x2000225e
 800d5d8:	2000225c 	.word	0x2000225c
 800d5dc:	20002258 	.word	0x20002258
 800d5e0:	20002254 	.word	0x20002254
 800d5e4:	0000038d 	.word	0x0000038d
 800d5e8:	00000339 	.word	0x00000339
 800d5ec:	000002aa 	.word	0x000002aa
 800d5f0:	0000ffff 	.word	0x0000ffff
 800d5f4:	000093cc 	.word	0x000093cc
 800d5f8:	00002ecc 	.word	0x00002ecc
 800d5fc:	2000225a 	.word	0x2000225a
 800d600:	20002256 	.word	0x20002256
 800d604:	20000bb6 	.word	0x20000bb6

0800d608 <mult1x2>:

void mult1x2(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800d60c:	4b2f      	ldr	r3, [pc, #188]	@ (800d6cc <mult1x2+0xc4>)
 800d60e:	881a      	ldrh	r2, [r3, #0]
 800d610:	4b2f      	ldr	r3, [pc, #188]	@ (800d6d0 <mult1x2+0xc8>)
 800d612:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800d614:	4b2e      	ldr	r3, [pc, #184]	@ (800d6d0 <mult1x2+0xc8>)
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	0a1b      	lsrs	r3, r3, #8
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	4b2d      	ldr	r3, [pc, #180]	@ (800d6d4 <mult1x2+0xcc>)
 800d620:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d622:	4b2c      	ldr	r3, [pc, #176]	@ (800d6d4 <mult1x2+0xcc>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	001a      	movs	r2, r3
 800d628:	4b28      	ldr	r3, [pc, #160]	@ (800d6cc <mult1x2+0xc4>)
 800d62a:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d62c:	4b2a      	ldr	r3, [pc, #168]	@ (800d6d8 <mult1x2+0xd0>)
 800d62e:	781a      	ldrb	r2, [r3, #0]
 800d630:	4b28      	ldr	r3, [pc, #160]	@ (800d6d4 <mult1x2+0xcc>)
 800d632:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800d634:	4b27      	ldr	r3, [pc, #156]	@ (800d6d4 <mult1x2+0xcc>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	001a      	movs	r2, r3
 800d63a:	4b24      	ldr	r3, [pc, #144]	@ (800d6cc <mult1x2+0xc4>)
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	4353      	muls	r3, r2
 800d640:	b29a      	uxth	r2, r3
 800d642:	4b22      	ldr	r3, [pc, #136]	@ (800d6cc <mult1x2+0xc4>)
 800d644:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800d646:	4b21      	ldr	r3, [pc, #132]	@ (800d6cc <mult1x2+0xc4>)
 800d648:	881a      	ldrh	r2, [r3, #0]
 800d64a:	4b24      	ldr	r3, [pc, #144]	@ (800d6dc <mult1x2+0xd4>)
 800d64c:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800d64e:	4b20      	ldr	r3, [pc, #128]	@ (800d6d0 <mult1x2+0xc8>)
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	b2da      	uxtb	r2, r3
 800d654:	4b1f      	ldr	r3, [pc, #124]	@ (800d6d4 <mult1x2+0xcc>)
 800d656:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d658:	4b1e      	ldr	r3, [pc, #120]	@ (800d6d4 <mult1x2+0xcc>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	001a      	movs	r2, r3
 800d65e:	4b1b      	ldr	r3, [pc, #108]	@ (800d6cc <mult1x2+0xc4>)
 800d660:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d662:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d8 <mult1x2+0xd0>)
 800d664:	781a      	ldrb	r2, [r3, #0]
 800d666:	4b1b      	ldr	r3, [pc, #108]	@ (800d6d4 <mult1x2+0xcc>)
 800d668:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800d66a:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d4 <mult1x2+0xcc>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	001a      	movs	r2, r3
 800d670:	4b16      	ldr	r3, [pc, #88]	@ (800d6cc <mult1x2+0xc4>)
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	4353      	muls	r3, r2
 800d676:	b29a      	uxth	r2, r3
 800d678:	4b14      	ldr	r3, [pc, #80]	@ (800d6cc <mult1x2+0xc4>)
 800d67a:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800d67c:	4b13      	ldr	r3, [pc, #76]	@ (800d6cc <mult1x2+0xc4>)
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	b2da      	uxtb	r2, r3
 800d682:	4b14      	ldr	r3, [pc, #80]	@ (800d6d4 <mult1x2+0xcc>)
 800d684:	701a      	strb	r2, [r3, #0]
	resul = A;
 800d686:	4b13      	ldr	r3, [pc, #76]	@ (800d6d4 <mult1x2+0xcc>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	001a      	movs	r2, r3
 800d68c:	4b10      	ldr	r3, [pc, #64]	@ (800d6d0 <mult1x2+0xc8>)
 800d68e:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800d690:	4b0e      	ldr	r3, [pc, #56]	@ (800d6cc <mult1x2+0xc4>)
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	0a1b      	lsrs	r3, r3, #8
 800d696:	b29b      	uxth	r3, r3
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	4b0e      	ldr	r3, [pc, #56]	@ (800d6d4 <mult1x2+0xcc>)
 800d69c:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800d69e:	4b0f      	ldr	r3, [pc, #60]	@ (800d6dc <mult1x2+0xd4>)
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d4 <mult1x2+0xcc>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	18d3      	adds	r3, r2, r3
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	4b09      	ldr	r3, [pc, #36]	@ (800d6d4 <mult1x2+0xcc>)
 800d6ae:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800d6b0:	4b08      	ldr	r3, [pc, #32]	@ (800d6d4 <mult1x2+0xcc>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	021b      	lsls	r3, r3, #8
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	4b05      	ldr	r3, [pc, #20]	@ (800d6d0 <mult1x2+0xc8>)
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	18d3      	adds	r3, r2, r3
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	4b03      	ldr	r3, [pc, #12]	@ (800d6d0 <mult1x2+0xc8>)
 800d6c2:	801a      	strh	r2, [r3, #0]
}
 800d6c4:	46c0      	nop			@ (mov r8, r8)
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	46c0      	nop			@ (mov r8, r8)
 800d6cc:	20002258 	.word	0x20002258
 800d6d0:	2000225c 	.word	0x2000225c
 800d6d4:	20002256 	.word	0x20002256
 800d6d8:	20000bb7 	.word	0x20000bb7
 800d6dc:	20002260 	.word	0x20002260

0800d6e0 <capturaAD>:

void capturaAD (void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800d6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d750 <capturaAD+0x70>)
 800d6e8:	689a      	ldr	r2, [r3, #8]
 800d6ea:	4b19      	ldr	r3, [pc, #100]	@ (800d750 <capturaAD+0x70>)
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	430a      	orrs	r2, r1
 800d6f0:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800d6f2:	4b17      	ldr	r3, [pc, #92]	@ (800d750 <capturaAD+0x70>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	4b16      	ldr	r3, [pc, #88]	@ (800d750 <capturaAD+0x70>)
 800d6f8:	211c      	movs	r1, #28
 800d6fa:	430a      	orrs	r2, r1
 800d6fc:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800d6fe:	4b14      	ldr	r3, [pc, #80]	@ (800d750 <capturaAD+0x70>)
 800d700:	689a      	ldr	r2, [r3, #8]
 800d702:	4b13      	ldr	r3, [pc, #76]	@ (800d750 <capturaAD+0x70>)
 800d704:	2104      	movs	r1, #4
 800d706:	430a      	orrs	r2, r1
 800d708:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800d70a:	46c0      	nop			@ (mov r8, r8)
 800d70c:	4b10      	ldr	r3, [pc, #64]	@ (800d750 <capturaAD+0x70>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2204      	movs	r2, #4
 800d712:	4013      	ands	r3, r2
 800d714:	d0fa      	beq.n	800d70c <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800d716:	4b0e      	ldr	r3, [pc, #56]	@ (800d750 <capturaAD+0x70>)
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	4b0d      	ldr	r3, [pc, #52]	@ (800d750 <capturaAD+0x70>)
 800d71c:	210c      	movs	r1, #12
 800d71e:	438a      	bics	r2, r1
 800d720:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 10; i++);
 800d722:	1dfb      	adds	r3, r7, #7
 800d724:	2200      	movs	r2, #0
 800d726:	701a      	strb	r2, [r3, #0]
 800d728:	e004      	b.n	800d734 <capturaAD+0x54>
 800d72a:	1dfb      	adds	r3, r7, #7
 800d72c:	781a      	ldrb	r2, [r3, #0]
 800d72e:	1dfb      	adds	r3, r7, #7
 800d730:	3201      	adds	r2, #1
 800d732:	701a      	strb	r2, [r3, #0]
 800d734:	1dfb      	adds	r3, r7, #7
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	2b09      	cmp	r3, #9
 800d73a:	d9f6      	bls.n	800d72a <capturaAD+0x4a>

	adcramh = ADC1->DR;
 800d73c:	4b04      	ldr	r3, [pc, #16]	@ (800d750 <capturaAD+0x70>)
 800d73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d740:	b29a      	uxth	r2, r3
 800d742:	4b04      	ldr	r3, [pc, #16]	@ (800d754 <capturaAD+0x74>)
 800d744:	801a      	strh	r2, [r3, #0]
}
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	46bd      	mov	sp, r7
 800d74a:	b002      	add	sp, #8
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	46c0      	nop			@ (mov r8, r8)
 800d750:	40012400 	.word	0x40012400
 800d754:	20000bc0 	.word	0x20000bc0

0800d758 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	0002      	movs	r2, r0
 800d760:	1dfb      	adds	r3, r7, #7
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	1d3b      	adds	r3, r7, #4
 800d766:	1c0a      	adds	r2, r1, #0
 800d768:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800d76a:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a8 <wise_hot_rep+0x50>)
 800d76c:	1dfa      	adds	r2, r7, #7
 800d76e:	7812      	ldrb	r2, [r2, #0]
 800d770:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800d772:	4b0e      	ldr	r3, [pc, #56]	@ (800d7ac <wise_hot_rep+0x54>)
 800d774:	881a      	ldrh	r2, [r3, #0]
 800d776:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b0 <wise_hot_rep+0x58>)
 800d778:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800d77a:	f7ff ff45 	bl	800d608 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800d77e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b4 <wise_hot_rep+0x5c>)
 800d780:	881a      	ldrh	r2, [r3, #0]
 800d782:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <wise_hot_rep+0x60>)
 800d784:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800d786:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b8 <wise_hot_rep+0x60>)
 800d788:	881a      	ldrh	r2, [r3, #0]
 800d78a:	1d3b      	adds	r3, r7, #4
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	1ad3      	subs	r3, r2, r3
 800d790:	b29a      	uxth	r2, r3
 800d792:	4b09      	ldr	r3, [pc, #36]	@ (800d7b8 <wise_hot_rep+0x60>)
 800d794:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800d796:	4b08      	ldr	r3, [pc, #32]	@ (800d7b8 <wise_hot_rep+0x60>)
 800d798:	881a      	ldrh	r2, [r3, #0]
 800d79a:	4b08      	ldr	r3, [pc, #32]	@ (800d7bc <wise_hot_rep+0x64>)
 800d79c:	801a      	strh	r2, [r3, #0]
}
 800d79e:	46c0      	nop			@ (mov r8, r8)
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	b002      	add	sp, #8
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	46c0      	nop			@ (mov r8, r8)
 800d7a8:	20000bb7 	.word	0x20000bb7
 800d7ac:	20002254 	.word	0x20002254
 800d7b0:	20002258 	.word	0x20002258
 800d7b4:	2000225c 	.word	0x2000225c
 800d7b8:	2000225a 	.word	0x2000225a
 800d7bc:	2000225e 	.word	0x2000225e

0800d7c0 <Y_A>:

void Y_A (void)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	af00      	add	r7, sp, #0
	Y = adcramh;
 800d7c4:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <Y_A+0x1c>)
 800d7c6:	881a      	ldrh	r2, [r3, #0]
 800d7c8:	4b05      	ldr	r3, [pc, #20]	@ (800d7e0 <Y_A+0x20>)
 800d7ca:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800d7cc:	4b05      	ldr	r3, [pc, #20]	@ (800d7e4 <Y_A+0x24>)
 800d7ce:	781a      	ldrb	r2, [r3, #0]
 800d7d0:	4b05      	ldr	r3, [pc, #20]	@ (800d7e8 <Y_A+0x28>)
 800d7d2:	701a      	strb	r2, [r3, #0]
}
 800d7d4:	46c0      	nop			@ (mov r8, r8)
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	46c0      	nop			@ (mov r8, r8)
 800d7dc:	20000bc0 	.word	0x20000bc0
 800d7e0:	20002258 	.word	0x20002258
 800d7e4:	20000bf8 	.word	0x20000bf8
 800d7e8:	20002256 	.word	0x20002256

0800d7ec <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	0019      	movs	r1, r3
 800d7f8:	1dfb      	adds	r3, r7, #7
 800d7fa:	701a      	strb	r2, [r3, #0]
 800d7fc:	1dbb      	adds	r3, r7, #6
 800d7fe:	1c0a      	adds	r2, r1, #0
 800d800:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800d802:	1dfb      	adds	r3, r7, #7
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	18d3      	adds	r3, r2, r3
 800d80a:	2201      	movs	r2, #1
 800d80c:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800d80e:	1dbb      	adds	r3, r7, #6
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	18d3      	adds	r3, r2, r3
 800d816:	2200      	movs	r2, #0
 800d818:	701a      	strb	r2, [r3, #0]
}
 800d81a:	46c0      	nop			@ (mov r8, r8)
 800d81c:	46bd      	mov	sp, r7
 800d81e:	b004      	add	sp, #16
 800d820:	bd80      	pop	{r7, pc}

0800d822 <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	0019      	movs	r1, r3
 800d82e:	1dfb      	adds	r3, r7, #7
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	1dbb      	adds	r3, r7, #6
 800d834:	1c0a      	adds	r2, r1, #0
 800d836:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800d838:	1dfb      	adds	r3, r7, #7
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	18d3      	adds	r3, r2, r3
 800d840:	2200      	movs	r2, #0
 800d842:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800d844:	1dbb      	adds	r3, r7, #6
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	18d3      	adds	r3, r2, r3
 800d84c:	2200      	movs	r2, #0
 800d84e:	701a      	strb	r2, [r3, #0]
}
 800d850:	46c0      	nop			@ (mov r8, r8)
 800d852:	46bd      	mov	sp, r7
 800d854:	b004      	add	sp, #16
 800d856:	bd80      	pop	{r7, pc}

0800d858 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800d858:	b580      	push	{r7, lr}
 800d85a:	af00      	add	r7, sp, #0

    asm ("nop");
 800d85c:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800d85e:	4bcf      	ldr	r3, [pc, #828]	@ (800db9c <tiempo+0x344>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b07      	cmp	r3, #7
 800d864:	d900      	bls.n	800d868 <tiempo+0x10>
 800d866:	e25b      	b.n	800dd20 <tiempo+0x4c8>
			goto tiempo10;				//	jrult		tiempo10;
 800d868:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800d86a:	4bcd      	ldr	r3, [pc, #820]	@ (800dba0 <tiempo+0x348>)
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	3301      	adds	r3, #1
 800d870:	b29a      	uxth	r2, r3
 800d872:	4bcb      	ldr	r3, [pc, #812]	@ (800dba0 <tiempo+0x348>)
 800d874:	801a      	strh	r2, [r3, #0]

			   decwreg(&delayComStat);
 800d876:	4bcb      	ldr	r3, [pc, #812]	@ (800dba4 <tiempo+0x34c>)
 800d878:	0018      	movs	r0, r3
 800d87a:	f7f9 fc2a 	bl	80070d2 <decwreg>
			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800d87e:	4bca      	ldr	r3, [pc, #808]	@ (800dba8 <tiempo+0x350>)
 800d880:	0018      	movs	r0, r3
 800d882:	f7f9 fc26 	bl	80070d2 <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800d886:	4bc9      	ldr	r3, [pc, #804]	@ (800dbac <tiempo+0x354>)
 800d888:	0018      	movs	r0, r3
 800d88a:	f7f9 fc22 	bl	80070d2 <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800d88e:	4bc8      	ldr	r3, [pc, #800]	@ (800dbb0 <tiempo+0x358>)
 800d890:	0018      	movs	r0, r3
 800d892:	f7f9 fc1e 	bl	80070d2 <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800d896:	4bc7      	ldr	r3, [pc, #796]	@ (800dbb4 <tiempo+0x35c>)
 800d898:	0018      	movs	r0, r3
 800d89a:	f7f9 fc1a 	bl	80070d2 <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800d89e:	4bc6      	ldr	r3, [pc, #792]	@ (800dbb8 <tiempo+0x360>)
 800d8a0:	0018      	movs	r0, r3
 800d8a2:	f7f9 fc16 	bl	80070d2 <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800d8a6:	4bc5      	ldr	r3, [pc, #788]	@ (800dbbc <tiempo+0x364>)
 800d8a8:	0018      	movs	r0, r3
 800d8aa:	f7f9 fc12 	bl	80070d2 <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800d8ae:	4bc4      	ldr	r3, [pc, #784]	@ (800dbc0 <tiempo+0x368>)
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	f7f9 fc0e 	bl	80070d2 <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800d8b6:	4bc3      	ldr	r3, [pc, #780]	@ (800dbc4 <tiempo+0x36c>)
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	f7f9 fc0a 	bl	80070d2 <decwreg>

		       cntcent++;					//	Una centésima más
 800d8be:	4bc2      	ldr	r3, [pc, #776]	@ (800dbc8 <tiempo+0x370>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	4bc0      	ldr	r3, [pc, #768]	@ (800dbc8 <tiempo+0x370>)
 800d8c8:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800d8ca:	4bbf      	ldr	r3, [pc, #764]	@ (800dbc8 <tiempo+0x370>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	001a      	movs	r2, r3
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	d01c      	beq.n	800d910 <tiempo+0xb8>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800d8d6:	4bbd      	ldr	r3, [pc, #756]	@ (800dbcc <tiempo+0x374>)
 800d8d8:	0018      	movs	r0, r3
 800d8da:	f7f9 fbfa 	bl	80070d2 <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800d8de:	4bbc      	ldr	r3, [pc, #752]	@ (800dbd0 <tiempo+0x378>)
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	f7f9 fbf6 	bl	80070d2 <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800d8e6:	4bbb      	ldr	r3, [pc, #748]	@ (800dbd4 <tiempo+0x37c>)
 800d8e8:	0018      	movs	r0, r3
 800d8ea:	f7f9 fbf2 	bl	80070d2 <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800d8ee:	4bba      	ldr	r3, [pc, #744]	@ (800dbd8 <tiempo+0x380>)
 800d8f0:	0018      	movs	r0, r3
 800d8f2:	f7f9 fbee 	bl	80070d2 <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800d8f6:	4bb9      	ldr	r3, [pc, #740]	@ (800dbdc <tiempo+0x384>)
 800d8f8:	0018      	movs	r0, r3
 800d8fa:	f7f9 fbea 	bl	80070d2 <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800d8fe:	4bb8      	ldr	r3, [pc, #736]	@ (800dbe0 <tiempo+0x388>)
 800d900:	0018      	movs	r0, r3
 800d902:	f7f9 fbe6 	bl	80070d2 <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800d906:	4bb7      	ldr	r3, [pc, #732]	@ (800dbe4 <tiempo+0x38c>)
 800d908:	0018      	movs	r0, r3
 800d90a:	f7f9 fbe2 	bl	80070d2 <decwreg>
 800d90e:	e000      	b.n	800d912 <tiempo+0xba>
			        goto no_dec_deb;
 800d910:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800d912:	4bad      	ldr	r3, [pc, #692]	@ (800dbc8 <tiempo+0x370>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b63      	cmp	r3, #99	@ 0x63
 800d918:	d800      	bhi.n	800d91c <tiempo+0xc4>
 800d91a:	e203      	b.n	800dd24 <tiempo+0x4cc>
		        	goto tiempo12;			//;jruge		tiempo12
 800d91c:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;				//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800d91e:	4baa      	ldr	r3, [pc, #680]	@ (800dbc8 <tiempo+0x370>)
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
//;-----------------------------------------------------------------------------------

				//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
				//ld			A,BluetoothState
				//cp			A,#3
				if(BluetoothState!=3)//jrne		endSelect
 800d924:	4bb0      	ldr	r3, [pc, #704]	@ (800dbe8 <tiempo+0x390>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b03      	cmp	r3, #3
 800d92a:	d142      	bne.n	800d9b2 <tiempo+0x15a>
					goto endSelect;
				//ldw			X,#cntSetName;
				decword(&cntSetName);//call		decword
 800d92c:	4baf      	ldr	r3, [pc, #700]	@ (800dbec <tiempo+0x394>)
 800d92e:	0018      	movs	r0, r3
 800d930:	f7f9 fbbd 	bl	80070ae <decword>
				//btjt	flagsTxControl,#f_statBLE,no_toggleCOM;  Con conexión BLE activa no cambies el canal de comunicacion
				//; no cambies de canal de comunicación si se está transmitiendo algun logger via wifi
				//btjt	flagsWIFI,#f_timeLoggerCmd,no_toggleCOM;
				//btjt	flagsWIFI,#f_eventLoggerCmd,no_toggleCOM;

				if(flagsTxControl[f_statBLE] || flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800d934:	4bae      	ldr	r3, [pc, #696]	@ (800dbf0 <tiempo+0x398>)
 800d936:	785b      	ldrb	r3, [r3, #1]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d11e      	bne.n	800d97a <tiempo+0x122>
 800d93c:	4bad      	ldr	r3, [pc, #692]	@ (800dbf4 <tiempo+0x39c>)
 800d93e:	78db      	ldrb	r3, [r3, #3]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d11a      	bne.n	800d97a <tiempo+0x122>
 800d944:	4bab      	ldr	r3, [pc, #684]	@ (800dbf4 <tiempo+0x39c>)
 800d946:	791b      	ldrb	r3, [r3, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d116      	bne.n	800d97a <tiempo+0x122>
					goto no_toggleCOM;

toggleCOM:
 800d94c:	46c0      	nop			@ (mov r8, r8)
				//; no cambies el canal de comunicación si hay una respuesta en transmisión en progreso
				//tnz		keyTx
				if(keyTx)//jrne	no_toggleCOM
 800d94e:	4baa      	ldr	r3, [pc, #680]	@ (800dbf8 <tiempo+0x3a0>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d113      	bne.n	800d97e <tiempo+0x126>
					goto no_toggleCOM;
				flagsTxControl[f_select] = !(flagsTxControl[f_select]);// bcpl		flagsTxControl,#f_select
 800d956:	4ba6      	ldr	r3, [pc, #664]	@ (800dbf0 <tiempo+0x398>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	1e5a      	subs	r2, r3, #1
 800d95c:	4193      	sbcs	r3, r2
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2201      	movs	r2, #1
 800d962:	4053      	eors	r3, r2
 800d964:	b2db      	uxtb	r3, r3
 800d966:	1c1a      	adds	r2, r3, #0
 800d968:	2301      	movs	r3, #1
 800d96a:	4013      	ands	r3, r2
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	4ba0      	ldr	r3, [pc, #640]	@ (800dbf0 <tiempo+0x398>)
 800d970:	701a      	strb	r2, [r3, #0]
				delayComStat = 10;//mov			delayComStat,#10
 800d972:	4b8c      	ldr	r3, [pc, #560]	@ (800dba4 <tiempo+0x34c>)
 800d974:	220a      	movs	r2, #10
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	e002      	b.n	800d980 <tiempo+0x128>
					goto no_toggleCOM;
 800d97a:	46c0      	nop			@ (mov r8, r8)
 800d97c:	e000      	b.n	800d980 <tiempo+0x128>
					goto no_toggleCOM;
 800d97e:	46c0      	nop			@ (mov r8, r8)
no_toggleCOM:

				if(!flagsTxControl[f_select])//btjf		flagsTxControl,#f_select,BLEselect
 800d980:	4b9b      	ldr	r3, [pc, #620]	@ (800dbf0 <tiempo+0x398>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2201      	movs	r2, #1
 800d986:	4053      	eors	r3, r2
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d108      	bne.n	800d9a0 <tiempo+0x148>
					goto BLEselect;
WIFIselect:
 800d98e:	46c0      	nop			@ (mov r8, r8)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);//bset		PE_ODR,#2
 800d990:	2380      	movs	r3, #128	@ 0x80
 800d992:	015b      	lsls	r3, r3, #5
 800d994:	4899      	ldr	r0, [pc, #612]	@ (800dbfc <tiempo+0x3a4>)
 800d996:	2201      	movs	r2, #1
 800d998:	0019      	movs	r1, r3
 800d99a:	f006 fdfa 	bl	8014592 <HAL_GPIO_WritePin>
				goto endSelect;//jra			endSelect
 800d99e:	e009      	b.n	800d9b4 <tiempo+0x15c>
					goto BLEselect;
 800d9a0:	46c0      	nop			@ (mov r8, r8)
BLEselect:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);//bres		PE_ODR,#2
 800d9a2:	2380      	movs	r3, #128	@ 0x80
 800d9a4:	015b      	lsls	r3, r3, #5
 800d9a6:	4895      	ldr	r0, [pc, #596]	@ (800dbfc <tiempo+0x3a4>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	0019      	movs	r1, r3
 800d9ac:	f006 fdf1 	bl	8014592 <HAL_GPIO_WritePin>
 800d9b0:	e000      	b.n	800d9b4 <tiempo+0x15c>
					goto endSelect;
 800d9b2:	46c0      	nop			@ (mov r8, r8)
//    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
//no_inc_timeH:
//
//noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800d9b4:	4b92      	ldr	r3, [pc, #584]	@ (800dc00 <tiempo+0x3a8>)
 800d9b6:	0018      	movs	r0, r3
 800d9b8:	f7f9 fb79 	bl	80070ae <decword>
	            decwreg(&timeTxTBLE);
 800d9bc:	4b91      	ldr	r3, [pc, #580]	@ (800dc04 <tiempo+0x3ac>)
 800d9be:	0018      	movs	r0, r3
 800d9c0:	f7f9 fb87 	bl	80070d2 <decwreg>
				decword(&timeoutTBLE);
 800d9c4:	4b90      	ldr	r3, [pc, #576]	@ (800dc08 <tiempo+0x3b0>)
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	f7f9 fb71 	bl	80070ae <decword>
	            decwreg(&timeTxTWF);
 800d9cc:	4b8f      	ldr	r3, [pc, #572]	@ (800dc0c <tiempo+0x3b4>)
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	f7f9 fb7f 	bl	80070d2 <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800d9d4:	4b8e      	ldr	r3, [pc, #568]	@ (800dc10 <tiempo+0x3b8>)
 800d9d6:	0018      	movs	r0, r3
 800d9d8:	f7f9 fb69 	bl	80070ae <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800d9dc:	4b8d      	ldr	r3, [pc, #564]	@ (800dc14 <tiempo+0x3bc>)
 800d9de:	0018      	movs	r0, r3
 800d9e0:	f7f9 fb77 	bl	80070d2 <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800d9e4:	4b8c      	ldr	r3, [pc, #560]	@ (800dc18 <tiempo+0x3c0>)
 800d9e6:	0018      	movs	r0, r3
 800d9e8:	f7f9 fb73 	bl	80070d2 <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800d9ec:	4b8b      	ldr	r3, [pc, #556]	@ (800dc1c <tiempo+0x3c4>)
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f7f9 fb6f 	bl	80070d2 <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800d9f4:	4b8a      	ldr	r3, [pc, #552]	@ (800dc20 <tiempo+0x3c8>)
 800d9f6:	0018      	movs	r0, r3
 800d9f8:	f7f9 fb6b 	bl	80070d2 <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800d9fc:	4b89      	ldr	r3, [pc, #548]	@ (800dc24 <tiempo+0x3cc>)
 800d9fe:	0018      	movs	r0, r3
 800da00:	f7f9 fb67 	bl	80070d2 <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800da04:	4b88      	ldr	r3, [pc, #544]	@ (800dc28 <tiempo+0x3d0>)
 800da06:	0018      	movs	r0, r3
 800da08:	f7f9 fb63 	bl	80070d2 <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800da0c:	4b87      	ldr	r3, [pc, #540]	@ (800dc2c <tiempo+0x3d4>)
 800da0e:	0018      	movs	r0, r3
 800da10:	f7f9 fb4d 	bl	80070ae <decword>
		    	decword(&timePreDh_h);
 800da14:	4b86      	ldr	r3, [pc, #536]	@ (800dc30 <tiempo+0x3d8>)
 800da16:	0018      	movs	r0, r3
 800da18:	f7f9 fb49 	bl	80070ae <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800da1c:	4b85      	ldr	r3, [pc, #532]	@ (800dc34 <tiempo+0x3dc>)
 800da1e:	0018      	movs	r0, r3
 800da20:	f7f9 fb57 	bl	80070d2 <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800da24:	4b84      	ldr	r3, [pc, #528]	@ (800dc38 <tiempo+0x3e0>)
 800da26:	0018      	movs	r0, r3
 800da28:	f7f9 fb53 	bl	80070d2 <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800da2c:	4b83      	ldr	r3, [pc, #524]	@ (800dc3c <tiempo+0x3e4>)
 800da2e:	0018      	movs	r0, r3
 800da30:	f7f9 fb4f 	bl	80070d2 <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800da34:	4b82      	ldr	r3, [pc, #520]	@ (800dc40 <tiempo+0x3e8>)
 800da36:	0018      	movs	r0, r3
 800da38:	f7f9 fb4b 	bl	80070d2 <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800da3c:	4b81      	ldr	r3, [pc, #516]	@ (800dc44 <tiempo+0x3ec>)
 800da3e:	0018      	movs	r0, r3
 800da40:	f7f9 fb47 	bl	80070d2 <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800da44:	4b80      	ldr	r3, [pc, #512]	@ (800dc48 <tiempo+0x3f0>)
 800da46:	0018      	movs	r0, r3
 800da48:	f7f9 fb43 	bl	80070d2 <decwreg>
		    	decwreg(&valflvl);//
 800da4c:	4b7f      	ldr	r3, [pc, #508]	@ (800dc4c <tiempo+0x3f4>)
 800da4e:	0018      	movs	r0, r3
 800da50:	f7f9 fb3f 	bl	80070d2 <decwreg>
		    	decwreg(&valfhvl);//
 800da54:	4b7e      	ldr	r3, [pc, #504]	@ (800dc50 <tiempo+0x3f8>)
 800da56:	0018      	movs	r0, r3
 800da58:	f7f9 fb3b 	bl	80070d2 <decwreg>
		    	decwreg(&cnt_prog);//
 800da5c:	4b7d      	ldr	r3, [pc, #500]	@ (800dc54 <tiempo+0x3fc>)
 800da5e:	0018      	movs	r0, r3
 800da60:	f7f9 fb37 	bl	80070d2 <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800da64:	4b7c      	ldr	r3, [pc, #496]	@ (800dc58 <tiempo+0x400>)
 800da66:	0018      	movs	r0, r3
 800da68:	f7f9 fb33 	bl	80070d2 <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800da6c:	4b7b      	ldr	r3, [pc, #492]	@ (800dc5c <tiempo+0x404>)
 800da6e:	0018      	movs	r0, r3
 800da70:	f7f9 fb2f 	bl	80070d2 <decwreg>
		    	decwreg(&End_sec);//
 800da74:	4b7a      	ldr	r3, [pc, #488]	@ (800dc60 <tiempo+0x408>)
 800da76:	0018      	movs	r0, r3
 800da78:	f7f9 fb2b 	bl	80070d2 <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800da7c:	4b79      	ldr	r3, [pc, #484]	@ (800dc64 <tiempo+0x40c>)
 800da7e:	0018      	movs	r0, r3
 800da80:	f7f9 fb15 	bl	80070ae <decword>

		    	decwreg(&timeOutRst);
 800da84:	4b78      	ldr	r3, [pc, #480]	@ (800dc68 <tiempo+0x410>)
 800da86:	0018      	movs	r0, r3
 800da88:	f7f9 fb23 	bl	80070d2 <decwreg>
		    	decwreg(&timeOutRx);
 800da8c:	4b77      	ldr	r3, [pc, #476]	@ (800dc6c <tiempo+0x414>)
 800da8e:	0018      	movs	r0, r3
 800da90:	f7f9 fb1f 	bl	80070d2 <decwreg>
		    	decwreg(&timeRstBLE);
 800da94:	4b76      	ldr	r3, [pc, #472]	@ (800dc70 <tiempo+0x418>)
 800da96:	0018      	movs	r0, r3
 800da98:	f7f9 fb1b 	bl	80070d2 <decwreg>
		    	//decword(&cntLogger_H);			// decrementra contador de logger
		    	decwreg(&cntInitTx);
 800da9c:	4b75      	ldr	r3, [pc, #468]	@ (800dc74 <tiempo+0x41c>)
 800da9e:	0018      	movs	r0, r3
 800daa0:	f7f9 fb17 	bl	80070d2 <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800daa4:	4b74      	ldr	r3, [pc, #464]	@ (800dc78 <tiempo+0x420>)
 800daa6:	0018      	movs	r0, r3
 800daa8:	f7f9 fb01 	bl	80070ae <decword>

		    	decword(&t_ahorro1_H);
 800daac:	4b73      	ldr	r3, [pc, #460]	@ (800dc7c <tiempo+0x424>)
 800daae:	0018      	movs	r0, r3
 800dab0:	f7f9 fafd 	bl	80070ae <decword>
		    	decword(&t_ahorro2_H);
 800dab4:	4b72      	ldr	r3, [pc, #456]	@ (800dc80 <tiempo+0x428>)
 800dab6:	0018      	movs	r0, r3
 800dab8:	f7f9 faf9 	bl	80070ae <decword>
		    	decword(&cntNoct_H);
 800dabc:	4b71      	ldr	r3, [pc, #452]	@ (800dc84 <tiempo+0x42c>)
 800dabe:	0018      	movs	r0, r3
 800dac0:	f7f9 faf5 	bl	80070ae <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800dac4:	4b5d      	ldr	r3, [pc, #372]	@ (800dc3c <tiempo+0x3e4>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	001a      	movs	r2, r3
 800daca:	2301      	movs	r3, #1
 800dacc:	4013      	ands	r3, r2
 800dace:	d104      	bne.n	800dada <tiempo+0x282>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800dad0:	4b6d      	ldr	r3, [pc, #436]	@ (800dc88 <tiempo+0x430>)
 800dad2:	0018      	movs	r0, r3
 800dad4:	f7f9 fafd 	bl	80070d2 <decwreg>
 800dad8:	e000      	b.n	800dadc <tiempo+0x284>
		    		goto no_dec2;
 800dada:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800dadc:	4b6b      	ldr	r3, [pc, #428]	@ (800dc8c <tiempo+0x434>)
 800dade:	0018      	movs	r0, r3
 800dae0:	f7f9 fae5 	bl	80070ae <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800dae4:	4b6a      	ldr	r3, [pc, #424]	@ (800dc90 <tiempo+0x438>)
 800dae6:	0018      	movs	r0, r3
 800dae8:	f7f9 fae1 	bl	80070ae <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800daec:	4b69      	ldr	r3, [pc, #420]	@ (800dc94 <tiempo+0x43c>)
 800daee:	0018      	movs	r0, r3
 800daf0:	f7f9 fadd 	bl	80070ae <decword>
		    	decword(&drp_fanh);
 800daf4:	4b68      	ldr	r3, [pc, #416]	@ (800dc98 <tiempo+0x440>)
 800daf6:	0018      	movs	r0, r3
 800daf8:	f7f9 fad9 	bl	80070ae <decword>
		    	decword(&drp_comph);
 800dafc:	4b67      	ldr	r3, [pc, #412]	@ (800dc9c <tiempo+0x444>)
 800dafe:	0018      	movs	r0, r3
 800db00:	f7f9 fad5 	bl	80070ae <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800db04:	4b66      	ldr	r3, [pc, #408]	@ (800dca0 <tiempo+0x448>)
 800db06:	881a      	ldrh	r2, [r3, #0]
 800db08:	4b66      	ldr	r3, [pc, #408]	@ (800dca4 <tiempo+0x44c>)
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d204      	bcs.n	800db1a <tiempo+0x2c2>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800db10:	4b65      	ldr	r3, [pc, #404]	@ (800dca8 <tiempo+0x450>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d006      	beq.n	800db26 <tiempo+0x2ce>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800db18:	e000      	b.n	800db1c <tiempo+0x2c4>
		    		goto tiempo_17;
 800db1a:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800db1c:	4b60      	ldr	r3, [pc, #384]	@ (800dca0 <tiempo+0x448>)
 800db1e:	0018      	movs	r0, r3
 800db20:	f7f9 fac5 	bl	80070ae <decword>
 800db24:	e000      	b.n	800db28 <tiempo+0x2d0>
	        	goto tiempo20; //jra tiempo20
 800db26:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800db28:	4b60      	ldr	r3, [pc, #384]	@ (800dcac <tiempo+0x454>)
 800db2a:	0018      	movs	r0, r3
 800db2c:	f7f9 fabf 	bl	80070ae <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800db30:	4b5f      	ldr	r3, [pc, #380]	@ (800dcb0 <tiempo+0x458>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	b2da      	uxtb	r2, r3
 800db38:	4b5d      	ldr	r3, [pc, #372]	@ (800dcb0 <tiempo+0x458>)
 800db3a:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800db3c:	4b5c      	ldr	r3, [pc, #368]	@ (800dcb0 <tiempo+0x458>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	2b3b      	cmp	r3, #59	@ 0x3b
 800db42:	d907      	bls.n	800db54 <tiempo+0x2fc>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800db44:	4b5a      	ldr	r3, [pc, #360]	@ (800dcb0 <tiempo+0x458>)
 800db46:	2200      	movs	r2, #0
 800db48:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800db4a:	4b5a      	ldr	r3, [pc, #360]	@ (800dcb4 <tiempo+0x45c>)
 800db4c:	0018      	movs	r0, r3
 800db4e:	f7f9 fac0 	bl	80070d2 <decwreg>
 800db52:	e000      	b.n	800db56 <tiempo+0x2fe>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800db54:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
				if(GetRegFlagState(cntseg, 3)){
 800db56:	4b58      	ldr	r3, [pc, #352]	@ (800dcb8 <tiempo+0x460>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	001a      	movs	r2, r3
 800db5c:	2308      	movs	r3, #8
 800db5e:	4013      	ands	r3, r2
 800db60:	d001      	beq.n	800db66 <tiempo+0x30e>
					asm ("nop");
 800db62:	46c0      	nop			@ (mov r8, r8)
 800db64:	e000      	b.n	800db68 <tiempo+0x310>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800db66:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800db68:	4b53      	ldr	r3, [pc, #332]	@ (800dcb8 <tiempo+0x460>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	3301      	adds	r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	4b51      	ldr	r3, [pc, #324]	@ (800dcb8 <tiempo+0x460>)
 800db72:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800db74:	4b50      	ldr	r3, [pc, #320]	@ (800dcb8 <tiempo+0x460>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b08      	cmp	r3, #8
 800db7a:	d903      	bls.n	800db84 <tiempo+0x32c>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800db7c:	4b4f      	ldr	r3, [pc, #316]	@ (800dcbc <tiempo+0x464>)
 800db7e:	2200      	movs	r2, #0
 800db80:	701a      	strb	r2, [r3, #0]
 800db82:	e000      	b.n	800db86 <tiempo+0x32e>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800db84:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800db86:	4b4c      	ldr	r3, [pc, #304]	@ (800dcb8 <tiempo+0x460>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	001a      	movs	r2, r3
 800db8c:	2310      	movs	r3, #16
 800db8e:	4013      	ands	r3, r2
 800db90:	d100      	bne.n	800db94 <tiempo+0x33c>
 800db92:	e095      	b.n	800dcc0 <tiempo+0x468>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800db94:	4b49      	ldr	r3, [pc, #292]	@ (800dcbc <tiempo+0x464>)
 800db96:	2200      	movs	r2, #0
 800db98:	71da      	strb	r2, [r3, #7]
 800db9a:	e092      	b.n	800dcc2 <tiempo+0x46a>
 800db9c:	20000c1e 	.word	0x20000c1e
 800dba0:	20000bb0 	.word	0x20000bb0
 800dba4:	200021e4 	.word	0x200021e4
 800dba8:	20002158 	.word	0x20002158
 800dbac:	20002191 	.word	0x20002191
 800dbb0:	20000c22 	.word	0x20000c22
 800dbb4:	20000c29 	.word	0x20000c29
 800dbb8:	20000c80 	.word	0x20000c80
 800dbbc:	20000c81 	.word	0x20000c81
 800dbc0:	20000c82 	.word	0x20000c82
 800dbc4:	20000c94 	.word	0x20000c94
 800dbc8:	20000bae 	.word	0x20000bae
 800dbcc:	20000c70 	.word	0x20000c70
 800dbd0:	20000c71 	.word	0x20000c71
 800dbd4:	20000c72 	.word	0x20000c72
 800dbd8:	20000c73 	.word	0x20000c73
 800dbdc:	20000c74 	.word	0x20000c74
 800dbe0:	20000c75 	.word	0x20000c75
 800dbe4:	20000c76 	.word	0x20000c76
 800dbe8:	2000004c 	.word	0x2000004c
 800dbec:	200021e8 	.word	0x200021e8
 800dbf0:	200021dc 	.word	0x200021dc
 800dbf4:	20002044 	.word	0x20002044
 800dbf8:	20001f0d 	.word	0x20001f0d
 800dbfc:	50000400 	.word	0x50000400
 800dc00:	20001fcc 	.word	0x20001fcc
 800dc04:	200021ea 	.word	0x200021ea
 800dc08:	200021ec 	.word	0x200021ec
 800dc0c:	2000202e 	.word	0x2000202e
 800dc10:	20002040 	.word	0x20002040
 800dc14:	2000206e 	.word	0x2000206e
 800dc18:	2000206f 	.word	0x2000206f
 800dc1c:	2000215a 	.word	0x2000215a
 800dc20:	20002192 	.word	0x20002192
 800dc24:	20001fdb 	.word	0x20001fdb
 800dc28:	20002198 	.word	0x20002198
 800dc2c:	20002094 	.word	0x20002094
 800dc30:	200021ee 	.word	0x200021ee
 800dc34:	20000bca 	.word	0x20000bca
 800dc38:	20000bcb 	.word	0x20000bcb
 800dc3c:	20000bcc 	.word	0x20000bcc
 800dc40:	20000bcd 	.word	0x20000bcd
 800dc44:	20000bce 	.word	0x20000bce
 800dc48:	20000bcf 	.word	0x20000bcf
 800dc4c:	20000bd0 	.word	0x20000bd0
 800dc50:	20000bd1 	.word	0x20000bd1
 800dc54:	20000bd2 	.word	0x20000bd2
 800dc58:	20000bd3 	.word	0x20000bd3
 800dc5c:	20000bd4 	.word	0x20000bd4
 800dc60:	20000bd5 	.word	0x20000bd5
 800dc64:	20000c96 	.word	0x20000c96
 800dc68:	20001fd9 	.word	0x20001fd9
 800dc6c:	20001fda 	.word	0x20001fda
 800dc70:	20001fdc 	.word	0x20001fdc
 800dc74:	20001f0e 	.word	0x20001f0e
 800dc78:	20002042 	.word	0x20002042
 800dc7c:	20000c90 	.word	0x20000c90
 800dc80:	20000c92 	.word	0x20000c92
 800dc84:	20000ca4 	.word	0x20000ca4
 800dc88:	20000c88 	.word	0x20000c88
 800dc8c:	20000bc8 	.word	0x20000bc8
 800dc90:	20000bc2 	.word	0x20000bc2
 800dc94:	20000bc6 	.word	0x20000bc6
 800dc98:	20000c5c 	.word	0x20000c5c
 800dc9c:	20000c5a 	.word	0x20000c5a
 800dca0:	20000c16 	.word	0x20000c16
 800dca4:	20000c1c 	.word	0x20000c1c
 800dca8:	20000bb8 	.word	0x20000bb8
 800dcac:	20000c18 	.word	0x20000c18
 800dcb0:	20000bb5 	.word	0x20000bb5
 800dcb4:	20000c27 	.word	0x20000c27
 800dcb8:	20000baf 	.word	0x20000baf
 800dcbc:	20000bd8 	.word	0x20000bd8
					goto	tiempo_j01;		// Ya son 16 segundos?
 800dcc0:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800dcc2:	4b1c      	ldr	r3, [pc, #112]	@ (800dd34 <tiempo+0x4dc>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2b3b      	cmp	r3, #59	@ 0x3b
 800dcc8:	d92e      	bls.n	800dd28 <tiempo+0x4d0>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800dcca:	4b1a      	ldr	r3, [pc, #104]	@ (800dd34 <tiempo+0x4dc>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800dcd0:	4b19      	ldr	r3, [pc, #100]	@ (800dd38 <tiempo+0x4e0>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800dcd6:	4b19      	ldr	r3, [pc, #100]	@ (800dd3c <tiempo+0x4e4>)
 800dcd8:	0018      	movs	r0, r3
 800dcda:	f7f9 f9fa 	bl	80070d2 <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800dcde:	4b18      	ldr	r3, [pc, #96]	@ (800dd40 <tiempo+0x4e8>)
 800dce0:	0018      	movs	r0, r3
 800dce2:	f7f9 f9f6 	bl	80070d2 <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800dce6:	4b17      	ldr	r3, [pc, #92]	@ (800dd44 <tiempo+0x4ec>)
 800dce8:	0018      	movs	r0, r3
 800dcea:	f7f9 f9f2 	bl	80070d2 <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800dcee:	4b16      	ldr	r3, [pc, #88]	@ (800dd48 <tiempo+0x4f0>)
 800dcf0:	0018      	movs	r0, r3
 800dcf2:	f7f9 f9ee 	bl	80070d2 <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800dcf6:	4b15      	ldr	r3, [pc, #84]	@ (800dd4c <tiempo+0x4f4>)
 800dcf8:	0018      	movs	r0, r3
 800dcfa:	f7f9 f9ea 	bl	80070d2 <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800dcfe:	4b14      	ldr	r3, [pc, #80]	@ (800dd50 <tiempo+0x4f8>)
 800dd00:	0018      	movs	r0, r3
 800dd02:	f7f9 f9d4 	bl	80070ae <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800dd06:	4b13      	ldr	r3, [pc, #76]	@ (800dd54 <tiempo+0x4fc>)
 800dd08:	0018      	movs	r0, r3
 800dd0a:	f7f9 f9d0 	bl	80070ae <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800dd0e:	4b12      	ldr	r3, [pc, #72]	@ (800dd58 <tiempo+0x500>)
 800dd10:	0018      	movs	r0, r3
 800dd12:	f7f9 f9cc 	bl	80070ae <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800dd16:	4b11      	ldr	r3, [pc, #68]	@ (800dd5c <tiempo+0x504>)
 800dd18:	0018      	movs	r0, r3
 800dd1a:	f7f9 f9da 	bl	80070d2 <decwreg>
	    		 goto fintiem;
 800dd1e:	e004      	b.n	800dd2a <tiempo+0x4d2>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800dd20:	46c0      	nop			@ (mov r8, r8)
 800dd22:	e002      	b.n	800dd2a <tiempo+0x4d2>
		        goto fintiem;
 800dd24:	46c0      	nop			@ (mov r8, r8)
 800dd26:	e000      	b.n	800dd2a <tiempo+0x4d2>
					goto fintiem;				//jrult fintiem
 800dd28:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800dd2a:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800dd2c:	46c0      	nop			@ (mov r8, r8)
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	46c0      	nop			@ (mov r8, r8)
 800dd34:	20000baf 	.word	0x20000baf
 800dd38:	20000c38 	.word	0x20000c38
 800dd3c:	20000c87 	.word	0x20000c87
 800dd40:	20000c58 	.word	0x20000c58
 800dd44:	20000c59 	.word	0x20000c59
 800dd48:	20000c28 	.word	0x20000c28
 800dd4c:	20000c2b 	.word	0x20000c2b
 800dd50:	20000bc4 	.word	0x20000bc4
 800dd54:	20000c8c 	.word	0x20000c8c
 800dd58:	20000c8e 	.word	0x20000c8e
 800dd5c:	20000cb1 	.word	0x20000cb1

0800dd60 <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800dd66:	4b6f      	ldr	r3, [pc, #444]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800dd68:	789b      	ldrb	r3, [r3, #2]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d023      	beq.n	800ddb6 <tx_buffer_prep+0x56>
			goto	tx_header;
 800dd6e:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800dd70:	4b6d      	ldr	r3, [pc, #436]	@ (800df28 <tx_buffer_prep+0x1c8>)
 800dd72:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800dd74:	4b6d      	ldr	r3, [pc, #436]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800dd76:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781a      	ldrb	r2, [r3, #0]
 800dd7c:	4b6c      	ldr	r3, [pc, #432]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800dd7e:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800dd80:	4b6b      	ldr	r3, [pc, #428]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800dd82:	781a      	ldrb	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800dd88:	4b69      	ldr	r3, [pc, #420]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	0018      	movs	r0, r3
 800dd8e:	f7f9 f973 	bl	8007078 <build_chksum>
	    	point_X++;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3301      	adds	r3, #1
 800dd96:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	4b64      	ldr	r3, [pc, #400]	@ (800df34 <tx_buffer_prep+0x1d4>)
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d800      	bhi.n	800dda8 <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800dda6:	e7e7      	b.n	800dd78 <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800dda8:	4b63      	ldr	r3, [pc, #396]	@ (800df38 <tx_buffer_prep+0x1d8>)
 800ddaa:	2208      	movs	r2, #8
 800ddac:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800ddae:	4b5d      	ldr	r3, [pc, #372]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800ddb4:	e0b1      	b.n	800df1a <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800ddb6:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800ddb8:	4b5a      	ldr	r3, [pc, #360]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	4053      	eors	r3, r2
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d107      	bne.n	800ddd6 <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800ddc6:	4b57      	ldr	r3, [pc, #348]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800ddc8:	785b      	ldrb	r3, [r3, #1]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	4053      	eors	r3, r2
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d140      	bne.n	800de56 <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800ddd4:	e000      	b.n	800ddd8 <tx_buffer_prep+0x78>
			goto	notest;
 800ddd6:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800ddd8:	4b58      	ldr	r3, [pc, #352]	@ (800df3c <tx_buffer_prep+0x1dc>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	4b58      	ldr	r3, [pc, #352]	@ (800df40 <tx_buffer_prep+0x1e0>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d33a      	bcc.n	800de5a <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800dde4:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800dde6:	4b4f      	ldr	r3, [pc, #316]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800dde8:	78db      	ldrb	r3, [r3, #3]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d122      	bne.n	800de34 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800ddee:	4b4f      	ldr	r3, [pc, #316]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800ddf0:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800ddf2:	4b54      	ldr	r3, [pc, #336]	@ (800df44 <tx_buffer_prep+0x1e4>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800ddf8:	4b53      	ldr	r3, [pc, #332]	@ (800df48 <tx_buffer_prep+0x1e8>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	0e1b      	lsrs	r3, r3, #24
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	4b4a      	ldr	r3, [pc, #296]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800de02:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800de04:	4b50      	ldr	r3, [pc, #320]	@ (800df48 <tx_buffer_prep+0x1e8>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	0c1b      	lsrs	r3, r3, #16
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	4b47      	ldr	r3, [pc, #284]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800de0e:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800de10:	4b4d      	ldr	r3, [pc, #308]	@ (800df48 <tx_buffer_prep+0x1e8>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	0a1b      	lsrs	r3, r3, #8
 800de16:	b2da      	uxtb	r2, r3
 800de18:	4b44      	ldr	r3, [pc, #272]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800de1a:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800de1c:	4b4a      	ldr	r3, [pc, #296]	@ (800df48 <tx_buffer_prep+0x1e8>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	b2da      	uxtb	r2, r3
 800de22:	4b42      	ldr	r3, [pc, #264]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800de24:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800de26:	4b44      	ldr	r3, [pc, #272]	@ (800df38 <tx_buffer_prep+0x1d8>)
 800de28:	2204      	movs	r2, #4
 800de2a:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800de2c:	4b3d      	ldr	r3, [pc, #244]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800de2e:	2201      	movs	r2, #1
 800de30:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800de32:	e072      	b.n	800df1a <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800de34:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800de36:	4b45      	ldr	r3, [pc, #276]	@ (800df4c <tx_buffer_prep+0x1ec>)
 800de38:	2200      	movs	r2, #0
 800de3a:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800de3c:	4b39      	ldr	r3, [pc, #228]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800de3e:	2200      	movs	r2, #0
 800de40:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800de42:	4b38      	ldr	r3, [pc, #224]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800de44:	2200      	movs	r2, #0
 800de46:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 0;				// permite loggeo de eventos
 800de48:	4b41      	ldr	r3, [pc, #260]	@ (800df50 <tx_buffer_prep+0x1f0>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	711a      	strb	r2, [r3, #4]
		flagsLogger[5] = 0;				// permite loggeo de datos
 800de4e:	4b40      	ldr	r3, [pc, #256]	@ (800df50 <tx_buffer_prep+0x1f0>)
 800de50:	2200      	movs	r2, #0
 800de52:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800de54:	e061      	b.n	800df1a <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800de56:	46c0      	nop			@ (mov r8, r8)
 800de58:	e000      	b.n	800de5c <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800de5a:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800de5c:	4b37      	ldr	r3, [pc, #220]	@ (800df3c <tx_buffer_prep+0x1dc>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800de62:	4b32      	ldr	r3, [pc, #200]	@ (800df2c <tx_buffer_prep+0x1cc>)
 800de64:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800de66:	4b37      	ldr	r3, [pc, #220]	@ (800df44 <tx_buffer_prep+0x1e4>)
 800de68:	2200      	movs	r2, #0
 800de6a:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781a      	ldrb	r2, [r3, #0]
 800de70:	4b2f      	ldr	r3, [pc, #188]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800de72:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800de74:	4b37      	ldr	r3, [pc, #220]	@ (800df54 <tx_buffer_prep+0x1f4>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d111      	bne.n	800dea0 <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800de7c:	4b34      	ldr	r3, [pc, #208]	@ (800df50 <tx_buffer_prep+0x1f0>)
 800de7e:	791b      	ldrb	r3, [r3, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d107      	bne.n	800de94 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800de84:	4b32      	ldr	r3, [pc, #200]	@ (800df50 <tx_buffer_prep+0x1f0>)
 800de86:	795b      	ldrb	r3, [r3, #5]
 800de88:	2201      	movs	r2, #1
 800de8a:	4053      	eors	r3, r2
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d108      	bne.n	800dea4 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800de92:	e000      	b.n	800de96 <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800de94:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781a      	ldrb	r2, [r3, #0]
 800de9a:	4b25      	ldr	r3, [pc, #148]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800de9c:	701a      	strb	r2, [r3, #0]
 800de9e:	e002      	b.n	800dea6 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800dea0:	46c0      	nop			@ (mov r8, r8)
 800dea2:	e000      	b.n	800dea6 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800dea4:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800dea6:	4b22      	ldr	r3, [pc, #136]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800dea8:	781a      	ldrb	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3301      	adds	r3, #1
 800deb2:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800deba:	4b22      	ldr	r3, [pc, #136]	@ (800df44 <tx_buffer_prep+0x1e4>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	3301      	adds	r3, #1
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	4b20      	ldr	r3, [pc, #128]	@ (800df44 <tx_buffer_prep+0x1e4>)
 800dec4:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800dec6:	4b1a      	ldr	r3, [pc, #104]	@ (800df30 <tx_buffer_prep+0x1d0>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	0018      	movs	r0, r3
 800decc:	f7f9 f8d4 	bl	8007078 <build_chksum>

		if(!flagsTX [0]){
 800ded0:	4b14      	ldr	r3, [pc, #80]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2201      	movs	r2, #1
 800ded6:	4053      	eors	r3, r2
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d10b      	bne.n	800def6 <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800dede:	4b1e      	ldr	r3, [pc, #120]	@ (800df58 <tx_buffer_prep+0x1f8>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	683a      	ldr	r2, [r7, #0]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d108      	bne.n	800defa <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800dee8:	4b1c      	ldr	r3, [pc, #112]	@ (800df5c <tx_buffer_prep+0x1fc>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800deee:	4b0d      	ldr	r3, [pc, #52]	@ (800df24 <tx_buffer_prep+0x1c4>)
 800def0:	2201      	movs	r2, #1
 800def2:	705a      	strb	r2, [r3, #1]
 800def4:	e002      	b.n	800defc <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800def6:	46c0      	nop			@ (mov r8, r8)
 800def8:	e000      	b.n	800defc <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800defa:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800defc:	4b11      	ldr	r3, [pc, #68]	@ (800df44 <tx_buffer_prep+0x1e4>)
 800defe:	781a      	ldrb	r2, [r3, #0]
 800df00:	4b17      	ldr	r3, [pc, #92]	@ (800df60 <tx_buffer_prep+0x200>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	429a      	cmp	r2, r3
 800df06:	d200      	bcs.n	800df0a <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800df08:	e7b0      	b.n	800de6c <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800df0a:	4b0c      	ldr	r3, [pc, #48]	@ (800df3c <tx_buffer_prep+0x1dc>)
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800df10:	4b13      	ldr	r3, [pc, #76]	@ (800df60 <tx_buffer_prep+0x200>)
 800df12:	781a      	ldrb	r2, [r3, #0]
 800df14:	4b08      	ldr	r3, [pc, #32]	@ (800df38 <tx_buffer_prep+0x1d8>)
 800df16:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800df18:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800df1a:	46c0      	nop			@ (mov r8, r8)
 800df1c:	46bd      	mov	sp, r7
 800df1e:	b002      	add	sp, #8
 800df20:	bd80      	pop	{r7, pc}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	20001f10 	.word	0x20001f10
 800df28:	20001ecc 	.word	0x20001ecc
 800df2c:	20001f2c 	.word	0x20001f2c
 800df30:	20000934 	.word	0x20000934
 800df34:	20001ed3 	.word	0x20001ed3
 800df38:	20001f26 	.word	0x20001f26
 800df3c:	20001f08 	.word	0x20001f08
 800df40:	20001f04 	.word	0x20001f04
 800df44:	20001f0c 	.word	0x20001f0c
 800df48:	20001f28 	.word	0x20001f28
 800df4c:	20001f0d 	.word	0x20001f0d
 800df50:	20001ef8 	.word	0x20001ef8
 800df54:	20001fd0 	.word	0x20001fd0
 800df58:	20001f20 	.word	0x20001f20
 800df5c:	20001f1c 	.word	0x20001f1c
 800df60:	20001f24 	.word	0x20001f24

0800df64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800df68:	f3bf 8f4f 	dsb	sy
}
 800df6c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df6e:	4b04      	ldr	r3, [pc, #16]	@ (800df80 <__NVIC_SystemReset+0x1c>)
 800df70:	4a04      	ldr	r2, [pc, #16]	@ (800df84 <__NVIC_SystemReset+0x20>)
 800df72:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800df74:	f3bf 8f4f 	dsb	sy
}
 800df78:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800df7a:	46c0      	nop			@ (mov r8, r8)
 800df7c:	e7fd      	b.n	800df7a <__NVIC_SystemReset+0x16>
 800df7e:	46c0      	nop			@ (mov r8, r8)
 800df80:	e000ed00 	.word	0xe000ed00
 800df84:	05fa0004 	.word	0x05fa0004

0800df88 <tx_control>:

uint32_t   chksum_to_compare = 0;
uint8_t    contador_bloques_fw = 16;


void tx_control(void){
 800df88:	b580      	push	{r7, lr}
 800df8a:	b092      	sub	sp, #72	@ 0x48
 800df8c:	af00      	add	r7, sp, #0

	//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
	//ld			A,BluetoothState
	//cp			A,#3
	//jrne		end_tx_control_b ; directamente sal de tx_control
	if(BluetoothState != 3)
 800df8e:	4bd9      	ldr	r3, [pc, #868]	@ (800e2f4 <tx_control+0x36c>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b03      	cmp	r3, #3
 800df94:	d001      	beq.n	800df9a <tx_control+0x12>
 800df96:	f003 f927 	bl	80111e8 <tx_control+0x3260>
		goto end_tx_control_b;

	//; / define el estado actual de la conexion correspondiente
	//tnz			delayComStat
	//jrne		end_tx_control
	if(delayComStat)
 800df9a:	4bd7      	ldr	r3, [pc, #860]	@ (800e2f8 <tx_control+0x370>)
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <tx_control+0x1e>
 800dfa2:	f002 f893 	bl	80100cc <tx_control+0x2144>
		goto end_tx_control;
statDef:
 800dfa6:	46c0      	nop			@ (mov r8, r8)
	//tnz			statComFlag
	//jreq		statDef_clr
	if(statComFlag==0)
 800dfa8:	4bd4      	ldr	r3, [pc, #848]	@ (800e2fc <tx_control+0x374>)
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d029      	beq.n	800e004 <tx_control+0x7c>
		goto statDef_clr;
	//;si el pin de estado está en 1 , pregunta por que comunicacion está activa
	if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,statDef_WIFI
 800dfb0:	4bd3      	ldr	r3, [pc, #844]	@ (800e300 <tx_control+0x378>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d11d      	bne.n	800dff4 <tx_control+0x6c>
		goto statDef_WIFI;
statDef_BLE:
 800dfb8:	46c0      	nop			@ (mov r8, r8)
	flagsTxControl[f_statBLE] = 1;	//bset		flagsTxControl,#f_statBLE
 800dfba:	4bd1      	ldr	r3, [pc, #836]	@ (800e300 <tx_control+0x378>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	705a      	strb	r2, [r3, #1]
	//ldw		X,#300;
	timeoutTWF = 300;	//ldw		timeoutTWF,X;					/ manten carga time out de Token (5 min)
 800dfc0:	4bd0      	ldr	r3, [pc, #832]	@ (800e304 <tx_control+0x37c>)
 800dfc2:	2296      	movs	r2, #150	@ 0x96
 800dfc4:	0052      	lsls	r2, r2, #1
 800dfc6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800dfc8:	233f      	movs	r3, #63	@ 0x3f
 800dfca:	18fb      	adds	r3, r7, r3
 800dfcc:	2200      	movs	r2, #0
 800dfce:	701a      	strb	r2, [r3, #0]
 800dfd0:	e00a      	b.n	800dfe8 <tx_control+0x60>
		flagsWIFI[i] = 0;
 800dfd2:	203f      	movs	r0, #63	@ 0x3f
 800dfd4:	183b      	adds	r3, r7, r0
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	4acb      	ldr	r2, [pc, #812]	@ (800e308 <tx_control+0x380>)
 800dfda:	2100      	movs	r1, #0
 800dfdc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800dfde:	183b      	adds	r3, r7, r0
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	183b      	adds	r3, r7, r0
 800dfe4:	3201      	adds	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	233f      	movs	r3, #63	@ 0x3f
 800dfea:	18fb      	adds	r3, r7, r3
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	2b07      	cmp	r3, #7
 800dff0:	d9ef      	bls.n	800dfd2 <tx_control+0x4a>
	goto end_statDef;//jra			end_statDef
 800dff2:	e047      	b.n	800e084 <tx_control+0xfc>
		goto statDef_WIFI;
 800dff4:	46c0      	nop			@ (mov r8, r8)
statDef_WIFI:
	flagsTxControl[f_statWIFI] = 1;	//bset		flagsTxControl,#f_statWIFI
 800dff6:	4bc2      	ldr	r3, [pc, #776]	@ (800e300 <tx_control+0x378>)
 800dff8:	2201      	movs	r2, #1
 800dffa:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 255;			// mov			statComWIFIFlag,#255
 800dffc:	4bc3      	ldr	r3, [pc, #780]	@ (800e30c <tx_control+0x384>)
 800dffe:	22ff      	movs	r2, #255	@ 0xff
 800e000:	701a      	strb	r2, [r3, #0]
	goto end_statDef;				// jra			end_statDef
 800e002:	e03f      	b.n	800e084 <tx_control+0xfc>
		goto statDef_clr;
 800e004:	46c0      	nop			@ (mov r8, r8)
statDef_clr:
	//;pregunta por que comunicacion está inactiva
	//btjt		flagsTxControl,#f_select,statDef_clrWIFI
	if(flagsTxControl[f_select])
 800e006:	4bbe      	ldr	r3, [pc, #760]	@ (800e300 <tx_control+0x378>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d133      	bne.n	800e076 <tx_control+0xee>
		goto statDef_clrWIFI;
statDef_clrBLE:
 800e00e:	46c0      	nop			@ (mov r8, r8)

	//btjf	flagsTxControl,#f_statBLE,noCancelTx ;// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
	if(!flagsTxControl[f_statBLE])
 800e010:	4bbb      	ldr	r3, [pc, #748]	@ (800e300 <tx_control+0x378>)
 800e012:	785b      	ldrb	r3, [r3, #1]
 800e014:	2201      	movs	r2, #1
 800e016:	4053      	eors	r3, r2
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d123      	bne.n	800e066 <tx_control+0xde>
		goto noCancelTx;

	keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 800e01e:	4bbc      	ldr	r3, [pc, #752]	@ (800e310 <tx_control+0x388>)
 800e020:	2200      	movs	r2, #0
 800e022:	701a      	strb	r2, [r3, #0]
	// clr		flagsTX
	//clr		flagsRxFirm
	for(uint8_t i=0 ; i<8 ; i++){
 800e024:	233e      	movs	r3, #62	@ 0x3e
 800e026:	18fb      	adds	r3, r7, r3
 800e028:	2200      	movs	r2, #0
 800e02a:	701a      	strb	r2, [r3, #0]
 800e02c:	e00f      	b.n	800e04e <tx_control+0xc6>
		flagsTX[i] = 0;
 800e02e:	203e      	movs	r0, #62	@ 0x3e
 800e030:	183b      	adds	r3, r7, r0
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	4ab7      	ldr	r2, [pc, #732]	@ (800e314 <tx_control+0x38c>)
 800e036:	2100      	movs	r1, #0
 800e038:	54d1      	strb	r1, [r2, r3]
		flagsRxFirm[i] = 0;
 800e03a:	183b      	adds	r3, r7, r0
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	4ab6      	ldr	r2, [pc, #728]	@ (800e318 <tx_control+0x390>)
 800e040:	2100      	movs	r1, #0
 800e042:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0 ; i<8 ; i++){
 800e044:	183b      	adds	r3, r7, r0
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	183b      	adds	r3, r7, r0
 800e04a:	3201      	adds	r2, #1
 800e04c:	701a      	strb	r2, [r3, #0]
 800e04e:	233e      	movs	r3, #62	@ 0x3e
 800e050:	18fb      	adds	r3, r7, r3
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b07      	cmp	r3, #7
 800e056:	d9ea      	bls.n	800e02e <tx_control+0xa6>
	}

	flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 800e058:	4bb0      	ldr	r3, [pc, #704]	@ (800e31c <tx_control+0x394>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	711a      	strb	r2, [r3, #4]
	flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 800e05e:	4baf      	ldr	r3, [pc, #700]	@ (800e31c <tx_control+0x394>)
 800e060:	2200      	movs	r2, #0
 800e062:	715a      	strb	r2, [r3, #5]
 800e064:	e000      	b.n	800e068 <tx_control+0xe0>
		goto noCancelTx;
 800e066:	46c0      	nop			@ (mov r8, r8)
noCancelTx:

	flagsTxControl[f_statBLE] = 0;		//bres		flagsTxControl,#f_statBLE
 800e068:	4ba5      	ldr	r3, [pc, #660]	@ (800e300 <tx_control+0x378>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	705a      	strb	r2, [r3, #1]
	DevLock = 0;						//clr			DevLock;			sí se pierde conexión BLE el candado vuelve a estar activo
 800e06e:	4bac      	ldr	r3, [pc, #688]	@ (800e320 <tx_control+0x398>)
 800e070:	2200      	movs	r2, #0
 800e072:	701a      	strb	r2, [r3, #0]
	goto end_statDef;					//jra			end_statDef
 800e074:	e006      	b.n	800e084 <tx_control+0xfc>
		goto statDef_clrWIFI;
 800e076:	46c0      	nop			@ (mov r8, r8)
statDef_clrWIFI:
	flagsTxControl[f_statWIFI] = 0;		//bres		flagsTxControl,#f_statWIFI
 800e078:	4ba1      	ldr	r3, [pc, #644]	@ (800e300 <tx_control+0x378>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 0;				//clr			statComWIFIFlag
 800e07e:	4ba3      	ldr	r3, [pc, #652]	@ (800e30c <tx_control+0x384>)
 800e080:	2200      	movs	r2, #0
 800e082:	701a      	strb	r2, [r3, #0]
//;===========================================================
//;										TOKEN BLE
//;===========================================================
tokenBLE:
	//;Token solo se manda cuando está seleccionada la comunicación BLE
	if(!flagsTxControl[f_select])//btjf	flagsTxControl,#f_select,tokenBLE_01
 800e084:	4b9e      	ldr	r3, [pc, #632]	@ (800e300 <tx_control+0x378>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2201      	movs	r2, #1
 800e08a:	4053      	eors	r3, r2
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d058      	beq.n	800e144 <tx_control+0x1bc>
		goto tokenBLE_01;
 800e092:	46c0      	nop			@ (mov r8, r8)
tokenBLE_01:

//	btjt	flagsRxFirm,#0,tokenBLE_02; Empezó recepción de Firmware ?
//	btjt	flagsLogger,#5,tokenBLE_02; Empezó Tx logger datos
//	btjt	flagsLogger,#4,tokenBLE_02; Empezó Tx logger eventos
	if(flagsRxFirm[0] || flagsLogger[4] || flagsLogger[5])
 800e094:	4ba0      	ldr	r3, [pc, #640]	@ (800e318 <tx_control+0x390>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d117      	bne.n	800e0cc <tx_control+0x144>
 800e09c:	4b9f      	ldr	r3, [pc, #636]	@ (800e31c <tx_control+0x394>)
 800e09e:	791b      	ldrb	r3, [r3, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d113      	bne.n	800e0cc <tx_control+0x144>
 800e0a4:	4b9d      	ldr	r3, [pc, #628]	@ (800e31c <tx_control+0x394>)
 800e0a6:	795b      	ldrb	r3, [r3, #5]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10f      	bne.n	800e0cc <tx_control+0x144>
		goto tokenBLE_02;

	//tnz		codeTX
	if(codeTX == 0)//jreq	tx_tokenBLE;			/se recibió algun comando valido? No, checa sí hay que mandar token
 800e0ac:	4b9d      	ldr	r3, [pc, #628]	@ (800e324 <tx_control+0x39c>)
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d019      	beq.n	800e0e8 <tx_control+0x160>
		goto tx_tokenBLE;
	//;Interpreta comando

	//ld		A,codeTX
	//cp		A,#$80;						/ se recibió respuesta WIFI ?
	if(codeTX == 0x80)		//jreq	finTokenBLE
 800e0b4:	4b9b      	ldr	r3, [pc, #620]	@ (800e324 <tx_control+0x39c>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b80      	cmp	r3, #128	@ 0x80
 800e0ba:	d045      	beq.n	800e148 <tx_control+0x1c0>
		goto finTokenBLE;
	//cp		A,#$81;						/ se recibió respuesta BLE ?
	if(codeTX != 0x81)		//jrne	tokenBLE_03;			/ no, es otro comando, deja correr la ejecución
 800e0bc:	4b99      	ldr	r3, [pc, #612]	@ (800e324 <tx_control+0x39c>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b81      	cmp	r3, #129	@ 0x81
 800e0c2:	d108      	bne.n	800e0d6 <tx_control+0x14e>
		goto tokenBLE_03;
	codeTX = 0;				// clr		codeTX;						/ sí, limpia código de Tx
 800e0c4:	4b97      	ldr	r3, [pc, #604]	@ (800e324 <tx_control+0x39c>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	701a      	strb	r2, [r3, #0]
 800e0ca:	e000      	b.n	800e0ce <tx_control+0x146>
		goto tokenBLE_02;
 800e0cc:	46c0      	nop			@ (mov r8, r8)
tokenBLE_02:
	flagsTX2[2] = 1;		//bset	flagsTX2,#2;			/ sí se recibió repuesta, levanta bandera de token recibido
 800e0ce:	4b96      	ldr	r3, [pc, #600]	@ (800e328 <tx_control+0x3a0>)
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	709a      	strb	r2, [r3, #2]
 800e0d4:	e000      	b.n	800e0d8 <tx_control+0x150>
		goto tokenBLE_03;
 800e0d6:	46c0      	nop			@ (mov r8, r8)

tokenBLE_03:
	//; la recepccion de cualquier comando tomala como una respuesta de  modulo de counicación
	timeTxTBLE = 20;			//mov		timeTxTBLE,#20;		/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e0d8:	4b94      	ldr	r3, [pc, #592]	@ (800e32c <tx_control+0x3a4>)
 800e0da:	2214      	movs	r2, #20
 800e0dc:	701a      	strb	r2, [r3, #0]
	//ldw		X,#300;
	timeoutTBLE = 300;			//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 800e0de:	4b94      	ldr	r3, [pc, #592]	@ (800e330 <tx_control+0x3a8>)
 800e0e0:	2296      	movs	r2, #150	@ 0x96
 800e0e2:	0052      	lsls	r2, r2, #1
 800e0e4:	801a      	strh	r2, [r3, #0]
	goto finTokenBLE;			//jra		finTokenBLE
 800e0e6:	e034      	b.n	800e152 <tx_control+0x1ca>
		goto tx_tokenBLE;
 800e0e8:	46c0      	nop			@ (mov r8, r8)

tx_tokenBLE:
	//tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx)//jrne	finTokenBLE;						/ espera a que terminé
 800e0ea:	4b89      	ldr	r3, [pc, #548]	@ (800e310 <tx_control+0x388>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d12c      	bne.n	800e14c <tx_control+0x1c4>
		goto finTokenBLE;
	//tnz		timeTxTBLE;						/ ya se cumplió tiempo para enviar Token Wifi ?
	if(timeTxTBLE)//jrne	finTokenBLE;					/ no, continua
 800e0f2:	4b8e      	ldr	r3, [pc, #568]	@ (800e32c <tx_control+0x3a4>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d12a      	bne.n	800e150 <tx_control+0x1c8>
		goto finTokenBLE;

	timeTxTBLE = 20;//mov		timeTxTBLE,#20;				/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e0fa:	4b8c      	ldr	r3, [pc, #560]	@ (800e32c <tx_control+0x3a4>)
 800e0fc:	2214      	movs	r2, #20
 800e0fe:	701a      	strb	r2, [r3, #0]

	//ldw		X,#$40FA
	//ldw		bufferTxControl,X
	bufferTxControl[0] = 0x40;
 800e100:	4b8c      	ldr	r3, [pc, #560]	@ (800e334 <tx_control+0x3ac>)
 800e102:	2240      	movs	r2, #64	@ 0x40
 800e104:	701a      	strb	r2, [r3, #0]
	bufferTxControl[1] = 0xFA;
 800e106:	4b8b      	ldr	r3, [pc, #556]	@ (800e334 <tx_control+0x3ac>)
 800e108:	22fa      	movs	r2, #250	@ 0xfa
 800e10a:	705a      	strb	r2, [r3, #1]
	flagsTX[2] = 0;				//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e10c:	4b81      	ldr	r3, [pc, #516]	@ (800e314 <tx_control+0x38c>)
 800e10e:	2200      	movs	r2, #0
 800e110:	709a      	strb	r2, [r3, #2]
	//ldw		pointTx,X
	//ldw		pointInitTx,X
	//incw	X
	//ldw		pointEndTx,X
	//mov		blockSizeTX,#2
	pointTx = &bufferTxControl[0];
 800e112:	4b89      	ldr	r3, [pc, #548]	@ (800e338 <tx_control+0x3b0>)
 800e114:	4a87      	ldr	r2, [pc, #540]	@ (800e334 <tx_control+0x3ac>)
 800e116:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e118:	4b88      	ldr	r3, [pc, #544]	@ (800e33c <tx_control+0x3b4>)
 800e11a:	4a86      	ldr	r2, [pc, #536]	@ (800e334 <tx_control+0x3ac>)
 800e11c:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[2];
 800e11e:	4b88      	ldr	r3, [pc, #544]	@ (800e340 <tx_control+0x3b8>)
 800e120:	4a88      	ldr	r2, [pc, #544]	@ (800e344 <tx_control+0x3bc>)
 800e122:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800e124:	4b88      	ldr	r3, [pc, #544]	@ (800e348 <tx_control+0x3c0>)
 800e126:	2202      	movs	r2, #2
 800e128:	701a      	strb	r2, [r3, #0]

	//clrw	X
	//ldw		chksum_HW,X
	//ldw		chksum_LW,X;					/ limpia registros de checksum
	chksum_32_HW_LW = 0;
 800e12a:	4b88      	ldr	r3, [pc, #544]	@ (800e34c <tx_control+0x3c4>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;					// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e130:	4b78      	ldr	r3, [pc, #480]	@ (800e314 <tx_control+0x38c>)
 800e132:	2201      	movs	r2, #1
 800e134:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;					//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e136:	4b76      	ldr	r3, [pc, #472]	@ (800e310 <tx_control+0x388>)
 800e138:	2255      	movs	r2, #85	@ 0x55
 800e13a:	701a      	strb	r2, [r3, #0]
	codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800e13c:	4b79      	ldr	r3, [pc, #484]	@ (800e324 <tx_control+0x39c>)
 800e13e:	2200      	movs	r2, #0
 800e140:	701a      	strb	r2, [r3, #0]

	goto finTokenBLE;//jra		finTokenBLE
 800e142:	e006      	b.n	800e152 <tx_control+0x1ca>
	goto finTokenBLE;//jra		finTokenBLE
 800e144:	46c0      	nop			@ (mov r8, r8)
 800e146:	e004      	b.n	800e152 <tx_control+0x1ca>
		goto finTokenBLE;
 800e148:	46c0      	nop			@ (mov r8, r8)
 800e14a:	e002      	b.n	800e152 <tx_control+0x1ca>
		goto finTokenBLE;
 800e14c:	46c0      	nop			@ (mov r8, r8)
 800e14e:	e000      	b.n	800e152 <tx_control+0x1ca>
		goto finTokenBLE;
 800e150:	46c0      	nop			@ (mov r8, r8)
//;										TOKEN WiFi
//;===========================================================
tokenWiFi:

	//;Token solo se manda cuando está seleccionada la comunicación WIFI
	if(flagsTxControl[f_select])	//btjt	flagsTxControl,#f_select,tokenWiFi_01
 800e152:	4b6b      	ldr	r3, [pc, #428]	@ (800e300 <tx_control+0x378>)
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d100      	bne.n	800e15c <tx_control+0x1d4>
 800e15a:	e12f      	b.n	800e3bc <tx_control+0x434>
		goto tokenWiFi_01;
 800e15c:	46c0      	nop			@ (mov r8, r8)
	goto finTokenWiFi;				//jra		finTokenWiFi
tokenWiFi_01:

	//btjt	flagsWIFI,#f_timeLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	//btjt	flagsWIFI,#f_eventLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	if(flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800e15e:	4b6a      	ldr	r3, [pc, #424]	@ (800e308 <tx_control+0x380>)
 800e160:	78db      	ldrb	r3, [r3, #3]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d130      	bne.n	800e1c8 <tx_control+0x240>
 800e166:	4b68      	ldr	r3, [pc, #416]	@ (800e308 <tx_control+0x380>)
 800e168:	791b      	ldrb	r3, [r3, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d12c      	bne.n	800e1c8 <tx_control+0x240>
		goto tokenWiFi_02;

	//ldw		X,cntSetName
	//tnzw	X
	if(cntSetName)//jrne	tokenWiFi_02
 800e16e:	4b78      	ldr	r3, [pc, #480]	@ (800e350 <tx_control+0x3c8>)
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d12a      	bne.n	800e1cc <tx_control+0x244>
		goto tokenWiFi_02;

	//ldw			X,#600
	cntSetName = 600;	//ldw			cntSetName,X
 800e176:	4b76      	ldr	r3, [pc, #472]	@ (800e350 <tx_control+0x3c8>)
 800e178:	2296      	movs	r2, #150	@ 0x96
 800e17a:	0092      	lsls	r2, r2, #2
 800e17c:	801a      	strh	r2, [r3, #0]

	//;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
	//;copia los datos al buffer de tx
	//ldw		X,#difName
	//ldw		Y,#bufferTxControl
	wreg = 50;//mov		wreg,#50
 800e17e:	4b75      	ldr	r3, [pc, #468]	@ (800e354 <tx_control+0x3cc>)
 800e180:	2232      	movs	r2, #50	@ 0x32
 800e182:	701a      	strb	r2, [r3, #0]
	copyVector(&difName[0],&bufferTxControl[0]);//call	copyVector
 800e184:	4a6b      	ldr	r2, [pc, #428]	@ (800e334 <tx_control+0x3ac>)
 800e186:	4b74      	ldr	r3, [pc, #464]	@ (800e358 <tx_control+0x3d0>)
 800e188:	0011      	movs	r1, r2
 800e18a:	0018      	movs	r0, r3
 800e18c:	f7f8 ff50 	bl	8007030 <copyVector>
//	ldw		pointTx,X
//	ldw		pointInitTx,X
//	ldw		X,#(bufferTxControl+50)
//	ldw		pointEndTx,X
//	mov		blockSizeTX,#50
	pointTx = &bufferTxControl[0];
 800e190:	4b69      	ldr	r3, [pc, #420]	@ (800e338 <tx_control+0x3b0>)
 800e192:	4a68      	ldr	r2, [pc, #416]	@ (800e334 <tx_control+0x3ac>)
 800e194:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e196:	4b69      	ldr	r3, [pc, #420]	@ (800e33c <tx_control+0x3b4>)
 800e198:	4a66      	ldr	r2, [pc, #408]	@ (800e334 <tx_control+0x3ac>)
 800e19a:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[50];
 800e19c:	4b68      	ldr	r3, [pc, #416]	@ (800e340 <tx_control+0x3b8>)
 800e19e:	4a6f      	ldr	r2, [pc, #444]	@ (800e35c <tx_control+0x3d4>)
 800e1a0:	601a      	str	r2, [r3, #0]
	blockSizeTX = 50;
 800e1a2:	4b69      	ldr	r3, [pc, #420]	@ (800e348 <tx_control+0x3c0>)
 800e1a4:	2232      	movs	r2, #50	@ 0x32
 800e1a6:	701a      	strb	r2, [r3, #0]

	flagsTX[2] = 0;		//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e1a8:	4b5a      	ldr	r3, [pc, #360]	@ (800e314 <tx_control+0x38c>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	709a      	strb	r2, [r3, #2]

	//clrw	X
	//ldw		chksum_HW,X
	chksum_32_HW_LW = 0;		//ldw		chksum_LW,X;					/ limpia registros de checksum
 800e1ae:	4b67      	ldr	r3, [pc, #412]	@ (800e34c <tx_control+0x3c4>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;				//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e1b4:	4b57      	ldr	r3, [pc, #348]	@ (800e314 <tx_control+0x38c>)
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;				//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e1ba:	4b55      	ldr	r3, [pc, #340]	@ (800e310 <tx_control+0x388>)
 800e1bc:	2255      	movs	r2, #85	@ 0x55
 800e1be:	701a      	strb	r2, [r3, #0]
	codeTX= 0;					//clr		codeTX;								/ limpia código de Tx
 800e1c0:	4b58      	ldr	r3, [pc, #352]	@ (800e324 <tx_control+0x39c>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	701a      	strb	r2, [r3, #0]

	goto finTokenWiFi;//jra		finTokenWiFi
 800e1c6:	e0fe      	b.n	800e3c6 <tx_control+0x43e>
		goto tokenWiFi_02;
 800e1c8:	46c0      	nop			@ (mov r8, r8)
 800e1ca:	e000      	b.n	800e1ce <tx_control+0x246>
		goto tokenWiFi_02;
 800e1cc:	46c0      	nop			@ (mov r8, r8)
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800e1ce:	4b52      	ldr	r3, [pc, #328]	@ (800e318 <tx_control+0x390>)
 800e1d0:	781a      	ldrb	r2, [r3, #0]
 800e1d2:	4b52      	ldr	r3, [pc, #328]	@ (800e31c <tx_control+0x394>)
 800e1d4:	795b      	ldrb	r3, [r3, #5]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	4b50      	ldr	r3, [pc, #320]	@ (800e31c <tx_control+0x394>)
 800e1dc:	791b      	ldrb	r3, [r3, #4]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	4b49      	ldr	r3, [pc, #292]	@ (800e308 <tx_control+0x380>)
 800e1e4:	78db      	ldrb	r3, [r3, #3]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	4b47      	ldr	r3, [pc, #284]	@ (800e308 <tx_control+0x380>)
 800e1ec:	791b      	ldrb	r3, [r3, #4]
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d000      	beq.n	800e1f8 <tx_control+0x270>
 800e1f6:	e0d9      	b.n	800e3ac <tx_control+0x424>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800e1f8:	4b4a      	ldr	r3, [pc, #296]	@ (800e324 <tx_control+0x39c>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d000      	beq.n	800e202 <tx_control+0x27a>
 800e200:	e0ca      	b.n	800e398 <tx_control+0x410>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800e202:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800e204:	4b42      	ldr	r3, [pc, #264]	@ (800e310 <tx_control+0x388>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d000      	beq.n	800e20e <tx_control+0x286>
 800e20c:	e0d8      	b.n	800e3c0 <tx_control+0x438>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800e20e:	4b54      	ldr	r3, [pc, #336]	@ (800e360 <tx_control+0x3d8>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d152      	bne.n	800e2bc <tx_control+0x334>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800e216:	4b52      	ldr	r3, [pc, #328]	@ (800e360 <tx_control+0x3d8>)
 800e218:	221e      	movs	r2, #30
 800e21a:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800e21c:	4b45      	ldr	r3, [pc, #276]	@ (800e334 <tx_control+0x3ac>)
 800e21e:	2240      	movs	r2, #64	@ 0x40
 800e220:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800e222:	4b44      	ldr	r3, [pc, #272]	@ (800e334 <tx_control+0x3ac>)
 800e224:	22f8      	movs	r2, #248	@ 0xf8
 800e226:	705a      	strb	r2, [r3, #1]
//		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
//		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
//		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
//		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X

		bufferTxControl[2] = reeLat1;	//ldw X,eeLat1
 800e228:	4b4e      	ldr	r3, [pc, #312]	@ (800e364 <tx_control+0x3dc>)
 800e22a:	781a      	ldrb	r2, [r3, #0]
 800e22c:	4b41      	ldr	r3, [pc, #260]	@ (800e334 <tx_control+0x3ac>)
 800e22e:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = reeLat2;	//ldw bufferTxControl+2,X
 800e230:	4b4d      	ldr	r3, [pc, #308]	@ (800e368 <tx_control+0x3e0>)
 800e232:	781a      	ldrb	r2, [r3, #0]
 800e234:	4b3f      	ldr	r3, [pc, #252]	@ (800e334 <tx_control+0x3ac>)
 800e236:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = reeLat3;	//ldw X,eeLat3
 800e238:	4b4c      	ldr	r3, [pc, #304]	@ (800e36c <tx_control+0x3e4>)
 800e23a:	781a      	ldrb	r2, [r3, #0]
 800e23c:	4b3d      	ldr	r3, [pc, #244]	@ (800e334 <tx_control+0x3ac>)
 800e23e:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = reeLat4;	//ldw bufferTxControl+4,X
 800e240:	4b4b      	ldr	r3, [pc, #300]	@ (800e370 <tx_control+0x3e8>)
 800e242:	781a      	ldrb	r2, [r3, #0]
 800e244:	4b3b      	ldr	r3, [pc, #236]	@ (800e334 <tx_control+0x3ac>)
 800e246:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = reeLong1;	//ldw X,eeLong1
 800e248:	4b4a      	ldr	r3, [pc, #296]	@ (800e374 <tx_control+0x3ec>)
 800e24a:	781a      	ldrb	r2, [r3, #0]
 800e24c:	4b39      	ldr	r3, [pc, #228]	@ (800e334 <tx_control+0x3ac>)
 800e24e:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = reeLong2;	//ldw bufferTxControl+6,X
 800e250:	4b49      	ldr	r3, [pc, #292]	@ (800e378 <tx_control+0x3f0>)
 800e252:	781a      	ldrb	r2, [r3, #0]
 800e254:	4b37      	ldr	r3, [pc, #220]	@ (800e334 <tx_control+0x3ac>)
 800e256:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = reeLong3;	//ldw X,eeLong3
 800e258:	4b48      	ldr	r3, [pc, #288]	@ (800e37c <tx_control+0x3f4>)
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	4b35      	ldr	r3, [pc, #212]	@ (800e334 <tx_control+0x3ac>)
 800e25e:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = reeLong4;	//ldw bufferTxControl+8,X
 800e260:	4b47      	ldr	r3, [pc, #284]	@ (800e380 <tx_control+0x3f8>)
 800e262:	781a      	ldrb	r2, [r3, #0]
 800e264:	4b33      	ldr	r3, [pc, #204]	@ (800e334 <tx_control+0x3ac>)
 800e266:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = versionFirm1;
 800e268:	4b46      	ldr	r3, [pc, #280]	@ (800e384 <tx_control+0x3fc>)
 800e26a:	781a      	ldrb	r2, [r3, #0]
 800e26c:	4b31      	ldr	r3, [pc, #196]	@ (800e334 <tx_control+0x3ac>)
 800e26e:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = versionFirm2;
 800e270:	4b45      	ldr	r3, [pc, #276]	@ (800e388 <tx_control+0x400>)
 800e272:	781a      	ldrb	r2, [r3, #0]
 800e274:	4b2f      	ldr	r3, [pc, #188]	@ (800e334 <tx_control+0x3ac>)
 800e276:	72da      	strb	r2, [r3, #11]
		bufferTxControl[12] = fm_hardware;
 800e278:	4b44      	ldr	r3, [pc, #272]	@ (800e38c <tx_control+0x404>)
 800e27a:	781a      	ldrb	r2, [r3, #0]
 800e27c:	4b2d      	ldr	r3, [pc, #180]	@ (800e334 <tx_control+0x3ac>)
 800e27e:	731a      	strb	r2, [r3, #12]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800e280:	4b24      	ldr	r3, [pc, #144]	@ (800e314 <tx_control+0x38c>)
 800e282:	2200      	movs	r2, #0
 800e284:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800e286:	4b2b      	ldr	r3, [pc, #172]	@ (800e334 <tx_control+0x3ac>)
 800e288:	647b      	str	r3, [r7, #68]	@ 0x44
		pointTx = point_X;				// ldw		pointTx,X
 800e28a:	4b2b      	ldr	r3, [pc, #172]	@ (800e338 <tx_control+0x3b0>)
 800e28c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e28e:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800e290:	4b2a      	ldr	r3, [pc, #168]	@ (800e33c <tx_control+0x3b4>)
 800e292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e294:	601a      	str	r2, [r3, #0]

		//pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
    										// ldw		pointEndTx,X
		pointEndTx = &bufferTxControl[13];
 800e296:	4b2a      	ldr	r3, [pc, #168]	@ (800e340 <tx_control+0x3b8>)
 800e298:	4a3d      	ldr	r2, [pc, #244]	@ (800e390 <tx_control+0x408>)
 800e29a:	601a      	str	r2, [r3, #0]
		//blockSizeTX = 10;						// mov		blockSizeTX,#10
		blockSizeTX = 13;
 800e29c:	4b2a      	ldr	r3, [pc, #168]	@ (800e348 <tx_control+0x3c0>)
 800e29e:	220d      	movs	r2, #13
 800e2a0:	701a      	strb	r2, [r3, #0]
		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800e2a2:	4b2a      	ldr	r3, [pc, #168]	@ (800e34c <tx_control+0x3c4>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e314 <tx_control+0x38c>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800e2ae:	4b18      	ldr	r3, [pc, #96]	@ (800e310 <tx_control+0x388>)
 800e2b0:	2255      	movs	r2, #85	@ 0x55
 800e2b2:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800e2b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e324 <tx_control+0x39c>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800e2ba:	e084      	b.n	800e3c6 <tx_control+0x43e>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800e2bc:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800e2be:	4b19      	ldr	r3, [pc, #100]	@ (800e324 <tx_control+0x39c>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b80      	cmp	r3, #128	@ 0x80
 800e2c4:	d00f      	beq.n	800e2e6 <tx_control+0x35e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800e2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e304 <tx_control+0x37c>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d000      	beq.n	800e2d0 <tx_control+0x348>
 800e2ce:	e079      	b.n	800e3c4 <tx_control+0x43c>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800e2d0:	4b15      	ldr	r3, [pc, #84]	@ (800e328 <tx_control+0x3a0>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800e2d6:	4b2f      	ldr	r3, [pc, #188]	@ (800e394 <tx_control+0x40c>)
 800e2d8:	2205      	movs	r2, #5
 800e2da:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800e2dc:	4b09      	ldr	r3, [pc, #36]	@ (800e304 <tx_control+0x37c>)
 800e2de:	2296      	movs	r2, #150	@ 0x96
 800e2e0:	0052      	lsls	r2, r2, #1
 800e2e2:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800e2e4:	e06f      	b.n	800e3c6 <tx_control+0x43e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800e2e6:	46c0      	nop			@ (mov r8, r8)
 800e2e8:	e000      	b.n	800e2ec <tx_control+0x364>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800e2ea:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e324 <tx_control+0x39c>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	701a      	strb	r2, [r3, #0]
 800e2f2:	e052      	b.n	800e39a <tx_control+0x412>
 800e2f4:	2000004c 	.word	0x2000004c
 800e2f8:	200021e4 	.word	0x200021e4
 800e2fc:	200021e6 	.word	0x200021e6
 800e300:	200021dc 	.word	0x200021dc
 800e304:	20002040 	.word	0x20002040
 800e308:	20002044 	.word	0x20002044
 800e30c:	200021e7 	.word	0x200021e7
 800e310:	20001f0d 	.word	0x20001f0d
 800e314:	20001f10 	.word	0x20001f10
 800e318:	20001fd0 	.word	0x20001fd0
 800e31c:	20001ef8 	.word	0x20001ef8
 800e320:	200021e5 	.word	0x200021e5
 800e324:	20001f18 	.word	0x20001f18
 800e328:	20002038 	.word	0x20002038
 800e32c:	200021ea 	.word	0x200021ea
 800e330:	200021ec 	.word	0x200021ec
 800e334:	2000209c 	.word	0x2000209c
 800e338:	20001f08 	.word	0x20001f08
 800e33c:	20001f00 	.word	0x20001f00
 800e340:	20001f04 	.word	0x20001f04
 800e344:	2000209e 	.word	0x2000209e
 800e348:	20001f24 	.word	0x20001f24
 800e34c:	20001f28 	.word	0x20001f28
 800e350:	200021e8 	.word	0x200021e8
 800e354:	20000bb7 	.word	0x20000bb7
 800e358:	20000228 	.word	0x20000228
 800e35c:	200020ce 	.word	0x200020ce
 800e360:	2000202e 	.word	0x2000202e
 800e364:	200001bb 	.word	0x200001bb
 800e368:	200001bc 	.word	0x200001bc
 800e36c:	200001bd 	.word	0x200001bd
 800e370:	200001be 	.word	0x200001be
 800e374:	200001bf 	.word	0x200001bf
 800e378:	200001c0 	.word	0x200001c0
 800e37c:	200001c1 	.word	0x200001c1
 800e380:	200001c2 	.word	0x200001c2
 800e384:	0801eff0 	.word	0x0801eff0
 800e388:	0801eff1 	.word	0x0801eff1
 800e38c:	0801eff2 	.word	0x0801eff2
 800e390:	200020a9 	.word	0x200020a9
 800e394:	20001fdc 	.word	0x20001fdc
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800e398:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800e39a:	4be8      	ldr	r3, [pc, #928]	@ (800e73c <tx_control+0x7b4>)
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	2b80      	cmp	r3, #128	@ 0x80
 800e3a0:	d0a3      	beq.n	800e2ea <tx_control+0x362>
		}
		timeoutTWF = 300;
 800e3a2:	4be7      	ldr	r3, [pc, #924]	@ (800e740 <tx_control+0x7b8>)
 800e3a4:	2296      	movs	r2, #150	@ 0x96
 800e3a6:	0052      	lsls	r2, r2, #1
 800e3a8:	801a      	strh	r2, [r3, #0]
 800e3aa:	e000      	b.n	800e3ae <tx_control+0x426>
			goto rx_tokenWiFi_02;
 800e3ac:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi_02:

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800e3ae:	4be5      	ldr	r3, [pc, #916]	@ (800e744 <tx_control+0x7bc>)
 800e3b0:	221e      	movs	r2, #30
 800e3b2:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800e3b4:	4be4      	ldr	r3, [pc, #912]	@ (800e748 <tx_control+0x7c0>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		//timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800e3ba:	e004      	b.n	800e3c6 <tx_control+0x43e>
	goto finTokenWiFi;				//jra		finTokenWiFi
 800e3bc:	46c0      	nop			@ (mov r8, r8)
 800e3be:	e002      	b.n	800e3c6 <tx_control+0x43e>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800e3c0:	46c0      	nop			@ (mov r8, r8)
 800e3c2:	e000      	b.n	800e3c6 <tx_control+0x43e>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800e3c4:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800e3c6:	4be0      	ldr	r3, [pc, #896]	@ (800e748 <tx_control+0x7c0>)
 800e3c8:	785b      	ldrb	r3, [r3, #1]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d101      	bne.n	800e3d2 <tx_control+0x44a>
 800e3ce:	f001 fe7f 	bl	80100d0 <tx_control+0x2148>
			goto tokenWiFi_OK;
 800e3d2:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800e3d4:	4bdd      	ldr	r3, [pc, #884]	@ (800e74c <tx_control+0x7c4>)
 800e3d6:	78db      	ldrb	r3, [r3, #3]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	4053      	eors	r3, r2
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d101      	bne.n	800e3e6 <tx_control+0x45e>
 800e3e2:	f000 fcd1 	bl	800ed88 <tx_control+0xe00>
			goto tx_control_00;
 800e3e6:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800e3e8:	4bd8      	ldr	r3, [pc, #864]	@ (800e74c <tx_control+0x7c4>)
 800e3ea:	791b      	ldrb	r3, [r3, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	4053      	eors	r3, r2
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <tx_control+0x472>
 800e3f6:	f000 fcc9 	bl	800ed8c <tx_control+0xe04>
			goto tx_control_00b;
 800e3fa:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800e3fc:	4bd4      	ldr	r3, [pc, #848]	@ (800e750 <tx_control+0x7c8>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	2201      	movs	r2, #1
 800e402:	4053      	eors	r3, r2
 800e404:	b2db      	uxtb	r3, r3
 800e406:	2b00      	cmp	r3, #0
 800e408:	d13d      	bne.n	800e486 <tx_control+0x4fe>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e40a:	4bd2      	ldr	r3, [pc, #840]	@ (800e754 <tx_control+0x7cc>)
 800e40c:	22f1      	movs	r2, #241	@ 0xf1
 800e40e:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800e410:	4bcb      	ldr	r3, [pc, #812]	@ (800e740 <tx_control+0x7b8>)
 800e412:	2296      	movs	r2, #150	@ 0x96
 800e414:	0052      	lsls	r2, r2, #1
 800e416:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800e418:	4bcf      	ldr	r3, [pc, #828]	@ (800e758 <tx_control+0x7d0>)
 800e41a:	2296      	movs	r2, #150	@ 0x96
 800e41c:	0052      	lsls	r2, r2, #1
 800e41e:	801a      	strh	r2, [r3, #0]
		if(timeOutRx != 0){//tnz timeOutRx
 800e420:	4bce      	ldr	r3, [pc, #824]	@ (800e75c <tx_control+0x7d4>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d118      	bne.n	800e45a <tx_control+0x4d2>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e428:	233d      	movs	r3, #61	@ 0x3d
 800e42a:	18fb      	adds	r3, r7, r3
 800e42c:	2200      	movs	r2, #0
 800e42e:	701a      	strb	r2, [r3, #0]
 800e430:	e00a      	b.n	800e448 <tx_control+0x4c0>
			flagsRxFirm [i]= 0;
 800e432:	203d      	movs	r0, #61	@ 0x3d
 800e434:	183b      	adds	r3, r7, r0
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	4ac5      	ldr	r2, [pc, #788]	@ (800e750 <tx_control+0x7c8>)
 800e43a:	2100      	movs	r1, #0
 800e43c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e43e:	183b      	adds	r3, r7, r0
 800e440:	781a      	ldrb	r2, [r3, #0]
 800e442:	183b      	adds	r3, r7, r0
 800e444:	3201      	adds	r2, #1
 800e446:	701a      	strb	r2, [r3, #0]
 800e448:	233d      	movs	r3, #61	@ 0x3d
 800e44a:	18fb      	adds	r3, r7, r3
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b07      	cmp	r3, #7
 800e450:	d9ef      	bls.n	800e432 <tx_control+0x4aa>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800e452:	4bba      	ldr	r3, [pc, #744]	@ (800e73c <tx_control+0x7b4>)
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800e458:	e016      	b.n	800e488 <tx_control+0x500>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800e45a:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800e45c:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			bandera_act_fw_j = 1;
 800e45e:	4bc0      	ldr	r3, [pc, #768]	@ (800e760 <tx_control+0x7d8>)
 800e460:	2201      	movs	r2, #1
 800e462:	701a      	strb	r2, [r3, #0]
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800e464:	4bbf      	ldr	r3, [pc, #764]	@ (800e764 <tx_control+0x7dc>)
 800e466:	2201      	movs	r2, #1
 800e468:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800e46a:	4bbe      	ldr	r3, [pc, #760]	@ (800e764 <tx_control+0x7dc>)
 800e46c:	2201      	movs	r2, #1
 800e46e:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800e470:	4bb7      	ldr	r3, [pc, #732]	@ (800e750 <tx_control+0x7c8>)
 800e472:	78db      	ldrb	r3, [r3, #3]
 800e474:	2201      	movs	r2, #1
 800e476:	4053      	eors	r3, r2
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <tx_control+0x4fa>
 800e47e:	f001 f930 	bl	800f6e2 <tx_control+0x175a>
				goto rx_firmware01;
 800e482:	f001 f828 	bl	800f4d6 <tx_control+0x154e>
			goto ask_tx_control_01;
 800e486:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800e488:	4bac      	ldr	r3, [pc, #688]	@ (800e73c <tx_control+0x7b4>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b21      	cmp	r3, #33	@ 0x21
 800e48e:	d131      	bne.n	800e4f4 <tx_control+0x56c>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e490:	4bb0      	ldr	r3, [pc, #704]	@ (800e754 <tx_control+0x7cc>)
 800e492:	22f1      	movs	r2, #241	@ 0xf1
 800e494:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800e496:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800e498:	4bb3      	ldr	r3, [pc, #716]	@ (800e768 <tx_control+0x7e0>)
 800e49a:	22f1      	movs	r2, #241	@ 0xf1
 800e49c:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800e49e:	4bb2      	ldr	r3, [pc, #712]	@ (800e768 <tx_control+0x7e0>)
 800e4a0:	223f      	movs	r2, #63	@ 0x3f
 800e4a2:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800e4a4:	4bb1      	ldr	r3, [pc, #708]	@ (800e76c <tx_control+0x7e4>)
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	4baf      	ldr	r3, [pc, #700]	@ (800e768 <tx_control+0x7e0>)
 800e4aa:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800e4ac:	4bb0      	ldr	r3, [pc, #704]	@ (800e770 <tx_control+0x7e8>)
 800e4ae:	781a      	ldrb	r2, [r3, #0]
 800e4b0:	4bad      	ldr	r3, [pc, #692]	@ (800e768 <tx_control+0x7e0>)
 800e4b2:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800e4b4:	4baf      	ldr	r3, [pc, #700]	@ (800e774 <tx_control+0x7ec>)
 800e4b6:	781a      	ldrb	r2, [r3, #0]
 800e4b8:	4bab      	ldr	r3, [pc, #684]	@ (800e768 <tx_control+0x7e0>)
 800e4ba:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800e4bc:	4bae      	ldr	r3, [pc, #696]	@ (800e778 <tx_control+0x7f0>)
 800e4be:	227d      	movs	r2, #125	@ 0x7d
 800e4c0:	5c9a      	ldrb	r2, [r3, r2]
 800e4c2:	4ba9      	ldr	r3, [pc, #676]	@ (800e768 <tx_control+0x7e0>)
 800e4c4:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800e4c6:	4bac      	ldr	r3, [pc, #688]	@ (800e778 <tx_control+0x7f0>)
 800e4c8:	227e      	movs	r2, #126	@ 0x7e
 800e4ca:	5c9a      	ldrb	r2, [r3, r2]
 800e4cc:	4ba6      	ldr	r3, [pc, #664]	@ (800e768 <tx_control+0x7e0>)
 800e4ce:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800e4d0:	4baa      	ldr	r3, [pc, #680]	@ (800e77c <tx_control+0x7f4>)
 800e4d2:	781a      	ldrb	r2, [r3, #0]
 800e4d4:	4ba4      	ldr	r3, [pc, #656]	@ (800e768 <tx_control+0x7e0>)
 800e4d6:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800e4d8:	4ba9      	ldr	r3, [pc, #676]	@ (800e780 <tx_control+0x7f8>)
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	4ba2      	ldr	r3, [pc, #648]	@ (800e768 <tx_control+0x7e0>)
 800e4de:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800e4e0:	4ba1      	ldr	r3, [pc, #644]	@ (800e768 <tx_control+0x7e0>)
 800e4e2:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800e4e4:	4ba7      	ldr	r3, [pc, #668]	@ (800e784 <tx_control+0x7fc>)
 800e4e6:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800e4e8:	233c      	movs	r3, #60	@ 0x3c
 800e4ea:	18fb      	adds	r3, r7, r3
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	701a      	strb	r2, [r3, #0]
 800e4f0:	f000 fc68 	bl	800edc4 <tx_control+0xe3c>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800e4f4:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800e4f6:	4b95      	ldr	r3, [pc, #596]	@ (800e74c <tx_control+0x7c4>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d14e      	bne.n	800e59c <tx_control+0x614>
		if(codeTX != 0x60){//	cp	A,#$60
 800e4fe:	4b8f      	ldr	r3, [pc, #572]	@ (800e73c <tx_control+0x7b4>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b60      	cmp	r3, #96	@ 0x60
 800e504:	d122      	bne.n	800e54c <tx_control+0x5c4>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e506:	4b93      	ldr	r3, [pc, #588]	@ (800e754 <tx_control+0x7cc>)
 800e508:	22f1      	movs	r2, #241	@ 0xf1
 800e50a:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800e50c:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800e50e:	4b9e      	ldr	r3, [pc, #632]	@ (800e788 <tx_control+0x800>)
 800e510:	781a      	ldrb	r2, [r3, #0]
 800e512:	4b9e      	ldr	r3, [pc, #632]	@ (800e78c <tx_control+0x804>)
 800e514:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800e516:	4b9e      	ldr	r3, [pc, #632]	@ (800e790 <tx_control+0x808>)
 800e518:	781a      	ldrb	r2, [r3, #0]
 800e51a:	4b9e      	ldr	r3, [pc, #632]	@ (800e794 <tx_control+0x80c>)
 800e51c:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e51e:	4b9e      	ldr	r3, [pc, #632]	@ (800e798 <tx_control+0x810>)
 800e520:	2203      	movs	r2, #3
 800e522:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800e524:	4b9d      	ldr	r3, [pc, #628]	@ (800e79c <tx_control+0x814>)
 800e526:	4a9e      	ldr	r2, [pc, #632]	@ (800e7a0 <tx_control+0x818>)
 800e528:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800e52a:	4b9e      	ldr	r3, [pc, #632]	@ (800e7a4 <tx_control+0x81c>)
 800e52c:	4a9e      	ldr	r2, [pc, #632]	@ (800e7a8 <tx_control+0x820>)
 800e52e:	601a      	str	r2, [r3, #0]
		dirBufferPage = &bufferPageDATA[0];
 800e530:	4b9e      	ldr	r3, [pc, #632]	@ (800e7ac <tx_control+0x824>)
 800e532:	4a9f      	ldr	r2, [pc, #636]	@ (800e7b0 <tx_control+0x828>)
 800e534:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800e536:	4b8b      	ldr	r3, [pc, #556]	@ (800e764 <tx_control+0x7dc>)
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2201      	movs	r2, #1
 800e53c:	4053      	eors	r3, r2
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	d101      	bne.n	800e548 <tx_control+0x5c0>
 800e544:	f000 fc85 	bl	800ee52 <tx_control+0xeca>
			goto noFullFlagTXDATA;
 800e548:	f000 fc86 	bl	800ee58 <tx_control+0xed0>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800e54c:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800e54e:	4b7b      	ldr	r3, [pc, #492]	@ (800e73c <tx_control+0x7b4>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b61      	cmp	r3, #97	@ 0x61
 800e554:	d124      	bne.n	800e5a0 <tx_control+0x618>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800e556:	4b7f      	ldr	r3, [pc, #508]	@ (800e754 <tx_control+0x7cc>)
 800e558:	22f1      	movs	r2, #241	@ 0xf1
 800e55a:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800e55c:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800e55e:	4b95      	ldr	r3, [pc, #596]	@ (800e7b4 <tx_control+0x82c>)
 800e560:	781a      	ldrb	r2, [r3, #0]
 800e562:	4b8a      	ldr	r3, [pc, #552]	@ (800e78c <tx_control+0x804>)
 800e564:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800e566:	4b94      	ldr	r3, [pc, #592]	@ (800e7b8 <tx_control+0x830>)
 800e568:	781a      	ldrb	r2, [r3, #0]
 800e56a:	4b8a      	ldr	r3, [pc, #552]	@ (800e794 <tx_control+0x80c>)
 800e56c:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e56e:	4b8a      	ldr	r3, [pc, #552]	@ (800e798 <tx_control+0x810>)
 800e570:	220a      	movs	r2, #10
 800e572:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800e574:	4b89      	ldr	r3, [pc, #548]	@ (800e79c <tx_control+0x814>)
 800e576:	4a91      	ldr	r2, [pc, #580]	@ (800e7bc <tx_control+0x834>)
 800e578:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800e57a:	4b8a      	ldr	r3, [pc, #552]	@ (800e7a4 <tx_control+0x81c>)
 800e57c:	4a90      	ldr	r2, [pc, #576]	@ (800e7c0 <tx_control+0x838>)
 800e57e:	601a      	str	r2, [r3, #0]
		dirBufferPage = &bufferPageEVENT[0];
 800e580:	4b8a      	ldr	r3, [pc, #552]	@ (800e7ac <tx_control+0x824>)
 800e582:	4a90      	ldr	r2, [pc, #576]	@ (800e7c4 <tx_control+0x83c>)
 800e584:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800e586:	4b77      	ldr	r3, [pc, #476]	@ (800e764 <tx_control+0x7dc>)
 800e588:	789b      	ldrb	r3, [r3, #2]
 800e58a:	2201      	movs	r2, #1
 800e58c:	4053      	eors	r3, r2
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	2b00      	cmp	r3, #0
 800e592:	d101      	bne.n	800e598 <tx_control+0x610>
 800e594:	f000 fcae 	bl	800eef4 <tx_control+0xf6c>
			goto noFullFlagTXEVENT;
 800e598:	f000 fcaf 	bl	800eefa <tx_control+0xf72>
			goto ask_tx_control_04;
 800e59c:	46c0      	nop			@ (mov r8, r8)
 800e59e:	e000      	b.n	800e5a2 <tx_control+0x61a>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800e5a0:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800e5a2:	4b66      	ldr	r3, [pc, #408]	@ (800e73c <tx_control+0x7b4>)
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b53      	cmp	r3, #83	@ 0x53
 800e5a8:	d12e      	bne.n	800e608 <tx_control+0x680>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e5aa:	4b6a      	ldr	r3, [pc, #424]	@ (800e754 <tx_control+0x7cc>)
 800e5ac:	22f1      	movs	r2, #241	@ 0xf1
 800e5ae:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800e5b0:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800e5b2:	4b85      	ldr	r3, [pc, #532]	@ (800e7c8 <tx_control+0x840>)
 800e5b4:	781a      	ldrb	r2, [r3, #0]
 800e5b6:	4b85      	ldr	r3, [pc, #532]	@ (800e7cc <tx_control+0x844>)
 800e5b8:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800e5ba:	4b85      	ldr	r3, [pc, #532]	@ (800e7d0 <tx_control+0x848>)
 800e5bc:	781a      	ldrb	r2, [r3, #0]
 800e5be:	4b83      	ldr	r3, [pc, #524]	@ (800e7cc <tx_control+0x844>)
 800e5c0:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800e5c2:	4b84      	ldr	r3, [pc, #528]	@ (800e7d4 <tx_control+0x84c>)
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	4b81      	ldr	r3, [pc, #516]	@ (800e7cc <tx_control+0x844>)
 800e5c8:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800e5ca:	4b83      	ldr	r3, [pc, #524]	@ (800e7d8 <tx_control+0x850>)
 800e5cc:	781a      	ldrb	r2, [r3, #0]
 800e5ce:	4b7f      	ldr	r3, [pc, #508]	@ (800e7cc <tx_control+0x844>)
 800e5d0:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800e5d2:	4b82      	ldr	r3, [pc, #520]	@ (800e7dc <tx_control+0x854>)
 800e5d4:	881b      	ldrh	r3, [r3, #0]
 800e5d6:	0a1b      	lsrs	r3, r3, #8
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	4b7b      	ldr	r3, [pc, #492]	@ (800e7cc <tx_control+0x844>)
 800e5de:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800e5e0:	4b7e      	ldr	r3, [pc, #504]	@ (800e7dc <tx_control+0x854>)
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	4b79      	ldr	r3, [pc, #484]	@ (800e7cc <tx_control+0x844>)
 800e5e8:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800e5ea:	4b7d      	ldr	r3, [pc, #500]	@ (800e7e0 <tx_control+0x858>)
 800e5ec:	781a      	ldrb	r2, [r3, #0]
 800e5ee:	4b77      	ldr	r3, [pc, #476]	@ (800e7cc <tx_control+0x844>)
 800e5f0:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800e5f2:	4b76      	ldr	r3, [pc, #472]	@ (800e7cc <tx_control+0x844>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_comp])											// compresor activo ?
 800e5f8:	4b7a      	ldr	r3, [pc, #488]	@ (800e7e4 <tx_control+0x85c>)
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <tx_control+0x67c>
 800e600:	f000 fd17 	bl	800f032 <tx_control+0x10aa>
 800e604:	f000 fd0e 	bl	800f024 <tx_control+0x109c>
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800e608:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800e60a:	4b4c      	ldr	r3, [pc, #304]	@ (800e73c <tx_control+0x7b4>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b51      	cmp	r3, #81	@ 0x51
 800e610:	d125      	bne.n	800e65e <tx_control+0x6d6>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800e612:	4b50      	ldr	r3, [pc, #320]	@ (800e754 <tx_control+0x7cc>)
 800e614:	22f1      	movs	r2, #241	@ 0xf1
 800e616:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800e618:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800e61a:	4b73      	ldr	r3, [pc, #460]	@ (800e7e8 <tx_control+0x860>)
 800e61c:	227b      	movs	r2, #123	@ 0x7b
 800e61e:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800e620:	4b71      	ldr	r3, [pc, #452]	@ (800e7e8 <tx_control+0x860>)
 800e622:	227c      	movs	r2, #124	@ 0x7c
 800e624:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800e626:	4b70      	ldr	r3, [pc, #448]	@ (800e7e8 <tx_control+0x860>)
 800e628:	2200      	movs	r2, #0
 800e62a:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800e62c:	4b6e      	ldr	r3, [pc, #440]	@ (800e7e8 <tx_control+0x860>)
 800e62e:	2200      	movs	r2, #0
 800e630:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800e632:	4b6d      	ldr	r3, [pc, #436]	@ (800e7e8 <tx_control+0x860>)
 800e634:	2200      	movs	r2, #0
 800e636:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800e638:	4b6b      	ldr	r3, [pc, #428]	@ (800e7e8 <tx_control+0x860>)
 800e63a:	2201      	movs	r2, #1
 800e63c:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800e63e:	4b6a      	ldr	r3, [pc, #424]	@ (800e7e8 <tx_control+0x860>)
 800e640:	2204      	movs	r2, #4
 800e642:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800e644:	4b68      	ldr	r3, [pc, #416]	@ (800e7e8 <tx_control+0x860>)
 800e646:	2280      	movs	r2, #128	@ 0x80
 800e648:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800e64a:	4b67      	ldr	r3, [pc, #412]	@ (800e7e8 <tx_control+0x860>)
 800e64c:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800e64e:	4b4d      	ldr	r3, [pc, #308]	@ (800e784 <tx_control+0x7fc>)
 800e650:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800e652:	2334      	movs	r3, #52	@ 0x34
 800e654:	18fb      	adds	r3, r7, r3
 800e656:	2200      	movs	r2, #0
 800e658:	701a      	strb	r2, [r3, #0]
 800e65a:	f000 fe26 	bl	800f2aa <tx_control+0x1322>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800e65e:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800e660:	4b36      	ldr	r3, [pc, #216]	@ (800e73c <tx_control+0x7b4>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b50      	cmp	r3, #80	@ 0x50
 800e666:	d10f      	bne.n	800e688 <tx_control+0x700>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800e668:	4b3a      	ldr	r3, [pc, #232]	@ (800e754 <tx_control+0x7cc>)
 800e66a:	22f1      	movs	r2, #241	@ 0xf1
 800e66c:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800e66e:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == reePlantilla[eeversion1]){
 800e670:	4b5e      	ldr	r3, [pc, #376]	@ (800e7ec <tx_control+0x864>)
 800e672:	227d      	movs	r2, #125	@ 0x7d
 800e674:	5c9a      	ldrb	r2, [r3, r2]
 800e676:	4b5e      	ldr	r3, [pc, #376]	@ (800e7f0 <tx_control+0x868>)
 800e678:	217b      	movs	r1, #123	@ 0x7b
 800e67a:	5c5b      	ldrb	r3, [r3, r1]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d001      	beq.n	800e684 <tx_control+0x6fc>
 800e680:	f000 ff01 	bl	800f486 <tx_control+0x14fe>
				goto 	verifica_version2;		//jreq	verifica_version2
 800e684:	f000 fe9e 	bl	800f3c4 <tx_control+0x143c>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800e688:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800e68a:	4b2c      	ldr	r3, [pc, #176]	@ (800e73c <tx_control+0x7b4>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	2b46      	cmp	r3, #70	@ 0x46
 800e690:	d129      	bne.n	800e6e6 <tx_control+0x75e>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e692:	4b30      	ldr	r3, [pc, #192]	@ (800e754 <tx_control+0x7cc>)
 800e694:	22f1      	movs	r2, #241	@ 0xf1
 800e696:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800e698:	46c0      	nop			@ (mov r8, r8)
			bandera_act_fw_j = 1;   //Parche para parar loggeo
 800e69a:	4b31      	ldr	r3, [pc, #196]	@ (800e760 <tx_control+0x7d8>)
 800e69c:	2201      	movs	r2, #1
 800e69e:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800e6a0:	4b31      	ldr	r3, [pc, #196]	@ (800e768 <tx_control+0x7e0>)
 800e6a2:	22f1      	movs	r2, #241	@ 0xf1
 800e6a4:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800e6a6:	4b30      	ldr	r3, [pc, #192]	@ (800e768 <tx_control+0x7e0>)
 800e6a8:	2203      	movs	r2, #3
 800e6aa:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800e6ac:	4b28      	ldr	r3, [pc, #160]	@ (800e750 <tx_control+0x7c8>)
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800e6b2:	4b50      	ldr	r3, [pc, #320]	@ (800e7f4 <tx_control+0x86c>)
 800e6b4:	4a2c      	ldr	r2, [pc, #176]	@ (800e768 <tx_control+0x7e0>)
 800e6b6:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800e6b8:	4b4f      	ldr	r3, [pc, #316]	@ (800e7f8 <tx_control+0x870>)
 800e6ba:	4a2b      	ldr	r2, [pc, #172]	@ (800e768 <tx_control+0x7e0>)
 800e6bc:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800e6be:	4b4f      	ldr	r3, [pc, #316]	@ (800e7fc <tx_control+0x874>)
 800e6c0:	4a4f      	ldr	r2, [pc, #316]	@ (800e800 <tx_control+0x878>)
 800e6c2:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800e6c4:	4b4f      	ldr	r3, [pc, #316]	@ (800e804 <tx_control+0x87c>)
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800e6ca:	4b4f      	ldr	r3, [pc, #316]	@ (800e808 <tx_control+0x880>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800e6d0:	4b4e      	ldr	r3, [pc, #312]	@ (800e80c <tx_control+0x884>)
 800e6d2:	2255      	movs	r2, #85	@ 0x55
 800e6d4:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800e6d6:	4b19      	ldr	r3, [pc, #100]	@ (800e73c <tx_control+0x7b4>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800e6dc:	4b1f      	ldr	r3, [pc, #124]	@ (800e75c <tx_control+0x7d4>)
 800e6de:	2205      	movs	r2, #5
 800e6e0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800e6e2:	f001 fcf8 	bl	80100d6 <tx_control+0x214e>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800e6e6:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800e6e8:	4b14      	ldr	r3, [pc, #80]	@ (800e73c <tx_control+0x7b4>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	2b54      	cmp	r3, #84	@ 0x54
 800e6ee:	d11a      	bne.n	800e726 <tx_control+0x79e>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e6f0:	4b18      	ldr	r3, [pc, #96]	@ (800e754 <tx_control+0x7cc>)
 800e6f2:	22f1      	movs	r2, #241	@ 0xf1
 800e6f4:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800e6f6:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800e6f8:	f7f8 fc82 	bl	8007000 <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800e6fc:	4b44      	ldr	r3, [pc, #272]	@ (800e810 <tx_control+0x888>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	801a      	strh	r2, [r3, #0]


tx_clean_logger_loop:
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800e702:	4b44      	ldr	r3, [pc, #272]	@ (800e814 <tx_control+0x88c>)
 800e704:	22aa      	movs	r2, #170	@ 0xaa
 800e706:	701a      	strb	r2, [r3, #0]
			// ldw		X,#data_buffer
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800e708:	4b43      	ldr	r3, [pc, #268]	@ (800e818 <tx_control+0x890>)
 800e70a:	4a25      	ldr	r2, [pc, #148]	@ (800e7a0 <tx_control+0x818>)
 800e70c:	601a      	str	r2, [r3, #0]

			// ld    A,cntBloqFirm;				/ Toma el número de bloques recibidos al momento
			// ldw		X,#128;								/ Carga el tamaño de los bloques (128 bytes)
			// mul		X,A;									/ Multiplicalos
			// addw	X,#eventLogger;						/	apunta al inicio de la Memoria de logger + el número de bloques grabados
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800e70e:	4b40      	ldr	r3, [pc, #256]	@ (800e810 <tx_control+0x888>)
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	01db      	lsls	r3, r3, #7
 800e714:	001a      	movs	r2, r3
 800e716:	4b2a      	ldr	r3, [pc, #168]	@ (800e7c0 <tx_control+0x838>)
 800e718:	18d2      	adds	r2, r2, r3
 800e71a:	4b40      	ldr	r3, [pc, #256]	@ (800e81c <tx_control+0x894>)
 800e71c:	601a      	str	r2, [r3, #0]
			 * CGM 10/04/2025
			 * Borrado Total de todo el Logger, es decir de la pagina 110 a la pagina 125 serán borradas.
			 * Logger de Eventos:			110 - 119 pagina
			 * Logger de Datos o Tiempo:	120 - 125 pagina
			 */
			for(uint32_t i = 110; i<126; i++){
 800e71e:	236e      	movs	r3, #110	@ 0x6e
 800e720:	627b      	str	r3, [r7, #36]	@ 0x24
 800e722:	f001 f89c 	bl	800f85e <tx_control+0x18d6>
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800e726:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800e728:	4b04      	ldr	r3, [pc, #16]	@ (800e73c <tx_control+0x7b4>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	2b55      	cmp	r3, #85	@ 0x55
 800e72e:	d177      	bne.n	800e820 <tx_control+0x898>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e730:	4b08      	ldr	r3, [pc, #32]	@ (800e754 <tx_control+0x7cc>)
 800e732:	22f0      	movs	r2, #240	@ 0xf0
 800e734:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800e736:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800e738:	f001 fccd 	bl	80100d6 <tx_control+0x214e>
 800e73c:	20001f18 	.word	0x20001f18
 800e740:	20002040 	.word	0x20002040
 800e744:	2000202e 	.word	0x2000202e
 800e748:	20002038 	.word	0x20002038
 800e74c:	20002044 	.word	0x20002044
 800e750:	20001fd0 	.word	0x20001fd0
 800e754:	20001fd9 	.word	0x20001fd9
 800e758:	200021ec 	.word	0x200021ec
 800e75c:	20001fda 	.word	0x20001fda
 800e760:	200021d7 	.word	0x200021d7
 800e764:	20001ef8 	.word	0x20001ef8
 800e768:	20001ed4 	.word	0x20001ed4
 800e76c:	0801eff4 	.word	0x0801eff4
 800e770:	0801eff0 	.word	0x0801eff0
 800e774:	0801eff1 	.word	0x0801eff1
 800e778:	200000b8 	.word	0x200000b8
 800e77c:	0801eff3 	.word	0x0801eff3
 800e780:	0801eff2 	.word	0x0801eff2
 800e784:	2000209c 	.word	0x2000209c
 800e788:	20000e99 	.word	0x20000e99
 800e78c:	20000e86 	.word	0x20000e86
 800e790:	20000e98 	.word	0x20000e98
 800e794:	20000e87 	.word	0x20000e87
 800e798:	20001f25 	.word	0x20001f25
 800e79c:	20000e90 	.word	0x20000e90
 800e7a0:	20000d78 	.word	0x20000d78
 800e7a4:	20000e8c 	.word	0x20000e8c
 800e7a8:	0803c000 	.word	0x0803c000
 800e7ac:	20001ea0 	.word	0x20001ea0
 800e7b0:	20000ea0 	.word	0x20000ea0
 800e7b4:	20000e9b 	.word	0x20000e9b
 800e7b8:	20000e9a 	.word	0x20000e9a
 800e7bc:	20000df8 	.word	0x20000df8
 800e7c0:	08037000 	.word	0x08037000
 800e7c4:	200016a0 	.word	0x200016a0
 800e7c8:	20000c10 	.word	0x20000c10
 800e7cc:	20001eec 	.word	0x20001eec
 800e7d0:	20000c11 	.word	0x20000c11
 800e7d4:	20000c12 	.word	0x20000c12
 800e7d8:	20000c13 	.word	0x20000c13
 800e7dc:	20000cb4 	.word	0x20000cb4
 800e7e0:	20000c2e 	.word	0x20000c2e
 800e7e4:	20000c04 	.word	0x20000c04
 800e7e8:	20001ecc 	.word	0x20001ecc
 800e7ec:	200009e8 	.word	0x200009e8
 800e7f0:	20000cec 	.word	0x20000cec
 800e7f4:	20001f08 	.word	0x20001f08
 800e7f8:	20001f00 	.word	0x20001f00
 800e7fc:	20001f04 	.word	0x20001f04
 800e800:	20001ed5 	.word	0x20001ed5
 800e804:	20001f24 	.word	0x20001f24
 800e808:	20001f10 	.word	0x20001f10
 800e80c:	20001f0d 	.word	0x20001f0d
 800e810:	20001fc6 	.word	0x20001fc6
 800e814:	20000e78 	.word	0x20000e78
 800e818:	20000e80 	.word	0x20000e80
 800e81c:	20000e7c 	.word	0x20000e7c
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800e820:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800e822:	4bec      	ldr	r3, [pc, #944]	@ (800ebd4 <tx_control+0xc4c>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	2b56      	cmp	r3, #86	@ 0x56
 800e828:	d132      	bne.n	800e890 <tx_control+0x908>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e82a:	4beb      	ldr	r3, [pc, #940]	@ (800ebd8 <tx_control+0xc50>)
 800e82c:	22f0      	movs	r2, #240	@ 0xf0
 800e82e:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800e830:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e832:	4bea      	ldr	r3, [pc, #936]	@ (800ebdc <tx_control+0xc54>)
 800e834:	2200      	movs	r2, #0
 800e836:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800e838:	4be9      	ldr	r3, [pc, #932]	@ (800ebe0 <tx_control+0xc58>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e83e:	4be9      	ldr	r3, [pc, #932]	@ (800ebe4 <tx_control+0xc5c>)
 800e840:	2206      	movs	r2, #6
 800e842:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e844:	4be8      	ldr	r3, [pc, #928]	@ (800ebe8 <tx_control+0xc60>)
 800e846:	2106      	movs	r1, #6
 800e848:	0018      	movs	r0, r3
 800e84a:	f7f8 fba3 	bl	8006f94 <buildChksumBloq>
			chksum_to_compare = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e852:	4be5      	ldr	r3, [pc, #916]	@ (800ebe8 <tx_control+0xc60>)
 800e854:	799b      	ldrb	r3, [r3, #6]
 800e856:	061b      	lsls	r3, r3, #24
 800e858:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e85a:	4be3      	ldr	r3, [pc, #908]	@ (800ebe8 <tx_control+0xc60>)
 800e85c:	79db      	ldrb	r3, [r3, #7]
 800e85e:	041b      	lsls	r3, r3, #16
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	18d3      	adds	r3, r2, r3
 800e864:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e866:	4be0      	ldr	r3, [pc, #896]	@ (800ebe8 <tx_control+0xc60>)
 800e868:	7a1b      	ldrb	r3, [r3, #8]
 800e86a:	021b      	lsls	r3, r3, #8
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	18d3      	adds	r3, r2, r3
 800e870:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e872:	4bdd      	ldr	r3, [pc, #884]	@ (800ebe8 <tx_control+0xc60>)
 800e874:	7a5b      	ldrb	r3, [r3, #9]
 800e876:	001a      	movs	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	189b      	adds	r3, r3, r2
 800e87c:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e87e:	4bd7      	ldr	r3, [pc, #860]	@ (800ebdc <tx_control+0xc54>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	429a      	cmp	r2, r3
 800e886:	d101      	bne.n	800e88c <tx_control+0x904>
 800e888:	f001 f83c 	bl	800f904 <tx_control+0x197c>
				goto tx_write_status_error;
 800e88c:	f001 f8ee 	bl	800fa6c <tx_control+0x1ae4>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800e890:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800e892:	4bd0      	ldr	r3, [pc, #832]	@ (800ebd4 <tx_control+0xc4c>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2b57      	cmp	r3, #87	@ 0x57
 800e898:	d10b      	bne.n	800e8b2 <tx_control+0x92a>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e89a:	4bcf      	ldr	r3, [pc, #828]	@ (800ebd8 <tx_control+0xc50>)
 800e89c:	22f0      	movs	r2, #240	@ 0xf0
 800e89e:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800e8a0:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		uint8_t estado1_Aux = reeEstado1;
 800e8a2:	1cfb      	adds	r3, r7, #3
 800e8a4:	4ad1      	ldr	r2, [pc, #836]	@ (800ebec <tx_control+0xc64>)
 800e8a6:	7812      	ldrb	r2, [r2, #0]
 800e8a8:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	61fb      	str	r3, [r7, #28]
 800e8ae:	f001 f90b 	bl	800fac8 <tx_control+0x1b40>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800e8b2:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800e8b4:	4bc7      	ldr	r3, [pc, #796]	@ (800ebd4 <tx_control+0xc4c>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b58      	cmp	r3, #88	@ 0x58
 800e8ba:	d132      	bne.n	800e922 <tx_control+0x99a>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800e8bc:	4bc6      	ldr	r3, [pc, #792]	@ (800ebd8 <tx_control+0xc50>)
 800e8be:	22f0      	movs	r2, #240	@ 0xf0
 800e8c0:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800e8c2:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800e8c4:	4bc5      	ldr	r3, [pc, #788]	@ (800ebdc <tx_control+0xc54>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800e8ca:	4bc5      	ldr	r3, [pc, #788]	@ (800ebe0 <tx_control+0xc58>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e8d0:	4bc4      	ldr	r3, [pc, #784]	@ (800ebe4 <tx_control+0xc5c>)
 800e8d2:	2206      	movs	r2, #6
 800e8d4:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e8d6:	4bc4      	ldr	r3, [pc, #784]	@ (800ebe8 <tx_control+0xc60>)
 800e8d8:	2106      	movs	r1, #6
 800e8da:	0018      	movs	r0, r3
 800e8dc:	f7f8 fb5a 	bl	8006f94 <buildChksumBloq>
		chksum_to_compare = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	607b      	str	r3, [r7, #4]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e8e4:	4bc0      	ldr	r3, [pc, #768]	@ (800ebe8 <tx_control+0xc60>)
 800e8e6:	799b      	ldrb	r3, [r3, #6]
 800e8e8:	061b      	lsls	r3, r3, #24
 800e8ea:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e8ec:	4bbe      	ldr	r3, [pc, #760]	@ (800ebe8 <tx_control+0xc60>)
 800e8ee:	79db      	ldrb	r3, [r3, #7]
 800e8f0:	041b      	lsls	r3, r3, #16
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	18d3      	adds	r3, r2, r3
 800e8f6:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e8f8:	4bbb      	ldr	r3, [pc, #748]	@ (800ebe8 <tx_control+0xc60>)
 800e8fa:	7a1b      	ldrb	r3, [r3, #8]
 800e8fc:	021b      	lsls	r3, r3, #8
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	18d3      	adds	r3, r2, r3
 800e902:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e904:	4bb8      	ldr	r3, [pc, #736]	@ (800ebe8 <tx_control+0xc60>)
 800e906:	7a5b      	ldrb	r3, [r3, #9]
 800e908:	001a      	movs	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	189b      	adds	r3, r3, r2
 800e90e:	607b      	str	r3, [r7, #4]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e910:	4bb2      	ldr	r3, [pc, #712]	@ (800ebdc <tx_control+0xc54>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d101      	bne.n	800e91e <tx_control+0x996>
 800e91a:	f001 fa39 	bl	800fd90 <tx_control+0x1e08>
			goto tx_write_status_error;
 800e91e:	f001 f8a5 	bl	800fa6c <tx_control+0x1ae4>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800e922:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800e924:	4bab      	ldr	r3, [pc, #684]	@ (800ebd4 <tx_control+0xc4c>)
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b59      	cmp	r3, #89	@ 0x59
 800e92a:	d132      	bne.n	800e992 <tx_control+0xa0a>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800e92c:	4baa      	ldr	r3, [pc, #680]	@ (800ebd8 <tx_control+0xc50>)
 800e92e:	22f0      	movs	r2, #240	@ 0xf0
 800e930:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800e932:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e934:	4ba9      	ldr	r3, [pc, #676]	@ (800ebdc <tx_control+0xc54>)
 800e936:	2200      	movs	r2, #0
 800e938:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800e93a:	4ba9      	ldr	r3, [pc, #676]	@ (800ebe0 <tx_control+0xc58>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800e940:	4ba8      	ldr	r3, [pc, #672]	@ (800ebe4 <tx_control+0xc5c>)
 800e942:	220a      	movs	r2, #10
 800e944:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800e946:	4ba8      	ldr	r3, [pc, #672]	@ (800ebe8 <tx_control+0xc60>)
 800e948:	210a      	movs	r1, #10
 800e94a:	0018      	movs	r0, r3
 800e94c:	f7f8 fb22 	bl	8006f94 <buildChksumBloq>
			chksum_to_compare = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800e954:	4ba4      	ldr	r3, [pc, #656]	@ (800ebe8 <tx_control+0xc60>)
 800e956:	7a9b      	ldrb	r3, [r3, #10]
 800e958:	061b      	lsls	r3, r3, #24
 800e95a:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800e95c:	4ba2      	ldr	r3, [pc, #648]	@ (800ebe8 <tx_control+0xc60>)
 800e95e:	7adb      	ldrb	r3, [r3, #11]
 800e960:	041b      	lsls	r3, r3, #16
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	18d3      	adds	r3, r2, r3
 800e966:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800e968:	4b9f      	ldr	r3, [pc, #636]	@ (800ebe8 <tx_control+0xc60>)
 800e96a:	7b1b      	ldrb	r3, [r3, #12]
 800e96c:	021b      	lsls	r3, r3, #8
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	18d3      	adds	r3, r2, r3
 800e972:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800e974:	4b9c      	ldr	r3, [pc, #624]	@ (800ebe8 <tx_control+0xc60>)
 800e976:	7b5b      	ldrb	r3, [r3, #13]
 800e978:	001a      	movs	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	189b      	adds	r3, r3, r2
 800e97e:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e980:	4b96      	ldr	r3, [pc, #600]	@ (800ebdc <tx_control+0xc54>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d101      	bne.n	800e98e <tx_control+0xa06>
 800e98a:	f001 fa1e 	bl	800fdca <tx_control+0x1e42>
				goto tx_write_GEO_error;
 800e98e:	f001 fa83 	bl	800fe98 <tx_control+0x1f10>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800e992:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800e994:	4b8f      	ldr	r3, [pc, #572]	@ (800ebd4 <tx_control+0xc4c>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b5a      	cmp	r3, #90	@ 0x5a
 800e99a:	d000      	beq.n	800e99e <tx_control+0xa16>
 800e99c:	e089      	b.n	800eab2 <tx_control+0xb2a>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e99e:	4b8e      	ldr	r3, [pc, #568]	@ (800ebd8 <tx_control+0xc50>)
 800e9a0:	22f0      	movs	r2, #240	@ 0xf0
 800e9a2:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800e9a4:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800e9a6:	4b92      	ldr	r3, [pc, #584]	@ (800ebf0 <tx_control+0xc68>)
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800e9ac:	4b91      	ldr	r3, [pc, #580]	@ (800ebf4 <tx_control+0xc6c>)
 800e9ae:	227c      	movs	r2, #124	@ 0x7c
 800e9b0:	5c9a      	ldrb	r2, [r3, r2]
 800e9b2:	4b91      	ldr	r3, [pc, #580]	@ (800ebf8 <tx_control+0xc70>)
 800e9b4:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e9b6:	4b90      	ldr	r3, [pc, #576]	@ (800ebf8 <tx_control+0xc70>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e9bc:	4b8e      	ldr	r3, [pc, #568]	@ (800ebf8 <tx_control+0xc70>)
 800e9be:	2200      	movs	r2, #0
 800e9c0:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e9c2:	4b8d      	ldr	r3, [pc, #564]	@ (800ebf8 <tx_control+0xc70>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e9c8:	4b8b      	ldr	r3, [pc, #556]	@ (800ebf8 <tx_control+0xc70>)
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800e9ce:	4b8a      	ldr	r3, [pc, #552]	@ (800ebf8 <tx_control+0xc70>)
 800e9d0:	2206      	movs	r2, #6
 800e9d2:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800e9d4:	4b86      	ldr	r3, [pc, #536]	@ (800ebf0 <tx_control+0xc68>)
 800e9d6:	781a      	ldrb	r2, [r3, #0]
 800e9d8:	4b87      	ldr	r3, [pc, #540]	@ (800ebf8 <tx_control+0xc70>)
 800e9da:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e9dc:	4b80      	ldr	r3, [pc, #512]	@ (800ebe0 <tx_control+0xc58>)
 800e9de:	2208      	movs	r2, #8
 800e9e0:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800e9e2:	4a86      	ldr	r2, [pc, #536]	@ (800ebfc <tx_control+0xc74>)
 800e9e4:	4b84      	ldr	r3, [pc, #528]	@ (800ebf8 <tx_control+0xc70>)
 800e9e6:	0011      	movs	r1, r2
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	f7f8 fb21 	bl	8007030 <copyVector>
//			bufferTxControl[12]	= eeLong1;
//			bufferTxControl[13]	= eeLong2;
//			bufferTxControl[14] = eeLong3;
//			bufferTxControl[15] = eeLong4;

			bufferTxControl[8] = reeLat1;
 800e9ee:	4b84      	ldr	r3, [pc, #528]	@ (800ec00 <tx_control+0xc78>)
 800e9f0:	781a      	ldrb	r2, [r3, #0]
 800e9f2:	4b82      	ldr	r3, [pc, #520]	@ (800ebfc <tx_control+0xc74>)
 800e9f4:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = reeLat2;
 800e9f6:	4b83      	ldr	r3, [pc, #524]	@ (800ec04 <tx_control+0xc7c>)
 800e9f8:	781a      	ldrb	r2, [r3, #0]
 800e9fa:	4b80      	ldr	r3, [pc, #512]	@ (800ebfc <tx_control+0xc74>)
 800e9fc:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = reeLat3;
 800e9fe:	4b82      	ldr	r3, [pc, #520]	@ (800ec08 <tx_control+0xc80>)
 800ea00:	781a      	ldrb	r2, [r3, #0]
 800ea02:	4b7e      	ldr	r3, [pc, #504]	@ (800ebfc <tx_control+0xc74>)
 800ea04:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = reeLat4;
 800ea06:	4b81      	ldr	r3, [pc, #516]	@ (800ec0c <tx_control+0xc84>)
 800ea08:	781a      	ldrb	r2, [r3, #0]
 800ea0a:	4b7c      	ldr	r3, [pc, #496]	@ (800ebfc <tx_control+0xc74>)
 800ea0c:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= reeLong1;
 800ea0e:	4b80      	ldr	r3, [pc, #512]	@ (800ec10 <tx_control+0xc88>)
 800ea10:	781a      	ldrb	r2, [r3, #0]
 800ea12:	4b7a      	ldr	r3, [pc, #488]	@ (800ebfc <tx_control+0xc74>)
 800ea14:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= reeLong2;
 800ea16:	4b7f      	ldr	r3, [pc, #508]	@ (800ec14 <tx_control+0xc8c>)
 800ea18:	781a      	ldrb	r2, [r3, #0]
 800ea1a:	4b78      	ldr	r3, [pc, #480]	@ (800ebfc <tx_control+0xc74>)
 800ea1c:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = reeLong3;
 800ea1e:	4b7e      	ldr	r3, [pc, #504]	@ (800ec18 <tx_control+0xc90>)
 800ea20:	781a      	ldrb	r2, [r3, #0]
 800ea22:	4b76      	ldr	r3, [pc, #472]	@ (800ebfc <tx_control+0xc74>)
 800ea24:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = reeLong4;
 800ea26:	4b7d      	ldr	r3, [pc, #500]	@ (800ec1c <tx_control+0xc94>)
 800ea28:	781a      	ldrb	r2, [r3, #0]
 800ea2a:	4b74      	ldr	r3, [pc, #464]	@ (800ebfc <tx_control+0xc74>)
 800ea2c:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ea2e:	4b6b      	ldr	r3, [pc, #428]	@ (800ebdc <tx_control+0xc54>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800ea34:	4b6a      	ldr	r3, [pc, #424]	@ (800ebe0 <tx_control+0xc58>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800ea3a:	4b6a      	ldr	r3, [pc, #424]	@ (800ebe4 <tx_control+0xc5c>)
 800ea3c:	2210      	movs	r2, #16
 800ea3e:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800ea40:	4b68      	ldr	r3, [pc, #416]	@ (800ebe4 <tx_control+0xc5c>)
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	001a      	movs	r2, r3
 800ea46:	4b6d      	ldr	r3, [pc, #436]	@ (800ebfc <tx_control+0xc74>)
 800ea48:	0011      	movs	r1, r2
 800ea4a:	0018      	movs	r0, r3
 800ea4c:	f7f8 faa2 	bl	8006f94 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ea50:	4b62      	ldr	r3, [pc, #392]	@ (800ebdc <tx_control+0xc54>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	0e1b      	lsrs	r3, r3, #24
 800ea56:	b2da      	uxtb	r2, r3
 800ea58:	4b68      	ldr	r3, [pc, #416]	@ (800ebfc <tx_control+0xc74>)
 800ea5a:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ea5c:	4b5f      	ldr	r3, [pc, #380]	@ (800ebdc <tx_control+0xc54>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	0c1b      	lsrs	r3, r3, #16
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	4b65      	ldr	r3, [pc, #404]	@ (800ebfc <tx_control+0xc74>)
 800ea66:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ea68:	4b5c      	ldr	r3, [pc, #368]	@ (800ebdc <tx_control+0xc54>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	0a1b      	lsrs	r3, r3, #8
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	4b62      	ldr	r3, [pc, #392]	@ (800ebfc <tx_control+0xc74>)
 800ea72:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800ea74:	4b59      	ldr	r3, [pc, #356]	@ (800ebdc <tx_control+0xc54>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	4b60      	ldr	r3, [pc, #384]	@ (800ebfc <tx_control+0xc74>)
 800ea7c:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800ea7e:	4b68      	ldr	r3, [pc, #416]	@ (800ec20 <tx_control+0xc98>)
 800ea80:	4a5e      	ldr	r2, [pc, #376]	@ (800ebfc <tx_control+0xc74>)
 800ea82:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800ea84:	4b67      	ldr	r3, [pc, #412]	@ (800ec24 <tx_control+0xc9c>)
 800ea86:	4a5d      	ldr	r2, [pc, #372]	@ (800ebfc <tx_control+0xc74>)
 800ea88:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800ea8a:	4b67      	ldr	r3, [pc, #412]	@ (800ec28 <tx_control+0xca0>)
 800ea8c:	4a67      	ldr	r2, [pc, #412]	@ (800ec2c <tx_control+0xca4>)
 800ea8e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800ea90:	4b57      	ldr	r3, [pc, #348]	@ (800ebf0 <tx_control+0xc68>)
 800ea92:	2214      	movs	r2, #20
 800ea94:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ea96:	4b66      	ldr	r3, [pc, #408]	@ (800ec30 <tx_control+0xca8>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800ea9c:	4b64      	ldr	r3, [pc, #400]	@ (800ec30 <tx_control+0xca8>)
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800eaa2:	4b64      	ldr	r3, [pc, #400]	@ (800ec34 <tx_control+0xcac>)
 800eaa4:	2255      	movs	r2, #85	@ 0x55
 800eaa6:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800eaa8:	4b4a      	ldr	r3, [pc, #296]	@ (800ebd4 <tx_control+0xc4c>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800eaae:	f001 fb12 	bl	80100d6 <tx_control+0x214e>
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800eab2:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800eab4:	4b47      	ldr	r3, [pc, #284]	@ (800ebd4 <tx_control+0xc4c>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	2b5b      	cmp	r3, #91	@ 0x5b
 800eaba:	d000      	beq.n	800eabe <tx_control+0xb36>
 800eabc:	e0c2      	b.n	800ec44 <tx_control+0xcbc>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eabe:	4b46      	ldr	r3, [pc, #280]	@ (800ebd8 <tx_control+0xc50>)
 800eac0:	22f0      	movs	r2, #240	@ 0xf0
 800eac2:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800eac4:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800eac6:	4b4a      	ldr	r3, [pc, #296]	@ (800ebf0 <tx_control+0xc68>)
 800eac8:	2204      	movs	r2, #4
 800eaca:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800eacc:	4b49      	ldr	r3, [pc, #292]	@ (800ebf4 <tx_control+0xc6c>)
 800eace:	227b      	movs	r2, #123	@ 0x7b
 800ead0:	5c9a      	ldrb	r2, [r3, r2]
 800ead2:	4b49      	ldr	r3, [pc, #292]	@ (800ebf8 <tx_control+0xc70>)
 800ead4:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ead6:	4b47      	ldr	r3, [pc, #284]	@ (800ebf4 <tx_control+0xc6c>)
 800ead8:	227c      	movs	r2, #124	@ 0x7c
 800eada:	5c9a      	ldrb	r2, [r3, r2]
 800eadc:	4b46      	ldr	r3, [pc, #280]	@ (800ebf8 <tx_control+0xc70>)
 800eade:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800eae0:	4b45      	ldr	r3, [pc, #276]	@ (800ebf8 <tx_control+0xc70>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800eae6:	4b44      	ldr	r3, [pc, #272]	@ (800ebf8 <tx_control+0xc70>)
 800eae8:	2200      	movs	r2, #0
 800eaea:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800eaec:	4b42      	ldr	r3, [pc, #264]	@ (800ebf8 <tx_control+0xc70>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800eaf2:	4b41      	ldr	r3, [pc, #260]	@ (800ebf8 <tx_control+0xc70>)
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800eaf8:	4b3f      	ldr	r3, [pc, #252]	@ (800ebf8 <tx_control+0xc70>)
 800eafa:	2207      	movs	r2, #7
 800eafc:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800eafe:	4b3c      	ldr	r3, [pc, #240]	@ (800ebf0 <tx_control+0xc68>)
 800eb00:	781a      	ldrb	r2, [r3, #0]
 800eb02:	4b3d      	ldr	r3, [pc, #244]	@ (800ebf8 <tx_control+0xc70>)
 800eb04:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800eb06:	4b4a      	ldr	r3, [pc, #296]	@ (800ec30 <tx_control+0xca8>)
 800eb08:	2201      	movs	r2, #1
 800eb0a:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800eb0c:	4b34      	ldr	r3, [pc, #208]	@ (800ebe0 <tx_control+0xc58>)
 800eb0e:	2208      	movs	r2, #8
 800eb10:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800eb12:	4a3a      	ldr	r2, [pc, #232]	@ (800ebfc <tx_control+0xc74>)
 800eb14:	4b38      	ldr	r3, [pc, #224]	@ (800ebf8 <tx_control+0xc70>)
 800eb16:	0011      	movs	r1, r2
 800eb18:	0018      	movs	r0, r3
 800eb1a:	f7f8 fa89 	bl	8007030 <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800eb1e:	4b46      	ldr	r3, [pc, #280]	@ (800ec38 <tx_control+0xcb0>)
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	0a1b      	lsrs	r3, r3, #8
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	4b34      	ldr	r3, [pc, #208]	@ (800ebfc <tx_control+0xc74>)
 800eb2a:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800eb2c:	4b42      	ldr	r3, [pc, #264]	@ (800ec38 <tx_control+0xcb0>)
 800eb2e:	881b      	ldrh	r3, [r3, #0]
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	4b32      	ldr	r3, [pc, #200]	@ (800ebfc <tx_control+0xc74>)
 800eb34:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800eb36:	4b41      	ldr	r3, [pc, #260]	@ (800ec3c <tx_control+0xcb4>)
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	0a1b      	lsrs	r3, r3, #8
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	4b2e      	ldr	r3, [pc, #184]	@ (800ebfc <tx_control+0xc74>)
 800eb42:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800eb44:	4b3d      	ldr	r3, [pc, #244]	@ (800ec3c <tx_control+0xcb4>)
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	4b2c      	ldr	r3, [pc, #176]	@ (800ebfc <tx_control+0xc74>)
 800eb4c:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800eb4e:	4b23      	ldr	r3, [pc, #140]	@ (800ebdc <tx_control+0xc54>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800eb54:	4b22      	ldr	r3, [pc, #136]	@ (800ebe0 <tx_control+0xc58>)
 800eb56:	2200      	movs	r2, #0
 800eb58:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800eb5a:	4b22      	ldr	r3, [pc, #136]	@ (800ebe4 <tx_control+0xc5c>)
 800eb5c:	220c      	movs	r2, #12
 800eb5e:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800eb60:	4b20      	ldr	r3, [pc, #128]	@ (800ebe4 <tx_control+0xc5c>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	001a      	movs	r2, r3
 800eb66:	4b25      	ldr	r3, [pc, #148]	@ (800ebfc <tx_control+0xc74>)
 800eb68:	0011      	movs	r1, r2
 800eb6a:	0018      	movs	r0, r3
 800eb6c:	f7f8 fa12 	bl	8006f94 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800eb70:	4b1a      	ldr	r3, [pc, #104]	@ (800ebdc <tx_control+0xc54>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	0e1b      	lsrs	r3, r3, #24
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	4b20      	ldr	r3, [pc, #128]	@ (800ebfc <tx_control+0xc74>)
 800eb7a:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800eb7c:	4b17      	ldr	r3, [pc, #92]	@ (800ebdc <tx_control+0xc54>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	0c1b      	lsrs	r3, r3, #16
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	4b1d      	ldr	r3, [pc, #116]	@ (800ebfc <tx_control+0xc74>)
 800eb86:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800eb88:	4b14      	ldr	r3, [pc, #80]	@ (800ebdc <tx_control+0xc54>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	0a1b      	lsrs	r3, r3, #8
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	4b1a      	ldr	r3, [pc, #104]	@ (800ebfc <tx_control+0xc74>)
 800eb92:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800eb94:	4b11      	ldr	r3, [pc, #68]	@ (800ebdc <tx_control+0xc54>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	4b18      	ldr	r3, [pc, #96]	@ (800ebfc <tx_control+0xc74>)
 800eb9c:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800eb9e:	4b20      	ldr	r3, [pc, #128]	@ (800ec20 <tx_control+0xc98>)
 800eba0:	4a16      	ldr	r2, [pc, #88]	@ (800ebfc <tx_control+0xc74>)
 800eba2:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800eba4:	4b1f      	ldr	r3, [pc, #124]	@ (800ec24 <tx_control+0xc9c>)
 800eba6:	4a15      	ldr	r2, [pc, #84]	@ (800ebfc <tx_control+0xc74>)
 800eba8:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800ebaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ec28 <tx_control+0xca0>)
 800ebac:	4a24      	ldr	r2, [pc, #144]	@ (800ec40 <tx_control+0xcb8>)
 800ebae:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800ebb0:	4b0f      	ldr	r3, [pc, #60]	@ (800ebf0 <tx_control+0xc68>)
 800ebb2:	2210      	movs	r2, #16
 800ebb4:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ebb6:	4b1e      	ldr	r3, [pc, #120]	@ (800ec30 <tx_control+0xca8>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800ebbc:	4b1c      	ldr	r3, [pc, #112]	@ (800ec30 <tx_control+0xca8>)
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ebc2:	4b1c      	ldr	r3, [pc, #112]	@ (800ec34 <tx_control+0xcac>)
 800ebc4:	2255      	movs	r2, #85	@ 0x55
 800ebc6:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800ebc8:	4b02      	ldr	r3, [pc, #8]	@ (800ebd4 <tx_control+0xc4c>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800ebce:	f001 fa82 	bl	80100d6 <tx_control+0x214e>
 800ebd2:	46c0      	nop			@ (mov r8, r8)
 800ebd4:	20001f18 	.word	0x20001f18
 800ebd8:	20001fd9 	.word	0x20001fd9
 800ebdc:	20001f28 	.word	0x20001f28
 800ebe0:	20000bb7 	.word	0x20000bb7
 800ebe4:	20000bb6 	.word	0x20000bb6
 800ebe8:	200009e8 	.word	0x200009e8
 800ebec:	200001ba 	.word	0x200001ba
 800ebf0:	20001f24 	.word	0x20001f24
 800ebf4:	200000b8 	.word	0x200000b8
 800ebf8:	20001ecc 	.word	0x20001ecc
 800ebfc:	2000209c 	.word	0x2000209c
 800ec00:	200001bb 	.word	0x200001bb
 800ec04:	200001bc 	.word	0x200001bc
 800ec08:	200001bd 	.word	0x200001bd
 800ec0c:	200001be 	.word	0x200001be
 800ec10:	200001bf 	.word	0x200001bf
 800ec14:	200001c0 	.word	0x200001c0
 800ec18:	200001c1 	.word	0x200001c1
 800ec1c:	200001c2 	.word	0x200001c2
 800ec20:	20001f08 	.word	0x20001f08
 800ec24:	20001f00 	.word	0x20001f00
 800ec28:	20001f04 	.word	0x20001f04
 800ec2c:	200020b0 	.word	0x200020b0
 800ec30:	20001f10 	.word	0x20001f10
 800ec34:	20001f0d 	.word	0x20001f0d
 800ec38:	20001ea4 	.word	0x20001ea4
 800ec3c:	20001ea6 	.word	0x20001ea6
 800ec40:	200020ac 	.word	0x200020ac
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800ec44:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800ec46:	4bd4      	ldr	r3, [pc, #848]	@ (800ef98 <tx_control+0x1010>)
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec4c:	d132      	bne.n	800ecb4 <tx_control+0xd2c>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ec4e:	4bd3      	ldr	r3, [pc, #844]	@ (800ef9c <tx_control+0x1014>)
 800ec50:	22f0      	movs	r2, #240	@ 0xf0
 800ec52:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800ec54:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ec56:	4bd2      	ldr	r3, [pc, #840]	@ (800efa0 <tx_control+0x1018>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800ec5c:	4bd1      	ldr	r3, [pc, #836]	@ (800efa4 <tx_control+0x101c>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800ec62:	4bd1      	ldr	r3, [pc, #836]	@ (800efa8 <tx_control+0x1020>)
 800ec64:	220b      	movs	r2, #11
 800ec66:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800ec68:	4bd0      	ldr	r3, [pc, #832]	@ (800efac <tx_control+0x1024>)
 800ec6a:	210b      	movs	r1, #11
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	f7f8 f991 	bl	8006f94 <buildChksumBloq>
			chksum_to_compare = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800ec76:	4bcd      	ldr	r3, [pc, #820]	@ (800efac <tx_control+0x1024>)
 800ec78:	7adb      	ldrb	r3, [r3, #11]
 800ec7a:	061b      	lsls	r3, r3, #24
 800ec7c:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800ec7e:	4bcb      	ldr	r3, [pc, #812]	@ (800efac <tx_control+0x1024>)
 800ec80:	7b1b      	ldrb	r3, [r3, #12]
 800ec82:	041b      	lsls	r3, r3, #16
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	18d3      	adds	r3, r2, r3
 800ec88:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800ec8a:	4bc8      	ldr	r3, [pc, #800]	@ (800efac <tx_control+0x1024>)
 800ec8c:	7b5b      	ldrb	r3, [r3, #13]
 800ec8e:	021b      	lsls	r3, r3, #8
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	18d3      	adds	r3, r2, r3
 800ec94:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800ec96:	4bc5      	ldr	r3, [pc, #788]	@ (800efac <tx_control+0x1024>)
 800ec98:	7b9b      	ldrb	r3, [r3, #14]
 800ec9a:	001a      	movs	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	189b      	adds	r3, r3, r2
 800eca0:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800eca2:	4bbf      	ldr	r3, [pc, #764]	@ (800efa0 <tx_control+0x1018>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d101      	bne.n	800ecb0 <tx_control+0xd28>
 800ecac:	f001 f910 	bl	800fed0 <tx_control+0x1f48>
				goto tx_timeBCD_error;
 800ecb0:	f001 f9f0 	bl	8010094 <tx_control+0x210c>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800ecb4:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800ecb6:	4bb8      	ldr	r3, [pc, #736]	@ (800ef98 <tx_control+0x1010>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b5f      	cmp	r3, #95	@ 0x5f
 800ecbc:	d142      	bne.n	800ed44 <tx_control+0xdbc>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ecbe:	4bb7      	ldr	r3, [pc, #732]	@ (800ef9c <tx_control+0x1014>)
 800ecc0:	22f0      	movs	r2, #240	@ 0xf0
 800ecc2:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800ecc4:	46c0      	nop			@ (mov r8, r8)
			//typeClock = 0;					// mov		typeClock,#0;				Reloj interno
			// ;mov		typeClock,#1;				Reloj con señal de CA
			//if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
			//	goto noCristal;
			//}
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800ecc6:	4bba      	ldr	r3, [pc, #744]	@ (800efb0 <tx_control+0x1028>)
 800ecc8:	2202      	movs	r2, #2
 800ecca:	701a      	strb	r2, [r3, #0]
//noCristal:

			// ldw		X,#typeClock;				/ inicio del bloque
			pointTx = &typeClock ;				// ldw		pointTx,X
 800eccc:	4bb9      	ldr	r3, [pc, #740]	@ (800efb4 <tx_control+0x102c>)
 800ecce:	4ab8      	ldr	r2, [pc, #736]	@ (800efb0 <tx_control+0x1028>)
 800ecd0:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800ecd2:	4bb9      	ldr	r3, [pc, #740]	@ (800efb8 <tx_control+0x1030>)
 800ecd4:	4ab6      	ldr	r2, [pc, #728]	@ (800efb0 <tx_control+0x1028>)
 800ecd6:	601a      	str	r2, [r3, #0]
			// ldw		X,#(typeClock + 1);				/ fin del bloque
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800ecd8:	4bb7      	ldr	r3, [pc, #732]	@ (800efb8 <tx_control+0x1030>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	4bb7      	ldr	r3, [pc, #732]	@ (800efbc <tx_control+0x1034>)
 800ece0:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800ece2:	4bb7      	ldr	r3, [pc, #732]	@ (800efc0 <tx_control+0x1038>)
 800ece4:	2201      	movs	r2, #1
 800ece6:	701a      	strb	r2, [r3, #0]

			//; Carga datos de Header
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800ece8:	4bb6      	ldr	r3, [pc, #728]	@ (800efc4 <tx_control+0x103c>)
 800ecea:	227b      	movs	r2, #123	@ 0x7b
 800ecec:	5c9a      	ldrb	r2, [r3, r2]
 800ecee:	4bb6      	ldr	r3, [pc, #728]	@ (800efc8 <tx_control+0x1040>)
 800ecf0:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ecf2:	4bb4      	ldr	r3, [pc, #720]	@ (800efc4 <tx_control+0x103c>)
 800ecf4:	227c      	movs	r2, #124	@ 0x7c
 800ecf6:	5c9a      	ldrb	r2, [r3, r2]
 800ecf8:	4bb3      	ldr	r3, [pc, #716]	@ (800efc8 <tx_control+0x1040>)
 800ecfa:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ecfc:	4bb2      	ldr	r3, [pc, #712]	@ (800efc8 <tx_control+0x1040>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ed02:	4bb1      	ldr	r3, [pc, #708]	@ (800efc8 <tx_control+0x1040>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ed08:	4baf      	ldr	r3, [pc, #700]	@ (800efc8 <tx_control+0x1040>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ed0e:	4bae      	ldr	r3, [pc, #696]	@ (800efc8 <tx_control+0x1040>)
 800ed10:	2201      	movs	r2, #1
 800ed12:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800ed14:	4bac      	ldr	r3, [pc, #688]	@ (800efc8 <tx_control+0x1040>)
 800ed16:	2209      	movs	r2, #9
 800ed18:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800ed1a:	4ba9      	ldr	r3, [pc, #676]	@ (800efc0 <tx_control+0x1038>)
 800ed1c:	781a      	ldrb	r2, [r3, #0]
 800ed1e:	4baa      	ldr	r3, [pc, #680]	@ (800efc8 <tx_control+0x1040>)
 800ed20:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800ed22:	4baa      	ldr	r3, [pc, #680]	@ (800efcc <tx_control+0x1044>)
 800ed24:	2201      	movs	r2, #1
 800ed26:	709a      	strb	r2, [r3, #2]

			//clrw	X
			//ldw		chksum_HW,X
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800ed28:	4b9d      	ldr	r3, [pc, #628]	@ (800efa0 <tx_control+0x1018>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800ed2e:	4ba7      	ldr	r3, [pc, #668]	@ (800efcc <tx_control+0x1044>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ed34:	4ba6      	ldr	r3, [pc, #664]	@ (800efd0 <tx_control+0x1048>)
 800ed36:	2255      	movs	r2, #85	@ 0x55
 800ed38:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800ed3a:	4b97      	ldr	r3, [pc, #604]	@ (800ef98 <tx_control+0x1010>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	701a      	strb	r2, [r3, #0]

fin_tx_infoReloj:
			goto end_tx_control;		//jp		end_tx_control
 800ed40:	f001 f9c9 	bl	80100d6 <tx_control+0x214e>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800ed44:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x62)//jrne	ask_tx_control_19
 800ed46:	4b94      	ldr	r3, [pc, #592]	@ (800ef98 <tx_control+0x1010>)
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	2b62      	cmp	r3, #98	@ 0x62
 800ed4c:	d10b      	bne.n	800ed66 <tx_control+0xdde>
			timeOutRst = 240; //mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ed4e:	4b93      	ldr	r3, [pc, #588]	@ (800ef9c <tx_control+0x1014>)
 800ed50:	22f0      	movs	r2, #240	@ 0xf0
 800ed52:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_datalogger;//jp		tx_wifi_datalogger
 800ed54:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_wifi_datalogger:

			flagsWIFI[f_timeLoggerSend] = 1;	//bset		flagsWIFI,#f_timeLoggerSend;
 800ed56:	4b9f      	ldr	r3, [pc, #636]	@ (800efd4 <tx_control+0x104c>)
 800ed58:	2201      	movs	r2, #1
 800ed5a:	705a      	strb	r2, [r3, #1]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800ed5c:	4b8e      	ldr	r3, [pc, #568]	@ (800ef98 <tx_control+0x1010>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800ed62:	f001 f9b8 	bl	80100d6 <tx_control+0x214e>
				goto ask_tx_control_19;
 800ed66:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x63)//jrne	ask_tx_control_20
 800ed68:	4b8b      	ldr	r3, [pc, #556]	@ (800ef98 <tx_control+0x1010>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	2b63      	cmp	r3, #99	@ 0x63
 800ed6e:	d10f      	bne.n	800ed90 <tx_control+0xe08>
			timeOutRst = 240;		//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ed70:	4b8a      	ldr	r3, [pc, #552]	@ (800ef9c <tx_control+0x1014>)
 800ed72:	22f0      	movs	r2, #240	@ 0xf0
 800ed74:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_eventlogger;//jp		tx_wifi_eventlogger
 800ed76:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
tx_wifi_eventlogger:
			flagsWIFI[f_eventLoggerSend] = 1;	//bset		flagsWIFI,#f_eventLoggerSend;
 800ed78:	4b96      	ldr	r3, [pc, #600]	@ (800efd4 <tx_control+0x104c>)
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	709a      	strb	r2, [r3, #2]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800ed7e:	4b86      	ldr	r3, [pc, #536]	@ (800ef98 <tx_control+0x1010>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800ed84:	f001 f9a7 	bl	80100d6 <tx_control+0x214e>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800ed88:	46c0      	nop			@ (mov r8, r8)
 800ed8a:	e002      	b.n	800ed92 <tx_control+0xe0a>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800ed8c:	46c0      	nop			@ (mov r8, r8)
 800ed8e:	e000      	b.n	800ed92 <tx_control+0xe0a>
				goto ask_tx_control_20;
 800ed90:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800ed92:	46c0      	nop			@ (mov r8, r8)

		//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
		//	goto tx_wifi_OK;
		//}
		//; logger, telemetria y eventos por servidor solo están permitidos con comunicación WiFi seleccionada
		if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,tx_wifi_01
 800ed94:	4b90      	ldr	r3, [pc, #576]	@ (800efd8 <tx_control+0x1050>)
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <tx_control+0xe18>
 800ed9c:	f002 fa12 	bl	80111c4 <tx_control+0x323c>
			goto tx_wifi_01;
 800eda0:	f001 f9bf 	bl	8010122 <tx_control+0x219a>
	     	point_Y[i] = point_X[i];
 800eda4:	203c      	movs	r0, #60	@ 0x3c
 800eda6:	183b      	adds	r3, r7, r0
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edac:	18d2      	adds	r2, r2, r3
 800edae:	183b      	adds	r3, r7, r0
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800edb4:	18cb      	adds	r3, r1, r3
 800edb6:	7812      	ldrb	r2, [r2, #0]
 800edb8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800edba:	183b      	adds	r3, r7, r0
 800edbc:	781a      	ldrb	r2, [r3, #0]
 800edbe:	183b      	adds	r3, r7, r0
 800edc0:	3201      	adds	r2, #1
 800edc2:	701a      	strb	r2, [r3, #0]
 800edc4:	233c      	movs	r3, #60	@ 0x3c
 800edc6:	18fb      	adds	r3, r7, r3
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2b14      	cmp	r3, #20
 800edcc:	d9ea      	bls.n	800eda4 <tx_control+0xe1c>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800edce:	4b74      	ldr	r3, [pc, #464]	@ (800efa0 <tx_control+0x1018>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800edd4:	4b81      	ldr	r3, [pc, #516]	@ (800efdc <tx_control+0x1054>)
 800edd6:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, size_handshake);
 800edd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edda:	2115      	movs	r1, #21
 800eddc:	0018      	movs	r0, r3
 800edde:	f7f8 f8d9 	bl	8006f94 <buildChksumBloq>
		asm ("nop");
 800ede2:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800ede4:	4b6e      	ldr	r3, [pc, #440]	@ (800efa0 <tx_control+0x1018>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	0e1b      	lsrs	r3, r3, #24
 800edea:	b2da      	uxtb	r2, r3
 800edec:	4b7b      	ldr	r3, [pc, #492]	@ (800efdc <tx_control+0x1054>)
 800edee:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800edf0:	4b6b      	ldr	r3, [pc, #428]	@ (800efa0 <tx_control+0x1018>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	0c1b      	lsrs	r3, r3, #16
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	4b78      	ldr	r3, [pc, #480]	@ (800efdc <tx_control+0x1054>)
 800edfa:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800edfc:	4b68      	ldr	r3, [pc, #416]	@ (800efa0 <tx_control+0x1018>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	0a1b      	lsrs	r3, r3, #8
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	4b75      	ldr	r3, [pc, #468]	@ (800efdc <tx_control+0x1054>)
 800ee06:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800ee08:	4b65      	ldr	r3, [pc, #404]	@ (800efa0 <tx_control+0x1018>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	4b73      	ldr	r3, [pc, #460]	@ (800efdc <tx_control+0x1054>)
 800ee10:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800ee12:	4b68      	ldr	r3, [pc, #416]	@ (800efb4 <tx_control+0x102c>)
 800ee14:	4a71      	ldr	r2, [pc, #452]	@ (800efdc <tx_control+0x1054>)
 800ee16:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800ee18:	4b67      	ldr	r3, [pc, #412]	@ (800efb8 <tx_control+0x1030>)
 800ee1a:	4a70      	ldr	r2, [pc, #448]	@ (800efdc <tx_control+0x1054>)
 800ee1c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800ee1e:	4b67      	ldr	r3, [pc, #412]	@ (800efbc <tx_control+0x1034>)
 800ee20:	4a6f      	ldr	r2, [pc, #444]	@ (800efe0 <tx_control+0x1058>)
 800ee22:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800ee24:	4b66      	ldr	r3, [pc, #408]	@ (800efc0 <tx_control+0x1038>)
 800ee26:	2219      	movs	r2, #25
 800ee28:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800ee2a:	4b68      	ldr	r3, [pc, #416]	@ (800efcc <tx_control+0x1044>)
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800ee30:	4b66      	ldr	r3, [pc, #408]	@ (800efcc <tx_control+0x1044>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ee36:	4b5a      	ldr	r3, [pc, #360]	@ (800efa0 <tx_control+0x1018>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800ee3c:	4b63      	ldr	r3, [pc, #396]	@ (800efcc <tx_control+0x1044>)
 800ee3e:	2201      	movs	r2, #1
 800ee40:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800ee42:	4b63      	ldr	r3, [pc, #396]	@ (800efd0 <tx_control+0x1048>)
 800ee44:	2255      	movs	r2, #85	@ 0x55
 800ee46:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800ee48:	4b53      	ldr	r3, [pc, #332]	@ (800ef98 <tx_control+0x1010>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800ee4e:	f001 f942 	bl	80100d6 <tx_control+0x214e>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800ee52:	4b5e      	ldr	r3, [pc, #376]	@ (800efcc <tx_control+0x1044>)
 800ee54:	2201      	movs	r2, #1
 800ee56:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800ee58:	4b59      	ldr	r3, [pc, #356]	@ (800efc0 <tx_control+0x1038>)
 800ee5a:	2208      	movs	r2, #8
 800ee5c:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800ee5e:	4b61      	ldr	r3, [pc, #388]	@ (800efe4 <tx_control+0x105c>)
 800ee60:	2201      	movs	r2, #1
 800ee62:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800ee64:	4b60      	ldr	r3, [pc, #384]	@ (800efe8 <tx_control+0x1060>)
 800ee66:	4a61      	ldr	r2, [pc, #388]	@ (800efec <tx_control+0x1064>)
 800ee68:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800ee6a:	4b61      	ldr	r3, [pc, #388]	@ (800eff0 <tx_control+0x1068>)
 800ee6c:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;		//incw X ******************************************
 800ee6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee70:	3301      	adds	r3, #1
 800ee72:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800ee74:	4b5f      	ldr	r3, [pc, #380]	@ (800eff4 <tx_control+0x106c>)
 800ee76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee78:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800ee7a:	4b5f      	ldr	r3, [pc, #380]	@ (800eff8 <tx_control+0x1070>)
 800ee7c:	2260      	movs	r2, #96	@ 0x60
 800ee7e:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800ee80:	4b5e      	ldr	r3, [pc, #376]	@ (800effc <tx_control+0x1074>)
 800ee82:	881a      	ldrh	r2, [r3, #0]
 800ee84:	4b5e      	ldr	r3, [pc, #376]	@ (800f000 <tx_control+0x1078>)
 800ee86:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800ee88:	4b5e      	ldr	r3, [pc, #376]	@ (800f004 <tx_control+0x107c>)
 800ee8a:	4a5f      	ldr	r2, [pc, #380]	@ (800f008 <tx_control+0x1080>)
 800ee8c:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 800ee8e:	4b5c      	ldr	r3, [pc, #368]	@ (800f000 <tx_control+0x1078>)
 800ee90:	881a      	ldrh	r2, [r3, #0]
 800ee92:	4b5e      	ldr	r3, [pc, #376]	@ (800f00c <tx_control+0x1084>)
 800ee94:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800ee96:	f002 f9cb 	bl	8011230 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800ee9a:	4b4a      	ldr	r3, [pc, #296]	@ (800efc4 <tx_control+0x103c>)
 800ee9c:	227b      	movs	r2, #123	@ 0x7b
 800ee9e:	5c9a      	ldrb	r2, [r3, r2]
 800eea0:	4b49      	ldr	r3, [pc, #292]	@ (800efc8 <tx_control+0x1040>)
 800eea2:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800eea4:	4b47      	ldr	r3, [pc, #284]	@ (800efc4 <tx_control+0x103c>)
 800eea6:	227c      	movs	r2, #124	@ 0x7c
 800eea8:	5c9a      	ldrb	r2, [r3, r2]
 800eeaa:	4b47      	ldr	r3, [pc, #284]	@ (800efc8 <tx_control+0x1040>)
 800eeac:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800eeae:	4b46      	ldr	r3, [pc, #280]	@ (800efc8 <tx_control+0x1040>)
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800eeb4:	4b44      	ldr	r3, [pc, #272]	@ (800efc8 <tx_control+0x1040>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800eeba:	4b43      	ldr	r3, [pc, #268]	@ (800efc8 <tx_control+0x1040>)
 800eebc:	2205      	movs	r2, #5
 800eebe:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800eec0:	4b41      	ldr	r3, [pc, #260]	@ (800efc8 <tx_control+0x1040>)
 800eec2:	2240      	movs	r2, #64	@ 0x40
 800eec4:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800eec6:	4b40      	ldr	r3, [pc, #256]	@ (800efc8 <tx_control+0x1040>)
 800eec8:	2201      	movs	r2, #1
 800eeca:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800eecc:	4b3e      	ldr	r3, [pc, #248]	@ (800efc8 <tx_control+0x1040>)
 800eece:	2209      	movs	r2, #9
 800eed0:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800eed2:	4b3e      	ldr	r3, [pc, #248]	@ (800efcc <tx_control+0x1044>)
 800eed4:	2201      	movs	r2, #1
 800eed6:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800eed8:	4b31      	ldr	r3, [pc, #196]	@ (800efa0 <tx_control+0x1018>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800eede:	4b3b      	ldr	r3, [pc, #236]	@ (800efcc <tx_control+0x1044>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800eee4:	4b3a      	ldr	r3, [pc, #232]	@ (800efd0 <tx_control+0x1048>)
 800eee6:	2255      	movs	r2, #85	@ 0x55
 800eee8:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800eeea:	4b2b      	ldr	r3, [pc, #172]	@ (800ef98 <tx_control+0x1010>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800eef0:	f001 f8f1 	bl	80100d6 <tx_control+0x214e>
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800eef4:	4b35      	ldr	r3, [pc, #212]	@ (800efcc <tx_control+0x1044>)
 800eef6:	2201      	movs	r2, #1
 800eef8:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800eefa:	4b31      	ldr	r3, [pc, #196]	@ (800efc0 <tx_control+0x1038>)
 800eefc:	2208      	movs	r2, #8
 800eefe:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800ef00:	4b38      	ldr	r3, [pc, #224]	@ (800efe4 <tx_control+0x105c>)
 800ef02:	2201      	movs	r2, #1
 800ef04:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800ef06:	4b38      	ldr	r3, [pc, #224]	@ (800efe8 <tx_control+0x1060>)
 800ef08:	4a41      	ldr	r2, [pc, #260]	@ (800f010 <tx_control+0x1088>)
 800ef0a:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800ef0c:	4b41      	ldr	r3, [pc, #260]	@ (800f014 <tx_control+0x108c>)
 800ef0e:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;						//incw	X ******************
 800ef10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef12:	3301      	adds	r3, #1
 800ef14:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800ef16:	4b37      	ldr	r3, [pc, #220]	@ (800eff4 <tx_control+0x106c>)
 800ef18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef1a:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800ef1c:	4b36      	ldr	r3, [pc, #216]	@ (800eff8 <tx_control+0x1070>)
 800ef1e:	22a0      	movs	r2, #160	@ 0xa0
 800ef20:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800ef22:	4b3d      	ldr	r3, [pc, #244]	@ (800f018 <tx_control+0x1090>)
 800ef24:	881a      	ldrh	r2, [r3, #0]
 800ef26:	4b36      	ldr	r3, [pc, #216]	@ (800f000 <tx_control+0x1078>)
 800ef28:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800ef2a:	4b36      	ldr	r3, [pc, #216]	@ (800f004 <tx_control+0x107c>)
 800ef2c:	4a3b      	ldr	r2, [pc, #236]	@ (800f01c <tx_control+0x1094>)
 800ef2e:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 800ef30:	4b33      	ldr	r3, [pc, #204]	@ (800f000 <tx_control+0x1078>)
 800ef32:	881a      	ldrh	r2, [r3, #0]
 800ef34:	4b3a      	ldr	r3, [pc, #232]	@ (800f020 <tx_control+0x1098>)
 800ef36:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800ef38:	f002 f97a 	bl	8011230 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800ef3c:	4b21      	ldr	r3, [pc, #132]	@ (800efc4 <tx_control+0x103c>)
 800ef3e:	227b      	movs	r2, #123	@ 0x7b
 800ef40:	5c9a      	ldrb	r2, [r3, r2]
 800ef42:	4b21      	ldr	r3, [pc, #132]	@ (800efc8 <tx_control+0x1040>)
 800ef44:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800ef46:	4b1f      	ldr	r3, [pc, #124]	@ (800efc4 <tx_control+0x103c>)
 800ef48:	227c      	movs	r2, #124	@ 0x7c
 800ef4a:	5c9a      	ldrb	r2, [r3, r2]
 800ef4c:	4b1e      	ldr	r3, [pc, #120]	@ (800efc8 <tx_control+0x1040>)
 800ef4e:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ef50:	4b1d      	ldr	r3, [pc, #116]	@ (800efc8 <tx_control+0x1040>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800ef56:	4b1c      	ldr	r3, [pc, #112]	@ (800efc8 <tx_control+0x1040>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ef5c:	4b1a      	ldr	r3, [pc, #104]	@ (800efc8 <tx_control+0x1040>)
 800ef5e:	2205      	movs	r2, #5
 800ef60:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800ef62:	4b19      	ldr	r3, [pc, #100]	@ (800efc8 <tx_control+0x1040>)
 800ef64:	22a0      	movs	r2, #160	@ 0xa0
 800ef66:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800ef68:	4b17      	ldr	r3, [pc, #92]	@ (800efc8 <tx_control+0x1040>)
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800ef6e:	4b16      	ldr	r3, [pc, #88]	@ (800efc8 <tx_control+0x1040>)
 800ef70:	220e      	movs	r2, #14
 800ef72:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800ef74:	4b15      	ldr	r3, [pc, #84]	@ (800efcc <tx_control+0x1044>)
 800ef76:	2201      	movs	r2, #1
 800ef78:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800ef7a:	4b09      	ldr	r3, [pc, #36]	@ (800efa0 <tx_control+0x1018>)
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800ef80:	4b12      	ldr	r3, [pc, #72]	@ (800efcc <tx_control+0x1044>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800ef86:	4b12      	ldr	r3, [pc, #72]	@ (800efd0 <tx_control+0x1048>)
 800ef88:	2255      	movs	r2, #85	@ 0x55
 800ef8a:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800ef8c:	4b02      	ldr	r3, [pc, #8]	@ (800ef98 <tx_control+0x1010>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800ef92:	f001 f8a0 	bl	80100d6 <tx_control+0x214e>
 800ef96:	46c0      	nop			@ (mov r8, r8)
 800ef98:	20001f18 	.word	0x20001f18
 800ef9c:	20001fd9 	.word	0x20001fd9
 800efa0:	20001f28 	.word	0x20001f28
 800efa4:	20000bb7 	.word	0x20000bb7
 800efa8:	20000bb6 	.word	0x20000bb6
 800efac:	200009e8 	.word	0x200009e8
 800efb0:	200021a5 	.word	0x200021a5
 800efb4:	20001f08 	.word	0x20001f08
 800efb8:	20001f00 	.word	0x20001f00
 800efbc:	20001f04 	.word	0x20001f04
 800efc0:	20001f24 	.word	0x20001f24
 800efc4:	200000b8 	.word	0x200000b8
 800efc8:	20001ecc 	.word	0x20001ecc
 800efcc:	20001f10 	.word	0x20001f10
 800efd0:	20001f0d 	.word	0x20001f0d
 800efd4:	20002044 	.word	0x20002044
 800efd8:	200021dc 	.word	0x200021dc
 800efdc:	2000209c 	.word	0x2000209c
 800efe0:	200020b5 	.word	0x200020b5
 800efe4:	20001ef8 	.word	0x20001ef8
 800efe8:	20001f1c 	.word	0x20001f1c
 800efec:	0803c000 	.word	0x0803c000
 800eff0:	0803efff 	.word	0x0803efff
 800eff4:	20001f20 	.word	0x20001f20
 800eff8:	20000e89 	.word	0x20000e89
 800effc:	2000212e 	.word	0x2000212e
 800f000:	20002132 	.word	0x20002132
 800f004:	20002134 	.word	0x20002134
 800f008:	0803f810 	.word	0x0803f810
 800f00c:	20000d72 	.word	0x20000d72
 800f010:	08037000 	.word	0x08037000
 800f014:	0803bfff 	.word	0x0803bfff
 800f018:	20002130 	.word	0x20002130
 800f01c:	0803f812 	.word	0x0803f812
 800f020:	20000d74 	.word	0x20000d74
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800f024:	4bd1      	ldr	r3, [pc, #836]	@ (800f36c <tx_control+0x13e4>)
 800f026:	79db      	ldrb	r3, [r3, #7]
 800f028:	2201      	movs	r2, #1
 800f02a:	4313      	orrs	r3, r2
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	4bcf      	ldr	r3, [pc, #828]	@ (800f36c <tx_control+0x13e4>)
 800f030:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_dh])												// deshielo activo ?
 800f032:	4bcf      	ldr	r3, [pc, #828]	@ (800f370 <tx_control+0x13e8>)
 800f034:	785b      	ldrb	r3, [r3, #1]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d006      	beq.n	800f048 <tx_control+0x10c0>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800f03a:	4bcc      	ldr	r3, [pc, #816]	@ (800f36c <tx_control+0x13e4>)
 800f03c:	79db      	ldrb	r3, [r3, #7]
 800f03e:	2202      	movs	r2, #2
 800f040:	4313      	orrs	r3, r2
 800f042:	b2da      	uxtb	r2, r3
 800f044:	4bc9      	ldr	r3, [pc, #804]	@ (800f36c <tx_control+0x13e4>)
 800f046:	71da      	strb	r2, [r3, #7]
		if (flagsC[0])													// puerta abierta ?
 800f048:	4bca      	ldr	r3, [pc, #808]	@ (800f374 <tx_control+0x13ec>)
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d006      	beq.n	800f05e <tx_control+0x10d6>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800f050:	4bc6      	ldr	r3, [pc, #792]	@ (800f36c <tx_control+0x13e4>)
 800f052:	79db      	ldrb	r3, [r3, #7]
 800f054:	2204      	movs	r2, #4
 800f056:	4313      	orrs	r3, r2
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	4bc4      	ldr	r3, [pc, #784]	@ (800f36c <tx_control+0x13e4>)
 800f05c:	71da      	strb	r2, [r3, #7]
		if (flagsC[1])													// Modo ahorro 1 activo ?
 800f05e:	4bc5      	ldr	r3, [pc, #788]	@ (800f374 <tx_control+0x13ec>)
 800f060:	785b      	ldrb	r3, [r3, #1]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d006      	beq.n	800f074 <tx_control+0x10ec>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800f066:	4bc1      	ldr	r3, [pc, #772]	@ (800f36c <tx_control+0x13e4>)
 800f068:	79db      	ldrb	r3, [r3, #7]
 800f06a:	2208      	movs	r2, #8
 800f06c:	4313      	orrs	r3, r2
 800f06e:	b2da      	uxtb	r2, r3
 800f070:	4bbe      	ldr	r3, [pc, #760]	@ (800f36c <tx_control+0x13e4>)
 800f072:	71da      	strb	r2, [r3, #7]
		if (flagsC[2])													// Modo ahorro 1 activo ?
 800f074:	4bbf      	ldr	r3, [pc, #764]	@ (800f374 <tx_control+0x13ec>)
 800f076:	789b      	ldrb	r3, [r3, #2]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d006      	beq.n	800f08a <tx_control+0x1102>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800f07c:	4bbb      	ldr	r3, [pc, #748]	@ (800f36c <tx_control+0x13e4>)
 800f07e:	79db      	ldrb	r3, [r3, #7]
 800f080:	2210      	movs	r2, #16
 800f082:	4313      	orrs	r3, r2
 800f084:	b2da      	uxtb	r2, r3
 800f086:	4bb9      	ldr	r3, [pc, #740]	@ (800f36c <tx_control+0x13e4>)
 800f088:	71da      	strb	r2, [r3, #7]
		if (flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800f08a:	4bbb      	ldr	r3, [pc, #748]	@ (800f378 <tx_control+0x13f0>)
 800f08c:	78db      	ldrb	r3, [r3, #3]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d006      	beq.n	800f0a0 <tx_control+0x1118>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800f092:	4bb6      	ldr	r3, [pc, #728]	@ (800f36c <tx_control+0x13e4>)
 800f094:	79db      	ldrb	r3, [r3, #7]
 800f096:	2220      	movs	r2, #32
 800f098:	4313      	orrs	r3, r2
 800f09a:	b2da      	uxtb	r2, r3
 800f09c:	4bb3      	ldr	r3, [pc, #716]	@ (800f36c <tx_control+0x13e4>)
 800f09e:	71da      	strb	r2, [r3, #7]
		if (GPIOR1 [f_fan])												// ventilador activo ?
 800f0a0:	4bb6      	ldr	r3, [pc, #728]	@ (800f37c <tx_control+0x13f4>)
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d006      	beq.n	800f0b6 <tx_control+0x112e>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800f0a8:	4bb0      	ldr	r3, [pc, #704]	@ (800f36c <tx_control+0x13e4>)
 800f0aa:	79db      	ldrb	r3, [r3, #7]
 800f0ac:	2240      	movs	r2, #64	@ 0x40
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	b2da      	uxtb	r2, r3
 800f0b2:	4bae      	ldr	r3, [pc, #696]	@ (800f36c <tx_control+0x13e4>)
 800f0b4:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800f0b6:	4bae      	ldr	r3, [pc, #696]	@ (800f370 <tx_control+0x13e8>)
 800f0b8:	789b      	ldrb	r3, [r3, #2]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d007      	beq.n	800f0ce <tx_control+0x1146>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800f0be:	4bab      	ldr	r3, [pc, #684]	@ (800f36c <tx_control+0x13e4>)
 800f0c0:	79db      	ldrb	r3, [r3, #7]
 800f0c2:	2280      	movs	r2, #128	@ 0x80
 800f0c4:	4252      	negs	r2, r2
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	4ba8      	ldr	r3, [pc, #672]	@ (800f36c <tx_control+0x13e4>)
 800f0cc:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800f0ce:	4ba7      	ldr	r3, [pc, #668]	@ (800f36c <tx_control+0x13e4>)
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0d8:	e011      	b.n	800f0fe <tx_control+0x1176>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800f0da:	4ba4      	ldr	r3, [pc, #656]	@ (800f36c <tx_control+0x13e4>)
 800f0dc:	7a1a      	ldrb	r2, [r3, #8]
 800f0de:	49a8      	ldr	r1, [pc, #672]	@ (800f380 <tx_control+0x13f8>)
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e2:	18cb      	adds	r3, r1, r3
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	0019      	movs	r1, r3
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ea:	4099      	lsls	r1, r3
 800f0ec:	000b      	movs	r3, r1
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	4b9d      	ldr	r3, [pc, #628]	@ (800f36c <tx_control+0x13e4>)
 800f0f6:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f100:	2b07      	cmp	r3, #7
 800f102:	ddea      	ble.n	800f0da <tx_control+0x1152>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800f104:	4b99      	ldr	r3, [pc, #612]	@ (800f36c <tx_control+0x13e4>)
 800f106:	7a1b      	ldrb	r3, [r3, #8]
 800f108:	2201      	movs	r2, #1
 800f10a:	4393      	bics	r3, r2
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	4b97      	ldr	r3, [pc, #604]	@ (800f36c <tx_control+0x13e4>)
 800f110:	721a      	strb	r2, [r3, #8]
		for(uint8_t k=0; k<8; k++){
 800f112:	2337      	movs	r3, #55	@ 0x37
 800f114:	18fb      	adds	r3, r7, r3
 800f116:	2200      	movs	r2, #0
 800f118:	701a      	strb	r2, [r3, #0]
 800f11a:	e017      	b.n	800f14c <tx_control+0x11c4>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800f11c:	4b93      	ldr	r3, [pc, #588]	@ (800f36c <tx_control+0x13e4>)
 800f11e:	7a5b      	ldrb	r3, [r3, #9]
 800f120:	b25a      	sxtb	r2, r3
 800f122:	2037      	movs	r0, #55	@ 0x37
 800f124:	183b      	adds	r3, r7, r0
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	4996      	ldr	r1, [pc, #600]	@ (800f384 <tx_control+0x13fc>)
 800f12a:	5ccb      	ldrb	r3, [r1, r3]
 800f12c:	0019      	movs	r1, r3
 800f12e:	183b      	adds	r3, r7, r0
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	4099      	lsls	r1, r3
 800f134:	000b      	movs	r3, r1
 800f136:	b25b      	sxtb	r3, r3
 800f138:	4313      	orrs	r3, r2
 800f13a:	b25b      	sxtb	r3, r3
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	4b8b      	ldr	r3, [pc, #556]	@ (800f36c <tx_control+0x13e4>)
 800f140:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800f142:	183b      	adds	r3, r7, r0
 800f144:	781a      	ldrb	r2, [r3, #0]
 800f146:	183b      	adds	r3, r7, r0
 800f148:	3201      	adds	r2, #1
 800f14a:	701a      	strb	r2, [r3, #0]
 800f14c:	2337      	movs	r3, #55	@ 0x37
 800f14e:	18fb      	adds	r3, r7, r3
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	2b07      	cmp	r3, #7
 800f154:	d9e2      	bls.n	800f11c <tx_control+0x1194>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800f156:	4b8c      	ldr	r3, [pc, #560]	@ (800f388 <tx_control+0x1400>)
 800f158:	220a      	movs	r2, #10
 800f15a:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f15c:	4b8b      	ldr	r3, [pc, #556]	@ (800f38c <tx_control+0x1404>)
 800f15e:	227b      	movs	r2, #123	@ 0x7b
 800f160:	5c9a      	ldrb	r2, [r3, r2]
 800f162:	4b8b      	ldr	r3, [pc, #556]	@ (800f390 <tx_control+0x1408>)
 800f164:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800f166:	4b89      	ldr	r3, [pc, #548]	@ (800f38c <tx_control+0x1404>)
 800f168:	227c      	movs	r2, #124	@ 0x7c
 800f16a:	5c9a      	ldrb	r2, [r3, r2]
 800f16c:	4b88      	ldr	r3, [pc, #544]	@ (800f390 <tx_control+0x1408>)
 800f16e:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800f170:	4b87      	ldr	r3, [pc, #540]	@ (800f390 <tx_control+0x1408>)
 800f172:	2200      	movs	r2, #0
 800f174:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800f176:	4b86      	ldr	r3, [pc, #536]	@ (800f390 <tx_control+0x1408>)
 800f178:	2200      	movs	r2, #0
 800f17a:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800f17c:	4b84      	ldr	r3, [pc, #528]	@ (800f390 <tx_control+0x1408>)
 800f17e:	2200      	movs	r2, #0
 800f180:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800f182:	4b83      	ldr	r3, [pc, #524]	@ (800f390 <tx_control+0x1408>)
 800f184:	2201      	movs	r2, #1
 800f186:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800f188:	4b81      	ldr	r3, [pc, #516]	@ (800f390 <tx_control+0x1408>)
 800f18a:	2203      	movs	r2, #3
 800f18c:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800f18e:	4b7e      	ldr	r3, [pc, #504]	@ (800f388 <tx_control+0x1400>)
 800f190:	781a      	ldrb	r2, [r3, #0]
 800f192:	4b7f      	ldr	r3, [pc, #508]	@ (800f390 <tx_control+0x1408>)
 800f194:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800f196:	4b7f      	ldr	r3, [pc, #508]	@ (800f394 <tx_control+0x140c>)
 800f198:	2201      	movs	r2, #1
 800f19a:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800f19c:	4b7c      	ldr	r3, [pc, #496]	@ (800f390 <tx_control+0x1408>)
 800f19e:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800f1a0:	4b7d      	ldr	r3, [pc, #500]	@ (800f398 <tx_control+0x1410>)
 800f1a2:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800f1a4:	2336      	movs	r3, #54	@ 0x36
 800f1a6:	18fb      	adds	r3, r7, r3
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	701a      	strb	r2, [r3, #0]
 800f1ac:	e00f      	b.n	800f1ce <tx_control+0x1246>
			point_Y[i] = point_X[i];
 800f1ae:	2036      	movs	r0, #54	@ 0x36
 800f1b0:	183b      	adds	r3, r7, r0
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1b6:	18d2      	adds	r2, r2, r3
 800f1b8:	183b      	adds	r3, r7, r0
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f1be:	18cb      	adds	r3, r1, r3
 800f1c0:	7812      	ldrb	r2, [r2, #0]
 800f1c2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f1c4:	183b      	adds	r3, r7, r0
 800f1c6:	781a      	ldrb	r2, [r3, #0]
 800f1c8:	183b      	adds	r3, r7, r0
 800f1ca:	3201      	adds	r2, #1
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	2336      	movs	r3, #54	@ 0x36
 800f1d0:	18fb      	adds	r3, r7, r3
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b07      	cmp	r3, #7
 800f1d6:	d9ea      	bls.n	800f1ae <tx_control+0x1226>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800f1d8:	4b64      	ldr	r3, [pc, #400]	@ (800f36c <tx_control+0x13e4>)
 800f1da:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[8];	 //
 800f1dc:	4b6f      	ldr	r3, [pc, #444]	@ (800f39c <tx_control+0x1414>)
 800f1de:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 10 ; i++ )
 800f1e0:	2335      	movs	r3, #53	@ 0x35
 800f1e2:	18fb      	adds	r3, r7, r3
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	701a      	strb	r2, [r3, #0]
 800f1e8:	e00f      	b.n	800f20a <tx_control+0x1282>
			point_Y[i] = point_X[i];
 800f1ea:	2035      	movs	r0, #53	@ 0x35
 800f1ec:	183b      	adds	r3, r7, r0
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1f2:	18d2      	adds	r2, r2, r3
 800f1f4:	183b      	adds	r3, r7, r0
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f1fa:	18cb      	adds	r3, r1, r3
 800f1fc:	7812      	ldrb	r2, [r2, #0]
 800f1fe:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800f200:	183b      	adds	r3, r7, r0
 800f202:	781a      	ldrb	r2, [r3, #0]
 800f204:	183b      	adds	r3, r7, r0
 800f206:	3201      	adds	r2, #1
 800f208:	701a      	strb	r2, [r3, #0]
 800f20a:	2335      	movs	r3, #53	@ 0x35
 800f20c:	18fb      	adds	r3, r7, r3
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b09      	cmp	r3, #9
 800f212:	d9ea      	bls.n	800f1ea <tx_control+0x1262>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f214:	4b62      	ldr	r3, [pc, #392]	@ (800f3a0 <tx_control+0x1418>)
 800f216:	2200      	movs	r2, #0
 800f218:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f21a:	4b5f      	ldr	r3, [pc, #380]	@ (800f398 <tx_control+0x1410>)
 800f21c:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800f21e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f220:	2112      	movs	r1, #18
 800f222:	0018      	movs	r0, r3
 800f224:	f7f7 feb6 	bl	8006f94 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f228:	4b5d      	ldr	r3, [pc, #372]	@ (800f3a0 <tx_control+0x1418>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	0e1b      	lsrs	r3, r3, #24
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	4b59      	ldr	r3, [pc, #356]	@ (800f398 <tx_control+0x1410>)
 800f232:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f234:	4b5a      	ldr	r3, [pc, #360]	@ (800f3a0 <tx_control+0x1418>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	0c1b      	lsrs	r3, r3, #16
 800f23a:	b2da      	uxtb	r2, r3
 800f23c:	4b56      	ldr	r3, [pc, #344]	@ (800f398 <tx_control+0x1410>)
 800f23e:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f240:	4b57      	ldr	r3, [pc, #348]	@ (800f3a0 <tx_control+0x1418>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	0a1b      	lsrs	r3, r3, #8
 800f246:	b2da      	uxtb	r2, r3
 800f248:	4b53      	ldr	r3, [pc, #332]	@ (800f398 <tx_control+0x1410>)
 800f24a:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f24c:	4b54      	ldr	r3, [pc, #336]	@ (800f3a0 <tx_control+0x1418>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	b2da      	uxtb	r2, r3
 800f252:	4b51      	ldr	r3, [pc, #324]	@ (800f398 <tx_control+0x1410>)
 800f254:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800f256:	4b53      	ldr	r3, [pc, #332]	@ (800f3a4 <tx_control+0x141c>)
 800f258:	4a4f      	ldr	r2, [pc, #316]	@ (800f398 <tx_control+0x1410>)
 800f25a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f25c:	4b52      	ldr	r3, [pc, #328]	@ (800f3a8 <tx_control+0x1420>)
 800f25e:	4a4e      	ldr	r2, [pc, #312]	@ (800f398 <tx_control+0x1410>)
 800f260:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800f262:	4b52      	ldr	r3, [pc, #328]	@ (800f3ac <tx_control+0x1424>)
 800f264:	4a52      	ldr	r2, [pc, #328]	@ (800f3b0 <tx_control+0x1428>)
 800f266:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f268:	4b47      	ldr	r3, [pc, #284]	@ (800f388 <tx_control+0x1400>)
 800f26a:	2216      	movs	r2, #22
 800f26c:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800f26e:	4b49      	ldr	r3, [pc, #292]	@ (800f394 <tx_control+0x140c>)
 800f270:	2200      	movs	r2, #0
 800f272:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800f274:	4b47      	ldr	r3, [pc, #284]	@ (800f394 <tx_control+0x140c>)
 800f276:	2201      	movs	r2, #1
 800f278:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f27a:	4b4e      	ldr	r3, [pc, #312]	@ (800f3b4 <tx_control+0x142c>)
 800f27c:	2255      	movs	r2, #85	@ 0x55
 800f27e:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f280:	4b4d      	ldr	r3, [pc, #308]	@ (800f3b8 <tx_control+0x1430>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f286:	f000 ff26 	bl	80100d6 <tx_control+0x214e>
			point_Y[i] = point_X[i];
 800f28a:	2034      	movs	r0, #52	@ 0x34
 800f28c:	183b      	adds	r3, r7, r0
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f292:	18d2      	adds	r2, r2, r3
 800f294:	183b      	adds	r3, r7, r0
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f29a:	18cb      	adds	r3, r1, r3
 800f29c:	7812      	ldrb	r2, [r2, #0]
 800f29e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f2a0:	183b      	adds	r3, r7, r0
 800f2a2:	781a      	ldrb	r2, [r3, #0]
 800f2a4:	183b      	adds	r3, r7, r0
 800f2a6:	3201      	adds	r2, #1
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	2334      	movs	r3, #52	@ 0x34
 800f2ac:	18fb      	adds	r3, r7, r3
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b07      	cmp	r3, #7
 800f2b2:	d9ea      	bls.n	800f28a <tx_control+0x1302>
		point_Y = &bufferTxControl[8];	 //
 800f2b4:	4b39      	ldr	r3, [pc, #228]	@ (800f39c <tx_control+0x1414>)
 800f2b6:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 128 ; i++ )
 800f2b8:	2333      	movs	r3, #51	@ 0x33
 800f2ba:	18fb      	adds	r3, r7, r3
 800f2bc:	2200      	movs	r2, #0
 800f2be:	701a      	strb	r2, [r3, #0]
 800f2c0:	e00e      	b.n	800f2e0 <tx_control+0x1358>
			point_Y[i] = reePlantilla[i];
 800f2c2:	2033      	movs	r0, #51	@ 0x33
 800f2c4:	183b      	adds	r3, r7, r0
 800f2c6:	781a      	ldrb	r2, [r3, #0]
 800f2c8:	183b      	adds	r3, r7, r0
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2ce:	18cb      	adds	r3, r1, r3
 800f2d0:	493a      	ldr	r1, [pc, #232]	@ (800f3bc <tx_control+0x1434>)
 800f2d2:	5c8a      	ldrb	r2, [r1, r2]
 800f2d4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800f2d6:	183b      	adds	r3, r7, r0
 800f2d8:	781a      	ldrb	r2, [r3, #0]
 800f2da:	183b      	adds	r3, r7, r0
 800f2dc:	3201      	adds	r2, #1
 800f2de:	701a      	strb	r2, [r3, #0]
 800f2e0:	2333      	movs	r3, #51	@ 0x33
 800f2e2:	18fb      	adds	r3, r7, r3
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	b25b      	sxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	daea      	bge.n	800f2c2 <tx_control+0x133a>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f2ec:	4b2c      	ldr	r3, [pc, #176]	@ (800f3a0 <tx_control+0x1418>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f2f2:	4b29      	ldr	r3, [pc, #164]	@ (800f398 <tx_control+0x1410>)
 800f2f4:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800f2f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2f8:	2188      	movs	r1, #136	@ 0x88
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	f7f7 fe4a 	bl	8006f94 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f300:	4b27      	ldr	r3, [pc, #156]	@ (800f3a0 <tx_control+0x1418>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	0e1b      	lsrs	r3, r3, #24
 800f306:	b2d9      	uxtb	r1, r3
 800f308:	4b23      	ldr	r3, [pc, #140]	@ (800f398 <tx_control+0x1410>)
 800f30a:	2288      	movs	r2, #136	@ 0x88
 800f30c:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f30e:	4b24      	ldr	r3, [pc, #144]	@ (800f3a0 <tx_control+0x1418>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	0c1b      	lsrs	r3, r3, #16
 800f314:	b2d9      	uxtb	r1, r3
 800f316:	4b20      	ldr	r3, [pc, #128]	@ (800f398 <tx_control+0x1410>)
 800f318:	2289      	movs	r2, #137	@ 0x89
 800f31a:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f31c:	4b20      	ldr	r3, [pc, #128]	@ (800f3a0 <tx_control+0x1418>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	0a1b      	lsrs	r3, r3, #8
 800f322:	b2d9      	uxtb	r1, r3
 800f324:	4b1c      	ldr	r3, [pc, #112]	@ (800f398 <tx_control+0x1410>)
 800f326:	228a      	movs	r2, #138	@ 0x8a
 800f328:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f32a:	4b1d      	ldr	r3, [pc, #116]	@ (800f3a0 <tx_control+0x1418>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	b2d9      	uxtb	r1, r3
 800f330:	4b19      	ldr	r3, [pc, #100]	@ (800f398 <tx_control+0x1410>)
 800f332:	228b      	movs	r2, #139	@ 0x8b
 800f334:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800f336:	4b1b      	ldr	r3, [pc, #108]	@ (800f3a4 <tx_control+0x141c>)
 800f338:	4a17      	ldr	r2, [pc, #92]	@ (800f398 <tx_control+0x1410>)
 800f33a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f33c:	4b1a      	ldr	r3, [pc, #104]	@ (800f3a8 <tx_control+0x1420>)
 800f33e:	4a16      	ldr	r2, [pc, #88]	@ (800f398 <tx_control+0x1410>)
 800f340:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800f342:	4b1a      	ldr	r3, [pc, #104]	@ (800f3ac <tx_control+0x1424>)
 800f344:	4a1e      	ldr	r2, [pc, #120]	@ (800f3c0 <tx_control+0x1438>)
 800f346:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f348:	4b0f      	ldr	r3, [pc, #60]	@ (800f388 <tx_control+0x1400>)
 800f34a:	228c      	movs	r2, #140	@ 0x8c
 800f34c:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800f34e:	4b11      	ldr	r3, [pc, #68]	@ (800f394 <tx_control+0x140c>)
 800f350:	2200      	movs	r2, #0
 800f352:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800f354:	4b0f      	ldr	r3, [pc, #60]	@ (800f394 <tx_control+0x140c>)
 800f356:	2201      	movs	r2, #1
 800f358:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f35a:	4b16      	ldr	r3, [pc, #88]	@ (800f3b4 <tx_control+0x142c>)
 800f35c:	2255      	movs	r2, #85	@ 0x55
 800f35e:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f360:	4b15      	ldr	r3, [pc, #84]	@ (800f3b8 <tx_control+0x1430>)
 800f362:	2200      	movs	r2, #0
 800f364:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f366:	f000 feb6 	bl	80100d6 <tx_control+0x214e>
 800f36a:	46c0      	nop			@ (mov r8, r8)
 800f36c:	20001eec 	.word	0x20001eec
 800f370:	20000c04 	.word	0x20000c04
 800f374:	20000c9c 	.word	0x20000c9c
 800f378:	20000bd8 	.word	0x20000bd8
 800f37c:	20000c40 	.word	0x20000c40
 800f380:	20000be0 	.word	0x20000be0
 800f384:	20000be8 	.word	0x20000be8
 800f388:	20001f24 	.word	0x20001f24
 800f38c:	200000b8 	.word	0x200000b8
 800f390:	20001ecc 	.word	0x20001ecc
 800f394:	20001f10 	.word	0x20001f10
 800f398:	2000209c 	.word	0x2000209c
 800f39c:	200020a4 	.word	0x200020a4
 800f3a0:	20001f28 	.word	0x20001f28
 800f3a4:	20001f08 	.word	0x20001f08
 800f3a8:	20001f00 	.word	0x20001f00
 800f3ac:	20001f04 	.word	0x20001f04
 800f3b0:	200020b2 	.word	0x200020b2
 800f3b4:	20001f0d 	.word	0x20001f0d
 800f3b8:	20001f18 	.word	0x20001f18
 800f3bc:	20000cec 	.word	0x20000cec
 800f3c0:	20002128 	.word	0x20002128
				goto 	verifica_version2;		//jreq	verifica_version2
 800f3c4:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == reePlantilla[eeversion2]){
 800f3c6:	4be5      	ldr	r3, [pc, #916]	@ (800f75c <tx_control+0x17d4>)
 800f3c8:	227e      	movs	r2, #126	@ 0x7e
 800f3ca:	5c9a      	ldrb	r2, [r3, r2]
 800f3cc:	4be4      	ldr	r3, [pc, #912]	@ (800f760 <tx_control+0x17d8>)
 800f3ce:	217c      	movs	r1, #124	@ 0x7c
 800f3d0:	5c5b      	ldrb	r3, [r3, r1]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d159      	bne.n	800f48a <tx_control+0x1502>
				goto 	verifica_version3;		//jreq	verifica_version3
 800f3d6:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800f3d8:	4be0      	ldr	r3, [pc, #896]	@ (800f75c <tx_control+0x17d4>)
 800f3da:	789b      	ldrb	r3, [r3, #2]
 800f3dc:	2baa      	cmp	r3, #170	@ 0xaa
 800f3de:	d156      	bne.n	800f48e <tx_control+0x1506>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800f3e0:	4bde      	ldr	r3, [pc, #888]	@ (800f75c <tx_control+0x17d4>)
 800f3e2:	2243      	movs	r2, #67	@ 0x43
 800f3e4:	5c9b      	ldrb	r3, [r3, r2]
 800f3e6:	2b66      	cmp	r3, #102	@ 0x66
 800f3e8:	d153      	bne.n	800f492 <tx_control+0x150a>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800f3ea:	4bdc      	ldr	r3, [pc, #880]	@ (800f75c <tx_control+0x17d4>)
 800f3ec:	2281      	movs	r2, #129	@ 0x81
 800f3ee:	5c9b      	ldrb	r3, [r3, r2]
 800f3f0:	2bcc      	cmp	r3, #204	@ 0xcc
 800f3f2:	d150      	bne.n	800f496 <tx_control+0x150e>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f3f4:	4bdb      	ldr	r3, [pc, #876]	@ (800f764 <tx_control+0x17dc>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800f3fa:	4bd8      	ldr	r3, [pc, #864]	@ (800f75c <tx_control+0x17d4>)
 800f3fc:	647b      	str	r3, [r7, #68]	@ 0x44
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800f3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f400:	2182      	movs	r1, #130	@ 0x82
 800f402:	0018      	movs	r0, r3
 800f404:	f7f7 fdc6 	bl	8006f94 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800f40c:	4bd3      	ldr	r3, [pc, #844]	@ (800f75c <tx_control+0x17d4>)
 800f40e:	2282      	movs	r2, #130	@ 0x82
 800f410:	5c9b      	ldrb	r3, [r3, r2]
 800f412:	061b      	lsls	r3, r3, #24
 800f414:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800f416:	4bd1      	ldr	r3, [pc, #836]	@ (800f75c <tx_control+0x17d4>)
 800f418:	2283      	movs	r2, #131	@ 0x83
 800f41a:	5c9b      	ldrb	r3, [r3, r2]
 800f41c:	041b      	lsls	r3, r3, #16
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	18d3      	adds	r3, r2, r3
 800f422:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800f424:	4bcd      	ldr	r3, [pc, #820]	@ (800f75c <tx_control+0x17d4>)
 800f426:	2284      	movs	r2, #132	@ 0x84
 800f428:	5c9b      	ldrb	r3, [r3, r2]
 800f42a:	021b      	lsls	r3, r3, #8
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	18d3      	adds	r3, r2, r3
 800f430:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800f432:	4bca      	ldr	r3, [pc, #808]	@ (800f75c <tx_control+0x17d4>)
 800f434:	2285      	movs	r2, #133	@ 0x85
 800f436:	5c9b      	ldrb	r3, [r3, r2]
 800f438:	001a      	movs	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	189b      	adds	r3, r3, r2
 800f43e:	607b      	str	r3, [r7, #4]
			if (chksum_32_HW_LW != chksum_to_compare){
 800f440:	4bc8      	ldr	r3, [pc, #800]	@ (800f764 <tx_control+0x17dc>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	429a      	cmp	r2, r3
 800f448:	d127      	bne.n	800f49a <tx_control+0x1512>
write_param:
 800f44a:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800f44c:	4bc6      	ldr	r3, [pc, #792]	@ (800f768 <tx_control+0x17e0>)
 800f44e:	2255      	movs	r2, #85	@ 0x55
 800f450:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800f452:	4bc2      	ldr	r3, [pc, #776]	@ (800f75c <tx_control+0x17d4>)
 800f454:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f458:	3301      	adds	r3, #1
 800f45a:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f45e:	3301      	adds	r3, #1
 800f460:	647b      	str	r3, [r7, #68]	@ 0x44
			dataPointer =	point_X;	// LDW		dataPointer,X
 800f462:	4bc2      	ldr	r3, [pc, #776]	@ (800f76c <tx_control+0x17e4>)
 800f464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f466:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800f468:	4bc1      	ldr	r3, [pc, #772]	@ (800f770 <tx_control+0x17e8>)
 800f46a:	4ac2      	ldr	r2, [pc, #776]	@ (800f774 <tx_control+0x17ec>)
 800f46c:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800f46e:	f7f7 fe17 	bl	80070a0 <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800f472:	4bc1      	ldr	r3, [pc, #772]	@ (800f778 <tx_control+0x17f0>)
 800f474:	22f1      	movs	r2, #241	@ 0xf1
 800f476:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f478:	4bbf      	ldr	r3, [pc, #764]	@ (800f778 <tx_control+0x17f0>)
 800f47a:	223d      	movs	r2, #61	@ 0x3d
 800f47c:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800f47e:	4bbf      	ldr	r3, [pc, #764]	@ (800f77c <tx_control+0x17f4>)
 800f480:	2201      	movs	r2, #1
 800f482:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800f484:	e010      	b.n	800f4a8 <tx_control+0x1520>
			goto	no_writeParam;				//jp		no_writeParam
 800f486:	46c0      	nop			@ (mov r8, r8)
 800f488:	e008      	b.n	800f49c <tx_control+0x1514>
			goto	no_writeParam;				//jp		no_writeParam
 800f48a:	46c0      	nop			@ (mov r8, r8)
 800f48c:	e006      	b.n	800f49c <tx_control+0x1514>
				goto	no_writeParam;			//jrne	no_writeParam
 800f48e:	46c0      	nop			@ (mov r8, r8)
 800f490:	e004      	b.n	800f49c <tx_control+0x1514>
				goto	no_writeParam;			//jrne	no_writeParam
 800f492:	46c0      	nop			@ (mov r8, r8)
 800f494:	e002      	b.n	800f49c <tx_control+0x1514>
				goto	no_writeParam;			//jrne	no_writeParam
 800f496:	46c0      	nop			@ (mov r8, r8)
 800f498:	e000      	b.n	800f49c <tx_control+0x1514>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800f49a:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800f49c:	4bb6      	ldr	r3, [pc, #728]	@ (800f778 <tx_control+0x17f0>)
 800f49e:	22f1      	movs	r2, #241	@ 0xf1
 800f4a0:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f4a2:	4bb5      	ldr	r3, [pc, #724]	@ (800f778 <tx_control+0x17f0>)
 800f4a4:	223e      	movs	r2, #62	@ 0x3e
 800f4a6:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800f4a8:	4bb5      	ldr	r3, [pc, #724]	@ (800f780 <tx_control+0x17f8>)
 800f4aa:	4ab3      	ldr	r2, [pc, #716]	@ (800f778 <tx_control+0x17f0>)
 800f4ac:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800f4ae:	4bb5      	ldr	r3, [pc, #724]	@ (800f784 <tx_control+0x17fc>)
 800f4b0:	4ab1      	ldr	r2, [pc, #708]	@ (800f778 <tx_control+0x17f0>)
 800f4b2:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800f4b4:	4bb4      	ldr	r3, [pc, #720]	@ (800f788 <tx_control+0x1800>)
 800f4b6:	4ab5      	ldr	r2, [pc, #724]	@ (800f78c <tx_control+0x1804>)
 800f4b8:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f4ba:	4bb5      	ldr	r3, [pc, #724]	@ (800f790 <tx_control+0x1808>)
 800f4bc:	2202      	movs	r2, #2
 800f4be:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800f4c0:	4bae      	ldr	r3, [pc, #696]	@ (800f77c <tx_control+0x17f4>)
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800f4c6:	4bb3      	ldr	r3, [pc, #716]	@ (800f794 <tx_control+0x180c>)
 800f4c8:	2255      	movs	r2, #85	@ 0x55
 800f4ca:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800f4cc:	4bb2      	ldr	r3, [pc, #712]	@ (800f798 <tx_control+0x1810>)
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f4d2:	f000 fe00 	bl	80100d6 <tx_control+0x214e>
				goto rx_firmware01;
 800f4d6:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800f4d8:	4bb0      	ldr	r3, [pc, #704]	@ (800f79c <tx_control+0x1814>)
 800f4da:	785b      	ldrb	r3, [r3, #1]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d13c      	bne.n	800f55a <tx_control+0x15d2>
rx_numBloqFirm:
 800f4e0:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800f4e2:	4bad      	ldr	r3, [pc, #692]	@ (800f798 <tx_control+0x1810>)
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b49      	cmp	r3, #73	@ 0x49
 800f4e8:	d000      	beq.n	800f4ec <tx_control+0x1564>
 800f4ea:	e1a8      	b.n	800f83e <tx_control+0x18b6>
				goto rx_numBloqFirm_01;
 800f4ec:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = (RxBuffer_Ble[2] << 8) | RxBuffer_Ble[3] ;
 800f4ee:	4b9b      	ldr	r3, [pc, #620]	@ (800f75c <tx_control+0x17d4>)
 800f4f0:	789b      	ldrb	r3, [r3, #2]
 800f4f2:	b21b      	sxth	r3, r3
 800f4f4:	021b      	lsls	r3, r3, #8
 800f4f6:	b21a      	sxth	r2, r3
 800f4f8:	4b98      	ldr	r3, [pc, #608]	@ (800f75c <tx_control+0x17d4>)
 800f4fa:	78db      	ldrb	r3, [r3, #3]
 800f4fc:	b21b      	sxth	r3, r3
 800f4fe:	4313      	orrs	r3, r2
 800f500:	b21b      	sxth	r3, r3
 800f502:	b29a      	uxth	r2, r3
 800f504:	4ba6      	ldr	r3, [pc, #664]	@ (800f7a0 <tx_control+0x1818>)
 800f506:	801a      	strh	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800f508:	4ba6      	ldr	r3, [pc, #664]	@ (800f7a4 <tx_control+0x181c>)
 800f50a:	2200      	movs	r2, #0
 800f50c:	801a      	strh	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800f50e:	4ba6      	ldr	r3, [pc, #664]	@ (800f7a8 <tx_control+0x1820>)
 800f510:	22f1      	movs	r2, #241	@ 0xf1
 800f512:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800f514:	4ba4      	ldr	r3, [pc, #656]	@ (800f7a8 <tx_control+0x1820>)
 800f516:	2207      	movs	r2, #7
 800f518:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800f51a:	4ba0      	ldr	r3, [pc, #640]	@ (800f79c <tx_control+0x1814>)
 800f51c:	2201      	movs	r2, #1
 800f51e:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800f520:	4ba2      	ldr	r3, [pc, #648]	@ (800f7ac <tx_control+0x1824>)
 800f522:	2200      	movs	r2, #0
 800f524:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800f526:	4b96      	ldr	r3, [pc, #600]	@ (800f780 <tx_control+0x17f8>)
 800f528:	4a9f      	ldr	r2, [pc, #636]	@ (800f7a8 <tx_control+0x1820>)
 800f52a:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f52c:	4b95      	ldr	r3, [pc, #596]	@ (800f784 <tx_control+0x17fc>)
 800f52e:	4a9e      	ldr	r2, [pc, #632]	@ (800f7a8 <tx_control+0x1820>)
 800f530:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800f532:	4b95      	ldr	r3, [pc, #596]	@ (800f788 <tx_control+0x1800>)
 800f534:	4a9e      	ldr	r2, [pc, #632]	@ (800f7b0 <tx_control+0x1828>)
 800f536:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f538:	4b95      	ldr	r3, [pc, #596]	@ (800f790 <tx_control+0x1808>)
 800f53a:	2202      	movs	r2, #2
 800f53c:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f53e:	4b8f      	ldr	r3, [pc, #572]	@ (800f77c <tx_control+0x17f4>)
 800f540:	2201      	movs	r2, #1
 800f542:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f544:	4b93      	ldr	r3, [pc, #588]	@ (800f794 <tx_control+0x180c>)
 800f546:	2255      	movs	r2, #85	@ 0x55
 800f548:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800f54a:	4b93      	ldr	r3, [pc, #588]	@ (800f798 <tx_control+0x1810>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;
 800f550:	4b98      	ldr	r3, [pc, #608]	@ (800f7b4 <tx_control+0x182c>)
 800f552:	2205      	movs	r2, #5
 800f554:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800f556:	f000 fdbe 	bl	80100d6 <tx_control+0x214e>
				goto rxBloqFirm;
 800f55a:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800f55c:	4b8f      	ldr	r3, [pc, #572]	@ (800f79c <tx_control+0x1814>)
 800f55e:	789b      	ldrb	r3, [r3, #2]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d101      	bne.n	800f568 <tx_control+0x15e0>
 800f564:	f000 fdb6 	bl	80100d4 <tx_control+0x214c>
				goto rxBloqFirm_01;
 800f568:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800f56a:	4b8c      	ldr	r3, [pc, #560]	@ (800f79c <tx_control+0x1814>)
 800f56c:	2200      	movs	r2, #0
 800f56e:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800f570:	4b7c      	ldr	r3, [pc, #496]	@ (800f764 <tx_control+0x17dc>)
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800f576:	4b90      	ldr	r3, [pc, #576]	@ (800f7b8 <tx_control+0x1830>)
 800f578:	2200      	movs	r2, #0
 800f57a:	701a      	strb	r2, [r3, #0]
			cksum_aux = 0;
 800f57c:	4b8f      	ldr	r3, [pc, #572]	@ (800f7bc <tx_control+0x1834>)
 800f57e:	2200      	movs	r2, #0
 800f580:	601a      	str	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[wreg]); // call	build_chksum;	/ ve calculando el checksum
 800f582:	4b8d      	ldr	r3, [pc, #564]	@ (800f7b8 <tx_control+0x1830>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	001a      	movs	r2, r3
 800f588:	4b74      	ldr	r3, [pc, #464]	@ (800f75c <tx_control+0x17d4>)
 800f58a:	5c9b      	ldrb	r3, [r3, r2]
 800f58c:	0018      	movs	r0, r3
 800f58e:	f7f7 fd73 	bl	8007078 <build_chksum>
			wreg++;			// inc		wreg
 800f592:	4b89      	ldr	r3, [pc, #548]	@ (800f7b8 <tx_control+0x1830>)
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	3301      	adds	r3, #1
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	4b87      	ldr	r3, [pc, #540]	@ (800f7b8 <tx_control+0x1830>)
 800f59c:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800f59e:	4b86      	ldr	r3, [pc, #536]	@ (800f7b8 <tx_control+0x1830>)
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	b25b      	sxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	db00      	blt.n	800f5aa <tx_control+0x1622>
				goto load_bloqFirm;
 800f5a8:	e7eb      	b.n	800f582 <tx_control+0x15fa>
			cksum_aux = (RxBuffer_Ble[128] << 24) | (RxBuffer_Ble[129] << 16) |(RxBuffer_Ble[130] << 8) | RxBuffer_Ble[131];
 800f5aa:	4b6c      	ldr	r3, [pc, #432]	@ (800f75c <tx_control+0x17d4>)
 800f5ac:	2280      	movs	r2, #128	@ 0x80
 800f5ae:	5c9b      	ldrb	r3, [r3, r2]
 800f5b0:	061a      	lsls	r2, r3, #24
 800f5b2:	4b6a      	ldr	r3, [pc, #424]	@ (800f75c <tx_control+0x17d4>)
 800f5b4:	2181      	movs	r1, #129	@ 0x81
 800f5b6:	5c5b      	ldrb	r3, [r3, r1]
 800f5b8:	041b      	lsls	r3, r3, #16
 800f5ba:	431a      	orrs	r2, r3
 800f5bc:	4b67      	ldr	r3, [pc, #412]	@ (800f75c <tx_control+0x17d4>)
 800f5be:	2182      	movs	r1, #130	@ 0x82
 800f5c0:	5c5b      	ldrb	r3, [r3, r1]
 800f5c2:	021b      	lsls	r3, r3, #8
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	4a65      	ldr	r2, [pc, #404]	@ (800f75c <tx_control+0x17d4>)
 800f5c8:	2183      	movs	r1, #131	@ 0x83
 800f5ca:	5c52      	ldrb	r2, [r2, r1]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	001a      	movs	r2, r3
 800f5d0:	4b7a      	ldr	r3, [pc, #488]	@ (800f7bc <tx_control+0x1834>)
 800f5d2:	601a      	str	r2, [r3, #0]
			if(cksum_aux != chksum_32_HW_LW){
 800f5d4:	4b79      	ldr	r3, [pc, #484]	@ (800f7bc <tx_control+0x1834>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	4b62      	ldr	r3, [pc, #392]	@ (800f764 <tx_control+0x17dc>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d145      	bne.n	800f66c <tx_control+0x16e4>
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800f5e0:	4b72      	ldr	r3, [pc, #456]	@ (800f7ac <tx_control+0x1824>)
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	4b5f      	ldr	r3, [pc, #380]	@ (800f764 <tx_control+0x17dc>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	18d2      	adds	r2, r2, r3
 800f5ea:	4b70      	ldr	r3, [pc, #448]	@ (800f7ac <tx_control+0x1824>)
 800f5ec:	601a      	str	r2, [r3, #0]
			if(direccion_fw >= 0x803F000)
 800f5ee:	4b74      	ldr	r3, [pc, #464]	@ (800f7c0 <tx_control+0x1838>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a74      	ldr	r2, [pc, #464]	@ (800f7c4 <tx_control+0x183c>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d901      	bls.n	800f5fc <tx_control+0x1674>
				NVIC_SystemReset();
 800f5f8:	f7fe fcb4 	bl	800df64 <__NVIC_SystemReset>
			if(contador_bloques_fw == 16)
 800f5fc:	4b72      	ldr	r3, [pc, #456]	@ (800f7c8 <tx_control+0x1840>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b10      	cmp	r3, #16
 800f602:	d107      	bne.n	800f614 <tx_control+0x168c>
				borra_pagina_logger(pagina_borrado);
 800f604:	4b71      	ldr	r3, [pc, #452]	@ (800f7cc <tx_control+0x1844>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	0018      	movs	r0, r3
 800f60a:	f001 fe9b 	bl	8011344 <borra_pagina_logger>
				contador_bloques_fw = 0;
 800f60e:	4b6e      	ldr	r3, [pc, #440]	@ (800f7c8 <tx_control+0x1840>)
 800f610:	2200      	movs	r2, #0
 800f612:	701a      	strb	r2, [r3, #0]
			contador_bloques_fw++;
 800f614:	4b6c      	ldr	r3, [pc, #432]	@ (800f7c8 <tx_control+0x1840>)
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	3301      	adds	r3, #1
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	4b6a      	ldr	r3, [pc, #424]	@ (800f7c8 <tx_control+0x1840>)
 800f61e:	701a      	strb	r2, [r3, #0]
			graba_bloque_fw();
 800f620:	f001 fec0 	bl	80113a4 <graba_bloque_fw>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800f624:	4b5f      	ldr	r3, [pc, #380]	@ (800f7a4 <tx_control+0x181c>)
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	3301      	adds	r3, #1
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	4b5d      	ldr	r3, [pc, #372]	@ (800f7a4 <tx_control+0x181c>)
 800f62e:	801a      	strh	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800f630:	4b5c      	ldr	r3, [pc, #368]	@ (800f7a4 <tx_control+0x181c>)
 800f632:	881a      	ldrh	r2, [r3, #0]
 800f634:	4b5a      	ldr	r3, [pc, #360]	@ (800f7a0 <tx_control+0x1818>)
 800f636:	881b      	ldrh	r3, [r3, #0]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d10c      	bne.n	800f656 <tx_control+0x16ce>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800f63c:	4b57      	ldr	r3, [pc, #348]	@ (800f79c <tx_control+0x1814>)
 800f63e:	2201      	movs	r2, #1
 800f640:	70da      	strb	r2, [r3, #3]
			direccion_fw = 0x8020000;
 800f642:	4b5f      	ldr	r3, [pc, #380]	@ (800f7c0 <tx_control+0x1838>)
 800f644:	4a62      	ldr	r2, [pc, #392]	@ (800f7d0 <tx_control+0x1848>)
 800f646:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f648:	4b60      	ldr	r3, [pc, #384]	@ (800f7cc <tx_control+0x1844>)
 800f64a:	2240      	movs	r2, #64	@ 0x40
 800f64c:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f64e:	4b5e      	ldr	r3, [pc, #376]	@ (800f7c8 <tx_control+0x1840>)
 800f650:	2210      	movs	r2, #16
 800f652:	701a      	strb	r2, [r3, #0]
 800f654:	e000      	b.n	800f658 <tx_control+0x16d0>
				goto rxFirm_noComplete ;
 800f656:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f658:	4b53      	ldr	r3, [pc, #332]	@ (800f7a8 <tx_control+0x1820>)
 800f65a:	22f1      	movs	r2, #241	@ 0xf1
 800f65c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f65e:	4b52      	ldr	r3, [pc, #328]	@ (800f7a8 <tx_control+0x1820>)
 800f660:	223d      	movs	r2, #61	@ 0x3d
 800f662:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f664:	4b53      	ldr	r3, [pc, #332]	@ (800f7b4 <tx_control+0x182c>)
 800f666:	2205      	movs	r2, #5
 800f668:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800f66a:	e023      	b.n	800f6b4 <tx_control+0x172c>
				goto no_writeBloqFirm;
 800f66c:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800f66e:	4b4e      	ldr	r3, [pc, #312]	@ (800f7a8 <tx_control+0x1820>)
 800f670:	22f1      	movs	r2, #241	@ 0xf1
 800f672:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f674:	4b4c      	ldr	r3, [pc, #304]	@ (800f7a8 <tx_control+0x1820>)
 800f676:	223e      	movs	r2, #62	@ 0x3e
 800f678:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f67a:	2300      	movs	r3, #0
 800f67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f67e:	e007      	b.n	800f690 <tx_control+0x1708>
				flagsRxFirm[i]=0;
 800f680:	4a46      	ldr	r2, [pc, #280]	@ (800f79c <tx_control+0x1814>)
 800f682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f684:	18d3      	adds	r3, r2, r3
 800f686:	2200      	movs	r2, #0
 800f688:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f68c:	3301      	adds	r3, #1
 800f68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f692:	2b07      	cmp	r3, #7
 800f694:	ddf4      	ble.n	800f680 <tx_control+0x16f8>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800f696:	4b40      	ldr	r3, [pc, #256]	@ (800f798 <tx_control+0x1810>)
 800f698:	2200      	movs	r2, #0
 800f69a:	701a      	strb	r2, [r3, #0]
			bandera_act_fw_j = 0;
 800f69c:	4b4d      	ldr	r3, [pc, #308]	@ (800f7d4 <tx_control+0x184c>)
 800f69e:	2200      	movs	r2, #0
 800f6a0:	701a      	strb	r2, [r3, #0]
			direccion_fw = 0x8020000;
 800f6a2:	4b47      	ldr	r3, [pc, #284]	@ (800f7c0 <tx_control+0x1838>)
 800f6a4:	4a4a      	ldr	r2, [pc, #296]	@ (800f7d0 <tx_control+0x1848>)
 800f6a6:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f6a8:	4b48      	ldr	r3, [pc, #288]	@ (800f7cc <tx_control+0x1844>)
 800f6aa:	2240      	movs	r2, #64	@ 0x40
 800f6ac:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f6ae:	4b46      	ldr	r3, [pc, #280]	@ (800f7c8 <tx_control+0x1840>)
 800f6b0:	2210      	movs	r2, #16
 800f6b2:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f6b4:	4b32      	ldr	r3, [pc, #200]	@ (800f780 <tx_control+0x17f8>)
 800f6b6:	4a3c      	ldr	r2, [pc, #240]	@ (800f7a8 <tx_control+0x1820>)
 800f6b8:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f6ba:	4b32      	ldr	r3, [pc, #200]	@ (800f784 <tx_control+0x17fc>)
 800f6bc:	4a3a      	ldr	r2, [pc, #232]	@ (800f7a8 <tx_control+0x1820>)
 800f6be:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f6c0:	4b31      	ldr	r3, [pc, #196]	@ (800f788 <tx_control+0x1800>)
 800f6c2:	4a3b      	ldr	r2, [pc, #236]	@ (800f7b0 <tx_control+0x1828>)
 800f6c4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800f6c6:	4b32      	ldr	r3, [pc, #200]	@ (800f790 <tx_control+0x1808>)
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800f6cc:	4b2b      	ldr	r3, [pc, #172]	@ (800f77c <tx_control+0x17f4>)
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f6d2:	4b30      	ldr	r3, [pc, #192]	@ (800f794 <tx_control+0x180c>)
 800f6d4:	2255      	movs	r2, #85	@ 0x55
 800f6d6:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800f6d8:	4b2f      	ldr	r3, [pc, #188]	@ (800f798 <tx_control+0x1810>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;
 800f6de:	f000 fcfa 	bl	80100d6 <tx_control+0x214e>
			goto rxChkFirm;				// jp		rxChkFirm;
 800f6e2:	46c0      	nop			@ (mov r8, r8)
			cksum_gral_aux = 0;
 800f6e4:	4b3c      	ldr	r3, [pc, #240]	@ (800f7d8 <tx_control+0x1850>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	601a      	str	r2, [r3, #0]
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800f6ea:	4b2c      	ldr	r3, [pc, #176]	@ (800f79c <tx_control+0x1814>)
 800f6ec:	791b      	ldrb	r3, [r3, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d000      	beq.n	800f6f4 <tx_control+0x176c>
 800f6f2:	e0a7      	b.n	800f844 <tx_control+0x18bc>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800f6f4:	4b28      	ldr	r3, [pc, #160]	@ (800f798 <tx_control+0x1810>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	2b4a      	cmp	r3, #74	@ 0x4a
 800f6fa:	d000      	beq.n	800f6fe <tx_control+0x1776>
 800f6fc:	e0a5      	b.n	800f84a <tx_control+0x18c2>
			cksum_gral_aux = (RxBuffer_Ble[2] << 24) | (RxBuffer_Ble[3] << 16) | (RxBuffer_Ble[4] << 8) | RxBuffer_Ble[5];
 800f6fe:	4b17      	ldr	r3, [pc, #92]	@ (800f75c <tx_control+0x17d4>)
 800f700:	789b      	ldrb	r3, [r3, #2]
 800f702:	061a      	lsls	r2, r3, #24
 800f704:	4b15      	ldr	r3, [pc, #84]	@ (800f75c <tx_control+0x17d4>)
 800f706:	78db      	ldrb	r3, [r3, #3]
 800f708:	041b      	lsls	r3, r3, #16
 800f70a:	431a      	orrs	r2, r3
 800f70c:	4b13      	ldr	r3, [pc, #76]	@ (800f75c <tx_control+0x17d4>)
 800f70e:	791b      	ldrb	r3, [r3, #4]
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	4313      	orrs	r3, r2
 800f714:	4a11      	ldr	r2, [pc, #68]	@ (800f75c <tx_control+0x17d4>)
 800f716:	7952      	ldrb	r2, [r2, #5]
 800f718:	4313      	orrs	r3, r2
 800f71a:	001a      	movs	r2, r3
 800f71c:	4b2e      	ldr	r3, [pc, #184]	@ (800f7d8 <tx_control+0x1850>)
 800f71e:	601a      	str	r2, [r3, #0]
			if(cksum_gral_aux != chksumFirm_HW_LW){
 800f720:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d8 <tx_control+0x1850>)
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	4b21      	ldr	r3, [pc, #132]	@ (800f7ac <tx_control+0x1824>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d10c      	bne.n	800f746 <tx_control+0x17be>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f72c:	4b1e      	ldr	r3, [pc, #120]	@ (800f7a8 <tx_control+0x1820>)
 800f72e:	22f1      	movs	r2, #241	@ 0xf1
 800f730:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;
 800f732:	4b1d      	ldr	r3, [pc, #116]	@ (800f7a8 <tx_control+0x1820>)
 800f734:	223d      	movs	r2, #61	@ 0x3d
 800f736:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800f738:	4b18      	ldr	r3, [pc, #96]	@ (800f79c <tx_control+0x1814>)
 800f73a:	2201      	movs	r2, #1
 800f73c:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f73e:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b4 <tx_control+0x182c>)
 800f740:	2205      	movs	r2, #5
 800f742:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800f744:	e064      	b.n	800f810 <tx_control+0x1888>
				goto rxFirmErr;
 800f746:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f748:	4b17      	ldr	r3, [pc, #92]	@ (800f7a8 <tx_control+0x1820>)
 800f74a:	22f1      	movs	r2, #241	@ 0xf1
 800f74c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f74e:	4b16      	ldr	r3, [pc, #88]	@ (800f7a8 <tx_control+0x1820>)
 800f750:	223e      	movs	r2, #62	@ 0x3e
 800f752:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f754:	2300      	movs	r3, #0
 800f756:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f758:	e048      	b.n	800f7ec <tx_control+0x1864>
 800f75a:	46c0      	nop			@ (mov r8, r8)
 800f75c:	200009e8 	.word	0x200009e8
 800f760:	20000cec 	.word	0x20000cec
 800f764:	20001f28 	.word	0x20001f28
 800f768:	20000e78 	.word	0x20000e78
 800f76c:	20000e80 	.word	0x20000e80
 800f770:	20000e7c 	.word	0x20000e7c
 800f774:	0803f000 	.word	0x0803f000
 800f778:	20001ed4 	.word	0x20001ed4
 800f77c:	20001f10 	.word	0x20001f10
 800f780:	20001f08 	.word	0x20001f08
 800f784:	20001f00 	.word	0x20001f00
 800f788:	20001f04 	.word	0x20001f04
 800f78c:	20001ed5 	.word	0x20001ed5
 800f790:	20001f24 	.word	0x20001f24
 800f794:	20001f0d 	.word	0x20001f0d
 800f798:	20001f18 	.word	0x20001f18
 800f79c:	20001fd0 	.word	0x20001fd0
 800f7a0:	20001fc4 	.word	0x20001fc4
 800f7a4:	20001fc6 	.word	0x20001fc6
 800f7a8:	20001ea8 	.word	0x20001ea8
 800f7ac:	20001fc8 	.word	0x20001fc8
 800f7b0:	20001ea9 	.word	0x20001ea9
 800f7b4:	20001fda 	.word	0x20001fda
 800f7b8:	20000bb7 	.word	0x20000bb7
 800f7bc:	20002268 	.word	0x20002268
 800f7c0:	20000274 	.word	0x20000274
 800f7c4:	0803efff 	.word	0x0803efff
 800f7c8:	20000278 	.word	0x20000278
 800f7cc:	20000270 	.word	0x20000270
 800f7d0:	08020000 	.word	0x08020000
 800f7d4:	200021d7 	.word	0x200021d7
 800f7d8:	2000226c 	.word	0x2000226c
				flagsRxFirm[i]=0;
 800f7dc:	4ada      	ldr	r2, [pc, #872]	@ (800fb48 <tx_control+0x1bc0>)
 800f7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e0:	18d3      	adds	r3, r2, r3
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ee:	2b07      	cmp	r3, #7
 800f7f0:	ddf4      	ble.n	800f7dc <tx_control+0x1854>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800f7f2:	4bd6      	ldr	r3, [pc, #856]	@ (800fb4c <tx_control+0x1bc4>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	701a      	strb	r2, [r3, #0]
			bandera_act_fw_j = 0;
 800f7f8:	4bd5      	ldr	r3, [pc, #852]	@ (800fb50 <tx_control+0x1bc8>)
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	701a      	strb	r2, [r3, #0]
			direccion_fw = 0x8020000;
 800f7fe:	4bd5      	ldr	r3, [pc, #852]	@ (800fb54 <tx_control+0x1bcc>)
 800f800:	4ad5      	ldr	r2, [pc, #852]	@ (800fb58 <tx_control+0x1bd0>)
 800f802:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f804:	4bd5      	ldr	r3, [pc, #852]	@ (800fb5c <tx_control+0x1bd4>)
 800f806:	2240      	movs	r2, #64	@ 0x40
 800f808:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f80a:	4bd5      	ldr	r3, [pc, #852]	@ (800fb60 <tx_control+0x1bd8>)
 800f80c:	2210      	movs	r2, #16
 800f80e:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f810:	4bd4      	ldr	r3, [pc, #848]	@ (800fb64 <tx_control+0x1bdc>)
 800f812:	4ad5      	ldr	r2, [pc, #852]	@ (800fb68 <tx_control+0x1be0>)
 800f814:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f816:	4bd5      	ldr	r3, [pc, #852]	@ (800fb6c <tx_control+0x1be4>)
 800f818:	4ad3      	ldr	r2, [pc, #844]	@ (800fb68 <tx_control+0x1be0>)
 800f81a:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f81c:	4bd4      	ldr	r3, [pc, #848]	@ (800fb70 <tx_control+0x1be8>)
 800f81e:	4ad5      	ldr	r2, [pc, #852]	@ (800fb74 <tx_control+0x1bec>)
 800f820:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800f822:	4bd5      	ldr	r3, [pc, #852]	@ (800fb78 <tx_control+0x1bf0>)
 800f824:	2202      	movs	r2, #2
 800f826:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f828:	4bd4      	ldr	r3, [pc, #848]	@ (800fb7c <tx_control+0x1bf4>)
 800f82a:	2201      	movs	r2, #1
 800f82c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800f82e:	4bd4      	ldr	r3, [pc, #848]	@ (800fb80 <tx_control+0x1bf8>)
 800f830:	2255      	movs	r2, #85	@ 0x55
 800f832:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800f834:	4bc5      	ldr	r3, [pc, #788]	@ (800fb4c <tx_control+0x1bc4>)
 800f836:	2200      	movs	r2, #0
 800f838:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f83a:	f000 fc4c 	bl	80100d6 <tx_control+0x214e>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800f83e:	46c0      	nop			@ (mov r8, r8)
 800f840:	f000 fc49 	bl	80100d6 <tx_control+0x214e>
				goto end_rx_firmware;
 800f844:	46c0      	nop			@ (mov r8, r8)
 800f846:	f000 fc46 	bl	80100d6 <tx_control+0x214e>
					goto end_rx_firmware;
 800f84a:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800f84c:	f000 fc43 	bl	80100d6 <tx_control+0x214e>
				erasePage(i);
 800f850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f852:	0018      	movs	r0, r3
 800f854:	f7f2 fee0 	bl	8002618 <erasePage>
			for(uint32_t i = 110; i<126; i++){
 800f858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85a:	3301      	adds	r3, #1
 800f85c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f860:	2b7d      	cmp	r3, #125	@ 0x7d
 800f862:	d9f5      	bls.n	800f850 <tx_control+0x18c8>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800f864:	4bc0      	ldr	r3, [pc, #768]	@ (800fb68 <tx_control+0x1be0>)
 800f866:	22f1      	movs	r2, #241	@ 0xf1
 800f868:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f86a:	4bbf      	ldr	r3, [pc, #764]	@ (800fb68 <tx_control+0x1be0>)
 800f86c:	223d      	movs	r2, #61	@ 0x3d
 800f86e:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800f870:	4bc4      	ldr	r3, [pc, #784]	@ (800fb84 <tx_control+0x1bfc>)
 800f872:	2200      	movs	r2, #0
 800f874:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800f876:	4bc4      	ldr	r3, [pc, #784]	@ (800fb88 <tx_control+0x1c00>)
 800f878:	2200      	movs	r2, #0
 800f87a:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800f87c:	4bc3      	ldr	r3, [pc, #780]	@ (800fb8c <tx_control+0x1c04>)
 800f87e:	2200      	movs	r2, #0
 800f880:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800f882:	4bc3      	ldr	r3, [pc, #780]	@ (800fb90 <tx_control+0x1c08>)
 800f884:	2200      	movs	r2, #0
 800f886:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800f888:	4bc2      	ldr	r3, [pc, #776]	@ (800fb94 <tx_control+0x1c0c>)
 800f88a:	4ac3      	ldr	r2, [pc, #780]	@ (800fb98 <tx_control+0x1c10>)
 800f88c:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800f88e:	4bc3      	ldr	r3, [pc, #780]	@ (800fb9c <tx_control+0x1c14>)
 800f890:	4ac3      	ldr	r2, [pc, #780]	@ (800fba0 <tx_control+0x1c18>)
 800f892:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800f894:	4bbc      	ldr	r3, [pc, #752]	@ (800fb88 <tx_control+0x1c00>)
 800f896:	781a      	ldrb	r2, [r3, #0]
 800f898:	4bc2      	ldr	r3, [pc, #776]	@ (800fba4 <tx_control+0x1c1c>)
 800f89a:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f89c:	f7f7 faca 	bl	8006e34 <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800f8a0:	4bbc      	ldr	r3, [pc, #752]	@ (800fb94 <tx_control+0x1c0c>)
 800f8a2:	4ac1      	ldr	r2, [pc, #772]	@ (800fba8 <tx_control+0x1c20>)
 800f8a4:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800f8a6:	4bbd      	ldr	r3, [pc, #756]	@ (800fb9c <tx_control+0x1c14>)
 800f8a8:	4ac0      	ldr	r2, [pc, #768]	@ (800fbac <tx_control+0x1c24>)
 800f8aa:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800f8ac:	4bb8      	ldr	r3, [pc, #736]	@ (800fb90 <tx_control+0x1c08>)
 800f8ae:	781a      	ldrb	r2, [r3, #0]
 800f8b0:	4bbc      	ldr	r3, [pc, #752]	@ (800fba4 <tx_control+0x1c1c>)
 800f8b2:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f8b4:	f7f7 fabe 	bl	8006e34 <load_next_buffer>
			for(int i = 0; i<8; i++)
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	623b      	str	r3, [r7, #32]
 800f8bc:	e007      	b.n	800f8ce <tx_control+0x1946>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800f8be:	4abc      	ldr	r2, [pc, #752]	@ (800fbb0 <tx_control+0x1c28>)
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	18d3      	adds	r3, r2, r3
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800f8c8:	6a3b      	ldr	r3, [r7, #32]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	623b      	str	r3, [r7, #32]
 800f8ce:	6a3b      	ldr	r3, [r7, #32]
 800f8d0:	2b07      	cmp	r3, #7
 800f8d2:	ddf4      	ble.n	800f8be <tx_control+0x1936>
			goto ok_clean_logger; //jp		ok_clean_logger
 800f8d4:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800f8d6:	4ba3      	ldr	r3, [pc, #652]	@ (800fb64 <tx_control+0x1bdc>)
 800f8d8:	4aa3      	ldr	r2, [pc, #652]	@ (800fb68 <tx_control+0x1be0>)
 800f8da:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800f8dc:	4ba3      	ldr	r3, [pc, #652]	@ (800fb6c <tx_control+0x1be4>)
 800f8de:	4aa2      	ldr	r2, [pc, #648]	@ (800fb68 <tx_control+0x1be0>)
 800f8e0:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f8e2:	4ba3      	ldr	r3, [pc, #652]	@ (800fb70 <tx_control+0x1be8>)
 800f8e4:	4aa3      	ldr	r2, [pc, #652]	@ (800fb74 <tx_control+0x1bec>)
 800f8e6:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f8e8:	4ba3      	ldr	r3, [pc, #652]	@ (800fb78 <tx_control+0x1bf0>)
 800f8ea:	2202      	movs	r2, #2
 800f8ec:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f8ee:	4ba3      	ldr	r3, [pc, #652]	@ (800fb7c <tx_control+0x1bf4>)
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f8f4:	4ba2      	ldr	r3, [pc, #648]	@ (800fb80 <tx_control+0x1bf8>)
 800f8f6:	2255      	movs	r2, #85	@ 0x55
 800f8f8:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800f8fa:	4b94      	ldr	r3, [pc, #592]	@ (800fb4c <tx_control+0x1bc4>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f900:	f000 fbe9 	bl	80100d6 <tx_control+0x214e>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800f904:	4bab      	ldr	r3, [pc, #684]	@ (800fbb4 <tx_control+0x1c2c>)
 800f906:	789a      	ldrb	r2, [r3, #2]
 800f908:	4bab      	ldr	r3, [pc, #684]	@ (800fbb8 <tx_control+0x1c30>)
 800f90a:	701a      	strb	r2, [r3, #0]
			waux = reeEstado1;
 800f90c:	4bab      	ldr	r3, [pc, #684]	@ (800fbbc <tx_control+0x1c34>)
 800f90e:	781a      	ldrb	r2, [r3, #0]
 800f910:	4bab      	ldr	r3, [pc, #684]	@ (800fbc0 <tx_control+0x1c38>)
 800f912:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800f914:	4ba8      	ldr	r3, [pc, #672]	@ (800fbb8 <tx_control+0x1c30>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	001a      	movs	r2, r3
 800f91a:	2301      	movs	r3, #1
 800f91c:	4013      	ands	r3, r2
 800f91e:	d00d      	beq.n	800f93c <tx_control+0x19b4>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800f920:	4ba7      	ldr	r3, [pc, #668]	@ (800fbc0 <tx_control+0x1c38>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2201      	movs	r2, #1
 800f926:	4053      	eors	r3, r2
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	4ba5      	ldr	r3, [pc, #660]	@ (800fbc0 <tx_control+0x1c38>)
 800f92c:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f92e:	4ba5      	ldr	r3, [pc, #660]	@ (800fbc4 <tx_control+0x1c3c>)
 800f930:	22fa      	movs	r2, #250	@ 0xfa
 800f932:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800f934:	4ba4      	ldr	r3, [pc, #656]	@ (800fbc8 <tx_control+0x1c40>)
 800f936:	2201      	movs	r2, #1
 800f938:	701a      	strb	r2, [r3, #0]
 800f93a:	e000      	b.n	800f93e <tx_control+0x19b6>
				goto chk_est1_b1;
 800f93c:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800f93e:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800f940:	4b9d      	ldr	r3, [pc, #628]	@ (800fbb8 <tx_control+0x1c30>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	001a      	movs	r2, r3
 800f946:	2304      	movs	r3, #4
 800f948:	4013      	ands	r3, r2
 800f94a:	d027      	beq.n	800f99c <tx_control+0x1a14>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800f94c:	4b9f      	ldr	r3, [pc, #636]	@ (800fbcc <tx_control+0x1c44>)
 800f94e:	799b      	ldrb	r3, [r3, #6]
 800f950:	2201      	movs	r2, #1
 800f952:	4053      	eors	r3, r2
 800f954:	b2db      	uxtb	r3, r3
 800f956:	1e5a      	subs	r2, r3, #1
 800f958:	4193      	sbcs	r3, r2
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	4b9b      	ldr	r3, [pc, #620]	@ (800fbcc <tx_control+0x1c44>)
 800f95e:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800f960:	4b97      	ldr	r3, [pc, #604]	@ (800fbc0 <tx_control+0x1c38>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2204      	movs	r2, #4
 800f966:	4393      	bics	r3, r2
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	4b95      	ldr	r3, [pc, #596]	@ (800fbc0 <tx_control+0x1c38>)
 800f96c:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800f96e:	4b97      	ldr	r3, [pc, #604]	@ (800fbcc <tx_control+0x1c44>)
 800f970:	799b      	ldrb	r3, [r3, #6]
 800f972:	2201      	movs	r2, #1
 800f974:	4053      	eors	r3, r2
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d107      	bne.n	800f98c <tx_control+0x1a04>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800f97c:	4b90      	ldr	r3, [pc, #576]	@ (800fbc0 <tx_control+0x1c38>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	2204      	movs	r2, #4
 800f982:	4313      	orrs	r3, r2
 800f984:	b2da      	uxtb	r2, r3
 800f986:	4b8e      	ldr	r3, [pc, #568]	@ (800fbc0 <tx_control+0x1c38>)
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	e000      	b.n	800f98e <tx_control+0x1a06>
				goto chk_est1_b2_01;
 800f98c:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800f98e:	4b8d      	ldr	r3, [pc, #564]	@ (800fbc4 <tx_control+0x1c3c>)
 800f990:	22fa      	movs	r2, #250	@ 0xfa
 800f992:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800f994:	4b8c      	ldr	r3, [pc, #560]	@ (800fbc8 <tx_control+0x1c40>)
 800f996:	2202      	movs	r2, #2
 800f998:	701a      	strb	r2, [r3, #0]
 800f99a:	e000      	b.n	800f99e <tx_control+0x1a16>
				goto chk_est1_b3;
 800f99c:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800f99e:	4b86      	ldr	r3, [pc, #536]	@ (800fbb8 <tx_control+0x1c30>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	001a      	movs	r2, r3
 800f9a4:	2308      	movs	r3, #8
 800f9a6:	4013      	ands	r3, r2
 800f9a8:	d019      	beq.n	800f9de <tx_control+0x1a56>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800f9aa:	4b88      	ldr	r3, [pc, #544]	@ (800fbcc <tx_control+0x1c44>)
 800f9ac:	789b      	ldrb	r3, [r3, #2]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <tx_control+0x1a38>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800f9b2:	4b87      	ldr	r3, [pc, #540]	@ (800fbd0 <tx_control+0x1c48>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800f9b8:	4b86      	ldr	r3, [pc, #536]	@ (800fbd4 <tx_control+0x1c4c>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800f9be:	e00f      	b.n	800f9e0 <tx_control+0x1a58>
				goto chk_est1_b3_01;
 800f9c0:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800f9c2:	4b85      	ldr	r3, [pc, #532]	@ (800fbd8 <tx_control+0x1c50>)
 800f9c4:	22f0      	movs	r2, #240	@ 0xf0
 800f9c6:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800f9c8:	4b80      	ldr	r3, [pc, #512]	@ (800fbcc <tx_control+0x1c44>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800f9ce:	4b7f      	ldr	r3, [pc, #508]	@ (800fbcc <tx_control+0x1c44>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800f9d4:	f7f7 f9e4 	bl	8006da0 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800f9d8:	f7f7 f9fe 	bl	8006dd8 <load_tiempoAhorro2>
 800f9dc:	e000      	b.n	800f9e0 <tx_control+0x1a58>
				goto chk_est1_b4;
 800f9de:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800f9e0:	4b75      	ldr	r3, [pc, #468]	@ (800fbb8 <tx_control+0x1c30>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	001a      	movs	r2, r3
 800f9e6:	2310      	movs	r3, #16
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	d003      	beq.n	800f9f4 <tx_control+0x1a6c>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800f9ec:	4b7b      	ldr	r3, [pc, #492]	@ (800fbdc <tx_control+0x1c54>)
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	711a      	strb	r2, [r3, #4]
 800f9f2:	e000      	b.n	800f9f6 <tx_control+0x1a6e>
				goto chk_est1_b5;
 800f9f4:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800f9f6:	4b70      	ldr	r3, [pc, #448]	@ (800fbb8 <tx_control+0x1c30>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	001a      	movs	r2, r3
 800f9fc:	2320      	movs	r3, #32
 800f9fe:	4013      	ands	r3, r2
 800fa00:	d002      	beq.n	800fa08 <tx_control+0x1a80>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800fa02:	f7f7 faeb 	bl	8006fdc <ld_alarmDelay>
 800fa06:	e000      	b.n	800fa0a <tx_control+0x1a82>
				goto chk_est1_b6;
 800fa08:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState(Plantilla[logicos2],funReleDesh)){
 800fa0a:	4b75      	ldr	r3, [pc, #468]	@ (800fbe0 <tx_control+0x1c58>)
 800fa0c:	225b      	movs	r2, #91	@ 0x5b
 800fa0e:	5c9b      	ldrb	r3, [r3, r2]
 800fa10:	001a      	movs	r2, r3
 800fa12:	2308      	movs	r3, #8
 800fa14:	4013      	ands	r3, r2
 800fa16:	d113      	bne.n	800fa40 <tx_control+0x1ab8>
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800fa18:	4b67      	ldr	r3, [pc, #412]	@ (800fbb8 <tx_control+0x1c30>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	001a      	movs	r2, r3
 800fa1e:	2340      	movs	r3, #64	@ 0x40
 800fa20:	4013      	ands	r3, r2
 800fa22:	d00f      	beq.n	800fa44 <tx_control+0x1abc>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800fa24:	4b66      	ldr	r3, [pc, #408]	@ (800fbc0 <tx_control+0x1c38>)
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	2240      	movs	r2, #64	@ 0x40
 800fa2a:	4053      	eors	r3, r2
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	4b64      	ldr	r3, [pc, #400]	@ (800fbc0 <tx_control+0x1c38>)
 800fa30:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800fa32:	4b64      	ldr	r3, [pc, #400]	@ (800fbc4 <tx_control+0x1c3c>)
 800fa34:	22fa      	movs	r2, #250	@ 0xfa
 800fa36:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800fa38:	4b63      	ldr	r3, [pc, #396]	@ (800fbc8 <tx_control+0x1c40>)
 800fa3a:	2203      	movs	r2, #3
 800fa3c:	701a      	strb	r2, [r3, #0]
 800fa3e:	e002      	b.n	800fa46 <tx_control+0x1abe>
				goto deshTypeAct_05;
 800fa40:	46c0      	nop			@ (mov r8, r8)
 800fa42:	e000      	b.n	800fa46 <tx_control+0x1abe>
				goto chk_est1_b7;
 800fa44:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800fa46:	4b5e      	ldr	r3, [pc, #376]	@ (800fbc0 <tx_control+0x1c38>)
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	001a      	movs	r2, r3
 800fa4c:	4b65      	ldr	r3, [pc, #404]	@ (800fbe4 <tx_control+0x1c5c>)
 800fa4e:	0019      	movs	r1, r3
 800fa50:	0010      	movs	r0, r2
 800fa52:	f7f7 fc45 	bl	80072e0 <wreeprom>
			reeEstado1 = waux;
 800fa56:	4b5a      	ldr	r3, [pc, #360]	@ (800fbc0 <tx_control+0x1c38>)
 800fa58:	781a      	ldrb	r2, [r3, #0]
 800fa5a:	4b58      	ldr	r3, [pc, #352]	@ (800fbbc <tx_control+0x1c34>)
 800fa5c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fa5e:	4b42      	ldr	r3, [pc, #264]	@ (800fb68 <tx_control+0x1be0>)
 800fa60:	22f1      	movs	r2, #241	@ 0xf1
 800fa62:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fa64:	4b40      	ldr	r3, [pc, #256]	@ (800fb68 <tx_control+0x1be0>)
 800fa66:	223d      	movs	r2, #61	@ 0x3d
 800fa68:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800fa6a:	e005      	b.n	800fa78 <tx_control+0x1af0>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fa6c:	4b3e      	ldr	r3, [pc, #248]	@ (800fb68 <tx_control+0x1be0>)
 800fa6e:	22f1      	movs	r2, #241	@ 0xf1
 800fa70:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fa72:	4b3d      	ldr	r3, [pc, #244]	@ (800fb68 <tx_control+0x1be0>)
 800fa74:	223d      	movs	r2, #61	@ 0x3d
 800fa76:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800fa78:	4b3a      	ldr	r3, [pc, #232]	@ (800fb64 <tx_control+0x1bdc>)
 800fa7a:	4a3b      	ldr	r2, [pc, #236]	@ (800fb68 <tx_control+0x1be0>)
 800fa7c:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800fa7e:	4b3b      	ldr	r3, [pc, #236]	@ (800fb6c <tx_control+0x1be4>)
 800fa80:	4a39      	ldr	r2, [pc, #228]	@ (800fb68 <tx_control+0x1be0>)
 800fa82:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800fa84:	4b3a      	ldr	r3, [pc, #232]	@ (800fb70 <tx_control+0x1be8>)
 800fa86:	4a3b      	ldr	r2, [pc, #236]	@ (800fb74 <tx_control+0x1bec>)
 800fa88:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800fa8a:	4b3b      	ldr	r3, [pc, #236]	@ (800fb78 <tx_control+0x1bf0>)
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800fa90:	4b3a      	ldr	r3, [pc, #232]	@ (800fb7c <tx_control+0x1bf4>)
 800fa92:	2201      	movs	r2, #1
 800fa94:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fa96:	4b3a      	ldr	r3, [pc, #232]	@ (800fb80 <tx_control+0x1bf8>)
 800fa98:	2255      	movs	r2, #85	@ 0x55
 800fa9a:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800fa9c:	4b2b      	ldr	r3, [pc, #172]	@ (800fb4c <tx_control+0x1bc4>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800faa2:	e318      	b.n	80100d6 <tx_control+0x214e>
			estado1[k] = ((estado1_Aux>>k) & 0x1);
 800faa4:	1cfb      	adds	r3, r7, #3
 800faa6:	781a      	ldrb	r2, [r3, #0]
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	411a      	asrs	r2, r3
 800faac:	0013      	movs	r3, r2
 800faae:	2201      	movs	r2, #1
 800fab0:	4013      	ands	r3, r2
 800fab2:	1e5a      	subs	r2, r3, #1
 800fab4:	4193      	sbcs	r3, r2
 800fab6:	b2d9      	uxtb	r1, r3
 800fab8:	4a48      	ldr	r2, [pc, #288]	@ (800fbdc <tx_control+0x1c54>)
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	18d3      	adds	r3, r2, r3
 800fabe:	1c0a      	adds	r2, r1, #0
 800fac0:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	3301      	adds	r3, #1
 800fac6:	61fb      	str	r3, [r7, #28]
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	2b07      	cmp	r3, #7
 800facc:	ddea      	ble.n	800faa4 <tx_control+0x1b1c>
estado1_b1:
 800face:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800fad0:	4b42      	ldr	r3, [pc, #264]	@ (800fbdc <tx_control+0x1c54>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800fad6:	4b44      	ldr	r3, [pc, #272]	@ (800fbe8 <tx_control+0x1c60>)
 800fad8:	78db      	ldrb	r3, [r3, #3]
 800fada:	2201      	movs	r2, #1
 800fadc:	4053      	eors	r3, r2
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d103      	bne.n	800faec <tx_control+0x1b64>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800fae4:	4b3d      	ldr	r3, [pc, #244]	@ (800fbdc <tx_control+0x1c54>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	705a      	strb	r2, [r3, #1]
 800faea:	e000      	b.n	800faee <tx_control+0x1b66>
			goto estado1_b2;
 800faec:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800faee:	4b3b      	ldr	r3, [pc, #236]	@ (800fbdc <tx_control+0x1c54>)
 800faf0:	2200      	movs	r2, #0
 800faf2:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800faf4:	4b3d      	ldr	r3, [pc, #244]	@ (800fbec <tx_control+0x1c64>)
 800faf6:	789b      	ldrb	r3, [r3, #2]
 800faf8:	2201      	movs	r2, #1
 800fafa:	4053      	eors	r3, r2
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d103      	bne.n	800fb0a <tx_control+0x1b82>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800fb02:	4b36      	ldr	r3, [pc, #216]	@ (800fbdc <tx_control+0x1c54>)
 800fb04:	2201      	movs	r2, #1
 800fb06:	709a      	strb	r2, [r3, #2]
 800fb08:	e000      	b.n	800fb0c <tx_control+0x1b84>
			goto estado1_b3;
 800fb0a:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800fb0c:	4b33      	ldr	r3, [pc, #204]	@ (800fbdc <tx_control+0x1c54>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800fb12:	4b2e      	ldr	r3, [pc, #184]	@ (800fbcc <tx_control+0x1c44>)
 800fb14:	789b      	ldrb	r3, [r3, #2]
 800fb16:	2201      	movs	r2, #1
 800fb18:	4053      	eors	r3, r2
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d103      	bne.n	800fb28 <tx_control+0x1ba0>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800fb20:	4b2e      	ldr	r3, [pc, #184]	@ (800fbdc <tx_control+0x1c54>)
 800fb22:	2201      	movs	r2, #1
 800fb24:	70da      	strb	r2, [r3, #3]
 800fb26:	e000      	b.n	800fb2a <tx_control+0x1ba2>
			goto estado1_b4;
 800fb28:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800fb2a:	4b2c      	ldr	r3, [pc, #176]	@ (800fbdc <tx_control+0x1c54>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800fb30:	4b2f      	ldr	r3, [pc, #188]	@ (800fbf0 <tx_control+0x1c68>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	2201      	movs	r2, #1
 800fb36:	4053      	eors	r3, r2
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d15a      	bne.n	800fbf4 <tx_control+0x1c6c>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800fb3e:	4b27      	ldr	r3, [pc, #156]	@ (800fbdc <tx_control+0x1c54>)
 800fb40:	2201      	movs	r2, #1
 800fb42:	715a      	strb	r2, [r3, #5]
 800fb44:	e057      	b.n	800fbf6 <tx_control+0x1c6e>
 800fb46:	46c0      	nop			@ (mov r8, r8)
 800fb48:	20001fd0 	.word	0x20001fd0
 800fb4c:	20001f18 	.word	0x20001f18
 800fb50:	200021d7 	.word	0x200021d7
 800fb54:	20000274 	.word	0x20000274
 800fb58:	08020000 	.word	0x08020000
 800fb5c:	20000270 	.word	0x20000270
 800fb60:	20000278 	.word	0x20000278
 800fb64:	20001f08 	.word	0x20001f08
 800fb68:	20001ea8 	.word	0x20001ea8
 800fb6c:	20001f00 	.word	0x20001f00
 800fb70:	20001f04 	.word	0x20001f04
 800fb74:	20001ea9 	.word	0x20001ea9
 800fb78:	20001f24 	.word	0x20001f24
 800fb7c:	20001f10 	.word	0x20001f10
 800fb80:	20001f0d 	.word	0x20001f0d
 800fb84:	20000e98 	.word	0x20000e98
 800fb88:	20000e99 	.word	0x20000e99
 800fb8c:	20000e9a 	.word	0x20000e9a
 800fb90:	20000e9b 	.word	0x20000e9b
 800fb94:	20000e90 	.word	0x20000e90
 800fb98:	20000d78 	.word	0x20000d78
 800fb9c:	20000e8c 	.word	0x20000e8c
 800fba0:	0803c000 	.word	0x0803c000
 800fba4:	20000e86 	.word	0x20000e86
 800fba8:	20000df8 	.word	0x20000df8
 800fbac:	08037000 	.word	0x08037000
 800fbb0:	20001fbc 	.word	0x20001fbc
 800fbb4:	200009e8 	.word	0x200009e8
 800fbb8:	20000bb7 	.word	0x20000bb7
 800fbbc:	200001ba 	.word	0x200001ba
 800fbc0:	20000bb6 	.word	0x20000bb6
 800fbc4:	20002158 	.word	0x20002158
 800fbc8:	20002159 	.word	0x20002159
 800fbcc:	20000c9c 	.word	0x20000c9c
 800fbd0:	20000c90 	.word	0x20000c90
 800fbd4:	20000c92 	.word	0x20000c92
 800fbd8:	20000c22 	.word	0x20000c22
 800fbdc:	20002138 	.word	0x20002138
 800fbe0:	200000b8 	.word	0x200000b8
 800fbe4:	0803f803 	.word	0x0803f803
 800fbe8:	20000bd8 	.word	0x20000bd8
 800fbec:	20000c04 	.word	0x20000c04
 800fbf0:	2000208c 	.word	0x2000208c
			goto estado1_b6;
 800fbf4:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800fbf6:	4bf6      	ldr	r3, [pc, #984]	@ (800ffd0 <tx_control+0x2048>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800fbfc:	4bf5      	ldr	r3, [pc, #980]	@ (800ffd4 <tx_control+0x204c>)
 800fbfe:	785b      	ldrb	r3, [r3, #1]
 800fc00:	2201      	movs	r2, #1
 800fc02:	4053      	eors	r3, r2
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d103      	bne.n	800fc12 <tx_control+0x1c8a>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800fc0a:	4bf1      	ldr	r3, [pc, #964]	@ (800ffd0 <tx_control+0x2048>)
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	719a      	strb	r2, [r3, #6]
 800fc10:	e000      	b.n	800fc14 <tx_control+0x1c8c>
			goto estado1_b7;
 800fc12:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800fc14:	4bf0      	ldr	r3, [pc, #960]	@ (800ffd8 <tx_control+0x2050>)
 800fc16:	2204      	movs	r2, #4
 800fc18:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800fc1a:	4bf0      	ldr	r3, [pc, #960]	@ (800ffdc <tx_control+0x2054>)
 800fc1c:	227b      	movs	r2, #123	@ 0x7b
 800fc1e:	5c9a      	ldrb	r2, [r3, r2]
 800fc20:	4bef      	ldr	r3, [pc, #956]	@ (800ffe0 <tx_control+0x2058>)
 800fc22:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800fc24:	4bed      	ldr	r3, [pc, #948]	@ (800ffdc <tx_control+0x2054>)
 800fc26:	227c      	movs	r2, #124	@ 0x7c
 800fc28:	5c9a      	ldrb	r2, [r3, r2]
 800fc2a:	4bed      	ldr	r3, [pc, #948]	@ (800ffe0 <tx_control+0x2058>)
 800fc2c:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800fc2e:	4bec      	ldr	r3, [pc, #944]	@ (800ffe0 <tx_control+0x2058>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800fc34:	4bea      	ldr	r3, [pc, #936]	@ (800ffe0 <tx_control+0x2058>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800fc3a:	4be9      	ldr	r3, [pc, #932]	@ (800ffe0 <tx_control+0x2058>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800fc40:	4be7      	ldr	r3, [pc, #924]	@ (800ffe0 <tx_control+0x2058>)
 800fc42:	2201      	movs	r2, #1
 800fc44:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800fc46:	4be6      	ldr	r3, [pc, #920]	@ (800ffe0 <tx_control+0x2058>)
 800fc48:	2205      	movs	r2, #5
 800fc4a:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800fc4c:	4be2      	ldr	r3, [pc, #904]	@ (800ffd8 <tx_control+0x2050>)
 800fc4e:	781a      	ldrb	r2, [r3, #0]
 800fc50:	4be3      	ldr	r3, [pc, #908]	@ (800ffe0 <tx_control+0x2058>)
 800fc52:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800fc54:	4be3      	ldr	r3, [pc, #908]	@ (800ffe4 <tx_control+0x205c>)
 800fc56:	2201      	movs	r2, #1
 800fc58:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800fc5a:	4be3      	ldr	r3, [pc, #908]	@ (800ffe8 <tx_control+0x2060>)
 800fc5c:	2208      	movs	r2, #8
 800fc5e:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800fc60:	4ae2      	ldr	r2, [pc, #904]	@ (800ffec <tx_control+0x2064>)
 800fc62:	4bdf      	ldr	r3, [pc, #892]	@ (800ffe0 <tx_control+0x2058>)
 800fc64:	0011      	movs	r1, r2
 800fc66:	0018      	movs	r0, r3
 800fc68:	f7f7 f9e2 	bl	8007030 <copyVector>
		bufferTxControl[8] = 0;
 800fc6c:	4bdf      	ldr	r3, [pc, #892]	@ (800ffec <tx_control+0x2064>)
 800fc6e:	2200      	movs	r2, #0
 800fc70:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800fc72:	4bde      	ldr	r3, [pc, #888]	@ (800ffec <tx_control+0x2064>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800fc78:	4bdc      	ldr	r3, [pc, #880]	@ (800ffec <tx_control+0x2064>)
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800fc7e:	4bdb      	ldr	r3, [pc, #876]	@ (800ffec <tx_control+0x2064>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fc84:	2300      	movs	r3, #0
 800fc86:	61bb      	str	r3, [r7, #24]
 800fc88:	e03e      	b.n	800fd08 <tx_control+0x1d80>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800fc8a:	4bd8      	ldr	r3, [pc, #864]	@ (800ffec <tx_control+0x2064>)
 800fc8c:	7a1a      	ldrb	r2, [r3, #8]
 800fc8e:	49d0      	ldr	r1, [pc, #832]	@ (800ffd0 <tx_control+0x2048>)
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	18cb      	adds	r3, r1, r3
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	0019      	movs	r1, r3
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	4099      	lsls	r1, r3
 800fc9c:	000b      	movs	r3, r1
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	4313      	orrs	r3, r2
 800fca2:	b2da      	uxtb	r2, r3
 800fca4:	4bd1      	ldr	r3, [pc, #836]	@ (800ffec <tx_control+0x2064>)
 800fca6:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800fca8:	4bd0      	ldr	r3, [pc, #832]	@ (800ffec <tx_control+0x2064>)
 800fcaa:	7a5a      	ldrb	r2, [r3, #9]
 800fcac:	49d0      	ldr	r1, [pc, #832]	@ (800fff0 <tx_control+0x2068>)
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	18cb      	adds	r3, r1, r3
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	0019      	movs	r1, r3
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	4099      	lsls	r1, r3
 800fcba:	000b      	movs	r3, r1
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	4bca      	ldr	r3, [pc, #808]	@ (800ffec <tx_control+0x2064>)
 800fcc4:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800fcc6:	4bc9      	ldr	r3, [pc, #804]	@ (800ffec <tx_control+0x2064>)
 800fcc8:	7a9a      	ldrb	r2, [r3, #10]
 800fcca:	49ca      	ldr	r1, [pc, #808]	@ (800fff4 <tx_control+0x206c>)
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	18cb      	adds	r3, r1, r3
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	0019      	movs	r1, r3
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	4099      	lsls	r1, r3
 800fcd8:	000b      	movs	r3, r1
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	4bc2      	ldr	r3, [pc, #776]	@ (800ffec <tx_control+0x2064>)
 800fce2:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800fce4:	4bc1      	ldr	r3, [pc, #772]	@ (800ffec <tx_control+0x2064>)
 800fce6:	7ada      	ldrb	r2, [r3, #11]
 800fce8:	49c3      	ldr	r1, [pc, #780]	@ (800fff8 <tx_control+0x2070>)
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	18cb      	adds	r3, r1, r3
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	0019      	movs	r1, r3
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	4099      	lsls	r1, r3
 800fcf6:	000b      	movs	r3, r1
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	b2da      	uxtb	r2, r3
 800fcfe:	4bbb      	ldr	r3, [pc, #748]	@ (800ffec <tx_control+0x2064>)
 800fd00:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fd02:	69bb      	ldr	r3, [r7, #24]
 800fd04:	3301      	adds	r3, #1
 800fd06:	61bb      	str	r3, [r7, #24]
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	2b07      	cmp	r3, #7
 800fd0c:	ddbd      	ble.n	800fc8a <tx_control+0x1d02>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fd0e:	4bbb      	ldr	r3, [pc, #748]	@ (800fffc <tx_control+0x2074>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800fd14:	4bb4      	ldr	r3, [pc, #720]	@ (800ffe8 <tx_control+0x2060>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800fd1a:	4bb9      	ldr	r3, [pc, #740]	@ (8010000 <tx_control+0x2078>)
 800fd1c:	220c      	movs	r2, #12
 800fd1e:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800fd20:	4bb7      	ldr	r3, [pc, #732]	@ (8010000 <tx_control+0x2078>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	001a      	movs	r2, r3
 800fd26:	4bb1      	ldr	r3, [pc, #708]	@ (800ffec <tx_control+0x2064>)
 800fd28:	0011      	movs	r1, r2
 800fd2a:	0018      	movs	r0, r3
 800fd2c:	f7f7 f932 	bl	8006f94 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800fd30:	4bb2      	ldr	r3, [pc, #712]	@ (800fffc <tx_control+0x2074>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	0e1b      	lsrs	r3, r3, #24
 800fd36:	b2da      	uxtb	r2, r3
 800fd38:	4bac      	ldr	r3, [pc, #688]	@ (800ffec <tx_control+0x2064>)
 800fd3a:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800fd3c:	4baf      	ldr	r3, [pc, #700]	@ (800fffc <tx_control+0x2074>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	0c1b      	lsrs	r3, r3, #16
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	4ba9      	ldr	r3, [pc, #676]	@ (800ffec <tx_control+0x2064>)
 800fd46:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800fd48:	4bac      	ldr	r3, [pc, #688]	@ (800fffc <tx_control+0x2074>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	0a1b      	lsrs	r3, r3, #8
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	4ba6      	ldr	r3, [pc, #664]	@ (800ffec <tx_control+0x2064>)
 800fd52:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800fd54:	4ba9      	ldr	r3, [pc, #676]	@ (800fffc <tx_control+0x2074>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	b2da      	uxtb	r2, r3
 800fd5a:	4ba4      	ldr	r3, [pc, #656]	@ (800ffec <tx_control+0x2064>)
 800fd5c:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800fd5e:	4ba9      	ldr	r3, [pc, #676]	@ (8010004 <tx_control+0x207c>)
 800fd60:	4aa2      	ldr	r2, [pc, #648]	@ (800ffec <tx_control+0x2064>)
 800fd62:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800fd64:	4ba8      	ldr	r3, [pc, #672]	@ (8010008 <tx_control+0x2080>)
 800fd66:	4aa1      	ldr	r2, [pc, #644]	@ (800ffec <tx_control+0x2064>)
 800fd68:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800fd6a:	4ba8      	ldr	r3, [pc, #672]	@ (801000c <tx_control+0x2084>)
 800fd6c:	4aa8      	ldr	r2, [pc, #672]	@ (8010010 <tx_control+0x2088>)
 800fd6e:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800fd70:	4b99      	ldr	r3, [pc, #612]	@ (800ffd8 <tx_control+0x2050>)
 800fd72:	2210      	movs	r2, #16
 800fd74:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fd76:	4b9b      	ldr	r3, [pc, #620]	@ (800ffe4 <tx_control+0x205c>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800fd7c:	4b99      	ldr	r3, [pc, #612]	@ (800ffe4 <tx_control+0x205c>)
 800fd7e:	2201      	movs	r2, #1
 800fd80:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fd82:	4ba4      	ldr	r3, [pc, #656]	@ (8010014 <tx_control+0x208c>)
 800fd84:	2255      	movs	r2, #85	@ 0x55
 800fd86:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800fd88:	4ba3      	ldr	r3, [pc, #652]	@ (8010018 <tx_control+0x2090>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800fd8e:	e1a2      	b.n	80100d6 <tx_control+0x214e>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fd90:	4ba2      	ldr	r3, [pc, #648]	@ (801001c <tx_control+0x2094>)
 800fd92:	22f1      	movs	r2, #241	@ 0xf1
 800fd94:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fd96:	4ba1      	ldr	r3, [pc, #644]	@ (801001c <tx_control+0x2094>)
 800fd98:	223d      	movs	r2, #61	@ 0x3d
 800fd9a:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800fd9c:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800fd9e:	4b99      	ldr	r3, [pc, #612]	@ (8010004 <tx_control+0x207c>)
 800fda0:	4a9e      	ldr	r2, [pc, #632]	@ (801001c <tx_control+0x2094>)
 800fda2:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800fda4:	4b98      	ldr	r3, [pc, #608]	@ (8010008 <tx_control+0x2080>)
 800fda6:	4a9d      	ldr	r2, [pc, #628]	@ (801001c <tx_control+0x2094>)
 800fda8:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800fdaa:	4b98      	ldr	r3, [pc, #608]	@ (801000c <tx_control+0x2084>)
 800fdac:	4a9c      	ldr	r2, [pc, #624]	@ (8010020 <tx_control+0x2098>)
 800fdae:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800fdb0:	4b89      	ldr	r3, [pc, #548]	@ (800ffd8 <tx_control+0x2050>)
 800fdb2:	2202      	movs	r2, #2
 800fdb4:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800fdb6:	4b8b      	ldr	r3, [pc, #556]	@ (800ffe4 <tx_control+0x205c>)
 800fdb8:	2201      	movs	r2, #1
 800fdba:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fdbc:	4b95      	ldr	r3, [pc, #596]	@ (8010014 <tx_control+0x208c>)
 800fdbe:	2255      	movs	r2, #85	@ 0x55
 800fdc0:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800fdc2:	4b95      	ldr	r3, [pc, #596]	@ (8010018 <tx_control+0x2090>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800fdc8:	e185      	b.n	80100d6 <tx_control+0x214e>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800fdca:	4b96      	ldr	r3, [pc, #600]	@ (8010024 <tx_control+0x209c>)
 800fdcc:	789b      	ldrb	r3, [r3, #2]
 800fdce:	001a      	movs	r2, r3
 800fdd0:	4b95      	ldr	r3, [pc, #596]	@ (8010028 <tx_control+0x20a0>)
 800fdd2:	0019      	movs	r1, r3
 800fdd4:	0010      	movs	r0, r2
 800fdd6:	f7f7 fa83 	bl	80072e0 <wreeprom>
			reeLat1 = RxBuffer_Ble[2];
 800fdda:	4b92      	ldr	r3, [pc, #584]	@ (8010024 <tx_control+0x209c>)
 800fddc:	789a      	ldrb	r2, [r3, #2]
 800fdde:	4b93      	ldr	r3, [pc, #588]	@ (801002c <tx_control+0x20a4>)
 800fde0:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800fde2:	4b90      	ldr	r3, [pc, #576]	@ (8010024 <tx_control+0x209c>)
 800fde4:	78db      	ldrb	r3, [r3, #3]
 800fde6:	001a      	movs	r2, r3
 800fde8:	4b91      	ldr	r3, [pc, #580]	@ (8010030 <tx_control+0x20a8>)
 800fdea:	0019      	movs	r1, r3
 800fdec:	0010      	movs	r0, r2
 800fdee:	f7f7 fa77 	bl	80072e0 <wreeprom>
			reeLat2 = RxBuffer_Ble[3];
 800fdf2:	4b8c      	ldr	r3, [pc, #560]	@ (8010024 <tx_control+0x209c>)
 800fdf4:	78da      	ldrb	r2, [r3, #3]
 800fdf6:	4b8f      	ldr	r3, [pc, #572]	@ (8010034 <tx_control+0x20ac>)
 800fdf8:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800fdfa:	4b8a      	ldr	r3, [pc, #552]	@ (8010024 <tx_control+0x209c>)
 800fdfc:	791b      	ldrb	r3, [r3, #4]
 800fdfe:	001a      	movs	r2, r3
 800fe00:	4b8d      	ldr	r3, [pc, #564]	@ (8010038 <tx_control+0x20b0>)
 800fe02:	0019      	movs	r1, r3
 800fe04:	0010      	movs	r0, r2
 800fe06:	f7f7 fa6b 	bl	80072e0 <wreeprom>
			reeLat3 = RxBuffer_Ble[4];
 800fe0a:	4b86      	ldr	r3, [pc, #536]	@ (8010024 <tx_control+0x209c>)
 800fe0c:	791a      	ldrb	r2, [r3, #4]
 800fe0e:	4b8b      	ldr	r3, [pc, #556]	@ (801003c <tx_control+0x20b4>)
 800fe10:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800fe12:	4b84      	ldr	r3, [pc, #528]	@ (8010024 <tx_control+0x209c>)
 800fe14:	795b      	ldrb	r3, [r3, #5]
 800fe16:	001a      	movs	r2, r3
 800fe18:	4b89      	ldr	r3, [pc, #548]	@ (8010040 <tx_control+0x20b8>)
 800fe1a:	0019      	movs	r1, r3
 800fe1c:	0010      	movs	r0, r2
 800fe1e:	f7f7 fa5f 	bl	80072e0 <wreeprom>
			reeLat4 = RxBuffer_Ble[5];
 800fe22:	4b80      	ldr	r3, [pc, #512]	@ (8010024 <tx_control+0x209c>)
 800fe24:	795a      	ldrb	r2, [r3, #5]
 800fe26:	4b87      	ldr	r3, [pc, #540]	@ (8010044 <tx_control+0x20bc>)
 800fe28:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800fe2a:	4b7e      	ldr	r3, [pc, #504]	@ (8010024 <tx_control+0x209c>)
 800fe2c:	799b      	ldrb	r3, [r3, #6]
 800fe2e:	001a      	movs	r2, r3
 800fe30:	4b85      	ldr	r3, [pc, #532]	@ (8010048 <tx_control+0x20c0>)
 800fe32:	0019      	movs	r1, r3
 800fe34:	0010      	movs	r0, r2
 800fe36:	f7f7 fa53 	bl	80072e0 <wreeprom>
			reeLong1 = RxBuffer_Ble[6];
 800fe3a:	4b7a      	ldr	r3, [pc, #488]	@ (8010024 <tx_control+0x209c>)
 800fe3c:	799a      	ldrb	r2, [r3, #6]
 800fe3e:	4b83      	ldr	r3, [pc, #524]	@ (801004c <tx_control+0x20c4>)
 800fe40:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800fe42:	4b78      	ldr	r3, [pc, #480]	@ (8010024 <tx_control+0x209c>)
 800fe44:	79db      	ldrb	r3, [r3, #7]
 800fe46:	001a      	movs	r2, r3
 800fe48:	4b81      	ldr	r3, [pc, #516]	@ (8010050 <tx_control+0x20c8>)
 800fe4a:	0019      	movs	r1, r3
 800fe4c:	0010      	movs	r0, r2
 800fe4e:	f7f7 fa47 	bl	80072e0 <wreeprom>
			reeLong2 = RxBuffer_Ble[7];
 800fe52:	4b74      	ldr	r3, [pc, #464]	@ (8010024 <tx_control+0x209c>)
 800fe54:	79da      	ldrb	r2, [r3, #7]
 800fe56:	4b7f      	ldr	r3, [pc, #508]	@ (8010054 <tx_control+0x20cc>)
 800fe58:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800fe5a:	4b72      	ldr	r3, [pc, #456]	@ (8010024 <tx_control+0x209c>)
 800fe5c:	7a1b      	ldrb	r3, [r3, #8]
 800fe5e:	001a      	movs	r2, r3
 800fe60:	4b7d      	ldr	r3, [pc, #500]	@ (8010058 <tx_control+0x20d0>)
 800fe62:	0019      	movs	r1, r3
 800fe64:	0010      	movs	r0, r2
 800fe66:	f7f7 fa3b 	bl	80072e0 <wreeprom>
			reeLong3 = RxBuffer_Ble[8];
 800fe6a:	4b6e      	ldr	r3, [pc, #440]	@ (8010024 <tx_control+0x209c>)
 800fe6c:	7a1a      	ldrb	r2, [r3, #8]
 800fe6e:	4b7b      	ldr	r3, [pc, #492]	@ (801005c <tx_control+0x20d4>)
 800fe70:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 800fe72:	4b6c      	ldr	r3, [pc, #432]	@ (8010024 <tx_control+0x209c>)
 800fe74:	7a5b      	ldrb	r3, [r3, #9]
 800fe76:	001a      	movs	r2, r3
 800fe78:	4b79      	ldr	r3, [pc, #484]	@ (8010060 <tx_control+0x20d8>)
 800fe7a:	0019      	movs	r1, r3
 800fe7c:	0010      	movs	r0, r2
 800fe7e:	f7f7 fa2f 	bl	80072e0 <wreeprom>
			reeLong4 = RxBuffer_Ble[9];
 800fe82:	4b68      	ldr	r3, [pc, #416]	@ (8010024 <tx_control+0x209c>)
 800fe84:	7a5a      	ldrb	r2, [r3, #9]
 800fe86:	4b77      	ldr	r3, [pc, #476]	@ (8010064 <tx_control+0x20dc>)
 800fe88:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800fe8a:	4b64      	ldr	r3, [pc, #400]	@ (801001c <tx_control+0x2094>)
 800fe8c:	22f1      	movs	r2, #241	@ 0xf1
 800fe8e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fe90:	4b62      	ldr	r3, [pc, #392]	@ (801001c <tx_control+0x2094>)
 800fe92:	223d      	movs	r2, #61	@ 0x3d
 800fe94:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 800fe96:	e005      	b.n	800fea4 <tx_control+0x1f1c>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800fe98:	4b60      	ldr	r3, [pc, #384]	@ (801001c <tx_control+0x2094>)
 800fe9a:	22f1      	movs	r2, #241	@ 0xf1
 800fe9c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800fe9e:	4b5f      	ldr	r3, [pc, #380]	@ (801001c <tx_control+0x2094>)
 800fea0:	223e      	movs	r2, #62	@ 0x3e
 800fea2:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 800fea4:	4b57      	ldr	r3, [pc, #348]	@ (8010004 <tx_control+0x207c>)
 800fea6:	4a5d      	ldr	r2, [pc, #372]	@ (801001c <tx_control+0x2094>)
 800fea8:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800feaa:	4b57      	ldr	r3, [pc, #348]	@ (8010008 <tx_control+0x2080>)
 800feac:	4a5b      	ldr	r2, [pc, #364]	@ (801001c <tx_control+0x2094>)
 800feae:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 800feb0:	4b56      	ldr	r3, [pc, #344]	@ (801000c <tx_control+0x2084>)
 800feb2:	4a5b      	ldr	r2, [pc, #364]	@ (8010020 <tx_control+0x2098>)
 800feb4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 800feb6:	4b48      	ldr	r3, [pc, #288]	@ (800ffd8 <tx_control+0x2050>)
 800feb8:	2202      	movs	r2, #2
 800feba:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 800febc:	4b49      	ldr	r3, [pc, #292]	@ (800ffe4 <tx_control+0x205c>)
 800febe:	2201      	movs	r2, #1
 800fec0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fec2:	4b54      	ldr	r3, [pc, #336]	@ (8010014 <tx_control+0x208c>)
 800fec4:	2255      	movs	r2, #85	@ 0x55
 800fec6:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 800fec8:	4b53      	ldr	r3, [pc, #332]	@ (8010018 <tx_control+0x2090>)
 800feca:	2200      	movs	r2, #0
 800fecc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800fece:	e102      	b.n	80100d6 <tx_control+0x214e>
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 800fed0:	4b54      	ldr	r3, [pc, #336]	@ (8010024 <tx_control+0x209c>)
 800fed2:	789a      	ldrb	r2, [r3, #2]
 800fed4:	4b64      	ldr	r3, [pc, #400]	@ (8010068 <tx_control+0x20e0>)
 800fed6:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 800fed8:	4b52      	ldr	r3, [pc, #328]	@ (8010024 <tx_control+0x209c>)
 800feda:	78da      	ldrb	r2, [r3, #3]
 800fedc:	4b63      	ldr	r3, [pc, #396]	@ (801006c <tx_control+0x20e4>)
 800fede:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 800fee0:	4b50      	ldr	r3, [pc, #320]	@ (8010024 <tx_control+0x209c>)
 800fee2:	791a      	ldrb	r2, [r3, #4]
 800fee4:	4b62      	ldr	r3, [pc, #392]	@ (8010070 <tx_control+0x20e8>)
 800fee6:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 800fee8:	4b4e      	ldr	r3, [pc, #312]	@ (8010024 <tx_control+0x209c>)
 800feea:	795a      	ldrb	r2, [r3, #5]
 800feec:	4b61      	ldr	r3, [pc, #388]	@ (8010074 <tx_control+0x20ec>)
 800feee:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 800fef0:	4b4c      	ldr	r3, [pc, #304]	@ (8010024 <tx_control+0x209c>)
 800fef2:	799a      	ldrb	r2, [r3, #6]
 800fef4:	4b60      	ldr	r3, [pc, #384]	@ (8010078 <tx_control+0x20f0>)
 800fef6:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 800fef8:	4b4a      	ldr	r3, [pc, #296]	@ (8010024 <tx_control+0x209c>)
 800fefa:	79da      	ldrb	r2, [r3, #7]
 800fefc:	4b5f      	ldr	r3, [pc, #380]	@ (801007c <tx_control+0x20f4>)
 800fefe:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 800ff00:	4b48      	ldr	r3, [pc, #288]	@ (8010024 <tx_control+0x209c>)
 800ff02:	7a1a      	ldrb	r2, [r3, #8]
 800ff04:	4b3e      	ldr	r3, [pc, #248]	@ (8010000 <tx_control+0x2078>)
 800ff06:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 800ff08:	4b3d      	ldr	r3, [pc, #244]	@ (8010000 <tx_control+0x2078>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	015b      	lsls	r3, r3, #5
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	4b3b      	ldr	r3, [pc, #236]	@ (8010000 <tx_control+0x2078>)
 800ff12:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 800ff14:	4b3a      	ldr	r3, [pc, #232]	@ (8010000 <tx_control+0x2078>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	b25b      	sxtb	r3, r3
 800ff1a:	221f      	movs	r2, #31
 800ff1c:	4393      	bics	r3, r2
 800ff1e:	b25a      	sxtb	r2, r3
 800ff20:	4b52      	ldr	r3, [pc, #328]	@ (801006c <tx_control+0x20e4>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	b25b      	sxtb	r3, r3
 800ff26:	4313      	orrs	r3, r2
 800ff28:	b25b      	sxtb	r3, r3
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	4b4f      	ldr	r3, [pc, #316]	@ (801006c <tx_control+0x20e4>)
 800ff2e:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 800ff30:	4b3c      	ldr	r3, [pc, #240]	@ (8010024 <tx_control+0x209c>)
 800ff32:	7a5a      	ldrb	r2, [r3, #9]
 800ff34:	4b32      	ldr	r3, [pc, #200]	@ (8010000 <tx_control+0x2078>)
 800ff36:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 800ff38:	4b4e      	ldr	r3, [pc, #312]	@ (8010074 <tx_control+0x20ec>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	2240      	movs	r2, #64	@ 0x40
 800ff3e:	4393      	bics	r3, r2
 800ff40:	b2da      	uxtb	r2, r3
 800ff42:	4b4c      	ldr	r3, [pc, #304]	@ (8010074 <tx_control+0x20ec>)
 800ff44:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 800ff46:	4b48      	ldr	r3, [pc, #288]	@ (8010068 <tx_control+0x20e0>)
 800ff48:	781a      	ldrb	r2, [r3, #0]
 800ff4a:	4b4d      	ldr	r3, [pc, #308]	@ (8010080 <tx_control+0x20f8>)
 800ff4c:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 800ff4e:	4b47      	ldr	r3, [pc, #284]	@ (801006c <tx_control+0x20e4>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	221f      	movs	r2, #31
 800ff54:	4013      	ands	r3, r2
 800ff56:	b2da      	uxtb	r2, r3
 800ff58:	4b49      	ldr	r3, [pc, #292]	@ (8010080 <tx_control+0x20f8>)
 800ff5a:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 800ff5c:	4b44      	ldr	r3, [pc, #272]	@ (8010070 <tx_control+0x20e8>)
 800ff5e:	781a      	ldrb	r2, [r3, #0]
 800ff60:	4b47      	ldr	r3, [pc, #284]	@ (8010080 <tx_control+0x20f8>)
 800ff62:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 800ff64:	4b41      	ldr	r3, [pc, #260]	@ (801006c <tx_control+0x20e4>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	095b      	lsrs	r3, r3, #5
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	4b44      	ldr	r3, [pc, #272]	@ (8010080 <tx_control+0x20f8>)
 800ff6e:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800ff70:	4943      	ldr	r1, [pc, #268]	@ (8010080 <tx_control+0x20f8>)
 800ff72:	4b44      	ldr	r3, [pc, #272]	@ (8010084 <tx_control+0x20fc>)
 800ff74:	2201      	movs	r2, #1
 800ff76:	0018      	movs	r0, r3
 800ff78:	f008 fe4e 	bl	8018c18 <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 800ff7c:	4b3d      	ldr	r3, [pc, #244]	@ (8010074 <tx_control+0x20ec>)
 800ff7e:	781a      	ldrb	r2, [r3, #0]
 800ff80:	4b41      	ldr	r3, [pc, #260]	@ (8010088 <tx_control+0x2100>)
 800ff82:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 800ff84:	4b3c      	ldr	r3, [pc, #240]	@ (8010078 <tx_control+0x20f0>)
 800ff86:	781a      	ldrb	r2, [r3, #0]
 800ff88:	4b3f      	ldr	r3, [pc, #252]	@ (8010088 <tx_control+0x2100>)
 800ff8a:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 800ff8c:	4b3b      	ldr	r3, [pc, #236]	@ (801007c <tx_control+0x20f4>)
 800ff8e:	781a      	ldrb	r2, [r3, #0]
 800ff90:	4b3d      	ldr	r3, [pc, #244]	@ (8010088 <tx_control+0x2100>)
 800ff92:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 800ff94:	4b23      	ldr	r3, [pc, #140]	@ (8010024 <tx_control+0x209c>)
 800ff96:	7a5a      	ldrb	r2, [r3, #9]
 800ff98:	4b3b      	ldr	r3, [pc, #236]	@ (8010088 <tx_control+0x2100>)
 800ff9a:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ff9c:	4b3a      	ldr	r3, [pc, #232]	@ (8010088 <tx_control+0x2100>)
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800ffa2:	4b39      	ldr	r3, [pc, #228]	@ (8010088 <tx_control+0x2100>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 800ffa8:	4937      	ldr	r1, [pc, #220]	@ (8010088 <tx_control+0x2100>)
 800ffaa:	4b36      	ldr	r3, [pc, #216]	@ (8010084 <tx_control+0x20fc>)
 800ffac:	2201      	movs	r2, #1
 800ffae:	0018      	movs	r0, r3
 800ffb0:	f008 fd0e 	bl	80189d0 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 800ffb4:	4b31      	ldr	r3, [pc, #196]	@ (801007c <tx_control+0x20f4>)
 800ffb6:	781a      	ldrb	r2, [r3, #0]
 800ffb8:	4b34      	ldr	r3, [pc, #208]	@ (801008c <tx_control+0x2104>)
 800ffba:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 800ffbc:	4b34      	ldr	r3, [pc, #208]	@ (8010090 <tx_control+0x2108>)
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800ffc2:	4b16      	ldr	r3, [pc, #88]	@ (801001c <tx_control+0x2094>)
 800ffc4:	22f1      	movs	r2, #241	@ 0xf1
 800ffc6:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ffc8:	4b14      	ldr	r3, [pc, #80]	@ (801001c <tx_control+0x2094>)
 800ffca:	223d      	movs	r2, #61	@ 0x3d
 800ffcc:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 800ffce:	e067      	b.n	80100a0 <tx_control+0x2118>
 800ffd0:	20002138 	.word	0x20002138
 800ffd4:	20000c04 	.word	0x20000c04
 800ffd8:	20001f24 	.word	0x20001f24
 800ffdc:	200000b8 	.word	0x200000b8
 800ffe0:	20001ecc 	.word	0x20001ecc
 800ffe4:	20001f10 	.word	0x20001f10
 800ffe8:	20000bb7 	.word	0x20000bb7
 800ffec:	2000209c 	.word	0x2000209c
 800fff0:	20002140 	.word	0x20002140
 800fff4:	20002148 	.word	0x20002148
 800fff8:	20002150 	.word	0x20002150
 800fffc:	20001f28 	.word	0x20001f28
 8010000:	20000bb6 	.word	0x20000bb6
 8010004:	20001f08 	.word	0x20001f08
 8010008:	20001f00 	.word	0x20001f00
 801000c:	20001f04 	.word	0x20001f04
 8010010:	200020ac 	.word	0x200020ac
 8010014:	20001f0d 	.word	0x20001f0d
 8010018:	20001f18 	.word	0x20001f18
 801001c:	20001ea8 	.word	0x20001ea8
 8010020:	20001ea9 	.word	0x20001ea9
 8010024:	200009e8 	.word	0x200009e8
 8010028:	0803f808 	.word	0x0803f808
 801002c:	200001bb 	.word	0x200001bb
 8010030:	0803f809 	.word	0x0803f809
 8010034:	200001bc 	.word	0x200001bc
 8010038:	0803f80a 	.word	0x0803f80a
 801003c:	200001bd 	.word	0x200001bd
 8010040:	0803f80b 	.word	0x0803f80b
 8010044:	200001be 	.word	0x200001be
 8010048:	0803f80c 	.word	0x0803f80c
 801004c:	200001bf 	.word	0x200001bf
 8010050:	0803f80d 	.word	0x0803f80d
 8010054:	200001c0 	.word	0x200001c0
 8010058:	0803f80e 	.word	0x0803f80e
 801005c:	200001c1 	.word	0x200001c1
 8010060:	0803f80f 	.word	0x0803f80f
 8010064:	200001c2 	.word	0x200001c2
 8010068:	20002164 	.word	0x20002164
 801006c:	20002165 	.word	0x20002165
 8010070:	20002166 	.word	0x20002166
 8010074:	20002167 	.word	0x20002167
 8010078:	20002168 	.word	0x20002168
 801007c:	20002169 	.word	0x20002169
 8010080:	20002180 	.word	0x20002180
 8010084:	20000578 	.word	0x20000578
 8010088:	2000216c 	.word	0x2000216c
 801008c:	200021d8 	.word	0x200021d8
 8010090:	2000215c 	.word	0x2000215c
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 8010094:	4bd2      	ldr	r3, [pc, #840]	@ (80103e0 <tx_control+0x2458>)
 8010096:	22f1      	movs	r2, #241	@ 0xf1
 8010098:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 801009a:	4bd1      	ldr	r3, [pc, #836]	@ (80103e0 <tx_control+0x2458>)
 801009c:	223e      	movs	r2, #62	@ 0x3e
 801009e:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 80100a0:	4bd0      	ldr	r3, [pc, #832]	@ (80103e4 <tx_control+0x245c>)
 80100a2:	4acf      	ldr	r2, [pc, #828]	@ (80103e0 <tx_control+0x2458>)
 80100a4:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 80100a6:	4bd0      	ldr	r3, [pc, #832]	@ (80103e8 <tx_control+0x2460>)
 80100a8:	4acd      	ldr	r2, [pc, #820]	@ (80103e0 <tx_control+0x2458>)
 80100aa:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 80100ac:	4bcf      	ldr	r3, [pc, #828]	@ (80103ec <tx_control+0x2464>)
 80100ae:	4ad0      	ldr	r2, [pc, #832]	@ (80103f0 <tx_control+0x2468>)
 80100b0:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 80100b2:	4bd0      	ldr	r3, [pc, #832]	@ (80103f4 <tx_control+0x246c>)
 80100b4:	2202      	movs	r2, #2
 80100b6:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 80100b8:	4bcf      	ldr	r3, [pc, #828]	@ (80103f8 <tx_control+0x2470>)
 80100ba:	2201      	movs	r2, #1
 80100bc:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 80100be:	4bcf      	ldr	r3, [pc, #828]	@ (80103fc <tx_control+0x2474>)
 80100c0:	2255      	movs	r2, #85	@ 0x55
 80100c2:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 80100c4:	4bce      	ldr	r3, [pc, #824]	@ (8010400 <tx_control+0x2478>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 80100ca:	e004      	b.n	80100d6 <tx_control+0x214e>
		goto end_tx_control;
 80100cc:	46c0      	nop			@ (mov r8, r8)
 80100ce:	e002      	b.n	80100d6 <tx_control+0x214e>
		goto end_tx_control;//	jp end_tx_control
 80100d0:	46c0      	nop			@ (mov r8, r8)
 80100d2:	e000      	b.n	80100d6 <tx_control+0x214e>
			goto end_tx_control;		//jp		end_tx_control
 80100d4:	46c0      	nop			@ (mov r8, r8)
		if (keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 80100d6:	4bc9      	ldr	r3, [pc, #804]	@ (80103fc <tx_control+0x2474>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d11b      	bne.n	8010116 <tx_control+0x218e>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 80100de:	4bc9      	ldr	r3, [pc, #804]	@ (8010404 <tx_control+0x247c>)
 80100e0:	791b      	ldrb	r3, [r3, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	4053      	eors	r3, r2
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d103      	bne.n	80100f4 <tx_control+0x216c>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 80100ec:	4bc6      	ldr	r3, [pc, #792]	@ (8010408 <tx_control+0x2480>)
 80100ee:	22aa      	movs	r2, #170	@ 0xaa
 80100f0:	701a      	strb	r2, [r3, #0]
 80100f2:	e000      	b.n	80100f6 <tx_control+0x216e>
			goto ask_resetLoopTx;
 80100f4:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 80100f6:	4bc5      	ldr	r3, [pc, #788]	@ (801040c <tx_control+0x2484>)
 80100f8:	791b      	ldrb	r3, [r3, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d109      	bne.n	8010112 <tx_control+0x218a>
resetLoopTx:
 80100fe:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 8010100:	4bbd      	ldr	r3, [pc, #756]	@ (80103f8 <tx_control+0x2470>)
 8010102:	795b      	ldrb	r3, [r3, #5]
 8010104:	2201      	movs	r2, #1
 8010106:	4053      	eors	r3, r2
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	d106      	bne.n	801011c <tx_control+0x2194>
		asm ("nop");
 801010e:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 8010110:	e7f6      	b.n	8010100 <tx_control+0x2178>
		asm ("nop");
 8010112:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx_2;
 8010114:	e7fd      	b.n	8010112 <tx_control+0x218a>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 8010116:	46c0      	nop			@ (mov r8, r8)
 8010118:	f001 f867 	bl	80111ea <tx_control+0x3262>
			goto no_resetLoopTx;
 801011c:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 801011e:	f001 f864 	bl	80111ea <tx_control+0x3262>
			goto tx_wifi_01;
 8010122:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;//jp			end_tx_wifi
tx_wifi_01:
		//;  Pregunta por el estado de la conexión a Servidor
		if(flagsTxControl[f_statWIFI])//btjt		flagsTxControl,#f_statWIFI,tx_wifi_OK
 8010124:	4bba      	ldr	r3, [pc, #744]	@ (8010410 <tx_control+0x2488>)
 8010126:	789b      	ldrb	r3, [r3, #2]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d119      	bne.n	8010160 <tx_control+0x21d8>
			goto tx_wifi_OK;
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 801012c:	4bb9      	ldr	r3, [pc, #740]	@ (8010414 <tx_control+0x248c>)
 801012e:	2200      	movs	r2, #0
 8010130:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 8010132:	4bb8      	ldr	r3, [pc, #736]	@ (8010414 <tx_control+0x248c>)
 8010134:	2200      	movs	r2, #0
 8010136:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 8010138:	4bb6      	ldr	r3, [pc, #728]	@ (8010414 <tx_control+0x248c>)
 801013a:	2200      	movs	r2, #0
 801013c:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 801013e:	4bb5      	ldr	r3, [pc, #724]	@ (8010414 <tx_control+0x248c>)
 8010140:	2200      	movs	r2, #0
 8010142:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 8010144:	4bb3      	ldr	r3, [pc, #716]	@ (8010414 <tx_control+0x248c>)
 8010146:	2200      	movs	r2, #0
 8010148:	711a      	strb	r2, [r3, #4]
		cntRegTxWifi = 0;
 801014a:	4bb3      	ldr	r3, [pc, #716]	@ (8010418 <tx_control+0x2490>)
 801014c:	2200      	movs	r2, #0
 801014e:	801a      	strh	r2, [r3, #0]
		blockLoggWifi = 0;
 8010150:	4bb2      	ldr	r3, [pc, #712]	@ (801041c <tx_control+0x2494>)
 8010152:	2200      	movs	r2, #0
 8010154:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;
 8010156:	4bb2      	ldr	r3, [pc, #712]	@ (8010420 <tx_control+0x2498>)
 8010158:	2200      	movs	r2, #0
 801015a:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp			end_tx_wifi
 801015c:	f001 f842 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_OK;
 8010160:	46c0      	nop			@ (mov r8, r8)

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 8010162:	4bac      	ldr	r3, [pc, #688]	@ (8010414 <tx_control+0x248c>)
 8010164:	2201      	movs	r2, #1
 8010166:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 8010168:	4ba6      	ldr	r3, [pc, #664]	@ (8010404 <tx_control+0x247c>)
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2201      	movs	r2, #1
 801016e:	4053      	eors	r3, r2
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d101      	bne.n	801017a <tx_control+0x21f2>
 8010176:	f001 f828 	bl	80111ca <tx_control+0x3242>
			goto tx_wifi_OK_01;
 801017a:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 801017c:	4b9f      	ldr	r3, [pc, #636]	@ (80103fc <tx_control+0x2474>)
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d001      	beq.n	8010188 <tx_control+0x2200>
 8010184:	f001 f824 	bl	80111d0 <tx_control+0x3248>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 8010188:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		//if(!flagsWIFI[f_timeLoggerSend]){
		if(flagsWIFI[f_timeLoggerSend]){
 801018a:	4ba2      	ldr	r3, [pc, #648]	@ (8010414 <tx_control+0x248c>)
 801018c:	785b      	ldrb	r3, [r3, #1]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d100      	bne.n	8010194 <tx_control+0x220c>
 8010192:	e1e9      	b.n	8010568 <tx_control+0x25e0>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 8010194:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 8010196:	4b9f      	ldr	r3, [pc, #636]	@ (8010414 <tx_control+0x248c>)
 8010198:	78db      	ldrb	r3, [r3, #3]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d000      	beq.n	80101a0 <tx_control+0x2218>
 801019e:	e0b8      	b.n	8010312 <tx_control+0x238a>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 80101a0:	4b9c      	ldr	r3, [pc, #624]	@ (8010414 <tx_control+0x248c>)
 80101a2:	2201      	movs	r2, #1
 80101a4:	70da      	strb	r2, [r3, #3]
		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_cmd
		if(cntRegTxWifi)
 80101a6:	4b9c      	ldr	r3, [pc, #624]	@ (8010418 <tx_control+0x2490>)
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d134      	bne.n	8010218 <tx_control+0x2290>
			goto tx_wifi_timeLogger_cmd;

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 80101ae:	4b9d      	ldr	r3, [pc, #628]	@ (8010424 <tx_control+0x249c>)
 80101b0:	781a      	ldrb	r2, [r3, #0]
 80101b2:	4b9d      	ldr	r3, [pc, #628]	@ (8010428 <tx_control+0x24a0>)
 80101b4:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 80101b6:	4b9d      	ldr	r3, [pc, #628]	@ (801042c <tx_control+0x24a4>)
 80101b8:	781a      	ldrb	r2, [r3, #0]
 80101ba:	4b9d      	ldr	r3, [pc, #628]	@ (8010430 <tx_control+0x24a8>)
 80101bc:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 80101be:	4b9d      	ldr	r3, [pc, #628]	@ (8010434 <tx_control+0x24ac>)
 80101c0:	4a9d      	ldr	r2, [pc, #628]	@ (8010438 <tx_control+0x24b0>)
 80101c2:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 80101c4:	4b9d      	ldr	r3, [pc, #628]	@ (801043c <tx_control+0x24b4>)
 80101c6:	4a9e      	ldr	r2, [pc, #632]	@ (8010440 <tx_control+0x24b8>)
 80101c8:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 80101ca:	4b9a      	ldr	r3, [pc, #616]	@ (8010434 <tx_control+0x24ac>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	337e      	adds	r3, #126	@ 0x7e
 80101d0:	4a97      	ldr	r2, [pc, #604]	@ (8010430 <tx_control+0x24a8>)
 80101d2:	7812      	ldrb	r2, [r2, #0]
 80101d4:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 80101d6:	4b9b      	ldr	r3, [pc, #620]	@ (8010444 <tx_control+0x24bc>)
 80101d8:	22aa      	movs	r2, #170	@ 0xaa
 80101da:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 80101dc:	4b97      	ldr	r3, [pc, #604]	@ (801043c <tx_control+0x24b4>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a91      	ldr	r2, [pc, #580]	@ (8010428 <tx_control+0x24a0>)
 80101e2:	7812      	ldrb	r2, [r2, #0]
 80101e4:	01d2      	lsls	r2, r2, #7
 80101e6:	189a      	adds	r2, r3, r2
 80101e8:	4b97      	ldr	r3, [pc, #604]	@ (8010448 <tx_control+0x24c0>)
 80101ea:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 80101ec:	4b91      	ldr	r3, [pc, #580]	@ (8010434 <tx_control+0x24ac>)
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	4b96      	ldr	r3, [pc, #600]	@ (801044c <tx_control+0x24c4>)
 80101f2:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 80101f4:	f7f6 ff54 	bl	80070a0 <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 80101f8:	4b95      	ldr	r3, [pc, #596]	@ (8010450 <tx_control+0x24c8>)
 80101fa:	881a      	ldrh	r2, [r3, #0]
 80101fc:	4b95      	ldr	r3, [pc, #596]	@ (8010454 <tx_control+0x24cc>)
 80101fe:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 8010200:	4b95      	ldr	r3, [pc, #596]	@ (8010458 <tx_control+0x24d0>)
 8010202:	4a96      	ldr	r2, [pc, #600]	@ (801045c <tx_control+0x24d4>)
 8010204:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 8010206:	4b93      	ldr	r3, [pc, #588]	@ (8010454 <tx_control+0x24cc>)
 8010208:	881a      	ldrh	r2, [r3, #0]
 801020a:	4b95      	ldr	r3, [pc, #596]	@ (8010460 <tx_control+0x24d8>)
 801020c:	801a      	strh	r2, [r3, #0]

		save_cntReg();// call	save_cntReg
 801020e:	f7f6 fe4b 	bl	8006ea8 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 8010212:	f7f6 fe5b 	bl	8006ecc <save_timeUNIX>
 8010216:	e000      	b.n	801021a <tx_control+0x2292>
			goto tx_wifi_timeLogger_cmd;
 8010218:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_cmd:
		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 801021a:	4b92      	ldr	r3, [pc, #584]	@ (8010464 <tx_control+0x24dc>)
 801021c:	2240      	movs	r2, #64	@ 0x40
 801021e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 8010220:	4b90      	ldr	r3, [pc, #576]	@ (8010464 <tx_control+0x24dc>)
 8010222:	2285      	movs	r2, #133	@ 0x85
 8010224:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 8010226:	4b90      	ldr	r3, [pc, #576]	@ (8010468 <tx_control+0x24e0>)
 8010228:	227b      	movs	r2, #123	@ 0x7b
 801022a:	5c9a      	ldrb	r2, [r3, r2]
 801022c:	4b8d      	ldr	r3, [pc, #564]	@ (8010464 <tx_control+0x24dc>)
 801022e:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 8010230:	4b8d      	ldr	r3, [pc, #564]	@ (8010468 <tx_control+0x24e0>)
 8010232:	227c      	movs	r2, #124	@ 0x7c
 8010234:	5c9a      	ldrb	r2, [r3, r2]
 8010236:	4b8b      	ldr	r3, [pc, #556]	@ (8010464 <tx_control+0x24dc>)
 8010238:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 801023a:	4b8c      	ldr	r3, [pc, #560]	@ (801046c <tx_control+0x24e4>)
 801023c:	881b      	ldrh	r3, [r3, #0]
 801023e:	0a1b      	lsrs	r3, r3, #8
 8010240:	b29b      	uxth	r3, r3
 8010242:	b2da      	uxtb	r2, r3
 8010244:	4b87      	ldr	r3, [pc, #540]	@ (8010464 <tx_control+0x24dc>)
 8010246:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 8010248:	4b88      	ldr	r3, [pc, #544]	@ (801046c <tx_control+0x24e4>)
 801024a:	881b      	ldrh	r3, [r3, #0]
 801024c:	b2da      	uxtb	r2, r3
 801024e:	4b85      	ldr	r3, [pc, #532]	@ (8010464 <tx_control+0x24dc>)
 8010250:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 8010252:	4b87      	ldr	r3, [pc, #540]	@ (8010470 <tx_control+0x24e8>)
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	0a1b      	lsrs	r3, r3, #8
 8010258:	b29b      	uxth	r3, r3
 801025a:	b2da      	uxtb	r2, r3
 801025c:	4b81      	ldr	r3, [pc, #516]	@ (8010464 <tx_control+0x24dc>)
 801025e:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 8010260:	4b83      	ldr	r3, [pc, #524]	@ (8010470 <tx_control+0x24e8>)
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	b2da      	uxtb	r2, r3
 8010266:	4b7f      	ldr	r3, [pc, #508]	@ (8010464 <tx_control+0x24dc>)
 8010268:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[11] = eeLat4;
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;
		bufferWifiTx[8] = reeLat1;
 801026a:	4b82      	ldr	r3, [pc, #520]	@ (8010474 <tx_control+0x24ec>)
 801026c:	781a      	ldrb	r2, [r3, #0]
 801026e:	4b7d      	ldr	r3, [pc, #500]	@ (8010464 <tx_control+0x24dc>)
 8010270:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 8010272:	4b81      	ldr	r3, [pc, #516]	@ (8010478 <tx_control+0x24f0>)
 8010274:	781a      	ldrb	r2, [r3, #0]
 8010276:	4b7b      	ldr	r3, [pc, #492]	@ (8010464 <tx_control+0x24dc>)
 8010278:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 801027a:	4b80      	ldr	r3, [pc, #512]	@ (801047c <tx_control+0x24f4>)
 801027c:	781a      	ldrb	r2, [r3, #0]
 801027e:	4b79      	ldr	r3, [pc, #484]	@ (8010464 <tx_control+0x24dc>)
 8010280:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 8010282:	4b7f      	ldr	r3, [pc, #508]	@ (8010480 <tx_control+0x24f8>)
 8010284:	781a      	ldrb	r2, [r3, #0]
 8010286:	4b77      	ldr	r3, [pc, #476]	@ (8010464 <tx_control+0x24dc>)
 8010288:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 801028a:	4b7e      	ldr	r3, [pc, #504]	@ (8010484 <tx_control+0x24fc>)
 801028c:	781a      	ldrb	r2, [r3, #0]
 801028e:	4b75      	ldr	r3, [pc, #468]	@ (8010464 <tx_control+0x24dc>)
 8010290:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 8010292:	4b7d      	ldr	r3, [pc, #500]	@ (8010488 <tx_control+0x2500>)
 8010294:	781a      	ldrb	r2, [r3, #0]
 8010296:	4b73      	ldr	r3, [pc, #460]	@ (8010464 <tx_control+0x24dc>)
 8010298:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 801029a:	4b7c      	ldr	r3, [pc, #496]	@ (801048c <tx_control+0x2504>)
 801029c:	781a      	ldrb	r2, [r3, #0]
 801029e:	4b71      	ldr	r3, [pc, #452]	@ (8010464 <tx_control+0x24dc>)
 80102a0:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 80102a2:	4b7b      	ldr	r3, [pc, #492]	@ (8010490 <tx_control+0x2508>)
 80102a4:	781a      	ldrb	r2, [r3, #0]
 80102a6:	4b6f      	ldr	r3, [pc, #444]	@ (8010464 <tx_control+0x24dc>)
 80102a8:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80102aa:	4b4e      	ldr	r3, [pc, #312]	@ (80103e4 <tx_control+0x245c>)
 80102ac:	4a6d      	ldr	r2, [pc, #436]	@ (8010464 <tx_control+0x24dc>)
 80102ae:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80102b0:	4b4d      	ldr	r3, [pc, #308]	@ (80103e8 <tx_control+0x2460>)
 80102b2:	4a6c      	ldr	r2, [pc, #432]	@ (8010464 <tx_control+0x24dc>)
 80102b4:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 80102b6:	4b4d      	ldr	r3, [pc, #308]	@ (80103ec <tx_control+0x2464>)
 80102b8:	4a76      	ldr	r2, [pc, #472]	@ (8010494 <tx_control+0x250c>)
 80102ba:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 80102bc:	4b4d      	ldr	r3, [pc, #308]	@ (80103f4 <tx_control+0x246c>)
 80102be:	2210      	movs	r2, #16
 80102c0:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80102c2:	4b4d      	ldr	r3, [pc, #308]	@ (80103f8 <tx_control+0x2470>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80102c8:	4b73      	ldr	r3, [pc, #460]	@ (8010498 <tx_control+0x2510>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80102ce:	4b4a      	ldr	r3, [pc, #296]	@ (80103f8 <tx_control+0x2470>)
 80102d0:	2201      	movs	r2, #1
 80102d2:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 80102d4:	4b49      	ldr	r3, [pc, #292]	@ (80103fc <tx_control+0x2474>)
 80102d6:	2255      	movs	r2, #85	@ 0x55
 80102d8:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80102da:	4b49      	ldr	r3, [pc, #292]	@ (8010400 <tx_control+0x2478>)
 80102dc:	2200      	movs	r2, #0
 80102de:	701a      	strb	r2, [r3, #0]

		//;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_noInit
		if(cntRegTxWifi)
 80102e0:	4b4d      	ldr	r3, [pc, #308]	@ (8010418 <tx_control+0x2490>)
 80102e2:	881b      	ldrh	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d10b      	bne.n	8010300 <tx_control+0x2378>
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 80102e8:	4b4e      	ldr	r3, [pc, #312]	@ (8010424 <tx_control+0x249c>)
 80102ea:	781a      	ldrb	r2, [r3, #0]
 80102ec:	4b4b      	ldr	r3, [pc, #300]	@ (801041c <tx_control+0x2494>)
 80102ee:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 80102f0:	4b4e      	ldr	r3, [pc, #312]	@ (801042c <tx_control+0x24a4>)
 80102f2:	781a      	ldrb	r2, [r3, #0]
 80102f4:	4b4a      	ldr	r3, [pc, #296]	@ (8010420 <tx_control+0x2498>)
 80102f6:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 80102f8:	4b47      	ldr	r3, [pc, #284]	@ (8010418 <tx_control+0x2490>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	801a      	strh	r2, [r3, #0]
 80102fe:	e000      	b.n	8010302 <tx_control+0x237a>
			goto tx_wifi_timeLogger_noInit;
 8010300:	46c0      	nop			@ (mov r8, r8)
tx_wifi_timeLogger_noInit:
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 8010302:	4b66      	ldr	r3, [pc, #408]	@ (801049c <tx_control+0x2514>)
 8010304:	2203      	movs	r2, #3
 8010306:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegDATA) == 0){
		//	goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegDATA;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegDATA);
		numRegTx = 1343;
 8010308:	4b65      	ldr	r3, [pc, #404]	@ (80104a0 <tx_control+0x2518>)
 801030a:	4a66      	ldr	r2, [pc, #408]	@ (80104a4 <tx_control+0x251c>)
 801030c:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 801030e:	f000 ff69 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_timeLogger_01;
 8010312:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 8010314:	4b3a      	ldr	r3, [pc, #232]	@ (8010400 <tx_control+0x2478>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	2b3d      	cmp	r3, #61	@ 0x3d
 801031a:	d00e      	beq.n	801033a <tx_control+0x23b2>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		codeTX = 0;
 801031c:	4b38      	ldr	r3, [pc, #224]	@ (8010400 <tx_control+0x2478>)
 801031e:	2200      	movs	r2, #0
 8010320:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 8010322:	4b5e      	ldr	r3, [pc, #376]	@ (801049c <tx_control+0x2514>)
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d104      	bne.n	8010334 <tx_control+0x23ac>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 801032a:	4b3a      	ldr	r3, [pc, #232]	@ (8010414 <tx_control+0x248c>)
 801032c:	2200      	movs	r2, #0
 801032e:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 8010330:	f000 ff58 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 8010334:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 8010336:	f000 ff55 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 801033a:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 801033c:	4b5a      	ldr	r3, [pc, #360]	@ (80104a8 <tx_control+0x2520>)
 801033e:	2296      	movs	r2, #150	@ 0x96
 8010340:	0052      	lsls	r2, r2, #1
 8010342:	801a      	strh	r2, [r3, #0]
		//ldw		X,#300;
		timeoutTBLE = 300;//ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
 8010344:	4b59      	ldr	r3, [pc, #356]	@ (80104ac <tx_control+0x2524>)
 8010346:	2296      	movs	r2, #150	@ 0x96
 8010348:	0052      	lsls	r2, r2, #1
 801034a:	801a      	strh	r2, [r3, #0]

		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 801034c:	4b53      	ldr	r3, [pc, #332]	@ (801049c <tx_control+0x2514>)
 801034e:	2203      	movs	r2, #3
 8010350:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 8010352:	4b53      	ldr	r3, [pc, #332]	@ (80104a0 <tx_control+0x2518>)
 8010354:	881a      	ldrh	r2, [r3, #0]
 8010356:	4b30      	ldr	r3, [pc, #192]	@ (8010418 <tx_control+0x2490>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	429a      	cmp	r2, r3
 801035c:	d314      	bcc.n	8010388 <tx_control+0x2400>
		//cntReg = 0;// ldw		cntReg,X
		// ldw		X,#eeCntRegDATA
		//cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
		//save_cntReg();// call	save_cntReg

tx_wifi_timeLogger_END:
 801035e:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
		flagsWIFI[f_timeLoggerSend] = 0;
 8010360:	4b2c      	ldr	r3, [pc, #176]	@ (8010414 <tx_control+0x248c>)
 8010362:	2200      	movs	r2, #0
 8010364:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 8010366:	4b2b      	ldr	r3, [pc, #172]	@ (8010414 <tx_control+0x248c>)
 8010368:	2200      	movs	r2, #0
 801036a:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 801036c:	4b50      	ldr	r3, [pc, #320]	@ (80104b0 <tx_control+0x2528>)
 801036e:	220a      	movs	r2, #10
 8010370:	701a      	strb	r2, [r3, #0]

		blockLoggWifi = 0; 		//clr	blockLoggWifi
 8010372:	4b2a      	ldr	r3, [pc, #168]	@ (801041c <tx_control+0x2494>)
 8010374:	2200      	movs	r2, #0
 8010376:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;		//clr		byteLoggWifi
 8010378:	4b29      	ldr	r3, [pc, #164]	@ (8010420 <tx_control+0x2498>)
 801037a:	2200      	movs	r2, #0
 801037c:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 801037e:	4b26      	ldr	r3, [pc, #152]	@ (8010418 <tx_control+0x2490>)
 8010380:	2200      	movs	r2, #0
 8010382:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 8010384:	f000 ff2e 	bl	80111e4 <tx_control+0x325c>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 8010388:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 801038a:	4b36      	ldr	r3, [pc, #216]	@ (8010464 <tx_control+0x24dc>)
 801038c:	2240      	movs	r2, #64	@ 0x40
 801038e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 8010390:	4b34      	ldr	r3, [pc, #208]	@ (8010464 <tx_control+0x24dc>)
 8010392:	2283      	movs	r2, #131	@ 0x83
 8010394:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010396:	4b33      	ldr	r3, [pc, #204]	@ (8010464 <tx_control+0x24dc>)
 8010398:	2203      	movs	r2, #3
 801039a:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 801039c:	4b32      	ldr	r3, [pc, #200]	@ (8010468 <tx_control+0x24e0>)
 801039e:	227b      	movs	r2, #123	@ 0x7b
 80103a0:	5c9a      	ldrb	r2, [r3, r2]
 80103a2:	4b30      	ldr	r3, [pc, #192]	@ (8010464 <tx_control+0x24dc>)
 80103a4:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 80103a6:	4b30      	ldr	r3, [pc, #192]	@ (8010468 <tx_control+0x24e0>)
 80103a8:	227c      	movs	r2, #124	@ 0x7c
 80103aa:	5c9a      	ldrb	r2, [r3, r2]
 80103ac:	4b2d      	ldr	r3, [pc, #180]	@ (8010464 <tx_control+0x24dc>)
 80103ae:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 80103b0:	4b1b      	ldr	r3, [pc, #108]	@ (8010420 <tx_control+0x2498>)
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d000      	beq.n	80103ba <tx_control+0x2432>
 80103b8:	e07c      	b.n	80104b4 <tx_control+0x252c>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 80103ba:	4b19      	ldr	r3, [pc, #100]	@ (8010420 <tx_control+0x2498>)
 80103bc:	227e      	movs	r2, #126	@ 0x7e
 80103be:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 80103c0:	4b16      	ldr	r3, [pc, #88]	@ (801041c <tx_control+0x2494>)
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d103      	bne.n	80103d0 <tx_control+0x2448>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 80103c8:	4b14      	ldr	r3, [pc, #80]	@ (801041c <tx_control+0x2494>)
 80103ca:	2260      	movs	r2, #96	@ 0x60
 80103cc:	701a      	strb	r2, [r3, #0]
 80103ce:	e000      	b.n	80103d2 <tx_control+0x244a>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 80103d0:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 80103d2:	4b12      	ldr	r3, [pc, #72]	@ (801041c <tx_control+0x2494>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	4b10      	ldr	r3, [pc, #64]	@ (801041c <tx_control+0x2494>)
 80103dc:	701a      	strb	r2, [r3, #0]
 80103de:	e06a      	b.n	80104b6 <tx_control+0x252e>
 80103e0:	20001ea8 	.word	0x20001ea8
 80103e4:	20001f08 	.word	0x20001f08
 80103e8:	20001f00 	.word	0x20001f00
 80103ec:	20001f04 	.word	0x20001f04
 80103f0:	20001ea9 	.word	0x20001ea9
 80103f4:	20001f24 	.word	0x20001f24
 80103f8:	20001f10 	.word	0x20001f10
 80103fc:	20001f0d 	.word	0x20001f0d
 8010400:	20001f18 	.word	0x20001f18
 8010404:	20001fd0 	.word	0x20001fd0
 8010408:	20001fd8 	.word	0x20001fd8
 801040c:	20002138 	.word	0x20002138
 8010410:	200021dc 	.word	0x200021dc
 8010414:	20002044 	.word	0x20002044
 8010418:	2000206c 	.word	0x2000206c
 801041c:	2000206a 	.word	0x2000206a
 8010420:	2000206b 	.word	0x2000206b
 8010424:	20000e99 	.word	0x20000e99
 8010428:	20000e86 	.word	0x20000e86
 801042c:	20000e98 	.word	0x20000e98
 8010430:	20000e87 	.word	0x20000e87
 8010434:	20000e90 	.word	0x20000e90
 8010438:	20000d78 	.word	0x20000d78
 801043c:	20000e8c 	.word	0x20000e8c
 8010440:	0803c000 	.word	0x0803c000
 8010444:	20000e78 	.word	0x20000e78
 8010448:	20000e7c 	.word	0x20000e7c
 801044c:	20000e80 	.word	0x20000e80
 8010450:	2000212e 	.word	0x2000212e
 8010454:	20002132 	.word	0x20002132
 8010458:	20002134 	.word	0x20002134
 801045c:	0803f810 	.word	0x0803f810
 8010460:	20000d72 	.word	0x20000d72
 8010464:	2000204c 	.word	0x2000204c
 8010468:	20000cec 	.word	0x20000cec
 801046c:	20001ea4 	.word	0x20001ea4
 8010470:	20001ea6 	.word	0x20001ea6
 8010474:	200001bb 	.word	0x200001bb
 8010478:	200001bc 	.word	0x200001bc
 801047c:	200001bd 	.word	0x200001bd
 8010480:	200001be 	.word	0x200001be
 8010484:	200001bf 	.word	0x200001bf
 8010488:	200001c0 	.word	0x200001c0
 801048c:	200001c1 	.word	0x200001c1
 8010490:	200001c2 	.word	0x200001c2
 8010494:	2000205c 	.word	0x2000205c
 8010498:	20001f28 	.word	0x20001f28
 801049c:	2000206e 	.word	0x2000206e
 80104a0:	2000212c 	.word	0x2000212c
 80104a4:	0000053f 	.word	0x0000053f
 80104a8:	20002040 	.word	0x20002040
 80104ac:	200021ec 	.word	0x200021ec
 80104b0:	2000206f 	.word	0x2000206f
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 80104b4:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 80104b6:	4bd8      	ldr	r3, [pc, #864]	@ (8010818 <tx_control+0x2890>)
 80104b8:	643b      	str	r3, [r7, #64]	@ 0x40
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 80104ba:	4bd8      	ldr	r3, [pc, #864]	@ (801081c <tx_control+0x2894>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	01db      	lsls	r3, r3, #7
 80104c0:	4ad7      	ldr	r2, [pc, #860]	@ (8010820 <tx_control+0x2898>)
 80104c2:	7812      	ldrb	r2, [r2, #0]
 80104c4:	189a      	adds	r2, r3, r2
 80104c6:	4bd7      	ldr	r3, [pc, #860]	@ (8010824 <tx_control+0x289c>)
 80104c8:	18d3      	adds	r3, r2, r3
 80104ca:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 80104cc:	4bd6      	ldr	r3, [pc, #856]	@ (8010828 <tx_control+0x28a0>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 80104d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104d4:	3b01      	subs	r3, #1
 80104d6:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 80104d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104da:	3b01      	subs	r3, #1
 80104dc:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80104de:	4bd0      	ldr	r3, [pc, #832]	@ (8010820 <tx_control+0x2898>)
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	3b01      	subs	r3, #1
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	4bce      	ldr	r3, [pc, #824]	@ (8010820 <tx_control+0x2898>)
 80104e8:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 80104ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104ec:	2380      	movs	r3, #128	@ 0x80
 80104ee:	025b      	lsls	r3, r3, #9
 80104f0:	5cd2      	ldrb	r2, [r2, r3]
 80104f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104f4:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 80104f6:	4bcc      	ldr	r3, [pc, #816]	@ (8010828 <tx_control+0x28a0>)
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	3301      	adds	r3, #1
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	4bca      	ldr	r3, [pc, #808]	@ (8010828 <tx_control+0x28a0>)
 8010500:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 8010502:	4bc9      	ldr	r3, [pc, #804]	@ (8010828 <tx_control+0x28a0>)
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	2b08      	cmp	r3, #8
 8010508:	d800      	bhi.n	801050c <tx_control+0x2584>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 801050a:	e7e2      	b.n	80104d2 <tx_control+0x254a>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 801050c:	4bc7      	ldr	r3, [pc, #796]	@ (801082c <tx_control+0x28a4>)
 801050e:	7b5a      	ldrb	r2, [r3, #13]
 8010510:	4bc7      	ldr	r3, [pc, #796]	@ (8010830 <tx_control+0x28a8>)
 8010512:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 8010514:	4bc5      	ldr	r3, [pc, #788]	@ (801082c <tx_control+0x28a4>)
 8010516:	2200      	movs	r2, #0
 8010518:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 801051a:	4bc5      	ldr	r3, [pc, #788]	@ (8010830 <tx_control+0x28a8>)
 801051c:	781a      	ldrb	r2, [r3, #0]
 801051e:	4bc3      	ldr	r3, [pc, #780]	@ (801082c <tx_control+0x28a4>)
 8010520:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010522:	4bc4      	ldr	r3, [pc, #784]	@ (8010834 <tx_control+0x28ac>)
 8010524:	4ac1      	ldr	r2, [pc, #772]	@ (801082c <tx_control+0x28a4>)
 8010526:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010528:	4bc3      	ldr	r3, [pc, #780]	@ (8010838 <tx_control+0x28b0>)
 801052a:	4ac0      	ldr	r2, [pc, #768]	@ (801082c <tx_control+0x28a4>)
 801052c:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 801052e:	4bc3      	ldr	r3, [pc, #780]	@ (801083c <tx_control+0x28b4>)
 8010530:	4ac3      	ldr	r2, [pc, #780]	@ (8010840 <tx_control+0x28b8>)
 8010532:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 8010534:	4bc3      	ldr	r3, [pc, #780]	@ (8010844 <tx_control+0x28bc>)
 8010536:	220f      	movs	r2, #15
 8010538:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 801053a:	4bc3      	ldr	r3, [pc, #780]	@ (8010848 <tx_control+0x28c0>)
 801053c:	2200      	movs	r2, #0
 801053e:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010540:	4bc2      	ldr	r3, [pc, #776]	@ (801084c <tx_control+0x28c4>)
 8010542:	2200      	movs	r2, #0
 8010544:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010546:	4bc0      	ldr	r3, [pc, #768]	@ (8010848 <tx_control+0x28c0>)
 8010548:	2201      	movs	r2, #1
 801054a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 801054c:	4bc0      	ldr	r3, [pc, #768]	@ (8010850 <tx_control+0x28c8>)
 801054e:	2255      	movs	r2, #85	@ 0x55
 8010550:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 8010552:	4bc0      	ldr	r3, [pc, #768]	@ (8010854 <tx_control+0x28cc>)
 8010554:	2200      	movs	r2, #0
 8010556:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 8010558:	4bbf      	ldr	r3, [pc, #764]	@ (8010858 <tx_control+0x28d0>)
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	3301      	adds	r3, #1
 801055e:	b29a      	uxth	r2, r3
 8010560:	4bbd      	ldr	r3, [pc, #756]	@ (8010858 <tx_control+0x28d0>)
 8010562:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 8010564:	f000 fe3e 	bl	80111e4 <tx_control+0x325c>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 8010568:	46c0      	nop			@ (mov r8, r8)
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		//if(!flagsWIFI[f_eventLoggerSend]){
		if(flagsWIFI[f_eventLoggerSend]){
 801056a:	4bbc      	ldr	r3, [pc, #752]	@ (801085c <tx_control+0x28d4>)
 801056c:	789b      	ldrb	r3, [r3, #2]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d100      	bne.n	8010574 <tx_control+0x25ec>
 8010572:	e1e9      	b.n	8010948 <tx_control+0x29c0>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 8010574:	46c0      	nop			@ (mov r8, r8)
//tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 8010576:	4bb9      	ldr	r3, [pc, #740]	@ (801085c <tx_control+0x28d4>)
 8010578:	791b      	ldrb	r3, [r3, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d000      	beq.n	8010580 <tx_control+0x25f8>
 801057e:	e0b7      	b.n	80106f0 <tx_control+0x2768>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 8010580:	4bb6      	ldr	r3, [pc, #728]	@ (801085c <tx_control+0x28d4>)
 8010582:	2201      	movs	r2, #1
 8010584:	711a      	strb	r2, [r3, #4]

		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_eventLogger_cmd
		if(cntRegTxWifi)
 8010586:	4bb4      	ldr	r3, [pc, #720]	@ (8010858 <tx_control+0x28d0>)
 8010588:	881b      	ldrh	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d133      	bne.n	80105f6 <tx_control+0x266e>
			goto tx_wifi_eventLogger_cmd;
		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 801058e:	4bb4      	ldr	r3, [pc, #720]	@ (8010860 <tx_control+0x28d8>)
 8010590:	781a      	ldrb	r2, [r3, #0]
 8010592:	4bb4      	ldr	r3, [pc, #720]	@ (8010864 <tx_control+0x28dc>)
 8010594:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 8010596:	4bb4      	ldr	r3, [pc, #720]	@ (8010868 <tx_control+0x28e0>)
 8010598:	781a      	ldrb	r2, [r3, #0]
 801059a:	4bb4      	ldr	r3, [pc, #720]	@ (801086c <tx_control+0x28e4>)
 801059c:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 801059e:	4bb4      	ldr	r3, [pc, #720]	@ (8010870 <tx_control+0x28e8>)
 80105a0:	4ab4      	ldr	r2, [pc, #720]	@ (8010874 <tx_control+0x28ec>)
 80105a2:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 80105a4:	4bb4      	ldr	r3, [pc, #720]	@ (8010878 <tx_control+0x28f0>)
 80105a6:	4ab5      	ldr	r2, [pc, #724]	@ (801087c <tx_control+0x28f4>)
 80105a8:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 80105aa:	4bb0      	ldr	r3, [pc, #704]	@ (801086c <tx_control+0x28e4>)
 80105ac:	7819      	ldrb	r1, [r3, #0]
 80105ae:	4bb1      	ldr	r3, [pc, #708]	@ (8010874 <tx_control+0x28ec>)
 80105b0:	227e      	movs	r2, #126	@ 0x7e
 80105b2:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 80105b4:	4bb2      	ldr	r3, [pc, #712]	@ (8010880 <tx_control+0x28f8>)
 80105b6:	22aa      	movs	r2, #170	@ 0xaa
 80105b8:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 80105ba:	4baf      	ldr	r3, [pc, #700]	@ (8010878 <tx_control+0x28f0>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4aa9      	ldr	r2, [pc, #676]	@ (8010864 <tx_control+0x28dc>)
 80105c0:	7812      	ldrb	r2, [r2, #0]
 80105c2:	01d2      	lsls	r2, r2, #7
 80105c4:	189a      	adds	r2, r3, r2
 80105c6:	4baf      	ldr	r3, [pc, #700]	@ (8010884 <tx_control+0x28fc>)
 80105c8:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 80105ca:	4ba9      	ldr	r3, [pc, #676]	@ (8010870 <tx_control+0x28e8>)
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	4bae      	ldr	r3, [pc, #696]	@ (8010888 <tx_control+0x2900>)
 80105d0:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 80105d2:	f7f6 fd65 	bl	80070a0 <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 80105d6:	4bad      	ldr	r3, [pc, #692]	@ (801088c <tx_control+0x2904>)
 80105d8:	881a      	ldrh	r2, [r3, #0]
 80105da:	4bad      	ldr	r3, [pc, #692]	@ (8010890 <tx_control+0x2908>)
 80105dc:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 80105de:	4bad      	ldr	r3, [pc, #692]	@ (8010894 <tx_control+0x290c>)
 80105e0:	4aad      	ldr	r2, [pc, #692]	@ (8010898 <tx_control+0x2910>)
 80105e2:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 80105e4:	4baa      	ldr	r3, [pc, #680]	@ (8010890 <tx_control+0x2908>)
 80105e6:	881a      	ldrh	r2, [r3, #0]
 80105e8:	4bac      	ldr	r3, [pc, #688]	@ (801089c <tx_control+0x2914>)
 80105ea:	801a      	strh	r2, [r3, #0]

		save_cntReg();		// call	save_cntReg
 80105ec:	f7f6 fc5c 	bl	8006ea8 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 80105f0:	f7f6 fc6c 	bl	8006ecc <save_timeUNIX>
 80105f4:	e000      	b.n	80105f8 <tx_control+0x2670>
			goto tx_wifi_eventLogger_cmd;
 80105f6:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_cmd:
		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 80105f8:	4b8c      	ldr	r3, [pc, #560]	@ (801082c <tx_control+0x28a4>)
 80105fa:	2240      	movs	r2, #64	@ 0x40
 80105fc:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 80105fe:	4b8b      	ldr	r3, [pc, #556]	@ (801082c <tx_control+0x28a4>)
 8010600:	2286      	movs	r2, #134	@ 0x86
 8010602:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 8010604:	4ba6      	ldr	r3, [pc, #664]	@ (80108a0 <tx_control+0x2918>)
 8010606:	227b      	movs	r2, #123	@ 0x7b
 8010608:	5c9a      	ldrb	r2, [r3, r2]
 801060a:	4b88      	ldr	r3, [pc, #544]	@ (801082c <tx_control+0x28a4>)
 801060c:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 801060e:	4ba4      	ldr	r3, [pc, #656]	@ (80108a0 <tx_control+0x2918>)
 8010610:	227c      	movs	r2, #124	@ 0x7c
 8010612:	5c9a      	ldrb	r2, [r3, r2]
 8010614:	4b85      	ldr	r3, [pc, #532]	@ (801082c <tx_control+0x28a4>)
 8010616:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 8010618:	4ba2      	ldr	r3, [pc, #648]	@ (80108a4 <tx_control+0x291c>)
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	0a1b      	lsrs	r3, r3, #8
 801061e:	b29b      	uxth	r3, r3
 8010620:	b2da      	uxtb	r2, r3
 8010622:	4b82      	ldr	r3, [pc, #520]	@ (801082c <tx_control+0x28a4>)
 8010624:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 8010626:	4b9f      	ldr	r3, [pc, #636]	@ (80108a4 <tx_control+0x291c>)
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	b2da      	uxtb	r2, r3
 801062c:	4b7f      	ldr	r3, [pc, #508]	@ (801082c <tx_control+0x28a4>)
 801062e:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 8010630:	4b9d      	ldr	r3, [pc, #628]	@ (80108a8 <tx_control+0x2920>)
 8010632:	881b      	ldrh	r3, [r3, #0]
 8010634:	0a1b      	lsrs	r3, r3, #8
 8010636:	b29b      	uxth	r3, r3
 8010638:	b2da      	uxtb	r2, r3
 801063a:	4b7c      	ldr	r3, [pc, #496]	@ (801082c <tx_control+0x28a4>)
 801063c:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 801063e:	4b9a      	ldr	r3, [pc, #616]	@ (80108a8 <tx_control+0x2920>)
 8010640:	881b      	ldrh	r3, [r3, #0]
 8010642:	b2da      	uxtb	r2, r3
 8010644:	4b79      	ldr	r3, [pc, #484]	@ (801082c <tx_control+0x28a4>)
 8010646:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;

		bufferWifiTx[8] = reeLat1;
 8010648:	4b98      	ldr	r3, [pc, #608]	@ (80108ac <tx_control+0x2924>)
 801064a:	781a      	ldrb	r2, [r3, #0]
 801064c:	4b77      	ldr	r3, [pc, #476]	@ (801082c <tx_control+0x28a4>)
 801064e:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 8010650:	4b97      	ldr	r3, [pc, #604]	@ (80108b0 <tx_control+0x2928>)
 8010652:	781a      	ldrb	r2, [r3, #0]
 8010654:	4b75      	ldr	r3, [pc, #468]	@ (801082c <tx_control+0x28a4>)
 8010656:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 8010658:	4b96      	ldr	r3, [pc, #600]	@ (80108b4 <tx_control+0x292c>)
 801065a:	781a      	ldrb	r2, [r3, #0]
 801065c:	4b73      	ldr	r3, [pc, #460]	@ (801082c <tx_control+0x28a4>)
 801065e:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 8010660:	4b95      	ldr	r3, [pc, #596]	@ (80108b8 <tx_control+0x2930>)
 8010662:	781a      	ldrb	r2, [r3, #0]
 8010664:	4b71      	ldr	r3, [pc, #452]	@ (801082c <tx_control+0x28a4>)
 8010666:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 8010668:	4b94      	ldr	r3, [pc, #592]	@ (80108bc <tx_control+0x2934>)
 801066a:	781a      	ldrb	r2, [r3, #0]
 801066c:	4b6f      	ldr	r3, [pc, #444]	@ (801082c <tx_control+0x28a4>)
 801066e:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 8010670:	4b93      	ldr	r3, [pc, #588]	@ (80108c0 <tx_control+0x2938>)
 8010672:	781a      	ldrb	r2, [r3, #0]
 8010674:	4b6d      	ldr	r3, [pc, #436]	@ (801082c <tx_control+0x28a4>)
 8010676:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 8010678:	4b92      	ldr	r3, [pc, #584]	@ (80108c4 <tx_control+0x293c>)
 801067a:	781a      	ldrb	r2, [r3, #0]
 801067c:	4b6b      	ldr	r3, [pc, #428]	@ (801082c <tx_control+0x28a4>)
 801067e:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 8010680:	4b91      	ldr	r3, [pc, #580]	@ (80108c8 <tx_control+0x2940>)
 8010682:	781a      	ldrb	r2, [r3, #0]
 8010684:	4b69      	ldr	r3, [pc, #420]	@ (801082c <tx_control+0x28a4>)
 8010686:	73da      	strb	r2, [r3, #15]


		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010688:	4b6a      	ldr	r3, [pc, #424]	@ (8010834 <tx_control+0x28ac>)
 801068a:	4a68      	ldr	r2, [pc, #416]	@ (801082c <tx_control+0x28a4>)
 801068c:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 801068e:	4b6a      	ldr	r3, [pc, #424]	@ (8010838 <tx_control+0x28b0>)
 8010690:	4a66      	ldr	r2, [pc, #408]	@ (801082c <tx_control+0x28a4>)
 8010692:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 8010694:	4b69      	ldr	r3, [pc, #420]	@ (801083c <tx_control+0x28b4>)
 8010696:	4a8d      	ldr	r2, [pc, #564]	@ (80108cc <tx_control+0x2944>)
 8010698:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 801069a:	4b6a      	ldr	r3, [pc, #424]	@ (8010844 <tx_control+0x28bc>)
 801069c:	2210      	movs	r2, #16
 801069e:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80106a0:	4b69      	ldr	r3, [pc, #420]	@ (8010848 <tx_control+0x28c0>)
 80106a2:	2200      	movs	r2, #0
 80106a4:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80106a6:	4b69      	ldr	r3, [pc, #420]	@ (801084c <tx_control+0x28c4>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80106ac:	4b66      	ldr	r3, [pc, #408]	@ (8010848 <tx_control+0x28c0>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 80106b2:	4b67      	ldr	r3, [pc, #412]	@ (8010850 <tx_control+0x28c8>)
 80106b4:	2255      	movs	r2, #85	@ 0x55
 80106b6:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 80106b8:	4b66      	ldr	r3, [pc, #408]	@ (8010854 <tx_control+0x28cc>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	701a      	strb	r2, [r3, #0]

//		;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
//		ldw		X,cntRegTxWifi
//		tnzw	X
//		jrne	tx_wifi_eventLogger_noInit
		if(cntRegTxWifi)
 80106be:	4b66      	ldr	r3, [pc, #408]	@ (8010858 <tx_control+0x28d0>)
 80106c0:	881b      	ldrh	r3, [r3, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10b      	bne.n	80106de <tx_control+0x2756>

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 80106c6:	4b66      	ldr	r3, [pc, #408]	@ (8010860 <tx_control+0x28d8>)
 80106c8:	781a      	ldrb	r2, [r3, #0]
 80106ca:	4b54      	ldr	r3, [pc, #336]	@ (801081c <tx_control+0x2894>)
 80106cc:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 80106ce:	4b66      	ldr	r3, [pc, #408]	@ (8010868 <tx_control+0x28e0>)
 80106d0:	781a      	ldrb	r2, [r3, #0]
 80106d2:	4b53      	ldr	r3, [pc, #332]	@ (8010820 <tx_control+0x2898>)
 80106d4:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 80106d6:	4b60      	ldr	r3, [pc, #384]	@ (8010858 <tx_control+0x28d0>)
 80106d8:	2200      	movs	r2, #0
 80106da:	801a      	strh	r2, [r3, #0]
 80106dc:	e000      	b.n	80106e0 <tx_control+0x2758>
			goto tx_wifi_eventLogger_noInit;
 80106de:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_noInit:
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 80106e0:	4b7b      	ldr	r3, [pc, #492]	@ (80108d0 <tx_control+0x2948>)
 80106e2:	2203      	movs	r2, #3
 80106e4:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegEVENT)==0){
		//	goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegEVENT);
		numRegTx = 1439;
 80106e6:	4b7b      	ldr	r3, [pc, #492]	@ (80108d4 <tx_control+0x294c>)
 80106e8:	4a7b      	ldr	r2, [pc, #492]	@ (80108d8 <tx_control+0x2950>)
 80106ea:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 80106ec:	f000 fd7a 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 80106f0:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 80106f2:	4b58      	ldr	r3, [pc, #352]	@ (8010854 <tx_control+0x28cc>)
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	2b3d      	cmp	r3, #61	@ 0x3d
 80106f8:	d00e      	beq.n	8010718 <tx_control+0x2790>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		codeTX = 0;
 80106fa:	4b56      	ldr	r3, [pc, #344]	@ (8010854 <tx_control+0x28cc>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 8010700:	4b73      	ldr	r3, [pc, #460]	@ (80108d0 <tx_control+0x2948>)
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d104      	bne.n	8010712 <tx_control+0x278a>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 8010708:	4b54      	ldr	r3, [pc, #336]	@ (801085c <tx_control+0x28d4>)
 801070a:	2200      	movs	r2, #0
 801070c:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 801070e:	f000 fd69 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 8010712:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 8010714:	f000 fd66 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 8010718:	46c0      	nop			@ (mov r8, r8)
//		; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
//		ldw		X,#300;
//		ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
//		ldw		X,#300;
//		ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
		timeoutTWF = 300;
 801071a:	4b70      	ldr	r3, [pc, #448]	@ (80108dc <tx_control+0x2954>)
 801071c:	2296      	movs	r2, #150	@ 0x96
 801071e:	0052      	lsls	r2, r2, #1
 8010720:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 8010722:	4b6f      	ldr	r3, [pc, #444]	@ (80108e0 <tx_control+0x2958>)
 8010724:	2296      	movs	r2, #150	@ 0x96
 8010726:	0052      	lsls	r2, r2, #1
 8010728:	801a      	strh	r2, [r3, #0]
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 801072a:	4b69      	ldr	r3, [pc, #420]	@ (80108d0 <tx_control+0x2948>)
 801072c:	2203      	movs	r2, #3
 801072e:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 8010730:	4b68      	ldr	r3, [pc, #416]	@ (80108d4 <tx_control+0x294c>)
 8010732:	881a      	ldrh	r2, [r3, #0]
 8010734:	4b48      	ldr	r3, [pc, #288]	@ (8010858 <tx_control+0x28d0>)
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	429a      	cmp	r2, r3
 801073a:	d314      	bcc.n	8010766 <tx_control+0x27de>
//		cntReg = 0;// ldw		cntReg,X
//		// ldw		X,#eeCntRegEVENT
//		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
//		save_cntReg();// call	save_cntReg

tx_wifi_eventLogger_END:
 801073c:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
		flagsWIFI[f_eventLoggerSend] = 0;
 801073e:	4b47      	ldr	r3, [pc, #284]	@ (801085c <tx_control+0x28d4>)
 8010740:	2200      	movs	r2, #0
 8010742:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 8010744:	4b45      	ldr	r3, [pc, #276]	@ (801085c <tx_control+0x28d4>)
 8010746:	2200      	movs	r2, #0
 8010748:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 801074a:	4b66      	ldr	r3, [pc, #408]	@ (80108e4 <tx_control+0x295c>)
 801074c:	220a      	movs	r2, #10
 801074e:	701a      	strb	r2, [r3, #0]
		blockLoggWifi = 0;//clr		blockLoggWifi
 8010750:	4b32      	ldr	r3, [pc, #200]	@ (801081c <tx_control+0x2894>)
 8010752:	2200      	movs	r2, #0
 8010754:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;//clr		byteLoggWifi
 8010756:	4b32      	ldr	r3, [pc, #200]	@ (8010820 <tx_control+0x2898>)
 8010758:	2200      	movs	r2, #0
 801075a:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 801075c:	4b3e      	ldr	r3, [pc, #248]	@ (8010858 <tx_control+0x28d0>)
 801075e:	2200      	movs	r2, #0
 8010760:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;//jp		end_tx_wifi
 8010762:	f000 fd3f 	bl	80111e4 <tx_control+0x325c>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 8010766:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 8010768:	4b30      	ldr	r3, [pc, #192]	@ (801082c <tx_control+0x28a4>)
 801076a:	2240      	movs	r2, #64	@ 0x40
 801076c:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 801076e:	4b2f      	ldr	r3, [pc, #188]	@ (801082c <tx_control+0x28a4>)
 8010770:	2284      	movs	r2, #132	@ 0x84
 8010772:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010774:	4b2d      	ldr	r3, [pc, #180]	@ (801082c <tx_control+0x28a4>)
 8010776:	2203      	movs	r2, #3
 8010778:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 801077a:	4b49      	ldr	r3, [pc, #292]	@ (80108a0 <tx_control+0x2918>)
 801077c:	227b      	movs	r2, #123	@ 0x7b
 801077e:	5c9a      	ldrb	r2, [r3, r2]
 8010780:	4b2a      	ldr	r3, [pc, #168]	@ (801082c <tx_control+0x28a4>)
 8010782:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010784:	4b46      	ldr	r3, [pc, #280]	@ (80108a0 <tx_control+0x2918>)
 8010786:	227c      	movs	r2, #124	@ 0x7c
 8010788:	5c9a      	ldrb	r2, [r3, r2]
 801078a:	4b28      	ldr	r3, [pc, #160]	@ (801082c <tx_control+0x28a4>)
 801078c:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 801078e:	4b24      	ldr	r3, [pc, #144]	@ (8010820 <tx_control+0x2898>)
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d112      	bne.n	80107bc <tx_control+0x2834>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 8010796:	4b22      	ldr	r3, [pc, #136]	@ (8010820 <tx_control+0x2898>)
 8010798:	227e      	movs	r2, #126	@ 0x7e
 801079a:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 801079c:	4b1f      	ldr	r3, [pc, #124]	@ (801081c <tx_control+0x2894>)
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d103      	bne.n	80107ac <tx_control+0x2824>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 80107a4:	4b1d      	ldr	r3, [pc, #116]	@ (801081c <tx_control+0x2894>)
 80107a6:	22a0      	movs	r2, #160	@ 0xa0
 80107a8:	701a      	strb	r2, [r3, #0]
 80107aa:	e000      	b.n	80107ae <tx_control+0x2826>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 80107ac:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 80107ae:	4b1b      	ldr	r3, [pc, #108]	@ (801081c <tx_control+0x2894>)
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	3b01      	subs	r3, #1
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	4b19      	ldr	r3, [pc, #100]	@ (801081c <tx_control+0x2894>)
 80107b8:	701a      	strb	r2, [r3, #0]
 80107ba:	e000      	b.n	80107be <tx_control+0x2836>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 80107bc:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 80107be:	4b4a      	ldr	r3, [pc, #296]	@ (80108e8 <tx_control+0x2960>)
 80107c0:	643b      	str	r3, [r7, #64]	@ 0x40
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 80107c2:	4b17      	ldr	r3, [pc, #92]	@ (8010820 <tx_control+0x2898>)
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	001a      	movs	r2, r3
 80107c8:	4b14      	ldr	r3, [pc, #80]	@ (801081c <tx_control+0x2894>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	01db      	lsls	r3, r3, #7
 80107ce:	18d2      	adds	r2, r2, r3
 80107d0:	4b2a      	ldr	r3, [pc, #168]	@ (801087c <tx_control+0x28f4>)
 80107d2:	18d3      	adds	r3, r2, r3
 80107d4:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 80107d6:	4b14      	ldr	r3, [pc, #80]	@ (8010828 <tx_control+0x28a0>)
 80107d8:	2200      	movs	r2, #0
 80107da:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 80107dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107de:	3b01      	subs	r3, #1
 80107e0:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 80107e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107e4:	3b01      	subs	r3, #1
 80107e6:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80107e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010820 <tx_control+0x2898>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010820 <tx_control+0x2898>)
 80107f2:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 80107f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80107f6:	2380      	movs	r3, #128	@ 0x80
 80107f8:	025b      	lsls	r3, r3, #9
 80107fa:	5cd2      	ldrb	r2, [r2, r3]
 80107fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107fe:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 8010800:	4b09      	ldr	r3, [pc, #36]	@ (8010828 <tx_control+0x28a0>)
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	3301      	adds	r3, #1
 8010806:	b2da      	uxtb	r2, r3
 8010808:	4b07      	ldr	r3, [pc, #28]	@ (8010828 <tx_control+0x28a0>)
 801080a:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 801080c:	4b06      	ldr	r3, [pc, #24]	@ (8010828 <tx_control+0x28a0>)
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	2b0d      	cmp	r3, #13
 8010812:	d86b      	bhi.n	80108ec <tx_control+0x2964>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 8010814:	e7e2      	b.n	80107dc <tx_control+0x2854>
 8010816:	46c0      	nop			@ (mov r8, r8)
 8010818:	2000205a 	.word	0x2000205a
 801081c:	2000206a 	.word	0x2000206a
 8010820:	2000206b 	.word	0x2000206b
 8010824:	0803c000 	.word	0x0803c000
 8010828:	20000bb7 	.word	0x20000bb7
 801082c:	2000204c 	.word	0x2000204c
 8010830:	20000bb6 	.word	0x20000bb6
 8010834:	20001f08 	.word	0x20001f08
 8010838:	20001f00 	.word	0x20001f00
 801083c:	20001f04 	.word	0x20001f04
 8010840:	2000205b 	.word	0x2000205b
 8010844:	20001f24 	.word	0x20001f24
 8010848:	20001f10 	.word	0x20001f10
 801084c:	20001f28 	.word	0x20001f28
 8010850:	20001f0d 	.word	0x20001f0d
 8010854:	20001f18 	.word	0x20001f18
 8010858:	2000206c 	.word	0x2000206c
 801085c:	20002044 	.word	0x20002044
 8010860:	20000e9b 	.word	0x20000e9b
 8010864:	20000e86 	.word	0x20000e86
 8010868:	20000e9a 	.word	0x20000e9a
 801086c:	20000e87 	.word	0x20000e87
 8010870:	20000e90 	.word	0x20000e90
 8010874:	20000df8 	.word	0x20000df8
 8010878:	20000e8c 	.word	0x20000e8c
 801087c:	08037000 	.word	0x08037000
 8010880:	20000e78 	.word	0x20000e78
 8010884:	20000e7c 	.word	0x20000e7c
 8010888:	20000e80 	.word	0x20000e80
 801088c:	20002130 	.word	0x20002130
 8010890:	20002132 	.word	0x20002132
 8010894:	20002134 	.word	0x20002134
 8010898:	0803f812 	.word	0x0803f812
 801089c:	20000d74 	.word	0x20000d74
 80108a0:	20000cec 	.word	0x20000cec
 80108a4:	20001ea4 	.word	0x20001ea4
 80108a8:	20001ea6 	.word	0x20001ea6
 80108ac:	200001bb 	.word	0x200001bb
 80108b0:	200001bc 	.word	0x200001bc
 80108b4:	200001bd 	.word	0x200001bd
 80108b8:	200001be 	.word	0x200001be
 80108bc:	200001bf 	.word	0x200001bf
 80108c0:	200001c0 	.word	0x200001c0
 80108c4:	200001c1 	.word	0x200001c1
 80108c8:	200001c2 	.word	0x200001c2
 80108cc:	2000205c 	.word	0x2000205c
 80108d0:	2000206e 	.word	0x2000206e
 80108d4:	2000212c 	.word	0x2000212c
 80108d8:	0000059f 	.word	0x0000059f
 80108dc:	20002040 	.word	0x20002040
 80108e0:	200021ec 	.word	0x200021ec
 80108e4:	2000206f 	.word	0x2000206f
 80108e8:	2000205f 	.word	0x2000205f
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 80108ec:	4bdf      	ldr	r3, [pc, #892]	@ (8010c6c <tx_control+0x2ce4>)
 80108ee:	7c9a      	ldrb	r2, [r3, #18]
 80108f0:	4bdf      	ldr	r3, [pc, #892]	@ (8010c70 <tx_control+0x2ce8>)
 80108f2:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 80108f4:	4bdd      	ldr	r3, [pc, #884]	@ (8010c6c <tx_control+0x2ce4>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 80108fa:	4bdd      	ldr	r3, [pc, #884]	@ (8010c70 <tx_control+0x2ce8>)
 80108fc:	781a      	ldrb	r2, [r3, #0]
 80108fe:	4bdb      	ldr	r3, [pc, #876]	@ (8010c6c <tx_control+0x2ce4>)
 8010900:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010902:	4bdc      	ldr	r3, [pc, #880]	@ (8010c74 <tx_control+0x2cec>)
 8010904:	4ad9      	ldr	r2, [pc, #868]	@ (8010c6c <tx_control+0x2ce4>)
 8010906:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010908:	4bdb      	ldr	r3, [pc, #876]	@ (8010c78 <tx_control+0x2cf0>)
 801090a:	4ad8      	ldr	r2, [pc, #864]	@ (8010c6c <tx_control+0x2ce4>)
 801090c:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 801090e:	4bdb      	ldr	r3, [pc, #876]	@ (8010c7c <tx_control+0x2cf4>)
 8010910:	4adb      	ldr	r2, [pc, #876]	@ (8010c80 <tx_control+0x2cf8>)
 8010912:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 8010914:	4bdb      	ldr	r3, [pc, #876]	@ (8010c84 <tx_control+0x2cfc>)
 8010916:	2214      	movs	r2, #20
 8010918:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 801091a:	4bdb      	ldr	r3, [pc, #876]	@ (8010c88 <tx_control+0x2d00>)
 801091c:	2200      	movs	r2, #0
 801091e:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010920:	4bda      	ldr	r3, [pc, #872]	@ (8010c8c <tx_control+0x2d04>)
 8010922:	2200      	movs	r2, #0
 8010924:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010926:	4bd8      	ldr	r3, [pc, #864]	@ (8010c88 <tx_control+0x2d00>)
 8010928:	2201      	movs	r2, #1
 801092a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 801092c:	4bd8      	ldr	r3, [pc, #864]	@ (8010c90 <tx_control+0x2d08>)
 801092e:	2255      	movs	r2, #85	@ 0x55
 8010930:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 8010932:	4bd8      	ldr	r3, [pc, #864]	@ (8010c94 <tx_control+0x2d0c>)
 8010934:	2200      	movs	r2, #0
 8010936:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 8010938:	4bd7      	ldr	r3, [pc, #860]	@ (8010c98 <tx_control+0x2d10>)
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	3301      	adds	r3, #1
 801093e:	b29a      	uxth	r2, r3
 8010940:	4bd5      	ldr	r3, [pc, #852]	@ (8010c98 <tx_control+0x2d10>)
 8010942:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 8010944:	f000 fc4e 	bl	80111e4 <tx_control+0x325c>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 8010948:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 801094a:	4bd4      	ldr	r3, [pc, #848]	@ (8010c9c <tx_control+0x2d14>)
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <tx_control+0x29ce>
 8010952:	f000 fc40 	bl	80111d6 <tx_control+0x324e>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 8010956:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 8010958:	4bcd      	ldr	r3, [pc, #820]	@ (8010c90 <tx_control+0x2d08>)
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d001      	beq.n	8010964 <tx_control+0x29dc>
 8010960:	f000 fc3c 	bl	80111dc <tx_control+0x3254>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 8010964:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 8010966:	4bce      	ldr	r3, [pc, #824]	@ (8010ca0 <tx_control+0x2d18>)
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d147      	bne.n	80109fe <tx_control+0x2a76>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 801096e:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 8010970:	4bcc      	ldr	r3, [pc, #816]	@ (8010ca4 <tx_control+0x2d1c>)
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d100      	bne.n	801097a <tx_control+0x29f2>
 8010978:	e07f      	b.n	8010a7a <tx_control+0x2af2>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 801097a:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 801097c:	4bca      	ldr	r3, [pc, #808]	@ (8010ca8 <tx_control+0x2d20>)
 801097e:	2240      	movs	r2, #64	@ 0x40
 8010980:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 8010982:	4bc9      	ldr	r3, [pc, #804]	@ (8010ca8 <tx_control+0x2d20>)
 8010984:	2282      	movs	r2, #130	@ 0x82
 8010986:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = reePlantilla[eeversion1];
 8010988:	4bc8      	ldr	r3, [pc, #800]	@ (8010cac <tx_control+0x2d24>)
 801098a:	227b      	movs	r2, #123	@ 0x7b
 801098c:	5c9a      	ldrb	r2, [r3, r2]
 801098e:	4bc6      	ldr	r3, [pc, #792]	@ (8010ca8 <tx_control+0x2d20>)
 8010990:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = reePlantilla[eeversion2];
 8010992:	4bc6      	ldr	r3, [pc, #792]	@ (8010cac <tx_control+0x2d24>)
 8010994:	227c      	movs	r2, #124	@ 0x7c
 8010996:	5c9a      	ldrb	r2, [r3, r2]
 8010998:	4bc3      	ldr	r3, [pc, #780]	@ (8010ca8 <tx_control+0x2d20>)
 801099a:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 801099c:	4bc4      	ldr	r3, [pc, #784]	@ (8010cb0 <tx_control+0x2d28>)
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	0a1b      	lsrs	r3, r3, #8
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	4bc0      	ldr	r3, [pc, #768]	@ (8010ca8 <tx_control+0x2d20>)
 80109a8:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 80109aa:	4bc1      	ldr	r3, [pc, #772]	@ (8010cb0 <tx_control+0x2d28>)
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	4bbd      	ldr	r3, [pc, #756]	@ (8010ca8 <tx_control+0x2d20>)
 80109b2:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 80109b4:	4bbf      	ldr	r3, [pc, #764]	@ (8010cb4 <tx_control+0x2d2c>)
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	0a1b      	lsrs	r3, r3, #8
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	4bba      	ldr	r3, [pc, #744]	@ (8010ca8 <tx_control+0x2d20>)
 80109c0:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 80109c2:	4bbc      	ldr	r3, [pc, #752]	@ (8010cb4 <tx_control+0x2d2c>)
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	b2da      	uxtb	r2, r3
 80109c8:	4bb7      	ldr	r3, [pc, #732]	@ (8010ca8 <tx_control+0x2d20>)
 80109ca:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 80109cc:	4bb6      	ldr	r3, [pc, #728]	@ (8010ca8 <tx_control+0x2d20>)
 80109ce:	2201      	movs	r2, #1
 80109d0:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 80109d2:	4bb9      	ldr	r3, [pc, #740]	@ (8010cb8 <tx_control+0x2d30>)
 80109d4:	781a      	ldrb	r2, [r3, #0]
 80109d6:	4bb4      	ldr	r3, [pc, #720]	@ (8010ca8 <tx_control+0x2d20>)
 80109d8:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 80109da:	4bb8      	ldr	r3, [pc, #736]	@ (8010cbc <tx_control+0x2d34>)
 80109dc:	781a      	ldrb	r2, [r3, #0]
 80109de:	4bb2      	ldr	r3, [pc, #712]	@ (8010ca8 <tx_control+0x2d20>)
 80109e0:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 80109e2:	4bb7      	ldr	r3, [pc, #732]	@ (8010cc0 <tx_control+0x2d38>)
 80109e4:	781a      	ldrb	r2, [r3, #0]
 80109e6:	4bb0      	ldr	r3, [pc, #704]	@ (8010ca8 <tx_control+0x2d20>)
 80109e8:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 80109ea:	4bad      	ldr	r3, [pc, #692]	@ (8010ca0 <tx_control+0x2d18>)
 80109ec:	2201      	movs	r2, #1
 80109ee:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 80109f0:	4bb4      	ldr	r3, [pc, #720]	@ (8010cc4 <tx_control+0x2d3c>)
 80109f2:	2250      	movs	r2, #80	@ 0x50
 80109f4:	5c9b      	ldrb	r3, [r3, r2]
 80109f6:	001a      	movs	r2, r3
 80109f8:	4bb3      	ldr	r3, [pc, #716]	@ (8010cc8 <tx_control+0x2d40>)
 80109fa:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 80109fc:	e040      	b.n	8010a80 <tx_control+0x2af8>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 80109fe:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 8010a00:	4ba8      	ldr	r3, [pc, #672]	@ (8010ca4 <tx_control+0x2d1c>)
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d13a      	bne.n	8010a7e <tx_control+0x2af6>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 8010a08:	4baf      	ldr	r3, [pc, #700]	@ (8010cc8 <tx_control+0x2d40>)
 8010a0a:	881b      	ldrh	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d003      	beq.n	8010a18 <tx_control+0x2a90>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010a10:	4ba3      	ldr	r3, [pc, #652]	@ (8010ca0 <tx_control+0x2d18>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 8010a16:	e033      	b.n	8010a80 <tx_control+0x2af8>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 8010a18:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 8010a1a:	4ba5      	ldr	r3, [pc, #660]	@ (8010cb0 <tx_control+0x2d28>)
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	0a1b      	lsrs	r3, r3, #8
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	4ba0      	ldr	r3, [pc, #640]	@ (8010ca8 <tx_control+0x2d20>)
 8010a26:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 8010a28:	4ba1      	ldr	r3, [pc, #644]	@ (8010cb0 <tx_control+0x2d28>)
 8010a2a:	881b      	ldrh	r3, [r3, #0]
 8010a2c:	b2da      	uxtb	r2, r3
 8010a2e:	4b9e      	ldr	r3, [pc, #632]	@ (8010ca8 <tx_control+0x2d20>)
 8010a30:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 8010a32:	4ba0      	ldr	r3, [pc, #640]	@ (8010cb4 <tx_control+0x2d2c>)
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	0a1b      	lsrs	r3, r3, #8
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8010ca8 <tx_control+0x2d20>)
 8010a3e:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8010a40:	4b9c      	ldr	r3, [pc, #624]	@ (8010cb4 <tx_control+0x2d2c>)
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b2da      	uxtb	r2, r3
 8010a46:	4b98      	ldr	r3, [pc, #608]	@ (8010ca8 <tx_control+0x2d20>)
 8010a48:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8010a4a:	4ba0      	ldr	r3, [pc, #640]	@ (8010ccc <tx_control+0x2d44>)
 8010a4c:	781a      	ldrb	r2, [r3, #0]
 8010a4e:	4b96      	ldr	r3, [pc, #600]	@ (8010ca8 <tx_control+0x2d20>)
 8010a50:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 8010a52:	4b9f      	ldr	r3, [pc, #636]	@ (8010cd0 <tx_control+0x2d48>)
 8010a54:	781a      	ldrb	r2, [r3, #0]
 8010a56:	4b94      	ldr	r3, [pc, #592]	@ (8010ca8 <tx_control+0x2d20>)
 8010a58:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010a5a:	4b91      	ldr	r3, [pc, #580]	@ (8010ca0 <tx_control+0x2d18>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 8010a60:	4b84      	ldr	r3, [pc, #528]	@ (8010c74 <tx_control+0x2cec>)
 8010a62:	4a9c      	ldr	r2, [pc, #624]	@ (8010cd4 <tx_control+0x2d4c>)
 8010a64:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 8010a66:	4b84      	ldr	r3, [pc, #528]	@ (8010c78 <tx_control+0x2cf0>)
 8010a68:	4a9a      	ldr	r2, [pc, #616]	@ (8010cd4 <tx_control+0x2d4c>)
 8010a6a:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 8010a6c:	4b83      	ldr	r3, [pc, #524]	@ (8010c7c <tx_control+0x2cf4>)
 8010a6e:	4a9a      	ldr	r2, [pc, #616]	@ (8010cd8 <tx_control+0x2d50>)
 8010a70:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 8010a72:	4b84      	ldr	r3, [pc, #528]	@ (8010c84 <tx_control+0x2cfc>)
 8010a74:	2212      	movs	r2, #18
 8010a76:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010a78:	e1b0      	b.n	8010ddc <tx_control+0x2e54>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 8010a7a:	46c0      	nop			@ (mov r8, r8)
 8010a7c:	e000      	b.n	8010a80 <tx_control+0x2af8>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 8010a7e:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 8010a80:	4b87      	ldr	r3, [pc, #540]	@ (8010ca0 <tx_control+0x2d18>)
 8010a82:	785b      	ldrb	r3, [r3, #1]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d140      	bne.n	8010b0a <tx_control+0x2b82>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 8010a88:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 8010a8a:	4b94      	ldr	r3, [pc, #592]	@ (8010cdc <tx_control+0x2d54>)
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d071      	beq.n	8010b76 <tx_control+0x2bee>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 8010a92:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 8010a94:	4b92      	ldr	r3, [pc, #584]	@ (8010ce0 <tx_control+0x2d58>)
 8010a96:	2240      	movs	r2, #64	@ 0x40
 8010a98:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 8010a9a:	4b91      	ldr	r3, [pc, #580]	@ (8010ce0 <tx_control+0x2d58>)
 8010a9c:	2282      	movs	r2, #130	@ 0x82
 8010a9e:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = reePlantilla[eeversion1];
 8010aa0:	4b82      	ldr	r3, [pc, #520]	@ (8010cac <tx_control+0x2d24>)
 8010aa2:	227b      	movs	r2, #123	@ 0x7b
 8010aa4:	5c9a      	ldrb	r2, [r3, r2]
 8010aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8010ce0 <tx_control+0x2d58>)
 8010aa8:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = reePlantilla[eeversion2];
 8010aaa:	4b80      	ldr	r3, [pc, #512]	@ (8010cac <tx_control+0x2d24>)
 8010aac:	227c      	movs	r2, #124	@ 0x7c
 8010aae:	5c9a      	ldrb	r2, [r3, r2]
 8010ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8010ce0 <tx_control+0x2d58>)
 8010ab2:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8010cb0 <tx_control+0x2d28>)
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	0a1b      	lsrs	r3, r3, #8
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	4b88      	ldr	r3, [pc, #544]	@ (8010ce0 <tx_control+0x2d58>)
 8010ac0:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8010cb0 <tx_control+0x2d28>)
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	4b85      	ldr	r3, [pc, #532]	@ (8010ce0 <tx_control+0x2d58>)
 8010aca:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 8010acc:	4b79      	ldr	r3, [pc, #484]	@ (8010cb4 <tx_control+0x2d2c>)
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	0a1b      	lsrs	r3, r3, #8
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	4b82      	ldr	r3, [pc, #520]	@ (8010ce0 <tx_control+0x2d58>)
 8010ad8:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010ada:	4b76      	ldr	r3, [pc, #472]	@ (8010cb4 <tx_control+0x2d2c>)
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	b2da      	uxtb	r2, r3
 8010ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8010ce0 <tx_control+0x2d58>)
 8010ae2:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 8010ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8010ce0 <tx_control+0x2d58>)
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8010aea:	4b73      	ldr	r3, [pc, #460]	@ (8010cb8 <tx_control+0x2d30>)
 8010aec:	781a      	ldrb	r2, [r3, #0]
 8010aee:	4b7c      	ldr	r3, [pc, #496]	@ (8010ce0 <tx_control+0x2d58>)
 8010af0:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 8010af2:	4b72      	ldr	r3, [pc, #456]	@ (8010cbc <tx_control+0x2d34>)
 8010af4:	781a      	ldrb	r2, [r3, #0]
 8010af6:	4b7a      	ldr	r3, [pc, #488]	@ (8010ce0 <tx_control+0x2d58>)
 8010af8:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 8010afa:	4b71      	ldr	r3, [pc, #452]	@ (8010cc0 <tx_control+0x2d38>)
 8010afc:	781a      	ldrb	r2, [r3, #0]
 8010afe:	4b78      	ldr	r3, [pc, #480]	@ (8010ce0 <tx_control+0x2d58>)
 8010b00:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 8010b02:	4b67      	ldr	r3, [pc, #412]	@ (8010ca0 <tx_control+0x2d18>)
 8010b04:	2201      	movs	r2, #1
 8010b06:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 8010b08:	e038      	b.n	8010b7c <tx_control+0x2bf4>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8010b0a:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 8010b0c:	4b73      	ldr	r3, [pc, #460]	@ (8010cdc <tx_control+0x2d54>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d132      	bne.n	8010b7a <tx_control+0x2bf2>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 8010b14:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010b16:	4b66      	ldr	r3, [pc, #408]	@ (8010cb0 <tx_control+0x2d28>)
 8010b18:	881b      	ldrh	r3, [r3, #0]
 8010b1a:	0a1b      	lsrs	r3, r3, #8
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	b2da      	uxtb	r2, r3
 8010b20:	4b6f      	ldr	r3, [pc, #444]	@ (8010ce0 <tx_control+0x2d58>)
 8010b22:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010b24:	4b62      	ldr	r3, [pc, #392]	@ (8010cb0 <tx_control+0x2d28>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8010ce0 <tx_control+0x2d58>)
 8010b2c:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010b2e:	4b61      	ldr	r3, [pc, #388]	@ (8010cb4 <tx_control+0x2d2c>)
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	0a1b      	lsrs	r3, r3, #8
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	4b69      	ldr	r3, [pc, #420]	@ (8010ce0 <tx_control+0x2d58>)
 8010b3a:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010b3c:	4b5d      	ldr	r3, [pc, #372]	@ (8010cb4 <tx_control+0x2d2c>)
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	4b67      	ldr	r3, [pc, #412]	@ (8010ce0 <tx_control+0x2d58>)
 8010b44:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 8010b46:	4b61      	ldr	r3, [pc, #388]	@ (8010ccc <tx_control+0x2d44>)
 8010b48:	781a      	ldrb	r2, [r3, #0]
 8010b4a:	4b65      	ldr	r3, [pc, #404]	@ (8010ce0 <tx_control+0x2d58>)
 8010b4c:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 8010b4e:	4b60      	ldr	r3, [pc, #384]	@ (8010cd0 <tx_control+0x2d48>)
 8010b50:	781a      	ldrb	r2, [r3, #0]
 8010b52:	4b63      	ldr	r3, [pc, #396]	@ (8010ce0 <tx_control+0x2d58>)
 8010b54:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 8010b56:	4b52      	ldr	r3, [pc, #328]	@ (8010ca0 <tx_control+0x2d18>)
 8010b58:	2200      	movs	r2, #0
 8010b5a:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 8010b5c:	4b45      	ldr	r3, [pc, #276]	@ (8010c74 <tx_control+0x2cec>)
 8010b5e:	4a60      	ldr	r2, [pc, #384]	@ (8010ce0 <tx_control+0x2d58>)
 8010b60:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 8010b62:	4b45      	ldr	r3, [pc, #276]	@ (8010c78 <tx_control+0x2cf0>)
 8010b64:	4a5e      	ldr	r2, [pc, #376]	@ (8010ce0 <tx_control+0x2d58>)
 8010b66:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 8010b68:	4b44      	ldr	r3, [pc, #272]	@ (8010c7c <tx_control+0x2cf4>)
 8010b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8010ce4 <tx_control+0x2d5c>)
 8010b6c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010b6e:	4b45      	ldr	r3, [pc, #276]	@ (8010c84 <tx_control+0x2cfc>)
 8010b70:	2212      	movs	r2, #18
 8010b72:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 8010b74:	e132      	b.n	8010ddc <tx_control+0x2e54>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 8010b76:	46c0      	nop			@ (mov r8, r8)
 8010b78:	e000      	b.n	8010b7c <tx_control+0x2bf4>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 8010b7a:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 8010b7c:	4b48      	ldr	r3, [pc, #288]	@ (8010ca0 <tx_control+0x2d18>)
 8010b7e:	789b      	ldrb	r3, [r3, #2]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d139      	bne.n	8010bf8 <tx_control+0x2c70>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 8010b84:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 8010b86:	4b58      	ldr	r3, [pc, #352]	@ (8010ce8 <tx_control+0x2d60>)
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	2b03      	cmp	r3, #3
 8010b8c:	d16b      	bne.n	8010c66 <tx_control+0x2cde>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = reePlantilla[eeversion1];
 8010b8e:	4b47      	ldr	r3, [pc, #284]	@ (8010cac <tx_control+0x2d24>)
 8010b90:	227b      	movs	r2, #123	@ 0x7b
 8010b92:	5c9a      	ldrb	r2, [r3, r2]
 8010b94:	4b55      	ldr	r3, [pc, #340]	@ (8010cec <tx_control+0x2d64>)
 8010b96:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = reePlantilla[eeversion2];
 8010b98:	4b44      	ldr	r3, [pc, #272]	@ (8010cac <tx_control+0x2d24>)
 8010b9a:	227c      	movs	r2, #124	@ 0x7c
 8010b9c:	5c9a      	ldrb	r2, [r3, r2]
 8010b9e:	4b53      	ldr	r3, [pc, #332]	@ (8010cec <tx_control+0x2d64>)
 8010ba0:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010ba2:	4b43      	ldr	r3, [pc, #268]	@ (8010cb0 <tx_control+0x2d28>)
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	0a1b      	lsrs	r3, r3, #8
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	b2da      	uxtb	r2, r3
 8010bac:	4b4f      	ldr	r3, [pc, #316]	@ (8010cec <tx_control+0x2d64>)
 8010bae:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8010cb0 <tx_control+0x2d28>)
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8010cec <tx_control+0x2d64>)
 8010bb8:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010bba:	4b3e      	ldr	r3, [pc, #248]	@ (8010cb4 <tx_control+0x2d2c>)
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	0a1b      	lsrs	r3, r3, #8
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	4b49      	ldr	r3, [pc, #292]	@ (8010cec <tx_control+0x2d64>)
 8010bc6:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8010cb4 <tx_control+0x2d2c>)
 8010bca:	881b      	ldrh	r3, [r3, #0]
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b47      	ldr	r3, [pc, #284]	@ (8010cec <tx_control+0x2d64>)
 8010bd0:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 8010bd2:	4b46      	ldr	r3, [pc, #280]	@ (8010cec <tx_control+0x2d64>)
 8010bd4:	2203      	movs	r2, #3
 8010bd6:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 8010bd8:	4b37      	ldr	r3, [pc, #220]	@ (8010cb8 <tx_control+0x2d30>)
 8010bda:	781a      	ldrb	r2, [r3, #0]
 8010bdc:	4b43      	ldr	r3, [pc, #268]	@ (8010cec <tx_control+0x2d64>)
 8010bde:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 8010be0:	4b36      	ldr	r3, [pc, #216]	@ (8010cbc <tx_control+0x2d34>)
 8010be2:	781a      	ldrb	r2, [r3, #0]
 8010be4:	4b41      	ldr	r3, [pc, #260]	@ (8010cec <tx_control+0x2d64>)
 8010be6:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 8010be8:	4b35      	ldr	r3, [pc, #212]	@ (8010cc0 <tx_control+0x2d38>)
 8010bea:	781a      	ldrb	r2, [r3, #0]
 8010bec:	4b3f      	ldr	r3, [pc, #252]	@ (8010cec <tx_control+0x2d64>)
 8010bee:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 8010bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8010ca0 <tx_control+0x2d18>)
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 8010bf6:	e07e      	b.n	8010cf6 <tx_control+0x2d6e>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8010bf8:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 8010bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8010ce8 <tx_control+0x2d60>)
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d100      	bne.n	8010c04 <tx_control+0x2c7c>
 8010c02:	e077      	b.n	8010cf4 <tx_control+0x2d6c>
			goto power_event_WF;
		}
desh_event_end_WF:
 8010c04:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010c06:	4b2a      	ldr	r3, [pc, #168]	@ (8010cb0 <tx_control+0x2d28>)
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	0a1b      	lsrs	r3, r3, #8
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	b2da      	uxtb	r2, r3
 8010c10:	4b36      	ldr	r3, [pc, #216]	@ (8010cec <tx_control+0x2d64>)
 8010c12:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010c14:	4b26      	ldr	r3, [pc, #152]	@ (8010cb0 <tx_control+0x2d28>)
 8010c16:	881b      	ldrh	r3, [r3, #0]
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	4b34      	ldr	r3, [pc, #208]	@ (8010cec <tx_control+0x2d64>)
 8010c1c:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010c1e:	4b25      	ldr	r3, [pc, #148]	@ (8010cb4 <tx_control+0x2d2c>)
 8010c20:	881b      	ldrh	r3, [r3, #0]
 8010c22:	0a1b      	lsrs	r3, r3, #8
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	b2da      	uxtb	r2, r3
 8010c28:	4b30      	ldr	r3, [pc, #192]	@ (8010cec <tx_control+0x2d64>)
 8010c2a:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010c2c:	4b21      	ldr	r3, [pc, #132]	@ (8010cb4 <tx_control+0x2d2c>)
 8010c2e:	881b      	ldrh	r3, [r3, #0]
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b2e      	ldr	r3, [pc, #184]	@ (8010cec <tx_control+0x2d64>)
 8010c34:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 8010c36:	4b25      	ldr	r3, [pc, #148]	@ (8010ccc <tx_control+0x2d44>)
 8010c38:	781a      	ldrb	r2, [r3, #0]
 8010c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8010cec <tx_control+0x2d64>)
 8010c3c:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 8010c3e:	4b24      	ldr	r3, [pc, #144]	@ (8010cd0 <tx_control+0x2d48>)
 8010c40:	781a      	ldrb	r2, [r3, #0]
 8010c42:	4b2a      	ldr	r3, [pc, #168]	@ (8010cec <tx_control+0x2d64>)
 8010c44:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 8010c46:	4b16      	ldr	r3, [pc, #88]	@ (8010ca0 <tx_control+0x2d18>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 8010c4c:	4b09      	ldr	r3, [pc, #36]	@ (8010c74 <tx_control+0x2cec>)
 8010c4e:	4a27      	ldr	r2, [pc, #156]	@ (8010cec <tx_control+0x2d64>)
 8010c50:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 8010c52:	4b09      	ldr	r3, [pc, #36]	@ (8010c78 <tx_control+0x2cf0>)
 8010c54:	4a25      	ldr	r2, [pc, #148]	@ (8010cec <tx_control+0x2d64>)
 8010c56:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 8010c58:	4b08      	ldr	r3, [pc, #32]	@ (8010c7c <tx_control+0x2cf4>)
 8010c5a:	4a25      	ldr	r2, [pc, #148]	@ (8010cf0 <tx_control+0x2d68>)
 8010c5c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010c5e:	4b09      	ldr	r3, [pc, #36]	@ (8010c84 <tx_control+0x2cfc>)
 8010c60:	2212      	movs	r2, #18
 8010c62:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010c64:	e0ba      	b.n	8010ddc <tx_control+0x2e54>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 8010c66:	46c0      	nop			@ (mov r8, r8)
 8010c68:	e045      	b.n	8010cf6 <tx_control+0x2d6e>
 8010c6a:	46c0      	nop			@ (mov r8, r8)
 8010c6c:	2000204c 	.word	0x2000204c
 8010c70:	20000bb6 	.word	0x20000bb6
 8010c74:	20001f08 	.word	0x20001f08
 8010c78:	20001f00 	.word	0x20001f00
 8010c7c:	20001f04 	.word	0x20001f04
 8010c80:	20002060 	.word	0x20002060
 8010c84:	20001f24 	.word	0x20001f24
 8010c88:	20001f10 	.word	0x20001f10
 8010c8c:	20001f28 	.word	0x20001f28
 8010c90:	20001f0d 	.word	0x20001f0d
 8010c94:	20001f18 	.word	0x20001f18
 8010c98:	2000206c 	.word	0x2000206c
 8010c9c:	2000206f 	.word	0x2000206f
 8010ca0:	20002030 	.word	0x20002030
 8010ca4:	20000c9c 	.word	0x20000c9c
 8010ca8:	20001fe0 	.word	0x20001fe0
 8010cac:	20000cec 	.word	0x20000cec
 8010cb0:	20001ea4 	.word	0x20001ea4
 8010cb4:	20001ea6 	.word	0x20001ea6
 8010cb8:	20000c10 	.word	0x20000c10
 8010cbc:	20000c11 	.word	0x20000c11
 8010cc0:	20000c2e 	.word	0x20000c2e
 8010cc4:	200000b8 	.word	0x200000b8
 8010cc8:	20001fcc 	.word	0x20001fcc
 8010ccc:	20000c12 	.word	0x20000c12
 8010cd0:	20000c13 	.word	0x20000c13
 8010cd4:	2000201c 	.word	0x2000201c
 8010cd8:	2000202d 	.word	0x2000202d
 8010cdc:	20000c04 	.word	0x20000c04
 8010ce0:	20001ff4 	.word	0x20001ff4
 8010ce4:	20002005 	.word	0x20002005
 8010ce8:	20000bf8 	.word	0x20000bf8
 8010cec:	20002008 	.word	0x20002008
 8010cf0:	20002019 	.word	0x20002019
			goto power_event_WF;
 8010cf4:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 8010cf6:	4bd6      	ldr	r3, [pc, #856]	@ (8011050 <tx_control+0x30c8>)
 8010cf8:	78db      	ldrb	r3, [r3, #3]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d067      	beq.n	8010dce <tx_control+0x2e46>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 8010cfe:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 8010d00:	4bd4      	ldr	r3, [pc, #848]	@ (8011054 <tx_control+0x30cc>)
 8010d02:	2240      	movs	r2, #64	@ 0x40
 8010d04:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 8010d06:	4bd3      	ldr	r3, [pc, #844]	@ (8011054 <tx_control+0x30cc>)
 8010d08:	2282      	movs	r2, #130	@ 0x82
 8010d0a:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = reePlantilla[eeversion1];
 8010d0c:	4bd2      	ldr	r3, [pc, #840]	@ (8011058 <tx_control+0x30d0>)
 8010d0e:	227b      	movs	r2, #123	@ 0x7b
 8010d10:	5c9a      	ldrb	r2, [r3, r2]
 8010d12:	4bd0      	ldr	r3, [pc, #832]	@ (8011054 <tx_control+0x30cc>)
 8010d14:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = reePlantilla[eeversion2];
 8010d16:	4bd0      	ldr	r3, [pc, #832]	@ (8011058 <tx_control+0x30d0>)
 8010d18:	227c      	movs	r2, #124	@ 0x7c
 8010d1a:	5c9a      	ldrb	r2, [r3, r2]
 8010d1c:	4bcd      	ldr	r3, [pc, #820]	@ (8011054 <tx_control+0x30cc>)
 8010d1e:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010d20:	4bce      	ldr	r3, [pc, #824]	@ (801105c <tx_control+0x30d4>)
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	0a1b      	lsrs	r3, r3, #8
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	4bca      	ldr	r3, [pc, #808]	@ (8011054 <tx_control+0x30cc>)
 8010d2c:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010d2e:	4bcb      	ldr	r3, [pc, #812]	@ (801105c <tx_control+0x30d4>)
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	b2da      	uxtb	r2, r3
 8010d34:	4bc7      	ldr	r3, [pc, #796]	@ (8011054 <tx_control+0x30cc>)
 8010d36:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010d38:	4bc9      	ldr	r3, [pc, #804]	@ (8011060 <tx_control+0x30d8>)
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	0a1b      	lsrs	r3, r3, #8
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	4bc4      	ldr	r3, [pc, #784]	@ (8011054 <tx_control+0x30cc>)
 8010d44:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010d46:	4bc6      	ldr	r3, [pc, #792]	@ (8011060 <tx_control+0x30d8>)
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	4bc1      	ldr	r3, [pc, #772]	@ (8011054 <tx_control+0x30cc>)
 8010d4e:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 8010d50:	4bc0      	ldr	r3, [pc, #768]	@ (8011054 <tx_control+0x30cc>)
 8010d52:	2204      	movs	r2, #4
 8010d54:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 8010d56:	4bc3      	ldr	r3, [pc, #780]	@ (8011064 <tx_control+0x30dc>)
 8010d58:	781a      	ldrb	r2, [r3, #0]
 8010d5a:	4bbe      	ldr	r3, [pc, #760]	@ (8011054 <tx_control+0x30cc>)
 8010d5c:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 8010d5e:	4bc2      	ldr	r3, [pc, #776]	@ (8011068 <tx_control+0x30e0>)
 8010d60:	781a      	ldrb	r2, [r3, #0]
 8010d62:	4bbc      	ldr	r3, [pc, #752]	@ (8011054 <tx_control+0x30cc>)
 8010d64:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 8010d66:	4bc1      	ldr	r3, [pc, #772]	@ (801106c <tx_control+0x30e4>)
 8010d68:	781a      	ldrb	r2, [r3, #0]
 8010d6a:	4bba      	ldr	r3, [pc, #744]	@ (8011054 <tx_control+0x30cc>)
 8010d6c:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010d6e:	4bbb      	ldr	r3, [pc, #748]	@ (801105c <tx_control+0x30d4>)
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	0a1b      	lsrs	r3, r3, #8
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	4bb6      	ldr	r3, [pc, #728]	@ (8011054 <tx_control+0x30cc>)
 8010d7a:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010d7c:	4bb7      	ldr	r3, [pc, #732]	@ (801105c <tx_control+0x30d4>)
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	4bb4      	ldr	r3, [pc, #720]	@ (8011054 <tx_control+0x30cc>)
 8010d84:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010d86:	4bb6      	ldr	r3, [pc, #728]	@ (8011060 <tx_control+0x30d8>)
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	0a1b      	lsrs	r3, r3, #8
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	4bb0      	ldr	r3, [pc, #704]	@ (8011054 <tx_control+0x30cc>)
 8010d92:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010d94:	4bb2      	ldr	r3, [pc, #712]	@ (8011060 <tx_control+0x30d8>)
 8010d96:	881b      	ldrh	r3, [r3, #0]
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	4bae      	ldr	r3, [pc, #696]	@ (8011054 <tx_control+0x30cc>)
 8010d9c:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 8010d9e:	4bb4      	ldr	r3, [pc, #720]	@ (8011070 <tx_control+0x30e8>)
 8010da0:	781a      	ldrb	r2, [r3, #0]
 8010da2:	4bac      	ldr	r3, [pc, #688]	@ (8011054 <tx_control+0x30cc>)
 8010da4:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 8010da6:	4bb3      	ldr	r3, [pc, #716]	@ (8011074 <tx_control+0x30ec>)
 8010da8:	781a      	ldrb	r2, [r3, #0]
 8010daa:	4baa      	ldr	r3, [pc, #680]	@ (8011054 <tx_control+0x30cc>)
 8010dac:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 8010dae:	4ba8      	ldr	r3, [pc, #672]	@ (8011050 <tx_control+0x30c8>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 8010db4:	4bb0      	ldr	r3, [pc, #704]	@ (8011078 <tx_control+0x30f0>)
 8010db6:	4aa7      	ldr	r2, [pc, #668]	@ (8011054 <tx_control+0x30cc>)
 8010db8:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 8010dba:	4bb0      	ldr	r3, [pc, #704]	@ (801107c <tx_control+0x30f4>)
 8010dbc:	4aa5      	ldr	r2, [pc, #660]	@ (8011054 <tx_control+0x30cc>)
 8010dbe:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 8010dc0:	4baf      	ldr	r3, [pc, #700]	@ (8011080 <tx_control+0x30f8>)
 8010dc2:	4ab0      	ldr	r2, [pc, #704]	@ (8011084 <tx_control+0x30fc>)
 8010dc4:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010dc6:	4bb0      	ldr	r3, [pc, #704]	@ (8011088 <tx_control+0x3100>)
 8010dc8:	2212      	movs	r2, #18
 8010dca:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010dcc:	e006      	b.n	8010ddc <tx_control+0x2e54>
		goto alarm_event_WF;// jra		alarm_event_WF
 8010dce:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 8010dd0:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 8010dd2:	4bae      	ldr	r3, [pc, #696]	@ (801108c <tx_control+0x3104>)
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d045      	beq.n	8010e66 <tx_control+0x2ede>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 8010dda:	e203      	b.n	80111e4 <tx_control+0x325c>
		bufferWifiTx[0] = 0x40;
 8010ddc:	4bac      	ldr	r3, [pc, #688]	@ (8011090 <tx_control+0x3108>)
 8010dde:	2240      	movs	r2, #64	@ 0x40
 8010de0:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 8010de2:	4bab      	ldr	r3, [pc, #684]	@ (8011090 <tx_control+0x3108>)
 8010de4:	2282      	movs	r2, #130	@ 0x82
 8010de6:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010de8:	4ba9      	ldr	r3, [pc, #676]	@ (8011090 <tx_control+0x3108>)
 8010dea:	2203      	movs	r2, #3
 8010dec:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 8010dee:	4b9a      	ldr	r3, [pc, #616]	@ (8011058 <tx_control+0x30d0>)
 8010df0:	227b      	movs	r2, #123	@ 0x7b
 8010df2:	5c9a      	ldrb	r2, [r3, r2]
 8010df4:	4ba6      	ldr	r3, [pc, #664]	@ (8011090 <tx_control+0x3108>)
 8010df6:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010df8:	4b97      	ldr	r3, [pc, #604]	@ (8011058 <tx_control+0x30d0>)
 8010dfa:	227c      	movs	r2, #124	@ 0x7c
 8010dfc:	5c9a      	ldrb	r2, [r3, r2]
 8010dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8011090 <tx_control+0x3108>)
 8010e00:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 8010e02:	4ba4      	ldr	r3, [pc, #656]	@ (8011094 <tx_control+0x310c>)
 8010e04:	220e      	movs	r2, #14
 8010e06:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 8010e08:	4b9b      	ldr	r3, [pc, #620]	@ (8011078 <tx_control+0x30f0>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	4aa2      	ldr	r2, [pc, #648]	@ (8011098 <tx_control+0x3110>)
 8010e10:	0011      	movs	r1, r2
 8010e12:	0018      	movs	r0, r3
 8010e14:	f7f6 f90c 	bl	8007030 <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 8010e18:	4b9d      	ldr	r3, [pc, #628]	@ (8011090 <tx_control+0x3108>)
 8010e1a:	7c9a      	ldrb	r2, [r3, #18]
 8010e1c:	4b9f      	ldr	r3, [pc, #636]	@ (801109c <tx_control+0x3114>)
 8010e1e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 8010e20:	4b9b      	ldr	r3, [pc, #620]	@ (8011090 <tx_control+0x3108>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 8010e26:	4b9d      	ldr	r3, [pc, #628]	@ (801109c <tx_control+0x3114>)
 8010e28:	781a      	ldrb	r2, [r3, #0]
 8010e2a:	4b99      	ldr	r3, [pc, #612]	@ (8011090 <tx_control+0x3108>)
 8010e2c:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 8010e2e:	4b92      	ldr	r3, [pc, #584]	@ (8011078 <tx_control+0x30f0>)
 8010e30:	4a97      	ldr	r2, [pc, #604]	@ (8011090 <tx_control+0x3108>)
 8010e32:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 8010e34:	4b91      	ldr	r3, [pc, #580]	@ (801107c <tx_control+0x30f4>)
 8010e36:	4a96      	ldr	r2, [pc, #600]	@ (8011090 <tx_control+0x3108>)
 8010e38:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 8010e3a:	4b91      	ldr	r3, [pc, #580]	@ (8011080 <tx_control+0x30f8>)
 8010e3c:	4a98      	ldr	r2, [pc, #608]	@ (80110a0 <tx_control+0x3118>)
 8010e3e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 8010e40:	4b91      	ldr	r3, [pc, #580]	@ (8011088 <tx_control+0x3100>)
 8010e42:	2214      	movs	r2, #20
 8010e44:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010e46:	4b97      	ldr	r3, [pc, #604]	@ (80110a4 <tx_control+0x311c>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 8010e4c:	4b96      	ldr	r3, [pc, #600]	@ (80110a8 <tx_control+0x3120>)
 8010e4e:	2200      	movs	r2, #0
 8010e50:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010e52:	4b94      	ldr	r3, [pc, #592]	@ (80110a4 <tx_control+0x311c>)
 8010e54:	2201      	movs	r2, #1
 8010e56:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010e58:	4b8c      	ldr	r3, [pc, #560]	@ (801108c <tx_control+0x3104>)
 8010e5a:	2255      	movs	r2, #85	@ 0x55
 8010e5c:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 8010e5e:	4b93      	ldr	r3, [pc, #588]	@ (80110ac <tx_control+0x3124>)
 8010e60:	2200      	movs	r2, #0
 8010e62:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 8010e64:	e1be      	b.n	80111e4 <tx_control+0x325c>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 8010e66:	4b92      	ldr	r3, [pc, #584]	@ (80110b0 <tx_control+0x3128>)
 8010e68:	881b      	ldrh	r3, [r3, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d000      	beq.n	8010e70 <tx_control+0x2ee8>
 8010e6e:	e1b8      	b.n	80111e2 <tx_control+0x325a>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 8010e70:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 8010e72:	4b90      	ldr	r3, [pc, #576]	@ (80110b4 <tx_control+0x312c>)
 8010e74:	2251      	movs	r2, #81	@ 0x51
 8010e76:	5c9a      	ldrb	r2, [r3, r2]
 8010e78:	4b86      	ldr	r3, [pc, #536]	@ (8011094 <tx_control+0x310c>)
 8010e7a:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 8010e7c:	4b85      	ldr	r3, [pc, #532]	@ (8011094 <tx_control+0x310c>)
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	001a      	movs	r2, r3
 8010e82:	233c      	movs	r3, #60	@ 0x3c
 8010e84:	4353      	muls	r3, r2
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	4b89      	ldr	r3, [pc, #548]	@ (80110b0 <tx_control+0x3128>)
 8010e8a:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 8010e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80110b8 <tx_control+0x3130>)
 8010e8e:	781a      	ldrb	r2, [r3, #0]
 8010e90:	4b8a      	ldr	r3, [pc, #552]	@ (80110bc <tx_control+0x3134>)
 8010e92:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 8010e94:	4b88      	ldr	r3, [pc, #544]	@ (80110b8 <tx_control+0x3130>)
 8010e96:	785a      	ldrb	r2, [r3, #1]
 8010e98:	4b88      	ldr	r3, [pc, #544]	@ (80110bc <tx_control+0x3134>)
 8010e9a:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 8010e9c:	4b87      	ldr	r3, [pc, #540]	@ (80110bc <tx_control+0x3134>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 8010ea2:	4b86      	ldr	r3, [pc, #536]	@ (80110bc <tx_control+0x3134>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 8010ea8:	4b84      	ldr	r3, [pc, #528]	@ (80110bc <tx_control+0x3134>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 8010eae:	4b83      	ldr	r3, [pc, #524]	@ (80110bc <tx_control+0x3134>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 8010eb4:	4b81      	ldr	r3, [pc, #516]	@ (80110bc <tx_control+0x3134>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 8010eba:	4b80      	ldr	r3, [pc, #512]	@ (80110bc <tx_control+0x3134>)
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 8010ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80110c0 <tx_control+0x3138>)
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	4053      	eors	r3, r2
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d103      	bne.n	8010ed6 <tx_control+0x2f4e>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 8010ece:	4b7b      	ldr	r3, [pc, #492]	@ (80110bc <tx_control+0x3134>)
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	709a      	strb	r2, [r3, #2]
 8010ed4:	e000      	b.n	8010ed8 <tx_control+0x2f50>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 8010ed6:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 8010ed8:	4b79      	ldr	r3, [pc, #484]	@ (80110c0 <tx_control+0x3138>)
 8010eda:	785b      	ldrb	r3, [r3, #1]
 8010edc:	2201      	movs	r2, #1
 8010ede:	4053      	eors	r3, r2
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d103      	bne.n	8010eee <tx_control+0x2f66>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 8010ee6:	4b75      	ldr	r3, [pc, #468]	@ (80110bc <tx_control+0x3134>)
 8010ee8:	2201      	movs	r2, #1
 8010eea:	70da      	strb	r2, [r3, #3]
 8010eec:	e000      	b.n	8010ef0 <tx_control+0x2f68>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 8010eee:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 8010ef0:	4b73      	ldr	r3, [pc, #460]	@ (80110c0 <tx_control+0x3138>)
 8010ef2:	789b      	ldrb	r3, [r3, #2]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	4053      	eors	r3, r2
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d103      	bne.n	8010f06 <tx_control+0x2f7e>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 8010efe:	4b6f      	ldr	r3, [pc, #444]	@ (80110bc <tx_control+0x3134>)
 8010f00:	2201      	movs	r2, #1
 8010f02:	711a      	strb	r2, [r3, #4]
 8010f04:	e000      	b.n	8010f08 <tx_control+0x2f80>
			goto noFlag_ahorro2_TD;
 8010f06:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 8010f08:	4b6e      	ldr	r3, [pc, #440]	@ (80110c4 <tx_control+0x313c>)
 8010f0a:	78db      	ldrb	r3, [r3, #3]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	4053      	eors	r3, r2
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d103      	bne.n	8010f1e <tx_control+0x2f96>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 8010f16:	4b69      	ldr	r3, [pc, #420]	@ (80110bc <tx_control+0x3134>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	715a      	strb	r2, [r3, #5]
 8010f1c:	e000      	b.n	8010f20 <tx_control+0x2f98>
			goto noFlag_nocturno_TD;
 8010f1e:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 8010f20:	4b69      	ldr	r3, [pc, #420]	@ (80110c8 <tx_control+0x3140>)
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	2201      	movs	r2, #1
 8010f26:	4053      	eors	r3, r2
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d103      	bne.n	8010f36 <tx_control+0x2fae>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 8010f2e:	4b63      	ldr	r3, [pc, #396]	@ (80110bc <tx_control+0x3134>)
 8010f30:	2201      	movs	r2, #1
 8010f32:	719a      	strb	r2, [r3, #6]
 8010f34:	e000      	b.n	8010f38 <tx_control+0x2fb0>
			goto noFlag_vent_TD;
 8010f36:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 8010f38:	4b5f      	ldr	r3, [pc, #380]	@ (80110b8 <tx_control+0x3130>)
 8010f3a:	789b      	ldrb	r3, [r3, #2]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	4053      	eors	r3, r2
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d103      	bne.n	8010f4e <tx_control+0x2fc6>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 8010f46:	4b5d      	ldr	r3, [pc, #372]	@ (80110bc <tx_control+0x3134>)
 8010f48:	2201      	movs	r2, #1
 8010f4a:	71da      	strb	r2, [r3, #7]
 8010f4c:	e000      	b.n	8010f50 <tx_control+0x2fc8>
			goto noFlag_Aux_TD;
 8010f4e:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 8010f50:	2317      	movs	r3, #23
 8010f52:	18fb      	adds	r3, r7, r3
 8010f54:	2200      	movs	r2, #0
 8010f56:	701a      	strb	r2, [r3, #0]
 8010f58:	e00d      	b.n	8010f76 <tx_control+0x2fee>
			alarmas2_TD[k] = (trefst2[k]);
 8010f5a:	2017      	movs	r0, #23
 8010f5c:	183b      	adds	r3, r7, r0
 8010f5e:	781a      	ldrb	r2, [r3, #0]
 8010f60:	183b      	adds	r3, r7, r0
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	4959      	ldr	r1, [pc, #356]	@ (80110cc <tx_control+0x3144>)
 8010f66:	5c89      	ldrb	r1, [r1, r2]
 8010f68:	4a59      	ldr	r2, [pc, #356]	@ (80110d0 <tx_control+0x3148>)
 8010f6a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 8010f6c:	183b      	adds	r3, r7, r0
 8010f6e:	781a      	ldrb	r2, [r3, #0]
 8010f70:	183b      	adds	r3, r7, r0
 8010f72:	3201      	adds	r2, #1
 8010f74:	701a      	strb	r2, [r3, #0]
 8010f76:	2317      	movs	r3, #23
 8010f78:	18fb      	adds	r3, r7, r3
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b07      	cmp	r3, #7
 8010f7e:	d9ec      	bls.n	8010f5a <tx_control+0x2fd2>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 8010f80:	4b53      	ldr	r3, [pc, #332]	@ (80110d0 <tx_control+0x3148>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 8010f86:	4b53      	ldr	r3, [pc, #332]	@ (80110d4 <tx_control+0x314c>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	613b      	str	r3, [r7, #16]
 8010f90:	e013      	b.n	8010fba <tx_control+0x3032>
			alarmas_TD |= (trefst[k] << k);
 8010f92:	4a51      	ldr	r2, [pc, #324]	@ (80110d8 <tx_control+0x3150>)
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	18d3      	adds	r3, r2, r3
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	001a      	movs	r2, r3
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	409a      	lsls	r2, r3
 8010fa0:	0013      	movs	r3, r2
 8010fa2:	b25a      	sxtb	r2, r3
 8010fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80110d4 <tx_control+0x314c>)
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	b25b      	sxtb	r3, r3
 8010faa:	4313      	orrs	r3, r2
 8010fac:	b25b      	sxtb	r3, r3
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	4b48      	ldr	r3, [pc, #288]	@ (80110d4 <tx_control+0x314c>)
 8010fb2:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	613b      	str	r3, [r7, #16]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2b07      	cmp	r3, #7
 8010fbe:	dde8      	ble.n	8010f92 <tx_control+0x300a>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 8010fc0:	4b33      	ldr	r3, [pc, #204]	@ (8011090 <tx_control+0x3108>)
 8010fc2:	2240      	movs	r2, #64	@ 0x40
 8010fc4:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 8010fc6:	4b32      	ldr	r3, [pc, #200]	@ (8011090 <tx_control+0x3108>)
 8010fc8:	2281      	movs	r2, #129	@ 0x81
 8010fca:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 8010fcc:	4b30      	ldr	r3, [pc, #192]	@ (8011090 <tx_control+0x3108>)
 8010fce:	2207      	movs	r2, #7
 8010fd0:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeveTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
		bufferWifiTx[3] = reePlantilla[eeversion1];
 8010fd2:	4b21      	ldr	r3, [pc, #132]	@ (8011058 <tx_control+0x30d0>)
 8010fd4:	227b      	movs	r2, #123	@ 0x7b
 8010fd6:	5c9a      	ldrb	r2, [r3, r2]
 8010fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8011090 <tx_control+0x3108>)
 8010fda:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8011058 <tx_control+0x30d0>)
 8010fde:	227c      	movs	r2, #124	@ 0x7c
 8010fe0:	5c9a      	ldrb	r2, [r3, r2]
 8010fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8011090 <tx_control+0x3108>)
 8010fe4:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010fe6:	4b1d      	ldr	r3, [pc, #116]	@ (801105c <tx_control+0x30d4>)
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	0a1b      	lsrs	r3, r3, #8
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	4b27      	ldr	r3, [pc, #156]	@ (8011090 <tx_control+0x3108>)
 8010ff2:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010ff4:	4b19      	ldr	r3, [pc, #100]	@ (801105c <tx_control+0x30d4>)
 8010ff6:	881b      	ldrh	r3, [r3, #0]
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b25      	ldr	r3, [pc, #148]	@ (8011090 <tx_control+0x3108>)
 8010ffc:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010ffe:	4b18      	ldr	r3, [pc, #96]	@ (8011060 <tx_control+0x30d8>)
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	0a1b      	lsrs	r3, r3, #8
 8011004:	b29b      	uxth	r3, r3
 8011006:	b2da      	uxtb	r2, r3
 8011008:	4b21      	ldr	r3, [pc, #132]	@ (8011090 <tx_control+0x3108>)
 801100a:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 801100c:	4b14      	ldr	r3, [pc, #80]	@ (8011060 <tx_control+0x30d8>)
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	b2da      	uxtb	r2, r3
 8011012:	4b1f      	ldr	r3, [pc, #124]	@ (8011090 <tx_control+0x3108>)
 8011014:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 8011016:	4b13      	ldr	r3, [pc, #76]	@ (8011064 <tx_control+0x30dc>)
 8011018:	781a      	ldrb	r2, [r3, #0]
 801101a:	4b1d      	ldr	r3, [pc, #116]	@ (8011090 <tx_control+0x3108>)
 801101c:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 801101e:	4b12      	ldr	r3, [pc, #72]	@ (8011068 <tx_control+0x30e0>)
 8011020:	781a      	ldrb	r2, [r3, #0]
 8011022:	4b1b      	ldr	r3, [pc, #108]	@ (8011090 <tx_control+0x3108>)
 8011024:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 8011026:	4b12      	ldr	r3, [pc, #72]	@ (8011070 <tx_control+0x30e8>)
 8011028:	781a      	ldrb	r2, [r3, #0]
 801102a:	4b19      	ldr	r3, [pc, #100]	@ (8011090 <tx_control+0x3108>)
 801102c:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 801102e:	4b11      	ldr	r3, [pc, #68]	@ (8011074 <tx_control+0x30ec>)
 8011030:	781a      	ldrb	r2, [r3, #0]
 8011032:	4b17      	ldr	r3, [pc, #92]	@ (8011090 <tx_control+0x3108>)
 8011034:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 8011036:	4b16      	ldr	r3, [pc, #88]	@ (8011090 <tx_control+0x3108>)
 8011038:	2200      	movs	r2, #0
 801103a:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 801103c:	4b0b      	ldr	r3, [pc, #44]	@ (801106c <tx_control+0x30e4>)
 801103e:	781a      	ldrb	r2, [r3, #0]
 8011040:	4b13      	ldr	r3, [pc, #76]	@ (8011090 <tx_control+0x3108>)
 8011042:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 8011044:	4b12      	ldr	r3, [pc, #72]	@ (8011090 <tx_control+0x3108>)
 8011046:	2200      	movs	r2, #0
 8011048:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 801104a:	2300      	movs	r3, #0
 801104c:	60fb      	str	r3, [r7, #12]
 801104e:	e057      	b.n	8011100 <tx_control+0x3178>
 8011050:	20002030 	.word	0x20002030
 8011054:	2000201c 	.word	0x2000201c
 8011058:	20000cec 	.word	0x20000cec
 801105c:	20001ea4 	.word	0x20001ea4
 8011060:	20001ea6 	.word	0x20001ea6
 8011064:	20000c10 	.word	0x20000c10
 8011068:	20000c11 	.word	0x20000c11
 801106c:	20000c2e 	.word	0x20000c2e
 8011070:	20000c12 	.word	0x20000c12
 8011074:	20000c13 	.word	0x20000c13
 8011078:	20001f08 	.word	0x20001f08
 801107c:	20001f00 	.word	0x20001f00
 8011080:	20001f04 	.word	0x20001f04
 8011084:	2000202d 	.word	0x2000202d
 8011088:	20001f24 	.word	0x20001f24
 801108c:	20001f0d 	.word	0x20001f0d
 8011090:	2000204c 	.word	0x2000204c
 8011094:	20000bb7 	.word	0x20000bb7
 8011098:	20002051 	.word	0x20002051
 801109c:	20000bb6 	.word	0x20000bb6
 80110a0:	20002060 	.word	0x20002060
 80110a4:	20001f10 	.word	0x20001f10
 80110a8:	20001f28 	.word	0x20001f28
 80110ac:	20001f18 	.word	0x20001f18
 80110b0:	20002042 	.word	0x20002042
 80110b4:	200000b8 	.word	0x200000b8
 80110b8:	20000c04 	.word	0x20000c04
 80110bc:	20001eb4 	.word	0x20001eb4
 80110c0:	20000c9c 	.word	0x20000c9c
 80110c4:	20000bd8 	.word	0x20000bd8
 80110c8:	20000c40 	.word	0x20000c40
 80110cc:	20000be0 	.word	0x20000be0
 80110d0:	20001ec0 	.word	0x20001ec0
 80110d4:	20001ec8 	.word	0x20001ec8
 80110d8:	20000be8 	.word	0x20000be8
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 80110dc:	4b45      	ldr	r3, [pc, #276]	@ (80111f4 <tx_control+0x326c>)
 80110de:	7bda      	ldrb	r2, [r3, #15]
 80110e0:	4945      	ldr	r1, [pc, #276]	@ (80111f8 <tx_control+0x3270>)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	18cb      	adds	r3, r1, r3
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	0019      	movs	r1, r3
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	4099      	lsls	r1, r3
 80110ee:	000b      	movs	r3, r1
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	4313      	orrs	r3, r2
 80110f4:	b2da      	uxtb	r2, r3
 80110f6:	4b3f      	ldr	r3, [pc, #252]	@ (80111f4 <tx_control+0x326c>)
 80110f8:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3301      	adds	r3, #1
 80110fe:	60fb      	str	r3, [r7, #12]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2b07      	cmp	r3, #7
 8011104:	ddea      	ble.n	80110dc <tx_control+0x3154>
		}
		bufferWifiTx[16] =estados_TD;
 8011106:	4b3d      	ldr	r3, [pc, #244]	@ (80111fc <tx_control+0x3274>)
 8011108:	781a      	ldrb	r2, [r3, #0]
 801110a:	4b3a      	ldr	r3, [pc, #232]	@ (80111f4 <tx_control+0x326c>)
 801110c:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 801110e:	4b39      	ldr	r3, [pc, #228]	@ (80111f4 <tx_control+0x326c>)
 8011110:	2200      	movs	r2, #0
 8011112:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8011114:	230b      	movs	r3, #11
 8011116:	18fb      	adds	r3, r7, r3
 8011118:	2200      	movs	r2, #0
 801111a:	701a      	strb	r2, [r3, #0]
 801111c:	e015      	b.n	801114a <tx_control+0x31c2>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 801111e:	4b35      	ldr	r3, [pc, #212]	@ (80111f4 <tx_control+0x326c>)
 8011120:	7c5a      	ldrb	r2, [r3, #17]
 8011122:	200b      	movs	r0, #11
 8011124:	183b      	adds	r3, r7, r0
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	4935      	ldr	r1, [pc, #212]	@ (8011200 <tx_control+0x3278>)
 801112a:	5ccb      	ldrb	r3, [r1, r3]
 801112c:	0019      	movs	r1, r3
 801112e:	183b      	adds	r3, r7, r0
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	4099      	lsls	r1, r3
 8011134:	000b      	movs	r3, r1
 8011136:	b2db      	uxtb	r3, r3
 8011138:	4313      	orrs	r3, r2
 801113a:	b2da      	uxtb	r2, r3
 801113c:	4b2d      	ldr	r3, [pc, #180]	@ (80111f4 <tx_control+0x326c>)
 801113e:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8011140:	183b      	adds	r3, r7, r0
 8011142:	781a      	ldrb	r2, [r3, #0]
 8011144:	183b      	adds	r3, r7, r0
 8011146:	3201      	adds	r2, #1
 8011148:	701a      	strb	r2, [r3, #0]
 801114a:	230b      	movs	r3, #11
 801114c:	18fb      	adds	r3, r7, r3
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	2b07      	cmp	r3, #7
 8011152:	d9e4      	bls.n	801111e <tx_control+0x3196>
		}

		bufferWifiTx[18] = alarmas_TD;
 8011154:	4b2b      	ldr	r3, [pc, #172]	@ (8011204 <tx_control+0x327c>)
 8011156:	781a      	ldrb	r2, [r3, #0]
 8011158:	4b26      	ldr	r3, [pc, #152]	@ (80111f4 <tx_control+0x326c>)
 801115a:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 801115c:	4b2a      	ldr	r3, [pc, #168]	@ (8011208 <tx_control+0x3280>)
 801115e:	881b      	ldrh	r3, [r3, #0]
 8011160:	0a1b      	lsrs	r3, r3, #8
 8011162:	b29b      	uxth	r3, r3
 8011164:	b2da      	uxtb	r2, r3
 8011166:	4b23      	ldr	r3, [pc, #140]	@ (80111f4 <tx_control+0x326c>)
 8011168:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 801116a:	4b27      	ldr	r3, [pc, #156]	@ (8011208 <tx_control+0x3280>)
 801116c:	881b      	ldrh	r3, [r3, #0]
 801116e:	b2da      	uxtb	r2, r3
 8011170:	4b20      	ldr	r3, [pc, #128]	@ (80111f4 <tx_control+0x326c>)
 8011172:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 8011174:	4b24      	ldr	r3, [pc, #144]	@ (8011208 <tx_control+0x3280>)
 8011176:	881b      	ldrh	r3, [r3, #0]
 8011178:	0a1b      	lsrs	r3, r3, #8
 801117a:	b29b      	uxth	r3, r3
 801117c:	b2da      	uxtb	r2, r3
 801117e:	4b1d      	ldr	r3, [pc, #116]	@ (80111f4 <tx_control+0x326c>)
 8011180:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 8011182:	4b21      	ldr	r3, [pc, #132]	@ (8011208 <tx_control+0x3280>)
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	b2da      	uxtb	r2, r3
 8011188:	4b1a      	ldr	r3, [pc, #104]	@ (80111f4 <tx_control+0x326c>)
 801118a:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801118c:	4b1f      	ldr	r3, [pc, #124]	@ (801120c <tx_control+0x3284>)
 801118e:	4a19      	ldr	r2, [pc, #100]	@ (80111f4 <tx_control+0x326c>)
 8011190:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8011192:	4b1f      	ldr	r3, [pc, #124]	@ (8011210 <tx_control+0x3288>)
 8011194:	4a17      	ldr	r2, [pc, #92]	@ (80111f4 <tx_control+0x326c>)
 8011196:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 8011198:	4b1e      	ldr	r3, [pc, #120]	@ (8011214 <tx_control+0x328c>)
 801119a:	4a1f      	ldr	r2, [pc, #124]	@ (8011218 <tx_control+0x3290>)
 801119c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 801119e:	4b1f      	ldr	r3, [pc, #124]	@ (801121c <tx_control+0x3294>)
 80111a0:	2217      	movs	r2, #23
 80111a2:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80111a4:	4b1e      	ldr	r3, [pc, #120]	@ (8011220 <tx_control+0x3298>)
 80111a6:	2200      	movs	r2, #0
 80111a8:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80111aa:	4b1e      	ldr	r3, [pc, #120]	@ (8011224 <tx_control+0x329c>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80111b0:	4b1b      	ldr	r3, [pc, #108]	@ (8011220 <tx_control+0x3298>)
 80111b2:	2201      	movs	r2, #1
 80111b4:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 80111b6:	4b1c      	ldr	r3, [pc, #112]	@ (8011228 <tx_control+0x32a0>)
 80111b8:	2255      	movs	r2, #85	@ 0x55
 80111ba:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80111bc:	4b1b      	ldr	r3, [pc, #108]	@ (801122c <tx_control+0x32a4>)
 80111be:	2200      	movs	r2, #0
 80111c0:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 80111c2:	e00f      	b.n	80111e4 <tx_control+0x325c>
		goto end_tx_wifi;//jp			end_tx_wifi
 80111c4:	46c0      	nop			@ (mov r8, r8)
 80111c6:	f7fe ff86 	bl	80100d6 <tx_control+0x214e>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 80111ca:	46c0      	nop			@ (mov r8, r8)
 80111cc:	f7fe ff83 	bl	80100d6 <tx_control+0x214e>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80111d0:	46c0      	nop			@ (mov r8, r8)
 80111d2:	f7fe ff80 	bl	80100d6 <tx_control+0x214e>
		goto end_tx_wifi;// jp		end_tx_wifi
 80111d6:	46c0      	nop			@ (mov r8, r8)
 80111d8:	f7fe ff7d 	bl	80100d6 <tx_control+0x214e>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80111dc:	46c0      	nop			@ (mov r8, r8)
 80111de:	f7fe ff7a 	bl	80100d6 <tx_control+0x214e>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 80111e2:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 80111e4:	f7fe ff77 	bl	80100d6 <tx_control+0x214e>
		goto end_tx_control_b;
 80111e8:	46c0      	nop			@ (mov r8, r8)

end_tx_control_b:
		asm ("nop");
 80111ea:	46c0      	nop			@ (mov r8, r8)

}
 80111ec:	46c0      	nop			@ (mov r8, r8)
 80111ee:	46bd      	mov	sp, r7
 80111f0:	b012      	add	sp, #72	@ 0x48
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	2000204c 	.word	0x2000204c
 80111f8:	20001eb4 	.word	0x20001eb4
 80111fc:	20001ebc 	.word	0x20001ebc
 8011200:	20001ec0 	.word	0x20001ec0
 8011204:	20001ec8 	.word	0x20001ec8
 8011208:	20000cb4 	.word	0x20000cb4
 801120c:	20001f08 	.word	0x20001f08
 8011210:	20001f00 	.word	0x20001f00
 8011214:	20001f04 	.word	0x20001f04
 8011218:	20002063 	.word	0x20002063
 801121c:	20001f24 	.word	0x20001f24
 8011220:	20001f10 	.word	0x20001f10
 8011224:	20001f28 	.word	0x20001f28
 8011228:	20001f0d 	.word	0x20001f0d
 801122c:	20001f18 	.word	0x20001f18

08011230 <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 8011236:	4b33      	ldr	r3, [pc, #204]	@ (8011304 <prepTXlogg_2+0xd4>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	337e      	adds	r3, #126	@ 0x7e
 8011240:	4a31      	ldr	r2, [pc, #196]	@ (8011308 <prepTXlogg_2+0xd8>)
 8011242:	7812      	ldrb	r2, [r2, #0]
 8011244:	701a      	strb	r2, [r3, #0]
			 */
			//point_X[126] = 0;
			//point_X[127] = 1;

			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 8011246:	4b31      	ldr	r3, [pc, #196]	@ (801130c <prepTXlogg_2+0xdc>)
 8011248:	22aa      	movs	r2, #170	@ 0xaa
 801124a:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 801124c:	4b30      	ldr	r3, [pc, #192]	@ (8011310 <prepTXlogg_2+0xe0>)
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	01db      	lsls	r3, r3, #7
 8011252:	b29a      	uxth	r2, r3
 8011254:	4b2f      	ldr	r3, [pc, #188]	@ (8011314 <prepTXlogg_2+0xe4>)
 8011256:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 8011258:	4b2f      	ldr	r3, [pc, #188]	@ (8011318 <prepTXlogg_2+0xe8>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a2d      	ldr	r2, [pc, #180]	@ (8011314 <prepTXlogg_2+0xe4>)
 801125e:	8812      	ldrh	r2, [r2, #0]
 8011260:	189a      	adds	r2, r3, r2
 8011262:	4b2e      	ldr	r3, [pc, #184]	@ (801131c <prepTXlogg_2+0xec>)
 8011264:	601a      	str	r2, [r3, #0]

			/*
			 * CGM 16/04/2025
			 * Se realiza una copia de la pagina actual en RAM y si existe un grabado de un bloquq de 128 bytes incompletos, se realizará un borrado de pagina y solo se escribiran  los bloques de 128 bytes que estan completos
			 */
			grabadoLoggerBloquesCompletos(dirPointer, dirBufferPage);
 8011266:	4b2d      	ldr	r3, [pc, #180]	@ (801131c <prepTXlogg_2+0xec>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	4b2d      	ldr	r3, [pc, #180]	@ (8011320 <prepTXlogg_2+0xf0>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	0019      	movs	r1, r3
 8011270:	0010      	movs	r0, r2
 8011272:	f7f6 f8e1 	bl	8007438 <grabadoLoggerBloquesCompletos>

			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 8011276:	4b23      	ldr	r3, [pc, #140]	@ (8011304 <prepTXlogg_2+0xd4>)
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	4b2a      	ldr	r3, [pc, #168]	@ (8011324 <prepTXlogg_2+0xf4>)
 801127c:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 801127e:	f7f5 ff0f 	bl	80070a0 <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 8011282:	f7f5 fe23 	bl	8006ecc <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 8011286:	f7f5 fe0f 	bl	8006ea8 <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 801128a:	4b21      	ldr	r3, [pc, #132]	@ (8011310 <prepTXlogg_2+0xe0>)
 801128c:	781a      	ldrb	r2, [r3, #0]
 801128e:	4b26      	ldr	r3, [pc, #152]	@ (8011328 <prepTXlogg_2+0xf8>)
 8011290:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 8011292:	4b1d      	ldr	r3, [pc, #116]	@ (8011308 <prepTXlogg_2+0xd8>)
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d006      	beq.n	80112a8 <prepTXlogg_2+0x78>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 801129a:	4b23      	ldr	r3, [pc, #140]	@ (8011328 <prepTXlogg_2+0xf8>)
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	3301      	adds	r3, #1
 80112a0:	b2da      	uxtb	r2, r3
 80112a2:	4b21      	ldr	r3, [pc, #132]	@ (8011328 <prepTXlogg_2+0xf8>)
 80112a4:	701a      	strb	r2, [r3, #0]
 80112a6:	e000      	b.n	80112aa <prepTXlogg_2+0x7a>
				goto noIncBlock;//jreq	noIncBlock
 80112a8:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 80112aa:	4b1f      	ldr	r3, [pc, #124]	@ (8011328 <prepTXlogg_2+0xf8>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	01db      	lsls	r3, r3, #7
 80112b0:	b29a      	uxth	r2, r3
 80112b2:	4b18      	ldr	r3, [pc, #96]	@ (8011314 <prepTXlogg_2+0xe4>)
 80112b4:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 80112b6:	4b18      	ldr	r3, [pc, #96]	@ (8011318 <prepTXlogg_2+0xe8>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	4a16      	ldr	r2, [pc, #88]	@ (8011314 <prepTXlogg_2+0xe4>)
 80112bc:	8812      	ldrh	r2, [r2, #0]
 80112be:	189b      	adds	r3, r3, r2
 80112c0:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 80112c2:	4b1a      	ldr	r3, [pc, #104]	@ (801132c <prepTXlogg_2+0xfc>)
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 80112c8:	4b19      	ldr	r3, [pc, #100]	@ (8011330 <prepTXlogg_2+0x100>)
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 80112ce:	4b19      	ldr	r3, [pc, #100]	@ (8011334 <prepTXlogg_2+0x104>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 80112d4:	4b16      	ldr	r3, [pc, #88]	@ (8011330 <prepTXlogg_2+0x100>)
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	4b17      	ldr	r3, [pc, #92]	@ (8011338 <prepTXlogg_2+0x108>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d106      	bne.n	80112ee <prepTXlogg_2+0xbe>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 80112e0:	4b16      	ldr	r3, [pc, #88]	@ (801133c <prepTXlogg_2+0x10c>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 80112e6:	4b13      	ldr	r3, [pc, #76]	@ (8011334 <prepTXlogg_2+0x104>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 80112ec:	e003      	b.n	80112f6 <prepTXlogg_2+0xc6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 80112ee:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	3b01      	subs	r3, #1
 80112f4:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 80112f6:	4b12      	ldr	r3, [pc, #72]	@ (8011340 <prepTXlogg_2+0x110>)
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	601a      	str	r2, [r3, #0]
			//ret
}
 80112fc:	46c0      	nop			@ (mov r8, r8)
 80112fe:	46bd      	mov	sp, r7
 8011300:	b002      	add	sp, #8
 8011302:	bd80      	pop	{r7, pc}
 8011304:	20000e90 	.word	0x20000e90
 8011308:	20000e87 	.word	0x20000e87
 801130c:	20000e78 	.word	0x20000e78
 8011310:	20000e86 	.word	0x20000e86
 8011314:	20000936 	.word	0x20000936
 8011318:	20000e8c 	.word	0x20000e8c
 801131c:	20000e7c 	.word	0x20000e7c
 8011320:	20001ea0 	.word	0x20001ea0
 8011324:	20000e80 	.word	0x20000e80
 8011328:	20000934 	.word	0x20000934
 801132c:	20001f00 	.word	0x20001f00
 8011330:	20001f08 	.word	0x20001f08
 8011334:	20001f10 	.word	0x20001f10
 8011338:	20001f1c 	.word	0x20001f1c
 801133c:	20001f20 	.word	0x20001f20
 8011340:	20001f04 	.word	0x20001f04

08011344 <borra_pagina_logger>:
	BloqDatalooger[comando1] =	0xF1; // mov		comando1,#$F1
	BloqDatalooger[comando2] = 	0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
}

void borra_pagina_logger(uint32_t pagina)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 801134c:	2300      	movs	r3, #0
 801134e:	60fb      	str	r3, [r7, #12]

    while (HAL_FLASH_Unlock() != HAL_OK);
 8011350:	46c0      	nop			@ (mov r8, r8)
 8011352:	f002 fd65 	bl	8013e20 <HAL_FLASH_Unlock>
 8011356:	1e03      	subs	r3, r0, #0
 8011358:	d1fb      	bne.n	8011352 <borra_pagina_logger+0xe>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // Borrado por páginas
 801135a:	2110      	movs	r1, #16
 801135c:	187b      	adds	r3, r7, r1
 801135e:	2202      	movs	r2, #2
 8011360:	601a      	str	r2, [r3, #0]
    eraseInitStruct.Page = pagina;                   // Página inicial a borrar
 8011362:	187b      	adds	r3, r7, r1
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbPages = 1;
 8011368:	187b      	adds	r3, r7, r1
 801136a:	2201      	movs	r2, #1
 801136c:	60da      	str	r2, [r3, #12]

    while (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK);
 801136e:	46c0      	nop			@ (mov r8, r8)
 8011370:	230c      	movs	r3, #12
 8011372:	18fa      	adds	r2, r7, r3
 8011374:	2310      	movs	r3, #16
 8011376:	18fb      	adds	r3, r7, r3
 8011378:	0011      	movs	r1, r2
 801137a:	0018      	movs	r0, r3
 801137c:	f002 fdfe 	bl	8013f7c <HAL_FLASHEx_Erase>
 8011380:	1e03      	subs	r3, r0, #0
 8011382:	d1f5      	bne.n	8011370 <borra_pagina_logger+0x2c>
    while (HAL_FLASH_Lock() != HAL_OK);
 8011384:	46c0      	nop			@ (mov r8, r8)
 8011386:	f002 fd6f 	bl	8013e68 <HAL_FLASH_Lock>
 801138a:	1e03      	subs	r3, r0, #0
 801138c:	d1fb      	bne.n	8011386 <borra_pagina_logger+0x42>

    pagina_borrado++;
 801138e:	4b04      	ldr	r3, [pc, #16]	@ (80113a0 <borra_pagina_logger+0x5c>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	4b02      	ldr	r3, [pc, #8]	@ (80113a0 <borra_pagina_logger+0x5c>)
 8011396:	601a      	str	r2, [r3, #0]
}
 8011398:	46c0      	nop			@ (mov r8, r8)
 801139a:	46bd      	mov	sp, r7
 801139c:	b008      	add	sp, #32
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	20000270 	.word	0x20000270

080113a4 <graba_bloque_fw>:

void graba_bloque_fw (void)
{
 80113a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113a6:	b0b1      	sub	sp, #196	@ 0xc4
 80113a8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80113aa:	2357      	movs	r3, #87	@ 0x57
 80113ac:	2168      	movs	r1, #104	@ 0x68
 80113ae:	185b      	adds	r3, r3, r1
 80113b0:	19da      	adds	r2, r3, r7
 80113b2:	2300      	movs	r3, #0
 80113b4:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 80113b6:	2356      	movs	r3, #86	@ 0x56
 80113b8:	185b      	adds	r3, r3, r1
 80113ba:	19da      	adds	r2, r3, r7
 80113bc:	2300      	movs	r3, #0
 80113be:	7013      	strb	r3, [r2, #0]

	uint8_t a = 0;
 80113c0:	2355      	movs	r3, #85	@ 0x55
 80113c2:	185b      	adds	r3, r3, r1
 80113c4:	19da      	adds	r2, r3, r7
 80113c6:	2300      	movs	r3, #0
 80113c8:	7013      	strb	r3, [r2, #0]
	uint8_t b = 1;
 80113ca:	2354      	movs	r3, #84	@ 0x54
 80113cc:	185b      	adds	r3, r3, r1
 80113ce:	19da      	adds	r2, r3, r7
 80113d0:	2301      	movs	r3, #1
 80113d2:	7013      	strb	r3, [r2, #0]
	uint8_t c = 2;
 80113d4:	2353      	movs	r3, #83	@ 0x53
 80113d6:	185b      	adds	r3, r3, r1
 80113d8:	19da      	adds	r2, r3, r7
 80113da:	2302      	movs	r3, #2
 80113dc:	7013      	strb	r3, [r2, #0]
	uint8_t d = 3;
 80113de:	2352      	movs	r3, #82	@ 0x52
 80113e0:	185b      	adds	r3, r3, r1
 80113e2:	19da      	adds	r2, r3, r7
 80113e4:	2303      	movs	r3, #3
 80113e6:	7013      	strb	r3, [r2, #0]
	uint8_t e = 4;
 80113e8:	2351      	movs	r3, #81	@ 0x51
 80113ea:	185b      	adds	r3, r3, r1
 80113ec:	19da      	adds	r2, r3, r7
 80113ee:	2304      	movs	r3, #4
 80113f0:	7013      	strb	r3, [r2, #0]
	uint8_t f = 5;
 80113f2:	2350      	movs	r3, #80	@ 0x50
 80113f4:	185b      	adds	r3, r3, r1
 80113f6:	19da      	adds	r2, r3, r7
 80113f8:	2305      	movs	r3, #5
 80113fa:	7013      	strb	r3, [r2, #0]
	uint8_t g = 6;
 80113fc:	234f      	movs	r3, #79	@ 0x4f
 80113fe:	185b      	adds	r3, r3, r1
 8011400:	19da      	adds	r2, r3, r7
 8011402:	2306      	movs	r3, #6
 8011404:	7013      	strb	r3, [r2, #0]
	uint8_t h = 7;
 8011406:	234e      	movs	r3, #78	@ 0x4e
 8011408:	185b      	adds	r3, r3, r1
 801140a:	19da      	adds	r2, r3, r7
 801140c:	2307      	movs	r3, #7
 801140e:	7013      	strb	r3, [r2, #0]

//	uint32_t buffer_recepcion = 0;

	uint64_t buffer_recepcion = 0;
 8011410:	2200      	movs	r2, #0
 8011412:	2300      	movs	r3, #0
 8011414:	673a      	str	r2, [r7, #112]	@ 0x70
 8011416:	677b      	str	r3, [r7, #116]	@ 0x74

	uint64_t contenido1 = 0;
 8011418:	2200      	movs	r2, #0
 801141a:	2300      	movs	r3, #0
 801141c:	21a8      	movs	r1, #168	@ 0xa8
 801141e:	1879      	adds	r1, r7, r1
 8011420:	600a      	str	r2, [r1, #0]
 8011422:	604b      	str	r3, [r1, #4]
	uint64_t contenido2 = 0;
 8011424:	2200      	movs	r2, #0
 8011426:	2300      	movs	r3, #0
 8011428:	21a0      	movs	r1, #160	@ 0xa0
 801142a:	1879      	adds	r1, r7, r1
 801142c:	600a      	str	r2, [r1, #0]
 801142e:	604b      	str	r3, [r1, #4]
	uint64_t contenido3 = 0;
 8011430:	2200      	movs	r2, #0
 8011432:	2300      	movs	r3, #0
 8011434:	2198      	movs	r1, #152	@ 0x98
 8011436:	1879      	adds	r1, r7, r1
 8011438:	600a      	str	r2, [r1, #0]
 801143a:	604b      	str	r3, [r1, #4]
	uint64_t contenido4 = 0;
 801143c:	2200      	movs	r2, #0
 801143e:	2300      	movs	r3, #0
 8011440:	2190      	movs	r1, #144	@ 0x90
 8011442:	1879      	adds	r1, r7, r1
 8011444:	600a      	str	r2, [r1, #0]
 8011446:	604b      	str	r3, [r1, #4]
	uint64_t contenido5 = 0;
 8011448:	2200      	movs	r2, #0
 801144a:	2300      	movs	r3, #0
 801144c:	2188      	movs	r1, #136	@ 0x88
 801144e:	1879      	adds	r1, r7, r1
 8011450:	600a      	str	r2, [r1, #0]
 8011452:	604b      	str	r3, [r1, #4]
	uint64_t contenido6 = 0;
 8011454:	2200      	movs	r2, #0
 8011456:	2300      	movs	r3, #0
 8011458:	2180      	movs	r1, #128	@ 0x80
 801145a:	1879      	adds	r1, r7, r1
 801145c:	600a      	str	r2, [r1, #0]
 801145e:	604b      	str	r3, [r1, #4]
	uint64_t contenido7 = 0;
 8011460:	2200      	movs	r2, #0
 8011462:	2300      	movs	r3, #0
 8011464:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011466:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint64_t contenido8 = 0;
 8011468:	2200      	movs	r2, #0
 801146a:	2300      	movs	r3, #0
 801146c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801146e:	66fb      	str	r3, [r7, #108]	@ 0x6c

	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8011470:	46c0      	nop			@ (mov r8, r8)
 8011472:	f002 fcd5 	bl	8013e20 <HAL_FLASH_Unlock>
 8011476:	1e03      	subs	r3, r0, #0
 8011478:	d1fb      	bne.n	8011472 <graba_bloque_fw+0xce>
	for(i = 0; i < 16; i++)
 801147a:	2357      	movs	r3, #87	@ 0x57
 801147c:	2268      	movs	r2, #104	@ 0x68
 801147e:	189b      	adds	r3, r3, r2
 8011480:	19da      	adds	r2, r3, r7
 8011482:	2300      	movs	r3, #0
 8011484:	7013      	strb	r3, [r2, #0]
 8011486:	e1c0      	b.n	801180a <graba_bloque_fw+0x466>
	{
		switch (j)
 8011488:	2356      	movs	r3, #86	@ 0x56
 801148a:	2268      	movs	r2, #104	@ 0x68
 801148c:	189b      	adds	r3, r3, r2
 801148e:	19db      	adds	r3, r3, r7
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b07      	cmp	r3, #7
 8011494:	d900      	bls.n	8011498 <graba_bloque_fw+0xf4>
 8011496:	e1af      	b.n	80117f8 <graba_bloque_fw+0x454>
 8011498:	009a      	lsls	r2, r3, #2
 801149a:	4be5      	ldr	r3, [pc, #916]	@ (8011830 <graba_bloque_fw+0x48c>)
 801149c:	18d3      	adds	r3, r2, r3
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	469f      	mov	pc, r3
		{
			case 0:
				contenido1 =  RxBuffer_Ble[a];
 80114a2:	2355      	movs	r3, #85	@ 0x55
 80114a4:	2168      	movs	r1, #104	@ 0x68
 80114a6:	185b      	adds	r3, r3, r1
 80114a8:	19db      	adds	r3, r3, r7
 80114aa:	781a      	ldrb	r2, [r3, #0]
 80114ac:	4be1      	ldr	r3, [pc, #900]	@ (8011834 <graba_bloque_fw+0x490>)
 80114ae:	5c9b      	ldrb	r3, [r3, r2]
 80114b0:	22a8      	movs	r2, #168	@ 0xa8
 80114b2:	18ba      	adds	r2, r7, r2
 80114b4:	6013      	str	r3, [r2, #0]
 80114b6:	2300      	movs	r3, #0
 80114b8:	22ac      	movs	r2, #172	@ 0xac
 80114ba:	18ba      	adds	r2, r7, r2
 80114bc:	6013      	str	r3, [r2, #0]
				j++;
 80114be:	2256      	movs	r2, #86	@ 0x56
 80114c0:	1853      	adds	r3, r2, r1
 80114c2:	19db      	adds	r3, r3, r7
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	1852      	adds	r2, r2, r1
 80114c8:	19d2      	adds	r2, r2, r7
 80114ca:	3301      	adds	r3, #1
 80114cc:	7013      	strb	r3, [r2, #0]
			case 1:

				contenido2 =  RxBuffer_Ble[b];
 80114ce:	2354      	movs	r3, #84	@ 0x54
 80114d0:	2068      	movs	r0, #104	@ 0x68
 80114d2:	181b      	adds	r3, r3, r0
 80114d4:	19db      	adds	r3, r3, r7
 80114d6:	781a      	ldrb	r2, [r3, #0]
 80114d8:	4bd6      	ldr	r3, [pc, #856]	@ (8011834 <graba_bloque_fw+0x490>)
 80114da:	5c9b      	ldrb	r3, [r3, r2]
 80114dc:	21a0      	movs	r1, #160	@ 0xa0
 80114de:	187a      	adds	r2, r7, r1
 80114e0:	6013      	str	r3, [r2, #0]
 80114e2:	2300      	movs	r3, #0
 80114e4:	26a4      	movs	r6, #164	@ 0xa4
 80114e6:	19ba      	adds	r2, r7, r6
 80114e8:	6013      	str	r3, [r2, #0]
				contenido2 = contenido2 << 8;
 80114ea:	187b      	adds	r3, r7, r1
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	0e1a      	lsrs	r2, r3, #24
 80114f0:	19bb      	adds	r3, r7, r6
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	021d      	lsls	r5, r3, #8
 80114f6:	4315      	orrs	r5, r2
 80114f8:	187b      	adds	r3, r7, r1
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	021c      	lsls	r4, r3, #8
 80114fe:	187b      	adds	r3, r7, r1
 8011500:	601c      	str	r4, [r3, #0]
 8011502:	605d      	str	r5, [r3, #4]
				j++;
 8011504:	2256      	movs	r2, #86	@ 0x56
 8011506:	1813      	adds	r3, r2, r0
 8011508:	19db      	adds	r3, r3, r7
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	1812      	adds	r2, r2, r0
 801150e:	19d2      	adds	r2, r2, r7
 8011510:	3301      	adds	r3, #1
 8011512:	7013      	strb	r3, [r2, #0]

			case 2:
				contenido3 =  RxBuffer_Ble[c];
 8011514:	2353      	movs	r3, #83	@ 0x53
 8011516:	2068      	movs	r0, #104	@ 0x68
 8011518:	181b      	adds	r3, r3, r0
 801151a:	19db      	adds	r3, r3, r7
 801151c:	781a      	ldrb	r2, [r3, #0]
 801151e:	4bc5      	ldr	r3, [pc, #788]	@ (8011834 <graba_bloque_fw+0x490>)
 8011520:	5c9b      	ldrb	r3, [r3, r2]
 8011522:	2198      	movs	r1, #152	@ 0x98
 8011524:	187a      	adds	r2, r7, r1
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	2300      	movs	r3, #0
 801152a:	269c      	movs	r6, #156	@ 0x9c
 801152c:	19ba      	adds	r2, r7, r6
 801152e:	6013      	str	r3, [r2, #0]
				contenido3 = contenido3 << 16;
 8011530:	187b      	adds	r3, r7, r1
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	0c1a      	lsrs	r2, r3, #16
 8011536:	19bb      	adds	r3, r7, r6
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	041b      	lsls	r3, r3, #16
 801153c:	667b      	str	r3, [r7, #100]	@ 0x64
 801153e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011540:	4313      	orrs	r3, r2
 8011542:	667b      	str	r3, [r7, #100]	@ 0x64
 8011544:	187b      	adds	r3, r7, r1
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	041b      	lsls	r3, r3, #16
 801154a:	663b      	str	r3, [r7, #96]	@ 0x60
 801154c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801154e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011550:	1879      	adds	r1, r7, r1
 8011552:	600a      	str	r2, [r1, #0]
 8011554:	604b      	str	r3, [r1, #4]
				j++;
 8011556:	2256      	movs	r2, #86	@ 0x56
 8011558:	1813      	adds	r3, r2, r0
 801155a:	19db      	adds	r3, r3, r7
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	1812      	adds	r2, r2, r0
 8011560:	19d2      	adds	r2, r2, r7
 8011562:	3301      	adds	r3, #1
 8011564:	7013      	strb	r3, [r2, #0]

			case 3:
				contenido4 =  RxBuffer_Ble[d];
 8011566:	2352      	movs	r3, #82	@ 0x52
 8011568:	2068      	movs	r0, #104	@ 0x68
 801156a:	181b      	adds	r3, r3, r0
 801156c:	19db      	adds	r3, r3, r7
 801156e:	781a      	ldrb	r2, [r3, #0]
 8011570:	4bb0      	ldr	r3, [pc, #704]	@ (8011834 <graba_bloque_fw+0x490>)
 8011572:	5c9b      	ldrb	r3, [r3, r2]
 8011574:	2190      	movs	r1, #144	@ 0x90
 8011576:	187a      	adds	r2, r7, r1
 8011578:	6013      	str	r3, [r2, #0]
 801157a:	2300      	movs	r3, #0
 801157c:	2694      	movs	r6, #148	@ 0x94
 801157e:	19ba      	adds	r2, r7, r6
 8011580:	6013      	str	r3, [r2, #0]
				contenido4 = contenido4 << 24;
 8011582:	187b      	adds	r3, r7, r1
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	0a1a      	lsrs	r2, r3, #8
 8011588:	19bb      	adds	r3, r7, r6
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	061b      	lsls	r3, r3, #24
 801158e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011592:	4313      	orrs	r3, r2
 8011594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011596:	187b      	adds	r3, r7, r1
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	061b      	lsls	r3, r3, #24
 801159c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801159e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115a2:	1879      	adds	r1, r7, r1
 80115a4:	600a      	str	r2, [r1, #0]
 80115a6:	604b      	str	r3, [r1, #4]
				j++;
 80115a8:	2256      	movs	r2, #86	@ 0x56
 80115aa:	1813      	adds	r3, r2, r0
 80115ac:	19db      	adds	r3, r3, r7
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	1812      	adds	r2, r2, r0
 80115b2:	19d2      	adds	r2, r2, r7
 80115b4:	3301      	adds	r3, #1
 80115b6:	7013      	strb	r3, [r2, #0]

			case 4:
				contenido5 =  RxBuffer_Ble[e];
 80115b8:	2351      	movs	r3, #81	@ 0x51
 80115ba:	2068      	movs	r0, #104	@ 0x68
 80115bc:	181b      	adds	r3, r3, r0
 80115be:	19db      	adds	r3, r3, r7
 80115c0:	781a      	ldrb	r2, [r3, #0]
 80115c2:	4b9c      	ldr	r3, [pc, #624]	@ (8011834 <graba_bloque_fw+0x490>)
 80115c4:	5c9b      	ldrb	r3, [r3, r2]
 80115c6:	2188      	movs	r1, #136	@ 0x88
 80115c8:	187a      	adds	r2, r7, r1
 80115ca:	6013      	str	r3, [r2, #0]
 80115cc:	2300      	movs	r3, #0
 80115ce:	228c      	movs	r2, #140	@ 0x8c
 80115d0:	18ba      	adds	r2, r7, r2
 80115d2:	6013      	str	r3, [r2, #0]
				contenido5 = contenido5 << 32;
 80115d4:	187b      	adds	r3, r7, r1
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	001b      	movs	r3, r3
 80115da:	627b      	str	r3, [r7, #36]	@ 0x24
 80115dc:	2300      	movs	r3, #0
 80115de:	623b      	str	r3, [r7, #32]
 80115e0:	6a3a      	ldr	r2, [r7, #32]
 80115e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e4:	1879      	adds	r1, r7, r1
 80115e6:	600a      	str	r2, [r1, #0]
 80115e8:	604b      	str	r3, [r1, #4]
				j++;
 80115ea:	2256      	movs	r2, #86	@ 0x56
 80115ec:	1813      	adds	r3, r2, r0
 80115ee:	19db      	adds	r3, r3, r7
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	1812      	adds	r2, r2, r0
 80115f4:	19d2      	adds	r2, r2, r7
 80115f6:	3301      	adds	r3, #1
 80115f8:	7013      	strb	r3, [r2, #0]

			case 5:
				contenido6 = RxBuffer_Ble[f];
 80115fa:	2350      	movs	r3, #80	@ 0x50
 80115fc:	2068      	movs	r0, #104	@ 0x68
 80115fe:	181b      	adds	r3, r3, r0
 8011600:	19db      	adds	r3, r3, r7
 8011602:	781a      	ldrb	r2, [r3, #0]
 8011604:	4b8b      	ldr	r3, [pc, #556]	@ (8011834 <graba_bloque_fw+0x490>)
 8011606:	5c9b      	ldrb	r3, [r3, r2]
 8011608:	2180      	movs	r1, #128	@ 0x80
 801160a:	187a      	adds	r2, r7, r1
 801160c:	6013      	str	r3, [r2, #0]
 801160e:	2300      	movs	r3, #0
 8011610:	2284      	movs	r2, #132	@ 0x84
 8011612:	18ba      	adds	r2, r7, r2
 8011614:	6013      	str	r3, [r2, #0]
				contenido6 = contenido6 << 40;
 8011616:	187b      	adds	r3, r7, r1
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	021b      	lsls	r3, r3, #8
 801161c:	61fb      	str	r3, [r7, #28]
 801161e:	2300      	movs	r3, #0
 8011620:	61bb      	str	r3, [r7, #24]
 8011622:	69ba      	ldr	r2, [r7, #24]
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	1879      	adds	r1, r7, r1
 8011628:	600a      	str	r2, [r1, #0]
 801162a:	604b      	str	r3, [r1, #4]
				j++;
 801162c:	2256      	movs	r2, #86	@ 0x56
 801162e:	1813      	adds	r3, r2, r0
 8011630:	19db      	adds	r3, r3, r7
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	1812      	adds	r2, r2, r0
 8011636:	19d2      	adds	r2, r2, r7
 8011638:	3301      	adds	r3, #1
 801163a:	7013      	strb	r3, [r2, #0]

			case 6:
				contenido7 = RxBuffer_Ble[g];
 801163c:	234f      	movs	r3, #79	@ 0x4f
 801163e:	2168      	movs	r1, #104	@ 0x68
 8011640:	185b      	adds	r3, r3, r1
 8011642:	19db      	adds	r3, r3, r7
 8011644:	781a      	ldrb	r2, [r3, #0]
 8011646:	4b7b      	ldr	r3, [pc, #492]	@ (8011834 <graba_bloque_fw+0x490>)
 8011648:	5c9b      	ldrb	r3, [r3, r2]
 801164a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801164c:	2300      	movs	r3, #0
 801164e:	67fb      	str	r3, [r7, #124]	@ 0x7c
				contenido7 = contenido7 << 48;
 8011650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011652:	041b      	lsls	r3, r3, #16
 8011654:	617b      	str	r3, [r7, #20]
 8011656:	2300      	movs	r3, #0
 8011658:	613b      	str	r3, [r7, #16]
 801165a:	693a      	ldr	r2, [r7, #16]
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011660:	67fb      	str	r3, [r7, #124]	@ 0x7c
				j++;
 8011662:	2256      	movs	r2, #86	@ 0x56
 8011664:	1853      	adds	r3, r2, r1
 8011666:	19db      	adds	r3, r3, r7
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	1852      	adds	r2, r2, r1
 801166c:	19d2      	adds	r2, r2, r7
 801166e:	3301      	adds	r3, #1
 8011670:	7013      	strb	r3, [r2, #0]

			case 7:
				contenido8 = RxBuffer_Ble[h];
 8011672:	234e      	movs	r3, #78	@ 0x4e
 8011674:	2268      	movs	r2, #104	@ 0x68
 8011676:	189b      	adds	r3, r3, r2
 8011678:	19db      	adds	r3, r3, r7
 801167a:	781a      	ldrb	r2, [r3, #0]
 801167c:	4b6d      	ldr	r3, [pc, #436]	@ (8011834 <graba_bloque_fw+0x490>)
 801167e:	5c9b      	ldrb	r3, [r3, r2]
 8011680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011682:	2300      	movs	r3, #0
 8011684:	66fb      	str	r3, [r7, #108]	@ 0x6c
				contenido8 = contenido8 << 56;
 8011686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011688:	061b      	lsls	r3, r3, #24
 801168a:	60fb      	str	r3, [r7, #12]
 801168c:	2300      	movs	r3, #0
 801168e:	60bb      	str	r3, [r7, #8]
 8011690:	68ba      	ldr	r2, [r7, #8]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011696:	66fb      	str	r3, [r7, #108]	@ 0x6c

				buffer_recepcion = contenido1 | contenido2 | contenido3 | contenido4 | contenido5 |contenido6 | contenido7 |contenido8;
 8011698:	23a8      	movs	r3, #168	@ 0xa8
 801169a:	18fb      	adds	r3, r7, r3
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	23a0      	movs	r3, #160	@ 0xa0
 80116a0:	18fb      	adds	r3, r7, r3
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	431a      	orrs	r2, r3
 80116a6:	653a      	str	r2, [r7, #80]	@ 0x50
 80116a8:	23ac      	movs	r3, #172	@ 0xac
 80116aa:	18fb      	adds	r3, r7, r3
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	23a4      	movs	r3, #164	@ 0xa4
 80116b0:	18fb      	adds	r3, r7, r3
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	431a      	orrs	r2, r3
 80116b6:	657a      	str	r2, [r7, #84]	@ 0x54
 80116b8:	2398      	movs	r3, #152	@ 0x98
 80116ba:	18fb      	adds	r3, r7, r3
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80116c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80116c2:	0008      	movs	r0, r1
 80116c4:	4318      	orrs	r0, r3
 80116c6:	64b8      	str	r0, [r7, #72]	@ 0x48
 80116c8:	239c      	movs	r3, #156	@ 0x9c
 80116ca:	18fb      	adds	r3, r7, r3
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	431a      	orrs	r2, r3
 80116d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80116d2:	2390      	movs	r3, #144	@ 0x90
 80116d4:	18fb      	adds	r3, r7, r3
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80116da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116dc:	0008      	movs	r0, r1
 80116de:	4318      	orrs	r0, r3
 80116e0:	6438      	str	r0, [r7, #64]	@ 0x40
 80116e2:	2394      	movs	r3, #148	@ 0x94
 80116e4:	18fb      	adds	r3, r7, r3
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	431a      	orrs	r2, r3
 80116ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80116ec:	2388      	movs	r3, #136	@ 0x88
 80116ee:	18fb      	adds	r3, r7, r3
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80116f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80116f6:	0008      	movs	r0, r1
 80116f8:	4318      	orrs	r0, r3
 80116fa:	63b8      	str	r0, [r7, #56]	@ 0x38
 80116fc:	238c      	movs	r3, #140	@ 0x8c
 80116fe:	18fb      	adds	r3, r7, r3
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	431a      	orrs	r2, r3
 8011704:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011706:	2380      	movs	r3, #128	@ 0x80
 8011708:	18fb      	adds	r3, r7, r3
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801170e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011710:	0008      	movs	r0, r1
 8011712:	4318      	orrs	r0, r3
 8011714:	6338      	str	r0, [r7, #48]	@ 0x30
 8011716:	2384      	movs	r3, #132	@ 0x84
 8011718:	18fb      	adds	r3, r7, r3
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	431a      	orrs	r2, r3
 801171e:	637a      	str	r2, [r7, #52]	@ 0x34
 8011720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011722:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011726:	0008      	movs	r0, r1
 8011728:	4318      	orrs	r0, r3
 801172a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801172c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801172e:	431a      	orrs	r2, r3
 8011730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011738:	0008      	movs	r0, r1
 801173a:	4318      	orrs	r0, r3
 801173c:	6038      	str	r0, [r7, #0]
 801173e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011740:	431a      	orrs	r2, r3
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	683a      	ldr	r2, [r7, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	673a      	str	r2, [r7, #112]	@ 0x70
 801174a:	677b      	str	r3, [r7, #116]	@ 0x74
				while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
 801174c:	46c0      	nop			@ (mov r8, r8)
 801174e:	4b3a      	ldr	r3, [pc, #232]	@ (8011838 <graba_bloque_fw+0x494>)
 8011750:	6819      	ldr	r1, [r3, #0]
 8011752:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011756:	2001      	movs	r0, #1
 8011758:	f002 fb14 	bl	8013d84 <HAL_FLASH_Program>
 801175c:	1e03      	subs	r3, r0, #0
 801175e:	d1f6      	bne.n	801174e <graba_bloque_fw+0x3aa>
				//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion)!=  HAL_OK);
				//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion);
				direccion_fw = direccion_fw + 8;
 8011760:	4b35      	ldr	r3, [pc, #212]	@ (8011838 <graba_bloque_fw+0x494>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3308      	adds	r3, #8
 8011766:	001a      	movs	r2, r3
 8011768:	4b33      	ldr	r3, [pc, #204]	@ (8011838 <graba_bloque_fw+0x494>)
 801176a:	601a      	str	r2, [r3, #0]
				j = 0;
 801176c:	2356      	movs	r3, #86	@ 0x56
 801176e:	2168      	movs	r1, #104	@ 0x68
 8011770:	185b      	adds	r3, r3, r1
 8011772:	19da      	adds	r2, r3, r7
 8011774:	2300      	movs	r3, #0
 8011776:	7013      	strb	r3, [r2, #0]
				a = a + 8;
 8011778:	2355      	movs	r3, #85	@ 0x55
 801177a:	185a      	adds	r2, r3, r1
 801177c:	19d2      	adds	r2, r2, r7
 801177e:	185b      	adds	r3, r3, r1
 8011780:	19db      	adds	r3, r3, r7
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	3308      	adds	r3, #8
 8011786:	7013      	strb	r3, [r2, #0]
				b = b + 8;
 8011788:	2354      	movs	r3, #84	@ 0x54
 801178a:	185a      	adds	r2, r3, r1
 801178c:	19d2      	adds	r2, r2, r7
 801178e:	185b      	adds	r3, r3, r1
 8011790:	19db      	adds	r3, r3, r7
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	3308      	adds	r3, #8
 8011796:	7013      	strb	r3, [r2, #0]
				c = c + 8;
 8011798:	2353      	movs	r3, #83	@ 0x53
 801179a:	185a      	adds	r2, r3, r1
 801179c:	19d2      	adds	r2, r2, r7
 801179e:	185b      	adds	r3, r3, r1
 80117a0:	19db      	adds	r3, r3, r7
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	3308      	adds	r3, #8
 80117a6:	7013      	strb	r3, [r2, #0]
				d = d + 8;
 80117a8:	2352      	movs	r3, #82	@ 0x52
 80117aa:	185a      	adds	r2, r3, r1
 80117ac:	19d2      	adds	r2, r2, r7
 80117ae:	185b      	adds	r3, r3, r1
 80117b0:	19db      	adds	r3, r3, r7
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	3308      	adds	r3, #8
 80117b6:	7013      	strb	r3, [r2, #0]
				e = e + 8;
 80117b8:	2351      	movs	r3, #81	@ 0x51
 80117ba:	185a      	adds	r2, r3, r1
 80117bc:	19d2      	adds	r2, r2, r7
 80117be:	185b      	adds	r3, r3, r1
 80117c0:	19db      	adds	r3, r3, r7
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	3308      	adds	r3, #8
 80117c6:	7013      	strb	r3, [r2, #0]
				f = f + 8;
 80117c8:	2350      	movs	r3, #80	@ 0x50
 80117ca:	185a      	adds	r2, r3, r1
 80117cc:	19d2      	adds	r2, r2, r7
 80117ce:	185b      	adds	r3, r3, r1
 80117d0:	19db      	adds	r3, r3, r7
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	3308      	adds	r3, #8
 80117d6:	7013      	strb	r3, [r2, #0]
				g = g + 8;
 80117d8:	234f      	movs	r3, #79	@ 0x4f
 80117da:	185a      	adds	r2, r3, r1
 80117dc:	19d2      	adds	r2, r2, r7
 80117de:	185b      	adds	r3, r3, r1
 80117e0:	19db      	adds	r3, r3, r7
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	3308      	adds	r3, #8
 80117e6:	7013      	strb	r3, [r2, #0]
				h = h + 8;
 80117e8:	234e      	movs	r3, #78	@ 0x4e
 80117ea:	185a      	adds	r2, r3, r1
 80117ec:	19d2      	adds	r2, r2, r7
 80117ee:	185b      	adds	r3, r3, r1
 80117f0:	19db      	adds	r3, r3, r7
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	3308      	adds	r3, #8
 80117f6:	7013      	strb	r3, [r2, #0]
	for(i = 0; i < 16; i++)
 80117f8:	2257      	movs	r2, #87	@ 0x57
 80117fa:	2168      	movs	r1, #104	@ 0x68
 80117fc:	1853      	adds	r3, r2, r1
 80117fe:	19db      	adds	r3, r3, r7
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	1852      	adds	r2, r2, r1
 8011804:	19d2      	adds	r2, r2, r7
 8011806:	3301      	adds	r3, #1
 8011808:	7013      	strb	r3, [r2, #0]
 801180a:	2357      	movs	r3, #87	@ 0x57
 801180c:	2268      	movs	r2, #104	@ 0x68
 801180e:	189b      	adds	r3, r3, r2
 8011810:	19db      	adds	r3, r3, r7
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	2b0f      	cmp	r3, #15
 8011816:	d800      	bhi.n	801181a <graba_bloque_fw+0x476>
 8011818:	e636      	b.n	8011488 <graba_bloque_fw+0xe4>
		}


	}
	while(HAL_FLASH_Lock() != HAL_OK );
 801181a:	46c0      	nop			@ (mov r8, r8)
 801181c:	f002 fb24 	bl	8013e68 <HAL_FLASH_Lock>
 8011820:	1e03      	subs	r3, r0, #0
 8011822:	d1fb      	bne.n	801181c <graba_bloque_fw+0x478>
}
 8011824:	46c0      	nop			@ (mov r8, r8)
 8011826:	46c0      	nop			@ (mov r8, r8)
 8011828:	46bd      	mov	sp, r7
 801182a:	b031      	add	sp, #196	@ 0xc4
 801182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801182e:	46c0      	nop			@ (mov r8, r8)
 8011830:	0801c510 	.word	0x0801c510
 8011834:	200009e8 	.word	0x200009e8
 8011838:	20000274 	.word	0x20000274

0801183c <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 801183c:	b580      	push	{r7, lr}
 801183e:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 8011840:	4b8b      	ldr	r3, [pc, #556]	@ (8011a70 <voltmetro+0x234>)
 8011842:	799b      	ldrb	r3, [r3, #6]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d100      	bne.n	801184a <voltmetro+0xe>
 8011848:	e0fb      	b.n	8011a42 <voltmetro+0x206>
					goto voltmetro1;
 801184a:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 801184c:	4b89      	ldr	r3, [pc, #548]	@ (8011a74 <voltmetro+0x238>)
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	3301      	adds	r3, #1
 8011852:	b2da      	uxtb	r2, r3
 8011854:	4b87      	ldr	r3, [pc, #540]	@ (8011a74 <voltmetro+0x238>)
 8011856:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 8011858:	4b86      	ldr	r3, [pc, #536]	@ (8011a74 <voltmetro+0x238>)
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	2b18      	cmp	r3, #24
 801185e:	d800      	bhi.n	8011862 <voltmetro+0x26>
 8011860:	e06f      	b.n	8011942 <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 8011862:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 8011864:	4b83      	ldr	r3, [pc, #524]	@ (8011a74 <voltmetro+0x238>)
 8011866:	2200      	movs	r2, #0
 8011868:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 801186a:	4b83      	ldr	r3, [pc, #524]	@ (8011a78 <voltmetro+0x23c>)
 801186c:	781a      	ldrb	r2, [r3, #0]
 801186e:	4b83      	ldr	r3, [pc, #524]	@ (8011a7c <voltmetro+0x240>)
 8011870:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 8011872:	4b82      	ldr	r3, [pc, #520]	@ (8011a7c <voltmetro+0x240>)
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	2bff      	cmp	r3, #255	@ 0xff
 8011878:	d10a      	bne.n	8011890 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 801187a:	4b81      	ldr	r3, [pc, #516]	@ (8011a80 <voltmetro+0x244>)
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	2b02      	cmp	r3, #2
 8011880:	d019      	beq.n	80118b6 <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 8011882:	4b7f      	ldr	r3, [pc, #508]	@ (8011a80 <voltmetro+0x244>)
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	3301      	adds	r3, #1
 8011888:	b2da      	uxtb	r2, r3
 801188a:	4b7d      	ldr	r3, [pc, #500]	@ (8011a80 <voltmetro+0x244>)
 801188c:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 801188e:	e05b      	b.n	8011948 <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 8011890:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 8011892:	4b7b      	ldr	r3, [pc, #492]	@ (8011a80 <voltmetro+0x244>)
 8011894:	2200      	movs	r2, #0
 8011896:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 8011898:	4b78      	ldr	r3, [pc, #480]	@ (8011a7c <voltmetro+0x240>)
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	2b32      	cmp	r3, #50	@ 0x32
 801189e:	d82a      	bhi.n	80118f6 <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 80118a0:	4b78      	ldr	r3, [pc, #480]	@ (8011a84 <voltmetro+0x248>)
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b02      	cmp	r3, #2
 80118a6:	d008      	beq.n	80118ba <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 80118a8:	4b76      	ldr	r3, [pc, #472]	@ (8011a84 <voltmetro+0x248>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	3301      	adds	r3, #1
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	4b74      	ldr	r3, [pc, #464]	@ (8011a84 <voltmetro+0x248>)
 80118b2:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 80118b4:	e048      	b.n	8011948 <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	e000      	b.n	80118bc <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 80118ba:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 80118bc:	4b72      	ldr	r3, [pc, #456]	@ (8011a88 <voltmetro+0x24c>)
 80118be:	2200      	movs	r2, #0
 80118c0:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 80118c2:	4b72      	ldr	r3, [pc, #456]	@ (8011a8c <voltmetro+0x250>)
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d103      	bne.n	80118d2 <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 80118ca:	4b6f      	ldr	r3, [pc, #444]	@ (8011a88 <voltmetro+0x24c>)
 80118cc:	2201      	movs	r2, #1
 80118ce:	701a      	strb	r2, [r3, #0]
 80118d0:	e000      	b.n	80118d4 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 80118d2:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 80118d4:	4b6e      	ldr	r3, [pc, #440]	@ (8011a90 <voltmetro+0x254>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 80118da:	4b6e      	ldr	r3, [pc, #440]	@ (8011a94 <voltmetro+0x258>)
 80118dc:	2273      	movs	r2, #115	@ 0x73
 80118de:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 80118e0:	4b6d      	ldr	r3, [pc, #436]	@ (8011a98 <voltmetro+0x25c>)
 80118e2:	2257      	movs	r2, #87	@ 0x57
 80118e4:	5c9b      	ldrb	r3, [r3, r2]
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d103      	bne.n	80118f2 <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 80118ea:	4b6a      	ldr	r3, [pc, #424]	@ (8011a94 <voltmetro+0x258>)
 80118ec:	22d2      	movs	r2, #210	@ 0xd2
 80118ee:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 80118f0:	e02a      	b.n	8011948 <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 80118f2:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 80118f4:	e028      	b.n	8011948 <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 80118f6:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 80118f8:	4b62      	ldr	r3, [pc, #392]	@ (8011a84 <voltmetro+0x248>)
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 80118fe:	4b62      	ldr	r3, [pc, #392]	@ (8011a88 <voltmetro+0x24c>)
 8011900:	2200      	movs	r2, #0
 8011902:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 8011904:	4b62      	ldr	r3, [pc, #392]	@ (8011a90 <voltmetro+0x254>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	001a      	movs	r2, r3
 801190a:	4b5c      	ldr	r3, [pc, #368]	@ (8011a7c <voltmetro+0x240>)
 801190c:	7819      	ldrb	r1, [r3, #0]
 801190e:	4b63      	ldr	r3, [pc, #396]	@ (8011a9c <voltmetro+0x260>)
 8011910:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 8011912:	4b5f      	ldr	r3, [pc, #380]	@ (8011a90 <voltmetro+0x254>)
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	3301      	adds	r3, #1
 8011918:	b2da      	uxtb	r2, r3
 801191a:	4b5d      	ldr	r3, [pc, #372]	@ (8011a90 <voltmetro+0x254>)
 801191c:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 801191e:	4b5c      	ldr	r3, [pc, #368]	@ (8011a90 <voltmetro+0x254>)
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	2b07      	cmp	r3, #7
 8011924:	d90f      	bls.n	8011946 <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 8011926:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 8011928:	4b59      	ldr	r3, [pc, #356]	@ (8011a90 <voltmetro+0x254>)
 801192a:	2200      	movs	r2, #0
 801192c:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 801192e:	4b5b      	ldr	r3, [pc, #364]	@ (8011a9c <voltmetro+0x260>)
 8011930:	2108      	movs	r1, #8
 8011932:	0018      	movs	r0, r3
 8011934:	f7f4 f822 	bl	800597c <prom8m1b>
 8011938:	0003      	movs	r3, r0
 801193a:	b2da      	uxtb	r2, r3
 801193c:	4b55      	ldr	r3, [pc, #340]	@ (8011a94 <voltmetro+0x258>)
 801193e:	701a      	strb	r2, [r3, #0]
 8011940:	e002      	b.n	8011948 <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 8011942:	46c0      	nop			@ (mov r8, r8)
 8011944:	e000      	b.n	8011948 <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 8011946:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 8011948:	4b55      	ldr	r3, [pc, #340]	@ (8011aa0 <voltmetro+0x264>)
 801194a:	79db      	ldrb	r3, [r3, #7]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d104      	bne.n	801195a <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 8011950:	4b54      	ldr	r3, [pc, #336]	@ (8011aa4 <voltmetro+0x268>)
 8011952:	781a      	ldrb	r2, [r3, #0]
 8011954:	4b54      	ldr	r3, [pc, #336]	@ (8011aa8 <voltmetro+0x26c>)
 8011956:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 8011958:	e004      	b.n	8011964 <voltmetro+0x128>
					goto hist_vla;
 801195a:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 801195c:	4b53      	ldr	r3, [pc, #332]	@ (8011aac <voltmetro+0x270>)
 801195e:	781a      	ldrb	r2, [r3, #0]
 8011960:	4b51      	ldr	r3, [pc, #324]	@ (8011aa8 <voltmetro+0x26c>)
 8011962:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 8011964:	4b50      	ldr	r3, [pc, #320]	@ (8011aa8 <voltmetro+0x26c>)
 8011966:	781a      	ldrb	r2, [r3, #0]
 8011968:	4b4a      	ldr	r3, [pc, #296]	@ (8011a94 <voltmetro+0x258>)
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	429a      	cmp	r2, r3
 801196e:	d80c      	bhi.n	801198a <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 8011970:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 8011972:	4b4f      	ldr	r3, [pc, #316]	@ (8011ab0 <voltmetro+0x274>)
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d165      	bne.n	8011a46 <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 801197a:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 801197c:	4948      	ldr	r1, [pc, #288]	@ (8011aa0 <voltmetro+0x264>)
 801197e:	4848      	ldr	r0, [pc, #288]	@ (8011aa0 <voltmetro+0x264>)
 8011980:	2306      	movs	r3, #6
 8011982:	2207      	movs	r2, #7
 8011984:	f7fb ff32 	bl	800d7ec <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 8011988:	e02e      	b.n	80119e8 <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 801198a:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 801198c:	4b42      	ldr	r3, [pc, #264]	@ (8011a98 <voltmetro+0x25c>)
 801198e:	2245      	movs	r2, #69	@ 0x45
 8011990:	5c9a      	ldrb	r2, [r3, r2]
 8011992:	4b47      	ldr	r3, [pc, #284]	@ (8011ab0 <voltmetro+0x274>)
 8011994:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 8011996:	4b3d      	ldr	r3, [pc, #244]	@ (8011a8c <voltmetro+0x250>)
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	2b01      	cmp	r3, #1
 801199c:	d103      	bne.n	80119a6 <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 801199e:	4b44      	ldr	r3, [pc, #272]	@ (8011ab0 <voltmetro+0x274>)
 80119a0:	2202      	movs	r2, #2
 80119a2:	701a      	strb	r2, [r3, #0]
 80119a4:	e000      	b.n	80119a8 <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 80119a6:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 80119a8:	4b3d      	ldr	r3, [pc, #244]	@ (8011aa0 <voltmetro+0x264>)
 80119aa:	799b      	ldrb	r3, [r3, #6]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d104      	bne.n	80119ba <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 80119b0:	4b40      	ldr	r3, [pc, #256]	@ (8011ab4 <voltmetro+0x278>)
 80119b2:	781a      	ldrb	r2, [r3, #0]
 80119b4:	4b3c      	ldr	r3, [pc, #240]	@ (8011aa8 <voltmetro+0x26c>)
 80119b6:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 80119b8:	e004      	b.n	80119c4 <voltmetro+0x188>
						goto hist_vlb; //
 80119ba:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 80119bc:	4b3e      	ldr	r3, [pc, #248]	@ (8011ab8 <voltmetro+0x27c>)
 80119be:	781a      	ldrb	r2, [r3, #0]
 80119c0:	4b39      	ldr	r3, [pc, #228]	@ (8011aa8 <voltmetro+0x26c>)
 80119c2:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 80119c4:	4b38      	ldr	r3, [pc, #224]	@ (8011aa8 <voltmetro+0x26c>)
 80119c6:	781a      	ldrb	r2, [r3, #0]
 80119c8:	4b32      	ldr	r3, [pc, #200]	@ (8011a94 <voltmetro+0x258>)
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d31d      	bcc.n	8011a0c <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 80119d0:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 80119d2:	4b3a      	ldr	r3, [pc, #232]	@ (8011abc <voltmetro+0x280>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d137      	bne.n	8011a4a <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 80119da:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 80119dc:	4930      	ldr	r1, [pc, #192]	@ (8011aa0 <voltmetro+0x264>)
 80119de:	4830      	ldr	r0, [pc, #192]	@ (8011aa0 <voltmetro+0x264>)
 80119e0:	2307      	movs	r3, #7
 80119e2:	2206      	movs	r2, #6
 80119e4:	f7fb ff02 	bl	800d7ec <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 80119e8:	4b2b      	ldr	r3, [pc, #172]	@ (8011a98 <voltmetro+0x25c>)
 80119ea:	2263      	movs	r2, #99	@ 0x63
 80119ec:	5c9a      	ldrb	r2, [r3, r2]
 80119ee:	4b23      	ldr	r3, [pc, #140]	@ (8011a7c <voltmetro+0x240>)
 80119f0:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 80119f2:	f7f4 ffab 	bl	800694c <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 80119f6:	4b32      	ldr	r3, [pc, #200]	@ (8011ac0 <voltmetro+0x284>)
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	021b      	lsls	r3, r3, #8
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	4a31      	ldr	r2, [pc, #196]	@ (8011ac4 <voltmetro+0x288>)
 8011a00:	7812      	ldrb	r2, [r2, #0]
 8011a02:	189b      	adds	r3, r3, r2
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	4b30      	ldr	r3, [pc, #192]	@ (8011ac8 <voltmetro+0x28c>)
 8011a08:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 8011a0a:	e021      	b.n	8011a50 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 8011a0c:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 8011a0e:	4b22      	ldr	r3, [pc, #136]	@ (8011a98 <voltmetro+0x25c>)
 8011a10:	2245      	movs	r2, #69	@ 0x45
 8011a12:	5c9a      	ldrb	r2, [r3, r2]
 8011a14:	4b29      	ldr	r3, [pc, #164]	@ (8011abc <voltmetro+0x280>)
 8011a16:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 8011a18:	4b1c      	ldr	r3, [pc, #112]	@ (8011a8c <voltmetro+0x250>)
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d103      	bne.n	8011a28 <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 8011a20:	4b26      	ldr	r3, [pc, #152]	@ (8011abc <voltmetro+0x280>)
 8011a22:	2202      	movs	r2, #2
 8011a24:	701a      	strb	r2, [r3, #0]
 8011a26:	e000      	b.n	8011a2a <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 8011a28:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 8011a2a:	4b27      	ldr	r3, [pc, #156]	@ (8011ac8 <voltmetro+0x28c>)
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d10d      	bne.n	8011a4e <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 8011a32:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011a34:	491a      	ldr	r1, [pc, #104]	@ (8011aa0 <voltmetro+0x264>)
 8011a36:	481a      	ldr	r0, [pc, #104]	@ (8011aa0 <voltmetro+0x264>)
 8011a38:	2307      	movs	r3, #7
 8011a3a:	2206      	movs	r2, #6
 8011a3c:	f7fb fef1 	bl	800d822 <Bclear_Clear_trfst>
 8011a40:	e006      	b.n	8011a50 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 8011a42:	46c0      	nop			@ (mov r8, r8)
 8011a44:	e004      	b.n	8011a50 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 8011a46:	46c0      	nop			@ (mov r8, r8)
 8011a48:	e002      	b.n	8011a50 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 8011a4a:	46c0      	nop			@ (mov r8, r8)
 8011a4c:	e000      	b.n	8011a50 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 8011a4e:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 8011a50:	4b07      	ldr	r3, [pc, #28]	@ (8011a70 <voltmetro+0x234>)
 8011a52:	799b      	ldrb	r3, [r3, #6]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d106      	bne.n	8011a66 <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011a58:	4911      	ldr	r1, [pc, #68]	@ (8011aa0 <voltmetro+0x264>)
 8011a5a:	4811      	ldr	r0, [pc, #68]	@ (8011aa0 <voltmetro+0x264>)
 8011a5c:	2307      	movs	r3, #7
 8011a5e:	2206      	movs	r2, #6
 8011a60:	f7fb fedf 	bl	800d822 <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 8011a64:	e000      	b.n	8011a68 <voltmetro+0x22c>
						goto fin_voltmetro1;
 8011a66:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 8011a68:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 8011a6a:	46c0      	nop			@ (mov r8, r8)
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	20000c04 	.word	0x20000c04
 8011a74:	20000c2c 	.word	0x20000c2c
 8011a78:	20000ba9 	.word	0x20000ba9
 8011a7c:	20000bb7 	.word	0x20000bb7
 8011a80:	20000c8a 	.word	0x20000c8a
 8011a84:	20000c89 	.word	0x20000c89
 8011a88:	20000be0 	.word	0x20000be0
 8011a8c:	20000bf8 	.word	0x20000bf8
 8011a90:	20000c2d 	.word	0x20000c2d
 8011a94:	20000c2e 	.word	0x20000c2e
 8011a98:	200000b8 	.word	0x200000b8
 8011a9c:	20000cc8 	.word	0x20000cc8
 8011aa0:	20000be8 	.word	0x20000be8
 8011aa4:	20000c83 	.word	0x20000c83
 8011aa8:	20000934 	.word	0x20000934
 8011aac:	20000c85 	.word	0x20000c85
 8011ab0:	20000bd1 	.word	0x20000bd1
 8011ab4:	20000c84 	.word	0x20000c84
 8011ab8:	20000c86 	.word	0x20000c86
 8011abc:	20000bd0 	.word	0x20000bd0
 8011ac0:	20000bab 	.word	0x20000bab
 8011ac4:	20000bac 	.word	0x20000bac
 8011ac8:	20000bc8 	.word	0x20000bc8

08011acc <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0


			memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 8011ad2:	f7f5 fba9 	bl	8007228 <memodriver>
//;------------------------------------------------------------------------------------------------------------------
//;							supervicion de timeout token wifi - ble
//;------------------------------------------------------------------------------------------------------------------
			//ldw		X,timeoutTBLE;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTBLE == 1)//jreq	resetComMod;					/
 8011ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8011c88 <watch+0x1bc>)
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d004      	beq.n	8011ae8 <watch+0x1c>
				goto resetComMod;
			//ldw		X,timeoutTWF;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTWF != 1)//jrne	fallas_temp;					/ No, continúa
 8011ade:	4b6b      	ldr	r3, [pc, #428]	@ (8011c8c <watch+0x1c0>)
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d143      	bne.n	8011b6e <watch+0xa2>
				goto fallas_temp;
resetComMod:
 8011ae6:	e000      	b.n	8011aea <watch+0x1e>
				goto resetComMod;
 8011ae8:	46c0      	nop			@ (mov r8, r8)
			timeTxTBLE = 20;	//mov		timeTxTBLE,#20
 8011aea:	4b69      	ldr	r3, [pc, #420]	@ (8011c90 <watch+0x1c4>)
 8011aec:	2214      	movs	r2, #20
 8011aee:	701a      	strb	r2, [r3, #0]
			flagsTX2[2] =0;		//bres	flagsTX2,#2;					/ sí, cancela bandera de token recibido
 8011af0:	4b68      	ldr	r3, [pc, #416]	@ (8011c94 <watch+0x1c8>)
 8011af2:	2200      	movs	r2, #0
 8011af4:	709a      	strb	r2, [r3, #2]
			//ldw		X,#300;
			timeoutTBLE = 300;	//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 8011af6:	4b64      	ldr	r3, [pc, #400]	@ (8011c88 <watch+0x1bc>)
 8011af8:	2296      	movs	r2, #150	@ 0x96
 8011afa:	0052      	lsls	r2, r2, #1
 8011afc:	801a      	strh	r2, [r3, #0]

			timeTxTWF = 30;			//mov		timeTxTWF,#30
 8011afe:	4b66      	ldr	r3, [pc, #408]	@ (8011c98 <watch+0x1cc>)
 8011b00:	221e      	movs	r2, #30
 8011b02:	701a      	strb	r2, [r3, #0]
			flagsTX2 [1] = 0; 		//bres	flagsTX2,#1;					/ sí, cancela bandera de token recibido
 8011b04:	4b63      	ldr	r3, [pc, #396]	@ (8011c94 <watch+0x1c8>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	705a      	strb	r2, [r3, #1]
			timeRstBLE = 5;			//mov		timeRstBLE,#5;				/ carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 8011b0a:	4b64      	ldr	r3, [pc, #400]	@ (8011c9c <watch+0x1d0>)
 8011b0c:	2205      	movs	r2, #5
 8011b0e:	701a      	strb	r2, [r3, #0]
			//ldw		X,#300;
			timeoutTWF = 300;		//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 8011b10:	4b5e      	ldr	r3, [pc, #376]	@ (8011c8c <watch+0x1c0>)
 8011b12:	2296      	movs	r2, #150	@ 0x96
 8011b14:	0052      	lsls	r2, r2, #1
 8011b16:	801a      	strh	r2, [r3, #0]
			keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 8011b18:	4b61      	ldr	r3, [pc, #388]	@ (8011ca0 <watch+0x1d4>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<8; i++){
 8011b1e:	1dfb      	adds	r3, r7, #7
 8011b20:	2200      	movs	r2, #0
 8011b22:	701a      	strb	r2, [r3, #0]
 8011b24:	e018      	b.n	8011b58 <watch+0x8c>
				flagsTX[i] = 0;		//clr		flagsTX
 8011b26:	1dfb      	adds	r3, r7, #7
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8011ca4 <watch+0x1d8>)
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	54d1      	strb	r1, [r2, r3]
				flagsRxFirm[i]= 0;	//clr		flagsRxFirm
 8011b30:	1dfb      	adds	r3, r7, #7
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	4a5c      	ldr	r2, [pc, #368]	@ (8011ca8 <watch+0x1dc>)
 8011b36:	2100      	movs	r1, #0
 8011b38:	54d1      	strb	r1, [r2, r3]
				flagsTxControl[i] = 0; // clr		flagsTxControl
 8011b3a:	1dfb      	adds	r3, r7, #7
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8011cac <watch+0x1e0>)
 8011b40:	2100      	movs	r1, #0
 8011b42:	54d1      	strb	r1, [r2, r3]
				flagsWIFI[i] = 0; 		//clr		flagsWIFI
 8011b44:	1dfb      	adds	r3, r7, #7
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	4a59      	ldr	r2, [pc, #356]	@ (8011cb0 <watch+0x1e4>)
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<8; i++){
 8011b4e:	1dfb      	adds	r3, r7, #7
 8011b50:	781a      	ldrb	r2, [r3, #0]
 8011b52:	1dfb      	adds	r3, r7, #7
 8011b54:	3201      	adds	r2, #1
 8011b56:	701a      	strb	r2, [r3, #0]
 8011b58:	1dfb      	adds	r3, r7, #7
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b07      	cmp	r3, #7
 8011b5e:	d9e2      	bls.n	8011b26 <watch+0x5a>
			}

			flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 8011b60:	4b54      	ldr	r3, [pc, #336]	@ (8011cb4 <watch+0x1e8>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	711a      	strb	r2, [r3, #4]
			flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 8011b66:	4b53      	ldr	r3, [pc, #332]	@ (8011cb4 <watch+0x1e8>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	715a      	strb	r2, [r3, #5]
 8011b6c:	e000      	b.n	8011b70 <watch+0xa4>
				goto fallas_temp;
 8011b6e:	46c0      	nop			@ (mov r8, r8)
fallas_temp:

////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 8011b70:	4b51      	ldr	r3, [pc, #324]	@ (8011cb8 <watch+0x1ec>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 8011b76:	4b50      	ldr	r3, [pc, #320]	@ (8011cb8 <watch+0x1ec>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 8011b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8011cb8 <watch+0x1ec>)
 8011b7e:	2200      	movs	r2, #0
 8011b80:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 8011b82:	4b4d      	ldr	r3, [pc, #308]	@ (8011cb8 <watch+0x1ec>)
 8011b84:	2200      	movs	r2, #0
 8011b86:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 8011b88:	4b4b      	ldr	r3, [pc, #300]	@ (8011cb8 <watch+0x1ec>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 8011b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8011cbc <watch+0x1f0>)
 8011b90:	785b      	ldrb	r3, [r3, #1]
 8011b92:	2201      	movs	r2, #1
 8011b94:	4053      	eors	r3, r2
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d103      	bne.n	8011ba4 <watch+0xd8>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 8011b9c:	4b46      	ldr	r3, [pc, #280]	@ (8011cb8 <watch+0x1ec>)
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	715a      	strb	r2, [r3, #5]
 8011ba2:	e000      	b.n	8011ba6 <watch+0xda>
					goto	jmp_watch_02;
 8011ba4:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 8011ba6:	4b46      	ldr	r3, [pc, #280]	@ (8011cc0 <watch+0x1f4>)
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d000      	beq.n	8011bb0 <watch+0xe4>
 8011bae:	e064      	b.n	8011c7a <watch+0x1ae>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 8011bb0:	4b44      	ldr	r3, [pc, #272]	@ (8011cc4 <watch+0x1f8>)
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	4053      	eors	r3, r2
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d107      	bne.n	8011bce <watch+0x102>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 8011bbe:	4b42      	ldr	r3, [pc, #264]	@ (8011cc8 <watch+0x1fc>)
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d108      	bne.n	8011bd8 <watch+0x10c>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 8011bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8011cb8 <watch+0x1ec>)
 8011bc8:	2201      	movs	r2, #1
 8011bca:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 8011bcc:	e005      	b.n	8011bda <watch+0x10e>
					goto	jmp_watch_03_00;
 8011bce:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8011bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8011cc8 <watch+0x1fc>)
 8011bd2:	22a4      	movs	r2, #164	@ 0xa4
 8011bd4:	701a      	strb	r2, [r3, #0]
 8011bd6:	e000      	b.n	8011bda <watch+0x10e>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 8011bd8:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 8011bda:	4b3a      	ldr	r3, [pc, #232]	@ (8011cc4 <watch+0x1f8>)
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10c      	bne.n	8011bfc <watch+0x130>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 8011be2:	4b36      	ldr	r3, [pc, #216]	@ (8011cbc <watch+0x1f0>)
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d103      	bne.n	8011bf2 <watch+0x126>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 8011bea:	4b38      	ldr	r3, [pc, #224]	@ (8011ccc <watch+0x200>)
 8011bec:	220f      	movs	r2, #15
 8011bee:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 8011bf0:	e005      	b.n	8011bfe <watch+0x132>
					goto	jmp_watch_04;
 8011bf2:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 8011bf4:	4b35      	ldr	r3, [pc, #212]	@ (8011ccc <watch+0x200>)
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	701a      	strb	r2, [r3, #0]
 8011bfa:	e000      	b.n	8011bfe <watch+0x132>
					goto	jmp_watch_05;
 8011bfc:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 8011bfe:	4b31      	ldr	r3, [pc, #196]	@ (8011cc4 <watch+0x1f8>)
 8011c00:	785b      	ldrb	r3, [r3, #1]
 8011c02:	2201      	movs	r2, #1
 8011c04:	4053      	eors	r3, r2
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d107      	bne.n	8011c1c <watch+0x150>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 8011c0c:	4b30      	ldr	r3, [pc, #192]	@ (8011cd0 <watch+0x204>)
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d108      	bne.n	8011c26 <watch+0x15a>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 8011c14:	4b28      	ldr	r3, [pc, #160]	@ (8011cb8 <watch+0x1ec>)
 8011c16:	2201      	movs	r2, #1
 8011c18:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 8011c1a:	e005      	b.n	8011c28 <watch+0x15c>
					goto	jmp_watch_07_00;
 8011c1c:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8011c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8011cd0 <watch+0x204>)
 8011c20:	2204      	movs	r2, #4
 8011c22:	701a      	strb	r2, [r3, #0]
 8011c24:	e000      	b.n	8011c28 <watch+0x15c>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 8011c26:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 8011c28:	4b26      	ldr	r3, [pc, #152]	@ (8011cc4 <watch+0x1f8>)
 8011c2a:	789b      	ldrb	r3, [r3, #2]
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	4053      	eors	r3, r2
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d107      	bne.n	8011c46 <watch+0x17a>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 8011c36:	4b27      	ldr	r3, [pc, #156]	@ (8011cd4 <watch+0x208>)
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d108      	bne.n	8011c50 <watch+0x184>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 8011c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8011cb8 <watch+0x1ec>)
 8011c40:	2201      	movs	r2, #1
 8011c42:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 8011c44:	e005      	b.n	8011c52 <watch+0x186>
					goto	jmp_watch_11_00;
 8011c46:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8011c48:	4b22      	ldr	r3, [pc, #136]	@ (8011cd4 <watch+0x208>)
 8011c4a:	220f      	movs	r2, #15
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	e000      	b.n	8011c52 <watch+0x186>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 8011c50:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 8011c52:	4b1a      	ldr	r3, [pc, #104]	@ (8011cbc <watch+0x1f0>)
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	2201      	movs	r2, #1
 8011c58:	4053      	eors	r3, r2
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d107      	bne.n	8011c70 <watch+0x1a4>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 8011c60:	4b1d      	ldr	r3, [pc, #116]	@ (8011cd8 <watch+0x20c>)
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d10a      	bne.n	8011c7e <watch+0x1b2>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 8011c68:	4b13      	ldr	r3, [pc, #76]	@ (8011cb8 <watch+0x1ec>)
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 8011c6e:	e007      	b.n	8011c80 <watch+0x1b4>
					goto jmp_watch_12_00;
 8011c70:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8011c72:	4b19      	ldr	r3, [pc, #100]	@ (8011cd8 <watch+0x20c>)
 8011c74:	22c5      	movs	r2, #197	@ 0xc5
 8011c76:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 8011c78:	e002      	b.n	8011c80 <watch+0x1b4>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 8011c7a:	46c0      	nop			@ (mov r8, r8)
 8011c7c:	e000      	b.n	8011c80 <watch+0x1b4>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 8011c7e:	46c0      	nop			@ (mov r8, r8)
}
 8011c80:	46c0      	nop			@ (mov r8, r8)
 8011c82:	46bd      	mov	sp, r7
 8011c84:	b002      	add	sp, #8
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	200021ec 	.word	0x200021ec
 8011c8c:	20002040 	.word	0x20002040
 8011c90:	200021ea 	.word	0x200021ea
 8011c94:	20002038 	.word	0x20002038
 8011c98:	2000202e 	.word	0x2000202e
 8011c9c:	20001fdc 	.word	0x20001fdc
 8011ca0:	20001f0d 	.word	0x20001f0d
 8011ca4:	20001f10 	.word	0x20001f10
 8011ca8:	20001fd0 	.word	0x20001fd0
 8011cac:	200021dc 	.word	0x200021dc
 8011cb0:	20002044 	.word	0x20002044
 8011cb4:	20001ef8 	.word	0x20001ef8
 8011cb8:	20000bb8 	.word	0x20000bb8
 8011cbc:	20000c40 	.word	0x20000c40
 8011cc0:	20000cb1 	.word	0x20000cb1
 8011cc4:	20000c04 	.word	0x20000c04
 8011cc8:	20000cb6 	.word	0x20000cb6
 8011ccc:	20000bd4 	.word	0x20000bd4
 8011cd0:	20000cb7 	.word	0x20000cb7
 8011cd4:	20000cb9 	.word	0x20000cb9
 8011cd8:	20000cb8 	.word	0x20000cb8

08011cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011cdc:	480d      	ldr	r0, [pc, #52]	@ (8011d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011cde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011ce0:	f7fa fd90 	bl	800c804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011ce4:	480c      	ldr	r0, [pc, #48]	@ (8011d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8011ce6:	490d      	ldr	r1, [pc, #52]	@ (8011d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8011ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8011d20 <LoopForever+0xe>)
  movs r3, #0
 8011cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011cec:	e002      	b.n	8011cf4 <LoopCopyDataInit>

08011cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011cf2:	3304      	adds	r3, #4

08011cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011cf8:	d3f9      	bcc.n	8011cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8011d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8011d28 <LoopForever+0x16>)
  movs r3, #0
 8011cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011d00:	e001      	b.n	8011d06 <LoopFillZerobss>

08011d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011d04:	3204      	adds	r2, #4

08011d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011d08:	d3fb      	bcc.n	8011d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8011d0a:	f00a f96f 	bl	801bfec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011d0e:	f7f7 fca7 	bl	8009660 <main>

08011d12 <LoopForever>:

LoopForever:
  b LoopForever
 8011d12:	e7fe      	b.n	8011d12 <LoopForever>
  ldr   r0, =_estack
 8011d14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8011d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011d1c:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8011d20:	0801c650 	.word	0x0801c650
  ldr r2, =_sbss
 8011d24:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8011d28:	200023d8 	.word	0x200023d8

08011d2c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011d2c:	e7fe      	b.n	8011d2c <ADC_COMP1_2_IRQHandler>

08011d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b082      	sub	sp, #8
 8011d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011d34:	1dfb      	adds	r3, r7, #7
 8011d36:	2200      	movs	r2, #0
 8011d38:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011d3a:	2003      	movs	r0, #3
 8011d3c:	f000 f80e 	bl	8011d5c <HAL_InitTick>
 8011d40:	1e03      	subs	r3, r0, #0
 8011d42:	d003      	beq.n	8011d4c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8011d44:	1dfb      	adds	r3, r7, #7
 8011d46:	2201      	movs	r2, #1
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	e001      	b.n	8011d50 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011d4c:	f7f9 ffe0 	bl	800bd10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011d50:	1dfb      	adds	r3, r7, #7
 8011d52:	781b      	ldrb	r3, [r3, #0]
}
 8011d54:	0018      	movs	r0, r3
 8011d56:	46bd      	mov	sp, r7
 8011d58:	b002      	add	sp, #8
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011d5c:	b590      	push	{r4, r7, lr}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011d64:	230f      	movs	r3, #15
 8011d66:	18fb      	adds	r3, r7, r3
 8011d68:	2200      	movs	r2, #0
 8011d6a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8011d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8011de4 <HAL_InitTick+0x88>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d02b      	beq.n	8011dcc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8011d74:	4b1c      	ldr	r3, [pc, #112]	@ (8011de8 <HAL_InitTick+0x8c>)
 8011d76:	681c      	ldr	r4, [r3, #0]
 8011d78:	4b1a      	ldr	r3, [pc, #104]	@ (8011de4 <HAL_InitTick+0x88>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	0019      	movs	r1, r3
 8011d7e:	23fa      	movs	r3, #250	@ 0xfa
 8011d80:	0098      	lsls	r0, r3, #2
 8011d82:	f7ee f9c9 	bl	8000118 <__udivsi3>
 8011d86:	0003      	movs	r3, r0
 8011d88:	0019      	movs	r1, r3
 8011d8a:	0020      	movs	r0, r4
 8011d8c:	f7ee f9c4 	bl	8000118 <__udivsi3>
 8011d90:	0003      	movs	r3, r0
 8011d92:	0018      	movs	r0, r3
 8011d94:	f001 fbd3 	bl	801353e <HAL_SYSTICK_Config>
 8011d98:	1e03      	subs	r3, r0, #0
 8011d9a:	d112      	bne.n	8011dc2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b03      	cmp	r3, #3
 8011da0:	d80a      	bhi.n	8011db8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011da2:	6879      	ldr	r1, [r7, #4]
 8011da4:	2301      	movs	r3, #1
 8011da6:	425b      	negs	r3, r3
 8011da8:	2200      	movs	r2, #0
 8011daa:	0018      	movs	r0, r3
 8011dac:	f001 fb92 	bl	80134d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011db0:	4b0e      	ldr	r3, [pc, #56]	@ (8011dec <HAL_InitTick+0x90>)
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	e00d      	b.n	8011dd4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8011db8:	230f      	movs	r3, #15
 8011dba:	18fb      	adds	r3, r7, r3
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	701a      	strb	r2, [r3, #0]
 8011dc0:	e008      	b.n	8011dd4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011dc2:	230f      	movs	r3, #15
 8011dc4:	18fb      	adds	r3, r7, r3
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	701a      	strb	r2, [r3, #0]
 8011dca:	e003      	b.n	8011dd4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011dcc:	230f      	movs	r3, #15
 8011dce:	18fb      	adds	r3, r7, r3
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8011dd4:	230f      	movs	r3, #15
 8011dd6:	18fb      	adds	r3, r7, r3
 8011dd8:	781b      	ldrb	r3, [r3, #0]
}
 8011dda:	0018      	movs	r0, r3
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	b005      	add	sp, #20
 8011de0:	bd90      	pop	{r4, r7, pc}
 8011de2:	46c0      	nop			@ (mov r8, r8)
 8011de4:	20000280 	.word	0x20000280
 8011de8:	2000025c 	.word	0x2000025c
 8011dec:	2000027c 	.word	0x2000027c

08011df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011df4:	4b04      	ldr	r3, [pc, #16]	@ (8011e08 <HAL_IncTick+0x18>)
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	4b04      	ldr	r3, [pc, #16]	@ (8011e0c <HAL_IncTick+0x1c>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	18d2      	adds	r2, r2, r3
 8011dfe:	4b02      	ldr	r3, [pc, #8]	@ (8011e08 <HAL_IncTick+0x18>)
 8011e00:	601a      	str	r2, [r3, #0]
}
 8011e02:	46c0      	nop			@ (mov r8, r8)
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	20002270 	.word	0x20002270
 8011e0c:	20000280 	.word	0x20000280

08011e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	af00      	add	r7, sp, #0
  return uwTick;
 8011e14:	4b02      	ldr	r3, [pc, #8]	@ (8011e20 <HAL_GetTick+0x10>)
 8011e16:	681b      	ldr	r3, [r3, #0]
}
 8011e18:	0018      	movs	r0, r3
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	46c0      	nop			@ (mov r8, r8)
 8011e20:	20002270 	.word	0x20002270

08011e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011e2c:	f7ff fff0 	bl	8011e10 <HAL_GetTick>
 8011e30:	0003      	movs	r3, r0
 8011e32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	d004      	beq.n	8011e48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8011e3e:	4b09      	ldr	r3, [pc, #36]	@ (8011e64 <HAL_Delay+0x40>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	68fa      	ldr	r2, [r7, #12]
 8011e44:	18d3      	adds	r3, r2, r3
 8011e46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011e48:	46c0      	nop			@ (mov r8, r8)
 8011e4a:	f7ff ffe1 	bl	8011e10 <HAL_GetTick>
 8011e4e:	0002      	movs	r2, r0
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d8f7      	bhi.n	8011e4a <HAL_Delay+0x26>
  {
  }
}
 8011e5a:	46c0      	nop			@ (mov r8, r8)
 8011e5c:	46c0      	nop			@ (mov r8, r8)
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	b004      	add	sp, #16
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	20000280 	.word	0x20000280

08011e68 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8011e6c:	4b04      	ldr	r3, [pc, #16]	@ (8011e80 <HAL_SuspendTick+0x18>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	4b03      	ldr	r3, [pc, #12]	@ (8011e80 <HAL_SuspendTick+0x18>)
 8011e72:	2102      	movs	r1, #2
 8011e74:	438a      	bics	r2, r1
 8011e76:	601a      	str	r2, [r3, #0]
}
 8011e78:	46c0      	nop			@ (mov r8, r8)
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	46c0      	nop			@ (mov r8, r8)
 8011e80:	e000e010 	.word	0xe000e010

08011e84 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8011e88:	4b04      	ldr	r3, [pc, #16]	@ (8011e9c <HAL_ResumeTick+0x18>)
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	4b03      	ldr	r3, [pc, #12]	@ (8011e9c <HAL_ResumeTick+0x18>)
 8011e8e:	2102      	movs	r1, #2
 8011e90:	430a      	orrs	r2, r1
 8011e92:	601a      	str	r2, [r3, #0]
}
 8011e94:	46c0      	nop			@ (mov r8, r8)
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	46c0      	nop			@ (mov r8, r8)
 8011e9c:	e000e010 	.word	0xe000e010

08011ea0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	4a05      	ldr	r2, [pc, #20]	@ (8011ec4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8011eb0:	401a      	ands	r2, r3
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	431a      	orrs	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	601a      	str	r2, [r3, #0]
}
 8011eba:	46c0      	nop			@ (mov r8, r8)
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	b002      	add	sp, #8
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	46c0      	nop			@ (mov r8, r8)
 8011ec4:	fe3fffff 	.word	0xfe3fffff

08011ec8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	23e0      	movs	r3, #224	@ 0xe0
 8011ed6:	045b      	lsls	r3, r3, #17
 8011ed8:	4013      	ands	r3, r2
}
 8011eda:	0018      	movs	r0, r3
 8011edc:	46bd      	mov	sp, r7
 8011ede:	b002      	add	sp, #8
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b084      	sub	sp, #16
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	60f8      	str	r0, [r7, #12]
 8011eea:	60b9      	str	r1, [r7, #8]
 8011eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	695b      	ldr	r3, [r3, #20]
 8011ef2:	68ba      	ldr	r2, [r7, #8]
 8011ef4:	2104      	movs	r1, #4
 8011ef6:	400a      	ands	r2, r1
 8011ef8:	2107      	movs	r1, #7
 8011efa:	4091      	lsls	r1, r2
 8011efc:	000a      	movs	r2, r1
 8011efe:	43d2      	mvns	r2, r2
 8011f00:	401a      	ands	r2, r3
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	2104      	movs	r1, #4
 8011f06:	400b      	ands	r3, r1
 8011f08:	6879      	ldr	r1, [r7, #4]
 8011f0a:	4099      	lsls	r1, r3
 8011f0c:	000b      	movs	r3, r1
 8011f0e:	431a      	orrs	r2, r3
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8011f14:	46c0      	nop			@ (mov r8, r8)
 8011f16:	46bd      	mov	sp, r7
 8011f18:	b004      	add	sp, #16
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	695b      	ldr	r3, [r3, #20]
 8011f2a:	683a      	ldr	r2, [r7, #0]
 8011f2c:	2104      	movs	r1, #4
 8011f2e:	400a      	ands	r2, r1
 8011f30:	2107      	movs	r1, #7
 8011f32:	4091      	lsls	r1, r2
 8011f34:	000a      	movs	r2, r1
 8011f36:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	2104      	movs	r1, #4
 8011f3c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8011f3e:	40da      	lsrs	r2, r3
 8011f40:	0013      	movs	r3, r2
}
 8011f42:	0018      	movs	r0, r3
 8011f44:	46bd      	mov	sp, r7
 8011f46:	b002      	add	sp, #8
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b084      	sub	sp, #16
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	60f8      	str	r0, [r7, #12]
 8011f52:	60b9      	str	r1, [r7, #8]
 8011f54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f5a:	68ba      	ldr	r2, [r7, #8]
 8011f5c:	211f      	movs	r1, #31
 8011f5e:	400a      	ands	r2, r1
 8011f60:	210f      	movs	r1, #15
 8011f62:	4091      	lsls	r1, r2
 8011f64:	000a      	movs	r2, r1
 8011f66:	43d2      	mvns	r2, r2
 8011f68:	401a      	ands	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	0e9b      	lsrs	r3, r3, #26
 8011f6e:	210f      	movs	r1, #15
 8011f70:	4019      	ands	r1, r3
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	201f      	movs	r0, #31
 8011f76:	4003      	ands	r3, r0
 8011f78:	4099      	lsls	r1, r3
 8011f7a:	000b      	movs	r3, r1
 8011f7c:	431a      	orrs	r2, r3
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8011f82:	46c0      	nop			@ (mov r8, r8)
 8011f84:	46bd      	mov	sp, r7
 8011f86:	b004      	add	sp, #16
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	025b      	lsls	r3, r3, #9
 8011f9c:	0a5b      	lsrs	r3, r3, #9
 8011f9e:	431a      	orrs	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011fa4:	46c0      	nop			@ (mov r8, r8)
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	b002      	add	sp, #8
 8011faa:	bd80      	pop	{r7, pc}

08011fac <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fba:	683a      	ldr	r2, [r7, #0]
 8011fbc:	0252      	lsls	r2, r2, #9
 8011fbe:	0a52      	lsrs	r2, r2, #9
 8011fc0:	43d2      	mvns	r2, r2
 8011fc2:	401a      	ands	r2, r3
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011fc8:	46c0      	nop			@ (mov r8, r8)
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	b002      	add	sp, #8
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	695b      	ldr	r3, [r3, #20]
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	0212      	lsls	r2, r2, #8
 8011fe4:	43d2      	mvns	r2, r2
 8011fe6:	401a      	ands	r2, r3
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	021b      	lsls	r3, r3, #8
 8011fec:	6879      	ldr	r1, [r7, #4]
 8011fee:	400b      	ands	r3, r1
 8011ff0:	4904      	ldr	r1, [pc, #16]	@ (8012004 <LL_ADC_SetChannelSamplingTime+0x34>)
 8011ff2:	400b      	ands	r3, r1
 8011ff4:	431a      	orrs	r2, r3
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8011ffa:	46c0      	nop			@ (mov r8, r8)
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	b004      	add	sp, #16
 8012000:	bd80      	pop	{r7, pc}
 8012002:	46c0      	nop			@ (mov r8, r8)
 8012004:	7fffff00 	.word	0x7fffff00

08012008 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	4a11      	ldr	r2, [pc, #68]	@ (801205c <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 8012018:	4293      	cmp	r3, r2
 801201a:	d103      	bne.n	8012024 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	330c      	adds	r3, #12
 8012020:	617b      	str	r3, [r7, #20]
 8012022:	e009      	b.n	8012038 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	33a0      	adds	r3, #160	@ 0xa0
 8012028:	0019      	movs	r1, r3
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	0d5b      	lsrs	r3, r3, #21
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	2204      	movs	r2, #4
 8012032:	4013      	ands	r3, r2
 8012034:	18cb      	adds	r3, r1, r3
 8012036:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	68ba      	ldr	r2, [r7, #8]
 801203e:	4908      	ldr	r1, [pc, #32]	@ (8012060 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8012040:	400a      	ands	r2, r1
 8012042:	43d2      	mvns	r2, r2
 8012044:	401a      	ands	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	68b9      	ldr	r1, [r7, #8]
 801204a:	400b      	ands	r3, r1
 801204c:	431a      	orrs	r2, r3
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8012052:	46c0      	nop			@ (mov r8, r8)
 8012054:	46bd      	mov	sp, r7
 8012056:	b006      	add	sp, #24
 8012058:	bd80      	pop	{r7, pc}
 801205a:	46c0      	nop			@ (mov r8, r8)
 801205c:	7cc00000 	.word	0x7cc00000
 8012060:	7cc7ffff 	.word	0x7cc7ffff

08012064 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	3320      	adds	r3, #32
 8012076:	0018      	movs	r0, r3
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	0d1b      	lsrs	r3, r3, #20
 801207c:	2203      	movs	r2, #3
 801207e:	401a      	ands	r2, r3
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	0d5b      	lsrs	r3, r3, #21
 8012084:	2101      	movs	r1, #1
 8012086:	400b      	ands	r3, r1
 8012088:	18d3      	adds	r3, r2, r3
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	18c3      	adds	r3, r0, r3
 801208e:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4a06      	ldr	r2, [pc, #24]	@ (80120b0 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 8012096:	401a      	ands	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	0419      	lsls	r1, r3, #16
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	430b      	orrs	r3, r1
 80120a0:	431a      	orrs	r2, r3
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80120a6:	46c0      	nop			@ (mov r8, r8)
 80120a8:	46bd      	mov	sp, r7
 80120aa:	b006      	add	sp, #24
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	46c0      	nop			@ (mov r8, r8)
 80120b0:	f000f000 	.word	0xf000f000

080120b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	4a05      	ldr	r2, [pc, #20]	@ (80120d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80120c2:	4013      	ands	r3, r2
 80120c4:	2280      	movs	r2, #128	@ 0x80
 80120c6:	0552      	lsls	r2, r2, #21
 80120c8:	431a      	orrs	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80120ce:	46c0      	nop			@ (mov r8, r8)
 80120d0:	46bd      	mov	sp, r7
 80120d2:	b002      	add	sp, #8
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	46c0      	nop			@ (mov r8, r8)
 80120d8:	6fffffe8 	.word	0x6fffffe8

080120dc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	689b      	ldr	r3, [r3, #8]
 80120e8:	4a03      	ldr	r2, [pc, #12]	@ (80120f8 <LL_ADC_DisableInternalRegulator+0x1c>)
 80120ea:	401a      	ands	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	609a      	str	r2, [r3, #8]
}
 80120f0:	46c0      	nop			@ (mov r8, r8)
 80120f2:	46bd      	mov	sp, r7
 80120f4:	b002      	add	sp, #8
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	6fffffe8 	.word	0x6fffffe8

080120fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	689a      	ldr	r2, [r3, #8]
 8012108:	2380      	movs	r3, #128	@ 0x80
 801210a:	055b      	lsls	r3, r3, #21
 801210c:	401a      	ands	r2, r3
 801210e:	2380      	movs	r3, #128	@ 0x80
 8012110:	055b      	lsls	r3, r3, #21
 8012112:	429a      	cmp	r2, r3
 8012114:	d101      	bne.n	801211a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8012116:	2301      	movs	r3, #1
 8012118:	e000      	b.n	801211c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 801211a:	2300      	movs	r3, #0
}
 801211c:	0018      	movs	r0, r3
 801211e:	46bd      	mov	sp, r7
 8012120:	b002      	add	sp, #8
 8012122:	bd80      	pop	{r7, pc}

08012124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	689b      	ldr	r3, [r3, #8]
 8012130:	4a04      	ldr	r2, [pc, #16]	@ (8012144 <LL_ADC_Enable+0x20>)
 8012132:	4013      	ands	r3, r2
 8012134:	2201      	movs	r2, #1
 8012136:	431a      	orrs	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801213c:	46c0      	nop			@ (mov r8, r8)
 801213e:	46bd      	mov	sp, r7
 8012140:	b002      	add	sp, #8
 8012142:	bd80      	pop	{r7, pc}
 8012144:	7fffffe8 	.word	0x7fffffe8

08012148 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	4a04      	ldr	r2, [pc, #16]	@ (8012168 <LL_ADC_Disable+0x20>)
 8012156:	4013      	ands	r3, r2
 8012158:	2202      	movs	r2, #2
 801215a:	431a      	orrs	r2, r3
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8012160:	46c0      	nop			@ (mov r8, r8)
 8012162:	46bd      	mov	sp, r7
 8012164:	b002      	add	sp, #8
 8012166:	bd80      	pop	{r7, pc}
 8012168:	7fffffe8 	.word	0x7fffffe8

0801216c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	2201      	movs	r2, #1
 801217a:	4013      	ands	r3, r2
 801217c:	2b01      	cmp	r3, #1
 801217e:	d101      	bne.n	8012184 <LL_ADC_IsEnabled+0x18>
 8012180:	2301      	movs	r3, #1
 8012182:	e000      	b.n	8012186 <LL_ADC_IsEnabled+0x1a>
 8012184:	2300      	movs	r3, #0
}
 8012186:	0018      	movs	r0, r3
 8012188:	46bd      	mov	sp, r7
 801218a:	b002      	add	sp, #8
 801218c:	bd80      	pop	{r7, pc}

0801218e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b082      	sub	sp, #8
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	2202      	movs	r2, #2
 801219c:	4013      	ands	r3, r2
 801219e:	2b02      	cmp	r3, #2
 80121a0:	d101      	bne.n	80121a6 <LL_ADC_IsDisableOngoing+0x18>
 80121a2:	2301      	movs	r3, #1
 80121a4:	e000      	b.n	80121a8 <LL_ADC_IsDisableOngoing+0x1a>
 80121a6:	2300      	movs	r3, #0
}
 80121a8:	0018      	movs	r0, r3
 80121aa:	46bd      	mov	sp, r7
 80121ac:	b002      	add	sp, #8
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	4a04      	ldr	r2, [pc, #16]	@ (80121d0 <LL_ADC_REG_StopConversion+0x20>)
 80121be:	4013      	ands	r3, r2
 80121c0:	2210      	movs	r2, #16
 80121c2:	431a      	orrs	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80121c8:	46c0      	nop			@ (mov r8, r8)
 80121ca:	46bd      	mov	sp, r7
 80121cc:	b002      	add	sp, #8
 80121ce:	bd80      	pop	{r7, pc}
 80121d0:	7fffffe8 	.word	0x7fffffe8

080121d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	2204      	movs	r2, #4
 80121e2:	4013      	ands	r3, r2
 80121e4:	2b04      	cmp	r3, #4
 80121e6:	d101      	bne.n	80121ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80121e8:	2301      	movs	r3, #1
 80121ea:	e000      	b.n	80121ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	0018      	movs	r0, r3
 80121f0:	46bd      	mov	sp, r7
 80121f2:	b002      	add	sp, #8
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b082      	sub	sp, #8
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2280      	movs	r2, #128	@ 0x80
 8012202:	601a      	str	r2, [r3, #0]
}
 8012204:	46c0      	nop			@ (mov r8, r8)
 8012206:	46bd      	mov	sp, r7
 8012208:	b002      	add	sp, #8
 801220a:	bd80      	pop	{r7, pc}

0801220c <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2280      	movs	r2, #128	@ 0x80
 8012218:	0052      	lsls	r2, r2, #1
 801221a:	601a      	str	r2, [r3, #0]
}
 801221c:	46c0      	nop			@ (mov r8, r8)
 801221e:	46bd      	mov	sp, r7
 8012220:	b002      	add	sp, #8
 8012222:	bd80      	pop	{r7, pc}

08012224 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2280      	movs	r2, #128	@ 0x80
 8012230:	0092      	lsls	r2, r2, #2
 8012232:	601a      	str	r2, [r3, #0]
}
 8012234:	46c0      	nop			@ (mov r8, r8)
 8012236:	46bd      	mov	sp, r7
 8012238:	b002      	add	sp, #8
 801223a:	bd80      	pop	{r7, pc}

0801223c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	2280      	movs	r2, #128	@ 0x80
 801224a:	431a      	orrs	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	605a      	str	r2, [r3, #4]
}
 8012250:	46c0      	nop			@ (mov r8, r8)
 8012252:	46bd      	mov	sp, r7
 8012254:	b002      	add	sp, #8
 8012256:	bd80      	pop	{r7, pc}

08012258 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	2280      	movs	r2, #128	@ 0x80
 8012266:	0052      	lsls	r2, r2, #1
 8012268:	431a      	orrs	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	605a      	str	r2, [r3, #4]
}
 801226e:	46c0      	nop			@ (mov r8, r8)
 8012270:	46bd      	mov	sp, r7
 8012272:	b002      	add	sp, #8
 8012274:	bd80      	pop	{r7, pc}

08012276 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b082      	sub	sp, #8
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2280      	movs	r2, #128	@ 0x80
 8012284:	0092      	lsls	r2, r2, #2
 8012286:	431a      	orrs	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	605a      	str	r2, [r3, #4]
}
 801228c:	46c0      	nop			@ (mov r8, r8)
 801228e:	46bd      	mov	sp, r7
 8012290:	b002      	add	sp, #8
 8012292:	bd80      	pop	{r7, pc}

08012294 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	2280      	movs	r2, #128	@ 0x80
 80122a2:	4393      	bics	r3, r2
 80122a4:	001a      	movs	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	605a      	str	r2, [r3, #4]
}
 80122aa:	46c0      	nop			@ (mov r8, r8)
 80122ac:	46bd      	mov	sp, r7
 80122ae:	b002      	add	sp, #8
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	4a03      	ldr	r2, [pc, #12]	@ (80122d0 <LL_ADC_DisableIT_AWD2+0x1c>)
 80122c2:	401a      	ands	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	605a      	str	r2, [r3, #4]
}
 80122c8:	46c0      	nop			@ (mov r8, r8)
 80122ca:	46bd      	mov	sp, r7
 80122cc:	b002      	add	sp, #8
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	fffffeff 	.word	0xfffffeff

080122d4 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	4a03      	ldr	r2, [pc, #12]	@ (80122f0 <LL_ADC_DisableIT_AWD3+0x1c>)
 80122e2:	401a      	ands	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	605a      	str	r2, [r3, #4]
}
 80122e8:	46c0      	nop			@ (mov r8, r8)
 80122ea:	46bd      	mov	sp, r7
 80122ec:	b002      	add	sp, #8
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	fffffdff 	.word	0xfffffdff

080122f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80122fc:	231f      	movs	r3, #31
 80122fe:	18fb      	adds	r3, r7, r3
 8012300:	2200      	movs	r2, #0
 8012302:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8012304:	2300      	movs	r3, #0
 8012306:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8012308:	2300      	movs	r3, #0
 801230a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801230c:	2300      	movs	r3, #0
 801230e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d101      	bne.n	801231a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8012316:	2301      	movs	r3, #1
 8012318:	e17f      	b.n	801261a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801231e:	2b00      	cmp	r3, #0
 8012320:	d10a      	bne.n	8012338 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	0018      	movs	r0, r3
 8012326:	f7f9 fd17 	bl	800bd58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2254      	movs	r2, #84	@ 0x54
 8012334:	2100      	movs	r1, #0
 8012336:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	0018      	movs	r0, r3
 801233e:	f7ff fedd 	bl	80120fc <LL_ADC_IsInternalRegulatorEnabled>
 8012342:	1e03      	subs	r3, r0, #0
 8012344:	d115      	bne.n	8012372 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	0018      	movs	r0, r3
 801234c:	f7ff feb2 	bl	80120b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012350:	4bb4      	ldr	r3, [pc, #720]	@ (8012624 <HAL_ADC_Init+0x330>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	49b4      	ldr	r1, [pc, #720]	@ (8012628 <HAL_ADC_Init+0x334>)
 8012356:	0018      	movs	r0, r3
 8012358:	f7ed fede 	bl	8000118 <__udivsi3>
 801235c:	0003      	movs	r3, r0
 801235e:	3301      	adds	r3, #1
 8012360:	005b      	lsls	r3, r3, #1
 8012362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012364:	e002      	b.n	801236c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	3b01      	subs	r3, #1
 801236a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d1f9      	bne.n	8012366 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	0018      	movs	r0, r3
 8012378:	f7ff fec0 	bl	80120fc <LL_ADC_IsInternalRegulatorEnabled>
 801237c:	1e03      	subs	r3, r0, #0
 801237e:	d10f      	bne.n	80123a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012384:	2210      	movs	r2, #16
 8012386:	431a      	orrs	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012390:	2201      	movs	r2, #1
 8012392:	431a      	orrs	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8012398:	231f      	movs	r3, #31
 801239a:	18fb      	adds	r3, r7, r3
 801239c:	2201      	movs	r2, #1
 801239e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	0018      	movs	r0, r3
 80123a6:	f7ff ff15 	bl	80121d4 <LL_ADC_REG_IsConversionOngoing>
 80123aa:	0003      	movs	r3, r0
 80123ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123b2:	2210      	movs	r2, #16
 80123b4:	4013      	ands	r3, r2
 80123b6:	d000      	beq.n	80123ba <HAL_ADC_Init+0xc6>
 80123b8:	e122      	b.n	8012600 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d000      	beq.n	80123c2 <HAL_ADC_Init+0xce>
 80123c0:	e11e      	b.n	8012600 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123c6:	4a99      	ldr	r2, [pc, #612]	@ (801262c <HAL_ADC_Init+0x338>)
 80123c8:	4013      	ands	r3, r2
 80123ca:	2202      	movs	r2, #2
 80123cc:	431a      	orrs	r2, r3
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	0018      	movs	r0, r3
 80123d8:	f7ff fec8 	bl	801216c <LL_ADC_IsEnabled>
 80123dc:	1e03      	subs	r3, r0, #0
 80123de:	d000      	beq.n	80123e2 <HAL_ADC_Init+0xee>
 80123e0:	e0ad      	b.n	801253e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	7e1b      	ldrb	r3, [r3, #24]
 80123ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80123ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	7e5b      	ldrb	r3, [r3, #25]
 80123f2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80123f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	7e9b      	ldrb	r3, [r3, #26]
 80123fa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80123fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012402:	2b00      	cmp	r3, #0
 8012404:	d002      	beq.n	801240c <HAL_ADC_Init+0x118>
 8012406:	2380      	movs	r3, #128	@ 0x80
 8012408:	015b      	lsls	r3, r3, #5
 801240a:	e000      	b.n	801240e <HAL_ADC_Init+0x11a>
 801240c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 801240e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8012414:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	691b      	ldr	r3, [r3, #16]
 801241a:	2b00      	cmp	r3, #0
 801241c:	da04      	bge.n	8012428 <HAL_ADC_Init+0x134>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	085b      	lsrs	r3, r3, #1
 8012426:	e001      	b.n	801242c <HAL_ADC_Init+0x138>
 8012428:	2380      	movs	r3, #128	@ 0x80
 801242a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 801242c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	212c      	movs	r1, #44	@ 0x2c
 8012432:	5c5b      	ldrb	r3, [r3, r1]
 8012434:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8012436:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8012438:	69ba      	ldr	r2, [r7, #24]
 801243a:	4313      	orrs	r3, r2
 801243c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2220      	movs	r2, #32
 8012442:	5c9b      	ldrb	r3, [r3, r2]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d115      	bne.n	8012474 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	7e9b      	ldrb	r3, [r3, #26]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d105      	bne.n	801245c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	2280      	movs	r2, #128	@ 0x80
 8012454:	0252      	lsls	r2, r2, #9
 8012456:	4313      	orrs	r3, r2
 8012458:	61bb      	str	r3, [r7, #24]
 801245a:	e00b      	b.n	8012474 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012460:	2220      	movs	r2, #32
 8012462:	431a      	orrs	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801246c:	2201      	movs	r2, #1
 801246e:	431a      	orrs	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00a      	beq.n	8012492 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012480:	23e0      	movs	r3, #224	@ 0xe0
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 801248a:	4313      	orrs	r3, r2
 801248c:	69ba      	ldr	r2, [r7, #24]
 801248e:	4313      	orrs	r3, r2
 8012490:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	4a65      	ldr	r2, [pc, #404]	@ (8012630 <HAL_ADC_Init+0x33c>)
 801249a:	4013      	ands	r3, r2
 801249c:	0019      	movs	r1, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	69ba      	ldr	r2, [r7, #24]
 80124a4:	430a      	orrs	r2, r1
 80124a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	0f9b      	lsrs	r3, r3, #30
 80124ae:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80124b4:	4313      	orrs	r3, r2
 80124b6:	697a      	ldr	r2, [r7, #20]
 80124b8:	4313      	orrs	r3, r2
 80124ba:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	223c      	movs	r2, #60	@ 0x3c
 80124c0:	5c9b      	ldrb	r3, [r3, r2]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d111      	bne.n	80124ea <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	0f9b      	lsrs	r3, r3, #30
 80124cc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80124d2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80124d8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80124de:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	4313      	orrs	r3, r2
 80124e4:	2201      	movs	r2, #1
 80124e6:	4313      	orrs	r3, r2
 80124e8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	691b      	ldr	r3, [r3, #16]
 80124f0:	4a50      	ldr	r2, [pc, #320]	@ (8012634 <HAL_ADC_Init+0x340>)
 80124f2:	4013      	ands	r3, r2
 80124f4:	0019      	movs	r1, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	697a      	ldr	r2, [r7, #20]
 80124fc:	430a      	orrs	r2, r1
 80124fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	685a      	ldr	r2, [r3, #4]
 8012504:	23c0      	movs	r3, #192	@ 0xc0
 8012506:	061b      	lsls	r3, r3, #24
 8012508:	429a      	cmp	r2, r3
 801250a:	d018      	beq.n	801253e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8012510:	2380      	movs	r3, #128	@ 0x80
 8012512:	05db      	lsls	r3, r3, #23
 8012514:	429a      	cmp	r2, r3
 8012516:	d012      	beq.n	801253e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 801251c:	2380      	movs	r3, #128	@ 0x80
 801251e:	061b      	lsls	r3, r3, #24
 8012520:	429a      	cmp	r2, r3
 8012522:	d00c      	beq.n	801253e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8012524:	4b44      	ldr	r3, [pc, #272]	@ (8012638 <HAL_ADC_Init+0x344>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a44      	ldr	r2, [pc, #272]	@ (801263c <HAL_ADC_Init+0x348>)
 801252a:	4013      	ands	r3, r2
 801252c:	0019      	movs	r1, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	685a      	ldr	r2, [r3, #4]
 8012532:	23f0      	movs	r3, #240	@ 0xf0
 8012534:	039b      	lsls	r3, r3, #14
 8012536:	401a      	ands	r2, r3
 8012538:	4b3f      	ldr	r3, [pc, #252]	@ (8012638 <HAL_ADC_Init+0x344>)
 801253a:	430a      	orrs	r2, r1
 801253c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6818      	ldr	r0, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012546:	001a      	movs	r2, r3
 8012548:	2100      	movs	r1, #0
 801254a:	f7ff fcca 	bl	8011ee2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6818      	ldr	r0, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012556:	493a      	ldr	r1, [pc, #232]	@ (8012640 <HAL_ADC_Init+0x34c>)
 8012558:	001a      	movs	r2, r3
 801255a:	f7ff fcc2 	bl	8011ee2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	691b      	ldr	r3, [r3, #16]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d109      	bne.n	801257a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2110      	movs	r1, #16
 8012572:	4249      	negs	r1, r1
 8012574:	430a      	orrs	r2, r1
 8012576:	629a      	str	r2, [r3, #40]	@ 0x28
 8012578:	e018      	b.n	80125ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	691a      	ldr	r2, [r3, #16]
 801257e:	2380      	movs	r3, #128	@ 0x80
 8012580:	039b      	lsls	r3, r3, #14
 8012582:	429a      	cmp	r2, r3
 8012584:	d112      	bne.n	80125ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	69db      	ldr	r3, [r3, #28]
 8012590:	3b01      	subs	r3, #1
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	221c      	movs	r2, #28
 8012596:	4013      	ands	r3, r2
 8012598:	2210      	movs	r2, #16
 801259a:	4252      	negs	r2, r2
 801259c:	409a      	lsls	r2, r3
 801259e:	0011      	movs	r1, r2
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	430a      	orrs	r2, r1
 80125aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	2100      	movs	r1, #0
 80125b2:	0018      	movs	r0, r3
 80125b4:	f7ff fcb2 	bl	8011f1c <LL_ADC_GetSamplingTimeCommonChannels>
 80125b8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80125be:	429a      	cmp	r2, r3
 80125c0:	d10b      	bne.n	80125da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2200      	movs	r2, #0
 80125c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125cc:	2203      	movs	r2, #3
 80125ce:	4393      	bics	r3, r2
 80125d0:	2201      	movs	r2, #1
 80125d2:	431a      	orrs	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80125d8:	e01c      	b.n	8012614 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125de:	2212      	movs	r2, #18
 80125e0:	4393      	bics	r3, r2
 80125e2:	2210      	movs	r2, #16
 80125e4:	431a      	orrs	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80125ee:	2201      	movs	r2, #1
 80125f0:	431a      	orrs	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80125f6:	231f      	movs	r3, #31
 80125f8:	18fb      	adds	r3, r7, r3
 80125fa:	2201      	movs	r2, #1
 80125fc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80125fe:	e009      	b.n	8012614 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012604:	2210      	movs	r2, #16
 8012606:	431a      	orrs	r2, r3
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 801260c:	231f      	movs	r3, #31
 801260e:	18fb      	adds	r3, r7, r3
 8012610:	2201      	movs	r2, #1
 8012612:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8012614:	231f      	movs	r3, #31
 8012616:	18fb      	adds	r3, r7, r3
 8012618:	781b      	ldrb	r3, [r3, #0]
}
 801261a:	0018      	movs	r0, r3
 801261c:	46bd      	mov	sp, r7
 801261e:	b008      	add	sp, #32
 8012620:	bd80      	pop	{r7, pc}
 8012622:	46c0      	nop			@ (mov r8, r8)
 8012624:	2000025c 	.word	0x2000025c
 8012628:	00030d40 	.word	0x00030d40
 801262c:	fffffefd 	.word	0xfffffefd
 8012630:	ffde0201 	.word	0xffde0201
 8012634:	1ffffc02 	.word	0x1ffffc02
 8012638:	40012708 	.word	0x40012708
 801263c:	ffc3ffff 	.word	0xffc3ffff
 8012640:	7fffff04 	.word	0x7fffff04

08012644 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8012644:	b5b0      	push	{r4, r5, r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8012652:	2301      	movs	r3, #1
 8012654:	e081      	b.n	801275a <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801265a:	2202      	movs	r2, #2
 801265c:	431a      	orrs	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8012662:	250f      	movs	r5, #15
 8012664:	197c      	adds	r4, r7, r5
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	0018      	movs	r0, r3
 801266a:	f000 fbad 	bl	8012dc8 <ADC_ConversionStop>
 801266e:	0003      	movs	r3, r0
 8012670:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8012672:	197b      	adds	r3, r7, r5
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d112      	bne.n	80126a0 <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801267a:	197c      	adds	r4, r7, r5
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	0018      	movs	r0, r3
 8012680:	f000 fc6a 	bl	8012f58 <ADC_Disable>
 8012684:	0003      	movs	r3, r0
 8012686:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8012688:	197b      	adds	r3, r7, r5
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d102      	bne.n	8012696 <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2201      	movs	r2, #1
 8012694:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	0018      	movs	r0, r3
 801269c:	f7ff fd1e 	bl	80120dc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	685a      	ldr	r2, [r3, #4]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	492e      	ldr	r1, [pc, #184]	@ (8012764 <HAL_ADC_DeInit+0x120>)
 80126ac:	400a      	ands	r2, r1
 80126ae:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	4a2c      	ldr	r2, [pc, #176]	@ (8012768 <HAL_ADC_DeInit+0x124>)
 80126b6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	68da      	ldr	r2, [r3, #12]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	492a      	ldr	r1, [pc, #168]	@ (801276c <HAL_ADC_DeInit+0x128>)
 80126c4:	400a      	ands	r2, r1
 80126c6:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	695a      	ldr	r2, [r3, #20]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2107      	movs	r1, #7
 80126d4:	438a      	bics	r2, r1
 80126d6:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2200      	movs	r2, #0
 80126e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	6a1a      	ldr	r2, [r3, #32]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	491f      	ldr	r1, [pc, #124]	@ (8012770 <HAL_ADC_DeInit+0x12c>)
 80126f2:	400a      	ands	r2, r1
 80126f4:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	491b      	ldr	r1, [pc, #108]	@ (8012770 <HAL_ADC_DeInit+0x12c>)
 8012702:	400a      	ands	r2, r1
 8012704:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4917      	ldr	r1, [pc, #92]	@ (8012770 <HAL_ADC_DeInit+0x12c>)
 8012712:	400a      	ands	r2, r1
 8012714:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	691a      	ldr	r2, [r3, #16]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	0092      	lsls	r2, r2, #2
 8012722:	0892      	lsrs	r2, r2, #2
 8012724:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8012726:	4b13      	ldr	r3, [pc, #76]	@ (8012774 <HAL_ADC_DeInit+0x130>)
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	4b12      	ldr	r3, [pc, #72]	@ (8012774 <HAL_ADC_DeInit+0x130>)
 801272c:	4912      	ldr	r1, [pc, #72]	@ (8012778 <HAL_ADC_DeInit+0x134>)
 801272e:	400a      	ands	r2, r1
 8012730:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	0018      	movs	r0, r3
 8012736:	f7f9 fba5 	bl	800be84 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2200      	movs	r2, #0
 801273e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2200      	movs	r2, #0
 8012744:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2254      	movs	r2, #84	@ 0x54
 8012750:	2100      	movs	r1, #0
 8012752:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012754:	230f      	movs	r3, #15
 8012756:	18fb      	adds	r3, r7, r3
 8012758:	781b      	ldrb	r3, [r3, #0]
}
 801275a:	0018      	movs	r0, r3
 801275c:	46bd      	mov	sp, r7
 801275e:	b004      	add	sp, #16
 8012760:	bdb0      	pop	{r4, r5, r7, pc}
 8012762:	46c0      	nop			@ (mov r8, r8)
 8012764:	fffff460 	.word	0xfffff460
 8012768:	00000b9f 	.word	0x00000b9f
 801276c:	831e0200 	.word	0x831e0200
 8012770:	f000f000 	.word	0xf000f000
 8012774:	40012708 	.word	0x40012708
 8012778:	fe03ffff 	.word	0xfe03ffff

0801277c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 801277c:	b590      	push	{r4, r7, lr}
 801277e:	b08b      	sub	sp, #44	@ 0x2c
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012786:	2327      	movs	r3, #39	@ 0x27
 8012788:	18fb      	adds	r3, r7, r3
 801278a:	2200      	movs	r2, #0
 801278c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801278e:	2300      	movs	r3, #0
 8012790:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2254      	movs	r2, #84	@ 0x54
 8012796:	5c9b      	ldrb	r3, [r3, r2]
 8012798:	2b01      	cmp	r3, #1
 801279a:	d101      	bne.n	80127a0 <HAL_ADC_ConfigChannel+0x24>
 801279c:	2302      	movs	r3, #2
 801279e:	e141      	b.n	8012a24 <HAL_ADC_ConfigChannel+0x2a8>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2254      	movs	r2, #84	@ 0x54
 80127a4:	2101      	movs	r1, #1
 80127a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	0018      	movs	r0, r3
 80127ae:	f7ff fd11 	bl	80121d4 <LL_ADC_REG_IsConversionOngoing>
 80127b2:	1e03      	subs	r3, r0, #0
 80127b4:	d000      	beq.n	80127b8 <HAL_ADC_ConfigChannel+0x3c>
 80127b6:	e124      	b.n	8012a02 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d100      	bne.n	80127c2 <HAL_ADC_ConfigChannel+0x46>
 80127c0:	e0d8      	b.n	8012974 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	691a      	ldr	r2, [r3, #16]
 80127c6:	2380      	movs	r3, #128	@ 0x80
 80127c8:	061b      	lsls	r3, r3, #24
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d004      	beq.n	80127d8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80127d2:	4a96      	ldr	r2, [pc, #600]	@ (8012a2c <HAL_ADC_ConfigChannel+0x2b0>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d108      	bne.n	80127ea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	0019      	movs	r1, r3
 80127e2:	0010      	movs	r0, r2
 80127e4:	f7ff fbd1 	bl	8011f8a <LL_ADC_REG_SetSequencerChAdd>
 80127e8:	e060      	b.n	80128ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	211f      	movs	r1, #31
 80127f4:	400b      	ands	r3, r1
 80127f6:	210f      	movs	r1, #15
 80127f8:	4099      	lsls	r1, r3
 80127fa:	000b      	movs	r3, r1
 80127fc:	43db      	mvns	r3, r3
 80127fe:	4013      	ands	r3, r2
 8012800:	001c      	movs	r4, r3
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	025b      	lsls	r3, r3, #9
 8012808:	0a5b      	lsrs	r3, r3, #9
 801280a:	d105      	bne.n	8012818 <HAL_ADC_ConfigChannel+0x9c>
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	0e9b      	lsrs	r3, r3, #26
 8012812:	221f      	movs	r2, #31
 8012814:	401a      	ands	r2, r3
 8012816:	e02e      	b.n	8012876 <HAL_ADC_ConfigChannel+0xfa>
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 801281e:	231f      	movs	r3, #31
 8012820:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	085b      	lsrs	r3, r3, #1
 801282a:	61bb      	str	r3, [r7, #24]
 801282c:	e00e      	b.n	801284c <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	2201      	movs	r2, #1
 8012838:	4013      	ands	r3, r2
 801283a:	693a      	ldr	r2, [r7, #16]
 801283c:	4313      	orrs	r3, r2
 801283e:	613b      	str	r3, [r7, #16]
    s--;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3b01      	subs	r3, #1
 8012844:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	085b      	lsrs	r3, r3, #1
 801284a:	61bb      	str	r3, [r7, #24]
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d1ed      	bne.n	801282e <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012852:	693a      	ldr	r2, [r7, #16]
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	409a      	lsls	r2, r3
 8012858:	0013      	movs	r3, r2
 801285a:	613b      	str	r3, [r7, #16]
  return result;
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8012866:	2320      	movs	r3, #32
 8012868:	e004      	b.n	8012874 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 801286a:	69f8      	ldr	r0, [r7, #28]
 801286c:	f7ed fe08 	bl	8000480 <__clzsi2>
 8012870:	0003      	movs	r3, r0
 8012872:	b2db      	uxtb	r3, r3
 8012874:	001a      	movs	r2, r3
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	211f      	movs	r1, #31
 801287c:	400b      	ands	r3, r1
 801287e:	409a      	lsls	r2, r3
 8012880:	0013      	movs	r3, r2
 8012882:	0022      	movs	r2, r4
 8012884:	431a      	orrs	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	089b      	lsrs	r3, r3, #2
 8012890:	1c5a      	adds	r2, r3, #1
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	429a      	cmp	r2, r3
 8012898:	d808      	bhi.n	80128ac <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6818      	ldr	r0, [r3, #0]
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	6859      	ldr	r1, [r3, #4]
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	001a      	movs	r2, r3
 80128a8:	f7ff fb4f 	bl	8011f4a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6818      	ldr	r0, [r3, #0]
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	6819      	ldr	r1, [r3, #0]
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	689b      	ldr	r3, [r3, #8]
 80128b8:	001a      	movs	r2, r3
 80128ba:	f7ff fb89 	bl	8011fd0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	db00      	blt.n	80128c8 <HAL_ADC_ConfigChannel+0x14c>
 80128c6:	e0a6      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80128c8:	4b59      	ldr	r3, [pc, #356]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 80128ca:	0018      	movs	r0, r3
 80128cc:	f7ff fafc 	bl	8011ec8 <LL_ADC_GetCommonPathInternalCh>
 80128d0:	0003      	movs	r3, r0
 80128d2:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a56      	ldr	r2, [pc, #344]	@ (8012a34 <HAL_ADC_ConfigChannel+0x2b8>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d122      	bne.n	8012924 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80128de:	6a3a      	ldr	r2, [r7, #32]
 80128e0:	2380      	movs	r3, #128	@ 0x80
 80128e2:	041b      	lsls	r3, r3, #16
 80128e4:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80128e6:	d11d      	bne.n	8012924 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80128e8:	6a3b      	ldr	r3, [r7, #32]
 80128ea:	2280      	movs	r2, #128	@ 0x80
 80128ec:	0412      	lsls	r2, r2, #16
 80128ee:	4313      	orrs	r3, r2
 80128f0:	4a4f      	ldr	r2, [pc, #316]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 80128f2:	0019      	movs	r1, r3
 80128f4:	0010      	movs	r0, r2
 80128f6:	f7ff fad3 	bl	8011ea0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80128fa:	4b4f      	ldr	r3, [pc, #316]	@ (8012a38 <HAL_ADC_ConfigChannel+0x2bc>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	494f      	ldr	r1, [pc, #316]	@ (8012a3c <HAL_ADC_ConfigChannel+0x2c0>)
 8012900:	0018      	movs	r0, r3
 8012902:	f7ed fc09 	bl	8000118 <__udivsi3>
 8012906:	0003      	movs	r3, r0
 8012908:	1c5a      	adds	r2, r3, #1
 801290a:	0013      	movs	r3, r2
 801290c:	005b      	lsls	r3, r3, #1
 801290e:	189b      	adds	r3, r3, r2
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012914:	e002      	b.n	801291c <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	3b01      	subs	r3, #1
 801291a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1f9      	bne.n	8012916 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8012922:	e078      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4a45      	ldr	r2, [pc, #276]	@ (8012a40 <HAL_ADC_ConfigChannel+0x2c4>)
 801292a:	4293      	cmp	r3, r2
 801292c:	d10e      	bne.n	801294c <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801292e:	6a3a      	ldr	r2, [r7, #32]
 8012930:	2380      	movs	r3, #128	@ 0x80
 8012932:	045b      	lsls	r3, r3, #17
 8012934:	4013      	ands	r3, r2
 8012936:	d109      	bne.n	801294c <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	2280      	movs	r2, #128	@ 0x80
 801293c:	0452      	lsls	r2, r2, #17
 801293e:	4313      	orrs	r3, r2
 8012940:	4a3b      	ldr	r2, [pc, #236]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 8012942:	0019      	movs	r1, r3
 8012944:	0010      	movs	r0, r2
 8012946:	f7ff faab 	bl	8011ea0 <LL_ADC_SetCommonPathInternalCh>
 801294a:	e064      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4a3c      	ldr	r2, [pc, #240]	@ (8012a44 <HAL_ADC_ConfigChannel+0x2c8>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d15f      	bne.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012956:	6a3a      	ldr	r2, [r7, #32]
 8012958:	2380      	movs	r3, #128	@ 0x80
 801295a:	03db      	lsls	r3, r3, #15
 801295c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 801295e:	d15a      	bne.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012960:	6a3b      	ldr	r3, [r7, #32]
 8012962:	2280      	movs	r2, #128	@ 0x80
 8012964:	03d2      	lsls	r2, r2, #15
 8012966:	4313      	orrs	r3, r2
 8012968:	4a31      	ldr	r2, [pc, #196]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 801296a:	0019      	movs	r1, r3
 801296c:	0010      	movs	r0, r2
 801296e:	f7ff fa97 	bl	8011ea0 <LL_ADC_SetCommonPathInternalCh>
 8012972:	e050      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	691a      	ldr	r2, [r3, #16]
 8012978:	2380      	movs	r3, #128	@ 0x80
 801297a:	061b      	lsls	r3, r3, #24
 801297c:	429a      	cmp	r2, r3
 801297e:	d004      	beq.n	801298a <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8012984:	4a29      	ldr	r2, [pc, #164]	@ (8012a2c <HAL_ADC_ConfigChannel+0x2b0>)
 8012986:	4293      	cmp	r3, r2
 8012988:	d107      	bne.n	801299a <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681a      	ldr	r2, [r3, #0]
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	0019      	movs	r1, r3
 8012994:	0010      	movs	r0, r2
 8012996:	f7ff fb09 	bl	8011fac <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	da39      	bge.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80129a2:	4b23      	ldr	r3, [pc, #140]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 80129a4:	0018      	movs	r0, r3
 80129a6:	f7ff fa8f 	bl	8011ec8 <LL_ADC_GetCommonPathInternalCh>
 80129aa:	0003      	movs	r3, r0
 80129ac:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4a20      	ldr	r2, [pc, #128]	@ (8012a34 <HAL_ADC_ConfigChannel+0x2b8>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d108      	bne.n	80129ca <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	4a23      	ldr	r2, [pc, #140]	@ (8012a48 <HAL_ADC_ConfigChannel+0x2cc>)
 80129bc:	4013      	ands	r3, r2
 80129be:	4a1c      	ldr	r2, [pc, #112]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 80129c0:	0019      	movs	r1, r3
 80129c2:	0010      	movs	r0, r2
 80129c4:	f7ff fa6c 	bl	8011ea0 <LL_ADC_SetCommonPathInternalCh>
 80129c8:	e025      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a1c      	ldr	r2, [pc, #112]	@ (8012a40 <HAL_ADC_ConfigChannel+0x2c4>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d108      	bne.n	80129e6 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80129d4:	6a3b      	ldr	r3, [r7, #32]
 80129d6:	4a1d      	ldr	r2, [pc, #116]	@ (8012a4c <HAL_ADC_ConfigChannel+0x2d0>)
 80129d8:	4013      	ands	r3, r2
 80129da:	4a15      	ldr	r2, [pc, #84]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 80129dc:	0019      	movs	r1, r3
 80129de:	0010      	movs	r0, r2
 80129e0:	f7ff fa5e 	bl	8011ea0 <LL_ADC_SetCommonPathInternalCh>
 80129e4:	e017      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a16      	ldr	r2, [pc, #88]	@ (8012a44 <HAL_ADC_ConfigChannel+0x2c8>)
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d112      	bne.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80129f0:	6a3b      	ldr	r3, [r7, #32]
 80129f2:	4a17      	ldr	r2, [pc, #92]	@ (8012a50 <HAL_ADC_ConfigChannel+0x2d4>)
 80129f4:	4013      	ands	r3, r2
 80129f6:	4a0e      	ldr	r2, [pc, #56]	@ (8012a30 <HAL_ADC_ConfigChannel+0x2b4>)
 80129f8:	0019      	movs	r1, r3
 80129fa:	0010      	movs	r0, r2
 80129fc:	f7ff fa50 	bl	8011ea0 <LL_ADC_SetCommonPathInternalCh>
 8012a00:	e009      	b.n	8012a16 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a06:	2220      	movs	r2, #32
 8012a08:	431a      	orrs	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8012a0e:	2327      	movs	r3, #39	@ 0x27
 8012a10:	18fb      	adds	r3, r7, r3
 8012a12:	2201      	movs	r2, #1
 8012a14:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2254      	movs	r2, #84	@ 0x54
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012a1e:	2327      	movs	r3, #39	@ 0x27
 8012a20:	18fb      	adds	r3, r7, r3
 8012a22:	781b      	ldrb	r3, [r3, #0]
}
 8012a24:	0018      	movs	r0, r3
 8012a26:	46bd      	mov	sp, r7
 8012a28:	b00b      	add	sp, #44	@ 0x2c
 8012a2a:	bd90      	pop	{r4, r7, pc}
 8012a2c:	80000004 	.word	0x80000004
 8012a30:	40012708 	.word	0x40012708
 8012a34:	ac000800 	.word	0xac000800
 8012a38:	2000025c 	.word	0x2000025c
 8012a3c:	00030d40 	.word	0x00030d40
 8012a40:	b4002000 	.word	0xb4002000
 8012a44:	b0001000 	.word	0xb0001000
 8012a48:	ff7fffff 	.word	0xff7fffff
 8012a4c:	feffffff 	.word	0xfeffffff
 8012a50:	ffbfffff 	.word	0xffbfffff

08012a54 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8012a54:	b590      	push	{r4, r7, lr}
 8012a56:	b08f      	sub	sp, #60	@ 0x3c
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012a5e:	2337      	movs	r3, #55	@ 0x37
 8012a60:	18fb      	adds	r3, r7, r3
 8012a62:	2200      	movs	r2, #0
 8012a64:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 8012a66:	2300      	movs	r3, #0
 8012a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2254      	movs	r2, #84	@ 0x54
 8012a6e:	5c9b      	ldrb	r3, [r3, r2]
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d101      	bne.n	8012a78 <HAL_ADC_AnalogWDGConfig+0x24>
 8012a74:	2302      	movs	r3, #2
 8012a76:	e195      	b.n	8012da4 <HAL_ADC_AnalogWDGConfig+0x350>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2254      	movs	r2, #84	@ 0x54
 8012a7c:	2101      	movs	r1, #1
 8012a7e:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	0018      	movs	r0, r3
 8012a86:	f7ff fba5 	bl	80121d4 <LL_ADC_REG_IsConversionOngoing>
 8012a8a:	1e03      	subs	r3, r0, #0
 8012a8c:	d000      	beq.n	8012a90 <HAL_ADC_AnalogWDGConfig+0x3c>
 8012a8e:	e156      	b.n	8012d3e <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4ac5      	ldr	r2, [pc, #788]	@ (8012dac <HAL_ADC_AnalogWDGConfig+0x358>)
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d162      	bne.n	8012b60 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	0018      	movs	r0, r3
 8012aa0:	f7ff fb64 	bl	801216c <LL_ADC_IsEnabled>
 8012aa4:	1e03      	subs	r3, r0, #0
 8012aa6:	d009      	beq.n	8012abc <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 8012aac:	2337      	movs	r3, #55	@ 0x37
 8012aae:	18fc      	adds	r4, r7, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	0018      	movs	r0, r3
 8012ab4:	f000 fa50 	bl	8012f58 <ADC_Disable>
 8012ab8:	0003      	movs	r3, r0
 8012aba:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	2280      	movs	r2, #128	@ 0x80
 8012ac2:	0412      	lsls	r2, r2, #16
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d011      	beq.n	8012aec <HAL_ADC_AnalogWDGConfig+0x98>
 8012ac8:	22c0      	movs	r2, #192	@ 0xc0
 8012aca:	0412      	lsls	r2, r2, #16
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d115      	bne.n	8012afc <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	4ab5      	ldr	r2, [pc, #724]	@ (8012db0 <HAL_ADC_AnalogWDGConfig+0x35c>)
 8012ada:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8012adc:	22c0      	movs	r2, #192	@ 0xc0
 8012ade:	0412      	lsls	r2, r2, #16
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	49b2      	ldr	r1, [pc, #712]	@ (8012dac <HAL_ADC_AnalogWDGConfig+0x358>)
 8012ae4:	001a      	movs	r2, r3
 8012ae6:	f7ff fa8f 	bl	8012008 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8012aea:	e00f      	b.n	8012b0c <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4ab0      	ldr	r2, [pc, #704]	@ (8012db4 <HAL_ADC_AnalogWDGConfig+0x360>)
 8012af2:	49ae      	ldr	r1, [pc, #696]	@ (8012dac <HAL_ADC_AnalogWDGConfig+0x358>)
 8012af4:	0018      	movs	r0, r3
 8012af6:	f7ff fa87 	bl	8012008 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012afa:	e007      	b.n	8012b0c <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	49aa      	ldr	r1, [pc, #680]	@ (8012dac <HAL_ADC_AnalogWDGConfig+0x358>)
 8012b02:	2200      	movs	r2, #0
 8012b04:	0018      	movs	r0, r3
 8012b06:	f7ff fa7f 	bl	8012008 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012b0a:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 8012b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d10b      	bne.n	8012b2a <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 8012b12:	2237      	movs	r2, #55	@ 0x37
 8012b14:	18bb      	adds	r3, r7, r2
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d106      	bne.n	8012b2a <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 8012b1c:	18bc      	adds	r4, r7, r2
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	0018      	movs	r0, r3
 8012b22:	f000 f993 	bl	8012e4c <ADC_Enable>
 8012b26:	0003      	movs	r3, r0
 8012b28:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b2e:	4aa2      	ldr	r2, [pc, #648]	@ (8012db8 <HAL_ADC_AnalogWDGConfig+0x364>)
 8012b30:	401a      	ands	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	f7ff fb5b 	bl	80121f6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	7b1b      	ldrb	r3, [r3, #12]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d105      	bne.n	8012b54 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	0018      	movs	r0, r3
 8012b4e:	f7ff fb75 	bl	801223c <LL_ADC_EnableIT_AWD1>
 8012b52:	e0f4      	b.n	8012d3e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	0018      	movs	r0, r3
 8012b5a:	f7ff fb9b 	bl	8012294 <LL_ADC_DisableIT_AWD1>
 8012b5e:	e0ee      	b.n	8012d3e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	2280      	movs	r2, #128	@ 0x80
 8012b66:	0412      	lsls	r2, r2, #16
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d100      	bne.n	8012b6e <HAL_ADC_AnalogWDGConfig+0x11a>
 8012b6c:	e09b      	b.n	8012ca6 <HAL_ADC_AnalogWDGConfig+0x252>
 8012b6e:	22c0      	movs	r2, #192	@ 0xc0
 8012b70:	0412      	lsls	r2, r2, #16
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d000      	beq.n	8012b78 <HAL_ADC_AnalogWDGConfig+0x124>
 8012b76:	e09f      	b.n	8012cb8 <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4a8f      	ldr	r2, [pc, #572]	@ (8012dbc <HAL_ADC_AnalogWDGConfig+0x368>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d148      	bne.n	8012c14 <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	025b      	lsls	r3, r3, #9
 8012b88:	0a5b      	lsrs	r3, r3, #9
 8012b8a:	d108      	bne.n	8012b9e <HAL_ADC_AnalogWDGConfig+0x14a>
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	689b      	ldr	r3, [r3, #8]
 8012b90:	0e9b      	lsrs	r3, r3, #26
 8012b92:	221f      	movs	r2, #31
 8012b94:	4013      	ands	r3, r2
 8012b96:	2201      	movs	r2, #1
 8012b98:	409a      	lsls	r2, r3
 8012b9a:	0013      	movs	r3, r2
 8012b9c:	e030      	b.n	8012c00 <HAL_ADC_AnalogWDGConfig+0x1ac>
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	689b      	ldr	r3, [r3, #8]
 8012ba2:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012ba4:	231f      	movs	r3, #31
 8012ba6:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012ba8:	6a3b      	ldr	r3, [r7, #32]
 8012baa:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012bac:	6a3b      	ldr	r3, [r7, #32]
 8012bae:	085b      	lsrs	r3, r3, #1
 8012bb0:	623b      	str	r3, [r7, #32]
 8012bb2:	e00e      	b.n	8012bd2 <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8012bba:	6a3b      	ldr	r3, [r7, #32]
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	69ba      	ldr	r2, [r7, #24]
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	61bb      	str	r3, [r7, #24]
    s--;
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	3b01      	subs	r3, #1
 8012bca:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012bcc:	6a3b      	ldr	r3, [r7, #32]
 8012bce:	085b      	lsrs	r3, r3, #1
 8012bd0:	623b      	str	r3, [r7, #32]
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d1ed      	bne.n	8012bb4 <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012bd8:	69ba      	ldr	r2, [r7, #24]
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	409a      	lsls	r2, r3
 8012bde:	0013      	movs	r3, r2
 8012be0:	61bb      	str	r3, [r7, #24]
  return result;
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8012be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d101      	bne.n	8012bf0 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 8012bec:	2320      	movs	r3, #32
 8012bee:	e004      	b.n	8012bfa <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 8012bf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012bf2:	f7ed fc45 	bl	8000480 <__clzsi2>
 8012bf6:	0003      	movs	r3, r0
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	001a      	movs	r2, r3
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	4093      	lsls	r3, r2
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	6812      	ldr	r2, [r2, #0]
 8012c04:	21a0      	movs	r1, #160	@ 0xa0
 8012c06:	5851      	ldr	r1, [r2, r1]
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	6812      	ldr	r2, [r2, #0]
 8012c0c:	430b      	orrs	r3, r1
 8012c0e:	21a0      	movs	r1, #160	@ 0xa0
 8012c10:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 8012c12:	e05a      	b.n	8012cca <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	025b      	lsls	r3, r3, #9
 8012c1a:	0a5b      	lsrs	r3, r3, #9
 8012c1c:	d108      	bne.n	8012c30 <HAL_ADC_AnalogWDGConfig+0x1dc>
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	0e9b      	lsrs	r3, r3, #26
 8012c24:	221f      	movs	r2, #31
 8012c26:	4013      	ands	r3, r2
 8012c28:	2201      	movs	r2, #1
 8012c2a:	409a      	lsls	r2, r3
 8012c2c:	0013      	movs	r3, r2
 8012c2e:	e030      	b.n	8012c92 <HAL_ADC_AnalogWDGConfig+0x23e>
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012c36:	231f      	movs	r3, #31
 8012c38:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	085b      	lsrs	r3, r3, #1
 8012c42:	613b      	str	r3, [r7, #16]
 8012c44:	e00e      	b.n	8012c64 <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	4013      	ands	r3, r2
 8012c52:	68ba      	ldr	r2, [r7, #8]
 8012c54:	4313      	orrs	r3, r2
 8012c56:	60bb      	str	r3, [r7, #8]
    s--;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	085b      	lsrs	r3, r3, #1
 8012c62:	613b      	str	r3, [r7, #16]
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1ed      	bne.n	8012c46 <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	409a      	lsls	r2, r3
 8012c70:	0013      	movs	r3, r2
 8012c72:	60bb      	str	r3, [r7, #8]
  return result;
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d101      	bne.n	8012c82 <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 8012c7e:	2320      	movs	r3, #32
 8012c80:	e004      	b.n	8012c8c <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 8012c82:	6978      	ldr	r0, [r7, #20]
 8012c84:	f7ed fbfc 	bl	8000480 <__clzsi2>
 8012c88:	0003      	movs	r3, r0
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	001a      	movs	r2, r3
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4093      	lsls	r3, r2
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	6812      	ldr	r2, [r2, #0]
 8012c96:	21a4      	movs	r1, #164	@ 0xa4
 8012c98:	5851      	ldr	r1, [r2, r1]
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	6812      	ldr	r2, [r2, #0]
 8012c9e:	430b      	orrs	r3, r1
 8012ca0:	21a4      	movs	r1, #164	@ 0xa4
 8012ca2:	5053      	str	r3, [r2, r1]
          break;
 8012ca4:	e011      	b.n	8012cca <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012cae:	4a41      	ldr	r2, [pc, #260]	@ (8012db4 <HAL_ADC_AnalogWDGConfig+0x360>)
 8012cb0:	0019      	movs	r1, r3
 8012cb2:	f7ff f9a9 	bl	8012008 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 8012cb6:	e008      	b.n	8012cca <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6818      	ldr	r0, [r3, #0]
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	0019      	movs	r1, r3
 8012cc4:	f7ff f9a0 	bl	8012008 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012cc8:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4a3b      	ldr	r2, [pc, #236]	@ (8012dbc <HAL_ADC_AnalogWDGConfig+0x368>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d11a      	bne.n	8012d0a <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012cd8:	4a39      	ldr	r2, [pc, #228]	@ (8012dc0 <HAL_ADC_AnalogWDGConfig+0x36c>)
 8012cda:	401a      	ands	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	0018      	movs	r0, r3
 8012ce6:	f7ff fa91 	bl	801220c <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	7b1b      	ldrb	r3, [r3, #12]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d105      	bne.n	8012cfe <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	0018      	movs	r0, r3
 8012cf8:	f7ff faae 	bl	8012258 <LL_ADC_EnableIT_AWD2>
 8012cfc:	e01f      	b.n	8012d3e <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	0018      	movs	r0, r3
 8012d04:	f7ff fad6 	bl	80122b4 <LL_ADC_DisableIT_AWD2>
 8012d08:	e019      	b.n	8012d3e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8012dc4 <HAL_ADC_AnalogWDGConfig+0x370>)
 8012d10:	401a      	ands	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	0018      	movs	r0, r3
 8012d1c:	f7ff fa82 	bl	8012224 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	7b1b      	ldrb	r3, [r3, #12]
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d105      	bne.n	8012d34 <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	0018      	movs	r0, r3
 8012d2e:	f7ff faa2 	bl	8012276 <LL_ADC_EnableIT_AWD3>
 8012d32:	e004      	b.n	8012d3e <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	0018      	movs	r0, r3
 8012d3a:	f7ff facb 	bl	80122d4 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	4a1a      	ldr	r2, [pc, #104]	@ (8012dac <HAL_ADC_AnalogWDGConfig+0x358>)
 8012d44:	4293      	cmp	r3, r2
 8012d46:	d118      	bne.n	8012d7a <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	691a      	ldr	r2, [r3, #16]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	08db      	lsrs	r3, r3, #3
 8012d54:	2103      	movs	r1, #3
 8012d56:	400b      	ands	r3, r1
 8012d58:	005b      	lsls	r3, r3, #1
 8012d5a:	409a      	lsls	r2, r3
 8012d5c:	0013      	movs	r3, r2
 8012d5e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	695a      	ldr	r2, [r3, #20]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	08db      	lsrs	r3, r3, #3
 8012d6c:	2103      	movs	r1, #3
 8012d6e:	400b      	ands	r3, r1
 8012d70:	005b      	lsls	r3, r3, #1
 8012d72:	409a      	lsls	r2, r3
 8012d74:	0013      	movs	r3, r2
 8012d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d78:	e005      	b.n	8012d86 <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	691b      	ldr	r3, [r3, #16]
 8012d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	695b      	ldr	r3, [r3, #20]
 8012d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6818      	ldr	r0, [r3, #0]
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	6819      	ldr	r1, [r3, #0]
 8012d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d92:	f7ff f967 	bl	8012064 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2254      	movs	r2, #84	@ 0x54
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012d9e:	2337      	movs	r3, #55	@ 0x37
 8012da0:	18fb      	adds	r3, r7, r3
 8012da2:	781b      	ldrb	r3, [r3, #0]
}
 8012da4:	0018      	movs	r0, r3
 8012da6:	46bd      	mov	sp, r7
 8012da8:	b00f      	add	sp, #60	@ 0x3c
 8012daa:	bd90      	pop	{r4, r7, pc}
 8012dac:	7cc00000 	.word	0x7cc00000
 8012db0:	fc3fffff 	.word	0xfc3fffff
 8012db4:	0087ffff 	.word	0x0087ffff
 8012db8:	fffeffff 	.word	0xfffeffff
 8012dbc:	0017ffff 	.word	0x0017ffff
 8012dc0:	fffdffff 	.word	0xfffdffff
 8012dc4:	fffbffff 	.word	0xfffbffff

08012dc8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	0018      	movs	r0, r3
 8012dd6:	f7ff f9fd 	bl	80121d4 <LL_ADC_REG_IsConversionOngoing>
 8012dda:	1e03      	subs	r3, r0, #0
 8012ddc:	d031      	beq.n	8012e42 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	0018      	movs	r0, r3
 8012de4:	f7ff f9d3 	bl	801218e <LL_ADC_IsDisableOngoing>
 8012de8:	1e03      	subs	r3, r0, #0
 8012dea:	d104      	bne.n	8012df6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	0018      	movs	r0, r3
 8012df2:	f7ff f9dd 	bl	80121b0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012df6:	f7ff f80b 	bl	8011e10 <HAL_GetTick>
 8012dfa:	0003      	movs	r3, r0
 8012dfc:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012dfe:	e01a      	b.n	8012e36 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8012e00:	f7ff f806 	bl	8011e10 <HAL_GetTick>
 8012e04:	0002      	movs	r2, r0
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	d913      	bls.n	8012e36 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	689b      	ldr	r3, [r3, #8]
 8012e14:	2204      	movs	r2, #4
 8012e16:	4013      	ands	r3, r2
 8012e18:	d00d      	beq.n	8012e36 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e1e:	2210      	movs	r2, #16
 8012e20:	431a      	orrs	r2, r3
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	431a      	orrs	r2, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8012e32:	2301      	movs	r3, #1
 8012e34:	e006      	b.n	8012e44 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	689b      	ldr	r3, [r3, #8]
 8012e3c:	2204      	movs	r2, #4
 8012e3e:	4013      	ands	r3, r2
 8012e40:	d1de      	bne.n	8012e00 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	0018      	movs	r0, r3
 8012e46:	46bd      	mov	sp, r7
 8012e48:	b004      	add	sp, #16
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8012e54:	2300      	movs	r3, #0
 8012e56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	0018      	movs	r0, r3
 8012e5e:	f7ff f985 	bl	801216c <LL_ADC_IsEnabled>
 8012e62:	1e03      	subs	r3, r0, #0
 8012e64:	d000      	beq.n	8012e68 <ADC_Enable+0x1c>
 8012e66:	e069      	b.n	8012f3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	689b      	ldr	r3, [r3, #8]
 8012e6e:	4a36      	ldr	r2, [pc, #216]	@ (8012f48 <ADC_Enable+0xfc>)
 8012e70:	4013      	ands	r3, r2
 8012e72:	d00d      	beq.n	8012e90 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e78:	2210      	movs	r2, #16
 8012e7a:	431a      	orrs	r2, r3
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e84:	2201      	movs	r2, #1
 8012e86:	431a      	orrs	r2, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	e056      	b.n	8012f3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	0018      	movs	r0, r3
 8012e96:	f7ff f945 	bl	8012124 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8012e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8012f4c <ADC_Enable+0x100>)
 8012e9c:	0018      	movs	r0, r3
 8012e9e:	f7ff f813 	bl	8011ec8 <LL_ADC_GetCommonPathInternalCh>
 8012ea2:	0002      	movs	r2, r0
 8012ea4:	2380      	movs	r3, #128	@ 0x80
 8012ea6:	041b      	lsls	r3, r3, #16
 8012ea8:	4013      	ands	r3, r2
 8012eaa:	d00f      	beq.n	8012ecc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012eac:	4b28      	ldr	r3, [pc, #160]	@ (8012f50 <ADC_Enable+0x104>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4928      	ldr	r1, [pc, #160]	@ (8012f54 <ADC_Enable+0x108>)
 8012eb2:	0018      	movs	r0, r3
 8012eb4:	f7ed f930 	bl	8000118 <__udivsi3>
 8012eb8:	0003      	movs	r3, r0
 8012eba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8012ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8012ebe:	e002      	b.n	8012ec6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	3b01      	subs	r3, #1
 8012ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1f9      	bne.n	8012ec0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	7e5b      	ldrb	r3, [r3, #25]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d033      	beq.n	8012f3c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8012ed4:	f7fe ff9c 	bl	8011e10 <HAL_GetTick>
 8012ed8:	0003      	movs	r3, r0
 8012eda:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012edc:	e027      	b.n	8012f2e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	0018      	movs	r0, r3
 8012ee4:	f7ff f942 	bl	801216c <LL_ADC_IsEnabled>
 8012ee8:	1e03      	subs	r3, r0, #0
 8012eea:	d104      	bne.n	8012ef6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	0018      	movs	r0, r3
 8012ef2:	f7ff f917 	bl	8012124 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8012ef6:	f7fe ff8b 	bl	8011e10 <HAL_GetTick>
 8012efa:	0002      	movs	r2, r0
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	2b02      	cmp	r3, #2
 8012f02:	d914      	bls.n	8012f2e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d00d      	beq.n	8012f2e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f16:	2210      	movs	r2, #16
 8012f18:	431a      	orrs	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f22:	2201      	movs	r2, #1
 8012f24:	431a      	orrs	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	e007      	b.n	8012f3e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2201      	movs	r2, #1
 8012f36:	4013      	ands	r3, r2
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d1d0      	bne.n	8012ede <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012f3c:	2300      	movs	r3, #0
}
 8012f3e:	0018      	movs	r0, r3
 8012f40:	46bd      	mov	sp, r7
 8012f42:	b004      	add	sp, #16
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	46c0      	nop			@ (mov r8, r8)
 8012f48:	80000017 	.word	0x80000017
 8012f4c:	40012708 	.word	0x40012708
 8012f50:	2000025c 	.word	0x2000025c
 8012f54:	00030d40 	.word	0x00030d40

08012f58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	0018      	movs	r0, r3
 8012f66:	f7ff f912 	bl	801218e <LL_ADC_IsDisableOngoing>
 8012f6a:	0003      	movs	r3, r0
 8012f6c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	0018      	movs	r0, r3
 8012f74:	f7ff f8fa 	bl	801216c <LL_ADC_IsEnabled>
 8012f78:	1e03      	subs	r3, r0, #0
 8012f7a:	d046      	beq.n	801300a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d143      	bne.n	801300a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	2205      	movs	r2, #5
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d10d      	bne.n	8012fac <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	0018      	movs	r0, r3
 8012f96:	f7ff f8d7 	bl	8012148 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2203      	movs	r2, #3
 8012fa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012fa2:	f7fe ff35 	bl	8011e10 <HAL_GetTick>
 8012fa6:	0003      	movs	r3, r0
 8012fa8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012faa:	e028      	b.n	8012ffe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fb0:	2210      	movs	r2, #16
 8012fb2:	431a      	orrs	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012fbc:	2201      	movs	r2, #1
 8012fbe:	431a      	orrs	r2, r3
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e021      	b.n	801300c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8012fc8:	f7fe ff22 	bl	8011e10 <HAL_GetTick>
 8012fcc:	0002      	movs	r2, r0
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	2b02      	cmp	r3, #2
 8012fd4:	d913      	bls.n	8012ffe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	4013      	ands	r3, r2
 8012fe0:	d00d      	beq.n	8012ffe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fe6:	2210      	movs	r2, #16
 8012fe8:	431a      	orrs	r2, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	431a      	orrs	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e006      	b.n	801300c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	689b      	ldr	r3, [r3, #8]
 8013004:	2201      	movs	r2, #1
 8013006:	4013      	ands	r3, r2
 8013008:	d1de      	bne.n	8012fc8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	0018      	movs	r0, r3
 801300e:	46bd      	mov	sp, r7
 8013010:	b004      	add	sp, #16
 8013012:	bd80      	pop	{r7, pc}

08013014 <LL_ADC_GetCommonClock>:
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	23f0      	movs	r3, #240	@ 0xf0
 8013022:	039b      	lsls	r3, r3, #14
 8013024:	4013      	ands	r3, r2
}
 8013026:	0018      	movs	r0, r3
 8013028:	46bd      	mov	sp, r7
 801302a:	b002      	add	sp, #8
 801302c:	bd80      	pop	{r7, pc}

0801302e <LL_ADC_GetClock>:
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b082      	sub	sp, #8
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	0f9b      	lsrs	r3, r3, #30
 801303c:	079b      	lsls	r3, r3, #30
}
 801303e:	0018      	movs	r0, r3
 8013040:	46bd      	mov	sp, r7
 8013042:	b002      	add	sp, #8
 8013044:	bd80      	pop	{r7, pc}

08013046 <LL_ADC_SetCalibrationFactor>:
{
 8013046:	b580      	push	{r7, lr}
 8013048:	b082      	sub	sp, #8
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]
 801304e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	22b4      	movs	r2, #180	@ 0xb4
 8013054:	589b      	ldr	r3, [r3, r2]
 8013056:	227f      	movs	r2, #127	@ 0x7f
 8013058:	4393      	bics	r3, r2
 801305a:	001a      	movs	r2, r3
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	431a      	orrs	r2, r3
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	21b4      	movs	r1, #180	@ 0xb4
 8013064:	505a      	str	r2, [r3, r1]
}
 8013066:	46c0      	nop			@ (mov r8, r8)
 8013068:	46bd      	mov	sp, r7
 801306a:	b002      	add	sp, #8
 801306c:	bd80      	pop	{r7, pc}

0801306e <LL_ADC_GetCalibrationFactor>:
{
 801306e:	b580      	push	{r7, lr}
 8013070:	b082      	sub	sp, #8
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	22b4      	movs	r2, #180	@ 0xb4
 801307a:	589b      	ldr	r3, [r3, r2]
 801307c:	227f      	movs	r2, #127	@ 0x7f
 801307e:	4013      	ands	r3, r2
}
 8013080:	0018      	movs	r0, r3
 8013082:	46bd      	mov	sp, r7
 8013084:	b002      	add	sp, #8
 8013086:	bd80      	pop	{r7, pc}

08013088 <LL_ADC_Enable>:
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	689b      	ldr	r3, [r3, #8]
 8013094:	4a04      	ldr	r2, [pc, #16]	@ (80130a8 <LL_ADC_Enable+0x20>)
 8013096:	4013      	ands	r3, r2
 8013098:	2201      	movs	r2, #1
 801309a:	431a      	orrs	r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	609a      	str	r2, [r3, #8]
}
 80130a0:	46c0      	nop			@ (mov r8, r8)
 80130a2:	46bd      	mov	sp, r7
 80130a4:	b002      	add	sp, #8
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	7fffffe8 	.word	0x7fffffe8

080130ac <LL_ADC_Disable>:
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	689b      	ldr	r3, [r3, #8]
 80130b8:	4a04      	ldr	r2, [pc, #16]	@ (80130cc <LL_ADC_Disable+0x20>)
 80130ba:	4013      	ands	r3, r2
 80130bc:	2202      	movs	r2, #2
 80130be:	431a      	orrs	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	609a      	str	r2, [r3, #8]
}
 80130c4:	46c0      	nop			@ (mov r8, r8)
 80130c6:	46bd      	mov	sp, r7
 80130c8:	b002      	add	sp, #8
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	7fffffe8 	.word	0x7fffffe8

080130d0 <LL_ADC_IsEnabled>:
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	689b      	ldr	r3, [r3, #8]
 80130dc:	2201      	movs	r2, #1
 80130de:	4013      	ands	r3, r2
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d101      	bne.n	80130e8 <LL_ADC_IsEnabled+0x18>
 80130e4:	2301      	movs	r3, #1
 80130e6:	e000      	b.n	80130ea <LL_ADC_IsEnabled+0x1a>
 80130e8:	2300      	movs	r3, #0
}
 80130ea:	0018      	movs	r0, r3
 80130ec:	46bd      	mov	sp, r7
 80130ee:	b002      	add	sp, #8
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <LL_ADC_StartCalibration>:
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	689b      	ldr	r3, [r3, #8]
 8013100:	4a05      	ldr	r2, [pc, #20]	@ (8013118 <LL_ADC_StartCalibration+0x24>)
 8013102:	4013      	ands	r3, r2
 8013104:	2280      	movs	r2, #128	@ 0x80
 8013106:	0612      	lsls	r2, r2, #24
 8013108:	431a      	orrs	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	609a      	str	r2, [r3, #8]
}
 801310e:	46c0      	nop			@ (mov r8, r8)
 8013110:	46bd      	mov	sp, r7
 8013112:	b002      	add	sp, #8
 8013114:	bd80      	pop	{r7, pc}
 8013116:	46c0      	nop			@ (mov r8, r8)
 8013118:	7fffffe8 	.word	0x7fffffe8

0801311c <LL_ADC_IsCalibrationOnGoing>:
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	689b      	ldr	r3, [r3, #8]
 8013128:	0fdb      	lsrs	r3, r3, #31
 801312a:	07da      	lsls	r2, r3, #31
 801312c:	2380      	movs	r3, #128	@ 0x80
 801312e:	061b      	lsls	r3, r3, #24
 8013130:	429a      	cmp	r2, r3
 8013132:	d101      	bne.n	8013138 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8013134:	2301      	movs	r3, #1
 8013136:	e000      	b.n	801313a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8013138:	2300      	movs	r3, #0
}
 801313a:	0018      	movs	r0, r3
 801313c:	46bd      	mov	sp, r7
 801313e:	b002      	add	sp, #8
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8013144:	b590      	push	{r4, r7, lr}
 8013146:	b08b      	sub	sp, #44	@ 0x2c
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801314c:	2300      	movs	r3, #0
 801314e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8013150:	2300      	movs	r3, #0
 8013152:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2254      	movs	r2, #84	@ 0x54
 8013158:	5c9b      	ldrb	r3, [r3, r2]
 801315a:	2b01      	cmp	r3, #1
 801315c:	d101      	bne.n	8013162 <HAL_ADCEx_Calibration_Start+0x1e>
 801315e:	2302      	movs	r3, #2
 8013160:	e0de      	b.n	8013320 <HAL_ADCEx_Calibration_Start+0x1dc>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2254      	movs	r2, #84	@ 0x54
 8013166:	2101      	movs	r1, #1
 8013168:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801316a:	231f      	movs	r3, #31
 801316c:	18fc      	adds	r4, r7, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	0018      	movs	r0, r3
 8013172:	f7ff fef1 	bl	8012f58 <ADC_Disable>
 8013176:	0003      	movs	r3, r0
 8013178:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	0018      	movs	r0, r3
 8013180:	f7ff ffa6 	bl	80130d0 <LL_ADC_IsEnabled>
 8013184:	1e03      	subs	r3, r0, #0
 8013186:	d000      	beq.n	801318a <HAL_ADCEx_Calibration_Start+0x46>
 8013188:	e0bd      	b.n	8013306 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801318e:	4a66      	ldr	r2, [pc, #408]	@ (8013328 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8013190:	4013      	ands	r3, r2
 8013192:	2202      	movs	r2, #2
 8013194:	431a      	orrs	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68db      	ldr	r3, [r3, #12]
 80131a0:	4a62      	ldr	r2, [pc, #392]	@ (801332c <HAL_ADCEx_Calibration_Start+0x1e8>)
 80131a2:	4013      	ands	r3, r2
 80131a4:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	68da      	ldr	r2, [r3, #12]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	495f      	ldr	r1, [pc, #380]	@ (8013330 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80131b2:	400a      	ands	r2, r1
 80131b4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80131b6:	2300      	movs	r3, #0
 80131b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80131ba:	e02e      	b.n	801321a <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	0018      	movs	r0, r3
 80131c2:	f7ff ff97 	bl	80130f4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80131c6:	e015      	b.n	80131f4 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	3301      	adds	r3, #1
 80131cc:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	23ae      	movs	r3, #174	@ 0xae
 80131d2:	029b      	lsls	r3, r3, #10
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d30d      	bcc.n	80131f4 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131dc:	2212      	movs	r2, #18
 80131de:	4393      	bics	r3, r2
 80131e0:	2210      	movs	r2, #16
 80131e2:	431a      	orrs	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2254      	movs	r2, #84	@ 0x54
 80131ec:	2100      	movs	r1, #0
 80131ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80131f0:	2301      	movs	r3, #1
 80131f2:	e095      	b.n	8013320 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	0018      	movs	r0, r3
 80131fa:	f7ff ff8f 	bl	801311c <LL_ADC_IsCalibrationOnGoing>
 80131fe:	1e03      	subs	r3, r0, #0
 8013200:	d1e2      	bne.n	80131c8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	0018      	movs	r0, r3
 8013208:	f7ff ff31 	bl	801306e <LL_ADC_GetCalibrationFactor>
 801320c:	0002      	movs	r2, r0
 801320e:	6a3b      	ldr	r3, [r7, #32]
 8013210:	189b      	adds	r3, r3, r2
 8013212:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8013214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013216:	3301      	adds	r3, #1
 8013218:	627b      	str	r3, [r7, #36]	@ 0x24
 801321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801321c:	2b07      	cmp	r3, #7
 801321e:	d9cd      	bls.n	80131bc <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8013220:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013222:	6a38      	ldr	r0, [r7, #32]
 8013224:	f7ec ff78 	bl	8000118 <__udivsi3>
 8013228:	0003      	movs	r3, r0
 801322a:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	0018      	movs	r0, r3
 8013232:	f7ff ff29 	bl	8013088 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	0018      	movs	r0, r3
 801323c:	f7ff fef7 	bl	801302e <LL_ADC_GetClock>
 8013240:	1e03      	subs	r3, r0, #0
 8013242:	d11b      	bne.n	801327c <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013244:	4b3b      	ldr	r3, [pc, #236]	@ (8013334 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8013246:	0018      	movs	r0, r3
 8013248:	f7ff fee4 	bl	8013014 <LL_ADC_GetCommonClock>
 801324c:	0003      	movs	r3, r0
 801324e:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8013250:	697a      	ldr	r2, [r7, #20]
 8013252:	23e0      	movs	r3, #224	@ 0xe0
 8013254:	035b      	lsls	r3, r3, #13
 8013256:	429a      	cmp	r2, r3
 8013258:	d310      	bcc.n	801327c <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	0c9b      	lsrs	r3, r3, #18
 801325e:	3b03      	subs	r3, #3
 8013260:	2201      	movs	r2, #1
 8013262:	409a      	lsls	r2, r3
 8013264:	0013      	movs	r3, r2
 8013266:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	085b      	lsrs	r3, r3, #1
 801326c:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 801326e:	e002      	b.n	8013276 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	3b01      	subs	r3, #1
 8013274:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d1f9      	bne.n	8013270 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	6a3a      	ldr	r2, [r7, #32]
 8013282:	0011      	movs	r1, r2
 8013284:	0018      	movs	r0, r3
 8013286:	f7ff fede 	bl	8013046 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	0018      	movs	r0, r3
 8013290:	f7ff ff0c 	bl	80130ac <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8013294:	f7fe fdbc 	bl	8011e10 <HAL_GetTick>
 8013298:	0003      	movs	r3, r0
 801329a:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801329c:	e01b      	b.n	80132d6 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801329e:	f7fe fdb7 	bl	8011e10 <HAL_GetTick>
 80132a2:	0002      	movs	r2, r0
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	1ad3      	subs	r3, r2, r3
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d914      	bls.n	80132d6 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	0018      	movs	r0, r3
 80132b2:	f7ff ff0d 	bl	80130d0 <LL_ADC_IsEnabled>
 80132b6:	1e03      	subs	r3, r0, #0
 80132b8:	d00d      	beq.n	80132d6 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132be:	2210      	movs	r2, #16
 80132c0:	431a      	orrs	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80132ca:	2201      	movs	r2, #1
 80132cc:	431a      	orrs	r2, r3
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80132d2:	2301      	movs	r3, #1
 80132d4:	e024      	b.n	8013320 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	0018      	movs	r0, r3
 80132dc:	f7ff fef8 	bl	80130d0 <LL_ADC_IsEnabled>
 80132e0:	1e03      	subs	r3, r0, #0
 80132e2:	d1dc      	bne.n	801329e <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	68d9      	ldr	r1, [r3, #12]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	69ba      	ldr	r2, [r7, #24]
 80132f0:	430a      	orrs	r2, r1
 80132f2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132f8:	2203      	movs	r2, #3
 80132fa:	4393      	bics	r3, r2
 80132fc:	2201      	movs	r2, #1
 80132fe:	431a      	orrs	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	659a      	str	r2, [r3, #88]	@ 0x58
 8013304:	e005      	b.n	8013312 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801330a:	2210      	movs	r2, #16
 801330c:	431a      	orrs	r2, r3
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2254      	movs	r2, #84	@ 0x54
 8013316:	2100      	movs	r1, #0
 8013318:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 801331a:	231f      	movs	r3, #31
 801331c:	18fb      	adds	r3, r7, r3
 801331e:	781b      	ldrb	r3, [r3, #0]
}
 8013320:	0018      	movs	r0, r3
 8013322:	46bd      	mov	sp, r7
 8013324:	b00b      	add	sp, #44	@ 0x2c
 8013326:	bd90      	pop	{r4, r7, pc}
 8013328:	fffffefd 	.word	0xfffffefd
 801332c:	00008003 	.word	0x00008003
 8013330:	ffff7ffc 	.word	0xffff7ffc
 8013334:	40012708 	.word	0x40012708

08013338 <__NVIC_EnableIRQ>:
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	0002      	movs	r2, r0
 8013340:	1dfb      	adds	r3, r7, #7
 8013342:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013344:	1dfb      	adds	r3, r7, #7
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	2b7f      	cmp	r3, #127	@ 0x7f
 801334a:	d809      	bhi.n	8013360 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801334c:	1dfb      	adds	r3, r7, #7
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	001a      	movs	r2, r3
 8013352:	231f      	movs	r3, #31
 8013354:	401a      	ands	r2, r3
 8013356:	4b04      	ldr	r3, [pc, #16]	@ (8013368 <__NVIC_EnableIRQ+0x30>)
 8013358:	2101      	movs	r1, #1
 801335a:	4091      	lsls	r1, r2
 801335c:	000a      	movs	r2, r1
 801335e:	601a      	str	r2, [r3, #0]
}
 8013360:	46c0      	nop			@ (mov r8, r8)
 8013362:	46bd      	mov	sp, r7
 8013364:	b002      	add	sp, #8
 8013366:	bd80      	pop	{r7, pc}
 8013368:	e000e100 	.word	0xe000e100

0801336c <__NVIC_DisableIRQ>:
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	0002      	movs	r2, r0
 8013374:	1dfb      	adds	r3, r7, #7
 8013376:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013378:	1dfb      	adds	r3, r7, #7
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	2b7f      	cmp	r3, #127	@ 0x7f
 801337e:	d810      	bhi.n	80133a2 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013380:	1dfb      	adds	r3, r7, #7
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	001a      	movs	r2, r3
 8013386:	231f      	movs	r3, #31
 8013388:	4013      	ands	r3, r2
 801338a:	4908      	ldr	r1, [pc, #32]	@ (80133ac <__NVIC_DisableIRQ+0x40>)
 801338c:	2201      	movs	r2, #1
 801338e:	409a      	lsls	r2, r3
 8013390:	0013      	movs	r3, r2
 8013392:	2280      	movs	r2, #128	@ 0x80
 8013394:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013396:	f3bf 8f4f 	dsb	sy
}
 801339a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801339c:	f3bf 8f6f 	isb	sy
}
 80133a0:	46c0      	nop			@ (mov r8, r8)
}
 80133a2:	46c0      	nop			@ (mov r8, r8)
 80133a4:	46bd      	mov	sp, r7
 80133a6:	b002      	add	sp, #8
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	46c0      	nop			@ (mov r8, r8)
 80133ac:	e000e100 	.word	0xe000e100

080133b0 <__NVIC_SetPriority>:
{
 80133b0:	b590      	push	{r4, r7, lr}
 80133b2:	b083      	sub	sp, #12
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	0002      	movs	r2, r0
 80133b8:	6039      	str	r1, [r7, #0]
 80133ba:	1dfb      	adds	r3, r7, #7
 80133bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80133be:	1dfb      	adds	r3, r7, #7
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80133c4:	d828      	bhi.n	8013418 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80133c6:	4a2f      	ldr	r2, [pc, #188]	@ (8013484 <__NVIC_SetPriority+0xd4>)
 80133c8:	1dfb      	adds	r3, r7, #7
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	b25b      	sxtb	r3, r3
 80133ce:	089b      	lsrs	r3, r3, #2
 80133d0:	33c0      	adds	r3, #192	@ 0xc0
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	589b      	ldr	r3, [r3, r2]
 80133d6:	1dfa      	adds	r2, r7, #7
 80133d8:	7812      	ldrb	r2, [r2, #0]
 80133da:	0011      	movs	r1, r2
 80133dc:	2203      	movs	r2, #3
 80133de:	400a      	ands	r2, r1
 80133e0:	00d2      	lsls	r2, r2, #3
 80133e2:	21ff      	movs	r1, #255	@ 0xff
 80133e4:	4091      	lsls	r1, r2
 80133e6:	000a      	movs	r2, r1
 80133e8:	43d2      	mvns	r2, r2
 80133ea:	401a      	ands	r2, r3
 80133ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	019b      	lsls	r3, r3, #6
 80133f2:	22ff      	movs	r2, #255	@ 0xff
 80133f4:	401a      	ands	r2, r3
 80133f6:	1dfb      	adds	r3, r7, #7
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	0018      	movs	r0, r3
 80133fc:	2303      	movs	r3, #3
 80133fe:	4003      	ands	r3, r0
 8013400:	00db      	lsls	r3, r3, #3
 8013402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013404:	481f      	ldr	r0, [pc, #124]	@ (8013484 <__NVIC_SetPriority+0xd4>)
 8013406:	1dfb      	adds	r3, r7, #7
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	b25b      	sxtb	r3, r3
 801340c:	089b      	lsrs	r3, r3, #2
 801340e:	430a      	orrs	r2, r1
 8013410:	33c0      	adds	r3, #192	@ 0xc0
 8013412:	009b      	lsls	r3, r3, #2
 8013414:	501a      	str	r2, [r3, r0]
}
 8013416:	e031      	b.n	801347c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013418:	4a1b      	ldr	r2, [pc, #108]	@ (8013488 <__NVIC_SetPriority+0xd8>)
 801341a:	1dfb      	adds	r3, r7, #7
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	0019      	movs	r1, r3
 8013420:	230f      	movs	r3, #15
 8013422:	400b      	ands	r3, r1
 8013424:	3b08      	subs	r3, #8
 8013426:	089b      	lsrs	r3, r3, #2
 8013428:	3306      	adds	r3, #6
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	18d3      	adds	r3, r2, r3
 801342e:	3304      	adds	r3, #4
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	1dfa      	adds	r2, r7, #7
 8013434:	7812      	ldrb	r2, [r2, #0]
 8013436:	0011      	movs	r1, r2
 8013438:	2203      	movs	r2, #3
 801343a:	400a      	ands	r2, r1
 801343c:	00d2      	lsls	r2, r2, #3
 801343e:	21ff      	movs	r1, #255	@ 0xff
 8013440:	4091      	lsls	r1, r2
 8013442:	000a      	movs	r2, r1
 8013444:	43d2      	mvns	r2, r2
 8013446:	401a      	ands	r2, r3
 8013448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	019b      	lsls	r3, r3, #6
 801344e:	22ff      	movs	r2, #255	@ 0xff
 8013450:	401a      	ands	r2, r3
 8013452:	1dfb      	adds	r3, r7, #7
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	0018      	movs	r0, r3
 8013458:	2303      	movs	r3, #3
 801345a:	4003      	ands	r3, r0
 801345c:	00db      	lsls	r3, r3, #3
 801345e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013460:	4809      	ldr	r0, [pc, #36]	@ (8013488 <__NVIC_SetPriority+0xd8>)
 8013462:	1dfb      	adds	r3, r7, #7
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	001c      	movs	r4, r3
 8013468:	230f      	movs	r3, #15
 801346a:	4023      	ands	r3, r4
 801346c:	3b08      	subs	r3, #8
 801346e:	089b      	lsrs	r3, r3, #2
 8013470:	430a      	orrs	r2, r1
 8013472:	3306      	adds	r3, #6
 8013474:	009b      	lsls	r3, r3, #2
 8013476:	18c3      	adds	r3, r0, r3
 8013478:	3304      	adds	r3, #4
 801347a:	601a      	str	r2, [r3, #0]
}
 801347c:	46c0      	nop			@ (mov r8, r8)
 801347e:	46bd      	mov	sp, r7
 8013480:	b003      	add	sp, #12
 8013482:	bd90      	pop	{r4, r7, pc}
 8013484:	e000e100 	.word	0xe000e100
 8013488:	e000ed00 	.word	0xe000ed00

0801348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	1e5a      	subs	r2, r3, #1
 8013498:	2380      	movs	r3, #128	@ 0x80
 801349a:	045b      	lsls	r3, r3, #17
 801349c:	429a      	cmp	r2, r3
 801349e:	d301      	bcc.n	80134a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80134a0:	2301      	movs	r3, #1
 80134a2:	e010      	b.n	80134c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80134a4:	4b0a      	ldr	r3, [pc, #40]	@ (80134d0 <SysTick_Config+0x44>)
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	3a01      	subs	r2, #1
 80134aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80134ac:	2301      	movs	r3, #1
 80134ae:	425b      	negs	r3, r3
 80134b0:	2103      	movs	r1, #3
 80134b2:	0018      	movs	r0, r3
 80134b4:	f7ff ff7c 	bl	80133b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80134b8:	4b05      	ldr	r3, [pc, #20]	@ (80134d0 <SysTick_Config+0x44>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80134be:	4b04      	ldr	r3, [pc, #16]	@ (80134d0 <SysTick_Config+0x44>)
 80134c0:	2207      	movs	r2, #7
 80134c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80134c4:	2300      	movs	r3, #0
}
 80134c6:	0018      	movs	r0, r3
 80134c8:	46bd      	mov	sp, r7
 80134ca:	b002      	add	sp, #8
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	46c0      	nop			@ (mov r8, r8)
 80134d0:	e000e010 	.word	0xe000e010

080134d4 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	af00      	add	r7, sp, #0
 80134da:	60b9      	str	r1, [r7, #8]
 80134dc:	607a      	str	r2, [r7, #4]
 80134de:	210f      	movs	r1, #15
 80134e0:	187b      	adds	r3, r7, r1
 80134e2:	1c02      	adds	r2, r0, #0
 80134e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80134e6:	68ba      	ldr	r2, [r7, #8]
 80134e8:	187b      	adds	r3, r7, r1
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	b25b      	sxtb	r3, r3
 80134ee:	0011      	movs	r1, r2
 80134f0:	0018      	movs	r0, r3
 80134f2:	f7ff ff5d 	bl	80133b0 <__NVIC_SetPriority>
}
 80134f6:	46c0      	nop			@ (mov r8, r8)
 80134f8:	46bd      	mov	sp, r7
 80134fa:	b004      	add	sp, #16
 80134fc:	bd80      	pop	{r7, pc}

080134fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b082      	sub	sp, #8
 8013502:	af00      	add	r7, sp, #0
 8013504:	0002      	movs	r2, r0
 8013506:	1dfb      	adds	r3, r7, #7
 8013508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801350a:	1dfb      	adds	r3, r7, #7
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	b25b      	sxtb	r3, r3
 8013510:	0018      	movs	r0, r3
 8013512:	f7ff ff11 	bl	8013338 <__NVIC_EnableIRQ>
}
 8013516:	46c0      	nop			@ (mov r8, r8)
 8013518:	46bd      	mov	sp, r7
 801351a:	b002      	add	sp, #8
 801351c:	bd80      	pop	{r7, pc}

0801351e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801351e:	b580      	push	{r7, lr}
 8013520:	b082      	sub	sp, #8
 8013522:	af00      	add	r7, sp, #0
 8013524:	0002      	movs	r2, r0
 8013526:	1dfb      	adds	r3, r7, #7
 8013528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801352a:	1dfb      	adds	r3, r7, #7
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	b25b      	sxtb	r3, r3
 8013530:	0018      	movs	r0, r3
 8013532:	f7ff ff1b 	bl	801336c <__NVIC_DisableIRQ>
}
 8013536:	46c0      	nop			@ (mov r8, r8)
 8013538:	46bd      	mov	sp, r7
 801353a:	b002      	add	sp, #8
 801353c:	bd80      	pop	{r7, pc}

0801353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801353e:	b580      	push	{r7, lr}
 8013540:	b082      	sub	sp, #8
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	0018      	movs	r0, r3
 801354a:	f7ff ff9f 	bl	801348c <SysTick_Config>
 801354e:	0003      	movs	r3, r0
}
 8013550:	0018      	movs	r0, r3
 8013552:	46bd      	mov	sp, r7
 8013554:	b002      	add	sp, #8
 8013556:	bd80      	pop	{r7, pc}

08013558 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d101      	bne.n	801356a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8013566:	2301      	movs	r3, #1
 8013568:	e091      	b.n	801368e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	001a      	movs	r2, r3
 8013570:	4b49      	ldr	r3, [pc, #292]	@ (8013698 <HAL_DMA_Init+0x140>)
 8013572:	429a      	cmp	r2, r3
 8013574:	d810      	bhi.n	8013598 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4a48      	ldr	r2, [pc, #288]	@ (801369c <HAL_DMA_Init+0x144>)
 801357c:	4694      	mov	ip, r2
 801357e:	4463      	add	r3, ip
 8013580:	2114      	movs	r1, #20
 8013582:	0018      	movs	r0, r3
 8013584:	f7ec fdc8 	bl	8000118 <__udivsi3>
 8013588:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801358a:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4a43      	ldr	r2, [pc, #268]	@ (80136a0 <HAL_DMA_Init+0x148>)
 8013594:	641a      	str	r2, [r3, #64]	@ 0x40
 8013596:	e00f      	b.n	80135b8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4a41      	ldr	r2, [pc, #260]	@ (80136a4 <HAL_DMA_Init+0x14c>)
 801359e:	4694      	mov	ip, r2
 80135a0:	4463      	add	r3, ip
 80135a2:	2114      	movs	r1, #20
 80135a4:	0018      	movs	r0, r3
 80135a6:	f7ec fdb7 	bl	8000118 <__udivsi3>
 80135aa:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80135ac:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a3c      	ldr	r2, [pc, #240]	@ (80136a8 <HAL_DMA_Init+0x150>)
 80135b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2225      	movs	r2, #37	@ 0x25
 80135bc:	2102      	movs	r1, #2
 80135be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	4938      	ldr	r1, [pc, #224]	@ (80136ac <HAL_DMA_Init+0x154>)
 80135cc:	400a      	ands	r2, r1
 80135ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	6819      	ldr	r1, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	689a      	ldr	r2, [r3, #8]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	431a      	orrs	r2, r3
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	431a      	orrs	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	695b      	ldr	r3, [r3, #20]
 80135ea:	431a      	orrs	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	699b      	ldr	r3, [r3, #24]
 80135f0:	431a      	orrs	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	69db      	ldr	r3, [r3, #28]
 80135f6:	431a      	orrs	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a1b      	ldr	r3, [r3, #32]
 80135fc:	431a      	orrs	r2, r3
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	430a      	orrs	r2, r1
 8013604:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	0018      	movs	r0, r3
 801360a:	f000 fb4d 	bl	8013ca8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	689a      	ldr	r2, [r3, #8]
 8013612:	2380      	movs	r3, #128	@ 0x80
 8013614:	01db      	lsls	r3, r3, #7
 8013616:	429a      	cmp	r2, r3
 8013618:	d102      	bne.n	8013620 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2200      	movs	r2, #0
 801361e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	685a      	ldr	r2, [r3, #4]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013628:	21ff      	movs	r1, #255	@ 0xff
 801362a:	400a      	ands	r2, r1
 801362c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013636:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d011      	beq.n	8013664 <HAL_DMA_Init+0x10c>
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	2b04      	cmp	r3, #4
 8013646:	d80d      	bhi.n	8013664 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	0018      	movs	r0, r3
 801364c:	f000 fb76 	bl	8013d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013654:	2200      	movs	r2, #0
 8013656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013660:	605a      	str	r2, [r3, #4]
 8013662:	e008      	b.n	8013676 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2200      	movs	r2, #0
 801366e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2200      	movs	r2, #0
 801367a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2225      	movs	r2, #37	@ 0x25
 8013680:	2101      	movs	r1, #1
 8013682:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2224      	movs	r2, #36	@ 0x24
 8013688:	2100      	movs	r1, #0
 801368a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801368c:	2300      	movs	r3, #0
}
 801368e:	0018      	movs	r0, r3
 8013690:	46bd      	mov	sp, r7
 8013692:	b002      	add	sp, #8
 8013694:	bd80      	pop	{r7, pc}
 8013696:	46c0      	nop			@ (mov r8, r8)
 8013698:	40020407 	.word	0x40020407
 801369c:	bffdfff8 	.word	0xbffdfff8
 80136a0:	40020000 	.word	0x40020000
 80136a4:	bffdfbf8 	.word	0xbffdfbf8
 80136a8:	40020400 	.word	0x40020400
 80136ac:	ffff800f 	.word	0xffff800f

080136b0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d101      	bne.n	80136c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80136be:	2301      	movs	r3, #1
 80136c0:	e07f      	b.n	80137c2 <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2101      	movs	r1, #1
 80136ce:	438a      	bics	r2, r1
 80136d0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	001a      	movs	r2, r3
 80136d8:	4b3c      	ldr	r3, [pc, #240]	@ (80137cc <HAL_DMA_DeInit+0x11c>)
 80136da:	429a      	cmp	r2, r3
 80136dc:	d810      	bhi.n	8013700 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	4a3b      	ldr	r2, [pc, #236]	@ (80137d0 <HAL_DMA_DeInit+0x120>)
 80136e4:	4694      	mov	ip, r2
 80136e6:	4463      	add	r3, ip
 80136e8:	2114      	movs	r1, #20
 80136ea:	0018      	movs	r0, r3
 80136ec:	f7ec fd14 	bl	8000118 <__udivsi3>
 80136f0:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80136f2:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	4a36      	ldr	r2, [pc, #216]	@ (80137d4 <HAL_DMA_DeInit+0x124>)
 80136fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80136fe:	e00f      	b.n	8013720 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	4a34      	ldr	r2, [pc, #208]	@ (80137d8 <HAL_DMA_DeInit+0x128>)
 8013706:	4694      	mov	ip, r2
 8013708:	4463      	add	r3, ip
 801370a:	2114      	movs	r1, #20
 801370c:	0018      	movs	r0, r3
 801370e:	f7ec fd03 	bl	8000118 <__udivsi3>
 8013712:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8013714:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4a2f      	ldr	r2, [pc, #188]	@ (80137dc <HAL_DMA_DeInit+0x12c>)
 801371e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	2200      	movs	r2, #0
 8013726:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801372c:	221c      	movs	r2, #28
 801372e:	401a      	ands	r2, r3
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013734:	2101      	movs	r1, #1
 8013736:	4091      	lsls	r1, r2
 8013738:	000a      	movs	r2, r1
 801373a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	0018      	movs	r0, r3
 8013740:	f000 fab2 	bl	8013ca8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013754:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d010      	beq.n	8013780 <HAL_DMA_DeInit+0xd0>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	2b04      	cmp	r3, #4
 8013764:	d80c      	bhi.n	8013780 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	0018      	movs	r0, r3
 801376a:	f000 fae7 	bl	8013d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801377e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2200      	movs	r2, #0
 801378a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2200      	movs	r2, #0
 8013796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2200      	movs	r2, #0
 801379c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2200      	movs	r2, #0
 80137a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2200      	movs	r2, #0
 80137a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2200      	movs	r2, #0
 80137ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2225      	movs	r2, #37	@ 0x25
 80137b4:	2100      	movs	r1, #0
 80137b6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2224      	movs	r2, #36	@ 0x24
 80137bc:	2100      	movs	r1, #0
 80137be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80137c0:	2300      	movs	r3, #0
}
 80137c2:	0018      	movs	r0, r3
 80137c4:	46bd      	mov	sp, r7
 80137c6:	b002      	add	sp, #8
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	46c0      	nop			@ (mov r8, r8)
 80137cc:	40020407 	.word	0x40020407
 80137d0:	bffdfff8 	.word	0xbffdfff8
 80137d4:	40020000 	.word	0x40020000
 80137d8:	bffdfbf8 	.word	0xbffdfbf8
 80137dc:	40020400 	.word	0x40020400

080137e0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b086      	sub	sp, #24
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	60b9      	str	r1, [r7, #8]
 80137ea:	607a      	str	r2, [r7, #4]
 80137ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80137ee:	2317      	movs	r3, #23
 80137f0:	18fb      	adds	r3, r7, r3
 80137f2:	2200      	movs	r2, #0
 80137f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2224      	movs	r2, #36	@ 0x24
 80137fa:	5c9b      	ldrb	r3, [r3, r2]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d101      	bne.n	8013804 <HAL_DMA_Start_IT+0x24>
 8013800:	2302      	movs	r3, #2
 8013802:	e06f      	b.n	80138e4 <HAL_DMA_Start_IT+0x104>
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2224      	movs	r2, #36	@ 0x24
 8013808:	2101      	movs	r1, #1
 801380a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2225      	movs	r2, #37	@ 0x25
 8013810:	5c9b      	ldrb	r3, [r3, r2]
 8013812:	b2db      	uxtb	r3, r3
 8013814:	2b01      	cmp	r3, #1
 8013816:	d157      	bne.n	80138c8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2225      	movs	r2, #37	@ 0x25
 801381c:	2102      	movs	r1, #2
 801381e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2200      	movs	r2, #0
 8013824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2101      	movs	r1, #1
 8013832:	438a      	bics	r2, r1
 8013834:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	68b9      	ldr	r1, [r7, #8]
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f000 f9f7 	bl	8013c30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013846:	2b00      	cmp	r3, #0
 8013848:	d008      	beq.n	801385c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	210e      	movs	r1, #14
 8013856:	430a      	orrs	r2, r1
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	e00f      	b.n	801387c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	681a      	ldr	r2, [r3, #0]
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	2104      	movs	r1, #4
 8013868:	438a      	bics	r2, r1
 801386a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	210a      	movs	r1, #10
 8013878:	430a      	orrs	r2, r1
 801387a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	2380      	movs	r3, #128	@ 0x80
 8013884:	025b      	lsls	r3, r3, #9
 8013886:	4013      	ands	r3, r2
 8013888:	d008      	beq.n	801389c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013894:	2180      	movs	r1, #128	@ 0x80
 8013896:	0049      	lsls	r1, r1, #1
 8013898:	430a      	orrs	r2, r1
 801389a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d008      	beq.n	80138b6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138ae:	2180      	movs	r1, #128	@ 0x80
 80138b0:	0049      	lsls	r1, r1, #1
 80138b2:	430a      	orrs	r2, r1
 80138b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2101      	movs	r1, #1
 80138c2:	430a      	orrs	r2, r1
 80138c4:	601a      	str	r2, [r3, #0]
 80138c6:	e00a      	b.n	80138de <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2280      	movs	r2, #128	@ 0x80
 80138cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2224      	movs	r2, #36	@ 0x24
 80138d2:	2100      	movs	r1, #0
 80138d4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80138d6:	2317      	movs	r3, #23
 80138d8:	18fb      	adds	r3, r7, r3
 80138da:	2201      	movs	r2, #1
 80138dc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80138de:	2317      	movs	r3, #23
 80138e0:	18fb      	adds	r3, r7, r3
 80138e2:	781b      	ldrb	r3, [r3, #0]
}
 80138e4:	0018      	movs	r0, r3
 80138e6:	46bd      	mov	sp, r7
 80138e8:	b006      	add	sp, #24
 80138ea:	bd80      	pop	{r7, pc}

080138ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80138fa:	2301      	movs	r3, #1
 80138fc:	e04f      	b.n	801399e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2225      	movs	r2, #37	@ 0x25
 8013902:	5c9b      	ldrb	r3, [r3, r2]
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b02      	cmp	r3, #2
 8013908:	d008      	beq.n	801391c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2204      	movs	r2, #4
 801390e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2224      	movs	r2, #36	@ 0x24
 8013914:	2100      	movs	r1, #0
 8013916:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8013918:	2301      	movs	r3, #1
 801391a:	e040      	b.n	801399e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	210e      	movs	r1, #14
 8013928:	438a      	bics	r2, r1
 801392a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013936:	491c      	ldr	r1, [pc, #112]	@ (80139a8 <HAL_DMA_Abort+0xbc>)
 8013938:	400a      	ands	r2, r1
 801393a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2101      	movs	r1, #1
 8013948:	438a      	bics	r2, r1
 801394a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013950:	221c      	movs	r2, #28
 8013952:	401a      	ands	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013958:	2101      	movs	r1, #1
 801395a:	4091      	lsls	r1, r2
 801395c:	000a      	movs	r2, r1
 801395e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013968:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00c      	beq.n	801398c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801397c:	490a      	ldr	r1, [pc, #40]	@ (80139a8 <HAL_DMA_Abort+0xbc>)
 801397e:	400a      	ands	r2, r1
 8013980:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801398a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2225      	movs	r2, #37	@ 0x25
 8013990:	2101      	movs	r1, #1
 8013992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2224      	movs	r2, #36	@ 0x24
 8013998:	2100      	movs	r1, #0
 801399a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	0018      	movs	r0, r3
 80139a0:	46bd      	mov	sp, r7
 80139a2:	b002      	add	sp, #8
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	46c0      	nop			@ (mov r8, r8)
 80139a8:	fffffeff 	.word	0xfffffeff

080139ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80139b4:	210f      	movs	r1, #15
 80139b6:	187b      	adds	r3, r7, r1
 80139b8:	2200      	movs	r2, #0
 80139ba:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2225      	movs	r2, #37	@ 0x25
 80139c0:	5c9b      	ldrb	r3, [r3, r2]
 80139c2:	b2db      	uxtb	r3, r3
 80139c4:	2b02      	cmp	r3, #2
 80139c6:	d006      	beq.n	80139d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2204      	movs	r2, #4
 80139cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80139ce:	187b      	adds	r3, r7, r1
 80139d0:	2201      	movs	r2, #1
 80139d2:	701a      	strb	r2, [r3, #0]
 80139d4:	e048      	b.n	8013a68 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	210e      	movs	r1, #14
 80139e2:	438a      	bics	r2, r1
 80139e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2101      	movs	r1, #1
 80139f2:	438a      	bics	r2, r1
 80139f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013a00:	491d      	ldr	r1, [pc, #116]	@ (8013a78 <HAL_DMA_Abort_IT+0xcc>)
 8013a02:	400a      	ands	r2, r1
 8013a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a0a:	221c      	movs	r2, #28
 8013a0c:	401a      	ands	r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a12:	2101      	movs	r1, #1
 8013a14:	4091      	lsls	r1, r2
 8013a16:	000a      	movs	r2, r1
 8013a18:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013a22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00c      	beq.n	8013a46 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a36:	4910      	ldr	r1, [pc, #64]	@ (8013a78 <HAL_DMA_Abort_IT+0xcc>)
 8013a38:	400a      	ands	r2, r1
 8013a3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013a44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2225      	movs	r2, #37	@ 0x25
 8013a4a:	2101      	movs	r1, #1
 8013a4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2224      	movs	r2, #36	@ 0x24
 8013a52:	2100      	movs	r1, #0
 8013a54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d004      	beq.n	8013a68 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	0010      	movs	r0, r2
 8013a66:	4798      	blx	r3
    }
  }
  return status;
 8013a68:	230f      	movs	r3, #15
 8013a6a:	18fb      	adds	r3, r7, r3
 8013a6c:	781b      	ldrb	r3, [r3, #0]
}
 8013a6e:	0018      	movs	r0, r3
 8013a70:	46bd      	mov	sp, r7
 8013a72:	b004      	add	sp, #16
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	46c0      	nop			@ (mov r8, r8)
 8013a78:	fffffeff 	.word	0xfffffeff

08013a7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a98:	221c      	movs	r2, #28
 8013a9a:	4013      	ands	r3, r2
 8013a9c:	2204      	movs	r2, #4
 8013a9e:	409a      	lsls	r2, r3
 8013aa0:	0013      	movs	r3, r2
 8013aa2:	68fa      	ldr	r2, [r7, #12]
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	d026      	beq.n	8013af6 <HAL_DMA_IRQHandler+0x7a>
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	2204      	movs	r2, #4
 8013aac:	4013      	ands	r3, r2
 8013aae:	d022      	beq.n	8013af6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2220      	movs	r2, #32
 8013ab8:	4013      	ands	r3, r2
 8013aba:	d107      	bne.n	8013acc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2104      	movs	r1, #4
 8013ac8:	438a      	bics	r2, r1
 8013aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ad0:	221c      	movs	r2, #28
 8013ad2:	401a      	ands	r2, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ad8:	2104      	movs	r1, #4
 8013ada:	4091      	lsls	r1, r2
 8013adc:	000a      	movs	r2, r1
 8013ade:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d100      	bne.n	8013aea <HAL_DMA_IRQHandler+0x6e>
 8013ae8:	e080      	b.n	8013bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	0010      	movs	r0, r2
 8013af2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8013af4:	e07a      	b.n	8013bec <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013afa:	221c      	movs	r2, #28
 8013afc:	4013      	ands	r3, r2
 8013afe:	2202      	movs	r2, #2
 8013b00:	409a      	lsls	r2, r3
 8013b02:	0013      	movs	r3, r2
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	4013      	ands	r3, r2
 8013b08:	d03c      	beq.n	8013b84 <HAL_DMA_IRQHandler+0x108>
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	2202      	movs	r2, #2
 8013b0e:	4013      	ands	r3, r2
 8013b10:	d038      	beq.n	8013b84 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2220      	movs	r2, #32
 8013b1a:	4013      	ands	r3, r2
 8013b1c:	d10b      	bne.n	8013b36 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	210a      	movs	r1, #10
 8013b2a:	438a      	bics	r2, r1
 8013b2c:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2225      	movs	r2, #37	@ 0x25
 8013b32:	2101      	movs	r1, #1
 8013b34:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	001a      	movs	r2, r3
 8013b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8013bf8 <HAL_DMA_IRQHandler+0x17c>)
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d909      	bls.n	8013b56 <HAL_DMA_IRQHandler+0xda>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b46:	221c      	movs	r2, #28
 8013b48:	401a      	ands	r2, r3
 8013b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8013bfc <HAL_DMA_IRQHandler+0x180>)
 8013b4c:	2102      	movs	r1, #2
 8013b4e:	4091      	lsls	r1, r2
 8013b50:	000a      	movs	r2, r1
 8013b52:	605a      	str	r2, [r3, #4]
 8013b54:	e008      	b.n	8013b68 <HAL_DMA_IRQHandler+0xec>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b5a:	221c      	movs	r2, #28
 8013b5c:	401a      	ands	r2, r3
 8013b5e:	4b28      	ldr	r3, [pc, #160]	@ (8013c00 <HAL_DMA_IRQHandler+0x184>)
 8013b60:	2102      	movs	r1, #2
 8013b62:	4091      	lsls	r1, r2
 8013b64:	000a      	movs	r2, r1
 8013b66:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2224      	movs	r2, #36	@ 0x24
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d039      	beq.n	8013bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	0010      	movs	r0, r2
 8013b80:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8013b82:	e033      	b.n	8013bec <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b88:	221c      	movs	r2, #28
 8013b8a:	4013      	ands	r3, r2
 8013b8c:	2208      	movs	r2, #8
 8013b8e:	409a      	lsls	r2, r3
 8013b90:	0013      	movs	r3, r2
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	4013      	ands	r3, r2
 8013b96:	d02a      	beq.n	8013bee <HAL_DMA_IRQHandler+0x172>
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	2208      	movs	r2, #8
 8013b9c:	4013      	ands	r3, r2
 8013b9e:	d026      	beq.n	8013bee <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	210e      	movs	r1, #14
 8013bac:	438a      	bics	r2, r1
 8013bae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bb4:	221c      	movs	r2, #28
 8013bb6:	401a      	ands	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bbc:	2101      	movs	r1, #1
 8013bbe:	4091      	lsls	r1, r2
 8013bc0:	000a      	movs	r2, r1
 8013bc2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2225      	movs	r2, #37	@ 0x25
 8013bce:	2101      	movs	r1, #1
 8013bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2224      	movs	r2, #36	@ 0x24
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d005      	beq.n	8013bee <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	0010      	movs	r0, r2
 8013bea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8013bec:	46c0      	nop			@ (mov r8, r8)
 8013bee:	46c0      	nop			@ (mov r8, r8)
}
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	b004      	add	sp, #16
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	46c0      	nop			@ (mov r8, r8)
 8013bf8:	40020080 	.word	0x40020080
 8013bfc:	40020400 	.word	0x40020400
 8013c00:	40020000 	.word	0x40020000

08013c04 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2225      	movs	r2, #37	@ 0x25
 8013c10:	5c9b      	ldrb	r3, [r3, r2]
 8013c12:	b2db      	uxtb	r3, r3
}
 8013c14:	0018      	movs	r0, r3
 8013c16:	46bd      	mov	sp, r7
 8013c18:	b002      	add	sp, #8
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8013c28:	0018      	movs	r0, r3
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	b002      	add	sp, #8
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	60b9      	str	r1, [r7, #8]
 8013c3a:	607a      	str	r2, [r7, #4]
 8013c3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013c46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d004      	beq.n	8013c5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013c58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c5e:	221c      	movs	r2, #28
 8013c60:	401a      	ands	r2, r3
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c66:	2101      	movs	r1, #1
 8013c68:	4091      	lsls	r1, r2
 8013c6a:	000a      	movs	r2, r1
 8013c6c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	2b10      	cmp	r3, #16
 8013c7c:	d108      	bne.n	8013c90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	68ba      	ldr	r2, [r7, #8]
 8013c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8013c8e:	e007      	b.n	8013ca0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	68ba      	ldr	r2, [r7, #8]
 8013c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	60da      	str	r2, [r3, #12]
}
 8013ca0:	46c0      	nop			@ (mov r8, r8)
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	b004      	add	sp, #16
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	001a      	movs	r2, r3
 8013cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8013d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d814      	bhi.n	8013ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cc0:	089b      	lsrs	r3, r3, #2
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8013d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8013cc6:	189a      	adds	r2, r3, r2
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	001a      	movs	r2, r3
 8013cd2:	23ff      	movs	r3, #255	@ 0xff
 8013cd4:	4013      	ands	r3, r2
 8013cd6:	3b08      	subs	r3, #8
 8013cd8:	2114      	movs	r1, #20
 8013cda:	0018      	movs	r0, r3
 8013cdc:	f7ec fa1c 	bl	8000118 <__udivsi3>
 8013ce0:	0003      	movs	r3, r0
 8013ce2:	60fb      	str	r3, [r7, #12]
 8013ce4:	e014      	b.n	8013d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cea:	089b      	lsrs	r3, r3, #2
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	4a11      	ldr	r2, [pc, #68]	@ (8013d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8013cf0:	189a      	adds	r2, r3, r2
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	001a      	movs	r2, r3
 8013cfc:	23ff      	movs	r3, #255	@ 0xff
 8013cfe:	4013      	ands	r3, r2
 8013d00:	3b08      	subs	r3, #8
 8013d02:	2114      	movs	r1, #20
 8013d04:	0018      	movs	r0, r3
 8013d06:	f7ec fa07 	bl	8000118 <__udivsi3>
 8013d0a:	0003      	movs	r3, r0
 8013d0c:	3307      	adds	r3, #7
 8013d0e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4a09      	ldr	r2, [pc, #36]	@ (8013d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8013d14:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	221f      	movs	r2, #31
 8013d1a:	4013      	ands	r3, r2
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	409a      	lsls	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8013d24:	46c0      	nop			@ (mov r8, r8)
 8013d26:	46bd      	mov	sp, r7
 8013d28:	b004      	add	sp, #16
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	40020407 	.word	0x40020407
 8013d30:	40020800 	.word	0x40020800
 8013d34:	4002081c 	.word	0x4002081c
 8013d38:	40020880 	.word	0x40020880

08013d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	22ff      	movs	r2, #255	@ 0xff
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	4a0a      	ldr	r2, [pc, #40]	@ (8013d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8013d52:	4694      	mov	ip, r2
 8013d54:	4463      	add	r3, ip
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	001a      	movs	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	4a07      	ldr	r2, [pc, #28]	@ (8013d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013d62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	3b01      	subs	r3, #1
 8013d68:	2203      	movs	r2, #3
 8013d6a:	4013      	ands	r3, r2
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	409a      	lsls	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8013d74:	46c0      	nop			@ (mov r8, r8)
 8013d76:	46bd      	mov	sp, r7
 8013d78:	b004      	add	sp, #16
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	1000823f 	.word	0x1000823f
 8013d80:	40020940 	.word	0x40020940

08013d84 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013d84:	b5b0      	push	{r4, r5, r7, lr}
 8013d86:	b086      	sub	sp, #24
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	603a      	str	r2, [r7, #0]
 8013d90:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013d92:	4b21      	ldr	r3, [pc, #132]	@ (8013e18 <HAL_FLASH_Program+0x94>)
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d101      	bne.n	8013d9e <HAL_FLASH_Program+0x1a>
 8013d9a:	2302      	movs	r3, #2
 8013d9c:	e038      	b.n	8013e10 <HAL_FLASH_Program+0x8c>
 8013d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8013e18 <HAL_FLASH_Program+0x94>)
 8013da0:	2201      	movs	r2, #1
 8013da2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013da4:	4b1c      	ldr	r3, [pc, #112]	@ (8013e18 <HAL_FLASH_Program+0x94>)
 8013da6:	2200      	movs	r2, #0
 8013da8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013daa:	2517      	movs	r5, #23
 8013dac:	197c      	adds	r4, r7, r5
 8013dae:	23fa      	movs	r3, #250	@ 0xfa
 8013db0:	009b      	lsls	r3, r3, #2
 8013db2:	0018      	movs	r0, r3
 8013db4:	f000 f874 	bl	8013ea0 <FLASH_WaitForLastOperation>
 8013db8:	0003      	movs	r3, r0
 8013dba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013dbc:	197b      	adds	r3, r7, r5
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d11f      	bne.n	8013e04 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d106      	bne.n	8013dd8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8013dca:	683a      	ldr	r2, [r7, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	68b9      	ldr	r1, [r7, #8]
 8013dd0:	0008      	movs	r0, r1
 8013dd2:	f000 f8b3 	bl	8013f3c <FLASH_Program_DoubleWord>
 8013dd6:	e005      	b.n	8013de4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8013dd8:	683a      	ldr	r2, [r7, #0]
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	0011      	movs	r1, r2
 8013dde:	0018      	movs	r0, r3
 8013de0:	f008 fa96 	bl	801c310 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013de4:	2317      	movs	r3, #23
 8013de6:	18fc      	adds	r4, r7, r3
 8013de8:	23fa      	movs	r3, #250	@ 0xfa
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	0018      	movs	r0, r3
 8013dee:	f000 f857 	bl	8013ea0 <FLASH_WaitForLastOperation>
 8013df2:	0003      	movs	r3, r0
 8013df4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8013df6:	4b09      	ldr	r3, [pc, #36]	@ (8013e1c <HAL_FLASH_Program+0x98>)
 8013df8:	695a      	ldr	r2, [r3, #20]
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	43d9      	mvns	r1, r3
 8013dfe:	4b07      	ldr	r3, [pc, #28]	@ (8013e1c <HAL_FLASH_Program+0x98>)
 8013e00:	400a      	ands	r2, r1
 8013e02:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013e04:	4b04      	ldr	r3, [pc, #16]	@ (8013e18 <HAL_FLASH_Program+0x94>)
 8013e06:	2200      	movs	r2, #0
 8013e08:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8013e0a:	2317      	movs	r3, #23
 8013e0c:	18fb      	adds	r3, r7, r3
 8013e0e:	781b      	ldrb	r3, [r3, #0]
}
 8013e10:	0018      	movs	r0, r3
 8013e12:	46bd      	mov	sp, r7
 8013e14:	b006      	add	sp, #24
 8013e16:	bdb0      	pop	{r4, r5, r7, pc}
 8013e18:	20002274 	.word	0x20002274
 8013e1c:	40022000 	.word	0x40022000

08013e20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013e26:	1dfb      	adds	r3, r7, #7
 8013e28:	2200      	movs	r2, #0
 8013e2a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8013e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8013e5c <HAL_FLASH_Unlock+0x3c>)
 8013e2e:	695b      	ldr	r3, [r3, #20]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	da0c      	bge.n	8013e4e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013e34:	4b09      	ldr	r3, [pc, #36]	@ (8013e5c <HAL_FLASH_Unlock+0x3c>)
 8013e36:	4a0a      	ldr	r2, [pc, #40]	@ (8013e60 <HAL_FLASH_Unlock+0x40>)
 8013e38:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013e3a:	4b08      	ldr	r3, [pc, #32]	@ (8013e5c <HAL_FLASH_Unlock+0x3c>)
 8013e3c:	4a09      	ldr	r2, [pc, #36]	@ (8013e64 <HAL_FLASH_Unlock+0x44>)
 8013e3e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8013e40:	4b06      	ldr	r3, [pc, #24]	@ (8013e5c <HAL_FLASH_Unlock+0x3c>)
 8013e42:	695b      	ldr	r3, [r3, #20]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	da02      	bge.n	8013e4e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8013e48:	1dfb      	adds	r3, r7, #7
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8013e4e:	1dfb      	adds	r3, r7, #7
 8013e50:	781b      	ldrb	r3, [r3, #0]
}
 8013e52:	0018      	movs	r0, r3
 8013e54:	46bd      	mov	sp, r7
 8013e56:	b002      	add	sp, #8
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	46c0      	nop			@ (mov r8, r8)
 8013e5c:	40022000 	.word	0x40022000
 8013e60:	45670123 	.word	0x45670123
 8013e64:	cdef89ab 	.word	0xcdef89ab

08013e68 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8013e6e:	1dfb      	adds	r3, r7, #7
 8013e70:	2201      	movs	r2, #1
 8013e72:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8013e74:	4b09      	ldr	r3, [pc, #36]	@ (8013e9c <HAL_FLASH_Lock+0x34>)
 8013e76:	695a      	ldr	r2, [r3, #20]
 8013e78:	4b08      	ldr	r3, [pc, #32]	@ (8013e9c <HAL_FLASH_Lock+0x34>)
 8013e7a:	2180      	movs	r1, #128	@ 0x80
 8013e7c:	0609      	lsls	r1, r1, #24
 8013e7e:	430a      	orrs	r2, r1
 8013e80:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8013e82:	4b06      	ldr	r3, [pc, #24]	@ (8013e9c <HAL_FLASH_Lock+0x34>)
 8013e84:	695b      	ldr	r3, [r3, #20]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	da02      	bge.n	8013e90 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8013e8a:	1dfb      	adds	r3, r7, #7
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013e90:	1dfb      	adds	r3, r7, #7
 8013e92:	781b      	ldrb	r3, [r3, #0]
}
 8013e94:	0018      	movs	r0, r3
 8013e96:	46bd      	mov	sp, r7
 8013e98:	b002      	add	sp, #8
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	40022000 	.word	0x40022000

08013ea0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8013ea8:	f7fd ffb2 	bl	8011e10 <HAL_GetTick>
 8013eac:	0002      	movs	r2, r0
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	189b      	adds	r3, r3, r2
 8013eb2:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8013eb4:	2380      	movs	r3, #128	@ 0x80
 8013eb6:	025b      	lsls	r3, r3, #9
 8013eb8:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 8013eba:	e007      	b.n	8013ecc <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8013ebc:	f7fd ffa8 	bl	8011e10 <HAL_GetTick>
 8013ec0:	0002      	movs	r2, r0
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	d801      	bhi.n	8013ecc <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8013ec8:	2303      	movs	r3, #3
 8013eca:	e02a      	b.n	8013f22 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8013ecc:	4b17      	ldr	r3, [pc, #92]	@ (8013f2c <FLASH_WaitForLastOperation+0x8c>)
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	68ba      	ldr	r2, [r7, #8]
 8013ed2:	4013      	ands	r3, r2
 8013ed4:	d1f2      	bne.n	8013ebc <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8013ed6:	4b15      	ldr	r3, [pc, #84]	@ (8013f2c <FLASH_WaitForLastOperation+0x8c>)
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	4a15      	ldr	r2, [pc, #84]	@ (8013f30 <FLASH_WaitForLastOperation+0x90>)
 8013edc:	4013      	ands	r3, r2
 8013ede:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8013ee0:	4b12      	ldr	r3, [pc, #72]	@ (8013f2c <FLASH_WaitForLastOperation+0x8c>)
 8013ee2:	4a14      	ldr	r2, [pc, #80]	@ (8013f34 <FLASH_WaitForLastOperation+0x94>)
 8013ee4:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d004      	beq.n	8013ef6 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8013eec:	4b12      	ldr	r3, [pc, #72]	@ (8013f38 <FLASH_WaitForLastOperation+0x98>)
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e015      	b.n	8013f22 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8013ef6:	f7fd ff8b 	bl	8011e10 <HAL_GetTick>
 8013efa:	0002      	movs	r2, r0
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	189b      	adds	r3, r3, r2
 8013f00:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8013f02:	e007      	b.n	8013f14 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8013f04:	f7fd ff84 	bl	8011e10 <HAL_GetTick>
 8013f08:	0002      	movs	r2, r0
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	d801      	bhi.n	8013f14 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8013f10:	2303      	movs	r3, #3
 8013f12:	e006      	b.n	8013f22 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8013f14:	4b05      	ldr	r3, [pc, #20]	@ (8013f2c <FLASH_WaitForLastOperation+0x8c>)
 8013f16:	691a      	ldr	r2, [r3, #16]
 8013f18:	2380      	movs	r3, #128	@ 0x80
 8013f1a:	02db      	lsls	r3, r3, #11
 8013f1c:	4013      	ands	r3, r2
 8013f1e:	d1f1      	bne.n	8013f04 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8013f20:	2300      	movs	r3, #0
}
 8013f22:	0018      	movs	r0, r3
 8013f24:	46bd      	mov	sp, r7
 8013f26:	b004      	add	sp, #16
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	46c0      	nop			@ (mov r8, r8)
 8013f2c:	40022000 	.word	0x40022000
 8013f30:	000083fa 	.word	0x000083fa
 8013f34:	000083fb 	.word	0x000083fb
 8013f38:	20002274 	.word	0x20002274

08013f3c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013f3c:	b5b0      	push	{r4, r5, r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	603a      	str	r2, [r7, #0]
 8013f46:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8013f48:	4b0b      	ldr	r3, [pc, #44]	@ (8013f78 <FLASH_Program_DoubleWord+0x3c>)
 8013f4a:	695a      	ldr	r2, [r3, #20]
 8013f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8013f78 <FLASH_Program_DoubleWord+0x3c>)
 8013f4e:	2101      	movs	r1, #1
 8013f50:	430a      	orrs	r2, r1
 8013f52:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	683a      	ldr	r2, [r7, #0]
 8013f58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8013f5a:	f3bf 8f6f 	isb	sy
}
 8013f5e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	001c      	movs	r4, r3
 8013f64:	2300      	movs	r3, #0
 8013f66:	001d      	movs	r5, r3
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	3304      	adds	r3, #4
 8013f6c:	0022      	movs	r2, r4
 8013f6e:	601a      	str	r2, [r3, #0]
}
 8013f70:	46c0      	nop			@ (mov r8, r8)
 8013f72:	46bd      	mov	sp, r7
 8013f74:	b004      	add	sp, #16
 8013f76:	bdb0      	pop	{r4, r5, r7, pc}
 8013f78:	40022000 	.word	0x40022000

08013f7c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8013f7c:	b5b0      	push	{r4, r5, r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013f86:	4b32      	ldr	r3, [pc, #200]	@ (8014050 <HAL_FLASHEx_Erase+0xd4>)
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d101      	bne.n	8013f92 <HAL_FLASHEx_Erase+0x16>
 8013f8e:	2302      	movs	r3, #2
 8013f90:	e059      	b.n	8014046 <HAL_FLASHEx_Erase+0xca>
 8013f92:	4b2f      	ldr	r3, [pc, #188]	@ (8014050 <HAL_FLASHEx_Erase+0xd4>)
 8013f94:	2201      	movs	r2, #1
 8013f96:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013f98:	4b2d      	ldr	r3, [pc, #180]	@ (8014050 <HAL_FLASHEx_Erase+0xd4>)
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013f9e:	250f      	movs	r5, #15
 8013fa0:	197c      	adds	r4, r7, r5
 8013fa2:	23fa      	movs	r3, #250	@ 0xfa
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	0018      	movs	r0, r3
 8013fa8:	f7ff ff7a 	bl	8013ea0 <FLASH_WaitForLastOperation>
 8013fac:	0003      	movs	r3, r0
 8013fae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013fb0:	002c      	movs	r4, r5
 8013fb2:	193b      	adds	r3, r7, r4
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d13f      	bne.n	801403a <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	2b04      	cmp	r3, #4
 8013fc6:	d10a      	bne.n	8013fde <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8013fc8:	f000 f846 	bl	8014058 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013fcc:	193c      	adds	r4, r7, r4
 8013fce:	23fa      	movs	r3, #250	@ 0xfa
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	0018      	movs	r0, r3
 8013fd4:	f7ff ff64 	bl	8013ea0 <FLASH_WaitForLastOperation>
 8013fd8:	0003      	movs	r3, r0
 8013fda:	7023      	strb	r3, [r4, #0]
 8013fdc:	e02d      	b.n	801403a <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	4252      	negs	r2, r2
 8013fe4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	689b      	ldr	r3, [r3, #8]
 8013fea:	60bb      	str	r3, [r7, #8]
 8013fec:	e017      	b.n	801401e <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	0018      	movs	r0, r3
 8013ff2:	f000 f841 	bl	8014078 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013ff6:	250f      	movs	r5, #15
 8013ff8:	197c      	adds	r4, r7, r5
 8013ffa:	23fa      	movs	r3, #250	@ 0xfa
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	0018      	movs	r0, r3
 8014000:	f7ff ff4e 	bl	8013ea0 <FLASH_WaitForLastOperation>
 8014004:	0003      	movs	r3, r0
 8014006:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8014008:	197b      	adds	r3, r7, r5
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d003      	beq.n	8014018 <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	68ba      	ldr	r2, [r7, #8]
 8014014:	601a      	str	r2, [r3, #0]
          break;
 8014016:	e00a      	b.n	801402e <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	3301      	adds	r3, #1
 801401c:	60bb      	str	r3, [r7, #8]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	689a      	ldr	r2, [r3, #8]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	18d3      	adds	r3, r2, r3
 8014028:	68ba      	ldr	r2, [r7, #8]
 801402a:	429a      	cmp	r2, r3
 801402c:	d3df      	bcc.n	8013fee <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801402e:	4b09      	ldr	r3, [pc, #36]	@ (8014054 <HAL_FLASHEx_Erase+0xd8>)
 8014030:	695a      	ldr	r2, [r3, #20]
 8014032:	4b08      	ldr	r3, [pc, #32]	@ (8014054 <HAL_FLASHEx_Erase+0xd8>)
 8014034:	2102      	movs	r1, #2
 8014036:	438a      	bics	r2, r1
 8014038:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801403a:	4b05      	ldr	r3, [pc, #20]	@ (8014050 <HAL_FLASHEx_Erase+0xd4>)
 801403c:	2200      	movs	r2, #0
 801403e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8014040:	230f      	movs	r3, #15
 8014042:	18fb      	adds	r3, r7, r3
 8014044:	781b      	ldrb	r3, [r3, #0]
}
 8014046:	0018      	movs	r0, r3
 8014048:	46bd      	mov	sp, r7
 801404a:	b004      	add	sp, #16
 801404c:	bdb0      	pop	{r4, r5, r7, pc}
 801404e:	46c0      	nop			@ (mov r8, r8)
 8014050:	20002274 	.word	0x20002274
 8014054:	40022000 	.word	0x40022000

08014058 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 801405c:	4b04      	ldr	r3, [pc, #16]	@ (8014070 <FLASH_MassErase+0x18>)
 801405e:	695a      	ldr	r2, [r3, #20]
 8014060:	4b03      	ldr	r3, [pc, #12]	@ (8014070 <FLASH_MassErase+0x18>)
 8014062:	4904      	ldr	r1, [pc, #16]	@ (8014074 <FLASH_MassErase+0x1c>)
 8014064:	430a      	orrs	r2, r1
 8014066:	615a      	str	r2, [r3, #20]
}
 8014068:	46c0      	nop			@ (mov r8, r8)
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	46c0      	nop			@ (mov r8, r8)
 8014070:	40022000 	.word	0x40022000
 8014074:	00010004 	.word	0x00010004

08014078 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8014080:	4b08      	ldr	r3, [pc, #32]	@ (80140a4 <FLASH_PageErase+0x2c>)
 8014082:	695b      	ldr	r3, [r3, #20]
 8014084:	4a08      	ldr	r2, [pc, #32]	@ (80140a8 <FLASH_PageErase+0x30>)
 8014086:	4013      	ands	r3, r2
 8014088:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	00da      	lsls	r2, r3, #3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	431a      	orrs	r2, r3
 8014092:	4b04      	ldr	r3, [pc, #16]	@ (80140a4 <FLASH_PageErase+0x2c>)
 8014094:	4905      	ldr	r1, [pc, #20]	@ (80140ac <FLASH_PageErase+0x34>)
 8014096:	430a      	orrs	r2, r1
 8014098:	615a      	str	r2, [r3, #20]
}
 801409a:	46c0      	nop			@ (mov r8, r8)
 801409c:	46bd      	mov	sp, r7
 801409e:	b004      	add	sp, #16
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	46c0      	nop			@ (mov r8, r8)
 80140a4:	40022000 	.word	0x40022000
 80140a8:	fffffc07 	.word	0xfffffc07
 80140ac:	00010002 	.word	0x00010002

080140b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b086      	sub	sp, #24
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80140ba:	2300      	movs	r3, #0
 80140bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80140be:	e153      	b.n	8014368 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	2101      	movs	r1, #1
 80140c6:	697a      	ldr	r2, [r7, #20]
 80140c8:	4091      	lsls	r1, r2
 80140ca:	000a      	movs	r2, r1
 80140cc:	4013      	ands	r3, r2
 80140ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d100      	bne.n	80140d8 <HAL_GPIO_Init+0x28>
 80140d6:	e144      	b.n	8014362 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	685b      	ldr	r3, [r3, #4]
 80140dc:	2203      	movs	r2, #3
 80140de:	4013      	ands	r3, r2
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d005      	beq.n	80140f0 <HAL_GPIO_Init+0x40>
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	2203      	movs	r2, #3
 80140ea:	4013      	ands	r3, r2
 80140ec:	2b02      	cmp	r3, #2
 80140ee:	d130      	bne.n	8014152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	689b      	ldr	r3, [r3, #8]
 80140f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	2203      	movs	r2, #3
 80140fc:	409a      	lsls	r2, r3
 80140fe:	0013      	movs	r3, r2
 8014100:	43da      	mvns	r2, r3
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	4013      	ands	r3, r2
 8014106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	68da      	ldr	r2, [r3, #12]
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	409a      	lsls	r2, r3
 8014112:	0013      	movs	r3, r2
 8014114:	693a      	ldr	r2, [r7, #16]
 8014116:	4313      	orrs	r3, r2
 8014118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	693a      	ldr	r2, [r7, #16]
 801411e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8014126:	2201      	movs	r2, #1
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	409a      	lsls	r2, r3
 801412c:	0013      	movs	r3, r2
 801412e:	43da      	mvns	r2, r3
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	4013      	ands	r3, r2
 8014134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	091b      	lsrs	r3, r3, #4
 801413c:	2201      	movs	r2, #1
 801413e:	401a      	ands	r2, r3
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	409a      	lsls	r2, r3
 8014144:	0013      	movs	r3, r2
 8014146:	693a      	ldr	r2, [r7, #16]
 8014148:	4313      	orrs	r3, r2
 801414a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	693a      	ldr	r2, [r7, #16]
 8014150:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	2203      	movs	r2, #3
 8014158:	4013      	ands	r3, r2
 801415a:	2b03      	cmp	r3, #3
 801415c:	d017      	beq.n	801418e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	2203      	movs	r2, #3
 801416a:	409a      	lsls	r2, r3
 801416c:	0013      	movs	r3, r2
 801416e:	43da      	mvns	r2, r3
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	4013      	ands	r3, r2
 8014174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	689a      	ldr	r2, [r3, #8]
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	409a      	lsls	r2, r3
 8014180:	0013      	movs	r3, r2
 8014182:	693a      	ldr	r2, [r7, #16]
 8014184:	4313      	orrs	r3, r2
 8014186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	693a      	ldr	r2, [r7, #16]
 801418c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	2203      	movs	r2, #3
 8014194:	4013      	ands	r3, r2
 8014196:	2b02      	cmp	r3, #2
 8014198:	d123      	bne.n	80141e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	08da      	lsrs	r2, r3, #3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	3208      	adds	r2, #8
 80141a2:	0092      	lsls	r2, r2, #2
 80141a4:	58d3      	ldr	r3, [r2, r3]
 80141a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	2207      	movs	r2, #7
 80141ac:	4013      	ands	r3, r2
 80141ae:	009b      	lsls	r3, r3, #2
 80141b0:	220f      	movs	r2, #15
 80141b2:	409a      	lsls	r2, r3
 80141b4:	0013      	movs	r3, r2
 80141b6:	43da      	mvns	r2, r3
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	4013      	ands	r3, r2
 80141bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	691a      	ldr	r2, [r3, #16]
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	2107      	movs	r1, #7
 80141c6:	400b      	ands	r3, r1
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	409a      	lsls	r2, r3
 80141cc:	0013      	movs	r3, r2
 80141ce:	693a      	ldr	r2, [r7, #16]
 80141d0:	4313      	orrs	r3, r2
 80141d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	08da      	lsrs	r2, r3, #3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	3208      	adds	r2, #8
 80141dc:	0092      	lsls	r2, r2, #2
 80141de:	6939      	ldr	r1, [r7, #16]
 80141e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	005b      	lsls	r3, r3, #1
 80141ec:	2203      	movs	r2, #3
 80141ee:	409a      	lsls	r2, r3
 80141f0:	0013      	movs	r3, r2
 80141f2:	43da      	mvns	r2, r3
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	4013      	ands	r3, r2
 80141f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	2203      	movs	r2, #3
 8014200:	401a      	ands	r2, r3
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	005b      	lsls	r3, r3, #1
 8014206:	409a      	lsls	r2, r3
 8014208:	0013      	movs	r3, r2
 801420a:	693a      	ldr	r2, [r7, #16]
 801420c:	4313      	orrs	r3, r2
 801420e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	693a      	ldr	r2, [r7, #16]
 8014214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	685a      	ldr	r2, [r3, #4]
 801421a:	23c0      	movs	r3, #192	@ 0xc0
 801421c:	029b      	lsls	r3, r3, #10
 801421e:	4013      	ands	r3, r2
 8014220:	d100      	bne.n	8014224 <HAL_GPIO_Init+0x174>
 8014222:	e09e      	b.n	8014362 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8014224:	4a56      	ldr	r2, [pc, #344]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	089b      	lsrs	r3, r3, #2
 801422a:	3318      	adds	r3, #24
 801422c:	009b      	lsls	r3, r3, #2
 801422e:	589b      	ldr	r3, [r3, r2]
 8014230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	2203      	movs	r2, #3
 8014236:	4013      	ands	r3, r2
 8014238:	00db      	lsls	r3, r3, #3
 801423a:	220f      	movs	r2, #15
 801423c:	409a      	lsls	r2, r3
 801423e:	0013      	movs	r3, r2
 8014240:	43da      	mvns	r2, r3
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	4013      	ands	r3, r2
 8014246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	23a0      	movs	r3, #160	@ 0xa0
 801424c:	05db      	lsls	r3, r3, #23
 801424e:	429a      	cmp	r2, r3
 8014250:	d01f      	beq.n	8014292 <HAL_GPIO_Init+0x1e2>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	4a4b      	ldr	r2, [pc, #300]	@ (8014384 <HAL_GPIO_Init+0x2d4>)
 8014256:	4293      	cmp	r3, r2
 8014258:	d019      	beq.n	801428e <HAL_GPIO_Init+0x1de>
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	4a4a      	ldr	r2, [pc, #296]	@ (8014388 <HAL_GPIO_Init+0x2d8>)
 801425e:	4293      	cmp	r3, r2
 8014260:	d013      	beq.n	801428a <HAL_GPIO_Init+0x1da>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	4a49      	ldr	r2, [pc, #292]	@ (801438c <HAL_GPIO_Init+0x2dc>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d00d      	beq.n	8014286 <HAL_GPIO_Init+0x1d6>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	4a48      	ldr	r2, [pc, #288]	@ (8014390 <HAL_GPIO_Init+0x2e0>)
 801426e:	4293      	cmp	r3, r2
 8014270:	d007      	beq.n	8014282 <HAL_GPIO_Init+0x1d2>
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	4a47      	ldr	r2, [pc, #284]	@ (8014394 <HAL_GPIO_Init+0x2e4>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d101      	bne.n	801427e <HAL_GPIO_Init+0x1ce>
 801427a:	2305      	movs	r3, #5
 801427c:	e00a      	b.n	8014294 <HAL_GPIO_Init+0x1e4>
 801427e:	2306      	movs	r3, #6
 8014280:	e008      	b.n	8014294 <HAL_GPIO_Init+0x1e4>
 8014282:	2304      	movs	r3, #4
 8014284:	e006      	b.n	8014294 <HAL_GPIO_Init+0x1e4>
 8014286:	2303      	movs	r3, #3
 8014288:	e004      	b.n	8014294 <HAL_GPIO_Init+0x1e4>
 801428a:	2302      	movs	r3, #2
 801428c:	e002      	b.n	8014294 <HAL_GPIO_Init+0x1e4>
 801428e:	2301      	movs	r3, #1
 8014290:	e000      	b.n	8014294 <HAL_GPIO_Init+0x1e4>
 8014292:	2300      	movs	r3, #0
 8014294:	697a      	ldr	r2, [r7, #20]
 8014296:	2103      	movs	r1, #3
 8014298:	400a      	ands	r2, r1
 801429a:	00d2      	lsls	r2, r2, #3
 801429c:	4093      	lsls	r3, r2
 801429e:	693a      	ldr	r2, [r7, #16]
 80142a0:	4313      	orrs	r3, r2
 80142a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80142a4:	4936      	ldr	r1, [pc, #216]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 80142a6:	697b      	ldr	r3, [r7, #20]
 80142a8:	089b      	lsrs	r3, r3, #2
 80142aa:	3318      	adds	r3, #24
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	693a      	ldr	r2, [r7, #16]
 80142b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80142b2:	4b33      	ldr	r3, [pc, #204]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	43da      	mvns	r2, r3
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	4013      	ands	r3, r2
 80142c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	2380      	movs	r3, #128	@ 0x80
 80142c8:	035b      	lsls	r3, r3, #13
 80142ca:	4013      	ands	r3, r2
 80142cc:	d003      	beq.n	80142d6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80142ce:	693a      	ldr	r2, [r7, #16]
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	4313      	orrs	r3, r2
 80142d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80142d6:	4b2a      	ldr	r3, [pc, #168]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 80142d8:	693a      	ldr	r2, [r7, #16]
 80142da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80142dc:	4b28      	ldr	r3, [pc, #160]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	43da      	mvns	r2, r3
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	4013      	ands	r3, r2
 80142ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	685a      	ldr	r2, [r3, #4]
 80142f0:	2380      	movs	r3, #128	@ 0x80
 80142f2:	039b      	lsls	r3, r3, #14
 80142f4:	4013      	ands	r3, r2
 80142f6:	d003      	beq.n	8014300 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80142f8:	693a      	ldr	r2, [r7, #16]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	4313      	orrs	r3, r2
 80142fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8014300:	4b1f      	ldr	r3, [pc, #124]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 8014302:	693a      	ldr	r2, [r7, #16]
 8014304:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8014306:	4a1e      	ldr	r2, [pc, #120]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 8014308:	2384      	movs	r3, #132	@ 0x84
 801430a:	58d3      	ldr	r3, [r2, r3]
 801430c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	43da      	mvns	r2, r3
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	4013      	ands	r3, r2
 8014316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	685a      	ldr	r2, [r3, #4]
 801431c:	2380      	movs	r3, #128	@ 0x80
 801431e:	029b      	lsls	r3, r3, #10
 8014320:	4013      	ands	r3, r2
 8014322:	d003      	beq.n	801432c <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8014324:	693a      	ldr	r2, [r7, #16]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	4313      	orrs	r3, r2
 801432a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801432c:	4914      	ldr	r1, [pc, #80]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 801432e:	2284      	movs	r2, #132	@ 0x84
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8014334:	4a12      	ldr	r2, [pc, #72]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 8014336:	2380      	movs	r3, #128	@ 0x80
 8014338:	58d3      	ldr	r3, [r2, r3]
 801433a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	43da      	mvns	r2, r3
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	4013      	ands	r3, r2
 8014344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	2380      	movs	r3, #128	@ 0x80
 801434c:	025b      	lsls	r3, r3, #9
 801434e:	4013      	ands	r3, r2
 8014350:	d003      	beq.n	801435a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8014352:	693a      	ldr	r2, [r7, #16]
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	4313      	orrs	r3, r2
 8014358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801435a:	4909      	ldr	r1, [pc, #36]	@ (8014380 <HAL_GPIO_Init+0x2d0>)
 801435c:	2280      	movs	r2, #128	@ 0x80
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	3301      	adds	r3, #1
 8014366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	40da      	lsrs	r2, r3
 8014370:	1e13      	subs	r3, r2, #0
 8014372:	d000      	beq.n	8014376 <HAL_GPIO_Init+0x2c6>
 8014374:	e6a4      	b.n	80140c0 <HAL_GPIO_Init+0x10>
  }
}
 8014376:	46c0      	nop			@ (mov r8, r8)
 8014378:	46c0      	nop			@ (mov r8, r8)
 801437a:	46bd      	mov	sp, r7
 801437c:	b006      	add	sp, #24
 801437e:	bd80      	pop	{r7, pc}
 8014380:	40021800 	.word	0x40021800
 8014384:	50000400 	.word	0x50000400
 8014388:	50000800 	.word	0x50000800
 801438c:	50000c00 	.word	0x50000c00
 8014390:	50001000 	.word	0x50001000
 8014394:	50001400 	.word	0x50001400

08014398 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80143a2:	2300      	movs	r3, #0
 80143a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80143a6:	e0c0      	b.n	801452a <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80143a8:	2201      	movs	r2, #1
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	409a      	lsls	r2, r3
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	4013      	ands	r3, r2
 80143b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d100      	bne.n	80143bc <HAL_GPIO_DeInit+0x24>
 80143ba:	e0b3      	b.n	8014524 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80143bc:	4a60      	ldr	r2, [pc, #384]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	089b      	lsrs	r3, r3, #2
 80143c2:	3318      	adds	r3, #24
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	589b      	ldr	r3, [r3, r2]
 80143c8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	2203      	movs	r2, #3
 80143ce:	4013      	ands	r3, r2
 80143d0:	00db      	lsls	r3, r3, #3
 80143d2:	220f      	movs	r2, #15
 80143d4:	409a      	lsls	r2, r3
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	4013      	ands	r3, r2
 80143da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 80143dc:	687a      	ldr	r2, [r7, #4]
 80143de:	23a0      	movs	r3, #160	@ 0xa0
 80143e0:	05db      	lsls	r3, r3, #23
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d01f      	beq.n	8014426 <HAL_GPIO_DeInit+0x8e>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	4a56      	ldr	r2, [pc, #344]	@ (8014544 <HAL_GPIO_DeInit+0x1ac>)
 80143ea:	4293      	cmp	r3, r2
 80143ec:	d019      	beq.n	8014422 <HAL_GPIO_DeInit+0x8a>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	4a55      	ldr	r2, [pc, #340]	@ (8014548 <HAL_GPIO_DeInit+0x1b0>)
 80143f2:	4293      	cmp	r3, r2
 80143f4:	d013      	beq.n	801441e <HAL_GPIO_DeInit+0x86>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4a54      	ldr	r2, [pc, #336]	@ (801454c <HAL_GPIO_DeInit+0x1b4>)
 80143fa:	4293      	cmp	r3, r2
 80143fc:	d00d      	beq.n	801441a <HAL_GPIO_DeInit+0x82>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	4a53      	ldr	r2, [pc, #332]	@ (8014550 <HAL_GPIO_DeInit+0x1b8>)
 8014402:	4293      	cmp	r3, r2
 8014404:	d007      	beq.n	8014416 <HAL_GPIO_DeInit+0x7e>
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	4a52      	ldr	r2, [pc, #328]	@ (8014554 <HAL_GPIO_DeInit+0x1bc>)
 801440a:	4293      	cmp	r3, r2
 801440c:	d101      	bne.n	8014412 <HAL_GPIO_DeInit+0x7a>
 801440e:	2305      	movs	r3, #5
 8014410:	e00a      	b.n	8014428 <HAL_GPIO_DeInit+0x90>
 8014412:	2306      	movs	r3, #6
 8014414:	e008      	b.n	8014428 <HAL_GPIO_DeInit+0x90>
 8014416:	2304      	movs	r3, #4
 8014418:	e006      	b.n	8014428 <HAL_GPIO_DeInit+0x90>
 801441a:	2303      	movs	r3, #3
 801441c:	e004      	b.n	8014428 <HAL_GPIO_DeInit+0x90>
 801441e:	2302      	movs	r3, #2
 8014420:	e002      	b.n	8014428 <HAL_GPIO_DeInit+0x90>
 8014422:	2301      	movs	r3, #1
 8014424:	e000      	b.n	8014428 <HAL_GPIO_DeInit+0x90>
 8014426:	2300      	movs	r3, #0
 8014428:	697a      	ldr	r2, [r7, #20]
 801442a:	2103      	movs	r1, #3
 801442c:	400a      	ands	r2, r1
 801442e:	00d2      	lsls	r2, r2, #3
 8014430:	4093      	lsls	r3, r2
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	429a      	cmp	r2, r3
 8014436:	d136      	bne.n	80144a6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8014438:	4a41      	ldr	r2, [pc, #260]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 801443a:	2380      	movs	r3, #128	@ 0x80
 801443c:	58d3      	ldr	r3, [r2, r3]
 801443e:	693a      	ldr	r2, [r7, #16]
 8014440:	43d2      	mvns	r2, r2
 8014442:	493f      	ldr	r1, [pc, #252]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 8014444:	4013      	ands	r3, r2
 8014446:	2280      	movs	r2, #128	@ 0x80
 8014448:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 801444a:	4a3d      	ldr	r2, [pc, #244]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 801444c:	2384      	movs	r3, #132	@ 0x84
 801444e:	58d3      	ldr	r3, [r2, r3]
 8014450:	693a      	ldr	r2, [r7, #16]
 8014452:	43d2      	mvns	r2, r2
 8014454:	493a      	ldr	r1, [pc, #232]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 8014456:	4013      	ands	r3, r2
 8014458:	2284      	movs	r2, #132	@ 0x84
 801445a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801445c:	4b38      	ldr	r3, [pc, #224]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 801445e:	685a      	ldr	r2, [r3, #4]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	43d9      	mvns	r1, r3
 8014464:	4b36      	ldr	r3, [pc, #216]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 8014466:	400a      	ands	r2, r1
 8014468:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801446a:	4b35      	ldr	r3, [pc, #212]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	43d9      	mvns	r1, r3
 8014472:	4b33      	ldr	r3, [pc, #204]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 8014474:	400a      	ands	r2, r1
 8014476:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	2203      	movs	r2, #3
 801447c:	4013      	ands	r3, r2
 801447e:	00db      	lsls	r3, r3, #3
 8014480:	220f      	movs	r2, #15
 8014482:	409a      	lsls	r2, r3
 8014484:	0013      	movs	r3, r2
 8014486:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8014488:	4a2d      	ldr	r2, [pc, #180]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	089b      	lsrs	r3, r3, #2
 801448e:	3318      	adds	r3, #24
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	589a      	ldr	r2, [r3, r2]
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	43d9      	mvns	r1, r3
 8014498:	4829      	ldr	r0, [pc, #164]	@ (8014540 <HAL_GPIO_DeInit+0x1a8>)
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	089b      	lsrs	r3, r3, #2
 801449e:	400a      	ands	r2, r1
 80144a0:	3318      	adds	r3, #24
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	005b      	lsls	r3, r3, #1
 80144ae:	2103      	movs	r1, #3
 80144b0:	4099      	lsls	r1, r3
 80144b2:	000b      	movs	r3, r1
 80144b4:	431a      	orrs	r2, r3
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	08da      	lsrs	r2, r3, #3
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	3208      	adds	r2, #8
 80144c2:	0092      	lsls	r2, r2, #2
 80144c4:	58d3      	ldr	r3, [r2, r3]
 80144c6:	697a      	ldr	r2, [r7, #20]
 80144c8:	2107      	movs	r1, #7
 80144ca:	400a      	ands	r2, r1
 80144cc:	0092      	lsls	r2, r2, #2
 80144ce:	210f      	movs	r1, #15
 80144d0:	4091      	lsls	r1, r2
 80144d2:	000a      	movs	r2, r1
 80144d4:	43d1      	mvns	r1, r2
 80144d6:	697a      	ldr	r2, [r7, #20]
 80144d8:	08d2      	lsrs	r2, r2, #3
 80144da:	4019      	ands	r1, r3
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	3208      	adds	r2, #8
 80144e0:	0092      	lsls	r2, r2, #2
 80144e2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	689b      	ldr	r3, [r3, #8]
 80144e8:	697a      	ldr	r2, [r7, #20]
 80144ea:	0052      	lsls	r2, r2, #1
 80144ec:	2103      	movs	r1, #3
 80144ee:	4091      	lsls	r1, r2
 80144f0:	000a      	movs	r2, r1
 80144f2:	43d2      	mvns	r2, r2
 80144f4:	401a      	ands	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	2101      	movs	r1, #1
 8014500:	697a      	ldr	r2, [r7, #20]
 8014502:	4091      	lsls	r1, r2
 8014504:	000a      	movs	r2, r1
 8014506:	43d2      	mvns	r2, r2
 8014508:	401a      	ands	r2, r3
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	697a      	ldr	r2, [r7, #20]
 8014514:	0052      	lsls	r2, r2, #1
 8014516:	2103      	movs	r1, #3
 8014518:	4091      	lsls	r1, r2
 801451a:	000a      	movs	r2, r1
 801451c:	43d2      	mvns	r2, r2
 801451e:	401a      	ands	r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	60da      	str	r2, [r3, #12]
    }

    position++;
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	3301      	adds	r3, #1
 8014528:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801452a:	683a      	ldr	r2, [r7, #0]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	40da      	lsrs	r2, r3
 8014530:	1e13      	subs	r3, r2, #0
 8014532:	d000      	beq.n	8014536 <HAL_GPIO_DeInit+0x19e>
 8014534:	e738      	b.n	80143a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8014536:	46c0      	nop			@ (mov r8, r8)
 8014538:	46c0      	nop			@ (mov r8, r8)
 801453a:	46bd      	mov	sp, r7
 801453c:	b006      	add	sp, #24
 801453e:	bd80      	pop	{r7, pc}
 8014540:	40021800 	.word	0x40021800
 8014544:	50000400 	.word	0x50000400
 8014548:	50000800 	.word	0x50000800
 801454c:	50000c00 	.word	0x50000c00
 8014550:	50001000 	.word	0x50001000
 8014554:	50001400 	.word	0x50001400

08014558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	000a      	movs	r2, r1
 8014562:	1cbb      	adds	r3, r7, #2
 8014564:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	691b      	ldr	r3, [r3, #16]
 801456a:	1cba      	adds	r2, r7, #2
 801456c:	8812      	ldrh	r2, [r2, #0]
 801456e:	4013      	ands	r3, r2
 8014570:	d004      	beq.n	801457c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8014572:	230f      	movs	r3, #15
 8014574:	18fb      	adds	r3, r7, r3
 8014576:	2201      	movs	r2, #1
 8014578:	701a      	strb	r2, [r3, #0]
 801457a:	e003      	b.n	8014584 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801457c:	230f      	movs	r3, #15
 801457e:	18fb      	adds	r3, r7, r3
 8014580:	2200      	movs	r2, #0
 8014582:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8014584:	230f      	movs	r3, #15
 8014586:	18fb      	adds	r3, r7, r3
 8014588:	781b      	ldrb	r3, [r3, #0]
}
 801458a:	0018      	movs	r0, r3
 801458c:	46bd      	mov	sp, r7
 801458e:	b004      	add	sp, #16
 8014590:	bd80      	pop	{r7, pc}

08014592 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014592:	b580      	push	{r7, lr}
 8014594:	b082      	sub	sp, #8
 8014596:	af00      	add	r7, sp, #0
 8014598:	6078      	str	r0, [r7, #4]
 801459a:	0008      	movs	r0, r1
 801459c:	0011      	movs	r1, r2
 801459e:	1cbb      	adds	r3, r7, #2
 80145a0:	1c02      	adds	r2, r0, #0
 80145a2:	801a      	strh	r2, [r3, #0]
 80145a4:	1c7b      	adds	r3, r7, #1
 80145a6:	1c0a      	adds	r2, r1, #0
 80145a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80145aa:	1c7b      	adds	r3, r7, #1
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d004      	beq.n	80145bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80145b2:	1cbb      	adds	r3, r7, #2
 80145b4:	881a      	ldrh	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80145ba:	e003      	b.n	80145c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80145bc:	1cbb      	adds	r3, r7, #2
 80145be:	881a      	ldrh	r2, [r3, #0]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80145c4:	46c0      	nop			@ (mov r8, r8)
 80145c6:	46bd      	mov	sp, r7
 80145c8:	b002      	add	sp, #8
 80145ca:	bd80      	pop	{r7, pc}

080145cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	000a      	movs	r2, r1
 80145d6:	1cbb      	adds	r3, r7, #2
 80145d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	695b      	ldr	r3, [r3, #20]
 80145de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80145e0:	1cbb      	adds	r3, r7, #2
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	68fa      	ldr	r2, [r7, #12]
 80145e6:	4013      	ands	r3, r2
 80145e8:	041a      	lsls	r2, r3, #16
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	43db      	mvns	r3, r3
 80145ee:	1cb9      	adds	r1, r7, #2
 80145f0:	8809      	ldrh	r1, [r1, #0]
 80145f2:	400b      	ands	r3, r1
 80145f4:	431a      	orrs	r2, r3
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	619a      	str	r2, [r3, #24]
}
 80145fa:	46c0      	nop			@ (mov r8, r8)
 80145fc:	46bd      	mov	sp, r7
 80145fe:	b004      	add	sp, #16
 8014600:	bd80      	pop	{r7, pc}
	...

08014604 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	0002      	movs	r2, r0
 801460c:	1dbb      	adds	r3, r7, #6
 801460e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8014610:	4b10      	ldr	r3, [pc, #64]	@ (8014654 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	1dba      	adds	r2, r7, #6
 8014616:	8812      	ldrh	r2, [r2, #0]
 8014618:	4013      	ands	r3, r2
 801461a:	d008      	beq.n	801462e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 801461c:	4b0d      	ldr	r3, [pc, #52]	@ (8014654 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801461e:	1dba      	adds	r2, r7, #6
 8014620:	8812      	ldrh	r2, [r2, #0]
 8014622:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8014624:	1dbb      	adds	r3, r7, #6
 8014626:	881b      	ldrh	r3, [r3, #0]
 8014628:	0018      	movs	r0, r3
 801462a:	f000 f815 	bl	8014658 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 801462e:	4b09      	ldr	r3, [pc, #36]	@ (8014654 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014630:	691b      	ldr	r3, [r3, #16]
 8014632:	1dba      	adds	r2, r7, #6
 8014634:	8812      	ldrh	r2, [r2, #0]
 8014636:	4013      	ands	r3, r2
 8014638:	d008      	beq.n	801464c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801463a:	4b06      	ldr	r3, [pc, #24]	@ (8014654 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801463c:	1dba      	adds	r2, r7, #6
 801463e:	8812      	ldrh	r2, [r2, #0]
 8014640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8014642:	1dbb      	adds	r3, r7, #6
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	0018      	movs	r0, r3
 8014648:	f000 f810 	bl	801466c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 801464c:	46c0      	nop			@ (mov r8, r8)
 801464e:	46bd      	mov	sp, r7
 8014650:	b002      	add	sp, #8
 8014652:	bd80      	pop	{r7, pc}
 8014654:	40021800 	.word	0x40021800

08014658 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	0002      	movs	r2, r0
 8014660:	1dbb      	adds	r3, r7, #6
 8014662:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8014664:	46c0      	nop			@ (mov r8, r8)
 8014666:	46bd      	mov	sp, r7
 8014668:	b002      	add	sp, #8
 801466a:	bd80      	pop	{r7, pc}

0801466c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	0002      	movs	r2, r0
 8014674:	1dbb      	adds	r3, r7, #6
 8014676:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8014678:	46c0      	nop			@ (mov r8, r8)
 801467a:	46bd      	mov	sp, r7
 801467c:	b002      	add	sp, #8
 801467e:	bd80      	pop	{r7, pc}

08014680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d101      	bne.n	8014692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801468e:	2301      	movs	r3, #1
 8014690:	e08f      	b.n	80147b2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2241      	movs	r2, #65	@ 0x41
 8014696:	5c9b      	ldrb	r3, [r3, r2]
 8014698:	b2db      	uxtb	r3, r3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d107      	bne.n	80146ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2240      	movs	r2, #64	@ 0x40
 80146a2:	2100      	movs	r1, #0
 80146a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	0018      	movs	r0, r3
 80146aa:	f7f7 fc19 	bl	800bee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2241      	movs	r2, #65	@ 0x41
 80146b2:	2124      	movs	r1, #36	@ 0x24
 80146b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2101      	movs	r1, #1
 80146c2:	438a      	bics	r2, r1
 80146c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	685a      	ldr	r2, [r3, #4]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	493b      	ldr	r1, [pc, #236]	@ (80147bc <HAL_I2C_Init+0x13c>)
 80146d0:	400a      	ands	r2, r1
 80146d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	689a      	ldr	r2, [r3, #8]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	4938      	ldr	r1, [pc, #224]	@ (80147c0 <HAL_I2C_Init+0x140>)
 80146e0:	400a      	ands	r2, r1
 80146e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d108      	bne.n	80146fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	689a      	ldr	r2, [r3, #8]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2180      	movs	r1, #128	@ 0x80
 80146f6:	0209      	lsls	r1, r1, #8
 80146f8:	430a      	orrs	r2, r1
 80146fa:	609a      	str	r2, [r3, #8]
 80146fc:	e007      	b.n	801470e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	689a      	ldr	r2, [r3, #8]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	2184      	movs	r1, #132	@ 0x84
 8014708:	0209      	lsls	r1, r1, #8
 801470a:	430a      	orrs	r2, r1
 801470c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	2b02      	cmp	r3, #2
 8014714:	d109      	bne.n	801472a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	685a      	ldr	r2, [r3, #4]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2180      	movs	r1, #128	@ 0x80
 8014722:	0109      	lsls	r1, r1, #4
 8014724:	430a      	orrs	r2, r1
 8014726:	605a      	str	r2, [r3, #4]
 8014728:	e007      	b.n	801473a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	685a      	ldr	r2, [r3, #4]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	4923      	ldr	r1, [pc, #140]	@ (80147c4 <HAL_I2C_Init+0x144>)
 8014736:	400a      	ands	r2, r1
 8014738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	685a      	ldr	r2, [r3, #4]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4920      	ldr	r1, [pc, #128]	@ (80147c8 <HAL_I2C_Init+0x148>)
 8014746:	430a      	orrs	r2, r1
 8014748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	68da      	ldr	r2, [r3, #12]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	491a      	ldr	r1, [pc, #104]	@ (80147c0 <HAL_I2C_Init+0x140>)
 8014756:	400a      	ands	r2, r1
 8014758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	691a      	ldr	r2, [r3, #16]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	695b      	ldr	r3, [r3, #20]
 8014762:	431a      	orrs	r2, r3
 8014764:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	699b      	ldr	r3, [r3, #24]
 801476a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	430a      	orrs	r2, r1
 8014772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	69d9      	ldr	r1, [r3, #28]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6a1a      	ldr	r2, [r3, #32]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	430a      	orrs	r2, r1
 8014782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2101      	movs	r1, #1
 8014790:	430a      	orrs	r2, r1
 8014792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2200      	movs	r2, #0
 8014798:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2241      	movs	r2, #65	@ 0x41
 801479e:	2120      	movs	r1, #32
 80147a0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2200      	movs	r2, #0
 80147a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2242      	movs	r2, #66	@ 0x42
 80147ac:	2100      	movs	r1, #0
 80147ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	0018      	movs	r0, r3
 80147b4:	46bd      	mov	sp, r7
 80147b6:	b002      	add	sp, #8
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	46c0      	nop			@ (mov r8, r8)
 80147bc:	f0ffffff 	.word	0xf0ffffff
 80147c0:	ffff7fff 	.word	0xffff7fff
 80147c4:	fffff7ff 	.word	0xfffff7ff
 80147c8:	02008000 	.word	0x02008000

080147cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d101      	bne.n	80147de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80147da:	2301      	movs	r3, #1
 80147dc:	e022      	b.n	8014824 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2241      	movs	r2, #65	@ 0x41
 80147e2:	2124      	movs	r1, #36	@ 0x24
 80147e4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2101      	movs	r1, #1
 80147f2:	438a      	bics	r2, r1
 80147f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	0018      	movs	r0, r3
 80147fa:	f7f7 fc37 	bl	800c06c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2200      	movs	r2, #0
 8014802:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2241      	movs	r2, #65	@ 0x41
 8014808:	2100      	movs	r1, #0
 801480a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2242      	movs	r2, #66	@ 0x42
 8014816:	2100      	movs	r1, #0
 8014818:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2240      	movs	r2, #64	@ 0x40
 801481e:	2100      	movs	r1, #0
 8014820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014822:	2300      	movs	r3, #0
}
 8014824:	0018      	movs	r0, r3
 8014826:	46bd      	mov	sp, r7
 8014828:	b002      	add	sp, #8
 801482a:	bd80      	pop	{r7, pc}

0801482c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801482c:	b5b0      	push	{r4, r5, r7, lr}
 801482e:	b088      	sub	sp, #32
 8014830:	af02      	add	r7, sp, #8
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	0008      	movs	r0, r1
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	0019      	movs	r1, r3
 801483a:	230a      	movs	r3, #10
 801483c:	18fb      	adds	r3, r7, r3
 801483e:	1c02      	adds	r2, r0, #0
 8014840:	801a      	strh	r2, [r3, #0]
 8014842:	2308      	movs	r3, #8
 8014844:	18fb      	adds	r3, r7, r3
 8014846:	1c0a      	adds	r2, r1, #0
 8014848:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2241      	movs	r2, #65	@ 0x41
 801484e:	5c9b      	ldrb	r3, [r3, r2]
 8014850:	b2db      	uxtb	r3, r3
 8014852:	2b20      	cmp	r3, #32
 8014854:	d000      	beq.n	8014858 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8014856:	e0dd      	b.n	8014a14 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	699a      	ldr	r2, [r3, #24]
 801485e:	2380      	movs	r3, #128	@ 0x80
 8014860:	021b      	lsls	r3, r3, #8
 8014862:	401a      	ands	r2, r3
 8014864:	2380      	movs	r3, #128	@ 0x80
 8014866:	021b      	lsls	r3, r3, #8
 8014868:	429a      	cmp	r2, r3
 801486a:	d101      	bne.n	8014870 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 801486c:	2302      	movs	r3, #2
 801486e:	e0d2      	b.n	8014a16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2240      	movs	r2, #64	@ 0x40
 8014874:	5c9b      	ldrb	r3, [r3, r2]
 8014876:	2b01      	cmp	r3, #1
 8014878:	d101      	bne.n	801487e <HAL_I2C_Master_Transmit_DMA+0x52>
 801487a:	2302      	movs	r3, #2
 801487c:	e0cb      	b.n	8014a16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2240      	movs	r2, #64	@ 0x40
 8014882:	2101      	movs	r1, #1
 8014884:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2241      	movs	r2, #65	@ 0x41
 801488a:	2121      	movs	r1, #33	@ 0x21
 801488c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2242      	movs	r2, #66	@ 0x42
 8014892:	2110      	movs	r1, #16
 8014894:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2200      	movs	r2, #0
 801489a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2208      	movs	r2, #8
 80148a6:	18ba      	adds	r2, r7, r2
 80148a8:	8812      	ldrh	r2, [r2, #0]
 80148aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	4a5c      	ldr	r2, [pc, #368]	@ (8014a20 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80148b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	4a5b      	ldr	r2, [pc, #364]	@ (8014a24 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80148b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148bc:	b29b      	uxth	r3, r3
 80148be:	2bff      	cmp	r3, #255	@ 0xff
 80148c0:	d906      	bls.n	80148d0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	22ff      	movs	r2, #255	@ 0xff
 80148c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80148c8:	2380      	movs	r3, #128	@ 0x80
 80148ca:	045b      	lsls	r3, r3, #17
 80148cc:	617b      	str	r3, [r7, #20]
 80148ce:	e007      	b.n	80148e0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80148da:	2380      	movs	r3, #128	@ 0x80
 80148dc:	049b      	lsls	r3, r3, #18
 80148de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d100      	bne.n	80148ea <HAL_I2C_Master_Transmit_DMA+0xbe>
 80148e8:	e078      	b.n	80149dc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d023      	beq.n	801493a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148f6:	4a4c      	ldr	r2, [pc, #304]	@ (8014a28 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80148f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148fe:	4a4b      	ldr	r2, [pc, #300]	@ (8014a2c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8014900:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014906:	2200      	movs	r2, #0
 8014908:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801490e:	2200      	movs	r2, #0
 8014910:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014916:	6879      	ldr	r1, [r7, #4]
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	3328      	adds	r3, #40	@ 0x28
 801491e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014924:	2513      	movs	r5, #19
 8014926:	197c      	adds	r4, r7, r5
 8014928:	f7fe ff5a 	bl	80137e0 <HAL_DMA_Start_IT>
 801492c:	0003      	movs	r3, r0
 801492e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014930:	197b      	adds	r3, r7, r5
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d13d      	bne.n	80149b4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8014938:	e013      	b.n	8014962 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2241      	movs	r2, #65	@ 0x41
 801493e:	2120      	movs	r1, #32
 8014940:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2242      	movs	r2, #66	@ 0x42
 8014946:	2100      	movs	r1, #0
 8014948:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801494e:	2280      	movs	r2, #128	@ 0x80
 8014950:	431a      	orrs	r2, r3
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	2240      	movs	r2, #64	@ 0x40
 801495a:	2100      	movs	r1, #0
 801495c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801495e:	2301      	movs	r3, #1
 8014960:	e059      	b.n	8014a16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014966:	b2da      	uxtb	r2, r3
 8014968:	697c      	ldr	r4, [r7, #20]
 801496a:	230a      	movs	r3, #10
 801496c:	18fb      	adds	r3, r7, r3
 801496e:	8819      	ldrh	r1, [r3, #0]
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	4b2f      	ldr	r3, [pc, #188]	@ (8014a30 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8014974:	9300      	str	r3, [sp, #0]
 8014976:	0023      	movs	r3, r4
 8014978:	f001 fe0c 	bl	8016594 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014980:	b29a      	uxth	r2, r3
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014986:	1ad3      	subs	r3, r2, r3
 8014988:	b29a      	uxth	r2, r3
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	2240      	movs	r2, #64	@ 0x40
 8014992:	2100      	movs	r1, #0
 8014994:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	2110      	movs	r1, #16
 801499a:	0018      	movs	r0, r3
 801499c:	f001 fe34 	bl	8016608 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2180      	movs	r1, #128	@ 0x80
 80149ac:	01c9      	lsls	r1, r1, #7
 80149ae:	430a      	orrs	r2, r1
 80149b0:	601a      	str	r2, [r3, #0]
 80149b2:	e02d      	b.n	8014a10 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2241      	movs	r2, #65	@ 0x41
 80149b8:	2120      	movs	r1, #32
 80149ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2242      	movs	r2, #66	@ 0x42
 80149c0:	2100      	movs	r1, #0
 80149c2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149c8:	2210      	movs	r2, #16
 80149ca:	431a      	orrs	r2, r3
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	2240      	movs	r2, #64	@ 0x40
 80149d4:	2100      	movs	r1, #0
 80149d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80149d8:	2301      	movs	r3, #1
 80149da:	e01c      	b.n	8014a16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	4a15      	ldr	r2, [pc, #84]	@ (8014a34 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80149e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80149e6:	b2da      	uxtb	r2, r3
 80149e8:	2380      	movs	r3, #128	@ 0x80
 80149ea:	049c      	lsls	r4, r3, #18
 80149ec:	230a      	movs	r3, #10
 80149ee:	18fb      	adds	r3, r7, r3
 80149f0:	8819      	ldrh	r1, [r3, #0]
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	4b0e      	ldr	r3, [pc, #56]	@ (8014a30 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	0023      	movs	r3, r4
 80149fa:	f001 fdcb 	bl	8016594 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2240      	movs	r2, #64	@ 0x40
 8014a02:	2100      	movs	r1, #0
 8014a04:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2101      	movs	r1, #1
 8014a0a:	0018      	movs	r0, r3
 8014a0c:	f001 fdfc 	bl	8016608 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014a10:	2300      	movs	r3, #0
 8014a12:	e000      	b.n	8014a16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014a14:	2302      	movs	r3, #2
  }
}
 8014a16:	0018      	movs	r0, r3
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	b006      	add	sp, #24
 8014a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a1e:	46c0      	nop			@ (mov r8, r8)
 8014a20:	ffff0000 	.word	0xffff0000
 8014a24:	080152b1 	.word	0x080152b1
 8014a28:	080163e5 	.word	0x080163e5
 8014a2c:	08016525 	.word	0x08016525
 8014a30:	80002000 	.word	0x80002000
 8014a34:	08014e05 	.word	0x08014e05

08014a38 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8014a38:	b5b0      	push	{r4, r5, r7, lr}
 8014a3a:	b088      	sub	sp, #32
 8014a3c:	af02      	add	r7, sp, #8
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	0008      	movs	r0, r1
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	0019      	movs	r1, r3
 8014a46:	230a      	movs	r3, #10
 8014a48:	18fb      	adds	r3, r7, r3
 8014a4a:	1c02      	adds	r2, r0, #0
 8014a4c:	801a      	strh	r2, [r3, #0]
 8014a4e:	2308      	movs	r3, #8
 8014a50:	18fb      	adds	r3, r7, r3
 8014a52:	1c0a      	adds	r2, r1, #0
 8014a54:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2241      	movs	r2, #65	@ 0x41
 8014a5a:	5c9b      	ldrb	r3, [r3, r2]
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	2b20      	cmp	r3, #32
 8014a60:	d000      	beq.n	8014a64 <HAL_I2C_Master_Receive_DMA+0x2c>
 8014a62:	e0dd      	b.n	8014c20 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	699a      	ldr	r2, [r3, #24]
 8014a6a:	2380      	movs	r3, #128	@ 0x80
 8014a6c:	021b      	lsls	r3, r3, #8
 8014a6e:	401a      	ands	r2, r3
 8014a70:	2380      	movs	r3, #128	@ 0x80
 8014a72:	021b      	lsls	r3, r3, #8
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d101      	bne.n	8014a7c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8014a78:	2302      	movs	r3, #2
 8014a7a:	e0d2      	b.n	8014c22 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2240      	movs	r2, #64	@ 0x40
 8014a80:	5c9b      	ldrb	r3, [r3, r2]
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d101      	bne.n	8014a8a <HAL_I2C_Master_Receive_DMA+0x52>
 8014a86:	2302      	movs	r3, #2
 8014a88:	e0cb      	b.n	8014c22 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	2240      	movs	r2, #64	@ 0x40
 8014a8e:	2101      	movs	r1, #1
 8014a90:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2241      	movs	r2, #65	@ 0x41
 8014a96:	2122      	movs	r1, #34	@ 0x22
 8014a98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2242      	movs	r2, #66	@ 0x42
 8014a9e:	2110      	movs	r1, #16
 8014aa0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	2208      	movs	r2, #8
 8014ab2:	18ba      	adds	r2, r7, r2
 8014ab4:	8812      	ldrh	r2, [r2, #0]
 8014ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	4a5c      	ldr	r2, [pc, #368]	@ (8014c2c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8014abc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8014c30 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8014ac2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	2bff      	cmp	r3, #255	@ 0xff
 8014acc:	d906      	bls.n	8014adc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	22ff      	movs	r2, #255	@ 0xff
 8014ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8014ad4:	2380      	movs	r3, #128	@ 0x80
 8014ad6:	045b      	lsls	r3, r3, #17
 8014ad8:	617b      	str	r3, [r7, #20]
 8014ada:	e007      	b.n	8014aec <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ae0:	b29a      	uxth	r2, r3
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014ae6:	2380      	movs	r3, #128	@ 0x80
 8014ae8:	049b      	lsls	r3, r3, #18
 8014aea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d100      	bne.n	8014af6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8014af4:	e078      	b.n	8014be8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d023      	beq.n	8014b46 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b02:	4a4c      	ldr	r2, [pc, #304]	@ (8014c34 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8014b04:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8014c38 <HAL_I2C_Master_Receive_DMA+0x200>)
 8014b0c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b12:	2200      	movs	r2, #0
 8014b14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	3324      	adds	r3, #36	@ 0x24
 8014b28:	0019      	movs	r1, r3
 8014b2a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014b30:	2513      	movs	r5, #19
 8014b32:	197c      	adds	r4, r7, r5
 8014b34:	f7fe fe54 	bl	80137e0 <HAL_DMA_Start_IT>
 8014b38:	0003      	movs	r3, r0
 8014b3a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014b3c:	197b      	adds	r3, r7, r5
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d13d      	bne.n	8014bc0 <HAL_I2C_Master_Receive_DMA+0x188>
 8014b44:	e013      	b.n	8014b6e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	2241      	movs	r2, #65	@ 0x41
 8014b4a:	2120      	movs	r1, #32
 8014b4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2242      	movs	r2, #66	@ 0x42
 8014b52:	2100      	movs	r1, #0
 8014b54:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b5a:	2280      	movs	r2, #128	@ 0x80
 8014b5c:	431a      	orrs	r2, r3
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2240      	movs	r2, #64	@ 0x40
 8014b66:	2100      	movs	r1, #0
 8014b68:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e059      	b.n	8014c22 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b72:	b2da      	uxtb	r2, r3
 8014b74:	697c      	ldr	r4, [r7, #20]
 8014b76:	230a      	movs	r3, #10
 8014b78:	18fb      	adds	r3, r7, r3
 8014b7a:	8819      	ldrh	r1, [r3, #0]
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8014c3c <HAL_I2C_Master_Receive_DMA+0x204>)
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	0023      	movs	r3, r4
 8014b84:	f001 fd06 	bl	8016594 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2240      	movs	r2, #64	@ 0x40
 8014b9e:	2100      	movs	r1, #0
 8014ba0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	2110      	movs	r1, #16
 8014ba6:	0018      	movs	r0, r3
 8014ba8:	f001 fd2e 	bl	8016608 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2180      	movs	r1, #128	@ 0x80
 8014bb8:	0209      	lsls	r1, r1, #8
 8014bba:	430a      	orrs	r2, r1
 8014bbc:	601a      	str	r2, [r3, #0]
 8014bbe:	e02d      	b.n	8014c1c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2241      	movs	r2, #65	@ 0x41
 8014bc4:	2120      	movs	r1, #32
 8014bc6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	2242      	movs	r2, #66	@ 0x42
 8014bcc:	2100      	movs	r1, #0
 8014bce:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bd4:	2210      	movs	r2, #16
 8014bd6:	431a      	orrs	r2, r3
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2240      	movs	r2, #64	@ 0x40
 8014be0:	2100      	movs	r1, #0
 8014be2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014be4:	2301      	movs	r3, #1
 8014be6:	e01c      	b.n	8014c22 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	4a15      	ldr	r2, [pc, #84]	@ (8014c40 <HAL_I2C_Master_Receive_DMA+0x208>)
 8014bec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014bf2:	b2da      	uxtb	r2, r3
 8014bf4:	2380      	movs	r3, #128	@ 0x80
 8014bf6:	049c      	lsls	r4, r3, #18
 8014bf8:	230a      	movs	r3, #10
 8014bfa:	18fb      	adds	r3, r7, r3
 8014bfc:	8819      	ldrh	r1, [r3, #0]
 8014bfe:	68f8      	ldr	r0, [r7, #12]
 8014c00:	4b0e      	ldr	r3, [pc, #56]	@ (8014c3c <HAL_I2C_Master_Receive_DMA+0x204>)
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	0023      	movs	r3, r4
 8014c06:	f001 fcc5 	bl	8016594 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2240      	movs	r2, #64	@ 0x40
 8014c0e:	2100      	movs	r1, #0
 8014c10:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2102      	movs	r1, #2
 8014c16:	0018      	movs	r0, r3
 8014c18:	f001 fcf6 	bl	8016608 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	e000      	b.n	8014c22 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014c20:	2302      	movs	r3, #2
  }
}
 8014c22:	0018      	movs	r0, r3
 8014c24:	46bd      	mov	sp, r7
 8014c26:	b006      	add	sp, #24
 8014c28:	bdb0      	pop	{r4, r5, r7, pc}
 8014c2a:	46c0      	nop			@ (mov r8, r8)
 8014c2c:	ffff0000 	.word	0xffff0000
 8014c30:	080152b1 	.word	0x080152b1
 8014c34:	08016485 	.word	0x08016485
 8014c38:	08016525 	.word	0x08016525
 8014c3c:	80002400 	.word	0x80002400
 8014c40:	08014e05 	.word	0x08014e05

08014c44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	699b      	ldr	r3, [r3, #24]
 8014c52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d005      	beq.n	8014c70 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c68:	68ba      	ldr	r2, [r7, #8]
 8014c6a:	68f9      	ldr	r1, [r7, #12]
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	4798      	blx	r3
  }
}
 8014c70:	46c0      	nop			@ (mov r8, r8)
 8014c72:	46bd      	mov	sp, r7
 8014c74:	b004      	add	sp, #16
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b086      	sub	sp, #24
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	699b      	ldr	r3, [r3, #24]
 8014c86:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	0a1b      	lsrs	r3, r3, #8
 8014c94:	001a      	movs	r2, r3
 8014c96:	2301      	movs	r3, #1
 8014c98:	4013      	ands	r3, r2
 8014c9a:	d010      	beq.n	8014cbe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	09db      	lsrs	r3, r3, #7
 8014ca0:	001a      	movs	r2, r3
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8014ca6:	d00a      	beq.n	8014cbe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cac:	2201      	movs	r2, #1
 8014cae:	431a      	orrs	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	2280      	movs	r2, #128	@ 0x80
 8014cba:	0052      	lsls	r2, r2, #1
 8014cbc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	0a9b      	lsrs	r3, r3, #10
 8014cc2:	001a      	movs	r2, r3
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	4013      	ands	r3, r2
 8014cc8:	d010      	beq.n	8014cec <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	09db      	lsrs	r3, r3, #7
 8014cce:	001a      	movs	r2, r3
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014cd4:	d00a      	beq.n	8014cec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cda:	2208      	movs	r2, #8
 8014cdc:	431a      	orrs	r2, r3
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	2280      	movs	r2, #128	@ 0x80
 8014ce8:	00d2      	lsls	r2, r2, #3
 8014cea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	0a5b      	lsrs	r3, r3, #9
 8014cf0:	001a      	movs	r2, r3
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	4013      	ands	r3, r2
 8014cf6:	d010      	beq.n	8014d1a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	09db      	lsrs	r3, r3, #7
 8014cfc:	001a      	movs	r2, r3
 8014cfe:	2301      	movs	r3, #1
 8014d00:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014d02:	d00a      	beq.n	8014d1a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d08:	2202      	movs	r2, #2
 8014d0a:	431a      	orrs	r2, r3
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2280      	movs	r2, #128	@ 0x80
 8014d16:	0092      	lsls	r2, r2, #2
 8014d18:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d1e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	220b      	movs	r2, #11
 8014d24:	4013      	ands	r3, r2
 8014d26:	d005      	beq.n	8014d34 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	0011      	movs	r1, r2
 8014d2e:	0018      	movs	r0, r3
 8014d30:	f001 fa0a 	bl	8016148 <I2C_ITError>
  }
}
 8014d34:	46c0      	nop			@ (mov r8, r8)
 8014d36:	46bd      	mov	sp, r7
 8014d38:	b006      	add	sp, #24
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014d44:	46c0      	nop			@ (mov r8, r8)
 8014d46:	46bd      	mov	sp, r7
 8014d48:	b002      	add	sp, #8
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014d54:	46c0      	nop			@ (mov r8, r8)
 8014d56:	46bd      	mov	sp, r7
 8014d58:	b002      	add	sp, #8
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014d64:	46c0      	nop			@ (mov r8, r8)
 8014d66:	46bd      	mov	sp, r7
 8014d68:	b002      	add	sp, #8
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014d74:	46c0      	nop			@ (mov r8, r8)
 8014d76:	46bd      	mov	sp, r7
 8014d78:	b002      	add	sp, #8
 8014d7a:	bd80      	pop	{r7, pc}

08014d7c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	0008      	movs	r0, r1
 8014d86:	0011      	movs	r1, r2
 8014d88:	1cfb      	adds	r3, r7, #3
 8014d8a:	1c02      	adds	r2, r0, #0
 8014d8c:	701a      	strb	r2, [r3, #0]
 8014d8e:	003b      	movs	r3, r7
 8014d90:	1c0a      	adds	r2, r1, #0
 8014d92:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014d94:	46c0      	nop			@ (mov r8, r8)
 8014d96:	46bd      	mov	sp, r7
 8014d98:	b002      	add	sp, #8
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8014da4:	46c0      	nop			@ (mov r8, r8)
 8014da6:	46bd      	mov	sp, r7
 8014da8:	b002      	add	sp, #8
 8014daa:	bd80      	pop	{r7, pc}

08014dac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8014db4:	46c0      	nop			@ (mov r8, r8)
 8014db6:	46bd      	mov	sp, r7
 8014db8:	b002      	add	sp, #8
 8014dba:	bd80      	pop	{r7, pc}

08014dbc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8014dc4:	46c0      	nop			@ (mov r8, r8)
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	b002      	add	sp, #8
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8014dd4:	46c0      	nop			@ (mov r8, r8)
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	b002      	add	sp, #8
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8014de4:	46c0      	nop			@ (mov r8, r8)
 8014de6:	46bd      	mov	sp, r7
 8014de8:	b002      	add	sp, #8
 8014dea:	bd80      	pop	{r7, pc}

08014dec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2241      	movs	r2, #65	@ 0x41
 8014df8:	5c9b      	ldrb	r3, [r3, r2]
 8014dfa:	b2db      	uxtb	r3, r3
}
 8014dfc:	0018      	movs	r0, r3
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	b002      	add	sp, #8
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014e04:	b590      	push	{r4, r7, lr}
 8014e06:	b089      	sub	sp, #36	@ 0x24
 8014e08:	af02      	add	r7, sp, #8
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2240      	movs	r2, #64	@ 0x40
 8014e18:	5c9b      	ldrb	r3, [r3, r2]
 8014e1a:	2b01      	cmp	r3, #1
 8014e1c:	d101      	bne.n	8014e22 <I2C_Master_ISR_IT+0x1e>
 8014e1e:	2302      	movs	r3, #2
 8014e20:	e12b      	b.n	801507a <I2C_Master_ISR_IT+0x276>
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	2240      	movs	r2, #64	@ 0x40
 8014e26:	2101      	movs	r1, #1
 8014e28:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	091b      	lsrs	r3, r3, #4
 8014e2e:	001a      	movs	r2, r3
 8014e30:	2301      	movs	r3, #1
 8014e32:	4013      	ands	r3, r2
 8014e34:	d014      	beq.n	8014e60 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	091b      	lsrs	r3, r3, #4
 8014e3a:	001a      	movs	r2, r3
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014e40:	d00e      	beq.n	8014e60 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2210      	movs	r2, #16
 8014e48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e4e:	2204      	movs	r2, #4
 8014e50:	431a      	orrs	r2, r3
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	0018      	movs	r0, r3
 8014e5a:	f001 faa0 	bl	801639e <I2C_Flush_TXDR>
 8014e5e:	e0f5      	b.n	801504c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	089b      	lsrs	r3, r3, #2
 8014e64:	001a      	movs	r2, r3
 8014e66:	2301      	movs	r3, #1
 8014e68:	4013      	ands	r3, r2
 8014e6a:	d023      	beq.n	8014eb4 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	089b      	lsrs	r3, r3, #2
 8014e70:	001a      	movs	r2, r3
 8014e72:	2301      	movs	r3, #1
 8014e74:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014e76:	d01d      	beq.n	8014eb4 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	2204      	movs	r2, #4
 8014e7c:	4393      	bics	r3, r2
 8014e7e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e8a:	b2d2      	uxtb	r2, r2
 8014e8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e92:	1c5a      	adds	r2, r3, #1
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	3b01      	subs	r3, #1
 8014eac:	b29a      	uxth	r2, r3
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014eb2:	e0cb      	b.n	801504c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	085b      	lsrs	r3, r3, #1
 8014eb8:	001a      	movs	r2, r3
 8014eba:	2301      	movs	r3, #1
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	d01e      	beq.n	8014efe <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	085b      	lsrs	r3, r3, #1
 8014ec4:	001a      	movs	r2, r3
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014eca:	d018      	beq.n	8014efe <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ed0:	781a      	ldrb	r2, [r3, #0]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014edc:	1c5a      	adds	r2, r3, #1
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ee6:	3b01      	subs	r3, #1
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ef2:	b29b      	uxth	r3, r3
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	b29a      	uxth	r2, r3
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014efc:	e0a6      	b.n	801504c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	09db      	lsrs	r3, r3, #7
 8014f02:	001a      	movs	r2, r3
 8014f04:	2301      	movs	r3, #1
 8014f06:	4013      	ands	r3, r2
 8014f08:	d100      	bne.n	8014f0c <I2C_Master_ISR_IT+0x108>
 8014f0a:	e06b      	b.n	8014fe4 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	099b      	lsrs	r3, r3, #6
 8014f10:	001a      	movs	r2, r3
 8014f12:	2301      	movs	r3, #1
 8014f14:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8014f16:	d065      	beq.n	8014fe4 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d04a      	beq.n	8014fb8 <I2C_Master_ISR_IT+0x1b4>
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d146      	bne.n	8014fb8 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	b29a      	uxth	r2, r3
 8014f32:	2112      	movs	r1, #18
 8014f34:	187b      	adds	r3, r7, r1
 8014f36:	0592      	lsls	r2, r2, #22
 8014f38:	0d92      	lsrs	r2, r2, #22
 8014f3a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	2bff      	cmp	r3, #255	@ 0xff
 8014f44:	d910      	bls.n	8014f68 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	22ff      	movs	r2, #255	@ 0xff
 8014f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f50:	b2da      	uxtb	r2, r3
 8014f52:	2380      	movs	r3, #128	@ 0x80
 8014f54:	045c      	lsls	r4, r3, #17
 8014f56:	187b      	adds	r3, r7, r1
 8014f58:	8819      	ldrh	r1, [r3, #0]
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	9300      	str	r3, [sp, #0]
 8014f60:	0023      	movs	r3, r4
 8014f62:	f001 fb17 	bl	8016594 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014f66:	e03c      	b.n	8014fe2 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f6c:	b29a      	uxth	r2, r3
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f76:	4a43      	ldr	r2, [pc, #268]	@ (8015084 <I2C_Master_ISR_IT+0x280>)
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d00e      	beq.n	8014f9a <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f80:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014f86:	2312      	movs	r3, #18
 8014f88:	18fb      	adds	r3, r7, r3
 8014f8a:	8819      	ldrh	r1, [r3, #0]
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	2300      	movs	r3, #0
 8014f90:	9300      	str	r3, [sp, #0]
 8014f92:	0023      	movs	r3, r4
 8014f94:	f001 fafe 	bl	8016594 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014f98:	e023      	b.n	8014fe2 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f9e:	b2da      	uxtb	r2, r3
 8014fa0:	2380      	movs	r3, #128	@ 0x80
 8014fa2:	049c      	lsls	r4, r3, #18
 8014fa4:	2312      	movs	r3, #18
 8014fa6:	18fb      	adds	r3, r7, r3
 8014fa8:	8819      	ldrh	r1, [r3, #0]
 8014faa:	68f8      	ldr	r0, [r7, #12]
 8014fac:	2300      	movs	r3, #0
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	0023      	movs	r3, r4
 8014fb2:	f001 faef 	bl	8016594 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014fb6:	e014      	b.n	8014fe2 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	685a      	ldr	r2, [r3, #4]
 8014fbe:	2380      	movs	r3, #128	@ 0x80
 8014fc0:	049b      	lsls	r3, r3, #18
 8014fc2:	401a      	ands	r2, r3
 8014fc4:	2380      	movs	r3, #128	@ 0x80
 8014fc6:	049b      	lsls	r3, r3, #18
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d004      	beq.n	8014fd6 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	0018      	movs	r0, r3
 8014fd0:	f000 fd56 	bl	8015a80 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014fd4:	e03a      	b.n	801504c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2140      	movs	r1, #64	@ 0x40
 8014fda:	0018      	movs	r0, r3
 8014fdc:	f001 f8b4 	bl	8016148 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014fe0:	e034      	b.n	801504c <I2C_Master_ISR_IT+0x248>
 8014fe2:	e033      	b.n	801504c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	099b      	lsrs	r3, r3, #6
 8014fe8:	001a      	movs	r2, r3
 8014fea:	2301      	movs	r3, #1
 8014fec:	4013      	ands	r3, r2
 8014fee:	d02d      	beq.n	801504c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	099b      	lsrs	r3, r3, #6
 8014ff4:	001a      	movs	r2, r3
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014ffa:	d027      	beq.n	801504c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015000:	b29b      	uxth	r3, r3
 8015002:	2b00      	cmp	r3, #0
 8015004:	d11d      	bne.n	8015042 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	685a      	ldr	r2, [r3, #4]
 801500c:	2380      	movs	r3, #128	@ 0x80
 801500e:	049b      	lsls	r3, r3, #18
 8015010:	401a      	ands	r2, r3
 8015012:	2380      	movs	r3, #128	@ 0x80
 8015014:	049b      	lsls	r3, r3, #18
 8015016:	429a      	cmp	r2, r3
 8015018:	d018      	beq.n	801504c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801501e:	4a19      	ldr	r2, [pc, #100]	@ (8015084 <I2C_Master_ISR_IT+0x280>)
 8015020:	4293      	cmp	r3, r2
 8015022:	d109      	bne.n	8015038 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	685a      	ldr	r2, [r3, #4]
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2180      	movs	r1, #128	@ 0x80
 8015030:	01c9      	lsls	r1, r1, #7
 8015032:	430a      	orrs	r2, r1
 8015034:	605a      	str	r2, [r3, #4]
 8015036:	e009      	b.n	801504c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	0018      	movs	r0, r3
 801503c:	f000 fd20 	bl	8015a80 <I2C_ITMasterSeqCplt>
 8015040:	e004      	b.n	801504c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2140      	movs	r1, #64	@ 0x40
 8015046:	0018      	movs	r0, r3
 8015048:	f001 f87e 	bl	8016148 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	095b      	lsrs	r3, r3, #5
 8015050:	001a      	movs	r2, r3
 8015052:	2301      	movs	r3, #1
 8015054:	4013      	ands	r3, r2
 8015056:	d00b      	beq.n	8015070 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	095b      	lsrs	r3, r3, #5
 801505c:	001a      	movs	r2, r3
 801505e:	2301      	movs	r3, #1
 8015060:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015062:	d005      	beq.n	8015070 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8015064:	697a      	ldr	r2, [r7, #20]
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	0011      	movs	r1, r2
 801506a:	0018      	movs	r0, r3
 801506c:	f000 fdb0 	bl	8015bd0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2240      	movs	r2, #64	@ 0x40
 8015074:	2100      	movs	r1, #0
 8015076:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015078:	2300      	movs	r3, #0
}
 801507a:	0018      	movs	r0, r3
 801507c:	46bd      	mov	sp, r7
 801507e:	b007      	add	sp, #28
 8015080:	bd90      	pop	{r4, r7, pc}
 8015082:	46c0      	nop			@ (mov r8, r8)
 8015084:	ffff0000 	.word	0xffff0000

08015088 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b086      	sub	sp, #24
 801508c:	af00      	add	r7, sp, #0
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015098:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2240      	movs	r2, #64	@ 0x40
 80150a2:	5c9b      	ldrb	r3, [r3, r2]
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d101      	bne.n	80150ac <I2C_Slave_ISR_IT+0x24>
 80150a8:	2302      	movs	r3, #2
 80150aa:	e0fb      	b.n	80152a4 <I2C_Slave_ISR_IT+0x21c>
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2240      	movs	r2, #64	@ 0x40
 80150b0:	2101      	movs	r1, #1
 80150b2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	095b      	lsrs	r3, r3, #5
 80150b8:	001a      	movs	r2, r3
 80150ba:	2301      	movs	r3, #1
 80150bc:	4013      	ands	r3, r2
 80150be:	d00c      	beq.n	80150da <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	095b      	lsrs	r3, r3, #5
 80150c4:	001a      	movs	r2, r3
 80150c6:	2301      	movs	r3, #1
 80150c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80150ca:	d006      	beq.n	80150da <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80150cc:	693a      	ldr	r2, [r7, #16]
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	0011      	movs	r1, r2
 80150d2:	0018      	movs	r0, r3
 80150d4:	f000 fe4e 	bl	8015d74 <I2C_ITSlaveCplt>
 80150d8:	e0df      	b.n	801529a <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	091b      	lsrs	r3, r3, #4
 80150de:	001a      	movs	r2, r3
 80150e0:	2301      	movs	r3, #1
 80150e2:	4013      	ands	r3, r2
 80150e4:	d054      	beq.n	8015190 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	091b      	lsrs	r3, r3, #4
 80150ea:	001a      	movs	r2, r3
 80150ec:	2301      	movs	r3, #1
 80150ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80150f0:	d04e      	beq.n	8015190 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d12d      	bne.n	8015158 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2241      	movs	r2, #65	@ 0x41
 8015100:	5c9b      	ldrb	r3, [r3, r2]
 8015102:	b2db      	uxtb	r3, r3
 8015104:	2b28      	cmp	r3, #40	@ 0x28
 8015106:	d10b      	bne.n	8015120 <I2C_Slave_ISR_IT+0x98>
 8015108:	697a      	ldr	r2, [r7, #20]
 801510a:	2380      	movs	r3, #128	@ 0x80
 801510c:	049b      	lsls	r3, r3, #18
 801510e:	429a      	cmp	r2, r3
 8015110:	d106      	bne.n	8015120 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015112:	693a      	ldr	r2, [r7, #16]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	0011      	movs	r1, r2
 8015118:	0018      	movs	r0, r3
 801511a:	f000 ffbb 	bl	8016094 <I2C_ITListenCplt>
 801511e:	e036      	b.n	801518e <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2241      	movs	r2, #65	@ 0x41
 8015124:	5c9b      	ldrb	r3, [r3, r2]
 8015126:	b2db      	uxtb	r3, r3
 8015128:	2b29      	cmp	r3, #41	@ 0x29
 801512a:	d110      	bne.n	801514e <I2C_Slave_ISR_IT+0xc6>
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	4a5f      	ldr	r2, [pc, #380]	@ (80152ac <I2C_Slave_ISR_IT+0x224>)
 8015130:	4293      	cmp	r3, r2
 8015132:	d00c      	beq.n	801514e <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	2210      	movs	r2, #16
 801513a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	0018      	movs	r0, r3
 8015140:	f001 f92d 	bl	801639e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	0018      	movs	r0, r3
 8015148:	f000 fcdc 	bl	8015b04 <I2C_ITSlaveSeqCplt>
 801514c:	e01f      	b.n	801518e <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	2210      	movs	r2, #16
 8015154:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8015156:	e09d      	b.n	8015294 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2210      	movs	r2, #16
 801515e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015164:	2204      	movs	r2, #4
 8015166:	431a      	orrs	r2, r3
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d005      	beq.n	801517e <I2C_Slave_ISR_IT+0xf6>
 8015172:	697a      	ldr	r2, [r7, #20]
 8015174:	2380      	movs	r3, #128	@ 0x80
 8015176:	045b      	lsls	r3, r3, #17
 8015178:	429a      	cmp	r2, r3
 801517a:	d000      	beq.n	801517e <I2C_Slave_ISR_IT+0xf6>
 801517c:	e08a      	b.n	8015294 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	0011      	movs	r1, r2
 8015186:	0018      	movs	r0, r3
 8015188:	f000 ffde 	bl	8016148 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801518c:	e082      	b.n	8015294 <I2C_Slave_ISR_IT+0x20c>
 801518e:	e081      	b.n	8015294 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	089b      	lsrs	r3, r3, #2
 8015194:	001a      	movs	r2, r3
 8015196:	2301      	movs	r3, #1
 8015198:	4013      	ands	r3, r2
 801519a:	d031      	beq.n	8015200 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	089b      	lsrs	r3, r3, #2
 80151a0:	001a      	movs	r2, r3
 80151a2:	2301      	movs	r3, #1
 80151a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80151a6:	d02b      	beq.n	8015200 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d018      	beq.n	80151e4 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151bc:	b2d2      	uxtb	r2, r2
 80151be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151c4:	1c5a      	adds	r2, r3, #1
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80151ce:	3b01      	subs	r3, #1
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151da:	b29b      	uxth	r3, r3
 80151dc:	3b01      	subs	r3, #1
 80151de:	b29a      	uxth	r2, r3
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d154      	bne.n	8015298 <I2C_Slave_ISR_IT+0x210>
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	4a2e      	ldr	r2, [pc, #184]	@ (80152ac <I2C_Slave_ISR_IT+0x224>)
 80151f2:	4293      	cmp	r3, r2
 80151f4:	d050      	beq.n	8015298 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	0018      	movs	r0, r3
 80151fa:	f000 fc83 	bl	8015b04 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80151fe:	e04b      	b.n	8015298 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	08db      	lsrs	r3, r3, #3
 8015204:	001a      	movs	r2, r3
 8015206:	2301      	movs	r3, #1
 8015208:	4013      	ands	r3, r2
 801520a:	d00c      	beq.n	8015226 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	08db      	lsrs	r3, r3, #3
 8015210:	001a      	movs	r2, r3
 8015212:	2301      	movs	r3, #1
 8015214:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015216:	d006      	beq.n	8015226 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8015218:	693a      	ldr	r2, [r7, #16]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	0011      	movs	r1, r2
 801521e:	0018      	movs	r0, r3
 8015220:	f000 fb8a 	bl	8015938 <I2C_ITAddrCplt>
 8015224:	e039      	b.n	801529a <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015226:	693b      	ldr	r3, [r7, #16]
 8015228:	085b      	lsrs	r3, r3, #1
 801522a:	001a      	movs	r2, r3
 801522c:	2301      	movs	r3, #1
 801522e:	4013      	ands	r3, r2
 8015230:	d033      	beq.n	801529a <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	085b      	lsrs	r3, r3, #1
 8015236:	001a      	movs	r2, r3
 8015238:	2301      	movs	r3, #1
 801523a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801523c:	d02d      	beq.n	801529a <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015242:	b29b      	uxth	r3, r3
 8015244:	2b00      	cmp	r3, #0
 8015246:	d018      	beq.n	801527a <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801524c:	781a      	ldrb	r2, [r3, #0]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015258:	1c5a      	adds	r2, r3, #1
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015262:	b29b      	uxth	r3, r3
 8015264:	3b01      	subs	r3, #1
 8015266:	b29a      	uxth	r2, r3
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015270:	3b01      	subs	r3, #1
 8015272:	b29a      	uxth	r2, r3
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015278:	e00f      	b.n	801529a <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801527a:	697a      	ldr	r2, [r7, #20]
 801527c:	2380      	movs	r3, #128	@ 0x80
 801527e:	045b      	lsls	r3, r3, #17
 8015280:	429a      	cmp	r2, r3
 8015282:	d002      	beq.n	801528a <I2C_Slave_ISR_IT+0x202>
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d107      	bne.n	801529a <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	0018      	movs	r0, r3
 801528e:	f000 fc39 	bl	8015b04 <I2C_ITSlaveSeqCplt>
 8015292:	e002      	b.n	801529a <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8015294:	46c0      	nop			@ (mov r8, r8)
 8015296:	e000      	b.n	801529a <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8015298:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2240      	movs	r2, #64	@ 0x40
 801529e:	2100      	movs	r1, #0
 80152a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	0018      	movs	r0, r3
 80152a6:	46bd      	mov	sp, r7
 80152a8:	b006      	add	sp, #24
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	ffff0000 	.word	0xffff0000

080152b0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80152b0:	b590      	push	{r4, r7, lr}
 80152b2:	b089      	sub	sp, #36	@ 0x24
 80152b4:	af02      	add	r7, sp, #8
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2240      	movs	r2, #64	@ 0x40
 80152c0:	5c9b      	ldrb	r3, [r3, r2]
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d101      	bne.n	80152ca <I2C_Master_ISR_DMA+0x1a>
 80152c6:	2302      	movs	r3, #2
 80152c8:	e0f7      	b.n	80154ba <I2C_Master_ISR_DMA+0x20a>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	2240      	movs	r2, #64	@ 0x40
 80152ce:	2101      	movs	r1, #1
 80152d0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	091b      	lsrs	r3, r3, #4
 80152d6:	001a      	movs	r2, r3
 80152d8:	2301      	movs	r3, #1
 80152da:	4013      	ands	r3, r2
 80152dc:	d019      	beq.n	8015312 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	091b      	lsrs	r3, r3, #4
 80152e2:	001a      	movs	r2, r3
 80152e4:	2301      	movs	r3, #1
 80152e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80152e8:	d013      	beq.n	8015312 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2210      	movs	r2, #16
 80152f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152f6:	2204      	movs	r2, #4
 80152f8:	431a      	orrs	r2, r3
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2120      	movs	r1, #32
 8015302:	0018      	movs	r0, r3
 8015304:	f001 f980 	bl	8016608 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	0018      	movs	r0, r3
 801530c:	f001 f847 	bl	801639e <I2C_Flush_TXDR>
 8015310:	e0ce      	b.n	80154b0 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	09db      	lsrs	r3, r3, #7
 8015316:	001a      	movs	r2, r3
 8015318:	2301      	movs	r3, #1
 801531a:	4013      	ands	r3, r2
 801531c:	d100      	bne.n	8015320 <I2C_Master_ISR_DMA+0x70>
 801531e:	e07e      	b.n	801541e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	099b      	lsrs	r3, r3, #6
 8015324:	001a      	movs	r2, r3
 8015326:	2301      	movs	r3, #1
 8015328:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801532a:	d100      	bne.n	801532e <I2C_Master_ISR_DMA+0x7e>
 801532c:	e077      	b.n	801541e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2140      	movs	r1, #64	@ 0x40
 801533a:	438a      	bics	r2, r1
 801533c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015342:	b29b      	uxth	r3, r3
 8015344:	2b00      	cmp	r3, #0
 8015346:	d055      	beq.n	80153f4 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	b29a      	uxth	r2, r3
 8015350:	2312      	movs	r3, #18
 8015352:	18fb      	adds	r3, r7, r3
 8015354:	0592      	lsls	r2, r2, #22
 8015356:	0d92      	lsrs	r2, r2, #22
 8015358:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801535e:	b29b      	uxth	r3, r3
 8015360:	2bff      	cmp	r3, #255	@ 0xff
 8015362:	d906      	bls.n	8015372 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	22ff      	movs	r2, #255	@ 0xff
 8015368:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801536a:	2380      	movs	r3, #128	@ 0x80
 801536c:	045b      	lsls	r3, r3, #17
 801536e:	617b      	str	r3, [r7, #20]
 8015370:	e010      	b.n	8015394 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015376:	b29a      	uxth	r2, r3
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015380:	4a50      	ldr	r2, [pc, #320]	@ (80154c4 <I2C_Master_ISR_DMA+0x214>)
 8015382:	4293      	cmp	r3, r2
 8015384:	d003      	beq.n	801538e <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801538a:	617b      	str	r3, [r7, #20]
 801538c:	e002      	b.n	8015394 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801538e:	2380      	movs	r3, #128	@ 0x80
 8015390:	049b      	lsls	r3, r3, #18
 8015392:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015398:	b2da      	uxtb	r2, r3
 801539a:	697c      	ldr	r4, [r7, #20]
 801539c:	2312      	movs	r3, #18
 801539e:	18fb      	adds	r3, r7, r3
 80153a0:	8819      	ldrh	r1, [r3, #0]
 80153a2:	68f8      	ldr	r0, [r7, #12]
 80153a4:	2300      	movs	r3, #0
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	0023      	movs	r3, r4
 80153aa:	f001 f8f3 	bl	8016594 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153b2:	b29a      	uxth	r2, r3
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153b8:	1ad3      	subs	r3, r2, r3
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2241      	movs	r2, #65	@ 0x41
 80153c4:	5c9b      	ldrb	r3, [r3, r2]
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	2b22      	cmp	r3, #34	@ 0x22
 80153ca:	d109      	bne.n	80153e0 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	681a      	ldr	r2, [r3, #0]
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2180      	movs	r1, #128	@ 0x80
 80153d8:	0209      	lsls	r1, r1, #8
 80153da:	430a      	orrs	r2, r1
 80153dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80153de:	e067      	b.n	80154b0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	681a      	ldr	r2, [r3, #0]
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2180      	movs	r1, #128	@ 0x80
 80153ec:	01c9      	lsls	r1, r1, #7
 80153ee:	430a      	orrs	r2, r1
 80153f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80153f2:	e05d      	b.n	80154b0 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	685a      	ldr	r2, [r3, #4]
 80153fa:	2380      	movs	r3, #128	@ 0x80
 80153fc:	049b      	lsls	r3, r3, #18
 80153fe:	401a      	ands	r2, r3
 8015400:	2380      	movs	r3, #128	@ 0x80
 8015402:	049b      	lsls	r3, r3, #18
 8015404:	429a      	cmp	r2, r3
 8015406:	d004      	beq.n	8015412 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	0018      	movs	r0, r3
 801540c:	f000 fb38 	bl	8015a80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8015410:	e04e      	b.n	80154b0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	2140      	movs	r1, #64	@ 0x40
 8015416:	0018      	movs	r0, r3
 8015418:	f000 fe96 	bl	8016148 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801541c:	e048      	b.n	80154b0 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	099b      	lsrs	r3, r3, #6
 8015422:	001a      	movs	r2, r3
 8015424:	2301      	movs	r3, #1
 8015426:	4013      	ands	r3, r2
 8015428:	d02e      	beq.n	8015488 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	099b      	lsrs	r3, r3, #6
 801542e:	001a      	movs	r2, r3
 8015430:	2301      	movs	r3, #1
 8015432:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015434:	d028      	beq.n	8015488 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801543a:	b29b      	uxth	r3, r3
 801543c:	2b00      	cmp	r3, #0
 801543e:	d11d      	bne.n	801547c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	685a      	ldr	r2, [r3, #4]
 8015446:	2380      	movs	r3, #128	@ 0x80
 8015448:	049b      	lsls	r3, r3, #18
 801544a:	401a      	ands	r2, r3
 801544c:	2380      	movs	r3, #128	@ 0x80
 801544e:	049b      	lsls	r3, r3, #18
 8015450:	429a      	cmp	r2, r3
 8015452:	d02c      	beq.n	80154ae <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015458:	4a1a      	ldr	r2, [pc, #104]	@ (80154c4 <I2C_Master_ISR_DMA+0x214>)
 801545a:	4293      	cmp	r3, r2
 801545c:	d109      	bne.n	8015472 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	685a      	ldr	r2, [r3, #4]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	2180      	movs	r1, #128	@ 0x80
 801546a:	01c9      	lsls	r1, r1, #7
 801546c:	430a      	orrs	r2, r1
 801546e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8015470:	e01d      	b.n	80154ae <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	0018      	movs	r0, r3
 8015476:	f000 fb03 	bl	8015a80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801547a:	e018      	b.n	80154ae <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	2140      	movs	r1, #64	@ 0x40
 8015480:	0018      	movs	r0, r3
 8015482:	f000 fe61 	bl	8016148 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8015486:	e012      	b.n	80154ae <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	095b      	lsrs	r3, r3, #5
 801548c:	001a      	movs	r2, r3
 801548e:	2301      	movs	r3, #1
 8015490:	4013      	ands	r3, r2
 8015492:	d00d      	beq.n	80154b0 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	095b      	lsrs	r3, r3, #5
 8015498:	001a      	movs	r2, r3
 801549a:	2301      	movs	r3, #1
 801549c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801549e:	d007      	beq.n	80154b0 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80154a0:	68ba      	ldr	r2, [r7, #8]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	0011      	movs	r1, r2
 80154a6:	0018      	movs	r0, r3
 80154a8:	f000 fb92 	bl	8015bd0 <I2C_ITMasterCplt>
 80154ac:	e000      	b.n	80154b0 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80154ae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	2240      	movs	r2, #64	@ 0x40
 80154b4:	2100      	movs	r1, #0
 80154b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80154b8:	2300      	movs	r3, #0
}
 80154ba:	0018      	movs	r0, r3
 80154bc:	46bd      	mov	sp, r7
 80154be:	b007      	add	sp, #28
 80154c0:	bd90      	pop	{r4, r7, pc}
 80154c2:	46c0      	nop			@ (mov r8, r8)
 80154c4:	ffff0000 	.word	0xffff0000

080154c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80154c8:	b590      	push	{r4, r7, lr}
 80154ca:	b089      	sub	sp, #36	@ 0x24
 80154cc:	af02      	add	r7, sp, #8
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80154d4:	4b9a      	ldr	r3, [pc, #616]	@ (8015740 <I2C_Mem_ISR_DMA+0x278>)
 80154d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2240      	movs	r2, #64	@ 0x40
 80154dc:	5c9b      	ldrb	r3, [r3, r2]
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d101      	bne.n	80154e6 <I2C_Mem_ISR_DMA+0x1e>
 80154e2:	2302      	movs	r3, #2
 80154e4:	e127      	b.n	8015736 <I2C_Mem_ISR_DMA+0x26e>
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2240      	movs	r2, #64	@ 0x40
 80154ea:	2101      	movs	r1, #1
 80154ec:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80154ee:	68bb      	ldr	r3, [r7, #8]
 80154f0:	091b      	lsrs	r3, r3, #4
 80154f2:	001a      	movs	r2, r3
 80154f4:	2301      	movs	r3, #1
 80154f6:	4013      	ands	r3, r2
 80154f8:	d019      	beq.n	801552e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	091b      	lsrs	r3, r3, #4
 80154fe:	001a      	movs	r2, r3
 8015500:	2301      	movs	r3, #1
 8015502:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015504:	d013      	beq.n	801552e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2210      	movs	r2, #16
 801550c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015512:	2204      	movs	r2, #4
 8015514:	431a      	orrs	r2, r3
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	2120      	movs	r1, #32
 801551e:	0018      	movs	r0, r3
 8015520:	f001 f872 	bl	8016608 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	0018      	movs	r0, r3
 8015528:	f000 ff39 	bl	801639e <I2C_Flush_TXDR>
 801552c:	e0fe      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	085b      	lsrs	r3, r3, #1
 8015532:	001a      	movs	r2, r3
 8015534:	2301      	movs	r3, #1
 8015536:	4013      	ands	r3, r2
 8015538:	d00f      	beq.n	801555a <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	085b      	lsrs	r3, r3, #1
 801553e:	001a      	movs	r2, r3
 8015540:	2301      	movs	r3, #1
 8015542:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015544:	d009      	beq.n	801555a <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	68fa      	ldr	r2, [r7, #12]
 801554c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801554e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	2201      	movs	r2, #1
 8015554:	4252      	negs	r2, r2
 8015556:	651a      	str	r2, [r3, #80]	@ 0x50
 8015558:	e0e8      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	09db      	lsrs	r3, r3, #7
 801555e:	001a      	movs	r2, r3
 8015560:	2301      	movs	r3, #1
 8015562:	4013      	ands	r3, r2
 8015564:	d065      	beq.n	8015632 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	099b      	lsrs	r3, r3, #6
 801556a:	001a      	movs	r2, r3
 801556c:	2301      	movs	r3, #1
 801556e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015570:	d05f      	beq.n	8015632 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	2101      	movs	r1, #1
 8015576:	0018      	movs	r0, r3
 8015578:	f001 f8d0 	bl	801671c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	2110      	movs	r1, #16
 8015580:	0018      	movs	r0, r3
 8015582:	f001 f841 	bl	8016608 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801558a:	b29b      	uxth	r3, r3
 801558c:	2b00      	cmp	r3, #0
 801558e:	d04a      	beq.n	8015626 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015594:	b29b      	uxth	r3, r3
 8015596:	2bff      	cmp	r3, #255	@ 0xff
 8015598:	d910      	bls.n	80155bc <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	22ff      	movs	r2, #255	@ 0xff
 801559e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155a4:	b299      	uxth	r1, r3
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155aa:	b2da      	uxtb	r2, r3
 80155ac:	2380      	movs	r3, #128	@ 0x80
 80155ae:	045b      	lsls	r3, r3, #17
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	2400      	movs	r4, #0
 80155b4:	9400      	str	r4, [sp, #0]
 80155b6:	f000 ffed 	bl	8016594 <I2C_TransferConfig>
 80155ba:	e011      	b.n	80155e0 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155ca:	b299      	uxth	r1, r3
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	2380      	movs	r3, #128	@ 0x80
 80155d4:	049b      	lsls	r3, r3, #18
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	2400      	movs	r4, #0
 80155da:	9400      	str	r4, [sp, #0]
 80155dc:	f000 ffda 	bl	8016594 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155ea:	1ad3      	subs	r3, r2, r3
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2241      	movs	r2, #65	@ 0x41
 80155f6:	5c9b      	ldrb	r3, [r3, r2]
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	2b22      	cmp	r3, #34	@ 0x22
 80155fc:	d109      	bne.n	8015612 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	681a      	ldr	r2, [r3, #0]
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2180      	movs	r1, #128	@ 0x80
 801560a:	0209      	lsls	r1, r1, #8
 801560c:	430a      	orrs	r2, r1
 801560e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015610:	e08c      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2180      	movs	r1, #128	@ 0x80
 801561e:	01c9      	lsls	r1, r1, #7
 8015620:	430a      	orrs	r2, r1
 8015622:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015624:	e082      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	2140      	movs	r1, #64	@ 0x40
 801562a:	0018      	movs	r0, r3
 801562c:	f000 fd8c 	bl	8016148 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015630:	e07c      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015632:	68bb      	ldr	r3, [r7, #8]
 8015634:	099b      	lsrs	r3, r3, #6
 8015636:	001a      	movs	r2, r3
 8015638:	2301      	movs	r3, #1
 801563a:	4013      	ands	r3, r2
 801563c:	d064      	beq.n	8015708 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	099b      	lsrs	r3, r3, #6
 8015642:	001a      	movs	r2, r3
 8015644:	2301      	movs	r3, #1
 8015646:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015648:	d05e      	beq.n	8015708 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	2101      	movs	r1, #1
 801564e:	0018      	movs	r0, r3
 8015650:	f001 f864 	bl	801671c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2110      	movs	r1, #16
 8015658:	0018      	movs	r0, r3
 801565a:	f000 ffd5 	bl	8016608 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	2241      	movs	r2, #65	@ 0x41
 8015662:	5c9b      	ldrb	r3, [r3, r2]
 8015664:	b2db      	uxtb	r3, r3
 8015666:	2b22      	cmp	r3, #34	@ 0x22
 8015668:	d101      	bne.n	801566e <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
 801566a:	4b36      	ldr	r3, [pc, #216]	@ (8015744 <I2C_Mem_ISR_DMA+0x27c>)
 801566c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015672:	b29b      	uxth	r3, r3
 8015674:	2bff      	cmp	r3, #255	@ 0xff
 8015676:	d911      	bls.n	801569c <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	22ff      	movs	r2, #255	@ 0xff
 801567c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015682:	b299      	uxth	r1, r3
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015688:	b2da      	uxtb	r2, r3
 801568a:	2380      	movs	r3, #128	@ 0x80
 801568c:	045c      	lsls	r4, r3, #17
 801568e:	68f8      	ldr	r0, [r7, #12]
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	9300      	str	r3, [sp, #0]
 8015694:	0023      	movs	r3, r4
 8015696:	f000 ff7d 	bl	8016594 <I2C_TransferConfig>
 801569a:	e012      	b.n	80156c2 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156a0:	b29a      	uxth	r2, r3
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156aa:	b299      	uxth	r1, r3
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156b0:	b2da      	uxtb	r2, r3
 80156b2:	2380      	movs	r3, #128	@ 0x80
 80156b4:	049c      	lsls	r4, r3, #18
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	0023      	movs	r3, r4
 80156be:	f000 ff69 	bl	8016594 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156cc:	1ad3      	subs	r3, r2, r3
 80156ce:	b29a      	uxth	r2, r3
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2241      	movs	r2, #65	@ 0x41
 80156d8:	5c9b      	ldrb	r3, [r3, r2]
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	2b22      	cmp	r3, #34	@ 0x22
 80156de:	d109      	bne.n	80156f4 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	2180      	movs	r1, #128	@ 0x80
 80156ec:	0209      	lsls	r1, r1, #8
 80156ee:	430a      	orrs	r2, r1
 80156f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80156f2:	e01b      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	681a      	ldr	r2, [r3, #0]
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2180      	movs	r1, #128	@ 0x80
 8015700:	01c9      	lsls	r1, r1, #7
 8015702:	430a      	orrs	r2, r1
 8015704:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015706:	e011      	b.n	801572c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	095b      	lsrs	r3, r3, #5
 801570c:	001a      	movs	r2, r3
 801570e:	2301      	movs	r3, #1
 8015710:	4013      	ands	r3, r2
 8015712:	d00b      	beq.n	801572c <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	095b      	lsrs	r3, r3, #5
 8015718:	001a      	movs	r2, r3
 801571a:	2301      	movs	r3, #1
 801571c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801571e:	d005      	beq.n	801572c <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8015720:	68ba      	ldr	r2, [r7, #8]
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	0011      	movs	r1, r2
 8015726:	0018      	movs	r0, r3
 8015728:	f000 fa52 	bl	8015bd0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2240      	movs	r2, #64	@ 0x40
 8015730:	2100      	movs	r1, #0
 8015732:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015734:	2300      	movs	r3, #0
}
 8015736:	0018      	movs	r0, r3
 8015738:	46bd      	mov	sp, r7
 801573a:	b007      	add	sp, #28
 801573c:	bd90      	pop	{r4, r7, pc}
 801573e:	46c0      	nop			@ (mov r8, r8)
 8015740:	80002000 	.word	0x80002000
 8015744:	80002400 	.word	0x80002400

08015748 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b088      	sub	sp, #32
 801574c:	af00      	add	r7, sp, #0
 801574e:	60f8      	str	r0, [r7, #12]
 8015750:	60b9      	str	r1, [r7, #8]
 8015752:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015758:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801575a:	2300      	movs	r3, #0
 801575c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2240      	movs	r2, #64	@ 0x40
 8015762:	5c9b      	ldrb	r3, [r3, r2]
 8015764:	2b01      	cmp	r3, #1
 8015766:	d101      	bne.n	801576c <I2C_Slave_ISR_DMA+0x24>
 8015768:	2302      	movs	r3, #2
 801576a:	e0de      	b.n	801592a <I2C_Slave_ISR_DMA+0x1e2>
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2240      	movs	r2, #64	@ 0x40
 8015770:	2101      	movs	r1, #1
 8015772:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	095b      	lsrs	r3, r3, #5
 8015778:	001a      	movs	r2, r3
 801577a:	2301      	movs	r3, #1
 801577c:	4013      	ands	r3, r2
 801577e:	d00c      	beq.n	801579a <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	095b      	lsrs	r3, r3, #5
 8015784:	001a      	movs	r2, r3
 8015786:	2301      	movs	r3, #1
 8015788:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801578a:	d006      	beq.n	801579a <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 801578c:	68ba      	ldr	r2, [r7, #8]
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	0011      	movs	r1, r2
 8015792:	0018      	movs	r0, r3
 8015794:	f000 faee 	bl	8015d74 <I2C_ITSlaveCplt>
 8015798:	e0c2      	b.n	8015920 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	091b      	lsrs	r3, r3, #4
 801579e:	001a      	movs	r2, r3
 80157a0:	2301      	movs	r3, #1
 80157a2:	4013      	ands	r3, r2
 80157a4:	d100      	bne.n	80157a8 <I2C_Slave_ISR_DMA+0x60>
 80157a6:	e0a9      	b.n	80158fc <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	091b      	lsrs	r3, r3, #4
 80157ac:	001a      	movs	r2, r3
 80157ae:	2301      	movs	r3, #1
 80157b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80157b2:	d100      	bne.n	80157b6 <I2C_Slave_ISR_DMA+0x6e>
 80157b4:	e0a2      	b.n	80158fc <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	0b9b      	lsrs	r3, r3, #14
 80157ba:	001a      	movs	r2, r3
 80157bc:	2301      	movs	r3, #1
 80157be:	4013      	ands	r3, r2
 80157c0:	d106      	bne.n	80157d0 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	0bdb      	lsrs	r3, r3, #15
 80157c6:	001a      	movs	r2, r3
 80157c8:	2301      	movs	r3, #1
 80157ca:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80157cc:	d100      	bne.n	80157d0 <I2C_Slave_ISR_DMA+0x88>
 80157ce:	e08e      	b.n	80158ee <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d00d      	beq.n	80157f4 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	0bdb      	lsrs	r3, r3, #15
 80157dc:	001a      	movs	r2, r3
 80157de:	2301      	movs	r3, #1
 80157e0:	4013      	ands	r3, r2
 80157e2:	d007      	beq.n	80157f4 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	685b      	ldr	r3, [r3, #4]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d101      	bne.n	80157f4 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
 80157f0:	2301      	movs	r3, #1
 80157f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d00d      	beq.n	8015818 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	0b9b      	lsrs	r3, r3, #14
 8015800:	001a      	movs	r2, r3
 8015802:	2301      	movs	r3, #1
 8015804:	4013      	ands	r3, r2
 8015806:	d007      	beq.n	8015818 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d101      	bne.n	8015818 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
 8015814:	2301      	movs	r3, #1
 8015816:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d12d      	bne.n	801587a <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	2241      	movs	r2, #65	@ 0x41
 8015822:	5c9b      	ldrb	r3, [r3, r2]
 8015824:	b2db      	uxtb	r3, r3
 8015826:	2b28      	cmp	r3, #40	@ 0x28
 8015828:	d10b      	bne.n	8015842 <I2C_Slave_ISR_DMA+0xfa>
 801582a:	69ba      	ldr	r2, [r7, #24]
 801582c:	2380      	movs	r3, #128	@ 0x80
 801582e:	049b      	lsls	r3, r3, #18
 8015830:	429a      	cmp	r2, r3
 8015832:	d106      	bne.n	8015842 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8015834:	68ba      	ldr	r2, [r7, #8]
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	0011      	movs	r1, r2
 801583a:	0018      	movs	r0, r3
 801583c:	f000 fc2a 	bl	8016094 <I2C_ITListenCplt>
 8015840:	e054      	b.n	80158ec <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2241      	movs	r2, #65	@ 0x41
 8015846:	5c9b      	ldrb	r3, [r3, r2]
 8015848:	b2db      	uxtb	r3, r3
 801584a:	2b29      	cmp	r3, #41	@ 0x29
 801584c:	d110      	bne.n	8015870 <I2C_Slave_ISR_DMA+0x128>
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	4a38      	ldr	r2, [pc, #224]	@ (8015934 <I2C_Slave_ISR_DMA+0x1ec>)
 8015852:	4293      	cmp	r3, r2
 8015854:	d00c      	beq.n	8015870 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	2210      	movs	r2, #16
 801585c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	0018      	movs	r0, r3
 8015862:	f000 fd9c 	bl	801639e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	0018      	movs	r0, r3
 801586a:	f000 f94b 	bl	8015b04 <I2C_ITSlaveSeqCplt>
 801586e:	e03d      	b.n	80158ec <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2210      	movs	r2, #16
 8015876:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8015878:	e03e      	b.n	80158f8 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	2210      	movs	r2, #16
 8015880:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015886:	2204      	movs	r2, #4
 8015888:	431a      	orrs	r2, r3
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 801588e:	2317      	movs	r3, #23
 8015890:	18fb      	adds	r3, r7, r3
 8015892:	68fa      	ldr	r2, [r7, #12]
 8015894:	2141      	movs	r1, #65	@ 0x41
 8015896:	5c52      	ldrb	r2, [r2, r1]
 8015898:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d004      	beq.n	80158aa <I2C_Slave_ISR_DMA+0x162>
 80158a0:	69ba      	ldr	r2, [r7, #24]
 80158a2:	2380      	movs	r3, #128	@ 0x80
 80158a4:	045b      	lsls	r3, r3, #17
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d126      	bne.n	80158f8 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80158aa:	2217      	movs	r2, #23
 80158ac:	18bb      	adds	r3, r7, r2
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b21      	cmp	r3, #33	@ 0x21
 80158b2:	d003      	beq.n	80158bc <I2C_Slave_ISR_DMA+0x174>
 80158b4:	18bb      	adds	r3, r7, r2
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	2b29      	cmp	r3, #41	@ 0x29
 80158ba:	d103      	bne.n	80158c4 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	2221      	movs	r2, #33	@ 0x21
 80158c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80158c2:	e00b      	b.n	80158dc <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80158c4:	2217      	movs	r2, #23
 80158c6:	18bb      	adds	r3, r7, r2
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	2b22      	cmp	r3, #34	@ 0x22
 80158cc:	d003      	beq.n	80158d6 <I2C_Slave_ISR_DMA+0x18e>
 80158ce:	18bb      	adds	r3, r7, r2
 80158d0:	781b      	ldrb	r3, [r3, #0]
 80158d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80158d4:	d102      	bne.n	80158dc <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2222      	movs	r2, #34	@ 0x22
 80158da:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	0011      	movs	r1, r2
 80158e4:	0018      	movs	r0, r3
 80158e6:	f000 fc2f 	bl	8016148 <I2C_ITError>
      if (treatdmanack == 1U)
 80158ea:	e005      	b.n	80158f8 <I2C_Slave_ISR_DMA+0x1b0>
 80158ec:	e004      	b.n	80158f8 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2210      	movs	r2, #16
 80158f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80158f6:	e013      	b.n	8015920 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
 80158f8:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80158fa:	e011      	b.n	8015920 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	08db      	lsrs	r3, r3, #3
 8015900:	001a      	movs	r2, r3
 8015902:	2301      	movs	r3, #1
 8015904:	4013      	ands	r3, r2
 8015906:	d00b      	beq.n	8015920 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	08db      	lsrs	r3, r3, #3
 801590c:	001a      	movs	r2, r3
 801590e:	2301      	movs	r3, #1
 8015910:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015912:	d005      	beq.n	8015920 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	0011      	movs	r1, r2
 801591a:	0018      	movs	r0, r3
 801591c:	f000 f80c 	bl	8015938 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2240      	movs	r2, #64	@ 0x40
 8015924:	2100      	movs	r1, #0
 8015926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015928:	2300      	movs	r3, #0
}
 801592a:	0018      	movs	r0, r3
 801592c:	46bd      	mov	sp, r7
 801592e:	b008      	add	sp, #32
 8015930:	bd80      	pop	{r7, pc}
 8015932:	46c0      	nop			@ (mov r8, r8)
 8015934:	ffff0000 	.word	0xffff0000

08015938 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015938:	b5b0      	push	{r4, r5, r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2241      	movs	r2, #65	@ 0x41
 8015946:	5c9b      	ldrb	r3, [r3, r2]
 8015948:	b2db      	uxtb	r3, r3
 801594a:	001a      	movs	r2, r3
 801594c:	2328      	movs	r3, #40	@ 0x28
 801594e:	4013      	ands	r3, r2
 8015950:	2b28      	cmp	r3, #40	@ 0x28
 8015952:	d000      	beq.n	8015956 <I2C_ITAddrCplt+0x1e>
 8015954:	e088      	b.n	8015a68 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	699b      	ldr	r3, [r3, #24]
 801595c:	0c1b      	lsrs	r3, r3, #16
 801595e:	b2da      	uxtb	r2, r3
 8015960:	250f      	movs	r5, #15
 8015962:	197b      	adds	r3, r7, r5
 8015964:	2101      	movs	r1, #1
 8015966:	400a      	ands	r2, r1
 8015968:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	699b      	ldr	r3, [r3, #24]
 8015970:	0c1b      	lsrs	r3, r3, #16
 8015972:	b29a      	uxth	r2, r3
 8015974:	200c      	movs	r0, #12
 8015976:	183b      	adds	r3, r7, r0
 8015978:	21fe      	movs	r1, #254	@ 0xfe
 801597a:	400a      	ands	r2, r1
 801597c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	689b      	ldr	r3, [r3, #8]
 8015984:	b29a      	uxth	r2, r3
 8015986:	240a      	movs	r4, #10
 8015988:	193b      	adds	r3, r7, r4
 801598a:	0592      	lsls	r2, r2, #22
 801598c:	0d92      	lsrs	r2, r2, #22
 801598e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	68db      	ldr	r3, [r3, #12]
 8015996:	b29a      	uxth	r2, r3
 8015998:	2308      	movs	r3, #8
 801599a:	18fb      	adds	r3, r7, r3
 801599c:	21fe      	movs	r1, #254	@ 0xfe
 801599e:	400a      	ands	r2, r1
 80159a0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	2b02      	cmp	r3, #2
 80159a8:	d148      	bne.n	8015a3c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80159aa:	0021      	movs	r1, r4
 80159ac:	187b      	adds	r3, r7, r1
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	09db      	lsrs	r3, r3, #7
 80159b2:	b29a      	uxth	r2, r3
 80159b4:	183b      	adds	r3, r7, r0
 80159b6:	881b      	ldrh	r3, [r3, #0]
 80159b8:	4053      	eors	r3, r2
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	001a      	movs	r2, r3
 80159be:	2306      	movs	r3, #6
 80159c0:	4013      	ands	r3, r2
 80159c2:	d120      	bne.n	8015a06 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80159c4:	183b      	adds	r3, r7, r0
 80159c6:	187a      	adds	r2, r7, r1
 80159c8:	8812      	ldrh	r2, [r2, #0]
 80159ca:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80159d0:	1c5a      	adds	r2, r3, #1
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d14c      	bne.n	8015a78 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2200      	movs	r2, #0
 80159e2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2208      	movs	r2, #8
 80159ea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2240      	movs	r2, #64	@ 0x40
 80159f0:	2100      	movs	r1, #0
 80159f2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80159f4:	183b      	adds	r3, r7, r0
 80159f6:	881a      	ldrh	r2, [r3, #0]
 80159f8:	197b      	adds	r3, r7, r5
 80159fa:	7819      	ldrb	r1, [r3, #0]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	0018      	movs	r0, r3
 8015a00:	f7ff f9bc 	bl	8014d7c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8015a04:	e038      	b.n	8015a78 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8015a06:	240c      	movs	r4, #12
 8015a08:	193b      	adds	r3, r7, r4
 8015a0a:	2208      	movs	r2, #8
 8015a0c:	18ba      	adds	r2, r7, r2
 8015a0e:	8812      	ldrh	r2, [r2, #0]
 8015a10:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015a12:	2380      	movs	r3, #128	@ 0x80
 8015a14:	021a      	lsls	r2, r3, #8
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	0011      	movs	r1, r2
 8015a1a:	0018      	movs	r0, r3
 8015a1c:	f000 fe7e 	bl	801671c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2240      	movs	r2, #64	@ 0x40
 8015a24:	2100      	movs	r1, #0
 8015a26:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015a28:	193b      	adds	r3, r7, r4
 8015a2a:	881a      	ldrh	r2, [r3, #0]
 8015a2c:	230f      	movs	r3, #15
 8015a2e:	18fb      	adds	r3, r7, r3
 8015a30:	7819      	ldrb	r1, [r3, #0]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	0018      	movs	r0, r3
 8015a36:	f7ff f9a1 	bl	8014d7c <HAL_I2C_AddrCallback>
}
 8015a3a:	e01d      	b.n	8015a78 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015a3c:	2380      	movs	r3, #128	@ 0x80
 8015a3e:	021a      	lsls	r2, r3, #8
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	0011      	movs	r1, r2
 8015a44:	0018      	movs	r0, r3
 8015a46:	f000 fe69 	bl	801671c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2240      	movs	r2, #64	@ 0x40
 8015a4e:	2100      	movs	r1, #0
 8015a50:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015a52:	230c      	movs	r3, #12
 8015a54:	18fb      	adds	r3, r7, r3
 8015a56:	881a      	ldrh	r2, [r3, #0]
 8015a58:	230f      	movs	r3, #15
 8015a5a:	18fb      	adds	r3, r7, r3
 8015a5c:	7819      	ldrb	r1, [r3, #0]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	0018      	movs	r0, r3
 8015a62:	f7ff f98b 	bl	8014d7c <HAL_I2C_AddrCallback>
}
 8015a66:	e007      	b.n	8015a78 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	2208      	movs	r2, #8
 8015a6e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2240      	movs	r2, #64	@ 0x40
 8015a74:	2100      	movs	r1, #0
 8015a76:	5499      	strb	r1, [r3, r2]
}
 8015a78:	46c0      	nop			@ (mov r8, r8)
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	b004      	add	sp, #16
 8015a7e:	bdb0      	pop	{r4, r5, r7, pc}

08015a80 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2242      	movs	r2, #66	@ 0x42
 8015a8c:	2100      	movs	r1, #0
 8015a8e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2241      	movs	r2, #65	@ 0x41
 8015a94:	5c9b      	ldrb	r3, [r3, r2]
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	2b21      	cmp	r3, #33	@ 0x21
 8015a9a:	d117      	bne.n	8015acc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2241      	movs	r2, #65	@ 0x41
 8015aa0:	2120      	movs	r1, #32
 8015aa2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2211      	movs	r2, #17
 8015aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2200      	movs	r2, #0
 8015aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2101      	movs	r1, #1
 8015ab4:	0018      	movs	r0, r3
 8015ab6:	f000 fe31 	bl	801671c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2240      	movs	r2, #64	@ 0x40
 8015abe:	2100      	movs	r1, #0
 8015ac0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f7ff f939 	bl	8014d3c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015aca:	e016      	b.n	8015afa <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2241      	movs	r2, #65	@ 0x41
 8015ad0:	2120      	movs	r1, #32
 8015ad2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2212      	movs	r2, #18
 8015ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2102      	movs	r1, #2
 8015ae4:	0018      	movs	r0, r3
 8015ae6:	f000 fe19 	bl	801671c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2240      	movs	r2, #64	@ 0x40
 8015aee:	2100      	movs	r1, #0
 8015af0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	0018      	movs	r0, r3
 8015af6:	f7ff f929 	bl	8014d4c <HAL_I2C_MasterRxCpltCallback>
}
 8015afa:	46c0      	nop			@ (mov r8, r8)
 8015afc:	46bd      	mov	sp, r7
 8015afe:	b002      	add	sp, #8
 8015b00:	bd80      	pop	{r7, pc}
	...

08015b04 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2242      	movs	r2, #66	@ 0x42
 8015b18:	2100      	movs	r1, #0
 8015b1a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	0b9b      	lsrs	r3, r3, #14
 8015b20:	001a      	movs	r2, r3
 8015b22:	2301      	movs	r3, #1
 8015b24:	4013      	ands	r3, r2
 8015b26:	d008      	beq.n	8015b3a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	4925      	ldr	r1, [pc, #148]	@ (8015bc8 <I2C_ITSlaveSeqCplt+0xc4>)
 8015b34:	400a      	ands	r2, r1
 8015b36:	601a      	str	r2, [r3, #0]
 8015b38:	e00d      	b.n	8015b56 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	0bdb      	lsrs	r3, r3, #15
 8015b3e:	001a      	movs	r2, r3
 8015b40:	2301      	movs	r3, #1
 8015b42:	4013      	ands	r3, r2
 8015b44:	d007      	beq.n	8015b56 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	491e      	ldr	r1, [pc, #120]	@ (8015bcc <I2C_ITSlaveSeqCplt+0xc8>)
 8015b52:	400a      	ands	r2, r1
 8015b54:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2241      	movs	r2, #65	@ 0x41
 8015b5a:	5c9b      	ldrb	r3, [r3, r2]
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	2b29      	cmp	r3, #41	@ 0x29
 8015b60:	d114      	bne.n	8015b8c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2241      	movs	r2, #65	@ 0x41
 8015b66:	2128      	movs	r1, #40	@ 0x28
 8015b68:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2221      	movs	r2, #33	@ 0x21
 8015b6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2101      	movs	r1, #1
 8015b74:	0018      	movs	r0, r3
 8015b76:	f000 fdd1 	bl	801671c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2240      	movs	r2, #64	@ 0x40
 8015b7e:	2100      	movs	r1, #0
 8015b80:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	0018      	movs	r0, r3
 8015b86:	f7ff f8e9 	bl	8014d5c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015b8a:	e019      	b.n	8015bc0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	2241      	movs	r2, #65	@ 0x41
 8015b90:	5c9b      	ldrb	r3, [r3, r2]
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b96:	d113      	bne.n	8015bc0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2241      	movs	r2, #65	@ 0x41
 8015b9c:	2128      	movs	r1, #40	@ 0x28
 8015b9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2222      	movs	r2, #34	@ 0x22
 8015ba4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2102      	movs	r1, #2
 8015baa:	0018      	movs	r0, r3
 8015bac:	f000 fdb6 	bl	801671c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2240      	movs	r2, #64	@ 0x40
 8015bb4:	2100      	movs	r1, #0
 8015bb6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	0018      	movs	r0, r3
 8015bbc:	f7ff f8d6 	bl	8014d6c <HAL_I2C_SlaveRxCpltCallback>
}
 8015bc0:	46c0      	nop			@ (mov r8, r8)
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	b004      	add	sp, #16
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	ffffbfff 	.word	0xffffbfff
 8015bcc:	ffff7fff 	.word	0xffff7fff

08015bd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2220      	movs	r2, #32
 8015be4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2241      	movs	r2, #65	@ 0x41
 8015bea:	5c9b      	ldrb	r3, [r3, r2]
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b21      	cmp	r3, #33	@ 0x21
 8015bf0:	d108      	bne.n	8015c04 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2101      	movs	r1, #1
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	f000 fd90 	bl	801671c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2211      	movs	r2, #17
 8015c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8015c02:	e00d      	b.n	8015c20 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2241      	movs	r2, #65	@ 0x41
 8015c08:	5c9b      	ldrb	r3, [r3, r2]
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	2b22      	cmp	r3, #34	@ 0x22
 8015c0e:	d107      	bne.n	8015c20 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2102      	movs	r1, #2
 8015c14:	0018      	movs	r0, r3
 8015c16:	f000 fd81 	bl	801671c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2212      	movs	r2, #18
 8015c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	685a      	ldr	r2, [r3, #4]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4950      	ldr	r1, [pc, #320]	@ (8015d6c <I2C_ITMasterCplt+0x19c>)
 8015c2c:	400a      	ands	r2, r1
 8015c2e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	4a4d      	ldr	r2, [pc, #308]	@ (8015d70 <I2C_ITMasterCplt+0x1a0>)
 8015c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	091b      	lsrs	r3, r3, #4
 8015c40:	001a      	movs	r2, r3
 8015c42:	2301      	movs	r3, #1
 8015c44:	4013      	ands	r3, r2
 8015c46:	d009      	beq.n	8015c5c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	2210      	movs	r2, #16
 8015c4e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c54:	2204      	movs	r2, #4
 8015c56:	431a      	orrs	r2, r3
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2241      	movs	r2, #65	@ 0x41
 8015c60:	5c9b      	ldrb	r3, [r3, r2]
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	2b60      	cmp	r3, #96	@ 0x60
 8015c66:	d10b      	bne.n	8015c80 <I2C_ITMasterCplt+0xb0>
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	089b      	lsrs	r3, r3, #2
 8015c6c:	001a      	movs	r2, r3
 8015c6e:	2301      	movs	r3, #1
 8015c70:	4013      	ands	r3, r2
 8015c72:	d005      	beq.n	8015c80 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8015c7e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	0018      	movs	r0, r3
 8015c84:	f000 fb8b 	bl	801639e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c8c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2241      	movs	r2, #65	@ 0x41
 8015c92:	5c9b      	ldrb	r3, [r3, r2]
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	2b60      	cmp	r3, #96	@ 0x60
 8015c98:	d002      	beq.n	8015ca0 <I2C_ITMasterCplt+0xd0>
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d007      	beq.n	8015cb0 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	0011      	movs	r1, r2
 8015ca8:	0018      	movs	r0, r3
 8015caa:	f000 fa4d 	bl	8016148 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015cae:	e058      	b.n	8015d62 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2241      	movs	r2, #65	@ 0x41
 8015cb4:	5c9b      	ldrb	r3, [r3, r2]
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	2b21      	cmp	r3, #33	@ 0x21
 8015cba:	d126      	bne.n	8015d0a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2241      	movs	r2, #65	@ 0x41
 8015cc0:	2120      	movs	r1, #32
 8015cc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2242      	movs	r2, #66	@ 0x42
 8015cce:	5c9b      	ldrb	r3, [r3, r2]
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	2b40      	cmp	r3, #64	@ 0x40
 8015cd4:	d10c      	bne.n	8015cf0 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2242      	movs	r2, #66	@ 0x42
 8015cda:	2100      	movs	r1, #0
 8015cdc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2240      	movs	r2, #64	@ 0x40
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	0018      	movs	r0, r3
 8015cea:	f7ff f85f 	bl	8014dac <HAL_I2C_MemTxCpltCallback>
}
 8015cee:	e038      	b.n	8015d62 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2242      	movs	r2, #66	@ 0x42
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2240      	movs	r2, #64	@ 0x40
 8015cfc:	2100      	movs	r1, #0
 8015cfe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	0018      	movs	r0, r3
 8015d04:	f7ff f81a 	bl	8014d3c <HAL_I2C_MasterTxCpltCallback>
}
 8015d08:	e02b      	b.n	8015d62 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2241      	movs	r2, #65	@ 0x41
 8015d0e:	5c9b      	ldrb	r3, [r3, r2]
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	2b22      	cmp	r3, #34	@ 0x22
 8015d14:	d125      	bne.n	8015d62 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2241      	movs	r2, #65	@ 0x41
 8015d1a:	2120      	movs	r1, #32
 8015d1c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2200      	movs	r2, #0
 8015d22:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	2242      	movs	r2, #66	@ 0x42
 8015d28:	5c9b      	ldrb	r3, [r3, r2]
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	2b40      	cmp	r3, #64	@ 0x40
 8015d2e:	d10c      	bne.n	8015d4a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2242      	movs	r2, #66	@ 0x42
 8015d34:	2100      	movs	r1, #0
 8015d36:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2240      	movs	r2, #64	@ 0x40
 8015d3c:	2100      	movs	r1, #0
 8015d3e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	0018      	movs	r0, r3
 8015d44:	f7ff f83a 	bl	8014dbc <HAL_I2C_MemRxCpltCallback>
}
 8015d48:	e00b      	b.n	8015d62 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2242      	movs	r2, #66	@ 0x42
 8015d4e:	2100      	movs	r1, #0
 8015d50:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2240      	movs	r2, #64	@ 0x40
 8015d56:	2100      	movs	r1, #0
 8015d58:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	0018      	movs	r0, r3
 8015d5e:	f7fe fff5 	bl	8014d4c <HAL_I2C_MasterRxCpltCallback>
}
 8015d62:	46c0      	nop			@ (mov r8, r8)
 8015d64:	46bd      	mov	sp, r7
 8015d66:	b006      	add	sp, #24
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	46c0      	nop			@ (mov r8, r8)
 8015d6c:	fe00e800 	.word	0xfe00e800
 8015d70:	ffff0000 	.word	0xffff0000

08015d74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d8e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8015d90:	200b      	movs	r0, #11
 8015d92:	183b      	adds	r3, r7, r0
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	2141      	movs	r1, #65	@ 0x41
 8015d98:	5c52      	ldrb	r2, [r2, r1]
 8015d9a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	2220      	movs	r2, #32
 8015da2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015da4:	183b      	adds	r3, r7, r0
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	2b21      	cmp	r3, #33	@ 0x21
 8015daa:	d003      	beq.n	8015db4 <I2C_ITSlaveCplt+0x40>
 8015dac:	183b      	adds	r3, r7, r0
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	2b29      	cmp	r3, #41	@ 0x29
 8015db2:	d109      	bne.n	8015dc8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8015db4:	4ab0      	ldr	r2, [pc, #704]	@ (8016078 <I2C_ITSlaveCplt+0x304>)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	0011      	movs	r1, r2
 8015dba:	0018      	movs	r0, r3
 8015dbc:	f000 fcae 	bl	801671c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2221      	movs	r2, #33	@ 0x21
 8015dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8015dc6:	e020      	b.n	8015e0a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015dc8:	220b      	movs	r2, #11
 8015dca:	18bb      	adds	r3, r7, r2
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	2b22      	cmp	r3, #34	@ 0x22
 8015dd0:	d003      	beq.n	8015dda <I2C_ITSlaveCplt+0x66>
 8015dd2:	18bb      	adds	r3, r7, r2
 8015dd4:	781b      	ldrb	r3, [r3, #0]
 8015dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8015dd8:	d109      	bne.n	8015dee <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8015dda:	4aa8      	ldr	r2, [pc, #672]	@ (801607c <I2C_ITSlaveCplt+0x308>)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	0011      	movs	r1, r2
 8015de0:	0018      	movs	r0, r3
 8015de2:	f000 fc9b 	bl	801671c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2222      	movs	r2, #34	@ 0x22
 8015dea:	631a      	str	r2, [r3, #48]	@ 0x30
 8015dec:	e00d      	b.n	8015e0a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8015dee:	230b      	movs	r3, #11
 8015df0:	18fb      	adds	r3, r7, r3
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	2b28      	cmp	r3, #40	@ 0x28
 8015df6:	d108      	bne.n	8015e0a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8015df8:	4aa1      	ldr	r2, [pc, #644]	@ (8016080 <I2C_ITSlaveCplt+0x30c>)
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	0011      	movs	r1, r2
 8015dfe:	0018      	movs	r0, r3
 8015e00:	f000 fc8c 	bl	801671c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2200      	movs	r2, #0
 8015e08:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	685a      	ldr	r2, [r3, #4]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	2180      	movs	r1, #128	@ 0x80
 8015e16:	0209      	lsls	r1, r1, #8
 8015e18:	430a      	orrs	r2, r1
 8015e1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	685a      	ldr	r2, [r3, #4]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	4997      	ldr	r1, [pc, #604]	@ (8016084 <I2C_ITSlaveCplt+0x310>)
 8015e28:	400a      	ands	r2, r1
 8015e2a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	0018      	movs	r0, r3
 8015e30:	f000 fab5 	bl	801639e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	0b9b      	lsrs	r3, r3, #14
 8015e38:	001a      	movs	r2, r3
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	4013      	ands	r3, r2
 8015e3e:	d013      	beq.n	8015e68 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	681a      	ldr	r2, [r3, #0]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	498f      	ldr	r1, [pc, #572]	@ (8016088 <I2C_ITSlaveCplt+0x314>)
 8015e4c:	400a      	ands	r2, r1
 8015e4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d020      	beq.n	8015e9a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015e66:	e018      	b.n	8015e9a <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	0bdb      	lsrs	r3, r3, #15
 8015e6c:	001a      	movs	r2, r3
 8015e6e:	2301      	movs	r3, #1
 8015e70:	4013      	ands	r3, r2
 8015e72:	d012      	beq.n	8015e9a <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	4983      	ldr	r1, [pc, #524]	@ (801608c <I2C_ITSlaveCplt+0x318>)
 8015e80:	400a      	ands	r2, r1
 8015e82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d006      	beq.n	8015e9a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	b29a      	uxth	r2, r3
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	089b      	lsrs	r3, r3, #2
 8015e9e:	001a      	movs	r2, r3
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	4013      	ands	r3, r2
 8015ea4:	d020      	beq.n	8015ee8 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	2204      	movs	r2, #4
 8015eaa:	4393      	bics	r3, r2
 8015eac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eb8:	b2d2      	uxtb	r2, r2
 8015eba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec0:	1c5a      	adds	r2, r3, #1
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00c      	beq.n	8015ee8 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ed2:	3b01      	subs	r3, #1
 8015ed4:	b29a      	uxth	r2, r3
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	3b01      	subs	r3, #1
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d005      	beq.n	8015efe <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ef6:	2204      	movs	r2, #4
 8015ef8:	431a      	orrs	r2, r3
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	091b      	lsrs	r3, r3, #4
 8015f02:	001a      	movs	r2, r3
 8015f04:	2301      	movs	r3, #1
 8015f06:	4013      	ands	r3, r2
 8015f08:	d051      	beq.n	8015fae <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	091b      	lsrs	r3, r3, #4
 8015f0e:	001a      	movs	r2, r3
 8015f10:	2301      	movs	r3, #1
 8015f12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015f14:	d04b      	beq.n	8015fae <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f1a:	b29b      	uxth	r3, r3
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d12d      	bne.n	8015f7c <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2241      	movs	r2, #65	@ 0x41
 8015f24:	5c9b      	ldrb	r3, [r3, r2]
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	2b28      	cmp	r3, #40	@ 0x28
 8015f2a:	d10b      	bne.n	8015f44 <I2C_ITSlaveCplt+0x1d0>
 8015f2c:	68fa      	ldr	r2, [r7, #12]
 8015f2e:	2380      	movs	r3, #128	@ 0x80
 8015f30:	049b      	lsls	r3, r3, #18
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d106      	bne.n	8015f44 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015f36:	697a      	ldr	r2, [r7, #20]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	0011      	movs	r1, r2
 8015f3c:	0018      	movs	r0, r3
 8015f3e:	f000 f8a9 	bl	8016094 <I2C_ITListenCplt>
 8015f42:	e034      	b.n	8015fae <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2241      	movs	r2, #65	@ 0x41
 8015f48:	5c9b      	ldrb	r3, [r3, r2]
 8015f4a:	b2db      	uxtb	r3, r3
 8015f4c:	2b29      	cmp	r3, #41	@ 0x29
 8015f4e:	d110      	bne.n	8015f72 <I2C_ITSlaveCplt+0x1fe>
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	4a4f      	ldr	r2, [pc, #316]	@ (8016090 <I2C_ITSlaveCplt+0x31c>)
 8015f54:	4293      	cmp	r3, r2
 8015f56:	d00c      	beq.n	8015f72 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	2210      	movs	r2, #16
 8015f5e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	0018      	movs	r0, r3
 8015f64:	f000 fa1b 	bl	801639e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	0018      	movs	r0, r3
 8015f6c:	f7ff fdca 	bl	8015b04 <I2C_ITSlaveSeqCplt>
 8015f70:	e01d      	b.n	8015fae <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	2210      	movs	r2, #16
 8015f78:	61da      	str	r2, [r3, #28]
 8015f7a:	e018      	b.n	8015fae <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2210      	movs	r2, #16
 8015f82:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f88:	2204      	movs	r2, #4
 8015f8a:	431a      	orrs	r2, r3
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d004      	beq.n	8015fa0 <I2C_ITSlaveCplt+0x22c>
 8015f96:	68fa      	ldr	r2, [r7, #12]
 8015f98:	2380      	movs	r3, #128	@ 0x80
 8015f9a:	045b      	lsls	r3, r3, #17
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d106      	bne.n	8015fae <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	0011      	movs	r1, r2
 8015fa8:	0018      	movs	r0, r3
 8015faa:	f000 f8cd 	bl	8016148 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2242      	movs	r2, #66	@ 0x42
 8015fb2:	2100      	movs	r1, #0
 8015fb4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d013      	beq.n	8015fec <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	0011      	movs	r1, r2
 8015fcc:	0018      	movs	r0, r3
 8015fce:	f000 f8bb 	bl	8016148 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2241      	movs	r2, #65	@ 0x41
 8015fd6:	5c9b      	ldrb	r3, [r3, r2]
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2b28      	cmp	r3, #40	@ 0x28
 8015fdc:	d147      	bne.n	801606e <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8015fde:	697a      	ldr	r2, [r7, #20]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	0011      	movs	r1, r2
 8015fe4:	0018      	movs	r0, r3
 8015fe6:	f000 f855 	bl	8016094 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015fea:	e040      	b.n	801606e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ff0:	4a27      	ldr	r2, [pc, #156]	@ (8016090 <I2C_ITSlaveCplt+0x31c>)
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	d016      	beq.n	8016024 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	0018      	movs	r0, r3
 8015ffa:	f7ff fd83 	bl	8015b04 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	4a23      	ldr	r2, [pc, #140]	@ (8016090 <I2C_ITSlaveCplt+0x31c>)
 8016002:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2241      	movs	r2, #65	@ 0x41
 8016008:	2120      	movs	r1, #32
 801600a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2200      	movs	r2, #0
 8016010:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2240      	movs	r2, #64	@ 0x40
 8016016:	2100      	movs	r1, #0
 8016018:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	0018      	movs	r0, r3
 801601e:	f7fe febd 	bl	8014d9c <HAL_I2C_ListenCpltCallback>
}
 8016022:	e024      	b.n	801606e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2241      	movs	r2, #65	@ 0x41
 8016028:	5c9b      	ldrb	r3, [r3, r2]
 801602a:	b2db      	uxtb	r3, r3
 801602c:	2b22      	cmp	r3, #34	@ 0x22
 801602e:	d10f      	bne.n	8016050 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2241      	movs	r2, #65	@ 0x41
 8016034:	2120      	movs	r1, #32
 8016036:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2200      	movs	r2, #0
 801603c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2240      	movs	r2, #64	@ 0x40
 8016042:	2100      	movs	r1, #0
 8016044:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	0018      	movs	r0, r3
 801604a:	f7fe fe8f 	bl	8014d6c <HAL_I2C_SlaveRxCpltCallback>
}
 801604e:	e00e      	b.n	801606e <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2241      	movs	r2, #65	@ 0x41
 8016054:	2120      	movs	r1, #32
 8016056:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2240      	movs	r2, #64	@ 0x40
 8016062:	2100      	movs	r1, #0
 8016064:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	0018      	movs	r0, r3
 801606a:	f7fe fe77 	bl	8014d5c <HAL_I2C_SlaveTxCpltCallback>
}
 801606e:	46c0      	nop			@ (mov r8, r8)
 8016070:	46bd      	mov	sp, r7
 8016072:	b006      	add	sp, #24
 8016074:	bd80      	pop	{r7, pc}
 8016076:	46c0      	nop			@ (mov r8, r8)
 8016078:	00008001 	.word	0x00008001
 801607c:	00008002 	.word	0x00008002
 8016080:	00008003 	.word	0x00008003
 8016084:	fe00e800 	.word	0xfe00e800
 8016088:	ffffbfff 	.word	0xffffbfff
 801608c:	ffff7fff 	.word	0xffff7fff
 8016090:	ffff0000 	.word	0xffff0000

08016094 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	4a27      	ldr	r2, [pc, #156]	@ (8016140 <I2C_ITListenCplt+0xac>)
 80160a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2200      	movs	r2, #0
 80160a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2241      	movs	r2, #65	@ 0x41
 80160ae:	2120      	movs	r1, #32
 80160b0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2242      	movs	r2, #66	@ 0x42
 80160b6:	2100      	movs	r1, #0
 80160b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2200      	movs	r2, #0
 80160be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80160c0:	683b      	ldr	r3, [r7, #0]
 80160c2:	089b      	lsrs	r3, r3, #2
 80160c4:	001a      	movs	r2, r3
 80160c6:	2301      	movs	r3, #1
 80160c8:	4013      	ands	r3, r2
 80160ca:	d022      	beq.n	8016112 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160d6:	b2d2      	uxtb	r2, r2
 80160d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160de:	1c5a      	adds	r2, r3, #1
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d012      	beq.n	8016112 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160f0:	3b01      	subs	r3, #1
 80160f2:	b29a      	uxth	r2, r3
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	3b01      	subs	r3, #1
 8016100:	b29a      	uxth	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801610a:	2204      	movs	r2, #4
 801610c:	431a      	orrs	r2, r3
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016112:	4a0c      	ldr	r2, [pc, #48]	@ (8016144 <I2C_ITListenCplt+0xb0>)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	0011      	movs	r1, r2
 8016118:	0018      	movs	r0, r3
 801611a:	f000 faff 	bl	801671c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	2210      	movs	r2, #16
 8016124:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2240      	movs	r2, #64	@ 0x40
 801612a:	2100      	movs	r1, #0
 801612c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	0018      	movs	r0, r3
 8016132:	f7fe fe33 	bl	8014d9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8016136:	46c0      	nop			@ (mov r8, r8)
 8016138:	46bd      	mov	sp, r7
 801613a:	b002      	add	sp, #8
 801613c:	bd80      	pop	{r7, pc}
 801613e:	46c0      	nop			@ (mov r8, r8)
 8016140:	ffff0000 	.word	0xffff0000
 8016144:	00008003 	.word	0x00008003

08016148 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016152:	200f      	movs	r0, #15
 8016154:	183b      	adds	r3, r7, r0
 8016156:	687a      	ldr	r2, [r7, #4]
 8016158:	2141      	movs	r1, #65	@ 0x41
 801615a:	5c52      	ldrb	r2, [r2, r1]
 801615c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2242      	movs	r2, #66	@ 0x42
 8016162:	2100      	movs	r1, #0
 8016164:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4a72      	ldr	r2, [pc, #456]	@ (8016334 <I2C_ITError+0x1ec>)
 801616a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2200      	movs	r2, #0
 8016170:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	431a      	orrs	r2, r3
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801617e:	183b      	adds	r3, r7, r0
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	2b28      	cmp	r3, #40	@ 0x28
 8016184:	d007      	beq.n	8016196 <I2C_ITError+0x4e>
 8016186:	183b      	adds	r3, r7, r0
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	2b29      	cmp	r3, #41	@ 0x29
 801618c:	d003      	beq.n	8016196 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801618e:	183b      	adds	r3, r7, r0
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	2b2a      	cmp	r3, #42	@ 0x2a
 8016194:	d10c      	bne.n	80161b0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2103      	movs	r1, #3
 801619a:	0018      	movs	r0, r3
 801619c:	f000 fabe 	bl	801671c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2241      	movs	r2, #65	@ 0x41
 80161a4:	2128      	movs	r1, #40	@ 0x28
 80161a6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	4a63      	ldr	r2, [pc, #396]	@ (8016338 <I2C_ITError+0x1f0>)
 80161ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80161ae:	e032      	b.n	8016216 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80161b0:	4a62      	ldr	r2, [pc, #392]	@ (801633c <I2C_ITError+0x1f4>)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	0011      	movs	r1, r2
 80161b6:	0018      	movs	r0, r3
 80161b8:	f000 fab0 	bl	801671c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	0018      	movs	r0, r3
 80161c0:	f000 f8ed 	bl	801639e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2241      	movs	r2, #65	@ 0x41
 80161c8:	5c9b      	ldrb	r3, [r3, r2]
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	2b60      	cmp	r3, #96	@ 0x60
 80161ce:	d01f      	beq.n	8016210 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2241      	movs	r2, #65	@ 0x41
 80161d4:	2120      	movs	r1, #32
 80161d6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	2220      	movs	r2, #32
 80161e0:	4013      	ands	r3, r2
 80161e2:	2b20      	cmp	r3, #32
 80161e4:	d114      	bne.n	8016210 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	699b      	ldr	r3, [r3, #24]
 80161ec:	2210      	movs	r2, #16
 80161ee:	4013      	ands	r3, r2
 80161f0:	2b10      	cmp	r3, #16
 80161f2:	d109      	bne.n	8016208 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	2210      	movs	r2, #16
 80161fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016200:	2204      	movs	r2, #4
 8016202:	431a      	orrs	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2220      	movs	r2, #32
 801620e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2200      	movs	r2, #0
 8016214:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801621a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016220:	2b00      	cmp	r3, #0
 8016222:	d03b      	beq.n	801629c <I2C_ITError+0x154>
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	2b11      	cmp	r3, #17
 8016228:	d002      	beq.n	8016230 <I2C_ITError+0xe8>
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	2b21      	cmp	r3, #33	@ 0x21
 801622e:	d135      	bne.n	801629c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	2380      	movs	r3, #128	@ 0x80
 8016238:	01db      	lsls	r3, r3, #7
 801623a:	401a      	ands	r2, r3
 801623c:	2380      	movs	r3, #128	@ 0x80
 801623e:	01db      	lsls	r3, r3, #7
 8016240:	429a      	cmp	r2, r3
 8016242:	d107      	bne.n	8016254 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	493c      	ldr	r1, [pc, #240]	@ (8016340 <I2C_ITError+0x1f8>)
 8016250:	400a      	ands	r2, r1
 8016252:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016258:	0018      	movs	r0, r3
 801625a:	f7fd fcd3 	bl	8013c04 <HAL_DMA_GetState>
 801625e:	0003      	movs	r3, r0
 8016260:	2b01      	cmp	r3, #1
 8016262:	d016      	beq.n	8016292 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016268:	4a36      	ldr	r2, [pc, #216]	@ (8016344 <I2C_ITError+0x1fc>)
 801626a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2240      	movs	r2, #64	@ 0x40
 8016270:	2100      	movs	r1, #0
 8016272:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016278:	0018      	movs	r0, r3
 801627a:	f7fd fb97 	bl	80139ac <HAL_DMA_Abort_IT>
 801627e:	1e03      	subs	r3, r0, #0
 8016280:	d051      	beq.n	8016326 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801628c:	0018      	movs	r0, r3
 801628e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016290:	e049      	b.n	8016326 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	0018      	movs	r0, r3
 8016296:	f000 f859 	bl	801634c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801629a:	e044      	b.n	8016326 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d03b      	beq.n	801631c <I2C_ITError+0x1d4>
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	2b12      	cmp	r3, #18
 80162a8:	d002      	beq.n	80162b0 <I2C_ITError+0x168>
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	2b22      	cmp	r3, #34	@ 0x22
 80162ae:	d135      	bne.n	801631c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	2380      	movs	r3, #128	@ 0x80
 80162b8:	021b      	lsls	r3, r3, #8
 80162ba:	401a      	ands	r2, r3
 80162bc:	2380      	movs	r3, #128	@ 0x80
 80162be:	021b      	lsls	r3, r3, #8
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d107      	bne.n	80162d4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	491e      	ldr	r1, [pc, #120]	@ (8016348 <I2C_ITError+0x200>)
 80162d0:	400a      	ands	r2, r1
 80162d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162d8:	0018      	movs	r0, r3
 80162da:	f7fd fc93 	bl	8013c04 <HAL_DMA_GetState>
 80162de:	0003      	movs	r3, r0
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d016      	beq.n	8016312 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162e8:	4a16      	ldr	r2, [pc, #88]	@ (8016344 <I2C_ITError+0x1fc>)
 80162ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2240      	movs	r2, #64	@ 0x40
 80162f0:	2100      	movs	r1, #0
 80162f2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162f8:	0018      	movs	r0, r3
 80162fa:	f7fd fb57 	bl	80139ac <HAL_DMA_Abort_IT>
 80162fe:	1e03      	subs	r3, r0, #0
 8016300:	d013      	beq.n	801632a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801630c:	0018      	movs	r0, r3
 801630e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016310:	e00b      	b.n	801632a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	0018      	movs	r0, r3
 8016316:	f000 f819 	bl	801634c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801631a:	e006      	b.n	801632a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	0018      	movs	r0, r3
 8016320:	f000 f814 	bl	801634c <I2C_TreatErrorCallback>
  }
}
 8016324:	e002      	b.n	801632c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016326:	46c0      	nop			@ (mov r8, r8)
 8016328:	e000      	b.n	801632c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801632a:	46c0      	nop			@ (mov r8, r8)
}
 801632c:	46c0      	nop			@ (mov r8, r8)
 801632e:	46bd      	mov	sp, r7
 8016330:	b004      	add	sp, #16
 8016332:	bd80      	pop	{r7, pc}
 8016334:	ffff0000 	.word	0xffff0000
 8016338:	08015089 	.word	0x08015089
 801633c:	00008003 	.word	0x00008003
 8016340:	ffffbfff 	.word	0xffffbfff
 8016344:	08016557 	.word	0x08016557
 8016348:	ffff7fff 	.word	0xffff7fff

0801634c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2241      	movs	r2, #65	@ 0x41
 8016358:	5c9b      	ldrb	r3, [r3, r2]
 801635a:	b2db      	uxtb	r3, r3
 801635c:	2b60      	cmp	r3, #96	@ 0x60
 801635e:	d10f      	bne.n	8016380 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2241      	movs	r2, #65	@ 0x41
 8016364:	2120      	movs	r1, #32
 8016366:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2200      	movs	r2, #0
 801636c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2240      	movs	r2, #64	@ 0x40
 8016372:	2100      	movs	r1, #0
 8016374:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	0018      	movs	r0, r3
 801637a:	f7fe fd2f 	bl	8014ddc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801637e:	e00a      	b.n	8016396 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2200      	movs	r2, #0
 8016384:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2240      	movs	r2, #64	@ 0x40
 801638a:	2100      	movs	r1, #0
 801638c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	0018      	movs	r0, r3
 8016392:	f7fe fd1b 	bl	8014dcc <HAL_I2C_ErrorCallback>
}
 8016396:	46c0      	nop			@ (mov r8, r8)
 8016398:	46bd      	mov	sp, r7
 801639a:	b002      	add	sp, #8
 801639c:	bd80      	pop	{r7, pc}

0801639e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b082      	sub	sp, #8
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	699b      	ldr	r3, [r3, #24]
 80163ac:	2202      	movs	r2, #2
 80163ae:	4013      	ands	r3, r2
 80163b0:	2b02      	cmp	r3, #2
 80163b2:	d103      	bne.n	80163bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	2200      	movs	r2, #0
 80163ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	699b      	ldr	r3, [r3, #24]
 80163c2:	2201      	movs	r2, #1
 80163c4:	4013      	ands	r3, r2
 80163c6:	2b01      	cmp	r3, #1
 80163c8:	d007      	beq.n	80163da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	699a      	ldr	r2, [r3, #24]
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2101      	movs	r1, #1
 80163d6:	430a      	orrs	r2, r1
 80163d8:	619a      	str	r2, [r3, #24]
  }
}
 80163da:	46c0      	nop			@ (mov r8, r8)
 80163dc:	46bd      	mov	sp, r7
 80163de:	b002      	add	sp, #8
 80163e0:	bd80      	pop	{r7, pc}
	...

080163e4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163f0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	4920      	ldr	r1, [pc, #128]	@ (8016480 <I2C_DMAMasterTransmitCplt+0x9c>)
 80163fe:	400a      	ands	r2, r1
 8016400:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016406:	b29b      	uxth	r3, r3
 8016408:	2b00      	cmp	r3, #0
 801640a:	d105      	bne.n	8016418 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2120      	movs	r1, #32
 8016410:	0018      	movs	r0, r3
 8016412:	f000 f8f9 	bl	8016608 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8016416:	e02e      	b.n	8016476 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801641c:	68fa      	ldr	r2, [r7, #12]
 801641e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016420:	189a      	adds	r2, r3, r2
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801642a:	b29b      	uxth	r3, r3
 801642c:	2bff      	cmp	r3, #255	@ 0xff
 801642e:	d903      	bls.n	8016438 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	22ff      	movs	r2, #255	@ 0xff
 8016434:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016436:	e004      	b.n	8016442 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801643c:	b29a      	uxth	r2, r3
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801644a:	0019      	movs	r1, r3
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	3328      	adds	r3, #40	@ 0x28
 8016452:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016458:	f7fd f9c2 	bl	80137e0 <HAL_DMA_Start_IT>
 801645c:	1e03      	subs	r3, r0, #0
 801645e:	d005      	beq.n	801646c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2110      	movs	r1, #16
 8016464:	0018      	movs	r0, r3
 8016466:	f7ff fe6f 	bl	8016148 <I2C_ITError>
}
 801646a:	e004      	b.n	8016476 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2140      	movs	r1, #64	@ 0x40
 8016470:	0018      	movs	r0, r3
 8016472:	f000 f8c9 	bl	8016608 <I2C_Enable_IRQ>
}
 8016476:	46c0      	nop			@ (mov r8, r8)
 8016478:	46bd      	mov	sp, r7
 801647a:	b004      	add	sp, #16
 801647c:	bd80      	pop	{r7, pc}
 801647e:	46c0      	nop			@ (mov r8, r8)
 8016480:	ffffbfff 	.word	0xffffbfff

08016484 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b084      	sub	sp, #16
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016490:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	681a      	ldr	r2, [r3, #0]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	4920      	ldr	r1, [pc, #128]	@ (8016520 <I2C_DMAMasterReceiveCplt+0x9c>)
 801649e:	400a      	ands	r2, r1
 80164a0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d105      	bne.n	80164b8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	2120      	movs	r1, #32
 80164b0:	0018      	movs	r0, r3
 80164b2:	f000 f8a9 	bl	8016608 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80164b6:	e02e      	b.n	8016516 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164bc:	68fa      	ldr	r2, [r7, #12]
 80164be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80164c0:	189a      	adds	r2, r3, r2
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	2bff      	cmp	r3, #255	@ 0xff
 80164ce:	d903      	bls.n	80164d8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	22ff      	movs	r2, #255	@ 0xff
 80164d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80164d6:	e004      	b.n	80164e2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164dc:	b29a      	uxth	r2, r3
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	3324      	adds	r3, #36	@ 0x24
 80164ec:	0019      	movs	r1, r3
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164f2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80164f8:	f7fd f972 	bl	80137e0 <HAL_DMA_Start_IT>
 80164fc:	1e03      	subs	r3, r0, #0
 80164fe:	d005      	beq.n	801650c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	2110      	movs	r1, #16
 8016504:	0018      	movs	r0, r3
 8016506:	f7ff fe1f 	bl	8016148 <I2C_ITError>
}
 801650a:	e004      	b.n	8016516 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2140      	movs	r1, #64	@ 0x40
 8016510:	0018      	movs	r0, r3
 8016512:	f000 f879 	bl	8016608 <I2C_Enable_IRQ>
}
 8016516:	46c0      	nop			@ (mov r8, r8)
 8016518:	46bd      	mov	sp, r7
 801651a:	b004      	add	sp, #16
 801651c:	bd80      	pop	{r7, pc}
 801651e:	46c0      	nop			@ (mov r8, r8)
 8016520:	ffff7fff 	.word	0xffff7fff

08016524 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016530:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	685a      	ldr	r2, [r3, #4]
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2180      	movs	r1, #128	@ 0x80
 801653e:	0209      	lsls	r1, r1, #8
 8016540:	430a      	orrs	r2, r1
 8016542:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2110      	movs	r1, #16
 8016548:	0018      	movs	r0, r3
 801654a:	f7ff fdfd 	bl	8016148 <I2C_ITError>
}
 801654e:	46c0      	nop			@ (mov r8, r8)
 8016550:	46bd      	mov	sp, r7
 8016552:	b004      	add	sp, #16
 8016554:	bd80      	pop	{r7, pc}

08016556 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8016556:	b580      	push	{r7, lr}
 8016558:	b084      	sub	sp, #16
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016562:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016568:	2b00      	cmp	r3, #0
 801656a:	d003      	beq.n	8016574 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016570:	2200      	movs	r2, #0
 8016572:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016578:	2b00      	cmp	r3, #0
 801657a:	d003      	beq.n	8016584 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016580:	2200      	movs	r2, #0
 8016582:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	0018      	movs	r0, r3
 8016588:	f7ff fee0 	bl	801634c <I2C_TreatErrorCallback>
}
 801658c:	46c0      	nop			@ (mov r8, r8)
 801658e:	46bd      	mov	sp, r7
 8016590:	b004      	add	sp, #16
 8016592:	bd80      	pop	{r7, pc}

08016594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016594:	b590      	push	{r4, r7, lr}
 8016596:	b087      	sub	sp, #28
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	0008      	movs	r0, r1
 801659e:	0011      	movs	r1, r2
 80165a0:	607b      	str	r3, [r7, #4]
 80165a2:	240a      	movs	r4, #10
 80165a4:	193b      	adds	r3, r7, r4
 80165a6:	1c02      	adds	r2, r0, #0
 80165a8:	801a      	strh	r2, [r3, #0]
 80165aa:	2009      	movs	r0, #9
 80165ac:	183b      	adds	r3, r7, r0
 80165ae:	1c0a      	adds	r2, r1, #0
 80165b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80165b2:	193b      	adds	r3, r7, r4
 80165b4:	881b      	ldrh	r3, [r3, #0]
 80165b6:	059b      	lsls	r3, r3, #22
 80165b8:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80165ba:	183b      	adds	r3, r7, r0
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	0419      	lsls	r1, r3, #16
 80165c0:	23ff      	movs	r3, #255	@ 0xff
 80165c2:	041b      	lsls	r3, r3, #16
 80165c4:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80165c6:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80165cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165ce:	4313      	orrs	r3, r2
 80165d0:	005b      	lsls	r3, r3, #1
 80165d2:	085b      	lsrs	r3, r3, #1
 80165d4:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80165de:	0d51      	lsrs	r1, r2, #21
 80165e0:	2280      	movs	r2, #128	@ 0x80
 80165e2:	00d2      	lsls	r2, r2, #3
 80165e4:	400a      	ands	r2, r1
 80165e6:	4907      	ldr	r1, [pc, #28]	@ (8016604 <I2C_TransferConfig+0x70>)
 80165e8:	430a      	orrs	r2, r1
 80165ea:	43d2      	mvns	r2, r2
 80165ec:	401a      	ands	r2, r3
 80165ee:	0011      	movs	r1, r2
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	697a      	ldr	r2, [r7, #20]
 80165f6:	430a      	orrs	r2, r1
 80165f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80165fa:	46c0      	nop			@ (mov r8, r8)
 80165fc:	46bd      	mov	sp, r7
 80165fe:	b007      	add	sp, #28
 8016600:	bd90      	pop	{r4, r7, pc}
 8016602:	46c0      	nop			@ (mov r8, r8)
 8016604:	03ff63ff 	.word	0x03ff63ff

08016608 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	000a      	movs	r2, r1
 8016612:	1cbb      	adds	r3, r7, #2
 8016614:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8016616:	2300      	movs	r3, #0
 8016618:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801661e:	4b3c      	ldr	r3, [pc, #240]	@ (8016710 <I2C_Enable_IRQ+0x108>)
 8016620:	429a      	cmp	r2, r3
 8016622:	d035      	beq.n	8016690 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8016628:	4b3a      	ldr	r3, [pc, #232]	@ (8016714 <I2C_Enable_IRQ+0x10c>)
 801662a:	429a      	cmp	r2, r3
 801662c:	d030      	beq.n	8016690 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8016632:	4b39      	ldr	r3, [pc, #228]	@ (8016718 <I2C_Enable_IRQ+0x110>)
 8016634:	429a      	cmp	r2, r3
 8016636:	d02b      	beq.n	8016690 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016638:	1cbb      	adds	r3, r7, #2
 801663a:	2200      	movs	r2, #0
 801663c:	5e9b      	ldrsh	r3, [r3, r2]
 801663e:	2b00      	cmp	r3, #0
 8016640:	da03      	bge.n	801664a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	22b8      	movs	r2, #184	@ 0xb8
 8016646:	4313      	orrs	r3, r2
 8016648:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801664a:	1cbb      	adds	r3, r7, #2
 801664c:	881b      	ldrh	r3, [r3, #0]
 801664e:	2201      	movs	r2, #1
 8016650:	4013      	ands	r3, r2
 8016652:	d003      	beq.n	801665c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	22f2      	movs	r2, #242	@ 0xf2
 8016658:	4313      	orrs	r3, r2
 801665a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801665c:	1cbb      	adds	r3, r7, #2
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	2202      	movs	r2, #2
 8016662:	4013      	ands	r3, r2
 8016664:	d003      	beq.n	801666e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	22f4      	movs	r2, #244	@ 0xf4
 801666a:	4313      	orrs	r3, r2
 801666c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801666e:	1cbb      	adds	r3, r7, #2
 8016670:	881b      	ldrh	r3, [r3, #0]
 8016672:	2b10      	cmp	r3, #16
 8016674:	d103      	bne.n	801667e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2290      	movs	r2, #144	@ 0x90
 801667a:	4313      	orrs	r3, r2
 801667c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801667e:	1cbb      	adds	r3, r7, #2
 8016680:	881b      	ldrh	r3, [r3, #0]
 8016682:	2b20      	cmp	r3, #32
 8016684:	d137      	bne.n	80166f6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2220      	movs	r2, #32
 801668a:	4313      	orrs	r3, r2
 801668c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801668e:	e032      	b.n	80166f6 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016690:	1cbb      	adds	r3, r7, #2
 8016692:	2200      	movs	r2, #0
 8016694:	5e9b      	ldrsh	r3, [r3, r2]
 8016696:	2b00      	cmp	r3, #0
 8016698:	da03      	bge.n	80166a2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	22b8      	movs	r2, #184	@ 0xb8
 801669e:	4313      	orrs	r3, r2
 80166a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80166a2:	1cbb      	adds	r3, r7, #2
 80166a4:	881b      	ldrh	r3, [r3, #0]
 80166a6:	2201      	movs	r2, #1
 80166a8:	4013      	ands	r3, r2
 80166aa:	d003      	beq.n	80166b4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	22f2      	movs	r2, #242	@ 0xf2
 80166b0:	4313      	orrs	r3, r2
 80166b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80166b4:	1cbb      	adds	r3, r7, #2
 80166b6:	881b      	ldrh	r3, [r3, #0]
 80166b8:	2202      	movs	r2, #2
 80166ba:	4013      	ands	r3, r2
 80166bc:	d003      	beq.n	80166c6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	22f4      	movs	r2, #244	@ 0xf4
 80166c2:	4313      	orrs	r3, r2
 80166c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80166c6:	1cbb      	adds	r3, r7, #2
 80166c8:	881b      	ldrh	r3, [r3, #0]
 80166ca:	2b10      	cmp	r3, #16
 80166cc:	d103      	bne.n	80166d6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2290      	movs	r2, #144	@ 0x90
 80166d2:	4313      	orrs	r3, r2
 80166d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80166d6:	1cbb      	adds	r3, r7, #2
 80166d8:	881b      	ldrh	r3, [r3, #0]
 80166da:	2b20      	cmp	r3, #32
 80166dc:	d103      	bne.n	80166e6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	2260      	movs	r2, #96	@ 0x60
 80166e2:	4313      	orrs	r3, r2
 80166e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80166e6:	1cbb      	adds	r3, r7, #2
 80166e8:	881b      	ldrh	r3, [r3, #0]
 80166ea:	2b40      	cmp	r3, #64	@ 0x40
 80166ec:	d103      	bne.n	80166f6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	2240      	movs	r2, #64	@ 0x40
 80166f2:	4313      	orrs	r3, r2
 80166f4:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	6819      	ldr	r1, [r3, #0]
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	68fa      	ldr	r2, [r7, #12]
 8016702:	430a      	orrs	r2, r1
 8016704:	601a      	str	r2, [r3, #0]
}
 8016706:	46c0      	nop			@ (mov r8, r8)
 8016708:	46bd      	mov	sp, r7
 801670a:	b004      	add	sp, #16
 801670c:	bd80      	pop	{r7, pc}
 801670e:	46c0      	nop			@ (mov r8, r8)
 8016710:	080152b1 	.word	0x080152b1
 8016714:	08015749 	.word	0x08015749
 8016718:	080154c9 	.word	0x080154c9

0801671c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	000a      	movs	r2, r1
 8016726:	1cbb      	adds	r3, r7, #2
 8016728:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801672a:	2300      	movs	r3, #0
 801672c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801672e:	1cbb      	adds	r3, r7, #2
 8016730:	881b      	ldrh	r3, [r3, #0]
 8016732:	2201      	movs	r2, #1
 8016734:	4013      	ands	r3, r2
 8016736:	d010      	beq.n	801675a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2242      	movs	r2, #66	@ 0x42
 801673c:	4313      	orrs	r3, r2
 801673e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2241      	movs	r2, #65	@ 0x41
 8016744:	5c9b      	ldrb	r3, [r3, r2]
 8016746:	b2db      	uxtb	r3, r3
 8016748:	001a      	movs	r2, r3
 801674a:	2328      	movs	r3, #40	@ 0x28
 801674c:	4013      	ands	r3, r2
 801674e:	2b28      	cmp	r3, #40	@ 0x28
 8016750:	d003      	beq.n	801675a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	22b0      	movs	r2, #176	@ 0xb0
 8016756:	4313      	orrs	r3, r2
 8016758:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801675a:	1cbb      	adds	r3, r7, #2
 801675c:	881b      	ldrh	r3, [r3, #0]
 801675e:	2202      	movs	r2, #2
 8016760:	4013      	ands	r3, r2
 8016762:	d010      	beq.n	8016786 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2244      	movs	r2, #68	@ 0x44
 8016768:	4313      	orrs	r3, r2
 801676a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2241      	movs	r2, #65	@ 0x41
 8016770:	5c9b      	ldrb	r3, [r3, r2]
 8016772:	b2db      	uxtb	r3, r3
 8016774:	001a      	movs	r2, r3
 8016776:	2328      	movs	r3, #40	@ 0x28
 8016778:	4013      	ands	r3, r2
 801677a:	2b28      	cmp	r3, #40	@ 0x28
 801677c:	d003      	beq.n	8016786 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	22b0      	movs	r2, #176	@ 0xb0
 8016782:	4313      	orrs	r3, r2
 8016784:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016786:	1cbb      	adds	r3, r7, #2
 8016788:	2200      	movs	r2, #0
 801678a:	5e9b      	ldrsh	r3, [r3, r2]
 801678c:	2b00      	cmp	r3, #0
 801678e:	da03      	bge.n	8016798 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	22b8      	movs	r2, #184	@ 0xb8
 8016794:	4313      	orrs	r3, r2
 8016796:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016798:	1cbb      	adds	r3, r7, #2
 801679a:	881b      	ldrh	r3, [r3, #0]
 801679c:	2b10      	cmp	r3, #16
 801679e:	d103      	bne.n	80167a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	2290      	movs	r2, #144	@ 0x90
 80167a4:	4313      	orrs	r3, r2
 80167a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80167a8:	1cbb      	adds	r3, r7, #2
 80167aa:	881b      	ldrh	r3, [r3, #0]
 80167ac:	2b20      	cmp	r3, #32
 80167ae:	d103      	bne.n	80167b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	2220      	movs	r2, #32
 80167b4:	4313      	orrs	r3, r2
 80167b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80167b8:	1cbb      	adds	r3, r7, #2
 80167ba:	881b      	ldrh	r3, [r3, #0]
 80167bc:	2b40      	cmp	r3, #64	@ 0x40
 80167be:	d103      	bne.n	80167c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	2240      	movs	r2, #64	@ 0x40
 80167c4:	4313      	orrs	r3, r2
 80167c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	681a      	ldr	r2, [r3, #0]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	43d9      	mvns	r1, r3
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	400a      	ands	r2, r1
 80167d8:	601a      	str	r2, [r3, #0]
}
 80167da:	46c0      	nop			@ (mov r8, r8)
 80167dc:	46bd      	mov	sp, r7
 80167de:	b004      	add	sp, #16
 80167e0:	bd80      	pop	{r7, pc}
	...

080167e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2241      	movs	r2, #65	@ 0x41
 80167f2:	5c9b      	ldrb	r3, [r3, r2]
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	2b20      	cmp	r3, #32
 80167f8:	d138      	bne.n	801686c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2240      	movs	r2, #64	@ 0x40
 80167fe:	5c9b      	ldrb	r3, [r3, r2]
 8016800:	2b01      	cmp	r3, #1
 8016802:	d101      	bne.n	8016808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016804:	2302      	movs	r3, #2
 8016806:	e032      	b.n	801686e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2240      	movs	r2, #64	@ 0x40
 801680c:	2101      	movs	r1, #1
 801680e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2241      	movs	r2, #65	@ 0x41
 8016814:	2124      	movs	r1, #36	@ 0x24
 8016816:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	681a      	ldr	r2, [r3, #0]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	2101      	movs	r1, #1
 8016824:	438a      	bics	r2, r1
 8016826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	4911      	ldr	r1, [pc, #68]	@ (8016878 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8016834:	400a      	ands	r2, r1
 8016836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	6819      	ldr	r1, [r3, #0]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	683a      	ldr	r2, [r7, #0]
 8016844:	430a      	orrs	r2, r1
 8016846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2101      	movs	r1, #1
 8016854:	430a      	orrs	r2, r1
 8016856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2241      	movs	r2, #65	@ 0x41
 801685c:	2120      	movs	r1, #32
 801685e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2240      	movs	r2, #64	@ 0x40
 8016864:	2100      	movs	r1, #0
 8016866:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016868:	2300      	movs	r3, #0
 801686a:	e000      	b.n	801686e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801686c:	2302      	movs	r3, #2
  }
}
 801686e:	0018      	movs	r0, r3
 8016870:	46bd      	mov	sp, r7
 8016872:	b002      	add	sp, #8
 8016874:	bd80      	pop	{r7, pc}
 8016876:	46c0      	nop			@ (mov r8, r8)
 8016878:	ffffefff 	.word	0xffffefff

0801687c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b084      	sub	sp, #16
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2241      	movs	r2, #65	@ 0x41
 801688a:	5c9b      	ldrb	r3, [r3, r2]
 801688c:	b2db      	uxtb	r3, r3
 801688e:	2b20      	cmp	r3, #32
 8016890:	d139      	bne.n	8016906 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2240      	movs	r2, #64	@ 0x40
 8016896:	5c9b      	ldrb	r3, [r3, r2]
 8016898:	2b01      	cmp	r3, #1
 801689a:	d101      	bne.n	80168a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801689c:	2302      	movs	r3, #2
 801689e:	e033      	b.n	8016908 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2240      	movs	r2, #64	@ 0x40
 80168a4:	2101      	movs	r1, #1
 80168a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2241      	movs	r2, #65	@ 0x41
 80168ac:	2124      	movs	r1, #36	@ 0x24
 80168ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	2101      	movs	r1, #1
 80168bc:	438a      	bics	r2, r1
 80168be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	4a11      	ldr	r2, [pc, #68]	@ (8016910 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80168cc:	4013      	ands	r3, r2
 80168ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	021b      	lsls	r3, r3, #8
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	4313      	orrs	r3, r2
 80168d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	2101      	movs	r1, #1
 80168ee:	430a      	orrs	r2, r1
 80168f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2241      	movs	r2, #65	@ 0x41
 80168f6:	2120      	movs	r1, #32
 80168f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2240      	movs	r2, #64	@ 0x40
 80168fe:	2100      	movs	r1, #0
 8016900:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016902:	2300      	movs	r3, #0
 8016904:	e000      	b.n	8016908 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016906:	2302      	movs	r3, #2
  }
}
 8016908:	0018      	movs	r0, r3
 801690a:	46bd      	mov	sp, r7
 801690c:	b004      	add	sp, #16
 801690e:	bd80      	pop	{r7, pc}
 8016910:	fffff0ff 	.word	0xfffff0ff

08016914 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d101      	bne.n	8016926 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8016922:	2301      	movs	r3, #1
 8016924:	e06d      	b.n	8016a02 <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	0018      	movs	r0, r3
 801692a:	f000 f875 	bl	8016a18 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	4a36      	ldr	r2, [pc, #216]	@ (8016a0c <HAL_IWDG_Init+0xf8>)
 8016934:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	4a35      	ldr	r2, [pc, #212]	@ (8016a10 <HAL_IWDG_Init+0xfc>)
 801693c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	687a      	ldr	r2, [r7, #4]
 8016944:	6852      	ldr	r2, [r2, #4]
 8016946:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	687a      	ldr	r2, [r7, #4]
 801694e:	6892      	ldr	r2, [r2, #8]
 8016950:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 8016952:	f7fb fa5d 	bl	8011e10 <HAL_GetTick>
 8016956:	0003      	movs	r3, r0
 8016958:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801695a:	e00e      	b.n	801697a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801695c:	f7fb fa58 	bl	8011e10 <HAL_GetTick>
 8016960:	0002      	movs	r2, r0
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	2b21      	cmp	r3, #33	@ 0x21
 8016968:	d907      	bls.n	801697a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	68db      	ldr	r3, [r3, #12]
 8016970:	2202      	movs	r2, #2
 8016972:	4013      	ands	r3, r2
 8016974:	d001      	beq.n	801697a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8016976:	2303      	movs	r3, #3
 8016978:	e043      	b.n	8016a02 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	2202      	movs	r2, #2
 8016982:	4013      	ands	r3, r2
 8016984:	d1ea      	bne.n	801695c <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	691b      	ldr	r3, [r3, #16]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d105      	bne.n	801699a <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	2280      	movs	r2, #128	@ 0x80
 8016994:	01d2      	lsls	r2, r2, #7
 8016996:	615a      	str	r2, [r3, #20]
 8016998:	e007      	b.n	80169aa <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	691a      	ldr	r2, [r3, #16]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	21c0      	movs	r1, #192	@ 0xc0
 80169a4:	0209      	lsls	r1, r1, #8
 80169a6:	430a      	orrs	r2, r1
 80169a8:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80169aa:	f7fb fa31 	bl	8011e10 <HAL_GetTick>
 80169ae:	0003      	movs	r3, r0
 80169b0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80169b2:	e00e      	b.n	80169d2 <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80169b4:	f7fb fa2c 	bl	8011e10 <HAL_GetTick>
 80169b8:	0002      	movs	r2, r0
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	1ad3      	subs	r3, r2, r3
 80169be:	2b21      	cmp	r3, #33	@ 0x21
 80169c0:	d907      	bls.n	80169d2 <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	220f      	movs	r2, #15
 80169ca:	4013      	ands	r3, r2
 80169cc:	d001      	beq.n	80169d2 <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 80169ce:	2303      	movs	r3, #3
 80169d0:	e017      	b.n	8016a02 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	68db      	ldr	r3, [r3, #12]
 80169d8:	220f      	movs	r2, #15
 80169da:	4013      	ands	r3, r2
 80169dc:	d1ea      	bne.n	80169b4 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	691a      	ldr	r2, [r3, #16]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	68db      	ldr	r3, [r3, #12]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d005      	beq.n	80169f8 <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	687a      	ldr	r2, [r7, #4]
 80169f2:	68d2      	ldr	r2, [r2, #12]
 80169f4:	611a      	str	r2, [r3, #16]
 80169f6:	e003      	b.n	8016a00 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	4a05      	ldr	r2, [pc, #20]	@ (8016a14 <HAL_IWDG_Init+0x100>)
 80169fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	0018      	movs	r0, r3
 8016a04:	46bd      	mov	sp, r7
 8016a06:	b004      	add	sp, #16
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	46c0      	nop			@ (mov r8, r8)
 8016a0c:	0000cccc 	.word	0x0000cccc
 8016a10:	00005555 	.word	0x00005555
 8016a14:	0000aaaa 	.word	0x0000aaaa

08016a18 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b082      	sub	sp, #8
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8016a20:	46c0      	nop			@ (mov r8, r8)
 8016a22:	46bd      	mov	sp, r7
 8016a24:	b002      	add	sp, #8
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	4a03      	ldr	r2, [pc, #12]	@ (8016a44 <HAL_IWDG_Refresh+0x1c>)
 8016a36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8016a38:	2300      	movs	r3, #0
}
 8016a3a:	0018      	movs	r0, r3
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	b002      	add	sp, #8
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	46c0      	nop			@ (mov r8, r8)
 8016a44:	0000aaaa 	.word	0x0000aaaa

08016a48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016a4c:	4b04      	ldr	r3, [pc, #16]	@ (8016a60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8016a4e:	681a      	ldr	r2, [r3, #0]
 8016a50:	4b03      	ldr	r3, [pc, #12]	@ (8016a60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8016a52:	2180      	movs	r1, #128	@ 0x80
 8016a54:	0049      	lsls	r1, r1, #1
 8016a56:	430a      	orrs	r2, r1
 8016a58:	601a      	str	r2, [r3, #0]
}
 8016a5a:	46c0      	nop			@ (mov r8, r8)
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}
 8016a60:	40007000 	.word	0x40007000

08016a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b084      	sub	sp, #16
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016a6c:	687a      	ldr	r2, [r7, #4]
 8016a6e:	2380      	movs	r3, #128	@ 0x80
 8016a70:	009b      	lsls	r3, r3, #2
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d137      	bne.n	8016ae6 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8016a76:	4b27      	ldr	r3, [pc, #156]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	23c0      	movs	r3, #192	@ 0xc0
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	401a      	ands	r2, r3
 8016a80:	2380      	movs	r3, #128	@ 0x80
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d040      	beq.n	8016b0a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8016a88:	4b22      	ldr	r3, [pc, #136]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	4a22      	ldr	r2, [pc, #136]	@ (8016b18 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016a8e:	401a      	ands	r2, r3
 8016a90:	4b20      	ldr	r3, [pc, #128]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016a92:	2180      	movs	r1, #128	@ 0x80
 8016a94:	0089      	lsls	r1, r1, #2
 8016a96:	430a      	orrs	r2, r1
 8016a98:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8016a9a:	4b20      	ldr	r3, [pc, #128]	@ (8016b1c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	2232      	movs	r2, #50	@ 0x32
 8016aa0:	4353      	muls	r3, r2
 8016aa2:	491f      	ldr	r1, [pc, #124]	@ (8016b20 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8016aa4:	0018      	movs	r0, r3
 8016aa6:	f7e9 fb37 	bl	8000118 <__udivsi3>
 8016aaa:	0003      	movs	r3, r0
 8016aac:	3301      	adds	r3, #1
 8016aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016ab0:	e002      	b.n	8016ab8 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	3b01      	subs	r3, #1
 8016ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016ab8:	4b16      	ldr	r3, [pc, #88]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016aba:	695a      	ldr	r2, [r3, #20]
 8016abc:	2380      	movs	r3, #128	@ 0x80
 8016abe:	00db      	lsls	r3, r3, #3
 8016ac0:	401a      	ands	r2, r3
 8016ac2:	2380      	movs	r3, #128	@ 0x80
 8016ac4:	00db      	lsls	r3, r3, #3
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d102      	bne.n	8016ad0 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d1f0      	bne.n	8016ab2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8016ad0:	4b10      	ldr	r3, [pc, #64]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016ad2:	695a      	ldr	r2, [r3, #20]
 8016ad4:	2380      	movs	r3, #128	@ 0x80
 8016ad6:	00db      	lsls	r3, r3, #3
 8016ad8:	401a      	ands	r2, r3
 8016ada:	2380      	movs	r3, #128	@ 0x80
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	429a      	cmp	r2, r3
 8016ae0:	d113      	bne.n	8016b0a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8016ae2:	2303      	movs	r3, #3
 8016ae4:	e012      	b.n	8016b0c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8016ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016ae8:	681a      	ldr	r2, [r3, #0]
 8016aea:	23c0      	movs	r3, #192	@ 0xc0
 8016aec:	00db      	lsls	r3, r3, #3
 8016aee:	401a      	ands	r2, r3
 8016af0:	2380      	movs	r3, #128	@ 0x80
 8016af2:	00db      	lsls	r3, r3, #3
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d008      	beq.n	8016b0a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8016af8:	4b06      	ldr	r3, [pc, #24]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4a06      	ldr	r2, [pc, #24]	@ (8016b18 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016afe:	401a      	ands	r2, r3
 8016b00:	4b04      	ldr	r3, [pc, #16]	@ (8016b14 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016b02:	2180      	movs	r1, #128	@ 0x80
 8016b04:	00c9      	lsls	r1, r1, #3
 8016b06:	430a      	orrs	r2, r1
 8016b08:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8016b0a:	2300      	movs	r3, #0
}
 8016b0c:	0018      	movs	r0, r3
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	b004      	add	sp, #16
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	40007000 	.word	0x40007000
 8016b18:	fffff9ff 	.word	0xfffff9ff
 8016b1c:	2000025c 	.word	0x2000025c
 8016b20:	000f4240 	.word	0x000f4240

08016b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016b28:	4b03      	ldr	r3, [pc, #12]	@ (8016b38 <HAL_PWREx_GetVoltageRange+0x14>)
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	23c0      	movs	r3, #192	@ 0xc0
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	4013      	ands	r3, r2
}
 8016b32:	0018      	movs	r0, r3
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}
 8016b38:	40007000 	.word	0x40007000

08016b3c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	0002      	movs	r2, r0
 8016b44:	1dfb      	adds	r3, r7, #7
 8016b46:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8016b48:	4b13      	ldr	r3, [pc, #76]	@ (8016b98 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	4b12      	ldr	r3, [pc, #72]	@ (8016b98 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016b4e:	4913      	ldr	r1, [pc, #76]	@ (8016b9c <HAL_PWREx_EnterSTOP2Mode+0x60>)
 8016b50:	400a      	ands	r2, r1
 8016b52:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8016b54:	4b10      	ldr	r3, [pc, #64]	@ (8016b98 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	2207      	movs	r2, #7
 8016b5a:	4393      	bics	r3, r2
 8016b5c:	001a      	movs	r2, r3
 8016b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8016b98 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016b60:	2102      	movs	r1, #2
 8016b62:	430a      	orrs	r2, r1
 8016b64:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8016b66:	4b0e      	ldr	r3, [pc, #56]	@ (8016ba0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016b68:	691a      	ldr	r2, [r3, #16]
 8016b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ba0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016b6c:	2104      	movs	r1, #4
 8016b6e:	430a      	orrs	r2, r1
 8016b70:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8016b72:	1dfb      	adds	r3, r7, #7
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d101      	bne.n	8016b7e <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016b7a:	bf30      	wfi
 8016b7c:	e002      	b.n	8016b84 <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016b7e:	bf40      	sev
    __WFE();
 8016b80:	bf20      	wfe
    __WFE();
 8016b82:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8016b84:	4b06      	ldr	r3, [pc, #24]	@ (8016ba0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016b86:	691a      	ldr	r2, [r3, #16]
 8016b88:	4b05      	ldr	r3, [pc, #20]	@ (8016ba0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016b8a:	2104      	movs	r1, #4
 8016b8c:	438a      	bics	r2, r1
 8016b8e:	611a      	str	r2, [r3, #16]
}
 8016b90:	46c0      	nop			@ (mov r8, r8)
 8016b92:	46bd      	mov	sp, r7
 8016b94:	b002      	add	sp, #8
 8016b96:	bd80      	pop	{r7, pc}
 8016b98:	40007000 	.word	0x40007000
 8016b9c:	ffffbfff 	.word	0xffffbfff
 8016ba0:	e000ed00 	.word	0xe000ed00

08016ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016ba4:	b5b0      	push	{r4, r5, r7, lr}
 8016ba6:	b088      	sub	sp, #32
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016bac:	4bc9      	ldr	r3, [pc, #804]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016bae:	689b      	ldr	r3, [r3, #8]
 8016bb0:	2238      	movs	r2, #56	@ 0x38
 8016bb2:	4013      	ands	r3, r2
 8016bb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016bb6:	4bc7      	ldr	r3, [pc, #796]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	2203      	movs	r2, #3
 8016bbc:	4013      	ands	r3, r2
 8016bbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	2210      	movs	r2, #16
 8016bc6:	4013      	ands	r3, r2
 8016bc8:	d100      	bne.n	8016bcc <HAL_RCC_OscConfig+0x28>
 8016bca:	e0ef      	b.n	8016dac <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016bcc:	69bb      	ldr	r3, [r7, #24]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d007      	beq.n	8016be2 <HAL_RCC_OscConfig+0x3e>
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	2b18      	cmp	r3, #24
 8016bd6:	d000      	beq.n	8016bda <HAL_RCC_OscConfig+0x36>
 8016bd8:	e093      	b.n	8016d02 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	2b01      	cmp	r3, #1
 8016bde:	d000      	beq.n	8016be2 <HAL_RCC_OscConfig+0x3e>
 8016be0:	e08f      	b.n	8016d02 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016be2:	4bbc      	ldr	r3, [pc, #752]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2202      	movs	r2, #2
 8016be8:	4013      	ands	r3, r2
 8016bea:	d006      	beq.n	8016bfa <HAL_RCC_OscConfig+0x56>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	69db      	ldr	r3, [r3, #28]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d102      	bne.n	8016bfa <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	f000 fbf2 	bl	80173de <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bfe:	4bb5      	ldr	r3, [pc, #724]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2108      	movs	r1, #8
 8016c04:	400b      	ands	r3, r1
 8016c06:	d004      	beq.n	8016c12 <HAL_RCC_OscConfig+0x6e>
 8016c08:	4bb2      	ldr	r3, [pc, #712]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	21f0      	movs	r1, #240	@ 0xf0
 8016c0e:	400b      	ands	r3, r1
 8016c10:	e005      	b.n	8016c1e <HAL_RCC_OscConfig+0x7a>
 8016c12:	49b0      	ldr	r1, [pc, #704]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c14:	2394      	movs	r3, #148	@ 0x94
 8016c16:	58cb      	ldr	r3, [r1, r3]
 8016c18:	091b      	lsrs	r3, r3, #4
 8016c1a:	21f0      	movs	r1, #240	@ 0xf0
 8016c1c:	400b      	ands	r3, r1
 8016c1e:	4293      	cmp	r3, r2
 8016c20:	d225      	bcs.n	8016c6e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c26:	0018      	movs	r0, r3
 8016c28:	f000 fd90 	bl	801774c <RCC_SetFlashLatencyFromMSIRange>
 8016c2c:	1e03      	subs	r3, r0, #0
 8016c2e:	d002      	beq.n	8016c36 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8016c30:	2301      	movs	r3, #1
 8016c32:	f000 fbd4 	bl	80173de <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016c36:	4ba7      	ldr	r3, [pc, #668]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	4ba6      	ldr	r3, [pc, #664]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c3c:	2108      	movs	r1, #8
 8016c3e:	430a      	orrs	r2, r1
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	4ba4      	ldr	r3, [pc, #656]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	22f0      	movs	r2, #240	@ 0xf0
 8016c48:	4393      	bics	r3, r2
 8016c4a:	0019      	movs	r1, r3
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c50:	4ba0      	ldr	r3, [pc, #640]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c52:	430a      	orrs	r2, r1
 8016c54:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016c56:	4b9f      	ldr	r3, [pc, #636]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	4a9f      	ldr	r2, [pc, #636]	@ (8016ed8 <HAL_RCC_OscConfig+0x334>)
 8016c5c:	4013      	ands	r3, r2
 8016c5e:	0019      	movs	r1, r3
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6a1b      	ldr	r3, [r3, #32]
 8016c64:	021a      	lsls	r2, r3, #8
 8016c66:	4b9b      	ldr	r3, [pc, #620]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c68:	430a      	orrs	r2, r1
 8016c6a:	605a      	str	r2, [r3, #4]
 8016c6c:	e027      	b.n	8016cbe <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016c6e:	4b99      	ldr	r3, [pc, #612]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	4b98      	ldr	r3, [pc, #608]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c74:	2108      	movs	r1, #8
 8016c76:	430a      	orrs	r2, r1
 8016c78:	601a      	str	r2, [r3, #0]
 8016c7a:	4b96      	ldr	r3, [pc, #600]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	22f0      	movs	r2, #240	@ 0xf0
 8016c80:	4393      	bics	r3, r2
 8016c82:	0019      	movs	r1, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c88:	4b92      	ldr	r3, [pc, #584]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c8a:	430a      	orrs	r2, r1
 8016c8c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016c8e:	4b91      	ldr	r3, [pc, #580]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	4a91      	ldr	r2, [pc, #580]	@ (8016ed8 <HAL_RCC_OscConfig+0x334>)
 8016c94:	4013      	ands	r3, r2
 8016c96:	0019      	movs	r1, r3
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6a1b      	ldr	r3, [r3, #32]
 8016c9c:	021a      	lsls	r2, r3, #8
 8016c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016ca0:	430a      	orrs	r2, r1
 8016ca2:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016ca4:	69bb      	ldr	r3, [r7, #24]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d109      	bne.n	8016cbe <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cae:	0018      	movs	r0, r3
 8016cb0:	f000 fd4c 	bl	801774c <RCC_SetFlashLatencyFromMSIRange>
 8016cb4:	1e03      	subs	r3, r0, #0
 8016cb6:	d002      	beq.n	8016cbe <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8016cb8:	2301      	movs	r3, #1
 8016cba:	f000 fb90 	bl	80173de <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016cbe:	f000 fc87 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8016cc2:	0001      	movs	r1, r0
 8016cc4:	4b83      	ldr	r3, [pc, #524]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016cc6:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016cc8:	0a1b      	lsrs	r3, r3, #8
 8016cca:	220f      	movs	r2, #15
 8016ccc:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016cce:	4a83      	ldr	r2, [pc, #524]	@ (8016edc <HAL_RCC_OscConfig+0x338>)
 8016cd0:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016cd2:	001a      	movs	r2, r3
 8016cd4:	231f      	movs	r3, #31
 8016cd6:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016cd8:	000a      	movs	r2, r1
 8016cda:	40da      	lsrs	r2, r3
 8016cdc:	4b80      	ldr	r3, [pc, #512]	@ (8016ee0 <HAL_RCC_OscConfig+0x33c>)
 8016cde:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8016ce0:	4b80      	ldr	r3, [pc, #512]	@ (8016ee4 <HAL_RCC_OscConfig+0x340>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	250f      	movs	r5, #15
 8016ce6:	197c      	adds	r4, r7, r5
 8016ce8:	0018      	movs	r0, r3
 8016cea:	f7fb f837 	bl	8011d5c <HAL_InitTick>
 8016cee:	0003      	movs	r3, r0
 8016cf0:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8016cf2:	197b      	adds	r3, r7, r5
 8016cf4:	781b      	ldrb	r3, [r3, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d057      	beq.n	8016daa <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8016cfa:	197b      	adds	r3, r7, r5
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	f000 fb6e 	bl	80173de <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	69db      	ldr	r3, [r3, #28]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d035      	beq.n	8016d76 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016d0a:	4b72      	ldr	r3, [pc, #456]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d0c:	681a      	ldr	r2, [r3, #0]
 8016d0e:	4b71      	ldr	r3, [pc, #452]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d10:	2101      	movs	r1, #1
 8016d12:	430a      	orrs	r2, r1
 8016d14:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016d16:	f7fb f87b 	bl	8011e10 <HAL_GetTick>
 8016d1a:	0003      	movs	r3, r0
 8016d1c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016d1e:	e009      	b.n	8016d34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8016d20:	f7fb f876 	bl	8011e10 <HAL_GetTick>
 8016d24:	0002      	movs	r2, r0
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	2b02      	cmp	r3, #2
 8016d2c:	d902      	bls.n	8016d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8016d2e:	2303      	movs	r3, #3
 8016d30:	f000 fb55 	bl	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016d34:	4b67      	ldr	r3, [pc, #412]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2202      	movs	r2, #2
 8016d3a:	4013      	ands	r3, r2
 8016d3c:	d0f0      	beq.n	8016d20 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016d3e:	4b65      	ldr	r3, [pc, #404]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d40:	681a      	ldr	r2, [r3, #0]
 8016d42:	4b64      	ldr	r3, [pc, #400]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d44:	2108      	movs	r1, #8
 8016d46:	430a      	orrs	r2, r1
 8016d48:	601a      	str	r2, [r3, #0]
 8016d4a:	4b62      	ldr	r3, [pc, #392]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	22f0      	movs	r2, #240	@ 0xf0
 8016d50:	4393      	bics	r3, r2
 8016d52:	0019      	movs	r1, r3
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d58:	4b5e      	ldr	r3, [pc, #376]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d5a:	430a      	orrs	r2, r1
 8016d5c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d60:	685b      	ldr	r3, [r3, #4]
 8016d62:	4a5d      	ldr	r2, [pc, #372]	@ (8016ed8 <HAL_RCC_OscConfig+0x334>)
 8016d64:	4013      	ands	r3, r2
 8016d66:	0019      	movs	r1, r3
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6a1b      	ldr	r3, [r3, #32]
 8016d6c:	021a      	lsls	r2, r3, #8
 8016d6e:	4b59      	ldr	r3, [pc, #356]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d70:	430a      	orrs	r2, r1
 8016d72:	605a      	str	r2, [r3, #4]
 8016d74:	e01a      	b.n	8016dac <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016d76:	4b57      	ldr	r3, [pc, #348]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	4b56      	ldr	r3, [pc, #344]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016d7c:	2101      	movs	r1, #1
 8016d7e:	438a      	bics	r2, r1
 8016d80:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016d82:	f7fb f845 	bl	8011e10 <HAL_GetTick>
 8016d86:	0003      	movs	r3, r0
 8016d88:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016d8a:	e008      	b.n	8016d9e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8016d8c:	f7fb f840 	bl	8011e10 <HAL_GetTick>
 8016d90:	0002      	movs	r2, r0
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	1ad3      	subs	r3, r2, r3
 8016d96:	2b02      	cmp	r3, #2
 8016d98:	d901      	bls.n	8016d9e <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8016d9a:	2303      	movs	r3, #3
 8016d9c:	e31f      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2202      	movs	r2, #2
 8016da4:	4013      	ands	r3, r2
 8016da6:	d1f1      	bne.n	8016d8c <HAL_RCC_OscConfig+0x1e8>
 8016da8:	e000      	b.n	8016dac <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016daa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	2201      	movs	r2, #1
 8016db2:	4013      	ands	r3, r2
 8016db4:	d100      	bne.n	8016db8 <HAL_RCC_OscConfig+0x214>
 8016db6:	e065      	b.n	8016e84 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016db8:	69bb      	ldr	r3, [r7, #24]
 8016dba:	2b10      	cmp	r3, #16
 8016dbc:	d005      	beq.n	8016dca <HAL_RCC_OscConfig+0x226>
 8016dbe:	69bb      	ldr	r3, [r7, #24]
 8016dc0:	2b18      	cmp	r3, #24
 8016dc2:	d10e      	bne.n	8016de2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	2b03      	cmp	r3, #3
 8016dc8:	d10b      	bne.n	8016de2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016dca:	4b42      	ldr	r3, [pc, #264]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016dcc:	681a      	ldr	r2, [r3, #0]
 8016dce:	2380      	movs	r3, #128	@ 0x80
 8016dd0:	029b      	lsls	r3, r3, #10
 8016dd2:	4013      	ands	r3, r2
 8016dd4:	d055      	beq.n	8016e82 <HAL_RCC_OscConfig+0x2de>
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d151      	bne.n	8016e82 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8016dde:	2301      	movs	r3, #1
 8016de0:	e2fd      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	685a      	ldr	r2, [r3, #4]
 8016de6:	2380      	movs	r3, #128	@ 0x80
 8016de8:	025b      	lsls	r3, r3, #9
 8016dea:	429a      	cmp	r2, r3
 8016dec:	d107      	bne.n	8016dfe <HAL_RCC_OscConfig+0x25a>
 8016dee:	4b39      	ldr	r3, [pc, #228]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	4b38      	ldr	r3, [pc, #224]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016df4:	2180      	movs	r1, #128	@ 0x80
 8016df6:	0249      	lsls	r1, r1, #9
 8016df8:	430a      	orrs	r2, r1
 8016dfa:	601a      	str	r2, [r3, #0]
 8016dfc:	e013      	b.n	8016e26 <HAL_RCC_OscConfig+0x282>
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	685a      	ldr	r2, [r3, #4]
 8016e02:	23a0      	movs	r3, #160	@ 0xa0
 8016e04:	02db      	lsls	r3, r3, #11
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d107      	bne.n	8016e1a <HAL_RCC_OscConfig+0x276>
 8016e0a:	4b32      	ldr	r3, [pc, #200]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016e0c:	681a      	ldr	r2, [r3, #0]
 8016e0e:	4b31      	ldr	r3, [pc, #196]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016e10:	21a0      	movs	r1, #160	@ 0xa0
 8016e12:	02c9      	lsls	r1, r1, #11
 8016e14:	430a      	orrs	r2, r1
 8016e16:	601a      	str	r2, [r3, #0]
 8016e18:	e005      	b.n	8016e26 <HAL_RCC_OscConfig+0x282>
 8016e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016e20:	4931      	ldr	r1, [pc, #196]	@ (8016ee8 <HAL_RCC_OscConfig+0x344>)
 8016e22:	400a      	ands	r2, r1
 8016e24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d014      	beq.n	8016e58 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e2e:	f7fa ffef 	bl	8011e10 <HAL_GetTick>
 8016e32:	0003      	movs	r3, r0
 8016e34:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016e36:	e008      	b.n	8016e4a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8016e38:	f7fa ffea 	bl	8011e10 <HAL_GetTick>
 8016e3c:	0002      	movs	r2, r0
 8016e3e:	693b      	ldr	r3, [r7, #16]
 8016e40:	1ad3      	subs	r3, r2, r3
 8016e42:	2b64      	cmp	r3, #100	@ 0x64
 8016e44:	d901      	bls.n	8016e4a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8016e46:	2303      	movs	r3, #3
 8016e48:	e2c9      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016e4a:	4b22      	ldr	r3, [pc, #136]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016e4c:	681a      	ldr	r2, [r3, #0]
 8016e4e:	2380      	movs	r3, #128	@ 0x80
 8016e50:	029b      	lsls	r3, r3, #10
 8016e52:	4013      	ands	r3, r2
 8016e54:	d0f0      	beq.n	8016e38 <HAL_RCC_OscConfig+0x294>
 8016e56:	e015      	b.n	8016e84 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e58:	f7fa ffda 	bl	8011e10 <HAL_GetTick>
 8016e5c:	0003      	movs	r3, r0
 8016e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016e60:	e008      	b.n	8016e74 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8016e62:	f7fa ffd5 	bl	8011e10 <HAL_GetTick>
 8016e66:	0002      	movs	r2, r0
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	1ad3      	subs	r3, r2, r3
 8016e6c:	2b64      	cmp	r3, #100	@ 0x64
 8016e6e:	d901      	bls.n	8016e74 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8016e70:	2303      	movs	r3, #3
 8016e72:	e2b4      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016e74:	4b17      	ldr	r3, [pc, #92]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016e76:	681a      	ldr	r2, [r3, #0]
 8016e78:	2380      	movs	r3, #128	@ 0x80
 8016e7a:	029b      	lsls	r3, r3, #10
 8016e7c:	4013      	ands	r3, r2
 8016e7e:	d1f0      	bne.n	8016e62 <HAL_RCC_OscConfig+0x2be>
 8016e80:	e000      	b.n	8016e84 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016e82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	2202      	movs	r2, #2
 8016e8a:	4013      	ands	r3, r2
 8016e8c:	d100      	bne.n	8016e90 <HAL_RCC_OscConfig+0x2ec>
 8016e8e:	e074      	b.n	8016f7a <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8016e90:	69bb      	ldr	r3, [r7, #24]
 8016e92:	2b08      	cmp	r3, #8
 8016e94:	d005      	beq.n	8016ea2 <HAL_RCC_OscConfig+0x2fe>
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	2b18      	cmp	r3, #24
 8016e9a:	d129      	bne.n	8016ef0 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	2b02      	cmp	r3, #2
 8016ea0:	d126      	bne.n	8016ef0 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016ea4:	681a      	ldr	r2, [r3, #0]
 8016ea6:	2380      	movs	r3, #128	@ 0x80
 8016ea8:	00db      	lsls	r3, r3, #3
 8016eaa:	4013      	ands	r3, r2
 8016eac:	d005      	beq.n	8016eba <HAL_RCC_OscConfig+0x316>
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d101      	bne.n	8016eba <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	e291      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016eba:	4b06      	ldr	r3, [pc, #24]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016ebc:	685b      	ldr	r3, [r3, #4]
 8016ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8016eec <HAL_RCC_OscConfig+0x348>)
 8016ec0:	4013      	ands	r3, r2
 8016ec2:	0019      	movs	r1, r3
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	691b      	ldr	r3, [r3, #16]
 8016ec8:	061a      	lsls	r2, r3, #24
 8016eca:	4b02      	ldr	r3, [pc, #8]	@ (8016ed4 <HAL_RCC_OscConfig+0x330>)
 8016ecc:	430a      	orrs	r2, r1
 8016ece:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016ed0:	e053      	b.n	8016f7a <HAL_RCC_OscConfig+0x3d6>
 8016ed2:	46c0      	nop			@ (mov r8, r8)
 8016ed4:	40021000 	.word	0x40021000
 8016ed8:	ffff00ff 	.word	0xffff00ff
 8016edc:	0801c4c8 	.word	0x0801c4c8
 8016ee0:	2000025c 	.word	0x2000025c
 8016ee4:	2000027c 	.word	0x2000027c
 8016ee8:	fffaffff 	.word	0xfffaffff
 8016eec:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d026      	beq.n	8016f46 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016ef8:	4bc7      	ldr	r3, [pc, #796]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016efa:	681a      	ldr	r2, [r3, #0]
 8016efc:	4bc6      	ldr	r3, [pc, #792]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016efe:	2180      	movs	r1, #128	@ 0x80
 8016f00:	0049      	lsls	r1, r1, #1
 8016f02:	430a      	orrs	r2, r1
 8016f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016f06:	f7fa ff83 	bl	8011e10 <HAL_GetTick>
 8016f0a:	0003      	movs	r3, r0
 8016f0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016f0e:	e008      	b.n	8016f22 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8016f10:	f7fa ff7e 	bl	8011e10 <HAL_GetTick>
 8016f14:	0002      	movs	r2, r0
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	1ad3      	subs	r3, r2, r3
 8016f1a:	2b02      	cmp	r3, #2
 8016f1c:	d901      	bls.n	8016f22 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8016f1e:	2303      	movs	r3, #3
 8016f20:	e25d      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016f22:	4bbd      	ldr	r3, [pc, #756]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f24:	681a      	ldr	r2, [r3, #0]
 8016f26:	2380      	movs	r3, #128	@ 0x80
 8016f28:	00db      	lsls	r3, r3, #3
 8016f2a:	4013      	ands	r3, r2
 8016f2c:	d0f0      	beq.n	8016f10 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016f2e:	4bba      	ldr	r3, [pc, #744]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	4aba      	ldr	r2, [pc, #744]	@ (801721c <HAL_RCC_OscConfig+0x678>)
 8016f34:	4013      	ands	r3, r2
 8016f36:	0019      	movs	r1, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	691b      	ldr	r3, [r3, #16]
 8016f3c:	061a      	lsls	r2, r3, #24
 8016f3e:	4bb6      	ldr	r3, [pc, #728]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f40:	430a      	orrs	r2, r1
 8016f42:	605a      	str	r2, [r3, #4]
 8016f44:	e019      	b.n	8016f7a <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016f46:	4bb4      	ldr	r3, [pc, #720]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	4bb3      	ldr	r3, [pc, #716]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f4c:	49b4      	ldr	r1, [pc, #720]	@ (8017220 <HAL_RCC_OscConfig+0x67c>)
 8016f4e:	400a      	ands	r2, r1
 8016f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016f52:	f7fa ff5d 	bl	8011e10 <HAL_GetTick>
 8016f56:	0003      	movs	r3, r0
 8016f58:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016f5a:	e008      	b.n	8016f6e <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8016f5c:	f7fa ff58 	bl	8011e10 <HAL_GetTick>
 8016f60:	0002      	movs	r2, r0
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	1ad3      	subs	r3, r2, r3
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	d901      	bls.n	8016f6e <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8016f6a:	2303      	movs	r3, #3
 8016f6c:	e237      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016f6e:	4baa      	ldr	r3, [pc, #680]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	2380      	movs	r3, #128	@ 0x80
 8016f74:	00db      	lsls	r3, r3, #3
 8016f76:	4013      	ands	r3, r2
 8016f78:	d1f0      	bne.n	8016f5c <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	2208      	movs	r2, #8
 8016f80:	4013      	ands	r3, r2
 8016f82:	d051      	beq.n	8017028 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	695b      	ldr	r3, [r3, #20]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d031      	beq.n	8016ff0 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	699b      	ldr	r3, [r3, #24]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d108      	bne.n	8016fa6 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8016f94:	4aa0      	ldr	r2, [pc, #640]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f96:	2394      	movs	r3, #148	@ 0x94
 8016f98:	58d3      	ldr	r3, [r2, r3]
 8016f9a:	499f      	ldr	r1, [pc, #636]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016f9c:	2204      	movs	r2, #4
 8016f9e:	4393      	bics	r3, r2
 8016fa0:	2294      	movs	r2, #148	@ 0x94
 8016fa2:	508b      	str	r3, [r1, r2]
 8016fa4:	e007      	b.n	8016fb6 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8016fa6:	4a9c      	ldr	r2, [pc, #624]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016fa8:	2394      	movs	r3, #148	@ 0x94
 8016faa:	58d3      	ldr	r3, [r2, r3]
 8016fac:	499a      	ldr	r1, [pc, #616]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016fae:	2204      	movs	r2, #4
 8016fb0:	4313      	orrs	r3, r2
 8016fb2:	2294      	movs	r2, #148	@ 0x94
 8016fb4:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016fb6:	4a98      	ldr	r2, [pc, #608]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016fb8:	2394      	movs	r3, #148	@ 0x94
 8016fba:	58d3      	ldr	r3, [r2, r3]
 8016fbc:	4996      	ldr	r1, [pc, #600]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016fbe:	2201      	movs	r2, #1
 8016fc0:	4313      	orrs	r3, r2
 8016fc2:	2294      	movs	r2, #148	@ 0x94
 8016fc4:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016fc6:	f7fa ff23 	bl	8011e10 <HAL_GetTick>
 8016fca:	0003      	movs	r3, r0
 8016fcc:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016fce:	e008      	b.n	8016fe2 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016fd0:	f7fa ff1e 	bl	8011e10 <HAL_GetTick>
 8016fd4:	0002      	movs	r2, r0
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	1ad3      	subs	r3, r2, r3
 8016fda:	2b11      	cmp	r3, #17
 8016fdc:	d901      	bls.n	8016fe2 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8016fde:	2303      	movs	r3, #3
 8016fe0:	e1fd      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016fe2:	4a8d      	ldr	r2, [pc, #564]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016fe4:	2394      	movs	r3, #148	@ 0x94
 8016fe6:	58d3      	ldr	r3, [r2, r3]
 8016fe8:	2202      	movs	r2, #2
 8016fea:	4013      	ands	r3, r2
 8016fec:	d0f0      	beq.n	8016fd0 <HAL_RCC_OscConfig+0x42c>
 8016fee:	e01b      	b.n	8017028 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016ff0:	4a89      	ldr	r2, [pc, #548]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016ff2:	2394      	movs	r3, #148	@ 0x94
 8016ff4:	58d3      	ldr	r3, [r2, r3]
 8016ff6:	4988      	ldr	r1, [pc, #544]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	4393      	bics	r3, r2
 8016ffc:	2294      	movs	r2, #148	@ 0x94
 8016ffe:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017000:	f7fa ff06 	bl	8011e10 <HAL_GetTick>
 8017004:	0003      	movs	r3, r0
 8017006:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017008:	e008      	b.n	801701c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801700a:	f7fa ff01 	bl	8011e10 <HAL_GetTick>
 801700e:	0002      	movs	r2, r0
 8017010:	693b      	ldr	r3, [r7, #16]
 8017012:	1ad3      	subs	r3, r2, r3
 8017014:	2b11      	cmp	r3, #17
 8017016:	d901      	bls.n	801701c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8017018:	2303      	movs	r3, #3
 801701a:	e1e0      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801701c:	4a7e      	ldr	r2, [pc, #504]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801701e:	2394      	movs	r3, #148	@ 0x94
 8017020:	58d3      	ldr	r3, [r2, r3]
 8017022:	2202      	movs	r2, #2
 8017024:	4013      	ands	r3, r2
 8017026:	d1f0      	bne.n	801700a <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	2204      	movs	r2, #4
 801702e:	4013      	ands	r3, r2
 8017030:	d100      	bne.n	8017034 <HAL_RCC_OscConfig+0x490>
 8017032:	e10d      	b.n	8017250 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017034:	201f      	movs	r0, #31
 8017036:	183b      	adds	r3, r7, r0
 8017038:	2200      	movs	r2, #0
 801703a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 801703c:	4b76      	ldr	r3, [pc, #472]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801703e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017040:	2380      	movs	r3, #128	@ 0x80
 8017042:	055b      	lsls	r3, r3, #21
 8017044:	4013      	ands	r3, r2
 8017046:	d110      	bne.n	801706a <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017048:	4b73      	ldr	r3, [pc, #460]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801704a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801704c:	4b72      	ldr	r3, [pc, #456]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801704e:	2180      	movs	r1, #128	@ 0x80
 8017050:	0549      	lsls	r1, r1, #21
 8017052:	430a      	orrs	r2, r1
 8017054:	659a      	str	r2, [r3, #88]	@ 0x58
 8017056:	4b70      	ldr	r3, [pc, #448]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8017058:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801705a:	2380      	movs	r3, #128	@ 0x80
 801705c:	055b      	lsls	r3, r3, #21
 801705e:	4013      	ands	r3, r2
 8017060:	60bb      	str	r3, [r7, #8]
 8017062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017064:	183b      	adds	r3, r7, r0
 8017066:	2201      	movs	r2, #1
 8017068:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801706a:	4b6e      	ldr	r3, [pc, #440]	@ (8017224 <HAL_RCC_OscConfig+0x680>)
 801706c:	681a      	ldr	r2, [r3, #0]
 801706e:	2380      	movs	r3, #128	@ 0x80
 8017070:	005b      	lsls	r3, r3, #1
 8017072:	4013      	ands	r3, r2
 8017074:	d11a      	bne.n	80170ac <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017076:	4b6b      	ldr	r3, [pc, #428]	@ (8017224 <HAL_RCC_OscConfig+0x680>)
 8017078:	681a      	ldr	r2, [r3, #0]
 801707a:	4b6a      	ldr	r3, [pc, #424]	@ (8017224 <HAL_RCC_OscConfig+0x680>)
 801707c:	2180      	movs	r1, #128	@ 0x80
 801707e:	0049      	lsls	r1, r1, #1
 8017080:	430a      	orrs	r2, r1
 8017082:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017084:	f7fa fec4 	bl	8011e10 <HAL_GetTick>
 8017088:	0003      	movs	r3, r0
 801708a:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801708c:	e008      	b.n	80170a0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801708e:	f7fa febf 	bl	8011e10 <HAL_GetTick>
 8017092:	0002      	movs	r2, r0
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	2b02      	cmp	r3, #2
 801709a:	d901      	bls.n	80170a0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801709c:	2303      	movs	r3, #3
 801709e:	e19e      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80170a0:	4b60      	ldr	r3, [pc, #384]	@ (8017224 <HAL_RCC_OscConfig+0x680>)
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	2380      	movs	r3, #128	@ 0x80
 80170a6:	005b      	lsls	r3, r3, #1
 80170a8:	4013      	ands	r3, r2
 80170aa:	d0f0      	beq.n	801708e <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	2201      	movs	r2, #1
 80170b2:	4013      	ands	r3, r2
 80170b4:	d01e      	beq.n	80170f4 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	689b      	ldr	r3, [r3, #8]
 80170ba:	2204      	movs	r2, #4
 80170bc:	4013      	ands	r3, r2
 80170be:	d010      	beq.n	80170e2 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80170c0:	4a55      	ldr	r2, [pc, #340]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170c2:	2390      	movs	r3, #144	@ 0x90
 80170c4:	58d3      	ldr	r3, [r2, r3]
 80170c6:	4954      	ldr	r1, [pc, #336]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170c8:	2204      	movs	r2, #4
 80170ca:	4313      	orrs	r3, r2
 80170cc:	2290      	movs	r2, #144	@ 0x90
 80170ce:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80170d0:	4a51      	ldr	r2, [pc, #324]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170d2:	2390      	movs	r3, #144	@ 0x90
 80170d4:	58d3      	ldr	r3, [r2, r3]
 80170d6:	4950      	ldr	r1, [pc, #320]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170d8:	2201      	movs	r2, #1
 80170da:	4313      	orrs	r3, r2
 80170dc:	2290      	movs	r2, #144	@ 0x90
 80170de:	508b      	str	r3, [r1, r2]
 80170e0:	e018      	b.n	8017114 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80170e2:	4a4d      	ldr	r2, [pc, #308]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170e4:	2390      	movs	r3, #144	@ 0x90
 80170e6:	58d3      	ldr	r3, [r2, r3]
 80170e8:	494b      	ldr	r1, [pc, #300]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170ea:	2201      	movs	r2, #1
 80170ec:	4313      	orrs	r3, r2
 80170ee:	2290      	movs	r2, #144	@ 0x90
 80170f0:	508b      	str	r3, [r1, r2]
 80170f2:	e00f      	b.n	8017114 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80170f4:	4a48      	ldr	r2, [pc, #288]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170f6:	2390      	movs	r3, #144	@ 0x90
 80170f8:	58d3      	ldr	r3, [r2, r3]
 80170fa:	4947      	ldr	r1, [pc, #284]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80170fc:	2201      	movs	r2, #1
 80170fe:	4393      	bics	r3, r2
 8017100:	2290      	movs	r2, #144	@ 0x90
 8017102:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017104:	4a44      	ldr	r2, [pc, #272]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8017106:	2390      	movs	r3, #144	@ 0x90
 8017108:	58d3      	ldr	r3, [r2, r3]
 801710a:	4943      	ldr	r1, [pc, #268]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801710c:	2204      	movs	r2, #4
 801710e:	4393      	bics	r3, r2
 8017110:	2290      	movs	r2, #144	@ 0x90
 8017112:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	689b      	ldr	r3, [r3, #8]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d04f      	beq.n	80171bc <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801711c:	f7fa fe78 	bl	8011e10 <HAL_GetTick>
 8017120:	0003      	movs	r3, r0
 8017122:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017124:	e009      	b.n	801713a <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017126:	f7fa fe73 	bl	8011e10 <HAL_GetTick>
 801712a:	0002      	movs	r2, r0
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	4a3d      	ldr	r2, [pc, #244]	@ (8017228 <HAL_RCC_OscConfig+0x684>)
 8017132:	4293      	cmp	r3, r2
 8017134:	d901      	bls.n	801713a <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8017136:	2303      	movs	r3, #3
 8017138:	e151      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801713a:	4a37      	ldr	r2, [pc, #220]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801713c:	2390      	movs	r3, #144	@ 0x90
 801713e:	58d3      	ldr	r3, [r2, r3]
 8017140:	2202      	movs	r2, #2
 8017142:	4013      	ands	r3, r2
 8017144:	d0ef      	beq.n	8017126 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	689b      	ldr	r3, [r3, #8]
 801714a:	2280      	movs	r2, #128	@ 0x80
 801714c:	4013      	ands	r3, r2
 801714e:	d01a      	beq.n	8017186 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017150:	4a31      	ldr	r2, [pc, #196]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8017152:	2390      	movs	r3, #144	@ 0x90
 8017154:	58d3      	ldr	r3, [r2, r3]
 8017156:	4930      	ldr	r1, [pc, #192]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8017158:	2280      	movs	r2, #128	@ 0x80
 801715a:	4313      	orrs	r3, r2
 801715c:	2290      	movs	r2, #144	@ 0x90
 801715e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017160:	e009      	b.n	8017176 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017162:	f7fa fe55 	bl	8011e10 <HAL_GetTick>
 8017166:	0002      	movs	r2, r0
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	4a2e      	ldr	r2, [pc, #184]	@ (8017228 <HAL_RCC_OscConfig+0x684>)
 801716e:	4293      	cmp	r3, r2
 8017170:	d901      	bls.n	8017176 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8017172:	2303      	movs	r3, #3
 8017174:	e133      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017176:	4a28      	ldr	r2, [pc, #160]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8017178:	2390      	movs	r3, #144	@ 0x90
 801717a:	58d2      	ldr	r2, [r2, r3]
 801717c:	2380      	movs	r3, #128	@ 0x80
 801717e:	011b      	lsls	r3, r3, #4
 8017180:	4013      	ands	r3, r2
 8017182:	d0ee      	beq.n	8017162 <HAL_RCC_OscConfig+0x5be>
 8017184:	e059      	b.n	801723a <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017186:	4a24      	ldr	r2, [pc, #144]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 8017188:	2390      	movs	r3, #144	@ 0x90
 801718a:	58d3      	ldr	r3, [r2, r3]
 801718c:	4922      	ldr	r1, [pc, #136]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 801718e:	2280      	movs	r2, #128	@ 0x80
 8017190:	4393      	bics	r3, r2
 8017192:	2290      	movs	r2, #144	@ 0x90
 8017194:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017196:	e009      	b.n	80171ac <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017198:	f7fa fe3a 	bl	8011e10 <HAL_GetTick>
 801719c:	0002      	movs	r2, r0
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	1ad3      	subs	r3, r2, r3
 80171a2:	4a21      	ldr	r2, [pc, #132]	@ (8017228 <HAL_RCC_OscConfig+0x684>)
 80171a4:	4293      	cmp	r3, r2
 80171a6:	d901      	bls.n	80171ac <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 80171a8:	2303      	movs	r3, #3
 80171aa:	e118      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80171ac:	4a1a      	ldr	r2, [pc, #104]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80171ae:	2390      	movs	r3, #144	@ 0x90
 80171b0:	58d2      	ldr	r2, [r2, r3]
 80171b2:	2380      	movs	r3, #128	@ 0x80
 80171b4:	011b      	lsls	r3, r3, #4
 80171b6:	4013      	ands	r3, r2
 80171b8:	d1ee      	bne.n	8017198 <HAL_RCC_OscConfig+0x5f4>
 80171ba:	e03e      	b.n	801723a <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171bc:	f7fa fe28 	bl	8011e10 <HAL_GetTick>
 80171c0:	0003      	movs	r3, r0
 80171c2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80171c4:	e009      	b.n	80171da <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80171c6:	f7fa fe23 	bl	8011e10 <HAL_GetTick>
 80171ca:	0002      	movs	r2, r0
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	1ad3      	subs	r3, r2, r3
 80171d0:	4a15      	ldr	r2, [pc, #84]	@ (8017228 <HAL_RCC_OscConfig+0x684>)
 80171d2:	4293      	cmp	r3, r2
 80171d4:	d901      	bls.n	80171da <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80171d6:	2303      	movs	r3, #3
 80171d8:	e101      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80171da:	4a0f      	ldr	r2, [pc, #60]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80171dc:	2390      	movs	r3, #144	@ 0x90
 80171de:	58d3      	ldr	r3, [r2, r3]
 80171e0:	2202      	movs	r2, #2
 80171e2:	4013      	ands	r3, r2
 80171e4:	d1ef      	bne.n	80171c6 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80171e6:	4a0c      	ldr	r2, [pc, #48]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80171e8:	2390      	movs	r3, #144	@ 0x90
 80171ea:	58d3      	ldr	r3, [r2, r3]
 80171ec:	2280      	movs	r2, #128	@ 0x80
 80171ee:	4013      	ands	r3, r2
 80171f0:	d023      	beq.n	801723a <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80171f2:	4a09      	ldr	r2, [pc, #36]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80171f4:	2390      	movs	r3, #144	@ 0x90
 80171f6:	58d3      	ldr	r3, [r2, r3]
 80171f8:	4907      	ldr	r1, [pc, #28]	@ (8017218 <HAL_RCC_OscConfig+0x674>)
 80171fa:	2280      	movs	r2, #128	@ 0x80
 80171fc:	4393      	bics	r3, r2
 80171fe:	2290      	movs	r2, #144	@ 0x90
 8017200:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017202:	e013      	b.n	801722c <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017204:	f7fa fe04 	bl	8011e10 <HAL_GetTick>
 8017208:	0002      	movs	r2, r0
 801720a:	693b      	ldr	r3, [r7, #16]
 801720c:	1ad3      	subs	r3, r2, r3
 801720e:	4a06      	ldr	r2, [pc, #24]	@ (8017228 <HAL_RCC_OscConfig+0x684>)
 8017210:	4293      	cmp	r3, r2
 8017212:	d90b      	bls.n	801722c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8017214:	2303      	movs	r3, #3
 8017216:	e0e2      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
 8017218:	40021000 	.word	0x40021000
 801721c:	80ffffff 	.word	0x80ffffff
 8017220:	fffffeff 	.word	0xfffffeff
 8017224:	40007000 	.word	0x40007000
 8017228:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801722c:	4a6e      	ldr	r2, [pc, #440]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801722e:	2390      	movs	r3, #144	@ 0x90
 8017230:	58d2      	ldr	r2, [r2, r3]
 8017232:	2380      	movs	r3, #128	@ 0x80
 8017234:	011b      	lsls	r3, r3, #4
 8017236:	4013      	ands	r3, r2
 8017238:	d1e4      	bne.n	8017204 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801723a:	231f      	movs	r3, #31
 801723c:	18fb      	adds	r3, r7, r3
 801723e:	781b      	ldrb	r3, [r3, #0]
 8017240:	2b01      	cmp	r3, #1
 8017242:	d105      	bne.n	8017250 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017244:	4b68      	ldr	r3, [pc, #416]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017246:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017248:	4b67      	ldr	r3, [pc, #412]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801724a:	4968      	ldr	r1, [pc, #416]	@ (80173ec <HAL_RCC_OscConfig+0x848>)
 801724c:	400a      	ands	r2, r1
 801724e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	2220      	movs	r2, #32
 8017256:	4013      	ands	r3, r2
 8017258:	d03c      	beq.n	80172d4 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801725e:	2b00      	cmp	r3, #0
 8017260:	d01c      	beq.n	801729c <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017262:	4a61      	ldr	r2, [pc, #388]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017264:	2398      	movs	r3, #152	@ 0x98
 8017266:	58d3      	ldr	r3, [r2, r3]
 8017268:	495f      	ldr	r1, [pc, #380]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801726a:	2201      	movs	r2, #1
 801726c:	4313      	orrs	r3, r2
 801726e:	2298      	movs	r2, #152	@ 0x98
 8017270:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017272:	f7fa fdcd 	bl	8011e10 <HAL_GetTick>
 8017276:	0003      	movs	r3, r0
 8017278:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801727a:	e008      	b.n	801728e <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801727c:	f7fa fdc8 	bl	8011e10 <HAL_GetTick>
 8017280:	0002      	movs	r2, r0
 8017282:	693b      	ldr	r3, [r7, #16]
 8017284:	1ad3      	subs	r3, r2, r3
 8017286:	2b02      	cmp	r3, #2
 8017288:	d901      	bls.n	801728e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 801728a:	2303      	movs	r3, #3
 801728c:	e0a7      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801728e:	4a56      	ldr	r2, [pc, #344]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017290:	2398      	movs	r3, #152	@ 0x98
 8017292:	58d3      	ldr	r3, [r2, r3]
 8017294:	2202      	movs	r2, #2
 8017296:	4013      	ands	r3, r2
 8017298:	d0f0      	beq.n	801727c <HAL_RCC_OscConfig+0x6d8>
 801729a:	e01b      	b.n	80172d4 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801729c:	4a52      	ldr	r2, [pc, #328]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801729e:	2398      	movs	r3, #152	@ 0x98
 80172a0:	58d3      	ldr	r3, [r2, r3]
 80172a2:	4951      	ldr	r1, [pc, #324]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80172a4:	2201      	movs	r2, #1
 80172a6:	4393      	bics	r3, r2
 80172a8:	2298      	movs	r2, #152	@ 0x98
 80172aa:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172ac:	f7fa fdb0 	bl	8011e10 <HAL_GetTick>
 80172b0:	0003      	movs	r3, r0
 80172b2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80172b4:	e008      	b.n	80172c8 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80172b6:	f7fa fdab 	bl	8011e10 <HAL_GetTick>
 80172ba:	0002      	movs	r2, r0
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	1ad3      	subs	r3, r2, r3
 80172c0:	2b02      	cmp	r3, #2
 80172c2:	d901      	bls.n	80172c8 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80172c4:	2303      	movs	r3, #3
 80172c6:	e08a      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80172c8:	4a47      	ldr	r2, [pc, #284]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80172ca:	2398      	movs	r3, #152	@ 0x98
 80172cc:	58d3      	ldr	r3, [r2, r3]
 80172ce:	2202      	movs	r2, #2
 80172d0:	4013      	ands	r3, r2
 80172d2:	d1f0      	bne.n	80172b6 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d100      	bne.n	80172de <HAL_RCC_OscConfig+0x73a>
 80172dc:	e07e      	b.n	80173dc <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80172de:	4b42      	ldr	r3, [pc, #264]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80172e0:	689b      	ldr	r3, [r3, #8]
 80172e2:	2238      	movs	r2, #56	@ 0x38
 80172e4:	4013      	ands	r3, r2
 80172e6:	2b18      	cmp	r3, #24
 80172e8:	d100      	bne.n	80172ec <HAL_RCC_OscConfig+0x748>
 80172ea:	e075      	b.n	80173d8 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172f0:	2b02      	cmp	r3, #2
 80172f2:	d156      	bne.n	80173a2 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80172f4:	4b3c      	ldr	r3, [pc, #240]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80172f6:	681a      	ldr	r2, [r3, #0]
 80172f8:	4b3b      	ldr	r3, [pc, #236]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80172fa:	493d      	ldr	r1, [pc, #244]	@ (80173f0 <HAL_RCC_OscConfig+0x84c>)
 80172fc:	400a      	ands	r2, r1
 80172fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017300:	f7fa fd86 	bl	8011e10 <HAL_GetTick>
 8017304:	0003      	movs	r3, r0
 8017306:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017308:	e008      	b.n	801731c <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801730a:	f7fa fd81 	bl	8011e10 <HAL_GetTick>
 801730e:	0002      	movs	r2, r0
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	2b02      	cmp	r3, #2
 8017316:	d901      	bls.n	801731c <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8017318:	2303      	movs	r3, #3
 801731a:	e060      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801731c:	4b32      	ldr	r3, [pc, #200]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801731e:	681a      	ldr	r2, [r3, #0]
 8017320:	2380      	movs	r3, #128	@ 0x80
 8017322:	049b      	lsls	r3, r3, #18
 8017324:	4013      	ands	r3, r2
 8017326:	d1f0      	bne.n	801730a <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017328:	4b2f      	ldr	r3, [pc, #188]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801732a:	68db      	ldr	r3, [r3, #12]
 801732c:	4a31      	ldr	r2, [pc, #196]	@ (80173f4 <HAL_RCC_OscConfig+0x850>)
 801732e:	4013      	ands	r3, r2
 8017330:	0019      	movs	r1, r3
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801733a:	431a      	orrs	r2, r3
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017340:	021b      	lsls	r3, r3, #8
 8017342:	431a      	orrs	r2, r3
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017348:	431a      	orrs	r2, r3
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801734e:	431a      	orrs	r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017354:	431a      	orrs	r2, r3
 8017356:	4b24      	ldr	r3, [pc, #144]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017358:	430a      	orrs	r2, r1
 801735a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 801735c:	4b22      	ldr	r3, [pc, #136]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801735e:	68da      	ldr	r2, [r3, #12]
 8017360:	4b21      	ldr	r3, [pc, #132]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017362:	2180      	movs	r1, #128	@ 0x80
 8017364:	0549      	lsls	r1, r1, #21
 8017366:	430a      	orrs	r2, r1
 8017368:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801736a:	4b1f      	ldr	r3, [pc, #124]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 801736c:	681a      	ldr	r2, [r3, #0]
 801736e:	4b1e      	ldr	r3, [pc, #120]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017370:	2180      	movs	r1, #128	@ 0x80
 8017372:	0449      	lsls	r1, r1, #17
 8017374:	430a      	orrs	r2, r1
 8017376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017378:	f7fa fd4a 	bl	8011e10 <HAL_GetTick>
 801737c:	0003      	movs	r3, r0
 801737e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017380:	e008      	b.n	8017394 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017382:	f7fa fd45 	bl	8011e10 <HAL_GetTick>
 8017386:	0002      	movs	r2, r0
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	1ad3      	subs	r3, r2, r3
 801738c:	2b02      	cmp	r3, #2
 801738e:	d901      	bls.n	8017394 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8017390:	2303      	movs	r3, #3
 8017392:	e024      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017394:	4b14      	ldr	r3, [pc, #80]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	2380      	movs	r3, #128	@ 0x80
 801739a:	049b      	lsls	r3, r3, #18
 801739c:	4013      	ands	r3, r2
 801739e:	d0f0      	beq.n	8017382 <HAL_RCC_OscConfig+0x7de>
 80173a0:	e01c      	b.n	80173dc <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80173a2:	4b11      	ldr	r3, [pc, #68]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	4b10      	ldr	r3, [pc, #64]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80173a8:	4911      	ldr	r1, [pc, #68]	@ (80173f0 <HAL_RCC_OscConfig+0x84c>)
 80173aa:	400a      	ands	r2, r1
 80173ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173ae:	f7fa fd2f 	bl	8011e10 <HAL_GetTick>
 80173b2:	0003      	movs	r3, r0
 80173b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80173b6:	e008      	b.n	80173ca <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80173b8:	f7fa fd2a 	bl	8011e10 <HAL_GetTick>
 80173bc:	0002      	movs	r2, r0
 80173be:	693b      	ldr	r3, [r7, #16]
 80173c0:	1ad3      	subs	r3, r2, r3
 80173c2:	2b02      	cmp	r3, #2
 80173c4:	d901      	bls.n	80173ca <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80173c6:	2303      	movs	r3, #3
 80173c8:	e009      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80173ca:	4b07      	ldr	r3, [pc, #28]	@ (80173e8 <HAL_RCC_OscConfig+0x844>)
 80173cc:	681a      	ldr	r2, [r3, #0]
 80173ce:	2380      	movs	r3, #128	@ 0x80
 80173d0:	049b      	lsls	r3, r3, #18
 80173d2:	4013      	ands	r3, r2
 80173d4:	d1f0      	bne.n	80173b8 <HAL_RCC_OscConfig+0x814>
 80173d6:	e001      	b.n	80173dc <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80173d8:	2301      	movs	r3, #1
 80173da:	e000      	b.n	80173de <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80173dc:	2300      	movs	r3, #0
}
 80173de:	0018      	movs	r0, r3
 80173e0:	46bd      	mov	sp, r7
 80173e2:	b008      	add	sp, #32
 80173e4:	bdb0      	pop	{r4, r5, r7, pc}
 80173e6:	46c0      	nop			@ (mov r8, r8)
 80173e8:	40021000 	.word	0x40021000
 80173ec:	efffffff 	.word	0xefffffff
 80173f0:	feffffff 	.word	0xfeffffff
 80173f4:	11c1808c 	.word	0x11c1808c

080173f8 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80173f8:	b5b0      	push	{r4, r5, r7, lr}
 80173fa:	b084      	sub	sp, #16
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017402:	4b6c      	ldr	r3, [pc, #432]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	2207      	movs	r2, #7
 8017408:	4013      	ands	r3, r2
 801740a:	683a      	ldr	r2, [r7, #0]
 801740c:	429a      	cmp	r2, r3
 801740e:	d911      	bls.n	8017434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017410:	4b68      	ldr	r3, [pc, #416]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	2207      	movs	r2, #7
 8017416:	4393      	bics	r3, r2
 8017418:	0019      	movs	r1, r3
 801741a:	4b66      	ldr	r3, [pc, #408]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 801741c:	683a      	ldr	r2, [r7, #0]
 801741e:	430a      	orrs	r2, r1
 8017420:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017422:	4b64      	ldr	r3, [pc, #400]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2207      	movs	r2, #7
 8017428:	4013      	ands	r3, r2
 801742a:	683a      	ldr	r2, [r7, #0]
 801742c:	429a      	cmp	r2, r3
 801742e:	d001      	beq.n	8017434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017430:	2301      	movs	r3, #1
 8017432:	e0bb      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	2201      	movs	r2, #1
 801743a:	4013      	ands	r3, r2
 801743c:	d100      	bne.n	8017440 <HAL_RCC_ClockConfig+0x48>
 801743e:	e064      	b.n	801750a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	685b      	ldr	r3, [r3, #4]
 8017444:	2b03      	cmp	r3, #3
 8017446:	d107      	bne.n	8017458 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017448:	4b5b      	ldr	r3, [pc, #364]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 801744a:	681a      	ldr	r2, [r3, #0]
 801744c:	2380      	movs	r3, #128	@ 0x80
 801744e:	049b      	lsls	r3, r3, #18
 8017450:	4013      	ands	r3, r2
 8017452:	d138      	bne.n	80174c6 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8017454:	2301      	movs	r3, #1
 8017456:	e0a9      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	685b      	ldr	r3, [r3, #4]
 801745c:	2b02      	cmp	r3, #2
 801745e:	d107      	bne.n	8017470 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017460:	4b55      	ldr	r3, [pc, #340]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017462:	681a      	ldr	r2, [r3, #0]
 8017464:	2380      	movs	r3, #128	@ 0x80
 8017466:	029b      	lsls	r3, r3, #10
 8017468:	4013      	ands	r3, r2
 801746a:	d12c      	bne.n	80174c6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801746c:	2301      	movs	r3, #1
 801746e:	e09d      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d106      	bne.n	8017486 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017478:	4b4f      	ldr	r3, [pc, #316]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2202      	movs	r2, #2
 801747e:	4013      	ands	r3, r2
 8017480:	d121      	bne.n	80174c6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8017482:	2301      	movs	r3, #1
 8017484:	e092      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	685b      	ldr	r3, [r3, #4]
 801748a:	2b01      	cmp	r3, #1
 801748c:	d107      	bne.n	801749e <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801748e:	4b4a      	ldr	r3, [pc, #296]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017490:	681a      	ldr	r2, [r3, #0]
 8017492:	2380      	movs	r3, #128	@ 0x80
 8017494:	00db      	lsls	r3, r3, #3
 8017496:	4013      	ands	r3, r2
 8017498:	d115      	bne.n	80174c6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801749a:	2301      	movs	r3, #1
 801749c:	e086      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	2b04      	cmp	r3, #4
 80174a4:	d107      	bne.n	80174b6 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80174a6:	4a44      	ldr	r2, [pc, #272]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 80174a8:	2394      	movs	r3, #148	@ 0x94
 80174aa:	58d3      	ldr	r3, [r2, r3]
 80174ac:	2202      	movs	r2, #2
 80174ae:	4013      	ands	r3, r2
 80174b0:	d109      	bne.n	80174c6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80174b2:	2301      	movs	r3, #1
 80174b4:	e07a      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80174b6:	4a40      	ldr	r2, [pc, #256]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 80174b8:	2390      	movs	r3, #144	@ 0x90
 80174ba:	58d3      	ldr	r3, [r2, r3]
 80174bc:	2202      	movs	r2, #2
 80174be:	4013      	ands	r3, r2
 80174c0:	d101      	bne.n	80174c6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80174c2:	2301      	movs	r3, #1
 80174c4:	e072      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80174c6:	4b3c      	ldr	r3, [pc, #240]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 80174c8:	689b      	ldr	r3, [r3, #8]
 80174ca:	2207      	movs	r2, #7
 80174cc:	4393      	bics	r3, r2
 80174ce:	0019      	movs	r1, r3
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	685a      	ldr	r2, [r3, #4]
 80174d4:	4b38      	ldr	r3, [pc, #224]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 80174d6:	430a      	orrs	r2, r1
 80174d8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80174da:	f7fa fc99 	bl	8011e10 <HAL_GetTick>
 80174de:	0003      	movs	r3, r0
 80174e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80174e2:	e009      	b.n	80174f8 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80174e4:	f7fa fc94 	bl	8011e10 <HAL_GetTick>
 80174e8:	0002      	movs	r2, r0
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	1ad3      	subs	r3, r2, r3
 80174ee:	4a33      	ldr	r2, [pc, #204]	@ (80175bc <HAL_RCC_ClockConfig+0x1c4>)
 80174f0:	4293      	cmp	r3, r2
 80174f2:	d901      	bls.n	80174f8 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80174f4:	2303      	movs	r3, #3
 80174f6:	e059      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80174f8:	4b2f      	ldr	r3, [pc, #188]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 80174fa:	689b      	ldr	r3, [r3, #8]
 80174fc:	2238      	movs	r2, #56	@ 0x38
 80174fe:	401a      	ands	r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	685b      	ldr	r3, [r3, #4]
 8017504:	00db      	lsls	r3, r3, #3
 8017506:	429a      	cmp	r2, r3
 8017508:	d1ec      	bne.n	80174e4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	2202      	movs	r2, #2
 8017510:	4013      	ands	r3, r2
 8017512:	d009      	beq.n	8017528 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017514:	4b28      	ldr	r3, [pc, #160]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	4a29      	ldr	r2, [pc, #164]	@ (80175c0 <HAL_RCC_ClockConfig+0x1c8>)
 801751a:	4013      	ands	r3, r2
 801751c:	0019      	movs	r1, r3
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	689a      	ldr	r2, [r3, #8]
 8017522:	4b25      	ldr	r3, [pc, #148]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017524:	430a      	orrs	r2, r1
 8017526:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017528:	4b22      	ldr	r3, [pc, #136]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	2207      	movs	r2, #7
 801752e:	4013      	ands	r3, r2
 8017530:	683a      	ldr	r2, [r7, #0]
 8017532:	429a      	cmp	r2, r3
 8017534:	d211      	bcs.n	801755a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017536:	4b1f      	ldr	r3, [pc, #124]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2207      	movs	r2, #7
 801753c:	4393      	bics	r3, r2
 801753e:	0019      	movs	r1, r3
 8017540:	4b1c      	ldr	r3, [pc, #112]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 8017542:	683a      	ldr	r2, [r7, #0]
 8017544:	430a      	orrs	r2, r1
 8017546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017548:	4b1a      	ldr	r3, [pc, #104]	@ (80175b4 <HAL_RCC_ClockConfig+0x1bc>)
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	2207      	movs	r2, #7
 801754e:	4013      	ands	r3, r2
 8017550:	683a      	ldr	r2, [r7, #0]
 8017552:	429a      	cmp	r2, r3
 8017554:	d001      	beq.n	801755a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8017556:	2301      	movs	r3, #1
 8017558:	e028      	b.n	80175ac <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2204      	movs	r2, #4
 8017560:	4013      	ands	r3, r2
 8017562:	d009      	beq.n	8017578 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8017564:	4b14      	ldr	r3, [pc, #80]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017566:	689b      	ldr	r3, [r3, #8]
 8017568:	4a16      	ldr	r2, [pc, #88]	@ (80175c4 <HAL_RCC_ClockConfig+0x1cc>)
 801756a:	4013      	ands	r3, r2
 801756c:	0019      	movs	r1, r3
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	68da      	ldr	r2, [r3, #12]
 8017572:	4b11      	ldr	r3, [pc, #68]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017574:	430a      	orrs	r2, r1
 8017576:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8017578:	f000 f82a 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 801757c:	0001      	movs	r1, r0
 801757e:	4b0e      	ldr	r3, [pc, #56]	@ (80175b8 <HAL_RCC_ClockConfig+0x1c0>)
 8017580:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8017582:	0a1b      	lsrs	r3, r3, #8
 8017584:	220f      	movs	r2, #15
 8017586:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8017588:	4a0f      	ldr	r2, [pc, #60]	@ (80175c8 <HAL_RCC_ClockConfig+0x1d0>)
 801758a:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801758c:	001a      	movs	r2, r3
 801758e:	231f      	movs	r3, #31
 8017590:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8017592:	000a      	movs	r2, r1
 8017594:	40da      	lsrs	r2, r3
 8017596:	4b0d      	ldr	r3, [pc, #52]	@ (80175cc <HAL_RCC_ClockConfig+0x1d4>)
 8017598:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 801759a:	250b      	movs	r5, #11
 801759c:	197c      	adds	r4, r7, r5
 801759e:	2003      	movs	r0, #3
 80175a0:	f7fa fbdc 	bl	8011d5c <HAL_InitTick>
 80175a4:	0003      	movs	r3, r0
 80175a6:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80175a8:	197b      	adds	r3, r7, r5
 80175aa:	781b      	ldrb	r3, [r3, #0]
}
 80175ac:	0018      	movs	r0, r3
 80175ae:	46bd      	mov	sp, r7
 80175b0:	b004      	add	sp, #16
 80175b2:	bdb0      	pop	{r4, r5, r7, pc}
 80175b4:	40022000 	.word	0x40022000
 80175b8:	40021000 	.word	0x40021000
 80175bc:	00001388 	.word	0x00001388
 80175c0:	fffff0ff 	.word	0xfffff0ff
 80175c4:	ffff8fff 	.word	0xffff8fff
 80175c8:	0801c4c8 	.word	0x0801c4c8
 80175cc:	2000025c 	.word	0x2000025c

080175d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b08a      	sub	sp, #40	@ 0x28
 80175d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80175d6:	2300      	movs	r3, #0
 80175d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80175da:	2300      	movs	r3, #0
 80175dc:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80175de:	4b46      	ldr	r3, [pc, #280]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80175e0:	689b      	ldr	r3, [r3, #8]
 80175e2:	2238      	movs	r2, #56	@ 0x38
 80175e4:	4013      	ands	r3, r2
 80175e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80175e8:	4b43      	ldr	r3, [pc, #268]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	2203      	movs	r2, #3
 80175ee:	4013      	ands	r3, r2
 80175f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d005      	beq.n	8017604 <HAL_RCC_GetSysClockFreq+0x34>
 80175f8:	69bb      	ldr	r3, [r7, #24]
 80175fa:	2b18      	cmp	r3, #24
 80175fc:	d125      	bne.n	801764a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	2b01      	cmp	r3, #1
 8017602:	d122      	bne.n	801764a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8017604:	4b3c      	ldr	r3, [pc, #240]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2208      	movs	r2, #8
 801760a:	4013      	ands	r3, r2
 801760c:	d107      	bne.n	801761e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 801760e:	4a3a      	ldr	r2, [pc, #232]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8017610:	2394      	movs	r3, #148	@ 0x94
 8017612:	58d3      	ldr	r3, [r2, r3]
 8017614:	0a1b      	lsrs	r3, r3, #8
 8017616:	220f      	movs	r2, #15
 8017618:	4013      	ands	r3, r2
 801761a:	627b      	str	r3, [r7, #36]	@ 0x24
 801761c:	e005      	b.n	801762a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801761e:	4b36      	ldr	r3, [pc, #216]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	091b      	lsrs	r3, r3, #4
 8017624:	220f      	movs	r2, #15
 8017626:	4013      	ands	r3, r2
 8017628:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 801762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801762c:	2b0b      	cmp	r3, #11
 801762e:	d901      	bls.n	8017634 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8017630:	2300      	movs	r3, #0
 8017632:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8017634:	4b31      	ldr	r3, [pc, #196]	@ (80176fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8017636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017638:	0092      	lsls	r2, r2, #2
 801763a:	58d3      	ldr	r3, [r2, r3]
 801763c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801763e:	69bb      	ldr	r3, [r7, #24]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d11b      	bne.n	801767c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8017644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017646:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017648:	e018      	b.n	801767c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	2b08      	cmp	r3, #8
 801764e:	d102      	bne.n	8017656 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017650:	4b2b      	ldr	r3, [pc, #172]	@ (8017700 <HAL_RCC_GetSysClockFreq+0x130>)
 8017652:	623b      	str	r3, [r7, #32]
 8017654:	e012      	b.n	801767c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	2b10      	cmp	r3, #16
 801765a:	d102      	bne.n	8017662 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801765c:	4b29      	ldr	r3, [pc, #164]	@ (8017704 <HAL_RCC_GetSysClockFreq+0x134>)
 801765e:	623b      	str	r3, [r7, #32]
 8017660:	e00c      	b.n	801767c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	2b20      	cmp	r3, #32
 8017666:	d103      	bne.n	8017670 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8017668:	23fa      	movs	r3, #250	@ 0xfa
 801766a:	01db      	lsls	r3, r3, #7
 801766c:	623b      	str	r3, [r7, #32]
 801766e:	e005      	b.n	801767c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8017670:	69bb      	ldr	r3, [r7, #24]
 8017672:	2b28      	cmp	r3, #40	@ 0x28
 8017674:	d102      	bne.n	801767c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8017676:	2380      	movs	r3, #128	@ 0x80
 8017678:	021b      	lsls	r3, r3, #8
 801767a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801767c:	69bb      	ldr	r3, [r7, #24]
 801767e:	2b18      	cmp	r3, #24
 8017680:	d135      	bne.n	80176ee <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8017682:	4b1d      	ldr	r3, [pc, #116]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8017684:	68db      	ldr	r3, [r3, #12]
 8017686:	2203      	movs	r2, #3
 8017688:	4013      	ands	r3, r2
 801768a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801768c:	4b1a      	ldr	r3, [pc, #104]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 801768e:	68db      	ldr	r3, [r3, #12]
 8017690:	091b      	lsrs	r3, r3, #4
 8017692:	2207      	movs	r2, #7
 8017694:	4013      	ands	r3, r2
 8017696:	3301      	adds	r3, #1
 8017698:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	2b02      	cmp	r3, #2
 801769e:	d003      	beq.n	80176a8 <HAL_RCC_GetSysClockFreq+0xd8>
 80176a0:	693b      	ldr	r3, [r7, #16]
 80176a2:	2b03      	cmp	r3, #3
 80176a4:	d003      	beq.n	80176ae <HAL_RCC_GetSysClockFreq+0xde>
 80176a6:	e005      	b.n	80176b4 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80176a8:	4b15      	ldr	r3, [pc, #84]	@ (8017700 <HAL_RCC_GetSysClockFreq+0x130>)
 80176aa:	61fb      	str	r3, [r7, #28]
        break;
 80176ac:	e005      	b.n	80176ba <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80176ae:	4b15      	ldr	r3, [pc, #84]	@ (8017704 <HAL_RCC_GetSysClockFreq+0x134>)
 80176b0:	61fb      	str	r3, [r7, #28]
        break;
 80176b2:	e002      	b.n	80176ba <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80176b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176b6:	61fb      	str	r3, [r7, #28]
        break;
 80176b8:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80176ba:	4b0f      	ldr	r3, [pc, #60]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80176bc:	68db      	ldr	r3, [r3, #12]
 80176be:	0a1b      	lsrs	r3, r3, #8
 80176c0:	227f      	movs	r2, #127	@ 0x7f
 80176c2:	4013      	ands	r3, r2
 80176c4:	69fa      	ldr	r2, [r7, #28]
 80176c6:	4353      	muls	r3, r2
 80176c8:	68f9      	ldr	r1, [r7, #12]
 80176ca:	0018      	movs	r0, r3
 80176cc:	f7e8 fd24 	bl	8000118 <__udivsi3>
 80176d0:	0003      	movs	r3, r0
 80176d2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80176d4:	4b08      	ldr	r3, [pc, #32]	@ (80176f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	0f5b      	lsrs	r3, r3, #29
 80176da:	2207      	movs	r2, #7
 80176dc:	4013      	ands	r3, r2
 80176de:	3301      	adds	r3, #1
 80176e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80176e2:	6879      	ldr	r1, [r7, #4]
 80176e4:	68b8      	ldr	r0, [r7, #8]
 80176e6:	f7e8 fd17 	bl	8000118 <__udivsi3>
 80176ea:	0003      	movs	r3, r0
 80176ec:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80176ee:	6a3b      	ldr	r3, [r7, #32]
}
 80176f0:	0018      	movs	r0, r3
 80176f2:	46bd      	mov	sp, r7
 80176f4:	b00a      	add	sp, #40	@ 0x28
 80176f6:	bd80      	pop	{r7, pc}
 80176f8:	40021000 	.word	0x40021000
 80176fc:	0801c4e0 	.word	0x0801c4e0
 8017700:	00f42400 	.word	0x00f42400
 8017704:	003d0900 	.word	0x003d0900

08017708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801770c:	4b02      	ldr	r3, [pc, #8]	@ (8017718 <HAL_RCC_GetHCLKFreq+0x10>)
 801770e:	681b      	ldr	r3, [r3, #0]
}
 8017710:	0018      	movs	r0, r3
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}
 8017716:	46c0      	nop			@ (mov r8, r8)
 8017718:	2000025c 	.word	0x2000025c

0801771c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8017720:	f7ff fff2 	bl	8017708 <HAL_RCC_GetHCLKFreq>
 8017724:	0001      	movs	r1, r0
 8017726:	4b07      	ldr	r3, [pc, #28]	@ (8017744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	0b1b      	lsrs	r3, r3, #12
 801772c:	2207      	movs	r2, #7
 801772e:	4013      	ands	r3, r2
 8017730:	4a05      	ldr	r2, [pc, #20]	@ (8017748 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8017732:	5cd3      	ldrb	r3, [r2, r3]
 8017734:	001a      	movs	r2, r3
 8017736:	231f      	movs	r3, #31
 8017738:	4013      	ands	r3, r2
 801773a:	40d9      	lsrs	r1, r3
 801773c:	000b      	movs	r3, r1
}
 801773e:	0018      	movs	r0, r3
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	40021000 	.word	0x40021000
 8017748:	0801c4d8 	.word	0x0801c4d8

0801774c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b086      	sub	sp, #24
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8017754:	2300      	movs	r3, #0
 8017756:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8017758:	4b2f      	ldr	r3, [pc, #188]	@ (8017818 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801775a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801775c:	2380      	movs	r3, #128	@ 0x80
 801775e:	055b      	lsls	r3, r3, #21
 8017760:	4013      	ands	r3, r2
 8017762:	d004      	beq.n	801776e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017764:	f7ff f9de 	bl	8016b24 <HAL_PWREx_GetVoltageRange>
 8017768:	0003      	movs	r3, r0
 801776a:	617b      	str	r3, [r7, #20]
 801776c:	e017      	b.n	801779e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801776e:	4b2a      	ldr	r3, [pc, #168]	@ (8017818 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017770:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017772:	4b29      	ldr	r3, [pc, #164]	@ (8017818 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017774:	2180      	movs	r1, #128	@ 0x80
 8017776:	0549      	lsls	r1, r1, #21
 8017778:	430a      	orrs	r2, r1
 801777a:	659a      	str	r2, [r3, #88]	@ 0x58
 801777c:	4b26      	ldr	r3, [pc, #152]	@ (8017818 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801777e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017780:	2380      	movs	r3, #128	@ 0x80
 8017782:	055b      	lsls	r3, r3, #21
 8017784:	4013      	ands	r3, r2
 8017786:	60fb      	str	r3, [r7, #12]
 8017788:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801778a:	f7ff f9cb 	bl	8016b24 <HAL_PWREx_GetVoltageRange>
 801778e:	0003      	movs	r3, r0
 8017790:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8017792:	4b21      	ldr	r3, [pc, #132]	@ (8017818 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017794:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017796:	4b20      	ldr	r3, [pc, #128]	@ (8017818 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017798:	4920      	ldr	r1, [pc, #128]	@ (801781c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 801779a:	400a      	ands	r2, r1
 801779c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801779e:	697a      	ldr	r2, [r7, #20]
 80177a0:	2380      	movs	r3, #128	@ 0x80
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d111      	bne.n	80177cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2b80      	cmp	r3, #128	@ 0x80
 80177ac:	d91c      	bls.n	80177e8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	2bb0      	cmp	r3, #176	@ 0xb0
 80177b2:	d902      	bls.n	80177ba <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80177b4:	2302      	movs	r3, #2
 80177b6:	613b      	str	r3, [r7, #16]
 80177b8:	e016      	b.n	80177e8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2b90      	cmp	r3, #144	@ 0x90
 80177be:	d902      	bls.n	80177c6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80177c0:	2301      	movs	r3, #1
 80177c2:	613b      	str	r3, [r7, #16]
 80177c4:	e010      	b.n	80177e8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80177c6:	2300      	movs	r3, #0
 80177c8:	613b      	str	r3, [r7, #16]
 80177ca:	e00d      	b.n	80177e8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80177d0:	d902      	bls.n	80177d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80177d2:	2302      	movs	r3, #2
 80177d4:	613b      	str	r3, [r7, #16]
 80177d6:	e007      	b.n	80177e8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2b70      	cmp	r3, #112	@ 0x70
 80177dc:	d102      	bne.n	80177e4 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80177de:	2301      	movs	r3, #1
 80177e0:	613b      	str	r3, [r7, #16]
 80177e2:	e001      	b.n	80177e8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80177e4:	2300      	movs	r3, #0
 80177e6:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80177e8:	4b0d      	ldr	r3, [pc, #52]	@ (8017820 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2207      	movs	r2, #7
 80177ee:	4393      	bics	r3, r2
 80177f0:	0019      	movs	r1, r3
 80177f2:	4b0b      	ldr	r3, [pc, #44]	@ (8017820 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80177f4:	693a      	ldr	r2, [r7, #16]
 80177f6:	430a      	orrs	r2, r1
 80177f8:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80177fa:	4b09      	ldr	r3, [pc, #36]	@ (8017820 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	2207      	movs	r2, #7
 8017800:	4013      	ands	r3, r2
 8017802:	693a      	ldr	r2, [r7, #16]
 8017804:	429a      	cmp	r2, r3
 8017806:	d001      	beq.n	801780c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8017808:	2301      	movs	r3, #1
 801780a:	e000      	b.n	801780e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 801780c:	2300      	movs	r3, #0
}
 801780e:	0018      	movs	r0, r3
 8017810:	46bd      	mov	sp, r7
 8017812:	b006      	add	sp, #24
 8017814:	bd80      	pop	{r7, pc}
 8017816:	46c0      	nop			@ (mov r8, r8)
 8017818:	40021000 	.word	0x40021000
 801781c:	efffffff 	.word	0xefffffff
 8017820:	40022000 	.word	0x40022000

08017824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b086      	sub	sp, #24
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801782c:	2313      	movs	r3, #19
 801782e:	18fb      	adds	r3, r7, r3
 8017830:	2200      	movs	r2, #0
 8017832:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017834:	2312      	movs	r3, #18
 8017836:	18fb      	adds	r3, r7, r3
 8017838:	2200      	movs	r2, #0
 801783a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	681a      	ldr	r2, [r3, #0]
 8017840:	2380      	movs	r3, #128	@ 0x80
 8017842:	021b      	lsls	r3, r3, #8
 8017844:	4013      	ands	r3, r2
 8017846:	d100      	bne.n	801784a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8017848:	e0b7      	b.n	80179ba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 801784a:	2011      	movs	r0, #17
 801784c:	183b      	adds	r3, r7, r0
 801784e:	2200      	movs	r2, #0
 8017850:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017852:	4b4c      	ldr	r3, [pc, #304]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017854:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017856:	2380      	movs	r3, #128	@ 0x80
 8017858:	055b      	lsls	r3, r3, #21
 801785a:	4013      	ands	r3, r2
 801785c:	d110      	bne.n	8017880 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801785e:	4b49      	ldr	r3, [pc, #292]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017860:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017862:	4b48      	ldr	r3, [pc, #288]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017864:	2180      	movs	r1, #128	@ 0x80
 8017866:	0549      	lsls	r1, r1, #21
 8017868:	430a      	orrs	r2, r1
 801786a:	659a      	str	r2, [r3, #88]	@ 0x58
 801786c:	4b45      	ldr	r3, [pc, #276]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801786e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017870:	2380      	movs	r3, #128	@ 0x80
 8017872:	055b      	lsls	r3, r3, #21
 8017874:	4013      	ands	r3, r2
 8017876:	60bb      	str	r3, [r7, #8]
 8017878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801787a:	183b      	adds	r3, r7, r0
 801787c:	2201      	movs	r2, #1
 801787e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017880:	4b41      	ldr	r3, [pc, #260]	@ (8017988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8017882:	681a      	ldr	r2, [r3, #0]
 8017884:	4b40      	ldr	r3, [pc, #256]	@ (8017988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8017886:	2180      	movs	r1, #128	@ 0x80
 8017888:	0049      	lsls	r1, r1, #1
 801788a:	430a      	orrs	r2, r1
 801788c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801788e:	f7fa fabf 	bl	8011e10 <HAL_GetTick>
 8017892:	0003      	movs	r3, r0
 8017894:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8017896:	e00b      	b.n	80178b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017898:	f7fa faba 	bl	8011e10 <HAL_GetTick>
 801789c:	0002      	movs	r2, r0
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	1ad3      	subs	r3, r2, r3
 80178a2:	2b02      	cmp	r3, #2
 80178a4:	d904      	bls.n	80178b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80178a6:	2313      	movs	r3, #19
 80178a8:	18fb      	adds	r3, r7, r3
 80178aa:	2203      	movs	r2, #3
 80178ac:	701a      	strb	r2, [r3, #0]
        break;
 80178ae:	e005      	b.n	80178bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80178b0:	4b35      	ldr	r3, [pc, #212]	@ (8017988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80178b2:	681a      	ldr	r2, [r3, #0]
 80178b4:	2380      	movs	r3, #128	@ 0x80
 80178b6:	005b      	lsls	r3, r3, #1
 80178b8:	4013      	ands	r3, r2
 80178ba:	d0ed      	beq.n	8017898 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80178bc:	2313      	movs	r3, #19
 80178be:	18fb      	adds	r3, r7, r3
 80178c0:	781b      	ldrb	r3, [r3, #0]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d168      	bne.n	8017998 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80178c6:	4a2f      	ldr	r2, [pc, #188]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80178c8:	2390      	movs	r3, #144	@ 0x90
 80178ca:	58d2      	ldr	r2, [r2, r3]
 80178cc:	23c0      	movs	r3, #192	@ 0xc0
 80178ce:	009b      	lsls	r3, r3, #2
 80178d0:	4013      	ands	r3, r2
 80178d2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d01f      	beq.n	801791a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178de:	697a      	ldr	r2, [r7, #20]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d01a      	beq.n	801791a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80178e4:	4a27      	ldr	r2, [pc, #156]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80178e6:	2390      	movs	r3, #144	@ 0x90
 80178e8:	58d3      	ldr	r3, [r2, r3]
 80178ea:	4a28      	ldr	r2, [pc, #160]	@ (801798c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80178ec:	4013      	ands	r3, r2
 80178ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80178f0:	4a24      	ldr	r2, [pc, #144]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80178f2:	2390      	movs	r3, #144	@ 0x90
 80178f4:	58d3      	ldr	r3, [r2, r3]
 80178f6:	4923      	ldr	r1, [pc, #140]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80178f8:	2280      	movs	r2, #128	@ 0x80
 80178fa:	0252      	lsls	r2, r2, #9
 80178fc:	4313      	orrs	r3, r2
 80178fe:	2290      	movs	r2, #144	@ 0x90
 8017900:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017902:	4a20      	ldr	r2, [pc, #128]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017904:	2390      	movs	r3, #144	@ 0x90
 8017906:	58d3      	ldr	r3, [r2, r3]
 8017908:	491e      	ldr	r1, [pc, #120]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801790a:	4a21      	ldr	r2, [pc, #132]	@ (8017990 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 801790c:	4013      	ands	r3, r2
 801790e:	2290      	movs	r2, #144	@ 0x90
 8017910:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017912:	491c      	ldr	r1, [pc, #112]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017914:	2290      	movs	r2, #144	@ 0x90
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	2201      	movs	r2, #1
 801791e:	4013      	ands	r3, r2
 8017920:	d017      	beq.n	8017952 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017922:	f7fa fa75 	bl	8011e10 <HAL_GetTick>
 8017926:	0003      	movs	r3, r0
 8017928:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801792a:	e00c      	b.n	8017946 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801792c:	f7fa fa70 	bl	8011e10 <HAL_GetTick>
 8017930:	0002      	movs	r2, r0
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	1ad3      	subs	r3, r2, r3
 8017936:	4a17      	ldr	r2, [pc, #92]	@ (8017994 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8017938:	4293      	cmp	r3, r2
 801793a:	d904      	bls.n	8017946 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 801793c:	2313      	movs	r3, #19
 801793e:	18fb      	adds	r3, r7, r3
 8017940:	2203      	movs	r2, #3
 8017942:	701a      	strb	r2, [r3, #0]
            break;
 8017944:	e005      	b.n	8017952 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017946:	4a0f      	ldr	r2, [pc, #60]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017948:	2390      	movs	r3, #144	@ 0x90
 801794a:	58d3      	ldr	r3, [r2, r3]
 801794c:	2202      	movs	r2, #2
 801794e:	4013      	ands	r3, r2
 8017950:	d0ec      	beq.n	801792c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8017952:	2313      	movs	r3, #19
 8017954:	18fb      	adds	r3, r7, r3
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d10b      	bne.n	8017974 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801795c:	4a09      	ldr	r2, [pc, #36]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801795e:	2390      	movs	r3, #144	@ 0x90
 8017960:	58d3      	ldr	r3, [r2, r3]
 8017962:	4a0a      	ldr	r2, [pc, #40]	@ (801798c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8017964:	401a      	ands	r2, r3
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801796a:	4906      	ldr	r1, [pc, #24]	@ (8017984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801796c:	4313      	orrs	r3, r2
 801796e:	2290      	movs	r2, #144	@ 0x90
 8017970:	508b      	str	r3, [r1, r2]
 8017972:	e017      	b.n	80179a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017974:	2312      	movs	r3, #18
 8017976:	18fb      	adds	r3, r7, r3
 8017978:	2213      	movs	r2, #19
 801797a:	18ba      	adds	r2, r7, r2
 801797c:	7812      	ldrb	r2, [r2, #0]
 801797e:	701a      	strb	r2, [r3, #0]
 8017980:	e010      	b.n	80179a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8017982:	46c0      	nop			@ (mov r8, r8)
 8017984:	40021000 	.word	0x40021000
 8017988:	40007000 	.word	0x40007000
 801798c:	fffffcff 	.word	0xfffffcff
 8017990:	fffeffff 	.word	0xfffeffff
 8017994:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017998:	2312      	movs	r3, #18
 801799a:	18fb      	adds	r3, r7, r3
 801799c:	2213      	movs	r2, #19
 801799e:	18ba      	adds	r2, r7, r2
 80179a0:	7812      	ldrb	r2, [r2, #0]
 80179a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80179a4:	2311      	movs	r3, #17
 80179a6:	18fb      	adds	r3, r7, r3
 80179a8:	781b      	ldrb	r3, [r3, #0]
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d105      	bne.n	80179ba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80179ae:	4ba4      	ldr	r3, [pc, #656]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80179b2:	4ba3      	ldr	r3, [pc, #652]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179b4:	49a3      	ldr	r1, [pc, #652]	@ (8017c44 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80179b6:	400a      	ands	r2, r1
 80179b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	2201      	movs	r2, #1
 80179c0:	4013      	ands	r3, r2
 80179c2:	d00b      	beq.n	80179dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80179c4:	4a9e      	ldr	r2, [pc, #632]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179c6:	2388      	movs	r3, #136	@ 0x88
 80179c8:	58d3      	ldr	r3, [r2, r3]
 80179ca:	2203      	movs	r2, #3
 80179cc:	4393      	bics	r3, r2
 80179ce:	001a      	movs	r2, r3
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	499a      	ldr	r1, [pc, #616]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179d6:	4313      	orrs	r3, r2
 80179d8:	2288      	movs	r2, #136	@ 0x88
 80179da:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	2202      	movs	r2, #2
 80179e2:	4013      	ands	r3, r2
 80179e4:	d00b      	beq.n	80179fe <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80179e6:	4a96      	ldr	r2, [pc, #600]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179e8:	2388      	movs	r3, #136	@ 0x88
 80179ea:	58d3      	ldr	r3, [r2, r3]
 80179ec:	220c      	movs	r2, #12
 80179ee:	4393      	bics	r3, r2
 80179f0:	001a      	movs	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	689b      	ldr	r3, [r3, #8]
 80179f6:	4992      	ldr	r1, [pc, #584]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179f8:	4313      	orrs	r3, r2
 80179fa:	2288      	movs	r2, #136	@ 0x88
 80179fc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	2210      	movs	r2, #16
 8017a04:	4013      	ands	r3, r2
 8017a06:	d00a      	beq.n	8017a1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017a08:	4a8d      	ldr	r2, [pc, #564]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a0a:	2388      	movs	r3, #136	@ 0x88
 8017a0c:	58d3      	ldr	r3, [r2, r3]
 8017a0e:	4a8e      	ldr	r2, [pc, #568]	@ (8017c48 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8017a10:	401a      	ands	r2, r3
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	695b      	ldr	r3, [r3, #20]
 8017a16:	498a      	ldr	r1, [pc, #552]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a18:	4313      	orrs	r3, r2
 8017a1a:	2288      	movs	r2, #136	@ 0x88
 8017a1c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	2208      	movs	r2, #8
 8017a24:	4013      	ands	r3, r2
 8017a26:	d00a      	beq.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8017a28:	4a85      	ldr	r2, [pc, #532]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a2a:	2388      	movs	r3, #136	@ 0x88
 8017a2c:	58d3      	ldr	r3, [r2, r3]
 8017a2e:	4a87      	ldr	r2, [pc, #540]	@ (8017c4c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8017a30:	401a      	ands	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	691b      	ldr	r3, [r3, #16]
 8017a36:	4982      	ldr	r1, [pc, #520]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a38:	4313      	orrs	r3, r2
 8017a3a:	2288      	movs	r2, #136	@ 0x88
 8017a3c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2204      	movs	r2, #4
 8017a44:	4013      	ands	r3, r2
 8017a46:	d00b      	beq.n	8017a60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8017a48:	4a7d      	ldr	r2, [pc, #500]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a4a:	2388      	movs	r3, #136	@ 0x88
 8017a4c:	58d3      	ldr	r3, [r2, r3]
 8017a4e:	22c0      	movs	r2, #192	@ 0xc0
 8017a50:	4393      	bics	r3, r2
 8017a52:	001a      	movs	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	68db      	ldr	r3, [r3, #12]
 8017a58:	4979      	ldr	r1, [pc, #484]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a5a:	4313      	orrs	r3, r2
 8017a5c:	2288      	movs	r2, #136	@ 0x88
 8017a5e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2220      	movs	r2, #32
 8017a66:	4013      	ands	r3, r2
 8017a68:	d00a      	beq.n	8017a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017a6a:	4a75      	ldr	r2, [pc, #468]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a6c:	2388      	movs	r3, #136	@ 0x88
 8017a6e:	58d3      	ldr	r3, [r2, r3]
 8017a70:	4a77      	ldr	r2, [pc, #476]	@ (8017c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8017a72:	401a      	ands	r2, r3
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	699b      	ldr	r3, [r3, #24]
 8017a78:	4971      	ldr	r1, [pc, #452]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a7a:	4313      	orrs	r3, r2
 8017a7c:	2288      	movs	r2, #136	@ 0x88
 8017a7e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2240      	movs	r2, #64	@ 0x40
 8017a86:	4013      	ands	r3, r2
 8017a88:	d00a      	beq.n	8017aa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017a8a:	4a6d      	ldr	r2, [pc, #436]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a8c:	2388      	movs	r3, #136	@ 0x88
 8017a8e:	58d3      	ldr	r3, [r2, r3]
 8017a90:	4a70      	ldr	r2, [pc, #448]	@ (8017c54 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8017a92:	401a      	ands	r2, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	69db      	ldr	r3, [r3, #28]
 8017a98:	4969      	ldr	r1, [pc, #420]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	2288      	movs	r2, #136	@ 0x88
 8017a9e:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	2280      	movs	r2, #128	@ 0x80
 8017aa6:	4013      	ands	r3, r2
 8017aa8:	d00a      	beq.n	8017ac0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017aaa:	4a65      	ldr	r2, [pc, #404]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017aac:	2388      	movs	r3, #136	@ 0x88
 8017aae:	58d3      	ldr	r3, [r2, r3]
 8017ab0:	4a69      	ldr	r2, [pc, #420]	@ (8017c58 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8017ab2:	401a      	ands	r2, r3
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	6a1b      	ldr	r3, [r3, #32]
 8017ab8:	4961      	ldr	r1, [pc, #388]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017aba:	4313      	orrs	r3, r2
 8017abc:	2288      	movs	r2, #136	@ 0x88
 8017abe:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681a      	ldr	r2, [r3, #0]
 8017ac4:	2380      	movs	r3, #128	@ 0x80
 8017ac6:	005b      	lsls	r3, r3, #1
 8017ac8:	4013      	ands	r3, r2
 8017aca:	d00a      	beq.n	8017ae2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017acc:	4a5c      	ldr	r2, [pc, #368]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017ace:	2388      	movs	r3, #136	@ 0x88
 8017ad0:	58d3      	ldr	r3, [r2, r3]
 8017ad2:	4a62      	ldr	r2, [pc, #392]	@ (8017c5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8017ad4:	401a      	ands	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ada:	4959      	ldr	r1, [pc, #356]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017adc:	4313      	orrs	r3, r2
 8017ade:	2288      	movs	r2, #136	@ 0x88
 8017ae0:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681a      	ldr	r2, [r3, #0]
 8017ae6:	2380      	movs	r3, #128	@ 0x80
 8017ae8:	009b      	lsls	r3, r3, #2
 8017aea:	4013      	ands	r3, r2
 8017aec:	d00a      	beq.n	8017b04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8017aee:	4a54      	ldr	r2, [pc, #336]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017af0:	2388      	movs	r3, #136	@ 0x88
 8017af2:	58d3      	ldr	r3, [r2, r3]
 8017af4:	4a5a      	ldr	r2, [pc, #360]	@ (8017c60 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8017af6:	401a      	ands	r2, r3
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017afc:	4950      	ldr	r1, [pc, #320]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017afe:	4313      	orrs	r3, r2
 8017b00:	2288      	movs	r2, #136	@ 0x88
 8017b02:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681a      	ldr	r2, [r3, #0]
 8017b08:	2380      	movs	r3, #128	@ 0x80
 8017b0a:	01db      	lsls	r3, r3, #7
 8017b0c:	4013      	ands	r3, r2
 8017b0e:	d017      	beq.n	8017b40 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017b14:	2380      	movs	r3, #128	@ 0x80
 8017b16:	055b      	lsls	r3, r3, #21
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d106      	bne.n	8017b2a <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8017b1c:	4b48      	ldr	r3, [pc, #288]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b1e:	68da      	ldr	r2, [r3, #12]
 8017b20:	4b47      	ldr	r3, [pc, #284]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b22:	2180      	movs	r1, #128	@ 0x80
 8017b24:	0249      	lsls	r1, r1, #9
 8017b26:	430a      	orrs	r2, r1
 8017b28:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017b2a:	4a45      	ldr	r2, [pc, #276]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b2c:	2388      	movs	r3, #136	@ 0x88
 8017b2e:	58d3      	ldr	r3, [r2, r3]
 8017b30:	4a4c      	ldr	r2, [pc, #304]	@ (8017c64 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8017b32:	401a      	ands	r2, r3
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b38:	4941      	ldr	r1, [pc, #260]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b3a:	4313      	orrs	r3, r2
 8017b3c:	2288      	movs	r2, #136	@ 0x88
 8017b3e:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681a      	ldr	r2, [r3, #0]
 8017b44:	2380      	movs	r3, #128	@ 0x80
 8017b46:	015b      	lsls	r3, r3, #5
 8017b48:	4013      	ands	r3, r2
 8017b4a:	d017      	beq.n	8017b7c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b50:	2380      	movs	r3, #128	@ 0x80
 8017b52:	051b      	lsls	r3, r3, #20
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d106      	bne.n	8017b66 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017b58:	4b39      	ldr	r3, [pc, #228]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b5a:	68da      	ldr	r2, [r3, #12]
 8017b5c:	4b38      	ldr	r3, [pc, #224]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b5e:	2180      	movs	r1, #128	@ 0x80
 8017b60:	0449      	lsls	r1, r1, #17
 8017b62:	430a      	orrs	r2, r1
 8017b64:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017b66:	4a36      	ldr	r2, [pc, #216]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b68:	2388      	movs	r3, #136	@ 0x88
 8017b6a:	58d3      	ldr	r3, [r2, r3]
 8017b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8017c68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8017b6e:	401a      	ands	r2, r3
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b74:	4932      	ldr	r1, [pc, #200]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b76:	4313      	orrs	r3, r2
 8017b78:	2288      	movs	r2, #136	@ 0x88
 8017b7a:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681a      	ldr	r2, [r3, #0]
 8017b80:	2380      	movs	r3, #128	@ 0x80
 8017b82:	019b      	lsls	r3, r3, #6
 8017b84:	4013      	ands	r3, r2
 8017b86:	d017      	beq.n	8017bb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b8c:	2380      	movs	r3, #128	@ 0x80
 8017b8e:	051b      	lsls	r3, r3, #20
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d106      	bne.n	8017ba2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017b94:	4b2a      	ldr	r3, [pc, #168]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b96:	68da      	ldr	r2, [r3, #12]
 8017b98:	4b29      	ldr	r3, [pc, #164]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b9a:	2180      	movs	r1, #128	@ 0x80
 8017b9c:	0449      	lsls	r1, r1, #17
 8017b9e:	430a      	orrs	r2, r1
 8017ba0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017ba2:	4a27      	ldr	r2, [pc, #156]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017ba4:	2388      	movs	r3, #136	@ 0x88
 8017ba6:	58d3      	ldr	r3, [r2, r3]
 8017ba8:	4a2f      	ldr	r2, [pc, #188]	@ (8017c68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8017baa:	401a      	ands	r2, r3
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bb0:	4923      	ldr	r1, [pc, #140]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	2288      	movs	r2, #136	@ 0x88
 8017bb6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681a      	ldr	r2, [r3, #0]
 8017bbc:	2380      	movs	r3, #128	@ 0x80
 8017bbe:	00db      	lsls	r3, r3, #3
 8017bc0:	4013      	ands	r3, r2
 8017bc2:	d017      	beq.n	8017bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017bc8:	2380      	movs	r3, #128	@ 0x80
 8017bca:	045b      	lsls	r3, r3, #17
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d106      	bne.n	8017bde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bd2:	68da      	ldr	r2, [r3, #12]
 8017bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bd6:	2180      	movs	r1, #128	@ 0x80
 8017bd8:	0449      	lsls	r1, r1, #17
 8017bda:	430a      	orrs	r2, r1
 8017bdc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8017bde:	4a18      	ldr	r2, [pc, #96]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017be0:	2388      	movs	r3, #136	@ 0x88
 8017be2:	58d3      	ldr	r3, [r2, r3]
 8017be4:	4a21      	ldr	r2, [pc, #132]	@ (8017c6c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8017be6:	401a      	ands	r2, r3
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bec:	4914      	ldr	r1, [pc, #80]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bee:	4313      	orrs	r3, r2
 8017bf0:	2288      	movs	r2, #136	@ 0x88
 8017bf2:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681a      	ldr	r2, [r3, #0]
 8017bf8:	2380      	movs	r3, #128	@ 0x80
 8017bfa:	011b      	lsls	r3, r3, #4
 8017bfc:	4013      	ands	r3, r2
 8017bfe:	d017      	beq.n	8017c30 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017c04:	2380      	movs	r3, #128	@ 0x80
 8017c06:	049b      	lsls	r3, r3, #18
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d106      	bne.n	8017c1a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c0e:	68da      	ldr	r2, [r3, #12]
 8017c10:	4b0b      	ldr	r3, [pc, #44]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c12:	2180      	movs	r1, #128	@ 0x80
 8017c14:	0449      	lsls	r1, r1, #17
 8017c16:	430a      	orrs	r2, r1
 8017c18:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8017c1a:	4a09      	ldr	r2, [pc, #36]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c1c:	2388      	movs	r3, #136	@ 0x88
 8017c1e:	58d3      	ldr	r3, [r2, r3]
 8017c20:	4a12      	ldr	r2, [pc, #72]	@ (8017c6c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8017c22:	401a      	ands	r2, r3
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c28:	4905      	ldr	r1, [pc, #20]	@ (8017c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c2a:	4313      	orrs	r3, r2
 8017c2c:	2288      	movs	r2, #136	@ 0x88
 8017c2e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8017c30:	2312      	movs	r3, #18
 8017c32:	18fb      	adds	r3, r7, r3
 8017c34:	781b      	ldrb	r3, [r3, #0]
}
 8017c36:	0018      	movs	r0, r3
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	b006      	add	sp, #24
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	46c0      	nop			@ (mov r8, r8)
 8017c40:	40021000 	.word	0x40021000
 8017c44:	efffffff 	.word	0xefffffff
 8017c48:	fffff3ff 	.word	0xfffff3ff
 8017c4c:	fffffcff 	.word	0xfffffcff
 8017c50:	ffffcfff 	.word	0xffffcfff
 8017c54:	fffcffff 	.word	0xfffcffff
 8017c58:	fff3ffff 	.word	0xfff3ffff
 8017c5c:	ffcfffff 	.word	0xffcfffff
 8017c60:	ff3fffff 	.word	0xff3fffff
 8017c64:	cfffffff 	.word	0xcfffffff
 8017c68:	f3ffffff 	.word	0xf3ffffff
 8017c6c:	feffffff 	.word	0xfeffffff

08017c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8017c70:	b590      	push	{r4, r7, lr}
 8017c72:	b089      	sub	sp, #36	@ 0x24
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8017c78:	2300      	movs	r3, #0
 8017c7a:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8017c7c:	687a      	ldr	r2, [r7, #4]
 8017c7e:	2380      	movs	r3, #128	@ 0x80
 8017c80:	021b      	lsls	r3, r3, #8
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d154      	bne.n	8017d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8017c86:	4ad5      	ldr	r2, [pc, #852]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017c88:	2390      	movs	r3, #144	@ 0x90
 8017c8a:	58d2      	ldr	r2, [r2, r3]
 8017c8c:	23c0      	movs	r3, #192	@ 0xc0
 8017c8e:	009b      	lsls	r3, r3, #2
 8017c90:	4013      	ands	r3, r2
 8017c92:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8017c94:	697a      	ldr	r2, [r7, #20]
 8017c96:	23c0      	movs	r3, #192	@ 0xc0
 8017c98:	009b      	lsls	r3, r3, #2
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d039      	beq.n	8017d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8017c9e:	697a      	ldr	r2, [r7, #20]
 8017ca0:	23c0      	movs	r3, #192	@ 0xc0
 8017ca2:	009b      	lsls	r3, r3, #2
 8017ca4:	429a      	cmp	r2, r3
 8017ca6:	d901      	bls.n	8017cac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8017ca8:	f000 fd1a 	bl	80186e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8017cac:	697a      	ldr	r2, [r7, #20]
 8017cae:	2380      	movs	r3, #128	@ 0x80
 8017cb0:	005b      	lsls	r3, r3, #1
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d006      	beq.n	8017cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8017cb6:	697a      	ldr	r2, [r7, #20]
 8017cb8:	2380      	movs	r3, #128	@ 0x80
 8017cba:	009b      	lsls	r3, r3, #2
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	d00f      	beq.n	8017ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8017cc0:	f000 fd0e 	bl	80186e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017cc4:	4ac5      	ldr	r2, [pc, #788]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017cc6:	2390      	movs	r3, #144	@ 0x90
 8017cc8:	58d3      	ldr	r3, [r2, r3]
 8017cca:	2202      	movs	r2, #2
 8017ccc:	4013      	ands	r3, r2
 8017cce:	2b02      	cmp	r3, #2
 8017cd0:	d001      	beq.n	8017cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8017cd2:	f000 fd07 	bl	80186e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8017cd6:	2380      	movs	r3, #128	@ 0x80
 8017cd8:	021b      	lsls	r3, r3, #8
 8017cda:	61fb      	str	r3, [r7, #28]
        break;
 8017cdc:	f000 fd02 	bl	80186e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017ce0:	4abe      	ldr	r2, [pc, #760]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ce2:	2394      	movs	r3, #148	@ 0x94
 8017ce4:	58d3      	ldr	r3, [r2, r3]
 8017ce6:	2202      	movs	r2, #2
 8017ce8:	4013      	ands	r3, r2
 8017cea:	2b02      	cmp	r3, #2
 8017cec:	d001      	beq.n	8017cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8017cee:	f000 fcfb 	bl	80186e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8017cf2:	4aba      	ldr	r2, [pc, #744]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017cf4:	2394      	movs	r3, #148	@ 0x94
 8017cf6:	58d3      	ldr	r3, [r2, r3]
 8017cf8:	2204      	movs	r2, #4
 8017cfa:	4013      	ands	r3, r2
 8017cfc:	2b04      	cmp	r3, #4
 8017cfe:	d103      	bne.n	8017d08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8017d00:	23fa      	movs	r3, #250	@ 0xfa
 8017d02:	61fb      	str	r3, [r7, #28]
        break;
 8017d04:	f000 fcf0 	bl	80186e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8017d08:	23fa      	movs	r3, #250	@ 0xfa
 8017d0a:	01db      	lsls	r3, r3, #7
 8017d0c:	61fb      	str	r3, [r7, #28]
        break;
 8017d0e:	f000 fceb 	bl	80186e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8017d12:	4bb2      	ldr	r3, [pc, #712]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017d14:	681a      	ldr	r2, [r3, #0]
 8017d16:	2380      	movs	r3, #128	@ 0x80
 8017d18:	029b      	lsls	r3, r3, #10
 8017d1a:	401a      	ands	r2, r3
 8017d1c:	2380      	movs	r3, #128	@ 0x80
 8017d1e:	029b      	lsls	r3, r3, #10
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d001      	beq.n	8017d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8017d24:	f000 fce2 	bl	80186ec <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8017d28:	4bad      	ldr	r3, [pc, #692]	@ (8017fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8017d2a:	61fb      	str	r3, [r7, #28]
        break;
 8017d2c:	f000 fcde 	bl	80186ec <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8017d30:	687a      	ldr	r2, [r7, #4]
 8017d32:	2380      	movs	r3, #128	@ 0x80
 8017d34:	029b      	lsls	r3, r3, #10
 8017d36:	429a      	cmp	r2, r3
 8017d38:	d100      	bne.n	8017d3c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8017d3a:	e11a      	b.n	8017f72 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8017d3c:	687a      	ldr	r2, [r7, #4]
 8017d3e:	2380      	movs	r3, #128	@ 0x80
 8017d40:	029b      	lsls	r3, r3, #10
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d901      	bls.n	8017d4a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8017d46:	f000 fcd3 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d4a:	687a      	ldr	r2, [r7, #4]
 8017d4c:	2380      	movs	r3, #128	@ 0x80
 8017d4e:	025b      	lsls	r3, r3, #9
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d100      	bne.n	8017d56 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8017d54:	e10d      	b.n	8017f72 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8017d56:	687a      	ldr	r2, [r7, #4]
 8017d58:	2380      	movs	r3, #128	@ 0x80
 8017d5a:	025b      	lsls	r3, r3, #9
 8017d5c:	429a      	cmp	r2, r3
 8017d5e:	d901      	bls.n	8017d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8017d60:	f000 fcc6 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d64:	687a      	ldr	r2, [r7, #4]
 8017d66:	2380      	movs	r3, #128	@ 0x80
 8017d68:	01db      	lsls	r3, r3, #7
 8017d6a:	429a      	cmp	r2, r3
 8017d6c:	d100      	bne.n	8017d70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8017d6e:	e1eb      	b.n	8018148 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8017d70:	687a      	ldr	r2, [r7, #4]
 8017d72:	2380      	movs	r3, #128	@ 0x80
 8017d74:	01db      	lsls	r3, r3, #7
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d901      	bls.n	8017d7e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8017d7a:	f000 fcb9 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d7e:	687a      	ldr	r2, [r7, #4]
 8017d80:	2380      	movs	r3, #128	@ 0x80
 8017d82:	019b      	lsls	r3, r3, #6
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d101      	bne.n	8017d8c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8017d88:	f000 fc50 	bl	801862c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8017d8c:	687a      	ldr	r2, [r7, #4]
 8017d8e:	2380      	movs	r3, #128	@ 0x80
 8017d90:	019b      	lsls	r3, r3, #6
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d901      	bls.n	8017d9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8017d96:	f000 fcab 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d9a:	687a      	ldr	r2, [r7, #4]
 8017d9c:	2380      	movs	r3, #128	@ 0x80
 8017d9e:	015b      	lsls	r3, r3, #5
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d101      	bne.n	8017da8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8017da4:	f000 fbe2 	bl	801856c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8017da8:	687a      	ldr	r2, [r7, #4]
 8017daa:	2380      	movs	r3, #128	@ 0x80
 8017dac:	015b      	lsls	r3, r3, #5
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d901      	bls.n	8017db6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8017db2:	f000 fc9d 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017db6:	687a      	ldr	r2, [r7, #4]
 8017db8:	2380      	movs	r3, #128	@ 0x80
 8017dba:	011b      	lsls	r3, r3, #4
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d101      	bne.n	8017dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8017dc0:	f000 fba9 	bl	8018516 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8017dc4:	687a      	ldr	r2, [r7, #4]
 8017dc6:	2380      	movs	r3, #128	@ 0x80
 8017dc8:	011b      	lsls	r3, r3, #4
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d901      	bls.n	8017dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8017dce:	f000 fc8f 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017dd2:	687a      	ldr	r2, [r7, #4]
 8017dd4:	2380      	movs	r3, #128	@ 0x80
 8017dd6:	00db      	lsls	r3, r3, #3
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d101      	bne.n	8017de0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8017ddc:	f000 fb70 	bl	80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	2380      	movs	r3, #128	@ 0x80
 8017de4:	00db      	lsls	r3, r3, #3
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d901      	bls.n	8017dee <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8017dea:	f000 fc81 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017dee:	687a      	ldr	r2, [r7, #4]
 8017df0:	2380      	movs	r3, #128	@ 0x80
 8017df2:	009b      	lsls	r3, r3, #2
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d100      	bne.n	8017dfa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8017df8:	e305      	b.n	8018406 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	2380      	movs	r3, #128	@ 0x80
 8017dfe:	009b      	lsls	r3, r3, #2
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d901      	bls.n	8017e08 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8017e04:	f000 fc74 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017e08:	687a      	ldr	r2, [r7, #4]
 8017e0a:	2380      	movs	r3, #128	@ 0x80
 8017e0c:	005b      	lsls	r3, r3, #1
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d100      	bne.n	8017e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8017e12:	e29b      	b.n	801834c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8017e14:	687a      	ldr	r2, [r7, #4]
 8017e16:	2380      	movs	r3, #128	@ 0x80
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d901      	bls.n	8017e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8017e1e:	f000 fc67 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2b80      	cmp	r3, #128	@ 0x80
 8017e26:	d100      	bne.n	8017e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8017e28:	e22f      	b.n	801828a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2b80      	cmp	r3, #128	@ 0x80
 8017e2e:	d901      	bls.n	8017e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8017e30:	f000 fc5e 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	2b20      	cmp	r3, #32
 8017e38:	d80f      	bhi.n	8017e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d101      	bne.n	8017e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8017e40:	f000 fc56 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2b20      	cmp	r3, #32
 8017e48:	d901      	bls.n	8017e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8017e4a:	f000 fc51 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	009a      	lsls	r2, r3, #2
 8017e52:	4b64      	ldr	r3, [pc, #400]	@ (8017fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8017e54:	18d3      	adds	r3, r2, r3
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	469f      	mov	pc, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2b40      	cmp	r3, #64	@ 0x40
 8017e5e:	d100      	bne.n	8017e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8017e60:	e1df      	b.n	8018222 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8017e62:	f000 fc45 	bl	80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8017e66:	4a5d      	ldr	r2, [pc, #372]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017e68:	2388      	movs	r3, #136	@ 0x88
 8017e6a:	58d3      	ldr	r3, [r2, r3]
 8017e6c:	2203      	movs	r2, #3
 8017e6e:	4013      	ands	r3, r2
 8017e70:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	2b03      	cmp	r3, #3
 8017e76:	d025      	beq.n	8017ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	2b03      	cmp	r3, #3
 8017e7c:	d82d      	bhi.n	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8017e7e:	697b      	ldr	r3, [r7, #20]
 8017e80:	2b02      	cmp	r3, #2
 8017e82:	d013      	beq.n	8017eac <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8017e84:	697b      	ldr	r3, [r7, #20]
 8017e86:	2b02      	cmp	r3, #2
 8017e88:	d827      	bhi.n	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8017e8a:	697b      	ldr	r3, [r7, #20]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d003      	beq.n	8017e98 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d005      	beq.n	8017ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8017e96:	e020      	b.n	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017e98:	f7ff fc40 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8017e9c:	0003      	movs	r3, r0
 8017e9e:	61fb      	str	r3, [r7, #28]
            break;
 8017ea0:	e022      	b.n	8017ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8017ea2:	f7ff fb95 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8017ea6:	0003      	movs	r3, r0
 8017ea8:	61fb      	str	r3, [r7, #28]
            break;
 8017eaa:	e01d      	b.n	8017ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017eac:	4b4b      	ldr	r3, [pc, #300]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	2380      	movs	r3, #128	@ 0x80
 8017eb2:	00db      	lsls	r3, r3, #3
 8017eb4:	401a      	ands	r2, r3
 8017eb6:	2380      	movs	r3, #128	@ 0x80
 8017eb8:	00db      	lsls	r3, r3, #3
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d110      	bne.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8017ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8017ec0:	61fb      	str	r3, [r7, #28]
            break;
 8017ec2:	e00d      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017ec4:	4a45      	ldr	r2, [pc, #276]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ec6:	2390      	movs	r3, #144	@ 0x90
 8017ec8:	58d3      	ldr	r3, [r2, r3]
 8017eca:	2202      	movs	r2, #2
 8017ecc:	4013      	ands	r3, r2
 8017ece:	2b02      	cmp	r3, #2
 8017ed0:	d109      	bne.n	8017ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8017ed2:	2380      	movs	r3, #128	@ 0x80
 8017ed4:	021b      	lsls	r3, r3, #8
 8017ed6:	61fb      	str	r3, [r7, #28]
            break;
 8017ed8:	e005      	b.n	8017ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8017eda:	46c0      	nop			@ (mov r8, r8)
 8017edc:	f000 fc09 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017ee0:	46c0      	nop			@ (mov r8, r8)
 8017ee2:	f000 fc06 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017ee6:	46c0      	nop			@ (mov r8, r8)
        break;
 8017ee8:	f000 fc03 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8017eec:	4a3b      	ldr	r2, [pc, #236]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017eee:	2388      	movs	r3, #136	@ 0x88
 8017ef0:	58d3      	ldr	r3, [r2, r3]
 8017ef2:	220c      	movs	r2, #12
 8017ef4:	4013      	ands	r3, r2
 8017ef6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	2b0c      	cmp	r3, #12
 8017efc:	d025      	beq.n	8017f4a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	2b0c      	cmp	r3, #12
 8017f02:	d82d      	bhi.n	8017f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	2b08      	cmp	r3, #8
 8017f08:	d013      	beq.n	8017f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	2b08      	cmp	r3, #8
 8017f0e:	d827      	bhi.n	8017f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8017f10:	697b      	ldr	r3, [r7, #20]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d003      	beq.n	8017f1e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8017f16:	697b      	ldr	r3, [r7, #20]
 8017f18:	2b04      	cmp	r3, #4
 8017f1a:	d005      	beq.n	8017f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8017f1c:	e020      	b.n	8017f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017f1e:	f7ff fbfd 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8017f22:	0003      	movs	r3, r0
 8017f24:	61fb      	str	r3, [r7, #28]
            break;
 8017f26:	e022      	b.n	8017f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8017f28:	f7ff fb52 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8017f2c:	0003      	movs	r3, r0
 8017f2e:	61fb      	str	r3, [r7, #28]
            break;
 8017f30:	e01d      	b.n	8017f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017f32:	4b2a      	ldr	r3, [pc, #168]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017f34:	681a      	ldr	r2, [r3, #0]
 8017f36:	2380      	movs	r3, #128	@ 0x80
 8017f38:	00db      	lsls	r3, r3, #3
 8017f3a:	401a      	ands	r2, r3
 8017f3c:	2380      	movs	r3, #128	@ 0x80
 8017f3e:	00db      	lsls	r3, r3, #3
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d110      	bne.n	8017f66 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8017f44:	4b28      	ldr	r3, [pc, #160]	@ (8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8017f46:	61fb      	str	r3, [r7, #28]
            break;
 8017f48:	e00d      	b.n	8017f66 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017f4a:	4a24      	ldr	r2, [pc, #144]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017f4c:	2390      	movs	r3, #144	@ 0x90
 8017f4e:	58d3      	ldr	r3, [r2, r3]
 8017f50:	2202      	movs	r2, #2
 8017f52:	4013      	ands	r3, r2
 8017f54:	2b02      	cmp	r3, #2
 8017f56:	d109      	bne.n	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8017f58:	2380      	movs	r3, #128	@ 0x80
 8017f5a:	021b      	lsls	r3, r3, #8
 8017f5c:	61fb      	str	r3, [r7, #28]
            break;
 8017f5e:	e005      	b.n	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8017f60:	46c0      	nop			@ (mov r8, r8)
 8017f62:	f000 fbc6 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017f66:	46c0      	nop			@ (mov r8, r8)
 8017f68:	f000 fbc3 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017f6c:	46c0      	nop			@ (mov r8, r8)
        break;
 8017f6e:	f000 fbc0 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8017f72:	f7ff fbd3 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8017f76:	0003      	movs	r3, r0
 8017f78:	61fb      	str	r3, [r7, #28]
        break;
 8017f7a:	f000 fbba 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8017f7e:	4a17      	ldr	r2, [pc, #92]	@ (8017fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017f80:	2388      	movs	r3, #136	@ 0x88
 8017f82:	58d2      	ldr	r2, [r2, r3]
 8017f84:	23c0      	movs	r3, #192	@ 0xc0
 8017f86:	011b      	lsls	r3, r3, #4
 8017f88:	4013      	ands	r3, r2
 8017f8a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017f8c:	697a      	ldr	r2, [r7, #20]
 8017f8e:	23c0      	movs	r3, #192	@ 0xc0
 8017f90:	011b      	lsls	r3, r3, #4
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d036      	beq.n	8018004 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8017f96:	697a      	ldr	r2, [r7, #20]
 8017f98:	23c0      	movs	r3, #192	@ 0xc0
 8017f9a:	011b      	lsls	r3, r3, #4
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d83c      	bhi.n	801801a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8017fa0:	697a      	ldr	r2, [r7, #20]
 8017fa2:	2380      	movs	r3, #128	@ 0x80
 8017fa4:	011b      	lsls	r3, r3, #4
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d020      	beq.n	8017fec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8017faa:	697a      	ldr	r2, [r7, #20]
 8017fac:	2380      	movs	r3, #128	@ 0x80
 8017fae:	011b      	lsls	r3, r3, #4
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d832      	bhi.n	801801a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d005      	beq.n	8017fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8017fba:	697a      	ldr	r2, [r7, #20]
 8017fbc:	2380      	movs	r3, #128	@ 0x80
 8017fbe:	00db      	lsls	r3, r3, #3
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d005      	beq.n	8017fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8017fc4:	e029      	b.n	801801a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017fc6:	f7ff fba9 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8017fca:	0003      	movs	r3, r0
 8017fcc:	61fb      	str	r3, [r7, #28]
            break;
 8017fce:	e02b      	b.n	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8017fd0:	f7ff fafe 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8017fd4:	0003      	movs	r3, r0
 8017fd6:	61fb      	str	r3, [r7, #28]
            break;
 8017fd8:	e026      	b.n	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8017fda:	46c0      	nop			@ (mov r8, r8)
 8017fdc:	40021000 	.word	0x40021000
 8017fe0:	0001e848 	.word	0x0001e848
 8017fe4:	0801c530 	.word	0x0801c530
 8017fe8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017fec:	4bbb      	ldr	r3, [pc, #748]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	2380      	movs	r3, #128	@ 0x80
 8017ff2:	00db      	lsls	r3, r3, #3
 8017ff4:	401a      	ands	r2, r3
 8017ff6:	2380      	movs	r3, #128	@ 0x80
 8017ff8:	00db      	lsls	r3, r3, #3
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d110      	bne.n	8018020 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8017ffe:	4bb8      	ldr	r3, [pc, #736]	@ (80182e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8018000:	61fb      	str	r3, [r7, #28]
            break;
 8018002:	e00d      	b.n	8018020 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018004:	4ab5      	ldr	r2, [pc, #724]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018006:	2390      	movs	r3, #144	@ 0x90
 8018008:	58d3      	ldr	r3, [r2, r3]
 801800a:	2202      	movs	r2, #2
 801800c:	4013      	ands	r3, r2
 801800e:	2b02      	cmp	r3, #2
 8018010:	d109      	bne.n	8018026 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8018012:	2380      	movs	r3, #128	@ 0x80
 8018014:	021b      	lsls	r3, r3, #8
 8018016:	61fb      	str	r3, [r7, #28]
            break;
 8018018:	e005      	b.n	8018026 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 801801a:	46c0      	nop			@ (mov r8, r8)
 801801c:	f000 fb69 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018020:	46c0      	nop			@ (mov r8, r8)
 8018022:	f000 fb66 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018026:	46c0      	nop			@ (mov r8, r8)
        break;
 8018028:	f000 fb63 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 801802c:	4aab      	ldr	r2, [pc, #684]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801802e:	2388      	movs	r3, #136	@ 0x88
 8018030:	58d2      	ldr	r2, [r2, r3]
 8018032:	23c0      	movs	r3, #192	@ 0xc0
 8018034:	009b      	lsls	r3, r3, #2
 8018036:	4013      	ands	r3, r2
 8018038:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801803a:	697a      	ldr	r2, [r7, #20]
 801803c:	23c0      	movs	r3, #192	@ 0xc0
 801803e:	009b      	lsls	r3, r3, #2
 8018040:	429a      	cmp	r2, r3
 8018042:	d02d      	beq.n	80180a0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8018044:	697a      	ldr	r2, [r7, #20]
 8018046:	23c0      	movs	r3, #192	@ 0xc0
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	429a      	cmp	r2, r3
 801804c:	d833      	bhi.n	80180b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 801804e:	697a      	ldr	r2, [r7, #20]
 8018050:	2380      	movs	r3, #128	@ 0x80
 8018052:	009b      	lsls	r3, r3, #2
 8018054:	429a      	cmp	r2, r3
 8018056:	d017      	beq.n	8018088 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8018058:	697a      	ldr	r2, [r7, #20]
 801805a:	2380      	movs	r3, #128	@ 0x80
 801805c:	009b      	lsls	r3, r3, #2
 801805e:	429a      	cmp	r2, r3
 8018060:	d829      	bhi.n	80180b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8018062:	697b      	ldr	r3, [r7, #20]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d005      	beq.n	8018074 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8018068:	697a      	ldr	r2, [r7, #20]
 801806a:	2380      	movs	r3, #128	@ 0x80
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	429a      	cmp	r2, r3
 8018070:	d005      	beq.n	801807e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8018072:	e020      	b.n	80180b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018074:	f7ff fb52 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8018078:	0003      	movs	r3, r0
 801807a:	61fb      	str	r3, [r7, #28]
            break;
 801807c:	e022      	b.n	80180c4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 801807e:	f7ff faa7 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8018082:	0003      	movs	r3, r0
 8018084:	61fb      	str	r3, [r7, #28]
            break;
 8018086:	e01d      	b.n	80180c4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018088:	4b94      	ldr	r3, [pc, #592]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801808a:	681a      	ldr	r2, [r3, #0]
 801808c:	2380      	movs	r3, #128	@ 0x80
 801808e:	00db      	lsls	r3, r3, #3
 8018090:	401a      	ands	r2, r3
 8018092:	2380      	movs	r3, #128	@ 0x80
 8018094:	00db      	lsls	r3, r3, #3
 8018096:	429a      	cmp	r2, r3
 8018098:	d110      	bne.n	80180bc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 801809a:	4b91      	ldr	r3, [pc, #580]	@ (80182e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801809c:	61fb      	str	r3, [r7, #28]
            break;
 801809e:	e00d      	b.n	80180bc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80180a0:	4a8e      	ldr	r2, [pc, #568]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80180a2:	2390      	movs	r3, #144	@ 0x90
 80180a4:	58d3      	ldr	r3, [r2, r3]
 80180a6:	2202      	movs	r2, #2
 80180a8:	4013      	ands	r3, r2
 80180aa:	2b02      	cmp	r3, #2
 80180ac:	d109      	bne.n	80180c2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 80180ae:	2380      	movs	r3, #128	@ 0x80
 80180b0:	021b      	lsls	r3, r3, #8
 80180b2:	61fb      	str	r3, [r7, #28]
            break;
 80180b4:	e005      	b.n	80180c2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 80180b6:	46c0      	nop			@ (mov r8, r8)
 80180b8:	f000 fb1b 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80180bc:	46c0      	nop			@ (mov r8, r8)
 80180be:	f000 fb18 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80180c2:	46c0      	nop			@ (mov r8, r8)
        break;
 80180c4:	f000 fb15 	bl	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80180c8:	4a84      	ldr	r2, [pc, #528]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80180ca:	2388      	movs	r3, #136	@ 0x88
 80180cc:	58d3      	ldr	r3, [r2, r3]
 80180ce:	22c0      	movs	r2, #192	@ 0xc0
 80180d0:	4013      	ands	r3, r2
 80180d2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80180d4:	697b      	ldr	r3, [r7, #20]
 80180d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80180d8:	d025      	beq.n	8018126 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80180de:	d82d      	bhi.n	801813c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	2b80      	cmp	r3, #128	@ 0x80
 80180e4:	d013      	beq.n	801810e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80180e6:	697b      	ldr	r3, [r7, #20]
 80180e8:	2b80      	cmp	r3, #128	@ 0x80
 80180ea:	d827      	bhi.n	801813c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d003      	beq.n	80180fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	2b40      	cmp	r3, #64	@ 0x40
 80180f6:	d005      	beq.n	8018104 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80180f8:	e020      	b.n	801813c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80180fa:	f7ff fb0f 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 80180fe:	0003      	movs	r3, r0
 8018100:	61fb      	str	r3, [r7, #28]
            break;
 8018102:	e020      	b.n	8018146 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8018104:	f7ff fa64 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8018108:	0003      	movs	r3, r0
 801810a:	61fb      	str	r3, [r7, #28]
            break;
 801810c:	e01b      	b.n	8018146 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801810e:	4b73      	ldr	r3, [pc, #460]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018110:	681a      	ldr	r2, [r3, #0]
 8018112:	2380      	movs	r3, #128	@ 0x80
 8018114:	00db      	lsls	r3, r3, #3
 8018116:	401a      	ands	r2, r3
 8018118:	2380      	movs	r3, #128	@ 0x80
 801811a:	00db      	lsls	r3, r3, #3
 801811c:	429a      	cmp	r2, r3
 801811e:	d10f      	bne.n	8018140 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8018120:	4b6f      	ldr	r3, [pc, #444]	@ (80182e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8018122:	61fb      	str	r3, [r7, #28]
            break;
 8018124:	e00c      	b.n	8018140 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018126:	4a6d      	ldr	r2, [pc, #436]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018128:	2390      	movs	r3, #144	@ 0x90
 801812a:	58d3      	ldr	r3, [r2, r3]
 801812c:	2202      	movs	r2, #2
 801812e:	4013      	ands	r3, r2
 8018130:	2b02      	cmp	r3, #2
 8018132:	d107      	bne.n	8018144 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8018134:	2380      	movs	r3, #128	@ 0x80
 8018136:	021b      	lsls	r3, r3, #8
 8018138:	61fb      	str	r3, [r7, #28]
            break;
 801813a:	e003      	b.n	8018144 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 801813c:	46c0      	nop			@ (mov r8, r8)
 801813e:	e2d8      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018140:	46c0      	nop			@ (mov r8, r8)
 8018142:	e2d6      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018144:	46c0      	nop			@ (mov r8, r8)
        break;
 8018146:	e2d4      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8018148:	4a64      	ldr	r2, [pc, #400]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801814a:	2388      	movs	r3, #136	@ 0x88
 801814c:	58d2      	ldr	r2, [r2, r3]
 801814e:	23c0      	movs	r3, #192	@ 0xc0
 8018150:	059b      	lsls	r3, r3, #22
 8018152:	4013      	ands	r3, r2
 8018154:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018156:	697a      	ldr	r2, [r7, #20]
 8018158:	2380      	movs	r3, #128	@ 0x80
 801815a:	059b      	lsls	r3, r3, #22
 801815c:	429a      	cmp	r2, r3
 801815e:	d012      	beq.n	8018186 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8018160:	697a      	ldr	r2, [r7, #20]
 8018162:	2380      	movs	r3, #128	@ 0x80
 8018164:	059b      	lsls	r3, r3, #22
 8018166:	429a      	cmp	r2, r3
 8018168:	d825      	bhi.n	80181b6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d005      	beq.n	801817c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8018170:	697a      	ldr	r2, [r7, #20]
 8018172:	2380      	movs	r3, #128	@ 0x80
 8018174:	055b      	lsls	r3, r3, #21
 8018176:	429a      	cmp	r2, r3
 8018178:	d014      	beq.n	80181a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 801817a:	e01c      	b.n	80181b6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 801817c:	f7ff fa28 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8018180:	0003      	movs	r3, r0
 8018182:	61fb      	str	r3, [r7, #28]
            break;
 8018184:	e018      	b.n	80181b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018186:	4b55      	ldr	r3, [pc, #340]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018188:	681a      	ldr	r2, [r3, #0]
 801818a:	2380      	movs	r3, #128	@ 0x80
 801818c:	00db      	lsls	r3, r3, #3
 801818e:	401a      	ands	r2, r3
 8018190:	2380      	movs	r3, #128	@ 0x80
 8018192:	00db      	lsls	r3, r3, #3
 8018194:	429a      	cmp	r2, r3
 8018196:	d102      	bne.n	801819e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8018198:	4b51      	ldr	r3, [pc, #324]	@ (80182e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801819a:	61fb      	str	r3, [r7, #28]
            break;
 801819c:	e00c      	b.n	80181b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 801819e:	2300      	movs	r3, #0
 80181a0:	61fb      	str	r3, [r7, #28]
            break;
 80181a2:	e009      	b.n	80181b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80181a4:	2408      	movs	r4, #8
 80181a6:	193b      	adds	r3, r7, r4
 80181a8:	0018      	movs	r0, r3
 80181aa:	f000 faad 	bl	8018708 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80181ae:	193b      	adds	r3, r7, r4
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	61fb      	str	r3, [r7, #28]
            break;
 80181b4:	e000      	b.n	80181b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 80181b6:	46c0      	nop			@ (mov r8, r8)
        break;
 80181b8:	e29b      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80181ba:	4a48      	ldr	r2, [pc, #288]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80181bc:	2388      	movs	r3, #136	@ 0x88
 80181be:	58d2      	ldr	r2, [r2, r3]
 80181c0:	23c0      	movs	r3, #192	@ 0xc0
 80181c2:	019b      	lsls	r3, r3, #6
 80181c4:	4013      	ands	r3, r2
 80181c6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80181c8:	697a      	ldr	r2, [r7, #20]
 80181ca:	2380      	movs	r3, #128	@ 0x80
 80181cc:	019b      	lsls	r3, r3, #6
 80181ce:	429a      	cmp	r2, r3
 80181d0:	d017      	beq.n	8018202 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80181d2:	697a      	ldr	r2, [r7, #20]
 80181d4:	2380      	movs	r3, #128	@ 0x80
 80181d6:	019b      	lsls	r3, r3, #6
 80181d8:	429a      	cmp	r2, r3
 80181da:	d81e      	bhi.n	801821a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80181dc:	697b      	ldr	r3, [r7, #20]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d005      	beq.n	80181ee <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80181e2:	697a      	ldr	r2, [r7, #20]
 80181e4:	2380      	movs	r3, #128	@ 0x80
 80181e6:	015b      	lsls	r3, r3, #5
 80181e8:	429a      	cmp	r2, r3
 80181ea:	d005      	beq.n	80181f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80181ec:	e015      	b.n	801821a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80181ee:	f7ff fa95 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 80181f2:	0003      	movs	r3, r0
 80181f4:	61fb      	str	r3, [r7, #28]
            break;
 80181f6:	e013      	b.n	8018220 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80181f8:	f7ff f9ea 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 80181fc:	0003      	movs	r3, r0
 80181fe:	61fb      	str	r3, [r7, #28]
            break;
 8018200:	e00e      	b.n	8018220 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018202:	4b36      	ldr	r3, [pc, #216]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018204:	681a      	ldr	r2, [r3, #0]
 8018206:	2380      	movs	r3, #128	@ 0x80
 8018208:	00db      	lsls	r3, r3, #3
 801820a:	401a      	ands	r2, r3
 801820c:	2380      	movs	r3, #128	@ 0x80
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	429a      	cmp	r2, r3
 8018212:	d104      	bne.n	801821e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8018214:	4b32      	ldr	r3, [pc, #200]	@ (80182e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8018216:	61fb      	str	r3, [r7, #28]
            break;
 8018218:	e001      	b.n	801821e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 801821a:	46c0      	nop			@ (mov r8, r8)
 801821c:	e269      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801821e:	46c0      	nop			@ (mov r8, r8)
        break;
 8018220:	e267      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8018222:	4a2e      	ldr	r2, [pc, #184]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018224:	2388      	movs	r3, #136	@ 0x88
 8018226:	58d2      	ldr	r2, [r2, r3]
 8018228:	23c0      	movs	r3, #192	@ 0xc0
 801822a:	029b      	lsls	r3, r3, #10
 801822c:	4013      	ands	r3, r2
 801822e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018230:	697a      	ldr	r2, [r7, #20]
 8018232:	2380      	movs	r3, #128	@ 0x80
 8018234:	029b      	lsls	r3, r3, #10
 8018236:	429a      	cmp	r2, r3
 8018238:	d017      	beq.n	801826a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 801823a:	697a      	ldr	r2, [r7, #20]
 801823c:	2380      	movs	r3, #128	@ 0x80
 801823e:	029b      	lsls	r3, r3, #10
 8018240:	429a      	cmp	r2, r3
 8018242:	d81e      	bhi.n	8018282 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d005      	beq.n	8018256 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 801824a:	697a      	ldr	r2, [r7, #20]
 801824c:	2380      	movs	r3, #128	@ 0x80
 801824e:	025b      	lsls	r3, r3, #9
 8018250:	429a      	cmp	r2, r3
 8018252:	d005      	beq.n	8018260 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8018254:	e015      	b.n	8018282 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018256:	f7ff fa61 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 801825a:	0003      	movs	r3, r0
 801825c:	61fb      	str	r3, [r7, #28]
            break;
 801825e:	e013      	b.n	8018288 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8018260:	f7ff f9b6 	bl	80175d0 <HAL_RCC_GetSysClockFreq>
 8018264:	0003      	movs	r3, r0
 8018266:	61fb      	str	r3, [r7, #28]
            break;
 8018268:	e00e      	b.n	8018288 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801826a:	4b1c      	ldr	r3, [pc, #112]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801826c:	681a      	ldr	r2, [r3, #0]
 801826e:	2380      	movs	r3, #128	@ 0x80
 8018270:	00db      	lsls	r3, r3, #3
 8018272:	401a      	ands	r2, r3
 8018274:	2380      	movs	r3, #128	@ 0x80
 8018276:	00db      	lsls	r3, r3, #3
 8018278:	429a      	cmp	r2, r3
 801827a:	d104      	bne.n	8018286 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 801827c:	4b18      	ldr	r3, [pc, #96]	@ (80182e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801827e:	61fb      	str	r3, [r7, #28]
            break;
 8018280:	e001      	b.n	8018286 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8018282:	46c0      	nop			@ (mov r8, r8)
 8018284:	e235      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018286:	46c0      	nop			@ (mov r8, r8)
        break;
 8018288:	e233      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801828a:	4a14      	ldr	r2, [pc, #80]	@ (80182dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801828c:	2388      	movs	r3, #136	@ 0x88
 801828e:	58d2      	ldr	r2, [r2, r3]
 8018290:	23c0      	movs	r3, #192	@ 0xc0
 8018292:	031b      	lsls	r3, r3, #12
 8018294:	4013      	ands	r3, r2
 8018296:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018298:	697a      	ldr	r2, [r7, #20]
 801829a:	23c0      	movs	r3, #192	@ 0xc0
 801829c:	031b      	lsls	r3, r3, #12
 801829e:	429a      	cmp	r2, r3
 80182a0:	d041      	beq.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80182a2:	697a      	ldr	r2, [r7, #20]
 80182a4:	23c0      	movs	r3, #192	@ 0xc0
 80182a6:	031b      	lsls	r3, r3, #12
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d847      	bhi.n	801833c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80182ac:	697a      	ldr	r2, [r7, #20]
 80182ae:	2380      	movs	r3, #128	@ 0x80
 80182b0:	031b      	lsls	r3, r3, #12
 80182b2:	429a      	cmp	r2, r3
 80182b4:	d02b      	beq.n	801830e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80182b6:	697a      	ldr	r2, [r7, #20]
 80182b8:	2380      	movs	r3, #128	@ 0x80
 80182ba:	031b      	lsls	r3, r3, #12
 80182bc:	429a      	cmp	r2, r3
 80182be:	d83d      	bhi.n	801833c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80182c0:	697b      	ldr	r3, [r7, #20]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d005      	beq.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80182c6:	697a      	ldr	r2, [r7, #20]
 80182c8:	2380      	movs	r3, #128	@ 0x80
 80182ca:	02db      	lsls	r3, r3, #11
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d009      	beq.n	80182e4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80182d0:	e034      	b.n	801833c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80182d2:	f7ff fa23 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 80182d6:	0003      	movs	r3, r0
 80182d8:	61fb      	str	r3, [r7, #28]
            break;
 80182da:	e036      	b.n	801834a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80182dc:	40021000 	.word	0x40021000
 80182e0:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80182e4:	4abd      	ldr	r2, [pc, #756]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80182e6:	2394      	movs	r3, #148	@ 0x94
 80182e8:	58d3      	ldr	r3, [r2, r3]
 80182ea:	2202      	movs	r2, #2
 80182ec:	4013      	ands	r3, r2
 80182ee:	2b02      	cmp	r3, #2
 80182f0:	d126      	bne.n	8018340 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80182f2:	4aba      	ldr	r2, [pc, #744]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80182f4:	2394      	movs	r3, #148	@ 0x94
 80182f6:	58d3      	ldr	r3, [r2, r3]
 80182f8:	2204      	movs	r2, #4
 80182fa:	4013      	ands	r3, r2
 80182fc:	2b04      	cmp	r3, #4
 80182fe:	d102      	bne.n	8018306 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8018300:	23fa      	movs	r3, #250	@ 0xfa
 8018302:	61fb      	str	r3, [r7, #28]
            break;
 8018304:	e01c      	b.n	8018340 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8018306:	23fa      	movs	r3, #250	@ 0xfa
 8018308:	01db      	lsls	r3, r3, #7
 801830a:	61fb      	str	r3, [r7, #28]
            break;
 801830c:	e018      	b.n	8018340 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801830e:	4bb3      	ldr	r3, [pc, #716]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018310:	681a      	ldr	r2, [r3, #0]
 8018312:	2380      	movs	r3, #128	@ 0x80
 8018314:	00db      	lsls	r3, r3, #3
 8018316:	401a      	ands	r2, r3
 8018318:	2380      	movs	r3, #128	@ 0x80
 801831a:	00db      	lsls	r3, r3, #3
 801831c:	429a      	cmp	r2, r3
 801831e:	d111      	bne.n	8018344 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8018320:	4baf      	ldr	r3, [pc, #700]	@ (80185e0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8018322:	61fb      	str	r3, [r7, #28]
            break;
 8018324:	e00e      	b.n	8018344 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018326:	4aad      	ldr	r2, [pc, #692]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018328:	2390      	movs	r3, #144	@ 0x90
 801832a:	58d3      	ldr	r3, [r2, r3]
 801832c:	2202      	movs	r2, #2
 801832e:	4013      	ands	r3, r2
 8018330:	2b02      	cmp	r3, #2
 8018332:	d109      	bne.n	8018348 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8018334:	2380      	movs	r3, #128	@ 0x80
 8018336:	021b      	lsls	r3, r3, #8
 8018338:	61fb      	str	r3, [r7, #28]
            break;
 801833a:	e005      	b.n	8018348 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 801833c:	46c0      	nop			@ (mov r8, r8)
 801833e:	e1d8      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018340:	46c0      	nop			@ (mov r8, r8)
 8018342:	e1d6      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018344:	46c0      	nop			@ (mov r8, r8)
 8018346:	e1d4      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018348:	46c0      	nop			@ (mov r8, r8)
        break;
 801834a:	e1d2      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801834c:	4aa3      	ldr	r2, [pc, #652]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801834e:	2388      	movs	r3, #136	@ 0x88
 8018350:	58d2      	ldr	r2, [r2, r3]
 8018352:	23c0      	movs	r3, #192	@ 0xc0
 8018354:	039b      	lsls	r3, r3, #14
 8018356:	4013      	ands	r3, r2
 8018358:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801835a:	697a      	ldr	r2, [r7, #20]
 801835c:	23c0      	movs	r3, #192	@ 0xc0
 801835e:	039b      	lsls	r3, r3, #14
 8018360:	429a      	cmp	r2, r3
 8018362:	d03d      	beq.n	80183e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8018364:	697a      	ldr	r2, [r7, #20]
 8018366:	23c0      	movs	r3, #192	@ 0xc0
 8018368:	039b      	lsls	r3, r3, #14
 801836a:	429a      	cmp	r2, r3
 801836c:	d843      	bhi.n	80183f6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 801836e:	697a      	ldr	r2, [r7, #20]
 8018370:	2380      	movs	r3, #128	@ 0x80
 8018372:	039b      	lsls	r3, r3, #14
 8018374:	429a      	cmp	r2, r3
 8018376:	d027      	beq.n	80183c8 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8018378:	697a      	ldr	r2, [r7, #20]
 801837a:	2380      	movs	r3, #128	@ 0x80
 801837c:	039b      	lsls	r3, r3, #14
 801837e:	429a      	cmp	r2, r3
 8018380:	d839      	bhi.n	80183f6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8018382:	697b      	ldr	r3, [r7, #20]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d005      	beq.n	8018394 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8018388:	697a      	ldr	r2, [r7, #20]
 801838a:	2380      	movs	r3, #128	@ 0x80
 801838c:	035b      	lsls	r3, r3, #13
 801838e:	429a      	cmp	r2, r3
 8018390:	d005      	beq.n	801839e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8018392:	e030      	b.n	80183f6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018394:	f7ff f9c2 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8018398:	0003      	movs	r3, r0
 801839a:	61fb      	str	r3, [r7, #28]
            break;
 801839c:	e032      	b.n	8018404 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801839e:	4a8f      	ldr	r2, [pc, #572]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183a0:	2394      	movs	r3, #148	@ 0x94
 80183a2:	58d3      	ldr	r3, [r2, r3]
 80183a4:	2202      	movs	r2, #2
 80183a6:	4013      	ands	r3, r2
 80183a8:	2b02      	cmp	r3, #2
 80183aa:	d126      	bne.n	80183fa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80183ac:	4a8b      	ldr	r2, [pc, #556]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183ae:	2394      	movs	r3, #148	@ 0x94
 80183b0:	58d3      	ldr	r3, [r2, r3]
 80183b2:	2204      	movs	r2, #4
 80183b4:	4013      	ands	r3, r2
 80183b6:	2b04      	cmp	r3, #4
 80183b8:	d102      	bne.n	80183c0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 80183ba:	23fa      	movs	r3, #250	@ 0xfa
 80183bc:	61fb      	str	r3, [r7, #28]
            break;
 80183be:	e01c      	b.n	80183fa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80183c0:	23fa      	movs	r3, #250	@ 0xfa
 80183c2:	01db      	lsls	r3, r3, #7
 80183c4:	61fb      	str	r3, [r7, #28]
            break;
 80183c6:	e018      	b.n	80183fa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80183c8:	4b84      	ldr	r3, [pc, #528]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	2380      	movs	r3, #128	@ 0x80
 80183ce:	00db      	lsls	r3, r3, #3
 80183d0:	401a      	ands	r2, r3
 80183d2:	2380      	movs	r3, #128	@ 0x80
 80183d4:	00db      	lsls	r3, r3, #3
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d111      	bne.n	80183fe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80183da:	4b81      	ldr	r3, [pc, #516]	@ (80185e0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80183dc:	61fb      	str	r3, [r7, #28]
            break;
 80183de:	e00e      	b.n	80183fe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80183e0:	4a7e      	ldr	r2, [pc, #504]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183e2:	2390      	movs	r3, #144	@ 0x90
 80183e4:	58d3      	ldr	r3, [r2, r3]
 80183e6:	2202      	movs	r2, #2
 80183e8:	4013      	ands	r3, r2
 80183ea:	2b02      	cmp	r3, #2
 80183ec:	d109      	bne.n	8018402 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80183ee:	2380      	movs	r3, #128	@ 0x80
 80183f0:	021b      	lsls	r3, r3, #8
 80183f2:	61fb      	str	r3, [r7, #28]
            break;
 80183f4:	e005      	b.n	8018402 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80183f6:	46c0      	nop			@ (mov r8, r8)
 80183f8:	e17b      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80183fa:	46c0      	nop			@ (mov r8, r8)
 80183fc:	e179      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80183fe:	46c0      	nop			@ (mov r8, r8)
 8018400:	e177      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018402:	46c0      	nop			@ (mov r8, r8)
        break;
 8018404:	e175      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8018406:	4a75      	ldr	r2, [pc, #468]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018408:	2388      	movs	r3, #136	@ 0x88
 801840a:	58d2      	ldr	r2, [r2, r3]
 801840c:	23c0      	movs	r3, #192	@ 0xc0
 801840e:	041b      	lsls	r3, r3, #16
 8018410:	4013      	ands	r3, r2
 8018412:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018414:	697a      	ldr	r2, [r7, #20]
 8018416:	23c0      	movs	r3, #192	@ 0xc0
 8018418:	041b      	lsls	r3, r3, #16
 801841a:	429a      	cmp	r2, r3
 801841c:	d03d      	beq.n	801849a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 801841e:	697a      	ldr	r2, [r7, #20]
 8018420:	23c0      	movs	r3, #192	@ 0xc0
 8018422:	041b      	lsls	r3, r3, #16
 8018424:	429a      	cmp	r2, r3
 8018426:	d843      	bhi.n	80184b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8018428:	697a      	ldr	r2, [r7, #20]
 801842a:	2380      	movs	r3, #128	@ 0x80
 801842c:	041b      	lsls	r3, r3, #16
 801842e:	429a      	cmp	r2, r3
 8018430:	d027      	beq.n	8018482 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8018432:	697a      	ldr	r2, [r7, #20]
 8018434:	2380      	movs	r3, #128	@ 0x80
 8018436:	041b      	lsls	r3, r3, #16
 8018438:	429a      	cmp	r2, r3
 801843a:	d839      	bhi.n	80184b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d005      	beq.n	801844e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8018442:	697a      	ldr	r2, [r7, #20]
 8018444:	2380      	movs	r3, #128	@ 0x80
 8018446:	03db      	lsls	r3, r3, #15
 8018448:	429a      	cmp	r2, r3
 801844a:	d005      	beq.n	8018458 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 801844c:	e030      	b.n	80184b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 801844e:	f7ff f965 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8018452:	0003      	movs	r3, r0
 8018454:	61fb      	str	r3, [r7, #28]
            break;
 8018456:	e032      	b.n	80184be <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8018458:	4a60      	ldr	r2, [pc, #384]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801845a:	2394      	movs	r3, #148	@ 0x94
 801845c:	58d3      	ldr	r3, [r2, r3]
 801845e:	2202      	movs	r2, #2
 8018460:	4013      	ands	r3, r2
 8018462:	2b02      	cmp	r3, #2
 8018464:	d126      	bne.n	80184b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8018466:	4a5d      	ldr	r2, [pc, #372]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018468:	2394      	movs	r3, #148	@ 0x94
 801846a:	58d3      	ldr	r3, [r2, r3]
 801846c:	2204      	movs	r2, #4
 801846e:	4013      	ands	r3, r2
 8018470:	2b04      	cmp	r3, #4
 8018472:	d102      	bne.n	801847a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8018474:	23fa      	movs	r3, #250	@ 0xfa
 8018476:	61fb      	str	r3, [r7, #28]
            break;
 8018478:	e01c      	b.n	80184b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 801847a:	23fa      	movs	r3, #250	@ 0xfa
 801847c:	01db      	lsls	r3, r3, #7
 801847e:	61fb      	str	r3, [r7, #28]
            break;
 8018480:	e018      	b.n	80184b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018482:	4b56      	ldr	r3, [pc, #344]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018484:	681a      	ldr	r2, [r3, #0]
 8018486:	2380      	movs	r3, #128	@ 0x80
 8018488:	00db      	lsls	r3, r3, #3
 801848a:	401a      	ands	r2, r3
 801848c:	2380      	movs	r3, #128	@ 0x80
 801848e:	00db      	lsls	r3, r3, #3
 8018490:	429a      	cmp	r2, r3
 8018492:	d111      	bne.n	80184b8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8018494:	4b52      	ldr	r3, [pc, #328]	@ (80185e0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8018496:	61fb      	str	r3, [r7, #28]
            break;
 8018498:	e00e      	b.n	80184b8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801849a:	4a50      	ldr	r2, [pc, #320]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801849c:	2390      	movs	r3, #144	@ 0x90
 801849e:	58d3      	ldr	r3, [r2, r3]
 80184a0:	2202      	movs	r2, #2
 80184a2:	4013      	ands	r3, r2
 80184a4:	2b02      	cmp	r3, #2
 80184a6:	d109      	bne.n	80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 80184a8:	2380      	movs	r3, #128	@ 0x80
 80184aa:	021b      	lsls	r3, r3, #8
 80184ac:	61fb      	str	r3, [r7, #28]
            break;
 80184ae:	e005      	b.n	80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 80184b0:	46c0      	nop			@ (mov r8, r8)
 80184b2:	e11e      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80184b4:	46c0      	nop			@ (mov r8, r8)
 80184b6:	e11c      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80184b8:	46c0      	nop			@ (mov r8, r8)
 80184ba:	e11a      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80184bc:	46c0      	nop			@ (mov r8, r8)
        break;
 80184be:	e118      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80184c0:	4a46      	ldr	r2, [pc, #280]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184c2:	2388      	movs	r3, #136	@ 0x88
 80184c4:	58d2      	ldr	r2, [r2, r3]
 80184c6:	2380      	movs	r3, #128	@ 0x80
 80184c8:	045b      	lsls	r3, r3, #17
 80184ca:	4013      	ands	r3, r2
 80184cc:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d005      	beq.n	80184e0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80184d4:	697a      	ldr	r2, [r7, #20]
 80184d6:	2380      	movs	r3, #128	@ 0x80
 80184d8:	045b      	lsls	r3, r3, #17
 80184da:	429a      	cmp	r2, r3
 80184dc:	d011      	beq.n	8018502 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80184de:	e019      	b.n	8018514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80184e0:	4b3e      	ldr	r3, [pc, #248]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184e2:	689a      	ldr	r2, [r3, #8]
 80184e4:	23e0      	movs	r3, #224	@ 0xe0
 80184e6:	01db      	lsls	r3, r3, #7
 80184e8:	4013      	ands	r3, r2
 80184ea:	d104      	bne.n	80184f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80184ec:	f7ff f916 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 80184f0:	0003      	movs	r3, r0
 80184f2:	61fb      	str	r3, [r7, #28]
            break;
 80184f4:	e00e      	b.n	8018514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80184f6:	f7ff f911 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 80184fa:	0003      	movs	r3, r0
 80184fc:	005b      	lsls	r3, r3, #1
 80184fe:	61fb      	str	r3, [r7, #28]
            break;
 8018500:	e008      	b.n	8018514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8018502:	2408      	movs	r4, #8
 8018504:	193b      	adds	r3, r7, r4
 8018506:	0018      	movs	r0, r3
 8018508:	f000 f8fe 	bl	8018708 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801850c:	193b      	adds	r3, r7, r4
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	61fb      	str	r3, [r7, #28]
            break;
 8018512:	46c0      	nop			@ (mov r8, r8)
        break;
 8018514:	e0ed      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8018516:	4a31      	ldr	r2, [pc, #196]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018518:	2388      	movs	r3, #136	@ 0x88
 801851a:	58d2      	ldr	r2, [r2, r3]
 801851c:	2380      	movs	r3, #128	@ 0x80
 801851e:	049b      	lsls	r3, r3, #18
 8018520:	4013      	ands	r3, r2
 8018522:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d005      	beq.n	8018536 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 801852a:	697a      	ldr	r2, [r7, #20]
 801852c:	2380      	movs	r3, #128	@ 0x80
 801852e:	049b      	lsls	r3, r3, #18
 8018530:	429a      	cmp	r2, r3
 8018532:	d011      	beq.n	8018558 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8018534:	e019      	b.n	801856a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8018536:	4b29      	ldr	r3, [pc, #164]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018538:	689a      	ldr	r2, [r3, #8]
 801853a:	23e0      	movs	r3, #224	@ 0xe0
 801853c:	01db      	lsls	r3, r3, #7
 801853e:	4013      	ands	r3, r2
 8018540:	d104      	bne.n	801854c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8018542:	f7ff f8eb 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8018546:	0003      	movs	r3, r0
 8018548:	61fb      	str	r3, [r7, #28]
            break;
 801854a:	e00e      	b.n	801856a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 801854c:	f7ff f8e6 	bl	801771c <HAL_RCC_GetPCLK1Freq>
 8018550:	0003      	movs	r3, r0
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	61fb      	str	r3, [r7, #28]
            break;
 8018556:	e008      	b.n	801856a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8018558:	2408      	movs	r4, #8
 801855a:	193b      	adds	r3, r7, r4
 801855c:	0018      	movs	r0, r3
 801855e:	f000 f8d3 	bl	8018708 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8018562:	193b      	adds	r3, r7, r4
 8018564:	685b      	ldr	r3, [r3, #4]
 8018566:	61fb      	str	r3, [r7, #28]
            break;
 8018568:	46c0      	nop			@ (mov r8, r8)
        break;
 801856a:	e0c2      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 801856c:	4a1b      	ldr	r2, [pc, #108]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801856e:	2388      	movs	r3, #136	@ 0x88
 8018570:	58d2      	ldr	r2, [r2, r3]
 8018572:	23c0      	movs	r3, #192	@ 0xc0
 8018574:	051b      	lsls	r3, r3, #20
 8018576:	4013      	ands	r3, r2
 8018578:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801857a:	697a      	ldr	r2, [r7, #20]
 801857c:	23c0      	movs	r3, #192	@ 0xc0
 801857e:	051b      	lsls	r3, r3, #20
 8018580:	429a      	cmp	r2, r3
 8018582:	d017      	beq.n	80185b4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8018584:	697a      	ldr	r2, [r7, #20]
 8018586:	23c0      	movs	r3, #192	@ 0xc0
 8018588:	051b      	lsls	r3, r3, #20
 801858a:	429a      	cmp	r2, r3
 801858c:	d84a      	bhi.n	8018624 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801858e:	697a      	ldr	r2, [r7, #20]
 8018590:	2380      	movs	r3, #128	@ 0x80
 8018592:	051b      	lsls	r3, r3, #20
 8018594:	429a      	cmp	r2, r3
 8018596:	d039      	beq.n	801860c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8018598:	697a      	ldr	r2, [r7, #20]
 801859a:	2380      	movs	r3, #128	@ 0x80
 801859c:	051b      	lsls	r3, r3, #20
 801859e:	429a      	cmp	r2, r3
 80185a0:	d840      	bhi.n	8018624 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d03a      	beq.n	801861e <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80185a8:	697a      	ldr	r2, [r7, #20]
 80185aa:	2380      	movs	r3, #128	@ 0x80
 80185ac:	04db      	lsls	r3, r3, #19
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d003      	beq.n	80185ba <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 80185b2:	e037      	b.n	8018624 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 80185b4:	4b0b      	ldr	r3, [pc, #44]	@ (80185e4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 80185b6:	61fb      	str	r3, [r7, #28]
            break;
 80185b8:	e037      	b.n	801862a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80185ba:	4b08      	ldr	r3, [pc, #32]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	2202      	movs	r2, #2
 80185c0:	4013      	ands	r3, r2
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	d130      	bne.n	8018628 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80185c6:	4b05      	ldr	r3, [pc, #20]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	2208      	movs	r2, #8
 80185cc:	4013      	ands	r3, r2
 80185ce:	d00b      	beq.n	80185e8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80185d0:	4b02      	ldr	r3, [pc, #8]	@ (80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	091b      	lsrs	r3, r3, #4
 80185d6:	220f      	movs	r2, #15
 80185d8:	4013      	ands	r3, r2
 80185da:	e00b      	b.n	80185f4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80185dc:	40021000 	.word	0x40021000
 80185e0:	00f42400 	.word	0x00f42400
 80185e4:	02dc6c00 	.word	0x02dc6c00
 80185e8:	4a44      	ldr	r2, [pc, #272]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80185ea:	2394      	movs	r3, #148	@ 0x94
 80185ec:	58d3      	ldr	r3, [r2, r3]
 80185ee:	0a1b      	lsrs	r3, r3, #8
 80185f0:	220f      	movs	r2, #15
 80185f2:	4013      	ands	r3, r2
 80185f4:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80185f6:	69bb      	ldr	r3, [r7, #24]
 80185f8:	2b0b      	cmp	r3, #11
 80185fa:	d901      	bls.n	8018600 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80185fc:	230b      	movs	r3, #11
 80185fe:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8018600:	4b3f      	ldr	r3, [pc, #252]	@ (8018700 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8018602:	69ba      	ldr	r2, [r7, #24]
 8018604:	0092      	lsls	r2, r2, #2
 8018606:	58d3      	ldr	r3, [r2, r3]
 8018608:	61fb      	str	r3, [r7, #28]
            break;
 801860a:	e00d      	b.n	8018628 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801860c:	2408      	movs	r4, #8
 801860e:	193b      	adds	r3, r7, r4
 8018610:	0018      	movs	r0, r3
 8018612:	f000 f879 	bl	8018708 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8018616:	193b      	adds	r3, r7, r4
 8018618:	685b      	ldr	r3, [r3, #4]
 801861a:	61fb      	str	r3, [r7, #28]
            break;
 801861c:	e005      	b.n	801862a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 801861e:	2300      	movs	r3, #0
 8018620:	61fb      	str	r3, [r7, #28]
            break;
 8018622:	e002      	b.n	801862a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8018624:	46c0      	nop			@ (mov r8, r8)
 8018626:	e064      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018628:	46c0      	nop			@ (mov r8, r8)
        break;
 801862a:	e062      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801862c:	4a33      	ldr	r2, [pc, #204]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801862e:	2388      	movs	r3, #136	@ 0x88
 8018630:	58d2      	ldr	r2, [r2, r3]
 8018632:	23c0      	movs	r3, #192	@ 0xc0
 8018634:	051b      	lsls	r3, r3, #20
 8018636:	4013      	ands	r3, r2
 8018638:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801863a:	697a      	ldr	r2, [r7, #20]
 801863c:	23c0      	movs	r3, #192	@ 0xc0
 801863e:	051b      	lsls	r3, r3, #20
 8018640:	429a      	cmp	r2, r3
 8018642:	d017      	beq.n	8018674 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8018644:	697a      	ldr	r2, [r7, #20]
 8018646:	23c0      	movs	r3, #192	@ 0xc0
 8018648:	051b      	lsls	r3, r3, #20
 801864a:	429a      	cmp	r2, r3
 801864c:	d844      	bhi.n	80186d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 801864e:	697a      	ldr	r2, [r7, #20]
 8018650:	2380      	movs	r3, #128	@ 0x80
 8018652:	051b      	lsls	r3, r3, #20
 8018654:	429a      	cmp	r2, r3
 8018656:	d033      	beq.n	80186c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8018658:	697a      	ldr	r2, [r7, #20]
 801865a:	2380      	movs	r3, #128	@ 0x80
 801865c:	051b      	lsls	r3, r3, #20
 801865e:	429a      	cmp	r2, r3
 8018660:	d83a      	bhi.n	80186d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d034      	beq.n	80186d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8018668:	697a      	ldr	r2, [r7, #20]
 801866a:	2380      	movs	r3, #128	@ 0x80
 801866c:	04db      	lsls	r3, r3, #19
 801866e:	429a      	cmp	r2, r3
 8018670:	d003      	beq.n	801867a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8018672:	e031      	b.n	80186d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8018674:	4b23      	ldr	r3, [pc, #140]	@ (8018704 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8018676:	61fb      	str	r3, [r7, #28]
            break;
 8018678:	e031      	b.n	80186de <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801867a:	4b20      	ldr	r3, [pc, #128]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2202      	movs	r2, #2
 8018680:	4013      	ands	r3, r2
 8018682:	2b02      	cmp	r3, #2
 8018684:	d12a      	bne.n	80186dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8018686:	4b1d      	ldr	r3, [pc, #116]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	2208      	movs	r2, #8
 801868c:	4013      	ands	r3, r2
 801868e:	d005      	beq.n	801869c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8018690:	4b1a      	ldr	r3, [pc, #104]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	091b      	lsrs	r3, r3, #4
 8018696:	220f      	movs	r2, #15
 8018698:	4013      	ands	r3, r2
 801869a:	e005      	b.n	80186a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 801869c:	4a17      	ldr	r2, [pc, #92]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801869e:	2394      	movs	r3, #148	@ 0x94
 80186a0:	58d3      	ldr	r3, [r2, r3]
 80186a2:	0a1b      	lsrs	r3, r3, #8
 80186a4:	220f      	movs	r2, #15
 80186a6:	4013      	ands	r3, r2
 80186a8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80186aa:	69bb      	ldr	r3, [r7, #24]
 80186ac:	2b0b      	cmp	r3, #11
 80186ae:	d901      	bls.n	80186b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 80186b0:	230b      	movs	r3, #11
 80186b2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80186b4:	4b12      	ldr	r3, [pc, #72]	@ (8018700 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80186b6:	69ba      	ldr	r2, [r7, #24]
 80186b8:	0092      	lsls	r2, r2, #2
 80186ba:	58d3      	ldr	r3, [r2, r3]
 80186bc:	61fb      	str	r3, [r7, #28]
            break;
 80186be:	e00d      	b.n	80186dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80186c0:	2408      	movs	r4, #8
 80186c2:	193b      	adds	r3, r7, r4
 80186c4:	0018      	movs	r0, r3
 80186c6:	f000 f81f 	bl	8018708 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80186ca:	193b      	adds	r3, r7, r4
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	61fb      	str	r3, [r7, #28]
            break;
 80186d0:	e005      	b.n	80186de <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80186d2:	2300      	movs	r3, #0
 80186d4:	61fb      	str	r3, [r7, #28]
            break;
 80186d6:	e002      	b.n	80186de <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80186d8:	46c0      	nop			@ (mov r8, r8)
 80186da:	e00a      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80186dc:	46c0      	nop			@ (mov r8, r8)
        break;
 80186de:	e008      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80186e0:	46c0      	nop			@ (mov r8, r8)
 80186e2:	e006      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80186e4:	46c0      	nop			@ (mov r8, r8)
 80186e6:	e004      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80186e8:	46c0      	nop			@ (mov r8, r8)
 80186ea:	e002      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80186ec:	46c0      	nop			@ (mov r8, r8)
 80186ee:	e000      	b.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80186f0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80186f2:	69fb      	ldr	r3, [r7, #28]
}
 80186f4:	0018      	movs	r0, r3
 80186f6:	46bd      	mov	sp, r7
 80186f8:	b009      	add	sp, #36	@ 0x24
 80186fa:	bd90      	pop	{r4, r7, pc}
 80186fc:	40021000 	.word	0x40021000
 8018700:	0801c4e0 	.word	0x0801c4e0
 8018704:	02dc6c00 	.word	0x02dc6c00

08018708 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b088      	sub	sp, #32
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8018710:	4b58      	ldr	r3, [pc, #352]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018712:	68db      	ldr	r3, [r3, #12]
 8018714:	0a1b      	lsrs	r3, r3, #8
 8018716:	227f      	movs	r2, #127	@ 0x7f
 8018718:	4013      	ands	r3, r2
 801871a:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801871c:	4b55      	ldr	r3, [pc, #340]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801871e:	68db      	ldr	r3, [r3, #12]
 8018720:	2203      	movs	r2, #3
 8018722:	4013      	ands	r3, r2
 8018724:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8018726:	4b53      	ldr	r3, [pc, #332]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018728:	68db      	ldr	r3, [r3, #12]
 801872a:	091b      	lsrs	r3, r3, #4
 801872c:	2207      	movs	r2, #7
 801872e:	4013      	ands	r3, r2
 8018730:	3301      	adds	r3, #1
 8018732:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8018734:	4b4f      	ldr	r3, [pc, #316]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2208      	movs	r2, #8
 801873a:	4013      	ands	r3, r2
 801873c:	d005      	beq.n	801874a <HAL_RCCEx_GetPLLClockFreq+0x42>
 801873e:	4b4d      	ldr	r3, [pc, #308]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	091b      	lsrs	r3, r3, #4
 8018744:	220f      	movs	r2, #15
 8018746:	4013      	ands	r3, r2
 8018748:	e005      	b.n	8018756 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 801874a:	4a4a      	ldr	r2, [pc, #296]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801874c:	2394      	movs	r3, #148	@ 0x94
 801874e:	58d3      	ldr	r3, [r2, r3]
 8018750:	0a1b      	lsrs	r3, r3, #8
 8018752:	220f      	movs	r2, #15
 8018754:	4013      	ands	r3, r2
 8018756:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8018758:	69bb      	ldr	r3, [r7, #24]
 801875a:	2b0b      	cmp	r3, #11
 801875c:	d901      	bls.n	8018762 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 801875e:	230b      	movs	r3, #11
 8018760:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	2b03      	cmp	r3, #3
 8018766:	d020      	beq.n	80187aa <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8018768:	693b      	ldr	r3, [r7, #16]
 801876a:	2b03      	cmp	r3, #3
 801876c:	d827      	bhi.n	80187be <HAL_RCCEx_GetPLLClockFreq+0xb6>
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	2b01      	cmp	r3, #1
 8018772:	d00c      	beq.n	801878e <HAL_RCCEx_GetPLLClockFreq+0x86>
 8018774:	693b      	ldr	r3, [r7, #16]
 8018776:	2b02      	cmp	r3, #2
 8018778:	d121      	bne.n	80187be <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 801877a:	68f9      	ldr	r1, [r7, #12]
 801877c:	483e      	ldr	r0, [pc, #248]	@ (8018878 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 801877e:	f7e7 fccb 	bl	8000118 <__udivsi3>
 8018782:	0003      	movs	r3, r0
 8018784:	001a      	movs	r2, r3
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	4353      	muls	r3, r2
 801878a:	61fb      	str	r3, [r7, #28]
      break;
 801878c:	e025      	b.n	80187da <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801878e:	4b3b      	ldr	r3, [pc, #236]	@ (801887c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8018790:	69ba      	ldr	r2, [r7, #24]
 8018792:	0092      	lsls	r2, r2, #2
 8018794:	58d3      	ldr	r3, [r2, r3]
 8018796:	68f9      	ldr	r1, [r7, #12]
 8018798:	0018      	movs	r0, r3
 801879a:	f7e7 fcbd 	bl	8000118 <__udivsi3>
 801879e:	0003      	movs	r3, r0
 80187a0:	001a      	movs	r2, r3
 80187a2:	697b      	ldr	r3, [r7, #20]
 80187a4:	4353      	muls	r3, r2
 80187a6:	61fb      	str	r3, [r7, #28]
      break;
 80187a8:	e017      	b.n	80187da <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80187aa:	68f9      	ldr	r1, [r7, #12]
 80187ac:	4834      	ldr	r0, [pc, #208]	@ (8018880 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80187ae:	f7e7 fcb3 	bl	8000118 <__udivsi3>
 80187b2:	0003      	movs	r3, r0
 80187b4:	001a      	movs	r2, r3
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	4353      	muls	r3, r2
 80187ba:	61fb      	str	r3, [r7, #28]
      break;
 80187bc:	e00d      	b.n	80187da <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80187be:	4b2f      	ldr	r3, [pc, #188]	@ (801887c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80187c0:	69ba      	ldr	r2, [r7, #24]
 80187c2:	0092      	lsls	r2, r2, #2
 80187c4:	58d3      	ldr	r3, [r2, r3]
 80187c6:	68f9      	ldr	r1, [r7, #12]
 80187c8:	0018      	movs	r0, r3
 80187ca:	f7e7 fca5 	bl	8000118 <__udivsi3>
 80187ce:	0003      	movs	r3, r0
 80187d0:	001a      	movs	r2, r3
 80187d2:	697b      	ldr	r3, [r7, #20]
 80187d4:	4353      	muls	r3, r2
 80187d6:	61fb      	str	r3, [r7, #28]
      break;
 80187d8:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80187da:	4b26      	ldr	r3, [pc, #152]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80187dc:	68da      	ldr	r2, [r3, #12]
 80187de:	2380      	movs	r3, #128	@ 0x80
 80187e0:	025b      	lsls	r3, r3, #9
 80187e2:	4013      	ands	r3, r2
 80187e4:	d00e      	beq.n	8018804 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80187e6:	4b23      	ldr	r3, [pc, #140]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80187e8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80187ea:	0c5b      	lsrs	r3, r3, #17
 80187ec:	221f      	movs	r2, #31
 80187ee:	4013      	ands	r3, r2
 80187f0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80187f2:	0019      	movs	r1, r3
 80187f4:	69f8      	ldr	r0, [r7, #28]
 80187f6:	f7e7 fc8f 	bl	8000118 <__udivsi3>
 80187fa:	0003      	movs	r3, r0
 80187fc:	001a      	movs	r2, r3
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	601a      	str	r2, [r3, #0]
 8018802:	e002      	b.n	801880a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2200      	movs	r2, #0
 8018808:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 801880a:	4b1a      	ldr	r3, [pc, #104]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801880c:	68da      	ldr	r2, [r3, #12]
 801880e:	2380      	movs	r3, #128	@ 0x80
 8018810:	045b      	lsls	r3, r3, #17
 8018812:	4013      	ands	r3, r2
 8018814:	d00e      	beq.n	8018834 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8018816:	4b17      	ldr	r3, [pc, #92]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018818:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 801881a:	0e5b      	lsrs	r3, r3, #25
 801881c:	2207      	movs	r2, #7
 801881e:	4013      	ands	r3, r2
 8018820:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8018822:	0019      	movs	r1, r3
 8018824:	69f8      	ldr	r0, [r7, #28]
 8018826:	f7e7 fc77 	bl	8000118 <__udivsi3>
 801882a:	0003      	movs	r3, r0
 801882c:	001a      	movs	r2, r3
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	605a      	str	r2, [r3, #4]
 8018832:	e002      	b.n	801883a <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2200      	movs	r2, #0
 8018838:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 801883a:	4b0e      	ldr	r3, [pc, #56]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801883c:	68da      	ldr	r2, [r3, #12]
 801883e:	2380      	movs	r3, #128	@ 0x80
 8018840:	055b      	lsls	r3, r3, #21
 8018842:	4013      	ands	r3, r2
 8018844:	d00e      	beq.n	8018864 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8018846:	4b0b      	ldr	r3, [pc, #44]	@ (8018874 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018848:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 801884a:	0f5b      	lsrs	r3, r3, #29
 801884c:	2207      	movs	r2, #7
 801884e:	4013      	ands	r3, r2
 8018850:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8018852:	0019      	movs	r1, r3
 8018854:	69f8      	ldr	r0, [r7, #28]
 8018856:	f7e7 fc5f 	bl	8000118 <__udivsi3>
 801885a:	0003      	movs	r3, r0
 801885c:	001a      	movs	r2, r3
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8018862:	e002      	b.n	801886a <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2200      	movs	r2, #0
 8018868:	609a      	str	r2, [r3, #8]
}
 801886a:	46c0      	nop			@ (mov r8, r8)
 801886c:	46bd      	mov	sp, r7
 801886e:	b008      	add	sp, #32
 8018870:	bd80      	pop	{r7, pc}
 8018872:	46c0      	nop			@ (mov r8, r8)
 8018874:	40021000 	.word	0x40021000
 8018878:	00f42400 	.word	0x00f42400
 801887c:	0801c4e0 	.word	0x0801c4e0
 8018880:	003d0900 	.word	0x003d0900

08018884 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b084      	sub	sp, #16
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801888c:	210f      	movs	r1, #15
 801888e:	187b      	adds	r3, r7, r1
 8018890:	2201      	movs	r2, #1
 8018892:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d100      	bne.n	801889c <HAL_RTC_Init+0x18>
 801889a:	e08b      	b.n	80189b4 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 801889c:	187b      	adds	r3, r7, r1
 801889e:	2200      	movs	r2, #0
 80188a0:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	222d      	movs	r2, #45	@ 0x2d
 80188a6:	5c9b      	ldrb	r3, [r3, r2]
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d107      	bne.n	80188be <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	222c      	movs	r2, #44	@ 0x2c
 80188b2:	2100      	movs	r1, #0
 80188b4:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	0018      	movs	r0, r3
 80188ba:	f7f3 fc0d 	bl	800c0d8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	222d      	movs	r2, #45	@ 0x2d
 80188c2:	2102      	movs	r1, #2
 80188c4:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80188c6:	4b3f      	ldr	r3, [pc, #252]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80188c8:	22ca      	movs	r2, #202	@ 0xca
 80188ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80188cc:	4b3d      	ldr	r3, [pc, #244]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80188ce:	2253      	movs	r2, #83	@ 0x53
 80188d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	0018      	movs	r0, r3
 80188d6:	f000 fab9 	bl	8018e4c <RTC_EnterInitMode>
 80188da:	1e03      	subs	r3, r0, #0
 80188dc:	d00b      	beq.n	80188f6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80188de:	4b39      	ldr	r3, [pc, #228]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80188e0:	22ff      	movs	r2, #255	@ 0xff
 80188e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	222d      	movs	r2, #45	@ 0x2d
 80188e8:	2104      	movs	r1, #4
 80188ea:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 80188ec:	230f      	movs	r3, #15
 80188ee:	18fb      	adds	r3, r7, r3
 80188f0:	2201      	movs	r2, #1
 80188f2:	701a      	strb	r2, [r3, #0]
 80188f4:	e05e      	b.n	80189b4 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80188f6:	4b33      	ldr	r3, [pc, #204]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80188f8:	699a      	ldr	r2, [r3, #24]
 80188fa:	4b32      	ldr	r3, [pc, #200]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80188fc:	4932      	ldr	r1, [pc, #200]	@ (80189c8 <HAL_RTC_Init+0x144>)
 80188fe:	400a      	ands	r2, r1
 8018900:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8018902:	4b30      	ldr	r3, [pc, #192]	@ (80189c4 <HAL_RTC_Init+0x140>)
 8018904:	6999      	ldr	r1, [r3, #24]
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	685a      	ldr	r2, [r3, #4]
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	691b      	ldr	r3, [r3, #16]
 801890e:	431a      	orrs	r2, r3
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	699b      	ldr	r3, [r3, #24]
 8018914:	431a      	orrs	r2, r3
 8018916:	4b2b      	ldr	r3, [pc, #172]	@ (80189c4 <HAL_RTC_Init+0x140>)
 8018918:	430a      	orrs	r2, r1
 801891a:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	68d9      	ldr	r1, [r3, #12]
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	689b      	ldr	r3, [r3, #8]
 8018924:	041a      	lsls	r2, r3, #16
 8018926:	4b27      	ldr	r3, [pc, #156]	@ (80189c4 <HAL_RTC_Init+0x140>)
 8018928:	430a      	orrs	r2, r1
 801892a:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 801892c:	4b25      	ldr	r3, [pc, #148]	@ (80189c4 <HAL_RTC_Init+0x140>)
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	4a26      	ldr	r2, [pc, #152]	@ (80189cc <HAL_RTC_Init+0x148>)
 8018932:	4013      	ands	r3, r2
 8018934:	0019      	movs	r1, r3
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801893e:	431a      	orrs	r2, r3
 8018940:	4b20      	ldr	r3, [pc, #128]	@ (80189c4 <HAL_RTC_Init+0x140>)
 8018942:	430a      	orrs	r2, r1
 8018944:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018946:	4b1f      	ldr	r3, [pc, #124]	@ (80189c4 <HAL_RTC_Init+0x140>)
 8018948:	68da      	ldr	r2, [r3, #12]
 801894a:	4b1e      	ldr	r3, [pc, #120]	@ (80189c4 <HAL_RTC_Init+0x140>)
 801894c:	2180      	movs	r1, #128	@ 0x80
 801894e:	438a      	bics	r2, r1
 8018950:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018952:	4b1c      	ldr	r3, [pc, #112]	@ (80189c4 <HAL_RTC_Init+0x140>)
 8018954:	699b      	ldr	r3, [r3, #24]
 8018956:	2220      	movs	r2, #32
 8018958:	4013      	ands	r3, r2
 801895a:	d110      	bne.n	801897e <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	0018      	movs	r0, r3
 8018960:	f000 fa4e 	bl	8018e00 <HAL_RTC_WaitForSynchro>
 8018964:	1e03      	subs	r3, r0, #0
 8018966:	d00a      	beq.n	801897e <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018968:	4b16      	ldr	r3, [pc, #88]	@ (80189c4 <HAL_RTC_Init+0x140>)
 801896a:	22ff      	movs	r2, #255	@ 0xff
 801896c:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	222d      	movs	r2, #45	@ 0x2d
 8018972:	2104      	movs	r1, #4
 8018974:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8018976:	230f      	movs	r3, #15
 8018978:	18fb      	adds	r3, r7, r3
 801897a:	2201      	movs	r2, #1
 801897c:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 801897e:	230f      	movs	r3, #15
 8018980:	18fb      	adds	r3, r7, r3
 8018982:	781b      	ldrb	r3, [r3, #0]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d115      	bne.n	80189b4 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8018988:	4b0e      	ldr	r3, [pc, #56]	@ (80189c4 <HAL_RTC_Init+0x140>)
 801898a:	699b      	ldr	r3, [r3, #24]
 801898c:	00db      	lsls	r3, r3, #3
 801898e:	08d9      	lsrs	r1, r3, #3
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6a1a      	ldr	r2, [r3, #32]
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	69db      	ldr	r3, [r3, #28]
 8018998:	431a      	orrs	r2, r3
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	695b      	ldr	r3, [r3, #20]
 801899e:	431a      	orrs	r2, r3
 80189a0:	4b08      	ldr	r3, [pc, #32]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80189a2:	430a      	orrs	r2, r1
 80189a4:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80189a6:	4b07      	ldr	r3, [pc, #28]	@ (80189c4 <HAL_RTC_Init+0x140>)
 80189a8:	22ff      	movs	r2, #255	@ 0xff
 80189aa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	222d      	movs	r2, #45	@ 0x2d
 80189b0:	2101      	movs	r1, #1
 80189b2:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 80189b4:	230f      	movs	r3, #15
 80189b6:	18fb      	adds	r3, r7, r3
 80189b8:	781b      	ldrb	r3, [r3, #0]
}
 80189ba:	0018      	movs	r0, r3
 80189bc:	46bd      	mov	sp, r7
 80189be:	b004      	add	sp, #16
 80189c0:	bd80      	pop	{r7, pc}
 80189c2:	46c0      	nop			@ (mov r8, r8)
 80189c4:	40002800 	.word	0x40002800
 80189c8:	fb8fffbf 	.word	0xfb8fffbf
 80189cc:	ffffe0ff 	.word	0xffffe0ff

080189d0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80189d0:	b590      	push	{r4, r7, lr}
 80189d2:	b087      	sub	sp, #28
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	60b9      	str	r1, [r7, #8]
 80189da:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	222c      	movs	r2, #44	@ 0x2c
 80189e0:	5c9b      	ldrb	r3, [r3, r2]
 80189e2:	2b01      	cmp	r3, #1
 80189e4:	d101      	bne.n	80189ea <HAL_RTC_SetTime+0x1a>
 80189e6:	2302      	movs	r3, #2
 80189e8:	e0a7      	b.n	8018b3a <HAL_RTC_SetTime+0x16a>
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	222c      	movs	r2, #44	@ 0x2c
 80189ee:	2101      	movs	r1, #1
 80189f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	222d      	movs	r2, #45	@ 0x2d
 80189f6:	2102      	movs	r1, #2
 80189f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80189fa:	4b52      	ldr	r3, [pc, #328]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 80189fc:	22ca      	movs	r2, #202	@ 0xca
 80189fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8018a00:	4b50      	ldr	r3, [pc, #320]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018a02:	2253      	movs	r2, #83	@ 0x53
 8018a04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	0018      	movs	r0, r3
 8018a0a:	f000 fa1f 	bl	8018e4c <RTC_EnterInitMode>
 8018a0e:	1e03      	subs	r3, r0, #0
 8018a10:	d00c      	beq.n	8018a2c <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018a12:	4b4c      	ldr	r3, [pc, #304]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018a14:	22ff      	movs	r2, #255	@ 0xff
 8018a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	222d      	movs	r2, #45	@ 0x2d
 8018a1c:	2104      	movs	r1, #4
 8018a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	222c      	movs	r2, #44	@ 0x2c
 8018a24:	2100      	movs	r1, #0
 8018a26:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8018a28:	2301      	movs	r3, #1
 8018a2a:	e086      	b.n	8018b3a <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018a2c:	4b45      	ldr	r3, [pc, #276]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018a2e:	68da      	ldr	r2, [r3, #12]
 8018a30:	23c0      	movs	r3, #192	@ 0xc0
 8018a32:	009b      	lsls	r3, r3, #2
 8018a34:	401a      	ands	r2, r3
 8018a36:	2380      	movs	r3, #128	@ 0x80
 8018a38:	005b      	lsls	r3, r3, #1
 8018a3a:	429a      	cmp	r2, r3
 8018a3c:	d053      	beq.n	8018ae6 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d124      	bne.n	8018a8e <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018a44:	4b3f      	ldr	r3, [pc, #252]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018a46:	699b      	ldr	r3, [r3, #24]
 8018a48:	2240      	movs	r2, #64	@ 0x40
 8018a4a:	4013      	ands	r3, r2
 8018a4c:	d102      	bne.n	8018a54 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	2200      	movs	r2, #0
 8018a52:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	0018      	movs	r0, r3
 8018a5a:	f000 fa23 	bl	8018ea4 <RTC_ByteToBcd2>
 8018a5e:	0003      	movs	r3, r0
 8018a60:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	785b      	ldrb	r3, [r3, #1]
 8018a66:	0018      	movs	r0, r3
 8018a68:	f000 fa1c 	bl	8018ea4 <RTC_ByteToBcd2>
 8018a6c:	0003      	movs	r3, r0
 8018a6e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a70:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	789b      	ldrb	r3, [r3, #2]
 8018a76:	0018      	movs	r0, r3
 8018a78:	f000 fa14 	bl	8018ea4 <RTC_ByteToBcd2>
 8018a7c:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018a7e:	0022      	movs	r2, r4
 8018a80:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	78db      	ldrb	r3, [r3, #3]
 8018a86:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a88:	4313      	orrs	r3, r2
 8018a8a:	617b      	str	r3, [r7, #20]
 8018a8c:	e016      	b.n	8018abc <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018a90:	699b      	ldr	r3, [r3, #24]
 8018a92:	2240      	movs	r2, #64	@ 0x40
 8018a94:	4013      	ands	r3, r2
 8018a96:	d102      	bne.n	8018a9e <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	785b      	ldrb	r3, [r3, #1]
 8018aa8:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018aaa:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018aac:	68ba      	ldr	r2, [r7, #8]
 8018aae:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018ab0:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	78db      	ldrb	r3, [r3, #3]
 8018ab6:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8018abc:	4b21      	ldr	r3, [pc, #132]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018abe:	697a      	ldr	r2, [r7, #20]
 8018ac0:	4921      	ldr	r1, [pc, #132]	@ (8018b48 <HAL_RTC_SetTime+0x178>)
 8018ac2:	400a      	ands	r2, r1
 8018ac4:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8018ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018ac8:	699a      	ldr	r2, [r3, #24]
 8018aca:	4b1e      	ldr	r3, [pc, #120]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018acc:	491f      	ldr	r1, [pc, #124]	@ (8018b4c <HAL_RTC_SetTime+0x17c>)
 8018ace:	400a      	ands	r2, r1
 8018ad0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8018ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018ad4:	6999      	ldr	r1, [r3, #24]
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	68da      	ldr	r2, [r3, #12]
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	691b      	ldr	r3, [r3, #16]
 8018ade:	431a      	orrs	r2, r3
 8018ae0:	4b18      	ldr	r3, [pc, #96]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018ae2:	430a      	orrs	r2, r1
 8018ae4:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018ae6:	4b17      	ldr	r3, [pc, #92]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018ae8:	68da      	ldr	r2, [r3, #12]
 8018aea:	4b16      	ldr	r3, [pc, #88]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018aec:	2180      	movs	r1, #128	@ 0x80
 8018aee:	438a      	bics	r2, r1
 8018af0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018af2:	4b14      	ldr	r3, [pc, #80]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018af4:	699b      	ldr	r3, [r3, #24]
 8018af6:	2220      	movs	r2, #32
 8018af8:	4013      	ands	r3, r2
 8018afa:	d112      	bne.n	8018b22 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	0018      	movs	r0, r3
 8018b00:	f000 f97e 	bl	8018e00 <HAL_RTC_WaitForSynchro>
 8018b04:	1e03      	subs	r3, r0, #0
 8018b06:	d00c      	beq.n	8018b22 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b08:	4b0e      	ldr	r3, [pc, #56]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018b0a:	22ff      	movs	r2, #255	@ 0xff
 8018b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	222d      	movs	r2, #45	@ 0x2d
 8018b12:	2104      	movs	r1, #4
 8018b14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	222c      	movs	r2, #44	@ 0x2c
 8018b1a:	2100      	movs	r1, #0
 8018b1c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018b1e:	2301      	movs	r3, #1
 8018b20:	e00b      	b.n	8018b3a <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b22:	4b08      	ldr	r3, [pc, #32]	@ (8018b44 <HAL_RTC_SetTime+0x174>)
 8018b24:	22ff      	movs	r2, #255	@ 0xff
 8018b26:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	222d      	movs	r2, #45	@ 0x2d
 8018b2c:	2101      	movs	r1, #1
 8018b2e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	222c      	movs	r2, #44	@ 0x2c
 8018b34:	2100      	movs	r1, #0
 8018b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018b38:	2300      	movs	r3, #0
  }
}
 8018b3a:	0018      	movs	r0, r3
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	b007      	add	sp, #28
 8018b40:	bd90      	pop	{r4, r7, pc}
 8018b42:	46c0      	nop			@ (mov r8, r8)
 8018b44:	40002800 	.word	0x40002800
 8018b48:	007f7f7f 	.word	0x007f7f7f
 8018b4c:	fffbffff 	.word	0xfffbffff

08018b50 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b086      	sub	sp, #24
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	60f8      	str	r0, [r7, #12]
 8018b58:	60b9      	str	r1, [r7, #8]
 8018b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8018b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8018c10 <HAL_RTC_GetTime+0xc0>)
 8018b5e:	689a      	ldr	r2, [r3, #8]
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018b64:	4b2a      	ldr	r3, [pc, #168]	@ (8018c10 <HAL_RTC_GetTime+0xc0>)
 8018b66:	68da      	ldr	r2, [r3, #12]
 8018b68:	23c0      	movs	r3, #192	@ 0xc0
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	401a      	ands	r2, r3
 8018b6e:	2380      	movs	r3, #128	@ 0x80
 8018b70:	005b      	lsls	r3, r3, #1
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d047      	beq.n	8018c06 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8018b76:	4b26      	ldr	r3, [pc, #152]	@ (8018c10 <HAL_RTC_GetTime+0xc0>)
 8018b78:	691b      	ldr	r3, [r3, #16]
 8018b7a:	045b      	lsls	r3, r3, #17
 8018b7c:	0c5a      	lsrs	r2, r3, #17
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8018b82:	4b23      	ldr	r3, [pc, #140]	@ (8018c10 <HAL_RTC_GetTime+0xc0>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	4a23      	ldr	r2, [pc, #140]	@ (8018c14 <HAL_RTC_GetTime+0xc4>)
 8018b88:	4013      	ands	r3, r2
 8018b8a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	0c1b      	lsrs	r3, r3, #16
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	223f      	movs	r2, #63	@ 0x3f
 8018b94:	4013      	ands	r3, r2
 8018b96:	b2da      	uxtb	r2, r3
 8018b98:	68bb      	ldr	r3, [r7, #8]
 8018b9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	0a1b      	lsrs	r3, r3, #8
 8018ba0:	b2db      	uxtb	r3, r3
 8018ba2:	227f      	movs	r2, #127	@ 0x7f
 8018ba4:	4013      	ands	r3, r2
 8018ba6:	b2da      	uxtb	r2, r3
 8018ba8:	68bb      	ldr	r3, [r7, #8]
 8018baa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8018bac:	697b      	ldr	r3, [r7, #20]
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	227f      	movs	r2, #127	@ 0x7f
 8018bb2:	4013      	ands	r3, r2
 8018bb4:	b2da      	uxtb	r2, r3
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8018bba:	697b      	ldr	r3, [r7, #20]
 8018bbc:	0d9b      	lsrs	r3, r3, #22
 8018bbe:	b2db      	uxtb	r3, r3
 8018bc0:	2201      	movs	r2, #1
 8018bc2:	4013      	ands	r3, r2
 8018bc4:	b2da      	uxtb	r2, r3
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d11a      	bne.n	8018c06 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	0018      	movs	r0, r3
 8018bd6:	f000 f98d 	bl	8018ef4 <RTC_Bcd2ToByte>
 8018bda:	0003      	movs	r3, r0
 8018bdc:	001a      	movs	r2, r3
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	785b      	ldrb	r3, [r3, #1]
 8018be6:	0018      	movs	r0, r3
 8018be8:	f000 f984 	bl	8018ef4 <RTC_Bcd2ToByte>
 8018bec:	0003      	movs	r3, r0
 8018bee:	001a      	movs	r2, r3
 8018bf0:	68bb      	ldr	r3, [r7, #8]
 8018bf2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	789b      	ldrb	r3, [r3, #2]
 8018bf8:	0018      	movs	r0, r3
 8018bfa:	f000 f97b 	bl	8018ef4 <RTC_Bcd2ToByte>
 8018bfe:	0003      	movs	r3, r0
 8018c00:	001a      	movs	r2, r3
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8018c06:	2300      	movs	r3, #0
}
 8018c08:	0018      	movs	r0, r3
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	b006      	add	sp, #24
 8018c0e:	bd80      	pop	{r7, pc}
 8018c10:	40002800 	.word	0x40002800
 8018c14:	007f7f7f 	.word	0x007f7f7f

08018c18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018c18:	b590      	push	{r4, r7, lr}
 8018c1a:	b087      	sub	sp, #28
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	60f8      	str	r0, [r7, #12]
 8018c20:	60b9      	str	r1, [r7, #8]
 8018c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	222c      	movs	r2, #44	@ 0x2c
 8018c28:	5c9b      	ldrb	r3, [r3, r2]
 8018c2a:	2b01      	cmp	r3, #1
 8018c2c:	d101      	bne.n	8018c32 <HAL_RTC_SetDate+0x1a>
 8018c2e:	2302      	movs	r3, #2
 8018c30:	e090      	b.n	8018d54 <HAL_RTC_SetDate+0x13c>
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	222c      	movs	r2, #44	@ 0x2c
 8018c36:	2101      	movs	r1, #1
 8018c38:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	222d      	movs	r2, #45	@ 0x2d
 8018c3e:	2102      	movs	r1, #2
 8018c40:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d10e      	bne.n	8018c66 <HAL_RTC_SetDate+0x4e>
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	785b      	ldrb	r3, [r3, #1]
 8018c4c:	001a      	movs	r2, r3
 8018c4e:	2310      	movs	r3, #16
 8018c50:	4013      	ands	r3, r2
 8018c52:	d008      	beq.n	8018c66 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	785b      	ldrb	r3, [r3, #1]
 8018c58:	2210      	movs	r2, #16
 8018c5a:	4393      	bics	r3, r2
 8018c5c:	b2db      	uxtb	r3, r3
 8018c5e:	330a      	adds	r3, #10
 8018c60:	b2da      	uxtb	r2, r3
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d11c      	bne.n	8018ca6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018c6c:	68bb      	ldr	r3, [r7, #8]
 8018c6e:	78db      	ldrb	r3, [r3, #3]
 8018c70:	0018      	movs	r0, r3
 8018c72:	f000 f917 	bl	8018ea4 <RTC_ByteToBcd2>
 8018c76:	0003      	movs	r3, r0
 8018c78:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018c7a:	68bb      	ldr	r3, [r7, #8]
 8018c7c:	785b      	ldrb	r3, [r3, #1]
 8018c7e:	0018      	movs	r0, r3
 8018c80:	f000 f910 	bl	8018ea4 <RTC_ByteToBcd2>
 8018c84:	0003      	movs	r3, r0
 8018c86:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018c88:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8018c8a:	68bb      	ldr	r3, [r7, #8]
 8018c8c:	789b      	ldrb	r3, [r3, #2]
 8018c8e:	0018      	movs	r0, r3
 8018c90:	f000 f908 	bl	8018ea4 <RTC_ByteToBcd2>
 8018c94:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018c96:	0022      	movs	r2, r4
 8018c98:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018ca0:	4313      	orrs	r3, r2
 8018ca2:	617b      	str	r3, [r7, #20]
 8018ca4:	e00e      	b.n	8018cc4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	78db      	ldrb	r3, [r3, #3]
 8018caa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018cac:	68bb      	ldr	r3, [r7, #8]
 8018cae:	785b      	ldrb	r3, [r3, #1]
 8018cb0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018cb2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8018cb4:	68ba      	ldr	r2, [r7, #8]
 8018cb6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018cb8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	781b      	ldrb	r3, [r3, #0]
 8018cbe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018cc0:	4313      	orrs	r3, r2
 8018cc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018cc4:	4b25      	ldr	r3, [pc, #148]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018cc6:	22ca      	movs	r2, #202	@ 0xca
 8018cc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8018cca:	4b24      	ldr	r3, [pc, #144]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018ccc:	2253      	movs	r2, #83	@ 0x53
 8018cce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	0018      	movs	r0, r3
 8018cd4:	f000 f8ba 	bl	8018e4c <RTC_EnterInitMode>
 8018cd8:	1e03      	subs	r3, r0, #0
 8018cda:	d00c      	beq.n	8018cf6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018cde:	22ff      	movs	r2, #255	@ 0xff
 8018ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	222d      	movs	r2, #45	@ 0x2d
 8018ce6:	2104      	movs	r1, #4
 8018ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	222c      	movs	r2, #44	@ 0x2c
 8018cee:	2100      	movs	r1, #0
 8018cf0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	e02e      	b.n	8018d54 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8018cf6:	4b19      	ldr	r3, [pc, #100]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018cf8:	697a      	ldr	r2, [r7, #20]
 8018cfa:	4919      	ldr	r1, [pc, #100]	@ (8018d60 <HAL_RTC_SetDate+0x148>)
 8018cfc:	400a      	ands	r2, r1
 8018cfe:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018d00:	4b16      	ldr	r3, [pc, #88]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018d02:	68da      	ldr	r2, [r3, #12]
 8018d04:	4b15      	ldr	r3, [pc, #84]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018d06:	2180      	movs	r1, #128	@ 0x80
 8018d08:	438a      	bics	r2, r1
 8018d0a:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018d0c:	4b13      	ldr	r3, [pc, #76]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018d0e:	699b      	ldr	r3, [r3, #24]
 8018d10:	2220      	movs	r2, #32
 8018d12:	4013      	ands	r3, r2
 8018d14:	d112      	bne.n	8018d3c <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	0018      	movs	r0, r3
 8018d1a:	f000 f871 	bl	8018e00 <HAL_RTC_WaitForSynchro>
 8018d1e:	1e03      	subs	r3, r0, #0
 8018d20:	d00c      	beq.n	8018d3c <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018d22:	4b0e      	ldr	r3, [pc, #56]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018d24:	22ff      	movs	r2, #255	@ 0xff
 8018d26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	222d      	movs	r2, #45	@ 0x2d
 8018d2c:	2104      	movs	r1, #4
 8018d2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	222c      	movs	r2, #44	@ 0x2c
 8018d34:	2100      	movs	r1, #0
 8018d36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018d38:	2301      	movs	r3, #1
 8018d3a:	e00b      	b.n	8018d54 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018d3c:	4b07      	ldr	r3, [pc, #28]	@ (8018d5c <HAL_RTC_SetDate+0x144>)
 8018d3e:	22ff      	movs	r2, #255	@ 0xff
 8018d40:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	222d      	movs	r2, #45	@ 0x2d
 8018d46:	2101      	movs	r1, #1
 8018d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	222c      	movs	r2, #44	@ 0x2c
 8018d4e:	2100      	movs	r1, #0
 8018d50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018d52:	2300      	movs	r3, #0
  }
}
 8018d54:	0018      	movs	r0, r3
 8018d56:	46bd      	mov	sp, r7
 8018d58:	b007      	add	sp, #28
 8018d5a:	bd90      	pop	{r4, r7, pc}
 8018d5c:	40002800 	.word	0x40002800
 8018d60:	00ffff3f 	.word	0x00ffff3f

08018d64 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b086      	sub	sp, #24
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8018d70:	4b21      	ldr	r3, [pc, #132]	@ (8018df8 <HAL_RTC_GetDate+0x94>)
 8018d72:	685b      	ldr	r3, [r3, #4]
 8018d74:	4a21      	ldr	r2, [pc, #132]	@ (8018dfc <HAL_RTC_GetDate+0x98>)
 8018d76:	4013      	ands	r3, r2
 8018d78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018d7a:	697b      	ldr	r3, [r7, #20]
 8018d7c:	0c1b      	lsrs	r3, r3, #16
 8018d7e:	b2da      	uxtb	r2, r3
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018d84:	697b      	ldr	r3, [r7, #20]
 8018d86:	0a1b      	lsrs	r3, r3, #8
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	221f      	movs	r2, #31
 8018d8c:	4013      	ands	r3, r2
 8018d8e:	b2da      	uxtb	r2, r3
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8018d94:	697b      	ldr	r3, [r7, #20]
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	223f      	movs	r2, #63	@ 0x3f
 8018d9a:	4013      	ands	r3, r2
 8018d9c:	b2da      	uxtb	r2, r3
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	0b5b      	lsrs	r3, r3, #13
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	2207      	movs	r2, #7
 8018daa:	4013      	ands	r3, r2
 8018dac:	b2da      	uxtb	r2, r3
 8018dae:	68bb      	ldr	r3, [r7, #8]
 8018db0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d11a      	bne.n	8018dee <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	78db      	ldrb	r3, [r3, #3]
 8018dbc:	0018      	movs	r0, r3
 8018dbe:	f000 f899 	bl	8018ef4 <RTC_Bcd2ToByte>
 8018dc2:	0003      	movs	r3, r0
 8018dc4:	001a      	movs	r2, r3
 8018dc6:	68bb      	ldr	r3, [r7, #8]
 8018dc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	785b      	ldrb	r3, [r3, #1]
 8018dce:	0018      	movs	r0, r3
 8018dd0:	f000 f890 	bl	8018ef4 <RTC_Bcd2ToByte>
 8018dd4:	0003      	movs	r3, r0
 8018dd6:	001a      	movs	r2, r3
 8018dd8:	68bb      	ldr	r3, [r7, #8]
 8018dda:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	789b      	ldrb	r3, [r3, #2]
 8018de0:	0018      	movs	r0, r3
 8018de2:	f000 f887 	bl	8018ef4 <RTC_Bcd2ToByte>
 8018de6:	0003      	movs	r3, r0
 8018de8:	001a      	movs	r2, r3
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018dee:	2300      	movs	r3, #0
}
 8018df0:	0018      	movs	r0, r3
 8018df2:	46bd      	mov	sp, r7
 8018df4:	b006      	add	sp, #24
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	40002800 	.word	0x40002800
 8018dfc:	00ffff3f 	.word	0x00ffff3f

08018e00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b084      	sub	sp, #16
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8018e08:	4b0f      	ldr	r3, [pc, #60]	@ (8018e48 <HAL_RTC_WaitForSynchro+0x48>)
 8018e0a:	68da      	ldr	r2, [r3, #12]
 8018e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8018e48 <HAL_RTC_WaitForSynchro+0x48>)
 8018e0e:	2120      	movs	r1, #32
 8018e10:	438a      	bics	r2, r1
 8018e12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8018e14:	f7f8 fffc 	bl	8011e10 <HAL_GetTick>
 8018e18:	0003      	movs	r3, r0
 8018e1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018e1c:	e00a      	b.n	8018e34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018e1e:	f7f8 fff7 	bl	8011e10 <HAL_GetTick>
 8018e22:	0002      	movs	r2, r0
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	1ad2      	subs	r2, r2, r3
 8018e28:	23fa      	movs	r3, #250	@ 0xfa
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d901      	bls.n	8018e34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8018e30:	2303      	movs	r3, #3
 8018e32:	e005      	b.n	8018e40 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018e34:	4b04      	ldr	r3, [pc, #16]	@ (8018e48 <HAL_RTC_WaitForSynchro+0x48>)
 8018e36:	68db      	ldr	r3, [r3, #12]
 8018e38:	2220      	movs	r2, #32
 8018e3a:	4013      	ands	r3, r2
 8018e3c:	d0ef      	beq.n	8018e1e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8018e3e:	2300      	movs	r3, #0
}
 8018e40:	0018      	movs	r0, r3
 8018e42:	46bd      	mov	sp, r7
 8018e44:	b004      	add	sp, #16
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	40002800 	.word	0x40002800

08018e4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018e54:	4b12      	ldr	r3, [pc, #72]	@ (8018ea0 <RTC_EnterInitMode+0x54>)
 8018e56:	68db      	ldr	r3, [r3, #12]
 8018e58:	2240      	movs	r2, #64	@ 0x40
 8018e5a:	4013      	ands	r3, r2
 8018e5c:	d11a      	bne.n	8018e94 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018e5e:	4b10      	ldr	r3, [pc, #64]	@ (8018ea0 <RTC_EnterInitMode+0x54>)
 8018e60:	68da      	ldr	r2, [r3, #12]
 8018e62:	4b0f      	ldr	r3, [pc, #60]	@ (8018ea0 <RTC_EnterInitMode+0x54>)
 8018e64:	2180      	movs	r1, #128	@ 0x80
 8018e66:	430a      	orrs	r2, r1
 8018e68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8018e6a:	f7f8 ffd1 	bl	8011e10 <HAL_GetTick>
 8018e6e:	0003      	movs	r3, r0
 8018e70:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018e72:	e00a      	b.n	8018e8a <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8018e74:	f7f8 ffcc 	bl	8011e10 <HAL_GetTick>
 8018e78:	0002      	movs	r2, r0
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	1ad2      	subs	r2, r2, r3
 8018e7e:	23fa      	movs	r3, #250	@ 0xfa
 8018e80:	009b      	lsls	r3, r3, #2
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d901      	bls.n	8018e8a <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8018e86:	2303      	movs	r3, #3
 8018e88:	e005      	b.n	8018e96 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018e8a:	4b05      	ldr	r3, [pc, #20]	@ (8018ea0 <RTC_EnterInitMode+0x54>)
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	2240      	movs	r2, #64	@ 0x40
 8018e90:	4013      	ands	r3, r2
 8018e92:	d0ef      	beq.n	8018e74 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8018e94:	2300      	movs	r3, #0
}
 8018e96:	0018      	movs	r0, r3
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	b004      	add	sp, #16
 8018e9c:	bd80      	pop	{r7, pc}
 8018e9e:	46c0      	nop			@ (mov r8, r8)
 8018ea0:	40002800 	.word	0x40002800

08018ea4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	0002      	movs	r2, r0
 8018eac:	1dfb      	adds	r3, r7, #7
 8018eae:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8018eb4:	230b      	movs	r3, #11
 8018eb6:	18fb      	adds	r3, r7, r3
 8018eb8:	1dfa      	adds	r2, r7, #7
 8018eba:	7812      	ldrb	r2, [r2, #0]
 8018ebc:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8018ebe:	e008      	b.n	8018ed2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8018ec6:	220b      	movs	r2, #11
 8018ec8:	18bb      	adds	r3, r7, r2
 8018eca:	18ba      	adds	r2, r7, r2
 8018ecc:	7812      	ldrb	r2, [r2, #0]
 8018ece:	3a0a      	subs	r2, #10
 8018ed0:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8018ed2:	210b      	movs	r1, #11
 8018ed4:	187b      	adds	r3, r7, r1
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	2b09      	cmp	r3, #9
 8018eda:	d8f1      	bhi.n	8018ec0 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	b2db      	uxtb	r3, r3
 8018ee0:	011b      	lsls	r3, r3, #4
 8018ee2:	b2da      	uxtb	r2, r3
 8018ee4:	187b      	adds	r3, r7, r1
 8018ee6:	781b      	ldrb	r3, [r3, #0]
 8018ee8:	4313      	orrs	r3, r2
 8018eea:	b2db      	uxtb	r3, r3
}
 8018eec:	0018      	movs	r0, r3
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	b004      	add	sp, #16
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b084      	sub	sp, #16
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	0002      	movs	r2, r0
 8018efc:	1dfb      	adds	r3, r7, #7
 8018efe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8018f00:	1dfb      	adds	r3, r7, #7
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	091b      	lsrs	r3, r3, #4
 8018f06:	b2db      	uxtb	r3, r3
 8018f08:	001a      	movs	r2, r3
 8018f0a:	0013      	movs	r3, r2
 8018f0c:	009b      	lsls	r3, r3, #2
 8018f0e:	189b      	adds	r3, r3, r2
 8018f10:	005b      	lsls	r3, r3, #1
 8018f12:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	b2da      	uxtb	r2, r3
 8018f18:	1dfb      	adds	r3, r7, #7
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	210f      	movs	r1, #15
 8018f1e:	400b      	ands	r3, r1
 8018f20:	b2db      	uxtb	r3, r3
 8018f22:	18d3      	adds	r3, r2, r3
 8018f24:	b2db      	uxtb	r3, r3
}
 8018f26:	0018      	movs	r0, r3
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	b004      	add	sp, #16
 8018f2c:	bd80      	pop	{r7, pc}
	...

08018f30 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b086      	sub	sp, #24
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	60f8      	str	r0, [r7, #12]
 8018f38:	60b9      	str	r1, [r7, #8]
 8018f3a:	607a      	str	r2, [r7, #4]
 8018f3c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	222c      	movs	r2, #44	@ 0x2c
 8018f42:	5c9b      	ldrb	r3, [r3, r2]
 8018f44:	2b01      	cmp	r3, #1
 8018f46:	d101      	bne.n	8018f4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8018f48:	2302      	movs	r3, #2
 8018f4a:	e088      	b.n	801905e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	222c      	movs	r2, #44	@ 0x2c
 8018f50:	2101      	movs	r1, #1
 8018f52:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	222d      	movs	r2, #45	@ 0x2d
 8018f58:	2102      	movs	r1, #2
 8018f5a:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8018f5c:	4b42      	ldr	r3, [pc, #264]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f5e:	699a      	ldr	r2, [r3, #24]
 8018f60:	2380      	movs	r3, #128	@ 0x80
 8018f62:	00db      	lsls	r3, r3, #3
 8018f64:	4013      	ands	r3, r2
 8018f66:	d01c      	beq.n	8018fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8018f68:	f7f8 ff52 	bl	8011e10 <HAL_GetTick>
 8018f6c:	0003      	movs	r3, r0
 8018f6e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8018f70:	e012      	b.n	8018f98 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018f72:	f7f8 ff4d 	bl	8011e10 <HAL_GetTick>
 8018f76:	0002      	movs	r2, r0
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	1ad2      	subs	r2, r2, r3
 8018f7c:	23fa      	movs	r3, #250	@ 0xfa
 8018f7e:	009b      	lsls	r3, r3, #2
 8018f80:	429a      	cmp	r2, r3
 8018f82:	d909      	bls.n	8018f98 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	222d      	movs	r2, #45	@ 0x2d
 8018f88:	2103      	movs	r1, #3
 8018f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	222c      	movs	r2, #44	@ 0x2c
 8018f90:	2100      	movs	r1, #0
 8018f92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018f94:	2303      	movs	r3, #3
 8018f96:	e062      	b.n	801905e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8018f98:	4b33      	ldr	r3, [pc, #204]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f9a:	68db      	ldr	r3, [r3, #12]
 8018f9c:	2204      	movs	r2, #4
 8018f9e:	4013      	ands	r3, r2
 8018fa0:	d1e7      	bne.n	8018f72 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8018fa2:	4b31      	ldr	r3, [pc, #196]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018fa4:	699a      	ldr	r2, [r3, #24]
 8018fa6:	4b30      	ldr	r3, [pc, #192]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018fa8:	4930      	ldr	r1, [pc, #192]	@ (801906c <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8018faa:	400a      	ands	r2, r1
 8018fac:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8018fae:	4b2e      	ldr	r3, [pc, #184]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018fb0:	2204      	movs	r2, #4
 8018fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8018fb4:	f7f8 ff2c 	bl	8011e10 <HAL_GetTick>
 8018fb8:	0003      	movs	r3, r0
 8018fba:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8018fbc:	e015      	b.n	8018fea <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018fbe:	f7f8 ff27 	bl	8011e10 <HAL_GetTick>
 8018fc2:	0002      	movs	r2, r0
 8018fc4:	697b      	ldr	r3, [r7, #20]
 8018fc6:	1ad2      	subs	r2, r2, r3
 8018fc8:	23fa      	movs	r3, #250	@ 0xfa
 8018fca:	009b      	lsls	r3, r3, #2
 8018fcc:	429a      	cmp	r2, r3
 8018fce:	d90c      	bls.n	8018fea <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018fd0:	4b25      	ldr	r3, [pc, #148]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018fd2:	22ff      	movs	r2, #255	@ 0xff
 8018fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	222d      	movs	r2, #45	@ 0x2d
 8018fda:	2103      	movs	r1, #3
 8018fdc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	222c      	movs	r2, #44	@ 0x2c
 8018fe2:	2100      	movs	r1, #0
 8018fe4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018fe6:	2303      	movs	r3, #3
 8018fe8:	e039      	b.n	801905e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8018fea:	4b1f      	ldr	r3, [pc, #124]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018fec:	68db      	ldr	r3, [r3, #12]
 8018fee:	2204      	movs	r2, #4
 8018ff0:	4013      	ands	r3, r2
 8018ff2:	d0e4      	beq.n	8018fbe <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	0419      	lsls	r1, r3, #16
 8018ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018ffa:	68ba      	ldr	r2, [r7, #8]
 8018ffc:	430a      	orrs	r2, r1
 8018ffe:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8019000:	4b19      	ldr	r3, [pc, #100]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019002:	699b      	ldr	r3, [r3, #24]
 8019004:	2207      	movs	r2, #7
 8019006:	4393      	bics	r3, r2
 8019008:	0019      	movs	r1, r3
 801900a:	4b17      	ldr	r3, [pc, #92]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801900c:	687a      	ldr	r2, [r7, #4]
 801900e:	430a      	orrs	r2, r1
 8019010:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d009      	beq.n	801902c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8019018:	4a15      	ldr	r2, [pc, #84]	@ (8019070 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 801901a:	2384      	movs	r3, #132	@ 0x84
 801901c:	58d3      	ldr	r3, [r2, r3]
 801901e:	4914      	ldr	r1, [pc, #80]	@ (8019070 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8019020:	2280      	movs	r2, #128	@ 0x80
 8019022:	0552      	lsls	r2, r2, #21
 8019024:	4313      	orrs	r3, r2
 8019026:	2284      	movs	r2, #132	@ 0x84
 8019028:	508b      	str	r3, [r1, r2]
 801902a:	e008      	b.n	801903e <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801902c:	4a10      	ldr	r2, [pc, #64]	@ (8019070 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 801902e:	2380      	movs	r3, #128	@ 0x80
 8019030:	58d3      	ldr	r3, [r2, r3]
 8019032:	490f      	ldr	r1, [pc, #60]	@ (8019070 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8019034:	2280      	movs	r2, #128	@ 0x80
 8019036:	0552      	lsls	r2, r2, #21
 8019038:	4313      	orrs	r3, r2
 801903a:	2280      	movs	r2, #128	@ 0x80
 801903c:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 801903e:	4b0a      	ldr	r3, [pc, #40]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019040:	699a      	ldr	r2, [r3, #24]
 8019042:	4b09      	ldr	r3, [pc, #36]	@ (8019068 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019044:	2188      	movs	r1, #136	@ 0x88
 8019046:	01c9      	lsls	r1, r1, #7
 8019048:	430a      	orrs	r2, r1
 801904a:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	222d      	movs	r2, #45	@ 0x2d
 8019050:	2101      	movs	r1, #1
 8019052:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	222c      	movs	r2, #44	@ 0x2c
 8019058:	2100      	movs	r1, #0
 801905a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801905c:	2300      	movs	r3, #0
}
 801905e:	0018      	movs	r0, r3
 8019060:	46bd      	mov	sp, r7
 8019062:	b006      	add	sp, #24
 8019064:	bd80      	pop	{r7, pc}
 8019066:	46c0      	nop			@ (mov r8, r8)
 8019068:	40002800 	.word	0x40002800
 801906c:	fffffbff 	.word	0xfffffbff
 8019070:	40021800 	.word	0x40021800

08019074 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b082      	sub	sp, #8
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	222c      	movs	r2, #44	@ 0x2c
 8019080:	5c9b      	ldrb	r3, [r3, r2]
 8019082:	2b01      	cmp	r3, #1
 8019084:	d101      	bne.n	801908a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8019086:	2302      	movs	r3, #2
 8019088:	e016      	b.n	80190b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	222c      	movs	r2, #44	@ 0x2c
 801908e:	2101      	movs	r1, #1
 8019090:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	222d      	movs	r2, #45	@ 0x2d
 8019096:	2102      	movs	r1, #2
 8019098:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 801909a:	4b09      	ldr	r3, [pc, #36]	@ (80190c0 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 801909c:	699a      	ldr	r2, [r3, #24]
 801909e:	4b08      	ldr	r3, [pc, #32]	@ (80190c0 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 80190a0:	4908      	ldr	r1, [pc, #32]	@ (80190c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 80190a2:	400a      	ands	r2, r1
 80190a4:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	222d      	movs	r2, #45	@ 0x2d
 80190aa:	2101      	movs	r1, #1
 80190ac:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	222c      	movs	r2, #44	@ 0x2c
 80190b2:	2100      	movs	r1, #0
 80190b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80190b6:	2300      	movs	r3, #0
}
 80190b8:	0018      	movs	r0, r3
 80190ba:	46bd      	mov	sp, r7
 80190bc:	b002      	add	sp, #8
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	40002800 	.word	0x40002800
 80190c4:	ffffbbff 	.word	0xffffbbff

080190c8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80190d0:	4b09      	ldr	r3, [pc, #36]	@ (80190f8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80190d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80190d4:	2204      	movs	r2, #4
 80190d6:	4013      	ands	r3, r2
 80190d8:	d006      	beq.n	80190e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80190da:	4b07      	ldr	r3, [pc, #28]	@ (80190f8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80190dc:	2204      	movs	r2, #4
 80190de:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	0018      	movs	r0, r3
 80190e4:	f000 f80a 	bl	80190fc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	222d      	movs	r2, #45	@ 0x2d
 80190ec:	2101      	movs	r1, #1
 80190ee:	5499      	strb	r1, [r3, r2]
}
 80190f0:	46c0      	nop			@ (mov r8, r8)
 80190f2:	46bd      	mov	sp, r7
 80190f4:	b002      	add	sp, #8
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	40002800 	.word	0x40002800

080190fc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b082      	sub	sp, #8
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8019104:	46c0      	nop			@ (mov r8, r8)
 8019106:	46bd      	mov	sp, r7
 8019108:	b002      	add	sp, #8
 801910a:	bd80      	pop	{r7, pc}

0801910c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b082      	sub	sp, #8
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d101      	bne.n	801911e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801911a:	2301      	movs	r3, #1
 801911c:	e04a      	b.n	80191b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	223d      	movs	r2, #61	@ 0x3d
 8019122:	5c9b      	ldrb	r3, [r3, r2]
 8019124:	b2db      	uxtb	r3, r3
 8019126:	2b00      	cmp	r3, #0
 8019128:	d107      	bne.n	801913a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	223c      	movs	r2, #60	@ 0x3c
 801912e:	2100      	movs	r1, #0
 8019130:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	0018      	movs	r0, r3
 8019136:	f7f3 f817 	bl	800c168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	223d      	movs	r2, #61	@ 0x3d
 801913e:	2102      	movs	r1, #2
 8019140:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681a      	ldr	r2, [r3, #0]
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	3304      	adds	r3, #4
 801914a:	0019      	movs	r1, r3
 801914c:	0010      	movs	r0, r2
 801914e:	f000 fbd9 	bl	8019904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2248      	movs	r2, #72	@ 0x48
 8019156:	2101      	movs	r1, #1
 8019158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	223e      	movs	r2, #62	@ 0x3e
 801915e:	2101      	movs	r1, #1
 8019160:	5499      	strb	r1, [r3, r2]
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	223f      	movs	r2, #63	@ 0x3f
 8019166:	2101      	movs	r1, #1
 8019168:	5499      	strb	r1, [r3, r2]
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	2240      	movs	r2, #64	@ 0x40
 801916e:	2101      	movs	r1, #1
 8019170:	5499      	strb	r1, [r3, r2]
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	2241      	movs	r2, #65	@ 0x41
 8019176:	2101      	movs	r1, #1
 8019178:	5499      	strb	r1, [r3, r2]
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2242      	movs	r2, #66	@ 0x42
 801917e:	2101      	movs	r1, #1
 8019180:	5499      	strb	r1, [r3, r2]
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2243      	movs	r2, #67	@ 0x43
 8019186:	2101      	movs	r1, #1
 8019188:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2244      	movs	r2, #68	@ 0x44
 801918e:	2101      	movs	r1, #1
 8019190:	5499      	strb	r1, [r3, r2]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	2245      	movs	r2, #69	@ 0x45
 8019196:	2101      	movs	r1, #1
 8019198:	5499      	strb	r1, [r3, r2]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2246      	movs	r2, #70	@ 0x46
 801919e:	2101      	movs	r1, #1
 80191a0:	5499      	strb	r1, [r3, r2]
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2247      	movs	r2, #71	@ 0x47
 80191a6:	2101      	movs	r1, #1
 80191a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	223d      	movs	r2, #61	@ 0x3d
 80191ae:	2101      	movs	r1, #1
 80191b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80191b2:	2300      	movs	r3, #0
}
 80191b4:	0018      	movs	r0, r3
 80191b6:	46bd      	mov	sp, r7
 80191b8:	b002      	add	sp, #8
 80191ba:	bd80      	pop	{r7, pc}

080191bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d101      	bne.n	80191ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80191ca:	2301      	movs	r3, #1
 80191cc:	e04a      	b.n	8019264 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	223d      	movs	r2, #61	@ 0x3d
 80191d2:	5c9b      	ldrb	r3, [r3, r2]
 80191d4:	b2db      	uxtb	r3, r3
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d107      	bne.n	80191ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	223c      	movs	r2, #60	@ 0x3c
 80191de:	2100      	movs	r1, #0
 80191e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	0018      	movs	r0, r3
 80191e6:	f000 f841 	bl	801926c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	223d      	movs	r2, #61	@ 0x3d
 80191ee:	2102      	movs	r1, #2
 80191f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	681a      	ldr	r2, [r3, #0]
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	3304      	adds	r3, #4
 80191fa:	0019      	movs	r1, r3
 80191fc:	0010      	movs	r0, r2
 80191fe:	f000 fb81 	bl	8019904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	2248      	movs	r2, #72	@ 0x48
 8019206:	2101      	movs	r1, #1
 8019208:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	223e      	movs	r2, #62	@ 0x3e
 801920e:	2101      	movs	r1, #1
 8019210:	5499      	strb	r1, [r3, r2]
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	223f      	movs	r2, #63	@ 0x3f
 8019216:	2101      	movs	r1, #1
 8019218:	5499      	strb	r1, [r3, r2]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2240      	movs	r2, #64	@ 0x40
 801921e:	2101      	movs	r1, #1
 8019220:	5499      	strb	r1, [r3, r2]
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	2241      	movs	r2, #65	@ 0x41
 8019226:	2101      	movs	r1, #1
 8019228:	5499      	strb	r1, [r3, r2]
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2242      	movs	r2, #66	@ 0x42
 801922e:	2101      	movs	r1, #1
 8019230:	5499      	strb	r1, [r3, r2]
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2243      	movs	r2, #67	@ 0x43
 8019236:	2101      	movs	r1, #1
 8019238:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	2244      	movs	r2, #68	@ 0x44
 801923e:	2101      	movs	r1, #1
 8019240:	5499      	strb	r1, [r3, r2]
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	2245      	movs	r2, #69	@ 0x45
 8019246:	2101      	movs	r1, #1
 8019248:	5499      	strb	r1, [r3, r2]
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	2246      	movs	r2, #70	@ 0x46
 801924e:	2101      	movs	r1, #1
 8019250:	5499      	strb	r1, [r3, r2]
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	2247      	movs	r2, #71	@ 0x47
 8019256:	2101      	movs	r1, #1
 8019258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	223d      	movs	r2, #61	@ 0x3d
 801925e:	2101      	movs	r1, #1
 8019260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019262:	2300      	movs	r3, #0
}
 8019264:	0018      	movs	r0, r3
 8019266:	46bd      	mov	sp, r7
 8019268:	b002      	add	sp, #8
 801926a:	bd80      	pop	{r7, pc}

0801926c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8019274:	46c0      	nop			@ (mov r8, r8)
 8019276:	46bd      	mov	sp, r7
 8019278:	b002      	add	sp, #8
 801927a:	bd80      	pop	{r7, pc}

0801927c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
 8019284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8019286:	683b      	ldr	r3, [r7, #0]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d108      	bne.n	801929e <HAL_TIM_PWM_Start+0x22>
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	223e      	movs	r2, #62	@ 0x3e
 8019290:	5c9b      	ldrb	r3, [r3, r2]
 8019292:	b2db      	uxtb	r3, r3
 8019294:	3b01      	subs	r3, #1
 8019296:	1e5a      	subs	r2, r3, #1
 8019298:	4193      	sbcs	r3, r2
 801929a:	b2db      	uxtb	r3, r3
 801929c:	e037      	b.n	801930e <HAL_TIM_PWM_Start+0x92>
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	2b04      	cmp	r3, #4
 80192a2:	d108      	bne.n	80192b6 <HAL_TIM_PWM_Start+0x3a>
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	223f      	movs	r2, #63	@ 0x3f
 80192a8:	5c9b      	ldrb	r3, [r3, r2]
 80192aa:	b2db      	uxtb	r3, r3
 80192ac:	3b01      	subs	r3, #1
 80192ae:	1e5a      	subs	r2, r3, #1
 80192b0:	4193      	sbcs	r3, r2
 80192b2:	b2db      	uxtb	r3, r3
 80192b4:	e02b      	b.n	801930e <HAL_TIM_PWM_Start+0x92>
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	2b08      	cmp	r3, #8
 80192ba:	d108      	bne.n	80192ce <HAL_TIM_PWM_Start+0x52>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	2240      	movs	r2, #64	@ 0x40
 80192c0:	5c9b      	ldrb	r3, [r3, r2]
 80192c2:	b2db      	uxtb	r3, r3
 80192c4:	3b01      	subs	r3, #1
 80192c6:	1e5a      	subs	r2, r3, #1
 80192c8:	4193      	sbcs	r3, r2
 80192ca:	b2db      	uxtb	r3, r3
 80192cc:	e01f      	b.n	801930e <HAL_TIM_PWM_Start+0x92>
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	2b0c      	cmp	r3, #12
 80192d2:	d108      	bne.n	80192e6 <HAL_TIM_PWM_Start+0x6a>
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	2241      	movs	r2, #65	@ 0x41
 80192d8:	5c9b      	ldrb	r3, [r3, r2]
 80192da:	b2db      	uxtb	r3, r3
 80192dc:	3b01      	subs	r3, #1
 80192de:	1e5a      	subs	r2, r3, #1
 80192e0:	4193      	sbcs	r3, r2
 80192e2:	b2db      	uxtb	r3, r3
 80192e4:	e013      	b.n	801930e <HAL_TIM_PWM_Start+0x92>
 80192e6:	683b      	ldr	r3, [r7, #0]
 80192e8:	2b10      	cmp	r3, #16
 80192ea:	d108      	bne.n	80192fe <HAL_TIM_PWM_Start+0x82>
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2242      	movs	r2, #66	@ 0x42
 80192f0:	5c9b      	ldrb	r3, [r3, r2]
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	3b01      	subs	r3, #1
 80192f6:	1e5a      	subs	r2, r3, #1
 80192f8:	4193      	sbcs	r3, r2
 80192fa:	b2db      	uxtb	r3, r3
 80192fc:	e007      	b.n	801930e <HAL_TIM_PWM_Start+0x92>
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2243      	movs	r2, #67	@ 0x43
 8019302:	5c9b      	ldrb	r3, [r3, r2]
 8019304:	b2db      	uxtb	r3, r3
 8019306:	3b01      	subs	r3, #1
 8019308:	1e5a      	subs	r2, r3, #1
 801930a:	4193      	sbcs	r3, r2
 801930c:	b2db      	uxtb	r3, r3
 801930e:	2b00      	cmp	r3, #0
 8019310:	d001      	beq.n	8019316 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8019312:	2301      	movs	r3, #1
 8019314:	e086      	b.n	8019424 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019316:	683b      	ldr	r3, [r7, #0]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d104      	bne.n	8019326 <HAL_TIM_PWM_Start+0xaa>
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	223e      	movs	r2, #62	@ 0x3e
 8019320:	2102      	movs	r1, #2
 8019322:	5499      	strb	r1, [r3, r2]
 8019324:	e023      	b.n	801936e <HAL_TIM_PWM_Start+0xf2>
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	2b04      	cmp	r3, #4
 801932a:	d104      	bne.n	8019336 <HAL_TIM_PWM_Start+0xba>
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	223f      	movs	r2, #63	@ 0x3f
 8019330:	2102      	movs	r1, #2
 8019332:	5499      	strb	r1, [r3, r2]
 8019334:	e01b      	b.n	801936e <HAL_TIM_PWM_Start+0xf2>
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	2b08      	cmp	r3, #8
 801933a:	d104      	bne.n	8019346 <HAL_TIM_PWM_Start+0xca>
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2240      	movs	r2, #64	@ 0x40
 8019340:	2102      	movs	r1, #2
 8019342:	5499      	strb	r1, [r3, r2]
 8019344:	e013      	b.n	801936e <HAL_TIM_PWM_Start+0xf2>
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	2b0c      	cmp	r3, #12
 801934a:	d104      	bne.n	8019356 <HAL_TIM_PWM_Start+0xda>
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2241      	movs	r2, #65	@ 0x41
 8019350:	2102      	movs	r1, #2
 8019352:	5499      	strb	r1, [r3, r2]
 8019354:	e00b      	b.n	801936e <HAL_TIM_PWM_Start+0xf2>
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	2b10      	cmp	r3, #16
 801935a:	d104      	bne.n	8019366 <HAL_TIM_PWM_Start+0xea>
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	2242      	movs	r2, #66	@ 0x42
 8019360:	2102      	movs	r1, #2
 8019362:	5499      	strb	r1, [r3, r2]
 8019364:	e003      	b.n	801936e <HAL_TIM_PWM_Start+0xf2>
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	2243      	movs	r2, #67	@ 0x43
 801936a:	2102      	movs	r1, #2
 801936c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	6839      	ldr	r1, [r7, #0]
 8019374:	2201      	movs	r2, #1
 8019376:	0018      	movs	r0, r3
 8019378:	f000 fe7a 	bl	801a070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	4a2a      	ldr	r2, [pc, #168]	@ (801942c <HAL_TIM_PWM_Start+0x1b0>)
 8019382:	4293      	cmp	r3, r2
 8019384:	d009      	beq.n	801939a <HAL_TIM_PWM_Start+0x11e>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	4a29      	ldr	r2, [pc, #164]	@ (8019430 <HAL_TIM_PWM_Start+0x1b4>)
 801938c:	4293      	cmp	r3, r2
 801938e:	d004      	beq.n	801939a <HAL_TIM_PWM_Start+0x11e>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	4a27      	ldr	r2, [pc, #156]	@ (8019434 <HAL_TIM_PWM_Start+0x1b8>)
 8019396:	4293      	cmp	r3, r2
 8019398:	d101      	bne.n	801939e <HAL_TIM_PWM_Start+0x122>
 801939a:	2301      	movs	r3, #1
 801939c:	e000      	b.n	80193a0 <HAL_TIM_PWM_Start+0x124>
 801939e:	2300      	movs	r3, #0
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d008      	beq.n	80193b6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	2180      	movs	r1, #128	@ 0x80
 80193b0:	0209      	lsls	r1, r1, #8
 80193b2:	430a      	orrs	r2, r1
 80193b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	4a1c      	ldr	r2, [pc, #112]	@ (801942c <HAL_TIM_PWM_Start+0x1b0>)
 80193bc:	4293      	cmp	r3, r2
 80193be:	d00f      	beq.n	80193e0 <HAL_TIM_PWM_Start+0x164>
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681a      	ldr	r2, [r3, #0]
 80193c4:	2380      	movs	r3, #128	@ 0x80
 80193c6:	05db      	lsls	r3, r3, #23
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d009      	beq.n	80193e0 <HAL_TIM_PWM_Start+0x164>
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	4a19      	ldr	r2, [pc, #100]	@ (8019438 <HAL_TIM_PWM_Start+0x1bc>)
 80193d2:	4293      	cmp	r3, r2
 80193d4:	d004      	beq.n	80193e0 <HAL_TIM_PWM_Start+0x164>
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	4a15      	ldr	r2, [pc, #84]	@ (8019430 <HAL_TIM_PWM_Start+0x1b4>)
 80193dc:	4293      	cmp	r3, r2
 80193de:	d116      	bne.n	801940e <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	689b      	ldr	r3, [r3, #8]
 80193e6:	4a15      	ldr	r2, [pc, #84]	@ (801943c <HAL_TIM_PWM_Start+0x1c0>)
 80193e8:	4013      	ands	r3, r2
 80193ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	2b06      	cmp	r3, #6
 80193f0:	d016      	beq.n	8019420 <HAL_TIM_PWM_Start+0x1a4>
 80193f2:	68fa      	ldr	r2, [r7, #12]
 80193f4:	2380      	movs	r3, #128	@ 0x80
 80193f6:	025b      	lsls	r3, r3, #9
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d011      	beq.n	8019420 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	681a      	ldr	r2, [r3, #0]
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	2101      	movs	r1, #1
 8019408:	430a      	orrs	r2, r1
 801940a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801940c:	e008      	b.n	8019420 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2101      	movs	r1, #1
 801941a:	430a      	orrs	r2, r1
 801941c:	601a      	str	r2, [r3, #0]
 801941e:	e000      	b.n	8019422 <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019420:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8019422:	2300      	movs	r3, #0
}
 8019424:	0018      	movs	r0, r3
 8019426:	46bd      	mov	sp, r7
 8019428:	b004      	add	sp, #16
 801942a:	bd80      	pop	{r7, pc}
 801942c:	40012c00 	.word	0x40012c00
 8019430:	40014000 	.word	0x40014000
 8019434:	40014400 	.word	0x40014400
 8019438:	40000400 	.word	0x40000400
 801943c:	00010007 	.word	0x00010007

08019440 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b082      	sub	sp, #8
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
 8019448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	6839      	ldr	r1, [r7, #0]
 8019450:	2200      	movs	r2, #0
 8019452:	0018      	movs	r0, r3
 8019454:	f000 fe0c 	bl	801a070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a35      	ldr	r2, [pc, #212]	@ (8019534 <HAL_TIM_PWM_Stop+0xf4>)
 801945e:	4293      	cmp	r3, r2
 8019460:	d009      	beq.n	8019476 <HAL_TIM_PWM_Stop+0x36>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	4a34      	ldr	r2, [pc, #208]	@ (8019538 <HAL_TIM_PWM_Stop+0xf8>)
 8019468:	4293      	cmp	r3, r2
 801946a:	d004      	beq.n	8019476 <HAL_TIM_PWM_Stop+0x36>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	4a32      	ldr	r2, [pc, #200]	@ (801953c <HAL_TIM_PWM_Stop+0xfc>)
 8019472:	4293      	cmp	r3, r2
 8019474:	d101      	bne.n	801947a <HAL_TIM_PWM_Stop+0x3a>
 8019476:	2301      	movs	r3, #1
 8019478:	e000      	b.n	801947c <HAL_TIM_PWM_Stop+0x3c>
 801947a:	2300      	movs	r3, #0
 801947c:	2b00      	cmp	r3, #0
 801947e:	d013      	beq.n	80194a8 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	6a1b      	ldr	r3, [r3, #32]
 8019486:	4a2e      	ldr	r2, [pc, #184]	@ (8019540 <HAL_TIM_PWM_Stop+0x100>)
 8019488:	4013      	ands	r3, r2
 801948a:	d10d      	bne.n	80194a8 <HAL_TIM_PWM_Stop+0x68>
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	6a1b      	ldr	r3, [r3, #32]
 8019492:	4a2c      	ldr	r2, [pc, #176]	@ (8019544 <HAL_TIM_PWM_Stop+0x104>)
 8019494:	4013      	ands	r3, r2
 8019496:	d107      	bne.n	80194a8 <HAL_TIM_PWM_Stop+0x68>
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	4929      	ldr	r1, [pc, #164]	@ (8019548 <HAL_TIM_PWM_Stop+0x108>)
 80194a4:	400a      	ands	r2, r1
 80194a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	6a1b      	ldr	r3, [r3, #32]
 80194ae:	4a24      	ldr	r2, [pc, #144]	@ (8019540 <HAL_TIM_PWM_Stop+0x100>)
 80194b0:	4013      	ands	r3, r2
 80194b2:	d10d      	bne.n	80194d0 <HAL_TIM_PWM_Stop+0x90>
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	6a1b      	ldr	r3, [r3, #32]
 80194ba:	4a22      	ldr	r2, [pc, #136]	@ (8019544 <HAL_TIM_PWM_Stop+0x104>)
 80194bc:	4013      	ands	r3, r2
 80194be:	d107      	bne.n	80194d0 <HAL_TIM_PWM_Stop+0x90>
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	681a      	ldr	r2, [r3, #0]
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	2101      	movs	r1, #1
 80194cc:	438a      	bics	r2, r1
 80194ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d104      	bne.n	80194e0 <HAL_TIM_PWM_Stop+0xa0>
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	223e      	movs	r2, #62	@ 0x3e
 80194da:	2101      	movs	r1, #1
 80194dc:	5499      	strb	r1, [r3, r2]
 80194de:	e023      	b.n	8019528 <HAL_TIM_PWM_Stop+0xe8>
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	2b04      	cmp	r3, #4
 80194e4:	d104      	bne.n	80194f0 <HAL_TIM_PWM_Stop+0xb0>
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	223f      	movs	r2, #63	@ 0x3f
 80194ea:	2101      	movs	r1, #1
 80194ec:	5499      	strb	r1, [r3, r2]
 80194ee:	e01b      	b.n	8019528 <HAL_TIM_PWM_Stop+0xe8>
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	2b08      	cmp	r3, #8
 80194f4:	d104      	bne.n	8019500 <HAL_TIM_PWM_Stop+0xc0>
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	2240      	movs	r2, #64	@ 0x40
 80194fa:	2101      	movs	r1, #1
 80194fc:	5499      	strb	r1, [r3, r2]
 80194fe:	e013      	b.n	8019528 <HAL_TIM_PWM_Stop+0xe8>
 8019500:	683b      	ldr	r3, [r7, #0]
 8019502:	2b0c      	cmp	r3, #12
 8019504:	d104      	bne.n	8019510 <HAL_TIM_PWM_Stop+0xd0>
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2241      	movs	r2, #65	@ 0x41
 801950a:	2101      	movs	r1, #1
 801950c:	5499      	strb	r1, [r3, r2]
 801950e:	e00b      	b.n	8019528 <HAL_TIM_PWM_Stop+0xe8>
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	2b10      	cmp	r3, #16
 8019514:	d104      	bne.n	8019520 <HAL_TIM_PWM_Stop+0xe0>
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	2242      	movs	r2, #66	@ 0x42
 801951a:	2101      	movs	r1, #1
 801951c:	5499      	strb	r1, [r3, r2]
 801951e:	e003      	b.n	8019528 <HAL_TIM_PWM_Stop+0xe8>
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	2243      	movs	r2, #67	@ 0x43
 8019524:	2101      	movs	r1, #1
 8019526:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8019528:	2300      	movs	r3, #0
}
 801952a:	0018      	movs	r0, r3
 801952c:	46bd      	mov	sp, r7
 801952e:	b002      	add	sp, #8
 8019530:	bd80      	pop	{r7, pc}
 8019532:	46c0      	nop			@ (mov r8, r8)
 8019534:	40012c00 	.word	0x40012c00
 8019538:	40014000 	.word	0x40014000
 801953c:	40014400 	.word	0x40014400
 8019540:	00001111 	.word	0x00001111
 8019544:	00000444 	.word	0x00000444
 8019548:	ffff7fff 	.word	0xffff7fff

0801954c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b086      	sub	sp, #24
 8019550:	af00      	add	r7, sp, #0
 8019552:	60f8      	str	r0, [r7, #12]
 8019554:	60b9      	str	r1, [r7, #8]
 8019556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019558:	2317      	movs	r3, #23
 801955a:	18fb      	adds	r3, r7, r3
 801955c:	2200      	movs	r2, #0
 801955e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	223c      	movs	r2, #60	@ 0x3c
 8019564:	5c9b      	ldrb	r3, [r3, r2]
 8019566:	2b01      	cmp	r3, #1
 8019568:	d101      	bne.n	801956e <HAL_TIM_PWM_ConfigChannel+0x22>
 801956a:	2302      	movs	r3, #2
 801956c:	e0e5      	b.n	801973a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	223c      	movs	r2, #60	@ 0x3c
 8019572:	2101      	movs	r1, #1
 8019574:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	2b14      	cmp	r3, #20
 801957a:	d900      	bls.n	801957e <HAL_TIM_PWM_ConfigChannel+0x32>
 801957c:	e0d1      	b.n	8019722 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	009a      	lsls	r2, r3, #2
 8019582:	4b70      	ldr	r3, [pc, #448]	@ (8019744 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8019584:	18d3      	adds	r3, r2, r3
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	68ba      	ldr	r2, [r7, #8]
 8019590:	0011      	movs	r1, r2
 8019592:	0018      	movs	r0, r3
 8019594:	f000 fa34 	bl	8019a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	699a      	ldr	r2, [r3, #24]
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	2108      	movs	r1, #8
 80195a4:	430a      	orrs	r2, r1
 80195a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	699a      	ldr	r2, [r3, #24]
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	2104      	movs	r1, #4
 80195b4:	438a      	bics	r2, r1
 80195b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	6999      	ldr	r1, [r3, #24]
 80195be:	68bb      	ldr	r3, [r7, #8]
 80195c0:	691a      	ldr	r2, [r3, #16]
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	430a      	orrs	r2, r1
 80195c8:	619a      	str	r2, [r3, #24]
      break;
 80195ca:	e0af      	b.n	801972c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	68ba      	ldr	r2, [r7, #8]
 80195d2:	0011      	movs	r1, r2
 80195d4:	0018      	movs	r0, r3
 80195d6:	f000 fa93 	bl	8019b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	699a      	ldr	r2, [r3, #24]
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2180      	movs	r1, #128	@ 0x80
 80195e6:	0109      	lsls	r1, r1, #4
 80195e8:	430a      	orrs	r2, r1
 80195ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	699a      	ldr	r2, [r3, #24]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	4954      	ldr	r1, [pc, #336]	@ (8019748 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80195f8:	400a      	ands	r2, r1
 80195fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	6999      	ldr	r1, [r3, #24]
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	691b      	ldr	r3, [r3, #16]
 8019606:	021a      	lsls	r2, r3, #8
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	430a      	orrs	r2, r1
 801960e:	619a      	str	r2, [r3, #24]
      break;
 8019610:	e08c      	b.n	801972c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	68ba      	ldr	r2, [r7, #8]
 8019618:	0011      	movs	r1, r2
 801961a:	0018      	movs	r0, r3
 801961c:	f000 faee 	bl	8019bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	69da      	ldr	r2, [r3, #28]
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	2108      	movs	r1, #8
 801962c:	430a      	orrs	r2, r1
 801962e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	69da      	ldr	r2, [r3, #28]
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	2104      	movs	r1, #4
 801963c:	438a      	bics	r2, r1
 801963e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	69d9      	ldr	r1, [r3, #28]
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	691a      	ldr	r2, [r3, #16]
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	430a      	orrs	r2, r1
 8019650:	61da      	str	r2, [r3, #28]
      break;
 8019652:	e06b      	b.n	801972c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	68ba      	ldr	r2, [r7, #8]
 801965a:	0011      	movs	r1, r2
 801965c:	0018      	movs	r0, r3
 801965e:	f000 fb4f 	bl	8019d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	69da      	ldr	r2, [r3, #28]
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	2180      	movs	r1, #128	@ 0x80
 801966e:	0109      	lsls	r1, r1, #4
 8019670:	430a      	orrs	r2, r1
 8019672:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	69da      	ldr	r2, [r3, #28]
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4932      	ldr	r1, [pc, #200]	@ (8019748 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8019680:	400a      	ands	r2, r1
 8019682:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	69d9      	ldr	r1, [r3, #28]
 801968a:	68bb      	ldr	r3, [r7, #8]
 801968c:	691b      	ldr	r3, [r3, #16]
 801968e:	021a      	lsls	r2, r3, #8
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	430a      	orrs	r2, r1
 8019696:	61da      	str	r2, [r3, #28]
      break;
 8019698:	e048      	b.n	801972c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	68ba      	ldr	r2, [r7, #8]
 80196a0:	0011      	movs	r1, r2
 80196a2:	0018      	movs	r0, r3
 80196a4:	f000 fb90 	bl	8019dc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	2108      	movs	r1, #8
 80196b4:	430a      	orrs	r2, r1
 80196b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	2104      	movs	r1, #4
 80196c4:	438a      	bics	r2, r1
 80196c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	691a      	ldr	r2, [r3, #16]
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	430a      	orrs	r2, r1
 80196d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80196da:	e027      	b.n	801972c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	68ba      	ldr	r2, [r7, #8]
 80196e2:	0011      	movs	r1, r2
 80196e4:	0018      	movs	r0, r3
 80196e6:	f000 fbc9 	bl	8019e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	2180      	movs	r1, #128	@ 0x80
 80196f6:	0109      	lsls	r1, r1, #4
 80196f8:	430a      	orrs	r2, r1
 80196fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	4910      	ldr	r1, [pc, #64]	@ (8019748 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8019708:	400a      	ands	r2, r1
 801970a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	691b      	ldr	r3, [r3, #16]
 8019716:	021a      	lsls	r2, r3, #8
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	430a      	orrs	r2, r1
 801971e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8019720:	e004      	b.n	801972c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8019722:	2317      	movs	r3, #23
 8019724:	18fb      	adds	r3, r7, r3
 8019726:	2201      	movs	r2, #1
 8019728:	701a      	strb	r2, [r3, #0]
      break;
 801972a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	223c      	movs	r2, #60	@ 0x3c
 8019730:	2100      	movs	r1, #0
 8019732:	5499      	strb	r1, [r3, r2]

  return status;
 8019734:	2317      	movs	r3, #23
 8019736:	18fb      	adds	r3, r7, r3
 8019738:	781b      	ldrb	r3, [r3, #0]
}
 801973a:	0018      	movs	r0, r3
 801973c:	46bd      	mov	sp, r7
 801973e:	b006      	add	sp, #24
 8019740:	bd80      	pop	{r7, pc}
 8019742:	46c0      	nop			@ (mov r8, r8)
 8019744:	0801c5b4 	.word	0x0801c5b4
 8019748:	fffffbff 	.word	0xfffffbff

0801974c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b084      	sub	sp, #16
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
 8019754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019756:	230f      	movs	r3, #15
 8019758:	18fb      	adds	r3, r7, r3
 801975a:	2200      	movs	r2, #0
 801975c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	223c      	movs	r2, #60	@ 0x3c
 8019762:	5c9b      	ldrb	r3, [r3, r2]
 8019764:	2b01      	cmp	r3, #1
 8019766:	d101      	bne.n	801976c <HAL_TIM_ConfigClockSource+0x20>
 8019768:	2302      	movs	r3, #2
 801976a:	e0c0      	b.n	80198ee <HAL_TIM_ConfigClockSource+0x1a2>
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	223c      	movs	r2, #60	@ 0x3c
 8019770:	2101      	movs	r1, #1
 8019772:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	223d      	movs	r2, #61	@ 0x3d
 8019778:	2102      	movs	r1, #2
 801977a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	689b      	ldr	r3, [r3, #8]
 8019782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	4a5c      	ldr	r2, [pc, #368]	@ (80198f8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8019788:	4013      	ands	r3, r2
 801978a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801978c:	68bb      	ldr	r3, [r7, #8]
 801978e:	4a5b      	ldr	r2, [pc, #364]	@ (80198fc <HAL_TIM_ConfigClockSource+0x1b0>)
 8019790:	4013      	ands	r3, r2
 8019792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	68ba      	ldr	r2, [r7, #8]
 801979a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a57      	ldr	r2, [pc, #348]	@ (8019900 <HAL_TIM_ConfigClockSource+0x1b4>)
 80197a2:	4293      	cmp	r3, r2
 80197a4:	d100      	bne.n	80197a8 <HAL_TIM_ConfigClockSource+0x5c>
 80197a6:	e088      	b.n	80198ba <HAL_TIM_ConfigClockSource+0x16e>
 80197a8:	4a55      	ldr	r2, [pc, #340]	@ (8019900 <HAL_TIM_ConfigClockSource+0x1b4>)
 80197aa:	4293      	cmp	r3, r2
 80197ac:	d900      	bls.n	80197b0 <HAL_TIM_ConfigClockSource+0x64>
 80197ae:	e08d      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197b0:	2280      	movs	r2, #128	@ 0x80
 80197b2:	0192      	lsls	r2, r2, #6
 80197b4:	4293      	cmp	r3, r2
 80197b6:	d03c      	beq.n	8019832 <HAL_TIM_ConfigClockSource+0xe6>
 80197b8:	2280      	movs	r2, #128	@ 0x80
 80197ba:	0192      	lsls	r2, r2, #6
 80197bc:	4293      	cmp	r3, r2
 80197be:	d900      	bls.n	80197c2 <HAL_TIM_ConfigClockSource+0x76>
 80197c0:	e084      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197c2:	2280      	movs	r2, #128	@ 0x80
 80197c4:	0152      	lsls	r2, r2, #5
 80197c6:	4293      	cmp	r3, r2
 80197c8:	d100      	bne.n	80197cc <HAL_TIM_ConfigClockSource+0x80>
 80197ca:	e084      	b.n	80198d6 <HAL_TIM_ConfigClockSource+0x18a>
 80197cc:	2280      	movs	r2, #128	@ 0x80
 80197ce:	0152      	lsls	r2, r2, #5
 80197d0:	4293      	cmp	r3, r2
 80197d2:	d900      	bls.n	80197d6 <HAL_TIM_ConfigClockSource+0x8a>
 80197d4:	e07a      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197d6:	2b70      	cmp	r3, #112	@ 0x70
 80197d8:	d014      	beq.n	8019804 <HAL_TIM_ConfigClockSource+0xb8>
 80197da:	d900      	bls.n	80197de <HAL_TIM_ConfigClockSource+0x92>
 80197dc:	e076      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197de:	2b60      	cmp	r3, #96	@ 0x60
 80197e0:	d04b      	beq.n	801987a <HAL_TIM_ConfigClockSource+0x12e>
 80197e2:	d900      	bls.n	80197e6 <HAL_TIM_ConfigClockSource+0x9a>
 80197e4:	e072      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197e6:	2b50      	cmp	r3, #80	@ 0x50
 80197e8:	d037      	beq.n	801985a <HAL_TIM_ConfigClockSource+0x10e>
 80197ea:	d900      	bls.n	80197ee <HAL_TIM_ConfigClockSource+0xa2>
 80197ec:	e06e      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197ee:	2b40      	cmp	r3, #64	@ 0x40
 80197f0:	d053      	beq.n	801989a <HAL_TIM_ConfigClockSource+0x14e>
 80197f2:	d86b      	bhi.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197f4:	2b20      	cmp	r3, #32
 80197f6:	d060      	beq.n	80198ba <HAL_TIM_ConfigClockSource+0x16e>
 80197f8:	d868      	bhi.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d05d      	beq.n	80198ba <HAL_TIM_ConfigClockSource+0x16e>
 80197fe:	2b10      	cmp	r3, #16
 8019800:	d05b      	beq.n	80198ba <HAL_TIM_ConfigClockSource+0x16e>
 8019802:	e063      	b.n	80198cc <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8019814:	f000 fc0c 	bl	801a030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	689b      	ldr	r3, [r3, #8]
 801981e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8019820:	68bb      	ldr	r3, [r7, #8]
 8019822:	2277      	movs	r2, #119	@ 0x77
 8019824:	4313      	orrs	r3, r2
 8019826:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	68ba      	ldr	r2, [r7, #8]
 801982e:	609a      	str	r2, [r3, #8]
      break;
 8019830:	e052      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8019842:	f000 fbf5 	bl	801a030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	689a      	ldr	r2, [r3, #8]
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	2180      	movs	r1, #128	@ 0x80
 8019852:	01c9      	lsls	r1, r1, #7
 8019854:	430a      	orrs	r2, r1
 8019856:	609a      	str	r2, [r3, #8]
      break;
 8019858:	e03e      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801985e:	683b      	ldr	r3, [r7, #0]
 8019860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019862:	683b      	ldr	r3, [r7, #0]
 8019864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019866:	001a      	movs	r2, r3
 8019868:	f000 fb66 	bl	8019f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	2150      	movs	r1, #80	@ 0x50
 8019872:	0018      	movs	r0, r3
 8019874:	f000 fbc0 	bl	8019ff8 <TIM_ITRx_SetConfig>
      break;
 8019878:	e02e      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8019886:	001a      	movs	r2, r3
 8019888:	f000 fb84 	bl	8019f94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	2160      	movs	r1, #96	@ 0x60
 8019892:	0018      	movs	r0, r3
 8019894:	f000 fbb0 	bl	8019ff8 <TIM_ITRx_SetConfig>
      break;
 8019898:	e01e      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80198a6:	001a      	movs	r2, r3
 80198a8:	f000 fb46 	bl	8019f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	2140      	movs	r1, #64	@ 0x40
 80198b2:	0018      	movs	r0, r3
 80198b4:	f000 fba0 	bl	8019ff8 <TIM_ITRx_SetConfig>
      break;
 80198b8:	e00e      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	681a      	ldr	r2, [r3, #0]
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	0019      	movs	r1, r3
 80198c4:	0010      	movs	r0, r2
 80198c6:	f000 fb97 	bl	8019ff8 <TIM_ITRx_SetConfig>
      break;
 80198ca:	e005      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 80198cc:	230f      	movs	r3, #15
 80198ce:	18fb      	adds	r3, r7, r3
 80198d0:	2201      	movs	r2, #1
 80198d2:	701a      	strb	r2, [r3, #0]
      break;
 80198d4:	e000      	b.n	80198d8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80198d6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	223d      	movs	r2, #61	@ 0x3d
 80198dc:	2101      	movs	r1, #1
 80198de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	223c      	movs	r2, #60	@ 0x3c
 80198e4:	2100      	movs	r1, #0
 80198e6:	5499      	strb	r1, [r3, r2]

  return status;
 80198e8:	230f      	movs	r3, #15
 80198ea:	18fb      	adds	r3, r7, r3
 80198ec:	781b      	ldrb	r3, [r3, #0]
}
 80198ee:	0018      	movs	r0, r3
 80198f0:	46bd      	mov	sp, r7
 80198f2:	b004      	add	sp, #16
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	46c0      	nop			@ (mov r8, r8)
 80198f8:	ffceff88 	.word	0xffceff88
 80198fc:	ffff00ff 	.word	0xffff00ff
 8019900:	00100030 	.word	0x00100030

08019904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b084      	sub	sp, #16
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	4a35      	ldr	r2, [pc, #212]	@ (80199ec <TIM_Base_SetConfig+0xe8>)
 8019918:	4293      	cmp	r3, r2
 801991a:	d008      	beq.n	801992e <TIM_Base_SetConfig+0x2a>
 801991c:	687a      	ldr	r2, [r7, #4]
 801991e:	2380      	movs	r3, #128	@ 0x80
 8019920:	05db      	lsls	r3, r3, #23
 8019922:	429a      	cmp	r2, r3
 8019924:	d003      	beq.n	801992e <TIM_Base_SetConfig+0x2a>
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	4a31      	ldr	r2, [pc, #196]	@ (80199f0 <TIM_Base_SetConfig+0xec>)
 801992a:	4293      	cmp	r3, r2
 801992c:	d108      	bne.n	8019940 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	2270      	movs	r2, #112	@ 0x70
 8019932:	4393      	bics	r3, r2
 8019934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019936:	683b      	ldr	r3, [r7, #0]
 8019938:	685b      	ldr	r3, [r3, #4]
 801993a:	68fa      	ldr	r2, [r7, #12]
 801993c:	4313      	orrs	r3, r2
 801993e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	4a2a      	ldr	r2, [pc, #168]	@ (80199ec <TIM_Base_SetConfig+0xe8>)
 8019944:	4293      	cmp	r3, r2
 8019946:	d010      	beq.n	801996a <TIM_Base_SetConfig+0x66>
 8019948:	687a      	ldr	r2, [r7, #4]
 801994a:	2380      	movs	r3, #128	@ 0x80
 801994c:	05db      	lsls	r3, r3, #23
 801994e:	429a      	cmp	r2, r3
 8019950:	d00b      	beq.n	801996a <TIM_Base_SetConfig+0x66>
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	4a26      	ldr	r2, [pc, #152]	@ (80199f0 <TIM_Base_SetConfig+0xec>)
 8019956:	4293      	cmp	r3, r2
 8019958:	d007      	beq.n	801996a <TIM_Base_SetConfig+0x66>
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	4a25      	ldr	r2, [pc, #148]	@ (80199f4 <TIM_Base_SetConfig+0xf0>)
 801995e:	4293      	cmp	r3, r2
 8019960:	d003      	beq.n	801996a <TIM_Base_SetConfig+0x66>
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	4a24      	ldr	r2, [pc, #144]	@ (80199f8 <TIM_Base_SetConfig+0xf4>)
 8019966:	4293      	cmp	r3, r2
 8019968:	d108      	bne.n	801997c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	4a23      	ldr	r2, [pc, #140]	@ (80199fc <TIM_Base_SetConfig+0xf8>)
 801996e:	4013      	ands	r3, r2
 8019970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	68db      	ldr	r3, [r3, #12]
 8019976:	68fa      	ldr	r2, [r7, #12]
 8019978:	4313      	orrs	r3, r2
 801997a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	2280      	movs	r2, #128	@ 0x80
 8019980:	4393      	bics	r3, r2
 8019982:	001a      	movs	r2, r3
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	695b      	ldr	r3, [r3, #20]
 8019988:	4313      	orrs	r3, r2
 801998a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	68fa      	ldr	r2, [r7, #12]
 8019990:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	689a      	ldr	r2, [r3, #8]
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	681a      	ldr	r2, [r3, #0]
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	4a11      	ldr	r2, [pc, #68]	@ (80199ec <TIM_Base_SetConfig+0xe8>)
 80199a6:	4293      	cmp	r3, r2
 80199a8:	d007      	beq.n	80199ba <TIM_Base_SetConfig+0xb6>
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	4a11      	ldr	r2, [pc, #68]	@ (80199f4 <TIM_Base_SetConfig+0xf0>)
 80199ae:	4293      	cmp	r3, r2
 80199b0:	d003      	beq.n	80199ba <TIM_Base_SetConfig+0xb6>
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	4a10      	ldr	r2, [pc, #64]	@ (80199f8 <TIM_Base_SetConfig+0xf4>)
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d103      	bne.n	80199c2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80199ba:	683b      	ldr	r3, [r7, #0]
 80199bc:	691a      	ldr	r2, [r3, #16]
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2201      	movs	r2, #1
 80199c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	691b      	ldr	r3, [r3, #16]
 80199cc:	2201      	movs	r2, #1
 80199ce:	4013      	ands	r3, r2
 80199d0:	2b01      	cmp	r3, #1
 80199d2:	d106      	bne.n	80199e2 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	691b      	ldr	r3, [r3, #16]
 80199d8:	2201      	movs	r2, #1
 80199da:	4393      	bics	r3, r2
 80199dc:	001a      	movs	r2, r3
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	611a      	str	r2, [r3, #16]
  }
}
 80199e2:	46c0      	nop			@ (mov r8, r8)
 80199e4:	46bd      	mov	sp, r7
 80199e6:	b004      	add	sp, #16
 80199e8:	bd80      	pop	{r7, pc}
 80199ea:	46c0      	nop			@ (mov r8, r8)
 80199ec:	40012c00 	.word	0x40012c00
 80199f0:	40000400 	.word	0x40000400
 80199f4:	40014000 	.word	0x40014000
 80199f8:	40014400 	.word	0x40014400
 80199fc:	fffffcff 	.word	0xfffffcff

08019a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b086      	sub	sp, #24
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	6a1b      	ldr	r3, [r3, #32]
 8019a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	6a1b      	ldr	r3, [r3, #32]
 8019a14:	2201      	movs	r2, #1
 8019a16:	4393      	bics	r3, r2
 8019a18:	001a      	movs	r2, r3
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	699b      	ldr	r3, [r3, #24]
 8019a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8019ae8 <TIM_OC1_SetConfig+0xe8>)
 8019a2e:	4013      	ands	r3, r2
 8019a30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	2203      	movs	r2, #3
 8019a36:	4393      	bics	r3, r2
 8019a38:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	68fa      	ldr	r2, [r7, #12]
 8019a40:	4313      	orrs	r3, r2
 8019a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	2202      	movs	r2, #2
 8019a48:	4393      	bics	r3, r2
 8019a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	689b      	ldr	r3, [r3, #8]
 8019a50:	697a      	ldr	r2, [r7, #20]
 8019a52:	4313      	orrs	r3, r2
 8019a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	4a24      	ldr	r2, [pc, #144]	@ (8019aec <TIM_OC1_SetConfig+0xec>)
 8019a5a:	4293      	cmp	r3, r2
 8019a5c:	d007      	beq.n	8019a6e <TIM_OC1_SetConfig+0x6e>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	4a23      	ldr	r2, [pc, #140]	@ (8019af0 <TIM_OC1_SetConfig+0xf0>)
 8019a62:	4293      	cmp	r3, r2
 8019a64:	d003      	beq.n	8019a6e <TIM_OC1_SetConfig+0x6e>
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	4a22      	ldr	r2, [pc, #136]	@ (8019af4 <TIM_OC1_SetConfig+0xf4>)
 8019a6a:	4293      	cmp	r3, r2
 8019a6c:	d10c      	bne.n	8019a88 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8019a6e:	697b      	ldr	r3, [r7, #20]
 8019a70:	2208      	movs	r2, #8
 8019a72:	4393      	bics	r3, r2
 8019a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	68db      	ldr	r3, [r3, #12]
 8019a7a:	697a      	ldr	r2, [r7, #20]
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8019a80:	697b      	ldr	r3, [r7, #20]
 8019a82:	2204      	movs	r2, #4
 8019a84:	4393      	bics	r3, r2
 8019a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	4a18      	ldr	r2, [pc, #96]	@ (8019aec <TIM_OC1_SetConfig+0xec>)
 8019a8c:	4293      	cmp	r3, r2
 8019a8e:	d007      	beq.n	8019aa0 <TIM_OC1_SetConfig+0xa0>
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	4a17      	ldr	r2, [pc, #92]	@ (8019af0 <TIM_OC1_SetConfig+0xf0>)
 8019a94:	4293      	cmp	r3, r2
 8019a96:	d003      	beq.n	8019aa0 <TIM_OC1_SetConfig+0xa0>
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	4a16      	ldr	r2, [pc, #88]	@ (8019af4 <TIM_OC1_SetConfig+0xf4>)
 8019a9c:	4293      	cmp	r3, r2
 8019a9e:	d111      	bne.n	8019ac4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8019aa0:	693b      	ldr	r3, [r7, #16]
 8019aa2:	4a15      	ldr	r2, [pc, #84]	@ (8019af8 <TIM_OC1_SetConfig+0xf8>)
 8019aa4:	4013      	ands	r3, r2
 8019aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8019aa8:	693b      	ldr	r3, [r7, #16]
 8019aaa:	4a14      	ldr	r2, [pc, #80]	@ (8019afc <TIM_OC1_SetConfig+0xfc>)
 8019aac:	4013      	ands	r3, r2
 8019aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	695b      	ldr	r3, [r3, #20]
 8019ab4:	693a      	ldr	r2, [r7, #16]
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	699b      	ldr	r3, [r3, #24]
 8019abe:	693a      	ldr	r2, [r7, #16]
 8019ac0:	4313      	orrs	r3, r2
 8019ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	693a      	ldr	r2, [r7, #16]
 8019ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	68fa      	ldr	r2, [r7, #12]
 8019ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8019ad0:	683b      	ldr	r3, [r7, #0]
 8019ad2:	685a      	ldr	r2, [r3, #4]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	697a      	ldr	r2, [r7, #20]
 8019adc:	621a      	str	r2, [r3, #32]
}
 8019ade:	46c0      	nop			@ (mov r8, r8)
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	b006      	add	sp, #24
 8019ae4:	bd80      	pop	{r7, pc}
 8019ae6:	46c0      	nop			@ (mov r8, r8)
 8019ae8:	fffeff8f 	.word	0xfffeff8f
 8019aec:	40012c00 	.word	0x40012c00
 8019af0:	40014000 	.word	0x40014000
 8019af4:	40014400 	.word	0x40014400
 8019af8:	fffffeff 	.word	0xfffffeff
 8019afc:	fffffdff 	.word	0xfffffdff

08019b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b086      	sub	sp, #24
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	6a1b      	ldr	r3, [r3, #32]
 8019b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6a1b      	ldr	r3, [r3, #32]
 8019b14:	2210      	movs	r2, #16
 8019b16:	4393      	bics	r3, r2
 8019b18:	001a      	movs	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	699b      	ldr	r3, [r3, #24]
 8019b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8019be0 <TIM_OC2_SetConfig+0xe0>)
 8019b2e:	4013      	ands	r3, r2
 8019b30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	4a2b      	ldr	r2, [pc, #172]	@ (8019be4 <TIM_OC2_SetConfig+0xe4>)
 8019b36:	4013      	ands	r3, r2
 8019b38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	021b      	lsls	r3, r3, #8
 8019b40:	68fa      	ldr	r2, [r7, #12]
 8019b42:	4313      	orrs	r3, r2
 8019b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	2220      	movs	r2, #32
 8019b4a:	4393      	bics	r3, r2
 8019b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	689b      	ldr	r3, [r3, #8]
 8019b52:	011b      	lsls	r3, r3, #4
 8019b54:	697a      	ldr	r2, [r7, #20]
 8019b56:	4313      	orrs	r3, r2
 8019b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	4a22      	ldr	r2, [pc, #136]	@ (8019be8 <TIM_OC2_SetConfig+0xe8>)
 8019b5e:	4293      	cmp	r3, r2
 8019b60:	d10d      	bne.n	8019b7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8019b62:	697b      	ldr	r3, [r7, #20]
 8019b64:	2280      	movs	r2, #128	@ 0x80
 8019b66:	4393      	bics	r3, r2
 8019b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	68db      	ldr	r3, [r3, #12]
 8019b6e:	011b      	lsls	r3, r3, #4
 8019b70:	697a      	ldr	r2, [r7, #20]
 8019b72:	4313      	orrs	r3, r2
 8019b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	2240      	movs	r2, #64	@ 0x40
 8019b7a:	4393      	bics	r3, r2
 8019b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	4a19      	ldr	r2, [pc, #100]	@ (8019be8 <TIM_OC2_SetConfig+0xe8>)
 8019b82:	4293      	cmp	r3, r2
 8019b84:	d007      	beq.n	8019b96 <TIM_OC2_SetConfig+0x96>
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	4a18      	ldr	r2, [pc, #96]	@ (8019bec <TIM_OC2_SetConfig+0xec>)
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	d003      	beq.n	8019b96 <TIM_OC2_SetConfig+0x96>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	4a17      	ldr	r2, [pc, #92]	@ (8019bf0 <TIM_OC2_SetConfig+0xf0>)
 8019b92:	4293      	cmp	r3, r2
 8019b94:	d113      	bne.n	8019bbe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8019b96:	693b      	ldr	r3, [r7, #16]
 8019b98:	4a16      	ldr	r2, [pc, #88]	@ (8019bf4 <TIM_OC2_SetConfig+0xf4>)
 8019b9a:	4013      	ands	r3, r2
 8019b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8019b9e:	693b      	ldr	r3, [r7, #16]
 8019ba0:	4a15      	ldr	r2, [pc, #84]	@ (8019bf8 <TIM_OC2_SetConfig+0xf8>)
 8019ba2:	4013      	ands	r3, r2
 8019ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	695b      	ldr	r3, [r3, #20]
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	693a      	ldr	r2, [r7, #16]
 8019bae:	4313      	orrs	r3, r2
 8019bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8019bb2:	683b      	ldr	r3, [r7, #0]
 8019bb4:	699b      	ldr	r3, [r3, #24]
 8019bb6:	009b      	lsls	r3, r3, #2
 8019bb8:	693a      	ldr	r2, [r7, #16]
 8019bba:	4313      	orrs	r3, r2
 8019bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	693a      	ldr	r2, [r7, #16]
 8019bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	68fa      	ldr	r2, [r7, #12]
 8019bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019bca:	683b      	ldr	r3, [r7, #0]
 8019bcc:	685a      	ldr	r2, [r3, #4]
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	697a      	ldr	r2, [r7, #20]
 8019bd6:	621a      	str	r2, [r3, #32]
}
 8019bd8:	46c0      	nop			@ (mov r8, r8)
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	b006      	add	sp, #24
 8019bde:	bd80      	pop	{r7, pc}
 8019be0:	feff8fff 	.word	0xfeff8fff
 8019be4:	fffffcff 	.word	0xfffffcff
 8019be8:	40012c00 	.word	0x40012c00
 8019bec:	40014000 	.word	0x40014000
 8019bf0:	40014400 	.word	0x40014400
 8019bf4:	fffffbff 	.word	0xfffffbff
 8019bf8:	fffff7ff 	.word	0xfffff7ff

08019bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b086      	sub	sp, #24
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
 8019c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	6a1b      	ldr	r3, [r3, #32]
 8019c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	6a1b      	ldr	r3, [r3, #32]
 8019c10:	4a31      	ldr	r2, [pc, #196]	@ (8019cd8 <TIM_OC3_SetConfig+0xdc>)
 8019c12:	401a      	ands	r2, r3
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	69db      	ldr	r3, [r3, #28]
 8019c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	4a2d      	ldr	r2, [pc, #180]	@ (8019cdc <TIM_OC3_SetConfig+0xe0>)
 8019c28:	4013      	ands	r3, r2
 8019c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2203      	movs	r2, #3
 8019c30:	4393      	bics	r3, r2
 8019c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	68fa      	ldr	r2, [r7, #12]
 8019c3a:	4313      	orrs	r3, r2
 8019c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019c3e:	697b      	ldr	r3, [r7, #20]
 8019c40:	4a27      	ldr	r2, [pc, #156]	@ (8019ce0 <TIM_OC3_SetConfig+0xe4>)
 8019c42:	4013      	ands	r3, r2
 8019c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	689b      	ldr	r3, [r3, #8]
 8019c4a:	021b      	lsls	r3, r3, #8
 8019c4c:	697a      	ldr	r2, [r7, #20]
 8019c4e:	4313      	orrs	r3, r2
 8019c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	4a23      	ldr	r2, [pc, #140]	@ (8019ce4 <TIM_OC3_SetConfig+0xe8>)
 8019c56:	4293      	cmp	r3, r2
 8019c58:	d10d      	bne.n	8019c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8019c5a:	697b      	ldr	r3, [r7, #20]
 8019c5c:	4a22      	ldr	r2, [pc, #136]	@ (8019ce8 <TIM_OC3_SetConfig+0xec>)
 8019c5e:	4013      	ands	r3, r2
 8019c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	68db      	ldr	r3, [r3, #12]
 8019c66:	021b      	lsls	r3, r3, #8
 8019c68:	697a      	ldr	r2, [r7, #20]
 8019c6a:	4313      	orrs	r3, r2
 8019c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8019c6e:	697b      	ldr	r3, [r7, #20]
 8019c70:	4a1e      	ldr	r2, [pc, #120]	@ (8019cec <TIM_OC3_SetConfig+0xf0>)
 8019c72:	4013      	ands	r3, r2
 8019c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	4a1a      	ldr	r2, [pc, #104]	@ (8019ce4 <TIM_OC3_SetConfig+0xe8>)
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	d007      	beq.n	8019c8e <TIM_OC3_SetConfig+0x92>
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	4a1b      	ldr	r2, [pc, #108]	@ (8019cf0 <TIM_OC3_SetConfig+0xf4>)
 8019c82:	4293      	cmp	r3, r2
 8019c84:	d003      	beq.n	8019c8e <TIM_OC3_SetConfig+0x92>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	4a1a      	ldr	r2, [pc, #104]	@ (8019cf4 <TIM_OC3_SetConfig+0xf8>)
 8019c8a:	4293      	cmp	r3, r2
 8019c8c:	d113      	bne.n	8019cb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	4a19      	ldr	r2, [pc, #100]	@ (8019cf8 <TIM_OC3_SetConfig+0xfc>)
 8019c92:	4013      	ands	r3, r2
 8019c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	4a18      	ldr	r2, [pc, #96]	@ (8019cfc <TIM_OC3_SetConfig+0x100>)
 8019c9a:	4013      	ands	r3, r2
 8019c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	695b      	ldr	r3, [r3, #20]
 8019ca2:	011b      	lsls	r3, r3, #4
 8019ca4:	693a      	ldr	r2, [r7, #16]
 8019ca6:	4313      	orrs	r3, r2
 8019ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	699b      	ldr	r3, [r3, #24]
 8019cae:	011b      	lsls	r3, r3, #4
 8019cb0:	693a      	ldr	r2, [r7, #16]
 8019cb2:	4313      	orrs	r3, r2
 8019cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	693a      	ldr	r2, [r7, #16]
 8019cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	68fa      	ldr	r2, [r7, #12]
 8019cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	685a      	ldr	r2, [r3, #4]
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	697a      	ldr	r2, [r7, #20]
 8019cce:	621a      	str	r2, [r3, #32]
}
 8019cd0:	46c0      	nop			@ (mov r8, r8)
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	b006      	add	sp, #24
 8019cd6:	bd80      	pop	{r7, pc}
 8019cd8:	fffffeff 	.word	0xfffffeff
 8019cdc:	fffeff8f 	.word	0xfffeff8f
 8019ce0:	fffffdff 	.word	0xfffffdff
 8019ce4:	40012c00 	.word	0x40012c00
 8019ce8:	fffff7ff 	.word	0xfffff7ff
 8019cec:	fffffbff 	.word	0xfffffbff
 8019cf0:	40014000 	.word	0x40014000
 8019cf4:	40014400 	.word	0x40014400
 8019cf8:	ffffefff 	.word	0xffffefff
 8019cfc:	ffffdfff 	.word	0xffffdfff

08019d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
 8019d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	6a1b      	ldr	r3, [r3, #32]
 8019d0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6a1b      	ldr	r3, [r3, #32]
 8019d14:	4a24      	ldr	r2, [pc, #144]	@ (8019da8 <TIM_OC4_SetConfig+0xa8>)
 8019d16:	401a      	ands	r2, r3
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	685b      	ldr	r3, [r3, #4]
 8019d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	69db      	ldr	r3, [r3, #28]
 8019d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	4a20      	ldr	r2, [pc, #128]	@ (8019dac <TIM_OC4_SetConfig+0xac>)
 8019d2c:	4013      	ands	r3, r2
 8019d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	4a1f      	ldr	r2, [pc, #124]	@ (8019db0 <TIM_OC4_SetConfig+0xb0>)
 8019d34:	4013      	ands	r3, r2
 8019d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019d38:	683b      	ldr	r3, [r7, #0]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	021b      	lsls	r3, r3, #8
 8019d3e:	68fa      	ldr	r2, [r7, #12]
 8019d40:	4313      	orrs	r3, r2
 8019d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	4a1b      	ldr	r2, [pc, #108]	@ (8019db4 <TIM_OC4_SetConfig+0xb4>)
 8019d48:	4013      	ands	r3, r2
 8019d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	689b      	ldr	r3, [r3, #8]
 8019d50:	031b      	lsls	r3, r3, #12
 8019d52:	693a      	ldr	r2, [r7, #16]
 8019d54:	4313      	orrs	r3, r2
 8019d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	4a17      	ldr	r2, [pc, #92]	@ (8019db8 <TIM_OC4_SetConfig+0xb8>)
 8019d5c:	4293      	cmp	r3, r2
 8019d5e:	d007      	beq.n	8019d70 <TIM_OC4_SetConfig+0x70>
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	4a16      	ldr	r2, [pc, #88]	@ (8019dbc <TIM_OC4_SetConfig+0xbc>)
 8019d64:	4293      	cmp	r3, r2
 8019d66:	d003      	beq.n	8019d70 <TIM_OC4_SetConfig+0x70>
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	4a15      	ldr	r2, [pc, #84]	@ (8019dc0 <TIM_OC4_SetConfig+0xc0>)
 8019d6c:	4293      	cmp	r3, r2
 8019d6e:	d109      	bne.n	8019d84 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	4a14      	ldr	r2, [pc, #80]	@ (8019dc4 <TIM_OC4_SetConfig+0xc4>)
 8019d74:	4013      	ands	r3, r2
 8019d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	695b      	ldr	r3, [r3, #20]
 8019d7c:	019b      	lsls	r3, r3, #6
 8019d7e:	697a      	ldr	r2, [r7, #20]
 8019d80:	4313      	orrs	r3, r2
 8019d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	697a      	ldr	r2, [r7, #20]
 8019d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	68fa      	ldr	r2, [r7, #12]
 8019d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	685a      	ldr	r2, [r3, #4]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	693a      	ldr	r2, [r7, #16]
 8019d9c:	621a      	str	r2, [r3, #32]
}
 8019d9e:	46c0      	nop			@ (mov r8, r8)
 8019da0:	46bd      	mov	sp, r7
 8019da2:	b006      	add	sp, #24
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	46c0      	nop			@ (mov r8, r8)
 8019da8:	ffffefff 	.word	0xffffefff
 8019dac:	feff8fff 	.word	0xfeff8fff
 8019db0:	fffffcff 	.word	0xfffffcff
 8019db4:	ffffdfff 	.word	0xffffdfff
 8019db8:	40012c00 	.word	0x40012c00
 8019dbc:	40014000 	.word	0x40014000
 8019dc0:	40014400 	.word	0x40014400
 8019dc4:	ffffbfff 	.word	0xffffbfff

08019dc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b086      	sub	sp, #24
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6a1b      	ldr	r3, [r3, #32]
 8019dd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6a1b      	ldr	r3, [r3, #32]
 8019ddc:	4a21      	ldr	r2, [pc, #132]	@ (8019e64 <TIM_OC5_SetConfig+0x9c>)
 8019dde:	401a      	ands	r2, r3
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	685b      	ldr	r3, [r3, #4]
 8019de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	4a1d      	ldr	r2, [pc, #116]	@ (8019e68 <TIM_OC5_SetConfig+0xa0>)
 8019df4:	4013      	ands	r3, r2
 8019df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019df8:	683b      	ldr	r3, [r7, #0]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	68fa      	ldr	r2, [r7, #12]
 8019dfe:	4313      	orrs	r3, r2
 8019e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	4a19      	ldr	r2, [pc, #100]	@ (8019e6c <TIM_OC5_SetConfig+0xa4>)
 8019e06:	4013      	ands	r3, r2
 8019e08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	689b      	ldr	r3, [r3, #8]
 8019e0e:	041b      	lsls	r3, r3, #16
 8019e10:	693a      	ldr	r2, [r7, #16]
 8019e12:	4313      	orrs	r3, r2
 8019e14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	4a15      	ldr	r2, [pc, #84]	@ (8019e70 <TIM_OC5_SetConfig+0xa8>)
 8019e1a:	4293      	cmp	r3, r2
 8019e1c:	d007      	beq.n	8019e2e <TIM_OC5_SetConfig+0x66>
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	4a14      	ldr	r2, [pc, #80]	@ (8019e74 <TIM_OC5_SetConfig+0xac>)
 8019e22:	4293      	cmp	r3, r2
 8019e24:	d003      	beq.n	8019e2e <TIM_OC5_SetConfig+0x66>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	4a13      	ldr	r2, [pc, #76]	@ (8019e78 <TIM_OC5_SetConfig+0xb0>)
 8019e2a:	4293      	cmp	r3, r2
 8019e2c:	d109      	bne.n	8019e42 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8019e2e:	697b      	ldr	r3, [r7, #20]
 8019e30:	4a0c      	ldr	r2, [pc, #48]	@ (8019e64 <TIM_OC5_SetConfig+0x9c>)
 8019e32:	4013      	ands	r3, r2
 8019e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8019e36:	683b      	ldr	r3, [r7, #0]
 8019e38:	695b      	ldr	r3, [r3, #20]
 8019e3a:	021b      	lsls	r3, r3, #8
 8019e3c:	697a      	ldr	r2, [r7, #20]
 8019e3e:	4313      	orrs	r3, r2
 8019e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	697a      	ldr	r2, [r7, #20]
 8019e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	68fa      	ldr	r2, [r7, #12]
 8019e4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	685a      	ldr	r2, [r3, #4]
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	693a      	ldr	r2, [r7, #16]
 8019e5a:	621a      	str	r2, [r3, #32]
}
 8019e5c:	46c0      	nop			@ (mov r8, r8)
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	b006      	add	sp, #24
 8019e62:	bd80      	pop	{r7, pc}
 8019e64:	fffeffff 	.word	0xfffeffff
 8019e68:	fffeff8f 	.word	0xfffeff8f
 8019e6c:	fffdffff 	.word	0xfffdffff
 8019e70:	40012c00 	.word	0x40012c00
 8019e74:	40014000 	.word	0x40014000
 8019e78:	40014400 	.word	0x40014400

08019e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b086      	sub	sp, #24
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	6a1b      	ldr	r3, [r3, #32]
 8019e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	6a1b      	ldr	r3, [r3, #32]
 8019e90:	4a22      	ldr	r2, [pc, #136]	@ (8019f1c <TIM_OC6_SetConfig+0xa0>)
 8019e92:	401a      	ands	r2, r3
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	685b      	ldr	r3, [r3, #4]
 8019e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8019f20 <TIM_OC6_SetConfig+0xa4>)
 8019ea8:	4013      	ands	r3, r2
 8019eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	021b      	lsls	r3, r3, #8
 8019eb2:	68fa      	ldr	r2, [r7, #12]
 8019eb4:	4313      	orrs	r3, r2
 8019eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	4a1a      	ldr	r2, [pc, #104]	@ (8019f24 <TIM_OC6_SetConfig+0xa8>)
 8019ebc:	4013      	ands	r3, r2
 8019ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8019ec0:	683b      	ldr	r3, [r7, #0]
 8019ec2:	689b      	ldr	r3, [r3, #8]
 8019ec4:	051b      	lsls	r3, r3, #20
 8019ec6:	693a      	ldr	r2, [r7, #16]
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	4a16      	ldr	r2, [pc, #88]	@ (8019f28 <TIM_OC6_SetConfig+0xac>)
 8019ed0:	4293      	cmp	r3, r2
 8019ed2:	d007      	beq.n	8019ee4 <TIM_OC6_SetConfig+0x68>
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	4a15      	ldr	r2, [pc, #84]	@ (8019f2c <TIM_OC6_SetConfig+0xb0>)
 8019ed8:	4293      	cmp	r3, r2
 8019eda:	d003      	beq.n	8019ee4 <TIM_OC6_SetConfig+0x68>
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	4a14      	ldr	r2, [pc, #80]	@ (8019f30 <TIM_OC6_SetConfig+0xb4>)
 8019ee0:	4293      	cmp	r3, r2
 8019ee2:	d109      	bne.n	8019ef8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	4a13      	ldr	r2, [pc, #76]	@ (8019f34 <TIM_OC6_SetConfig+0xb8>)
 8019ee8:	4013      	ands	r3, r2
 8019eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8019eec:	683b      	ldr	r3, [r7, #0]
 8019eee:	695b      	ldr	r3, [r3, #20]
 8019ef0:	029b      	lsls	r3, r3, #10
 8019ef2:	697a      	ldr	r2, [r7, #20]
 8019ef4:	4313      	orrs	r3, r2
 8019ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	697a      	ldr	r2, [r7, #20]
 8019efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	68fa      	ldr	r2, [r7, #12]
 8019f02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	685a      	ldr	r2, [r3, #4]
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	693a      	ldr	r2, [r7, #16]
 8019f10:	621a      	str	r2, [r3, #32]
}
 8019f12:	46c0      	nop			@ (mov r8, r8)
 8019f14:	46bd      	mov	sp, r7
 8019f16:	b006      	add	sp, #24
 8019f18:	bd80      	pop	{r7, pc}
 8019f1a:	46c0      	nop			@ (mov r8, r8)
 8019f1c:	ffefffff 	.word	0xffefffff
 8019f20:	feff8fff 	.word	0xfeff8fff
 8019f24:	ffdfffff 	.word	0xffdfffff
 8019f28:	40012c00 	.word	0x40012c00
 8019f2c:	40014000 	.word	0x40014000
 8019f30:	40014400 	.word	0x40014400
 8019f34:	fffbffff 	.word	0xfffbffff

08019f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b086      	sub	sp, #24
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	60f8      	str	r0, [r7, #12]
 8019f40:	60b9      	str	r1, [r7, #8]
 8019f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	6a1b      	ldr	r3, [r3, #32]
 8019f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	6a1b      	ldr	r3, [r3, #32]
 8019f4e:	2201      	movs	r2, #1
 8019f50:	4393      	bics	r3, r2
 8019f52:	001a      	movs	r2, r3
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	699b      	ldr	r3, [r3, #24]
 8019f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019f5e:	693b      	ldr	r3, [r7, #16]
 8019f60:	22f0      	movs	r2, #240	@ 0xf0
 8019f62:	4393      	bics	r3, r2
 8019f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	011b      	lsls	r3, r3, #4
 8019f6a:	693a      	ldr	r2, [r7, #16]
 8019f6c:	4313      	orrs	r3, r2
 8019f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019f70:	697b      	ldr	r3, [r7, #20]
 8019f72:	220a      	movs	r2, #10
 8019f74:	4393      	bics	r3, r2
 8019f76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8019f78:	697a      	ldr	r2, [r7, #20]
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	4313      	orrs	r3, r2
 8019f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	693a      	ldr	r2, [r7, #16]
 8019f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	697a      	ldr	r2, [r7, #20]
 8019f8a:	621a      	str	r2, [r3, #32]
}
 8019f8c:	46c0      	nop			@ (mov r8, r8)
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	b006      	add	sp, #24
 8019f92:	bd80      	pop	{r7, pc}

08019f94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b086      	sub	sp, #24
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	60b9      	str	r1, [r7, #8]
 8019f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	6a1b      	ldr	r3, [r3, #32]
 8019fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	6a1b      	ldr	r3, [r3, #32]
 8019faa:	2210      	movs	r2, #16
 8019fac:	4393      	bics	r3, r2
 8019fae:	001a      	movs	r2, r3
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	699b      	ldr	r3, [r3, #24]
 8019fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019fba:	693b      	ldr	r3, [r7, #16]
 8019fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8019ff4 <TIM_TI2_ConfigInputStage+0x60>)
 8019fbe:	4013      	ands	r3, r2
 8019fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	031b      	lsls	r3, r3, #12
 8019fc6:	693a      	ldr	r2, [r7, #16]
 8019fc8:	4313      	orrs	r3, r2
 8019fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	22a0      	movs	r2, #160	@ 0xa0
 8019fd0:	4393      	bics	r3, r2
 8019fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8019fd4:	68bb      	ldr	r3, [r7, #8]
 8019fd6:	011b      	lsls	r3, r3, #4
 8019fd8:	697a      	ldr	r2, [r7, #20]
 8019fda:	4313      	orrs	r3, r2
 8019fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	693a      	ldr	r2, [r7, #16]
 8019fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	697a      	ldr	r2, [r7, #20]
 8019fe8:	621a      	str	r2, [r3, #32]
}
 8019fea:	46c0      	nop			@ (mov r8, r8)
 8019fec:	46bd      	mov	sp, r7
 8019fee:	b006      	add	sp, #24
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	46c0      	nop			@ (mov r8, r8)
 8019ff4:	ffff0fff 	.word	0xffff0fff

08019ff8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b084      	sub	sp, #16
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
 801a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	689b      	ldr	r3, [r3, #8]
 801a006:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	4a08      	ldr	r2, [pc, #32]	@ (801a02c <TIM_ITRx_SetConfig+0x34>)
 801a00c:	4013      	ands	r3, r2
 801a00e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801a010:	683a      	ldr	r2, [r7, #0]
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	4313      	orrs	r3, r2
 801a016:	2207      	movs	r2, #7
 801a018:	4313      	orrs	r3, r2
 801a01a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	68fa      	ldr	r2, [r7, #12]
 801a020:	609a      	str	r2, [r3, #8]
}
 801a022:	46c0      	nop			@ (mov r8, r8)
 801a024:	46bd      	mov	sp, r7
 801a026:	b004      	add	sp, #16
 801a028:	bd80      	pop	{r7, pc}
 801a02a:	46c0      	nop			@ (mov r8, r8)
 801a02c:	ffcfff8f 	.word	0xffcfff8f

0801a030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b086      	sub	sp, #24
 801a034:	af00      	add	r7, sp, #0
 801a036:	60f8      	str	r0, [r7, #12]
 801a038:	60b9      	str	r1, [r7, #8]
 801a03a:	607a      	str	r2, [r7, #4]
 801a03c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	689b      	ldr	r3, [r3, #8]
 801a042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a044:	697b      	ldr	r3, [r7, #20]
 801a046:	4a09      	ldr	r2, [pc, #36]	@ (801a06c <TIM_ETR_SetConfig+0x3c>)
 801a048:	4013      	ands	r3, r2
 801a04a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	021a      	lsls	r2, r3, #8
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	431a      	orrs	r2, r3
 801a054:	68bb      	ldr	r3, [r7, #8]
 801a056:	4313      	orrs	r3, r2
 801a058:	697a      	ldr	r2, [r7, #20]
 801a05a:	4313      	orrs	r3, r2
 801a05c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	697a      	ldr	r2, [r7, #20]
 801a062:	609a      	str	r2, [r3, #8]
}
 801a064:	46c0      	nop			@ (mov r8, r8)
 801a066:	46bd      	mov	sp, r7
 801a068:	b006      	add	sp, #24
 801a06a:	bd80      	pop	{r7, pc}
 801a06c:	ffff00ff 	.word	0xffff00ff

0801a070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b086      	sub	sp, #24
 801a074:	af00      	add	r7, sp, #0
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	60b9      	str	r1, [r7, #8]
 801a07a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a07c:	68bb      	ldr	r3, [r7, #8]
 801a07e:	221f      	movs	r2, #31
 801a080:	4013      	ands	r3, r2
 801a082:	2201      	movs	r2, #1
 801a084:	409a      	lsls	r2, r3
 801a086:	0013      	movs	r3, r2
 801a088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	6a1b      	ldr	r3, [r3, #32]
 801a08e:	697a      	ldr	r2, [r7, #20]
 801a090:	43d2      	mvns	r2, r2
 801a092:	401a      	ands	r2, r3
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	6a1a      	ldr	r2, [r3, #32]
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	211f      	movs	r1, #31
 801a0a0:	400b      	ands	r3, r1
 801a0a2:	6879      	ldr	r1, [r7, #4]
 801a0a4:	4099      	lsls	r1, r3
 801a0a6:	000b      	movs	r3, r1
 801a0a8:	431a      	orrs	r2, r3
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	621a      	str	r2, [r3, #32]
}
 801a0ae:	46c0      	nop			@ (mov r8, r8)
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	b006      	add	sp, #24
 801a0b4:	bd80      	pop	{r7, pc}
	...

0801a0b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b084      	sub	sp, #16
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	223c      	movs	r2, #60	@ 0x3c
 801a0c6:	5c9b      	ldrb	r3, [r3, r2]
 801a0c8:	2b01      	cmp	r3, #1
 801a0ca:	d101      	bne.n	801a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a0cc:	2302      	movs	r3, #2
 801a0ce:	e055      	b.n	801a17c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	223c      	movs	r2, #60	@ 0x3c
 801a0d4:	2101      	movs	r1, #1
 801a0d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	223d      	movs	r2, #61	@ 0x3d
 801a0dc:	2102      	movs	r1, #2
 801a0de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	689b      	ldr	r3, [r3, #8]
 801a0ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	4a23      	ldr	r2, [pc, #140]	@ (801a184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a0f6:	4293      	cmp	r3, r2
 801a0f8:	d108      	bne.n	801a10c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	4a22      	ldr	r2, [pc, #136]	@ (801a188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801a0fe:	4013      	ands	r3, r2
 801a100:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	68fa      	ldr	r2, [r7, #12]
 801a108:	4313      	orrs	r3, r2
 801a10a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	2270      	movs	r2, #112	@ 0x70
 801a110:	4393      	bics	r3, r2
 801a112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	68fa      	ldr	r2, [r7, #12]
 801a11a:	4313      	orrs	r3, r2
 801a11c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	68fa      	ldr	r2, [r7, #12]
 801a124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	4a16      	ldr	r2, [pc, #88]	@ (801a184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d00f      	beq.n	801a150 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	681a      	ldr	r2, [r3, #0]
 801a134:	2380      	movs	r3, #128	@ 0x80
 801a136:	05db      	lsls	r3, r3, #23
 801a138:	429a      	cmp	r2, r3
 801a13a:	d009      	beq.n	801a150 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	4a12      	ldr	r2, [pc, #72]	@ (801a18c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801a142:	4293      	cmp	r3, r2
 801a144:	d004      	beq.n	801a150 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	4a11      	ldr	r2, [pc, #68]	@ (801a190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801a14c:	4293      	cmp	r3, r2
 801a14e:	d10c      	bne.n	801a16a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	2280      	movs	r2, #128	@ 0x80
 801a154:	4393      	bics	r3, r2
 801a156:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	689b      	ldr	r3, [r3, #8]
 801a15c:	68ba      	ldr	r2, [r7, #8]
 801a15e:	4313      	orrs	r3, r2
 801a160:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	68ba      	ldr	r2, [r7, #8]
 801a168:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	223d      	movs	r2, #61	@ 0x3d
 801a16e:	2101      	movs	r1, #1
 801a170:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	223c      	movs	r2, #60	@ 0x3c
 801a176:	2100      	movs	r1, #0
 801a178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a17a:	2300      	movs	r3, #0
}
 801a17c:	0018      	movs	r0, r3
 801a17e:	46bd      	mov	sp, r7
 801a180:	b004      	add	sp, #16
 801a182:	bd80      	pop	{r7, pc}
 801a184:	40012c00 	.word	0x40012c00
 801a188:	ff0fffff 	.word	0xff0fffff
 801a18c:	40000400 	.word	0x40000400
 801a190:	40014000 	.word	0x40014000

0801a194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b084      	sub	sp, #16
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
 801a19c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801a19e:	2300      	movs	r3, #0
 801a1a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	223c      	movs	r2, #60	@ 0x3c
 801a1a6:	5c9b      	ldrb	r3, [r3, r2]
 801a1a8:	2b01      	cmp	r3, #1
 801a1aa:	d101      	bne.n	801a1b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801a1ac:	2302      	movs	r3, #2
 801a1ae:	e06f      	b.n	801a290 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	223c      	movs	r2, #60	@ 0x3c
 801a1b4:	2101      	movs	r1, #1
 801a1b6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	22ff      	movs	r2, #255	@ 0xff
 801a1bc:	4393      	bics	r3, r2
 801a1be:	001a      	movs	r2, r3
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	68db      	ldr	r3, [r3, #12]
 801a1c4:	4313      	orrs	r3, r2
 801a1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	4a33      	ldr	r2, [pc, #204]	@ (801a298 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 801a1cc:	401a      	ands	r2, r3
 801a1ce:	683b      	ldr	r3, [r7, #0]
 801a1d0:	689b      	ldr	r3, [r3, #8]
 801a1d2:	4313      	orrs	r3, r2
 801a1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	4a30      	ldr	r2, [pc, #192]	@ (801a29c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 801a1da:	401a      	ands	r2, r3
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	4313      	orrs	r3, r2
 801a1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	4a2e      	ldr	r2, [pc, #184]	@ (801a2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 801a1e8:	401a      	ands	r2, r3
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	4313      	orrs	r3, r2
 801a1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	4a2b      	ldr	r2, [pc, #172]	@ (801a2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801a1f6:	401a      	ands	r2, r3
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	691b      	ldr	r3, [r3, #16]
 801a1fc:	4313      	orrs	r3, r2
 801a1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	4a29      	ldr	r2, [pc, #164]	@ (801a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 801a204:	401a      	ands	r2, r3
 801a206:	683b      	ldr	r3, [r7, #0]
 801a208:	695b      	ldr	r3, [r3, #20]
 801a20a:	4313      	orrs	r3, r2
 801a20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	4a26      	ldr	r2, [pc, #152]	@ (801a2ac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 801a212:	401a      	ands	r2, r3
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a218:	4313      	orrs	r3, r2
 801a21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	4a24      	ldr	r2, [pc, #144]	@ (801a2b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801a220:	401a      	ands	r2, r3
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	699b      	ldr	r3, [r3, #24]
 801a226:	041b      	lsls	r3, r3, #16
 801a228:	4313      	orrs	r3, r2
 801a22a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	4a21      	ldr	r2, [pc, #132]	@ (801a2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 801a230:	401a      	ands	r2, r3
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	69db      	ldr	r3, [r3, #28]
 801a236:	4313      	orrs	r3, r2
 801a238:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a1e      	ldr	r2, [pc, #120]	@ (801a2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d11c      	bne.n	801a27e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	4a1d      	ldr	r2, [pc, #116]	@ (801a2bc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 801a248:	401a      	ands	r2, r3
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a24e:	051b      	lsls	r3, r3, #20
 801a250:	4313      	orrs	r3, r2
 801a252:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	4a1a      	ldr	r2, [pc, #104]	@ (801a2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 801a258:	401a      	ands	r2, r3
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	6a1b      	ldr	r3, [r3, #32]
 801a25e:	4313      	orrs	r3, r2
 801a260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	4a17      	ldr	r2, [pc, #92]	@ (801a2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 801a266:	401a      	ands	r2, r3
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a26c:	4313      	orrs	r3, r2
 801a26e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	4a15      	ldr	r2, [pc, #84]	@ (801a2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 801a274:	401a      	ands	r2, r3
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a27a:	4313      	orrs	r3, r2
 801a27c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	68fa      	ldr	r2, [r7, #12]
 801a284:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	223c      	movs	r2, #60	@ 0x3c
 801a28a:	2100      	movs	r1, #0
 801a28c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a28e:	2300      	movs	r3, #0
}
 801a290:	0018      	movs	r0, r3
 801a292:	46bd      	mov	sp, r7
 801a294:	b004      	add	sp, #16
 801a296:	bd80      	pop	{r7, pc}
 801a298:	fffffcff 	.word	0xfffffcff
 801a29c:	fffffbff 	.word	0xfffffbff
 801a2a0:	fffff7ff 	.word	0xfffff7ff
 801a2a4:	ffffefff 	.word	0xffffefff
 801a2a8:	ffffdfff 	.word	0xffffdfff
 801a2ac:	ffffbfff 	.word	0xffffbfff
 801a2b0:	fff0ffff 	.word	0xfff0ffff
 801a2b4:	efffffff 	.word	0xefffffff
 801a2b8:	40012c00 	.word	0x40012c00
 801a2bc:	ff0fffff 	.word	0xff0fffff
 801a2c0:	feffffff 	.word	0xfeffffff
 801a2c4:	fdffffff 	.word	0xfdffffff
 801a2c8:	dfffffff 	.word	0xdfffffff

0801a2cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b082      	sub	sp, #8
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d101      	bne.n	801a2de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a2da:	2301      	movs	r3, #1
 801a2dc:	e046      	b.n	801a36c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	2288      	movs	r2, #136	@ 0x88
 801a2e2:	589b      	ldr	r3, [r3, r2]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d107      	bne.n	801a2f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2284      	movs	r2, #132	@ 0x84
 801a2ec:	2100      	movs	r1, #0
 801a2ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	0018      	movs	r0, r3
 801a2f4:	f7f2 f800 	bl	800c2f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2288      	movs	r2, #136	@ 0x88
 801a2fc:	2124      	movs	r1, #36	@ 0x24
 801a2fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	681a      	ldr	r2, [r3, #0]
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	2101      	movs	r1, #1
 801a30c:	438a      	bics	r2, r1
 801a30e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a314:	2b00      	cmp	r3, #0
 801a316:	d003      	beq.n	801a320 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	0018      	movs	r0, r3
 801a31c:	f000 ff6a 	bl	801b1f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	0018      	movs	r0, r3
 801a324:	f000 fd94 	bl	801ae50 <UART_SetConfig>
 801a328:	0003      	movs	r3, r0
 801a32a:	2b01      	cmp	r3, #1
 801a32c:	d101      	bne.n	801a332 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 801a32e:	2301      	movs	r3, #1
 801a330:	e01c      	b.n	801a36c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	685a      	ldr	r2, [r3, #4]
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	490d      	ldr	r1, [pc, #52]	@ (801a374 <HAL_UART_Init+0xa8>)
 801a33e:	400a      	ands	r2, r1
 801a340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	689a      	ldr	r2, [r3, #8]
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	212a      	movs	r1, #42	@ 0x2a
 801a34e:	438a      	bics	r2, r1
 801a350:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	681a      	ldr	r2, [r3, #0]
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	2101      	movs	r1, #1
 801a35e:	430a      	orrs	r2, r1
 801a360:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	0018      	movs	r0, r3
 801a366:	f000 fff9 	bl	801b35c <UART_CheckIdleState>
 801a36a:	0003      	movs	r3, r0
}
 801a36c:	0018      	movs	r0, r3
 801a36e:	46bd      	mov	sp, r7
 801a370:	b002      	add	sp, #8
 801a372:	bd80      	pop	{r7, pc}
 801a374:	ffffb7ff 	.word	0xffffb7ff

0801a378 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b082      	sub	sp, #8
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d101      	bne.n	801a38a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801a386:	2301      	movs	r3, #1
 801a388:	e032      	b.n	801a3f0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2288      	movs	r2, #136	@ 0x88
 801a38e:	2124      	movs	r1, #36	@ 0x24
 801a390:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	681a      	ldr	r2, [r3, #0]
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	2101      	movs	r1, #1
 801a39e:	438a      	bics	r2, r1
 801a3a0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	0018      	movs	r0, r3
 801a3be:	f7f2 f909 	bl	800c5d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2290      	movs	r2, #144	@ 0x90
 801a3c6:	2100      	movs	r1, #0
 801a3c8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2288      	movs	r2, #136	@ 0x88
 801a3ce:	2100      	movs	r1, #0
 801a3d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	228c      	movs	r2, #140	@ 0x8c
 801a3d6:	2100      	movs	r1, #0
 801a3d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	2200      	movs	r2, #0
 801a3de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	2284      	movs	r2, #132	@ 0x84
 801a3ea:	2100      	movs	r1, #0
 801a3ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a3ee:	2300      	movs	r3, #0
}
 801a3f0:	0018      	movs	r0, r3
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	b002      	add	sp, #8
 801a3f6:	bd80      	pop	{r7, pc}

0801a3f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b088      	sub	sp, #32
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	60f8      	str	r0, [r7, #12]
 801a400:	60b9      	str	r1, [r7, #8]
 801a402:	1dbb      	adds	r3, r7, #6
 801a404:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	2288      	movs	r2, #136	@ 0x88
 801a40a:	589b      	ldr	r3, [r3, r2]
 801a40c:	2b20      	cmp	r3, #32
 801a40e:	d000      	beq.n	801a412 <HAL_UART_Transmit_DMA+0x1a>
 801a410:	e079      	b.n	801a506 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d003      	beq.n	801a420 <HAL_UART_Transmit_DMA+0x28>
 801a418:	1dbb      	adds	r3, r7, #6
 801a41a:	881b      	ldrh	r3, [r3, #0]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d101      	bne.n	801a424 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 801a420:	2301      	movs	r3, #1
 801a422:	e071      	b.n	801a508 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	689a      	ldr	r2, [r3, #8]
 801a428:	2380      	movs	r3, #128	@ 0x80
 801a42a:	015b      	lsls	r3, r3, #5
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d109      	bne.n	801a444 <HAL_UART_Transmit_DMA+0x4c>
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	691b      	ldr	r3, [r3, #16]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d105      	bne.n	801a444 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	2201      	movs	r2, #1
 801a43c:	4013      	ands	r3, r2
 801a43e:	d001      	beq.n	801a444 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 801a440:	2301      	movs	r3, #1
 801a442:	e061      	b.n	801a508 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	68ba      	ldr	r2, [r7, #8]
 801a448:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	1dba      	adds	r2, r7, #6
 801a44e:	2154      	movs	r1, #84	@ 0x54
 801a450:	8812      	ldrh	r2, [r2, #0]
 801a452:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	1dba      	adds	r2, r7, #6
 801a458:	2156      	movs	r1, #86	@ 0x56
 801a45a:	8812      	ldrh	r2, [r2, #0]
 801a45c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	2290      	movs	r2, #144	@ 0x90
 801a462:	2100      	movs	r1, #0
 801a464:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	2288      	movs	r2, #136	@ 0x88
 801a46a:	2121      	movs	r1, #33	@ 0x21
 801a46c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a472:	2b00      	cmp	r3, #0
 801a474:	d028      	beq.n	801a4c8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a47a:	4a25      	ldr	r2, [pc, #148]	@ (801a510 <HAL_UART_Transmit_DMA+0x118>)
 801a47c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a482:	4a24      	ldr	r2, [pc, #144]	@ (801a514 <HAL_UART_Transmit_DMA+0x11c>)
 801a484:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a48a:	4a23      	ldr	r2, [pc, #140]	@ (801a518 <HAL_UART_Transmit_DMA+0x120>)
 801a48c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a492:	2200      	movs	r2, #0
 801a494:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a49e:	0019      	movs	r1, r3
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	3328      	adds	r3, #40	@ 0x28
 801a4a6:	001a      	movs	r2, r3
 801a4a8:	1dbb      	adds	r3, r7, #6
 801a4aa:	881b      	ldrh	r3, [r3, #0]
 801a4ac:	f7f9 f998 	bl	80137e0 <HAL_DMA_Start_IT>
 801a4b0:	1e03      	subs	r3, r0, #0
 801a4b2:	d009      	beq.n	801a4c8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	2290      	movs	r2, #144	@ 0x90
 801a4b8:	2110      	movs	r1, #16
 801a4ba:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2288      	movs	r2, #136	@ 0x88
 801a4c0:	2120      	movs	r1, #32
 801a4c2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	e01f      	b.n	801a508 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	2240      	movs	r2, #64	@ 0x40
 801a4ce:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a4d0:	f3ef 8310 	mrs	r3, PRIMASK
 801a4d4:	613b      	str	r3, [r7, #16]
  return(result);
 801a4d6:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a4d8:	61fb      	str	r3, [r7, #28]
 801a4da:	2301      	movs	r3, #1
 801a4dc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4de:	697b      	ldr	r3, [r7, #20]
 801a4e0:	f383 8810 	msr	PRIMASK, r3
}
 801a4e4:	46c0      	nop			@ (mov r8, r8)
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	689a      	ldr	r2, [r3, #8]
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	2180      	movs	r1, #128	@ 0x80
 801a4f2:	430a      	orrs	r2, r1
 801a4f4:	609a      	str	r2, [r3, #8]
 801a4f6:	69fb      	ldr	r3, [r7, #28]
 801a4f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4fa:	69bb      	ldr	r3, [r7, #24]
 801a4fc:	f383 8810 	msr	PRIMASK, r3
}
 801a500:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801a502:	2300      	movs	r3, #0
 801a504:	e000      	b.n	801a508 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 801a506:	2302      	movs	r3, #2
  }
}
 801a508:	0018      	movs	r0, r3
 801a50a:	46bd      	mov	sp, r7
 801a50c:	b008      	add	sp, #32
 801a50e:	bd80      	pop	{r7, pc}
 801a510:	0801b829 	.word	0x0801b829
 801a514:	0801b8c1 	.word	0x0801b8c1
 801a518:	0801ba53 	.word	0x0801ba53

0801a51c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b088      	sub	sp, #32
 801a520:	af00      	add	r7, sp, #0
 801a522:	60f8      	str	r0, [r7, #12]
 801a524:	60b9      	str	r1, [r7, #8]
 801a526:	1dbb      	adds	r3, r7, #6
 801a528:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	228c      	movs	r2, #140	@ 0x8c
 801a52e:	589b      	ldr	r3, [r3, r2]
 801a530:	2b20      	cmp	r3, #32
 801a532:	d154      	bne.n	801a5de <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 801a534:	68bb      	ldr	r3, [r7, #8]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d003      	beq.n	801a542 <HAL_UART_Receive_DMA+0x26>
 801a53a:	1dbb      	adds	r3, r7, #6
 801a53c:	881b      	ldrh	r3, [r3, #0]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d101      	bne.n	801a546 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801a542:	2301      	movs	r3, #1
 801a544:	e04c      	b.n	801a5e0 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	689a      	ldr	r2, [r3, #8]
 801a54a:	2380      	movs	r3, #128	@ 0x80
 801a54c:	015b      	lsls	r3, r3, #5
 801a54e:	429a      	cmp	r2, r3
 801a550:	d109      	bne.n	801a566 <HAL_UART_Receive_DMA+0x4a>
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	691b      	ldr	r3, [r3, #16]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d105      	bne.n	801a566 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801a55a:	68bb      	ldr	r3, [r7, #8]
 801a55c:	2201      	movs	r2, #1
 801a55e:	4013      	ands	r3, r2
 801a560:	d001      	beq.n	801a566 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801a562:	2301      	movs	r3, #1
 801a564:	e03c      	b.n	801a5e0 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	2200      	movs	r2, #0
 801a56a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	4a1d      	ldr	r2, [pc, #116]	@ (801a5e8 <HAL_UART_Receive_DMA+0xcc>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d02a      	beq.n	801a5cc <HAL_UART_Receive_DMA+0xb0>
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4a1c      	ldr	r2, [pc, #112]	@ (801a5ec <HAL_UART_Receive_DMA+0xd0>)
 801a57c:	4293      	cmp	r3, r2
 801a57e:	d025      	beq.n	801a5cc <HAL_UART_Receive_DMA+0xb0>
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	4a1a      	ldr	r2, [pc, #104]	@ (801a5f0 <HAL_UART_Receive_DMA+0xd4>)
 801a586:	4293      	cmp	r3, r2
 801a588:	d020      	beq.n	801a5cc <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	685a      	ldr	r2, [r3, #4]
 801a590:	2380      	movs	r3, #128	@ 0x80
 801a592:	041b      	lsls	r3, r3, #16
 801a594:	4013      	ands	r3, r2
 801a596:	d019      	beq.n	801a5cc <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a598:	f3ef 8310 	mrs	r3, PRIMASK
 801a59c:	613b      	str	r3, [r7, #16]
  return(result);
 801a59e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a5a0:	61fb      	str	r3, [r7, #28]
 801a5a2:	2301      	movs	r3, #1
 801a5a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5a6:	697b      	ldr	r3, [r7, #20]
 801a5a8:	f383 8810 	msr	PRIMASK, r3
}
 801a5ac:	46c0      	nop			@ (mov r8, r8)
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	681a      	ldr	r2, [r3, #0]
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	2180      	movs	r1, #128	@ 0x80
 801a5ba:	04c9      	lsls	r1, r1, #19
 801a5bc:	430a      	orrs	r2, r1
 801a5be:	601a      	str	r2, [r3, #0]
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5c4:	69bb      	ldr	r3, [r7, #24]
 801a5c6:	f383 8810 	msr	PRIMASK, r3
}
 801a5ca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801a5cc:	1dbb      	adds	r3, r7, #6
 801a5ce:	881a      	ldrh	r2, [r3, #0]
 801a5d0:	68b9      	ldr	r1, [r7, #8]
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	0018      	movs	r0, r3
 801a5d6:	f000 ffdb 	bl	801b590 <UART_Start_Receive_DMA>
 801a5da:	0003      	movs	r3, r0
 801a5dc:	e000      	b.n	801a5e0 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 801a5de:	2302      	movs	r3, #2
  }
}
 801a5e0:	0018      	movs	r0, r3
 801a5e2:	46bd      	mov	sp, r7
 801a5e4:	b008      	add	sp, #32
 801a5e6:	bd80      	pop	{r7, pc}
 801a5e8:	40008000 	.word	0x40008000
 801a5ec:	40008400 	.word	0x40008400
 801a5f0:	40008c00 	.word	0x40008c00

0801a5f4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b092      	sub	sp, #72	@ 0x48
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a5fc:	f3ef 8310 	mrs	r3, PRIMASK
 801a600:	623b      	str	r3, [r7, #32]
  return(result);
 801a602:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801a604:	647b      	str	r3, [r7, #68]	@ 0x44
 801a606:	2301      	movs	r3, #1
 801a608:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a60c:	f383 8810 	msr	PRIMASK, r3
}
 801a610:	46c0      	nop			@ (mov r8, r8)
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	681a      	ldr	r2, [r3, #0]
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	494d      	ldr	r1, [pc, #308]	@ (801a754 <HAL_UART_AbortReceive+0x160>)
 801a61e:	400a      	ands	r2, r1
 801a620:	601a      	str	r2, [r3, #0]
 801a622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a624:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a628:	f383 8810 	msr	PRIMASK, r3
}
 801a62c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a62e:	f3ef 8310 	mrs	r3, PRIMASK
 801a632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801a634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801a636:	643b      	str	r3, [r7, #64]	@ 0x40
 801a638:	2301      	movs	r3, #1
 801a63a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a63e:	f383 8810 	msr	PRIMASK, r3
}
 801a642:	46c0      	nop			@ (mov r8, r8)
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	689a      	ldr	r2, [r3, #8]
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	4942      	ldr	r1, [pc, #264]	@ (801a758 <HAL_UART_AbortReceive+0x164>)
 801a650:	400a      	ands	r2, r1
 801a652:	609a      	str	r2, [r3, #8]
 801a654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a656:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a65a:	f383 8810 	msr	PRIMASK, r3
}
 801a65e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a664:	2b01      	cmp	r3, #1
 801a666:	d118      	bne.n	801a69a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a668:	f3ef 8310 	mrs	r3, PRIMASK
 801a66c:	617b      	str	r3, [r7, #20]
  return(result);
 801a66e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a672:	2301      	movs	r3, #1
 801a674:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a676:	69bb      	ldr	r3, [r7, #24]
 801a678:	f383 8810 	msr	PRIMASK, r3
}
 801a67c:	46c0      	nop			@ (mov r8, r8)
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	681a      	ldr	r2, [r3, #0]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	2110      	movs	r1, #16
 801a68a:	438a      	bics	r2, r1
 801a68c:	601a      	str	r2, [r3, #0]
 801a68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a690:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a692:	69fb      	ldr	r3, [r7, #28]
 801a694:	f383 8810 	msr	PRIMASK, r3
}
 801a698:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	689b      	ldr	r3, [r3, #8]
 801a6a0:	2240      	movs	r2, #64	@ 0x40
 801a6a2:	4013      	ands	r3, r2
 801a6a4:	2b40      	cmp	r3, #64	@ 0x40
 801a6a6:	d139      	bne.n	801a71c <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a6a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a6ac:	60bb      	str	r3, [r7, #8]
  return(result);
 801a6ae:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a6b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a6b2:	2301      	movs	r3, #1
 801a6b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	f383 8810 	msr	PRIMASK, r3
}
 801a6bc:	46c0      	nop			@ (mov r8, r8)
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	689a      	ldr	r2, [r3, #8]
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	2140      	movs	r1, #64	@ 0x40
 801a6ca:	438a      	bics	r2, r1
 801a6cc:	609a      	str	r2, [r3, #8]
 801a6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	f383 8810 	msr	PRIMASK, r3
}
 801a6d8:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	2280      	movs	r2, #128	@ 0x80
 801a6de:	589b      	ldr	r3, [r3, r2]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d01b      	beq.n	801a71c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	2280      	movs	r2, #128	@ 0x80
 801a6e8:	589b      	ldr	r3, [r3, r2]
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	2280      	movs	r2, #128	@ 0x80
 801a6f2:	589b      	ldr	r3, [r3, r2]
 801a6f4:	0018      	movs	r0, r3
 801a6f6:	f7f9 f8f9 	bl	80138ec <HAL_DMA_Abort>
 801a6fa:	1e03      	subs	r3, r0, #0
 801a6fc:	d00e      	beq.n	801a71c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	2280      	movs	r2, #128	@ 0x80
 801a702:	589b      	ldr	r3, [r3, r2]
 801a704:	0018      	movs	r0, r3
 801a706:	f7f9 fa89 	bl	8013c1c <HAL_DMA_GetError>
 801a70a:	0003      	movs	r3, r0
 801a70c:	2b20      	cmp	r3, #32
 801a70e:	d105      	bne.n	801a71c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	2290      	movs	r2, #144	@ 0x90
 801a714:	2110      	movs	r1, #16
 801a716:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801a718:	2303      	movs	r3, #3
 801a71a:	e017      	b.n	801a74c <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	225e      	movs	r2, #94	@ 0x5e
 801a720:	2100      	movs	r1, #0
 801a722:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	220f      	movs	r2, #15
 801a72a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	699a      	ldr	r2, [r3, #24]
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	2108      	movs	r1, #8
 801a738:	430a      	orrs	r2, r1
 801a73a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	228c      	movs	r2, #140	@ 0x8c
 801a740:	2120      	movs	r1, #32
 801a742:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	2200      	movs	r2, #0
 801a748:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 801a74a:	2300      	movs	r3, #0
}
 801a74c:	0018      	movs	r0, r3
 801a74e:	46bd      	mov	sp, r7
 801a750:	b012      	add	sp, #72	@ 0x48
 801a752:	bd80      	pop	{r7, pc}
 801a754:	fffffedf 	.word	0xfffffedf
 801a758:	effffffe 	.word	0xeffffffe

0801a75c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a75c:	b5b0      	push	{r4, r5, r7, lr}
 801a75e:	b0aa      	sub	sp, #168	@ 0xa8
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	69db      	ldr	r3, [r3, #28]
 801a76a:	22a4      	movs	r2, #164	@ 0xa4
 801a76c:	18b9      	adds	r1, r7, r2
 801a76e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	20a0      	movs	r0, #160	@ 0xa0
 801a778:	1839      	adds	r1, r7, r0
 801a77a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	689b      	ldr	r3, [r3, #8]
 801a782:	249c      	movs	r4, #156	@ 0x9c
 801a784:	1939      	adds	r1, r7, r4
 801a786:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801a788:	0011      	movs	r1, r2
 801a78a:	18bb      	adds	r3, r7, r2
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	4aa2      	ldr	r2, [pc, #648]	@ (801aa18 <HAL_UART_IRQHandler+0x2bc>)
 801a790:	4013      	ands	r3, r2
 801a792:	2298      	movs	r2, #152	@ 0x98
 801a794:	18bd      	adds	r5, r7, r2
 801a796:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 801a798:	18bb      	adds	r3, r7, r2
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d11a      	bne.n	801a7d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a7a0:	187b      	adds	r3, r7, r1
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	2220      	movs	r2, #32
 801a7a6:	4013      	ands	r3, r2
 801a7a8:	d015      	beq.n	801a7d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a7aa:	183b      	adds	r3, r7, r0
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	2220      	movs	r2, #32
 801a7b0:	4013      	ands	r3, r2
 801a7b2:	d105      	bne.n	801a7c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a7b4:	193b      	adds	r3, r7, r4
 801a7b6:	681a      	ldr	r2, [r3, #0]
 801a7b8:	2380      	movs	r3, #128	@ 0x80
 801a7ba:	055b      	lsls	r3, r3, #21
 801a7bc:	4013      	ands	r3, r2
 801a7be:	d00a      	beq.n	801a7d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d100      	bne.n	801a7ca <HAL_UART_IRQHandler+0x6e>
 801a7c8:	e2fb      	b.n	801adc2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a7ce:	687a      	ldr	r2, [r7, #4]
 801a7d0:	0010      	movs	r0, r2
 801a7d2:	4798      	blx	r3
      }
      return;
 801a7d4:	e2f5      	b.n	801adc2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801a7d6:	2398      	movs	r3, #152	@ 0x98
 801a7d8:	18fb      	adds	r3, r7, r3
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d100      	bne.n	801a7e2 <HAL_UART_IRQHandler+0x86>
 801a7e0:	e122      	b.n	801aa28 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801a7e2:	239c      	movs	r3, #156	@ 0x9c
 801a7e4:	18fb      	adds	r3, r7, r3
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	4a8c      	ldr	r2, [pc, #560]	@ (801aa1c <HAL_UART_IRQHandler+0x2c0>)
 801a7ea:	4013      	ands	r3, r2
 801a7ec:	d106      	bne.n	801a7fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801a7ee:	23a0      	movs	r3, #160	@ 0xa0
 801a7f0:	18fb      	adds	r3, r7, r3
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	4a8a      	ldr	r2, [pc, #552]	@ (801aa20 <HAL_UART_IRQHandler+0x2c4>)
 801a7f6:	4013      	ands	r3, r2
 801a7f8:	d100      	bne.n	801a7fc <HAL_UART_IRQHandler+0xa0>
 801a7fa:	e115      	b.n	801aa28 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a7fc:	23a4      	movs	r3, #164	@ 0xa4
 801a7fe:	18fb      	adds	r3, r7, r3
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	2201      	movs	r2, #1
 801a804:	4013      	ands	r3, r2
 801a806:	d012      	beq.n	801a82e <HAL_UART_IRQHandler+0xd2>
 801a808:	23a0      	movs	r3, #160	@ 0xa0
 801a80a:	18fb      	adds	r3, r7, r3
 801a80c:	681a      	ldr	r2, [r3, #0]
 801a80e:	2380      	movs	r3, #128	@ 0x80
 801a810:	005b      	lsls	r3, r3, #1
 801a812:	4013      	ands	r3, r2
 801a814:	d00b      	beq.n	801a82e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	2201      	movs	r2, #1
 801a81c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	2290      	movs	r2, #144	@ 0x90
 801a822:	589b      	ldr	r3, [r3, r2]
 801a824:	2201      	movs	r2, #1
 801a826:	431a      	orrs	r2, r3
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2190      	movs	r1, #144	@ 0x90
 801a82c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a82e:	23a4      	movs	r3, #164	@ 0xa4
 801a830:	18fb      	adds	r3, r7, r3
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	2202      	movs	r2, #2
 801a836:	4013      	ands	r3, r2
 801a838:	d011      	beq.n	801a85e <HAL_UART_IRQHandler+0x102>
 801a83a:	239c      	movs	r3, #156	@ 0x9c
 801a83c:	18fb      	adds	r3, r7, r3
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2201      	movs	r2, #1
 801a842:	4013      	ands	r3, r2
 801a844:	d00b      	beq.n	801a85e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	2202      	movs	r2, #2
 801a84c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2290      	movs	r2, #144	@ 0x90
 801a852:	589b      	ldr	r3, [r3, r2]
 801a854:	2204      	movs	r2, #4
 801a856:	431a      	orrs	r2, r3
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	2190      	movs	r1, #144	@ 0x90
 801a85c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a85e:	23a4      	movs	r3, #164	@ 0xa4
 801a860:	18fb      	adds	r3, r7, r3
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	2204      	movs	r2, #4
 801a866:	4013      	ands	r3, r2
 801a868:	d011      	beq.n	801a88e <HAL_UART_IRQHandler+0x132>
 801a86a:	239c      	movs	r3, #156	@ 0x9c
 801a86c:	18fb      	adds	r3, r7, r3
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	2201      	movs	r2, #1
 801a872:	4013      	ands	r3, r2
 801a874:	d00b      	beq.n	801a88e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	2204      	movs	r2, #4
 801a87c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	2290      	movs	r2, #144	@ 0x90
 801a882:	589b      	ldr	r3, [r3, r2]
 801a884:	2202      	movs	r2, #2
 801a886:	431a      	orrs	r2, r3
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2190      	movs	r1, #144	@ 0x90
 801a88c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801a88e:	23a4      	movs	r3, #164	@ 0xa4
 801a890:	18fb      	adds	r3, r7, r3
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	2208      	movs	r2, #8
 801a896:	4013      	ands	r3, r2
 801a898:	d017      	beq.n	801a8ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a89a:	23a0      	movs	r3, #160	@ 0xa0
 801a89c:	18fb      	adds	r3, r7, r3
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	2220      	movs	r2, #32
 801a8a2:	4013      	ands	r3, r2
 801a8a4:	d105      	bne.n	801a8b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801a8a6:	239c      	movs	r3, #156	@ 0x9c
 801a8a8:	18fb      	adds	r3, r7, r3
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4a5b      	ldr	r2, [pc, #364]	@ (801aa1c <HAL_UART_IRQHandler+0x2c0>)
 801a8ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a8b0:	d00b      	beq.n	801a8ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2208      	movs	r2, #8
 801a8b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2290      	movs	r2, #144	@ 0x90
 801a8be:	589b      	ldr	r3, [r3, r2]
 801a8c0:	2208      	movs	r2, #8
 801a8c2:	431a      	orrs	r2, r3
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2190      	movs	r1, #144	@ 0x90
 801a8c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801a8ca:	23a4      	movs	r3, #164	@ 0xa4
 801a8cc:	18fb      	adds	r3, r7, r3
 801a8ce:	681a      	ldr	r2, [r3, #0]
 801a8d0:	2380      	movs	r3, #128	@ 0x80
 801a8d2:	011b      	lsls	r3, r3, #4
 801a8d4:	4013      	ands	r3, r2
 801a8d6:	d013      	beq.n	801a900 <HAL_UART_IRQHandler+0x1a4>
 801a8d8:	23a0      	movs	r3, #160	@ 0xa0
 801a8da:	18fb      	adds	r3, r7, r3
 801a8dc:	681a      	ldr	r2, [r3, #0]
 801a8de:	2380      	movs	r3, #128	@ 0x80
 801a8e0:	04db      	lsls	r3, r3, #19
 801a8e2:	4013      	ands	r3, r2
 801a8e4:	d00c      	beq.n	801a900 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	2280      	movs	r2, #128	@ 0x80
 801a8ec:	0112      	lsls	r2, r2, #4
 801a8ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2290      	movs	r2, #144	@ 0x90
 801a8f4:	589b      	ldr	r3, [r3, r2]
 801a8f6:	2220      	movs	r2, #32
 801a8f8:	431a      	orrs	r2, r3
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	2190      	movs	r1, #144	@ 0x90
 801a8fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	2290      	movs	r2, #144	@ 0x90
 801a904:	589b      	ldr	r3, [r3, r2]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d100      	bne.n	801a90c <HAL_UART_IRQHandler+0x1b0>
 801a90a:	e25c      	b.n	801adc6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a90c:	23a4      	movs	r3, #164	@ 0xa4
 801a90e:	18fb      	adds	r3, r7, r3
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	2220      	movs	r2, #32
 801a914:	4013      	ands	r3, r2
 801a916:	d015      	beq.n	801a944 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a918:	23a0      	movs	r3, #160	@ 0xa0
 801a91a:	18fb      	adds	r3, r7, r3
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	2220      	movs	r2, #32
 801a920:	4013      	ands	r3, r2
 801a922:	d106      	bne.n	801a932 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a924:	239c      	movs	r3, #156	@ 0x9c
 801a926:	18fb      	adds	r3, r7, r3
 801a928:	681a      	ldr	r2, [r3, #0]
 801a92a:	2380      	movs	r3, #128	@ 0x80
 801a92c:	055b      	lsls	r3, r3, #21
 801a92e:	4013      	ands	r3, r2
 801a930:	d008      	beq.n	801a944 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a936:	2b00      	cmp	r3, #0
 801a938:	d004      	beq.n	801a944 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a93e:	687a      	ldr	r2, [r7, #4]
 801a940:	0010      	movs	r0, r2
 801a942:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2290      	movs	r2, #144	@ 0x90
 801a948:	589b      	ldr	r3, [r3, r2]
 801a94a:	2194      	movs	r1, #148	@ 0x94
 801a94c:	187a      	adds	r2, r7, r1
 801a94e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	689b      	ldr	r3, [r3, #8]
 801a956:	2240      	movs	r2, #64	@ 0x40
 801a958:	4013      	ands	r3, r2
 801a95a:	2b40      	cmp	r3, #64	@ 0x40
 801a95c:	d004      	beq.n	801a968 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801a95e:	187b      	adds	r3, r7, r1
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	2228      	movs	r2, #40	@ 0x28
 801a964:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a966:	d04c      	beq.n	801aa02 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	0018      	movs	r0, r3
 801a96c:	f000 fef6 	bl	801b75c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	689b      	ldr	r3, [r3, #8]
 801a976:	2240      	movs	r2, #64	@ 0x40
 801a978:	4013      	ands	r3, r2
 801a97a:	2b40      	cmp	r3, #64	@ 0x40
 801a97c:	d13c      	bne.n	801a9f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a97e:	f3ef 8310 	mrs	r3, PRIMASK
 801a982:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801a984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a986:	2090      	movs	r0, #144	@ 0x90
 801a988:	183a      	adds	r2, r7, r0
 801a98a:	6013      	str	r3, [r2, #0]
 801a98c:	2301      	movs	r3, #1
 801a98e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a992:	f383 8810 	msr	PRIMASK, r3
}
 801a996:	46c0      	nop			@ (mov r8, r8)
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	689a      	ldr	r2, [r3, #8]
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	2140      	movs	r1, #64	@ 0x40
 801a9a4:	438a      	bics	r2, r1
 801a9a6:	609a      	str	r2, [r3, #8]
 801a9a8:	183b      	adds	r3, r7, r0
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a9b0:	f383 8810 	msr	PRIMASK, r3
}
 801a9b4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	2280      	movs	r2, #128	@ 0x80
 801a9ba:	589b      	ldr	r3, [r3, r2]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d016      	beq.n	801a9ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2280      	movs	r2, #128	@ 0x80
 801a9c4:	589b      	ldr	r3, [r3, r2]
 801a9c6:	4a17      	ldr	r2, [pc, #92]	@ (801aa24 <HAL_UART_IRQHandler+0x2c8>)
 801a9c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2280      	movs	r2, #128	@ 0x80
 801a9ce:	589b      	ldr	r3, [r3, r2]
 801a9d0:	0018      	movs	r0, r3
 801a9d2:	f7f8 ffeb 	bl	80139ac <HAL_DMA_Abort_IT>
 801a9d6:	1e03      	subs	r3, r0, #0
 801a9d8:	d01c      	beq.n	801aa14 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	2280      	movs	r2, #128	@ 0x80
 801a9de:	589b      	ldr	r3, [r3, r2]
 801a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a9e2:	687a      	ldr	r2, [r7, #4]
 801a9e4:	2180      	movs	r1, #128	@ 0x80
 801a9e6:	5852      	ldr	r2, [r2, r1]
 801a9e8:	0010      	movs	r0, r2
 801a9ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a9ec:	e012      	b.n	801aa14 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	0018      	movs	r0, r3
 801a9f2:	f000 fa19 	bl	801ae28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a9f6:	e00d      	b.n	801aa14 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	0018      	movs	r0, r3
 801a9fc:	f000 fa14 	bl	801ae28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801aa00:	e008      	b.n	801aa14 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	0018      	movs	r0, r3
 801aa06:	f000 fa0f 	bl	801ae28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	2290      	movs	r2, #144	@ 0x90
 801aa0e:	2100      	movs	r1, #0
 801aa10:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801aa12:	e1d8      	b.n	801adc6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801aa14:	46c0      	nop			@ (mov r8, r8)
    return;
 801aa16:	e1d6      	b.n	801adc6 <HAL_UART_IRQHandler+0x66a>
 801aa18:	0000080f 	.word	0x0000080f
 801aa1c:	10000001 	.word	0x10000001
 801aa20:	04000120 	.word	0x04000120
 801aa24:	0801bad9 	.word	0x0801bad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa2c:	2b01      	cmp	r3, #1
 801aa2e:	d000      	beq.n	801aa32 <HAL_UART_IRQHandler+0x2d6>
 801aa30:	e15d      	b.n	801acee <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801aa32:	23a4      	movs	r3, #164	@ 0xa4
 801aa34:	18fb      	adds	r3, r7, r3
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2210      	movs	r2, #16
 801aa3a:	4013      	ands	r3, r2
 801aa3c:	d100      	bne.n	801aa40 <HAL_UART_IRQHandler+0x2e4>
 801aa3e:	e156      	b.n	801acee <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801aa40:	23a0      	movs	r3, #160	@ 0xa0
 801aa42:	18fb      	adds	r3, r7, r3
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	2210      	movs	r2, #16
 801aa48:	4013      	ands	r3, r2
 801aa4a:	d100      	bne.n	801aa4e <HAL_UART_IRQHandler+0x2f2>
 801aa4c:	e14f      	b.n	801acee <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	2210      	movs	r2, #16
 801aa54:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	689b      	ldr	r3, [r3, #8]
 801aa5c:	2240      	movs	r2, #64	@ 0x40
 801aa5e:	4013      	ands	r3, r2
 801aa60:	2b40      	cmp	r3, #64	@ 0x40
 801aa62:	d000      	beq.n	801aa66 <HAL_UART_IRQHandler+0x30a>
 801aa64:	e0c3      	b.n	801abee <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	2280      	movs	r2, #128	@ 0x80
 801aa6a:	589b      	ldr	r3, [r3, r2]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	685a      	ldr	r2, [r3, #4]
 801aa70:	217e      	movs	r1, #126	@ 0x7e
 801aa72:	187b      	adds	r3, r7, r1
 801aa74:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801aa76:	187b      	adds	r3, r7, r1
 801aa78:	881b      	ldrh	r3, [r3, #0]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d100      	bne.n	801aa80 <HAL_UART_IRQHandler+0x324>
 801aa7e:	e097      	b.n	801abb0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	225c      	movs	r2, #92	@ 0x5c
 801aa84:	5a9b      	ldrh	r3, [r3, r2]
 801aa86:	187a      	adds	r2, r7, r1
 801aa88:	8812      	ldrh	r2, [r2, #0]
 801aa8a:	429a      	cmp	r2, r3
 801aa8c:	d300      	bcc.n	801aa90 <HAL_UART_IRQHandler+0x334>
 801aa8e:	e08f      	b.n	801abb0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	187a      	adds	r2, r7, r1
 801aa94:	215e      	movs	r1, #94	@ 0x5e
 801aa96:	8812      	ldrh	r2, [r2, #0]
 801aa98:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2280      	movs	r2, #128	@ 0x80
 801aa9e:	589b      	ldr	r3, [r3, r2]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	2220      	movs	r2, #32
 801aaa6:	4013      	ands	r3, r2
 801aaa8:	d170      	bne.n	801ab8c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aaaa:	f3ef 8310 	mrs	r3, PRIMASK
 801aaae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801aab2:	67bb      	str	r3, [r7, #120]	@ 0x78
 801aab4:	2301      	movs	r3, #1
 801aab6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aaba:	f383 8810 	msr	PRIMASK, r3
}
 801aabe:	46c0      	nop			@ (mov r8, r8)
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	681a      	ldr	r2, [r3, #0]
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	49c4      	ldr	r1, [pc, #784]	@ (801addc <HAL_UART_IRQHandler+0x680>)
 801aacc:	400a      	ands	r2, r1
 801aace:	601a      	str	r2, [r3, #0]
 801aad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aad6:	f383 8810 	msr	PRIMASK, r3
}
 801aada:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aadc:	f3ef 8310 	mrs	r3, PRIMASK
 801aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801aae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801aae4:	677b      	str	r3, [r7, #116]	@ 0x74
 801aae6:	2301      	movs	r3, #1
 801aae8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aaea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aaec:	f383 8810 	msr	PRIMASK, r3
}
 801aaf0:	46c0      	nop			@ (mov r8, r8)
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	689a      	ldr	r2, [r3, #8]
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	2101      	movs	r1, #1
 801aafe:	438a      	bics	r2, r1
 801ab00:	609a      	str	r2, [r3, #8]
 801ab02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ab04:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab08:	f383 8810 	msr	PRIMASK, r3
}
 801ab0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ab0e:	f3ef 8310 	mrs	r3, PRIMASK
 801ab12:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801ab14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ab16:	673b      	str	r3, [r7, #112]	@ 0x70
 801ab18:	2301      	movs	r3, #1
 801ab1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ab1e:	f383 8810 	msr	PRIMASK, r3
}
 801ab22:	46c0      	nop			@ (mov r8, r8)
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	689a      	ldr	r2, [r3, #8]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	2140      	movs	r1, #64	@ 0x40
 801ab30:	438a      	bics	r2, r1
 801ab32:	609a      	str	r2, [r3, #8]
 801ab34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab36:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab3a:	f383 8810 	msr	PRIMASK, r3
}
 801ab3e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	228c      	movs	r2, #140	@ 0x8c
 801ab44:	2120      	movs	r1, #32
 801ab46:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ab4e:	f3ef 8310 	mrs	r3, PRIMASK
 801ab52:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801ab54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ab56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ab58:	2301      	movs	r3, #1
 801ab5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ab5e:	f383 8810 	msr	PRIMASK, r3
}
 801ab62:	46c0      	nop			@ (mov r8, r8)
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	681a      	ldr	r2, [r3, #0]
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	2110      	movs	r1, #16
 801ab70:	438a      	bics	r2, r1
 801ab72:	601a      	str	r2, [r3, #0]
 801ab74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ab76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ab7a:	f383 8810 	msr	PRIMASK, r3
}
 801ab7e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2280      	movs	r2, #128	@ 0x80
 801ab84:	589b      	ldr	r3, [r3, r2]
 801ab86:	0018      	movs	r0, r3
 801ab88:	f7f8 feb0 	bl	80138ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	2202      	movs	r2, #2
 801ab90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	225c      	movs	r2, #92	@ 0x5c
 801ab96:	5a9a      	ldrh	r2, [r3, r2]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	215e      	movs	r1, #94	@ 0x5e
 801ab9c:	5a5b      	ldrh	r3, [r3, r1]
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	1ad3      	subs	r3, r2, r3
 801aba2:	b29a      	uxth	r2, r3
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	0011      	movs	r1, r2
 801aba8:	0018      	movs	r0, r3
 801abaa:	f000 f945 	bl	801ae38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801abae:	e10c      	b.n	801adca <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	225c      	movs	r2, #92	@ 0x5c
 801abb4:	5a9b      	ldrh	r3, [r3, r2]
 801abb6:	227e      	movs	r2, #126	@ 0x7e
 801abb8:	18ba      	adds	r2, r7, r2
 801abba:	8812      	ldrh	r2, [r2, #0]
 801abbc:	429a      	cmp	r2, r3
 801abbe:	d000      	beq.n	801abc2 <HAL_UART_IRQHandler+0x466>
 801abc0:	e103      	b.n	801adca <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2280      	movs	r2, #128	@ 0x80
 801abc6:	589b      	ldr	r3, [r3, r2]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	2220      	movs	r2, #32
 801abce:	4013      	ands	r3, r2
 801abd0:	2b20      	cmp	r3, #32
 801abd2:	d000      	beq.n	801abd6 <HAL_UART_IRQHandler+0x47a>
 801abd4:	e0f9      	b.n	801adca <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	2202      	movs	r2, #2
 801abda:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	225c      	movs	r2, #92	@ 0x5c
 801abe0:	5a9a      	ldrh	r2, [r3, r2]
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	0011      	movs	r1, r2
 801abe6:	0018      	movs	r0, r3
 801abe8:	f000 f926 	bl	801ae38 <HAL_UARTEx_RxEventCallback>
      return;
 801abec:	e0ed      	b.n	801adca <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	225c      	movs	r2, #92	@ 0x5c
 801abf2:	5a99      	ldrh	r1, [r3, r2]
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	225e      	movs	r2, #94	@ 0x5e
 801abf8:	5a9b      	ldrh	r3, [r3, r2]
 801abfa:	b29a      	uxth	r2, r3
 801abfc:	208e      	movs	r0, #142	@ 0x8e
 801abfe:	183b      	adds	r3, r7, r0
 801ac00:	1a8a      	subs	r2, r1, r2
 801ac02:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	225e      	movs	r2, #94	@ 0x5e
 801ac08:	5a9b      	ldrh	r3, [r3, r2]
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d100      	bne.n	801ac12 <HAL_UART_IRQHandler+0x4b6>
 801ac10:	e0dd      	b.n	801adce <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 801ac12:	183b      	adds	r3, r7, r0
 801ac14:	881b      	ldrh	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d100      	bne.n	801ac1c <HAL_UART_IRQHandler+0x4c0>
 801ac1a:	e0d8      	b.n	801adce <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ac1c:	f3ef 8310 	mrs	r3, PRIMASK
 801ac20:	60fb      	str	r3, [r7, #12]
  return(result);
 801ac22:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ac24:	2488      	movs	r4, #136	@ 0x88
 801ac26:	193a      	adds	r2, r7, r4
 801ac28:	6013      	str	r3, [r2, #0]
 801ac2a:	2301      	movs	r3, #1
 801ac2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac2e:	693b      	ldr	r3, [r7, #16]
 801ac30:	f383 8810 	msr	PRIMASK, r3
}
 801ac34:	46c0      	nop			@ (mov r8, r8)
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	681a      	ldr	r2, [r3, #0]
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4967      	ldr	r1, [pc, #412]	@ (801ade0 <HAL_UART_IRQHandler+0x684>)
 801ac42:	400a      	ands	r2, r1
 801ac44:	601a      	str	r2, [r3, #0]
 801ac46:	193b      	adds	r3, r7, r4
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac4c:	697b      	ldr	r3, [r7, #20]
 801ac4e:	f383 8810 	msr	PRIMASK, r3
}
 801ac52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ac54:	f3ef 8310 	mrs	r3, PRIMASK
 801ac58:	61bb      	str	r3, [r7, #24]
  return(result);
 801ac5a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ac5c:	2484      	movs	r4, #132	@ 0x84
 801ac5e:	193a      	adds	r2, r7, r4
 801ac60:	6013      	str	r3, [r2, #0]
 801ac62:	2301      	movs	r3, #1
 801ac64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac66:	69fb      	ldr	r3, [r7, #28]
 801ac68:	f383 8810 	msr	PRIMASK, r3
}
 801ac6c:	46c0      	nop			@ (mov r8, r8)
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	689a      	ldr	r2, [r3, #8]
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	495a      	ldr	r1, [pc, #360]	@ (801ade4 <HAL_UART_IRQHandler+0x688>)
 801ac7a:	400a      	ands	r2, r1
 801ac7c:	609a      	str	r2, [r3, #8]
 801ac7e:	193b      	adds	r3, r7, r4
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac84:	6a3b      	ldr	r3, [r7, #32]
 801ac86:	f383 8810 	msr	PRIMASK, r3
}
 801ac8a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	228c      	movs	r2, #140	@ 0x8c
 801ac90:	2120      	movs	r1, #32
 801ac92:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	2200      	movs	r2, #0
 801ac98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aca0:	f3ef 8310 	mrs	r3, PRIMASK
 801aca4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aca8:	2480      	movs	r4, #128	@ 0x80
 801acaa:	193a      	adds	r2, r7, r4
 801acac:	6013      	str	r3, [r2, #0]
 801acae:	2301      	movs	r3, #1
 801acb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801acb4:	f383 8810 	msr	PRIMASK, r3
}
 801acb8:	46c0      	nop			@ (mov r8, r8)
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	681a      	ldr	r2, [r3, #0]
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	2110      	movs	r1, #16
 801acc6:	438a      	bics	r2, r1
 801acc8:	601a      	str	r2, [r3, #0]
 801acca:	193b      	adds	r3, r7, r4
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acd2:	f383 8810 	msr	PRIMASK, r3
}
 801acd6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	2202      	movs	r2, #2
 801acdc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801acde:	183b      	adds	r3, r7, r0
 801ace0:	881a      	ldrh	r2, [r3, #0]
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	0011      	movs	r1, r2
 801ace6:	0018      	movs	r0, r3
 801ace8:	f000 f8a6 	bl	801ae38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801acec:	e06f      	b.n	801adce <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801acee:	23a4      	movs	r3, #164	@ 0xa4
 801acf0:	18fb      	adds	r3, r7, r3
 801acf2:	681a      	ldr	r2, [r3, #0]
 801acf4:	2380      	movs	r3, #128	@ 0x80
 801acf6:	035b      	lsls	r3, r3, #13
 801acf8:	4013      	ands	r3, r2
 801acfa:	d010      	beq.n	801ad1e <HAL_UART_IRQHandler+0x5c2>
 801acfc:	239c      	movs	r3, #156	@ 0x9c
 801acfe:	18fb      	adds	r3, r7, r3
 801ad00:	681a      	ldr	r2, [r3, #0]
 801ad02:	2380      	movs	r3, #128	@ 0x80
 801ad04:	03db      	lsls	r3, r3, #15
 801ad06:	4013      	ands	r3, r2
 801ad08:	d009      	beq.n	801ad1e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2280      	movs	r2, #128	@ 0x80
 801ad10:	0352      	lsls	r2, r2, #13
 801ad12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	0018      	movs	r0, r3
 801ad18:	f000 ff1d 	bl	801bb56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ad1c:	e05a      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801ad1e:	23a4      	movs	r3, #164	@ 0xa4
 801ad20:	18fb      	adds	r3, r7, r3
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	2280      	movs	r2, #128	@ 0x80
 801ad26:	4013      	ands	r3, r2
 801ad28:	d016      	beq.n	801ad58 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801ad2a:	23a0      	movs	r3, #160	@ 0xa0
 801ad2c:	18fb      	adds	r3, r7, r3
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	2280      	movs	r2, #128	@ 0x80
 801ad32:	4013      	ands	r3, r2
 801ad34:	d106      	bne.n	801ad44 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801ad36:	239c      	movs	r3, #156	@ 0x9c
 801ad38:	18fb      	adds	r3, r7, r3
 801ad3a:	681a      	ldr	r2, [r3, #0]
 801ad3c:	2380      	movs	r3, #128	@ 0x80
 801ad3e:	041b      	lsls	r3, r3, #16
 801ad40:	4013      	ands	r3, r2
 801ad42:	d009      	beq.n	801ad58 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d042      	beq.n	801add2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ad50:	687a      	ldr	r2, [r7, #4]
 801ad52:	0010      	movs	r0, r2
 801ad54:	4798      	blx	r3
    }
    return;
 801ad56:	e03c      	b.n	801add2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801ad58:	23a4      	movs	r3, #164	@ 0xa4
 801ad5a:	18fb      	adds	r3, r7, r3
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	2240      	movs	r2, #64	@ 0x40
 801ad60:	4013      	ands	r3, r2
 801ad62:	d00a      	beq.n	801ad7a <HAL_UART_IRQHandler+0x61e>
 801ad64:	23a0      	movs	r3, #160	@ 0xa0
 801ad66:	18fb      	adds	r3, r7, r3
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	2240      	movs	r2, #64	@ 0x40
 801ad6c:	4013      	ands	r3, r2
 801ad6e:	d004      	beq.n	801ad7a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	0018      	movs	r0, r3
 801ad74:	f000 fec3 	bl	801bafe <UART_EndTransmit_IT>
    return;
 801ad78:	e02c      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801ad7a:	23a4      	movs	r3, #164	@ 0xa4
 801ad7c:	18fb      	adds	r3, r7, r3
 801ad7e:	681a      	ldr	r2, [r3, #0]
 801ad80:	2380      	movs	r3, #128	@ 0x80
 801ad82:	041b      	lsls	r3, r3, #16
 801ad84:	4013      	ands	r3, r2
 801ad86:	d00b      	beq.n	801ada0 <HAL_UART_IRQHandler+0x644>
 801ad88:	23a0      	movs	r3, #160	@ 0xa0
 801ad8a:	18fb      	adds	r3, r7, r3
 801ad8c:	681a      	ldr	r2, [r3, #0]
 801ad8e:	2380      	movs	r3, #128	@ 0x80
 801ad90:	05db      	lsls	r3, r3, #23
 801ad92:	4013      	ands	r3, r2
 801ad94:	d004      	beq.n	801ada0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	0018      	movs	r0, r3
 801ad9a:	f000 feec 	bl	801bb76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ad9e:	e019      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801ada0:	23a4      	movs	r3, #164	@ 0xa4
 801ada2:	18fb      	adds	r3, r7, r3
 801ada4:	681a      	ldr	r2, [r3, #0]
 801ada6:	2380      	movs	r3, #128	@ 0x80
 801ada8:	045b      	lsls	r3, r3, #17
 801adaa:	4013      	ands	r3, r2
 801adac:	d012      	beq.n	801add4 <HAL_UART_IRQHandler+0x678>
 801adae:	23a0      	movs	r3, #160	@ 0xa0
 801adb0:	18fb      	adds	r3, r7, r3
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	da0d      	bge.n	801add4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	0018      	movs	r0, r3
 801adbc:	f000 fed3 	bl	801bb66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801adc0:	e008      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
      return;
 801adc2:	46c0      	nop			@ (mov r8, r8)
 801adc4:	e006      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
    return;
 801adc6:	46c0      	nop			@ (mov r8, r8)
 801adc8:	e004      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
      return;
 801adca:	46c0      	nop			@ (mov r8, r8)
 801adcc:	e002      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
      return;
 801adce:	46c0      	nop			@ (mov r8, r8)
 801add0:	e000      	b.n	801add4 <HAL_UART_IRQHandler+0x678>
    return;
 801add2:	46c0      	nop			@ (mov r8, r8)
  }
}
 801add4:	46bd      	mov	sp, r7
 801add6:	b02a      	add	sp, #168	@ 0xa8
 801add8:	bdb0      	pop	{r4, r5, r7, pc}
 801adda:	46c0      	nop			@ (mov r8, r8)
 801addc:	fffffeff 	.word	0xfffffeff
 801ade0:	fffffedf 	.word	0xfffffedf
 801ade4:	effffffe 	.word	0xeffffffe

0801ade8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b082      	sub	sp, #8
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801adf0:	46c0      	nop			@ (mov r8, r8)
 801adf2:	46bd      	mov	sp, r7
 801adf4:	b002      	add	sp, #8
 801adf6:	bd80      	pop	{r7, pc}

0801adf8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801ae00:	46c0      	nop			@ (mov r8, r8)
 801ae02:	46bd      	mov	sp, r7
 801ae04:	b002      	add	sp, #8
 801ae06:	bd80      	pop	{r7, pc}

0801ae08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b082      	sub	sp, #8
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801ae10:	46c0      	nop			@ (mov r8, r8)
 801ae12:	46bd      	mov	sp, r7
 801ae14:	b002      	add	sp, #8
 801ae16:	bd80      	pop	{r7, pc}

0801ae18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ae20:	46c0      	nop			@ (mov r8, r8)
 801ae22:	46bd      	mov	sp, r7
 801ae24:	b002      	add	sp, #8
 801ae26:	bd80      	pop	{r7, pc}

0801ae28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b082      	sub	sp, #8
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801ae30:	46c0      	nop			@ (mov r8, r8)
 801ae32:	46bd      	mov	sp, r7
 801ae34:	b002      	add	sp, #8
 801ae36:	bd80      	pop	{r7, pc}

0801ae38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b082      	sub	sp, #8
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
 801ae40:	000a      	movs	r2, r1
 801ae42:	1cbb      	adds	r3, r7, #2
 801ae44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801ae46:	46c0      	nop			@ (mov r8, r8)
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	b002      	add	sp, #8
 801ae4c:	bd80      	pop	{r7, pc}
	...

0801ae50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ae50:	b5b0      	push	{r4, r5, r7, lr}
 801ae52:	b092      	sub	sp, #72	@ 0x48
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ae58:	231f      	movs	r3, #31
 801ae5a:	2220      	movs	r2, #32
 801ae5c:	189b      	adds	r3, r3, r2
 801ae5e:	19db      	adds	r3, r3, r7
 801ae60:	2200      	movs	r2, #0
 801ae62:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801ae64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	4ac8      	ldr	r2, [pc, #800]	@ (801b18c <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae6c:	689a      	ldr	r2, [r3, #8]
 801ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae70:	691b      	ldr	r3, [r3, #16]
 801ae72:	431a      	orrs	r2, r3
 801ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae76:	695b      	ldr	r3, [r3, #20]
 801ae78:	431a      	orrs	r2, r3
 801ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae7c:	69db      	ldr	r3, [r3, #28]
 801ae7e:	4313      	orrs	r3, r2
 801ae80:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	4ac1      	ldr	r2, [pc, #772]	@ (801b190 <UART_SetConfig+0x340>)
 801ae8a:	4013      	ands	r3, r2
 801ae8c:	0019      	movs	r1, r3
 801ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae90:	681a      	ldr	r2, [r3, #0]
 801ae92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ae94:	430b      	orrs	r3, r1
 801ae96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	685b      	ldr	r3, [r3, #4]
 801ae9e:	4abd      	ldr	r2, [pc, #756]	@ (801b194 <UART_SetConfig+0x344>)
 801aea0:	4013      	ands	r3, r2
 801aea2:	0018      	movs	r0, r3
 801aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aea6:	68d9      	ldr	r1, [r3, #12]
 801aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeaa:	681a      	ldr	r2, [r3, #0]
 801aeac:	0003      	movs	r3, r0
 801aeae:	430b      	orrs	r3, r1
 801aeb0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeb4:	699b      	ldr	r3, [r3, #24]
 801aeb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801aeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	4ab3      	ldr	r2, [pc, #716]	@ (801b18c <UART_SetConfig+0x33c>)
 801aebe:	4293      	cmp	r3, r2
 801aec0:	d00e      	beq.n	801aee0 <UART_SetConfig+0x90>
 801aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	4ab4      	ldr	r2, [pc, #720]	@ (801b198 <UART_SetConfig+0x348>)
 801aec8:	4293      	cmp	r3, r2
 801aeca:	d009      	beq.n	801aee0 <UART_SetConfig+0x90>
 801aecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	4ab2      	ldr	r2, [pc, #712]	@ (801b19c <UART_SetConfig+0x34c>)
 801aed2:	4293      	cmp	r3, r2
 801aed4:	d004      	beq.n	801aee0 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aed8:	6a1b      	ldr	r3, [r3, #32]
 801aeda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aedc:	4313      	orrs	r3, r2
 801aede:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	689b      	ldr	r3, [r3, #8]
 801aee6:	4aae      	ldr	r2, [pc, #696]	@ (801b1a0 <UART_SetConfig+0x350>)
 801aee8:	4013      	ands	r3, r2
 801aeea:	0019      	movs	r1, r3
 801aeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeee:	681a      	ldr	r2, [r3, #0]
 801aef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aef2:	430b      	orrs	r3, r1
 801aef4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aefc:	220f      	movs	r2, #15
 801aefe:	4393      	bics	r3, r2
 801af00:	0018      	movs	r0, r3
 801af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801af06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af08:	681a      	ldr	r2, [r3, #0]
 801af0a:	0003      	movs	r3, r0
 801af0c:	430b      	orrs	r3, r1
 801af0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	4aa3      	ldr	r2, [pc, #652]	@ (801b1a4 <UART_SetConfig+0x354>)
 801af16:	4293      	cmp	r3, r2
 801af18:	d102      	bne.n	801af20 <UART_SetConfig+0xd0>
 801af1a:	2301      	movs	r3, #1
 801af1c:	643b      	str	r3, [r7, #64]	@ 0x40
 801af1e:	e033      	b.n	801af88 <UART_SetConfig+0x138>
 801af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	4aa0      	ldr	r2, [pc, #640]	@ (801b1a8 <UART_SetConfig+0x358>)
 801af26:	4293      	cmp	r3, r2
 801af28:	d102      	bne.n	801af30 <UART_SetConfig+0xe0>
 801af2a:	2302      	movs	r3, #2
 801af2c:	643b      	str	r3, [r7, #64]	@ 0x40
 801af2e:	e02b      	b.n	801af88 <UART_SetConfig+0x138>
 801af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	4a9d      	ldr	r2, [pc, #628]	@ (801b1ac <UART_SetConfig+0x35c>)
 801af36:	4293      	cmp	r3, r2
 801af38:	d103      	bne.n	801af42 <UART_SetConfig+0xf2>
 801af3a:	2380      	movs	r3, #128	@ 0x80
 801af3c:	025b      	lsls	r3, r3, #9
 801af3e:	643b      	str	r3, [r7, #64]	@ 0x40
 801af40:	e022      	b.n	801af88 <UART_SetConfig+0x138>
 801af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	4a9a      	ldr	r2, [pc, #616]	@ (801b1b0 <UART_SetConfig+0x360>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d103      	bne.n	801af54 <UART_SetConfig+0x104>
 801af4c:	2380      	movs	r3, #128	@ 0x80
 801af4e:	029b      	lsls	r3, r3, #10
 801af50:	643b      	str	r3, [r7, #64]	@ 0x40
 801af52:	e019      	b.n	801af88 <UART_SetConfig+0x138>
 801af54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	4a8c      	ldr	r2, [pc, #560]	@ (801b18c <UART_SetConfig+0x33c>)
 801af5a:	4293      	cmp	r3, r2
 801af5c:	d102      	bne.n	801af64 <UART_SetConfig+0x114>
 801af5e:	2310      	movs	r3, #16
 801af60:	643b      	str	r3, [r7, #64]	@ 0x40
 801af62:	e011      	b.n	801af88 <UART_SetConfig+0x138>
 801af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	4a8b      	ldr	r2, [pc, #556]	@ (801b198 <UART_SetConfig+0x348>)
 801af6a:	4293      	cmp	r3, r2
 801af6c:	d102      	bne.n	801af74 <UART_SetConfig+0x124>
 801af6e:	2308      	movs	r3, #8
 801af70:	643b      	str	r3, [r7, #64]	@ 0x40
 801af72:	e009      	b.n	801af88 <UART_SetConfig+0x138>
 801af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	4a88      	ldr	r2, [pc, #544]	@ (801b19c <UART_SetConfig+0x34c>)
 801af7a:	4293      	cmp	r3, r2
 801af7c:	d102      	bne.n	801af84 <UART_SetConfig+0x134>
 801af7e:	2304      	movs	r3, #4
 801af80:	643b      	str	r3, [r7, #64]	@ 0x40
 801af82:	e001      	b.n	801af88 <UART_SetConfig+0x138>
 801af84:	2300      	movs	r3, #0
 801af86:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	4a7f      	ldr	r2, [pc, #508]	@ (801b18c <UART_SetConfig+0x33c>)
 801af8e:	4293      	cmp	r3, r2
 801af90:	d00a      	beq.n	801afa8 <UART_SetConfig+0x158>
 801af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	4a80      	ldr	r2, [pc, #512]	@ (801b198 <UART_SetConfig+0x348>)
 801af98:	4293      	cmp	r3, r2
 801af9a:	d005      	beq.n	801afa8 <UART_SetConfig+0x158>
 801af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	4a7e      	ldr	r2, [pc, #504]	@ (801b19c <UART_SetConfig+0x34c>)
 801afa2:	4293      	cmp	r3, r2
 801afa4:	d000      	beq.n	801afa8 <UART_SetConfig+0x158>
 801afa6:	e06f      	b.n	801b088 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801afa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801afaa:	0018      	movs	r0, r3
 801afac:	f7fc fe60 	bl	8017c70 <HAL_RCCEx_GetPeriphCLKFreq>
 801afb0:	0003      	movs	r3, r0
 801afb2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 801afb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d100      	bne.n	801afbc <UART_SetConfig+0x16c>
 801afba:	e103      	b.n	801b1c4 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801afbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801afc0:	4b7c      	ldr	r3, [pc, #496]	@ (801b1b4 <UART_SetConfig+0x364>)
 801afc2:	0052      	lsls	r2, r2, #1
 801afc4:	5ad3      	ldrh	r3, [r2, r3]
 801afc6:	0019      	movs	r1, r3
 801afc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801afca:	f7e5 f8a5 	bl	8000118 <__udivsi3>
 801afce:	0003      	movs	r3, r0
 801afd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afd4:	685a      	ldr	r2, [r3, #4]
 801afd6:	0013      	movs	r3, r2
 801afd8:	005b      	lsls	r3, r3, #1
 801afda:	189b      	adds	r3, r3, r2
 801afdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801afde:	429a      	cmp	r2, r3
 801afe0:	d305      	bcc.n	801afee <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afe4:	685b      	ldr	r3, [r3, #4]
 801afe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801afe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801afea:	429a      	cmp	r2, r3
 801afec:	d906      	bls.n	801affc <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 801afee:	231f      	movs	r3, #31
 801aff0:	2220      	movs	r2, #32
 801aff2:	189b      	adds	r3, r3, r2
 801aff4:	19db      	adds	r3, r3, r7
 801aff6:	2201      	movs	r2, #1
 801aff8:	701a      	strb	r2, [r3, #0]
 801affa:	e044      	b.n	801b086 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801affe:	61bb      	str	r3, [r7, #24]
 801b000:	2300      	movs	r3, #0
 801b002:	61fb      	str	r3, [r7, #28]
 801b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b008:	4b6a      	ldr	r3, [pc, #424]	@ (801b1b4 <UART_SetConfig+0x364>)
 801b00a:	0052      	lsls	r2, r2, #1
 801b00c:	5ad3      	ldrh	r3, [r2, r3]
 801b00e:	613b      	str	r3, [r7, #16]
 801b010:	2300      	movs	r3, #0
 801b012:	617b      	str	r3, [r7, #20]
 801b014:	693a      	ldr	r2, [r7, #16]
 801b016:	697b      	ldr	r3, [r7, #20]
 801b018:	69b8      	ldr	r0, [r7, #24]
 801b01a:	69f9      	ldr	r1, [r7, #28]
 801b01c:	f7e5 fa4e 	bl	80004bc <__aeabi_uldivmod>
 801b020:	0002      	movs	r2, r0
 801b022:	000b      	movs	r3, r1
 801b024:	0e11      	lsrs	r1, r2, #24
 801b026:	021d      	lsls	r5, r3, #8
 801b028:	430d      	orrs	r5, r1
 801b02a:	0214      	lsls	r4, r2, #8
 801b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b02e:	685b      	ldr	r3, [r3, #4]
 801b030:	085b      	lsrs	r3, r3, #1
 801b032:	60bb      	str	r3, [r7, #8]
 801b034:	2300      	movs	r3, #0
 801b036:	60fb      	str	r3, [r7, #12]
 801b038:	68b8      	ldr	r0, [r7, #8]
 801b03a:	68f9      	ldr	r1, [r7, #12]
 801b03c:	1900      	adds	r0, r0, r4
 801b03e:	4169      	adcs	r1, r5
 801b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	603b      	str	r3, [r7, #0]
 801b046:	2300      	movs	r3, #0
 801b048:	607b      	str	r3, [r7, #4]
 801b04a:	683a      	ldr	r2, [r7, #0]
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	f7e5 fa35 	bl	80004bc <__aeabi_uldivmod>
 801b052:	0002      	movs	r2, r0
 801b054:	000b      	movs	r3, r1
 801b056:	0013      	movs	r3, r2
 801b058:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b05a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b05c:	23c0      	movs	r3, #192	@ 0xc0
 801b05e:	009b      	lsls	r3, r3, #2
 801b060:	429a      	cmp	r2, r3
 801b062:	d309      	bcc.n	801b078 <UART_SetConfig+0x228>
 801b064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b066:	2380      	movs	r3, #128	@ 0x80
 801b068:	035b      	lsls	r3, r3, #13
 801b06a:	429a      	cmp	r2, r3
 801b06c:	d204      	bcs.n	801b078 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 801b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b074:	60da      	str	r2, [r3, #12]
 801b076:	e006      	b.n	801b086 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 801b078:	231f      	movs	r3, #31
 801b07a:	2220      	movs	r2, #32
 801b07c:	189b      	adds	r3, r3, r2
 801b07e:	19db      	adds	r3, r3, r7
 801b080:	2201      	movs	r2, #1
 801b082:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 801b084:	e09e      	b.n	801b1c4 <UART_SetConfig+0x374>
 801b086:	e09d      	b.n	801b1c4 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b08a:	69da      	ldr	r2, [r3, #28]
 801b08c:	2380      	movs	r3, #128	@ 0x80
 801b08e:	021b      	lsls	r3, r3, #8
 801b090:	429a      	cmp	r2, r3
 801b092:	d14c      	bne.n	801b12e <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801b094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b096:	0018      	movs	r0, r3
 801b098:	f7fc fdea 	bl	8017c70 <HAL_RCCEx_GetPeriphCLKFreq>
 801b09c:	0003      	movs	r3, r0
 801b09e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d100      	bne.n	801b0a8 <UART_SetConfig+0x258>
 801b0a6:	e08d      	b.n	801b1c4 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b0ac:	4b41      	ldr	r3, [pc, #260]	@ (801b1b4 <UART_SetConfig+0x364>)
 801b0ae:	0052      	lsls	r2, r2, #1
 801b0b0:	5ad3      	ldrh	r3, [r2, r3]
 801b0b2:	0019      	movs	r1, r3
 801b0b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b0b6:	f7e5 f82f 	bl	8000118 <__udivsi3>
 801b0ba:	0003      	movs	r3, r0
 801b0bc:	005a      	lsls	r2, r3, #1
 801b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0c0:	685b      	ldr	r3, [r3, #4]
 801b0c2:	085b      	lsrs	r3, r3, #1
 801b0c4:	18d2      	adds	r2, r2, r3
 801b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0c8:	685b      	ldr	r3, [r3, #4]
 801b0ca:	0019      	movs	r1, r3
 801b0cc:	0010      	movs	r0, r2
 801b0ce:	f7e5 f823 	bl	8000118 <__udivsi3>
 801b0d2:	0003      	movs	r3, r0
 801b0d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0d8:	2b0f      	cmp	r3, #15
 801b0da:	d921      	bls.n	801b120 <UART_SetConfig+0x2d0>
 801b0dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b0de:	2380      	movs	r3, #128	@ 0x80
 801b0e0:	025b      	lsls	r3, r3, #9
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d21c      	bcs.n	801b120 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0e8:	b29a      	uxth	r2, r3
 801b0ea:	2012      	movs	r0, #18
 801b0ec:	2420      	movs	r4, #32
 801b0ee:	1903      	adds	r3, r0, r4
 801b0f0:	19db      	adds	r3, r3, r7
 801b0f2:	210f      	movs	r1, #15
 801b0f4:	438a      	bics	r2, r1
 801b0f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0fa:	085b      	lsrs	r3, r3, #1
 801b0fc:	b29b      	uxth	r3, r3
 801b0fe:	2207      	movs	r2, #7
 801b100:	4013      	ands	r3, r2
 801b102:	b299      	uxth	r1, r3
 801b104:	1903      	adds	r3, r0, r4
 801b106:	19db      	adds	r3, r3, r7
 801b108:	1902      	adds	r2, r0, r4
 801b10a:	19d2      	adds	r2, r2, r7
 801b10c:	8812      	ldrh	r2, [r2, #0]
 801b10e:	430a      	orrs	r2, r1
 801b110:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801b112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	1902      	adds	r2, r0, r4
 801b118:	19d2      	adds	r2, r2, r7
 801b11a:	8812      	ldrh	r2, [r2, #0]
 801b11c:	60da      	str	r2, [r3, #12]
 801b11e:	e051      	b.n	801b1c4 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 801b120:	231f      	movs	r3, #31
 801b122:	2220      	movs	r2, #32
 801b124:	189b      	adds	r3, r3, r2
 801b126:	19db      	adds	r3, r3, r7
 801b128:	2201      	movs	r2, #1
 801b12a:	701a      	strb	r2, [r3, #0]
 801b12c:	e04a      	b.n	801b1c4 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801b12e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b130:	0018      	movs	r0, r3
 801b132:	f7fc fd9d 	bl	8017c70 <HAL_RCCEx_GetPeriphCLKFreq>
 801b136:	0003      	movs	r3, r0
 801b138:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 801b13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d041      	beq.n	801b1c4 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b144:	4b1b      	ldr	r3, [pc, #108]	@ (801b1b4 <UART_SetConfig+0x364>)
 801b146:	0052      	lsls	r2, r2, #1
 801b148:	5ad3      	ldrh	r3, [r2, r3]
 801b14a:	0019      	movs	r1, r3
 801b14c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b14e:	f7e4 ffe3 	bl	8000118 <__udivsi3>
 801b152:	0003      	movs	r3, r0
 801b154:	001a      	movs	r2, r3
 801b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b158:	685b      	ldr	r3, [r3, #4]
 801b15a:	085b      	lsrs	r3, r3, #1
 801b15c:	18d2      	adds	r2, r2, r3
 801b15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b160:	685b      	ldr	r3, [r3, #4]
 801b162:	0019      	movs	r1, r3
 801b164:	0010      	movs	r0, r2
 801b166:	f7e4 ffd7 	bl	8000118 <__udivsi3>
 801b16a:	0003      	movs	r3, r0
 801b16c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b16e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b170:	2b0f      	cmp	r3, #15
 801b172:	d921      	bls.n	801b1b8 <UART_SetConfig+0x368>
 801b174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b176:	2380      	movs	r3, #128	@ 0x80
 801b178:	025b      	lsls	r3, r3, #9
 801b17a:	429a      	cmp	r2, r3
 801b17c:	d21c      	bcs.n	801b1b8 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b180:	b29a      	uxth	r2, r3
 801b182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	60da      	str	r2, [r3, #12]
 801b188:	e01c      	b.n	801b1c4 <UART_SetConfig+0x374>
 801b18a:	46c0      	nop			@ (mov r8, r8)
 801b18c:	40008000 	.word	0x40008000
 801b190:	cfff69f3 	.word	0xcfff69f3
 801b194:	ffffcfff 	.word	0xffffcfff
 801b198:	40008400 	.word	0x40008400
 801b19c:	40008c00 	.word	0x40008c00
 801b1a0:	11fff4ff 	.word	0x11fff4ff
 801b1a4:	40013800 	.word	0x40013800
 801b1a8:	40004400 	.word	0x40004400
 801b1ac:	40004800 	.word	0x40004800
 801b1b0:	40004c00 	.word	0x40004c00
 801b1b4:	0801c608 	.word	0x0801c608
      }
      else
      {
        ret = HAL_ERROR;
 801b1b8:	231f      	movs	r3, #31
 801b1ba:	2220      	movs	r2, #32
 801b1bc:	189b      	adds	r3, r3, r2
 801b1be:	19db      	adds	r3, r3, r7
 801b1c0:	2201      	movs	r2, #1
 801b1c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801b1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1c6:	226a      	movs	r2, #106	@ 0x6a
 801b1c8:	2101      	movs	r1, #1
 801b1ca:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 801b1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1ce:	2268      	movs	r2, #104	@ 0x68
 801b1d0:	2101      	movs	r1, #1
 801b1d2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1d6:	2200      	movs	r2, #0
 801b1d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1dc:	2200      	movs	r2, #0
 801b1de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801b1e0:	231f      	movs	r3, #31
 801b1e2:	2220      	movs	r2, #32
 801b1e4:	189b      	adds	r3, r3, r2
 801b1e6:	19db      	adds	r3, r3, r7
 801b1e8:	781b      	ldrb	r3, [r3, #0]
}
 801b1ea:	0018      	movs	r0, r3
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	b012      	add	sp, #72	@ 0x48
 801b1f0:	bdb0      	pop	{r4, r5, r7, pc}
 801b1f2:	46c0      	nop			@ (mov r8, r8)

0801b1f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b200:	2208      	movs	r2, #8
 801b202:	4013      	ands	r3, r2
 801b204:	d00b      	beq.n	801b21e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	685b      	ldr	r3, [r3, #4]
 801b20c:	4a4a      	ldr	r2, [pc, #296]	@ (801b338 <UART_AdvFeatureConfig+0x144>)
 801b20e:	4013      	ands	r3, r2
 801b210:	0019      	movs	r1, r3
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	430a      	orrs	r2, r1
 801b21c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b222:	2201      	movs	r2, #1
 801b224:	4013      	ands	r3, r2
 801b226:	d00b      	beq.n	801b240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	685b      	ldr	r3, [r3, #4]
 801b22e:	4a43      	ldr	r2, [pc, #268]	@ (801b33c <UART_AdvFeatureConfig+0x148>)
 801b230:	4013      	ands	r3, r2
 801b232:	0019      	movs	r1, r3
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	430a      	orrs	r2, r1
 801b23e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b244:	2202      	movs	r2, #2
 801b246:	4013      	ands	r3, r2
 801b248:	d00b      	beq.n	801b262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	685b      	ldr	r3, [r3, #4]
 801b250:	4a3b      	ldr	r2, [pc, #236]	@ (801b340 <UART_AdvFeatureConfig+0x14c>)
 801b252:	4013      	ands	r3, r2
 801b254:	0019      	movs	r1, r3
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	430a      	orrs	r2, r1
 801b260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b266:	2204      	movs	r2, #4
 801b268:	4013      	ands	r3, r2
 801b26a:	d00b      	beq.n	801b284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	685b      	ldr	r3, [r3, #4]
 801b272:	4a34      	ldr	r2, [pc, #208]	@ (801b344 <UART_AdvFeatureConfig+0x150>)
 801b274:	4013      	ands	r3, r2
 801b276:	0019      	movs	r1, r3
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	430a      	orrs	r2, r1
 801b282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b288:	2210      	movs	r2, #16
 801b28a:	4013      	ands	r3, r2
 801b28c:	d00b      	beq.n	801b2a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	689b      	ldr	r3, [r3, #8]
 801b294:	4a2c      	ldr	r2, [pc, #176]	@ (801b348 <UART_AdvFeatureConfig+0x154>)
 801b296:	4013      	ands	r3, r2
 801b298:	0019      	movs	r1, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	430a      	orrs	r2, r1
 801b2a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b2aa:	2220      	movs	r2, #32
 801b2ac:	4013      	ands	r3, r2
 801b2ae:	d00b      	beq.n	801b2c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	689b      	ldr	r3, [r3, #8]
 801b2b6:	4a25      	ldr	r2, [pc, #148]	@ (801b34c <UART_AdvFeatureConfig+0x158>)
 801b2b8:	4013      	ands	r3, r2
 801b2ba:	0019      	movs	r1, r3
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	430a      	orrs	r2, r1
 801b2c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b2cc:	2240      	movs	r2, #64	@ 0x40
 801b2ce:	4013      	ands	r3, r2
 801b2d0:	d01d      	beq.n	801b30e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	685b      	ldr	r3, [r3, #4]
 801b2d8:	4a1d      	ldr	r2, [pc, #116]	@ (801b350 <UART_AdvFeatureConfig+0x15c>)
 801b2da:	4013      	ands	r3, r2
 801b2dc:	0019      	movs	r1, r3
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	430a      	orrs	r2, r1
 801b2e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b2ee:	2380      	movs	r3, #128	@ 0x80
 801b2f0:	035b      	lsls	r3, r3, #13
 801b2f2:	429a      	cmp	r2, r3
 801b2f4:	d10b      	bne.n	801b30e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	685b      	ldr	r3, [r3, #4]
 801b2fc:	4a15      	ldr	r2, [pc, #84]	@ (801b354 <UART_AdvFeatureConfig+0x160>)
 801b2fe:	4013      	ands	r3, r2
 801b300:	0019      	movs	r1, r3
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	430a      	orrs	r2, r1
 801b30c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b312:	2280      	movs	r2, #128	@ 0x80
 801b314:	4013      	ands	r3, r2
 801b316:	d00b      	beq.n	801b330 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	685b      	ldr	r3, [r3, #4]
 801b31e:	4a0e      	ldr	r2, [pc, #56]	@ (801b358 <UART_AdvFeatureConfig+0x164>)
 801b320:	4013      	ands	r3, r2
 801b322:	0019      	movs	r1, r3
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	430a      	orrs	r2, r1
 801b32e:	605a      	str	r2, [r3, #4]
  }
}
 801b330:	46c0      	nop			@ (mov r8, r8)
 801b332:	46bd      	mov	sp, r7
 801b334:	b002      	add	sp, #8
 801b336:	bd80      	pop	{r7, pc}
 801b338:	ffff7fff 	.word	0xffff7fff
 801b33c:	fffdffff 	.word	0xfffdffff
 801b340:	fffeffff 	.word	0xfffeffff
 801b344:	fffbffff 	.word	0xfffbffff
 801b348:	ffffefff 	.word	0xffffefff
 801b34c:	ffffdfff 	.word	0xffffdfff
 801b350:	ffefffff 	.word	0xffefffff
 801b354:	ff9fffff 	.word	0xff9fffff
 801b358:	fff7ffff 	.word	0xfff7ffff

0801b35c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b092      	sub	sp, #72	@ 0x48
 801b360:	af02      	add	r7, sp, #8
 801b362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	2290      	movs	r2, #144	@ 0x90
 801b368:	2100      	movs	r1, #0
 801b36a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801b36c:	f7f6 fd50 	bl	8011e10 <HAL_GetTick>
 801b370:	0003      	movs	r3, r0
 801b372:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	2208      	movs	r2, #8
 801b37c:	4013      	ands	r3, r2
 801b37e:	2b08      	cmp	r3, #8
 801b380:	d12d      	bne.n	801b3de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b384:	2280      	movs	r2, #128	@ 0x80
 801b386:	0391      	lsls	r1, r2, #14
 801b388:	6878      	ldr	r0, [r7, #4]
 801b38a:	4a47      	ldr	r2, [pc, #284]	@ (801b4a8 <UART_CheckIdleState+0x14c>)
 801b38c:	9200      	str	r2, [sp, #0]
 801b38e:	2200      	movs	r2, #0
 801b390:	f000 f88e 	bl	801b4b0 <UART_WaitOnFlagUntilTimeout>
 801b394:	1e03      	subs	r3, r0, #0
 801b396:	d022      	beq.n	801b3de <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b398:	f3ef 8310 	mrs	r3, PRIMASK
 801b39c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801b3a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b3a2:	2301      	movs	r3, #1
 801b3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b3a8:	f383 8810 	msr	PRIMASK, r3
}
 801b3ac:	46c0      	nop			@ (mov r8, r8)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	681a      	ldr	r2, [r3, #0]
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2180      	movs	r1, #128	@ 0x80
 801b3ba:	438a      	bics	r2, r1
 801b3bc:	601a      	str	r2, [r3, #0]
 801b3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3c4:	f383 8810 	msr	PRIMASK, r3
}
 801b3c8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	2288      	movs	r2, #136	@ 0x88
 801b3ce:	2120      	movs	r1, #32
 801b3d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	2284      	movs	r2, #132	@ 0x84
 801b3d6:	2100      	movs	r1, #0
 801b3d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b3da:	2303      	movs	r3, #3
 801b3dc:	e060      	b.n	801b4a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	2204      	movs	r2, #4
 801b3e6:	4013      	ands	r3, r2
 801b3e8:	2b04      	cmp	r3, #4
 801b3ea:	d146      	bne.n	801b47a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b3ee:	2280      	movs	r2, #128	@ 0x80
 801b3f0:	03d1      	lsls	r1, r2, #15
 801b3f2:	6878      	ldr	r0, [r7, #4]
 801b3f4:	4a2c      	ldr	r2, [pc, #176]	@ (801b4a8 <UART_CheckIdleState+0x14c>)
 801b3f6:	9200      	str	r2, [sp, #0]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	f000 f859 	bl	801b4b0 <UART_WaitOnFlagUntilTimeout>
 801b3fe:	1e03      	subs	r3, r0, #0
 801b400:	d03b      	beq.n	801b47a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b402:	f3ef 8310 	mrs	r3, PRIMASK
 801b406:	60fb      	str	r3, [r7, #12]
  return(result);
 801b408:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b40a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b40c:	2301      	movs	r3, #1
 801b40e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b410:	693b      	ldr	r3, [r7, #16]
 801b412:	f383 8810 	msr	PRIMASK, r3
}
 801b416:	46c0      	nop			@ (mov r8, r8)
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	681a      	ldr	r2, [r3, #0]
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	4922      	ldr	r1, [pc, #136]	@ (801b4ac <UART_CheckIdleState+0x150>)
 801b424:	400a      	ands	r2, r1
 801b426:	601a      	str	r2, [r3, #0]
 801b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b42a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	f383 8810 	msr	PRIMASK, r3
}
 801b432:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b434:	f3ef 8310 	mrs	r3, PRIMASK
 801b438:	61bb      	str	r3, [r7, #24]
  return(result);
 801b43a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b43c:	633b      	str	r3, [r7, #48]	@ 0x30
 801b43e:	2301      	movs	r3, #1
 801b440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b442:	69fb      	ldr	r3, [r7, #28]
 801b444:	f383 8810 	msr	PRIMASK, r3
}
 801b448:	46c0      	nop			@ (mov r8, r8)
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	689a      	ldr	r2, [r3, #8]
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	2101      	movs	r1, #1
 801b456:	438a      	bics	r2, r1
 801b458:	609a      	str	r2, [r3, #8]
 801b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b45c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b45e:	6a3b      	ldr	r3, [r7, #32]
 801b460:	f383 8810 	msr	PRIMASK, r3
}
 801b464:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	228c      	movs	r2, #140	@ 0x8c
 801b46a:	2120      	movs	r1, #32
 801b46c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	2284      	movs	r2, #132	@ 0x84
 801b472:	2100      	movs	r1, #0
 801b474:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b476:	2303      	movs	r3, #3
 801b478:	e012      	b.n	801b4a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	2288      	movs	r2, #136	@ 0x88
 801b47e:	2120      	movs	r1, #32
 801b480:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	228c      	movs	r2, #140	@ 0x8c
 801b486:	2120      	movs	r1, #32
 801b488:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2200      	movs	r2, #0
 801b48e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	2200      	movs	r2, #0
 801b494:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	2284      	movs	r2, #132	@ 0x84
 801b49a:	2100      	movs	r1, #0
 801b49c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b49e:	2300      	movs	r3, #0
}
 801b4a0:	0018      	movs	r0, r3
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	b010      	add	sp, #64	@ 0x40
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	01ffffff 	.word	0x01ffffff
 801b4ac:	fffffedf 	.word	0xfffffedf

0801b4b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b084      	sub	sp, #16
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	60f8      	str	r0, [r7, #12]
 801b4b8:	60b9      	str	r1, [r7, #8]
 801b4ba:	603b      	str	r3, [r7, #0]
 801b4bc:	1dfb      	adds	r3, r7, #7
 801b4be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b4c0:	e051      	b.n	801b566 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b4c2:	69bb      	ldr	r3, [r7, #24]
 801b4c4:	3301      	adds	r3, #1
 801b4c6:	d04e      	beq.n	801b566 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b4c8:	f7f6 fca2 	bl	8011e10 <HAL_GetTick>
 801b4cc:	0002      	movs	r2, r0
 801b4ce:	683b      	ldr	r3, [r7, #0]
 801b4d0:	1ad3      	subs	r3, r2, r3
 801b4d2:	69ba      	ldr	r2, [r7, #24]
 801b4d4:	429a      	cmp	r2, r3
 801b4d6:	d302      	bcc.n	801b4de <UART_WaitOnFlagUntilTimeout+0x2e>
 801b4d8:	69bb      	ldr	r3, [r7, #24]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d101      	bne.n	801b4e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801b4de:	2303      	movs	r3, #3
 801b4e0:	e051      	b.n	801b586 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	2204      	movs	r2, #4
 801b4ea:	4013      	ands	r3, r2
 801b4ec:	d03b      	beq.n	801b566 <UART_WaitOnFlagUntilTimeout+0xb6>
 801b4ee:	68bb      	ldr	r3, [r7, #8]
 801b4f0:	2b80      	cmp	r3, #128	@ 0x80
 801b4f2:	d038      	beq.n	801b566 <UART_WaitOnFlagUntilTimeout+0xb6>
 801b4f4:	68bb      	ldr	r3, [r7, #8]
 801b4f6:	2b40      	cmp	r3, #64	@ 0x40
 801b4f8:	d035      	beq.n	801b566 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	69db      	ldr	r3, [r3, #28]
 801b500:	2208      	movs	r2, #8
 801b502:	4013      	ands	r3, r2
 801b504:	2b08      	cmp	r3, #8
 801b506:	d111      	bne.n	801b52c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	2208      	movs	r2, #8
 801b50e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	0018      	movs	r0, r3
 801b514:	f000 f922 	bl	801b75c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	2290      	movs	r2, #144	@ 0x90
 801b51c:	2108      	movs	r1, #8
 801b51e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	2284      	movs	r2, #132	@ 0x84
 801b524:	2100      	movs	r1, #0
 801b526:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801b528:	2301      	movs	r3, #1
 801b52a:	e02c      	b.n	801b586 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	69da      	ldr	r2, [r3, #28]
 801b532:	2380      	movs	r3, #128	@ 0x80
 801b534:	011b      	lsls	r3, r3, #4
 801b536:	401a      	ands	r2, r3
 801b538:	2380      	movs	r3, #128	@ 0x80
 801b53a:	011b      	lsls	r3, r3, #4
 801b53c:	429a      	cmp	r2, r3
 801b53e:	d112      	bne.n	801b566 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	2280      	movs	r2, #128	@ 0x80
 801b546:	0112      	lsls	r2, r2, #4
 801b548:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	0018      	movs	r0, r3
 801b54e:	f000 f905 	bl	801b75c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	2290      	movs	r2, #144	@ 0x90
 801b556:	2120      	movs	r1, #32
 801b558:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	2284      	movs	r2, #132	@ 0x84
 801b55e:	2100      	movs	r1, #0
 801b560:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801b562:	2303      	movs	r3, #3
 801b564:	e00f      	b.n	801b586 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	69db      	ldr	r3, [r3, #28]
 801b56c:	68ba      	ldr	r2, [r7, #8]
 801b56e:	4013      	ands	r3, r2
 801b570:	68ba      	ldr	r2, [r7, #8]
 801b572:	1ad3      	subs	r3, r2, r3
 801b574:	425a      	negs	r2, r3
 801b576:	4153      	adcs	r3, r2
 801b578:	b2db      	uxtb	r3, r3
 801b57a:	001a      	movs	r2, r3
 801b57c:	1dfb      	adds	r3, r7, #7
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	429a      	cmp	r2, r3
 801b582:	d09e      	beq.n	801b4c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b584:	2300      	movs	r3, #0
}
 801b586:	0018      	movs	r0, r3
 801b588:	46bd      	mov	sp, r7
 801b58a:	b004      	add	sp, #16
 801b58c:	bd80      	pop	{r7, pc}
	...

0801b590 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b590:	b580      	push	{r7, lr}
 801b592:	b090      	sub	sp, #64	@ 0x40
 801b594:	af00      	add	r7, sp, #0
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	1dbb      	adds	r3, r7, #6
 801b59c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	68ba      	ldr	r2, [r7, #8]
 801b5a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	1dba      	adds	r2, r7, #6
 801b5a8:	215c      	movs	r1, #92	@ 0x5c
 801b5aa:	8812      	ldrh	r2, [r2, #0]
 801b5ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	2290      	movs	r2, #144	@ 0x90
 801b5b2:	2100      	movs	r1, #0
 801b5b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	228c      	movs	r2, #140	@ 0x8c
 801b5ba:	2122      	movs	r1, #34	@ 0x22
 801b5bc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	2280      	movs	r2, #128	@ 0x80
 801b5c2:	589b      	ldr	r3, [r3, r2]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d02d      	beq.n	801b624 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	2280      	movs	r2, #128	@ 0x80
 801b5cc:	589b      	ldr	r3, [r3, r2]
 801b5ce:	4a40      	ldr	r2, [pc, #256]	@ (801b6d0 <UART_Start_Receive_DMA+0x140>)
 801b5d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2280      	movs	r2, #128	@ 0x80
 801b5d6:	589b      	ldr	r3, [r3, r2]
 801b5d8:	4a3e      	ldr	r2, [pc, #248]	@ (801b6d4 <UART_Start_Receive_DMA+0x144>)
 801b5da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	2280      	movs	r2, #128	@ 0x80
 801b5e0:	589b      	ldr	r3, [r3, r2]
 801b5e2:	4a3d      	ldr	r2, [pc, #244]	@ (801b6d8 <UART_Start_Receive_DMA+0x148>)
 801b5e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	2280      	movs	r2, #128	@ 0x80
 801b5ea:	589b      	ldr	r3, [r3, r2]
 801b5ec:	2200      	movs	r2, #0
 801b5ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	2280      	movs	r2, #128	@ 0x80
 801b5f4:	5898      	ldr	r0, [r3, r2]
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	3324      	adds	r3, #36	@ 0x24
 801b5fc:	0019      	movs	r1, r3
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b602:	001a      	movs	r2, r3
 801b604:	1dbb      	adds	r3, r7, #6
 801b606:	881b      	ldrh	r3, [r3, #0]
 801b608:	f7f8 f8ea 	bl	80137e0 <HAL_DMA_Start_IT>
 801b60c:	1e03      	subs	r3, r0, #0
 801b60e:	d009      	beq.n	801b624 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	2290      	movs	r2, #144	@ 0x90
 801b614:	2110      	movs	r1, #16
 801b616:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	228c      	movs	r2, #140	@ 0x8c
 801b61c:	2120      	movs	r1, #32
 801b61e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801b620:	2301      	movs	r3, #1
 801b622:	e050      	b.n	801b6c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	691b      	ldr	r3, [r3, #16]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d019      	beq.n	801b660 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b62c:	f3ef 8310 	mrs	r3, PRIMASK
 801b630:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801b632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b636:	2301      	movs	r3, #1
 801b638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b63c:	f383 8810 	msr	PRIMASK, r3
}
 801b640:	46c0      	nop			@ (mov r8, r8)
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	681a      	ldr	r2, [r3, #0]
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	2180      	movs	r1, #128	@ 0x80
 801b64e:	0049      	lsls	r1, r1, #1
 801b650:	430a      	orrs	r2, r1
 801b652:	601a      	str	r2, [r3, #0]
 801b654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b656:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b65a:	f383 8810 	msr	PRIMASK, r3
}
 801b65e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b660:	f3ef 8310 	mrs	r3, PRIMASK
 801b664:	613b      	str	r3, [r7, #16]
  return(result);
 801b666:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b668:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b66a:	2301      	movs	r3, #1
 801b66c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b66e:	697b      	ldr	r3, [r7, #20]
 801b670:	f383 8810 	msr	PRIMASK, r3
}
 801b674:	46c0      	nop			@ (mov r8, r8)
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	689a      	ldr	r2, [r3, #8]
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	2101      	movs	r1, #1
 801b682:	430a      	orrs	r2, r1
 801b684:	609a      	str	r2, [r3, #8]
 801b686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b68a:	69bb      	ldr	r3, [r7, #24]
 801b68c:	f383 8810 	msr	PRIMASK, r3
}
 801b690:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b692:	f3ef 8310 	mrs	r3, PRIMASK
 801b696:	61fb      	str	r3, [r7, #28]
  return(result);
 801b698:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b69a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b69c:	2301      	movs	r3, #1
 801b69e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6a0:	6a3b      	ldr	r3, [r7, #32]
 801b6a2:	f383 8810 	msr	PRIMASK, r3
}
 801b6a6:	46c0      	nop			@ (mov r8, r8)
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	689a      	ldr	r2, [r3, #8]
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	2140      	movs	r1, #64	@ 0x40
 801b6b4:	430a      	orrs	r2, r1
 801b6b6:	609a      	str	r2, [r3, #8]
 801b6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b6ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6be:	f383 8810 	msr	PRIMASK, r3
}
 801b6c2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801b6c4:	2300      	movs	r3, #0
}
 801b6c6:	0018      	movs	r0, r3
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	b010      	add	sp, #64	@ 0x40
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	46c0      	nop			@ (mov r8, r8)
 801b6d0:	0801b8e1 	.word	0x0801b8e1
 801b6d4:	0801ba11 	.word	0x0801ba11
 801b6d8:	0801ba53 	.word	0x0801ba53

0801b6dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b08a      	sub	sp, #40	@ 0x28
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b6e4:	f3ef 8310 	mrs	r3, PRIMASK
 801b6e8:	60bb      	str	r3, [r7, #8]
  return(result);
 801b6ea:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801b6ec:	627b      	str	r3, [r7, #36]	@ 0x24
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	f383 8810 	msr	PRIMASK, r3
}
 801b6f8:	46c0      	nop			@ (mov r8, r8)
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	681a      	ldr	r2, [r3, #0]
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	21c0      	movs	r1, #192	@ 0xc0
 801b706:	438a      	bics	r2, r1
 801b708:	601a      	str	r2, [r3, #0]
 801b70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b70c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b70e:	693b      	ldr	r3, [r7, #16]
 801b710:	f383 8810 	msr	PRIMASK, r3
}
 801b714:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b716:	f3ef 8310 	mrs	r3, PRIMASK
 801b71a:	617b      	str	r3, [r7, #20]
  return(result);
 801b71c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801b71e:	623b      	str	r3, [r7, #32]
 801b720:	2301      	movs	r3, #1
 801b722:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b724:	69bb      	ldr	r3, [r7, #24]
 801b726:	f383 8810 	msr	PRIMASK, r3
}
 801b72a:	46c0      	nop			@ (mov r8, r8)
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	689a      	ldr	r2, [r3, #8]
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	4908      	ldr	r1, [pc, #32]	@ (801b758 <UART_EndTxTransfer+0x7c>)
 801b738:	400a      	ands	r2, r1
 801b73a:	609a      	str	r2, [r3, #8]
 801b73c:	6a3b      	ldr	r3, [r7, #32]
 801b73e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b740:	69fb      	ldr	r3, [r7, #28]
 801b742:	f383 8810 	msr	PRIMASK, r3
}
 801b746:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	2288      	movs	r2, #136	@ 0x88
 801b74c:	2120      	movs	r1, #32
 801b74e:	5099      	str	r1, [r3, r2]
}
 801b750:	46c0      	nop			@ (mov r8, r8)
 801b752:	46bd      	mov	sp, r7
 801b754:	b00a      	add	sp, #40	@ 0x28
 801b756:	bd80      	pop	{r7, pc}
 801b758:	ff7fffff 	.word	0xff7fffff

0801b75c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b08e      	sub	sp, #56	@ 0x38
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b764:	f3ef 8310 	mrs	r3, PRIMASK
 801b768:	617b      	str	r3, [r7, #20]
  return(result);
 801b76a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b76c:	637b      	str	r3, [r7, #52]	@ 0x34
 801b76e:	2301      	movs	r3, #1
 801b770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b772:	69bb      	ldr	r3, [r7, #24]
 801b774:	f383 8810 	msr	PRIMASK, r3
}
 801b778:	46c0      	nop			@ (mov r8, r8)
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	681a      	ldr	r2, [r3, #0]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	4926      	ldr	r1, [pc, #152]	@ (801b820 <UART_EndRxTransfer+0xc4>)
 801b786:	400a      	ands	r2, r1
 801b788:	601a      	str	r2, [r3, #0]
 801b78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b78c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b78e:	69fb      	ldr	r3, [r7, #28]
 801b790:	f383 8810 	msr	PRIMASK, r3
}
 801b794:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b796:	f3ef 8310 	mrs	r3, PRIMASK
 801b79a:	623b      	str	r3, [r7, #32]
  return(result);
 801b79c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b79e:	633b      	str	r3, [r7, #48]	@ 0x30
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7a6:	f383 8810 	msr	PRIMASK, r3
}
 801b7aa:	46c0      	nop			@ (mov r8, r8)
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	689a      	ldr	r2, [r3, #8]
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	491b      	ldr	r1, [pc, #108]	@ (801b824 <UART_EndRxTransfer+0xc8>)
 801b7b8:	400a      	ands	r2, r1
 801b7ba:	609a      	str	r2, [r3, #8]
 801b7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7c2:	f383 8810 	msr	PRIMASK, r3
}
 801b7c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b7cc:	2b01      	cmp	r3, #1
 801b7ce:	d118      	bne.n	801b802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b7d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b7d4:	60bb      	str	r3, [r7, #8]
  return(result);
 801b7d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b7da:	2301      	movs	r3, #1
 801b7dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	f383 8810 	msr	PRIMASK, r3
}
 801b7e4:	46c0      	nop			@ (mov r8, r8)
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	681a      	ldr	r2, [r3, #0]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	2110      	movs	r1, #16
 801b7f2:	438a      	bics	r2, r1
 801b7f4:	601a      	str	r2, [r3, #0]
 801b7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7fa:	693b      	ldr	r3, [r7, #16]
 801b7fc:	f383 8810 	msr	PRIMASK, r3
}
 801b800:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	228c      	movs	r2, #140	@ 0x8c
 801b806:	2120      	movs	r1, #32
 801b808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	2200      	movs	r2, #0
 801b80e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	2200      	movs	r2, #0
 801b814:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801b816:	46c0      	nop			@ (mov r8, r8)
 801b818:	46bd      	mov	sp, r7
 801b81a:	b00e      	add	sp, #56	@ 0x38
 801b81c:	bd80      	pop	{r7, pc}
 801b81e:	46c0      	nop			@ (mov r8, r8)
 801b820:	fffffedf 	.word	0xfffffedf
 801b824:	effffffe 	.word	0xeffffffe

0801b828 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b08c      	sub	sp, #48	@ 0x30
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b834:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	2220      	movs	r2, #32
 801b83e:	4013      	ands	r3, r2
 801b840:	d135      	bne.n	801b8ae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801b842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b844:	2256      	movs	r2, #86	@ 0x56
 801b846:	2100      	movs	r1, #0
 801b848:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b84a:	f3ef 8310 	mrs	r3, PRIMASK
 801b84e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b850:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b852:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b854:	2301      	movs	r3, #1
 801b856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b858:	693b      	ldr	r3, [r7, #16]
 801b85a:	f383 8810 	msr	PRIMASK, r3
}
 801b85e:	46c0      	nop			@ (mov r8, r8)
 801b860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	689a      	ldr	r2, [r3, #8]
 801b866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	2180      	movs	r1, #128	@ 0x80
 801b86c:	438a      	bics	r2, r1
 801b86e:	609a      	str	r2, [r3, #8]
 801b870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b872:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b874:	697b      	ldr	r3, [r7, #20]
 801b876:	f383 8810 	msr	PRIMASK, r3
}
 801b87a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b87c:	f3ef 8310 	mrs	r3, PRIMASK
 801b880:	61bb      	str	r3, [r7, #24]
  return(result);
 801b882:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b884:	627b      	str	r3, [r7, #36]	@ 0x24
 801b886:	2301      	movs	r3, #1
 801b888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b88a:	69fb      	ldr	r3, [r7, #28]
 801b88c:	f383 8810 	msr	PRIMASK, r3
}
 801b890:	46c0      	nop			@ (mov r8, r8)
 801b892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	681a      	ldr	r2, [r3, #0]
 801b898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	2140      	movs	r1, #64	@ 0x40
 801b89e:	430a      	orrs	r2, r1
 801b8a0:	601a      	str	r2, [r3, #0]
 801b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8a6:	6a3b      	ldr	r3, [r7, #32]
 801b8a8:	f383 8810 	msr	PRIMASK, r3
}
 801b8ac:	e004      	b.n	801b8b8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801b8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8b0:	0018      	movs	r0, r3
 801b8b2:	f7ff fa99 	bl	801ade8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b8b6:	46c0      	nop			@ (mov r8, r8)
 801b8b8:	46c0      	nop			@ (mov r8, r8)
 801b8ba:	46bd      	mov	sp, r7
 801b8bc:	b00c      	add	sp, #48	@ 0x30
 801b8be:	bd80      	pop	{r7, pc}

0801b8c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b084      	sub	sp, #16
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	0018      	movs	r0, r3
 801b8d2:	f7ff fa91 	bl	801adf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b8d6:	46c0      	nop			@ (mov r8, r8)
 801b8d8:	46bd      	mov	sp, r7
 801b8da:	b004      	add	sp, #16
 801b8dc:	bd80      	pop	{r7, pc}
	...

0801b8e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b094      	sub	sp, #80	@ 0x50
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	2220      	movs	r2, #32
 801b8f6:	4013      	ands	r3, r2
 801b8f8:	d16f      	bne.n	801b9da <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801b8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8fc:	225e      	movs	r2, #94	@ 0x5e
 801b8fe:	2100      	movs	r1, #0
 801b900:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b902:	f3ef 8310 	mrs	r3, PRIMASK
 801b906:	61bb      	str	r3, [r7, #24]
  return(result);
 801b908:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b90a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b90c:	2301      	movs	r3, #1
 801b90e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b910:	69fb      	ldr	r3, [r7, #28]
 801b912:	f383 8810 	msr	PRIMASK, r3
}
 801b916:	46c0      	nop			@ (mov r8, r8)
 801b918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	681a      	ldr	r2, [r3, #0]
 801b91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	493a      	ldr	r1, [pc, #232]	@ (801ba0c <UART_DMAReceiveCplt+0x12c>)
 801b924:	400a      	ands	r2, r1
 801b926:	601a      	str	r2, [r3, #0]
 801b928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b92a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b92c:	6a3b      	ldr	r3, [r7, #32]
 801b92e:	f383 8810 	msr	PRIMASK, r3
}
 801b932:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b934:	f3ef 8310 	mrs	r3, PRIMASK
 801b938:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b93c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b93e:	2301      	movs	r3, #1
 801b940:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b944:	f383 8810 	msr	PRIMASK, r3
}
 801b948:	46c0      	nop			@ (mov r8, r8)
 801b94a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	689a      	ldr	r2, [r3, #8]
 801b950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	2101      	movs	r1, #1
 801b956:	438a      	bics	r2, r1
 801b958:	609a      	str	r2, [r3, #8]
 801b95a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b960:	f383 8810 	msr	PRIMASK, r3
}
 801b964:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b966:	f3ef 8310 	mrs	r3, PRIMASK
 801b96a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b96e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b970:	2301      	movs	r3, #1
 801b972:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b976:	f383 8810 	msr	PRIMASK, r3
}
 801b97a:	46c0      	nop			@ (mov r8, r8)
 801b97c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	689a      	ldr	r2, [r3, #8]
 801b982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	2140      	movs	r1, #64	@ 0x40
 801b988:	438a      	bics	r2, r1
 801b98a:	609a      	str	r2, [r3, #8]
 801b98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b98e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b992:	f383 8810 	msr	PRIMASK, r3
}
 801b996:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b99a:	228c      	movs	r2, #140	@ 0x8c
 801b99c:	2120      	movs	r1, #32
 801b99e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b9a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	d118      	bne.n	801b9da <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b9a8:	f3ef 8310 	mrs	r3, PRIMASK
 801b9ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801b9ae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b9b2:	2301      	movs	r3, #1
 801b9b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9b6:	693b      	ldr	r3, [r7, #16]
 801b9b8:	f383 8810 	msr	PRIMASK, r3
}
 801b9bc:	46c0      	nop			@ (mov r8, r8)
 801b9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	681a      	ldr	r2, [r3, #0]
 801b9c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	2110      	movs	r1, #16
 801b9ca:	438a      	bics	r2, r1
 801b9cc:	601a      	str	r2, [r3, #0]
 801b9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9d2:	697b      	ldr	r3, [r7, #20]
 801b9d4:	f383 8810 	msr	PRIMASK, r3
}
 801b9d8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9dc:	2200      	movs	r2, #0
 801b9de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9e4:	2b01      	cmp	r3, #1
 801b9e6:	d108      	bne.n	801b9fa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9ea:	225c      	movs	r2, #92	@ 0x5c
 801b9ec:	5a9a      	ldrh	r2, [r3, r2]
 801b9ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9f0:	0011      	movs	r1, r2
 801b9f2:	0018      	movs	r0, r3
 801b9f4:	f7ff fa20 	bl	801ae38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b9f8:	e003      	b.n	801ba02 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 801b9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9fc:	0018      	movs	r0, r3
 801b9fe:	f7ff fa03 	bl	801ae08 <HAL_UART_RxCpltCallback>
}
 801ba02:	46c0      	nop			@ (mov r8, r8)
 801ba04:	46bd      	mov	sp, r7
 801ba06:	b014      	add	sp, #80	@ 0x50
 801ba08:	bd80      	pop	{r7, pc}
 801ba0a:	46c0      	nop			@ (mov r8, r8)
 801ba0c:	fffffeff 	.word	0xfffffeff

0801ba10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b084      	sub	sp, #16
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801ba1e:	68fb      	ldr	r3, [r7, #12]
 801ba20:	2201      	movs	r2, #1
 801ba22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ba28:	2b01      	cmp	r3, #1
 801ba2a:	d10a      	bne.n	801ba42 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	225c      	movs	r2, #92	@ 0x5c
 801ba30:	5a9b      	ldrh	r3, [r3, r2]
 801ba32:	085b      	lsrs	r3, r3, #1
 801ba34:	b29a      	uxth	r2, r3
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	0011      	movs	r1, r2
 801ba3a:	0018      	movs	r0, r3
 801ba3c:	f7ff f9fc 	bl	801ae38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ba40:	e003      	b.n	801ba4a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	0018      	movs	r0, r3
 801ba46:	f7ff f9e7 	bl	801ae18 <HAL_UART_RxHalfCpltCallback>
}
 801ba4a:	46c0      	nop			@ (mov r8, r8)
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	b004      	add	sp, #16
 801ba50:	bd80      	pop	{r7, pc}

0801ba52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ba52:	b580      	push	{r7, lr}
 801ba54:	b086      	sub	sp, #24
 801ba56:	af00      	add	r7, sp, #0
 801ba58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ba60:	697b      	ldr	r3, [r7, #20]
 801ba62:	2288      	movs	r2, #136	@ 0x88
 801ba64:	589b      	ldr	r3, [r3, r2]
 801ba66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801ba68:	697b      	ldr	r3, [r7, #20]
 801ba6a:	228c      	movs	r2, #140	@ 0x8c
 801ba6c:	589b      	ldr	r3, [r3, r2]
 801ba6e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801ba70:	697b      	ldr	r3, [r7, #20]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	689b      	ldr	r3, [r3, #8]
 801ba76:	2280      	movs	r2, #128	@ 0x80
 801ba78:	4013      	ands	r3, r2
 801ba7a:	2b80      	cmp	r3, #128	@ 0x80
 801ba7c:	d10a      	bne.n	801ba94 <UART_DMAError+0x42>
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	2b21      	cmp	r3, #33	@ 0x21
 801ba82:	d107      	bne.n	801ba94 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801ba84:	697b      	ldr	r3, [r7, #20]
 801ba86:	2256      	movs	r2, #86	@ 0x56
 801ba88:	2100      	movs	r1, #0
 801ba8a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801ba8c:	697b      	ldr	r3, [r7, #20]
 801ba8e:	0018      	movs	r0, r3
 801ba90:	f7ff fe24 	bl	801b6dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	689b      	ldr	r3, [r3, #8]
 801ba9a:	2240      	movs	r2, #64	@ 0x40
 801ba9c:	4013      	ands	r3, r2
 801ba9e:	2b40      	cmp	r3, #64	@ 0x40
 801baa0:	d10a      	bne.n	801bab8 <UART_DMAError+0x66>
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	2b22      	cmp	r3, #34	@ 0x22
 801baa6:	d107      	bne.n	801bab8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801baa8:	697b      	ldr	r3, [r7, #20]
 801baaa:	225e      	movs	r2, #94	@ 0x5e
 801baac:	2100      	movs	r1, #0
 801baae:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801bab0:	697b      	ldr	r3, [r7, #20]
 801bab2:	0018      	movs	r0, r3
 801bab4:	f7ff fe52 	bl	801b75c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801bab8:	697b      	ldr	r3, [r7, #20]
 801baba:	2290      	movs	r2, #144	@ 0x90
 801babc:	589b      	ldr	r3, [r3, r2]
 801babe:	2210      	movs	r2, #16
 801bac0:	431a      	orrs	r2, r3
 801bac2:	697b      	ldr	r3, [r7, #20]
 801bac4:	2190      	movs	r1, #144	@ 0x90
 801bac6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	0018      	movs	r0, r3
 801bacc:	f7ff f9ac 	bl	801ae28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bad0:	46c0      	nop			@ (mov r8, r8)
 801bad2:	46bd      	mov	sp, r7
 801bad4:	b006      	add	sp, #24
 801bad6:	bd80      	pop	{r7, pc}

0801bad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b084      	sub	sp, #16
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	225e      	movs	r2, #94	@ 0x5e
 801baea:	2100      	movs	r1, #0
 801baec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	0018      	movs	r0, r3
 801baf2:	f7ff f999 	bl	801ae28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801baf6:	46c0      	nop			@ (mov r8, r8)
 801baf8:	46bd      	mov	sp, r7
 801bafa:	b004      	add	sp, #16
 801bafc:	bd80      	pop	{r7, pc}

0801bafe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801bafe:	b580      	push	{r7, lr}
 801bb00:	b086      	sub	sp, #24
 801bb02:	af00      	add	r7, sp, #0
 801bb04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bb06:	f3ef 8310 	mrs	r3, PRIMASK
 801bb0a:	60bb      	str	r3, [r7, #8]
  return(result);
 801bb0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801bb0e:	617b      	str	r3, [r7, #20]
 801bb10:	2301      	movs	r3, #1
 801bb12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	f383 8810 	msr	PRIMASK, r3
}
 801bb1a:	46c0      	nop			@ (mov r8, r8)
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	681a      	ldr	r2, [r3, #0]
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	2140      	movs	r1, #64	@ 0x40
 801bb28:	438a      	bics	r2, r1
 801bb2a:	601a      	str	r2, [r3, #0]
 801bb2c:	697b      	ldr	r3, [r7, #20]
 801bb2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb30:	693b      	ldr	r3, [r7, #16]
 801bb32:	f383 8810 	msr	PRIMASK, r3
}
 801bb36:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	2288      	movs	r2, #136	@ 0x88
 801bb3c:	2120      	movs	r1, #32
 801bb3e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	2200      	movs	r2, #0
 801bb44:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	0018      	movs	r0, r3
 801bb4a:	f7ff f94d 	bl	801ade8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bb4e:	46c0      	nop			@ (mov r8, r8)
 801bb50:	46bd      	mov	sp, r7
 801bb52:	b006      	add	sp, #24
 801bb54:	bd80      	pop	{r7, pc}

0801bb56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801bb56:	b580      	push	{r7, lr}
 801bb58:	b082      	sub	sp, #8
 801bb5a:	af00      	add	r7, sp, #0
 801bb5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801bb5e:	46c0      	nop			@ (mov r8, r8)
 801bb60:	46bd      	mov	sp, r7
 801bb62:	b002      	add	sp, #8
 801bb64:	bd80      	pop	{r7, pc}

0801bb66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801bb66:	b580      	push	{r7, lr}
 801bb68:	b082      	sub	sp, #8
 801bb6a:	af00      	add	r7, sp, #0
 801bb6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801bb6e:	46c0      	nop			@ (mov r8, r8)
 801bb70:	46bd      	mov	sp, r7
 801bb72:	b002      	add	sp, #8
 801bb74:	bd80      	pop	{r7, pc}

0801bb76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801bb76:	b580      	push	{r7, lr}
 801bb78:	b082      	sub	sp, #8
 801bb7a:	af00      	add	r7, sp, #0
 801bb7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801bb7e:	46c0      	nop			@ (mov r8, r8)
 801bb80:	46bd      	mov	sp, r7
 801bb82:	b002      	add	sp, #8
 801bb84:	bd80      	pop	{r7, pc}
	...

0801bb88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b084      	sub	sp, #16
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	2284      	movs	r2, #132	@ 0x84
 801bb94:	5c9b      	ldrb	r3, [r3, r2]
 801bb96:	2b01      	cmp	r3, #1
 801bb98:	d101      	bne.n	801bb9e <HAL_UARTEx_DisableFifoMode+0x16>
 801bb9a:	2302      	movs	r3, #2
 801bb9c:	e027      	b.n	801bbee <HAL_UARTEx_DisableFifoMode+0x66>
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	2284      	movs	r2, #132	@ 0x84
 801bba2:	2101      	movs	r1, #1
 801bba4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	2288      	movs	r2, #136	@ 0x88
 801bbaa:	2124      	movs	r1, #36	@ 0x24
 801bbac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	681a      	ldr	r2, [r3, #0]
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	2101      	movs	r1, #1
 801bbc2:	438a      	bics	r2, r1
 801bbc4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	4a0b      	ldr	r2, [pc, #44]	@ (801bbf8 <HAL_UARTEx_DisableFifoMode+0x70>)
 801bbca:	4013      	ands	r3, r2
 801bbcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	68fa      	ldr	r2, [r7, #12]
 801bbda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	2288      	movs	r2, #136	@ 0x88
 801bbe0:	2120      	movs	r1, #32
 801bbe2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	2284      	movs	r2, #132	@ 0x84
 801bbe8:	2100      	movs	r1, #0
 801bbea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bbec:	2300      	movs	r3, #0
}
 801bbee:	0018      	movs	r0, r3
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	b004      	add	sp, #16
 801bbf4:	bd80      	pop	{r7, pc}
 801bbf6:	46c0      	nop			@ (mov r8, r8)
 801bbf8:	dfffffff 	.word	0xdfffffff

0801bbfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b084      	sub	sp, #16
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	6078      	str	r0, [r7, #4]
 801bc04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	2284      	movs	r2, #132	@ 0x84
 801bc0a:	5c9b      	ldrb	r3, [r3, r2]
 801bc0c:	2b01      	cmp	r3, #1
 801bc0e:	d101      	bne.n	801bc14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801bc10:	2302      	movs	r3, #2
 801bc12:	e02e      	b.n	801bc72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	2284      	movs	r2, #132	@ 0x84
 801bc18:	2101      	movs	r1, #1
 801bc1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	2288      	movs	r2, #136	@ 0x88
 801bc20:	2124      	movs	r1, #36	@ 0x24
 801bc22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	681a      	ldr	r2, [r3, #0]
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	2101      	movs	r1, #1
 801bc38:	438a      	bics	r2, r1
 801bc3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	689b      	ldr	r3, [r3, #8]
 801bc42:	00db      	lsls	r3, r3, #3
 801bc44:	08d9      	lsrs	r1, r3, #3
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	683a      	ldr	r2, [r7, #0]
 801bc4c:	430a      	orrs	r2, r1
 801bc4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	0018      	movs	r0, r3
 801bc54:	f000 f854 	bl	801bd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	68fa      	ldr	r2, [r7, #12]
 801bc5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	2288      	movs	r2, #136	@ 0x88
 801bc64:	2120      	movs	r1, #32
 801bc66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	2284      	movs	r2, #132	@ 0x84
 801bc6c:	2100      	movs	r1, #0
 801bc6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bc70:	2300      	movs	r3, #0
}
 801bc72:	0018      	movs	r0, r3
 801bc74:	46bd      	mov	sp, r7
 801bc76:	b004      	add	sp, #16
 801bc78:	bd80      	pop	{r7, pc}
	...

0801bc7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b084      	sub	sp, #16
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
 801bc84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	2284      	movs	r2, #132	@ 0x84
 801bc8a:	5c9b      	ldrb	r3, [r3, r2]
 801bc8c:	2b01      	cmp	r3, #1
 801bc8e:	d101      	bne.n	801bc94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801bc90:	2302      	movs	r3, #2
 801bc92:	e02f      	b.n	801bcf4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	2284      	movs	r2, #132	@ 0x84
 801bc98:	2101      	movs	r1, #1
 801bc9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	2288      	movs	r2, #136	@ 0x88
 801bca0:	2124      	movs	r1, #36	@ 0x24
 801bca2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	2101      	movs	r1, #1
 801bcb8:	438a      	bics	r2, r1
 801bcba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	689b      	ldr	r3, [r3, #8]
 801bcc2:	4a0e      	ldr	r2, [pc, #56]	@ (801bcfc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801bcc4:	4013      	ands	r3, r2
 801bcc6:	0019      	movs	r1, r3
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	683a      	ldr	r2, [r7, #0]
 801bcce:	430a      	orrs	r2, r1
 801bcd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	0018      	movs	r0, r3
 801bcd6:	f000 f813 	bl	801bd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	68fa      	ldr	r2, [r7, #12]
 801bce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	2288      	movs	r2, #136	@ 0x88
 801bce6:	2120      	movs	r1, #32
 801bce8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	2284      	movs	r2, #132	@ 0x84
 801bcee:	2100      	movs	r1, #0
 801bcf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bcf2:	2300      	movs	r3, #0
}
 801bcf4:	0018      	movs	r0, r3
 801bcf6:	46bd      	mov	sp, r7
 801bcf8:	b004      	add	sp, #16
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	f1ffffff 	.word	0xf1ffffff

0801bd00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801bd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd02:	b085      	sub	sp, #20
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d108      	bne.n	801bd22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	226a      	movs	r2, #106	@ 0x6a
 801bd14:	2101      	movs	r1, #1
 801bd16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	2268      	movs	r2, #104	@ 0x68
 801bd1c:	2101      	movs	r1, #1
 801bd1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801bd20:	e043      	b.n	801bdaa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801bd22:	260f      	movs	r6, #15
 801bd24:	19bb      	adds	r3, r7, r6
 801bd26:	2208      	movs	r2, #8
 801bd28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801bd2a:	200e      	movs	r0, #14
 801bd2c:	183b      	adds	r3, r7, r0
 801bd2e:	2208      	movs	r2, #8
 801bd30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	681b      	ldr	r3, [r3, #0]
 801bd36:	689b      	ldr	r3, [r3, #8]
 801bd38:	0e5b      	lsrs	r3, r3, #25
 801bd3a:	b2da      	uxtb	r2, r3
 801bd3c:	240d      	movs	r4, #13
 801bd3e:	193b      	adds	r3, r7, r4
 801bd40:	2107      	movs	r1, #7
 801bd42:	400a      	ands	r2, r1
 801bd44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	689b      	ldr	r3, [r3, #8]
 801bd4c:	0f5b      	lsrs	r3, r3, #29
 801bd4e:	b2da      	uxtb	r2, r3
 801bd50:	250c      	movs	r5, #12
 801bd52:	197b      	adds	r3, r7, r5
 801bd54:	2107      	movs	r1, #7
 801bd56:	400a      	ands	r2, r1
 801bd58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bd5a:	183b      	adds	r3, r7, r0
 801bd5c:	781b      	ldrb	r3, [r3, #0]
 801bd5e:	197a      	adds	r2, r7, r5
 801bd60:	7812      	ldrb	r2, [r2, #0]
 801bd62:	4914      	ldr	r1, [pc, #80]	@ (801bdb4 <UARTEx_SetNbDataToProcess+0xb4>)
 801bd64:	5c8a      	ldrb	r2, [r1, r2]
 801bd66:	435a      	muls	r2, r3
 801bd68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801bd6a:	197b      	adds	r3, r7, r5
 801bd6c:	781b      	ldrb	r3, [r3, #0]
 801bd6e:	4a12      	ldr	r2, [pc, #72]	@ (801bdb8 <UARTEx_SetNbDataToProcess+0xb8>)
 801bd70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bd72:	0019      	movs	r1, r3
 801bd74:	f7e4 fa5a 	bl	800022c <__divsi3>
 801bd78:	0003      	movs	r3, r0
 801bd7a:	b299      	uxth	r1, r3
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	226a      	movs	r2, #106	@ 0x6a
 801bd80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bd82:	19bb      	adds	r3, r7, r6
 801bd84:	781b      	ldrb	r3, [r3, #0]
 801bd86:	193a      	adds	r2, r7, r4
 801bd88:	7812      	ldrb	r2, [r2, #0]
 801bd8a:	490a      	ldr	r1, [pc, #40]	@ (801bdb4 <UARTEx_SetNbDataToProcess+0xb4>)
 801bd8c:	5c8a      	ldrb	r2, [r1, r2]
 801bd8e:	435a      	muls	r2, r3
 801bd90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801bd92:	193b      	adds	r3, r7, r4
 801bd94:	781b      	ldrb	r3, [r3, #0]
 801bd96:	4a08      	ldr	r2, [pc, #32]	@ (801bdb8 <UARTEx_SetNbDataToProcess+0xb8>)
 801bd98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bd9a:	0019      	movs	r1, r3
 801bd9c:	f7e4 fa46 	bl	800022c <__divsi3>
 801bda0:	0003      	movs	r3, r0
 801bda2:	b299      	uxth	r1, r3
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2268      	movs	r2, #104	@ 0x68
 801bda8:	5299      	strh	r1, [r3, r2]
}
 801bdaa:	46c0      	nop			@ (mov r8, r8)
 801bdac:	46bd      	mov	sp, r7
 801bdae:	b005      	add	sp, #20
 801bdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdb2:	46c0      	nop			@ (mov r8, r8)
 801bdb4:	0801c620 	.word	0x0801c620
 801bdb8:	0801c628 	.word	0x0801c628

0801bdbc <malloc>:
 801bdbc:	b510      	push	{r4, lr}
 801bdbe:	4b03      	ldr	r3, [pc, #12]	@ (801bdcc <malloc+0x10>)
 801bdc0:	0001      	movs	r1, r0
 801bdc2:	6818      	ldr	r0, [r3, #0]
 801bdc4:	f000 f830 	bl	801be28 <_malloc_r>
 801bdc8:	bd10      	pop	{r4, pc}
 801bdca:	46c0      	nop			@ (mov r8, r8)
 801bdcc:	20000284 	.word	0x20000284

0801bdd0 <free>:
 801bdd0:	b510      	push	{r4, lr}
 801bdd2:	4b03      	ldr	r3, [pc, #12]	@ (801bde0 <free+0x10>)
 801bdd4:	0001      	movs	r1, r0
 801bdd6:	6818      	ldr	r0, [r3, #0]
 801bdd8:	f000 f938 	bl	801c04c <_free_r>
 801bddc:	bd10      	pop	{r4, pc}
 801bdde:	46c0      	nop			@ (mov r8, r8)
 801bde0:	20000284 	.word	0x20000284

0801bde4 <sbrk_aligned>:
 801bde4:	b570      	push	{r4, r5, r6, lr}
 801bde6:	4e0f      	ldr	r6, [pc, #60]	@ (801be24 <sbrk_aligned+0x40>)
 801bde8:	000d      	movs	r5, r1
 801bdea:	6831      	ldr	r1, [r6, #0]
 801bdec:	0004      	movs	r4, r0
 801bdee:	2900      	cmp	r1, #0
 801bdf0:	d102      	bne.n	801bdf8 <sbrk_aligned+0x14>
 801bdf2:	f000 f8e3 	bl	801bfbc <_sbrk_r>
 801bdf6:	6030      	str	r0, [r6, #0]
 801bdf8:	0029      	movs	r1, r5
 801bdfa:	0020      	movs	r0, r4
 801bdfc:	f000 f8de 	bl	801bfbc <_sbrk_r>
 801be00:	1c43      	adds	r3, r0, #1
 801be02:	d103      	bne.n	801be0c <sbrk_aligned+0x28>
 801be04:	2501      	movs	r5, #1
 801be06:	426d      	negs	r5, r5
 801be08:	0028      	movs	r0, r5
 801be0a:	bd70      	pop	{r4, r5, r6, pc}
 801be0c:	2303      	movs	r3, #3
 801be0e:	1cc5      	adds	r5, r0, #3
 801be10:	439d      	bics	r5, r3
 801be12:	42a8      	cmp	r0, r5
 801be14:	d0f8      	beq.n	801be08 <sbrk_aligned+0x24>
 801be16:	1a29      	subs	r1, r5, r0
 801be18:	0020      	movs	r0, r4
 801be1a:	f000 f8cf 	bl	801bfbc <_sbrk_r>
 801be1e:	3001      	adds	r0, #1
 801be20:	d1f2      	bne.n	801be08 <sbrk_aligned+0x24>
 801be22:	e7ef      	b.n	801be04 <sbrk_aligned+0x20>
 801be24:	20002290 	.word	0x20002290

0801be28 <_malloc_r>:
 801be28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be2a:	2203      	movs	r2, #3
 801be2c:	1ccb      	adds	r3, r1, #3
 801be2e:	4393      	bics	r3, r2
 801be30:	3308      	adds	r3, #8
 801be32:	0005      	movs	r5, r0
 801be34:	001f      	movs	r7, r3
 801be36:	2b0c      	cmp	r3, #12
 801be38:	d234      	bcs.n	801bea4 <_malloc_r+0x7c>
 801be3a:	270c      	movs	r7, #12
 801be3c:	42b9      	cmp	r1, r7
 801be3e:	d833      	bhi.n	801bea8 <_malloc_r+0x80>
 801be40:	0028      	movs	r0, r5
 801be42:	f000 f871 	bl	801bf28 <__malloc_lock>
 801be46:	4e37      	ldr	r6, [pc, #220]	@ (801bf24 <_malloc_r+0xfc>)
 801be48:	6833      	ldr	r3, [r6, #0]
 801be4a:	001c      	movs	r4, r3
 801be4c:	2c00      	cmp	r4, #0
 801be4e:	d12f      	bne.n	801beb0 <_malloc_r+0x88>
 801be50:	0039      	movs	r1, r7
 801be52:	0028      	movs	r0, r5
 801be54:	f7ff ffc6 	bl	801bde4 <sbrk_aligned>
 801be58:	0004      	movs	r4, r0
 801be5a:	1c43      	adds	r3, r0, #1
 801be5c:	d15f      	bne.n	801bf1e <_malloc_r+0xf6>
 801be5e:	6834      	ldr	r4, [r6, #0]
 801be60:	9400      	str	r4, [sp, #0]
 801be62:	9b00      	ldr	r3, [sp, #0]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d14a      	bne.n	801befe <_malloc_r+0xd6>
 801be68:	2c00      	cmp	r4, #0
 801be6a:	d052      	beq.n	801bf12 <_malloc_r+0xea>
 801be6c:	6823      	ldr	r3, [r4, #0]
 801be6e:	0028      	movs	r0, r5
 801be70:	18e3      	adds	r3, r4, r3
 801be72:	9900      	ldr	r1, [sp, #0]
 801be74:	9301      	str	r3, [sp, #4]
 801be76:	f000 f8a1 	bl	801bfbc <_sbrk_r>
 801be7a:	9b01      	ldr	r3, [sp, #4]
 801be7c:	4283      	cmp	r3, r0
 801be7e:	d148      	bne.n	801bf12 <_malloc_r+0xea>
 801be80:	6823      	ldr	r3, [r4, #0]
 801be82:	0028      	movs	r0, r5
 801be84:	1aff      	subs	r7, r7, r3
 801be86:	0039      	movs	r1, r7
 801be88:	f7ff ffac 	bl	801bde4 <sbrk_aligned>
 801be8c:	3001      	adds	r0, #1
 801be8e:	d040      	beq.n	801bf12 <_malloc_r+0xea>
 801be90:	6823      	ldr	r3, [r4, #0]
 801be92:	19db      	adds	r3, r3, r7
 801be94:	6023      	str	r3, [r4, #0]
 801be96:	6833      	ldr	r3, [r6, #0]
 801be98:	685a      	ldr	r2, [r3, #4]
 801be9a:	2a00      	cmp	r2, #0
 801be9c:	d133      	bne.n	801bf06 <_malloc_r+0xde>
 801be9e:	9b00      	ldr	r3, [sp, #0]
 801bea0:	6033      	str	r3, [r6, #0]
 801bea2:	e019      	b.n	801bed8 <_malloc_r+0xb0>
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	dac9      	bge.n	801be3c <_malloc_r+0x14>
 801bea8:	230c      	movs	r3, #12
 801beaa:	602b      	str	r3, [r5, #0]
 801beac:	2000      	movs	r0, #0
 801beae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801beb0:	6821      	ldr	r1, [r4, #0]
 801beb2:	1bc9      	subs	r1, r1, r7
 801beb4:	d420      	bmi.n	801bef8 <_malloc_r+0xd0>
 801beb6:	290b      	cmp	r1, #11
 801beb8:	d90a      	bls.n	801bed0 <_malloc_r+0xa8>
 801beba:	19e2      	adds	r2, r4, r7
 801bebc:	6027      	str	r7, [r4, #0]
 801bebe:	42a3      	cmp	r3, r4
 801bec0:	d104      	bne.n	801becc <_malloc_r+0xa4>
 801bec2:	6032      	str	r2, [r6, #0]
 801bec4:	6863      	ldr	r3, [r4, #4]
 801bec6:	6011      	str	r1, [r2, #0]
 801bec8:	6053      	str	r3, [r2, #4]
 801beca:	e005      	b.n	801bed8 <_malloc_r+0xb0>
 801becc:	605a      	str	r2, [r3, #4]
 801bece:	e7f9      	b.n	801bec4 <_malloc_r+0x9c>
 801bed0:	6862      	ldr	r2, [r4, #4]
 801bed2:	42a3      	cmp	r3, r4
 801bed4:	d10e      	bne.n	801bef4 <_malloc_r+0xcc>
 801bed6:	6032      	str	r2, [r6, #0]
 801bed8:	0028      	movs	r0, r5
 801beda:	f000 f82d 	bl	801bf38 <__malloc_unlock>
 801bede:	0020      	movs	r0, r4
 801bee0:	2207      	movs	r2, #7
 801bee2:	300b      	adds	r0, #11
 801bee4:	1d23      	adds	r3, r4, #4
 801bee6:	4390      	bics	r0, r2
 801bee8:	1ac2      	subs	r2, r0, r3
 801beea:	4298      	cmp	r0, r3
 801beec:	d0df      	beq.n	801beae <_malloc_r+0x86>
 801beee:	1a1b      	subs	r3, r3, r0
 801bef0:	50a3      	str	r3, [r4, r2]
 801bef2:	e7dc      	b.n	801beae <_malloc_r+0x86>
 801bef4:	605a      	str	r2, [r3, #4]
 801bef6:	e7ef      	b.n	801bed8 <_malloc_r+0xb0>
 801bef8:	0023      	movs	r3, r4
 801befa:	6864      	ldr	r4, [r4, #4]
 801befc:	e7a6      	b.n	801be4c <_malloc_r+0x24>
 801befe:	9c00      	ldr	r4, [sp, #0]
 801bf00:	6863      	ldr	r3, [r4, #4]
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	e7ad      	b.n	801be62 <_malloc_r+0x3a>
 801bf06:	001a      	movs	r2, r3
 801bf08:	685b      	ldr	r3, [r3, #4]
 801bf0a:	42a3      	cmp	r3, r4
 801bf0c:	d1fb      	bne.n	801bf06 <_malloc_r+0xde>
 801bf0e:	2300      	movs	r3, #0
 801bf10:	e7da      	b.n	801bec8 <_malloc_r+0xa0>
 801bf12:	230c      	movs	r3, #12
 801bf14:	0028      	movs	r0, r5
 801bf16:	602b      	str	r3, [r5, #0]
 801bf18:	f000 f80e 	bl	801bf38 <__malloc_unlock>
 801bf1c:	e7c6      	b.n	801beac <_malloc_r+0x84>
 801bf1e:	6007      	str	r7, [r0, #0]
 801bf20:	e7da      	b.n	801bed8 <_malloc_r+0xb0>
 801bf22:	46c0      	nop			@ (mov r8, r8)
 801bf24:	20002294 	.word	0x20002294

0801bf28 <__malloc_lock>:
 801bf28:	b510      	push	{r4, lr}
 801bf2a:	4802      	ldr	r0, [pc, #8]	@ (801bf34 <__malloc_lock+0xc>)
 801bf2c:	f000 f882 	bl	801c034 <__retarget_lock_acquire_recursive>
 801bf30:	bd10      	pop	{r4, pc}
 801bf32:	46c0      	nop			@ (mov r8, r8)
 801bf34:	200023d4 	.word	0x200023d4

0801bf38 <__malloc_unlock>:
 801bf38:	b510      	push	{r4, lr}
 801bf3a:	4802      	ldr	r0, [pc, #8]	@ (801bf44 <__malloc_unlock+0xc>)
 801bf3c:	f000 f87b 	bl	801c036 <__retarget_lock_release_recursive>
 801bf40:	bd10      	pop	{r4, pc}
 801bf42:	46c0      	nop			@ (mov r8, r8)
 801bf44:	200023d4 	.word	0x200023d4

0801bf48 <memcmp>:
 801bf48:	b530      	push	{r4, r5, lr}
 801bf4a:	2400      	movs	r4, #0
 801bf4c:	3901      	subs	r1, #1
 801bf4e:	42a2      	cmp	r2, r4
 801bf50:	d101      	bne.n	801bf56 <memcmp+0xe>
 801bf52:	2000      	movs	r0, #0
 801bf54:	e005      	b.n	801bf62 <memcmp+0x1a>
 801bf56:	5d03      	ldrb	r3, [r0, r4]
 801bf58:	3401      	adds	r4, #1
 801bf5a:	5d0d      	ldrb	r5, [r1, r4]
 801bf5c:	42ab      	cmp	r3, r5
 801bf5e:	d0f6      	beq.n	801bf4e <memcmp+0x6>
 801bf60:	1b58      	subs	r0, r3, r5
 801bf62:	bd30      	pop	{r4, r5, pc}

0801bf64 <memset>:
 801bf64:	0003      	movs	r3, r0
 801bf66:	1882      	adds	r2, r0, r2
 801bf68:	4293      	cmp	r3, r2
 801bf6a:	d100      	bne.n	801bf6e <memset+0xa>
 801bf6c:	4770      	bx	lr
 801bf6e:	7019      	strb	r1, [r3, #0]
 801bf70:	3301      	adds	r3, #1
 801bf72:	e7f9      	b.n	801bf68 <memset+0x4>

0801bf74 <strchr>:
 801bf74:	b2c9      	uxtb	r1, r1
 801bf76:	7803      	ldrb	r3, [r0, #0]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d004      	beq.n	801bf86 <strchr+0x12>
 801bf7c:	428b      	cmp	r3, r1
 801bf7e:	d100      	bne.n	801bf82 <strchr+0xe>
 801bf80:	4770      	bx	lr
 801bf82:	3001      	adds	r0, #1
 801bf84:	e7f7      	b.n	801bf76 <strchr+0x2>
 801bf86:	424b      	negs	r3, r1
 801bf88:	4159      	adcs	r1, r3
 801bf8a:	4249      	negs	r1, r1
 801bf8c:	4008      	ands	r0, r1
 801bf8e:	e7f7      	b.n	801bf80 <strchr+0xc>

0801bf90 <strstr>:
 801bf90:	780a      	ldrb	r2, [r1, #0]
 801bf92:	b530      	push	{r4, r5, lr}
 801bf94:	2a00      	cmp	r2, #0
 801bf96:	d10c      	bne.n	801bfb2 <strstr+0x22>
 801bf98:	bd30      	pop	{r4, r5, pc}
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d108      	bne.n	801bfb0 <strstr+0x20>
 801bf9e:	2301      	movs	r3, #1
 801bfa0:	5ccc      	ldrb	r4, [r1, r3]
 801bfa2:	2c00      	cmp	r4, #0
 801bfa4:	d0f8      	beq.n	801bf98 <strstr+0x8>
 801bfa6:	5cc5      	ldrb	r5, [r0, r3]
 801bfa8:	42a5      	cmp	r5, r4
 801bfaa:	d101      	bne.n	801bfb0 <strstr+0x20>
 801bfac:	3301      	adds	r3, #1
 801bfae:	e7f7      	b.n	801bfa0 <strstr+0x10>
 801bfb0:	3001      	adds	r0, #1
 801bfb2:	7803      	ldrb	r3, [r0, #0]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d1f0      	bne.n	801bf9a <strstr+0xa>
 801bfb8:	0018      	movs	r0, r3
 801bfba:	e7ed      	b.n	801bf98 <strstr+0x8>

0801bfbc <_sbrk_r>:
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	b570      	push	{r4, r5, r6, lr}
 801bfc0:	4d06      	ldr	r5, [pc, #24]	@ (801bfdc <_sbrk_r+0x20>)
 801bfc2:	0004      	movs	r4, r0
 801bfc4:	0008      	movs	r0, r1
 801bfc6:	602b      	str	r3, [r5, #0]
 801bfc8:	f7f0 fbe6 	bl	800c798 <_sbrk>
 801bfcc:	1c43      	adds	r3, r0, #1
 801bfce:	d103      	bne.n	801bfd8 <_sbrk_r+0x1c>
 801bfd0:	682b      	ldr	r3, [r5, #0]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d000      	beq.n	801bfd8 <_sbrk_r+0x1c>
 801bfd6:	6023      	str	r3, [r4, #0]
 801bfd8:	bd70      	pop	{r4, r5, r6, pc}
 801bfda:	46c0      	nop			@ (mov r8, r8)
 801bfdc:	200023d0 	.word	0x200023d0

0801bfe0 <__errno>:
 801bfe0:	4b01      	ldr	r3, [pc, #4]	@ (801bfe8 <__errno+0x8>)
 801bfe2:	6818      	ldr	r0, [r3, #0]
 801bfe4:	4770      	bx	lr
 801bfe6:	46c0      	nop			@ (mov r8, r8)
 801bfe8:	20000284 	.word	0x20000284

0801bfec <__libc_init_array>:
 801bfec:	b570      	push	{r4, r5, r6, lr}
 801bfee:	2600      	movs	r6, #0
 801bff0:	4c0c      	ldr	r4, [pc, #48]	@ (801c024 <__libc_init_array+0x38>)
 801bff2:	4d0d      	ldr	r5, [pc, #52]	@ (801c028 <__libc_init_array+0x3c>)
 801bff4:	1b64      	subs	r4, r4, r5
 801bff6:	10a4      	asrs	r4, r4, #2
 801bff8:	42a6      	cmp	r6, r4
 801bffa:	d109      	bne.n	801c010 <__libc_init_array+0x24>
 801bffc:	2600      	movs	r6, #0
 801bffe:	f000 f979 	bl	801c2f4 <_init>
 801c002:	4c0a      	ldr	r4, [pc, #40]	@ (801c02c <__libc_init_array+0x40>)
 801c004:	4d0a      	ldr	r5, [pc, #40]	@ (801c030 <__libc_init_array+0x44>)
 801c006:	1b64      	subs	r4, r4, r5
 801c008:	10a4      	asrs	r4, r4, #2
 801c00a:	42a6      	cmp	r6, r4
 801c00c:	d105      	bne.n	801c01a <__libc_init_array+0x2e>
 801c00e:	bd70      	pop	{r4, r5, r6, pc}
 801c010:	00b3      	lsls	r3, r6, #2
 801c012:	58eb      	ldr	r3, [r5, r3]
 801c014:	4798      	blx	r3
 801c016:	3601      	adds	r6, #1
 801c018:	e7ee      	b.n	801bff8 <__libc_init_array+0xc>
 801c01a:	00b3      	lsls	r3, r6, #2
 801c01c:	58eb      	ldr	r3, [r5, r3]
 801c01e:	4798      	blx	r3
 801c020:	3601      	adds	r6, #1
 801c022:	e7f2      	b.n	801c00a <__libc_init_array+0x1e>
 801c024:	0801c648 	.word	0x0801c648
 801c028:	0801c648 	.word	0x0801c648
 801c02c:	0801c64c 	.word	0x0801c64c
 801c030:	0801c648 	.word	0x0801c648

0801c034 <__retarget_lock_acquire_recursive>:
 801c034:	4770      	bx	lr

0801c036 <__retarget_lock_release_recursive>:
 801c036:	4770      	bx	lr

0801c038 <memcpy>:
 801c038:	2300      	movs	r3, #0
 801c03a:	b510      	push	{r4, lr}
 801c03c:	429a      	cmp	r2, r3
 801c03e:	d100      	bne.n	801c042 <memcpy+0xa>
 801c040:	bd10      	pop	{r4, pc}
 801c042:	5ccc      	ldrb	r4, [r1, r3]
 801c044:	54c4      	strb	r4, [r0, r3]
 801c046:	3301      	adds	r3, #1
 801c048:	e7f8      	b.n	801c03c <memcpy+0x4>
	...

0801c04c <_free_r>:
 801c04c:	b570      	push	{r4, r5, r6, lr}
 801c04e:	0005      	movs	r5, r0
 801c050:	1e0c      	subs	r4, r1, #0
 801c052:	d010      	beq.n	801c076 <_free_r+0x2a>
 801c054:	3c04      	subs	r4, #4
 801c056:	6823      	ldr	r3, [r4, #0]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	da00      	bge.n	801c05e <_free_r+0x12>
 801c05c:	18e4      	adds	r4, r4, r3
 801c05e:	0028      	movs	r0, r5
 801c060:	f7ff ff62 	bl	801bf28 <__malloc_lock>
 801c064:	4a1d      	ldr	r2, [pc, #116]	@ (801c0dc <_free_r+0x90>)
 801c066:	6813      	ldr	r3, [r2, #0]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d105      	bne.n	801c078 <_free_r+0x2c>
 801c06c:	6063      	str	r3, [r4, #4]
 801c06e:	6014      	str	r4, [r2, #0]
 801c070:	0028      	movs	r0, r5
 801c072:	f7ff ff61 	bl	801bf38 <__malloc_unlock>
 801c076:	bd70      	pop	{r4, r5, r6, pc}
 801c078:	42a3      	cmp	r3, r4
 801c07a:	d908      	bls.n	801c08e <_free_r+0x42>
 801c07c:	6820      	ldr	r0, [r4, #0]
 801c07e:	1821      	adds	r1, r4, r0
 801c080:	428b      	cmp	r3, r1
 801c082:	d1f3      	bne.n	801c06c <_free_r+0x20>
 801c084:	6819      	ldr	r1, [r3, #0]
 801c086:	685b      	ldr	r3, [r3, #4]
 801c088:	1809      	adds	r1, r1, r0
 801c08a:	6021      	str	r1, [r4, #0]
 801c08c:	e7ee      	b.n	801c06c <_free_r+0x20>
 801c08e:	001a      	movs	r2, r3
 801c090:	685b      	ldr	r3, [r3, #4]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d001      	beq.n	801c09a <_free_r+0x4e>
 801c096:	42a3      	cmp	r3, r4
 801c098:	d9f9      	bls.n	801c08e <_free_r+0x42>
 801c09a:	6811      	ldr	r1, [r2, #0]
 801c09c:	1850      	adds	r0, r2, r1
 801c09e:	42a0      	cmp	r0, r4
 801c0a0:	d10b      	bne.n	801c0ba <_free_r+0x6e>
 801c0a2:	6820      	ldr	r0, [r4, #0]
 801c0a4:	1809      	adds	r1, r1, r0
 801c0a6:	1850      	adds	r0, r2, r1
 801c0a8:	6011      	str	r1, [r2, #0]
 801c0aa:	4283      	cmp	r3, r0
 801c0ac:	d1e0      	bne.n	801c070 <_free_r+0x24>
 801c0ae:	6818      	ldr	r0, [r3, #0]
 801c0b0:	685b      	ldr	r3, [r3, #4]
 801c0b2:	1841      	adds	r1, r0, r1
 801c0b4:	6011      	str	r1, [r2, #0]
 801c0b6:	6053      	str	r3, [r2, #4]
 801c0b8:	e7da      	b.n	801c070 <_free_r+0x24>
 801c0ba:	42a0      	cmp	r0, r4
 801c0bc:	d902      	bls.n	801c0c4 <_free_r+0x78>
 801c0be:	230c      	movs	r3, #12
 801c0c0:	602b      	str	r3, [r5, #0]
 801c0c2:	e7d5      	b.n	801c070 <_free_r+0x24>
 801c0c4:	6820      	ldr	r0, [r4, #0]
 801c0c6:	1821      	adds	r1, r4, r0
 801c0c8:	428b      	cmp	r3, r1
 801c0ca:	d103      	bne.n	801c0d4 <_free_r+0x88>
 801c0cc:	6819      	ldr	r1, [r3, #0]
 801c0ce:	685b      	ldr	r3, [r3, #4]
 801c0d0:	1809      	adds	r1, r1, r0
 801c0d2:	6021      	str	r1, [r4, #0]
 801c0d4:	6063      	str	r3, [r4, #4]
 801c0d6:	6054      	str	r4, [r2, #4]
 801c0d8:	e7ca      	b.n	801c070 <_free_r+0x24>
 801c0da:	46c0      	nop			@ (mov r8, r8)
 801c0dc:	20002294 	.word	0x20002294

0801c0e0 <sqrt>:
 801c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0e2:	0004      	movs	r4, r0
 801c0e4:	000d      	movs	r5, r1
 801c0e6:	f000 f821 	bl	801c12c <__ieee754_sqrt>
 801c0ea:	0022      	movs	r2, r4
 801c0ec:	0006      	movs	r6, r0
 801c0ee:	000f      	movs	r7, r1
 801c0f0:	002b      	movs	r3, r5
 801c0f2:	0020      	movs	r0, r4
 801c0f4:	0029      	movs	r1, r5
 801c0f6:	f7e6 f9db 	bl	80024b0 <__aeabi_dcmpun>
 801c0fa:	2800      	cmp	r0, #0
 801c0fc:	d113      	bne.n	801c126 <sqrt+0x46>
 801c0fe:	2200      	movs	r2, #0
 801c100:	2300      	movs	r3, #0
 801c102:	0020      	movs	r0, r4
 801c104:	0029      	movs	r1, r5
 801c106:	f7e4 f993 	bl	8000430 <__aeabi_dcmplt>
 801c10a:	2800      	cmp	r0, #0
 801c10c:	d00b      	beq.n	801c126 <sqrt+0x46>
 801c10e:	f7ff ff67 	bl	801bfe0 <__errno>
 801c112:	2321      	movs	r3, #33	@ 0x21
 801c114:	2200      	movs	r2, #0
 801c116:	6003      	str	r3, [r0, #0]
 801c118:	2300      	movs	r3, #0
 801c11a:	0010      	movs	r0, r2
 801c11c:	0019      	movs	r1, r3
 801c11e:	f7e4 fe9d 	bl	8000e5c <__aeabi_ddiv>
 801c122:	0006      	movs	r6, r0
 801c124:	000f      	movs	r7, r1
 801c126:	0030      	movs	r0, r6
 801c128:	0039      	movs	r1, r7
 801c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c12c <__ieee754_sqrt>:
 801c12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c12e:	000a      	movs	r2, r1
 801c130:	000d      	movs	r5, r1
 801c132:	496b      	ldr	r1, [pc, #428]	@ (801c2e0 <__ieee754_sqrt+0x1b4>)
 801c134:	0004      	movs	r4, r0
 801c136:	0003      	movs	r3, r0
 801c138:	0008      	movs	r0, r1
 801c13a:	b087      	sub	sp, #28
 801c13c:	4028      	ands	r0, r5
 801c13e:	4288      	cmp	r0, r1
 801c140:	d111      	bne.n	801c166 <__ieee754_sqrt+0x3a>
 801c142:	0022      	movs	r2, r4
 801c144:	002b      	movs	r3, r5
 801c146:	0020      	movs	r0, r4
 801c148:	0029      	movs	r1, r5
 801c14a:	f7e5 fac1 	bl	80016d0 <__aeabi_dmul>
 801c14e:	0002      	movs	r2, r0
 801c150:	000b      	movs	r3, r1
 801c152:	0020      	movs	r0, r4
 801c154:	0029      	movs	r1, r5
 801c156:	f7e4 fabb 	bl	80006d0 <__aeabi_dadd>
 801c15a:	0004      	movs	r4, r0
 801c15c:	000d      	movs	r5, r1
 801c15e:	0020      	movs	r0, r4
 801c160:	0029      	movs	r1, r5
 801c162:	b007      	add	sp, #28
 801c164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c166:	2d00      	cmp	r5, #0
 801c168:	dc11      	bgt.n	801c18e <__ieee754_sqrt+0x62>
 801c16a:	0069      	lsls	r1, r5, #1
 801c16c:	0849      	lsrs	r1, r1, #1
 801c16e:	4321      	orrs	r1, r4
 801c170:	d0f5      	beq.n	801c15e <__ieee754_sqrt+0x32>
 801c172:	2000      	movs	r0, #0
 801c174:	4285      	cmp	r5, r0
 801c176:	d010      	beq.n	801c19a <__ieee754_sqrt+0x6e>
 801c178:	0022      	movs	r2, r4
 801c17a:	002b      	movs	r3, r5
 801c17c:	0020      	movs	r0, r4
 801c17e:	0029      	movs	r1, r5
 801c180:	f7e5 fd8c 	bl	8001c9c <__aeabi_dsub>
 801c184:	0002      	movs	r2, r0
 801c186:	000b      	movs	r3, r1
 801c188:	f7e4 fe68 	bl	8000e5c <__aeabi_ddiv>
 801c18c:	e7e5      	b.n	801c15a <__ieee754_sqrt+0x2e>
 801c18e:	1528      	asrs	r0, r5, #20
 801c190:	d115      	bne.n	801c1be <__ieee754_sqrt+0x92>
 801c192:	2480      	movs	r4, #128	@ 0x80
 801c194:	2100      	movs	r1, #0
 801c196:	0364      	lsls	r4, r4, #13
 801c198:	e007      	b.n	801c1aa <__ieee754_sqrt+0x7e>
 801c19a:	0ada      	lsrs	r2, r3, #11
 801c19c:	3815      	subs	r0, #21
 801c19e:	055b      	lsls	r3, r3, #21
 801c1a0:	2a00      	cmp	r2, #0
 801c1a2:	d0fa      	beq.n	801c19a <__ieee754_sqrt+0x6e>
 801c1a4:	e7f5      	b.n	801c192 <__ieee754_sqrt+0x66>
 801c1a6:	0052      	lsls	r2, r2, #1
 801c1a8:	3101      	adds	r1, #1
 801c1aa:	4222      	tst	r2, r4
 801c1ac:	d0fb      	beq.n	801c1a6 <__ieee754_sqrt+0x7a>
 801c1ae:	1e4c      	subs	r4, r1, #1
 801c1b0:	1b00      	subs	r0, r0, r4
 801c1b2:	2420      	movs	r4, #32
 801c1b4:	001d      	movs	r5, r3
 801c1b6:	1a64      	subs	r4, r4, r1
 801c1b8:	40e5      	lsrs	r5, r4
 801c1ba:	408b      	lsls	r3, r1
 801c1bc:	432a      	orrs	r2, r5
 801c1be:	4949      	ldr	r1, [pc, #292]	@ (801c2e4 <__ieee754_sqrt+0x1b8>)
 801c1c0:	0312      	lsls	r2, r2, #12
 801c1c2:	1844      	adds	r4, r0, r1
 801c1c4:	2180      	movs	r1, #128	@ 0x80
 801c1c6:	0b12      	lsrs	r2, r2, #12
 801c1c8:	0349      	lsls	r1, r1, #13
 801c1ca:	4311      	orrs	r1, r2
 801c1cc:	07c0      	lsls	r0, r0, #31
 801c1ce:	d403      	bmi.n	801c1d8 <__ieee754_sqrt+0xac>
 801c1d0:	0fda      	lsrs	r2, r3, #31
 801c1d2:	0049      	lsls	r1, r1, #1
 801c1d4:	1851      	adds	r1, r2, r1
 801c1d6:	005b      	lsls	r3, r3, #1
 801c1d8:	2500      	movs	r5, #0
 801c1da:	1062      	asrs	r2, r4, #1
 801c1dc:	0049      	lsls	r1, r1, #1
 801c1de:	2480      	movs	r4, #128	@ 0x80
 801c1e0:	9205      	str	r2, [sp, #20]
 801c1e2:	0fda      	lsrs	r2, r3, #31
 801c1e4:	1852      	adds	r2, r2, r1
 801c1e6:	2016      	movs	r0, #22
 801c1e8:	0029      	movs	r1, r5
 801c1ea:	005b      	lsls	r3, r3, #1
 801c1ec:	03a4      	lsls	r4, r4, #14
 801c1ee:	190e      	adds	r6, r1, r4
 801c1f0:	4296      	cmp	r6, r2
 801c1f2:	dc02      	bgt.n	801c1fa <__ieee754_sqrt+0xce>
 801c1f4:	1931      	adds	r1, r6, r4
 801c1f6:	1b92      	subs	r2, r2, r6
 801c1f8:	192d      	adds	r5, r5, r4
 801c1fa:	0fde      	lsrs	r6, r3, #31
 801c1fc:	0052      	lsls	r2, r2, #1
 801c1fe:	3801      	subs	r0, #1
 801c200:	1992      	adds	r2, r2, r6
 801c202:	005b      	lsls	r3, r3, #1
 801c204:	0864      	lsrs	r4, r4, #1
 801c206:	2800      	cmp	r0, #0
 801c208:	d1f1      	bne.n	801c1ee <__ieee754_sqrt+0xc2>
 801c20a:	2620      	movs	r6, #32
 801c20c:	2780      	movs	r7, #128	@ 0x80
 801c20e:	0004      	movs	r4, r0
 801c210:	9604      	str	r6, [sp, #16]
 801c212:	063f      	lsls	r7, r7, #24
 801c214:	183e      	adds	r6, r7, r0
 801c216:	46b4      	mov	ip, r6
 801c218:	428a      	cmp	r2, r1
 801c21a:	dc02      	bgt.n	801c222 <__ieee754_sqrt+0xf6>
 801c21c:	d114      	bne.n	801c248 <__ieee754_sqrt+0x11c>
 801c21e:	429e      	cmp	r6, r3
 801c220:	d812      	bhi.n	801c248 <__ieee754_sqrt+0x11c>
 801c222:	4660      	mov	r0, ip
 801c224:	4666      	mov	r6, ip
 801c226:	19c0      	adds	r0, r0, r7
 801c228:	9100      	str	r1, [sp, #0]
 801c22a:	2e00      	cmp	r6, #0
 801c22c:	da03      	bge.n	801c236 <__ieee754_sqrt+0x10a>
 801c22e:	43c6      	mvns	r6, r0
 801c230:	0ff6      	lsrs	r6, r6, #31
 801c232:	198e      	adds	r6, r1, r6
 801c234:	9600      	str	r6, [sp, #0]
 801c236:	1a52      	subs	r2, r2, r1
 801c238:	4563      	cmp	r3, ip
 801c23a:	4189      	sbcs	r1, r1
 801c23c:	4249      	negs	r1, r1
 801c23e:	1a52      	subs	r2, r2, r1
 801c240:	4661      	mov	r1, ip
 801c242:	1a5b      	subs	r3, r3, r1
 801c244:	9900      	ldr	r1, [sp, #0]
 801c246:	19e4      	adds	r4, r4, r7
 801c248:	0fde      	lsrs	r6, r3, #31
 801c24a:	0052      	lsls	r2, r2, #1
 801c24c:	1992      	adds	r2, r2, r6
 801c24e:	9e04      	ldr	r6, [sp, #16]
 801c250:	005b      	lsls	r3, r3, #1
 801c252:	3e01      	subs	r6, #1
 801c254:	087f      	lsrs	r7, r7, #1
 801c256:	9604      	str	r6, [sp, #16]
 801c258:	2e00      	cmp	r6, #0
 801c25a:	d1db      	bne.n	801c214 <__ieee754_sqrt+0xe8>
 801c25c:	431a      	orrs	r2, r3
 801c25e:	d01f      	beq.n	801c2a0 <__ieee754_sqrt+0x174>
 801c260:	4e21      	ldr	r6, [pc, #132]	@ (801c2e8 <__ieee754_sqrt+0x1bc>)
 801c262:	4f22      	ldr	r7, [pc, #136]	@ (801c2ec <__ieee754_sqrt+0x1c0>)
 801c264:	6830      	ldr	r0, [r6, #0]
 801c266:	6871      	ldr	r1, [r6, #4]
 801c268:	683a      	ldr	r2, [r7, #0]
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	9200      	str	r2, [sp, #0]
 801c26e:	9301      	str	r3, [sp, #4]
 801c270:	6832      	ldr	r2, [r6, #0]
 801c272:	6873      	ldr	r3, [r6, #4]
 801c274:	9202      	str	r2, [sp, #8]
 801c276:	9303      	str	r3, [sp, #12]
 801c278:	9a00      	ldr	r2, [sp, #0]
 801c27a:	9b01      	ldr	r3, [sp, #4]
 801c27c:	f7e5 fd0e 	bl	8001c9c <__aeabi_dsub>
 801c280:	0002      	movs	r2, r0
 801c282:	000b      	movs	r3, r1
 801c284:	9802      	ldr	r0, [sp, #8]
 801c286:	9903      	ldr	r1, [sp, #12]
 801c288:	f7e4 f8dc 	bl	8000444 <__aeabi_dcmple>
 801c28c:	2800      	cmp	r0, #0
 801c28e:	d007      	beq.n	801c2a0 <__ieee754_sqrt+0x174>
 801c290:	6830      	ldr	r0, [r6, #0]
 801c292:	6871      	ldr	r1, [r6, #4]
 801c294:	683a      	ldr	r2, [r7, #0]
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	1c67      	adds	r7, r4, #1
 801c29a:	d10c      	bne.n	801c2b6 <__ieee754_sqrt+0x18a>
 801c29c:	9c04      	ldr	r4, [sp, #16]
 801c29e:	3501      	adds	r5, #1
 801c2a0:	4a13      	ldr	r2, [pc, #76]	@ (801c2f0 <__ieee754_sqrt+0x1c4>)
 801c2a2:	106b      	asrs	r3, r5, #1
 801c2a4:	189b      	adds	r3, r3, r2
 801c2a6:	9a05      	ldr	r2, [sp, #20]
 801c2a8:	07ed      	lsls	r5, r5, #31
 801c2aa:	0864      	lsrs	r4, r4, #1
 801c2ac:	0512      	lsls	r2, r2, #20
 801c2ae:	4325      	orrs	r5, r4
 801c2b0:	0028      	movs	r0, r5
 801c2b2:	18d1      	adds	r1, r2, r3
 801c2b4:	e751      	b.n	801c15a <__ieee754_sqrt+0x2e>
 801c2b6:	f7e4 fa0b 	bl	80006d0 <__aeabi_dadd>
 801c2ba:	6877      	ldr	r7, [r6, #4]
 801c2bc:	6836      	ldr	r6, [r6, #0]
 801c2be:	0002      	movs	r2, r0
 801c2c0:	000b      	movs	r3, r1
 801c2c2:	0030      	movs	r0, r6
 801c2c4:	0039      	movs	r1, r7
 801c2c6:	f7e4 f8b3 	bl	8000430 <__aeabi_dcmplt>
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	d004      	beq.n	801c2d8 <__ieee754_sqrt+0x1ac>
 801c2ce:	3402      	adds	r4, #2
 801c2d0:	4263      	negs	r3, r4
 801c2d2:	4163      	adcs	r3, r4
 801c2d4:	18ed      	adds	r5, r5, r3
 801c2d6:	e7e3      	b.n	801c2a0 <__ieee754_sqrt+0x174>
 801c2d8:	2301      	movs	r3, #1
 801c2da:	3401      	adds	r4, #1
 801c2dc:	439c      	bics	r4, r3
 801c2de:	e7df      	b.n	801c2a0 <__ieee754_sqrt+0x174>
 801c2e0:	7ff00000 	.word	0x7ff00000
 801c2e4:	fffffc01 	.word	0xfffffc01
 801c2e8:	0801c638 	.word	0x0801c638
 801c2ec:	0801c630 	.word	0x0801c630
 801c2f0:	3fe00000 	.word	0x3fe00000

0801c2f4 <_init>:
 801c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2f6:	46c0      	nop			@ (mov r8, r8)
 801c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2fa:	bc08      	pop	{r3}
 801c2fc:	469e      	mov	lr, r3
 801c2fe:	4770      	bx	lr

0801c300 <_fini>:
 801c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c302:	46c0      	nop			@ (mov r8, r8)
 801c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c306:	bc08      	pop	{r3}
 801c308:	469e      	mov	lr, r3
 801c30a:	4770      	bx	lr
 801c30c:	0000      	movs	r0, r0
	...

0801c310 <__FLASH_Program_Fast_veneer>:
 801c310:	b401      	push	{r0}
 801c312:	4802      	ldr	r0, [pc, #8]	@ (801c31c <__FLASH_Program_Fast_veneer+0xc>)
 801c314:	4684      	mov	ip, r0
 801c316:	bc01      	pop	{r0}
 801c318:	4760      	bx	ip
 801c31a:	bf00      	nop
 801c31c:	200002d5 	.word	0x200002d5

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <aTxBuffer>:
20000004:	ff000007 00080000                       ........

2000000c <dpytab>:
2000000c:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
2000001c:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
2000002c:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
2000003c:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

2000004c <BluetoothState>:
2000004c:	00000001                                ....

20000050 <Eventos>:
20000050:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

2000006c <Mediciones>:
2000006c:	12222111 00001333                       .!".3...

20000074 <Alarmas>:
20000074:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000084:	00000000                                ....

20000088 <DatosMAC>:
20000088:	56781234 00009999                       4.xV....

20000090 <DatosFirmware>:
20000090:	                                         ..

20000092 <PNU_0x3000>:
20000092:	                                         ..

20000094 <PNU_0x3004>:
20000094:	                                         (.

20000096 <PNU_0x3006>:
20000096:	                                         ..

20000098 <PNU_0x3008>:
20000098:	                                         ..

2000009a <PNU_0x300C>:
2000009a:	                                         ..

2000009c <PNU_0x3010>:
2000009c:	                                         ..

2000009e <PNU_0x3012>:
2000009e:	                                         (.

200000a0 <PNU_0x3014>:
200000a0:	                                         ..

200000a2 <PNU_0x3016>:
200000a2:	                                         ..

200000a4 <PNU_0x3018>:
200000a4:	                                         ..

200000a6 <PNU_0x301A>:
200000a6:	                                         2.

200000a8 <PNU_0x301C>:
200000a8:	                                         Z.

200000aa <PNU_0x301E>:
200000aa:	                                         ..

200000ac <PNU_0x3104>:
200000ac:	                                         ..

200000ae <PNU_0x3106>:
200000ae:	                                         ..

200000b0 <PNU_0x3108>:
200000b0:	                                         ..

200000b2 <PNU_0x310A>:
200000b2:	                                         ..

200000b4 <PNU_0x310C>:
200000b4:	                                         _.

200000b6 <PNU_0x310E>:
200000b6:	                                         d.

200000b8 <Plantilla>:
	...
20000100:	00000001 00000000 00000000 00000000     ................
	...

20000138 <copiaPlantilla>:
	...
20000180:	00000100 00000000 00000000 00000000     ................
	...

200001b8 <reevolt_div>:
200001b8:	                                         .

200001b9 <reevolt_mul>:
200001b9:	                                         .

200001ba <reeEstado1>:
200001ba:	                                         .

200001bb <reeLat1>:
200001bb:	                                         .

200001bc <reeLat2>:
200001bc:	                                         .

200001bd <reeLat3>:
200001bd:	                                         .

200001be <reeLat4>:
200001be:	                                         .

200001bf <reeLong1>:
200001bf:	                                         .

200001c0 <reeLong2>:
200001c0:	                                         .

200001c1 <reeLong3>:
200001c1:	                                         .

200001c2 <reeLong4>:
200001c2:	                                         ..

200001c4 <daysToMonth>:
200001c4:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001d4:	00000078 00000097 000000b6 000000d5     x...............
200001e4:	000000f3 00000111 00000130 0000014e     ........0...N...

200001f4 <PFULLDEF_Px_PORT>:
200001f4:	50000400 50000400 50000400 50000400     ...P...P...P...P
20000204:	50000400                                ...P

20000208 <PFULLDEF_Px_PIN>:
20000208:	40101010 00000010                       ...@....

20000210 <PFULLDEF_MPx_PORT>:
20000210:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000220 <PFULLDEF_MPx_PIN>:
20000220:	08080808                                ....

20000224 <firstFlagPuerta1>:
20000224:	00000001                                ....

20000228 <difName>:
20000228:	5f454c42 4e2b5441 49454d41 5245424d     BLE_AT+NAMEIMBER
20000238:	45482d41 48544c41 00000a0d 00000000     A-HEALTH........
	...

2000025c <SystemCoreClock>:
2000025c:	003d0900                                ..=.

20000260 <tRTP1000>:
20000260:	00000008 00000000 00000000 00000000     ................

20000270 <pagina_borrado>:
20000270:	00000040                                @...

20000274 <direccion_fw>:
20000274:	08020000                                ....

20000278 <contador_bloques_fw>:
20000278:	00000010                                ....

2000027c <uwTickPrio>:
2000027c:	00000004                                ....

20000280 <uwTickFreq>:
20000280:	00000001                                ....

20000284 <_impure_ptr>:
20000284:	20000288                                ... 

20000288 <_impure_data>:
20000288:	00000000 20002298 20002300 20002368     .....". .#. h#. 
	...

200002d4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b088      	sub	sp, #32
200002d8:	af00      	add	r7, sp, #0
200002da:	6078      	str	r0, [r7, #4]
200002dc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200002de:	231f      	movs	r3, #31
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	2200      	movs	r2, #0
200002e4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200002e6:	687b      	ldr	r3, [r7, #4]
200002e8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200002ea:	683b      	ldr	r3, [r7, #0]
200002ec:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200002ee:	4b1a      	ldr	r3, [pc, #104]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f0:	695a      	ldr	r2, [r3, #20]
200002f2:	4b19      	ldr	r3, [pc, #100]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f4:	2180      	movs	r1, #128	@ 0x80
200002f6:	02c9      	lsls	r1, r1, #11
200002f8:	430a      	orrs	r2, r1
200002fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002fc:	f3ef 8310 	mrs	r3, PRIMASK
20000300:	60fb      	str	r3, [r7, #12]
  return(result);
20000302:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000306:	b672      	cpsid	i
}
20000308:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000030a:	e00f      	b.n	2000032c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000030c:	697a      	ldr	r2, [r7, #20]
2000030e:	69bb      	ldr	r3, [r7, #24]
20000310:	6812      	ldr	r2, [r2, #0]
20000312:	601a      	str	r2, [r3, #0]
    src += 4U;
20000314:	697b      	ldr	r3, [r7, #20]
20000316:	3304      	adds	r3, #4
20000318:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000031a:	69bb      	ldr	r3, [r7, #24]
2000031c:	3304      	adds	r3, #4
2000031e:	61bb      	str	r3, [r7, #24]
    index++;
20000320:	211f      	movs	r1, #31
20000322:	187b      	adds	r3, r7, r1
20000324:	781a      	ldrb	r2, [r3, #0]
20000326:	187b      	adds	r3, r7, r1
20000328:	3201      	adds	r2, #1
2000032a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000032c:	231f      	movs	r3, #31
2000032e:	18fb      	adds	r3, r7, r3
20000330:	781b      	ldrb	r3, [r3, #0]
20000332:	2b3f      	cmp	r3, #63	@ 0x3f
20000334:	d9ea      	bls.n	2000030c <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000336:	46c0      	nop			@ (mov r8, r8)
20000338:	4b07      	ldr	r3, [pc, #28]	@ (20000358 <FLASH_Program_Fast+0x84>)
2000033a:	691a      	ldr	r2, [r3, #16]
2000033c:	2380      	movs	r3, #128	@ 0x80
2000033e:	025b      	lsls	r3, r3, #9
20000340:	4013      	ands	r3, r2
20000342:	d1f9      	bne.n	20000338 <FLASH_Program_Fast+0x64>
20000344:	693b      	ldr	r3, [r7, #16]
20000346:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000348:	68bb      	ldr	r3, [r7, #8]
2000034a:	f383 8810 	msr	PRIMASK, r3
}
2000034e:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000350:	46c0      	nop			@ (mov r8, r8)
20000352:	46bd      	mov	sp, r7
20000354:	b008      	add	sp, #32
20000356:	bd80      	pop	{r7, pc}
20000358:	40022000 	.word	0x40022000
