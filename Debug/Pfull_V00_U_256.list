
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801e7f0  0801e7f0  0001e7f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM_P 00000080  0803f000  0803f000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .myBufSectionEEPROM_V 00000014  0803f800  0803f800  00028800  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .BOOTLOADER   00001000  0801e800  0801e800  0001e800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .text         0001c048  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .rodata       00000320  0801c108  0801c108  0001d108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .ARM.extab    00000000  0801c428  0801c428  00028814  2**0
                  CONTENTS, READONLY
 10 .ARM          00000008  0801c428  0801c428  0001d428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .preinit_array 00000000  0801c430  0801c430  00028814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 12 .init_array   00000004  0801c430  0801c430  0001d430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .fini_array   00000004  0801c434  0801c434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .data         0000035c  20000000  0801c438  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 15 .bss          00001028  2000035c  0801c794  0001e35c  2**2
                  ALLOC
 16 ._user_heap_stack 00000604  20001384  0801c794  0001e384  2**0
                  ALLOC
 17 .ARM.attributes 00000028  00000000  00000000  00028814  2**0
                  CONTENTS, READONLY
 18 .debug_info   00030ecc  00000000  00000000  0002883c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000653a  00000000  00000000  00059708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002058  00000000  00000000  0005fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 0000199c  00000000  00000000  00061ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00021e35  00000000  00000000  0006363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0000d9d2  00000000  00000000  00085471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  00092e43  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000078d0  00000000  00000000  00092e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  0009a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000035c 	.word	0x2000035c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c0e0 	.word	0x0801c0e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000360 	.word	0x20000360
 8000104:	0801c0e0 	.word	0x0801c0e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f8ed 	bl	80015f4 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f831 	bl	800148c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f8df 	bl	80015f4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8d5 	bl	80015f4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f85b 	bl	8001514 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f851 	bl	8001514 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	@ (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	ffffff21 	.word	0xffffff21
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f824 	bl	8000538 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ffef 	bl	80024f4 <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fbbc 	bl	8001c9c <__aeabi_dsub>
 8000524:	f001 ffe6 	bl	80024f4 <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 f82c 	bl	80025b4 <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 f827 	bl	80025b4 <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d434      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 800056e:	469b      	mov	fp, r3
 8000570:	4653      	mov	r3, sl
 8000572:	465a      	mov	r2, fp
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83b      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e079      	b.n	800067e <__udivmoddi4+0x146>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e076      	b.n	8000684 <__udivmoddi4+0x14c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e029      	b.n	8000604 <__udivmoddi4+0xcc>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4652      	mov	r2, sl
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0013      	movs	r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	431f      	orrs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d9c3      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d8      	beq.n	80005bc <__udivmoddi4+0x84>
 800060a:	07fb      	lsls	r3, r7, #31
 800060c:	0872      	lsrs	r2, r6, #1
 800060e:	431a      	orrs	r2, r3
 8000610:	4646      	mov	r6, r8
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	e00e      	b.n	8000634 <__udivmoddi4+0xfc>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d101      	bne.n	800061e <__udivmoddi4+0xe6>
 800061a:	42a2      	cmp	r2, r4
 800061c:	d80c      	bhi.n	8000638 <__udivmoddi4+0x100>
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	419d      	sbcs	r5, r3
 8000622:	2001      	movs	r0, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2100      	movs	r1, #0
 800062a:	3e01      	subs	r6, #1
 800062c:	1824      	adds	r4, r4, r0
 800062e:	414d      	adcs	r5, r1
 8000630:	2e00      	cmp	r6, #0
 8000632:	d006      	beq.n	8000642 <__udivmoddi4+0x10a>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d9ee      	bls.n	8000616 <__udivmoddi4+0xde>
 8000638:	3e01      	subs	r6, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2e00      	cmp	r6, #0
 8000640:	d1f8      	bne.n	8000634 <__udivmoddi4+0xfc>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	465b      	mov	r3, fp
 8000648:	1900      	adds	r0, r0, r4
 800064a:	4169      	adcs	r1, r5
 800064c:	2b00      	cmp	r3, #0
 800064e:	db24      	blt.n	800069a <__udivmoddi4+0x162>
 8000650:	002b      	movs	r3, r5
 8000652:	465a      	mov	r2, fp
 8000654:	4644      	mov	r4, r8
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	db2a      	blt.n	80006bc <__udivmoddi4+0x184>
 8000666:	0026      	movs	r6, r4
 8000668:	409e      	lsls	r6, r3
 800066a:	0033      	movs	r3, r6
 800066c:	0026      	movs	r6, r4
 800066e:	4647      	mov	r7, r8
 8000670:	40be      	lsls	r6, r7
 8000672:	0032      	movs	r2, r6
 8000674:	1a80      	subs	r0, r0, r2
 8000676:	4199      	sbcs	r1, r3
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	9101      	str	r1, [sp, #4]
 800067c:	e79e      	b.n	80005bc <__udivmoddi4+0x84>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d8bc      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000682:	e782      	b.n	800058a <__udivmoddi4+0x52>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e785      	b.n	80005a6 <__udivmoddi4+0x6e>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4646      	mov	r6, r8
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4644      	mov	r4, r8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dad4      	bge.n	8000666 <__udivmoddi4+0x12e>
 80006bc:	4642      	mov	r2, r8
 80006be:	002f      	movs	r7, r5
 80006c0:	2320      	movs	r3, #32
 80006c2:	0026      	movs	r6, r4
 80006c4:	4097      	lsls	r7, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	40de      	lsrs	r6, r3
 80006ca:	003b      	movs	r3, r7
 80006cc:	4333      	orrs	r3, r6
 80006ce:	e7cd      	b.n	800066c <__udivmoddi4+0x134>

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	b5c0      	push	{r6, r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	030e      	lsls	r6, r1, #12
 80006e2:	004c      	lsls	r4, r1, #1
 80006e4:	0fcd      	lsrs	r5, r1, #31
 80006e6:	0a71      	lsrs	r1, r6, #9
 80006e8:	9e00      	ldr	r6, [sp, #0]
 80006ea:	005f      	lsls	r7, r3, #1
 80006ec:	0f76      	lsrs	r6, r6, #29
 80006ee:	430e      	orrs	r6, r1
 80006f0:	9900      	ldr	r1, [sp, #0]
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	00c9      	lsls	r1, r1, #3
 80006f8:	4689      	mov	r9, r1
 80006fa:	0319      	lsls	r1, r3, #12
 80006fc:	0d7b      	lsrs	r3, r7, #21
 80006fe:	4698      	mov	r8, r3
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	0a49      	lsrs	r1, r1, #9
 8000704:	0fdb      	lsrs	r3, r3, #31
 8000706:	469c      	mov	ip, r3
 8000708:	9b00      	ldr	r3, [sp, #0]
 800070a:	9a00      	ldr	r2, [sp, #0]
 800070c:	0f5b      	lsrs	r3, r3, #29
 800070e:	430b      	orrs	r3, r1
 8000710:	4641      	mov	r1, r8
 8000712:	0d64      	lsrs	r4, r4, #21
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	1a61      	subs	r1, r4, r1
 8000718:	4565      	cmp	r5, ip
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x4e>
 800071c:	e0a6      	b.n	800086c <__aeabi_dadd+0x19c>
 800071e:	2900      	cmp	r1, #0
 8000720:	dd72      	ble.n	8000808 <__aeabi_dadd+0x138>
 8000722:	4647      	mov	r7, r8
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x5a>
 8000728:	e0dd      	b.n	80008e6 <__aeabi_dadd+0x216>
 800072a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800072c:	42bc      	cmp	r4, r7
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x62>
 8000730:	e19a      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000732:	2701      	movs	r7, #1
 8000734:	2938      	cmp	r1, #56	@ 0x38
 8000736:	dc17      	bgt.n	8000768 <__aeabi_dadd+0x98>
 8000738:	2780      	movs	r7, #128	@ 0x80
 800073a:	043f      	lsls	r7, r7, #16
 800073c:	433b      	orrs	r3, r7
 800073e:	291f      	cmp	r1, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0x74>
 8000742:	e1dd      	b.n	8000b00 <__aeabi_dadd+0x430>
 8000744:	2720      	movs	r7, #32
 8000746:	1a78      	subs	r0, r7, r1
 8000748:	001f      	movs	r7, r3
 800074a:	4087      	lsls	r7, r0
 800074c:	46ba      	mov	sl, r7
 800074e:	0017      	movs	r7, r2
 8000750:	40cf      	lsrs	r7, r1
 8000752:	4684      	mov	ip, r0
 8000754:	0038      	movs	r0, r7
 8000756:	4657      	mov	r7, sl
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	1af6      	subs	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	464b      	mov	r3, r9
 800076a:	1bdf      	subs	r7, r3, r7
 800076c:	45b9      	cmp	r9, r7
 800076e:	4180      	sbcs	r0, r0
 8000770:	4240      	negs	r0, r0
 8000772:	1a36      	subs	r6, r6, r0
 8000774:	0233      	lsls	r3, r6, #8
 8000776:	d400      	bmi.n	800077a <__aeabi_dadd+0xaa>
 8000778:	e0ff      	b.n	800097a <__aeabi_dadd+0x2aa>
 800077a:	0276      	lsls	r6, r6, #9
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0xb4>
 8000782:	e13c      	b.n	80009fe <__aeabi_dadd+0x32e>
 8000784:	0030      	movs	r0, r6
 8000786:	f7ff fe7b 	bl	8000480 <__clzsi2>
 800078a:	0003      	movs	r3, r0
 800078c:	3b08      	subs	r3, #8
 800078e:	2120      	movs	r1, #32
 8000790:	0038      	movs	r0, r7
 8000792:	1aca      	subs	r2, r1, r3
 8000794:	40d0      	lsrs	r0, r2
 8000796:	409e      	lsls	r6, r3
 8000798:	0002      	movs	r2, r0
 800079a:	409f      	lsls	r7, r3
 800079c:	4332      	orrs	r2, r6
 800079e:	429c      	cmp	r4, r3
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0xd4>
 80007a2:	e1a6      	b.n	8000af2 <__aeabi_dadd+0x422>
 80007a4:	1b18      	subs	r0, r3, r4
 80007a6:	3001      	adds	r0, #1
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	003e      	movs	r6, r7
 80007ac:	408f      	lsls	r7, r1
 80007ae:	40c6      	lsrs	r6, r0
 80007b0:	1e7b      	subs	r3, r7, #1
 80007b2:	419f      	sbcs	r7, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	408b      	lsls	r3, r1
 80007b8:	4337      	orrs	r7, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	40c2      	lsrs	r2, r0
 80007be:	003b      	movs	r3, r7
 80007c0:	0016      	movs	r6, r2
 80007c2:	2400      	movs	r4, #0
 80007c4:	4313      	orrs	r3, r2
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0xfa>
 80007c8:	e1df      	b.n	8000b8a <__aeabi_dadd+0x4ba>
 80007ca:	077b      	lsls	r3, r7, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x100>
 80007ce:	e332      	b.n	8000e36 <__aeabi_dadd+0x766>
 80007d0:	230f      	movs	r3, #15
 80007d2:	003a      	movs	r2, r7
 80007d4:	403b      	ands	r3, r7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d004      	beq.n	80007e4 <__aeabi_dadd+0x114>
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	42ba      	cmp	r2, r7
 80007de:	41bf      	sbcs	r7, r7
 80007e0:	427f      	negs	r7, r7
 80007e2:	19f6      	adds	r6, r6, r7
 80007e4:	0233      	lsls	r3, r6, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x11a>
 80007e8:	e323      	b.n	8000e32 <__aeabi_dadd+0x762>
 80007ea:	4b9c      	ldr	r3, [pc, #624]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80007ec:	3401      	adds	r4, #1
 80007ee:	429c      	cmp	r4, r3
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x124>
 80007f2:	e0b4      	b.n	800095e <__aeabi_dadd+0x28e>
 80007f4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a60 <__aeabi_dadd+0x390>)
 80007f6:	0564      	lsls	r4, r4, #21
 80007f8:	401e      	ands	r6, r3
 80007fa:	0d64      	lsrs	r4, r4, #21
 80007fc:	0777      	lsls	r7, r6, #29
 80007fe:	08d2      	lsrs	r2, r2, #3
 8000800:	0276      	lsls	r6, r6, #9
 8000802:	4317      	orrs	r7, r2
 8000804:	0b36      	lsrs	r6, r6, #12
 8000806:	e0ac      	b.n	8000962 <__aeabi_dadd+0x292>
 8000808:	2900      	cmp	r1, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x13e>
 800080c:	e07e      	b.n	800090c <__aeabi_dadd+0x23c>
 800080e:	4641      	mov	r1, r8
 8000810:	1b09      	subs	r1, r1, r4
 8000812:	2c00      	cmp	r4, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x148>
 8000816:	e160      	b.n	8000ada <__aeabi_dadd+0x40a>
 8000818:	0034      	movs	r4, r6
 800081a:	4648      	mov	r0, r9
 800081c:	4304      	orrs	r4, r0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x152>
 8000820:	e1c9      	b.n	8000bb6 <__aeabi_dadd+0x4e6>
 8000822:	1e4c      	subs	r4, r1, #1
 8000824:	2901      	cmp	r1, #1
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x15a>
 8000828:	e22e      	b.n	8000c88 <__aeabi_dadd+0x5b8>
 800082a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800082c:	42a9      	cmp	r1, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x162>
 8000830:	e224      	b.n	8000c7c <__aeabi_dadd+0x5ac>
 8000832:	2701      	movs	r7, #1
 8000834:	2c38      	cmp	r4, #56	@ 0x38
 8000836:	dc11      	bgt.n	800085c <__aeabi_dadd+0x18c>
 8000838:	0021      	movs	r1, r4
 800083a:	291f      	cmp	r1, #31
 800083c:	dd00      	ble.n	8000840 <__aeabi_dadd+0x170>
 800083e:	e20b      	b.n	8000c58 <__aeabi_dadd+0x588>
 8000840:	2420      	movs	r4, #32
 8000842:	0037      	movs	r7, r6
 8000844:	4648      	mov	r0, r9
 8000846:	1a64      	subs	r4, r4, r1
 8000848:	40a7      	lsls	r7, r4
 800084a:	40c8      	lsrs	r0, r1
 800084c:	4307      	orrs	r7, r0
 800084e:	4648      	mov	r0, r9
 8000850:	40a0      	lsls	r0, r4
 8000852:	40ce      	lsrs	r6, r1
 8000854:	1e44      	subs	r4, r0, #1
 8000856:	41a0      	sbcs	r0, r4
 8000858:	1b9b      	subs	r3, r3, r6
 800085a:	4307      	orrs	r7, r0
 800085c:	1bd7      	subs	r7, r2, r7
 800085e:	42ba      	cmp	r2, r7
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4665      	mov	r5, ip
 8000866:	4644      	mov	r4, r8
 8000868:	1a9e      	subs	r6, r3, r2
 800086a:	e783      	b.n	8000774 <__aeabi_dadd+0xa4>
 800086c:	2900      	cmp	r1, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x1a2>
 8000870:	e09c      	b.n	80009ac <__aeabi_dadd+0x2dc>
 8000872:	4647      	mov	r7, r8
 8000874:	2f00      	cmp	r7, #0
 8000876:	d167      	bne.n	8000948 <__aeabi_dadd+0x278>
 8000878:	001f      	movs	r7, r3
 800087a:	4317      	orrs	r7, r2
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1b0>
 800087e:	e0e4      	b.n	8000a4a <__aeabi_dadd+0x37a>
 8000880:	1e48      	subs	r0, r1, #1
 8000882:	2901      	cmp	r1, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x1b8>
 8000886:	e19b      	b.n	8000bc0 <__aeabi_dadd+0x4f0>
 8000888:	4f74      	ldr	r7, [pc, #464]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800088a:	42b9      	cmp	r1, r7
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x1c0>
 800088e:	e0eb      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000890:	2701      	movs	r7, #1
 8000892:	0001      	movs	r1, r0
 8000894:	2838      	cmp	r0, #56	@ 0x38
 8000896:	dc11      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000898:	291f      	cmp	r1, #31
 800089a:	dd00      	ble.n	800089e <__aeabi_dadd+0x1ce>
 800089c:	e1c7      	b.n	8000c2e <__aeabi_dadd+0x55e>
 800089e:	2720      	movs	r7, #32
 80008a0:	1a78      	subs	r0, r7, r1
 80008a2:	001f      	movs	r7, r3
 80008a4:	4684      	mov	ip, r0
 80008a6:	4087      	lsls	r7, r0
 80008a8:	0010      	movs	r0, r2
 80008aa:	40c8      	lsrs	r0, r1
 80008ac:	4307      	orrs	r7, r0
 80008ae:	4660      	mov	r0, ip
 80008b0:	4082      	lsls	r2, r0
 80008b2:	40cb      	lsrs	r3, r1
 80008b4:	1e50      	subs	r0, r2, #1
 80008b6:	4182      	sbcs	r2, r0
 80008b8:	18f6      	adds	r6, r6, r3
 80008ba:	4317      	orrs	r7, r2
 80008bc:	444f      	add	r7, r9
 80008be:	454f      	cmp	r7, r9
 80008c0:	4180      	sbcs	r0, r0
 80008c2:	4240      	negs	r0, r0
 80008c4:	1836      	adds	r6, r6, r0
 80008c6:	0233      	lsls	r3, r6, #8
 80008c8:	d557      	bpl.n	800097a <__aeabi_dadd+0x2aa>
 80008ca:	4b64      	ldr	r3, [pc, #400]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008cc:	3401      	adds	r4, #1
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d045      	beq.n	800095e <__aeabi_dadd+0x28e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	4b62      	ldr	r3, [pc, #392]	@ (8000a60 <__aeabi_dadd+0x390>)
 80008d6:	087a      	lsrs	r2, r7, #1
 80008d8:	401e      	ands	r6, r3
 80008da:	4039      	ands	r1, r7
 80008dc:	430a      	orrs	r2, r1
 80008de:	07f7      	lsls	r7, r6, #31
 80008e0:	4317      	orrs	r7, r2
 80008e2:	0876      	lsrs	r6, r6, #1
 80008e4:	e771      	b.n	80007ca <__aeabi_dadd+0xfa>
 80008e6:	001f      	movs	r7, r3
 80008e8:	4317      	orrs	r7, r2
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x21e>
 80008ec:	e0ad      	b.n	8000a4a <__aeabi_dadd+0x37a>
 80008ee:	1e4f      	subs	r7, r1, #1
 80008f0:	46bc      	mov	ip, r7
 80008f2:	2901      	cmp	r1, #1
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x228>
 80008f6:	e182      	b.n	8000bfe <__aeabi_dadd+0x52e>
 80008f8:	4f58      	ldr	r7, [pc, #352]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008fa:	42b9      	cmp	r1, r7
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x230>
 80008fe:	e190      	b.n	8000c22 <__aeabi_dadd+0x552>
 8000900:	4661      	mov	r1, ip
 8000902:	2701      	movs	r7, #1
 8000904:	2938      	cmp	r1, #56	@ 0x38
 8000906:	dd00      	ble.n	800090a <__aeabi_dadd+0x23a>
 8000908:	e72e      	b.n	8000768 <__aeabi_dadd+0x98>
 800090a:	e718      	b.n	800073e <__aeabi_dadd+0x6e>
 800090c:	4f55      	ldr	r7, [pc, #340]	@ (8000a64 <__aeabi_dadd+0x394>)
 800090e:	1c61      	adds	r1, r4, #1
 8000910:	4239      	tst	r1, r7
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x246>
 8000914:	e0d0      	b.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000916:	0031      	movs	r1, r6
 8000918:	4648      	mov	r0, r9
 800091a:	001f      	movs	r7, r3
 800091c:	4301      	orrs	r1, r0
 800091e:	4317      	orrs	r7, r2
 8000920:	2c00      	cmp	r4, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x256>
 8000924:	e13d      	b.n	8000ba2 <__aeabi_dadd+0x4d2>
 8000926:	2900      	cmp	r1, #0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x25c>
 800092a:	e1bc      	b.n	8000ca6 <__aeabi_dadd+0x5d6>
 800092c:	2f00      	cmp	r7, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x262>
 8000930:	e1bf      	b.n	8000cb2 <__aeabi_dadd+0x5e2>
 8000932:	464b      	mov	r3, r9
 8000934:	2100      	movs	r1, #0
 8000936:	08d8      	lsrs	r0, r3, #3
 8000938:	0777      	lsls	r7, r6, #29
 800093a:	4307      	orrs	r7, r0
 800093c:	08f0      	lsrs	r0, r6, #3
 800093e:	0306      	lsls	r6, r0, #12
 8000940:	054c      	lsls	r4, r1, #21
 8000942:	0b36      	lsrs	r6, r6, #12
 8000944:	0d64      	lsrs	r4, r4, #21
 8000946:	e00c      	b.n	8000962 <__aeabi_dadd+0x292>
 8000948:	4f44      	ldr	r7, [pc, #272]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800094a:	42bc      	cmp	r4, r7
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x280>
 800094e:	e08b      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000950:	2701      	movs	r7, #1
 8000952:	2938      	cmp	r1, #56	@ 0x38
 8000954:	dcb2      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000956:	2780      	movs	r7, #128	@ 0x80
 8000958:	043f      	lsls	r7, r7, #16
 800095a:	433b      	orrs	r3, r7
 800095c:	e79c      	b.n	8000898 <__aeabi_dadd+0x1c8>
 800095e:	2600      	movs	r6, #0
 8000960:	2700      	movs	r7, #0
 8000962:	0524      	lsls	r4, r4, #20
 8000964:	4334      	orrs	r4, r6
 8000966:	07ed      	lsls	r5, r5, #31
 8000968:	432c      	orrs	r4, r5
 800096a:	0038      	movs	r0, r7
 800096c:	0021      	movs	r1, r4
 800096e:	b002      	add	sp, #8
 8000970:	bce0      	pop	{r5, r6, r7}
 8000972:	46ba      	mov	sl, r7
 8000974:	46b1      	mov	r9, r6
 8000976:	46a8      	mov	r8, r5
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	077b      	lsls	r3, r7, #29
 800097c:	d004      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 800097e:	230f      	movs	r3, #15
 8000980:	403b      	ands	r3, r7
 8000982:	2b04      	cmp	r3, #4
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 8000986:	e728      	b.n	80007da <__aeabi_dadd+0x10a>
 8000988:	08f8      	lsrs	r0, r7, #3
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800098c:	0777      	lsls	r7, r6, #29
 800098e:	4307      	orrs	r7, r0
 8000990:	08f0      	lsrs	r0, r6, #3
 8000992:	429c      	cmp	r4, r3
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x2c8>
 8000996:	e24a      	b.n	8000e2e <__aeabi_dadd+0x75e>
 8000998:	003b      	movs	r3, r7
 800099a:	4303      	orrs	r3, r0
 800099c:	d059      	beq.n	8000a52 <__aeabi_dadd+0x382>
 800099e:	2680      	movs	r6, #128	@ 0x80
 80009a0:	0336      	lsls	r6, r6, #12
 80009a2:	4306      	orrs	r6, r0
 80009a4:	0336      	lsls	r6, r6, #12
 80009a6:	4c2d      	ldr	r4, [pc, #180]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009a8:	0b36      	lsrs	r6, r6, #12
 80009aa:	e7da      	b.n	8000962 <__aeabi_dadd+0x292>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d061      	beq.n	8000a74 <__aeabi_dadd+0x3a4>
 80009b0:	4641      	mov	r1, r8
 80009b2:	1b09      	subs	r1, r1, r4
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x2ea>
 80009b8:	e0b9      	b.n	8000b2e <__aeabi_dadd+0x45e>
 80009ba:	4c28      	ldr	r4, [pc, #160]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009bc:	45a0      	cmp	r8, r4
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2f2>
 80009c0:	e1a5      	b.n	8000d0e <__aeabi_dadd+0x63e>
 80009c2:	2701      	movs	r7, #1
 80009c4:	2938      	cmp	r1, #56	@ 0x38
 80009c6:	dc13      	bgt.n	80009f0 <__aeabi_dadd+0x320>
 80009c8:	2480      	movs	r4, #128	@ 0x80
 80009ca:	0424      	lsls	r4, r4, #16
 80009cc:	4326      	orrs	r6, r4
 80009ce:	291f      	cmp	r1, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dadd+0x304>
 80009d2:	e1c8      	b.n	8000d66 <__aeabi_dadd+0x696>
 80009d4:	2420      	movs	r4, #32
 80009d6:	0037      	movs	r7, r6
 80009d8:	4648      	mov	r0, r9
 80009da:	1a64      	subs	r4, r4, r1
 80009dc:	40a7      	lsls	r7, r4
 80009de:	40c8      	lsrs	r0, r1
 80009e0:	4307      	orrs	r7, r0
 80009e2:	4648      	mov	r0, r9
 80009e4:	40a0      	lsls	r0, r4
 80009e6:	40ce      	lsrs	r6, r1
 80009e8:	1e44      	subs	r4, r0, #1
 80009ea:	41a0      	sbcs	r0, r4
 80009ec:	199b      	adds	r3, r3, r6
 80009ee:	4307      	orrs	r7, r0
 80009f0:	18bf      	adds	r7, r7, r2
 80009f2:	4297      	cmp	r7, r2
 80009f4:	4192      	sbcs	r2, r2
 80009f6:	4252      	negs	r2, r2
 80009f8:	4644      	mov	r4, r8
 80009fa:	18d6      	adds	r6, r2, r3
 80009fc:	e763      	b.n	80008c6 <__aeabi_dadd+0x1f6>
 80009fe:	0038      	movs	r0, r7
 8000a00:	f7ff fd3e 	bl	8000480 <__clzsi2>
 8000a04:	0003      	movs	r3, r0
 8000a06:	3318      	adds	r3, #24
 8000a08:	2b1f      	cmp	r3, #31
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x33e>
 8000a0c:	e6bf      	b.n	800078e <__aeabi_dadd+0xbe>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	3808      	subs	r0, #8
 8000a12:	4082      	lsls	r2, r0
 8000a14:	429c      	cmp	r4, r3
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x34a>
 8000a18:	e083      	b.n	8000b22 <__aeabi_dadd+0x452>
 8000a1a:	1b1b      	subs	r3, r3, r4
 8000a1c:	1c58      	adds	r0, r3, #1
 8000a1e:	281f      	cmp	r0, #31
 8000a20:	dc00      	bgt.n	8000a24 <__aeabi_dadd+0x354>
 8000a22:	e1b4      	b.n	8000d8e <__aeabi_dadd+0x6be>
 8000a24:	0017      	movs	r7, r2
 8000a26:	3b1f      	subs	r3, #31
 8000a28:	40df      	lsrs	r7, r3
 8000a2a:	2820      	cmp	r0, #32
 8000a2c:	d005      	beq.n	8000a3a <__aeabi_dadd+0x36a>
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	409a      	lsls	r2, r3
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	419a      	sbcs	r2, r3
 8000a38:	4317      	orrs	r7, r2
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2f00      	cmp	r7, #0
 8000a3e:	d00a      	beq.n	8000a56 <__aeabi_dadd+0x386>
 8000a40:	077b      	lsls	r3, r7, #29
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x376>
 8000a44:	e6c4      	b.n	80007d0 <__aeabi_dadd+0x100>
 8000a46:	0026      	movs	r6, r4
 8000a48:	e79e      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	08d8      	lsrs	r0, r3, #3
 8000a50:	e79b      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000a52:	2700      	movs	r7, #0
 8000a54:	4c01      	ldr	r4, [pc, #4]	@ (8000a5c <__aeabi_dadd+0x38c>)
 8000a56:	2600      	movs	r6, #0
 8000a58:	e783      	b.n	8000962 <__aeabi_dadd+0x292>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	000007ff 	.word	0x000007ff
 8000a60:	ff7fffff 	.word	0xff7fffff
 8000a64:	000007fe 	.word	0x000007fe
 8000a68:	464b      	mov	r3, r9
 8000a6a:	0777      	lsls	r7, r6, #29
 8000a6c:	08d8      	lsrs	r0, r3, #3
 8000a6e:	4307      	orrs	r7, r0
 8000a70:	08f0      	lsrs	r0, r6, #3
 8000a72:	e791      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000a74:	4fcd      	ldr	r7, [pc, #820]	@ (8000dac <__aeabi_dadd+0x6dc>)
 8000a76:	1c61      	adds	r1, r4, #1
 8000a78:	4239      	tst	r1, r7
 8000a7a:	d16b      	bne.n	8000b54 <__aeabi_dadd+0x484>
 8000a7c:	0031      	movs	r1, r6
 8000a7e:	4648      	mov	r0, r9
 8000a80:	4301      	orrs	r1, r0
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_dadd+0x3b8>
 8000a86:	e14b      	b.n	8000d20 <__aeabi_dadd+0x650>
 8000a88:	001f      	movs	r7, r3
 8000a8a:	4317      	orrs	r7, r2
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x3c2>
 8000a90:	e181      	b.n	8000d96 <__aeabi_dadd+0x6c6>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x3c8>
 8000a96:	e74c      	b.n	8000932 <__aeabi_dadd+0x262>
 8000a98:	444a      	add	r2, r9
 8000a9a:	454a      	cmp	r2, r9
 8000a9c:	4180      	sbcs	r0, r0
 8000a9e:	18f6      	adds	r6, r6, r3
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	1836      	adds	r6, r6, r0
 8000aa4:	0233      	lsls	r3, r6, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x3da>
 8000aa8:	e1b0      	b.n	8000e0c <__aeabi_dadd+0x73c>
 8000aaa:	0017      	movs	r7, r2
 8000aac:	4691      	mov	r9, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x3e4>
 8000ab2:	e73e      	b.n	8000932 <__aeabi_dadd+0x262>
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e754      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ab8:	4649      	mov	r1, r9
 8000aba:	1a89      	subs	r1, r1, r2
 8000abc:	4688      	mov	r8, r1
 8000abe:	45c1      	cmp	r9, r8
 8000ac0:	41bf      	sbcs	r7, r7
 8000ac2:	1af1      	subs	r1, r6, r3
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	1bc9      	subs	r1, r1, r7
 8000ac8:	020f      	lsls	r7, r1, #8
 8000aca:	d461      	bmi.n	8000b90 <__aeabi_dadd+0x4c0>
 8000acc:	4647      	mov	r7, r8
 8000ace:	430f      	orrs	r7, r1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x404>
 8000ad2:	e0bd      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	e651      	b.n	800077e <__aeabi_dadd+0xae>
 8000ada:	4cb5      	ldr	r4, [pc, #724]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x412>
 8000ae0:	e100      	b.n	8000ce4 <__aeabi_dadd+0x614>
 8000ae2:	2701      	movs	r7, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x41a>
 8000ae8:	e6b8      	b.n	800085c <__aeabi_dadd+0x18c>
 8000aea:	2480      	movs	r4, #128	@ 0x80
 8000aec:	0424      	lsls	r4, r4, #16
 8000aee:	4326      	orrs	r6, r4
 8000af0:	e6a3      	b.n	800083a <__aeabi_dadd+0x16a>
 8000af2:	4eb0      	ldr	r6, [pc, #704]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000af4:	1ae4      	subs	r4, r4, r3
 8000af6:	4016      	ands	r6, r2
 8000af8:	077b      	lsls	r3, r7, #29
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x42e>
 8000afc:	e73f      	b.n	800097e <__aeabi_dadd+0x2ae>
 8000afe:	e743      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000b00:	000f      	movs	r7, r1
 8000b02:	0018      	movs	r0, r3
 8000b04:	3f20      	subs	r7, #32
 8000b06:	40f8      	lsrs	r0, r7
 8000b08:	4684      	mov	ip, r0
 8000b0a:	2920      	cmp	r1, #32
 8000b0c:	d003      	beq.n	8000b16 <__aeabi_dadd+0x446>
 8000b0e:	2740      	movs	r7, #64	@ 0x40
 8000b10:	1a79      	subs	r1, r7, r1
 8000b12:	408b      	lsls	r3, r1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	1e53      	subs	r3, r2, #1
 8000b18:	419a      	sbcs	r2, r3
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0017      	movs	r7, r2
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	e622      	b.n	8000768 <__aeabi_dadd+0x98>
 8000b22:	48a4      	ldr	r0, [pc, #656]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000b24:	1ae1      	subs	r1, r4, r3
 8000b26:	4010      	ands	r0, r2
 8000b28:	0747      	lsls	r7, r0, #29
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	e707      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b2e:	0034      	movs	r4, r6
 8000b30:	4648      	mov	r0, r9
 8000b32:	4304      	orrs	r4, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x468>
 8000b36:	e0fa      	b.n	8000d2e <__aeabi_dadd+0x65e>
 8000b38:	1e4c      	subs	r4, r1, #1
 8000b3a:	2901      	cmp	r1, #1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x470>
 8000b3e:	e0d7      	b.n	8000cf0 <__aeabi_dadd+0x620>
 8000b40:	4f9b      	ldr	r7, [pc, #620]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b42:	42b9      	cmp	r1, r7
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x478>
 8000b46:	e0e2      	b.n	8000d0e <__aeabi_dadd+0x63e>
 8000b48:	2701      	movs	r7, #1
 8000b4a:	2c38      	cmp	r4, #56	@ 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x480>
 8000b4e:	e74f      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000b50:	0021      	movs	r1, r4
 8000b52:	e73c      	b.n	80009ce <__aeabi_dadd+0x2fe>
 8000b54:	4c96      	ldr	r4, [pc, #600]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b56:	42a1      	cmp	r1, r4
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x48c>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_dadd+0x648>
 8000b5c:	444a      	add	r2, r9
 8000b5e:	454a      	cmp	r2, r9
 8000b60:	4180      	sbcs	r0, r0
 8000b62:	18f3      	adds	r3, r6, r3
 8000b64:	4240      	negs	r0, r0
 8000b66:	1818      	adds	r0, r3, r0
 8000b68:	07c7      	lsls	r7, r0, #31
 8000b6a:	0852      	lsrs	r2, r2, #1
 8000b6c:	4317      	orrs	r7, r2
 8000b6e:	0846      	lsrs	r6, r0, #1
 8000b70:	0752      	lsls	r2, r2, #29
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b74:	220f      	movs	r2, #15
 8000b76:	000c      	movs	r4, r1
 8000b78:	403a      	ands	r2, r7
 8000b7a:	2a04      	cmp	r2, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b7e:	e62c      	b.n	80007da <__aeabi_dadd+0x10a>
 8000b80:	0776      	lsls	r6, r6, #29
 8000b82:	08ff      	lsrs	r7, r7, #3
 8000b84:	4337      	orrs	r7, r6
 8000b86:	0900      	lsrs	r0, r0, #4
 8000b88:	e6d9      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e6e8      	b.n	8000962 <__aeabi_dadd+0x292>
 8000b90:	4649      	mov	r1, r9
 8000b92:	1a57      	subs	r7, r2, r1
 8000b94:	42ba      	cmp	r2, r7
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	1b9e      	subs	r6, r3, r6
 8000b9a:	4252      	negs	r2, r2
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	1ab6      	subs	r6, r6, r2
 8000ba0:	e5ed      	b.n	800077e <__aeabi_dadd+0xae>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_dadd+0x4d8>
 8000ba6:	e0c6      	b.n	8000d36 <__aeabi_dadd+0x666>
 8000ba8:	2f00      	cmp	r7, #0
 8000baa:	d167      	bne.n	8000c7c <__aeabi_dadd+0x5ac>
 8000bac:	2680      	movs	r6, #128	@ 0x80
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4c7f      	ldr	r4, [pc, #508]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000bb2:	0336      	lsls	r6, r6, #12
 8000bb4:	e6d5      	b.n	8000962 <__aeabi_dadd+0x292>
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	000c      	movs	r4, r1
 8000bba:	001e      	movs	r6, r3
 8000bbc:	08d0      	lsrs	r0, r2, #3
 8000bbe:	e6e4      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000bc0:	444a      	add	r2, r9
 8000bc2:	454a      	cmp	r2, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	18f3      	adds	r3, r6, r3
 8000bc8:	4240      	negs	r0, r0
 8000bca:	1818      	adds	r0, r3, r0
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0203      	lsls	r3, r0, #8
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_dadd+0x504>
 8000bd2:	e096      	b.n	8000d02 <__aeabi_dadd+0x632>
 8000bd4:	4b77      	ldr	r3, [pc, #476]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000bd6:	0849      	lsrs	r1, r1, #1
 8000bd8:	4018      	ands	r0, r3
 8000bda:	07c3      	lsls	r3, r0, #31
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	0844      	lsrs	r4, r0, #1
 8000be0:	0749      	lsls	r1, r1, #29
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x516>
 8000be4:	e129      	b.n	8000e3a <__aeabi_dadd+0x76a>
 8000be6:	220f      	movs	r2, #15
 8000be8:	401a      	ands	r2, r3
 8000bea:	2a04      	cmp	r2, #4
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x520>
 8000bee:	e0ea      	b.n	8000dc6 <__aeabi_dadd+0x6f6>
 8000bf0:	1d1f      	adds	r7, r3, #4
 8000bf2:	429f      	cmp	r7, r3
 8000bf4:	41b6      	sbcs	r6, r6
 8000bf6:	4276      	negs	r6, r6
 8000bf8:	1936      	adds	r6, r6, r4
 8000bfa:	2402      	movs	r4, #2
 8000bfc:	e6c4      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	1a8f      	subs	r7, r1, r2
 8000c02:	45b9      	cmp	r9, r7
 8000c04:	4180      	sbcs	r0, r0
 8000c06:	1af6      	subs	r6, r6, r3
 8000c08:	4240      	negs	r0, r0
 8000c0a:	1a36      	subs	r6, r6, r0
 8000c0c:	0233      	lsls	r3, r6, #8
 8000c0e:	d406      	bmi.n	8000c1e <__aeabi_dadd+0x54e>
 8000c10:	0773      	lsls	r3, r6, #29
 8000c12:	08ff      	lsrs	r7, r7, #3
 8000c14:	2101      	movs	r1, #1
 8000c16:	431f      	orrs	r7, r3
 8000c18:	08f0      	lsrs	r0, r6, #3
 8000c1a:	e690      	b.n	800093e <__aeabi_dadd+0x26e>
 8000c1c:	4665      	mov	r5, ip
 8000c1e:	2401      	movs	r4, #1
 8000c20:	e5ab      	b.n	800077a <__aeabi_dadd+0xaa>
 8000c22:	464b      	mov	r3, r9
 8000c24:	0777      	lsls	r7, r6, #29
 8000c26:	08d8      	lsrs	r0, r3, #3
 8000c28:	4307      	orrs	r7, r0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e6b4      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c2e:	000f      	movs	r7, r1
 8000c30:	0018      	movs	r0, r3
 8000c32:	3f20      	subs	r7, #32
 8000c34:	40f8      	lsrs	r0, r7
 8000c36:	4684      	mov	ip, r0
 8000c38:	2920      	cmp	r1, #32
 8000c3a:	d003      	beq.n	8000c44 <__aeabi_dadd+0x574>
 8000c3c:	2740      	movs	r7, #64	@ 0x40
 8000c3e:	1a79      	subs	r1, r7, r1
 8000c40:	408b      	lsls	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	1e53      	subs	r3, r2, #1
 8000c46:	419a      	sbcs	r2, r3
 8000c48:	4663      	mov	r3, ip
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	e635      	b.n	80008bc <__aeabi_dadd+0x1ec>
 8000c50:	2500      	movs	r5, #0
 8000c52:	2400      	movs	r4, #0
 8000c54:	2600      	movs	r6, #0
 8000c56:	e684      	b.n	8000962 <__aeabi_dadd+0x292>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0035      	movs	r5, r6
 8000c5c:	3c20      	subs	r4, #32
 8000c5e:	40e5      	lsrs	r5, r4
 8000c60:	2920      	cmp	r1, #32
 8000c62:	d005      	beq.n	8000c70 <__aeabi_dadd+0x5a0>
 8000c64:	2440      	movs	r4, #64	@ 0x40
 8000c66:	1a61      	subs	r1, r4, r1
 8000c68:	408e      	lsls	r6, r1
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	4331      	orrs	r1, r6
 8000c6e:	4689      	mov	r9, r1
 8000c70:	4648      	mov	r0, r9
 8000c72:	1e41      	subs	r1, r0, #1
 8000c74:	4188      	sbcs	r0, r1
 8000c76:	0007      	movs	r7, r0
 8000c78:	432f      	orrs	r7, r5
 8000c7a:	e5ef      	b.n	800085c <__aeabi_dadd+0x18c>
 8000c7c:	08d2      	lsrs	r2, r2, #3
 8000c7e:	075f      	lsls	r7, r3, #29
 8000c80:	4665      	mov	r5, ip
 8000c82:	4317      	orrs	r7, r2
 8000c84:	08d8      	lsrs	r0, r3, #3
 8000c86:	e687      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c88:	1a17      	subs	r7, r2, r0
 8000c8a:	42ba      	cmp	r2, r7
 8000c8c:	4192      	sbcs	r2, r2
 8000c8e:	1b9e      	subs	r6, r3, r6
 8000c90:	4252      	negs	r2, r2
 8000c92:	1ab6      	subs	r6, r6, r2
 8000c94:	0233      	lsls	r3, r6, #8
 8000c96:	d4c1      	bmi.n	8000c1c <__aeabi_dadd+0x54c>
 8000c98:	0773      	lsls	r3, r6, #29
 8000c9a:	08ff      	lsrs	r7, r7, #3
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	08f0      	lsrs	r0, r6, #3
 8000ca4:	e64b      	b.n	800093e <__aeabi_dadd+0x26e>
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d07b      	beq.n	8000da2 <__aeabi_dadd+0x6d2>
 8000caa:	4665      	mov	r5, ip
 8000cac:	001e      	movs	r6, r3
 8000cae:	4691      	mov	r9, r2
 8000cb0:	e63f      	b.n	8000932 <__aeabi_dadd+0x262>
 8000cb2:	1a81      	subs	r1, r0, r2
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	45c1      	cmp	r9, r8
 8000cb8:	41a4      	sbcs	r4, r4
 8000cba:	1af1      	subs	r1, r6, r3
 8000cbc:	4264      	negs	r4, r4
 8000cbe:	1b09      	subs	r1, r1, r4
 8000cc0:	2480      	movs	r4, #128	@ 0x80
 8000cc2:	0424      	lsls	r4, r4, #16
 8000cc4:	4221      	tst	r1, r4
 8000cc6:	d077      	beq.n	8000db8 <__aeabi_dadd+0x6e8>
 8000cc8:	1a10      	subs	r0, r2, r0
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	4192      	sbcs	r2, r2
 8000cce:	0007      	movs	r7, r0
 8000cd0:	1b9e      	subs	r6, r3, r6
 8000cd2:	4252      	negs	r2, r2
 8000cd4:	1ab6      	subs	r6, r6, r2
 8000cd6:	4337      	orrs	r7, r6
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dadd+0x60c>
 8000cda:	e0a0      	b.n	8000e1e <__aeabi_dadd+0x74e>
 8000cdc:	4665      	mov	r5, ip
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e63e      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	08d2      	lsrs	r2, r2, #3
 8000ce8:	4665      	mov	r5, ip
 8000cea:	4317      	orrs	r7, r2
 8000cec:	08d8      	lsrs	r0, r3, #3
 8000cee:	e653      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000cf0:	1881      	adds	r1, r0, r2
 8000cf2:	4291      	cmp	r1, r2
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	18f0      	adds	r0, r6, r3
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	1880      	adds	r0, r0, r2
 8000cfc:	0203      	lsls	r3, r0, #8
 8000cfe:	d500      	bpl.n	8000d02 <__aeabi_dadd+0x632>
 8000d00:	e768      	b.n	8000bd4 <__aeabi_dadd+0x504>
 8000d02:	0747      	lsls	r7, r0, #29
 8000d04:	08c9      	lsrs	r1, r1, #3
 8000d06:	430f      	orrs	r7, r1
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	e617      	b.n	800093e <__aeabi_dadd+0x26e>
 8000d0e:	08d2      	lsrs	r2, r2, #3
 8000d10:	075f      	lsls	r7, r3, #29
 8000d12:	4317      	orrs	r7, r2
 8000d14:	08d8      	lsrs	r0, r3, #3
 8000d16:	e63f      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e620      	b.n	8000962 <__aeabi_dadd+0x292>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d156      	bne.n	8000dd2 <__aeabi_dadd+0x702>
 8000d24:	075f      	lsls	r7, r3, #29
 8000d26:	08d2      	lsrs	r2, r2, #3
 8000d28:	4317      	orrs	r7, r2
 8000d2a:	08d8      	lsrs	r0, r3, #3
 8000d2c:	e634      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d2e:	000c      	movs	r4, r1
 8000d30:	001e      	movs	r6, r3
 8000d32:	08d0      	lsrs	r0, r2, #3
 8000d34:	e629      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000d36:	08c1      	lsrs	r1, r0, #3
 8000d38:	0770      	lsls	r0, r6, #29
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	08f0      	lsrs	r0, r6, #3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d062      	beq.n	8000e08 <__aeabi_dadd+0x738>
 8000d42:	2480      	movs	r4, #128	@ 0x80
 8000d44:	0324      	lsls	r4, r4, #12
 8000d46:	4220      	tst	r0, r4
 8000d48:	d007      	beq.n	8000d5a <__aeabi_dadd+0x68a>
 8000d4a:	08de      	lsrs	r6, r3, #3
 8000d4c:	4226      	tst	r6, r4
 8000d4e:	d104      	bne.n	8000d5a <__aeabi_dadd+0x68a>
 8000d50:	4665      	mov	r5, ip
 8000d52:	0030      	movs	r0, r6
 8000d54:	08d1      	lsrs	r1, r2, #3
 8000d56:	075b      	lsls	r3, r3, #29
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	0f4f      	lsrs	r7, r1, #29
 8000d5c:	00c9      	lsls	r1, r1, #3
 8000d5e:	08c9      	lsrs	r1, r1, #3
 8000d60:	077f      	lsls	r7, r7, #29
 8000d62:	430f      	orrs	r7, r1
 8000d64:	e618      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d66:	000c      	movs	r4, r1
 8000d68:	0030      	movs	r0, r6
 8000d6a:	3c20      	subs	r4, #32
 8000d6c:	40e0      	lsrs	r0, r4
 8000d6e:	4684      	mov	ip, r0
 8000d70:	2920      	cmp	r1, #32
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dadd+0x6b0>
 8000d74:	2440      	movs	r4, #64	@ 0x40
 8000d76:	1a61      	subs	r1, r4, r1
 8000d78:	408e      	lsls	r6, r1
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	4331      	orrs	r1, r6
 8000d7e:	4689      	mov	r9, r1
 8000d80:	4648      	mov	r0, r9
 8000d82:	1e41      	subs	r1, r0, #1
 8000d84:	4188      	sbcs	r0, r1
 8000d86:	4661      	mov	r1, ip
 8000d88:	0007      	movs	r7, r0
 8000d8a:	430f      	orrs	r7, r1
 8000d8c:	e630      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000d8e:	2120      	movs	r1, #32
 8000d90:	2700      	movs	r7, #0
 8000d92:	1a09      	subs	r1, r1, r0
 8000d94:	e50e      	b.n	80007b4 <__aeabi_dadd+0xe4>
 8000d96:	001e      	movs	r6, r3
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dadd+0x6ce>
 8000d9c:	e522      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000d9e:	2400      	movs	r4, #0
 8000da0:	e758      	b.n	8000c54 <__aeabi_dadd+0x584>
 8000da2:	2500      	movs	r5, #0
 8000da4:	2400      	movs	r4, #0
 8000da6:	2600      	movs	r6, #0
 8000da8:	e5db      	b.n	8000962 <__aeabi_dadd+0x292>
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	000007ff 	.word	0x000007ff
 8000db4:	ff7fffff 	.word	0xff7fffff
 8000db8:	4647      	mov	r7, r8
 8000dba:	430f      	orrs	r7, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x6f0>
 8000dbe:	e747      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000dc0:	000e      	movs	r6, r1
 8000dc2:	46c1      	mov	r9, r8
 8000dc4:	e5b5      	b.n	8000932 <__aeabi_dadd+0x262>
 8000dc6:	08df      	lsrs	r7, r3, #3
 8000dc8:	0764      	lsls	r4, r4, #29
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4327      	orrs	r7, r4
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	e5b5      	b.n	800093e <__aeabi_dadd+0x26e>
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	08c0      	lsrs	r0, r0, #3
 8000dd6:	0777      	lsls	r7, r6, #29
 8000dd8:	4307      	orrs	r7, r0
 8000dda:	4311      	orrs	r1, r2
 8000ddc:	08f0      	lsrs	r0, r6, #3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x714>
 8000de2:	e5d9      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0309      	lsls	r1, r1, #12
 8000de8:	4208      	tst	r0, r1
 8000dea:	d007      	beq.n	8000dfc <__aeabi_dadd+0x72c>
 8000dec:	08dc      	lsrs	r4, r3, #3
 8000dee:	420c      	tst	r4, r1
 8000df0:	d104      	bne.n	8000dfc <__aeabi_dadd+0x72c>
 8000df2:	08d2      	lsrs	r2, r2, #3
 8000df4:	075b      	lsls	r3, r3, #29
 8000df6:	431a      	orrs	r2, r3
 8000df8:	0017      	movs	r7, r2
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	0f7b      	lsrs	r3, r7, #29
 8000dfe:	00ff      	lsls	r7, r7, #3
 8000e00:	08ff      	lsrs	r7, r7, #3
 8000e02:	075b      	lsls	r3, r3, #29
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e5c7      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e08:	000f      	movs	r7, r1
 8000e0a:	e5c5      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	4033      	ands	r3, r6
 8000e12:	075f      	lsls	r7, r3, #29
 8000e14:	025b      	lsls	r3, r3, #9
 8000e16:	2401      	movs	r4, #1
 8000e18:	4317      	orrs	r7, r2
 8000e1a:	0b1e      	lsrs	r6, r3, #12
 8000e1c:	e5a1      	b.n	8000962 <__aeabi_dadd+0x292>
 8000e1e:	4226      	tst	r6, r4
 8000e20:	d012      	beq.n	8000e48 <__aeabi_dadd+0x778>
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e24:	4665      	mov	r5, ip
 8000e26:	0002      	movs	r2, r0
 8000e28:	2401      	movs	r4, #1
 8000e2a:	401e      	ands	r6, r3
 8000e2c:	e4e6      	b.n	80007fc <__aeabi_dadd+0x12c>
 8000e2e:	0021      	movs	r1, r4
 8000e30:	e585      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e32:	0017      	movs	r7, r2
 8000e34:	e5a8      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000e36:	003a      	movs	r2, r7
 8000e38:	e4d4      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	0764      	lsls	r4, r4, #29
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	0027      	movs	r7, r4
 8000e42:	2102      	movs	r1, #2
 8000e44:	0900      	lsrs	r0, r0, #4
 8000e46:	e57a      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0777      	lsls	r7, r6, #29
 8000e4c:	4307      	orrs	r7, r0
 8000e4e:	4665      	mov	r5, ip
 8000e50:	2100      	movs	r1, #0
 8000e52:	08f0      	lsrs	r0, r6, #3
 8000e54:	e573      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	ff7fffff 	.word	0xff7fffff

08000e5c <__aeabi_ddiv>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	46de      	mov	lr, fp
 8000e60:	4645      	mov	r5, r8
 8000e62:	4657      	mov	r7, sl
 8000e64:	464e      	mov	r6, r9
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	b087      	sub	sp, #28
 8000e6a:	9200      	str	r2, [sp, #0]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	030b      	lsls	r3, r1, #12
 8000e70:	0b1b      	lsrs	r3, r3, #12
 8000e72:	469b      	mov	fp, r3
 8000e74:	0fca      	lsrs	r2, r1, #31
 8000e76:	004b      	lsls	r3, r1, #1
 8000e78:	0004      	movs	r4, r0
 8000e7a:	4680      	mov	r8, r0
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	9202      	str	r2, [sp, #8]
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x28>
 8000e82:	e098      	b.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000e84:	4a7c      	ldr	r2, [pc, #496]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d037      	beq.n	8000efa <__aeabi_ddiv+0x9e>
 8000e8a:	4659      	mov	r1, fp
 8000e8c:	0f42      	lsrs	r2, r0, #29
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	430a      	orrs	r2, r1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0409      	lsls	r1, r1, #16
 8000e96:	4311      	orrs	r1, r2
 8000e98:	00c2      	lsls	r2, r0, #3
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4a77      	ldr	r2, [pc, #476]	@ (800107c <__aeabi_ddiv+0x220>)
 8000e9e:	4689      	mov	r9, r1
 8000ea0:	4692      	mov	sl, r2
 8000ea2:	449a      	add	sl, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	9e00      	ldr	r6, [sp, #0]
 8000eac:	9f01      	ldr	r7, [sp, #4]
 8000eae:	033b      	lsls	r3, r7, #12
 8000eb0:	0b1b      	lsrs	r3, r3, #12
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	007b      	lsls	r3, r7, #1
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	0ffd      	lsrs	r5, r7, #31
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d059      	beq.n	8000f74 <__aeabi_ddiv+0x118>
 8000ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d048      	beq.n	8000f58 <__aeabi_ddiv+0xfc>
 8000ec6:	4659      	mov	r1, fp
 8000ec8:	0f72      	lsrs	r2, r6, #29
 8000eca:	00c9      	lsls	r1, r1, #3
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0409      	lsls	r1, r1, #16
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	468b      	mov	fp, r1
 8000ed6:	4969      	ldr	r1, [pc, #420]	@ (800107c <__aeabi_ddiv+0x220>)
 8000ed8:	00f2      	lsls	r2, r6, #3
 8000eda:	468c      	mov	ip, r1
 8000edc:	4651      	mov	r1, sl
 8000ede:	4463      	add	r3, ip
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	9e02      	ldr	r6, [sp, #8]
 8000ee8:	406e      	eors	r6, r5
 8000eea:	b2f6      	uxtb	r6, r6
 8000eec:	2c0f      	cmp	r4, #15
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x96>
 8000ef0:	e0ce      	b.n	8001090 <__aeabi_ddiv+0x234>
 8000ef2:	4b63      	ldr	r3, [pc, #396]	@ (8001080 <__aeabi_ddiv+0x224>)
 8000ef4:	00a4      	lsls	r4, r4, #2
 8000ef6:	591b      	ldr	r3, [r3, r4]
 8000ef8:	469f      	mov	pc, r3
 8000efa:	465a      	mov	r2, fp
 8000efc:	4302      	orrs	r2, r0
 8000efe:	4691      	mov	r9, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_ddiv+0xa8>
 8000f02:	e090      	b.n	8001026 <__aeabi_ddiv+0x1ca>
 8000f04:	469a      	mov	sl, r3
 8000f06:	2302      	movs	r3, #2
 8000f08:	4690      	mov	r8, r2
 8000f0a:	2408      	movs	r4, #8
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	e7cc      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8000f10:	46cb      	mov	fp, r9
 8000f12:	4642      	mov	r2, r8
 8000f14:	9d02      	ldr	r5, [sp, #8]
 8000f16:	9903      	ldr	r1, [sp, #12]
 8000f18:	2902      	cmp	r1, #2
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xc2>
 8000f1c:	e1de      	b.n	80012dc <__aeabi_ddiv+0x480>
 8000f1e:	2903      	cmp	r1, #3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0xc8>
 8000f22:	e08d      	b.n	8001040 <__aeabi_ddiv+0x1e4>
 8000f24:	2901      	cmp	r1, #1
 8000f26:	d000      	beq.n	8000f2a <__aeabi_ddiv+0xce>
 8000f28:	e179      	b.n	800121e <__aeabi_ddiv+0x3c2>
 8000f2a:	002e      	movs	r6, r5
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2400      	movs	r4, #0
 8000f32:	4690      	mov	r8, r2
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	4323      	orrs	r3, r4
 8000f38:	07f6      	lsls	r6, r6, #31
 8000f3a:	4333      	orrs	r3, r6
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	0019      	movs	r1, r3
 8000f40:	b007      	add	sp, #28
 8000f42:	bcf0      	pop	{r4, r5, r6, r7}
 8000f44:	46bb      	mov	fp, r7
 8000f46:	46b2      	mov	sl, r6
 8000f48:	46a9      	mov	r9, r5
 8000f4a:	46a0      	mov	r8, r4
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2400      	movs	r4, #0
 8000f52:	4690      	mov	r8, r2
 8000f54:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000f56:	e7ed      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8000f58:	465a      	mov	r2, fp
 8000f5a:	9b00      	ldr	r3, [sp, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <__aeabi_ddiv+0x228>)
 8000f60:	469c      	mov	ip, r3
 8000f62:	44e2      	add	sl, ip
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d159      	bne.n	800101c <__aeabi_ddiv+0x1c0>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	469b      	mov	fp, r3
 8000f72:	e7b8      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000f74:	465a      	mov	r2, fp
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	d049      	beq.n	8001010 <__aeabi_ddiv+0x1b4>
 8000f7c:	465b      	mov	r3, fp
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x128>
 8000f82:	e19c      	b.n	80012be <__aeabi_ddiv+0x462>
 8000f84:	4658      	mov	r0, fp
 8000f86:	f7ff fa7b 	bl	8000480 <__clzsi2>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3a0b      	subs	r2, #11
 8000f90:	271d      	movs	r7, #29
 8000f92:	9e00      	ldr	r6, [sp, #0]
 8000f94:	1aba      	subs	r2, r7, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	4658      	mov	r0, fp
 8000f9a:	40d6      	lsrs	r6, r2
 8000f9c:	3908      	subs	r1, #8
 8000f9e:	4088      	lsls	r0, r1
 8000fa0:	0032      	movs	r2, r6
 8000fa2:	4302      	orrs	r2, r0
 8000fa4:	4693      	mov	fp, r2
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	408a      	lsls	r2, r1
 8000faa:	4937      	ldr	r1, [pc, #220]	@ (8001088 <__aeabi_ddiv+0x22c>)
 8000fac:	4453      	add	r3, sl
 8000fae:	468a      	mov	sl, r1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	449a      	add	sl, r3
 8000fb4:	e797      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	d021      	beq.n	8001002 <__aeabi_ddiv+0x1a6>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x16a>
 8000fc4:	e169      	b.n	800129a <__aeabi_ddiv+0x43e>
 8000fc6:	4658      	mov	r0, fp
 8000fc8:	f7ff fa5a 	bl	8000480 <__clzsi2>
 8000fcc:	230b      	movs	r3, #11
 8000fce:	425b      	negs	r3, r3
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	4484      	add	ip, r0
 8000fd6:	4666      	mov	r6, ip
 8000fd8:	231d      	movs	r3, #29
 8000fda:	1b9b      	subs	r3, r3, r6
 8000fdc:	0026      	movs	r6, r4
 8000fde:	0011      	movs	r1, r2
 8000fe0:	4658      	mov	r0, fp
 8000fe2:	40de      	lsrs	r6, r3
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	4088      	lsls	r0, r1
 8000fe8:	0033      	movs	r3, r6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	4699      	mov	r9, r3
 8000fee:	0023      	movs	r3, r4
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <__aeabi_ddiv+0x230>)
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	e753      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001002:	2300      	movs	r3, #0
 8001004:	4698      	mov	r8, r3
 8001006:	469a      	mov	sl, r3
 8001008:	3301      	adds	r3, #1
 800100a:	2404      	movs	r4, #4
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	e74c      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001010:	2301      	movs	r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	2300      	movs	r3, #0
 8001016:	2101      	movs	r1, #1
 8001018:	469b      	mov	fp, r3
 800101a:	e764      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 800101c:	2303      	movs	r3, #3
 800101e:	0032      	movs	r2, r6
 8001020:	2103      	movs	r1, #3
 8001022:	431c      	orrs	r4, r3
 8001024:	e75f      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8001026:	469a      	mov	sl, r3
 8001028:	2303      	movs	r3, #3
 800102a:	46d9      	mov	r9, fp
 800102c:	240c      	movs	r4, #12
 800102e:	9303      	str	r3, [sp, #12]
 8001030:	e73b      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001032:	2300      	movs	r3, #0
 8001034:	2480      	movs	r4, #128	@ 0x80
 8001036:	4698      	mov	r8, r3
 8001038:	2600      	movs	r6, #0
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <__aeabi_ddiv+0x21c>)
 800103c:	0324      	lsls	r4, r4, #12
 800103e:	e779      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001040:	2480      	movs	r4, #128	@ 0x80
 8001042:	465b      	mov	r3, fp
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	431c      	orrs	r4, r3
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	002e      	movs	r6, r5
 800104c:	4690      	mov	r8, r2
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001050:	0b24      	lsrs	r4, r4, #12
 8001052:	e76f      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	4223      	tst	r3, r4
 800105c:	d002      	beq.n	8001064 <__aeabi_ddiv+0x208>
 800105e:	465b      	mov	r3, fp
 8001060:	4223      	tst	r3, r4
 8001062:	d0f0      	beq.n	8001046 <__aeabi_ddiv+0x1ea>
 8001064:	2480      	movs	r4, #128	@ 0x80
 8001066:	464b      	mov	r3, r9
 8001068:	0324      	lsls	r4, r4, #12
 800106a:	431c      	orrs	r4, r3
 800106c:	0324      	lsls	r4, r4, #12
 800106e:	9e02      	ldr	r6, [sp, #8]
 8001070:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001072:	0b24      	lsrs	r4, r4, #12
 8001074:	e75e      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	000007ff 	.word	0x000007ff
 800107c:	fffffc01 	.word	0xfffffc01
 8001080:	0801c1c0 	.word	0x0801c1c0
 8001084:	fffff801 	.word	0xfffff801
 8001088:	000003f3 	.word	0x000003f3
 800108c:	fffffc0d 	.word	0xfffffc0d
 8001090:	45cb      	cmp	fp, r9
 8001092:	d200      	bcs.n	8001096 <__aeabi_ddiv+0x23a>
 8001094:	e0f8      	b.n	8001288 <__aeabi_ddiv+0x42c>
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x23e>
 8001098:	e0f3      	b.n	8001282 <__aeabi_ddiv+0x426>
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	469c      	mov	ip, r3
 80010a0:	4644      	mov	r4, r8
 80010a2:	4648      	mov	r0, r9
 80010a4:	2500      	movs	r5, #0
 80010a6:	44e2      	add	sl, ip
 80010a8:	465b      	mov	r3, fp
 80010aa:	0e17      	lsrs	r7, r2, #24
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	431f      	orrs	r7, r3
 80010b0:	0c19      	lsrs	r1, r3, #16
 80010b2:	043b      	lsls	r3, r7, #16
 80010b4:	0212      	lsls	r2, r2, #8
 80010b6:	9700      	str	r7, [sp, #0]
 80010b8:	0c1f      	lsrs	r7, r3, #16
 80010ba:	4691      	mov	r9, r2
 80010bc:	9102      	str	r1, [sp, #8]
 80010be:	9703      	str	r7, [sp, #12]
 80010c0:	f7ff f8b0 	bl	8000224 <__aeabi_uidivmod>
 80010c4:	0002      	movs	r2, r0
 80010c6:	437a      	muls	r2, r7
 80010c8:	040b      	lsls	r3, r1, #16
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	4680      	mov	r8, r0
 80010ce:	4319      	orrs	r1, r3
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d909      	bls.n	80010e8 <__aeabi_ddiv+0x28c>
 80010d4:	9f00      	ldr	r7, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	46bc      	mov	ip, r7
 80010da:	425b      	negs	r3, r3
 80010dc:	4461      	add	r1, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	44e0      	add	r8, ip
 80010e2:	428f      	cmp	r7, r1
 80010e4:	d800      	bhi.n	80010e8 <__aeabi_ddiv+0x28c>
 80010e6:	e15c      	b.n	80013a2 <__aeabi_ddiv+0x546>
 80010e8:	1a88      	subs	r0, r1, r2
 80010ea:	9902      	ldr	r1, [sp, #8]
 80010ec:	f7ff f89a 	bl	8000224 <__aeabi_uidivmod>
 80010f0:	9a03      	ldr	r2, [sp, #12]
 80010f2:	0424      	lsls	r4, r4, #16
 80010f4:	4342      	muls	r2, r0
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	0c24      	lsrs	r4, r4, #16
 80010fa:	0003      	movs	r3, r0
 80010fc:	430c      	orrs	r4, r1
 80010fe:	42a2      	cmp	r2, r4
 8001100:	d906      	bls.n	8001110 <__aeabi_ddiv+0x2b4>
 8001102:	9900      	ldr	r1, [sp, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	468c      	mov	ip, r1
 8001108:	4464      	add	r4, ip
 800110a:	42a1      	cmp	r1, r4
 800110c:	d800      	bhi.n	8001110 <__aeabi_ddiv+0x2b4>
 800110e:	e142      	b.n	8001396 <__aeabi_ddiv+0x53a>
 8001110:	1aa0      	subs	r0, r4, r2
 8001112:	4642      	mov	r2, r8
 8001114:	0412      	lsls	r2, r2, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	4693      	mov	fp, r2
 800111a:	464b      	mov	r3, r9
 800111c:	4659      	mov	r1, fp
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	001f      	movs	r7, r3
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	040b      	lsls	r3, r1, #16
 8001126:	4649      	mov	r1, r9
 8001128:	0409      	lsls	r1, r1, #16
 800112a:	0c09      	lsrs	r1, r1, #16
 800112c:	000c      	movs	r4, r1
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	435c      	muls	r4, r3
 8001132:	0c12      	lsrs	r2, r2, #16
 8001134:	437b      	muls	r3, r7
 8001136:	4688      	mov	r8, r1
 8001138:	4351      	muls	r1, r2
 800113a:	437a      	muls	r2, r7
 800113c:	0c27      	lsrs	r7, r4, #16
 800113e:	46bc      	mov	ip, r7
 8001140:	185b      	adds	r3, r3, r1
 8001142:	4463      	add	r3, ip
 8001144:	4299      	cmp	r1, r3
 8001146:	d903      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	468c      	mov	ip, r1
 800114e:	4462      	add	r2, ip
 8001150:	0c19      	lsrs	r1, r3, #16
 8001152:	0424      	lsls	r4, r4, #16
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	0c24      	lsrs	r4, r4, #16
 8001158:	188a      	adds	r2, r1, r2
 800115a:	191c      	adds	r4, r3, r4
 800115c:	4290      	cmp	r0, r2
 800115e:	d302      	bcc.n	8001166 <__aeabi_ddiv+0x30a>
 8001160:	d116      	bne.n	8001190 <__aeabi_ddiv+0x334>
 8001162:	42a5      	cmp	r5, r4
 8001164:	d214      	bcs.n	8001190 <__aeabi_ddiv+0x334>
 8001166:	465b      	mov	r3, fp
 8001168:	9f00      	ldr	r7, [sp, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	444d      	add	r5, r9
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	454d      	cmp	r5, r9
 8001172:	419b      	sbcs	r3, r3
 8001174:	46bc      	mov	ip, r7
 8001176:	425b      	negs	r3, r3
 8001178:	4463      	add	r3, ip
 800117a:	18c0      	adds	r0, r0, r3
 800117c:	4287      	cmp	r7, r0
 800117e:	d300      	bcc.n	8001182 <__aeabi_ddiv+0x326>
 8001180:	e102      	b.n	8001388 <__aeabi_ddiv+0x52c>
 8001182:	4282      	cmp	r2, r0
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x32c>
 8001186:	e129      	b.n	80013dc <__aeabi_ddiv+0x580>
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x330>
 800118a:	e124      	b.n	80013d6 <__aeabi_ddiv+0x57a>
 800118c:	9b05      	ldr	r3, [sp, #20]
 800118e:	469b      	mov	fp, r3
 8001190:	1b2c      	subs	r4, r5, r4
 8001192:	42a5      	cmp	r5, r4
 8001194:	41ad      	sbcs	r5, r5
 8001196:	9b00      	ldr	r3, [sp, #0]
 8001198:	1a80      	subs	r0, r0, r2
 800119a:	426d      	negs	r5, r5
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	4283      	cmp	r3, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x348>
 80011a2:	e10f      	b.n	80013c4 <__aeabi_ddiv+0x568>
 80011a4:	9902      	ldr	r1, [sp, #8]
 80011a6:	f7ff f83d 	bl	8000224 <__aeabi_uidivmod>
 80011aa:	9a03      	ldr	r2, [sp, #12]
 80011ac:	040b      	lsls	r3, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0c21      	lsrs	r1, r4, #16
 80011b2:	0005      	movs	r5, r0
 80011b4:	4319      	orrs	r1, r3
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x360>
 80011ba:	e0cb      	b.n	8001354 <__aeabi_ddiv+0x4f8>
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	9902      	ldr	r1, [sp, #8]
 80011c0:	f7ff f830 	bl	8000224 <__aeabi_uidivmod>
 80011c4:	9a03      	ldr	r2, [sp, #12]
 80011c6:	0424      	lsls	r4, r4, #16
 80011c8:	4342      	muls	r2, r0
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	0c24      	lsrs	r4, r4, #16
 80011ce:	0003      	movs	r3, r0
 80011d0:	430c      	orrs	r4, r1
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x37c>
 80011d6:	e0ca      	b.n	800136e <__aeabi_ddiv+0x512>
 80011d8:	4641      	mov	r1, r8
 80011da:	1aa4      	subs	r4, r4, r2
 80011dc:	042a      	lsls	r2, r5, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	9f04      	ldr	r7, [sp, #16]
 80011e2:	0413      	lsls	r3, r2, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	4359      	muls	r1, r3
 80011e8:	4640      	mov	r0, r8
 80011ea:	437b      	muls	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	0c15      	lsrs	r5, r2, #16
 80011f0:	4368      	muls	r0, r5
 80011f2:	0c0b      	lsrs	r3, r1, #16
 80011f4:	4484      	add	ip, r0
 80011f6:	4463      	add	r3, ip
 80011f8:	437d      	muls	r5, r7
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d903      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 80011fe:	2080      	movs	r0, #128	@ 0x80
 8001200:	0240      	lsls	r0, r0, #9
 8001202:	4684      	mov	ip, r0
 8001204:	4465      	add	r5, ip
 8001206:	0c18      	lsrs	r0, r3, #16
 8001208:	0409      	lsls	r1, r1, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	1940      	adds	r0, r0, r5
 8001210:	185b      	adds	r3, r3, r1
 8001212:	4284      	cmp	r4, r0
 8001214:	d327      	bcc.n	8001266 <__aeabi_ddiv+0x40a>
 8001216:	d023      	beq.n	8001260 <__aeabi_ddiv+0x404>
 8001218:	2301      	movs	r3, #1
 800121a:	0035      	movs	r5, r6
 800121c:	431a      	orrs	r2, r3
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <__aeabi_ddiv+0x614>)
 8001220:	4453      	add	r3, sl
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd60      	ble.n	80012e8 <__aeabi_ddiv+0x48c>
 8001226:	0751      	lsls	r1, r2, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x3d0>
 800122a:	e086      	b.n	800133a <__aeabi_ddiv+0x4de>
 800122c:	002e      	movs	r6, r5
 800122e:	08d1      	lsrs	r1, r2, #3
 8001230:	465a      	mov	r2, fp
 8001232:	01d2      	lsls	r2, r2, #7
 8001234:	d506      	bpl.n	8001244 <__aeabi_ddiv+0x3e8>
 8001236:	465a      	mov	r2, fp
 8001238:	4b8e      	ldr	r3, [pc, #568]	@ (8001474 <__aeabi_ddiv+0x618>)
 800123a:	401a      	ands	r2, r3
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	4693      	mov	fp, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4453      	add	r3, sl
 8001244:	4a8c      	ldr	r2, [pc, #560]	@ (8001478 <__aeabi_ddiv+0x61c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	dd00      	ble.n	800124c <__aeabi_ddiv+0x3f0>
 800124a:	e680      	b.n	8000f4e <__aeabi_ddiv+0xf2>
 800124c:	465a      	mov	r2, fp
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	430a      	orrs	r2, r1
 8001252:	4690      	mov	r8, r2
 8001254:	465a      	mov	r2, fp
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	0254      	lsls	r4, r2, #9
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	0d5b      	lsrs	r3, r3, #21
 800125e:	e669      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001260:	0035      	movs	r5, r6
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0db      	beq.n	800121e <__aeabi_ddiv+0x3c2>
 8001266:	9d00      	ldr	r5, [sp, #0]
 8001268:	1e51      	subs	r1, r2, #1
 800126a:	46ac      	mov	ip, r5
 800126c:	4464      	add	r4, ip
 800126e:	42ac      	cmp	r4, r5
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x418>
 8001272:	e09e      	b.n	80013b2 <__aeabi_ddiv+0x556>
 8001274:	4284      	cmp	r4, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x41e>
 8001278:	e0e1      	b.n	800143e <__aeabi_ddiv+0x5e2>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x422>
 800127c:	e0ee      	b.n	800145c <__aeabi_ddiv+0x600>
 800127e:	000a      	movs	r2, r1
 8001280:	e7ca      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 8001282:	4542      	cmp	r2, r8
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x42c>
 8001286:	e708      	b.n	800109a <__aeabi_ddiv+0x23e>
 8001288:	464b      	mov	r3, r9
 800128a:	07dc      	lsls	r4, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	4643      	mov	r3, r8
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	431c      	orrs	r4, r3
 8001294:	4643      	mov	r3, r8
 8001296:	07dd      	lsls	r5, r3, #31
 8001298:	e706      	b.n	80010a8 <__aeabi_ddiv+0x24c>
 800129a:	f7ff f8f1 	bl	8000480 <__clzsi2>
 800129e:	2315      	movs	r3, #21
 80012a0:	469c      	mov	ip, r3
 80012a2:	4484      	add	ip, r0
 80012a4:	0002      	movs	r2, r0
 80012a6:	4663      	mov	r3, ip
 80012a8:	3220      	adds	r2, #32
 80012aa:	2b1c      	cmp	r3, #28
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x454>
 80012ae:	e692      	b.n	8000fd6 <__aeabi_ddiv+0x17a>
 80012b0:	0023      	movs	r3, r4
 80012b2:	3808      	subs	r0, #8
 80012b4:	4083      	lsls	r3, r0
 80012b6:	4699      	mov	r9, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	4698      	mov	r8, r3
 80012bc:	e69a      	b.n	8000ff4 <__aeabi_ddiv+0x198>
 80012be:	f7ff f8df 	bl	8000480 <__clzsi2>
 80012c2:	0002      	movs	r2, r0
 80012c4:	0003      	movs	r3, r0
 80012c6:	3215      	adds	r2, #21
 80012c8:	3320      	adds	r3, #32
 80012ca:	2a1c      	cmp	r2, #28
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_ddiv+0x474>
 80012ce:	e65f      	b.n	8000f90 <__aeabi_ddiv+0x134>
 80012d0:	9900      	ldr	r1, [sp, #0]
 80012d2:	3808      	subs	r0, #8
 80012d4:	4081      	lsls	r1, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	468b      	mov	fp, r1
 80012da:	e666      	b.n	8000faa <__aeabi_ddiv+0x14e>
 80012dc:	2200      	movs	r2, #0
 80012de:	002e      	movs	r6, r5
 80012e0:	2400      	movs	r4, #0
 80012e2:	4690      	mov	r8, r2
 80012e4:	4b65      	ldr	r3, [pc, #404]	@ (800147c <__aeabi_ddiv+0x620>)
 80012e6:	e625      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 80012e8:	002e      	movs	r6, r5
 80012ea:	2101      	movs	r1, #1
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	2938      	cmp	r1, #56	@ 0x38
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_ddiv+0x498>
 80012f2:	e61b      	b.n	8000f2c <__aeabi_ddiv+0xd0>
 80012f4:	291f      	cmp	r1, #31
 80012f6:	dc7e      	bgt.n	80013f6 <__aeabi_ddiv+0x59a>
 80012f8:	4861      	ldr	r0, [pc, #388]	@ (8001480 <__aeabi_ddiv+0x624>)
 80012fa:	0014      	movs	r4, r2
 80012fc:	4450      	add	r0, sl
 80012fe:	465b      	mov	r3, fp
 8001300:	4082      	lsls	r2, r0
 8001302:	4083      	lsls	r3, r0
 8001304:	40cc      	lsrs	r4, r1
 8001306:	1e50      	subs	r0, r2, #1
 8001308:	4182      	sbcs	r2, r0
 800130a:	4323      	orrs	r3, r4
 800130c:	431a      	orrs	r2, r3
 800130e:	465b      	mov	r3, fp
 8001310:	40cb      	lsrs	r3, r1
 8001312:	0751      	lsls	r1, r2, #29
 8001314:	d009      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 8001316:	210f      	movs	r1, #15
 8001318:	4011      	ands	r1, r2
 800131a:	2904      	cmp	r1, #4
 800131c:	d005      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 800131e:	1d11      	adds	r1, r2, #4
 8001320:	4291      	cmp	r1, r2
 8001322:	4192      	sbcs	r2, r2
 8001324:	4252      	negs	r2, r2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	000a      	movs	r2, r1
 800132a:	0219      	lsls	r1, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_ddiv+0x4d4>
 800132e:	e09b      	b.n	8001468 <__aeabi_ddiv+0x60c>
 8001330:	2200      	movs	r2, #0
 8001332:	2301      	movs	r3, #1
 8001334:	2400      	movs	r4, #0
 8001336:	4690      	mov	r8, r2
 8001338:	e5fc      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800133a:	210f      	movs	r1, #15
 800133c:	4011      	ands	r1, r2
 800133e:	2904      	cmp	r1, #4
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x4e8>
 8001342:	e773      	b.n	800122c <__aeabi_ddiv+0x3d0>
 8001344:	1d11      	adds	r1, r2, #4
 8001346:	4291      	cmp	r1, r2
 8001348:	4192      	sbcs	r2, r2
 800134a:	4252      	negs	r2, r2
 800134c:	002e      	movs	r6, r5
 800134e:	08c9      	lsrs	r1, r1, #3
 8001350:	4493      	add	fp, r2
 8001352:	e76d      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 8001354:	9b00      	ldr	r3, [sp, #0]
 8001356:	3d01      	subs	r5, #1
 8001358:	469c      	mov	ip, r3
 800135a:	4461      	add	r1, ip
 800135c:	428b      	cmp	r3, r1
 800135e:	d900      	bls.n	8001362 <__aeabi_ddiv+0x506>
 8001360:	e72c      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001362:	428a      	cmp	r2, r1
 8001364:	d800      	bhi.n	8001368 <__aeabi_ddiv+0x50c>
 8001366:	e729      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001368:	1e85      	subs	r5, r0, #2
 800136a:	4461      	add	r1, ip
 800136c:	e726      	b.n	80011bc <__aeabi_ddiv+0x360>
 800136e:	9900      	ldr	r1, [sp, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	468c      	mov	ip, r1
 8001374:	4464      	add	r4, ip
 8001376:	42a1      	cmp	r1, r4
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x520>
 800137a:	e72d      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 800137c:	42a2      	cmp	r2, r4
 800137e:	d800      	bhi.n	8001382 <__aeabi_ddiv+0x526>
 8001380:	e72a      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001382:	1e83      	subs	r3, r0, #2
 8001384:	4464      	add	r4, ip
 8001386:	e727      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001388:	4287      	cmp	r7, r0
 800138a:	d000      	beq.n	800138e <__aeabi_ddiv+0x532>
 800138c:	e6fe      	b.n	800118c <__aeabi_ddiv+0x330>
 800138e:	45a9      	cmp	r9, r5
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x538>
 8001392:	e6fb      	b.n	800118c <__aeabi_ddiv+0x330>
 8001394:	e6f5      	b.n	8001182 <__aeabi_ddiv+0x326>
 8001396:	42a2      	cmp	r2, r4
 8001398:	d800      	bhi.n	800139c <__aeabi_ddiv+0x540>
 800139a:	e6b9      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 800139c:	1e83      	subs	r3, r0, #2
 800139e:	4464      	add	r4, ip
 80013a0:	e6b6      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x54c>
 80013a6:	e69f      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1e83      	subs	r3, r0, #2
 80013ac:	4698      	mov	r8, r3
 80013ae:	4461      	add	r1, ip
 80013b0:	e69a      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013b2:	000a      	movs	r2, r1
 80013b4:	4284      	cmp	r4, r0
 80013b6:	d000      	beq.n	80013ba <__aeabi_ddiv+0x55e>
 80013b8:	e72e      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013ba:	454b      	cmp	r3, r9
 80013bc:	d000      	beq.n	80013c0 <__aeabi_ddiv+0x564>
 80013be:	e72b      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013c0:	0035      	movs	r5, r6
 80013c2:	e72c      	b.n	800121e <__aeabi_ddiv+0x3c2>
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <__aeabi_ddiv+0x614>)
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <__aeabi_ddiv+0x628>)
 80013c8:	4453      	add	r3, sl
 80013ca:	4592      	cmp	sl, r2
 80013cc:	db43      	blt.n	8001456 <__aeabi_ddiv+0x5fa>
 80013ce:	2201      	movs	r2, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	4493      	add	fp, r2
 80013d4:	e72c      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	d800      	bhi.n	80013dc <__aeabi_ddiv+0x580>
 80013da:	e6d7      	b.n	800118c <__aeabi_ddiv+0x330>
 80013dc:	2302      	movs	r3, #2
 80013de:	425b      	negs	r3, r3
 80013e0:	469c      	mov	ip, r3
 80013e2:	9900      	ldr	r1, [sp, #0]
 80013e4:	444d      	add	r5, r9
 80013e6:	454d      	cmp	r5, r9
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	44e3      	add	fp, ip
 80013ec:	468c      	mov	ip, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	4463      	add	r3, ip
 80013f2:	18c0      	adds	r0, r0, r3
 80013f4:	e6cc      	b.n	8001190 <__aeabi_ddiv+0x334>
 80013f6:	201f      	movs	r0, #31
 80013f8:	4240      	negs	r0, r0
 80013fa:	1ac3      	subs	r3, r0, r3
 80013fc:	4658      	mov	r0, fp
 80013fe:	40d8      	lsrs	r0, r3
 8001400:	2920      	cmp	r1, #32
 8001402:	d004      	beq.n	800140e <__aeabi_ddiv+0x5b2>
 8001404:	4659      	mov	r1, fp
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <__aeabi_ddiv+0x62c>)
 8001408:	4453      	add	r3, sl
 800140a:	4099      	lsls	r1, r3
 800140c:	430a      	orrs	r2, r1
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	2307      	movs	r3, #7
 8001414:	0019      	movs	r1, r3
 8001416:	4302      	orrs	r2, r0
 8001418:	2400      	movs	r4, #0
 800141a:	4011      	ands	r1, r2
 800141c:	4213      	tst	r3, r2
 800141e:	d009      	beq.n	8001434 <__aeabi_ddiv+0x5d8>
 8001420:	3308      	adds	r3, #8
 8001422:	4013      	ands	r3, r2
 8001424:	2b04      	cmp	r3, #4
 8001426:	d01d      	beq.n	8001464 <__aeabi_ddiv+0x608>
 8001428:	1d13      	adds	r3, r2, #4
 800142a:	4293      	cmp	r3, r2
 800142c:	4189      	sbcs	r1, r1
 800142e:	001a      	movs	r2, r3
 8001430:	4249      	negs	r1, r1
 8001432:	0749      	lsls	r1, r1, #29
 8001434:	08d2      	lsrs	r2, r2, #3
 8001436:	430a      	orrs	r2, r1
 8001438:	4690      	mov	r8, r2
 800143a:	2300      	movs	r3, #0
 800143c:	e57a      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800143e:	4649      	mov	r1, r9
 8001440:	9f00      	ldr	r7, [sp, #0]
 8001442:	004d      	lsls	r5, r1, #1
 8001444:	454d      	cmp	r5, r9
 8001446:	4189      	sbcs	r1, r1
 8001448:	46bc      	mov	ip, r7
 800144a:	4249      	negs	r1, r1
 800144c:	4461      	add	r1, ip
 800144e:	46a9      	mov	r9, r5
 8001450:	3a02      	subs	r2, #2
 8001452:	1864      	adds	r4, r4, r1
 8001454:	e7ae      	b.n	80013b4 <__aeabi_ddiv+0x558>
 8001456:	2201      	movs	r2, #1
 8001458:	4252      	negs	r2, r2
 800145a:	e746      	b.n	80012ea <__aeabi_ddiv+0x48e>
 800145c:	4599      	cmp	r9, r3
 800145e:	d3ee      	bcc.n	800143e <__aeabi_ddiv+0x5e2>
 8001460:	000a      	movs	r2, r1
 8001462:	e7aa      	b.n	80013ba <__aeabi_ddiv+0x55e>
 8001464:	2100      	movs	r1, #0
 8001466:	e7e5      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001468:	0759      	lsls	r1, r3, #29
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	0b1c      	lsrs	r4, r3, #12
 800146e:	e7e1      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001470:	000003ff 	.word	0x000003ff
 8001474:	feffffff 	.word	0xfeffffff
 8001478:	000007fe 	.word	0x000007fe
 800147c:	000007ff 	.word	0x000007ff
 8001480:	0000041e 	.word	0x0000041e
 8001484:	fffffc02 	.word	0xfffffc02
 8001488:	0000043e 	.word	0x0000043e

0800148c <__eqdf2>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	46de      	mov	lr, fp
 8001492:	464e      	mov	r6, r9
 8001494:	4645      	mov	r5, r8
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	000d      	movs	r5, r1
 800149a:	0004      	movs	r4, r0
 800149c:	0fe8      	lsrs	r0, r5, #31
 800149e:	4683      	mov	fp, r0
 80014a0:	0309      	lsls	r1, r1, #12
 80014a2:	0fd8      	lsrs	r0, r3, #31
 80014a4:	0b09      	lsrs	r1, r1, #12
 80014a6:	4682      	mov	sl, r0
 80014a8:	4819      	ldr	r0, [pc, #100]	@ (8001510 <__eqdf2+0x84>)
 80014aa:	468c      	mov	ip, r1
 80014ac:	031f      	lsls	r7, r3, #12
 80014ae:	0069      	lsls	r1, r5, #1
 80014b0:	005e      	lsls	r6, r3, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	0b3f      	lsrs	r7, r7, #12
 80014b6:	0d76      	lsrs	r6, r6, #21
 80014b8:	4281      	cmp	r1, r0
 80014ba:	d018      	beq.n	80014ee <__eqdf2+0x62>
 80014bc:	4286      	cmp	r6, r0
 80014be:	d00f      	beq.n	80014e0 <__eqdf2+0x54>
 80014c0:	2001      	movs	r0, #1
 80014c2:	42b1      	cmp	r1, r6
 80014c4:	d10d      	bne.n	80014e2 <__eqdf2+0x56>
 80014c6:	45bc      	cmp	ip, r7
 80014c8:	d10b      	bne.n	80014e2 <__eqdf2+0x56>
 80014ca:	4294      	cmp	r4, r2
 80014cc:	d109      	bne.n	80014e2 <__eqdf2+0x56>
 80014ce:	45d3      	cmp	fp, sl
 80014d0:	d01c      	beq.n	800150c <__eqdf2+0x80>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d105      	bne.n	80014e2 <__eqdf2+0x56>
 80014d6:	4660      	mov	r0, ip
 80014d8:	4320      	orrs	r0, r4
 80014da:	1e43      	subs	r3, r0, #1
 80014dc:	4198      	sbcs	r0, r3
 80014de:	e000      	b.n	80014e2 <__eqdf2+0x56>
 80014e0:	2001      	movs	r0, #1
 80014e2:	bcf0      	pop	{r4, r5, r6, r7}
 80014e4:	46bb      	mov	fp, r7
 80014e6:	46b2      	mov	sl, r6
 80014e8:	46a9      	mov	r9, r5
 80014ea:	46a0      	mov	r8, r4
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	2001      	movs	r0, #1
 80014f0:	428e      	cmp	r6, r1
 80014f2:	d1f6      	bne.n	80014e2 <__eqdf2+0x56>
 80014f4:	4661      	mov	r1, ip
 80014f6:	4339      	orrs	r1, r7
 80014f8:	000f      	movs	r7, r1
 80014fa:	4317      	orrs	r7, r2
 80014fc:	4327      	orrs	r7, r4
 80014fe:	d1f0      	bne.n	80014e2 <__eqdf2+0x56>
 8001500:	465b      	mov	r3, fp
 8001502:	4652      	mov	r2, sl
 8001504:	1a98      	subs	r0, r3, r2
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	4198      	sbcs	r0, r3
 800150a:	e7ea      	b.n	80014e2 <__eqdf2+0x56>
 800150c:	2000      	movs	r0, #0
 800150e:	e7e8      	b.n	80014e2 <__eqdf2+0x56>
 8001510:	000007ff 	.word	0x000007ff

08001514 <__gedf2>:
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	4657      	mov	r7, sl
 8001518:	464e      	mov	r6, r9
 800151a:	4645      	mov	r5, r8
 800151c:	46de      	mov	lr, fp
 800151e:	b5e0      	push	{r5, r6, r7, lr}
 8001520:	000d      	movs	r5, r1
 8001522:	030e      	lsls	r6, r1, #12
 8001524:	0049      	lsls	r1, r1, #1
 8001526:	0d49      	lsrs	r1, r1, #21
 8001528:	468a      	mov	sl, r1
 800152a:	0fdf      	lsrs	r7, r3, #31
 800152c:	0fe9      	lsrs	r1, r5, #31
 800152e:	46bc      	mov	ip, r7
 8001530:	b083      	sub	sp, #12
 8001532:	4f2f      	ldr	r7, [pc, #188]	@ (80015f0 <__gedf2+0xdc>)
 8001534:	0004      	movs	r4, r0
 8001536:	4680      	mov	r8, r0
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	0058      	lsls	r0, r3, #1
 800153c:	0319      	lsls	r1, r3, #12
 800153e:	4691      	mov	r9, r2
 8001540:	0b36      	lsrs	r6, r6, #12
 8001542:	0b09      	lsrs	r1, r1, #12
 8001544:	0d40      	lsrs	r0, r0, #21
 8001546:	45ba      	cmp	sl, r7
 8001548:	d01d      	beq.n	8001586 <__gedf2+0x72>
 800154a:	42b8      	cmp	r0, r7
 800154c:	d00d      	beq.n	800156a <__gedf2+0x56>
 800154e:	4657      	mov	r7, sl
 8001550:	2f00      	cmp	r7, #0
 8001552:	d12a      	bne.n	80015aa <__gedf2+0x96>
 8001554:	4334      	orrs	r4, r6
 8001556:	2800      	cmp	r0, #0
 8001558:	d124      	bne.n	80015a4 <__gedf2+0x90>
 800155a:	430a      	orrs	r2, r1
 800155c:	d036      	beq.n	80015cc <__gedf2+0xb8>
 800155e:	2c00      	cmp	r4, #0
 8001560:	d141      	bne.n	80015e6 <__gedf2+0xd2>
 8001562:	4663      	mov	r3, ip
 8001564:	0058      	lsls	r0, r3, #1
 8001566:	3801      	subs	r0, #1
 8001568:	e015      	b.n	8001596 <__gedf2+0x82>
 800156a:	4311      	orrs	r1, r2
 800156c:	d138      	bne.n	80015e0 <__gedf2+0xcc>
 800156e:	4653      	mov	r3, sl
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <__gedf2+0x64>
 8001574:	4326      	orrs	r6, r4
 8001576:	d0f4      	beq.n	8001562 <__gedf2+0x4e>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	4563      	cmp	r3, ip
 800157c:	d107      	bne.n	800158e <__gedf2+0x7a>
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	3801      	subs	r0, #1
 8001584:	e007      	b.n	8001596 <__gedf2+0x82>
 8001586:	4326      	orrs	r6, r4
 8001588:	d12a      	bne.n	80015e0 <__gedf2+0xcc>
 800158a:	4550      	cmp	r0, sl
 800158c:	d021      	beq.n	80015d2 <__gedf2+0xbe>
 800158e:	2001      	movs	r0, #1
 8001590:	9b01      	ldr	r3, [sp, #4]
 8001592:	425f      	negs	r7, r3
 8001594:	4338      	orrs	r0, r7
 8001596:	b003      	add	sp, #12
 8001598:	bcf0      	pop	{r4, r5, r6, r7}
 800159a:	46bb      	mov	fp, r7
 800159c:	46b2      	mov	sl, r6
 800159e:	46a9      	mov	r9, r5
 80015a0:	46a0      	mov	r8, r4
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a4:	2c00      	cmp	r4, #0
 80015a6:	d0dc      	beq.n	8001562 <__gedf2+0x4e>
 80015a8:	e7e6      	b.n	8001578 <__gedf2+0x64>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d0ef      	beq.n	800158e <__gedf2+0x7a>
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	4563      	cmp	r3, ip
 80015b2:	d1ec      	bne.n	800158e <__gedf2+0x7a>
 80015b4:	4582      	cmp	sl, r0
 80015b6:	dcea      	bgt.n	800158e <__gedf2+0x7a>
 80015b8:	dbe1      	blt.n	800157e <__gedf2+0x6a>
 80015ba:	428e      	cmp	r6, r1
 80015bc:	d8e7      	bhi.n	800158e <__gedf2+0x7a>
 80015be:	d1de      	bne.n	800157e <__gedf2+0x6a>
 80015c0:	45c8      	cmp	r8, r9
 80015c2:	d8e4      	bhi.n	800158e <__gedf2+0x7a>
 80015c4:	2000      	movs	r0, #0
 80015c6:	45c8      	cmp	r8, r9
 80015c8:	d2e5      	bcs.n	8001596 <__gedf2+0x82>
 80015ca:	e7d8      	b.n	800157e <__gedf2+0x6a>
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0e2      	beq.n	8001596 <__gedf2+0x82>
 80015d0:	e7dd      	b.n	800158e <__gedf2+0x7a>
 80015d2:	4311      	orrs	r1, r2
 80015d4:	d104      	bne.n	80015e0 <__gedf2+0xcc>
 80015d6:	9b01      	ldr	r3, [sp, #4]
 80015d8:	4563      	cmp	r3, ip
 80015da:	d1d8      	bne.n	800158e <__gedf2+0x7a>
 80015dc:	2000      	movs	r0, #0
 80015de:	e7da      	b.n	8001596 <__gedf2+0x82>
 80015e0:	2002      	movs	r0, #2
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7d7      	b.n	8001596 <__gedf2+0x82>
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	4563      	cmp	r3, ip
 80015ea:	d0e6      	beq.n	80015ba <__gedf2+0xa6>
 80015ec:	e7cf      	b.n	800158e <__gedf2+0x7a>
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff

080015f4 <__ledf2>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4657      	mov	r7, sl
 80015f8:	464e      	mov	r6, r9
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	b5e0      	push	{r5, r6, r7, lr}
 8001600:	000d      	movs	r5, r1
 8001602:	030e      	lsls	r6, r1, #12
 8001604:	0049      	lsls	r1, r1, #1
 8001606:	0d49      	lsrs	r1, r1, #21
 8001608:	468a      	mov	sl, r1
 800160a:	0fdf      	lsrs	r7, r3, #31
 800160c:	0fe9      	lsrs	r1, r5, #31
 800160e:	46bc      	mov	ip, r7
 8001610:	b083      	sub	sp, #12
 8001612:	4f2e      	ldr	r7, [pc, #184]	@ (80016cc <__ledf2+0xd8>)
 8001614:	0004      	movs	r4, r0
 8001616:	4680      	mov	r8, r0
 8001618:	9101      	str	r1, [sp, #4]
 800161a:	0058      	lsls	r0, r3, #1
 800161c:	0319      	lsls	r1, r3, #12
 800161e:	4691      	mov	r9, r2
 8001620:	0b36      	lsrs	r6, r6, #12
 8001622:	0b09      	lsrs	r1, r1, #12
 8001624:	0d40      	lsrs	r0, r0, #21
 8001626:	45ba      	cmp	sl, r7
 8001628:	d01e      	beq.n	8001668 <__ledf2+0x74>
 800162a:	42b8      	cmp	r0, r7
 800162c:	d00d      	beq.n	800164a <__ledf2+0x56>
 800162e:	4657      	mov	r7, sl
 8001630:	2f00      	cmp	r7, #0
 8001632:	d127      	bne.n	8001684 <__ledf2+0x90>
 8001634:	4334      	orrs	r4, r6
 8001636:	2800      	cmp	r0, #0
 8001638:	d133      	bne.n	80016a2 <__ledf2+0xae>
 800163a:	430a      	orrs	r2, r1
 800163c:	d034      	beq.n	80016a8 <__ledf2+0xb4>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d140      	bne.n	80016c4 <__ledf2+0xd0>
 8001642:	4663      	mov	r3, ip
 8001644:	0058      	lsls	r0, r3, #1
 8001646:	3801      	subs	r0, #1
 8001648:	e015      	b.n	8001676 <__ledf2+0x82>
 800164a:	4311      	orrs	r1, r2
 800164c:	d112      	bne.n	8001674 <__ledf2+0x80>
 800164e:	4653      	mov	r3, sl
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <__ledf2+0x64>
 8001654:	4326      	orrs	r6, r4
 8001656:	d0f4      	beq.n	8001642 <__ledf2+0x4e>
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	4563      	cmp	r3, ip
 800165c:	d01d      	beq.n	800169a <__ledf2+0xa6>
 800165e:	2001      	movs	r0, #1
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	425f      	negs	r7, r3
 8001664:	4338      	orrs	r0, r7
 8001666:	e006      	b.n	8001676 <__ledf2+0x82>
 8001668:	4326      	orrs	r6, r4
 800166a:	d103      	bne.n	8001674 <__ledf2+0x80>
 800166c:	4550      	cmp	r0, sl
 800166e:	d1f6      	bne.n	800165e <__ledf2+0x6a>
 8001670:	4311      	orrs	r1, r2
 8001672:	d01c      	beq.n	80016ae <__ledf2+0xba>
 8001674:	2002      	movs	r0, #2
 8001676:	b003      	add	sp, #12
 8001678:	bcf0      	pop	{r4, r5, r6, r7}
 800167a:	46bb      	mov	fp, r7
 800167c:	46b2      	mov	sl, r6
 800167e:	46a9      	mov	r9, r5
 8001680:	46a0      	mov	r8, r4
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2800      	cmp	r0, #0
 8001686:	d0ea      	beq.n	800165e <__ledf2+0x6a>
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	4563      	cmp	r3, ip
 800168c:	d1e7      	bne.n	800165e <__ledf2+0x6a>
 800168e:	4582      	cmp	sl, r0
 8001690:	dce5      	bgt.n	800165e <__ledf2+0x6a>
 8001692:	db02      	blt.n	800169a <__ledf2+0xa6>
 8001694:	428e      	cmp	r6, r1
 8001696:	d8e2      	bhi.n	800165e <__ledf2+0x6a>
 8001698:	d00e      	beq.n	80016b8 <__ledf2+0xc4>
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0058      	lsls	r0, r3, #1
 800169e:	3801      	subs	r0, #1
 80016a0:	e7e9      	b.n	8001676 <__ledf2+0x82>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d0cd      	beq.n	8001642 <__ledf2+0x4e>
 80016a6:	e7d7      	b.n	8001658 <__ledf2+0x64>
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d0e4      	beq.n	8001676 <__ledf2+0x82>
 80016ac:	e7d7      	b.n	800165e <__ledf2+0x6a>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	2000      	movs	r0, #0
 80016b2:	4563      	cmp	r3, ip
 80016b4:	d0df      	beq.n	8001676 <__ledf2+0x82>
 80016b6:	e7d2      	b.n	800165e <__ledf2+0x6a>
 80016b8:	45c8      	cmp	r8, r9
 80016ba:	d8d0      	bhi.n	800165e <__ledf2+0x6a>
 80016bc:	2000      	movs	r0, #0
 80016be:	45c8      	cmp	r8, r9
 80016c0:	d2d9      	bcs.n	8001676 <__ledf2+0x82>
 80016c2:	e7ea      	b.n	800169a <__ledf2+0xa6>
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	4563      	cmp	r3, ip
 80016c8:	d0e4      	beq.n	8001694 <__ledf2+0xa0>
 80016ca:	e7c8      	b.n	800165e <__ledf2+0x6a>
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__aeabi_dmul>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4657      	mov	r7, sl
 80016d4:	464e      	mov	r6, r9
 80016d6:	46de      	mov	lr, fp
 80016d8:	4645      	mov	r5, r8
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	001f      	movs	r7, r3
 80016de:	030b      	lsls	r3, r1, #12
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	0016      	movs	r6, r2
 80016e4:	469a      	mov	sl, r3
 80016e6:	0fca      	lsrs	r2, r1, #31
 80016e8:	004b      	lsls	r3, r1, #1
 80016ea:	0004      	movs	r4, r0
 80016ec:	4691      	mov	r9, r2
 80016ee:	b085      	sub	sp, #20
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0x26>
 80016f4:	e1cf      	b.n	8001a96 <__aeabi_dmul+0x3c6>
 80016f6:	4acd      	ldr	r2, [pc, #820]	@ (8001a2c <__aeabi_dmul+0x35c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d055      	beq.n	80017a8 <__aeabi_dmul+0xd8>
 80016fc:	4651      	mov	r1, sl
 80016fe:	0f42      	lsrs	r2, r0, #29
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0409      	lsls	r1, r1, #16
 8001708:	4311      	orrs	r1, r2
 800170a:	00c2      	lsls	r2, r0, #3
 800170c:	4690      	mov	r8, r2
 800170e:	4ac8      	ldr	r2, [pc, #800]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001710:	468a      	mov	sl, r1
 8001712:	4693      	mov	fp, r2
 8001714:	449b      	add	fp, r3
 8001716:	2300      	movs	r3, #0
 8001718:	2500      	movs	r5, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	033c      	lsls	r4, r7, #12
 800171e:	007b      	lsls	r3, r7, #1
 8001720:	0ffa      	lsrs	r2, r7, #31
 8001722:	9601      	str	r6, [sp, #4]
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x5e>
 800172c:	e188      	b.n	8001a40 <__aeabi_dmul+0x370>
 800172e:	4abf      	ldr	r2, [pc, #764]	@ (8001a2c <__aeabi_dmul+0x35c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x66>
 8001734:	e092      	b.n	800185c <__aeabi_dmul+0x18c>
 8001736:	4abe      	ldr	r2, [pc, #760]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001738:	4694      	mov	ip, r2
 800173a:	4463      	add	r3, ip
 800173c:	449b      	add	fp, r3
 800173e:	2d0a      	cmp	r5, #10
 8001740:	dc42      	bgt.n	80017c8 <__aeabi_dmul+0xf8>
 8001742:	00e4      	lsls	r4, r4, #3
 8001744:	0f73      	lsrs	r3, r6, #29
 8001746:	4323      	orrs	r3, r4
 8001748:	2480      	movs	r4, #128	@ 0x80
 800174a:	4649      	mov	r1, r9
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	431c      	orrs	r4, r3
 8001750:	00f3      	lsls	r3, r6, #3
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b00      	ldr	r3, [sp, #0]
 8001756:	2000      	movs	r0, #0
 8001758:	4059      	eors	r1, r3
 800175a:	b2cb      	uxtb	r3, r1
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2d02      	cmp	r5, #2
 8001760:	dc00      	bgt.n	8001764 <__aeabi_dmul+0x94>
 8001762:	e094      	b.n	800188e <__aeabi_dmul+0x1be>
 8001764:	2301      	movs	r3, #1
 8001766:	40ab      	lsls	r3, r5
 8001768:	001d      	movs	r5, r3
 800176a:	23a6      	movs	r3, #166	@ 0xa6
 800176c:	002a      	movs	r2, r5
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	401a      	ands	r2, r3
 8001772:	421d      	tst	r5, r3
 8001774:	d000      	beq.n	8001778 <__aeabi_dmul+0xa8>
 8001776:	e229      	b.n	8001bcc <__aeabi_dmul+0x4fc>
 8001778:	2390      	movs	r3, #144	@ 0x90
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	421d      	tst	r5, r3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0xb2>
 8001780:	e24d      	b.n	8001c1e <__aeabi_dmul+0x54e>
 8001782:	2300      	movs	r3, #0
 8001784:	2480      	movs	r4, #128	@ 0x80
 8001786:	4699      	mov	r9, r3
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800178c:	0010      	movs	r0, r2
 800178e:	464a      	mov	r2, r9
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4323      	orrs	r3, r4
 8001794:	07d2      	lsls	r2, r2, #31
 8001796:	4313      	orrs	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	b005      	add	sp, #20
 800179c:	bcf0      	pop	{r4, r5, r6, r7}
 800179e:	46bb      	mov	fp, r7
 80017a0:	46b2      	mov	sl, r6
 80017a2:	46a9      	mov	r9, r5
 80017a4:	46a0      	mov	r8, r4
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	4652      	mov	r2, sl
 80017aa:	4302      	orrs	r2, r0
 80017ac:	4690      	mov	r8, r2
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dmul+0xe2>
 80017b0:	e1ac      	b.n	8001b0c <__aeabi_dmul+0x43c>
 80017b2:	469b      	mov	fp, r3
 80017b4:	2302      	movs	r3, #2
 80017b6:	4692      	mov	sl, r2
 80017b8:	2508      	movs	r5, #8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	e7ae      	b.n	800171c <__aeabi_dmul+0x4c>
 80017be:	9b00      	ldr	r3, [sp, #0]
 80017c0:	46a2      	mov	sl, r4
 80017c2:	4699      	mov	r9, r3
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	4698      	mov	r8, r3
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dmul+0x100>
 80017ce:	e1ca      	b.n	8001b66 <__aeabi_dmul+0x496>
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dmul+0x106>
 80017d4:	e192      	b.n	8001afc <__aeabi_dmul+0x42c>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d110      	bne.n	80017fc <__aeabi_dmul+0x12c>
 80017da:	2300      	movs	r3, #0
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	e7d4      	b.n	800178c <__aeabi_dmul+0xbc>
 80017e2:	2201      	movs	r2, #1
 80017e4:	087b      	lsrs	r3, r7, #1
 80017e6:	403a      	ands	r2, r7
 80017e8:	4313      	orrs	r3, r2
 80017ea:	4652      	mov	r2, sl
 80017ec:	07d2      	lsls	r2, r2, #31
 80017ee:	4313      	orrs	r3, r2
 80017f0:	4698      	mov	r8, r3
 80017f2:	4653      	mov	r3, sl
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	469a      	mov	sl, r3
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	4699      	mov	r9, r3
 80017fc:	465b      	mov	r3, fp
 80017fe:	1c58      	adds	r0, r3, #1
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	445b      	add	r3, fp
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc00      	bgt.n	800180c <__aeabi_dmul+0x13c>
 800180a:	e1b1      	b.n	8001b70 <__aeabi_dmul+0x4a0>
 800180c:	4642      	mov	r2, r8
 800180e:	0752      	lsls	r2, r2, #29
 8001810:	d00b      	beq.n	800182a <__aeabi_dmul+0x15a>
 8001812:	220f      	movs	r2, #15
 8001814:	4641      	mov	r1, r8
 8001816:	400a      	ands	r2, r1
 8001818:	2a04      	cmp	r2, #4
 800181a:	d006      	beq.n	800182a <__aeabi_dmul+0x15a>
 800181c:	4642      	mov	r2, r8
 800181e:	1d11      	adds	r1, r2, #4
 8001820:	4541      	cmp	r1, r8
 8001822:	4192      	sbcs	r2, r2
 8001824:	4688      	mov	r8, r1
 8001826:	4252      	negs	r2, r2
 8001828:	4492      	add	sl, r2
 800182a:	4652      	mov	r2, sl
 800182c:	01d2      	lsls	r2, r2, #7
 800182e:	d506      	bpl.n	800183e <__aeabi_dmul+0x16e>
 8001830:	4652      	mov	r2, sl
 8001832:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <__aeabi_dmul+0x364>)
 8001834:	401a      	ands	r2, r3
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	4692      	mov	sl, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	18c3      	adds	r3, r0, r3
 800183e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a38 <__aeabi_dmul+0x368>)
 8001840:	4293      	cmp	r3, r2
 8001842:	dd00      	ble.n	8001846 <__aeabi_dmul+0x176>
 8001844:	e18f      	b.n	8001b66 <__aeabi_dmul+0x496>
 8001846:	4642      	mov	r2, r8
 8001848:	08d1      	lsrs	r1, r2, #3
 800184a:	4652      	mov	r2, sl
 800184c:	0752      	lsls	r2, r2, #29
 800184e:	430a      	orrs	r2, r1
 8001850:	4651      	mov	r1, sl
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	024c      	lsls	r4, r1, #9
 8001856:	0b24      	lsrs	r4, r4, #12
 8001858:	0d5b      	lsrs	r3, r3, #21
 800185a:	e797      	b.n	800178c <__aeabi_dmul+0xbc>
 800185c:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800185e:	4326      	orrs	r6, r4
 8001860:	469c      	mov	ip, r3
 8001862:	44e3      	add	fp, ip
 8001864:	2e00      	cmp	r6, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x19a>
 8001868:	e16f      	b.n	8001b4a <__aeabi_dmul+0x47a>
 800186a:	2303      	movs	r3, #3
 800186c:	4649      	mov	r1, r9
 800186e:	431d      	orrs	r5, r3
 8001870:	9b00      	ldr	r3, [sp, #0]
 8001872:	4059      	eors	r1, r3
 8001874:	b2cb      	uxtb	r3, r1
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	2d0a      	cmp	r5, #10
 800187a:	dd00      	ble.n	800187e <__aeabi_dmul+0x1ae>
 800187c:	e133      	b.n	8001ae6 <__aeabi_dmul+0x416>
 800187e:	2301      	movs	r3, #1
 8001880:	40ab      	lsls	r3, r5
 8001882:	001d      	movs	r5, r3
 8001884:	2303      	movs	r3, #3
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2288      	movs	r2, #136	@ 0x88
 800188a:	422a      	tst	r2, r5
 800188c:	d197      	bne.n	80017be <__aeabi_dmul+0xee>
 800188e:	4642      	mov	r2, r8
 8001890:	4643      	mov	r3, r8
 8001892:	0412      	lsls	r2, r2, #16
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	0016      	movs	r6, r2
 8001898:	9801      	ldr	r0, [sp, #4]
 800189a:	0c1d      	lsrs	r5, r3, #16
 800189c:	0c03      	lsrs	r3, r0, #16
 800189e:	0400      	lsls	r0, r0, #16
 80018a0:	0c00      	lsrs	r0, r0, #16
 80018a2:	4346      	muls	r6, r0
 80018a4:	46b4      	mov	ip, r6
 80018a6:	001e      	movs	r6, r3
 80018a8:	436e      	muls	r6, r5
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	0016      	movs	r6, r2
 80018ae:	0007      	movs	r7, r0
 80018b0:	435e      	muls	r6, r3
 80018b2:	4661      	mov	r1, ip
 80018b4:	46b0      	mov	r8, r6
 80018b6:	436f      	muls	r7, r5
 80018b8:	0c0e      	lsrs	r6, r1, #16
 80018ba:	44b8      	add	r8, r7
 80018bc:	4446      	add	r6, r8
 80018be:	42b7      	cmp	r7, r6
 80018c0:	d905      	bls.n	80018ce <__aeabi_dmul+0x1fe>
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	4688      	mov	r8, r1
 80018c8:	9f00      	ldr	r7, [sp, #0]
 80018ca:	4447      	add	r7, r8
 80018cc:	9700      	str	r7, [sp, #0]
 80018ce:	4661      	mov	r1, ip
 80018d0:	0409      	lsls	r1, r1, #16
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	0c37      	lsrs	r7, r6, #16
 80018d6:	0436      	lsls	r6, r6, #16
 80018d8:	468c      	mov	ip, r1
 80018da:	0031      	movs	r1, r6
 80018dc:	4461      	add	r1, ip
 80018de:	9101      	str	r1, [sp, #4]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0c26      	lsrs	r6, r4, #16
 80018e4:	0424      	lsls	r4, r4, #16
 80018e6:	0c24      	lsrs	r4, r4, #16
 80018e8:	4361      	muls	r1, r4
 80018ea:	468c      	mov	ip, r1
 80018ec:	0021      	movs	r1, r4
 80018ee:	4369      	muls	r1, r5
 80018f0:	4689      	mov	r9, r1
 80018f2:	4661      	mov	r1, ip
 80018f4:	0c09      	lsrs	r1, r1, #16
 80018f6:	4688      	mov	r8, r1
 80018f8:	4372      	muls	r2, r6
 80018fa:	444a      	add	r2, r9
 80018fc:	4442      	add	r2, r8
 80018fe:	4375      	muls	r5, r6
 8001900:	4591      	cmp	r9, r2
 8001902:	d903      	bls.n	800190c <__aeabi_dmul+0x23c>
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	4688      	mov	r8, r1
 800190a:	4445      	add	r5, r8
 800190c:	0c11      	lsrs	r1, r2, #16
 800190e:	4688      	mov	r8, r1
 8001910:	4661      	mov	r1, ip
 8001912:	0409      	lsls	r1, r1, #16
 8001914:	0c09      	lsrs	r1, r1, #16
 8001916:	468c      	mov	ip, r1
 8001918:	0412      	lsls	r2, r2, #16
 800191a:	4462      	add	r2, ip
 800191c:	18b9      	adds	r1, r7, r2
 800191e:	9102      	str	r1, [sp, #8]
 8001920:	4651      	mov	r1, sl
 8001922:	0c09      	lsrs	r1, r1, #16
 8001924:	468c      	mov	ip, r1
 8001926:	4651      	mov	r1, sl
 8001928:	040f      	lsls	r7, r1, #16
 800192a:	0c3f      	lsrs	r7, r7, #16
 800192c:	0039      	movs	r1, r7
 800192e:	4341      	muls	r1, r0
 8001930:	4445      	add	r5, r8
 8001932:	4688      	mov	r8, r1
 8001934:	4661      	mov	r1, ip
 8001936:	4341      	muls	r1, r0
 8001938:	468a      	mov	sl, r1
 800193a:	4641      	mov	r1, r8
 800193c:	4660      	mov	r0, ip
 800193e:	0c09      	lsrs	r1, r1, #16
 8001940:	4689      	mov	r9, r1
 8001942:	4358      	muls	r0, r3
 8001944:	437b      	muls	r3, r7
 8001946:	4453      	add	r3, sl
 8001948:	444b      	add	r3, r9
 800194a:	459a      	cmp	sl, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_dmul+0x286>
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	4689      	mov	r9, r1
 8001954:	4448      	add	r0, r9
 8001956:	0c19      	lsrs	r1, r3, #16
 8001958:	4689      	mov	r9, r1
 800195a:	4641      	mov	r1, r8
 800195c:	0409      	lsls	r1, r1, #16
 800195e:	0c09      	lsrs	r1, r1, #16
 8001960:	4688      	mov	r8, r1
 8001962:	0039      	movs	r1, r7
 8001964:	4361      	muls	r1, r4
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4443      	add	r3, r8
 800196a:	4688      	mov	r8, r1
 800196c:	4661      	mov	r1, ip
 800196e:	434c      	muls	r4, r1
 8001970:	4371      	muls	r1, r6
 8001972:	468c      	mov	ip, r1
 8001974:	4641      	mov	r1, r8
 8001976:	4377      	muls	r7, r6
 8001978:	0c0e      	lsrs	r6, r1, #16
 800197a:	193f      	adds	r7, r7, r4
 800197c:	19f6      	adds	r6, r6, r7
 800197e:	4448      	add	r0, r9
 8001980:	42b4      	cmp	r4, r6
 8001982:	d903      	bls.n	800198c <__aeabi_dmul+0x2bc>
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	4689      	mov	r9, r1
 800198a:	44cc      	add	ip, r9
 800198c:	9902      	ldr	r1, [sp, #8]
 800198e:	9f00      	ldr	r7, [sp, #0]
 8001990:	4689      	mov	r9, r1
 8001992:	0431      	lsls	r1, r6, #16
 8001994:	444f      	add	r7, r9
 8001996:	4689      	mov	r9, r1
 8001998:	4641      	mov	r1, r8
 800199a:	4297      	cmp	r7, r2
 800199c:	4192      	sbcs	r2, r2
 800199e:	040c      	lsls	r4, r1, #16
 80019a0:	0c24      	lsrs	r4, r4, #16
 80019a2:	444c      	add	r4, r9
 80019a4:	18ff      	adds	r7, r7, r3
 80019a6:	4252      	negs	r2, r2
 80019a8:	1964      	adds	r4, r4, r5
 80019aa:	18a1      	adds	r1, r4, r2
 80019ac:	429f      	cmp	r7, r3
 80019ae:	419b      	sbcs	r3, r3
 80019b0:	4688      	mov	r8, r1
 80019b2:	4682      	mov	sl, r0
 80019b4:	425b      	negs	r3, r3
 80019b6:	4699      	mov	r9, r3
 80019b8:	4590      	cmp	r8, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	42ac      	cmp	r4, r5
 80019be:	41a4      	sbcs	r4, r4
 80019c0:	44c2      	add	sl, r8
 80019c2:	44d1      	add	r9, sl
 80019c4:	4252      	negs	r2, r2
 80019c6:	4264      	negs	r4, r4
 80019c8:	4314      	orrs	r4, r2
 80019ca:	4599      	cmp	r9, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	4582      	cmp	sl, r0
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	425b      	negs	r3, r3
 80019d4:	4252      	negs	r2, r2
 80019d6:	4313      	orrs	r3, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	0c36      	lsrs	r6, r6, #16
 80019dc:	19a4      	adds	r4, r4, r6
 80019de:	18e3      	adds	r3, r4, r3
 80019e0:	4463      	add	r3, ip
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	0dd2      	lsrs	r2, r2, #23
 80019e6:	431a      	orrs	r2, r3
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	4692      	mov	sl, r2
 80019ec:	027a      	lsls	r2, r7, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	1e50      	subs	r0, r2, #1
 80019f2:	4182      	sbcs	r2, r0
 80019f4:	0dff      	lsrs	r7, r7, #23
 80019f6:	4317      	orrs	r7, r2
 80019f8:	464a      	mov	r2, r9
 80019fa:	0252      	lsls	r2, r2, #9
 80019fc:	4317      	orrs	r7, r2
 80019fe:	46b8      	mov	r8, r7
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	d500      	bpl.n	8001a06 <__aeabi_dmul+0x336>
 8001a04:	e6ed      	b.n	80017e2 <__aeabi_dmul+0x112>
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <__aeabi_dmul+0x36c>)
 8001a08:	9a03      	ldr	r2, [sp, #12]
 8001a0a:	445b      	add	r3, fp
 8001a0c:	4691      	mov	r9, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dc00      	bgt.n	8001a14 <__aeabi_dmul+0x344>
 8001a12:	e0ac      	b.n	8001b6e <__aeabi_dmul+0x49e>
 8001a14:	003a      	movs	r2, r7
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dmul+0x34c>
 8001a1a:	e710      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	4658      	mov	r0, fp
 8001a20:	403a      	ands	r2, r7
 8001a22:	2a04      	cmp	r2, #4
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dmul+0x358>
 8001a26:	e6f9      	b.n	800181c <__aeabi_dmul+0x14c>
 8001a28:	e709      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	fffffc01 	.word	0xfffffc01
 8001a34:	feffffff 	.word	0xfeffffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	0022      	movs	r2, r4
 8001a42:	4332      	orrs	r2, r6
 8001a44:	d06f      	beq.n	8001b26 <__aeabi_dmul+0x456>
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x37c>
 8001a4a:	e0c2      	b.n	8001bd2 <__aeabi_dmul+0x502>
 8001a4c:	0020      	movs	r0, r4
 8001a4e:	f7fe fd17 	bl	8000480 <__clzsi2>
 8001a52:	0002      	movs	r2, r0
 8001a54:	0003      	movs	r3, r0
 8001a56:	3a0b      	subs	r2, #11
 8001a58:	201d      	movs	r0, #29
 8001a5a:	1a82      	subs	r2, r0, r2
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	0019      	movs	r1, r3
 8001a60:	40d0      	lsrs	r0, r2
 8001a62:	3908      	subs	r1, #8
 8001a64:	408c      	lsls	r4, r1
 8001a66:	0002      	movs	r2, r0
 8001a68:	4322      	orrs	r2, r4
 8001a6a:	0034      	movs	r4, r6
 8001a6c:	408c      	lsls	r4, r1
 8001a6e:	4659      	mov	r1, fp
 8001a70:	1acb      	subs	r3, r1, r3
 8001a72:	4986      	ldr	r1, [pc, #536]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001a74:	468b      	mov	fp, r1
 8001a76:	449b      	add	fp, r3
 8001a78:	2d0a      	cmp	r5, #10
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dmul+0x3ae>
 8001a7c:	e6a4      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001a7e:	4649      	mov	r1, r9
 8001a80:	9b00      	ldr	r3, [sp, #0]
 8001a82:	9401      	str	r4, [sp, #4]
 8001a84:	4059      	eors	r1, r3
 8001a86:	b2cb      	uxtb	r3, r1
 8001a88:	0014      	movs	r4, r2
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	9303      	str	r3, [sp, #12]
 8001a8e:	2d02      	cmp	r5, #2
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dmul+0x3c4>
 8001a92:	e667      	b.n	8001764 <__aeabi_dmul+0x94>
 8001a94:	e6fb      	b.n	800188e <__aeabi_dmul+0x1be>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	d03c      	beq.n	8001b18 <__aeabi_dmul+0x448>
 8001a9e:	4653      	mov	r3, sl
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dmul+0x3d6>
 8001aa4:	e0a3      	b.n	8001bee <__aeabi_dmul+0x51e>
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	f7fe fcea 	bl	8000480 <__clzsi2>
 8001aac:	230b      	movs	r3, #11
 8001aae:	425b      	negs	r3, r3
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	4484      	add	ip, r0
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	4650      	mov	r0, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	4088      	lsls	r0, r1
 8001abe:	231d      	movs	r3, #29
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4660      	mov	r0, ip
 8001ac4:	1a1b      	subs	r3, r3, r0
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	40d8      	lsrs	r0, r3
 8001aca:	0003      	movs	r3, r0
 8001acc:	4640      	mov	r0, r8
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	0023      	movs	r3, r4
 8001ad4:	408b      	lsls	r3, r1
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001ada:	2500      	movs	r5, #0
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	469b      	mov	fp, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	e61a      	b.n	800171c <__aeabi_dmul+0x4c>
 8001ae6:	2d0f      	cmp	r5, #15
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dmul+0x41c>
 8001aea:	e0c9      	b.n	8001c80 <__aeabi_dmul+0x5b0>
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	4652      	mov	r2, sl
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	421a      	tst	r2, r3
 8001af4:	d002      	beq.n	8001afc <__aeabi_dmul+0x42c>
 8001af6:	421c      	tst	r4, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_dmul+0x42c>
 8001afa:	e092      	b.n	8001c22 <__aeabi_dmul+0x552>
 8001afc:	2480      	movs	r4, #128	@ 0x80
 8001afe:	4653      	mov	r3, sl
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	431c      	orrs	r4, r3
 8001b04:	0324      	lsls	r4, r4, #12
 8001b06:	4642      	mov	r2, r8
 8001b08:	0b24      	lsrs	r4, r4, #12
 8001b0a:	e63e      	b.n	800178a <__aeabi_dmul+0xba>
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4680      	mov	r8, r0
 8001b12:	250c      	movs	r5, #12
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	e601      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	469a      	mov	sl, r3
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2504      	movs	r5, #4
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	e5fa      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b26:	2101      	movs	r1, #1
 8001b28:	430d      	orrs	r5, r1
 8001b2a:	2d0a      	cmp	r5, #10
 8001b2c:	dd00      	ble.n	8001b30 <__aeabi_dmul+0x460>
 8001b2e:	e64b      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b30:	4649      	mov	r1, r9
 8001b32:	9800      	ldr	r0, [sp, #0]
 8001b34:	4041      	eors	r1, r0
 8001b36:	b2c9      	uxtb	r1, r1
 8001b38:	9103      	str	r1, [sp, #12]
 8001b3a:	2d02      	cmp	r5, #2
 8001b3c:	dc00      	bgt.n	8001b40 <__aeabi_dmul+0x470>
 8001b3e:	e096      	b.n	8001c6e <__aeabi_dmul+0x59e>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2400      	movs	r4, #0
 8001b44:	2001      	movs	r0, #1
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	e60c      	b.n	8001764 <__aeabi_dmul+0x94>
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9a00      	ldr	r2, [sp, #0]
 8001b50:	432b      	orrs	r3, r5
 8001b52:	4051      	eors	r1, r2
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	9203      	str	r2, [sp, #12]
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dmul+0x48e>
 8001b5c:	e634      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d157      	bne.n	8001c12 <__aeabi_dmul+0x542>
 8001b62:	9b03      	ldr	r3, [sp, #12]
 8001b64:	4699      	mov	r9, r3
 8001b66:	2400      	movs	r4, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4b49      	ldr	r3, [pc, #292]	@ (8001c90 <__aeabi_dmul+0x5c0>)
 8001b6c:	e60e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001b6e:	4658      	mov	r0, fp
 8001b70:	2101      	movs	r1, #1
 8001b72:	1ac9      	subs	r1, r1, r3
 8001b74:	2938      	cmp	r1, #56	@ 0x38
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_dmul+0x4aa>
 8001b78:	e62f      	b.n	80017da <__aeabi_dmul+0x10a>
 8001b7a:	291f      	cmp	r1, #31
 8001b7c:	dd56      	ble.n	8001c2c <__aeabi_dmul+0x55c>
 8001b7e:	221f      	movs	r2, #31
 8001b80:	4654      	mov	r4, sl
 8001b82:	4252      	negs	r2, r2
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	40dc      	lsrs	r4, r3
 8001b88:	2920      	cmp	r1, #32
 8001b8a:	d007      	beq.n	8001b9c <__aeabi_dmul+0x4cc>
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <__aeabi_dmul+0x5c4>)
 8001b8e:	4642      	mov	r2, r8
 8001b90:	469c      	mov	ip, r3
 8001b92:	4653      	mov	r3, sl
 8001b94:	4460      	add	r0, ip
 8001b96:	4083      	lsls	r3, r0
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	1e53      	subs	r3, r2, #1
 8001ba2:	419a      	sbcs	r2, r3
 8001ba4:	000b      	movs	r3, r1
 8001ba6:	4322      	orrs	r2, r4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2400      	movs	r4, #0
 8001bac:	4211      	tst	r1, r2
 8001bae:	d009      	beq.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d05d      	beq.n	8001c74 <__aeabi_dmul+0x5a4>
 8001bb8:	1d11      	adds	r1, r2, #4
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	419b      	sbcs	r3, r3
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	075b      	lsls	r3, r3, #29
 8001bc4:	08d2      	lsrs	r2, r2, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e5df      	b.n	800178c <__aeabi_dmul+0xbc>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	4699      	mov	r9, r3
 8001bd0:	e5fa      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001bd2:	9801      	ldr	r0, [sp, #4]
 8001bd4:	f7fe fc54 	bl	8000480 <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	0003      	movs	r3, r0
 8001bdc:	3215      	adds	r2, #21
 8001bde:	3320      	adds	r3, #32
 8001be0:	2a1c      	cmp	r2, #28
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x516>
 8001be4:	e738      	b.n	8001a58 <__aeabi_dmul+0x388>
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	3808      	subs	r0, #8
 8001bea:	4082      	lsls	r2, r0
 8001bec:	e73f      	b.n	8001a6e <__aeabi_dmul+0x39e>
 8001bee:	f7fe fc47 	bl	8000480 <__clzsi2>
 8001bf2:	2315      	movs	r3, #21
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4484      	add	ip, r0
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	4663      	mov	r3, ip
 8001bfc:	3220      	adds	r2, #32
 8001bfe:	2b1c      	cmp	r3, #28
 8001c00:	dc00      	bgt.n	8001c04 <__aeabi_dmul+0x534>
 8001c02:	e758      	b.n	8001ab6 <__aeabi_dmul+0x3e6>
 8001c04:	2300      	movs	r3, #0
 8001c06:	4698      	mov	r8, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	3808      	subs	r0, #8
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	e762      	b.n	8001ad8 <__aeabi_dmul+0x408>
 8001c12:	001d      	movs	r5, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	2400      	movs	r4, #0
 8001c18:	2002      	movs	r0, #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	e5a2      	b.n	8001764 <__aeabi_dmul+0x94>
 8001c1e:	9002      	str	r0, [sp, #8]
 8001c20:	e632      	b.n	8001888 <__aeabi_dmul+0x1b8>
 8001c22:	431c      	orrs	r4, r3
 8001c24:	9b00      	ldr	r3, [sp, #0]
 8001c26:	9a01      	ldr	r2, [sp, #4]
 8001c28:	4699      	mov	r9, r3
 8001c2a:	e5ae      	b.n	800178a <__aeabi_dmul+0xba>
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <__aeabi_dmul+0x5c8>)
 8001c2e:	4652      	mov	r2, sl
 8001c30:	18c3      	adds	r3, r0, r3
 8001c32:	4640      	mov	r0, r8
 8001c34:	409a      	lsls	r2, r3
 8001c36:	40c8      	lsrs	r0, r1
 8001c38:	4302      	orrs	r2, r0
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4098      	lsls	r0, r3
 8001c3e:	0003      	movs	r3, r0
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	4183      	sbcs	r3, r0
 8001c44:	4654      	mov	r4, sl
 8001c46:	431a      	orrs	r2, r3
 8001c48:	40cc      	lsrs	r4, r1
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	d009      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c4e:	230f      	movs	r3, #15
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d005      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c56:	1d13      	adds	r3, r2, #4
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	18a4      	adds	r4, r4, r2
 8001c60:	001a      	movs	r2, r3
 8001c62:	0223      	lsls	r3, r4, #8
 8001c64:	d508      	bpl.n	8001c78 <__aeabi_dmul+0x5a8>
 8001c66:	2301      	movs	r3, #1
 8001c68:	2400      	movs	r4, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e58e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c6e:	4689      	mov	r9, r1
 8001c70:	2400      	movs	r4, #0
 8001c72:	e58b      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c74:	2300      	movs	r3, #0
 8001c76:	e7a5      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c78:	0763      	lsls	r3, r4, #29
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	e7a1      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	46a2      	mov	sl, r4
 8001c84:	4699      	mov	r9, r3
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	4698      	mov	r8, r3
 8001c8a:	e737      	b.n	8001afc <__aeabi_dmul+0x42c>
 8001c8c:	fffffc0d 	.word	0xfffffc0d
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e

08001c9c <__aeabi_dsub>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	9000      	str	r0, [sp, #0]
 8001cac:	9101      	str	r1, [sp, #4]
 8001cae:	030c      	lsls	r4, r1, #12
 8001cb0:	004d      	lsls	r5, r1, #1
 8001cb2:	0fce      	lsrs	r6, r1, #31
 8001cb4:	0a61      	lsrs	r1, r4, #9
 8001cb6:	9c00      	ldr	r4, [sp, #0]
 8001cb8:	005f      	lsls	r7, r3, #1
 8001cba:	0f64      	lsrs	r4, r4, #29
 8001cbc:	430c      	orrs	r4, r1
 8001cbe:	9900      	ldr	r1, [sp, #0]
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	00c8      	lsls	r0, r1, #3
 8001cc6:	0319      	lsls	r1, r3, #12
 8001cc8:	0d7b      	lsrs	r3, r7, #21
 8001cca:	4699      	mov	r9, r3
 8001ccc:	9b01      	ldr	r3, [sp, #4]
 8001cce:	4fcc      	ldr	r7, [pc, #816]	@ (8002000 <__aeabi_dsub+0x364>)
 8001cd0:	0fdb      	lsrs	r3, r3, #31
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	0a4b      	lsrs	r3, r1, #9
 8001cd6:	9900      	ldr	r1, [sp, #0]
 8001cd8:	4680      	mov	r8, r0
 8001cda:	0f49      	lsrs	r1, r1, #29
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	468b      	mov	fp, r1
 8001ce2:	00da      	lsls	r2, r3, #3
 8001ce4:	4692      	mov	sl, r2
 8001ce6:	0d6d      	lsrs	r5, r5, #21
 8001ce8:	45b9      	cmp	r9, r7
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x52>
 8001cec:	e0bf      	b.n	8001e6e <__aeabi_dsub+0x1d2>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4661      	mov	r1, ip
 8001cf2:	4059      	eors	r1, r3
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	468c      	mov	ip, r1
 8001cf8:	1aeb      	subs	r3, r5, r3
 8001cfa:	428e      	cmp	r6, r1
 8001cfc:	d075      	beq.n	8001dea <__aeabi_dsub+0x14e>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_dsub+0x68>
 8001d02:	e2a3      	b.n	800224c <__aeabi_dsub+0x5b0>
 8001d04:	4649      	mov	r1, r9
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x70>
 8001d0a:	e0ce      	b.n	8001eaa <__aeabi_dsub+0x20e>
 8001d0c:	42bd      	cmp	r5, r7
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x76>
 8001d10:	e200      	b.n	8002114 <__aeabi_dsub+0x478>
 8001d12:	2701      	movs	r7, #1
 8001d14:	2b38      	cmp	r3, #56	@ 0x38
 8001d16:	dc19      	bgt.n	8001d4c <__aeabi_dsub+0xb0>
 8001d18:	2780      	movs	r7, #128	@ 0x80
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	043f      	lsls	r7, r7, #16
 8001d1e:	4339      	orrs	r1, r7
 8001d20:	468b      	mov	fp, r1
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x8c>
 8001d26:	e1fa      	b.n	800211e <__aeabi_dsub+0x482>
 8001d28:	2720      	movs	r7, #32
 8001d2a:	1af9      	subs	r1, r7, r3
 8001d2c:	468c      	mov	ip, r1
 8001d2e:	4659      	mov	r1, fp
 8001d30:	4667      	mov	r7, ip
 8001d32:	40b9      	lsls	r1, r7
 8001d34:	000f      	movs	r7, r1
 8001d36:	0011      	movs	r1, r2
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	430f      	orrs	r7, r1
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	408a      	lsls	r2, r1
 8001d40:	1e51      	subs	r1, r2, #1
 8001d42:	418a      	sbcs	r2, r1
 8001d44:	4659      	mov	r1, fp
 8001d46:	40d9      	lsrs	r1, r3
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	1a64      	subs	r4, r4, r1
 8001d4c:	1bc7      	subs	r7, r0, r7
 8001d4e:	42b8      	cmp	r0, r7
 8001d50:	4180      	sbcs	r0, r0
 8001d52:	4240      	negs	r0, r0
 8001d54:	1a24      	subs	r4, r4, r0
 8001d56:	0223      	lsls	r3, r4, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dsub+0xc0>
 8001d5a:	e140      	b.n	8001fde <__aeabi_dsub+0x342>
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	0a64      	lsrs	r4, r4, #9
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0xca>
 8001d64:	e154      	b.n	8002010 <__aeabi_dsub+0x374>
 8001d66:	0020      	movs	r0, r4
 8001d68:	f7fe fb8a 	bl	8000480 <__clzsi2>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	3b08      	subs	r3, #8
 8001d70:	2120      	movs	r1, #32
 8001d72:	0038      	movs	r0, r7
 8001d74:	1aca      	subs	r2, r1, r3
 8001d76:	40d0      	lsrs	r0, r2
 8001d78:	409c      	lsls	r4, r3
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	409f      	lsls	r7, r3
 8001d7e:	4322      	orrs	r2, r4
 8001d80:	429d      	cmp	r5, r3
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0xea>
 8001d84:	e1a6      	b.n	80020d4 <__aeabi_dsub+0x438>
 8001d86:	1b58      	subs	r0, r3, r5
 8001d88:	3001      	adds	r0, #1
 8001d8a:	1a09      	subs	r1, r1, r0
 8001d8c:	003c      	movs	r4, r7
 8001d8e:	408f      	lsls	r7, r1
 8001d90:	40c4      	lsrs	r4, r0
 8001d92:	1e7b      	subs	r3, r7, #1
 8001d94:	419f      	sbcs	r7, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	4327      	orrs	r7, r4
 8001d9c:	431f      	orrs	r7, r3
 8001d9e:	40c2      	lsrs	r2, r0
 8001da0:	003b      	movs	r3, r7
 8001da2:	0014      	movs	r4, r2
 8001da4:	2500      	movs	r5, #0
 8001da6:	4313      	orrs	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x110>
 8001daa:	e1f7      	b.n	800219c <__aeabi_dsub+0x500>
 8001dac:	077b      	lsls	r3, r7, #29
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x116>
 8001db0:	e377      	b.n	80024a2 <__aeabi_dsub+0x806>
 8001db2:	230f      	movs	r3, #15
 8001db4:	0038      	movs	r0, r7
 8001db6:	403b      	ands	r3, r7
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d004      	beq.n	8001dc6 <__aeabi_dsub+0x12a>
 8001dbc:	1d38      	adds	r0, r7, #4
 8001dbe:	42b8      	cmp	r0, r7
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	427f      	negs	r7, r7
 8001dc4:	19e4      	adds	r4, r4, r7
 8001dc6:	0223      	lsls	r3, r4, #8
 8001dc8:	d400      	bmi.n	8001dcc <__aeabi_dsub+0x130>
 8001dca:	e368      	b.n	800249e <__aeabi_dsub+0x802>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002000 <__aeabi_dsub+0x364>)
 8001dce:	3501      	adds	r5, #1
 8001dd0:	429d      	cmp	r5, r3
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x13a>
 8001dd4:	e0f4      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <__aeabi_dsub+0x368>)
 8001dd8:	056d      	lsls	r5, r5, #21
 8001dda:	401c      	ands	r4, r3
 8001ddc:	0d6d      	lsrs	r5, r5, #21
 8001dde:	0767      	lsls	r7, r4, #29
 8001de0:	08c0      	lsrs	r0, r0, #3
 8001de2:	0264      	lsls	r4, r4, #9
 8001de4:	4307      	orrs	r7, r0
 8001de6:	0b24      	lsrs	r4, r4, #12
 8001de8:	e0ec      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_dsub+0x154>
 8001dee:	e329      	b.n	8002444 <__aeabi_dsub+0x7a8>
 8001df0:	4649      	mov	r1, r9
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x15c>
 8001df6:	e0d6      	b.n	8001fa6 <__aeabi_dsub+0x30a>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x164>
 8001dfe:	e12e      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x16c>
 8001e06:	e1e6      	b.n	80021d6 <__aeabi_dsub+0x53a>
 8001e08:	42bb      	cmp	r3, r7
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x172>
 8001e0c:	e182      	b.n	8002114 <__aeabi_dsub+0x478>
 8001e0e:	2701      	movs	r7, #1
 8001e10:	000b      	movs	r3, r1
 8001e12:	2938      	cmp	r1, #56	@ 0x38
 8001e14:	dc14      	bgt.n	8001e40 <__aeabi_dsub+0x1a4>
 8001e16:	2b1f      	cmp	r3, #31
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dsub+0x180>
 8001e1a:	e23c      	b.n	8002296 <__aeabi_dsub+0x5fa>
 8001e1c:	2720      	movs	r7, #32
 8001e1e:	1af9      	subs	r1, r7, r3
 8001e20:	468c      	mov	ip, r1
 8001e22:	4659      	mov	r1, fp
 8001e24:	4667      	mov	r7, ip
 8001e26:	40b9      	lsls	r1, r7
 8001e28:	000f      	movs	r7, r1
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	430f      	orrs	r7, r1
 8001e30:	4661      	mov	r1, ip
 8001e32:	408a      	lsls	r2, r1
 8001e34:	1e51      	subs	r1, r2, #1
 8001e36:	418a      	sbcs	r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	40d9      	lsrs	r1, r3
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	1864      	adds	r4, r4, r1
 8001e40:	183f      	adds	r7, r7, r0
 8001e42:	4287      	cmp	r7, r0
 8001e44:	4180      	sbcs	r0, r0
 8001e46:	4240      	negs	r0, r0
 8001e48:	1824      	adds	r4, r4, r0
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x1b4>
 8001e4e:	e0c6      	b.n	8001fde <__aeabi_dsub+0x342>
 8001e50:	4b6b      	ldr	r3, [pc, #428]	@ (8002000 <__aeabi_dsub+0x364>)
 8001e52:	3501      	adds	r5, #1
 8001e54:	429d      	cmp	r5, r3
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x1be>
 8001e58:	e0b2      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4b69      	ldr	r3, [pc, #420]	@ (8002004 <__aeabi_dsub+0x368>)
 8001e5e:	087a      	lsrs	r2, r7, #1
 8001e60:	401c      	ands	r4, r3
 8001e62:	4039      	ands	r1, r7
 8001e64:	430a      	orrs	r2, r1
 8001e66:	07e7      	lsls	r7, r4, #31
 8001e68:	4317      	orrs	r7, r2
 8001e6a:	0864      	lsrs	r4, r4, #1
 8001e6c:	e79e      	b.n	8001dac <__aeabi_dsub+0x110>
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <__aeabi_dsub+0x36c>)
 8001e70:	4311      	orrs	r1, r2
 8001e72:	468a      	mov	sl, r1
 8001e74:	18eb      	adds	r3, r5, r3
 8001e76:	2900      	cmp	r1, #0
 8001e78:	d028      	beq.n	8001ecc <__aeabi_dsub+0x230>
 8001e7a:	4566      	cmp	r6, ip
 8001e7c:	d02c      	beq.n	8001ed8 <__aeabi_dsub+0x23c>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d05b      	beq.n	8001f3a <__aeabi_dsub+0x29e>
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x1ec>
 8001e86:	e12c      	b.n	80020e2 <__aeabi_dsub+0x446>
 8001e88:	465b      	mov	r3, fp
 8001e8a:	4666      	mov	r6, ip
 8001e8c:	075f      	lsls	r7, r3, #29
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	4317      	orrs	r7, r2
 8001e92:	08dd      	lsrs	r5, r3, #3
 8001e94:	003b      	movs	r3, r7
 8001e96:	432b      	orrs	r3, r5
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x200>
 8001e9a:	e0e2      	b.n	8002062 <__aeabi_dsub+0x3c6>
 8001e9c:	2480      	movs	r4, #128	@ 0x80
 8001e9e:	0324      	lsls	r4, r4, #12
 8001ea0:	432c      	orrs	r4, r5
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	4d56      	ldr	r5, [pc, #344]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	e08c      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001eaa:	4659      	mov	r1, fp
 8001eac:	4311      	orrs	r1, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x216>
 8001eb0:	e0d5      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x21e>
 8001eb8:	e1b9      	b.n	800222e <__aeabi_dsub+0x592>
 8001eba:	42bb      	cmp	r3, r7
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x224>
 8001ebe:	e1b1      	b.n	8002224 <__aeabi_dsub+0x588>
 8001ec0:	2701      	movs	r7, #1
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	2938      	cmp	r1, #56	@ 0x38
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dsub+0x22e>
 8001ec8:	e740      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8001eca:	e72a      	b.n	8001d22 <__aeabi_dsub+0x86>
 8001ecc:	4661      	mov	r1, ip
 8001ece:	2701      	movs	r7, #1
 8001ed0:	4079      	eors	r1, r7
 8001ed2:	468c      	mov	ip, r1
 8001ed4:	4566      	cmp	r6, ip
 8001ed6:	d1d2      	bne.n	8001e7e <__aeabi_dsub+0x1e2>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x242>
 8001edc:	e0c5      	b.n	800206a <__aeabi_dsub+0x3ce>
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x248>
 8001ee2:	e155      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	0025      	movs	r5, r4
 8001ee8:	4305      	orrs	r5, r0
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x252>
 8001eec:	e212      	b.n	8002314 <__aeabi_dsub+0x678>
 8001eee:	1e59      	subs	r1, r3, #1
 8001ef0:	468c      	mov	ip, r1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x25c>
 8001ef6:	e249      	b.n	800238c <__aeabi_dsub+0x6f0>
 8001ef8:	4d41      	ldr	r5, [pc, #260]	@ (8002000 <__aeabi_dsub+0x364>)
 8001efa:	42ab      	cmp	r3, r5
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x264>
 8001efe:	e28f      	b.n	8002420 <__aeabi_dsub+0x784>
 8001f00:	2701      	movs	r7, #1
 8001f02:	2938      	cmp	r1, #56	@ 0x38
 8001f04:	dc11      	bgt.n	8001f2a <__aeabi_dsub+0x28e>
 8001f06:	4663      	mov	r3, ip
 8001f08:	2b1f      	cmp	r3, #31
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dsub+0x272>
 8001f0c:	e25b      	b.n	80023c6 <__aeabi_dsub+0x72a>
 8001f0e:	4661      	mov	r1, ip
 8001f10:	2320      	movs	r3, #32
 8001f12:	0027      	movs	r7, r4
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	0005      	movs	r5, r0
 8001f18:	4098      	lsls	r0, r3
 8001f1a:	409f      	lsls	r7, r3
 8001f1c:	40cd      	lsrs	r5, r1
 8001f1e:	1e43      	subs	r3, r0, #1
 8001f20:	4198      	sbcs	r0, r3
 8001f22:	40cc      	lsrs	r4, r1
 8001f24:	432f      	orrs	r7, r5
 8001f26:	4307      	orrs	r7, r0
 8001f28:	44a3      	add	fp, r4
 8001f2a:	18bf      	adds	r7, r7, r2
 8001f2c:	4297      	cmp	r7, r2
 8001f2e:	4192      	sbcs	r2, r2
 8001f30:	4252      	negs	r2, r2
 8001f32:	445a      	add	r2, fp
 8001f34:	0014      	movs	r4, r2
 8001f36:	464d      	mov	r5, r9
 8001f38:	e787      	b.n	8001e4a <__aeabi_dsub+0x1ae>
 8001f3a:	4f34      	ldr	r7, [pc, #208]	@ (800200c <__aeabi_dsub+0x370>)
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	423b      	tst	r3, r7
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x2a8>
 8001f42:	e0b6      	b.n	80020b2 <__aeabi_dsub+0x416>
 8001f44:	4659      	mov	r1, fp
 8001f46:	0023      	movs	r3, r4
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	000f      	movs	r7, r1
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dsub+0x2b8>
 8001f52:	e126      	b.n	80021a2 <__aeabi_dsub+0x506>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x2be>
 8001f58:	e1c0      	b.n	80022dc <__aeabi_dsub+0x640>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x2c4>
 8001f5e:	e0a1      	b.n	80020a4 <__aeabi_dsub+0x408>
 8001f60:	1a83      	subs	r3, r0, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	465b      	mov	r3, fp
 8001f66:	4540      	cmp	r0, r8
 8001f68:	41ad      	sbcs	r5, r5
 8001f6a:	1ae3      	subs	r3, r4, r3
 8001f6c:	426d      	negs	r5, r5
 8001f6e:	1b5b      	subs	r3, r3, r5
 8001f70:	2580      	movs	r5, #128	@ 0x80
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	422b      	tst	r3, r5
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x2de>
 8001f78:	e14b      	b.n	8002212 <__aeabi_dsub+0x576>
 8001f7a:	465b      	mov	r3, fp
 8001f7c:	1a10      	subs	r0, r2, r0
 8001f7e:	4282      	cmp	r2, r0
 8001f80:	4192      	sbcs	r2, r2
 8001f82:	1b1c      	subs	r4, r3, r4
 8001f84:	0007      	movs	r7, r0
 8001f86:	2601      	movs	r6, #1
 8001f88:	4663      	mov	r3, ip
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	1aa4      	subs	r4, r4, r2
 8001f8e:	4327      	orrs	r7, r4
 8001f90:	401e      	ands	r6, r3
 8001f92:	2f00      	cmp	r7, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x2fc>
 8001f96:	e142      	b.n	800221e <__aeabi_dsub+0x582>
 8001f98:	422c      	tst	r4, r5
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x302>
 8001f9c:	e26d      	b.n	800247a <__aeabi_dsub+0x7de>
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <__aeabi_dsub+0x368>)
 8001fa0:	2501      	movs	r5, #1
 8001fa2:	401c      	ands	r4, r3
 8001fa4:	e71b      	b.n	8001dde <__aeabi_dsub+0x142>
 8001fa6:	42bd      	cmp	r5, r7
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x310>
 8001faa:	e13b      	b.n	8002224 <__aeabi_dsub+0x588>
 8001fac:	2701      	movs	r7, #1
 8001fae:	2b38      	cmp	r3, #56	@ 0x38
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dsub+0x318>
 8001fb2:	e745      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 8001fb4:	2780      	movs	r7, #128	@ 0x80
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	043f      	lsls	r7, r7, #16
 8001fba:	4339      	orrs	r1, r7
 8001fbc:	468b      	mov	fp, r1
 8001fbe:	e72a      	b.n	8001e16 <__aeabi_dsub+0x17a>
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2700      	movs	r7, #0
 8001fc4:	052d      	lsls	r5, r5, #20
 8001fc6:	4325      	orrs	r5, r4
 8001fc8:	07f6      	lsls	r6, r6, #31
 8001fca:	4335      	orrs	r5, r6
 8001fcc:	0038      	movs	r0, r7
 8001fce:	0029      	movs	r1, r5
 8001fd0:	b003      	add	sp, #12
 8001fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd4:	46bb      	mov	fp, r7
 8001fd6:	46b2      	mov	sl, r6
 8001fd8:	46a9      	mov	r9, r5
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	077b      	lsls	r3, r7, #29
 8001fe0:	d004      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	403b      	ands	r3, r7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fea:	e6e7      	b.n	8001dbc <__aeabi_dsub+0x120>
 8001fec:	002b      	movs	r3, r5
 8001fee:	08f8      	lsrs	r0, r7, #3
 8001ff0:	4a03      	ldr	r2, [pc, #12]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ff2:	0767      	lsls	r7, r4, #29
 8001ff4:	4307      	orrs	r7, r0
 8001ff6:	08e5      	lsrs	r5, r4, #3
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x362>
 8001ffc:	e74a      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8001ffe:	e0a5      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002000:	000007ff 	.word	0x000007ff
 8002004:	ff7fffff 	.word	0xff7fffff
 8002008:	fffff801 	.word	0xfffff801
 800200c:	000007fe 	.word	0x000007fe
 8002010:	0038      	movs	r0, r7
 8002012:	f7fe fa35 	bl	8000480 <__clzsi2>
 8002016:	0003      	movs	r3, r0
 8002018:	3318      	adds	r3, #24
 800201a:	2b1f      	cmp	r3, #31
 800201c:	dc00      	bgt.n	8002020 <__aeabi_dsub+0x384>
 800201e:	e6a7      	b.n	8001d70 <__aeabi_dsub+0xd4>
 8002020:	003a      	movs	r2, r7
 8002022:	3808      	subs	r0, #8
 8002024:	4082      	lsls	r2, r0
 8002026:	429d      	cmp	r5, r3
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x390>
 800202a:	e08a      	b.n	8002142 <__aeabi_dsub+0x4a6>
 800202c:	1b5b      	subs	r3, r3, r5
 800202e:	1c58      	adds	r0, r3, #1
 8002030:	281f      	cmp	r0, #31
 8002032:	dc00      	bgt.n	8002036 <__aeabi_dsub+0x39a>
 8002034:	e1d8      	b.n	80023e8 <__aeabi_dsub+0x74c>
 8002036:	0017      	movs	r7, r2
 8002038:	3b1f      	subs	r3, #31
 800203a:	40df      	lsrs	r7, r3
 800203c:	2820      	cmp	r0, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dsub+0x3b0>
 8002040:	2340      	movs	r3, #64	@ 0x40
 8002042:	1a1b      	subs	r3, r3, r0
 8002044:	409a      	lsls	r2, r3
 8002046:	1e53      	subs	r3, r2, #1
 8002048:	419a      	sbcs	r2, r3
 800204a:	4317      	orrs	r7, r2
 800204c:	2500      	movs	r5, #0
 800204e:	2f00      	cmp	r7, #0
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x3b8>
 8002052:	e0e5      	b.n	8002220 <__aeabi_dsub+0x584>
 8002054:	077b      	lsls	r3, r7, #29
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x3be>
 8002058:	e6ab      	b.n	8001db2 <__aeabi_dsub+0x116>
 800205a:	002c      	movs	r4, r5
 800205c:	e7c6      	b.n	8001fec <__aeabi_dsub+0x350>
 800205e:	08c0      	lsrs	r0, r0, #3
 8002060:	e7c6      	b.n	8001ff0 <__aeabi_dsub+0x354>
 8002062:	2700      	movs	r7, #0
 8002064:	2400      	movs	r4, #0
 8002066:	4dd1      	ldr	r5, [pc, #836]	@ (80023ac <__aeabi_dsub+0x710>)
 8002068:	e7ac      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800206a:	4fd1      	ldr	r7, [pc, #836]	@ (80023b0 <__aeabi_dsub+0x714>)
 800206c:	1c6b      	adds	r3, r5, #1
 800206e:	423b      	tst	r3, r7
 8002070:	d171      	bne.n	8002156 <__aeabi_dsub+0x4ba>
 8002072:	0023      	movs	r3, r4
 8002074:	4303      	orrs	r3, r0
 8002076:	2d00      	cmp	r5, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x3e0>
 800207a:	e14e      	b.n	800231a <__aeabi_dsub+0x67e>
 800207c:	4657      	mov	r7, sl
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x3e8>
 8002082:	e1b5      	b.n	80023f0 <__aeabi_dsub+0x754>
 8002084:	2f00      	cmp	r7, #0
 8002086:	d00d      	beq.n	80020a4 <__aeabi_dsub+0x408>
 8002088:	1883      	adds	r3, r0, r2
 800208a:	4283      	cmp	r3, r0
 800208c:	4180      	sbcs	r0, r0
 800208e:	445c      	add	r4, fp
 8002090:	4240      	negs	r0, r0
 8002092:	1824      	adds	r4, r4, r0
 8002094:	0222      	lsls	r2, r4, #8
 8002096:	d500      	bpl.n	800209a <__aeabi_dsub+0x3fe>
 8002098:	e1c8      	b.n	800242c <__aeabi_dsub+0x790>
 800209a:	001f      	movs	r7, r3
 800209c:	4698      	mov	r8, r3
 800209e:	4327      	orrs	r7, r4
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x408>
 80020a2:	e0bc      	b.n	800221e <__aeabi_dsub+0x582>
 80020a4:	4643      	mov	r3, r8
 80020a6:	0767      	lsls	r7, r4, #29
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	431f      	orrs	r7, r3
 80020ac:	08e5      	lsrs	r5, r4, #3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e04c      	b.n	800214c <__aeabi_dsub+0x4b0>
 80020b2:	1a83      	subs	r3, r0, r2
 80020b4:	4698      	mov	r8, r3
 80020b6:	465b      	mov	r3, fp
 80020b8:	4540      	cmp	r0, r8
 80020ba:	41bf      	sbcs	r7, r7
 80020bc:	1ae3      	subs	r3, r4, r3
 80020be:	427f      	negs	r7, r7
 80020c0:	1bdb      	subs	r3, r3, r7
 80020c2:	021f      	lsls	r7, r3, #8
 80020c4:	d47c      	bmi.n	80021c0 <__aeabi_dsub+0x524>
 80020c6:	4647      	mov	r7, r8
 80020c8:	431f      	orrs	r7, r3
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x432>
 80020cc:	e0a6      	b.n	800221c <__aeabi_dsub+0x580>
 80020ce:	001c      	movs	r4, r3
 80020d0:	4647      	mov	r7, r8
 80020d2:	e645      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80020d4:	4cb7      	ldr	r4, [pc, #732]	@ (80023b4 <__aeabi_dsub+0x718>)
 80020d6:	1aed      	subs	r5, r5, r3
 80020d8:	4014      	ands	r4, r2
 80020da:	077b      	lsls	r3, r7, #29
 80020dc:	d000      	beq.n	80020e0 <__aeabi_dsub+0x444>
 80020de:	e780      	b.n	8001fe2 <__aeabi_dsub+0x346>
 80020e0:	e784      	b.n	8001fec <__aeabi_dsub+0x350>
 80020e2:	464b      	mov	r3, r9
 80020e4:	0025      	movs	r5, r4
 80020e6:	4305      	orrs	r5, r0
 80020e8:	d066      	beq.n	80021b8 <__aeabi_dsub+0x51c>
 80020ea:	1e5f      	subs	r7, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x456>
 80020f0:	e0fc      	b.n	80022ec <__aeabi_dsub+0x650>
 80020f2:	4dae      	ldr	r5, [pc, #696]	@ (80023ac <__aeabi_dsub+0x710>)
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0x45e>
 80020f8:	e15e      	b.n	80023b8 <__aeabi_dsub+0x71c>
 80020fa:	4666      	mov	r6, ip
 80020fc:	2f38      	cmp	r7, #56	@ 0x38
 80020fe:	dc00      	bgt.n	8002102 <__aeabi_dsub+0x466>
 8002100:	e0b4      	b.n	800226c <__aeabi_dsub+0x5d0>
 8002102:	2001      	movs	r0, #1
 8002104:	1a17      	subs	r7, r2, r0
 8002106:	42ba      	cmp	r2, r7
 8002108:	4192      	sbcs	r2, r2
 800210a:	465b      	mov	r3, fp
 800210c:	4252      	negs	r2, r2
 800210e:	464d      	mov	r5, r9
 8002110:	1a9c      	subs	r4, r3, r2
 8002112:	e620      	b.n	8001d56 <__aeabi_dsub+0xba>
 8002114:	0767      	lsls	r7, r4, #29
 8002116:	08c0      	lsrs	r0, r0, #3
 8002118:	4307      	orrs	r7, r0
 800211a:	08e5      	lsrs	r5, r4, #3
 800211c:	e6ba      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800211e:	001f      	movs	r7, r3
 8002120:	4659      	mov	r1, fp
 8002122:	3f20      	subs	r7, #32
 8002124:	40f9      	lsrs	r1, r7
 8002126:	000f      	movs	r7, r1
 8002128:	2b20      	cmp	r3, #32
 800212a:	d005      	beq.n	8002138 <__aeabi_dsub+0x49c>
 800212c:	2140      	movs	r1, #64	@ 0x40
 800212e:	1acb      	subs	r3, r1, r3
 8002130:	4659      	mov	r1, fp
 8002132:	4099      	lsls	r1, r3
 8002134:	430a      	orrs	r2, r1
 8002136:	4692      	mov	sl, r2
 8002138:	4653      	mov	r3, sl
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4193      	sbcs	r3, r2
 800213e:	431f      	orrs	r7, r3
 8002140:	e604      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8002142:	1aeb      	subs	r3, r5, r3
 8002144:	4d9b      	ldr	r5, [pc, #620]	@ (80023b4 <__aeabi_dsub+0x718>)
 8002146:	4015      	ands	r5, r2
 8002148:	076f      	lsls	r7, r5, #29
 800214a:	08ed      	lsrs	r5, r5, #3
 800214c:	032c      	lsls	r4, r5, #12
 800214e:	055d      	lsls	r5, r3, #21
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	0d6d      	lsrs	r5, r5, #21
 8002154:	e736      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002156:	4d95      	ldr	r5, [pc, #596]	@ (80023ac <__aeabi_dsub+0x710>)
 8002158:	42ab      	cmp	r3, r5
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x4c2>
 800215c:	e0d6      	b.n	800230c <__aeabi_dsub+0x670>
 800215e:	1882      	adds	r2, r0, r2
 8002160:	0021      	movs	r1, r4
 8002162:	4282      	cmp	r2, r0
 8002164:	4180      	sbcs	r0, r0
 8002166:	4459      	add	r1, fp
 8002168:	4240      	negs	r0, r0
 800216a:	1808      	adds	r0, r1, r0
 800216c:	07c7      	lsls	r7, r0, #31
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	4317      	orrs	r7, r2
 8002172:	0844      	lsrs	r4, r0, #1
 8002174:	0752      	lsls	r2, r2, #29
 8002176:	d400      	bmi.n	800217a <__aeabi_dsub+0x4de>
 8002178:	e185      	b.n	8002486 <__aeabi_dsub+0x7ea>
 800217a:	220f      	movs	r2, #15
 800217c:	001d      	movs	r5, r3
 800217e:	403a      	ands	r2, r7
 8002180:	2a04      	cmp	r2, #4
 8002182:	d000      	beq.n	8002186 <__aeabi_dsub+0x4ea>
 8002184:	e61a      	b.n	8001dbc <__aeabi_dsub+0x120>
 8002186:	08ff      	lsrs	r7, r7, #3
 8002188:	0764      	lsls	r4, r4, #29
 800218a:	4327      	orrs	r7, r4
 800218c:	0905      	lsrs	r5, r0, #4
 800218e:	e7dd      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4317      	orrs	r7, r2
 8002198:	08dd      	lsrs	r5, r3, #3
 800219a:	e67b      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800219c:	2700      	movs	r7, #0
 800219e:	2400      	movs	r4, #0
 80021a0:	e710      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dsub+0x50c>
 80021a6:	e0d6      	b.n	8002356 <__aeabi_dsub+0x6ba>
 80021a8:	2900      	cmp	r1, #0
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x512>
 80021ac:	e12f      	b.n	800240e <__aeabi_dsub+0x772>
 80021ae:	2480      	movs	r4, #128	@ 0x80
 80021b0:	2600      	movs	r6, #0
 80021b2:	4d7e      	ldr	r5, [pc, #504]	@ (80023ac <__aeabi_dsub+0x710>)
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	e705      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021b8:	4666      	mov	r6, ip
 80021ba:	465c      	mov	r4, fp
 80021bc:	08d0      	lsrs	r0, r2, #3
 80021be:	e717      	b.n	8001ff0 <__aeabi_dsub+0x354>
 80021c0:	465b      	mov	r3, fp
 80021c2:	1a17      	subs	r7, r2, r0
 80021c4:	42ba      	cmp	r2, r7
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	1b1c      	subs	r4, r3, r4
 80021ca:	2601      	movs	r6, #1
 80021cc:	4663      	mov	r3, ip
 80021ce:	4252      	negs	r2, r2
 80021d0:	1aa4      	subs	r4, r4, r2
 80021d2:	401e      	ands	r6, r3
 80021d4:	e5c4      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80021d6:	1883      	adds	r3, r0, r2
 80021d8:	4283      	cmp	r3, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	445c      	add	r4, fp
 80021de:	4240      	negs	r0, r0
 80021e0:	1825      	adds	r5, r4, r0
 80021e2:	022a      	lsls	r2, r5, #8
 80021e4:	d400      	bmi.n	80021e8 <__aeabi_dsub+0x54c>
 80021e6:	e0da      	b.n	800239e <__aeabi_dsub+0x702>
 80021e8:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <__aeabi_dsub+0x718>)
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4015      	ands	r5, r2
 80021ee:	07ea      	lsls	r2, r5, #31
 80021f0:	431a      	orrs	r2, r3
 80021f2:	0869      	lsrs	r1, r5, #1
 80021f4:	075b      	lsls	r3, r3, #29
 80021f6:	d400      	bmi.n	80021fa <__aeabi_dsub+0x55e>
 80021f8:	e14a      	b.n	8002490 <__aeabi_dsub+0x7f4>
 80021fa:	230f      	movs	r3, #15
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x568>
 8002202:	e0fc      	b.n	80023fe <__aeabi_dsub+0x762>
 8002204:	1d17      	adds	r7, r2, #4
 8002206:	4297      	cmp	r7, r2
 8002208:	41a4      	sbcs	r4, r4
 800220a:	4264      	negs	r4, r4
 800220c:	2502      	movs	r5, #2
 800220e:	1864      	adds	r4, r4, r1
 8002210:	e6ec      	b.n	8001fec <__aeabi_dsub+0x350>
 8002212:	4647      	mov	r7, r8
 8002214:	001c      	movs	r4, r3
 8002216:	431f      	orrs	r7, r3
 8002218:	d000      	beq.n	800221c <__aeabi_dsub+0x580>
 800221a:	e743      	b.n	80020a4 <__aeabi_dsub+0x408>
 800221c:	2600      	movs	r6, #0
 800221e:	2500      	movs	r5, #0
 8002220:	2400      	movs	r4, #0
 8002222:	e6cf      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	0767      	lsls	r7, r4, #29
 8002228:	4307      	orrs	r7, r0
 800222a:	08e5      	lsrs	r5, r4, #3
 800222c:	e632      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800222e:	1a87      	subs	r7, r0, r2
 8002230:	465b      	mov	r3, fp
 8002232:	42b8      	cmp	r0, r7
 8002234:	4180      	sbcs	r0, r0
 8002236:	1ae4      	subs	r4, r4, r3
 8002238:	4240      	negs	r0, r0
 800223a:	1a24      	subs	r4, r4, r0
 800223c:	0223      	lsls	r3, r4, #8
 800223e:	d428      	bmi.n	8002292 <__aeabi_dsub+0x5f6>
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	08ff      	lsrs	r7, r7, #3
 8002244:	431f      	orrs	r7, r3
 8002246:	08e5      	lsrs	r5, r4, #3
 8002248:	2301      	movs	r3, #1
 800224a:	e77f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x5b6>
 8002250:	e673      	b.n	8001f3a <__aeabi_dsub+0x29e>
 8002252:	464b      	mov	r3, r9
 8002254:	1b5f      	subs	r7, r3, r5
 8002256:	003b      	movs	r3, r7
 8002258:	2d00      	cmp	r5, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x5c2>
 800225c:	e742      	b.n	80020e4 <__aeabi_dsub+0x448>
 800225e:	2f38      	cmp	r7, #56	@ 0x38
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x5c8>
 8002262:	e0ec      	b.n	800243e <__aeabi_dsub+0x7a2>
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	000e      	movs	r6, r1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431c      	orrs	r4, r3
 800226c:	2f1f      	cmp	r7, #31
 800226e:	dc25      	bgt.n	80022bc <__aeabi_dsub+0x620>
 8002270:	2520      	movs	r5, #32
 8002272:	0023      	movs	r3, r4
 8002274:	1bed      	subs	r5, r5, r7
 8002276:	0001      	movs	r1, r0
 8002278:	40a8      	lsls	r0, r5
 800227a:	40ab      	lsls	r3, r5
 800227c:	40f9      	lsrs	r1, r7
 800227e:	1e45      	subs	r5, r0, #1
 8002280:	41a8      	sbcs	r0, r5
 8002282:	430b      	orrs	r3, r1
 8002284:	40fc      	lsrs	r4, r7
 8002286:	4318      	orrs	r0, r3
 8002288:	465b      	mov	r3, fp
 800228a:	1b1b      	subs	r3, r3, r4
 800228c:	469b      	mov	fp, r3
 800228e:	e739      	b.n	8002104 <__aeabi_dsub+0x468>
 8002290:	4666      	mov	r6, ip
 8002292:	2501      	movs	r5, #1
 8002294:	e562      	b.n	8001d5c <__aeabi_dsub+0xc0>
 8002296:	001f      	movs	r7, r3
 8002298:	4659      	mov	r1, fp
 800229a:	3f20      	subs	r7, #32
 800229c:	40f9      	lsrs	r1, r7
 800229e:	468c      	mov	ip, r1
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x614>
 80022a4:	2740      	movs	r7, #64	@ 0x40
 80022a6:	4659      	mov	r1, fp
 80022a8:	1afb      	subs	r3, r7, r3
 80022aa:	4099      	lsls	r1, r3
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4692      	mov	sl, r2
 80022b0:	4657      	mov	r7, sl
 80022b2:	1e7b      	subs	r3, r7, #1
 80022b4:	419f      	sbcs	r7, r3
 80022b6:	4663      	mov	r3, ip
 80022b8:	431f      	orrs	r7, r3
 80022ba:	e5c1      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 80022bc:	003b      	movs	r3, r7
 80022be:	0025      	movs	r5, r4
 80022c0:	3b20      	subs	r3, #32
 80022c2:	40dd      	lsrs	r5, r3
 80022c4:	2f20      	cmp	r7, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_dsub+0x636>
 80022c8:	2340      	movs	r3, #64	@ 0x40
 80022ca:	1bdb      	subs	r3, r3, r7
 80022cc:	409c      	lsls	r4, r3
 80022ce:	4320      	orrs	r0, r4
 80022d0:	4680      	mov	r8, r0
 80022d2:	4640      	mov	r0, r8
 80022d4:	1e43      	subs	r3, r0, #1
 80022d6:	4198      	sbcs	r0, r3
 80022d8:	4328      	orrs	r0, r5
 80022da:	e713      	b.n	8002104 <__aeabi_dsub+0x468>
 80022dc:	2900      	cmp	r1, #0
 80022de:	d09d      	beq.n	800221c <__aeabi_dsub+0x580>
 80022e0:	2601      	movs	r6, #1
 80022e2:	4663      	mov	r3, ip
 80022e4:	465c      	mov	r4, fp
 80022e6:	4690      	mov	r8, r2
 80022e8:	401e      	ands	r6, r3
 80022ea:	e6db      	b.n	80020a4 <__aeabi_dsub+0x408>
 80022ec:	1a17      	subs	r7, r2, r0
 80022ee:	465b      	mov	r3, fp
 80022f0:	42ba      	cmp	r2, r7
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	1b1c      	subs	r4, r3, r4
 80022f6:	4252      	negs	r2, r2
 80022f8:	1aa4      	subs	r4, r4, r2
 80022fa:	0223      	lsls	r3, r4, #8
 80022fc:	d4c8      	bmi.n	8002290 <__aeabi_dsub+0x5f4>
 80022fe:	0763      	lsls	r3, r4, #29
 8002300:	08ff      	lsrs	r7, r7, #3
 8002302:	431f      	orrs	r7, r3
 8002304:	4666      	mov	r6, ip
 8002306:	2301      	movs	r3, #1
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	e71f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800230c:	001d      	movs	r5, r3
 800230e:	2400      	movs	r4, #0
 8002310:	2700      	movs	r7, #0
 8002312:	e657      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002314:	465c      	mov	r4, fp
 8002316:	08d0      	lsrs	r0, r2, #3
 8002318:	e66a      	b.n	8001ff0 <__aeabi_dsub+0x354>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x684>
 800231e:	e737      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8002320:	4653      	mov	r3, sl
 8002322:	08c0      	lsrs	r0, r0, #3
 8002324:	0767      	lsls	r7, r4, #29
 8002326:	4307      	orrs	r7, r0
 8002328:	08e5      	lsrs	r5, r4, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x694>
 800232e:	e5b1      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	421d      	tst	r5, r3
 8002336:	d008      	beq.n	800234a <__aeabi_dsub+0x6ae>
 8002338:	4659      	mov	r1, fp
 800233a:	08c8      	lsrs	r0, r1, #3
 800233c:	4218      	tst	r0, r3
 800233e:	d104      	bne.n	800234a <__aeabi_dsub+0x6ae>
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	0749      	lsls	r1, r1, #29
 8002344:	430a      	orrs	r2, r1
 8002346:	0017      	movs	r7, r2
 8002348:	0005      	movs	r5, r0
 800234a:	0f7b      	lsrs	r3, r7, #29
 800234c:	00ff      	lsls	r7, r7, #3
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	075b      	lsls	r3, r3, #29
 8002352:	431f      	orrs	r7, r3
 8002354:	e59e      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002356:	08c0      	lsrs	r0, r0, #3
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	4318      	orrs	r0, r3
 800235c:	08e5      	lsrs	r5, r4, #3
 800235e:	2900      	cmp	r1, #0
 8002360:	d053      	beq.n	800240a <__aeabi_dsub+0x76e>
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	031b      	lsls	r3, r3, #12
 8002366:	421d      	tst	r5, r3
 8002368:	d00a      	beq.n	8002380 <__aeabi_dsub+0x6e4>
 800236a:	4659      	mov	r1, fp
 800236c:	08cc      	lsrs	r4, r1, #3
 800236e:	421c      	tst	r4, r3
 8002370:	d106      	bne.n	8002380 <__aeabi_dsub+0x6e4>
 8002372:	2601      	movs	r6, #1
 8002374:	4663      	mov	r3, ip
 8002376:	0025      	movs	r5, r4
 8002378:	08d0      	lsrs	r0, r2, #3
 800237a:	0749      	lsls	r1, r1, #29
 800237c:	4308      	orrs	r0, r1
 800237e:	401e      	ands	r6, r3
 8002380:	0f47      	lsrs	r7, r0, #29
 8002382:	00c0      	lsls	r0, r0, #3
 8002384:	08c0      	lsrs	r0, r0, #3
 8002386:	077f      	lsls	r7, r7, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	e583      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4293      	cmp	r3, r2
 8002390:	4192      	sbcs	r2, r2
 8002392:	445c      	add	r4, fp
 8002394:	4252      	negs	r2, r2
 8002396:	18a5      	adds	r5, r4, r2
 8002398:	022a      	lsls	r2, r5, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x702>
 800239c:	e724      	b.n	80021e8 <__aeabi_dsub+0x54c>
 800239e:	076f      	lsls	r7, r5, #29
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	431f      	orrs	r7, r3
 80023a4:	08ed      	lsrs	r5, r5, #3
 80023a6:	2301      	movs	r3, #1
 80023a8:	e6d0      	b.n	800214c <__aeabi_dsub+0x4b0>
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	000007ff 	.word	0x000007ff
 80023b0:	000007fe 	.word	0x000007fe
 80023b4:	ff7fffff 	.word	0xff7fffff
 80023b8:	465b      	mov	r3, fp
 80023ba:	08d2      	lsrs	r2, r2, #3
 80023bc:	075f      	lsls	r7, r3, #29
 80023be:	4666      	mov	r6, ip
 80023c0:	4317      	orrs	r7, r2
 80023c2:	08dd      	lsrs	r5, r3, #3
 80023c4:	e566      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 80023c6:	0025      	movs	r5, r4
 80023c8:	3b20      	subs	r3, #32
 80023ca:	40dd      	lsrs	r5, r3
 80023cc:	4663      	mov	r3, ip
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d005      	beq.n	80023de <__aeabi_dsub+0x742>
 80023d2:	2340      	movs	r3, #64	@ 0x40
 80023d4:	4661      	mov	r1, ip
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	409c      	lsls	r4, r3
 80023da:	4320      	orrs	r0, r4
 80023dc:	4680      	mov	r8, r0
 80023de:	4647      	mov	r7, r8
 80023e0:	1e7b      	subs	r3, r7, #1
 80023e2:	419f      	sbcs	r7, r3
 80023e4:	432f      	orrs	r7, r5
 80023e6:	e5a0      	b.n	8001f2a <__aeabi_dsub+0x28e>
 80023e8:	2120      	movs	r1, #32
 80023ea:	2700      	movs	r7, #0
 80023ec:	1a09      	subs	r1, r1, r0
 80023ee:	e4d2      	b.n	8001d96 <__aeabi_dsub+0xfa>
 80023f0:	2f00      	cmp	r7, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x75a>
 80023f4:	e713      	b.n	800221e <__aeabi_dsub+0x582>
 80023f6:	465c      	mov	r4, fp
 80023f8:	0017      	movs	r7, r2
 80023fa:	2500      	movs	r5, #0
 80023fc:	e5f6      	b.n	8001fec <__aeabi_dsub+0x350>
 80023fe:	08d7      	lsrs	r7, r2, #3
 8002400:	0749      	lsls	r1, r1, #29
 8002402:	2302      	movs	r3, #2
 8002404:	430f      	orrs	r7, r1
 8002406:	092d      	lsrs	r5, r5, #4
 8002408:	e6a0      	b.n	800214c <__aeabi_dsub+0x4b0>
 800240a:	0007      	movs	r7, r0
 800240c:	e542      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800240e:	465b      	mov	r3, fp
 8002410:	2601      	movs	r6, #1
 8002412:	075f      	lsls	r7, r3, #29
 8002414:	08dd      	lsrs	r5, r3, #3
 8002416:	4663      	mov	r3, ip
 8002418:	08d2      	lsrs	r2, r2, #3
 800241a:	4317      	orrs	r7, r2
 800241c:	401e      	ands	r6, r3
 800241e:	e539      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002420:	465b      	mov	r3, fp
 8002422:	08d2      	lsrs	r2, r2, #3
 8002424:	075f      	lsls	r7, r3, #29
 8002426:	4317      	orrs	r7, r2
 8002428:	08dd      	lsrs	r5, r3, #3
 800242a:	e533      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800242c:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <__aeabi_dsub+0x80c>)
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	4022      	ands	r2, r4
 8002432:	0757      	lsls	r7, r2, #29
 8002434:	0252      	lsls	r2, r2, #9
 8002436:	2501      	movs	r5, #1
 8002438:	431f      	orrs	r7, r3
 800243a:	0b14      	lsrs	r4, r2, #12
 800243c:	e5c2      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800243e:	000e      	movs	r6, r1
 8002440:	2001      	movs	r0, #1
 8002442:	e65f      	b.n	8002104 <__aeabi_dsub+0x468>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <__aeabi_dsub+0x7c8>
 8002448:	464b      	mov	r3, r9
 800244a:	1b5b      	subs	r3, r3, r5
 800244c:	469c      	mov	ip, r3
 800244e:	2d00      	cmp	r5, #0
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x7b8>
 8002452:	e548      	b.n	8001ee6 <__aeabi_dsub+0x24a>
 8002454:	2701      	movs	r7, #1
 8002456:	2b38      	cmp	r3, #56	@ 0x38
 8002458:	dd00      	ble.n	800245c <__aeabi_dsub+0x7c0>
 800245a:	e566      	b.n	8001f2a <__aeabi_dsub+0x28e>
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	431c      	orrs	r4, r3
 8002462:	e550      	b.n	8001f06 <__aeabi_dsub+0x26a>
 8002464:	1c6b      	adds	r3, r5, #1
 8002466:	4d11      	ldr	r5, [pc, #68]	@ (80024ac <__aeabi_dsub+0x810>)
 8002468:	422b      	tst	r3, r5
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x7d2>
 800246c:	e673      	b.n	8002156 <__aeabi_dsub+0x4ba>
 800246e:	4659      	mov	r1, fp
 8002470:	0023      	movs	r3, r4
 8002472:	4311      	orrs	r1, r2
 8002474:	468a      	mov	sl, r1
 8002476:	4303      	orrs	r3, r0
 8002478:	e600      	b.n	800207c <__aeabi_dsub+0x3e0>
 800247a:	0767      	lsls	r7, r4, #29
 800247c:	08c0      	lsrs	r0, r0, #3
 800247e:	2300      	movs	r3, #0
 8002480:	4307      	orrs	r7, r0
 8002482:	08e5      	lsrs	r5, r4, #3
 8002484:	e662      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002486:	0764      	lsls	r4, r4, #29
 8002488:	08ff      	lsrs	r7, r7, #3
 800248a:	4327      	orrs	r7, r4
 800248c:	0905      	lsrs	r5, r0, #4
 800248e:	e65d      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002490:	08d2      	lsrs	r2, r2, #3
 8002492:	0749      	lsls	r1, r1, #29
 8002494:	4311      	orrs	r1, r2
 8002496:	000f      	movs	r7, r1
 8002498:	2302      	movs	r3, #2
 800249a:	092d      	lsrs	r5, r5, #4
 800249c:	e656      	b.n	800214c <__aeabi_dsub+0x4b0>
 800249e:	0007      	movs	r7, r0
 80024a0:	e5a4      	b.n	8001fec <__aeabi_dsub+0x350>
 80024a2:	0038      	movs	r0, r7
 80024a4:	e48f      	b.n	8001dc6 <__aeabi_dsub+0x12a>
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	ff7fffff 	.word	0xff7fffff
 80024ac:	000007fe 	.word	0x000007fe

080024b0 <__aeabi_dcmpun>:
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	46c6      	mov	lr, r8
 80024b4:	031e      	lsls	r6, r3, #12
 80024b6:	0b36      	lsrs	r6, r6, #12
 80024b8:	46b0      	mov	r8, r6
 80024ba:	4e0d      	ldr	r6, [pc, #52]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024bc:	030c      	lsls	r4, r1, #12
 80024be:	004d      	lsls	r5, r1, #1
 80024c0:	005f      	lsls	r7, r3, #1
 80024c2:	b500      	push	{lr}
 80024c4:	0b24      	lsrs	r4, r4, #12
 80024c6:	0d6d      	lsrs	r5, r5, #21
 80024c8:	0d7f      	lsrs	r7, r7, #21
 80024ca:	42b5      	cmp	r5, r6
 80024cc:	d00b      	beq.n	80024e6 <__aeabi_dcmpun+0x36>
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	428f      	cmp	r7, r1
 80024d4:	d104      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024d6:	4646      	mov	r6, r8
 80024d8:	4316      	orrs	r6, r2
 80024da:	0030      	movs	r0, r6
 80024dc:	1e43      	subs	r3, r0, #1
 80024de:	4198      	sbcs	r0, r3
 80024e0:	bc80      	pop	{r7}
 80024e2:	46b8      	mov	r8, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e6:	4304      	orrs	r4, r0
 80024e8:	2001      	movs	r0, #1
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d1f8      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024ee:	e7ee      	b.n	80024ce <__aeabi_dcmpun+0x1e>
 80024f0:	000007ff 	.word	0x000007ff

080024f4 <__aeabi_d2iz>:
 80024f4:	000b      	movs	r3, r1
 80024f6:	0002      	movs	r2, r0
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4d16      	ldr	r5, [pc, #88]	@ (8002554 <__aeabi_d2iz+0x60>)
 80024fc:	030c      	lsls	r4, r1, #12
 80024fe:	b082      	sub	sp, #8
 8002500:	0049      	lsls	r1, r1, #1
 8002502:	2000      	movs	r0, #0
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	0b24      	lsrs	r4, r4, #12
 800250a:	0d49      	lsrs	r1, r1, #21
 800250c:	0fde      	lsrs	r6, r3, #31
 800250e:	42a9      	cmp	r1, r5
 8002510:	dd04      	ble.n	800251c <__aeabi_d2iz+0x28>
 8002512:	4811      	ldr	r0, [pc, #68]	@ (8002558 <__aeabi_d2iz+0x64>)
 8002514:	4281      	cmp	r1, r0
 8002516:	dd03      	ble.n	8002520 <__aeabi_d2iz+0x2c>
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <__aeabi_d2iz+0x68>)
 800251a:	18f0      	adds	r0, r6, r3
 800251c:	b002      	add	sp, #8
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	2080      	movs	r0, #128	@ 0x80
 8002522:	0340      	lsls	r0, r0, #13
 8002524:	4320      	orrs	r0, r4
 8002526:	4c0e      	ldr	r4, [pc, #56]	@ (8002560 <__aeabi_d2iz+0x6c>)
 8002528:	1a64      	subs	r4, r4, r1
 800252a:	2c1f      	cmp	r4, #31
 800252c:	dd08      	ble.n	8002540 <__aeabi_d2iz+0x4c>
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <__aeabi_d2iz+0x70>)
 8002530:	1a5b      	subs	r3, r3, r1
 8002532:	40d8      	lsrs	r0, r3
 8002534:	0003      	movs	r3, r0
 8002536:	4258      	negs	r0, r3
 8002538:	2e00      	cmp	r6, #0
 800253a:	d1ef      	bne.n	800251c <__aeabi_d2iz+0x28>
 800253c:	0018      	movs	r0, r3
 800253e:	e7ed      	b.n	800251c <__aeabi_d2iz+0x28>
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <__aeabi_d2iz+0x74>)
 8002542:	9a00      	ldr	r2, [sp, #0]
 8002544:	469c      	mov	ip, r3
 8002546:	0003      	movs	r3, r0
 8002548:	4461      	add	r1, ip
 800254a:	408b      	lsls	r3, r1
 800254c:	40e2      	lsrs	r2, r4
 800254e:	4313      	orrs	r3, r2
 8002550:	e7f1      	b.n	8002536 <__aeabi_d2iz+0x42>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000003fe 	.word	0x000003fe
 8002558:	0000041d 	.word	0x0000041d
 800255c:	7fffffff 	.word	0x7fffffff
 8002560:	00000433 	.word	0x00000433
 8002564:	00000413 	.word	0x00000413
 8002568:	fffffbed 	.word	0xfffffbed

0800256c <__aeabi_ui2d>:
 800256c:	b510      	push	{r4, lr}
 800256e:	1e04      	subs	r4, r0, #0
 8002570:	d010      	beq.n	8002594 <__aeabi_ui2d+0x28>
 8002572:	f7fd ff85 	bl	8000480 <__clzsi2>
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <__aeabi_ui2d+0x44>)
 8002578:	1a1b      	subs	r3, r3, r0
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	280a      	cmp	r0, #10
 8002580:	dc0f      	bgt.n	80025a2 <__aeabi_ui2d+0x36>
 8002582:	220b      	movs	r2, #11
 8002584:	0021      	movs	r1, r4
 8002586:	1a12      	subs	r2, r2, r0
 8002588:	40d1      	lsrs	r1, r2
 800258a:	3015      	adds	r0, #21
 800258c:	030a      	lsls	r2, r1, #12
 800258e:	4084      	lsls	r4, r0
 8002590:	0b12      	lsrs	r2, r2, #12
 8002592:	e001      	b.n	8002598 <__aeabi_ui2d+0x2c>
 8002594:	2300      	movs	r3, #0
 8002596:	2200      	movs	r2, #0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	4313      	orrs	r3, r2
 800259c:	0020      	movs	r0, r4
 800259e:	0019      	movs	r1, r3
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	0022      	movs	r2, r4
 80025a4:	380b      	subs	r0, #11
 80025a6:	4082      	lsls	r2, r0
 80025a8:	0312      	lsls	r2, r2, #12
 80025aa:	2400      	movs	r4, #0
 80025ac:	0b12      	lsrs	r2, r2, #12
 80025ae:	e7f3      	b.n	8002598 <__aeabi_ui2d+0x2c>
 80025b0:	0000041e 	.word	0x0000041e

080025b4 <__clzdi2>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d103      	bne.n	80025c2 <__clzdi2+0xe>
 80025ba:	f7fd ff61 	bl	8000480 <__clzsi2>
 80025be:	3020      	adds	r0, #32
 80025c0:	e002      	b.n	80025c8 <__clzdi2+0x14>
 80025c2:	0008      	movs	r0, r1
 80025c4:	f7fd ff5c 	bl	8000480 <__clzsi2>
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)

080025cc <getNumberPage>:
/**
  * @brief  Get Number Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint8_t getNumberPage(uint32_t Address_){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint8_t number_ = (uint8_t)((Address_ & 0x3F800)>>11);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0adb      	lsrs	r3, r3, #11
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	200f      	movs	r0, #15
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	217f      	movs	r1, #127	@ 0x7f
 80025e0:	400a      	ands	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
	return number_;
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <getAddressPage>:
/**
  * @brief  Get Address Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint64_t getAddressPage(uint32_t Address_){
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	return ( (uint64_t) (Address_ & 0xFFFFF800) );
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	000a      	movs	r2, r1
 80025fc:	2100      	movs	r1, #0
 80025fe:	000b      	movs	r3, r1
 8002600:	0ad1      	lsrs	r1, r2, #11
 8002602:	02cc      	lsls	r4, r1, #11
 8002604:	2100      	movs	r1, #0
 8002606:	400b      	ands	r3, r1
 8002608:	001d      	movs	r5, r3
 800260a:	0022      	movs	r2, r4
 800260c:	002b      	movs	r3, r5
}
 800260e:	0010      	movs	r0, r2
 8002610:	0019      	movs	r1, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bdb0      	pop	{r4, r5, r7, pc}

08002618 <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	f011 fb8f 	bl	8013d44 <HAL_FLASH_Unlock>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d1fb      	bne.n	8002622 <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 800262a:	2410      	movs	r4, #16
 800262c:	193b      	adds	r3, r7, r4
 800262e:	0018      	movs	r0, r3
 8002630:	2310      	movs	r3, #16
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f019 fb8b 	bl	801bd50 <memset>
	pEraseInit.NbPages = 1;
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2201      	movs	r2, #1
 8002640:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8002652:	230c      	movs	r3, #12
 8002654:	18fa      	adds	r2, r7, r3
 8002656:	187b      	adds	r3, r7, r1
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f011 fc20 	bl	8013ea0 <HAL_FLASHEx_Erase>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	f011 fb93 	bl	8013d8c <HAL_FLASH_Lock>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d1fb      	bne.n	8002662 <erasePage+0x4a>
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b009      	add	sp, #36	@ 0x24
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Address_, uint64_t * arrayData_,uint8_t size_){
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	f011 fb5e 	bl	8013d44 <HAL_FLASH_Unlock>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d1fb      	bne.n	8002684 <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 800268c:	2317      	movs	r3, #23
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e013      	b.n	80026be <writeFLASH+0x4a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Address_, arrayData_[i]);
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	2417      	movs	r4, #23
 800269a:	193b      	adds	r3, r7, r4
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2001      	movs	r0, #1
 80026aa:	f011 fafd 	bl	8013ca8 <HAL_FLASH_Program>
		Address_++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3308      	adds	r3, #8
 80026b2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i =0; i<size_; i++){
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	3201      	adds	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	2317      	movs	r3, #23
 80026c0:	18fa      	adds	r2, r7, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3e4      	bcc.n	8002696 <writeFLASH+0x22>
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	f011 fb5d 	bl	8013d8c <HAL_FLASH_Lock>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d1fb      	bne.n	80026ce <writeFLASH+0x5a>
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b007      	add	sp, #28
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	46c6      	mov	lr, r8
 80026e4:	b500      	push	{lr}
 80026e6:	4cec      	ldr	r4, [pc, #944]	@ (8002a98 <initEEPROMEmulated+0x3b8>)
 80026e8:	44a5      	add	sp, r4
 80026ea:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 80026ec:	4beb      	ldr	r3, [pc, #940]	@ (8002a9c <initEEPROMEmulated+0x3bc>)
 80026ee:	4aec      	ldr	r2, [pc, #944]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80026f0:	2430      	movs	r4, #48	@ 0x30
 80026f2:	1912      	adds	r2, r2, r4
 80026f4:	2108      	movs	r1, #8
 80026f6:	468c      	mov	ip, r1
 80026f8:	44bc      	add	ip, r7
 80026fa:	4462      	add	r2, ip
 80026fc:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 80026fe:	4be9      	ldr	r3, [pc, #932]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 8002700:	191b      	adds	r3, r3, r4
 8002702:	2208      	movs	r2, #8
 8002704:	18ba      	adds	r2, r7, r2
 8002706:	189a      	adds	r2, r3, r2
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 800270c:	49e6      	ldr	r1, [pc, #920]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 800270e:	190b      	adds	r3, r1, r4
 8002710:	2208      	movs	r2, #8
 8002712:	18ba      	adds	r2, r7, r2
 8002714:	189a      	adds	r2, r3, r2
 8002716:	2301      	movs	r3, #1
 8002718:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 800271a:	4be4      	ldr	r3, [pc, #912]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 800271c:	191b      	adds	r3, r3, r4
 800271e:	2208      	movs	r2, #8
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	189a      	adds	r2, r3, r2
 8002724:	237e      	movs	r3, #126	@ 0x7e
 8002726:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ; //
 8002728:	4be1      	ldr	r3, [pc, #900]	@ (8002ab0 <initEEPROMEmulated+0x3d0>)
 800272a:	4ae2      	ldr	r2, [pc, #904]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 800272c:	1910      	adds	r0, r2, r4
 800272e:	2508      	movs	r5, #8
 8002730:	46ac      	mov	ip, r5
 8002732:	44bc      	add	ip, r7
 8002734:	4460      	add	r0, ip
 8002736:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){	// Verify Format Flash is correct
 8002738:	1913      	adds	r3, r2, r4
 800273a:	2208      	movs	r2, #8
 800273c:	4694      	mov	ip, r2
 800273e:	44bc      	add	ip, r7
 8002740:	4463      	add	r3, ip
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4bd5      	ldr	r3, [pc, #852]	@ (8002a9c <initEEPROMEmulated+0x3bc>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d025      	beq.n	8002798 <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 800274c:	190b      	adds	r3, r1, r4
 800274e:	2208      	movs	r2, #8
 8002750:	18ba      	adds	r2, r7, r2
 8002752:	189a      	adds	r2, r3, r2
 8002754:	2300      	movs	r3, #0
 8002756:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002758:	4bd7      	ldr	r3, [pc, #860]	@ (8002ab8 <initEEPROMEmulated+0x3d8>)
 800275a:	2295      	movs	r2, #149	@ 0x95
 800275c:	00d2      	lsls	r2, r2, #3
 800275e:	189b      	adds	r3, r3, r2
 8002760:	2230      	movs	r2, #48	@ 0x30
 8002762:	4694      	mov	ip, r2
 8002764:	2208      	movs	r2, #8
 8002766:	4690      	mov	r8, r2
 8002768:	44b8      	add	r8, r7
 800276a:	44c4      	add	ip, r8
 800276c:	4463      	add	r3, ip
 800276e:	0018      	movs	r0, r3
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	001a      	movs	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	f019 faea 	bl	801bd50 <memset>
	pointArray_ = arrayDataP_;
 800277c:	2390      	movs	r3, #144	@ 0x90
 800277e:	191b      	adds	r3, r3, r4
 8002780:	2208      	movs	r2, #8
 8002782:	4694      	mov	ip, r2
 8002784:	44bc      	add	ip, r7
 8002786:	4463      	add	r3, ip
 8002788:	4acc      	ldr	r2, [pc, #816]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800278a:	1912      	adds	r2, r2, r4
 800278c:	2108      	movs	r1, #8
 800278e:	468c      	mov	ip, r1
 8002790:	44bc      	add	ip, r7
 8002792:	4462      	add	r2, ip
 8002794:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 8002796:	e045      	b.n	8002824 <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 8002798:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 800279a:	4bc9      	ldr	r3, [pc, #804]	@ (8002ac0 <initEEPROMEmulated+0x3e0>)
 800279c:	4ac5      	ldr	r2, [pc, #788]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 800279e:	2430      	movs	r4, #48	@ 0x30
 80027a0:	1911      	adds	r1, r2, r4
 80027a2:	2008      	movs	r0, #8
 80027a4:	4684      	mov	ip, r0
 80027a6:	44bc      	add	ip, r7
 80027a8:	4461      	add	r1, ip
 80027aa:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){ // Verify Format Flash is correct
 80027ac:	1913      	adds	r3, r2, r4
 80027ae:	2208      	movs	r2, #8
 80027b0:	4694      	mov	ip, r2
 80027b2:	44bc      	add	ip, r7
 80027b4:	4463      	add	r3, ip
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4bc2      	ldr	r3, [pc, #776]	@ (8002ac4 <initEEPROMEmulated+0x3e4>)
 80027bc:	429a      	cmp	r2, r3
 80027be:	d100      	bne.n	80027c2 <initEEPROMEmulated+0xe2>
 80027c0:	e15d      	b.n	8002a7e <initEEPROMEmulated+0x39e>
		goto saveDataEEPROM_RAM;
	}
	varInit = (uint8_t *) Page_127;
 80027c2:	4bc0      	ldr	r3, [pc, #768]	@ (8002ac4 <initEEPROMEmulated+0x3e4>)
 80027c4:	4ab6      	ldr	r2, [pc, #728]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80027c6:	1912      	adds	r2, r2, r4
 80027c8:	2108      	movs	r1, #8
 80027ca:	468c      	mov	ip, r1
 80027cc:	44bc      	add	ip, r7
 80027ce:	4462      	add	r2, ip
 80027d0:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80027d2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ac8 <initEEPROMEmulated+0x3e8>)
 80027d4:	2295      	movs	r2, #149	@ 0x95
 80027d6:	00d2      	lsls	r2, r2, #3
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	2230      	movs	r2, #48	@ 0x30
 80027dc:	4694      	mov	ip, r2
 80027de:	2208      	movs	r2, #8
 80027e0:	4690      	mov	r8, r2
 80027e2:	44b8      	add	r8, r7
 80027e4:	44c4      	add	ip, r8
 80027e6:	4463      	add	r3, ip
 80027e8:	0018      	movs	r0, r3
 80027ea:	2390      	movs	r3, #144	@ 0x90
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f019 faae 	bl	801bd50 <memset>
	size_ = sizeEEPROM_V;
 80027f4:	4bab      	ldr	r3, [pc, #684]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 80027f6:	191b      	adds	r3, r3, r4
 80027f8:	2208      	movs	r2, #8
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	189a      	adds	r2, r3, r2
 80027fe:	2312      	movs	r3, #18
 8002800:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 8002802:	2308      	movs	r3, #8
 8002804:	18e3      	adds	r3, r4, r3
 8002806:	19db      	adds	r3, r3, r7
 8002808:	4aac      	ldr	r2, [pc, #688]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800280a:	1912      	adds	r2, r2, r4
 800280c:	2108      	movs	r1, #8
 800280e:	468c      	mov	ip, r1
 8002810:	44bc      	add	ip, r7
 8002812:	4462      	add	r2, ip
 8002814:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 8002816:	4ba5      	ldr	r3, [pc, #660]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 8002818:	191b      	adds	r3, r3, r4
 800281a:	2208      	movs	r2, #8
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	189a      	adds	r2, r3, r2
 8002820:	237f      	movs	r3, #127	@ 0x7f
 8002822:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 8002824:	4ba9      	ldr	r3, [pc, #676]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002826:	2230      	movs	r2, #48	@ 0x30
 8002828:	189b      	adds	r3, r3, r2
 800282a:	2208      	movs	r2, #8
 800282c:	18ba      	adds	r2, r7, r2
 800282e:	189a      	adds	r2, r3, r2
 8002830:	2300      	movs	r3, #0
 8002832:	7013      	strb	r3, [r2, #0]
 8002834:	e0d9      	b.n	80029ea <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 8002836:	4e9a      	ldr	r6, [pc, #616]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 8002838:	2230      	movs	r2, #48	@ 0x30
 800283a:	18b3      	adds	r3, r6, r2
 800283c:	2108      	movs	r1, #8
 800283e:	468c      	mov	ip, r1
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	7819      	ldrb	r1, [r3, #0]
 8002848:	48a0      	ldr	r0, [pc, #640]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 800284a:	0014      	movs	r4, r2
 800284c:	1883      	adds	r3, r0, r2
 800284e:	2208      	movs	r2, #8
 8002850:	4694      	mov	ip, r2
 8002852:	44bc      	add	ip, r7
 8002854:	4463      	add	r3, ip
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00da      	lsls	r2, r3, #3
 800285a:	4b98      	ldr	r3, [pc, #608]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800285c:	191b      	adds	r3, r3, r4
 800285e:	2508      	movs	r5, #8
 8002860:	46ac      	mov	ip, r5
 8002862:	44bc      	add	ip, r7
 8002864:	4463      	add	r3, ip
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	189b      	adds	r3, r3, r2
 800286a:	6239      	str	r1, [r7, #32]
 800286c:	2200      	movs	r2, #0
 800286e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	6019      	str	r1, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 8002878:	1903      	adds	r3, r0, r4
 800287a:	2208      	movs	r2, #8
 800287c:	4694      	mov	ip, r2
 800287e:	44bc      	add	ip, r7
 8002880:	4463      	add	r3, ip
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	00da      	lsls	r2, r3, #3
 8002886:	498d      	ldr	r1, [pc, #564]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002888:	190b      	adds	r3, r1, r4
 800288a:	2108      	movs	r1, #8
 800288c:	1879      	adds	r1, r7, r1
 800288e:	1859      	adds	r1, r3, r1
 8002890:	680b      	ldr	r3, [r1, #0]
 8002892:	189b      	adds	r3, r3, r2
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	1933      	adds	r3, r6, r4
 800289a:	2208      	movs	r2, #8
 800289c:	18ba      	adds	r2, r7, r2
 800289e:	189a      	adds	r2, r3, r2
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	17db      	asrs	r3, r3, #31
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	0012      	movs	r2, r2
 80028ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ae:	2300      	movs	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b2:	4b86      	ldr	r3, [pc, #536]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80028b4:	191b      	adds	r3, r3, r4
 80028b6:	2208      	movs	r2, #8
 80028b8:	4694      	mov	ip, r2
 80028ba:	44bc      	add	ip, r7
 80028bc:	4463      	add	r3, ip
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 80028c4:	191b      	adds	r3, r3, r4
 80028c6:	2508      	movs	r5, #8
 80028c8:	46ac      	mov	ip, r5
 80028ca:	44bc      	add	ip, r7
 80028cc:	4463      	add	r3, ip
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d4:	4302      	orrs	r2, r0
 80028d6:	613a      	str	r2, [r7, #16]
 80028d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028da:	430a      	orrs	r2, r1
 80028dc:	617a      	str	r2, [r7, #20]
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	6019      	str	r1, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80028e6:	0021      	movs	r1, r4
 80028e8:	1873      	adds	r3, r6, r1
 80028ea:	2208      	movs	r2, #8
 80028ec:	18ba      	adds	r2, r7, r2
 80028ee:	189a      	adds	r2, r3, r2
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4b77      	ldr	r3, [pc, #476]	@ (8002ad0 <initEEPROMEmulated+0x3f0>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d35b      	bcc.n	80029b0 <initEEPROMEmulated+0x2d0>
 80028f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 80028fa:	1853      	adds	r3, r2, r1
 80028fc:	2208      	movs	r2, #8
 80028fe:	4694      	mov	ip, r2
 8002900:	44bc      	add	ip, r7
 8002902:	4463      	add	r3, ip
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d052      	beq.n	80029b0 <initEEPROMEmulated+0x2d0>
			varInit++;
 800290a:	1873      	adds	r3, r6, r1
 800290c:	2208      	movs	r2, #8
 800290e:	18ba      	adds	r2, r7, r2
 8002910:	189a      	adds	r2, r3, r2
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	1872      	adds	r2, r6, r1
 8002918:	2008      	movs	r0, #8
 800291a:	4684      	mov	ip, r0
 800291c:	44bc      	add	ip, r7
 800291e:	4462      	add	r2, ip
 8002920:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 8002922:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002924:	0008      	movs	r0, r1
 8002926:	185b      	adds	r3, r3, r1
 8002928:	2208      	movs	r2, #8
 800292a:	4694      	mov	ip, r2
 800292c:	44bc      	add	ip, r7
 800292e:	4463      	add	r3, ip
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00da      	lsls	r2, r3, #3
 8002934:	4961      	ldr	r1, [pc, #388]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002936:	0004      	movs	r4, r0
 8002938:	1809      	adds	r1, r1, r0
 800293a:	2308      	movs	r3, #8
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	18c8      	adds	r0, r1, r3
 8002940:	6803      	ldr	r3, [r0, #0]
 8002942:	189b      	adds	r3, r3, r2
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	0023      	movs	r3, r4
 800294a:	001c      	movs	r4, r3
 800294c:	18f2      	adds	r2, r6, r3
 800294e:	2308      	movs	r3, #8
 8002950:	469c      	mov	ip, r3
 8002952:	44bc      	add	ip, r7
 8002954:	4462      	add	r2, ip
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002962:	0e13      	lsrs	r3, r2, #24
 8002964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002966:	0212      	lsls	r2, r2, #8
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002972:	0213      	lsls	r3, r2, #8
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b55      	ldr	r3, [pc, #340]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002978:	0026      	movs	r6, r4
 800297a:	199b      	adds	r3, r3, r6
 800297c:	2208      	movs	r2, #8
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	00da      	lsls	r2, r3, #3
 8002988:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800298a:	199b      	adds	r3, r3, r6
 800298c:	2408      	movs	r4, #8
 800298e:	46a4      	mov	ip, r4
 8002990:	44bc      	add	ip, r7
 8002992:	4463      	add	r3, ip
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	189b      	adds	r3, r3, r2
 8002998:	0002      	movs	r2, r0
 800299a:	683c      	ldr	r4, [r7, #0]
 800299c:	4322      	orrs	r2, r4
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	000a      	movs	r2, r1
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6019      	str	r1, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80029b0:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80029b2:	2130      	movs	r1, #48	@ 0x30
 80029b4:	1853      	adds	r3, r2, r1
 80029b6:	2008      	movs	r0, #8
 80029b8:	4684      	mov	ip, r0
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	1852      	adds	r2, r2, r1
 80029c4:	2008      	movs	r0, #8
 80029c6:	4684      	mov	ip, r0
 80029c8:	44bc      	add	ip, r7
 80029ca:	4462      	add	r2, ip
 80029cc:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80029ce:	4a3f      	ldr	r2, [pc, #252]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80029d0:	1853      	adds	r3, r2, r1
 80029d2:	2008      	movs	r0, #8
 80029d4:	4684      	mov	ip, r0
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	1852      	adds	r2, r2, r1
 80029de:	2108      	movs	r1, #8
 80029e0:	468c      	mov	ip, r1
 80029e2:	44bc      	add	ip, r7
 80029e4:	4462      	add	r2, ip
 80029e6:	3301      	adds	r3, #1
 80029e8:	7013      	strb	r3, [r2, #0]
 80029ea:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80029ec:	2130      	movs	r1, #48	@ 0x30
 80029ee:	185b      	adds	r3, r3, r1
 80029f0:	2208      	movs	r2, #8
 80029f2:	18ba      	adds	r2, r7, r2
 80029f4:	189a      	adds	r2, r3, r2
 80029f6:	4e2b      	ldr	r6, [pc, #172]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 80029f8:	1873      	adds	r3, r6, r1
 80029fa:	2008      	movs	r0, #8
 80029fc:	4684      	mov	ip, r0
 80029fe:	44bc      	add	ip, r7
 8002a00:	4463      	add	r3, ip
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d200      	bcs.n	8002a0c <initEEPROMEmulated+0x32c>
 8002a0a:	e714      	b.n	8002836 <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 8002a0e:	000c      	movs	r4, r1
 8002a10:	185b      	adds	r3, r3, r1
 8002a12:	2208      	movs	r2, #8
 8002a14:	4694      	mov	ip, r2
 8002a16:	44bc      	add	ip, r7
 8002a18:	4463      	add	r3, ip
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fdfb 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8002a22:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 8002a24:	0022      	movs	r2, r4
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	2108      	movs	r1, #8
 8002a2a:	468c      	mov	ip, r1
 8002a2c:	44bc      	add	ip, r7
 8002a2e:	4463      	add	r3, ip
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1f18      	subs	r0, r3, #4
 8002a34:	0014      	movs	r4, r2
 8002a36:	1933      	adds	r3, r6, r4
 8002a38:	2208      	movs	r2, #8
 8002a3a:	4694      	mov	ip, r2
 8002a3c:	44bc      	add	ip, r7
 8002a3e:	4463      	add	r3, ip
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002a44:	191b      	adds	r3, r3, r4
 8002a46:	2108      	movs	r1, #8
 8002a48:	468c      	mov	ip, r1
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0019      	movs	r1, r3
 8002a52:	f7ff fe0f 	bl	8002674 <writeFLASH>
	if(!flagVar_){
 8002a56:	4914      	ldr	r1, [pc, #80]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 8002a58:	0020      	movs	r0, r4
 8002a5a:	180b      	adds	r3, r1, r0
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4694      	mov	ip, r2
 8002a60:	44bc      	add	ip, r7
 8002a62:	4463      	add	r3, ip
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	4053      	eors	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <initEEPROMEmulated+0x3a2>
		flagVar_ = 1;
 8002a70:	180b      	adds	r3, r1, r0
 8002a72:	2208      	movs	r2, #8
 8002a74:	18ba      	adds	r2, r7, r2
 8002a76:	189a      	adds	r2, r3, r2
 8002a78:	2301      	movs	r3, #1
 8002a7a:	7013      	strb	r3, [r2, #0]
		goto initEEPROM_V;
 8002a7c:	e68d      	b.n	800279a <initEEPROMEmulated+0xba>
		goto saveDataEEPROM_RAM;
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	e000      	b.n	8002a84 <initEEPROMEmulated+0x3a4>
	}

	// Save the Data in RAM
saveDataEEPROM_RAM:
 8002a82:	46c0      	nop			@ (mov r8, r8)

	for (uint8_t i = 0; i<128; i++)
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <initEEPROMEmulated+0x3f4>)
 8002a86:	2230      	movs	r2, #48	@ 0x30
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e043      	b.n	8002b20 <initEEPROMEmulated+0x440>
 8002a98:	fffffb20 	.word	0xfffffb20
 8002a9c:	0803f000 	.word	0x0803f000
 8002aa0:	000004a4 	.word	0x000004a4
 8002aa4:	000004a3 	.word	0x000004a3
 8002aa8:	0000049b 	.word	0x0000049b
 8002aac:	0000049a 	.word	0x0000049a
 8002ab0:	0803f004 	.word	0x0803f004
 8002ab4:	00000494 	.word	0x00000494
 8002ab8:	fffffbe8 	.word	0xfffffbe8
 8002abc:	0000049c 	.word	0x0000049c
 8002ac0:	0803f804 	.word	0x0803f804
 8002ac4:	0803f800 	.word	0x0803f800
 8002ac8:	fffffb58 	.word	0xfffffb58
 8002acc:	00000493 	.word	0x00000493
 8002ad0:	0803f810 	.word	0x0803f810
 8002ad4:	00000492 	.word	0x00000492
		reePlantilla[i] = (uint8_t) findLastValue((uint32_t) &eePlantilla[i]);
 8002ad8:	4c63      	ldr	r4, [pc, #396]	@ (8002c68 <initEEPROMEmulated+0x588>)
 8002ada:	2530      	movs	r5, #48	@ 0x30
 8002adc:	1963      	adds	r3, r4, r5
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	44bc      	add	ip, r7
 8002ae4:	4463      	add	r3, ip
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	4b60      	ldr	r3, [pc, #384]	@ (8002c6c <initEEPROMEmulated+0x58c>)
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 faa9 	bl	8003044 <findLastValue>
 8002af2:	0002      	movs	r2, r0
 8002af4:	1963      	adds	r3, r4, r5
 8002af6:	2108      	movs	r1, #8
 8002af8:	468c      	mov	ip, r1
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2d1      	uxtb	r1, r2
 8002b02:	4a5b      	ldr	r2, [pc, #364]	@ (8002c70 <initEEPROMEmulated+0x590>)
 8002b04:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<128; i++)
 8002b06:	1963      	adds	r3, r4, r5
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1963      	adds	r3, r4, r5
 8002b14:	2108      	movs	r1, #8
 8002b16:	468c      	mov	ip, r1
 8002b18:	44bc      	add	ip, r7
 8002b1a:	4463      	add	r3, ip
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <initEEPROMEmulated+0x588>)
 8002b22:	2230      	movs	r2, #48	@ 0x30
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	2208      	movs	r2, #8
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dad0      	bge.n	8002ad8 <initEEPROMEmulated+0x3f8>

	reevolt_div 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_div);
 8002b36:	4b4f      	ldr	r3, [pc, #316]	@ (8002c74 <initEEPROMEmulated+0x594>)
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fa83 	bl	8003044 <findLastValue>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <initEEPROMEmulated+0x598>)
 8002b44:	701a      	strb	r2, [r3, #0]
	reevolt_mul 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_mul);
 8002b46:	4b4d      	ldr	r3, [pc, #308]	@ (8002c7c <initEEPROMEmulated+0x59c>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fa7b 	bl	8003044 <findLastValue>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <initEEPROMEmulated+0x5a0>)
 8002b54:	701a      	strb	r2, [r3, #0]
	reef_voltaje 	= 	(uint8_t) findLastValue((uint32_t) &eef_voltaje);
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <initEEPROMEmulated+0x5a4>)
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 fa73 	bl	8003044 <findLastValue>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b49      	ldr	r3, [pc, #292]	@ (8002c88 <initEEPROMEmulated+0x5a8>)
 8002b64:	701a      	strb	r2, [r3, #0]
	reeEstado1 		= 	(uint8_t) findLastValue((uint32_t) &eeEstado1);
 8002b66:	4b49      	ldr	r3, [pc, #292]	@ (8002c8c <initEEPROMEmulated+0x5ac>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fa6b 	bl	8003044 <findLastValue>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <initEEPROMEmulated+0x5b0>)
 8002b74:	701a      	strb	r2, [r3, #0]
	reeTimeUnix1 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix1);
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <initEEPROMEmulated+0x5b4>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fa63 	bl	8003044 <findLastValue>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <initEEPROMEmulated+0x5b8>)
 8002b84:	701a      	strb	r2, [r3, #0]
	reeTimeUnix2 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix2);
 8002b86:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <initEEPROMEmulated+0x5bc>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fa5b 	bl	8003044 <findLastValue>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <initEEPROMEmulated+0x5c0>)
 8002b94:	701a      	strb	r2, [r3, #0]
	reeTimeUnix3 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix3);
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <initEEPROMEmulated+0x5c4>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fa53 	bl	8003044 <findLastValue>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <initEEPROMEmulated+0x5c8>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	reeTimeUnix4 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix4);
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <initEEPROMEmulated+0x5cc>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa4b 	bl	8003044 <findLastValue>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <initEEPROMEmulated+0x5d0>)
 8002bb4:	701a      	strb	r2, [r3, #0]
	reeLat1 		= 	(uint8_t) findLastValue((uint32_t) &eeLat1);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <initEEPROMEmulated+0x5d4>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa43 	bl	8003044 <findLastValue>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb8 <initEEPROMEmulated+0x5d8>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	reeLat2 		= 	(uint8_t) findLastValue((uint32_t) &eeLat2);
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <initEEPROMEmulated+0x5dc>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa3b 	bl	8003044 <findLastValue>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc0 <initEEPROMEmulated+0x5e0>)
 8002bd4:	701a      	strb	r2, [r3, #0]
	reeLat3 		= 	(uint8_t) findLastValue((uint32_t) &eeLat3);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <initEEPROMEmulated+0x5e4>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fa33 	bl	8003044 <findLastValue>
 8002bde:	0003      	movs	r3, r0
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <initEEPROMEmulated+0x5e8>)
 8002be4:	701a      	strb	r2, [r3, #0]
	reeLat4 		= 	(uint8_t) findLastValue((uint32_t) &eeLat4);
 8002be6:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <initEEPROMEmulated+0x5ec>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fa2b 	bl	8003044 <findLastValue>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <initEEPROMEmulated+0x5f0>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	reeLong1 		= 	(uint8_t) findLastValue((uint32_t) &eeLong1);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <initEEPROMEmulated+0x5f4>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fa23 	bl	8003044 <findLastValue>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <initEEPROMEmulated+0x5f8>)
 8002c04:	701a      	strb	r2, [r3, #0]
	reeLong2 		=	(uint8_t) findLastValue((uint32_t) &eeLong2);
 8002c06:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <initEEPROMEmulated+0x5fc>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 fa1b 	bl	8003044 <findLastValue>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <initEEPROMEmulated+0x600>)
 8002c14:	701a      	strb	r2, [r3, #0]
	reeLong3 		= 	(uint8_t) findLastValue((uint32_t) &eeLong3);
 8002c16:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <initEEPROMEmulated+0x604>)
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fa13 	bl	8003044 <findLastValue>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <initEEPROMEmulated+0x608>)
 8002c24:	701a      	strb	r2, [r3, #0]
	reeLong4 		= 	(uint8_t) findLastValue((uint32_t) &eeLong4);
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <initEEPROMEmulated+0x60c>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fa0b 	bl	8003044 <findLastValue>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <initEEPROMEmulated+0x610>)
 8002c34:	701a      	strb	r2, [r3, #0]
	reeCntRegDATA 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegDATA);
 8002c36:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <initEEPROMEmulated+0x614>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fa03 	bl	8003044 <findLastValue>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <initEEPROMEmulated+0x618>)
 8002c44:	801a      	strh	r2, [r3, #0]
	reeCntRegEVENT 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegEVENT);
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <initEEPROMEmulated+0x61c>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f9fb 	bl	8003044 <findLastValue>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b2b      	ldr	r3, [pc, #172]	@ (8002d00 <initEEPROMEmulated+0x620>)
 8002c54:	801a      	strh	r2, [r3, #0]

}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	239c      	movs	r3, #156	@ 0x9c
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	449d      	add	sp, r3
 8002c60:	bc80      	pop	{r7}
 8002c62:	46b8      	mov	r8, r7
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	00000492 	.word	0x00000492
 8002c6c:	0803f000 	.word	0x0803f000
 8002c70:	20000c9c 	.word	0x20000c9c
 8002c74:	0803f800 	.word	0x0803f800
 8002c78:	200001b8 	.word	0x200001b8
 8002c7c:	0803f801 	.word	0x0803f801
 8002c80:	200001b9 	.word	0x200001b9
 8002c84:	0803f802 	.word	0x0803f802
 8002c88:	20000d1c 	.word	0x20000d1c
 8002c8c:	0803f803 	.word	0x0803f803
 8002c90:	200001ba 	.word	0x200001ba
 8002c94:	0803f804 	.word	0x0803f804
 8002c98:	20000d1d 	.word	0x20000d1d
 8002c9c:	0803f805 	.word	0x0803f805
 8002ca0:	20000d1e 	.word	0x20000d1e
 8002ca4:	0803f806 	.word	0x0803f806
 8002ca8:	20000d1f 	.word	0x20000d1f
 8002cac:	0803f807 	.word	0x0803f807
 8002cb0:	20000d20 	.word	0x20000d20
 8002cb4:	0803f808 	.word	0x0803f808
 8002cb8:	200001bb 	.word	0x200001bb
 8002cbc:	0803f809 	.word	0x0803f809
 8002cc0:	200001bc 	.word	0x200001bc
 8002cc4:	0803f80a 	.word	0x0803f80a
 8002cc8:	200001bd 	.word	0x200001bd
 8002ccc:	0803f80b 	.word	0x0803f80b
 8002cd0:	200001be 	.word	0x200001be
 8002cd4:	0803f80c 	.word	0x0803f80c
 8002cd8:	200001bf 	.word	0x200001bf
 8002cdc:	0803f80d 	.word	0x0803f80d
 8002ce0:	200001c0 	.word	0x200001c0
 8002ce4:	0803f80e 	.word	0x0803f80e
 8002ce8:	200001c1 	.word	0x200001c1
 8002cec:	0803f80f 	.word	0x0803f80f
 8002cf0:	200001c2 	.word	0x200001c2
 8002cf4:	0803f810 	.word	0x0803f810
 8002cf8:	20000d22 	.word	0x20000d22
 8002cfc:	0803f812 	.word	0x0803f812
 8002d00:	20000d24 	.word	0x20000d24

08002d04 <restartFlashMemory>:
/**
  * @brief  Restart Flash Memory
  * @param
  * @retval
  */
void restartFlashMemory(void){
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	4cc3      	ldr	r4, [pc, #780]	@ (8003014 <restartFlashMemory+0x310>)
 8002d08:	44a5      	add	sp, r4
 8002d0a:	af00      	add	r7, sp, #0
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002d0c:	4bc2      	ldr	r3, [pc, #776]	@ (8003018 <restartFlashMemory+0x314>)
 8002d0e:	2693      	movs	r6, #147	@ 0x93
 8002d10:	00f6      	lsls	r6, r6, #3
 8002d12:	199b      	adds	r3, r3, r6
 8002d14:	2258      	movs	r2, #88	@ 0x58
 8002d16:	4694      	mov	ip, r2
 8002d18:	44bc      	add	ip, r7
 8002d1a:	4463      	add	r3, ip
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	001a      	movs	r2, r3
 8002d24:	2100      	movs	r1, #0
 8002d26:	f019 f813 	bl	801bd50 <memset>
	uint64_t arrayDataV_[sizeEEPROM_V] = {0};
 8002d2a:	4bbc      	ldr	r3, [pc, #752]	@ (800301c <restartFlashMemory+0x318>)
 8002d2c:	199b      	adds	r3, r3, r6
 8002d2e:	2258      	movs	r2, #88	@ 0x58
 8002d30:	4694      	mov	ip, r2
 8002d32:	44bc      	add	ip, r7
 8002d34:	4463      	add	r3, ip
 8002d36:	0018      	movs	r0, r3
 8002d38:	2390      	movs	r3, #144	@ 0x90
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f019 f807 	bl	801bd50 <memset>

	uint8_t * varInit = (uint8_t *) Page_126;
 8002d42:	4bb7      	ldr	r3, [pc, #732]	@ (8003020 <restartFlashMemory+0x31c>)
 8002d44:	4ab7      	ldr	r2, [pc, #732]	@ (8003024 <restartFlashMemory+0x320>)
 8002d46:	2158      	movs	r1, #88	@ 0x58
 8002d48:	1852      	adds	r2, r2, r1
 8002d4a:	19d2      	adds	r2, r2, r7
 8002d4c:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002d4e:	4bb6      	ldr	r3, [pc, #728]	@ (8003028 <restartFlashMemory+0x324>)
 8002d50:	2258      	movs	r2, #88	@ 0x58
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19da      	adds	r2, r3, r7
 8002d56:	2300      	movs	r3, #0
 8002d58:	7013      	strb	r3, [r2, #0]
 8002d5a:	e030      	b.n	8002dbe <restartFlashMemory+0xba>
		arrayDataP_[i] = ((uint64_t )(varInit) << 32);
 8002d5c:	48b1      	ldr	r0, [pc, #708]	@ (8003024 <restartFlashMemory+0x320>)
 8002d5e:	2358      	movs	r3, #88	@ 0x58
 8002d60:	18c3      	adds	r3, r0, r3
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d68:	17db      	asrs	r3, r3, #31
 8002d6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d6c:	4eae      	ldr	r6, [pc, #696]	@ (8003028 <restartFlashMemory+0x324>)
 8002d6e:	2358      	movs	r3, #88	@ 0x58
 8002d70:	18f3      	adds	r3, r6, r3
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	7819      	ldrb	r1, [r3, #0]
 8002d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d78:	001b      	movs	r3, r3
 8002d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d80:	4ba5      	ldr	r3, [pc, #660]	@ (8003018 <restartFlashMemory+0x314>)
 8002d82:	2293      	movs	r2, #147	@ 0x93
 8002d84:	00d2      	lsls	r2, r2, #3
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	2258      	movs	r2, #88	@ 0x58
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	189a      	adds	r2, r3, r2
 8002d8e:	00cb      	lsls	r3, r1, #3
 8002d90:	18d3      	adds	r3, r2, r3
 8002d92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d96:	6019      	str	r1, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
		varInit ++;
 8002d9a:	2358      	movs	r3, #88	@ 0x58
 8002d9c:	18c3      	adds	r3, r0, r3
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	2258      	movs	r2, #88	@ 0x58
 8002da6:	1882      	adds	r2, r0, r2
 8002da8:	19d2      	adds	r2, r2, r7
 8002daa:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002dac:	2358      	movs	r3, #88	@ 0x58
 8002dae:	18f3      	adds	r3, r6, r3
 8002db0:	19db      	adds	r3, r3, r7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2258      	movs	r2, #88	@ 0x58
 8002db6:	18b2      	adds	r2, r6, r2
 8002db8:	19d2      	adds	r2, r2, r7
 8002dba:	3301      	adds	r3, #1
 8002dbc:	7013      	strb	r3, [r2, #0]
 8002dbe:	4b9a      	ldr	r3, [pc, #616]	@ (8003028 <restartFlashMemory+0x324>)
 8002dc0:	2258      	movs	r2, #88	@ 0x58
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	19db      	adds	r3, r3, r7
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dac6      	bge.n	8002d5c <restartFlashMemory+0x58>
	}

	arrayDataP_[eedato_seg1] |= 0xAA;
 8002dce:	4b92      	ldr	r3, [pc, #584]	@ (8003018 <restartFlashMemory+0x314>)
 8002dd0:	2093      	movs	r0, #147	@ 0x93
 8002dd2:	00c0      	lsls	r0, r0, #3
 8002dd4:	181b      	adds	r3, r3, r0
 8002dd6:	2258      	movs	r2, #88	@ 0x58
 8002dd8:	4694      	mov	ip, r2
 8002dda:	44bc      	add	ip, r7
 8002ddc:	4463      	add	r3, ip
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	21aa      	movs	r1, #170	@ 0xaa
 8002de4:	4311      	orrs	r1, r2
 8002de6:	000c      	movs	r4, r1
 8002de8:	2100      	movs	r1, #0
 8002dea:	4319      	orrs	r1, r3
 8002dec:	000d      	movs	r5, r1
 8002dee:	4b8a      	ldr	r3, [pc, #552]	@ (8003018 <restartFlashMemory+0x314>)
 8002df0:	181b      	adds	r3, r3, r0
 8002df2:	2258      	movs	r2, #88	@ 0x58
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	601c      	str	r4, [r3, #0]
 8002dfc:	605d      	str	r5, [r3, #4]
	arrayDataP_[eedato_seg2] |= 0x66;
 8002dfe:	4b86      	ldr	r3, [pc, #536]	@ (8003018 <restartFlashMemory+0x314>)
 8002e00:	0005      	movs	r5, r0
 8002e02:	181b      	adds	r3, r3, r0
 8002e04:	2258      	movs	r2, #88	@ 0x58
 8002e06:	18ba      	adds	r2, r7, r2
 8002e08:	189a      	adds	r2, r3, r2
 8002e0a:	2382      	movs	r3, #130	@ 0x82
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2166      	movs	r1, #102	@ 0x66
 8002e16:	4311      	orrs	r1, r2
 8002e18:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4319      	orrs	r1, r3
 8002e1e:	6479      	str	r1, [r7, #68]	@ 0x44
 8002e20:	4b7d      	ldr	r3, [pc, #500]	@ (8003018 <restartFlashMemory+0x314>)
 8002e22:	195b      	adds	r3, r3, r5
 8002e24:	2258      	movs	r2, #88	@ 0x58
 8002e26:	18ba      	adds	r2, r7, r2
 8002e28:	189a      	adds	r2, r3, r2
 8002e2a:	2382      	movs	r3, #130	@ 0x82
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e34:	6019      	str	r1, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
	arrayDataP_[eedato_seg3] |= 0xCC;
 8002e38:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <restartFlashMemory+0x314>)
 8002e3a:	195b      	adds	r3, r3, r5
 8002e3c:	2258      	movs	r2, #88	@ 0x58
 8002e3e:	18ba      	adds	r2, r7, r2
 8002e40:	189a      	adds	r2, r3, r2
 8002e42:	23fe      	movs	r3, #254	@ 0xfe
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	18d3      	adds	r3, r2, r3
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	21cc      	movs	r1, #204	@ 0xcc
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e52:	2100      	movs	r1, #0
 8002e54:	4319      	orrs	r1, r3
 8002e56:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <restartFlashMemory+0x314>)
 8002e5a:	195b      	adds	r3, r3, r5
 8002e5c:	2258      	movs	r2, #88	@ 0x58
 8002e5e:	18ba      	adds	r2, r7, r2
 8002e60:	189a      	adds	r2, r3, r2
 8002e62:	23fe      	movs	r3, #254	@ 0xfe
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e6c:	6019      	str	r1, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion1] |= (uint32_t) versionFirm1;
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <restartFlashMemory+0x314>)
 8002e72:	195b      	adds	r3, r3, r5
 8002e74:	2258      	movs	r2, #88	@ 0x58
 8002e76:	18ba      	adds	r2, r7, r2
 8002e78:	189a      	adds	r2, r3, r2
 8002e7a:	23f6      	movs	r3, #246	@ 0xf6
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	18d3      	adds	r3, r2, r3
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	4b69      	ldr	r3, [pc, #420]	@ (800302c <restartFlashMemory+0x328>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002e92:	001a      	movs	r2, r3
 8002e94:	4302      	orrs	r2, r0
 8002e96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e98:	0023      	movs	r3, r4
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003018 <restartFlashMemory+0x314>)
 8002ea0:	002c      	movs	r4, r5
 8002ea2:	191b      	adds	r3, r3, r4
 8002ea4:	2258      	movs	r2, #88	@ 0x58
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	189a      	adds	r2, r3, r2
 8002eaa:	23f6      	movs	r3, #246	@ 0xf6
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion2] |= (uint32_t) versionFirm2;
 8002eb8:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <restartFlashMemory+0x314>)
 8002eba:	191b      	adds	r3, r3, r4
 8002ebc:	2258      	movs	r2, #88	@ 0x58
 8002ebe:	18ba      	adds	r2, r7, r2
 8002ec0:	189a      	adds	r2, r3, r2
 8002ec2:	23f8      	movs	r3, #248	@ 0xf8
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	18d3      	adds	r3, r2, r3
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4958      	ldr	r1, [pc, #352]	@ (8003030 <restartFlashMemory+0x32c>)
 8002ece:	7809      	ldrb	r1, [r1, #0]
 8002ed0:	6239      	str	r1, [r7, #32]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ed6:	6a38      	ldr	r0, [r7, #32]
 8002ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eda:	0005      	movs	r5, r0
 8002edc:	4315      	orrs	r5, r2
 8002ede:	61bd      	str	r5, [r7, #24]
 8002ee0:	4319      	orrs	r1, r3
 8002ee2:	61f9      	str	r1, [r7, #28]
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <restartFlashMemory+0x314>)
 8002ee6:	191b      	adds	r3, r3, r4
 8002ee8:	2258      	movs	r2, #88	@ 0x58
 8002eea:	18ba      	adds	r2, r7, r2
 8002eec:	189a      	adds	r2, r3, r2
 8002eee:	23f8      	movs	r3, #248	@ 0xf8
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	6019      	str	r1, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]

	varInit = (uint8_t *) Page_127;
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <restartFlashMemory+0x330>)
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <restartFlashMemory+0x320>)
 8002f00:	2158      	movs	r1, #88	@ 0x58
 8002f02:	1852      	adds	r2, r2, r1
 8002f04:	19d2      	adds	r2, r2, r7
 8002f06:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <restartFlashMemory+0x334>)
 8002f0a:	2258      	movs	r2, #88	@ 0x58
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e05a      	b.n	8002fcc <restartFlashMemory+0x2c8>
		arrayDataV_[i] |= ((uint64_t )(varInit) << 32);
 8002f16:	4c48      	ldr	r4, [pc, #288]	@ (8003038 <restartFlashMemory+0x334>)
 8002f18:	2358      	movs	r3, #88	@ 0x58
 8002f1a:	18e3      	adds	r3, r4, r3
 8002f1c:	19db      	adds	r3, r3, r7
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <restartFlashMemory+0x318>)
 8002f22:	2693      	movs	r6, #147	@ 0x93
 8002f24:	00f6      	lsls	r6, r6, #3
 8002f26:	1992      	adds	r2, r2, r6
 8002f28:	2158      	movs	r1, #88	@ 0x58
 8002f2a:	468c      	mov	ip, r1
 8002f2c:	44bc      	add	ip, r7
 8002f2e:	4462      	add	r2, ip
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	483a      	ldr	r0, [pc, #232]	@ (8003024 <restartFlashMemory+0x320>)
 8002f3a:	2158      	movs	r1, #88	@ 0x58
 8002f3c:	1841      	adds	r1, r0, r1
 8002f3e:	19c9      	adds	r1, r1, r7
 8002f40:	6809      	ldr	r1, [r1, #0]
 8002f42:	6139      	str	r1, [r7, #16]
 8002f44:	17c9      	asrs	r1, r1, #31
 8002f46:	6179      	str	r1, [r7, #20]
 8002f48:	6939      	ldr	r1, [r7, #16]
 8002f4a:	0009      	movs	r1, r1
 8002f4c:	60f9      	str	r1, [r7, #12]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	2158      	movs	r1, #88	@ 0x58
 8002f54:	1861      	adds	r1, r4, r1
 8002f56:	19c9      	adds	r1, r1, r7
 8002f58:	7809      	ldrb	r1, [r1, #0]
 8002f5a:	468c      	mov	ip, r1
 8002f5c:	68bc      	ldr	r4, [r7, #8]
 8002f5e:	68fd      	ldr	r5, [r7, #12]
 8002f60:	0021      	movs	r1, r4
 8002f62:	4311      	orrs	r1, r2
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	0029      	movs	r1, r5
 8002f68:	4319      	orrs	r1, r3
 8002f6a:	6079      	str	r1, [r7, #4]
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800301c <restartFlashMemory+0x318>)
 8002f6e:	199b      	adds	r3, r3, r6
 8002f70:	2258      	movs	r2, #88	@ 0x58
 8002f72:	18ba      	adds	r2, r7, r2
 8002f74:	189a      	adds	r2, r3, r2
 8002f76:	4663      	mov	r3, ip
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	18d3      	adds	r3, r2, r3
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA))){
 8002f84:	2358      	movs	r3, #88	@ 0x58
 8002f86:	18c3      	adds	r3, r0, r3
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <restartFlashMemory+0x338>)
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d308      	bcc.n	8002fa4 <restartFlashMemory+0x2a0>
			varInit++;
 8002f92:	2358      	movs	r3, #88	@ 0x58
 8002f94:	18c3      	adds	r3, r0, r3
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	2258      	movs	r2, #88	@ 0x58
 8002f9e:	1882      	adds	r2, r0, r2
 8002fa0:	19d2      	adds	r2, r2, r7
 8002fa2:	6013      	str	r3, [r2, #0]
		}
		varInit++;
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <restartFlashMemory+0x320>)
 8002fa6:	2358      	movs	r3, #88	@ 0x58
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	2158      	movs	r1, #88	@ 0x58
 8002fb2:	1852      	adds	r2, r2, r1
 8002fb4:	19d2      	adds	r2, r2, r7
 8002fb6:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002fb8:	491f      	ldr	r1, [pc, #124]	@ (8003038 <restartFlashMemory+0x334>)
 8002fba:	2358      	movs	r3, #88	@ 0x58
 8002fbc:	18cb      	adds	r3, r1, r3
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	2358      	movs	r3, #88	@ 0x58
 8002fc4:	18cb      	adds	r3, r1, r3
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	3201      	adds	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <restartFlashMemory+0x334>)
 8002fce:	2258      	movs	r2, #88	@ 0x58
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b11      	cmp	r3, #17
 8002fd8:	d99d      	bls.n	8002f16 <restartFlashMemory+0x212>
	}
	erasePage(126);
 8002fda:	207e      	movs	r0, #126	@ 0x7e
 8002fdc:	f7ff fb1c 	bl	8002618 <erasePage>
	erasePage(127);
 8002fe0:	207f      	movs	r0, #127	@ 0x7f
 8002fe2:	f7ff fb19 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Page_126),&arrayDataP_[0],sizeEEPROM_P);
 8002fe6:	2390      	movs	r3, #144	@ 0x90
 8002fe8:	2258      	movs	r2, #88	@ 0x58
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	480c      	ldr	r0, [pc, #48]	@ (8003020 <restartFlashMemory+0x31c>)
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	f7ff fb3e 	bl	8002674 <writeFLASH>
	writeFLASH((uint64_t *) (Page_127),&arrayDataV_[0],sizeEEPROM_V);
 8002ff8:	2358      	movs	r3, #88	@ 0x58
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	480d      	ldr	r0, [pc, #52]	@ (8003034 <restartFlashMemory+0x330>)
 8002ffe:	2212      	movs	r2, #18
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff fb37 	bl	8002674 <writeFLASH>
	initEEPROMEmulated();
 8003006:	f7ff fb6b 	bl	80026e0 <initEEPROMEmulated>
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <restartFlashMemory+0x33c>)
 8003010:	449d      	add	sp, r3
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003014:	fffffb0c 	.word	0xfffffb0c
 8003018:	fffffbf8 	.word	0xfffffbf8
 800301c:	fffffb68 	.word	0xfffffb68
 8003020:	0803f000 	.word	0x0803f000
 8003024:	00000494 	.word	0x00000494
 8003028:	00000493 	.word	0x00000493
 800302c:	0801e7f0 	.word	0x0801e7f0
 8003030:	0801e7f1 	.word	0x0801e7f1
 8003034:	0803f800 	.word	0x0803f800
 8003038:	00000492 	.word	0x00000492
 800303c:	0803f810 	.word	0x0803f810
 8003040:	000004f4 	.word	0x000004f4

08003044 <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t AddressValue_){
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	uint32_t * AddressPage_ = (uint32_t *) getAddressPage(AddressValue_);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff face 	bl	80025f0 <getAddressPage>
 8003054:	0002      	movs	r2, r0
 8003056:	000b      	movs	r3, r1
 8003058:	0013      	movs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <findLastValue+0x68>)
 8003060:	4694      	mov	ip, r2
 8003062:	4463      	add	r3, ip
 8003064:	60fb      	str	r3, [r7, #12]
	if(AddressPage_ < ((uint32_t *) 0x803F000) || AddressPage_ >= ((uint32_t *) 0x8040000)){ // Invalid Direction
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a11      	ldr	r2, [pc, #68]	@ (80030b0 <findLastValue+0x6c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d903      	bls.n	8003076 <findLastValue+0x32>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <findLastValue+0x70>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d90e      	bls.n	8003094 <findLastValue+0x50>
		return 0xFFFFFFFF;
 8003076:	2301      	movs	r3, #1
 8003078:	425b      	negs	r3, r3
 800307a:	e013      	b.n	80030a4 <findLastValue+0x60>
	}
	while(*pointValuex != AddressValue_){
		pointValuex -= 2;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b08      	subs	r3, #8
 8003080:	60fb      	str	r3, [r7, #12]
		if(pointValuex < AddressPage_){
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d204      	bcs.n	8003094 <findLastValue+0x50>
			restartFlashMemory();
 800308a:	f7ff fe3b 	bl	8002d04 <restartFlashMemory>
			return 0xFFFFFFFF;
 800308e:	2301      	movs	r3, #1
 8003090:	425b      	negs	r3, r3
 8003092:	e007      	b.n	80030a4 <findLastValue+0x60>
	while(*pointValuex != AddressValue_){
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d1ee      	bne.n	800307c <findLastValue+0x38>
		}
	}
	return *(pointValuex-1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b04      	subs	r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	000007fc 	.word	0x000007fc
 80030b0:	0803efff 	.word	0x0803efff
 80030b4:	0803ffff 	.word	0x0803ffff

080030b8 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	b08d      	sub	sp, #52	@ 0x34
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6278      	str	r0, [r7, #36]	@ 0x24
 80030c0:	6239      	str	r1, [r7, #32]
 80030c2:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 80030c4:	2200      	movs	r2, #0
 80030c6:	2300      	movs	r3, #0
 80030c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	001b      	movs	r3, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	0006      	movs	r6, r0
 80030f8:	4316      	orrs	r6, r2
 80030fa:	0034      	movs	r4, r6
 80030fc:	4319      	orrs	r1, r3
 80030fe:	000d      	movs	r5, r1
 8003100:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003102:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8003104:	2310      	movs	r3, #16
 8003106:	2218      	movs	r2, #24
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19d9      	adds	r1, r3, r7
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	2201      	movs	r2, #1
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff faaf 	bl	8002674 <writeFLASH>
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b00d      	add	sp, #52	@ 0x34
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800311e <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 800311e:	b5b0      	push	{r4, r5, r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	22ff      	movs	r2, #255	@ 0xff
 800312a:	00d2      	lsls	r2, r2, #3
 800312c:	4694      	mov	ip, r2
 800312e:	4463      	add	r3, ip
 8003130:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8003132:	e002      	b.n	800313a <currentlyPoint+0x1c>
		Pointx --;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b08      	subs	r3, #8
 8003138:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	1c51      	adds	r1, r2, #1
 8003142:	d101      	bne.n	8003148 <currentlyPoint+0x2a>
 8003144:	3301      	adds	r3, #1
 8003146:	d0f5      	beq.n	8003134 <currentlyPoint+0x16>
	}
	Pointx++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3308      	adds	r3, #8
 800314c:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	001c      	movs	r4, r3
 8003152:	17db      	asrs	r3, r3, #31
 8003154:	001d      	movs	r5, r3
 8003156:	0022      	movs	r2, r4
 8003158:	002b      	movs	r3, r5
}
 800315a:	0010      	movs	r0, r2
 800315c:	0019      	movs	r1, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bdb0      	pop	{r4, r5, r7, pc}

08003164 <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint32_t AddressValue_, uint32_t Value_){
 8003164:	b5b0      	push	{r4, r5, r7, lr}
 8003166:	b08c      	sub	sp, #48	@ 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	_Bool flag_Page127 = 1;
 800316e:	242f      	movs	r4, #47	@ 0x2f
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8003176:	252e      	movs	r5, #46	@ 0x2e
 8003178:	197b      	adds	r3, r7, r5
 800317a:	2212      	movs	r2, #18
 800317c:	701a      	strb	r2, [r3, #0]
	uint64_t * AddressPage_ = (uint64_t *) getAddressPage(AddressValue_);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff fa35 	bl	80025f0 <getAddressPage>
 8003186:	0002      	movs	r2, r0
 8003188:	000b      	movs	r3, r1
 800318a:	0013      	movs	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]
	if(AddressPage_ == (uint64_t *) (Page_126)){	// Is here Page 126?
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4a55      	ldr	r2, [pc, #340]	@ (80032e8 <FlashManager+0x184>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d105      	bne.n	80031a2 <FlashManager+0x3e>
		flag_Page127 = 0;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 800319c:	197b      	adds	r3, r7, r5
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;									// Start Page
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	61bb      	str	r3, [r7, #24]
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);		// Current Point
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff ffb8 	bl	800311e <currentlyPoint>
 80031ae:	0002      	movs	r2, r0
 80031b0:	000b      	movs	r3, r1
 80031b2:	0013      	movs	r3, r2
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;			// End Page
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	22ff      	movs	r2, #255	@ 0xff
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	4694      	mov	ip, r2
 80031be:	4463      	add	r3, ip
 80031c0:	617b      	str	r3, [r7, #20]

	if((managerPoint - 1)== managerPointEnd){	// Is here the End Page?
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	3b08      	subs	r3, #8
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d000      	beq.n	80031ce <FlashManager+0x6a>
 80031cc:	e082      	b.n	80032d4 <FlashManager+0x170>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 80031ce:	232e      	movs	r3, #46	@ 0x2e
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f018 fce7 	bl	801bba8 <malloc>
 80031da:	0003      	movs	r3, r0
 80031dc:	613b      	str	r3, [r7, #16]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 80031e2:	2323      	movs	r3, #35	@ 0x23
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e023      	b.n	8003234 <FlashManager+0xd0>
			arrayTemp[i] = findLastValue((uint32_t) varInit);
 80031ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ee:	2323      	movs	r3, #35	@ 0x23
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	18d4      	adds	r4, r2, r3
 80031fa:	0008      	movs	r0, r1
 80031fc:	f7ff ff22 	bl	8003044 <findLastValue>
 8003200:	0003      	movs	r3, r0
 8003202:	6023      	str	r3, [r4, #0]
			varInit++;
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <FlashManager+0x188>)
 800320e:	429a      	cmp	r2, r3
 8003210:	419b      	sbcs	r3, r3
 8003212:	425b      	negs	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	001a      	movs	r2, r3
 8003218:	232f      	movs	r3, #47	@ 0x2f
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	4013      	ands	r3, r2
 8003220:	d002      	beq.n	8003228 <FlashManager+0xc4>
				varInit++;
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	3301      	adds	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8003228:	2123      	movs	r1, #35	@ 0x23
 800322a:	187b      	adds	r3, r7, r1
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	187b      	adds	r3, r7, r1
 8003230:	3201      	adds	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	2323      	movs	r3, #35	@ 0x23
 8003236:	18fa      	adds	r2, r7, r3
 8003238:	232e      	movs	r3, #46	@ 0x2e
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d3d3      	bcc.n	80031ec <FlashManager+0x88>
			}
		}
		// Erase the Page
		//uint32_t VarAux_= (((uint32_t) ) - 0x8000000);
		uint8_t numberPage = getNumberPage((uint32_t)AddressPage_); 		// Number the Page
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	250f      	movs	r5, #15
 8003248:	197c      	adds	r4, r7, r5
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff f9be 	bl	80025cc <getNumberPage>
 8003250:	0003      	movs	r3, r0
 8003252:	7023      	strb	r3, [r4, #0]

		erasePage(numberPage);
 8003254:	197b      	adds	r3, r7, r5
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff f9dd 	bl	8002618 <erasePage>

		// Return the begin Page in current Point

		managerPoint = AddressPage_;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
		varInit =  (uint8_t *) AddressPage_;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

		// Write the new Values and its Addresses
		for(uint8_t i=0; i<size_; i++){
 8003266:	2322      	movs	r3, #34	@ 0x22
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e01e      	b.n	80032ae <FlashManager+0x14a>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8003270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003272:	2322      	movs	r3, #34	@ 0x22
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff ff18 	bl	80030b8 <pushAddressData>
			varInit++;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	3301      	adds	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 800328e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <FlashManager+0x188>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d902      	bls.n	800329c <FlashManager+0x138>
				varInit++;
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	3301      	adds	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			managerPoint ++;
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	3308      	adds	r3, #8
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(uint8_t i=0; i<size_; i++){
 80032a2:	2122      	movs	r1, #34	@ 0x22
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	3201      	adds	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	2322      	movs	r3, #34	@ 0x22
 80032b0:	18fa      	adds	r2, r7, r3
 80032b2:	232e      	movs	r3, #46	@ 0x2e
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3d8      	bcc.n	8003270 <FlashManager+0x10c>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fef7 	bl	80030b8 <pushAddressData>
		free(arrayTemp);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f018 fc75 	bl	801bbbc <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 80032d2:	e005      	b.n	80032e0 <FlashManager+0x17c>
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff feec 	bl	80030b8 <pushAddressData>
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b00c      	add	sp, #48	@ 0x30
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	0803f000 	.word	0x0803f000
 80032ec:	0803f810 	.word	0x0803f810

080032f0 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 80032f6:	1cfb      	adds	r3, r7, #3
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 80032fc:	1cbb      	adds	r3, r7, #2
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8003302:	003b      	movs	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8003308:	2300      	movs	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e0d8      	b.n	80034c0 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3302      	adds	r3, #2
 8003312:	4a70      	ldr	r2, [pc, #448]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	2b30      	cmp	r3, #48	@ 0x30
 8003318:	d102      	bne.n	8003320 <MacStringtoHex+0x30>
			tempregister = 0x00;
 800331a:	1cfb      	adds	r3, r7, #3
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3302      	adds	r3, #2
 8003324:	4a6b      	ldr	r2, [pc, #428]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	2b31      	cmp	r3, #49	@ 0x31
 800332a:	d102      	bne.n	8003332 <MacStringtoHex+0x42>
			tempregister = 0x01;
 800332c:	1cfb      	adds	r3, r7, #3
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3302      	adds	r3, #2
 8003336:	4a67      	ldr	r2, [pc, #412]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	2b32      	cmp	r3, #50	@ 0x32
 800333c:	d102      	bne.n	8003344 <MacStringtoHex+0x54>
			tempregister = 0x02;
 800333e:	1cfb      	adds	r3, r7, #3
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3302      	adds	r3, #2
 8003348:	4a62      	ldr	r2, [pc, #392]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	2b33      	cmp	r3, #51	@ 0x33
 800334e:	d102      	bne.n	8003356 <MacStringtoHex+0x66>
			tempregister = 0x03;
 8003350:	1cfb      	adds	r3, r7, #3
 8003352:	2203      	movs	r2, #3
 8003354:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3302      	adds	r3, #2
 800335a:	4a5e      	ldr	r2, [pc, #376]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	2b34      	cmp	r3, #52	@ 0x34
 8003360:	d102      	bne.n	8003368 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8003362:	1cfb      	adds	r3, r7, #3
 8003364:	2204      	movs	r2, #4
 8003366:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3302      	adds	r3, #2
 800336c:	4a59      	ldr	r2, [pc, #356]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	2b35      	cmp	r3, #53	@ 0x35
 8003372:	d102      	bne.n	800337a <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8003374:	1cfb      	adds	r3, r7, #3
 8003376:	2205      	movs	r2, #5
 8003378:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3302      	adds	r3, #2
 800337e:	4a55      	ldr	r2, [pc, #340]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	2b36      	cmp	r3, #54	@ 0x36
 8003384:	d102      	bne.n	800338c <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8003386:	1cfb      	adds	r3, r7, #3
 8003388:	2206      	movs	r2, #6
 800338a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3302      	adds	r3, #2
 8003390:	4a50      	ldr	r2, [pc, #320]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	2b37      	cmp	r3, #55	@ 0x37
 8003396:	d102      	bne.n	800339e <MacStringtoHex+0xae>
			tempregister = 0x07;
 8003398:	1cfb      	adds	r3, r7, #3
 800339a:	2207      	movs	r2, #7
 800339c:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3302      	adds	r3, #2
 80033a2:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	2b38      	cmp	r3, #56	@ 0x38
 80033a8:	d102      	bne.n	80033b0 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 80033aa:	1cfb      	adds	r3, r7, #3
 80033ac:	2208      	movs	r2, #8
 80033ae:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3302      	adds	r3, #2
 80033b4:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	2b39      	cmp	r3, #57	@ 0x39
 80033ba:	d102      	bne.n	80033c2 <MacStringtoHex+0xd2>
			tempregister = 0x09;
 80033bc:	1cfb      	adds	r3, r7, #3
 80033be:	2209      	movs	r2, #9
 80033c0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3302      	adds	r3, #2
 80033c6:	4a43      	ldr	r2, [pc, #268]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	2b41      	cmp	r3, #65	@ 0x41
 80033cc:	d102      	bne.n	80033d4 <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	220a      	movs	r2, #10
 80033d2:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3302      	adds	r3, #2
 80033d8:	4a3e      	ldr	r2, [pc, #248]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	2b42      	cmp	r3, #66	@ 0x42
 80033de:	d102      	bne.n	80033e6 <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 80033e0:	1cfb      	adds	r3, r7, #3
 80033e2:	220b      	movs	r2, #11
 80033e4:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3302      	adds	r3, #2
 80033ea:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	2b43      	cmp	r3, #67	@ 0x43
 80033f0:	d102      	bne.n	80033f8 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	220c      	movs	r2, #12
 80033f6:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3302      	adds	r3, #2
 80033fc:	4a35      	ldr	r2, [pc, #212]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	2b44      	cmp	r3, #68	@ 0x44
 8003402:	d102      	bne.n	800340a <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8003404:	1cfb      	adds	r3, r7, #3
 8003406:	220d      	movs	r2, #13
 8003408:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3302      	adds	r3, #2
 800340e:	4a31      	ldr	r2, [pc, #196]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	2b45      	cmp	r3, #69	@ 0x45
 8003414:	d102      	bne.n	800341c <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8003416:	1cfb      	adds	r3, r7, #3
 8003418:	220e      	movs	r2, #14
 800341a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3302      	adds	r3, #2
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	2b46      	cmp	r3, #70	@ 0x46
 8003426:	d102      	bne.n	800342e <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8003428:	1cfb      	adds	r3, r7, #3
 800342a:	220f      	movs	r2, #15
 800342c:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	d105      	bne.n	8003442 <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 8003436:	1cbb      	adds	r3, r7, #2
 8003438:	1cfa      	adds	r2, r7, #3
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e03b      	b.n	80034ba <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 8003442:	1cbb      	adds	r3, r7, #2
 8003444:	1cb9      	adds	r1, r7, #2
 8003446:	1cfa      	adds	r2, r7, #3
 8003448:	7809      	ldrb	r1, [r1, #0]
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <MacStringtoHex+0x172>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d002      	beq.n	8003462 <MacStringtoHex+0x172>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d105      	bne.n	800346e <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 8003462:	1cbb      	adds	r3, r7, #2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b29a      	uxth	r2, r3
 8003468:	003b      	movs	r3, r7
 800346a:	0212      	lsls	r2, r2, #8
 800346c:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d005      	beq.n	8003480 <MacStringtoHex+0x190>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d002      	beq.n	8003480 <MacStringtoHex+0x190>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d107      	bne.n	8003490 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8003480:	1cbb      	adds	r3, r7, #2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b299      	uxth	r1, r3
 8003486:	003b      	movs	r3, r7
 8003488:	003a      	movs	r2, r7
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d103      	bne.n	800349e <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <MacStringtoHex+0x1e8>)
 8003498:	003a      	movs	r2, r7
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b07      	cmp	r3, #7
 80034a2:	d103      	bne.n	80034ac <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <MacStringtoHex+0x1e8>)
 80034a6:	003a      	movs	r2, r7
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b0b      	cmp	r3, #11
 80034b0:	d103      	bne.n	80034ba <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <MacStringtoHex+0x1e8>)
 80034b4:	003a      	movs	r2, r7
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b0b      	cmp	r3, #11
 80034c4:	dc00      	bgt.n	80034c8 <MacStringtoHex+0x1d8>
 80034c6:	e722      	b.n	800330e <MacStringtoHex+0x1e>
		}
	}
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	20000e7c 	.word	0x20000e7c
 80034d8:	20000088 	.word	0x20000088

080034dc <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	603a      	str	r2, [r7, #0]
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	1c0a      	adds	r2, r1, #0
 80034ee:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 80034f0:	210d      	movs	r1, #13
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 80034f8:	200f      	movs	r0, #15
 80034fa:	183b      	adds	r3, r7, r0
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 8003500:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	1dba      	adds	r2, r7, #6
 8003506:	8812      	ldrh	r2, [r2, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d84b      	bhi.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
 800350c:	4b29      	ldr	r3, [pc, #164]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	1d3a      	adds	r2, r7, #4
 8003512:	8812      	ldrh	r2, [r2, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d345      	bcc.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 8003518:	183b      	adds	r3, r7, r0
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	b2da      	uxtb	r2, r3
 800352e:	187b      	adds	r3, r7, r1
 8003530:	3201      	adds	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 8003534:	187b      	adds	r3, r7, r1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d32d      	bcc.n	800359e <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 8003542:	210e      	movs	r1, #14
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e017      	b.n	8003582 <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 8003552:	240e      	movs	r4, #14
 8003554:	193b      	adds	r3, r7, r4
 8003556:	7818      	ldrb	r0, [r3, #0]
 8003558:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	001a      	movs	r2, r3
 800355e:	1dbb      	adds	r3, r7, #6
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	193b      	adds	r3, r7, r4
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	18d3      	adds	r3, r2, r3
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	18d3      	adds	r3, r2, r3
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	0019      	movs	r1, r3
 8003574:	f001 f87a 	bl	800466c <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8003578:	193b      	adds	r3, r7, r4
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	193b      	adds	r3, r7, r4
 800357e:	3201      	adds	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	230e      	movs	r3, #14
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3df      	bcc.n	8003552 <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <ReadHoldingRegistersFunctionRev+0xe0>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	0018      	movs	r0, r3
 8003598:	f001 f886 	bl	80046a8 <ModbusSlaveTransaction>
 800359c:	e002      	b.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 800359e:	2003      	movs	r0, #3
 80035a0:	f001 f9ac 	bl	80048fc <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 80035a4:	230f      	movs	r3, #15
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b005      	add	sp, #20
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	2000037a 	.word	0x2000037a
 80035b8:	2000037c 	.word	0x2000037c
 80035bc:	200003c8 	.word	0x200003c8

080035c0 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 80035cc:	4b75      	ldr	r3, [pc, #468]	@ (80037a4 <ModbusMap+0x1e4>)
 80035ce:	78da      	ldrb	r2, [r3, #3]
 80035d0:	4b75      	ldr	r3, [pc, #468]	@ (80037a8 <ModbusMap+0x1e8>)
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <ModbusMap+0x1e8>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	4313      	orrs	r3, r2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2201      	movs	r2, #1
 80035e2:	4053      	eors	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 80035ea:	4b70      	ldr	r3, [pc, #448]	@ (80037ac <ModbusMap+0x1ec>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	e016      	b.n	8003620 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 80035f2:	4b6d      	ldr	r3, [pc, #436]	@ (80037a8 <ModbusMap+0x1e8>)
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 80035fa:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <ModbusMap+0x1ec>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e00e      	b.n	8003620 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 8003602:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <ModbusMap+0x1e8>)
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 800360a:	4b68      	ldr	r3, [pc, #416]	@ (80037ac <ModbusMap+0x1ec>)
 800360c:	2202      	movs	r2, #2
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e006      	b.n	8003620 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 8003612:	4b64      	ldr	r3, [pc, #400]	@ (80037a4 <ModbusMap+0x1e4>)
 8003614:	78db      	ldrb	r3, [r3, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 800361a:	4b64      	ldr	r3, [pc, #400]	@ (80037ac <ModbusMap+0x1ec>)
 800361c:	2206      	movs	r2, #6
 800361e:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 8003620:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <ModbusMap+0x1f0>)
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	001a      	movs	r2, r3
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <ModbusMap+0x1ec>)
 8003628:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 800362a:	4b62      	ldr	r3, [pc, #392]	@ (80037b4 <ModbusMap+0x1f4>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	001a      	movs	r2, r3
 8003630:	4b5e      	ldr	r3, [pc, #376]	@ (80037ac <ModbusMap+0x1ec>)
 8003632:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <ModbusMap+0x1f0>)
 8003636:	789b      	ldrb	r3, [r3, #2]
 8003638:	001a      	movs	r2, r3
 800363a:	4b5c      	ldr	r3, [pc, #368]	@ (80037ac <ModbusMap+0x1ec>)
 800363c:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 800363e:	4b5c      	ldr	r3, [pc, #368]	@ (80037b0 <ModbusMap+0x1f0>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	001a      	movs	r2, r3
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <ModbusMap+0x1ec>)
 8003646:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8003648:	4b57      	ldr	r3, [pc, #348]	@ (80037a8 <ModbusMap+0x1e8>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	001a      	movs	r2, r3
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <ModbusMap+0x1ec>)
 8003650:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 8003652:	4b56      	ldr	r3, [pc, #344]	@ (80037ac <ModbusMap+0x1ec>)
 8003654:	2200      	movs	r2, #0
 8003656:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8003658:	4b54      	ldr	r3, [pc, #336]	@ (80037ac <ModbusMap+0x1ec>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8003660:	4b52      	ldr	r3, [pc, #328]	@ (80037ac <ModbusMap+0x1ec>)
 8003662:	2201      	movs	r2, #1
 8003664:	81da      	strh	r2, [r3, #14]
 8003666:	e002      	b.n	800366e <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <ModbusMap+0x1ec>)
 800366a:	2200      	movs	r2, #0
 800366c:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 800366e:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <ModbusMap+0x1e8>)
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	001a      	movs	r2, r3
 8003674:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <ModbusMap+0x1ec>)
 8003676:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <ModbusMap+0x1e8>)
 800367a:	789b      	ldrb	r3, [r3, #2]
 800367c:	001a      	movs	r2, r3
 800367e:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <ModbusMap+0x1ec>)
 8003680:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <ModbusMap+0x1ec>)
 8003684:	2200      	movs	r2, #0
 8003686:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 8003688:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <ModbusMap+0x1ec>)
 800368a:	2200      	movs	r2, #0
 800368c:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 800368e:	4b45      	ldr	r3, [pc, #276]	@ (80037a4 <ModbusMap+0x1e4>)
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	001a      	movs	r2, r3
 8003694:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <ModbusMap+0x1ec>)
 8003696:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 8003698:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <ModbusMap+0x1ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 800369e:	4b46      	ldr	r3, [pc, #280]	@ (80037b8 <ModbusMap+0x1f8>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4a45      	ldr	r2, [pc, #276]	@ (80037bc <ModbusMap+0x1fc>)
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <ModbusMap+0x200>)
 80036b0:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 80036b2:	4b44      	ldr	r3, [pc, #272]	@ (80037c4 <ModbusMap+0x204>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <ModbusMap+0x208>)
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <ModbusMap+0x200>)
 80036c4:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 80036c6:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <ModbusMap+0x20c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	1c1a      	adds	r2, r3, #0
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	18d3      	adds	r3, r2, r3
 80036d0:	18db      	adds	r3, r3, r3
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <ModbusMap+0x200>)
 80036d6:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <ModbusMap+0x200>)
 80036da:	22dc      	movs	r2, #220	@ 0xdc
 80036dc:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 80036de:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <ModbusMap+0x210>)
 80036e0:	79db      	ldrb	r3, [r3, #7]
 80036e2:	001a      	movs	r2, r3
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <ModbusMap+0x214>)
 80036e6:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <ModbusMap+0x210>)
 80036ea:	799b      	ldrb	r3, [r3, #6]
 80036ec:	001a      	movs	r2, r3
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <ModbusMap+0x214>)
 80036f0:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 80036f2:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <ModbusMap+0x210>)
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	001a      	movs	r2, r3
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <ModbusMap+0x214>)
 80036fa:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 80036fc:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <ModbusMap+0x210>)
 80036fe:	789a      	ldrb	r2, [r3, #2]
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <ModbusMap+0x210>)
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	4313      	orrs	r3, r2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	001a      	movs	r2, r3
 800370a:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <ModbusMap+0x214>)
 800370c:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 800370e:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <ModbusMap+0x214>)
 8003710:	2200      	movs	r2, #0
 8003712:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 8003714:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <ModbusMap+0x210>)
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	4b2d      	ldr	r3, [pc, #180]	@ (80037d0 <ModbusMap+0x210>)
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	4313      	orrs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	001a      	movs	r2, r3
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <ModbusMap+0x214>)
 8003724:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 8003726:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <ModbusMap+0x218>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	001a      	movs	r2, r3
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <ModbusMap+0x214>)
 800372e:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8003730:	4b29      	ldr	r3, [pc, #164]	@ (80037d8 <ModbusMap+0x218>)
 8003732:	799b      	ldrb	r3, [r3, #6]
 8003734:	001a      	movs	r2, r3
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <ModbusMap+0x214>)
 8003738:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 800373a:	4b25      	ldr	r3, [pc, #148]	@ (80037d0 <ModbusMap+0x210>)
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <ModbusMap+0x210>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	4313      	orrs	r3, r2
 8003744:	b2db      	uxtb	r3, r3
 8003746:	001a      	movs	r2, r3
 8003748:	4b22      	ldr	r3, [pc, #136]	@ (80037d4 <ModbusMap+0x214>)
 800374a:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <ModbusMap+0x21c>)
 800374e:	4a24      	ldr	r2, [pc, #144]	@ (80037e0 <ModbusMap+0x220>)
 8003750:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <ModbusMap+0x21c>)
 8003754:	4a23      	ldr	r2, [pc, #140]	@ (80037e4 <ModbusMap+0x224>)
 8003756:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8003758:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <ModbusMap+0x21c>)
 800375a:	22ff      	movs	r2, #255	@ 0xff
 800375c:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 800375e:	f7ff fdc7 	bl	80032f0 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = reePlantilla[eeversion1]*256 + reePlantilla[eeversion2];
 8003762:	4b21      	ldr	r3, [pc, #132]	@ (80037e8 <ModbusMap+0x228>)
 8003764:	227b      	movs	r2, #123	@ 0x7b
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	b29b      	uxth	r3, r3
 800376c:	4a1e      	ldr	r2, [pc, #120]	@ (80037e8 <ModbusMap+0x228>)
 800376e:	217c      	movs	r1, #124	@ 0x7c
 8003770:	5c52      	ldrb	r2, [r2, r1]
 8003772:	189b      	adds	r3, r3, r2
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <ModbusMap+0x22c>)
 8003778:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 800377a:	f001 f973 	bl	8004a64 <ModbusSlavePool>
 800377e:	0002      	movs	r2, r0
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <ModbusMap+0x1d0>
 800378c:	f000 fe7d 	bl	800448a <ModbusMap+0xeca>
	    asm ("nop");
 8003790:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 8003792:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <ModbusMap+0x230>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d02c      	beq.n	80037f4 <ModbusMap+0x234>
 800379a:	2b06      	cmp	r3, #6
 800379c:	d100      	bne.n	80037a0 <ModbusMap+0x1e0>
 800379e:	e185      	b.n	8003aac <ModbusMap+0x4ec>
 80037a0:	f000 fe36 	bl	8004410 <ModbusMap+0xe50>
 80037a4:	20000b88 	.word	0x20000b88
 80037a8:	20000c4c 	.word	0x20000c4c
 80037ac:	20000050 	.word	0x20000050
 80037b0:	20000bb4 	.word	0x20000bb4
 80037b4:	20000bf0 	.word	0x20000bf0
 80037b8:	20000bc0 	.word	0x20000bc0
 80037bc:	20000bc1 	.word	0x20000bc1
 80037c0:	2000006c 	.word	0x2000006c
 80037c4:	20000bc2 	.word	0x20000bc2
 80037c8:	20000bc3 	.word	0x20000bc3
 80037cc:	20000bde 	.word	0x20000bde
 80037d0:	20000b98 	.word	0x20000b98
 80037d4:	20000074 	.word	0x20000074
 80037d8:	20000b90 	.word	0x20000b90
 80037dc:	20000088 	.word	0x20000088
 80037e0:	ffffb4a2 	.word	0xffffb4a2
 80037e4:	ffffeb4f 	.word	0xffffeb4f
 80037e8:	20000c9c 	.word	0x20000c9c
 80037ec:	20000090 	.word	0x20000090
 80037f0:	200003c8 	.word	0x200003c8
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 80037f4:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 80037f6:	4bdf      	ldr	r3, [pc, #892]	@ (8003b74 <ModbusMap+0x5b4>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(reePlantilla[eeescala] == 32)
 80037fc:	4bde      	ldr	r3, [pc, #888]	@ (8003b78 <ModbusMap+0x5b8>)
 80037fe:	2252      	movs	r2, #82	@ 0x52
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	2b20      	cmp	r3, #32
 8003804:	d102      	bne.n	800380c <ModbusMap+0x24c>
					PNU_0x3002 = 1;
 8003806:	4bdb      	ldr	r3, [pc, #876]	@ (8003b74 <ModbusMap+0x5b4>)
 8003808:	2201      	movs	r2, #1
 800380a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eespdiur_L]);
 800380c:	4bdb      	ldr	r3, [pc, #876]	@ (8003b7c <ModbusMap+0x5bc>)
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff fc18 	bl	8003044 <findLastValue>
 8003814:	0003      	movs	r3, r0
 8003816:	b29b      	uxth	r3, r3
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b29c      	uxth	r4, r3
 800381c:	4bd8      	ldr	r3, [pc, #864]	@ (8003b80 <ModbusMap+0x5c0>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7ff fc10 	bl	8003044 <findLastValue>
 8003824:	0003      	movs	r3, r0
 8003826:	b29b      	uxth	r3, r3
 8003828:	18e3      	adds	r3, r4, r3
 800382a:	b29a      	uxth	r2, r3
 800382c:	4bd5      	ldr	r3, [pc, #852]	@ (8003b84 <ModbusMap+0x5c4>)
 800382e:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = reePlantilla[eedifdiur_H] * 256 + reePlantilla[eedifdiur_L];
 8003830:	4bd1      	ldr	r3, [pc, #836]	@ (8003b78 <ModbusMap+0x5b8>)
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	b29b      	uxth	r3, r3
 8003838:	4acf      	ldr	r2, [pc, #828]	@ (8003b78 <ModbusMap+0x5b8>)
 800383a:	7912      	ldrb	r2, [r2, #4]
 800383c:	189b      	adds	r3, r3, r2
 800383e:	b29a      	uxth	r2, r3
 8003840:	4bd1      	ldr	r3, [pc, #836]	@ (8003b88 <ModbusMap+0x5c8>)
 8003842:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = reePlantilla[eeAddModBus];
 8003844:	4bcc      	ldr	r3, [pc, #816]	@ (8003b78 <ModbusMap+0x5b8>)
 8003846:	2272      	movs	r2, #114	@ 0x72
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	001a      	movs	r2, r3
 800384c:	4bcf      	ldr	r3, [pc, #828]	@ (8003b8c <ModbusMap+0x5cc>)
 800384e:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = reePlantilla[eetimepa];
 8003850:	4bc9      	ldr	r3, [pc, #804]	@ (8003b78 <ModbusMap+0x5b8>)
 8003852:	2249      	movs	r2, #73	@ 0x49
 8003854:	5c9b      	ldrb	r3, [r3, r2]
 8003856:	001a      	movs	r2, r3
 8003858:	4bcd      	ldr	r3, [pc, #820]	@ (8003b90 <ModbusMap+0x5d0>)
 800385a:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 800385c:	4acd      	ldr	r2, [pc, #820]	@ (8003b94 <ModbusMap+0x5d4>)
 800385e:	230e      	movs	r3, #14
 8003860:	33ff      	adds	r3, #255	@ 0xff
 8003862:	0019      	movs	r1, r3
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fe37 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <ModbusMap+0x2b6>
 8003872:	f000 fdd1 	bl	8004418 <ModbusMap+0xe58>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 8003876:	4ac8      	ldr	r2, [pc, #800]	@ (8003b98 <ModbusMap+0x5d8>)
 8003878:	49c8      	ldr	r1, [pc, #800]	@ (8003b9c <ModbusMap+0x5dc>)
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fe2c 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <ModbusMap+0x2cc>
 8003888:	f000 fdc8 	bl	800441c <ModbusMap+0xe5c>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 800388c:	4ac4      	ldr	r2, [pc, #784]	@ (8003ba0 <ModbusMap+0x5e0>)
 800388e:	2382      	movs	r3, #130	@ 0x82
 8003890:	0099      	lsls	r1, r3, #2
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fe20 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d001      	beq.n	80038a4 <ModbusMap+0x2e4>
 80038a0:	f000 fdbe 	bl	8004420 <ModbusMap+0xe60>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 80038a4:	4abf      	ldr	r2, [pc, #764]	@ (8003ba4 <ModbusMap+0x5e4>)
 80038a6:	49c0      	ldr	r1, [pc, #768]	@ (8003ba8 <ModbusMap+0x5e8>)
 80038a8:	23c0      	movs	r3, #192	@ 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fe15 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <ModbusMap+0x2fa>
 80038b6:	f000 fdb5 	bl	8004424 <ModbusMap+0xe64>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 80038ba:	4abc      	ldr	r2, [pc, #752]	@ (8003bac <ModbusMap+0x5ec>)
 80038bc:	23c4      	movs	r3, #196	@ 0xc4
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	23c4      	movs	r3, #196	@ 0xc4
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fe09 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <ModbusMap+0x312>
 80038ce:	f000 fdab 	bl	8004428 <ModbusMap+0xe68>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 80038d2:	4bb7      	ldr	r3, [pc, #732]	@ (8003bb0 <ModbusMap+0x5f0>)
 80038d4:	001a      	movs	r2, r3
 80038d6:	2110      	movs	r1, #16
 80038d8:	2010      	movs	r0, #16
 80038da:	f7ff fdff 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <ModbusMap+0x326>
 80038e2:	f000 fda3 	bl	800442c <ModbusMap+0xe6c>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 80038e6:	4ab3      	ldr	r2, [pc, #716]	@ (8003bb4 <ModbusMap+0x5f4>)
 80038e8:	23c0      	movs	r3, #192	@ 0xc0
 80038ea:	0199      	lsls	r1, r3, #6
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff fdf3 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <ModbusMap+0x33e>
 80038fa:	f000 fd99 	bl	8004430 <ModbusMap+0xe70>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 80038fe:	4b9d      	ldr	r3, [pc, #628]	@ (8003b74 <ModbusMap+0x5b4>)
 8003900:	49ad      	ldr	r1, [pc, #692]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003902:	48ad      	ldr	r0, [pc, #692]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003904:	001a      	movs	r2, r3
 8003906:	f7ff fde9 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d001      	beq.n	8003912 <ModbusMap+0x352>
 800390e:	f000 fd91 	bl	8004434 <ModbusMap+0xe74>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8003912:	4b9c      	ldr	r3, [pc, #624]	@ (8003b84 <ModbusMap+0x5c4>)
 8003914:	49a9      	ldr	r1, [pc, #676]	@ (8003bbc <ModbusMap+0x5fc>)
 8003916:	48a9      	ldr	r0, [pc, #676]	@ (8003bbc <ModbusMap+0x5fc>)
 8003918:	001a      	movs	r2, r3
 800391a:	f7ff fddf 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <ModbusMap+0x366>
 8003922:	f000 fd89 	bl	8004438 <ModbusMap+0xe78>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 8003926:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <ModbusMap+0x5c8>)
 8003928:	49a5      	ldr	r1, [pc, #660]	@ (8003bc0 <ModbusMap+0x600>)
 800392a:	48a5      	ldr	r0, [pc, #660]	@ (8003bc0 <ModbusMap+0x600>)
 800392c:	001a      	movs	r2, r3
 800392e:	f7ff fdd5 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d001      	beq.n	800393a <ModbusMap+0x37a>
 8003936:	f000 fd81 	bl	800443c <ModbusMap+0xe7c>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 800393a:	4ba2      	ldr	r3, [pc, #648]	@ (8003bc4 <ModbusMap+0x604>)
 800393c:	49a2      	ldr	r1, [pc, #648]	@ (8003bc8 <ModbusMap+0x608>)
 800393e:	48a2      	ldr	r0, [pc, #648]	@ (8003bc8 <ModbusMap+0x608>)
 8003940:	001a      	movs	r2, r3
 8003942:	f7ff fdcb 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d001      	beq.n	800394e <ModbusMap+0x38e>
 800394a:	f000 fd79 	bl	8004440 <ModbusMap+0xe80>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 800394e:	4b9f      	ldr	r3, [pc, #636]	@ (8003bcc <ModbusMap+0x60c>)
 8003950:	499f      	ldr	r1, [pc, #636]	@ (8003bd0 <ModbusMap+0x610>)
 8003952:	489f      	ldr	r0, [pc, #636]	@ (8003bd0 <ModbusMap+0x610>)
 8003954:	001a      	movs	r2, r3
 8003956:	f7ff fdc1 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <ModbusMap+0x3a2>
 800395e:	f000 fd71 	bl	8004444 <ModbusMap+0xe84>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8003962:	4b9c      	ldr	r3, [pc, #624]	@ (8003bd4 <ModbusMap+0x614>)
 8003964:	499c      	ldr	r1, [pc, #624]	@ (8003bd8 <ModbusMap+0x618>)
 8003966:	489c      	ldr	r0, [pc, #624]	@ (8003bd8 <ModbusMap+0x618>)
 8003968:	001a      	movs	r2, r3
 800396a:	f7ff fdb7 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <ModbusMap+0x3b6>
 8003972:	f000 fd69 	bl	8004448 <ModbusMap+0xe88>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 8003976:	4b99      	ldr	r3, [pc, #612]	@ (8003bdc <ModbusMap+0x61c>)
 8003978:	4999      	ldr	r1, [pc, #612]	@ (8003be0 <ModbusMap+0x620>)
 800397a:	4899      	ldr	r0, [pc, #612]	@ (8003be0 <ModbusMap+0x620>)
 800397c:	001a      	movs	r2, r3
 800397e:	f7ff fdad 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <ModbusMap+0x3ca>
 8003986:	f000 fd61 	bl	800444c <ModbusMap+0xe8c>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800398a:	4b96      	ldr	r3, [pc, #600]	@ (8003be4 <ModbusMap+0x624>)
 800398c:	4996      	ldr	r1, [pc, #600]	@ (8003be8 <ModbusMap+0x628>)
 800398e:	4896      	ldr	r0, [pc, #600]	@ (8003be8 <ModbusMap+0x628>)
 8003990:	001a      	movs	r2, r3
 8003992:	f7ff fda3 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <ModbusMap+0x3de>
 800399a:	f000 fd59 	bl	8004450 <ModbusMap+0xe90>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 800399e:	4b93      	ldr	r3, [pc, #588]	@ (8003bec <ModbusMap+0x62c>)
 80039a0:	4993      	ldr	r1, [pc, #588]	@ (8003bf0 <ModbusMap+0x630>)
 80039a2:	4893      	ldr	r0, [pc, #588]	@ (8003bf0 <ModbusMap+0x630>)
 80039a4:	001a      	movs	r2, r3
 80039a6:	f7ff fd99 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <ModbusMap+0x3f2>
 80039ae:	f000 fd51 	bl	8004454 <ModbusMap+0xe94>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 80039b2:	4b90      	ldr	r3, [pc, #576]	@ (8003bf4 <ModbusMap+0x634>)
 80039b4:	4990      	ldr	r1, [pc, #576]	@ (8003bf8 <ModbusMap+0x638>)
 80039b6:	4890      	ldr	r0, [pc, #576]	@ (8003bf8 <ModbusMap+0x638>)
 80039b8:	001a      	movs	r2, r3
 80039ba:	f7ff fd8f 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d001      	beq.n	80039c6 <ModbusMap+0x406>
 80039c2:	f000 fd49 	bl	8004458 <ModbusMap+0xe98>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 80039c6:	4b8d      	ldr	r3, [pc, #564]	@ (8003bfc <ModbusMap+0x63c>)
 80039c8:	498d      	ldr	r1, [pc, #564]	@ (8003c00 <ModbusMap+0x640>)
 80039ca:	488d      	ldr	r0, [pc, #564]	@ (8003c00 <ModbusMap+0x640>)
 80039cc:	001a      	movs	r2, r3
 80039ce:	f7ff fd85 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d001      	beq.n	80039da <ModbusMap+0x41a>
 80039d6:	f000 fd41 	bl	800445c <ModbusMap+0xe9c>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 80039da:	4b8a      	ldr	r3, [pc, #552]	@ (8003c04 <ModbusMap+0x644>)
 80039dc:	498a      	ldr	r1, [pc, #552]	@ (8003c08 <ModbusMap+0x648>)
 80039de:	488a      	ldr	r0, [pc, #552]	@ (8003c08 <ModbusMap+0x648>)
 80039e0:	001a      	movs	r2, r3
 80039e2:	f7ff fd7b 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d001      	beq.n	80039ee <ModbusMap+0x42e>
 80039ea:	f000 fd39 	bl	8004460 <ModbusMap+0xea0>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 80039ee:	4b87      	ldr	r3, [pc, #540]	@ (8003c0c <ModbusMap+0x64c>)
 80039f0:	4987      	ldr	r1, [pc, #540]	@ (8003c10 <ModbusMap+0x650>)
 80039f2:	4887      	ldr	r0, [pc, #540]	@ (8003c10 <ModbusMap+0x650>)
 80039f4:	001a      	movs	r2, r3
 80039f6:	f7ff fd71 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <ModbusMap+0x442>
 80039fe:	f000 fd31 	bl	8004464 <ModbusMap+0xea4>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8003a02:	4b84      	ldr	r3, [pc, #528]	@ (8003c14 <ModbusMap+0x654>)
 8003a04:	4984      	ldr	r1, [pc, #528]	@ (8003c18 <ModbusMap+0x658>)
 8003a06:	4884      	ldr	r0, [pc, #528]	@ (8003c18 <ModbusMap+0x658>)
 8003a08:	001a      	movs	r2, r3
 8003a0a:	f7ff fd67 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <ModbusMap+0x456>
 8003a12:	f000 fd29 	bl	8004468 <ModbusMap+0xea8>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 8003a16:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <ModbusMap+0x5cc>)
 8003a18:	4980      	ldr	r1, [pc, #512]	@ (8003c1c <ModbusMap+0x65c>)
 8003a1a:	4880      	ldr	r0, [pc, #512]	@ (8003c1c <ModbusMap+0x65c>)
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	f7ff fd5d 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <ModbusMap+0x46a>
 8003a26:	f000 fd21 	bl	800446c <ModbusMap+0xeac>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 8003a2a:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <ModbusMap+0x5d0>)
 8003a2c:	497c      	ldr	r1, [pc, #496]	@ (8003c20 <ModbusMap+0x660>)
 8003a2e:	487c      	ldr	r0, [pc, #496]	@ (8003c20 <ModbusMap+0x660>)
 8003a30:	001a      	movs	r2, r3
 8003a32:	f7ff fd53 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <ModbusMap+0x47e>
 8003a3a:	f000 fd19 	bl	8004470 <ModbusMap+0xeb0>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8003a3e:	4b79      	ldr	r3, [pc, #484]	@ (8003c24 <ModbusMap+0x664>)
 8003a40:	4979      	ldr	r1, [pc, #484]	@ (8003c28 <ModbusMap+0x668>)
 8003a42:	4879      	ldr	r0, [pc, #484]	@ (8003c28 <ModbusMap+0x668>)
 8003a44:	001a      	movs	r2, r3
 8003a46:	f7ff fd49 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <ModbusMap+0x492>
 8003a4e:	f000 fd11 	bl	8004474 <ModbusMap+0xeb4>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8003a52:	4b76      	ldr	r3, [pc, #472]	@ (8003c2c <ModbusMap+0x66c>)
 8003a54:	4976      	ldr	r1, [pc, #472]	@ (8003c30 <ModbusMap+0x670>)
 8003a56:	4876      	ldr	r0, [pc, #472]	@ (8003c30 <ModbusMap+0x670>)
 8003a58:	001a      	movs	r2, r3
 8003a5a:	f7ff fd3f 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <ModbusMap+0x4a6>
 8003a62:	f000 fd09 	bl	8004478 <ModbusMap+0xeb8>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 8003a66:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <ModbusMap+0x674>)
 8003a68:	4973      	ldr	r1, [pc, #460]	@ (8003c38 <ModbusMap+0x678>)
 8003a6a:	4873      	ldr	r0, [pc, #460]	@ (8003c38 <ModbusMap+0x678>)
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	f7ff fd35 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <ModbusMap+0x4ba>
 8003a76:	f000 fd01 	bl	800447c <ModbusMap+0xebc>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 8003a7a:	4b70      	ldr	r3, [pc, #448]	@ (8003c3c <ModbusMap+0x67c>)
 8003a7c:	4970      	ldr	r1, [pc, #448]	@ (8003c40 <ModbusMap+0x680>)
 8003a7e:	4870      	ldr	r0, [pc, #448]	@ (8003c40 <ModbusMap+0x680>)
 8003a80:	001a      	movs	r2, r3
 8003a82:	f7ff fd2b 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a86:	1e03      	subs	r3, r0, #0
 8003a88:	d001      	beq.n	8003a8e <ModbusMap+0x4ce>
 8003a8a:	f000 fcf9 	bl	8004480 <ModbusMap+0xec0>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c44 <ModbusMap+0x684>)
 8003a90:	496d      	ldr	r1, [pc, #436]	@ (8003c48 <ModbusMap+0x688>)
 8003a92:	486d      	ldr	r0, [pc, #436]	@ (8003c48 <ModbusMap+0x688>)
 8003a94:	001a      	movs	r2, r3
 8003a96:	f7ff fd21 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a9a:	1e03      	subs	r3, r0, #0
 8003a9c:	d001      	beq.n	8003aa2 <ModbusMap+0x4e2>
 8003a9e:	f000 fcf1 	bl	8004484 <ModbusMap+0xec4>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f000 ff2a 	bl	80048fc <ModbusSlaveExceptionTransaction>
				}
				break;
 8003aa8:	f000 fcef 	bl	800448a <ModbusMap+0xeca>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 8003aac:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <ModbusMap+0x68c>)
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	23c0      	movs	r3, #192	@ 0xc0
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d310      	bcc.n	8003ada <ModbusMap+0x51a>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	@ (8003c4c <ModbusMap+0x68c>)
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	23c0      	movs	r3, #192	@ 0xc0
 8003abe:	019b      	lsls	r3, r3, #6
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d80a      	bhi.n	8003ada <ModbusMap+0x51a>
					PNU_0x3000 = lowByte(_u16WriteVal);
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <ModbusMap+0x690>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	4b39      	ldr	r3, [pc, #228]	@ (8003bb4 <ModbusMap+0x5f4>)
 8003ace:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ad0:	4b60      	ldr	r3, [pc, #384]	@ (8003c54 <ModbusMap+0x694>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fde7 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 8003ada:	4b5c      	ldr	r3, [pc, #368]	@ (8003c4c <ModbusMap+0x68c>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	4a5e      	ldr	r2, [pc, #376]	@ (8003c58 <ModbusMap+0x698>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d800      	bhi.n	8003ae6 <ModbusMap+0x526>
 8003ae4:	e0c4      	b.n	8003c70 <ModbusMap+0x6b0>
 8003ae6:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <ModbusMap+0x68c>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d900      	bls.n	8003af2 <ModbusMap+0x532>
 8003af0:	e0be      	b.n	8003c70 <ModbusMap+0x6b0>
					PNU_0x3002 = lowByte(_u16WriteVal);
 8003af2:	4b57      	ldr	r3, [pc, #348]	@ (8003c50 <ModbusMap+0x690>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	001a      	movs	r2, r3
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <ModbusMap+0x5b4>)
 8003afc:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <ModbusMap+0x5b4>)
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d118      	bne.n	8003b38 <ModbusMap+0x578>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala] == 32){
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b08:	2252      	movs	r2, #82	@ 0x52
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d101      	bne.n	8003b14 <ModbusMap+0x554>
							asm ("nop");
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	e011      	b.n	8003b38 <ModbusMap+0x578>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 8003b14:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <ModbusMap+0x69c>)
 8003b16:	2220      	movs	r2, #32
 8003b18:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8003b1a:	4b50      	ldr	r3, [pc, #320]	@ (8003c5c <ModbusMap+0x69c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	001a      	movs	r2, r3
 8003b20:	4b4f      	ldr	r3, [pc, #316]	@ (8003c60 <ModbusMap+0x6a0>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f003 fd53 	bl	80075d0 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c5c <ModbusMap+0x69c>)
 8003b2c:	7819      	ldrb	r1, [r3, #0]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b30:	2252      	movs	r2, #82	@ 0x52
 8003b32:	5499      	strb	r1, [r3, r2]
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	e7fd      	b.n	8003b34 <ModbusMap+0x574>
						}
					}
					if (PNU_0x3002 == 0){
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <ModbusMap+0x5b4>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d000      	beq.n	8003b42 <ModbusMap+0x582>
 8003b40:	e091      	b.n	8003c66 <ModbusMap+0x6a6>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala]== 32){
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b44:	2252      	movs	r2, #82	@ 0x52
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d000      	beq.n	8003b4e <ModbusMap+0x58e>
 8003b4c:	e08a      	b.n	8003c64 <ModbusMap+0x6a4>
							waux = 0;//mov			waux,#0;	/ Carga
 8003b4e:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <ModbusMap+0x69c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 8003b54:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <ModbusMap+0x69c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <ModbusMap+0x6a0>)
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	0010      	movs	r0, r2
 8003b60:	f003 fd36 	bl	80075d0 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b64:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <ModbusMap+0x69c>)
 8003b66:	7819      	ldrb	r1, [r3, #0]
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b6a:	2252      	movs	r2, #82	@ 0x52
 8003b6c:	5499      	strb	r1, [r3, r2]
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	e7fd      	b.n	8003b6e <ModbusMap+0x5ae>
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	20000b18 	.word	0x20000b18
 8003b78:	20000c9c 	.word	0x20000c9c
 8003b7c:	0803f001 	.word	0x0803f001
 8003b80:	0803f002 	.word	0x0803f002
 8003b84:	20000094 	.word	0x20000094
 8003b88:	20000096 	.word	0x20000096
 8003b8c:	200000aa 	.word	0x200000aa
 8003b90:	200000ac 	.word	0x200000ac
 8003b94:	20000050 	.word	0x20000050
 8003b98:	2000006c 	.word	0x2000006c
 8003b9c:	00002003 	.word	0x00002003
 8003ba0:	20000074 	.word	0x20000074
 8003ba4:	20000088 	.word	0x20000088
 8003ba8:	00000302 	.word	0x00000302
 8003bac:	20000090 	.word	0x20000090
 8003bb0:	20000b16 	.word	0x20000b16
 8003bb4:	20000092 	.word	0x20000092
 8003bb8:	00003002 	.word	0x00003002
 8003bbc:	00003004 	.word	0x00003004
 8003bc0:	00003006 	.word	0x00003006
 8003bc4:	20000098 	.word	0x20000098
 8003bc8:	00003008 	.word	0x00003008
 8003bcc:	20000b1a 	.word	0x20000b1a
 8003bd0:	0000300a 	.word	0x0000300a
 8003bd4:	2000009a 	.word	0x2000009a
 8003bd8:	0000300c 	.word	0x0000300c
 8003bdc:	20000b1c 	.word	0x20000b1c
 8003be0:	0000300e 	.word	0x0000300e
 8003be4:	2000009c 	.word	0x2000009c
 8003be8:	00003010 	.word	0x00003010
 8003bec:	2000009e 	.word	0x2000009e
 8003bf0:	00003012 	.word	0x00003012
 8003bf4:	200000a0 	.word	0x200000a0
 8003bf8:	00003014 	.word	0x00003014
 8003bfc:	200000a2 	.word	0x200000a2
 8003c00:	00003016 	.word	0x00003016
 8003c04:	200000a4 	.word	0x200000a4
 8003c08:	00003018 	.word	0x00003018
 8003c0c:	200000a6 	.word	0x200000a6
 8003c10:	0000301a 	.word	0x0000301a
 8003c14:	200000a8 	.word	0x200000a8
 8003c18:	0000301c 	.word	0x0000301c
 8003c1c:	0000301e 	.word	0x0000301e
 8003c20:	00003104 	.word	0x00003104
 8003c24:	200000ae 	.word	0x200000ae
 8003c28:	00003106 	.word	0x00003106
 8003c2c:	200000b0 	.word	0x200000b0
 8003c30:	00003108 	.word	0x00003108
 8003c34:	200000b2 	.word	0x200000b2
 8003c38:	0000310a 	.word	0x0000310a
 8003c3c:	200000b4 	.word	0x200000b4
 8003c40:	0000310c 	.word	0x0000310c
 8003c44:	200000b6 	.word	0x200000b6
 8003c48:	0000310e 	.word	0x0000310e
 8003c4c:	2000037e 	.word	0x2000037e
 8003c50:	20000380 	.word	0x20000380
 8003c54:	200003c8 	.word	0x200003c8
 8003c58:	00003001 	.word	0x00003001
 8003c5c:	20000b66 	.word	0x20000b66
 8003c60:	0803f052 	.word	0x0803f052
						}
						else{
							asm ("nop");
 8003c64:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c66:	4bbd      	ldr	r3, [pc, #756]	@ (8003f5c <ModbusMap+0x99c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fd1c 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 8003c70:	4bbb      	ldr	r3, [pc, #748]	@ (8003f60 <ModbusMap+0x9a0>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4abb      	ldr	r2, [pc, #748]	@ (8003f64 <ModbusMap+0x9a4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d92e      	bls.n	8003cd8 <ModbusMap+0x718>
 8003c7a:	4bb9      	ldr	r3, [pc, #740]	@ (8003f60 <ModbusMap+0x9a0>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	4aba      	ldr	r2, [pc, #744]	@ (8003f68 <ModbusMap+0x9a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d829      	bhi.n	8003cd8 <ModbusMap+0x718>
					PNU_0x3004 = _u16WriteVal;
 8003c84:	4bb9      	ldr	r3, [pc, #740]	@ (8003f6c <ModbusMap+0x9ac>)
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	4bb9      	ldr	r3, [pc, #740]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c8a:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8003c8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4bb7      	ldr	r3, [pc, #732]	@ (8003f74 <ModbusMap+0x9b4>)
 8003c98:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 8003c9a:	4bb5      	ldr	r3, [pc, #724]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4bb5      	ldr	r3, [pc, #724]	@ (8003f78 <ModbusMap+0x9b8>)
 8003ca2:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 8003ca4:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <ModbusMap+0x9b4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	001a      	movs	r2, r3
 8003caa:	4bb4      	ldr	r3, [pc, #720]	@ (8003f7c <ModbusMap+0x9bc>)
 8003cac:	0019      	movs	r1, r3
 8003cae:	0010      	movs	r0, r2
 8003cb0:	f003 fc8e 	bl	80075d0 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f78 <ModbusMap+0x9b8>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	001a      	movs	r2, r3
 8003cba:	4bb1      	ldr	r3, [pc, #708]	@ (8003f80 <ModbusMap+0x9c0>)
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	f003 fc86 	bl	80075d0 <wreeprom>

					reePlantilla[eespdiur_H] = waux;
 8003cc4:	4bab      	ldr	r3, [pc, #684]	@ (8003f74 <ModbusMap+0x9b4>)
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4bae      	ldr	r3, [pc, #696]	@ (8003f84 <ModbusMap+0x9c4>)
 8003cca:	705a      	strb	r2, [r3, #1]
					reePlantilla[eespdiur_L] = wreg;
 8003ccc:	4baa      	ldr	r3, [pc, #680]	@ (8003f78 <ModbusMap+0x9b8>)
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	4bac      	ldr	r3, [pc, #688]	@ (8003f84 <ModbusMap+0x9c4>)
 8003cd2:	709a      	strb	r2, [r3, #2]

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	e7fd      	b.n	8003cd4 <ModbusMap+0x714>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 8003cd8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f60 <ModbusMap+0x9a0>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4aaa      	ldr	r2, [pc, #680]	@ (8003f88 <ModbusMap+0x9c8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d92e      	bls.n	8003d40 <ModbusMap+0x780>
 8003ce2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	4aa9      	ldr	r2, [pc, #676]	@ (8003f8c <ModbusMap+0x9cc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d829      	bhi.n	8003d40 <ModbusMap+0x780>
					PNU_0x3006 = _u16WriteVal;
 8003cec:	4b9f      	ldr	r3, [pc, #636]	@ (8003f6c <ModbusMap+0x9ac>)
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	@ (8003f90 <ModbusMap+0x9d0>)
 8003cf2:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 8003cf4:	4ba6      	ldr	r3, [pc, #664]	@ (8003f90 <ModbusMap+0x9d0>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4b9d      	ldr	r3, [pc, #628]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d00:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 8003d02:	4ba3      	ldr	r3, [pc, #652]	@ (8003f90 <ModbusMap+0x9d0>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b9b      	ldr	r3, [pc, #620]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d0a:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8003d0c:	4b99      	ldr	r3, [pc, #612]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	001a      	movs	r2, r3
 8003d12:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <ModbusMap+0x9d4>)
 8003d14:	0019      	movs	r1, r3
 8003d16:	0010      	movs	r0, r2
 8003d18:	f003 fc5a 	bl	80075d0 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8003d1c:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	001a      	movs	r2, r3
 8003d22:	4b9d      	ldr	r3, [pc, #628]	@ (8003f98 <ModbusMap+0x9d8>)
 8003d24:	0019      	movs	r1, r3
 8003d26:	0010      	movs	r0, r2
 8003d28:	f003 fc52 	bl	80075d0 <wreeprom>

					reePlantilla[eedifdiur_H] = waux;
 8003d2c:	4b91      	ldr	r3, [pc, #580]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	4b94      	ldr	r3, [pc, #592]	@ (8003f84 <ModbusMap+0x9c4>)
 8003d32:	70da      	strb	r2, [r3, #3]
					reePlantilla[eedifdiur_L] = wreg;
 8003d34:	4b90      	ldr	r3, [pc, #576]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	4b92      	ldr	r3, [pc, #584]	@ (8003f84 <ModbusMap+0x9c4>)
 8003d3a:	711a      	strb	r2, [r3, #4]

			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	e7fd      	b.n	8003d3c <ModbusMap+0x77c>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 8003d40:	4b87      	ldr	r3, [pc, #540]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	4a95      	ldr	r2, [pc, #596]	@ (8003f9c <ModbusMap+0x9dc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d90f      	bls.n	8003d6a <ModbusMap+0x7aa>
 8003d4a:	4b85      	ldr	r3, [pc, #532]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	4a94      	ldr	r2, [pc, #592]	@ (8003fa0 <ModbusMap+0x9e0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d80a      	bhi.n	8003d6a <ModbusMap+0x7aa>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8003d54:	4b85      	ldr	r3, [pc, #532]	@ (8003f6c <ModbusMap+0x9ac>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	4b91      	ldr	r3, [pc, #580]	@ (8003fa4 <ModbusMap+0x9e4>)
 8003d5e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d60:	4b7e      	ldr	r3, [pc, #504]	@ (8003f5c <ModbusMap+0x99c>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 fc9f 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	4a8e      	ldr	r2, [pc, #568]	@ (8003fa8 <ModbusMap+0x9e8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d90f      	bls.n	8003d94 <ModbusMap+0x7d4>
 8003d74:	4b7a      	ldr	r3, [pc, #488]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	4a8c      	ldr	r2, [pc, #560]	@ (8003fac <ModbusMap+0x9ec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d80a      	bhi.n	8003d94 <ModbusMap+0x7d4>
					PNU_0x300A = lowByte(_u16WriteVal);
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f6c <ModbusMap+0x9ac>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	001a      	movs	r2, r3
 8003d86:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb0 <ModbusMap+0x9f0>)
 8003d88:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d8a:	4b74      	ldr	r3, [pc, #464]	@ (8003f5c <ModbusMap+0x99c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fc8a 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8003d94:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	4a86      	ldr	r2, [pc, #536]	@ (8003fb4 <ModbusMap+0x9f4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d90f      	bls.n	8003dbe <ModbusMap+0x7fe>
 8003d9e:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <ModbusMap+0x9a0>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	4a85      	ldr	r2, [pc, #532]	@ (8003fb8 <ModbusMap+0x9f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d80a      	bhi.n	8003dbe <ModbusMap+0x7fe>
					PNU_0x300C = lowByte(_u16WriteVal);
 8003da8:	4b70      	ldr	r3, [pc, #448]	@ (8003f6c <ModbusMap+0x9ac>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	001a      	movs	r2, r3
 8003db0:	4b82      	ldr	r3, [pc, #520]	@ (8003fbc <ModbusMap+0x9fc>)
 8003db2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003db4:	4b69      	ldr	r3, [pc, #420]	@ (8003f5c <ModbusMap+0x99c>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fc75 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 8003dbe:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc0 <ModbusMap+0xa00>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d90f      	bls.n	8003de8 <ModbusMap+0x828>
 8003dc8:	4b65      	ldr	r3, [pc, #404]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <ModbusMap+0xa04>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d80a      	bhi.n	8003de8 <ModbusMap+0x828>
					PNU_0x300E = lowByte(_u16WriteVal);
 8003dd2:	4b66      	ldr	r3, [pc, #408]	@ (8003f6c <ModbusMap+0x9ac>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	001a      	movs	r2, r3
 8003dda:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc8 <ModbusMap+0xa08>)
 8003ddc:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dde:	4b5f      	ldr	r3, [pc, #380]	@ (8003f5c <ModbusMap+0x99c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fc60 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 8003de8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	4a77      	ldr	r2, [pc, #476]	@ (8003fcc <ModbusMap+0xa0c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d90f      	bls.n	8003e12 <ModbusMap+0x852>
 8003df2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f60 <ModbusMap+0x9a0>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	4a76      	ldr	r2, [pc, #472]	@ (8003fd0 <ModbusMap+0xa10>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d80a      	bhi.n	8003e12 <ModbusMap+0x852>
					PNU_0x3010 = lowByte(_u16WriteVal);
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <ModbusMap+0x9ac>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	001a      	movs	r2, r3
 8003e04:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <ModbusMap+0xa14>)
 8003e06:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e08:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <ModbusMap+0x99c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fc4b 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	4a70      	ldr	r2, [pc, #448]	@ (8003fd8 <ModbusMap+0xa18>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d90f      	bls.n	8003e3c <ModbusMap+0x87c>
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <ModbusMap+0xa1c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d80a      	bhi.n	8003e3c <ModbusMap+0x87c>
					PNU_0x3012 = lowByte(_u16WriteVal);
 8003e26:	4b51      	ldr	r3, [pc, #324]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe0 <ModbusMap+0xa20>)
 8003e30:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e32:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <ModbusMap+0x99c>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 fc36 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8003e3c:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	4a68      	ldr	r2, [pc, #416]	@ (8003fe4 <ModbusMap+0xa24>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90f      	bls.n	8003e66 <ModbusMap+0x8a6>
 8003e46:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	4a67      	ldr	r2, [pc, #412]	@ (8003fe8 <ModbusMap+0xa28>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d80a      	bhi.n	8003e66 <ModbusMap+0x8a6>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8003e50:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	001a      	movs	r2, r3
 8003e58:	4b64      	ldr	r3, [pc, #400]	@ (8003fec <ModbusMap+0xa2c>)
 8003e5a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f5c <ModbusMap+0x99c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 fc21 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	4a61      	ldr	r2, [pc, #388]	@ (8003ff0 <ModbusMap+0xa30>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d90f      	bls.n	8003e90 <ModbusMap+0x8d0>
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff4 <ModbusMap+0xa34>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d80a      	bhi.n	8003e90 <ModbusMap+0x8d0>
					PNU_0x3016 = lowByte(_u16WriteVal);
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	001a      	movs	r2, r3
 8003e82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <ModbusMap+0xa38>)
 8003e84:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e86:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <ModbusMap+0x99c>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fc0c 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8003e90:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	4a59      	ldr	r2, [pc, #356]	@ (8003ffc <ModbusMap+0xa3c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90f      	bls.n	8003eba <ModbusMap+0x8fa>
 8003e9a:	4b31      	ldr	r3, [pc, #196]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <ModbusMap+0xa40>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d80a      	bhi.n	8003eba <ModbusMap+0x8fa>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8003ea4:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <ModbusMap+0x9ac>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	001a      	movs	r2, r3
 8003eac:	4b55      	ldr	r3, [pc, #340]	@ (8004004 <ModbusMap+0xa44>)
 8003eae:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <ModbusMap+0x99c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fbf7 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <ModbusMap+0xa48>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d90f      	bls.n	8003ee4 <ModbusMap+0x924>
 8003ec4:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	@ (800400c <ModbusMap+0xa4c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d80a      	bhi.n	8003ee4 <ModbusMap+0x924>
					PNU_0x301A = lowByte(_u16WriteVal);
 8003ece:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <ModbusMap+0x9ac>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8004010 <ModbusMap+0xa50>)
 8003ed8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <ModbusMap+0x99c>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 fbe2 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8004014 <ModbusMap+0xa54>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90f      	bls.n	8003f0e <ModbusMap+0x94e>
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	4a49      	ldr	r2, [pc, #292]	@ (8004018 <ModbusMap+0xa58>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d80a      	bhi.n	8003f0e <ModbusMap+0x94e>
					PNU_0x301C = lowByte(_u16WriteVal);
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <ModbusMap+0x9ac>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	001a      	movs	r2, r3
 8003f00:	4b46      	ldr	r3, [pc, #280]	@ (800401c <ModbusMap+0xa5c>)
 8003f02:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003f04:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <ModbusMap+0x99c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fbcd 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <ModbusMap+0x9a0>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	4a43      	ldr	r2, [pc, #268]	@ (8004020 <ModbusMap+0xa60>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d800      	bhi.n	8003f1a <ModbusMap+0x95a>
 8003f18:	e08a      	b.n	8004030 <ModbusMap+0xa70>
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <ModbusMap+0x9a0>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	@ (8004024 <ModbusMap+0xa64>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d900      	bls.n	8003f26 <ModbusMap+0x966>
 8003f24:	e084      	b.n	8004030 <ModbusMap+0xa70>
					PNU_0x301E = lowByte(_u16WriteVal);
 8003f26:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <ModbusMap+0x9ac>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <ModbusMap+0xa68>)
 8003f30:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <ModbusMap+0xa68>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f3a:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	001a      	movs	r2, r3
 8003f42:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <ModbusMap+0xa6c>)
 8003f44:	0019      	movs	r1, r3
 8003f46:	0010      	movs	r0, r2
 8003f48:	f003 fb42 	bl	80075d0 <wreeprom>
					reePlantilla[eeAddModBus] = waux;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <ModbusMap+0x9c4>)
 8003f52:	2272      	movs	r2, #114	@ 0x72
 8003f54:	5499      	strb	r1, [r3, r2]

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	e7fd      	b.n	8003f56 <ModbusMap+0x996>
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	200003c8 	.word	0x200003c8
 8003f60:	2000037e 	.word	0x2000037e
 8003f64:	00003003 	.word	0x00003003
 8003f68:	00003004 	.word	0x00003004
 8003f6c:	20000380 	.word	0x20000380
 8003f70:	20000094 	.word	0x20000094
 8003f74:	20000b66 	.word	0x20000b66
 8003f78:	20000b67 	.word	0x20000b67
 8003f7c:	0803f001 	.word	0x0803f001
 8003f80:	0803f002 	.word	0x0803f002
 8003f84:	20000c9c 	.word	0x20000c9c
 8003f88:	00003005 	.word	0x00003005
 8003f8c:	00003006 	.word	0x00003006
 8003f90:	20000096 	.word	0x20000096
 8003f94:	0803f003 	.word	0x0803f003
 8003f98:	0803f004 	.word	0x0803f004
 8003f9c:	00003007 	.word	0x00003007
 8003fa0:	00003008 	.word	0x00003008
 8003fa4:	20000098 	.word	0x20000098
 8003fa8:	00003009 	.word	0x00003009
 8003fac:	0000300a 	.word	0x0000300a
 8003fb0:	20000b1a 	.word	0x20000b1a
 8003fb4:	0000300b 	.word	0x0000300b
 8003fb8:	0000300c 	.word	0x0000300c
 8003fbc:	2000009a 	.word	0x2000009a
 8003fc0:	0000300d 	.word	0x0000300d
 8003fc4:	0000300e 	.word	0x0000300e
 8003fc8:	20000b1c 	.word	0x20000b1c
 8003fcc:	0000300f 	.word	0x0000300f
 8003fd0:	00003010 	.word	0x00003010
 8003fd4:	2000009c 	.word	0x2000009c
 8003fd8:	00003011 	.word	0x00003011
 8003fdc:	00003012 	.word	0x00003012
 8003fe0:	2000009e 	.word	0x2000009e
 8003fe4:	00003013 	.word	0x00003013
 8003fe8:	00003014 	.word	0x00003014
 8003fec:	200000a0 	.word	0x200000a0
 8003ff0:	00003015 	.word	0x00003015
 8003ff4:	00003016 	.word	0x00003016
 8003ff8:	200000a2 	.word	0x200000a2
 8003ffc:	00003017 	.word	0x00003017
 8004000:	00003018 	.word	0x00003018
 8004004:	200000a4 	.word	0x200000a4
 8004008:	00003019 	.word	0x00003019
 800400c:	0000301a 	.word	0x0000301a
 8004010:	200000a6 	.word	0x200000a6
 8004014:	0000301b 	.word	0x0000301b
 8004018:	0000301c 	.word	0x0000301c
 800401c:	200000a8 	.word	0x200000a8
 8004020:	0000301d 	.word	0x0000301d
 8004024:	0000301e 	.word	0x0000301e
 8004028:	200000aa 	.word	0x200000aa
 800402c:	0803f072 	.word	0x0803f072
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8004030:	4baa      	ldr	r3, [pc, #680]	@ (80042dc <ModbusMap+0xd1c>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	4aaa      	ldr	r2, [pc, #680]	@ (80042e0 <ModbusMap+0xd20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d91e      	bls.n	8004078 <ModbusMap+0xab8>
 800403a:	4ba8      	ldr	r3, [pc, #672]	@ (80042dc <ModbusMap+0xd1c>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	4aa9      	ldr	r2, [pc, #676]	@ (80042e4 <ModbusMap+0xd24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d819      	bhi.n	8004078 <ModbusMap+0xab8>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8004044:	4ba8      	ldr	r3, [pc, #672]	@ (80042e8 <ModbusMap+0xd28>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	001a      	movs	r2, r3
 800404c:	4ba7      	ldr	r3, [pc, #668]	@ (80042ec <ModbusMap+0xd2c>)
 800404e:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8004050:	4ba6      	ldr	r3, [pc, #664]	@ (80042ec <ModbusMap+0xd2c>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4ba6      	ldr	r3, [pc, #664]	@ (80042f0 <ModbusMap+0xd30>)
 8004058:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 800405a:	4ba5      	ldr	r3, [pc, #660]	@ (80042f0 <ModbusMap+0xd30>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	001a      	movs	r2, r3
 8004060:	4ba4      	ldr	r3, [pc, #656]	@ (80042f4 <ModbusMap+0xd34>)
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f003 fab3 	bl	80075d0 <wreeprom>
					reePlantilla[eetimepa] = waux;
 800406a:	4ba1      	ldr	r3, [pc, #644]	@ (80042f0 <ModbusMap+0xd30>)
 800406c:	7819      	ldrb	r1, [r3, #0]
 800406e:	4ba2      	ldr	r3, [pc, #648]	@ (80042f8 <ModbusMap+0xd38>)
 8004070:	2249      	movs	r2, #73	@ 0x49
 8004072:	5499      	strb	r1, [r3, r2]
			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	e7fd      	b.n	8004074 <ModbusMap+0xab4>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8004078:	4b98      	ldr	r3, [pc, #608]	@ (80042dc <ModbusMap+0xd1c>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	4a9f      	ldr	r2, [pc, #636]	@ (80042fc <ModbusMap+0xd3c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d90f      	bls.n	80040a2 <ModbusMap+0xae2>
 8004082:	4b96      	ldr	r3, [pc, #600]	@ (80042dc <ModbusMap+0xd1c>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	4a9e      	ldr	r2, [pc, #632]	@ (8004300 <ModbusMap+0xd40>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d80a      	bhi.n	80040a2 <ModbusMap+0xae2>
					PNU_0x3106 = lowByte(_u16WriteVal);
 800408c:	4b96      	ldr	r3, [pc, #600]	@ (80042e8 <ModbusMap+0xd28>)
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	001a      	movs	r2, r3
 8004094:	4b9b      	ldr	r3, [pc, #620]	@ (8004304 <ModbusMap+0xd44>)
 8004096:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004098:	4b9b      	ldr	r3, [pc, #620]	@ (8004308 <ModbusMap+0xd48>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fb03 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 80040a2:	4b8e      	ldr	r3, [pc, #568]	@ (80042dc <ModbusMap+0xd1c>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	4a99      	ldr	r2, [pc, #612]	@ (800430c <ModbusMap+0xd4c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d90f      	bls.n	80040cc <ModbusMap+0xb0c>
 80040ac:	4b8b      	ldr	r3, [pc, #556]	@ (80042dc <ModbusMap+0xd1c>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	4a97      	ldr	r2, [pc, #604]	@ (8004310 <ModbusMap+0xd50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d80a      	bhi.n	80040cc <ModbusMap+0xb0c>
					PNU_0x3108 = lowByte(_u16WriteVal);
 80040b6:	4b8c      	ldr	r3, [pc, #560]	@ (80042e8 <ModbusMap+0xd28>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	001a      	movs	r2, r3
 80040be:	4b95      	ldr	r3, [pc, #596]	@ (8004314 <ModbusMap+0xd54>)
 80040c0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040c2:	4b91      	ldr	r3, [pc, #580]	@ (8004308 <ModbusMap+0xd48>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 faee 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 80040cc:	4b83      	ldr	r3, [pc, #524]	@ (80042dc <ModbusMap+0xd1c>)
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	4a91      	ldr	r2, [pc, #580]	@ (8004318 <ModbusMap+0xd58>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d90f      	bls.n	80040f6 <ModbusMap+0xb36>
 80040d6:	4b81      	ldr	r3, [pc, #516]	@ (80042dc <ModbusMap+0xd1c>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	4a90      	ldr	r2, [pc, #576]	@ (800431c <ModbusMap+0xd5c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d80a      	bhi.n	80040f6 <ModbusMap+0xb36>
					PNU_0x310A = lowByte(_u16WriteVal);
 80040e0:	4b81      	ldr	r3, [pc, #516]	@ (80042e8 <ModbusMap+0xd28>)
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	001a      	movs	r2, r3
 80040e8:	4b8d      	ldr	r3, [pc, #564]	@ (8004320 <ModbusMap+0xd60>)
 80040ea:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040ec:	4b86      	ldr	r3, [pc, #536]	@ (8004308 <ModbusMap+0xd48>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fad9 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 80040f6:	4b79      	ldr	r3, [pc, #484]	@ (80042dc <ModbusMap+0xd1c>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	4a8a      	ldr	r2, [pc, #552]	@ (8004324 <ModbusMap+0xd64>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d90f      	bls.n	8004120 <ModbusMap+0xb60>
 8004100:	4b76      	ldr	r3, [pc, #472]	@ (80042dc <ModbusMap+0xd1c>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	4a88      	ldr	r2, [pc, #544]	@ (8004328 <ModbusMap+0xd68>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d80a      	bhi.n	8004120 <ModbusMap+0xb60>
					PNU_0x310C = lowByte(_u16WriteVal);
 800410a:	4b77      	ldr	r3, [pc, #476]	@ (80042e8 <ModbusMap+0xd28>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	001a      	movs	r2, r3
 8004112:	4b86      	ldr	r3, [pc, #536]	@ (800432c <ModbusMap+0xd6c>)
 8004114:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <ModbusMap+0xd48>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fac4 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8004120:	4b6e      	ldr	r3, [pc, #440]	@ (80042dc <ModbusMap+0xd1c>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	4a82      	ldr	r2, [pc, #520]	@ (8004330 <ModbusMap+0xd70>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90f      	bls.n	800414a <ModbusMap+0xb8a>
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <ModbusMap+0xd1c>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	4a81      	ldr	r2, [pc, #516]	@ (8004334 <ModbusMap+0xd74>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d80a      	bhi.n	800414a <ModbusMap+0xb8a>
					PNU_0x310E = lowByte(_u16WriteVal);
 8004134:	4b6c      	ldr	r3, [pc, #432]	@ (80042e8 <ModbusMap+0xd28>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	001a      	movs	r2, r3
 800413c:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <ModbusMap+0xd78>)
 800413e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004140:	4b71      	ldr	r3, [pc, #452]	@ (8004308 <ModbusMap+0xd48>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 faaf 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 800414a:	4b64      	ldr	r3, [pc, #400]	@ (80042dc <ModbusMap+0xd1c>)
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	23c8      	movs	r3, #200	@ 0xc8
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	429a      	cmp	r2, r3
 8004154:	d310      	bcc.n	8004178 <ModbusMap+0xbb8>
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <ModbusMap+0xd1c>)
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	23c8      	movs	r3, #200	@ 0xc8
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	429a      	cmp	r2, r3
 8004160:	d80a      	bhi.n	8004178 <ModbusMap+0xbb8>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <ModbusMap+0xd28>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	001a      	movs	r2, r3
 800416a:	4b74      	ldr	r3, [pc, #464]	@ (800433c <ModbusMap+0xd7c>)
 800416c:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800416e:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <ModbusMap+0xd48>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0018      	movs	r0, r3
 8004174:	f000 fa98 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8004178:	4b58      	ldr	r3, [pc, #352]	@ (80042dc <ModbusMap+0xd1c>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	4a70      	ldr	r2, [pc, #448]	@ (8004340 <ModbusMap+0xd80>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90f      	bls.n	80041a2 <ModbusMap+0xbe2>
 8004182:	4b56      	ldr	r3, [pc, #344]	@ (80042dc <ModbusMap+0xd1c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	4a6f      	ldr	r2, [pc, #444]	@ (8004344 <ModbusMap+0xd84>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d80a      	bhi.n	80041a2 <ModbusMap+0xbe2>
					PNU_0x3202 = lowByte(_u16WriteVal);
 800418c:	4b56      	ldr	r3, [pc, #344]	@ (80042e8 <ModbusMap+0xd28>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	001a      	movs	r2, r3
 8004194:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <ModbusMap+0xd88>)
 8004196:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004198:	4b5b      	ldr	r3, [pc, #364]	@ (8004308 <ModbusMap+0xd48>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fa83 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 80041a2:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <ModbusMap+0xd1c>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4a69      	ldr	r2, [pc, #420]	@ (800434c <ModbusMap+0xd8c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d90f      	bls.n	80041cc <ModbusMap+0xc0c>
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <ModbusMap+0xd1c>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	4a67      	ldr	r2, [pc, #412]	@ (8004350 <ModbusMap+0xd90>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d80a      	bhi.n	80041cc <ModbusMap+0xc0c>
					PNU_0x3204 = lowByte(_u16WriteVal);
 80041b6:	4b4c      	ldr	r3, [pc, #304]	@ (80042e8 <ModbusMap+0xd28>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	001a      	movs	r2, r3
 80041be:	4b65      	ldr	r3, [pc, #404]	@ (8004354 <ModbusMap+0xd94>)
 80041c0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041c2:	4b51      	ldr	r3, [pc, #324]	@ (8004308 <ModbusMap+0xd48>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 fa6e 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 80041cc:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <ModbusMap+0xd1c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	4a61      	ldr	r2, [pc, #388]	@ (8004358 <ModbusMap+0xd98>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d90f      	bls.n	80041f6 <ModbusMap+0xc36>
 80041d6:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <ModbusMap+0xd1c>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4a60      	ldr	r2, [pc, #384]	@ (800435c <ModbusMap+0xd9c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d80a      	bhi.n	80041f6 <ModbusMap+0xc36>
					PNU_0x3206 = lowByte(_u16WriteVal);
 80041e0:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <ModbusMap+0xd28>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	001a      	movs	r2, r3
 80041e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004360 <ModbusMap+0xda0>)
 80041ea:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041ec:	4b46      	ldr	r3, [pc, #280]	@ (8004308 <ModbusMap+0xd48>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fa59 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <ModbusMap+0xd1c>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004364 <ModbusMap+0xda4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d90f      	bls.n	8004220 <ModbusMap+0xc60>
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <ModbusMap+0xd1c>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	4a58      	ldr	r2, [pc, #352]	@ (8004368 <ModbusMap+0xda8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d80a      	bhi.n	8004220 <ModbusMap+0xc60>
					PNU_0x3208 = lowByte(_u16WriteVal);
 800420a:	4b37      	ldr	r3, [pc, #220]	@ (80042e8 <ModbusMap+0xd28>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	001a      	movs	r2, r3
 8004212:	4b56      	ldr	r3, [pc, #344]	@ (800436c <ModbusMap+0xdac>)
 8004214:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004216:	4b3c      	ldr	r3, [pc, #240]	@ (8004308 <ModbusMap+0xd48>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fa44 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8004220:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <ModbusMap+0xd1c>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <ModbusMap+0xdb0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d90f      	bls.n	800424a <ModbusMap+0xc8a>
 800422a:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <ModbusMap+0xd1c>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	4a51      	ldr	r2, [pc, #324]	@ (8004374 <ModbusMap+0xdb4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d80a      	bhi.n	800424a <ModbusMap+0xc8a>
					PNU_0x320A = lowByte(_u16WriteVal);
 8004234:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <ModbusMap+0xd28>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	001a      	movs	r2, r3
 800423c:	4b4e      	ldr	r3, [pc, #312]	@ (8004378 <ModbusMap+0xdb8>)
 800423e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <ModbusMap+0xd48>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fa2f 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <ModbusMap+0xd1c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	4a4b      	ldr	r2, [pc, #300]	@ (800437c <ModbusMap+0xdbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d90f      	bls.n	8004274 <ModbusMap+0xcb4>
 8004254:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <ModbusMap+0xd1c>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	4a49      	ldr	r2, [pc, #292]	@ (8004380 <ModbusMap+0xdc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d80a      	bhi.n	8004274 <ModbusMap+0xcb4>
					PNU_0x320C = lowByte(_u16WriteVal);
 800425e:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <ModbusMap+0xd28>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	001a      	movs	r2, r3
 8004266:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <ModbusMap+0xdc4>)
 8004268:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <ModbusMap+0xd48>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fa1a 	bl	80046a8 <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <ModbusMap+0xd1c>)
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	2b2f      	cmp	r3, #47	@ 0x2f
 800427a:	d91a      	bls.n	80042b2 <ModbusMap+0xcf2>
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <ModbusMap+0xd1c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	2b30      	cmp	r3, #48	@ 0x30
 8004282:	d816      	bhi.n	80042b2 <ModbusMap+0xcf2>

					if (_u16WriteVal == 1){
 8004284:	4b18      	ldr	r3, [pc, #96]	@ (80042e8 <ModbusMap+0xd28>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d104      	bne.n	8004296 <ModbusMap+0xcd6>
						if(flagsa[3]){
 800428c:	4b3e      	ldr	r3, [pc, #248]	@ (8004388 <ModbusMap+0xdc8>)
 800428e:	78db      	ldrb	r3, [r3, #3]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d000      	beq.n	8004296 <ModbusMap+0xcd6>
							asm ("nop");
 8004294:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <ModbusMap+0xd28>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <ModbusMap+0xce8>
						if(flagsa[3]){
 800429e:	4b3a      	ldr	r3, [pc, #232]	@ (8004388 <ModbusMap+0xdc8>)
 80042a0:	78db      	ldrb	r3, [r3, #3]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d100      	bne.n	80042a8 <ModbusMap+0xce8>

						}
						else{
							asm ("nop");
 80042a6:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80042a8:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <ModbusMap+0xd48>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 f9fb 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <ModbusMap+0xd1c>)
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d800      	bhi.n	80042bc <ModbusMap+0xcfc>
 80042ba:	e07e      	b.n	80043ba <ModbusMap+0xdfa>
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <ModbusMap+0xd1c>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	2b31      	cmp	r3, #49	@ 0x31
 80042c2:	d900      	bls.n	80042c6 <ModbusMap+0xd06>
 80042c4:	e079      	b.n	80043ba <ModbusMap+0xdfa>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <ModbusMap+0xd28>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d167      	bne.n	800439e <ModbusMap+0xdde>
						if(GPIOR0[1]){
 80042ce:	4b2f      	ldr	r3, [pc, #188]	@ (800438c <ModbusMap+0xdcc>)
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d05c      	beq.n	8004390 <ModbusMap+0xdd0>
							asm ("nop");
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	e061      	b.n	800439e <ModbusMap+0xdde>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	2000037e 	.word	0x2000037e
 80042e0:	00003103 	.word	0x00003103
 80042e4:	00003104 	.word	0x00003104
 80042e8:	20000380 	.word	0x20000380
 80042ec:	200000ac 	.word	0x200000ac
 80042f0:	20000b66 	.word	0x20000b66
 80042f4:	0803f049 	.word	0x0803f049
 80042f8:	20000c9c 	.word	0x20000c9c
 80042fc:	00003105 	.word	0x00003105
 8004300:	00003106 	.word	0x00003106
 8004304:	200000ae 	.word	0x200000ae
 8004308:	200003c8 	.word	0x200003c8
 800430c:	00003107 	.word	0x00003107
 8004310:	00003108 	.word	0x00003108
 8004314:	200000b0 	.word	0x200000b0
 8004318:	00003109 	.word	0x00003109
 800431c:	0000310a 	.word	0x0000310a
 8004320:	200000b2 	.word	0x200000b2
 8004324:	0000310b 	.word	0x0000310b
 8004328:	0000310c 	.word	0x0000310c
 800432c:	200000b4 	.word	0x200000b4
 8004330:	0000310d 	.word	0x0000310d
 8004334:	0000310e 	.word	0x0000310e
 8004338:	200000b6 	.word	0x200000b6
 800433c:	20000b1e 	.word	0x20000b1e
 8004340:	00003201 	.word	0x00003201
 8004344:	00003202 	.word	0x00003202
 8004348:	20000b20 	.word	0x20000b20
 800434c:	00003203 	.word	0x00003203
 8004350:	00003204 	.word	0x00003204
 8004354:	20000b22 	.word	0x20000b22
 8004358:	00003205 	.word	0x00003205
 800435c:	00003206 	.word	0x00003206
 8004360:	20000b24 	.word	0x20000b24
 8004364:	00003207 	.word	0x00003207
 8004368:	00003208 	.word	0x00003208
 800436c:	20000b26 	.word	0x20000b26
 8004370:	00003209 	.word	0x00003209
 8004374:	0000320a 	.word	0x0000320a
 8004378:	20000b28 	.word	0x20000b28
 800437c:	0000320b 	.word	0x0000320b
 8004380:	0000320c 	.word	0x0000320c
 8004384:	20000b2a 	.word	0x20000b2a
 8004388:	20000b88 	.word	0x20000b88
 800438c:	20000bb4 	.word	0x20000bb4
						}
						else{
							flags_accMenu |=0x01;
 8004390:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <ModbusMap+0xed4>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4313      	orrs	r3, r2
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <ModbusMap+0xed4>)
 800439c:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 800439e:	4b3e      	ldr	r3, [pc, #248]	@ (8004498 <ModbusMap+0xed8>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <ModbusMap+0xdf0>
						if(GPIOR0[1]){
 80043a6:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <ModbusMap+0xedc>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d100      	bne.n	80043b0 <ModbusMap+0xdf0>
						}
						else{
							asm ("nop");
 80043ae:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80043b0:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <ModbusMap+0xee0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f977 	bl	80046a8 <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 80043ba:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <ModbusMap+0xee4>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	2b31      	cmp	r3, #49	@ 0x31
 80043c0:	d800      	bhi.n	80043c4 <ModbusMap+0xe04>
 80043c2:	e061      	b.n	8004488 <ModbusMap+0xec8>
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <ModbusMap+0xee4>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	2b32      	cmp	r3, #50	@ 0x32
 80043ca:	d900      	bls.n	80043ce <ModbusMap+0xe0e>
 80043cc:	e05c      	b.n	8004488 <ModbusMap+0xec8>

					if (_u16WriteVal == 1){
 80043ce:	4b32      	ldr	r3, [pc, #200]	@ (8004498 <ModbusMap+0xed8>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d108      	bne.n	80043e8 <ModbusMap+0xe28>
						if(GPIOR0[2]){
 80043d6:	4b31      	ldr	r3, [pc, #196]	@ (800449c <ModbusMap+0xedc>)
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <ModbusMap+0xe22>
							asm ("nop");
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	e002      	b.n	80043e8 <ModbusMap+0xe28>
						}
						else{
							flagsb[0] = 1;
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <ModbusMap+0xee8>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 80043e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <ModbusMap+0xed8>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <ModbusMap+0xe44>
						if(GPIOR0[2]){
 80043f0:	4b2a      	ldr	r3, [pc, #168]	@ (800449c <ModbusMap+0xedc>)
 80043f2:	789b      	ldrb	r3, [r3, #2]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <ModbusMap+0xe42>
							asm ("nop");
 80043f8:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 80043fa:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <ModbusMap+0xee8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e000      	b.n	8004404 <ModbusMap+0xe44>

						}
						else{
							asm ("nop");
 8004402:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004404:	4b26      	ldr	r3, [pc, #152]	@ (80044a0 <ModbusMap+0xee0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f94d 	bl	80046a8 <ModbusSlaveTransaction>
				}
			break;
 800440e:	e03b      	b.n	8004488 <ModbusMap+0xec8>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8004410:	2001      	movs	r0, #1
 8004412:	f000 fa73 	bl	80048fc <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8004416:	e038      	b.n	800448a <ModbusMap+0xeca>
				  break;
 8004418:	46c0      	nop			@ (mov r8, r8)
 800441a:	e036      	b.n	800448a <ModbusMap+0xeca>
					break;
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	e034      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	e032      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	e030      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	e02e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	e02c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	e02a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	e028      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004438:	46c0      	nop			@ (mov r8, r8)
 800443a:	e026      	b.n	800448a <ModbusMap+0xeca>
					break;
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	e024      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	e022      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	e020      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	e01e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	e01c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	e01a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	e018      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	e016      	b.n	800448a <ModbusMap+0xeca>
					break;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e014      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e012      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	e010      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	e00e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	e00c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	e00a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	e008      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	e006      	b.n	800448a <ModbusMap+0xeca>
					break;
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	e004      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	e002      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e000      	b.n	800448a <ModbusMap+0xeca>
			break;
 8004488:	46c0      	nop			@ (mov r8, r8)
}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b003      	add	sp, #12
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	20000c60 	.word	0x20000c60
 8004498:	20000380 	.word	0x20000380
 800449c:	20000bb4 	.word	0x20000bb4
 80044a0:	200003c8 	.word	0x200003c8
 80044a4:	2000037e 	.word	0x2000037e
 80044a8:	20000bf8 	.word	0x20000bf8

080044ac <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	221e      	movs	r2, #30
 80044bc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	4929      	ldr	r1, [pc, #164]	@ (8004568 <serialEvent_RS485+0xbc>)
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <serialEvent_RS485+0xc0>)
 80044c6:	0018      	movs	r0, r3
 80044c8:	f015 ff1e 	bl	801a308 <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <serialEvent_RS485+0xc4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	1cbb      	adds	r3, r7, #2
 80044d4:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80044d6:	1cba      	adds	r2, r7, #2
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	8812      	ldrh	r2, [r2, #0]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d23c      	bcs.n	800455c <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <serialEvent_RS485+0xc8>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4013      	ands	r3, r2
 80044ea:	d037      	beq.n	800455c <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80044ec:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80044ee:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <serialEvent_RS485+0xc0>)
 80044f0:	0018      	movs	r0, r3
 80044f2:	f015 ff75 	bl	801a3e0 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 80044f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <serialEvent_RS485+0xc8>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2210      	movs	r2, #16
 80044fc:	4013      	ands	r3, r2
 80044fe:	d003      	beq.n	8004508 <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8004500:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <serialEvent_RS485+0xc0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004508:	1dbb      	adds	r3, r7, #6
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e00c      	b.n	800452a <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	1dbb      	adds	r3, r7, #6
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4913      	ldr	r1, [pc, #76]	@ (8004568 <serialEvent_RS485+0xbc>)
 800451a:	5c89      	ldrb	r1, [r1, r2]
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <serialEvent_RS485+0xcc>)
 800451e:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004520:	1dbb      	adds	r3, r7, #6
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	3201      	adds	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	1dbb      	adds	r3, r7, #6
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	1cbb      	adds	r3, r7, #2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	211e      	movs	r1, #30
 8004534:	1acb      	subs	r3, r1, r3
 8004536:	429a      	cmp	r2, r3
 8004538:	d3ea      	bcc.n	8004510 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <serialEvent_RS485+0xcc>)
 8004540:	2100      	movs	r1, #0
 8004542:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	1cbb      	adds	r3, r7, #2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	1a8a      	subs	r2, r1, r2
 8004554:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <serialEvent_RS485+0xd0>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000ad8 	.word	0x20000ad8
 800456c:	200006d0 	.word	0x200006d0
 8004570:	20000824 	.word	0x20000824
 8004574:	40004c00 	.word	0x40004c00
 8004578:	20000af8 	.word	0x20000af8
 800457c:	20000378 	.word	0x20000378

08004580 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	000a      	movs	r2, r1
 800458a:	1cfb      	adds	r3, r7, #3
 800458c:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 800458e:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8004590:	1cfb      	adds	r3, r7, #3
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <SerializeDMAArray_RS485+0x38>)
 8004598:	0018      	movs	r0, r3
 800459a:	f017 fc43 	bl	801be24 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 800459e:	1cfb      	adds	r3, r7, #3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4904      	ldr	r1, [pc, #16]	@ (80045b8 <SerializeDMAArray_RS485+0x38>)
 80045a6:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <SerializeDMAArray_RS485+0x3c>)
 80045a8:	0018      	movs	r0, r3
 80045aa:	f015 fe1b 	bl	801a1e4 <HAL_UART_Transmit_DMA>

}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	20000ab8 	.word	0x20000ab8
 80045bc:	200006d0 	.word	0x200006d0

080045c0 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	1d7b      	adds	r3, r7, #5
 80045ce:	1c0a      	adds	r2, r1, #0
 80045d0:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 80045d2:	1d7b      	adds	r3, r7, #5
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b299      	uxth	r1, r3
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	1dba      	adds	r2, r7, #6
 80045dc:	8812      	ldrh	r2, [r2, #0]
 80045de:	404a      	eors	r2, r1
 80045e0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e015      	b.n	8004614 <crc16_update+0x54>
{
if (crc & 1)
 80045e8:	1dbb      	adds	r3, r7, #6
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d008      	beq.n	8004604 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 80045f2:	1dbb      	adds	r3, r7, #6
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	1dbb      	adds	r3, r7, #6
 80045fc:	490a      	ldr	r1, [pc, #40]	@ (8004628 <crc16_update+0x68>)
 80045fe:	404a      	eors	r2, r1
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e004      	b.n	800460e <crc16_update+0x4e>
else
  crc = (crc >> 1);
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	1dba      	adds	r2, r7, #6
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b07      	cmp	r3, #7
 8004618:	dde6      	ble.n	80045e8 <crc16_update+0x28>
}

return crc;
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	881b      	ldrh	r3, [r3, #0]
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	ffffa001 	.word	0xffffa001

0800462c <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	0002      	movs	r2, r0
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <ModbusMaster_begin+0x28>)
 8004646:	1dfa      	adds	r2, r7, #7
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <ModbusMaster_begin+0x2c>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8004652:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <ModbusMaster_begin+0x30>)
 8004654:	2200      	movs	r2, #0
 8004656:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000379 	.word	0x20000379
 8004664:	200003c4 	.word	0x200003c4
 8004668:	200003c6 	.word	0x200003c6

0800466c <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	0002      	movs	r2, r0
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	1c0a      	adds	r2, r1, #0
 800467c:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b1f      	cmp	r3, #31
 8004684:	d808      	bhi.n	8004698 <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 8004686:	1dfb      	adds	r3, r7, #7
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <ModbusSlave_setTransmitBuffer+0x38>)
 800468c:	0052      	lsls	r2, r2, #1
 800468e:	1d39      	adds	r1, r7, #4
 8004690:	8809      	ldrh	r1, [r1, #0]
 8004692:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	20000384 	.word	0x20000384

080046a8 <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	b0c5      	sub	sp, #276	@ 0x114
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	0002      	movs	r2, r0
 80046b0:	4b89      	ldr	r3, [pc, #548]	@ (80048d8 <ModbusSlaveTransaction+0x230>)
 80046b2:	2588      	movs	r5, #136	@ 0x88
 80046b4:	006d      	lsls	r5, r5, #1
 80046b6:	195b      	adds	r3, r3, r5
 80046b8:	19db      	adds	r3, r3, r7
 80046ba:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 80046bc:	2410      	movs	r4, #16
 80046be:	34ff      	adds	r4, #255	@ 0xff
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <ModbusSlaveTransaction+0x234>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	2104      	movs	r1, #4
 80046cc:	0018      	movs	r0, r3
 80046ce:	f00f fef2 	bl	80144b6 <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046d2:	0020      	movs	r0, r4
 80046d4:	183b      	adds	r3, r7, r0
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	183a      	adds	r2, r7, r0
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	7011      	strb	r1, [r2, #0]
 80046de:	001a      	movs	r2, r3
 80046e0:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <ModbusSlaveTransaction+0x238>)
 80046e2:	7819      	ldrb	r1, [r3, #0]
 80046e4:	4b7f      	ldr	r3, [pc, #508]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80046e6:	195b      	adds	r3, r3, r5
 80046e8:	19db      	adds	r3, r3, r7
 80046ea:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046ec:	183b      	adds	r3, r7, r0
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	183a      	adds	r2, r7, r0
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	7011      	strb	r1, [r2, #0]
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b7b      	ldr	r3, [pc, #492]	@ (80048e8 <ModbusSlaveTransaction+0x240>)
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	4b79      	ldr	r3, [pc, #484]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80046fe:	195b      	adds	r3, r3, r5
 8004700:	19db      	adds	r3, r3, r7
 8004702:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 8004704:	4b74      	ldr	r3, [pc, #464]	@ (80048d8 <ModbusSlaveTransaction+0x230>)
 8004706:	195b      	adds	r3, r3, r5
 8004708:	19db      	adds	r3, r3, r7
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	dc02      	bgt.n	8004716 <ModbusSlaveTransaction+0x6e>
 8004710:	2b03      	cmp	r3, #3
 8004712:	da03      	bge.n	800471c <ModbusSlaveTransaction+0x74>
 8004714:	e079      	b.n	800480a <ModbusSlaveTransaction+0x162>
 8004716:	2b06      	cmp	r3, #6
 8004718:	d051      	beq.n	80047be <ModbusSlaveTransaction+0x116>
 800471a:	e076      	b.n	800480a <ModbusSlaveTransaction+0x162>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 800471c:	4b73      	ldr	r3, [pc, #460]	@ (80048ec <ModbusSlaveTransaction+0x244>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b2d9      	uxtb	r1, r3
 8004722:	2210      	movs	r2, #16
 8004724:	32ff      	adds	r2, #255	@ 0xff
 8004726:	18bb      	adds	r3, r7, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	18ba      	adds	r2, r7, r2
 800472c:	1c58      	adds	r0, r3, #1
 800472e:	7010      	strb	r0, [r2, #0]
 8004730:	001a      	movs	r2, r3
 8004732:	1c0b      	adds	r3, r1, #0
 8004734:	18db      	adds	r3, r3, r3
 8004736:	b2d9      	uxtb	r1, r3
 8004738:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800473a:	2088      	movs	r0, #136	@ 0x88
 800473c:	0040      	lsls	r0, r0, #1
 800473e:	181b      	adds	r3, r3, r0
 8004740:	19db      	adds	r3, r3, r7
 8004742:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004744:	2387      	movs	r3, #135	@ 0x87
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e02c      	b.n	80047aa <ModbusSlaveTransaction+0x102>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8004750:	2487      	movs	r4, #135	@ 0x87
 8004752:	0064      	lsls	r4, r4, #1
 8004754:	193b      	adds	r3, r7, r4
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	4b65      	ldr	r3, [pc, #404]	@ (80048f0 <ModbusSlaveTransaction+0x248>)
 800475a:	0052      	lsls	r2, r2, #1
 800475c:	5ad3      	ldrh	r3, [r2, r3]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b299      	uxth	r1, r3
 8004762:	2510      	movs	r5, #16
 8004764:	35ff      	adds	r5, #255	@ 0xff
 8004766:	197b      	adds	r3, r7, r5
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	197a      	adds	r2, r7, r5
 800476c:	1c58      	adds	r0, r3, #1
 800476e:	7010      	strb	r0, [r2, #0]
 8004770:	001a      	movs	r2, r3
 8004772:	b2c9      	uxtb	r1, r1
 8004774:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 8004776:	2688      	movs	r6, #136	@ 0x88
 8004778:	0076      	lsls	r6, r6, #1
 800477a:	199b      	adds	r3, r3, r6
 800477c:	19db      	adds	r3, r3, r7
 800477e:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8004780:	193b      	adds	r3, r7, r4
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	4b5a      	ldr	r3, [pc, #360]	@ (80048f0 <ModbusSlaveTransaction+0x248>)
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	5ad1      	ldrh	r1, [r2, r3]
 800478a:	197b      	adds	r3, r7, r5
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	197a      	adds	r2, r7, r5
 8004790:	1c58      	adds	r0, r3, #1
 8004792:	7010      	strb	r0, [r2, #0]
 8004794:	001a      	movs	r2, r3
 8004796:	b2c9      	uxtb	r1, r1
 8004798:	4b52      	ldr	r3, [pc, #328]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800479a:	199b      	adds	r3, r3, r6
 800479c:	19db      	adds	r3, r3, r7
 800479e:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	3201      	adds	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	4b50      	ldr	r3, [pc, #320]	@ (80048ec <ModbusSlaveTransaction+0x244>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2287      	movs	r2, #135	@ 0x87
 80047b2:	0052      	lsls	r2, r2, #1
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d3c9      	bcc.n	8004750 <ModbusSlaveTransaction+0xa8>
      }
		break;
 80047bc:	e025      	b.n	800480a <ModbusSlaveTransaction+0x162>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 80047be:	2387      	movs	r3, #135	@ 0x87
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e018      	b.n	80047fc <ModbusSlaveTransaction+0x154>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 80047ca:	2487      	movs	r4, #135	@ 0x87
 80047cc:	0064      	lsls	r4, r4, #1
 80047ce:	193b      	adds	r3, r7, r4
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	2110      	movs	r1, #16
 80047d4:	31ff      	adds	r1, #255	@ 0xff
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	1879      	adds	r1, r7, r1
 80047dc:	1c58      	adds	r0, r3, #1
 80047de:	7008      	strb	r0, [r1, #0]
 80047e0:	0019      	movs	r1, r3
 80047e2:	4b44      	ldr	r3, [pc, #272]	@ (80048f4 <ModbusSlaveTransaction+0x24c>)
 80047e4:	5c9a      	ldrb	r2, [r3, r2]
 80047e6:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80047e8:	2088      	movs	r0, #136	@ 0x88
 80047ea:	0040      	lsls	r0, r0, #1
 80047ec:	181b      	adds	r3, r3, r0
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 80047f2:	193b      	adds	r3, r7, r4
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	3201      	adds	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	2387      	movs	r3, #135	@ 0x87
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d9e0      	bls.n	80047ca <ModbusSlaveTransaction+0x122>
			}
		break;
 8004808:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 800480a:	2386      	movs	r3, #134	@ 0x86
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2201      	movs	r2, #1
 8004812:	4252      	negs	r2, r2
 8004814:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8004816:	2387      	movs	r3, #135	@ 0x87
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e019      	b.n	8004856 <ModbusSlaveTransaction+0x1ae>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8004822:	2587      	movs	r5, #135	@ 0x87
 8004824:	006d      	lsls	r5, r5, #1
 8004826:	197b      	adds	r3, r7, r5
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800482c:	2188      	movs	r1, #136	@ 0x88
 800482e:	0049      	lsls	r1, r1, #1
 8004830:	1852      	adds	r2, r2, r1
 8004832:	19d2      	adds	r2, r2, r7
 8004834:	5cd2      	ldrb	r2, [r2, r3]
 8004836:	2386      	movs	r3, #134	@ 0x86
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	18fc      	adds	r4, r7, r3
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	0011      	movs	r1, r2
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff febc 	bl	80045c0 <crc16_update>
 8004848:	0003      	movs	r3, r0
 800484a:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800484c:	197b      	adds	r3, r7, r5
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	197b      	adds	r3, r7, r5
 8004852:	3201      	adds	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	2387      	movs	r3, #135	@ 0x87
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	18fa      	adds	r2, r7, r3
 800485c:	2010      	movs	r0, #16
 800485e:	30ff      	adds	r0, #255	@ 0xff
 8004860:	183b      	adds	r3, r7, r0
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d3db      	bcc.n	8004822 <ModbusSlaveTransaction+0x17a>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 800486a:	183b      	adds	r3, r7, r0
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	183a      	adds	r2, r7, r0
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	7011      	strb	r1, [r2, #0]
 8004874:	001a      	movs	r2, r3
 8004876:	2486      	movs	r4, #134	@ 0x86
 8004878:	0064      	lsls	r4, r4, #1
 800487a:	193b      	adds	r3, r7, r4
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b2d9      	uxtb	r1, r3
 8004880:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 8004882:	2588      	movs	r5, #136	@ 0x88
 8004884:	006d      	lsls	r5, r5, #1
 8004886:	195b      	adds	r3, r3, r5
 8004888:	19db      	adds	r3, r3, r7
 800488a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 800488c:	193b      	adds	r3, r7, r4
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b299      	uxth	r1, r3
 8004894:	183b      	adds	r3, r7, r0
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	0004      	movs	r4, r0
 800489a:	183a      	adds	r2, r7, r0
 800489c:	1c58      	adds	r0, r3, #1
 800489e:	7010      	strb	r0, [r2, #0]
 80048a0:	001a      	movs	r2, r3
 80048a2:	b2c9      	uxtb	r1, r1
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80048a6:	195b      	adds	r3, r3, r5
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4a0c      	ldr	r2, [pc, #48]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80048b2:	1952      	adds	r2, r2, r5
 80048b4:	19d2      	adds	r2, r2, r7
 80048b6:	2100      	movs	r1, #0
 80048b8:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 80048ba:	193b      	adds	r3, r7, r4
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	230c      	movs	r3, #12
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff fe5b 	bl	8004580 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <ModbusSlaveTransaction+0x250>)
 80048cc:	2246      	movs	r2, #70	@ 0x46
 80048ce:	801a      	strh	r2, [r3, #0]


}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b045      	add	sp, #276	@ 0x114
 80048d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d8:	fffffef7 	.word	0xfffffef7
 80048dc:	50000800 	.word	0x50000800
 80048e0:	20000379 	.word	0x20000379
 80048e4:	fffffefc 	.word	0xfffffefc
 80048e8:	200003c8 	.word	0x200003c8
 80048ec:	2000037c 	.word	0x2000037c
 80048f0:	20000384 	.word	0x20000384
 80048f4:	20000af8 	.word	0x20000af8
 80048f8:	2000114e 	.word	0x2000114e

080048fc <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 80048fc:	b5b0      	push	{r4, r5, r7, lr}
 80048fe:	b0c4      	sub	sp, #272	@ 0x110
 8004900:	af00      	add	r7, sp, #0
 8004902:	0002      	movs	r2, r0
 8004904:	4b51      	ldr	r3, [pc, #324]	@ (8004a4c <ModbusSlaveExceptionTransaction+0x150>)
 8004906:	2588      	movs	r5, #136	@ 0x88
 8004908:	006d      	lsls	r5, r5, #1
 800490a:	195b      	adds	r3, r3, r5
 800490c:	19db      	adds	r3, r3, r7
 800490e:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8004910:	240c      	movs	r4, #12
 8004912:	34ff      	adds	r4, #255	@ 0xff
 8004914:	193b      	adds	r3, r7, r4
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 800491a:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 800491c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a50 <ModbusSlaveExceptionTransaction+0x154>)
 800491e:	2214      	movs	r2, #20
 8004920:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8004922:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <ModbusSlaveExceptionTransaction+0x158>)
 8004924:	2201      	movs	r2, #1
 8004926:	2104      	movs	r1, #4
 8004928:	0018      	movs	r0, r3
 800492a:	f00f fdc4 	bl	80144b6 <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 800492e:	193b      	adds	r3, r7, r4
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	193a      	adds	r2, r7, r4
 8004934:	1c59      	adds	r1, r3, #1
 8004936:	7011      	strb	r1, [r2, #0]
 8004938:	001a      	movs	r2, r3
 800493a:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <ModbusSlaveExceptionTransaction+0x15c>)
 800493c:	7819      	ldrb	r1, [r3, #0]
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004940:	195b      	adds	r3, r3, r5
 8004942:	19db      	adds	r3, r3, r7
 8004944:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004946:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <ModbusSlaveExceptionTransaction+0x164>)
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	193b      	adds	r3, r7, r4
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	1939      	adds	r1, r7, r4
 8004950:	1c58      	adds	r0, r3, #1
 8004952:	7008      	strb	r0, [r1, #0]
 8004954:	0019      	movs	r1, r3
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	425b      	negs	r3, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004960:	195b      	adds	r3, r3, r5
 8004962:	19db      	adds	r3, r3, r7
 8004964:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004966:	193b      	adds	r3, r7, r4
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	193a      	adds	r2, r7, r4
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	7011      	strb	r1, [r2, #0]
 8004970:	0019      	movs	r1, r3
 8004972:	4b3a      	ldr	r3, [pc, #232]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004974:	195b      	adds	r3, r3, r5
 8004976:	19db      	adds	r3, r3, r7
 8004978:	4a34      	ldr	r2, [pc, #208]	@ (8004a4c <ModbusSlaveExceptionTransaction+0x150>)
 800497a:	1952      	adds	r2, r2, r5
 800497c:	19d2      	adds	r2, r2, r7
 800497e:	7812      	ldrb	r2, [r2, #0]
 8004980:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8004982:	2386      	movs	r3, #134	@ 0x86
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2201      	movs	r2, #1
 800498a:	4252      	negs	r2, r2
 800498c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800498e:	2310      	movs	r3, #16
 8004990:	33ff      	adds	r3, #255	@ 0xff
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e019      	b.n	80049ce <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 800499a:	2510      	movs	r5, #16
 800499c:	35ff      	adds	r5, #255	@ 0xff
 800499e:	197b      	adds	r3, r7, r5
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 80049a4:	2188      	movs	r1, #136	@ 0x88
 80049a6:	0049      	lsls	r1, r1, #1
 80049a8:	1852      	adds	r2, r2, r1
 80049aa:	19d2      	adds	r2, r2, r7
 80049ac:	5cd2      	ldrb	r2, [r2, r3]
 80049ae:	2386      	movs	r3, #134	@ 0x86
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	18fc      	adds	r4, r7, r3
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fe00 	bl	80045c0 <crc16_update>
 80049c0:	0003      	movs	r3, r0
 80049c2:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80049c4:	197b      	adds	r3, r7, r5
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	197b      	adds	r3, r7, r5
 80049ca:	3201      	adds	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	2310      	movs	r3, #16
 80049d0:	33ff      	adds	r3, #255	@ 0xff
 80049d2:	18fa      	adds	r2, r7, r3
 80049d4:	200c      	movs	r0, #12
 80049d6:	30ff      	adds	r0, #255	@ 0xff
 80049d8:	183b      	adds	r3, r7, r0
 80049da:	7812      	ldrb	r2, [r2, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3db      	bcc.n	800499a <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80049e2:	183b      	adds	r3, r7, r0
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	183a      	adds	r2, r7, r0
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	7011      	strb	r1, [r2, #0]
 80049ec:	001a      	movs	r2, r3
 80049ee:	2486      	movs	r4, #134	@ 0x86
 80049f0:	0064      	lsls	r4, r4, #1
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b2d9      	uxtb	r1, r3
 80049f8:	4b18      	ldr	r3, [pc, #96]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 80049fa:	2588      	movs	r5, #136	@ 0x88
 80049fc:	006d      	lsls	r5, r5, #1
 80049fe:	195b      	adds	r3, r3, r5
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8004a04:	193b      	adds	r3, r7, r4
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	183b      	adds	r3, r7, r0
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	0004      	movs	r4, r0
 8004a12:	183a      	adds	r2, r7, r0
 8004a14:	1c58      	adds	r0, r3, #1
 8004a16:	7010      	strb	r0, [r2, #0]
 8004a18:	001a      	movs	r2, r3
 8004a1a:	b2c9      	uxtb	r1, r1
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004a1e:	195b      	adds	r3, r3, r5
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004a2a:	1952      	adds	r2, r2, r5
 8004a2c:	19d2      	adds	r2, r2, r7
 8004a2e:	2100      	movs	r1, #0
 8004a30:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8004a32:	193b      	adds	r3, r7, r4
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	2308      	movs	r3, #8
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7ff fd9f 	bl	8004580 <SerializeDMAArray_RS485>

}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b044      	add	sp, #272	@ 0x110
 8004a48:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	fffffef7 	.word	0xfffffef7
 8004a50:	20001150 	.word	0x20001150
 8004a54:	50000800 	.word	0x50000800
 8004a58:	20000379 	.word	0x20000379
 8004a5c:	fffffef8 	.word	0xfffffef8
 8004a60:	200003c8 	.word	0x200003c8

08004a64 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	b0c2      	sub	sp, #264	@ 0x108
 8004a68:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 8004a6a:	1cfb      	adds	r3, r7, #3
 8004a6c:	33ff      	adds	r3, #255	@ 0xff
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	33ff      	adds	r3, #255	@ 0xff
 8004a76:	22ff      	movs	r2, #255	@ 0xff
 8004a78:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 8004a7a:	1cfc      	adds	r4, r7, #3
 8004a7c:	34ff      	adds	r4, #255	@ 0xff
 8004a7e:	f7ff fd15 	bl	80044ac <serialEvent_RS485>
 8004a82:	0003      	movs	r3, r0
 8004a84:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8004a86:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8004a88:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <ModbusSlavePool+0x190>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <ModbusSlavePool+0x30>
 8004a92:	e0a8      	b.n	8004be6 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8004a94:	4b57      	ldr	r3, [pc, #348]	@ (8004bf4 <ModbusSlavePool+0x190>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	33ff      	adds	r3, #255	@ 0xff
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8004aa2:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	4b55      	ldr	r3, [pc, #340]	@ (8004bfc <ModbusSlavePool+0x198>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d000      	beq.n	8004ab0 <ModbusSlavePool+0x4c>
 8004aae:	e091      	b.n	8004bd4 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8004ab0:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004ab2:	785a      	ldrb	r2, [r3, #1]
 8004ab4:	4b52      	ldr	r3, [pc, #328]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004ab6:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8004ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	001a      	movs	r2, r3
 8004abe:	237f      	movs	r3, #127	@ 0x7f
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	33ff      	adds	r3, #255	@ 0xff
 8004ace:	22e1      	movs	r2, #225	@ 0xe1
 8004ad0:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 8004ad2:	1d7b      	adds	r3, r7, #5
 8004ad4:	33ff      	adds	r3, #255	@ 0xff
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4252      	negs	r2, r2
 8004ada:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004adc:	2308      	movs	r3, #8
 8004ade:	33ff      	adds	r3, #255	@ 0xff
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e015      	b.n	8004b14 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 8004ae8:	2508      	movs	r5, #8
 8004aea:	35ff      	adds	r5, #255	@ 0xff
 8004aec:	197b      	adds	r3, r7, r5
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4a41      	ldr	r2, [pc, #260]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004af2:	5cd2      	ldrb	r2, [r2, r3]
 8004af4:	1d7c      	adds	r4, r7, #5
 8004af6:	34ff      	adds	r4, #255	@ 0xff
 8004af8:	1d7b      	adds	r3, r7, #5
 8004afa:	33ff      	adds	r3, #255	@ 0xff
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	0011      	movs	r1, r2
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fd5d 	bl	80045c0 <crc16_update>
 8004b06:	0003      	movs	r3, r0
 8004b08:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004b0a:	197b      	adds	r3, r7, r5
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	197b      	adds	r3, r7, r5
 8004b10:	3201      	adds	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	2308      	movs	r3, #8
 8004b16:	33ff      	adds	r3, #255	@ 0xff
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	1cfb      	adds	r3, r7, #3
 8004b1e:	33ff      	adds	r3, #255	@ 0xff
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3b02      	subs	r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	dbdf      	blt.n	8004ae8 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	33ff      	adds	r3, #255	@ 0xff
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <ModbusSlavePool+0x10a>
 8004b32:	1d7b      	adds	r3, r7, #5
 8004b34:	33ff      	adds	r3, #255	@ 0xff
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	1cfb      	adds	r3, r7, #3
 8004b3c:	33ff      	adds	r3, #255	@ 0xff
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3b02      	subs	r3, #2
 8004b42:	492d      	ldr	r1, [pc, #180]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d10d      	bne.n	8004b66 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 8004b4a:	1d7b      	adds	r3, r7, #5
 8004b4c:	33ff      	adds	r3, #255	@ 0xff
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	1cfb      	adds	r3, r7, #3
 8004b58:	33ff      	adds	r3, #255	@ 0xff
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	4926      	ldr	r1, [pc, #152]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d003      	beq.n	8004b6e <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	33ff      	adds	r3, #255	@ 0xff
 8004b6a:	22e3      	movs	r2, #227	@ 0xe3
 8004b6c:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 8004b6e:	4b24      	ldr	r3, [pc, #144]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d019      	beq.n	8004baa <ModbusSlavePool+0x146>
 8004b76:	dc36      	bgt.n	8004be6 <ModbusSlavePool+0x182>
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	dc34      	bgt.n	8004be6 <ModbusSlavePool+0x182>
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	db31      	blt.n	8004be4 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004b80:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b8a:	78d2      	ldrb	r2, [r2, #3]
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <ModbusSlavePool+0x1a0>)
 8004b92:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8004b94:	4b18      	ldr	r3, [pc, #96]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b9e:	7952      	ldrb	r2, [r2, #5]
 8004ba0:	189b      	adds	r3, r3, r2
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <ModbusSlavePool+0x1a4>)
 8004ba6:	801a      	strh	r2, [r3, #0]
				break;
 8004ba8:	e01d      	b.n	8004be6 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bac:	789b      	ldrb	r3, [r3, #2]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bb4:	78d2      	ldrb	r2, [r2, #3]
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <ModbusSlavePool+0x1a8>)
 8004bbc:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bc0:	791b      	ldrb	r3, [r3, #4]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bc8:	7952      	ldrb	r2, [r2, #5]
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <ModbusSlavePool+0x1ac>)
 8004bd0:	801a      	strh	r2, [r3, #0]
				break;
 8004bd2:	e008      	b.n	8004be6 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	33ff      	adds	r3, #255	@ 0xff
 8004bd8:	22e0      	movs	r2, #224	@ 0xe0
 8004bda:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <ModbusSlavePool+0x1b0>)
 8004bde:	2214      	movs	r2, #20
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	e000      	b.n	8004be6 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 8004be4:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	33ff      	adds	r3, #255	@ 0xff
 8004bea:	781b      	ldrb	r3, [r3, #0]
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b042      	add	sp, #264	@ 0x108
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf4:	20000378 	.word	0x20000378
 8004bf8:	20000af8 	.word	0x20000af8
 8004bfc:	20000379 	.word	0x20000379
 8004c00:	200003c8 	.word	0x200003c8
 8004c04:	2000037a 	.word	0x2000037a
 8004c08:	2000037c 	.word	0x2000037c
 8004c0c:	2000037e 	.word	0x2000037e
 8004c10:	20000380 	.word	0x20000380
 8004c14:	20001150 	.word	0x20001150

08004c18 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 8004c28:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <AtParsing_Ble+0x3c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8004c30:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <AtParsing_Ble+0x3c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <AtParsing_Ble+0x40>)
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f017 f89d 	bl	801bd7c <strstr>
 8004c42:	1e03      	subs	r3, r0, #0
 8004c44:	d001      	beq.n	8004c4a <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 8004c4a:	697b      	ldr	r3, [r7, #20]
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	200003ca 	.word	0x200003ca
 8004c58:	20000a28 	.word	0x20000a28

08004c5c <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8004c64:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fb fa4d 	bl	8000108 <strlen>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	240e      	movs	r4, #14
 8004c72:	193b      	adds	r3, r7, r4
 8004c74:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <SerializeString_Ble+0x40>)
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f017 f8d0 	bl	801be24 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004c84:	193b      	adds	r3, r7, r4
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <SerializeString_Ble+0x40>)
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SerializeString_Ble+0x44>)
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f015 faa9 	bl	801a1e4 <HAL_UART_Transmit_DMA>
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b005      	add	sp, #20
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	20000908 	.word	0x20000908
 8004ca0:	2000063c 	.word	0x2000063c

08004ca4 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	000a      	movs	r2, r1
 8004cae:	1cfb      	adds	r3, r7, #3
 8004cb0:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8004cb2:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8004cb4:	210e      	movs	r1, #14
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	1cfa      	adds	r2, r7, #3
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <SerializeString2+0x4c>)
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f017 f8ac 	bl	801be24 <memcpy>
    while(huart2.gState == HAL_UART_STATE_BUSY_TX);
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <SerializeString2+0x50>)
 8004cd0:	2288      	movs	r2, #136	@ 0x88
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2b21      	cmp	r3, #33	@ 0x21
 8004cd6:	d0fa      	beq.n	8004cce <SerializeString2+0x2a>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004cd8:	230e      	movs	r3, #14
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	4904      	ldr	r1, [pc, #16]	@ (8004cf0 <SerializeString2+0x4c>)
 8004ce0:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SerializeString2+0x50>)
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f015 fa7e 	bl	801a1e4 <HAL_UART_Transmit_DMA>
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b004      	add	sp, #16
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000908 	.word	0x20000908
 8004cf4:	2000063c 	.word	0x2000063c

08004cf8 <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	2290      	movs	r2, #144	@ 0x90
 8004d02:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	4929      	ldr	r1, [pc, #164]	@ (8004db0 <serialEvent_Ble+0xb8>)
 8004d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f015 fafb 	bl	801a308 <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d12:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <serialEvent_Ble+0xc0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	1cbb      	adds	r3, r7, #2
 8004d1a:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8004d1c:	1cba      	adds	r2, r7, #2
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d23f      	bcs.n	8004da8 <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 8004d28:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <serialEvent_Ble+0xc4>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d03a      	beq.n	8004da8 <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 8004d32:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d34:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <serialEvent_Ble+0xc0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	1cbb      	adds	r3, r7, #2
 8004d3c:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8004d3e:	003b      	movs	r3, r7
 8004d40:	1d39      	adds	r1, r7, #4
 8004d42:	1cba      	adds	r2, r7, #2
 8004d44:	8809      	ldrh	r1, [r1, #0]
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	1a8a      	subs	r2, r1, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f015 fb46 	bl	801a3e0 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <serialEvent_Ble+0xc4>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2210      	movs	r2, #16
 8004d64:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	e00c      	b.n	8004d88 <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	490e      	ldr	r1, [pc, #56]	@ (8004db0 <serialEvent_Ble+0xb8>)
 8004d78:	5c89      	ldrb	r1, [r1, r2]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <serialEvent_Ble+0xc8>)
 8004d7c:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d7e:	1dfb      	adds	r3, r7, #7
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	3201      	adds	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	1cbb      	adds	r3, r7, #2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	2190      	movs	r1, #144	@ 0x90
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3ea      	bcc.n	8004d6e <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	@ (8004dc0 <serialEvent_Ble+0xc8>)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <serialEvent_Ble+0xcc>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
			}

		}
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000998 	.word	0x20000998
 8004db4:	2000063c 	.word	0x2000063c
 8004db8:	20000764 	.word	0x20000764
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	20000a28 	.word	0x20000a28
 8004dc4:	200003ca 	.word	0x200003ca

08004dc8 <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 8004dda:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	4053      	eors	r3, r2
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 8004de8:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 8004dee:	f004 fcb9 	bl	8009764 <millis>
 8004df2:	0003      	movs	r3, r0
 8004df4:	001a      	movs	r2, r3
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <SendATreply_Ble+0x78>)
 8004df8:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff ff2d 	bl	8004c5c <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 8004e02:	f7ff ff79 	bl	8004cf8 <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ff03 	bl	8004c18 <AtParsing_Ble>
 8004e12:	0003      	movs	r3, r0
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 8004e16:	f004 fca5 	bl	8009764 <millis>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <SendATreply_Ble+0x78>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d802      	bhi.n	8004e30 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 8004e2a:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b00a      	add	sp, #40	@ 0x28
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	200003c9 	.word	0x200003c9
 8004e40:	200003cc 	.word	0x200003cc

08004e44 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	//if (findLastValue((uint32_t)&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
		ConfigBLE_Ble ();
 8004e48:	f000 f810 	bl	8004e6c <ConfigBLE_Ble>
	//}
	//else{
	//	if (tick_1s == 1){
			BluetoothState = 2;
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <SetUpBluetooth_Ble+0x20>)
 8004e4e:	2202      	movs	r2, #2
 8004e50:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004e52:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <SetUpBluetooth_Ble+0x24>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	2140      	movs	r1, #64	@ 0x40
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f00f fb2c 	bl	80144b6 <HAL_GPIO_WritePin>
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
	//	}
	//}
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	2000004c 	.word	0x2000004c
 8004e68:	50000800 	.word	0x50000800

08004e6c <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 8004e72:	4b23      	ldr	r3, [pc, #140]	@ (8004f00 <ConfigBLE_Ble+0x94>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8004e7a:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <ConfigBLE_Ble+0x98>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2140      	movs	r1, #64	@ 0x40
 8004e80:	0018      	movs	r0, r3
 8004e82:	f00f fb18 	bl	80144b6 <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8004e86:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <ConfigBLE_Ble+0x9c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d002      	beq.n	8004e94 <ConfigBLE_Ble+0x28>
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d014      	beq.n	8004ebc <ConfigBLE_Ble+0x50>
 8004e92:	e027      	b.n	8004ee4 <ConfigBLE_Ble+0x78>
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004e94:	4b1c      	ldr	r3, [pc, #112]	@ (8004f08 <ConfigBLE_Ble+0x9c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	001a      	movs	r2, r3
 8004e9a:	491c      	ldr	r1, [pc, #112]	@ (8004f0c <ConfigBLE_Ble+0xa0>)
 8004e9c:	481c      	ldr	r0, [pc, #112]	@ (8004f10 <ConfigBLE_Ble+0xa4>)
 8004e9e:	23fa      	movs	r3, #250	@ 0xfa
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f7ff ff8f 	bl	8004dc8 <SendATreply_Ble>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	4b16      	ldr	r3, [pc, #88]	@ (8004f08 <ConfigBLE_Ble+0x9c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d11f      	bne.n	8004ef4 <ConfigBLE_Ble+0x88>
				WaitSerAnsw_Ble_func(5);
 8004eb4:	2005      	movs	r0, #5
 8004eb6:	f000 fb33 	bl	8005520 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8004eba:	e01b      	b.n	8004ef4 <ConfigBLE_Ble+0x88>
				ParamItem = 1;
			}
			break;
*/
	  case 5:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004ebc:	4b12      	ldr	r3, [pc, #72]	@ (8004f08 <ConfigBLE_Ble+0x9c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	4912      	ldr	r1, [pc, #72]	@ (8004f0c <ConfigBLE_Ble+0xa0>)
 8004ec4:	4813      	ldr	r0, [pc, #76]	@ (8004f14 <ConfigBLE_Ble+0xa8>)
 8004ec6:	23fa      	movs	r3, #250	@ 0xfa
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f7ff ff7b 	bl	8004dc8 <SendATreply_Ble>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <ConfigBLE_Ble+0x9c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d10d      	bne.n	8004ef8 <ConfigBLE_Ble+0x8c>
				WaitSerAnsw_Ble_func(6);
 8004edc:	2006      	movs	r0, #6
 8004ede:	f000 fb1f 	bl	8005520 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8004ee2:	e009      	b.n	8004ef8 <ConfigBLE_Ble+0x8c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <ConfigBLE_Ble+0xac>)
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8004eea:	2001      	movs	r0, #1
 8004eec:	f000 fb18 	bl	8005520 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8004ef0:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8004ef2:	e002      	b.n	8004efa <ConfigBLE_Ble+0x8e>
			break;
 8004ef4:	46c0      	nop			@ (mov r8, r8)
 8004ef6:	e000      	b.n	8004efa <ConfigBLE_Ble+0x8e>
			break;
 8004ef8:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	200008eb 	.word	0x200008eb
 8004f04:	50000800 	.word	0x50000800
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	0801c108 	.word	0x0801c108
 8004f10:	0801c114 	.word	0x0801c114
 8004f14:	0801c120 	.word	0x0801c120
 8004f18:	2000004c 	.word	0x2000004c

08004f1c <GetParamBluetooth_Ble>:
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8004f22:	1dfb      	adds	r3, r7, #7
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004f28:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <GetParamBluetooth_Ble+0xa4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2140      	movs	r1, #64	@ 0x40
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f00f fac1 	bl	80144b6 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8004f34:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <GetParamBluetooth_Ble+0xa8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d002      	beq.n	8004f42 <GetParamBluetooth_Ble+0x26>
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d033      	beq.n	8004fa8 <GetParamBluetooth_Ble+0x8c>
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
		 ParamItem = 1;
	 break;
	}
}
 8004f40:	e03a      	b.n	8004fb8 <GetParamBluetooth_Ble+0x9c>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004f42:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <GetParamBluetooth_Ble+0xa8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	001a      	movs	r2, r3
 8004f48:	491f      	ldr	r1, [pc, #124]	@ (8004fc8 <GetParamBluetooth_Ble+0xac>)
 8004f4a:	4820      	ldr	r0, [pc, #128]	@ (8004fcc <GetParamBluetooth_Ble+0xb0>)
 8004f4c:	23fa      	movs	r3, #250	@ 0xfa
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2300      	movs	r3, #0
 8004f54:	f7ff ff38 	bl	8004dc8 <SendATreply_Ble>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <GetParamBluetooth_Ble+0xa8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d129      	bne.n	8004fb6 <GetParamBluetooth_Ble+0x9a>
			 foo = strchr(SerialAnswBLE,'=');
 8004f62:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <GetParamBluetooth_Ble+0xb4>)
 8004f64:	213d      	movs	r1, #61	@ 0x3d
 8004f66:	0018      	movs	r0, r3
 8004f68:	f016 fefa 	bl	801bd60 <strchr>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e00f      	b.n	8004f98 <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	18d2      	adds	r2, r2, r3
 8004f82:	1dfb      	adds	r3, r7, #7
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	3302      	adds	r3, #2
 8004f88:	7811      	ldrb	r1, [r2, #0]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <GetParamBluetooth_Ble+0xb8>)
 8004f8c:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	3201      	adds	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	1dfb      	adds	r3, r7, #7
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b0b      	cmp	r3, #11
 8004f9e:	d9eb      	bls.n	8004f78 <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8004fa0:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <GetParamBluetooth_Ble+0xa8>)
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	601a      	str	r2, [r3, #0]
		 break;
 8004fa6:	e006      	b.n	8004fb6 <GetParamBluetooth_Ble+0x9a>
		 BluetoothState = 3;
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <GetParamBluetooth_Ble+0xbc>)
 8004faa:	2203      	movs	r2, #3
 8004fac:	701a      	strb	r2, [r3, #0]
		 ParamItem = 1;
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <GetParamBluetooth_Ble+0xa8>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
	 break;
 8004fb4:	e000      	b.n	8004fb8 <GetParamBluetooth_Ble+0x9c>
		 break;
 8004fb6:	46c0      	nop			@ (mov r8, r8)
}
 8004fb8:	46c0      	nop			@ (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	50000800 	.word	0x50000800
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	0801c13c 	.word	0x0801c13c
 8004fcc:	0801c148 	.word	0x0801c148
 8004fd0:	20000a28 	.word	0x20000a28
 8004fd4:	20000e7c 	.word	0x20000e7c
 8004fd8:	2000004c 	.word	0x2000004c

08004fdc <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
//uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
    asm ("nop");
 8004fe2:	46c0      	nop			@ (mov r8, r8)

    uint8_t i_ = 0;
 8004fe4:	1dbb      	adds	r3, r7, #6
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004fea:	4b5b      	ldr	r3, [pc, #364]	@ (8005158 <TransmitReceive_Ble+0x17c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	2140      	movs	r1, #64	@ 0x40
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f00f fa60 	bl	80144b6 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8004ff6:	f7ff fe7f 	bl	8004cf8 <serialEvent_Ble>
	if (receivecomplete_Ble){
 8004ffa:	4b58      	ldr	r3, [pc, #352]	@ (800515c <TransmitReceive_Ble+0x180>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d100      	bne.n	8005004 <TransmitReceive_Ble+0x28>
 8005002:	e1da      	b.n	80053ba <TransmitReceive_Ble+0x3de>
		 receivecomplete_Ble = 0;
 8005004:	4b55      	ldr	r3, [pc, #340]	@ (800515c <TransmitReceive_Ble+0x180>)
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 800500a:	4b55      	ldr	r3, [pc, #340]	@ (8005160 <TransmitReceive_Ble+0x184>)
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <TransmitReceive_Ble+0x3c>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 8005012:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <TransmitReceive_Ble+0x184>)
 8005014:	2201      	movs	r2, #1
 8005016:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",(size_t) 2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8005018:	4952      	ldr	r1, [pc, #328]	@ (8005164 <TransmitReceive_Ble+0x188>)
 800501a:	4b53      	ldr	r3, [pc, #332]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 800501c:	2202      	movs	r2, #2
 800501e:	0018      	movs	r0, r3
 8005020:	f016 fe88 	bl	801bd34 <memcmp>
 8005024:	1e03      	subs	r3, r0, #0
 8005026:	d102      	bne.n	800502e <TransmitReceive_Ble+0x52>
			 codeTX = 0x21;
 8005028:	4b50      	ldr	r3, [pc, #320]	@ (800516c <TransmitReceive_Ble+0x190>)
 800502a:	2221      	movs	r2, #33	@ 0x21
 800502c:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 800502e:	4950      	ldr	r1, [pc, #320]	@ (8005170 <TransmitReceive_Ble+0x194>)
 8005030:	4b4d      	ldr	r3, [pc, #308]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 8005032:	2202      	movs	r2, #2
 8005034:	0018      	movs	r0, r3
 8005036:	f016 fe7d 	bl	801bd34 <memcmp>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d102      	bne.n	8005044 <TransmitReceive_Ble+0x68>
			 codeTX = 0x5C;
 800503e:	4b4b      	ldr	r3, [pc, #300]	@ (800516c <TransmitReceive_Ble+0x190>)
 8005040:	225c      	movs	r2, #92	@ 0x5c
 8005042:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 8005044:	494b      	ldr	r1, [pc, #300]	@ (8005174 <TransmitReceive_Ble+0x198>)
 8005046:	4b48      	ldr	r3, [pc, #288]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 8005048:	2202      	movs	r2, #2
 800504a:	0018      	movs	r0, r3
 800504c:	f016 fe72 	bl	801bd34 <memcmp>
 8005050:	1e03      	subs	r3, r0, #0
 8005052:	d102      	bne.n	800505a <TransmitReceive_Ble+0x7e>
			 codeTX = 0x80;
 8005054:	4b45      	ldr	r3, [pc, #276]	@ (800516c <TransmitReceive_Ble+0x190>)
 8005056:	2280      	movs	r2, #128	@ 0x80
 8005058:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x81",2) == 0){
 800505a:	4947      	ldr	r1, [pc, #284]	@ (8005178 <TransmitReceive_Ble+0x19c>)
 800505c:	4b42      	ldr	r3, [pc, #264]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 800505e:	2202      	movs	r2, #2
 8005060:	0018      	movs	r0, r3
 8005062:	f016 fe67 	bl	801bd34 <memcmp>
 8005066:	1e03      	subs	r3, r0, #0
 8005068:	d102      	bne.n	8005070 <TransmitReceive_Ble+0x94>
			 codeTX = 0x81;
 800506a:	4b40      	ldr	r3, [pc, #256]	@ (800516c <TransmitReceive_Ble+0x190>)
 800506c:	2281      	movs	r2, #129	@ 0x81
 800506e:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8005070:	4942      	ldr	r1, [pc, #264]	@ (800517c <TransmitReceive_Ble+0x1a0>)
 8005072:	4b3d      	ldr	r3, [pc, #244]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 8005074:	2202      	movs	r2, #2
 8005076:	0018      	movs	r0, r3
 8005078:	f016 fe5c 	bl	801bd34 <memcmp>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d102      	bne.n	8005086 <TransmitReceive_Ble+0xaa>
			 codeTX = 0x3D;
 8005080:	4b3a      	ldr	r3, [pc, #232]	@ (800516c <TransmitReceive_Ble+0x190>)
 8005082:	223d      	movs	r2, #61	@ 0x3d
 8005084:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 8005086:	493e      	ldr	r1, [pc, #248]	@ (8005180 <TransmitReceive_Ble+0x1a4>)
 8005088:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 800508a:	2202      	movs	r2, #2
 800508c:	0018      	movs	r0, r3
 800508e:	f016 fe51 	bl	801bd34 <memcmp>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d106      	bne.n	80050a4 <TransmitReceive_Ble+0xc8>
			 //timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
			 DevLock = 0x72;
 8005096:	4b3b      	ldr	r3, [pc, #236]	@ (8005184 <TransmitReceive_Ble+0x1a8>)
 8005098:	2272      	movs	r2, #114	@ 0x72
 800509a:	701a      	strb	r2, [r3, #0]
			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 800509c:	f000 fa56 	bl	800554c <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 80050a0:	f000 fa62 	bl	8005568 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 80050a4:	4938      	ldr	r1, [pc, #224]	@ (8005188 <TransmitReceive_Ble+0x1ac>)
 80050a6:	4b30      	ldr	r3, [pc, #192]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 80050a8:	2202      	movs	r2, #2
 80050aa:	0018      	movs	r0, r3
 80050ac:	f016 fe42 	bl	801bd34 <memcmp>
 80050b0:	1e03      	subs	r3, r0, #0
 80050b2:	d112      	bne.n	80050da <TransmitReceive_Ble+0xfe>
		    asm ("nop");
 80050b4:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 80050b6:	4b35      	ldr	r3, [pc, #212]	@ (800518c <TransmitReceive_Ble+0x1b0>)
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	4b35      	ldr	r3, [pc, #212]	@ (8005190 <TransmitReceive_Ble+0x1b4>)
 80050bc:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 80050be:	4b34      	ldr	r3, [pc, #208]	@ (8005190 <TransmitReceive_Ble+0x1b4>)
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	4b34      	ldr	r3, [pc, #208]	@ (8005194 <TransmitReceive_Ble+0x1b8>)
 80050c4:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 80050c6:	4b34      	ldr	r3, [pc, #208]	@ (8005198 <TransmitReceive_Ble+0x1bc>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80050cc:	4b32      	ldr	r3, [pc, #200]	@ (8005198 <TransmitReceive_Ble+0x1bc>)
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	4b30      	ldr	r3, [pc, #192]	@ (8005194 <TransmitReceive_Ble+0x1b8>)
 80050d2:	0011      	movs	r1, r2
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7ff fde5 	bl	8004ca4 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 80050da:	4930      	ldr	r1, [pc, #192]	@ (800519c <TransmitReceive_Ble+0x1c0>)
 80050dc:	4b22      	ldr	r3, [pc, #136]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 80050de:	2202      	movs	r2, #2
 80050e0:	0018      	movs	r0, r3
 80050e2:	f016 fe27 	bl	801bd34 <memcmp>
 80050e6:	1e03      	subs	r3, r0, #0
 80050e8:	d16c      	bne.n	80051c4 <TransmitReceive_Ble+0x1e8>
			uint8_t foo,foo2;
		    asm ("nop");
 80050ea:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 80050ec:	4b28      	ldr	r3, [pc, #160]	@ (8005190 <TransmitReceive_Ble+0x1b4>)
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	210f      	movs	r1, #15
 80050f4:	400a      	ands	r2, r1
 80050f6:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 80050f8:	1dfb      	adds	r3, r7, #7
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b0b      	cmp	r3, #11
 80050fe:	d905      	bls.n	800510c <TransmitReceive_Ble+0x130>
			  foo = PasswordALG & (~0xF8);
 8005100:	4b23      	ldr	r3, [pc, #140]	@ (8005190 <TransmitReceive_Ble+0x1b4>)
 8005102:	781a      	ldrb	r2, [r3, #0]
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	2107      	movs	r1, #7
 8005108:	400a      	ands	r2, r1
 800510a:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	3302      	adds	r3, #2
 8005112:	4a23      	ldr	r2, [pc, #140]	@ (80051a0 <TransmitReceive_Ble+0x1c4>)
 8005114:	5cd2      	ldrb	r2, [r2, r3]
 8005116:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <TransmitReceive_Ble+0x1b4>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	b2da      	uxtb	r2, r3
 800511e:	1d7b      	adds	r3, r7, #5
 8005120:	3a01      	subs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 8005124:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <TransmitReceive_Ble+0x18c>)
 8005126:	789b      	ldrb	r3, [r3, #2]
 8005128:	1d7a      	adds	r2, r7, #5
 800512a:	7812      	ldrb	r2, [r2, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d139      	bne.n	80051a4 <TransmitReceive_Ble+0x1c8>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8005130:	4b14      	ldr	r3, [pc, #80]	@ (8005184 <TransmitReceive_Ble+0x1a8>)
 8005132:	2272      	movs	r2, #114	@ 0x72
 8005134:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 8005136:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <TransmitReceive_Ble+0x1b8>)
 8005138:	22f1      	movs	r2, #241	@ 0xf1
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <TransmitReceive_Ble+0x1b8>)
 800513e:	223d      	movs	r2, #61	@ 0x3d
 8005140:	705a      	strb	r2, [r3, #1]
 8005142:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <TransmitReceive_Ble+0x1bc>)
 8005144:	2202      	movs	r2, #2
 8005146:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8005148:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <TransmitReceive_Ble+0x1bc>)
 800514a:	781a      	ldrb	r2, [r3, #0]
 800514c:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <TransmitReceive_Ble+0x1b8>)
 800514e:	0011      	movs	r1, r2
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff fda7 	bl	8004ca4 <SerializeString2>
 8005156:	e035      	b.n	80051c4 <TransmitReceive_Ble+0x1e8>
 8005158:	50000800 	.word	0x50000800
 800515c:	200003ca 	.word	0x200003ca
 8005160:	20000f78 	.word	0x20000f78
 8005164:	0801c154 	.word	0x0801c154
 8005168:	20000a28 	.word	0x20000a28
 800516c:	20000ec0 	.word	0x20000ec0
 8005170:	0801c158 	.word	0x0801c158
 8005174:	0801c15c 	.word	0x0801c15c
 8005178:	0801c160 	.word	0x0801c160
 800517c:	0801c164 	.word	0x0801c164
 8005180:	0801c168 	.word	0x0801c168
 8005184:	20001191 	.word	0x20001191
 8005188:	0801c16c 	.word	0x0801c16c
 800518c:	200003d9 	.word	0x200003d9
 8005190:	200003d8 	.word	0x200003d8
 8005194:	20000ed4 	.word	0x20000ed4
 8005198:	20000ece 	.word	0x20000ece
 800519c:	0801c170 	.word	0x0801c170
 80051a0:	20000e7c 	.word	0x20000e7c
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 80051a4:	4b9a      	ldr	r3, [pc, #616]	@ (8005410 <TransmitReceive_Ble+0x434>)
 80051a6:	22f1      	movs	r2, #241	@ 0xf1
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	4b99      	ldr	r3, [pc, #612]	@ (8005410 <TransmitReceive_Ble+0x434>)
 80051ac:	223e      	movs	r2, #62	@ 0x3e
 80051ae:	705a      	strb	r2, [r3, #1]
 80051b0:	4b98      	ldr	r3, [pc, #608]	@ (8005414 <TransmitReceive_Ble+0x438>)
 80051b2:	2202      	movs	r2, #2
 80051b4:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 80051b6:	4b97      	ldr	r3, [pc, #604]	@ (8005414 <TransmitReceive_Ble+0x438>)
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	4b95      	ldr	r3, [pc, #596]	@ (8005410 <TransmitReceive_Ble+0x434>)
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff fd70 	bl	8004ca4 <SerializeString2>
			}
		}

		//if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
		if ( (DevLock == 0x72) || (statComWIFIFlag) ){
 80051c4:	4b94      	ldr	r3, [pc, #592]	@ (8005418 <TransmitReceive_Ble+0x43c>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b72      	cmp	r3, #114	@ 0x72
 80051ca:	d004      	beq.n	80051d6 <TransmitReceive_Ble+0x1fa>
 80051cc:	4b93      	ldr	r3, [pc, #588]	@ (800541c <TransmitReceive_Ble+0x440>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d100      	bne.n	80051d6 <TransmitReceive_Ble+0x1fa>
 80051d4:	e0f1      	b.n	80053ba <TransmitReceive_Ble+0x3de>
		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 80051d6:	4992      	ldr	r1, [pc, #584]	@ (8005420 <TransmitReceive_Ble+0x444>)
 80051d8:	4b92      	ldr	r3, [pc, #584]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80051da:	2202      	movs	r2, #2
 80051dc:	0018      	movs	r0, r3
 80051de:	f016 fda9 	bl	801bd34 <memcmp>
 80051e2:	1e03      	subs	r3, r0, #0
 80051e4:	d102      	bne.n	80051ec <TransmitReceive_Ble+0x210>
			 codeTX = 0x60;
 80051e6:	4b90      	ldr	r3, [pc, #576]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80051e8:	2260      	movs	r2, #96	@ 0x60
 80051ea:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 80051ec:	498f      	ldr	r1, [pc, #572]	@ (800542c <TransmitReceive_Ble+0x450>)
 80051ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80051f0:	2202      	movs	r2, #2
 80051f2:	0018      	movs	r0, r3
 80051f4:	f016 fd9e 	bl	801bd34 <memcmp>
 80051f8:	1e03      	subs	r3, r0, #0
 80051fa:	d102      	bne.n	8005202 <TransmitReceive_Ble+0x226>
			 codeTX = 0x61;
 80051fc:	4b8a      	ldr	r3, [pc, #552]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80051fe:	2261      	movs	r2, #97	@ 0x61
 8005200:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 8005202:	498b      	ldr	r1, [pc, #556]	@ (8005430 <TransmitReceive_Ble+0x454>)
 8005204:	4b87      	ldr	r3, [pc, #540]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005206:	2202      	movs	r2, #2
 8005208:	0018      	movs	r0, r3
 800520a:	f016 fd93 	bl	801bd34 <memcmp>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d102      	bne.n	8005218 <TransmitReceive_Ble+0x23c>
			 codeTX = 0x53;
 8005212:	4b85      	ldr	r3, [pc, #532]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005214:	2253      	movs	r2, #83	@ 0x53
 8005216:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8005218:	4986      	ldr	r1, [pc, #536]	@ (8005434 <TransmitReceive_Ble+0x458>)
 800521a:	4b82      	ldr	r3, [pc, #520]	@ (8005424 <TransmitReceive_Ble+0x448>)
 800521c:	2202      	movs	r2, #2
 800521e:	0018      	movs	r0, r3
 8005220:	f016 fd88 	bl	801bd34 <memcmp>
 8005224:	1e03      	subs	r3, r0, #0
 8005226:	d102      	bne.n	800522e <TransmitReceive_Ble+0x252>
			 codeTX = 0x50;
 8005228:	4b7f      	ldr	r3, [pc, #508]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 800522a:	2250      	movs	r2, #80	@ 0x50
 800522c:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 800522e:	4982      	ldr	r1, [pc, #520]	@ (8005438 <TransmitReceive_Ble+0x45c>)
 8005230:	4b7c      	ldr	r3, [pc, #496]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005232:	2202      	movs	r2, #2
 8005234:	0018      	movs	r0, r3
 8005236:	f016 fd7d 	bl	801bd34 <memcmp>
 800523a:	1e03      	subs	r3, r0, #0
 800523c:	d102      	bne.n	8005244 <TransmitReceive_Ble+0x268>
			 codeTX = 0x51;
 800523e:	4b7a      	ldr	r3, [pc, #488]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005240:	2251      	movs	r2, #81	@ 0x51
 8005242:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005244:	497d      	ldr	r1, [pc, #500]	@ (800543c <TransmitReceive_Ble+0x460>)
 8005246:	4b77      	ldr	r3, [pc, #476]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005248:	2202      	movs	r2, #2
 800524a:	0018      	movs	r0, r3
 800524c:	f016 fd72 	bl	801bd34 <memcmp>
 8005250:	1e03      	subs	r3, r0, #0
 8005252:	d102      	bne.n	800525a <TransmitReceive_Ble+0x27e>
			 codeTX = 0x46;
 8005254:	4b74      	ldr	r3, [pc, #464]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005256:	2246      	movs	r2, #70	@ 0x46
 8005258:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 800525a:	4979      	ldr	r1, [pc, #484]	@ (8005440 <TransmitReceive_Ble+0x464>)
 800525c:	4b71      	ldr	r3, [pc, #452]	@ (8005424 <TransmitReceive_Ble+0x448>)
 800525e:	2202      	movs	r2, #2
 8005260:	0018      	movs	r0, r3
 8005262:	f016 fd67 	bl	801bd34 <memcmp>
 8005266:	1e03      	subs	r3, r0, #0
 8005268:	d102      	bne.n	8005270 <TransmitReceive_Ble+0x294>
			 codeTX = 0x49;
 800526a:	4b6f      	ldr	r3, [pc, #444]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 800526c:	2249      	movs	r2, #73	@ 0x49
 800526e:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005270:	4974      	ldr	r1, [pc, #464]	@ (8005444 <TransmitReceive_Ble+0x468>)
 8005272:	4b6c      	ldr	r3, [pc, #432]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005274:	2202      	movs	r2, #2
 8005276:	0018      	movs	r0, r3
 8005278:	f016 fd5c 	bl	801bd34 <memcmp>
 800527c:	1e03      	subs	r3, r0, #0
 800527e:	d102      	bne.n	8005286 <TransmitReceive_Ble+0x2aa>
			 codeTX = 0x4A;
 8005280:	4b69      	ldr	r3, [pc, #420]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005282:	224a      	movs	r2, #74	@ 0x4a
 8005284:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 8005286:	4970      	ldr	r1, [pc, #448]	@ (8005448 <TransmitReceive_Ble+0x46c>)
 8005288:	4b66      	ldr	r3, [pc, #408]	@ (8005424 <TransmitReceive_Ble+0x448>)
 800528a:	2202      	movs	r2, #2
 800528c:	0018      	movs	r0, r3
 800528e:	f016 fd51 	bl	801bd34 <memcmp>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d102      	bne.n	800529c <TransmitReceive_Ble+0x2c0>
			 codeTX = 0x54;
 8005296:	4b64      	ldr	r3, [pc, #400]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005298:	2254      	movs	r2, #84	@ 0x54
 800529a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 800529c:	496b      	ldr	r1, [pc, #428]	@ (800544c <TransmitReceive_Ble+0x470>)
 800529e:	4b61      	ldr	r3, [pc, #388]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80052a0:	2202      	movs	r2, #2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f016 fd46 	bl	801bd34 <memcmp>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d102      	bne.n	80052b2 <TransmitReceive_Ble+0x2d6>
	   		 codeTX = 0x80;
 80052ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80052ae:	2280      	movs	r2, #128	@ 0x80
 80052b0:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 80052b2:	4967      	ldr	r1, [pc, #412]	@ (8005450 <TransmitReceive_Ble+0x474>)
 80052b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80052b6:	2202      	movs	r2, #2
 80052b8:	0018      	movs	r0, r3
 80052ba:	f016 fd3b 	bl	801bd34 <memcmp>
 80052be:	1e03      	subs	r3, r0, #0
 80052c0:	d102      	bne.n	80052c8 <TransmitReceive_Ble+0x2ec>
	   		 codeTX = 0x3D;
 80052c2:	4b59      	ldr	r3, [pc, #356]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80052c4:	223d      	movs	r2, #61	@ 0x3d
 80052c6:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 80052c8:	4962      	ldr	r1, [pc, #392]	@ (8005454 <TransmitReceive_Ble+0x478>)
 80052ca:	4b56      	ldr	r3, [pc, #344]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80052cc:	2202      	movs	r2, #2
 80052ce:	0018      	movs	r0, r3
 80052d0:	f016 fd30 	bl	801bd34 <memcmp>
 80052d4:	1e03      	subs	r3, r0, #0
 80052d6:	d102      	bne.n	80052de <TransmitReceive_Ble+0x302>
			 codeTX = 0x55;
 80052d8:	4b53      	ldr	r3, [pc, #332]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80052da:	2255      	movs	r2, #85	@ 0x55
 80052dc:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 80052de:	495e      	ldr	r1, [pc, #376]	@ (8005458 <TransmitReceive_Ble+0x47c>)
 80052e0:	4b50      	ldr	r3, [pc, #320]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80052e2:	2202      	movs	r2, #2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f016 fd25 	bl	801bd34 <memcmp>
 80052ea:	1e03      	subs	r3, r0, #0
 80052ec:	d102      	bne.n	80052f4 <TransmitReceive_Ble+0x318>
	   		 codeTX = 0x56;
 80052ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80052f0:	2256      	movs	r2, #86	@ 0x56
 80052f2:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 80052f4:	4959      	ldr	r1, [pc, #356]	@ (800545c <TransmitReceive_Ble+0x480>)
 80052f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80052f8:	2202      	movs	r2, #2
 80052fa:	0018      	movs	r0, r3
 80052fc:	f016 fd1a 	bl	801bd34 <memcmp>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d102      	bne.n	800530a <TransmitReceive_Ble+0x32e>
	   		 codeTX = 0x57;
 8005304:	4b48      	ldr	r3, [pc, #288]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005306:	2257      	movs	r2, #87	@ 0x57
 8005308:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 800530a:	4955      	ldr	r1, [pc, #340]	@ (8005460 <TransmitReceive_Ble+0x484>)
 800530c:	4b45      	ldr	r3, [pc, #276]	@ (8005424 <TransmitReceive_Ble+0x448>)
 800530e:	2202      	movs	r2, #2
 8005310:	0018      	movs	r0, r3
 8005312:	f016 fd0f 	bl	801bd34 <memcmp>
 8005316:	1e03      	subs	r3, r0, #0
 8005318:	d102      	bne.n	8005320 <TransmitReceive_Ble+0x344>
	   		 codeTX = 0x58;
 800531a:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 800531c:	2258      	movs	r2, #88	@ 0x58
 800531e:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8005320:	4950      	ldr	r1, [pc, #320]	@ (8005464 <TransmitReceive_Ble+0x488>)
 8005322:	4b40      	ldr	r3, [pc, #256]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005324:	2202      	movs	r2, #2
 8005326:	0018      	movs	r0, r3
 8005328:	f016 fd04 	bl	801bd34 <memcmp>
 800532c:	1e03      	subs	r3, r0, #0
 800532e:	d102      	bne.n	8005336 <TransmitReceive_Ble+0x35a>
	   		 codeTX = 0x59;
 8005330:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005332:	2259      	movs	r2, #89	@ 0x59
 8005334:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 8005336:	494c      	ldr	r1, [pc, #304]	@ (8005468 <TransmitReceive_Ble+0x48c>)
 8005338:	4b3a      	ldr	r3, [pc, #232]	@ (8005424 <TransmitReceive_Ble+0x448>)
 800533a:	2202      	movs	r2, #2
 800533c:	0018      	movs	r0, r3
 800533e:	f016 fcf9 	bl	801bd34 <memcmp>
 8005342:	1e03      	subs	r3, r0, #0
 8005344:	d102      	bne.n	800534c <TransmitReceive_Ble+0x370>
	    	 codeTX = 0x5A;
 8005346:	4b38      	ldr	r3, [pc, #224]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005348:	225a      	movs	r2, #90	@ 0x5a
 800534a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 800534c:	4947      	ldr	r1, [pc, #284]	@ (800546c <TransmitReceive_Ble+0x490>)
 800534e:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005350:	2202      	movs	r2, #2
 8005352:	0018      	movs	r0, r3
 8005354:	f016 fcee 	bl	801bd34 <memcmp>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d102      	bne.n	8005362 <TransmitReceive_Ble+0x386>
	   		 codeTX = 0x5B;
 800535c:	4b32      	ldr	r3, [pc, #200]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 800535e:	225b      	movs	r2, #91	@ 0x5b
 8005360:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 8005362:	4943      	ldr	r1, [pc, #268]	@ (8005470 <TransmitReceive_Ble+0x494>)
 8005364:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005366:	2202      	movs	r2, #2
 8005368:	0018      	movs	r0, r3
 800536a:	f016 fce3 	bl	801bd34 <memcmp>
 800536e:	1e03      	subs	r3, r0, #0
 8005370:	d102      	bne.n	8005378 <TransmitReceive_Ble+0x39c>
		 	 codeTX = 0x5C;
 8005372:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 8005374:	225c      	movs	r2, #92	@ 0x5c
 8005376:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8005378:	493e      	ldr	r1, [pc, #248]	@ (8005474 <TransmitReceive_Ble+0x498>)
 800537a:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <TransmitReceive_Ble+0x448>)
 800537c:	2202      	movs	r2, #2
 800537e:	0018      	movs	r0, r3
 8005380:	f016 fcd8 	bl	801bd34 <memcmp>
 8005384:	1e03      	subs	r3, r0, #0
 8005386:	d102      	bne.n	800538e <TransmitReceive_Ble+0x3b2>
			  codeTX = 0x5F;
 8005388:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 800538a:	225f      	movs	r2, #95	@ 0x5f
 800538c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x62",2) == 0)	 		// CÓDIGO DE logger tiempo wifi
 800538e:	493a      	ldr	r1, [pc, #232]	@ (8005478 <TransmitReceive_Ble+0x49c>)
 8005390:	4b24      	ldr	r3, [pc, #144]	@ (8005424 <TransmitReceive_Ble+0x448>)
 8005392:	2202      	movs	r2, #2
 8005394:	0018      	movs	r0, r3
 8005396:	f016 fccd 	bl	801bd34 <memcmp>
 800539a:	1e03      	subs	r3, r0, #0
 800539c:	d102      	bne.n	80053a4 <TransmitReceive_Ble+0x3c8>
	   		  codeTX = 0x62;
 800539e:	4b22      	ldr	r3, [pc, #136]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80053a0:	2262      	movs	r2, #98	@ 0x62
 80053a2:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x63",2) == 0)		 	// CÓDIGO DE logger eventos wifi
 80053a4:	4935      	ldr	r1, [pc, #212]	@ (800547c <TransmitReceive_Ble+0x4a0>)
 80053a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <TransmitReceive_Ble+0x448>)
 80053a8:	2202      	movs	r2, #2
 80053aa:	0018      	movs	r0, r3
 80053ac:	f016 fcc2 	bl	801bd34 <memcmp>
 80053b0:	1e03      	subs	r3, r0, #0
 80053b2:	d102      	bne.n	80053ba <TransmitReceive_Ble+0x3de>
	   		  codeTX = 0x63;
 80053b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <TransmitReceive_Ble+0x44c>)
 80053b6:	2263      	movs	r2, #99	@ 0x63
 80053b8:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 80053ba:	f004 f9d3 	bl	8009764 <millis>
 80053be:	0003      	movs	r3, r0
 80053c0:	001a      	movs	r2, r3
 80053c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005480 <TransmitReceive_Ble+0x4a4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	d91d      	bls.n	8005408 <TransmitReceive_Ble+0x42c>
		TestMessMilis = millis();
 80053cc:	f004 f9ca 	bl	8009764 <millis>
 80053d0:	0003      	movs	r3, r0
 80053d2:	001a      	movs	r2, r3
 80053d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005480 <TransmitReceive_Ble+0x4a4>)
 80053d6:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 80053d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005484 <TransmitReceive_Ble+0x4a8>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b55      	cmp	r3, #85	@ 0x55
 80053de:	d102      	bne.n	80053e6 <TransmitReceive_Ble+0x40a>
		    asm ("nop");
 80053e0:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 80053e2:	f008 fc5f 	bl	800dca4 <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 80053e6:	4b27      	ldr	r3, [pc, #156]	@ (8005484 <TransmitReceive_Ble+0x4a8>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b55      	cmp	r3, #85	@ 0x55
 80053ec:	d10c      	bne.n	8005408 <TransmitReceive_Ble+0x42c>
		    asm ("nop");
 80053ee:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80053f0:	4b08      	ldr	r3, [pc, #32]	@ (8005414 <TransmitReceive_Ble+0x438>)
 80053f2:	781a      	ldrb	r2, [r3, #0]
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <TransmitReceive_Ble+0x434>)
 80053f6:	0011      	movs	r1, r2
 80053f8:	0018      	movs	r0, r3
 80053fa:	f7ff fc53 	bl	8004ca4 <SerializeString2>
			i_++;
 80053fe:	1dbb      	adds	r3, r7, #6
 8005400:	781a      	ldrb	r2, [r3, #0]
 8005402:	1dbb      	adds	r3, r7, #6
 8005404:	3201      	adds	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8005408:	46c0      	nop			@ (mov r8, r8)
 800540a:	46bd      	mov	sp, r7
 800540c:	b002      	add	sp, #8
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000ed4 	.word	0x20000ed4
 8005414:	20000ece 	.word	0x20000ece
 8005418:	20001191 	.word	0x20001191
 800541c:	20001193 	.word	0x20001193
 8005420:	0801c174 	.word	0x0801c174
 8005424:	20000a28 	.word	0x20000a28
 8005428:	20000ec0 	.word	0x20000ec0
 800542c:	0801c178 	.word	0x0801c178
 8005430:	0801c17c 	.word	0x0801c17c
 8005434:	0801c180 	.word	0x0801c180
 8005438:	0801c184 	.word	0x0801c184
 800543c:	0801c188 	.word	0x0801c188
 8005440:	0801c18c 	.word	0x0801c18c
 8005444:	0801c190 	.word	0x0801c190
 8005448:	0801c194 	.word	0x0801c194
 800544c:	0801c15c 	.word	0x0801c15c
 8005450:	0801c164 	.word	0x0801c164
 8005454:	0801c198 	.word	0x0801c198
 8005458:	0801c19c 	.word	0x0801c19c
 800545c:	0801c1a0 	.word	0x0801c1a0
 8005460:	0801c1a4 	.word	0x0801c1a4
 8005464:	0801c1a8 	.word	0x0801c1a8
 8005468:	0801c1ac 	.word	0x0801c1ac
 800546c:	0801c1b0 	.word	0x0801c1b0
 8005470:	0801c158 	.word	0x0801c158
 8005474:	0801c1b4 	.word	0x0801c1b4
 8005478:	0801c1b8 	.word	0x0801c1b8
 800547c:	0801c1bc 	.word	0x0801c1bc
 8005480:	200003d4 	.word	0x200003d4
 8005484:	20000eb5 	.word	0x20000eb5

08005488 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 800548c:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <Read_Inpunts_ble+0x84>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d037      	beq.n	8005504 <Read_Inpunts_ble+0x7c>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4a1d      	ldr	r2, [pc, #116]	@ (8005510 <Read_Inpunts_ble+0x88>)
 800549a:	0019      	movs	r1, r3
 800549c:	0010      	movs	r0, r2
 800549e:	f00e ffed 	bl	801447c <HAL_GPIO_ReadPin>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d017      	beq.n	80054d6 <Read_Inpunts_ble+0x4e>
				{
					if (CntDebInp1 <= 50)
 80054a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b32      	cmp	r3, #50	@ 0x32
 80054ac:	d805      	bhi.n	80054ba <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 80054ae:	4b19      	ldr	r3, [pc, #100]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	4b17      	ldr	r3, [pc, #92]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054b8:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 80054ba:	4b16      	ldr	r3, [pc, #88]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b32      	cmp	r3, #50	@ 0x32
 80054c0:	d120      	bne.n	8005504 <Read_Inpunts_ble+0x7c>
						{
							device_conected = 1;
 80054c2:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <Read_Inpunts_ble+0x90>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 80054c8:	4b12      	ldr	r3, [pc, #72]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054ca:	2233      	movs	r2, #51	@ 0x33
 80054cc:	701a      	strb	r2, [r3, #0]
							statComFlag = 255;
 80054ce:	4b13      	ldr	r3, [pc, #76]	@ (800551c <Read_Inpunts_ble+0x94>)
 80054d0:	22ff      	movs	r2, #255	@ 0xff
 80054d2:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
					statComFlag = 0;
				}
			}
		}
}
 80054d4:	e016      	b.n	8005504 <Read_Inpunts_ble+0x7c>
				if (CntDebInp1 >= 1)
 80054d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <Read_Inpunts_ble+0x62>
					CntDebInp1--;
 80054de:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054e8:	701a      	strb	r2, [r3, #0]
				if (CntDebInp1==1)
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d108      	bne.n	8005504 <Read_Inpunts_ble+0x7c>
					device_conected = 0;
 80054f2:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <Read_Inpunts_ble+0x90>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <Read_Inpunts_ble+0x8c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
					statComFlag = 0;
 80054fe:	4b07      	ldr	r3, [pc, #28]	@ (800551c <Read_Inpunts_ble+0x94>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			@ (mov r8, r8)
 800550c:	200008e8 	.word	0x200008e8
 8005510:	50000400 	.word	0x50000400
 8005514:	200003d0 	.word	0x200003d0
 8005518:	200008ec 	.word	0x200008ec
 800551c:	20001192 	.word	0x20001192

08005520 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	0002      	movs	r2, r0
 8005528:	1dfb      	adds	r3, r7, #7
 800552a:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <WaitSerAnsw_Ble_func+0x24>)
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 8005532:	1dfb      	adds	r3, r7, #7
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <WaitSerAnsw_Ble_func+0x28>)
 8005538:	601a      	str	r2, [r3, #0]
}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b002      	add	sp, #8
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	200003c9 	.word	0x200003c9
 8005548:	20000000 	.word	0x20000000

0800554c <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8005550:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <grabacion_exitosa_handshake+0x18>)
 8005552:	22f1      	movs	r2, #241	@ 0xf1
 8005554:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 8005556:	4b03      	ldr	r3, [pc, #12]	@ (8005564 <grabacion_exitosa_handshake+0x18>)
 8005558:	223d      	movs	r2, #61	@ 0x3d
 800555a:	705a      	strb	r2, [r3, #1]
}
 800555c:	46c0      	nop			@ (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	20000e7c 	.word	0x20000e7c

08005568 <manda_transmision>:

void manda_transmision (void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <manda_transmision+0x34>)
 800556e:	4a0c      	ldr	r2, [pc, #48]	@ (80055a0 <manda_transmision+0x38>)
 8005570:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <manda_transmision+0x3c>)
 8005574:	4a0a      	ldr	r2, [pc, #40]	@ (80055a0 <manda_transmision+0x38>)
 8005576:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <manda_transmision+0x40>)
 800557a:	4a0c      	ldr	r2, [pc, #48]	@ (80055ac <manda_transmision+0x44>)
 800557c:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800557e:	4b0c      	ldr	r3, [pc, #48]	@ (80055b0 <manda_transmision+0x48>)
 8005580:	2202      	movs	r2, #2
 8005582:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 8005584:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <manda_transmision+0x4c>)
 8005586:	2201      	movs	r2, #1
 8005588:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 800558a:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <manda_transmision+0x50>)
 800558c:	2255      	movs	r2, #85	@ 0x55
 800558e:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <manda_transmision+0x54>)
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]

}
 8005596:	46c0      	nop			@ (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000eb0 	.word	0x20000eb0
 80055a0:	20000e7c 	.word	0x20000e7c
 80055a4:	20000ea8 	.word	0x20000ea8
 80055a8:	20000eac 	.word	0x20000eac
 80055ac:	20000e7d 	.word	0x20000e7d
 80055b0:	20000ecc 	.word	0x20000ecc
 80055b4:	20000eb8 	.word	0x20000eb8
 80055b8:	20000eb5 	.word	0x20000eb5
 80055bc:	20000ec0 	.word	0x20000ec0

080055c0 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 80055c4:	4b40      	ldr	r3, [pc, #256]	@ (80056c8 <main10+0x108>)
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 80055cc:	4b3f      	ldr	r3, [pc, #252]	@ (80056cc <main10+0x10c>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	2108      	movs	r1, #8
 80055d2:	0018      	movs	r0, r3
 80055d4:	f00e ff6f 	bl	80144b6 <HAL_GPIO_WritePin>
 80055d8:	e005      	b.n	80055e6 <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 80055da:	4b3c      	ldr	r3, [pc, #240]	@ (80056cc <main10+0x10c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	2108      	movs	r1, #8
 80055e0:	0018      	movs	r0, r3
 80055e2:	f00e ff68 	bl	80144b6 <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 80055e6:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <main10+0x108>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 80055ee:	2380      	movs	r3, #128	@ 0x80
 80055f0:	0099      	lsls	r1, r3, #2
 80055f2:	23a0      	movs	r3, #160	@ 0xa0
 80055f4:	05db      	lsls	r3, r3, #23
 80055f6:	2201      	movs	r2, #1
 80055f8:	0018      	movs	r0, r3
 80055fa:	f00e ff5c 	bl	80144b6 <HAL_GPIO_WritePin>
 80055fe:	e007      	b.n	8005610 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	0099      	lsls	r1, r3, #2
 8005604:	23a0      	movs	r3, #160	@ 0xa0
 8005606:	05db      	lsls	r3, r3, #23
 8005608:	2200      	movs	r2, #0
 800560a:	0018      	movs	r0, r3
 800560c:	f00e ff53 	bl	80144b6 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 8005610:	4b2d      	ldr	r3, [pc, #180]	@ (80056c8 <main10+0x108>)
 8005612:	789b      	ldrb	r3, [r3, #2]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 8005618:	2380      	movs	r3, #128	@ 0x80
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	482b      	ldr	r0, [pc, #172]	@ (80056cc <main10+0x10c>)
 800561e:	2201      	movs	r2, #1
 8005620:	0019      	movs	r1, r3
 8005622:	f00e ff48 	bl	80144b6 <HAL_GPIO_WritePin>
 8005626:	e006      	b.n	8005636 <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4827      	ldr	r0, [pc, #156]	@ (80056cc <main10+0x10c>)
 800562e:	2200      	movs	r2, #0
 8005630:	0019      	movs	r1, r3
 8005632:	f00e ff40 	bl	80144b6 <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <main10+0x108>)
 8005638:	791b      	ldrb	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	0059      	lsls	r1, r3, #1
 8005642:	23a0      	movs	r3, #160	@ 0xa0
 8005644:	05db      	lsls	r3, r3, #23
 8005646:	2201      	movs	r2, #1
 8005648:	0018      	movs	r0, r3
 800564a:	f00e ff34 	bl	80144b6 <HAL_GPIO_WritePin>
 800564e:	e007      	b.n	8005660 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	0059      	lsls	r1, r3, #1
 8005654:	23a0      	movs	r3, #160	@ 0xa0
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	2200      	movs	r2, #0
 800565a:	0018      	movs	r0, r3
 800565c:	f00e ff2b 	bl	80144b6 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8005660:	4b1b      	ldr	r3, [pc, #108]	@ (80056d0 <main10+0x110>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	4b19      	ldr	r3, [pc, #100]	@ (80056d0 <main10+0x110>)
 800566a:	701a      	strb	r2, [r3, #0]
		if(portX[rel_fn] && (cntproc & 0x01))
 800566c:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <main10+0x108>)
 800566e:	78db      	ldrb	r3, [r3, #3]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <main10+0xd2>
 8005674:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <main10+0x110>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	001a      	movs	r2, r3
 800567a:	2301      	movs	r3, #1
 800567c:	4013      	ands	r3, r2
 800567e:	d008      	beq.n	8005692 <main10+0xd2>
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
 8005680:	2380      	movs	r3, #128	@ 0x80
 8005682:	00d9      	lsls	r1, r3, #3
 8005684:	23a0      	movs	r3, #160	@ 0xa0
 8005686:	05db      	lsls	r3, r3, #23
 8005688:	2201      	movs	r2, #1
 800568a:	0018      	movs	r0, r3
 800568c:	f00e ff13 	bl	80144b6 <HAL_GPIO_WritePin>
 8005690:	e007      	b.n	80056a2 <main10+0xe2>
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	00d9      	lsls	r1, r3, #3
 8005696:	23a0      	movs	r3, #160	@ 0xa0
 8005698:	05db      	lsls	r3, r3, #23
 800569a:	2200      	movs	r2, #0
 800569c:	0018      	movs	r0, r3
 800569e:	f00e ff0a 	bl	80144b6 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 80056a2:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <main10+0x114>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <main10+0x114>)
 80056ac:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <main10+0x114>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b27      	cmp	r3, #39	@ 0x27
 80056b4:	d904      	bls.n	80056c0 <main10+0x100>
        asm ("nop");
 80056b6:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 80056b8:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 80056ba:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <main10+0x114>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	20000b68 	.word	0x20000b68
 80056cc:	50000800 	.word	0x50000800
 80056d0:	20000b5d 	.word	0x20000b5d
 80056d4:	20000bce 	.word	0x20000bce

080056d8 <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 80056dc:	4b46      	ldr	r3, [pc, #280]	@ (80057f8 <retardoDeActuadores+0x120>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	4053      	eors	r3, r2
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d114      	bne.n	8005714 <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80056ea:	4b44      	ldr	r3, [pc, #272]	@ (80057fc <retardoDeActuadores+0x124>)
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 80056f2:	4b42      	ldr	r3, [pc, #264]	@ (80057fc <retardoDeActuadores+0x124>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	4053      	eors	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10e      	bne.n	800571e <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005700:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <retardoDeActuadores+0x124>)
 8005702:	2201      	movs	r2, #1
 8005704:	705a      	strb	r2, [r3, #1]
 8005706:	e000      	b.n	800570a <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 8005708:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 800570a:	4b3d      	ldr	r3, [pc, #244]	@ (8005800 <retardoDeActuadores+0x128>)
 800570c:	0018      	movs	r0, r3
 800570e:	f001 fe58 	bl	80073c2 <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 8005712:	e005      	b.n	8005720 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 8005714:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[1] = 0;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 8005716:	4b39      	ldr	r3, [pc, #228]	@ (80057fc <retardoDeActuadores+0x124>)
 8005718:	2200      	movs	r2, #0
 800571a:	705a      	strb	r2, [r3, #1]
 800571c:	e000      	b.n	8005720 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 800571e:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 8005720:	4b35      	ldr	r3, [pc, #212]	@ (80057f8 <retardoDeActuadores+0x120>)
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2201      	movs	r2, #1
 8005726:	4053      	eors	r3, r2
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d114      	bne.n	8005758 <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 800572e:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <retardoDeActuadores+0x124>)
 8005730:	789b      	ldrb	r3, [r3, #2]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 8005736:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <retardoDeActuadores+0x124>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	4053      	eors	r3, r2
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10e      	bne.n	8005762 <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005744:	4b2d      	ldr	r3, [pc, #180]	@ (80057fc <retardoDeActuadores+0x124>)
 8005746:	2201      	movs	r2, #1
 8005748:	709a      	strb	r2, [r3, #2]
 800574a:	e000      	b.n	800574e <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 800574c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 800574e:	4b2d      	ldr	r3, [pc, #180]	@ (8005804 <retardoDeActuadores+0x12c>)
 8005750:	0018      	movs	r0, r3
 8005752:	f001 fe36 	bl	80073c2 <decwreg>
			goto	revisa_ret_ventilador;		//
 8005756:	e005      	b.n	8005764 <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 8005758:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 800575a:	4b28      	ldr	r3, [pc, #160]	@ (80057fc <retardoDeActuadores+0x124>)
 800575c:	2200      	movs	r2, #0
 800575e:	709a      	strb	r2, [r3, #2]
 8005760:	e000      	b.n	8005764 <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 8005762:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 8005764:	4b28      	ldr	r3, [pc, #160]	@ (8005808 <retardoDeActuadores+0x130>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	4053      	eors	r3, r2
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d114      	bne.n	800579c <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 8005772:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <retardoDeActuadores+0x124>)
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 800577a:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <retardoDeActuadores+0x124>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	4053      	eors	r3, r2
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10e      	bne.n	80057a6 <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005788:	4b1c      	ldr	r3, [pc, #112]	@ (80057fc <retardoDeActuadores+0x124>)
 800578a:	2201      	movs	r2, #1
 800578c:	70da      	strb	r2, [r3, #3]
 800578e:	e000      	b.n	8005792 <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 8005790:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 8005792:	4b1e      	ldr	r3, [pc, #120]	@ (800580c <retardoDeActuadores+0x134>)
 8005794:	0018      	movs	r0, r3
 8005796:	f001 fe14 	bl	80073c2 <decwreg>
			goto	revisa_ret_lampara;		//
 800579a:	e005      	b.n	80057a8 <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 800579c:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 800579e:	4b17      	ldr	r3, [pc, #92]	@ (80057fc <retardoDeActuadores+0x124>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	70da      	strb	r2, [r3, #3]
 80057a4:	e000      	b.n	80057a8 <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 80057a6:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 80057a8:	4b13      	ldr	r3, [pc, #76]	@ (80057f8 <retardoDeActuadores+0x120>)
 80057aa:	789b      	ldrb	r3, [r3, #2]
 80057ac:	2201      	movs	r2, #1
 80057ae:	4053      	eors	r3, r2
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d114      	bne.n	80057e0 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 80057b6:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <retardoDeActuadores+0x124>)
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 80057be:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <retardoDeActuadores+0x124>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2201      	movs	r2, #1
 80057c4:	4053      	eors	r3, r2
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10e      	bne.n	80057ea <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80057cc:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <retardoDeActuadores+0x124>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	711a      	strb	r2, [r3, #4]
 80057d2:	e000      	b.n	80057d6 <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 80057d4:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 80057d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005810 <retardoDeActuadores+0x138>)
 80057d8:	0018      	movs	r0, r3
 80057da:	f001 fdf2 	bl	80073c2 <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 80057de:	e005      	b.n	80057ec <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 80057e0:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 80057e2:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <retardoDeActuadores+0x124>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	711a      	strb	r2, [r3, #4]
 80057e8:	e000      	b.n	80057ec <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80057ea:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 80057ec:	4b03      	ldr	r3, [pc, #12]	@ (80057fc <retardoDeActuadores+0x124>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
}
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000bb4 	.word	0x20000bb4
 80057fc:	20000c6c 	.word	0x20000c6c
 8005800:	20000c66 	.word	0x20000c66
 8005804:	20000c67 	.word	0x20000c67
 8005808:	20000bf0 	.word	0x20000bf0
 800580c:	20000c68 	.word	0x20000c68
 8005810:	20000c69 	.word	0x20000c69

08005814 <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
    asm ("nop");
 8005818:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 800581a:	4b4b      	ldr	r3, [pc, #300]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 8005820:	4b4a      	ldr	r3, [pc, #296]	@ (800594c <calculando_tiempo_UNIX+0x138>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	2203      	movs	r2, #3
 8005826:	4013      	ands	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <calculando_tiempo_UNIX+0x2e>
 800582e:	4b48      	ldr	r3, [pc, #288]	@ (8005950 <calculando_tiempo_UNIX+0x13c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d905      	bls.n	8005842 <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 8005836:	4b44      	ldr	r3, [pc, #272]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a46      	ldr	r2, [pc, #280]	@ (8005954 <calculando_tiempo_UNIX+0x140>)
 800583c:	189a      	adds	r2, r3, r2
 800583e:	4b42      	ldr	r3, [pc, #264]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005840:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 8005842:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <calculando_tiempo_UNIX+0x13c>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d013      	beq.n	8005872 <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 800584a:	4b41      	ldr	r3, [pc, #260]	@ (8005950 <calculando_tiempo_UNIX+0x13c>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	4b41      	ldr	r3, [pc, #260]	@ (8005958 <calculando_tiempo_UNIX+0x144>)
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	58d2      	ldr	r2, [r2, r3]
 8005856:	0013      	movs	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	189b      	adds	r3, r3, r2
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	0113      	lsls	r3, r2, #4
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	01db      	lsls	r3, r3, #7
 8005866:	001a      	movs	r2, r3
 8005868:	4b37      	ldr	r3, [pc, #220]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	18d2      	adds	r2, r2, r3
 800586e:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005870:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 8005872:	4b36      	ldr	r3, [pc, #216]	@ (800594c <calculando_tiempo_UNIX+0x138>)
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	4a39      	ldr	r2, [pc, #228]	@ (800595c <calculando_tiempo_UNIX+0x148>)
 8005878:	189a      	adds	r2, r3, r2
 800587a:	0013      	movs	r3, r2
 800587c:	025b      	lsls	r3, r3, #9
 800587e:	189b      	adds	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	189b      	adds	r3, r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	189b      	adds	r3, r3, r2
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	01d3      	lsls	r3, r2, #7
 800588e:	001a      	movs	r2, r3
 8005890:	0013      	movs	r3, r2
 8005892:	001a      	movs	r2, r3
 8005894:	4b2c      	ldr	r3, [pc, #176]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	18d2      	adds	r2, r2, r3
 800589a:	4b2b      	ldr	r3, [pc, #172]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 800589c:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 800589e:	4b2b      	ldr	r3, [pc, #172]	@ (800594c <calculando_tiempo_UNIX+0x138>)
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005960 <calculando_tiempo_UNIX+0x14c>)
 80058a4:	4694      	mov	ip, r2
 80058a6:	4463      	add	r3, ip
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da00      	bge.n	80058ae <calculando_tiempo_UNIX+0x9a>
 80058ac:	3303      	adds	r3, #3
 80058ae:	109b      	asrs	r3, r3, #2
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005964 <calculando_tiempo_UNIX+0x150>)
 80058b4:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 80058b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005964 <calculando_tiempo_UNIX+0x150>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	001a      	movs	r2, r3
 80058bc:	0013      	movs	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	189b      	adds	r3, r3, r2
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	1ad2      	subs	r2, r2, r3
 80058c6:	0113      	lsls	r3, r2, #4
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	01db      	lsls	r3, r3, #7
 80058cc:	001a      	movs	r2, r3
 80058ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	18d2      	adds	r2, r2, r3
 80058d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 80058d6:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 80058d8:	4b23      	ldr	r3, [pc, #140]	@ (8005968 <calculando_tiempo_UNIX+0x154>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	0013      	movs	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	189b      	adds	r3, r3, r2
 80058e4:	011a      	lsls	r2, r3, #4
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	0113      	lsls	r3, r2, #4
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	01db      	lsls	r3, r3, #7
 80058ee:	001a      	movs	r2, r3
 80058f0:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	18d2      	adds	r2, r2, r3
 80058f6:	4b14      	ldr	r3, [pc, #80]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 80058f8:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 80058fa:	4b1c      	ldr	r3, [pc, #112]	@ (800596c <calculando_tiempo_UNIX+0x158>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	001a      	movs	r2, r3
 8005900:	0013      	movs	r3, r2
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	011a      	lsls	r2, r3, #4
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	0113      	lsls	r3, r2, #4
 800590c:	001a      	movs	r2, r3
 800590e:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	18d2      	adds	r2, r2, r3
 8005914:	4b0c      	ldr	r3, [pc, #48]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005916:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 8005918:	4b15      	ldr	r3, [pc, #84]	@ (8005970 <calculando_tiempo_UNIX+0x15c>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	001a      	movs	r2, r3
 800591e:	0013      	movs	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	001a      	movs	r2, r3
 8005928:	4b07      	ldr	r3, [pc, #28]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	18d2      	adds	r2, r2, r3
 800592e:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005930:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 8005932:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <calculando_tiempo_UNIX+0x160>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	001a      	movs	r2, r3
 8005938:	4b03      	ldr	r3, [pc, #12]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	18d2      	adds	r2, r2, r3
 800593e:	4b02      	ldr	r3, [pc, #8]	@ (8005948 <calculando_tiempo_UNIX+0x134>)
 8005940:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20001134 	.word	0x20001134
 800594c:	2000112c 	.word	0x2000112c
 8005950:	2000112e 	.word	0x2000112e
 8005954:	00015180 	.word	0x00015180
 8005958:	200001c4 	.word	0x200001c4
 800595c:	fffff84e 	.word	0xfffff84e
 8005960:	fffff84f 	.word	0xfffff84f
 8005964:	20001138 	.word	0x20001138
 8005968:	2000112f 	.word	0x2000112f
 800596c:	20001130 	.word	0x20001130
 8005970:	20001131 	.word	0x20001131
 8005974:	20001132 	.word	0x20001132

08005978 <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;
extern uint16_t temperatureRTP;

//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	000a      	movs	r2, r1
 8005982:	1cfb      	adds	r3, r7, #3
 8005984:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 8005986:	230e      	movs	r3, #14
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2200      	movs	r2, #0
 800598c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 800598e:	230d      	movs	r3, #13
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e011      	b.n	80059bc <prom8m1b+0x44>
		foo += array[i];
 8005998:	200d      	movs	r0, #13
 800599a:	183b      	adds	r3, r7, r0
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	0019      	movs	r1, r3
 80059a6:	220e      	movs	r2, #14
 80059a8:	18bb      	adds	r3, r7, r2
 80059aa:	18ba      	adds	r2, r7, r2
 80059ac:	8812      	ldrh	r2, [r2, #0]
 80059ae:	188a      	adds	r2, r1, r2
 80059b0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	781a      	ldrb	r2, [r3, #0]
 80059b6:	183b      	adds	r3, r7, r0
 80059b8:	3201      	adds	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	230d      	movs	r3, #13
 80059be:	18fa      	adds	r2, r7, r3
 80059c0:	1cfb      	adds	r3, r7, #3
 80059c2:	7812      	ldrb	r2, [r2, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3e6      	bcc.n	8005998 <prom8m1b+0x20>
	}
	foo /=  prom;
 80059ca:	240e      	movs	r4, #14
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	1cfb      	adds	r3, r7, #3
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	0019      	movs	r1, r3
 80059d6:	0010      	movs	r0, r2
 80059d8:	f7fa fc28 	bl	800022c <__divsi3>
 80059dc:	0003      	movs	r3, r0
 80059de:	001a      	movs	r2, r3
 80059e0:	193b      	adds	r3, r7, r4
 80059e2:	801a      	strh	r2, [r3, #0]
	return foo;
 80059e4:	193b      	adds	r3, r7, r4
 80059e6:	881b      	ldrh	r3, [r3, #0]
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b005      	add	sp, #20
 80059ee:	bd90      	pop	{r4, r7, pc}

080059f0 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 80059f6:	4be3      	ldr	r3, [pc, #908]	@ (8005d84 <prog_param+0x394>)
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2201      	movs	r2, #1
 80059fc:	4053      	eors	r3, r2
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d140      	bne.n	8005a86 <prog_param+0x96>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 8005a04:	4be0      	ldr	r3, [pc, #896]	@ (8005d88 <prog_param+0x398>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 8005a0a:	4be0      	ldr	r3, [pc, #896]	@ (8005d8c <prog_param+0x39c>)
 8005a0c:	2214      	movs	r2, #20
 8005a0e:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 8005a10:	4bdf      	ldr	r3, [pc, #892]	@ (8005d90 <prog_param+0x3a0>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 8005a16:	4bdf      	ldr	r3, [pc, #892]	@ (8005d94 <prog_param+0x3a4>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8005a1c:	2317      	movs	r3, #23
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e00a      	b.n	8005a3c <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 8005a26:	2017      	movs	r0, #23
 8005a28:	183b      	adds	r3, r7, r0
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	4ada      	ldr	r2, [pc, #872]	@ (8005d98 <prog_param+0x3a8>)
 8005a2e:	2100      	movs	r1, #0
 8005a30:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 8005a32:	183b      	adds	r3, r7, r0
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	3201      	adds	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	2317      	movs	r3, #23
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b07      	cmp	r3, #7
 8005a44:	d9ef      	bls.n	8005a26 <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		//uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
		uint8_t *X = &eePlantilla[eedato_seg1];
 8005a46:	4bd5      	ldr	r3, [pc, #852]	@ (8005d9c <prog_param+0x3ac>)
 8005a48:	613b      	str	r3, [r7, #16]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8005a4a:	4bd5      	ldr	r3, [pc, #852]	@ (8005da0 <prog_param+0x3b0>)
 8005a4c:	60fb      	str	r3, [r7, #12]
		uint8_t *Z = &reePlantilla[eedato_seg1];
 8005a4e:	4bd5      	ldr	r3, [pc, #852]	@ (8005da4 <prog_param+0x3b4>)
 8005a50:	60bb      	str	r3, [r7, #8]
		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t)X);	//ld (Y), A
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7fd faf5 	bl	8003044 <findLastValue>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	701a      	strb	r2, [r3, #0]
		*Z = *Y;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	701a      	strb	r2, [r3, #0]
		//*Y = *X;
		X++;//incw X
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
		Y++;//incw Y
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
		Z++;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60bb      	str	r3, [r7, #8]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4bca      	ldr	r3, [pc, #808]	@ (8005da8 <prog_param+0x3b8>)
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d802      	bhi.n	8005a8a <prog_param+0x9a>
			goto copy_eeprom;//jrule copy_eeprom
 8005a84:	e7e5      	b.n	8005a52 <prog_param+0x62>
			goto no_set_prog;
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	e000      	b.n	8005a8c <prog_param+0x9c>
		}

no_set_prog:
 8005a8a:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8005a8c:	4bbe      	ldr	r3, [pc, #760]	@ (8005d88 <prog_param+0x398>)
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <prog_param+0xa8>
 8005a94:	f000 fc28 	bl	80062e8 <prog_param+0x8f8>
			goto ask_btn_prsd;
 8005a98:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8005a9a:	1dfb      	adds	r3, r7, #7
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e00d      	b.n	8005abe <prog_param+0xce>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8005aa2:	1dfb      	adds	r3, r7, #7
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4ac1      	ldr	r2, [pc, #772]	@ (8005dac <prog_param+0x3bc>)
 8005aa8:	5cd3      	ldrb	r3, [r2, r3]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4053      	eors	r3, r2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <prog_param+0xde>
	for(uint8_t k=0; k<8; k++){
 8005ab4:	1dfb      	adds	r3, r7, #7
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	1dfb      	adds	r3, r7, #7
 8005aba:	3201      	adds	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	1dfb      	adds	r3, r7, #7
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d9ed      	bls.n	8005aa2 <prog_param+0xb2>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 8005ac6:	4bb1      	ldr	r3, [pc, #708]	@ (8005d8c <prog_param+0x39c>)
 8005ac8:	2214      	movs	r2, #20
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e000      	b.n	8005ad0 <prog_param+0xe0>
			goto no_btn_pres; //jreq no_btn_pres
 8005ace:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8005ad0:	4bae      	ldr	r3, [pc, #696]	@ (8005d8c <prog_param+0x39c>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <prog_param+0xec>
 8005ad8:	f000 fbf1 	bl	80062be <prog_param+0x8ce>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8005adc:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8005ade:	4baa      	ldr	r3, [pc, #680]	@ (8005d88 <prog_param+0x398>)
 8005ae0:	789b      	ldrb	r3, [r3, #2]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4053      	eors	r3, r2
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d114      	bne.n	8005b16 <prog_param+0x126>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8005aec:	4ba6      	ldr	r3, [pc, #664]	@ (8005d88 <prog_param+0x398>)
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d100      	bne.n	8005af6 <prog_param+0x106>
 8005af4:	e268      	b.n	8005fc8 <prog_param+0x5d8>
			goto jmp_nv2Menu2;
 8005af6:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 8005af8:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005afa:	4bad      	ldr	r3, [pc, #692]	@ (8005db0 <prog_param+0x3c0>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2207      	movs	r2, #7
 8005b00:	4013      	ands	r3, r2
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	4bab      	ldr	r3, [pc, #684]	@ (8005db4 <prog_param+0x3c4>)
 8005b06:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 8005b08:	4baa      	ldr	r3, [pc, #680]	@ (8005db4 <prog_param+0x3c4>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d901      	bls.n	8005b14 <prog_param+0x124>
 8005b10:	f000 fbc3 	bl	800629a <prog_param+0x8aa>
 8005b14:	e305      	b.n	8006122 <prog_param+0x732>
			goto noMenu2;
 8005b16:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 8005b18:	4b9b      	ldr	r3, [pc, #620]	@ (8005d88 <prog_param+0x398>)
 8005b1a:	78db      	ldrb	r3, [r3, #3]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4053      	eors	r3, r2
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d100      	bne.n	8005b28 <prog_param+0x138>
 8005b26:	e0cc      	b.n	8005cc2 <prog_param+0x2d2>
			goto sel_param;
 8005b28:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 8005b2a:	4ba0      	ldr	r3, [pc, #640]	@ (8005dac <prog_param+0x3bc>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 8005b30:	4b9e      	ldr	r3, [pc, #632]	@ (8005dac <prog_param+0x3bc>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 8005b36:	4b97      	ldr	r3, [pc, #604]	@ (8005d94 <prog_param+0x3a4>)
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	4b9e      	ldr	r3, [pc, #632]	@ (8005db4 <prog_param+0x3c4>)
 8005b3c:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 8005b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8005db8 <prog_param+0x3c8>)
 8005b40:	2209      	movs	r2, #9
 8005b42:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 8005b44:	4b9d      	ldr	r3, [pc, #628]	@ (8005dbc <prog_param+0x3cc>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 8005b4a:	f000 fbd9 	bl	8006300 <md_dif_math>
		param = wreg;		//mov param,wreg
 8005b4e:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc0 <prog_param+0x3d0>)
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	4b90      	ldr	r3, [pc, #576]	@ (8005d94 <prog_param+0x3a4>)
 8005b54:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 8005b56:	4b8f      	ldr	r3, [pc, #572]	@ (8005d94 <prog_param+0x3a4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	220f      	movs	r2, #15
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	4b94      	ldr	r3, [pc, #592]	@ (8005db4 <prog_param+0x3c4>)
 8005b62:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005b64:	4b93      	ldr	r3, [pc, #588]	@ (8005db4 <prog_param+0x3c4>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d840      	bhi.n	8005bee <prog_param+0x1fe>
 8005b6c:	009a      	lsls	r2, r3, #2
 8005b6e:	4b95      	ldr	r3, [pc, #596]	@ (8005dc4 <prog_param+0x3d4>)
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 8005b76:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 8005b78:	2125      	movs	r1, #37	@ 0x25
 8005b7a:	2005      	movs	r0, #5
 8005b7c:	f001 fd3c 	bl	80075f8 <op_menu>
		goto ask_enter;//jra ask_enter
 8005b80:	e03a      	b.n	8005bf8 <prog_param+0x208>
			case 1: goto opc01m01;
 8005b82:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 8005b84:	210f      	movs	r1, #15
 8005b86:	200d      	movs	r0, #13
 8005b88:	f001 fd36 	bl	80075f8 <op_menu>
		goto ask_enter; // jra ask_enter
 8005b8c:	e034      	b.n	8005bf8 <prog_param+0x208>
			case 2: goto opc02m01;
 8005b8e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8005b90:	210a      	movs	r1, #10
 8005b92:	2020      	movs	r0, #32
 8005b94:	f001 fd30 	bl	80075f8 <op_menu>
		goto ask_enter;//jra ask_enter
 8005b98:	e02e      	b.n	8005bf8 <prog_param+0x208>
			case 3: goto opc03m01;
 8005b9a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8005b9c:	210b      	movs	r1, #11
 8005b9e:	2020      	movs	r0, #32
 8005ba0:	f001 fd2a 	bl	80075f8 <op_menu>
		goto ask_enter;//jra ask_enter
 8005ba4:	e028      	b.n	8005bf8 <prog_param+0x208>
			case 4: goto opc04m01;
 8005ba6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8005ba8:	210f      	movs	r1, #15
 8005baa:	2000      	movs	r0, #0
 8005bac:	f001 fd24 	bl	80075f8 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bb0:	e022      	b.n	8005bf8 <prog_param+0x208>
			case 5: goto opc05m01;
 8005bb2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 8005bb4:	2105      	movs	r1, #5
 8005bb6:	2025      	movs	r0, #37	@ 0x25
 8005bb8:	f001 fd1e 	bl	80075f8 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bbc:	e01c      	b.n	8005bf8 <prog_param+0x208>
			case 6: goto opc06m01;
 8005bbe:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8005bc0:	2127      	movs	r1, #39	@ 0x27
 8005bc2:	200f      	movs	r0, #15
 8005bc4:	f001 fd18 	bl	80075f8 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bc8:	e016      	b.n	8005bf8 <prog_param+0x208>
			case 7: goto opc07m01;
 8005bca:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8005bcc:	210a      	movs	r1, #10
 8005bce:	200f      	movs	r0, #15
 8005bd0:	f001 fd12 	bl	80075f8 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bd4:	e010      	b.n	8005bf8 <prog_param+0x208>
			case 8: goto opc08m01;
 8005bd6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8005bd8:	210e      	movs	r1, #14
 8005bda:	2005      	movs	r0, #5
 8005bdc:	f001 fd0c 	bl	80075f8 <op_menu>
		goto ask_enter;//jra ask_enter
 8005be0:	e00a      	b.n	8005bf8 <prog_param+0x208>
			case 9: goto opc09m01;
 8005be2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 8005be4:	210e      	movs	r1, #14
 8005be6:	201f      	movs	r0, #31
 8005be8:	f001 fd06 	bl	80075f8 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bec:	e004      	b.n	8005bf8 <prog_param+0x208>
			default: goto opcNA;
 8005bee:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005bf0:	2126      	movs	r1, #38	@ 0x26
 8005bf2:	2026      	movs	r0, #38	@ 0x26
 8005bf4:	f001 fd00 	bl	80075f8 <op_menu>
		datled_clear();
 8005bf8:	f001 fd18 	bl	800762c <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 8005bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8005dac <prog_param+0x3bc>)
 8005bfe:	789b      	ldrb	r3, [r3, #2]
 8005c00:	2201      	movs	r2, #1
 8005c02:	4053      	eors	r3, r2
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d157      	bne.n	8005cba <prog_param+0x2ca>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 8005c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8005d88 <prog_param+0x398>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 8005c10:	4b60      	ldr	r3, [pc, #384]	@ (8005d94 <prog_param+0x3a4>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	d100      	bne.n	8005c1a <prog_param+0x22a>
 8005c18:	e353      	b.n	80062c2 <prog_param+0x8d2>
			goto ask_set_prog;//jrne ask_set_prog
 8005c1a:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 8005c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8005d94 <prog_param+0x3a4>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d14c      	bne.n	8005cbe <prog_param+0x2ce>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 8005c24:	4b5c      	ldr	r3, [pc, #368]	@ (8005d98 <prog_param+0x3a8>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4053      	eors	r3, r2
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <prog_param+0x24a>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 8005c32:	4b65      	ldr	r3, [pc, #404]	@ (8005dc8 <prog_param+0x3d8>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e000      	b.n	8005c3c <prog_param+0x24c>
			goto no_desh_forz;
 8005c3a:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 8005c3c:	4b56      	ldr	r3, [pc, #344]	@ (8005d98 <prog_param+0x3a8>)
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2201      	movs	r2, #1
 8005c42:	4053      	eors	r3, r2
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d12f      	bne.n	8005caa <prog_param+0x2ba>
		flags_menu[1] = 0; //bres flags_menu,#1
 8005c4a:	4b53      	ldr	r3, [pc, #332]	@ (8005d98 <prog_param+0x3a8>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 8005c50:	4b53      	ldr	r3, [pc, #332]	@ (8005da0 <prog_param+0x3b0>)
 8005c52:	2239      	movs	r2, #57	@ 0x39
 8005c54:	5c9a      	ldrb	r2, [r3, r2]
 8005c56:	4b52      	ldr	r3, [pc, #328]	@ (8005da0 <prog_param+0x3b0>)
 8005c58:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8005c5a:	4b51      	ldr	r3, [pc, #324]	@ (8005da0 <prog_param+0x3b0>)
 8005c5c:	223a      	movs	r2, #58	@ 0x3a
 8005c5e:	5c9a      	ldrb	r2, [r3, r2]
 8005c60:	4b4f      	ldr	r3, [pc, #316]	@ (8005da0 <prog_param+0x3b0>)
 8005c62:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 8005c64:	4b4e      	ldr	r3, [pc, #312]	@ (8005da0 <prog_param+0x3b0>)
 8005c66:	223b      	movs	r2, #59	@ 0x3b
 8005c68:	5c9a      	ldrb	r2, [r3, r2]
 8005c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8005da0 <prog_param+0x3b0>)
 8005c6c:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8005c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8005da0 <prog_param+0x3b0>)
 8005c70:	223c      	movs	r2, #60	@ 0x3c
 8005c72:	5c9a      	ldrb	r2, [r3, r2]
 8005c74:	4b4a      	ldr	r3, [pc, #296]	@ (8005da0 <prog_param+0x3b0>)
 8005c76:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 8005c78:	4b49      	ldr	r3, [pc, #292]	@ (8005da0 <prog_param+0x3b0>)
 8005c7a:	223d      	movs	r2, #61	@ 0x3d
 8005c7c:	5c99      	ldrb	r1, [r3, r2]
 8005c7e:	4b48      	ldr	r3, [pc, #288]	@ (8005da0 <prog_param+0x3b0>)
 8005c80:	222d      	movs	r2, #45	@ 0x2d
 8005c82:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 8005c84:	4b46      	ldr	r3, [pc, #280]	@ (8005da0 <prog_param+0x3b0>)
 8005c86:	223e      	movs	r2, #62	@ 0x3e
 8005c88:	5c99      	ldrb	r1, [r3, r2]
 8005c8a:	4b45      	ldr	r3, [pc, #276]	@ (8005da0 <prog_param+0x3b0>)
 8005c8c:	222e      	movs	r2, #46	@ 0x2e
 8005c8e:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8005c90:	4b43      	ldr	r3, [pc, #268]	@ (8005da0 <prog_param+0x3b0>)
 8005c92:	223f      	movs	r2, #63	@ 0x3f
 8005c94:	5c99      	ldrb	r1, [r3, r2]
 8005c96:	4b42      	ldr	r3, [pc, #264]	@ (8005da0 <prog_param+0x3b0>)
 8005c98:	222f      	movs	r2, #47	@ 0x2f
 8005c9a:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8005c9c:	4b40      	ldr	r3, [pc, #256]	@ (8005da0 <prog_param+0x3b0>)
 8005c9e:	2240      	movs	r2, #64	@ 0x40
 8005ca0:	5c99      	ldrb	r1, [r3, r2]
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8005da0 <prog_param+0x3b0>)
 8005ca4:	2230      	movs	r2, #48	@ 0x30
 8005ca6:	5499      	strb	r1, [r3, r2]
 8005ca8:	e000      	b.n	8005cac <prog_param+0x2bc>
			goto no_def_param;
 8005caa:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8005cac:	4b47      	ldr	r3, [pc, #284]	@ (8005dcc <prog_param+0x3dc>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8005cb2:	4b47      	ldr	r3, [pc, #284]	@ (8005dd0 <prog_param+0x3e0>)
 8005cb4:	22aa      	movs	r2, #170	@ 0xaa
 8005cb6:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 8005cb8:	e306      	b.n	80062c8 <prog_param+0x8d8>
			goto fin_sel_param;
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	e315      	b.n	80062ea <prog_param+0x8fa>
			goto fin_sel_param; //jrne fin_sel_param
 8005cbe:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8005cc0:	e313      	b.n	80062ea <prog_param+0x8fa>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8005cc2:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 8005cc4:	4b33      	ldr	r3, [pc, #204]	@ (8005d94 <prog_param+0x3a4>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	220f      	movs	r2, #15
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <prog_param+0x3c4>)
 8005cd0:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005cd2:	4b38      	ldr	r3, [pc, #224]	@ (8005db4 <prog_param+0x3c4>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	d900      	bls.n	8005cdc <prog_param+0x2ec>
 8005cda:	e132      	b.n	8005f42 <prog_param+0x552>
 8005cdc:	009a      	lsls	r2, r3, #2
 8005cde:	4b3d      	ldr	r3, [pc, #244]	@ (8005dd4 <prog_param+0x3e4>)
 8005ce0:	18d3      	adds	r3, r2, r3
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 8005ce6:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 8005ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd8 <prog_param+0x3e8>)
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 fbe2 	bl	80064b4 <TwoByteInArrayToWord>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	001c      	movs	r4, r3
 8005cf4:	4b39      	ldr	r3, [pc, #228]	@ (8005ddc <prog_param+0x3ec>)
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f000 fbdc 	bl	80064b4 <TwoByteInArrayToWord>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	001d      	movs	r5, r3
 8005d00:	4b37      	ldr	r3, [pc, #220]	@ (8005de0 <prog_param+0x3f0>)
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 fbd6 	bl	80064b4 <TwoByteInArrayToWord>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	001a      	movs	r2, r3
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	2301      	movs	r3, #1
 8005d12:	0029      	movs	r1, r5
 8005d14:	0020      	movs	r0, r4
 8005d16:	f001 fcc3 	bl	80076a0 <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 8005d1a:	e117      	b.n	8005f4c <prog_param+0x55c>
			case 1: goto opc01m01nv2;
 8005d1c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 8005d1e:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <prog_param+0x3f4>)
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fbc7 	bl	80064b4 <TwoByteInArrayToWord>
 8005d26:	0003      	movs	r3, r0
 8005d28:	001a      	movs	r2, r3
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	2303      	movs	r3, #3
 8005d30:	2100      	movs	r1, #0
 8005d32:	2063      	movs	r0, #99	@ 0x63
 8005d34:	f001 fcb4 	bl	80076a0 <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005d38:	e108      	b.n	8005f4c <prog_param+0x55c>
			case 2: goto opc02m01nv2;
 8005d3a:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 8005d3c:	4b26      	ldr	r3, [pc, #152]	@ (8005dd8 <prog_param+0x3e8>)
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fbb8 	bl	80064b4 <TwoByteInArrayToWord>
 8005d44:	0003      	movs	r3, r0
 8005d46:	3396      	adds	r3, #150	@ 0x96
 8005d48:	001c      	movs	r4, r3
 8005d4a:	4b25      	ldr	r3, [pc, #148]	@ (8005de0 <prog_param+0x3f0>)
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fbb1 	bl	80064b4 <TwoByteInArrayToWord>
 8005d52:	0003      	movs	r3, r0
 8005d54:	001d      	movs	r5, r3
 8005d56:	4b23      	ldr	r3, [pc, #140]	@ (8005de4 <prog_param+0x3f4>)
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f000 fbab 	bl	80064b4 <TwoByteInArrayToWord>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	18eb      	adds	r3, r5, r3
 8005d62:	330a      	adds	r3, #10
 8005d64:	001d      	movs	r5, r3
 8005d66:	4b20      	ldr	r3, [pc, #128]	@ (8005de8 <prog_param+0x3f8>)
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 fba3 	bl	80064b4 <TwoByteInArrayToWord>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	001a      	movs	r2, r3
 8005d72:	232e      	movs	r3, #46	@ 0x2e
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	232d      	movs	r3, #45	@ 0x2d
 8005d78:	0029      	movs	r1, r5
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f001 fc90 	bl	80076a0 <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005d80:	e0e4      	b.n	8005f4c <prog_param+0x55c>
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	20000c28 	.word	0x20000c28
 8005d88:	20000bf8 	.word	0x20000bf8
 8005d8c:	20000b82 	.word	0x20000b82
 8005d90:	20000c10 	.word	0x20000c10
 8005d94:	20000c0f 	.word	0x20000c0f
 8005d98:	20000c58 	.word	0x20000c58
 8005d9c:	0803f000 	.word	0x0803f000
 8005da0:	20000138 	.word	0x20000138
 8005da4:	20000c9c 	.word	0x20000c9c
 8005da8:	200001b7 	.word	0x200001b7
 8005dac:	20000c00 	.word	0x20000c00
 8005db0:	20000c0e 	.word	0x20000c0e
 8005db4:	200008e4 	.word	0x200008e4
 8005db8:	20000c12 	.word	0x20000c12
 8005dbc:	20000c14 	.word	0x20000c14
 8005dc0:	20000b67 	.word	0x20000b67
 8005dc4:	0801c200 	.word	0x0801c200
 8005dc8:	20000c60 	.word	0x20000c60
 8005dcc:	20000c74 	.word	0x20000c74
 8005dd0:	20000c73 	.word	0x20000c73
 8005dd4:	0801c228 	.word	0x0801c228
 8005dd8:	20000147 	.word	0x20000147
 8005ddc:	20000145 	.word	0x20000145
 8005de0:	20000139 	.word	0x20000139
 8005de4:	2000013b 	.word	0x2000013b
 8005de8:	20000165 	.word	0x20000165
			case 3: goto opc03m01nv2;
 8005dec:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 8005dee:	4bd4      	ldr	r3, [pc, #848]	@ (8006140 <prog_param+0x750>)
 8005df0:	0018      	movs	r0, r3
 8005df2:	f000 fb5f 	bl	80064b4 <TwoByteInArrayToWord>
 8005df6:	0003      	movs	r3, r0
 8005df8:	3b0a      	subs	r3, #10
 8005dfa:	001c      	movs	r4, r3
 8005dfc:	4bd1      	ldr	r3, [pc, #836]	@ (8006144 <prog_param+0x754>)
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 fb58 	bl	80064b4 <TwoByteInArrayToWord>
 8005e04:	0003      	movs	r3, r0
 8005e06:	3b96      	subs	r3, #150	@ 0x96
 8005e08:	001d      	movs	r5, r3
 8005e0a:	4bcf      	ldr	r3, [pc, #828]	@ (8006148 <prog_param+0x758>)
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 fb51 	bl	80064b4 <TwoByteInArrayToWord>
 8005e12:	0003      	movs	r3, r0
 8005e14:	001a      	movs	r2, r3
 8005e16:	2330      	movs	r3, #48	@ 0x30
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	232f      	movs	r3, #47	@ 0x2f
 8005e1c:	0029      	movs	r1, r5
 8005e1e:	0020      	movs	r0, r4
 8005e20:	f001 fc3e 	bl	80076a0 <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 8005e24:	e092      	b.n	8005f4c <prog_param+0x55c>
			case 4: goto opc04m01nv2;
 8005e26:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 8005e28:	4bc8      	ldr	r3, [pc, #800]	@ (800614c <prog_param+0x75c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <prog_param+0x44a>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 8005e30:	4bc6      	ldr	r3, [pc, #792]	@ (800614c <prog_param+0x75c>)
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00c      	beq.n	8005e52 <prog_param+0x462>
				goto toggle_opc04m01nv2;
 8005e38:	e000      	b.n	8005e3c <prog_param+0x44c>
				goto toggle_opc04m01nv2;
 8005e3a:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 8005e3c:	4bc4      	ldr	r3, [pc, #784]	@ (8006150 <prog_param+0x760>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	4053      	eors	r3, r2
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	4193      	sbcs	r3, r2
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	4bc0      	ldr	r3, [pc, #768]	@ (8006150 <prog_param+0x760>)
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e000      	b.n	8005e54 <prog_param+0x464>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 8005e52:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005e54:	2101      	movs	r1, #1
 8005e56:	2028      	movs	r0, #40	@ 0x28
 8005e58:	f001 fbce 	bl	80075f8 <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 8005e5c:	4bbc      	ldr	r3, [pc, #752]	@ (8006150 <prog_param+0x760>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4053      	eors	r3, r2
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <prog_param+0x484>
			op_menu (0x00, 0x1D);
 8005e6a:	211d      	movs	r1, #29
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f001 fbc3 	bl	80075f8 <op_menu>
 8005e72:	e000      	b.n	8005e76 <prog_param+0x486>
				goto dpy2_opc04m01nv2;
 8005e74:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005e76:	f001 fbd9 	bl	800762c <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005e7a:	e067      	b.n	8005f4c <prog_param+0x55c>
			case 5: goto opc05m01nv2;
 8005e7c:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 8005e7e:	2105      	movs	r1, #5
 8005e80:	2025      	movs	r0, #37	@ 0x25
 8005e82:	f001 fbb9 	bl	80075f8 <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8005e86:	4bb3      	ldr	r3, [pc, #716]	@ (8006154 <prog_param+0x764>)
 8005e88:	2263      	movs	r2, #99	@ 0x63
 8005e8a:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 8005e8c:	4bb2      	ldr	r3, [pc, #712]	@ (8006158 <prog_param+0x768>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8005e92:	4bb2      	ldr	r3, [pc, #712]	@ (800615c <prog_param+0x76c>)
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	4bb2      	ldr	r3, [pc, #712]	@ (8006160 <prog_param+0x770>)
 8005e98:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 8005e9a:	f000 fa31 	bl	8006300 <md_dif_math>
			key = wreg;//	mov	key,wreg
 8005e9e:	4bb1      	ldr	r3, [pc, #708]	@ (8006164 <prog_param+0x774>)
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	4bae      	ldr	r3, [pc, #696]	@ (800615c <prog_param+0x76c>)
 8005ea4:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 8005ea6:	f000 fd3b 	bl	8006920 <soloent1>
			datled_clear();
 8005eaa:	f001 fbbf 	bl	800762c <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 8005eae:	e04d      	b.n	8005f4c <prog_param+0x55c>
			case 6: goto opc06m01nv2;
 8005eb0:	46c0      	nop			@ (mov r8, r8)
			op_menu  (reePlantilla[eeversion1], reePlantilla[eeversion2]/10);
 8005eb2:	4bad      	ldr	r3, [pc, #692]	@ (8006168 <prog_param+0x778>)
 8005eb4:	227b      	movs	r2, #123	@ 0x7b
 8005eb6:	5c9c      	ldrb	r4, [r3, r2]
 8005eb8:	4bab      	ldr	r3, [pc, #684]	@ (8006168 <prog_param+0x778>)
 8005eba:	227c      	movs	r2, #124	@ 0x7c
 8005ebc:	5c9b      	ldrb	r3, [r3, r2]
 8005ebe:	210a      	movs	r1, #10
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fa f929 	bl	8000118 <__udivsi3>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	0019      	movs	r1, r3
 8005ecc:	0020      	movs	r0, r4
 8005ece:	f001 fb93 	bl	80075f8 <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005ed2:	e03b      	b.n	8005f4c <prog_param+0x55c>
			case 7: goto opc07m01nv2;
 8005ed4:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8005ed6:	4b9d      	ldr	r3, [pc, #628]	@ (800614c <prog_param+0x75c>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <prog_param+0x4f8>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 8005ede:	4b9b      	ldr	r3, [pc, #620]	@ (800614c <prog_param+0x75c>)
 8005ee0:	791b      	ldrb	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <prog_param+0x510>
			   goto toggle_opc07m01nv2;
 8005ee6:	e000      	b.n	8005eea <prog_param+0x4fa>
			   goto toggle_opc07m01nv2;
 8005ee8:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8005eea:	4b99      	ldr	r3, [pc, #612]	@ (8006150 <prog_param+0x760>)
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	4053      	eors	r3, r2
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	4193      	sbcs	r3, r2
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4b95      	ldr	r3, [pc, #596]	@ (8006150 <prog_param+0x760>)
 8005efc:	705a      	strb	r2, [r3, #1]
 8005efe:	e000      	b.n	8005f02 <prog_param+0x512>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8005f00:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005f02:	2101      	movs	r1, #1
 8005f04:	2028      	movs	r0, #40	@ 0x28
 8005f06:	f001 fb77 	bl	80075f8 <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8005f0a:	4b91      	ldr	r3, [pc, #580]	@ (8006150 <prog_param+0x760>)
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4053      	eors	r3, r2
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <prog_param+0x532>
			op_menu (0x00, 0x1D);
 8005f18:	211d      	movs	r1, #29
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f001 fb6c 	bl	80075f8 <op_menu>
 8005f20:	e000      	b.n	8005f24 <prog_param+0x534>
				goto dpy2_opc07m01nv2;
 8005f22:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005f24:	f001 fb82 	bl	800762c <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005f28:	e010      	b.n	8005f4c <prog_param+0x55c>
			case 8: goto opc08m01nv2;
 8005f2a:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8005f2c:	210e      	movs	r1, #14
 8005f2e:	2005      	movs	r0, #5
 8005f30:	f001 fb62 	bl	80075f8 <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8005f34:	e00a      	b.n	8005f4c <prog_param+0x55c>
			case 9: goto opc09m01nv2;
 8005f36:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8005f38:	210e      	movs	r1, #14
 8005f3a:	201f      	movs	r0, #31
 8005f3c:	f001 fb5c 	bl	80075f8 <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8005f40:	e004      	b.n	8005f4c <prog_param+0x55c>
			default: goto opcNAnv2;
 8005f42:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8005f44:	2126      	movs	r1, #38	@ 0x26
 8005f46:	2026      	movs	r0, #38	@ 0x26
 8005f48:	f001 fb56 	bl	80075f8 <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8005f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800614c <prog_param+0x75c>)
 8005f4e:	789b      	ldrb	r3, [r3, #2]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4053      	eors	r3, r2
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d12e      	bne.n	8005fb8 <prog_param+0x5c8>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8005f5a:	4b84      	ldr	r3, [pc, #528]	@ (800616c <prog_param+0x77c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8005f60:	4b83      	ldr	r3, [pc, #524]	@ (8006170 <prog_param+0x780>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d129      	bne.n	8005fbc <prog_param+0x5cc>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8005f68:	4b82      	ldr	r3, [pc, #520]	@ (8006174 <prog_param+0x784>)
 8005f6a:	2273      	movs	r2, #115	@ 0x73
 8005f6c:	5c9a      	ldrb	r2, [r3, r2]
 8005f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800615c <prog_param+0x76c>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d124      	bne.n	8005fc0 <prog_param+0x5d0>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8005f76:	4976      	ldr	r1, [pc, #472]	@ (8006150 <prog_param+0x760>)
 8005f78:	487c      	ldr	r0, [pc, #496]	@ (800616c <prog_param+0x77c>)
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f007 fbd1 	bl	800d724 <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8005f82:	4b7d      	ldr	r3, [pc, #500]	@ (8006178 <prog_param+0x788>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8005f88:	4b78      	ldr	r3, [pc, #480]	@ (800616c <prog_param+0x77c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4053      	eors	r3, r2
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d103      	bne.n	8005f9e <prog_param+0x5ae>
			flags_menu[3] = 1;//bset flags_menu,#3
 8005f96:	4b6e      	ldr	r3, [pc, #440]	@ (8006150 <prog_param+0x760>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	70da      	strb	r2, [r3, #3]
 8005f9c:	e000      	b.n	8005fa0 <prog_param+0x5b0>
				goto noSetFlagLU;
 8005f9e:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8006150 <prog_param+0x760>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8005fa6:	4b73      	ldr	r3, [pc, #460]	@ (8006174 <prog_param+0x784>)
 8005fa8:	2252      	movs	r2, #82	@ 0x52
 8005faa:	5c9b      	ldrb	r3, [r3, r2]
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d109      	bne.n	8005fc4 <prog_param+0x5d4>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8005fb0:	4b67      	ldr	r3, [pc, #412]	@ (8006150 <prog_param+0x760>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8005fb6:	e198      	b.n	80062ea <prog_param+0x8fa>
				goto no_enter_nv2;
 8005fb8:	46c0      	nop			@ (mov r8, r8)
 8005fba:	e196      	b.n	80062ea <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8005fbc:	46c0      	nop			@ (mov r8, r8)
 8005fbe:	e194      	b.n	80062ea <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2
 8005fc0:	46c0      	nop			@ (mov r8, r8)
 8005fc2:	e192      	b.n	80062ea <prog_param+0x8fa>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8005fc4:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8005fc6:	e190      	b.n	80062ea <prog_param+0x8fa>
		goto menu2; //jp menu2
 8005fc8:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8005fca:	4960      	ldr	r1, [pc, #384]	@ (800614c <prog_param+0x75c>)
 8005fcc:	485f      	ldr	r0, [pc, #380]	@ (800614c <prog_param+0x75c>)
 8005fce:	2305      	movs	r3, #5
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f007 fbc2 	bl	800d75a <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8005fd6:	4b68      	ldr	r3, [pc, #416]	@ (8006178 <prog_param+0x788>)
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	4b61      	ldr	r3, [pc, #388]	@ (8006160 <prog_param+0x770>)
 8005fdc:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8005fde:	4b5d      	ldr	r3, [pc, #372]	@ (8006154 <prog_param+0x764>)
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8005fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8006158 <prog_param+0x768>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8005fea:	f000 f989 	bl	8006300 <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8005fee:	4b5d      	ldr	r3, [pc, #372]	@ (8006164 <prog_param+0x774>)
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	4b61      	ldr	r3, [pc, #388]	@ (8006178 <prog_param+0x788>)
 8005ff4:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005ff6:	4b60      	ldr	r3, [pc, #384]	@ (8006178 <prog_param+0x788>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b57      	ldr	r3, [pc, #348]	@ (8006160 <prog_param+0x770>)
 8006002:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8006004:	4b56      	ldr	r3, [pc, #344]	@ (8006160 <prog_param+0x770>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d822      	bhi.n	8006052 <prog_param+0x662>
 800600c:	009a      	lsls	r2, r3, #2
 800600e:	4b5b      	ldr	r3, [pc, #364]	@ (800617c <prog_param+0x78c>)
 8006010:	18d3      	adds	r3, r2, r3
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 8006016:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8006018:	210f      	movs	r1, #15
 800601a:	2000      	movs	r0, #0
 800601c:	f001 faec 	bl	80075f8 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006020:	e01c      	b.n	800605c <prog_param+0x66c>
			case 1: goto opc01m02;
 8006022:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8006024:	2127      	movs	r1, #39	@ 0x27
 8006026:	2011      	movs	r0, #17
 8006028:	f001 fae6 	bl	80075f8 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 800602c:	e016      	b.n	800605c <prog_param+0x66c>
			case 2: goto opc02m02;
 800602e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8006030:	211d      	movs	r1, #29
 8006032:	2027      	movs	r0, #39	@ 0x27
 8006034:	f001 fae0 	bl	80075f8 <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 8006038:	e010      	b.n	800605c <prog_param+0x66c>
			case 3: goto opc03m02;
 800603a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 800603c:	210e      	movs	r1, #14
 800603e:	2005      	movs	r0, #5
 8006040:	f001 fada 	bl	80075f8 <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8006044:	e00a      	b.n	800605c <prog_param+0x66c>
			case 4: goto opc04m02;
 8006046:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 8006048:	210e      	movs	r1, #14
 800604a:	201f      	movs	r0, #31
 800604c:	f001 fad4 	bl	80075f8 <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8006050:	e004      	b.n	800605c <prog_param+0x66c>
			default: goto opcNA_m02;
 8006052:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8006054:	2126      	movs	r1, #38	@ 0x26
 8006056:	2026      	movs	r0, #38	@ 0x26
 8006058:	f001 face 	bl	80075f8 <op_menu>
		datled_clear();
 800605c:	f001 fae6 	bl	800762c <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8006060:	4b3a      	ldr	r3, [pc, #232]	@ (800614c <prog_param+0x75c>)
 8006062:	789b      	ldrb	r3, [r3, #2]
 8006064:	2201      	movs	r2, #1
 8006066:	4053      	eors	r3, r2
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d155      	bne.n	800611a <prog_param+0x72a>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 800606e:	4b3f      	ldr	r3, [pc, #252]	@ (800616c <prog_param+0x77c>)
 8006070:	2201      	movs	r2, #1
 8006072:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8006074:	4b40      	ldr	r3, [pc, #256]	@ (8006178 <prog_param+0x788>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d100      	bne.n	800607e <prog_param+0x68e>
 800607c:	e123      	b.n	80062c6 <prog_param+0x8d6>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 800607e:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8006080:	4b3d      	ldr	r3, [pc, #244]	@ (8006178 <prog_param+0x788>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d14a      	bne.n	800611e <prog_param+0x72e>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 8006088:	4b38      	ldr	r3, [pc, #224]	@ (800616c <prog_param+0x77c>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 800608e:	4b30      	ldr	r3, [pc, #192]	@ (8006150 <prog_param+0x760>)
 8006090:	78db      	ldrb	r3, [r3, #3]
 8006092:	2201      	movs	r2, #1
 8006094:	4053      	eors	r3, r2
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <prog_param+0x6b4>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 800609c:	4b33      	ldr	r3, [pc, #204]	@ (800616c <prog_param+0x77c>)
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <prog_param+0x6b6>
			goto noOnLuz;
 80060a4:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 80060a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006150 <prog_param+0x760>)
 80060a8:	789b      	ldrb	r3, [r3, #2]
 80060aa:	2201      	movs	r2, #1
 80060ac:	4053      	eors	r3, r2
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <prog_param+0x6cc>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 80060b4:	4b32      	ldr	r3, [pc, #200]	@ (8006180 <prog_param+0x790>)
 80060b6:	2278      	movs	r2, #120	@ 0x78
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e000      	b.n	80060be <prog_param+0x6ce>
			goto noOffManto;
 80060bc:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 80060be:	4b31      	ldr	r3, [pc, #196]	@ (8006184 <prog_param+0x794>)
 80060c0:	2252      	movs	r2, #82	@ 0x52
 80060c2:	2100      	movs	r1, #0
 80060c4:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 80060c6:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <prog_param+0x760>)
 80060c8:	791b      	ldrb	r3, [r3, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	4053      	eors	r3, r2
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <prog_param+0x6ee>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 80060d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006184 <prog_param+0x794>)
 80060d6:	2252      	movs	r2, #82	@ 0x52
 80060d8:	2120      	movs	r1, #32
 80060da:	5499      	strb	r1, [r3, r2]
 80060dc:	e000      	b.n	80060e0 <prog_param+0x6f0>
			goto noFahrenheitFlagDpy;
 80060de:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == reePlantilla[eeescala]){
 80060e0:	4b28      	ldr	r3, [pc, #160]	@ (8006184 <prog_param+0x794>)
 80060e2:	2252      	movs	r2, #82	@ 0x52
 80060e4:	5c9a      	ldrb	r2, [r3, r2]
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <prog_param+0x778>)
 80060e8:	2152      	movs	r1, #82	@ 0x52
 80060ea:	5c5b      	ldrb	r3, [r3, r1]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d012      	beq.n	8006116 <prog_param+0x726>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 80060f0:	4b24      	ldr	r3, [pc, #144]	@ (8006184 <prog_param+0x794>)
 80060f2:	2252      	movs	r2, #82	@ 0x52
 80060f4:	5c9a      	ldrb	r2, [r3, r2]
 80060f6:	4b24      	ldr	r3, [pc, #144]	@ (8006188 <prog_param+0x798>)
 80060f8:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 80060fa:	4b23      	ldr	r3, [pc, #140]	@ (8006188 <prog_param+0x798>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	001a      	movs	r2, r3
 8006100:	4b22      	ldr	r3, [pc, #136]	@ (800618c <prog_param+0x79c>)
 8006102:	0019      	movs	r1, r3
 8006104:	0010      	movs	r0, r2
 8006106:	f001 fa63 	bl	80075d0 <wreeprom>
		reePlantilla[eeescala] = waux;
 800610a:	4b1f      	ldr	r3, [pc, #124]	@ (8006188 <prog_param+0x798>)
 800610c:	7819      	ldrb	r1, [r3, #0]
 800610e:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <prog_param+0x778>)
 8006110:	2252      	movs	r2, #82	@ 0x52
 8006112:	5499      	strb	r1, [r3, r2]
		 goto cancel_prog; //jp cancel_prog
 8006114:	e0d8      	b.n	80062c8 <prog_param+0x8d8>
			goto noCambiaEscala;//	jreq noCambiaEscala
 8006116:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 8006118:	e0d6      	b.n	80062c8 <prog_param+0x8d8>
			goto fin_menu2;
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	e0e5      	b.n	80062ea <prog_param+0x8fa>
			goto fin_menu2;//	jrne fin_menu2;
 800611e:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8006120:	e0e3      	b.n	80062ea <prog_param+0x8fa>
			switch(STM8_A)
 8006122:	009a      	lsls	r2, r3, #2
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <prog_param+0x7a0>)
 8006126:	18d3      	adds	r3, r2, r3
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 800612c:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 800612e:	4b07      	ldr	r3, [pc, #28]	@ (800614c <prog_param+0x75c>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d12e      	bne.n	8006194 <prog_param+0x7a4>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 8006136:	4b05      	ldr	r3, [pc, #20]	@ (800614c <prog_param+0x75c>)
 8006138:	791b      	ldrb	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d036      	beq.n	80061ac <prog_param+0x7bc>
				goto toggle_opc00m02nv2;
 800613e:	e02a      	b.n	8006196 <prog_param+0x7a6>
 8006140:	20000139 	.word	0x20000139
 8006144:	20000145 	.word	0x20000145
 8006148:	20000167 	.word	0x20000167
 800614c:	20000c00 	.word	0x20000c00
 8006150:	20000c58 	.word	0x20000c58
 8006154:	20000c12 	.word	0x20000c12
 8006158:	20000c14 	.word	0x20000c14
 800615c:	20000c10 	.word	0x20000c10
 8006160:	200008e4 	.word	0x200008e4
 8006164:	20000b67 	.word	0x20000b67
 8006168:	20000c9c 	.word	0x20000c9c
 800616c:	20000bf8 	.word	0x20000bf8
 8006170:	20000c0f 	.word	0x20000c0f
 8006174:	200000b8 	.word	0x200000b8
 8006178:	20000c0e 	.word	0x20000c0e
 800617c:	0801c250 	.word	0x0801c250
 8006180:	20000c61 	.word	0x20000c61
 8006184:	20000138 	.word	0x20000138
 8006188:	20000b66 	.word	0x20000b66
 800618c:	0803f052 	.word	0x0803f052
 8006190:	0801c264 	.word	0x0801c264
				goto toggle_opc00m02nv2;
 8006194:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 8006196:	4b57      	ldr	r3, [pc, #348]	@ (80062f4 <prog_param+0x904>)
 8006198:	789b      	ldrb	r3, [r3, #2]
 800619a:	001a      	movs	r2, r3
 800619c:	2302      	movs	r3, #2
 800619e:	4053      	eors	r3, r2
 80061a0:	1e5a      	subs	r2, r3, #1
 80061a2:	4193      	sbcs	r3, r2
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <prog_param+0x904>)
 80061a8:	709a      	strb	r2, [r3, #2]
 80061aa:	e000      	b.n	80061ae <prog_param+0x7be>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 80061ac:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 80061ae:	2101      	movs	r1, #1
 80061b0:	2028      	movs	r0, #40	@ 0x28
 80061b2:	f001 fa21 	bl	80075f8 <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 80061b6:	4b4f      	ldr	r3, [pc, #316]	@ (80062f4 <prog_param+0x904>)
 80061b8:	789b      	ldrb	r3, [r3, #2]
 80061ba:	2201      	movs	r2, #1
 80061bc:	4053      	eors	r3, r2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <prog_param+0x7de>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 80061c4:	211d      	movs	r1, #29
 80061c6:	2000      	movs	r0, #0
 80061c8:	f001 fa16 	bl	80075f8 <op_menu>
 80061cc:	e000      	b.n	80061d0 <prog_param+0x7e0>
				goto dpy2_opc00m02nv2;
 80061ce:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 80061d0:	f001 fa2c 	bl	800762c <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 80061d4:	e066      	b.n	80062a4 <prog_param+0x8b4>
				case 1:  goto opc01m02nv2;
 80061d6:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 80061d8:	4b47      	ldr	r3, [pc, #284]	@ (80062f8 <prog_param+0x908>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <prog_param+0x7fa>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 80061e0:	4b45      	ldr	r3, [pc, #276]	@ (80062f8 <prog_param+0x908>)
 80061e2:	791b      	ldrb	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00c      	beq.n	8006202 <prog_param+0x812>
				goto toggle_opc01m02nv2;
 80061e8:	e000      	b.n	80061ec <prog_param+0x7fc>
				goto toggle_opc01m02nv2;
 80061ea:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 80061ec:	4b41      	ldr	r3, [pc, #260]	@ (80062f4 <prog_param+0x904>)
 80061ee:	78db      	ldrb	r3, [r3, #3]
 80061f0:	2201      	movs	r2, #1
 80061f2:	4053      	eors	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	1e5a      	subs	r2, r3, #1
 80061f8:	4193      	sbcs	r3, r2
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	4b3d      	ldr	r3, [pc, #244]	@ (80062f4 <prog_param+0x904>)
 80061fe:	70da      	strb	r2, [r3, #3]
 8006200:	e000      	b.n	8006204 <prog_param+0x814>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8006202:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8006204:	210f      	movs	r1, #15
 8006206:	2000      	movs	r0, #0
 8006208:	f001 f9f6 	bl	80075f8 <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 800620c:	4b39      	ldr	r3, [pc, #228]	@ (80062f4 <prog_param+0x904>)
 800620e:	78db      	ldrb	r3, [r3, #3]
 8006210:	2201      	movs	r2, #1
 8006212:	4053      	eors	r3, r2
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <prog_param+0x834>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 800621a:	211d      	movs	r1, #29
 800621c:	2000      	movs	r0, #0
 800621e:	f001 f9eb 	bl	80075f8 <op_menu>
 8006222:	e000      	b.n	8006226 <prog_param+0x836>
				goto dpy2_opc01m02nv2;
 8006224:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 8006226:	f001 fa01 	bl	800762c <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 800622a:	e03b      	b.n	80062a4 <prog_param+0x8b4>
				case 2:  goto opc02m02nv2;
 800622c:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 800622e:	4b32      	ldr	r3, [pc, #200]	@ (80062f8 <prog_param+0x908>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <prog_param+0x850>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 8006236:	4b30      	ldr	r3, [pc, #192]	@ (80062f8 <prog_param+0x908>)
 8006238:	791b      	ldrb	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <prog_param+0x868>
			   goto toggle_opc02m02nv2;
 800623e:	e000      	b.n	8006242 <prog_param+0x852>
			   goto toggle_opc02m02nv2;
 8006240:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8006242:	4b2c      	ldr	r3, [pc, #176]	@ (80062f4 <prog_param+0x904>)
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	4053      	eors	r3, r2
 800624a:	b2db      	uxtb	r3, r3
 800624c:	1e5a      	subs	r2, r3, #1
 800624e:	4193      	sbcs	r3, r2
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4b28      	ldr	r3, [pc, #160]	@ (80062f4 <prog_param+0x904>)
 8006254:	711a      	strb	r2, [r3, #4]
 8006256:	e000      	b.n	800625a <prog_param+0x86a>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 8006258:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 800625a:	210c      	movs	r1, #12
 800625c:	2029      	movs	r0, #41	@ 0x29
 800625e:	f001 f9cb 	bl	80075f8 <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8006262:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <prog_param+0x904>)
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	4053      	eors	r3, r2
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <prog_param+0x88a>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8006270:	210f      	movs	r1, #15
 8006272:	2029      	movs	r0, #41	@ 0x29
 8006274:	f001 f9c0 	bl	80075f8 <op_menu>
 8006278:	e000      	b.n	800627c <prog_param+0x88c>
				  goto dpy2_opc02m02nv2;
 800627a:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 800627c:	f001 f9d6 	bl	800762c <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8006280:	e010      	b.n	80062a4 <prog_param+0x8b4>
				case 3:  goto opc03m02nv2;
 8006282:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8006284:	210e      	movs	r1, #14
 8006286:	2005      	movs	r0, #5
 8006288:	f001 f9b6 	bl	80075f8 <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 800628c:	e00a      	b.n	80062a4 <prog_param+0x8b4>
				case 4:  goto opc04m02nv2;
 800628e:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 8006290:	210e      	movs	r1, #14
 8006292:	201f      	movs	r0, #31
 8006294:	f001 f9b0 	bl	80075f8 <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8006298:	e004      	b.n	80062a4 <prog_param+0x8b4>
				default: goto opcNAm02nv2;
 800629a:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 800629c:	2126      	movs	r1, #38	@ 0x26
 800629e:	2026      	movs	r0, #38	@ 0x26
 80062a0:	f001 f9aa 	bl	80075f8 <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 80062a4:	4b14      	ldr	r3, [pc, #80]	@ (80062f8 <prog_param+0x908>)
 80062a6:	789b      	ldrb	r3, [r3, #2]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4053      	eors	r3, r2
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <prog_param+0x8ca>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 80062b2:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <prog_param+0x90c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 80062b8:	e017      	b.n	80062ea <prog_param+0x8fa>
			goto no_enter_m02nv2;
 80062ba:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 80062bc:	e015      	b.n	80062ea <prog_param+0x8fa>
		goto cancel_prog;
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	e002      	b.n	80062c8 <prog_param+0x8d8>
		goto cancel_prog;//jp cancel_prog;
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	e000      	b.n	80062c8 <prog_param+0x8d8>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 80062c6:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 80062c8:	490c      	ldr	r1, [pc, #48]	@ (80062fc <prog_param+0x90c>)
 80062ca:	480c      	ldr	r0, [pc, #48]	@ (80062fc <prog_param+0x90c>)
 80062cc:	2303      	movs	r3, #3
 80062ce:	2201      	movs	r2, #1
 80062d0:	f007 fa43 	bl	800d75a <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 80062d4:	4909      	ldr	r1, [pc, #36]	@ (80062fc <prog_param+0x90c>)
 80062d6:	4809      	ldr	r0, [pc, #36]	@ (80062fc <prog_param+0x90c>)
 80062d8:	2302      	movs	r3, #2
 80062da:	2205      	movs	r2, #5
 80062dc:	f007 fa3d 	bl	800d75a <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 80062e0:	4b06      	ldr	r3, [pc, #24]	@ (80062fc <prog_param+0x90c>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 80062e6:	e000      	b.n	80062ea <prog_param+0x8fa>
		goto fin_prog_param; //jp fin_prog_param
 80062e8:	46c0      	nop			@ (mov r8, r8)
}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b006      	add	sp, #24
 80062f0:	bdb0      	pop	{r4, r5, r7, pc}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	20000c58 	.word	0x20000c58
 80062f8:	20000c00 	.word	0x20000c00
 80062fc:	20000bf8 	.word	0x20000bf8

08006300 <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8006304:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <md_dif_math+0x20>)
 8006306:	2201      	movs	r2, #1
 8006308:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <md_dif_math+0x24>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	001a      	movs	r2, r3
 8006310:	4b05      	ldr	r3, [pc, #20]	@ (8006328 <md_dif_math+0x28>)
 8006312:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8006314:	f000 f80a 	bl	800632c <md_signfrac_math>
}
 8006318:	46c0      	nop			@ (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			@ (mov r8, r8)
 8006320:	20000bf8 	.word	0x20000bf8
 8006324:	200008e4 	.word	0x200008e4
 8006328:	200008e6 	.word	0x200008e6

0800632c <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8006330:	4b4b      	ldr	r3, [pc, #300]	@ (8006460 <md_signfrac_math+0x134>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d121      	bne.n	800637c <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 8006338:	4b49      	ldr	r3, [pc, #292]	@ (8006460 <md_signfrac_math+0x134>)
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d14f      	bne.n	80063e0 <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8006340:	4b48      	ldr	r3, [pc, #288]	@ (8006464 <md_signfrac_math+0x138>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d117      	bne.n	8006378 <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 8006348:	4b46      	ldr	r3, [pc, #280]	@ (8006464 <md_signfrac_math+0x138>)
 800634a:	2219      	movs	r2, #25
 800634c:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 800634e:	4b46      	ldr	r3, [pc, #280]	@ (8006468 <md_signfrac_math+0x13c>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 8006356:	4b43      	ldr	r3, [pc, #268]	@ (8006464 <md_signfrac_math+0x138>)
 8006358:	220a      	movs	r2, #10
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	e000      	b.n	8006360 <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 800635e:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8006360:	4b3f      	ldr	r3, [pc, #252]	@ (8006460 <md_signfrac_math+0x134>)
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 8006368:	4b3d      	ldr	r3, [pc, #244]	@ (8006460 <md_signfrac_math+0x134>)
 800636a:	795b      	ldrb	r3, [r3, #5]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d139      	bne.n	80063e4 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8006370:	4b3d      	ldr	r3, [pc, #244]	@ (8006468 <md_signfrac_math+0x13c>)
 8006372:	2205      	movs	r2, #5
 8006374:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 8006376:	e067      	b.n	8006448 <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 8006378:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 800637a:	e065      	b.n	8006448 <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 800637c:	46c0      	nop			@ (mov r8, r8)
 800637e:	e000      	b.n	8006382 <md_signfrac_math+0x56>
				goto inc_sf;
 8006380:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8006382:	4b3a      	ldr	r3, [pc, #232]	@ (800646c <md_signfrac_math+0x140>)
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b21a      	sxth	r2, r3
 8006388:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <md_signfrac_math+0x144>)
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b21b      	sxth	r3, r3
 800638e:	429a      	cmp	r2, r3
 8006390:	db04      	blt.n	800639c <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 8006392:	4b38      	ldr	r3, [pc, #224]	@ (8006474 <md_signfrac_math+0x148>)
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	4b35      	ldr	r3, [pc, #212]	@ (800646c <md_signfrac_math+0x140>)
 8006398:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 800639a:	e052      	b.n	8006442 <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 800639c:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 800639e:	4b36      	ldr	r3, [pc, #216]	@ (8006478 <md_signfrac_math+0x14c>)
 80063a0:	799b      	ldrb	r3, [r3, #6]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 80063a6:	4b31      	ldr	r3, [pc, #196]	@ (800646c <md_signfrac_math+0x140>)
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b21b      	sxth	r3, r3
 80063ac:	2b63      	cmp	r3, #99	@ 0x63
 80063ae:	dc0d      	bgt.n	80063cc <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 80063b0:	4b2e      	ldr	r3, [pc, #184]	@ (800646c <md_signfrac_math+0x140>)
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b21b      	sxth	r3, r3
 80063b6:	3364      	adds	r3, #100	@ 0x64
 80063b8:	db0a      	blt.n	80063d0 <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 80063ba:	e000      	b.n	80063be <md_signfrac_math+0x92>
				goto inc_simple_ent;
 80063bc:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 80063be:	4b2b      	ldr	r3, [pc, #172]	@ (800646c <md_signfrac_math+0x140>)
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	4b29      	ldr	r3, [pc, #164]	@ (800646c <md_signfrac_math+0x140>)
 80063c8:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063ca:	e03a      	b.n	8006442 <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 80063cc:	46c0      	nop			@ (mov r8, r8)
 80063ce:	e000      	b.n	80063d2 <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 80063d0:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 80063d2:	4b26      	ldr	r3, [pc, #152]	@ (800646c <md_signfrac_math+0x140>)
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	330a      	adds	r3, #10
 80063d8:	b29a      	uxth	r2, r3
 80063da:	4b24      	ldr	r3, [pc, #144]	@ (800646c <md_signfrac_math+0x140>)
 80063dc:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063de:	e030      	b.n	8006442 <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 80063e0:	46c0      	nop			@ (mov r8, r8)
 80063e2:	e000      	b.n	80063e6 <md_signfrac_math+0xba>
				goto dec_sf;
 80063e4:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 80063e6:	4b21      	ldr	r3, [pc, #132]	@ (800646c <md_signfrac_math+0x140>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b21a      	sxth	r2, r3
 80063ec:	4b21      	ldr	r3, [pc, #132]	@ (8006474 <md_signfrac_math+0x148>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b21b      	sxth	r3, r3
 80063f2:	429a      	cmp	r2, r3
 80063f4:	dc04      	bgt.n	8006400 <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 80063f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006470 <md_signfrac_math+0x144>)
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	4b1c      	ldr	r3, [pc, #112]	@ (800646c <md_signfrac_math+0x140>)
 80063fc:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 80063fe:	e020      	b.n	8006442 <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8006400:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8006402:	4b1d      	ldr	r3, [pc, #116]	@ (8006478 <md_signfrac_math+0x14c>)
 8006404:	799b      	ldrb	r3, [r3, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 800640a:	4b18      	ldr	r3, [pc, #96]	@ (800646c <md_signfrac_math+0x140>)
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b21b      	sxth	r3, r3
 8006410:	2b64      	cmp	r3, #100	@ 0x64
 8006412:	dc0d      	bgt.n	8006430 <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8006414:	4b15      	ldr	r3, [pc, #84]	@ (800646c <md_signfrac_math+0x140>)
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b21b      	sxth	r3, r3
 800641a:	3363      	adds	r3, #99	@ 0x63
 800641c:	db0a      	blt.n	8006434 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 800641e:	e000      	b.n	8006422 <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8006420:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8006422:	4b12      	ldr	r3, [pc, #72]	@ (800646c <md_signfrac_math+0x140>)
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	4b10      	ldr	r3, [pc, #64]	@ (800646c <md_signfrac_math+0x140>)
 800642c:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 800642e:	e008      	b.n	8006442 <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8006430:	46c0      	nop			@ (mov r8, r8)
 8006432:	e000      	b.n	8006436 <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8006434:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <md_signfrac_math+0x140>)
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	3b0a      	subs	r3, #10
 800643c:	b29a      	uxth	r2, r3
 800643e:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <md_signfrac_math+0x140>)
 8006440:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8006442:	4b0e      	ldr	r3, [pc, #56]	@ (800647c <md_signfrac_math+0x150>)
 8006444:	221e      	movs	r2, #30
 8006446:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <md_signfrac_math+0x14c>)
 800644a:	2200      	movs	r2, #0
 800644c:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 800644e:	4b07      	ldr	r3, [pc, #28]	@ (800646c <md_signfrac_math+0x140>)
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <md_signfrac_math+0x154>)
 8006456:	701a      	strb	r2, [r3, #0]
			//ret
}
 8006458:	46c0      	nop			@ (mov r8, r8)
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	20000c00 	.word	0x20000c00
 8006464:	20000c32 	.word	0x20000c32
 8006468:	20000b83 	.word	0x20000b83
 800646c:	200008e6 	.word	0x200008e6
 8006470:	20000c12 	.word	0x20000c12
 8006474:	20000c14 	.word	0x20000c14
 8006478:	20000bf8 	.word	0x20000bf8
 800647c:	20000b82 	.word	0x20000b82
 8006480:	20000b67 	.word	0x20000b67

08006484 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800648a:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <tdev_to_Word+0x28>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	b29a      	uxth	r2, r3
 8006492:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <tdev_to_Word+0x2c>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	0019      	movs	r1, r3
 8006498:	1dbb      	adds	r3, r7, #6
 800649a:	1852      	adds	r2, r2, r1
 800649c:	801a      	strh	r2, [r3, #0]
	return	foo;
 800649e:	1dbb      	adds	r3, r7, #6
 80064a0:	881b      	ldrh	r3, [r3, #0]
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b002      	add	sp, #8
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	20000bc0 	.word	0x20000bc0
 80064b0:	20000bc1 	.word	0x20000bc1

080064b4 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3301      	adds	r3, #1
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	0019      	movs	r1, r3
 80064cc:	200e      	movs	r0, #14
 80064ce:	183b      	adds	r3, r7, r0
 80064d0:	1852      	adds	r2, r2, r1
 80064d2:	801a      	strh	r2, [r3, #0]
	return	 foo;
 80064d4:	183b      	adds	r3, r7, r0
 80064d6:	881b      	ldrh	r3, [r3, #0]
}
 80064d8:	0018      	movs	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	b004      	add	sp, #16
 80064de:	bd80      	pop	{r7, pc}

080064e0 <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
    asm ("nop");
 80064e4:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 80064e6:	46c0      	nop			@ (mov r8, r8)

}
 80064e8:	46c0      	nop			@ (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <Load_ret2+0x1c>)
 80064f6:	2249      	movs	r2, #73	@ 0x49
 80064f8:	5c9b      	ldrb	r3, [r3, r2]
 80064fa:	001a      	movs	r2, r3
 80064fc:	233c      	movs	r3, #60	@ 0x3c
 80064fe:	4353      	muls	r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	4b03      	ldr	r3, [pc, #12]	@ (8006510 <Load_ret2+0x20>)
 8006504:	801a      	strh	r2, [r3, #0]
}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200000b8 	.word	0x200000b8
 8006510:	20000b76 	.word	0x20000b76

08006514 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 8006518:	4b0c      	ldr	r3, [pc, #48]	@ (800654c <ldadaptivo+0x38>)
 800651a:	2246      	movs	r2, #70	@ 0x46
 800651c:	5c9b      	ldrb	r3, [r3, r2]
 800651e:	001a      	movs	r2, r3
 8006520:	23e1      	movs	r3, #225	@ 0xe1
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	4353      	muls	r3, r2
 8006526:	b29a      	uxth	r2, r3
 8006528:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <ldadaptivo+0x3c>)
 800652a:	801a      	strh	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <ldadaptivo+0x38>)
 800652e:	2256      	movs	r2, #86	@ 0x56
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	001a      	movs	r2, r3
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <ldadaptivo+0x3c>)
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	08db      	lsrs	r3, r3, #3
 800653a:	b29b      	uxth	r3, r3
 800653c:	4353      	muls	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <ldadaptivo+0x40>)
 8006542:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 8006544:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 8006546:	46c0      	nop			@ (mov r8, r8)
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200000b8 	.word	0x200000b8
 8006550:	20000bc6 	.word	0x20000bc6
 8006554:	20000bcc 	.word	0x20000bcc

08006558 <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 800655e:	1dbb      	adds	r3, r7, #6
 8006560:	2200      	movs	r2, #0
 8006562:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 8006564:	1dbb      	adds	r3, r7, #6
 8006566:	4a0e      	ldr	r2, [pc, #56]	@ (80065a0 <blink_640+0x48>)
 8006568:	8812      	ldrh	r2, [r2, #0]
 800656a:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 800656c:	1dba      	adds	r2, r7, #6
 800656e:	1dbb      	adds	r3, r7, #6
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	18db      	adds	r3, r3, r3
 8006574:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 8006576:	1dba      	adds	r2, r7, #6
 8006578:	1dbb      	adds	r3, r7, #6
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	18db      	adds	r3, r3, r3
 800657e:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 8006580:	1dbb      	adds	r3, r7, #6
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	4b07      	ldr	r3, [pc, #28]	@ (80065a4 <blink_640+0x4c>)
 8006588:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 800658a:	1dbb      	adds	r3, r7, #6
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b29b      	uxth	r3, r3
 8006592:	b2da      	uxtb	r2, r3
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <blink_640+0x50>)
 8006596:	701a      	strb	r2, [r3, #0]
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000b60 	.word	0x20000b60
 80065a4:	20000b66 	.word	0x20000b66
 80065a8:	20000b67 	.word	0x20000b67

080065ac <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 80065b0:	4b03      	ldr	r3, [pc, #12]	@ (80065c0 <sp_dpy+0x14>)
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 f8af 	bl	8006718 <convadec_math>
								//			//ret	;
}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000bbc 	.word	0x20000bbc

080065c4 <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 80065ca:	1dbb      	adds	r3, r7, #6
 80065cc:	2200      	movs	r2, #0
 80065ce:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 80065d0:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <dif_dpy+0x2c>)
 80065d2:	8819      	ldrh	r1, [r3, #0]
 80065d4:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <dif_dpy+0x30>)
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	1dbb      	adds	r3, r7, #6
 80065da:	1a8a      	subs	r2, r1, r2
 80065dc:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 80065de:	1dbb      	adds	r3, r7, #6
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	0018      	movs	r0, r3
 80065e4:	f000 f898 	bl	8006718 <convadec_math>
									// ret ;
}
 80065e8:	46c0      	nop			@ (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b002      	add	sp, #8
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000bbe 	.word	0x20000bbe
 80065f4:	20000bbc 	.word	0x20000bbc

080065f8 <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <minbrake_load+0x2c>)
 80065fe:	2265      	movs	r2, #101	@ 0x65
 8006600:	5c9a      	ldrb	r2, [r3, r2]
 8006602:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <minbrake_load+0x30>)
 8006604:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 8006606:	f000 f99f 	bl	8006948 <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 800660a:	4b08      	ldr	r3, [pc, #32]	@ (800662c <minbrake_load+0x34>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	4a07      	ldr	r2, [pc, #28]	@ (8006630 <minbrake_load+0x38>)
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	189b      	adds	r3, r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <minbrake_load+0x3c>)
 800661c:	801a      	strh	r2, [r3, #0]
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	200000b8 	.word	0x200000b8
 8006628:	20000b67 	.word	0x20000b67
 800662c:	20000b5b 	.word	0x20000b5b
 8006630:	20000b5c 	.word	0x20000b5c
 8006634:	20000b72 	.word	0x20000b72

08006638 <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 800663e:	1dbb      	adds	r3, r7, #6
 8006640:	2200      	movs	r2, #0
 8006642:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 8006644:	1dbb      	adds	r3, r7, #6
 8006646:	4a31      	ldr	r2, [pc, #196]	@ (800670c <desptdv_math+0xd4>)
 8006648:	8812      	ldrh	r2, [r2, #0]
 800664a:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 800664c:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <desptdv_math+0xd8>)
 800664e:	0018      	movs	r0, r3
 8006650:	f7ff ff30 	bl	80064b4 <TwoByteInArrayToWord>
 8006654:	0003      	movs	r3, r0
 8006656:	0019      	movs	r1, r3
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	1dba      	adds	r2, r7, #6
 800665c:	8812      	ldrh	r2, [r2, #0]
 800665e:	188a      	adds	r2, r1, r2
 8006660:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 8006662:	4b2c      	ldr	r3, [pc, #176]	@ (8006714 <desptdv_math+0xdc>)
 8006664:	2252      	movs	r2, #82	@ 0x52
 8006666:	5c9b      	ldrb	r3, [r3, r2]
 8006668:	2b20      	cmp	r3, #32
 800666a:	d145      	bne.n	80066f8 <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 800666c:	1dbb      	adds	r3, r7, #6
 800666e:	2200      	movs	r2, #0
 8006670:	5e9b      	ldrsh	r3, [r3, r2]
 8006672:	2b00      	cmp	r3, #0
 8006674:	da22      	bge.n	80066bc <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 8006676:	1dbb      	adds	r3, r7, #6
 8006678:	1dba      	adds	r2, r7, #6
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	4252      	negs	r2, r2
 800667e:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 8006680:	1dbb      	adds	r3, r7, #6
 8006682:	1dba      	adds	r2, r7, #6
 8006684:	8812      	ldrh	r2, [r2, #0]
 8006686:	0852      	lsrs	r2, r2, #1
 8006688:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 800668a:	1dba      	adds	r2, r7, #6
 800668c:	1dbb      	adds	r3, r7, #6
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	1c19      	adds	r1, r3, #0
 8006692:	00c9      	lsls	r1, r1, #3
 8006694:	18cb      	adds	r3, r1, r3
 8006696:	18db      	adds	r3, r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 800669a:	1dbc      	adds	r4, r7, #6
 800669c:	1dbb      	adds	r3, r7, #6
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	2105      	movs	r1, #5
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7f9 fd38 	bl	8000118 <__udivsi3>
 80066a8:	0003      	movs	r3, r0
 80066aa:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 80066ac:	1dbb      	adds	r3, r7, #6
 80066ae:	1dba      	adds	r2, r7, #6
 80066b0:	8812      	ldrh	r2, [r2, #0]
 80066b2:	21a0      	movs	r1, #160	@ 0xa0
 80066b4:	0049      	lsls	r1, r1, #1
 80066b6:	1a8a      	subs	r2, r1, r2
 80066b8:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 80066ba:	e01e      	b.n	80066fa <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 80066bc:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 80066be:	1dbb      	adds	r3, r7, #6
 80066c0:	1dba      	adds	r2, r7, #6
 80066c2:	8812      	ldrh	r2, [r2, #0]
 80066c4:	0852      	lsrs	r2, r2, #1
 80066c6:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80066c8:	1dba      	adds	r2, r7, #6
 80066ca:	1dbb      	adds	r3, r7, #6
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	1c19      	adds	r1, r3, #0
 80066d0:	00c9      	lsls	r1, r1, #3
 80066d2:	18cb      	adds	r3, r1, r3
 80066d4:	18db      	adds	r3, r3, r3
 80066d6:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80066d8:	1dbc      	adds	r4, r7, #6
 80066da:	1dbb      	adds	r3, r7, #6
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	2105      	movs	r1, #5
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7f9 fd19 	bl	8000118 <__udivsi3>
 80066e6:	0003      	movs	r3, r0
 80066e8:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 80066ea:	1dbb      	adds	r3, r7, #6
 80066ec:	1dba      	adds	r2, r7, #6
 80066ee:	8812      	ldrh	r2, [r2, #0]
 80066f0:	3241      	adds	r2, #65	@ 0x41
 80066f2:	32ff      	adds	r2, #255	@ 0xff
 80066f4:	801a      	strh	r2, [r3, #0]
 80066f6:	e000      	b.n	80066fa <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 80066f8:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 80066fa:	1dbb      	adds	r3, r7, #6
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	0018      	movs	r0, r3
 8006700:	f000 f80a 	bl	8006718 <convadec_math>

}
 8006704:	46c0      	nop			@ (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b003      	add	sp, #12
 800670a:	bd90      	pop	{r4, r7, pc}
 800670c:	20000bc4 	.word	0x20000bc4
 8006710:	200000bd 	.word	0x200000bd
 8006714:	200000b8 	.word	0x200000b8

08006718 <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	0002      	movs	r2, r0
 8006720:	1dbb      	adds	r3, r7, #6
 8006722:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 8006724:	f000 face 	bl	8006cc4 <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 8006728:	230f      	movs	r3, #15
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 8006730:	230e      	movs	r3, #14
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 8006738:	1dbb      	adds	r3, r7, #6
 800673a:	2200      	movs	r2, #0
 800673c:	5e9b      	ldrsh	r3, [r3, r2]
 800673e:	2b00      	cmp	r3, #0
 8006740:	da08      	bge.n	8006754 <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 8006742:	1dbb      	adds	r3, r7, #6
 8006744:	1dba      	adds	r2, r7, #6
 8006746:	8812      	ldrh	r2, [r2, #0]
 8006748:	4252      	negs	r2, r2
 800674a:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 800674c:	4b45      	ldr	r3, [pc, #276]	@ (8006864 <convadec_math+0x14c>)
 800674e:	2201      	movs	r2, #1
 8006750:	705a      	strb	r2, [r3, #1]
 8006752:	e000      	b.n	8006756 <convadec_math+0x3e>
			goto conv_temper_positiva;
 8006754:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 8006756:	1dbb      	adds	r3, r7, #6
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	210a      	movs	r1, #10
 800675c:	0018      	movs	r0, r3
 800675e:	f7f9 fd61 	bl	8000224 <__aeabi_uidivmod>
 8006762:	000b      	movs	r3, r1
 8006764:	b29a      	uxth	r2, r3
 8006766:	230e      	movs	r3, #14
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 800676c:	1dbb      	adds	r3, r7, #6
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	210a      	movs	r1, #10
 8006772:	0018      	movs	r0, r3
 8006774:	f7f9 fcd0 	bl	8000118 <__udivsi3>
 8006778:	0003      	movs	r3, r0
 800677a:	b29a      	uxth	r2, r3
 800677c:	230f      	movs	r3, #15
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 8006782:	4b38      	ldr	r3, [pc, #224]	@ (8006864 <convadec_math+0x14c>)
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2201      	movs	r2, #1
 8006788:	4053      	eors	r3, r2
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d116      	bne.n	80067be <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 8006790:	4b35      	ldr	r3, [pc, #212]	@ (8006868 <convadec_math+0x150>)
 8006792:	2223      	movs	r2, #35	@ 0x23
 8006794:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 8006796:	4b35      	ldr	r3, [pc, #212]	@ (800686c <convadec_math+0x154>)
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2201      	movs	r2, #1
 800679c:	4053      	eors	r3, r2
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 80067a4:	4b30      	ldr	r3, [pc, #192]	@ (8006868 <convadec_math+0x150>)
 80067a6:	2264      	movs	r2, #100	@ 0x64
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	e000      	b.n	80067ae <convadec_math+0x96>
			goto cp_25;
 80067ac:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006868 <convadec_math+0x150>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	220f      	movs	r2, #15
 80067b4:	18ba      	adds	r2, r7, r2
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d318      	bcc.n	80067ee <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 80067bc:	e03d      	b.n	800683a <convadec_math+0x122>
			goto conv_signo_positivo;
 80067be:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 80067c0:	4b29      	ldr	r3, [pc, #164]	@ (8006868 <convadec_math+0x150>)
 80067c2:	2263      	movs	r2, #99	@ 0x63
 80067c4:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80067c6:	4b29      	ldr	r3, [pc, #164]	@ (800686c <convadec_math+0x154>)
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2201      	movs	r2, #1
 80067cc:	4053      	eors	r3, r2
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 80067d4:	4b24      	ldr	r3, [pc, #144]	@ (8006868 <convadec_math+0x150>)
 80067d6:	2264      	movs	r2, #100	@ 0x64
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e000      	b.n	80067de <convadec_math+0xc6>
			goto cp_99;
 80067dc:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067de:	4b22      	ldr	r3, [pc, #136]	@ (8006868 <convadec_math+0x150>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	220f      	movs	r2, #15
 80067e4:	18ba      	adds	r2, r7, r2
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d225      	bcs.n	8006838 <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 80067ec:	e000      	b.n	80067f0 <convadec_math+0xd8>
		goto     convad10;
 80067ee:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 80067f0:	210f      	movs	r1, #15
 80067f2:	187b      	adds	r3, r7, r1
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b09      	cmp	r3, #9
 80067f8:	d80d      	bhi.n	8006816 <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 80067fa:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 80067fc:	4b19      	ldr	r3, [pc, #100]	@ (8006864 <convadec_math+0x14c>)
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 8006802:	230e      	movs	r3, #14
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	187b      	adds	r3, r7, r1
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	0011      	movs	r1, r2
 800680e:	0018      	movs	r0, r3
 8006810:	f000 fef2 	bl	80075f8 <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 8006814:	e021      	b.n	800685a <convadec_math+0x142>
			goto soloent;
 8006816:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 8006818:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <convadec_math+0x150>)
 800681a:	220f      	movs	r2, #15
 800681c:	18ba      	adds	r2, r7, r2
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8006822:	f000 f891 	bl	8006948 <BaBentre10_math>
		op_menu (waux,wreg);
 8006826:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <convadec_math+0x158>)
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	4b0f      	ldr	r3, [pc, #60]	@ (8006868 <convadec_math+0x150>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	0019      	movs	r1, r3
 8006830:	0010      	movs	r0, r2
 8006832:	f000 fee1 	bl	80075f8 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006836:	e010      	b.n	800685a <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 8006838:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 800683a:	4b0e      	ldr	r3, [pc, #56]	@ (8006874 <convadec_math+0x15c>)
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	001a      	movs	r2, r3
 8006842:	2320      	movs	r3, #32
 8006844:	4013      	ands	r3, r2
 8006846:	d102      	bne.n	800684e <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 8006848:	f000 fa3c 	bl	8006cc4 <offdpy>
		goto	finconvad;
 800684c:	e005      	b.n	800685a <convadec_math+0x142>
			goto convadec_j02;
 800684e:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 8006850:	2111      	movs	r1, #17
 8006852:	2010      	movs	r0, #16
 8006854:	f000 fed0 	bl	80075f8 <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006858:	46c0      	nop			@ (mov r8, r8)
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b004      	add	sp, #16
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	20000ba0 	.word	0x20000ba0
 8006868:	20000b67 	.word	0x20000b67
 800686c:	20000bf8 	.word	0x20000bf8
 8006870:	20000b66 	.word	0x20000b66
 8006874:	20000b60 	.word	0x20000b60

08006878 <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	0002      	movs	r2, r0
 8006880:	1dfb      	adds	r3, r7, #7
 8006882:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 8006884:	210f      	movs	r1, #15
 8006886:	187b      	adds	r3, r7, r1
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b09      	cmp	r3, #9
 8006892:	d80c      	bhi.n	80068ae <convad10+0x36>
			goto soloent;
		}
fraccion:
 8006894:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 8006896:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <convad10+0x60>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 800689c:	187b      	adds	r3, r7, r1
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	1dfb      	adds	r3, r7, #7
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	0011      	movs	r1, r2
 80068a6:	0018      	movs	r0, r3
 80068a8:	f000 fea6 	bl	80075f8 <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 80068ac:	e00f      	b.n	80068ce <convad10+0x56>
			goto soloent;
 80068ae:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <convad10+0x64>)
 80068b2:	1dfa      	adds	r2, r7, #7
 80068b4:	7812      	ldrb	r2, [r2, #0]
 80068b6:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068b8:	f000 f846 	bl	8006948 <BaBentre10_math>
		op_menu (waux,wreg);
 80068bc:	4b08      	ldr	r3, [pc, #32]	@ (80068e0 <convad10+0x68>)
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	4b06      	ldr	r3, [pc, #24]	@ (80068dc <convad10+0x64>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	0019      	movs	r1, r3
 80068c6:	0010      	movs	r0, r2
 80068c8:	f000 fe96 	bl	80075f8 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80068cc:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80068ce:	46c0      	nop			@ (mov r8, r8)
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	46c0      	nop			@ (mov r8, r8)
 80068d8:	20000ba0 	.word	0x20000ba0
 80068dc:	20000b67 	.word	0x20000b67
 80068e0:	20000b66 	.word	0x20000b66

080068e4 <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	0002      	movs	r2, r0
 80068ec:	1dfb      	adds	r3, r7, #7
 80068ee:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 80068f0:	4b09      	ldr	r3, [pc, #36]	@ (8006918 <soloent+0x34>)
 80068f2:	1dfa      	adds	r2, r7, #7
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068f8:	f000 f826 	bl	8006948 <BaBentre10_math>
		op_menu (waux,wreg);
 80068fc:	4b07      	ldr	r3, [pc, #28]	@ (800691c <soloent+0x38>)
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <soloent+0x34>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	0019      	movs	r1, r3
 8006906:	0010      	movs	r0, r2
 8006908:	f000 fe76 	bl	80075f8 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800690c:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	46bd      	mov	sp, r7
 8006912:	b002      	add	sp, #8
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	20000b67 	.word	0x20000b67
 800691c:	20000b66 	.word	0x20000b66

08006920 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 8006924:	f000 f810 	bl	8006948 <BaBentre10_math>
		op_menu (waux,wreg);
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <soloent1+0x20>)
 800692a:	781a      	ldrb	r2, [r3, #0]
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <soloent1+0x24>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	0019      	movs	r1, r3
 8006932:	0010      	movs	r0, r2
 8006934:	f000 fe60 	bl	80075f8 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006938:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800693a:	46c0      	nop			@ (mov r8, r8)
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000b66 	.word	0x20000b66
 8006944:	20000b67 	.word	0x20000b67

08006948 <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(void){
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 800694c:	4b11      	ldr	r3, [pc, #68]	@ (8006994 <BaBentre10_math+0x4c>)
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 8006952:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <BaBentre10_math+0x50>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	001a      	movs	r2, r3
 8006958:	4b10      	ldr	r3, [pc, #64]	@ (800699c <BaBentre10_math+0x54>)
 800695a:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 800695c:	4b0f      	ldr	r3, [pc, #60]	@ (800699c <BaBentre10_math+0x54>)
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	210a      	movs	r1, #10
 8006964:	0018      	movs	r0, r3
 8006966:	f7f9 fc5d 	bl	8000224 <__aeabi_uidivmod>
 800696a:	000b      	movs	r3, r1
 800696c:	b2da      	uxtb	r2, r3
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <BaBentre10_math+0x50>)
 8006970:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <BaBentre10_math+0x54>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	210a      	movs	r1, #10
 800697a:	0018      	movs	r0, r3
 800697c:	f7f9 fbcc 	bl	8000118 <__udivsi3>
 8006980:	0003      	movs	r3, r0
 8006982:	b2da      	uxtb	r2, r3
 8006984:	4b03      	ldr	r3, [pc, #12]	@ (8006994 <BaBentre10_math+0x4c>)
 8006986:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 8006988:	f000 f80a 	bl	80069a0 <conv60_6_math>
}
 800698c:	46c0      	nop			@ (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	20000b66 	.word	0x20000b66
 8006998:	20000b67 	.word	0x20000b67
 800699c:	200008e6 	.word	0x200008e6

080069a0 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math (void) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 80069a6:	1dbb      	adds	r3, r7, #6
 80069a8:	2200      	movs	r2, #0
 80069aa:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 80069ac:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <conv60_6_math+0x54>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	1dba      	adds	r2, r7, #6
 80069b2:	1c19      	adds	r1, r3, #0
 80069b4:	1c0b      	adds	r3, r1, #0
 80069b6:	18db      	adds	r3, r3, r3
 80069b8:	185b      	adds	r3, r3, r1
 80069ba:	18db      	adds	r3, r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 80069be:	4b0e      	ldr	r3, [pc, #56]	@ (80069f8 <conv60_6_math+0x58>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	001a      	movs	r2, r3
 80069c4:	233c      	movs	r3, #60	@ 0x3c
 80069c6:	4353      	muls	r3, r2
 80069c8:	b299      	uxth	r1, r3
 80069ca:	1dbb      	adds	r3, r7, #6
 80069cc:	1dba      	adds	r2, r7, #6
 80069ce:	8812      	ldrh	r2, [r2, #0]
 80069d0:	188a      	adds	r2, r1, r2
 80069d2:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 80069d4:	1dbb      	adds	r3, r7, #6
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	b29b      	uxth	r3, r3
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <conv60_6_math+0x5c>)
 80069e0:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 80069e2:	1dbb      	adds	r3, r7, #6
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <conv60_6_math+0x60>)
 80069ea:	701a      	strb	r2, [r3, #0]
}
 80069ec:	46c0      	nop			@ (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000b67 	.word	0x20000b67
 80069f8:	20000b66 	.word	0x20000b66
 80069fc:	20000b5b 	.word	0x20000b5b
 8006a00:	20000b5c 	.word	0x20000b5c

08006a04 <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 8006a0a:	4ba3      	ldr	r3, [pc, #652]	@ (8006c98 <fallas+0x294>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 8006a10:	4ba2      	ldr	r3, [pc, #648]	@ (8006c9c <fallas+0x298>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 8006a18:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 8006a1a:	e138      	b.n	8006c8e <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 8006a1c:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 8006a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8006c9c <fallas+0x298>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d003      	beq.n	8006a2e <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 8006a26:	4b9e      	ldr	r3, [pc, #632]	@ (8006ca0 <fallas+0x29c>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	715a      	strb	r2, [r3, #5]
 8006a2c:	e000      	b.n	8006a30 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 8006a2e:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 8006a30:	2300      	movs	r3, #0
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	e014      	b.n	8006a60 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 8006a36:	4a9b      	ldr	r2, [pc, #620]	@ (8006ca4 <fallas+0x2a0>)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	18d3      	adds	r3, r2, r3
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	499a      	ldr	r1, [pc, #616]	@ (8006ca8 <fallas+0x2a4>)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	18cb      	adds	r3, r1, r3
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	4998      	ldr	r1, [pc, #608]	@ (8006cac <fallas+0x2a8>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	18cb      	adds	r3, r1, r3
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <fallas+0x66>
		for(int k=0; k<8;k++){
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b07      	cmp	r3, #7
 8006a64:	dde7      	ble.n	8006a36 <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 8006a66:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8006a68:	e7d7      	b.n	8006a1a <fallas+0x16>
				goto fallas12;//jrne fallas12
 8006a6a:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8006a6c:	4b90      	ldr	r3, [pc, #576]	@ (8006cb0 <fallas+0x2ac>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d12c      	bne.n	8006ace <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 8006a74:	4b8a      	ldr	r3, [pc, #552]	@ (8006ca0 <fallas+0x29c>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;		//bset flagsBuzzer,#0
 8006a7a:	4b87      	ldr	r3, [pc, #540]	@ (8006c98 <fallas+0x294>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
	    //waux = 0x1F;			//mov waux,#$1F;
	    waux = 0x13;			//mov waux,#$13;
 8006a80:	4b8c      	ldr	r3, [pc, #560]	@ (8006cb4 <fallas+0x2b0>)
 8006a82:	2213      	movs	r2, #19
 8006a84:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 8006a86:	4b87      	ldr	r3, [pc, #540]	@ (8006ca4 <fallas+0x2a0>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	4053      	eors	r3, r2
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <fallas+0xa4>
	       	goto fallas_j00;
 8006a94:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 8006a96:	4b83      	ldr	r3, [pc, #524]	@ (8006ca4 <fallas+0x2a0>)
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d019      	beq.n	8006ad2 <fallas+0xce>
	       	goto fallas_j01;
 8006a9e:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    //waux = 0x1F;//mov waux,#$1F
		waux = 0x13;			//mov waux,#$13;
 8006aa0:	4b84      	ldr	r3, [pc, #528]	@ (8006cb4 <fallas+0x2b0>)
 8006aa2:	2213      	movs	r2, #19
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e000      	b.n	8006aaa <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8006aa8:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8006aaa:	f000 fad9 	bl	8007060 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 8006aae:	f000 faf3 	bl	8007098 <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 8006ab2:	f000 fdbb 	bl	800762c <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		//wreg = 0x13;//mov wreg,#$13;
		wreg = 0x01;//mov wreg,#$01;
 8006ab6:	4b80      	ldr	r3, [pc, #512]	@ (8006cb8 <fallas+0x2b4>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8006abc:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb4 <fallas+0x2b0>)
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb8 <fallas+0x2b4>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	0010      	movs	r0, r2
 8006ac8:	f000 fd96 	bl	80075f8 <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8006acc:	e0df      	b.n	8006c8e <fallas+0x28a>
	       	goto fallas16;//
 8006ace:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 8006ad0:	e0dd      	b.n	8006c8e <fallas+0x28a>
	    goto fallas20;//jra fallas20
 8006ad2:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 8006ad4:	4b73      	ldr	r3, [pc, #460]	@ (8006ca4 <fallas+0x2a0>)
 8006ad6:	79db      	ldrb	r3, [r3, #7]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4053      	eors	r3, r2
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	2127      	movs	r1, #39	@ 0x27
 8006ae6:	201f      	movs	r0, #31
 8006ae8:	f000 fdae 	bl	8007648 <wreg_waux_conf>
 8006aec:	e000      	b.n	8006af0 <fallas+0xec>
			goto fallas_j07;
 8006aee:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8006af0:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca4 <fallas+0x2a0>)
 8006af2:	799b      	ldrb	r3, [r3, #6]
 8006af4:	2201      	movs	r2, #1
 8006af6:	4053      	eors	r3, r2
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 8006afe:	2201      	movs	r2, #1
 8006b00:	2127      	movs	r1, #39	@ 0x27
 8006b02:	2026      	movs	r0, #38	@ 0x26
 8006b04:	f000 fda0 	bl	8007648 <wreg_waux_conf>
 8006b08:	e000      	b.n	8006b0c <fallas+0x108>
			goto fallas_j08;
 8006b0a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 8006b0c:	4b66      	ldr	r3, [pc, #408]	@ (8006ca8 <fallas+0x2a4>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4053      	eors	r3, r2
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d105      	bne.n	8006b26 <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	212f      	movs	r1, #47	@ 0x2f
 8006b1e:	200e      	movs	r0, #14
 8006b20:	f000 fd92 	bl	8007648 <wreg_waux_conf>
 8006b24:	e000      	b.n	8006b28 <fallas+0x124>
			goto fallas_j08b;
 8006b26:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 8006b28:	4b60      	ldr	r3, [pc, #384]	@ (8006cac <fallas+0x2a8>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4053      	eors	r3, r2
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d105      	bne.n	8006b42 <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 8006b36:	2201      	movs	r2, #1
 8006b38:	210a      	movs	r1, #10
 8006b3a:	200b      	movs	r0, #11
 8006b3c:	f000 fd84 	bl	8007648 <wreg_waux_conf>
 8006b40:	e000      	b.n	8006b44 <fallas+0x140>
			goto fallas_j08c;
 8006b42:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 8006b44:	4b57      	ldr	r3, [pc, #348]	@ (8006ca4 <fallas+0x2a0>)
 8006b46:	795b      	ldrb	r3, [r3, #5]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d107      	bne.n	8006b5c <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 8006b4c:	4b56      	ldr	r3, [pc, #344]	@ (8006ca8 <fallas+0x2a4>)
 8006b4e:	79db      	ldrb	r3, [r3, #7]
 8006b50:	2201      	movs	r2, #1
 8006b52:	4053      	eors	r3, r2
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8006b5a:	e000      	b.n	8006b5e <fallas+0x15a>
			goto fallas_j01c;
 8006b5c:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x04, 1);
 8006b5e:	2201      	movs	r2, #1
 8006b60:	2104      	movs	r1, #4
 8006b62:	2013      	movs	r0, #19
 8006b64:	f000 fd70 	bl	8007648 <wreg_waux_conf>
 8006b68:	e000      	b.n	8006b6c <fallas+0x168>
			goto fallas_j02c;
 8006b6a:	46c0      	nop			@ (mov r8, r8)
//		mov			wreg,#$13;					"H"
//		mov			waux,#$04;
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8006b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ca8 <fallas+0x2a4>)
 8006b6e:	791b      	ldrb	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d107      	bne.n	8006b84 <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 8006b74:	4b4c      	ldr	r3, [pc, #304]	@ (8006ca8 <fallas+0x2a4>)
 8006b76:	795b      	ldrb	r3, [r3, #5]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4053      	eors	r3, r2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 8006b82:	e000      	b.n	8006b86 <fallas+0x182>
	       	  goto fallas_j01b;
 8006b84:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x2, 1);
 8006b86:	2201      	movs	r2, #1
 8006b88:	2102      	movs	r1, #2
 8006b8a:	2013      	movs	r0, #19
 8006b8c:	f000 fd5c 	bl	8007648 <wreg_waux_conf>
 8006b90:	e000      	b.n	8006b94 <fallas+0x190>
	       	  goto fallas_j02b;
 8006b92:	46c0      	nop			@ (mov r8, r8)
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 8006b94:	4b43      	ldr	r3, [pc, #268]	@ (8006ca4 <fallas+0x2a0>)
 8006b96:	789b      	ldrb	r3, [r3, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8006b9c:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <fallas+0x2a0>)
 8006b9e:	78db      	ldrb	r3, [r3, #3]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4053      	eors	r3, r2
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d107      	bne.n	8006bba <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8006baa:	e000      	b.n	8006bae <fallas+0x1aa>
			goto fallas_j03;
 8006bac:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 8006bae:	2201      	movs	r2, #1
 8006bb0:	2113      	movs	r1, #19
 8006bb2:	201f      	movs	r0, #31
 8006bb4:	f000 fd48 	bl	8007648 <wreg_waux_conf>
 8006bb8:	e000      	b.n	8006bbc <fallas+0x1b8>
			goto fallas_j04;
 8006bba:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8006bbc:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <fallas+0x2a0>)
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4053      	eors	r3, r2
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8006bca:	2201      	movs	r2, #1
 8006bcc:	211e      	movs	r1, #30
 8006bce:	201f      	movs	r0, #31
 8006bd0:	f000 fd3a 	bl	8007648 <wreg_waux_conf>
 8006bd4:	e000      	b.n	8006bd8 <fallas+0x1d4>
			goto fallas_j06;
 8006bd6:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8006bd8:	4b33      	ldr	r3, [pc, #204]	@ (8006ca8 <fallas+0x2a4>)
 8006bda:	799b      	ldrb	r3, [r3, #6]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4053      	eors	r3, r2
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 8006be6:	2201      	movs	r2, #1
 8006be8:	210a      	movs	r1, #10
 8006bea:	201f      	movs	r0, #31
 8006bec:	f000 fd2c 	bl	8007648 <wreg_waux_conf>
 8006bf0:	e000      	b.n	8006bf4 <fallas+0x1f0>
			goto fallas_j06a;
 8006bf2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 8006bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca8 <fallas+0x2a4>)
 8006bf6:	789b      	ldrb	r3, [r3, #2]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4053      	eors	r3, r2
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d105      	bne.n	8006c0e <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 8006c02:	2201      	movs	r2, #1
 8006c04:	210c      	movs	r1, #12
 8006c06:	2020      	movs	r0, #32
 8006c08:	f000 fd1e 	bl	8007648 <wreg_waux_conf>
 8006c0c:	e000      	b.n	8006c10 <fallas+0x20c>
			goto fallas_j04b;
 8006c0e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 8006c10:	4b25      	ldr	r3, [pc, #148]	@ (8006ca8 <fallas+0x2a4>)
 8006c12:	78db      	ldrb	r3, [r3, #3]
 8006c14:	2201      	movs	r2, #1
 8006c16:	4053      	eors	r3, r2
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d105      	bne.n	8006c2a <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 8006c1e:	2201      	movs	r2, #1
 8006c20:	210b      	movs	r1, #11
 8006c22:	2020      	movs	r0, #32
 8006c24:	f000 fd10 	bl	8007648 <wreg_waux_conf>
 8006c28:	e000      	b.n	8006c2c <fallas+0x228>
			goto fallas_j04c;
 8006c2a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 8006c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca8 <fallas+0x2a4>)
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2201      	movs	r2, #1
 8006c32:	4053      	eors	r3, r2
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d105      	bne.n	8006c46 <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	210c      	movs	r1, #12
 8006c3e:	201f      	movs	r0, #31
 8006c40:	f000 fd02 	bl	8007648 <wreg_waux_conf>
 8006c44:	e000      	b.n	8006c48 <fallas+0x244>
			goto fallas_j06b;
 8006c46:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 8006c48:	4b14      	ldr	r3, [pc, #80]	@ (8006c9c <fallas+0x298>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d00c      	beq.n	8006c6a <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 8006c50:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <fallas+0x2b8>)
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	4a19      	ldr	r2, [pc, #100]	@ (8006cc0 <fallas+0x2bc>)
 8006c5c:	215a      	movs	r1, #90	@ 0x5a
 8006c5e:	5c52      	ldrb	r2, [r2, r1]
 8006c60:	4013      	ands	r3, r2
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d111      	bne.n	8006c8c <fallas+0x288>
			goto parpadeo2a;
 8006c68:	e000      	b.n	8006c6c <fallas+0x268>
			goto parpadeo2a;
 8006c6a:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8006c6c:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8006c6e:	4b12      	ldr	r3, [pc, #72]	@ (8006cb8 <fallas+0x2b4>)
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <fallas+0x2b0>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	0019      	movs	r1, r3
 8006c78:	0010      	movs	r0, r2
 8006c7a:	f000 fcbd 	bl	80075f8 <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8006c7e:	4b08      	ldr	r3, [pc, #32]	@ (8006ca0 <fallas+0x29c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 8006c84:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <fallas+0x29c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	705a      	strb	r2, [r3, #1]
 8006c8a:	e000      	b.n	8006c8e <fallas+0x28a>
		goto finfallas;
 8006c8c:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 8006c8e:	46c0      	nop			@ (mov r8, r8)
 8006c90:	0018      	movs	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b002      	add	sp, #8
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20001034 	.word	0x20001034
 8006c9c:	20000ba8 	.word	0x20000ba8
 8006ca0:	20000ba0 	.word	0x20000ba0
 8006ca4:	20000b98 	.word	0x20000b98
 8006ca8:	20000b90 	.word	0x20000b90
 8006cac:	20001144 	.word	0x20001144
 8006cb0:	20000be8 	.word	0x20000be8
 8006cb4:	20000b66 	.word	0x20000b66
 8006cb8:	20000b67 	.word	0x20000b67
 8006cbc:	20000b60 	.word	0x20000b60
 8006cc0:	200000b8 	.word	0x200000b8

08006cc4 <offdpy>:
void offdpy (){				//	offdpy:
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8006cc8:	211f      	movs	r1, #31
 8006cca:	201f      	movs	r0, #31
 8006ccc:	f000 fc94 	bl	80075f8 <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <offdpy+0x20>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 8006cd6:	4b03      	ldr	r3, [pc, #12]	@ (8006ce4 <offdpy+0x20>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	705a      	strb	r2, [r3, #1]
}
 8006cdc:	46c0      	nop			@ (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	20000ba0 	.word	0x20000ba0

08006ce8 <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8006ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cea:	b0a7      	sub	sp, #156	@ 0x9c
 8006cec:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 8006cee:	4bd7      	ldr	r3, [pc, #860]	@ (800704c <ram_reserved+0x364>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2baa      	cmp	r3, #170	@ 0xaa
 8006cf4:	d000      	beq.n	8006cf8 <ram_reserved+0x10>
 8006cf6:	e15f      	b.n	8006fb8 <ram_reserved+0x2d0>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 8006cf8:	46c0      	nop			@ (mov r8, r8)

			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8006cfa:	4bd5      	ldr	r3, [pc, #852]	@ (8007050 <ram_reserved+0x368>)
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f00f fe25 	bl	801694c <HAL_IWDG_Refresh>
			// Para realizar una sobreescritura en la Flash, es necesario borrar la pagina antes
			// CGM 04/12/2024

			uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
 8006d02:	4bd4      	ldr	r3, [pc, #848]	@ (8007054 <ram_reserved+0x36c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	22f8      	movs	r2, #248	@ 0xf8
 8006d08:	0612      	lsls	r2, r2, #24
 8006d0a:	4694      	mov	ip, r2
 8006d0c:	4463      	add	r3, ip
 8006d0e:	228c      	movs	r2, #140	@ 0x8c
 8006d10:	18b9      	adds	r1, r7, r2
 8006d12:	600b      	str	r3, [r1, #0]
			if(VarAux_ % 2048 == 0){
 8006d14:	18bb      	adds	r3, r7, r2
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	055b      	lsls	r3, r3, #21
 8006d1a:	0d5b      	lsrs	r3, r3, #21
 8006d1c:	d132      	bne.n	8006d84 <ram_reserved+0x9c>
				uint32_t numberPage = getNumberPage(VarAux_); 		// Number the Page
 8006d1e:	18bb      	adds	r3, r7, r2
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	0018      	movs	r0, r3
 8006d24:	f7fb fc52 	bl	80025cc <getNumberPage>
 8006d28:	0003      	movs	r3, r0
 8006d2a:	2288      	movs	r2, #136	@ 0x88
 8006d2c:	18b9      	adds	r1, r7, r2
 8006d2e:	600b      	str	r3, [r1, #0]
				uint32_t Error_ = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
				FLASH_EraseInitTypeDef pEraseInit = {0};
 8006d34:	266c      	movs	r6, #108	@ 0x6c
 8006d36:	19bb      	adds	r3, r7, r6
 8006d38:	0018      	movs	r0, r3
 8006d3a:	2310      	movs	r3, #16
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f015 f806 	bl	801bd50 <memset>
				pEraseInit.NbPages = 1;
 8006d44:	0031      	movs	r1, r6
 8006d46:	187a      	adds	r2, r7, r1
 8006d48:	2301      	movs	r3, #1
 8006d4a:	60d3      	str	r3, [r2, #12]
				pEraseInit.Page = numberPage;
 8006d4c:	187a      	adds	r2, r7, r1
 8006d4e:	2388      	movs	r3, #136	@ 0x88
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6093      	str	r3, [r2, #8]
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8006d56:	187a      	adds	r2, r7, r1
 8006d58:	2302      	movs	r3, #2
 8006d5a:	6013      	str	r3, [r2, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006d5c:	46c0      	nop			@ (mov r8, r8)
 8006d5e:	f00c fff1 	bl	8013d44 <HAL_FLASH_Unlock>
 8006d62:	1e03      	subs	r3, r0, #0
 8006d64:	d1fb      	bne.n	8006d5e <ram_reserved+0x76>
				HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8006d66:	2314      	movs	r3, #20
 8006d68:	2268      	movs	r2, #104	@ 0x68
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	19da      	adds	r2, r3, r7
 8006d6e:	236c      	movs	r3, #108	@ 0x6c
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	0011      	movs	r1, r2
 8006d74:	0018      	movs	r0, r3
 8006d76:	f00d f893 	bl	8013ea0 <HAL_FLASHEx_Erase>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	f00d f806 	bl	8013d8c <HAL_FLASH_Lock>
 8006d80:	1e03      	subs	r3, r0, #0
 8006d82:	d1fb      	bne.n	8006d7c <ram_reserved+0x94>
			}
			AddressDestination = (uint64_t *) dirPointer;
 8006d84:	4bb3      	ldr	r3, [pc, #716]	@ (8007054 <ram_reserved+0x36c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2294      	movs	r2, #148	@ 0x94
 8006d8a:	18ba      	adds	r2, r7, r2
 8006d8c:	6013      	str	r3, [r2, #0]
			//while( HAL_FLASH_Unlock() !=  HAL_OK );
			// Graba 128 Bytes de FLASH
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006d8e:	232b      	movs	r3, #43	@ 0x2b
 8006d90:	2268      	movs	r2, #104	@ 0x68
 8006d92:	189b      	adds	r3, r3, r2
 8006d94:	19da      	adds	r2, r3, r7
 8006d96:	2300      	movs	r3, #0
 8006d98:	7013      	strb	r3, [r2, #0]
 8006d9a:	e103      	b.n	8006fa4 <ram_reserved+0x2bc>
			   	// Data = (uint32_t)(*dataPointer);

				Data  	 =  (uint64_t)(*dataPointer);						dataPointer++;
 8006d9c:	4bae      	ldr	r3, [pc, #696]	@ (8007058 <ram_reserved+0x370>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2680      	movs	r6, #128	@ 0x80
 8006da4:	19ba      	adds	r2, r7, r6
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	2300      	movs	r3, #0
 8006daa:	2284      	movs	r2, #132	@ 0x84
 8006dac:	18ba      	adds	r2, r7, r2
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	4ba9      	ldr	r3, [pc, #676]	@ (8007058 <ram_reserved+0x370>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	4ba8      	ldr	r3, [pc, #672]	@ (8007058 <ram_reserved+0x370>)
 8006db8:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer))	<<8;				dataPointer++;
 8006dba:	4ba7      	ldr	r3, [pc, #668]	@ (8007058 <ram_reserved+0x370>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dc6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006dc8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dca:	000b      	movs	r3, r1
 8006dcc:	0e1b      	lsrs	r3, r3, #24
 8006dce:	0010      	movs	r0, r2
 8006dd0:	0200      	lsls	r0, r0, #8
 8006dd2:	6678      	str	r0, [r7, #100]	@ 0x64
 8006dd4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8006dd6:	4318      	orrs	r0, r3
 8006dd8:	6678      	str	r0, [r7, #100]	@ 0x64
 8006dda:	000b      	movs	r3, r1
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de0:	19bb      	adds	r3, r7, r6
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006de8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006dea:	1812      	adds	r2, r2, r0
 8006dec:	414b      	adcs	r3, r1
 8006dee:	19b9      	adds	r1, r7, r6
 8006df0:	600a      	str	r2, [r1, #0]
 8006df2:	604b      	str	r3, [r1, #4]
 8006df4:	4b98      	ldr	r3, [pc, #608]	@ (8007058 <ram_reserved+0x370>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	4b97      	ldr	r3, [pc, #604]	@ (8007058 <ram_reserved+0x370>)
 8006dfc:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer)) 	<<16;				dataPointer++;
 8006dfe:	4b96      	ldr	r3, [pc, #600]	@ (8007058 <ram_reserved+0x370>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e06:	2300      	movs	r3, #0
 8006e08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e0e:	000b      	movs	r3, r1
 8006e10:	0c1b      	lsrs	r3, r3, #16
 8006e12:	0010      	movs	r0, r2
 8006e14:	0405      	lsls	r5, r0, #16
 8006e16:	431d      	orrs	r5, r3
 8006e18:	000b      	movs	r3, r1
 8006e1a:	041c      	lsls	r4, r3, #16
 8006e1c:	19bb      	adds	r3, r7, r6
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	1912      	adds	r2, r2, r4
 8006e24:	416b      	adcs	r3, r5
 8006e26:	0030      	movs	r0, r6
 8006e28:	19b9      	adds	r1, r7, r6
 8006e2a:	600a      	str	r2, [r1, #0]
 8006e2c:	604b      	str	r3, [r1, #4]
 8006e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8007058 <ram_reserved+0x370>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	4b88      	ldr	r3, [pc, #544]	@ (8007058 <ram_reserved+0x370>)
 8006e36:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<24;			   	dataPointer++;
 8006e38:	4b87      	ldr	r3, [pc, #540]	@ (8007058 <ram_reserved+0x370>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e40:	2300      	movs	r3, #0
 8006e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0a09      	lsrs	r1, r1, #8
 8006e4c:	6479      	str	r1, [r7, #68]	@ 0x44
 8006e4e:	0013      	movs	r3, r2
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e54:	0006      	movs	r6, r0
 8006e56:	183b      	adds	r3, r7, r0
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006e5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e60:	1812      	adds	r2, r2, r0
 8006e62:	414b      	adcs	r3, r1
 8006e64:	0031      	movs	r1, r6
 8006e66:	1878      	adds	r0, r7, r1
 8006e68:	6002      	str	r2, [r0, #0]
 8006e6a:	6043      	str	r3, [r0, #4]
 8006e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8007058 <ram_reserved+0x370>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	4b79      	ldr	r3, [pc, #484]	@ (8007058 <ram_reserved+0x370>)
 8006e74:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<32;			   	dataPointer++;
 8006e76:	4b78      	ldr	r3, [pc, #480]	@ (8007058 <ram_reserved+0x370>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	001b      	movs	r3, r3
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e88:	2300      	movs	r3, #0
 8006e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e8c:	000e      	movs	r6, r1
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e98:	1812      	adds	r2, r2, r0
 8006e9a:	414b      	adcs	r3, r1
 8006e9c:	0031      	movs	r1, r6
 8006e9e:	1878      	adds	r0, r7, r1
 8006ea0:	6002      	str	r2, [r0, #0]
 8006ea2:	6043      	str	r3, [r0, #4]
 8006ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8007058 <ram_reserved+0x370>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	4b6b      	ldr	r3, [pc, #428]	@ (8007058 <ram_reserved+0x370>)
 8006eac:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<40;			   	dataPointer++;
 8006eae:	4b6a      	ldr	r3, [pc, #424]	@ (8007058 <ram_reserved+0x370>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	623b      	str	r3, [r7, #32]
 8006ec4:	000e      	movs	r6, r1
 8006ec6:	187b      	adds	r3, r7, r1
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	6a38      	ldr	r0, [r7, #32]
 8006ece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ed0:	1812      	adds	r2, r2, r0
 8006ed2:	414b      	adcs	r3, r1
 8006ed4:	0031      	movs	r1, r6
 8006ed6:	1878      	adds	r0, r7, r1
 8006ed8:	6002      	str	r2, [r0, #0]
 8006eda:	6043      	str	r3, [r0, #4]
 8006edc:	4b5e      	ldr	r3, [pc, #376]	@ (8007058 <ram_reserved+0x370>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8007058 <ram_reserved+0x370>)
 8006ee4:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<48;			   	dataPointer++;
 8006ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8007058 <ram_reserved+0x370>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	000e      	movs	r6, r1
 8006efe:	187b      	adds	r3, r7, r1
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	6938      	ldr	r0, [r7, #16]
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	1812      	adds	r2, r2, r0
 8006f0a:	414b      	adcs	r3, r1
 8006f0c:	0031      	movs	r1, r6
 8006f0e:	1878      	adds	r0, r7, r1
 8006f10:	6002      	str	r2, [r0, #0]
 8006f12:	6043      	str	r3, [r0, #4]
 8006f14:	4b50      	ldr	r3, [pc, #320]	@ (8007058 <ram_reserved+0x370>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007058 <ram_reserved+0x370>)
 8006f1c:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<56;			   	dataPointer++;
 8006f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8007058 <ram_reserved+0x370>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	061b      	lsls	r3, r3, #24
 8006f2e:	607b      	str	r3, [r7, #4]
 8006f30:	2300      	movs	r3, #0
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	000e      	movs	r6, r1
 8006f36:	187b      	adds	r3, r7, r1
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	6838      	ldr	r0, [r7, #0]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	1812      	adds	r2, r2, r0
 8006f42:	414b      	adcs	r3, r1
 8006f44:	19b9      	adds	r1, r7, r6
 8006f46:	600a      	str	r2, [r1, #0]
 8006f48:	604b      	str	r3, [r1, #4]
 8006f4a:	4b43      	ldr	r3, [pc, #268]	@ (8007058 <ram_reserved+0x370>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	4b41      	ldr	r3, [pc, #260]	@ (8007058 <ram_reserved+0x370>)
 8006f52:	601a      	str	r2, [r3, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006f54:	46c0      	nop			@ (mov r8, r8)
 8006f56:	f00c fef5 	bl	8013d44 <HAL_FLASH_Unlock>
 8006f5a:	1e03      	subs	r3, r0, #0
 8006f5c:	d1fb      	bne.n	8006f56 <ram_reserved+0x26e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) AddressDestination, Data);
 8006f5e:	2394      	movs	r3, #148	@ 0x94
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	2380      	movs	r3, #128	@ 0x80
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	f00c fe9b 	bl	8013ca8 <HAL_FLASH_Program>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006f72:	46c0      	nop			@ (mov r8, r8)
 8006f74:	f00c ff0a 	bl	8013d8c <HAL_FLASH_Lock>
 8006f78:	1e03      	subs	r3, r0, #0
 8006f7a:	d1fb      	bne.n	8006f74 <ram_reserved+0x28c>
				AddressDestination++;
 8006f7c:	2294      	movs	r2, #148	@ 0x94
 8006f7e:	18bb      	adds	r3, r7, r2
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	18ba      	adds	r2, r7, r2
 8006f86:	6013      	str	r3, [r2, #0]
				//if(AddressDestination>=0x801d000)
				//	break;
//				while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	//dirPointer +=4;
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 8006f88:	4b31      	ldr	r3, [pc, #196]	@ (8007050 <ram_reserved+0x368>)
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f00f fcde 	bl	801694c <HAL_IWDG_Refresh>


				asm ("nop");
 8006f90:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006f92:	222b      	movs	r2, #43	@ 0x2b
 8006f94:	2168      	movs	r1, #104	@ 0x68
 8006f96:	1853      	adds	r3, r2, r1
 8006f98:	19db      	adds	r3, r3, r7
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	1852      	adds	r2, r2, r1
 8006f9e:	19d2      	adds	r2, r2, r7
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	7013      	strb	r3, [r2, #0]
 8006fa4:	232b      	movs	r3, #43	@ 0x2b
 8006fa6:	2268      	movs	r2, #104	@ 0x68
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	19db      	adds	r3, r3, r7
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	d800      	bhi.n	8006fb4 <ram_reserved+0x2cc>
 8006fb2:	e6f3      	b.n	8006d9c <ram_reserved+0xb4>
//			LD				A,cntByteLoaded											;	Si el contador apuntador ya es 63 entonces espera a que la grabacion se ejecute
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			asm ("nop");
 8006fb4:	46c0      	nop			@ (mov r8, r8)
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8006fb6:	e041      	b.n	800703c <ram_reserved+0x354>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8006fb8:	46c0      	nop			@ (mov r8, r8)
//check_bit_enable:																											;	Si la EEPROM no esta desbloqueada entonces repite la llave
//												BTJF			FLASH_IAPSR,#3,PROG_eepr_mode
//MEM_UNLOCKED1:

GRABA_SIG:
			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8006fba:	4b25      	ldr	r3, [pc, #148]	@ (8007050 <ram_reserved+0x368>)
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f00f fcc5 	bl	801694c <HAL_IWDG_Refresh>
//
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			HAL_IWDG_Refresh( &hiwdg );
 8006fc2:	4b23      	ldr	r3, [pc, #140]	@ (8007050 <ram_reserved+0x368>)
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f00f fcc1 	bl	801694c <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8006fca:	232a      	movs	r3, #42	@ 0x2a
 8006fcc:	2268      	movs	r2, #104	@ 0x68
 8006fce:	189b      	adds	r3, r3, r2
 8006fd0:	19db      	adds	r3, r3, r7
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e028      	b.n	800702a <ram_reserved+0x342>
				FlashManager((uint32_t)dirPointer, (uint32_t)*dataPointer);
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <ram_reserved+0x36c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	001a      	movs	r2, r3
 8006fde:	4b1e      	ldr	r3, [pc, #120]	@ (8007058 <ram_reserved+0x370>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	0019      	movs	r1, r3
 8006fe6:	0010      	movs	r0, r2
 8006fe8:	f7fc f8bc 	bl	8003164 <FlashManager>
				reePlantilla[i] = *dataPointer;		// Guardando el respaldo en RAM
 8006fec:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <ram_reserved+0x370>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	242a      	movs	r4, #42	@ 0x2a
 8006ff2:	2568      	movs	r5, #104	@ 0x68
 8006ff4:	1963      	adds	r3, r4, r5
 8006ff6:	19db      	adds	r3, r3, r7
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	7811      	ldrb	r1, [r2, #0]
 8006ffc:	4a17      	ldr	r2, [pc, #92]	@ (800705c <ram_reserved+0x374>)
 8006ffe:	54d1      	strb	r1, [r2, r3]
				dataPointer++;
 8007000:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <ram_reserved+0x370>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	4b14      	ldr	r3, [pc, #80]	@ (8007058 <ram_reserved+0x370>)
 8007008:	601a      	str	r2, [r3, #0]
				dirPointer++;
 800700a:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <ram_reserved+0x36c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	4b10      	ldr	r3, [pc, #64]	@ (8007054 <ram_reserved+0x36c>)
 8007012:	601a      	str	r2, [r3, #0]
				HAL_IWDG_Refresh( &hiwdg );
 8007014:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <ram_reserved+0x368>)
 8007016:	0018      	movs	r0, r3
 8007018:	f00f fc98 	bl	801694c <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 800701c:	1963      	adds	r3, r4, r5
 800701e:	19db      	adds	r3, r3, r7
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	1963      	adds	r3, r4, r5
 8007024:	19db      	adds	r3, r3, r7
 8007026:	3201      	adds	r2, #1
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	232a      	movs	r3, #42	@ 0x2a
 800702c:	2268      	movs	r2, #104	@ 0x68
 800702e:	189b      	adds	r3, r3, r2
 8007030:	19db      	adds	r3, r3, r7
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b25b      	sxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	dace      	bge.n	8006fd8 <ram_reserved+0x2f0>
			}



WAIT_FOR_GRAB_0:
 800703a:	46c0      	nop			@ (mov r8, r8)

WAIT_FOR_GRAB:
			HAL_IWDG_Refresh( &hiwdg );		//MOV				IWDG_KR,#$AA
 800703c:	4b04      	ldr	r3, [pc, #16]	@ (8007050 <ram_reserved+0x368>)
 800703e:	0018      	movs	r0, r3
 8007040:	f00f fc84 	bl	801694c <HAL_IWDG_Refresh>
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8007044:	46c0      	nop			@ (mov r8, r8)
 8007046:	46bd      	mov	sp, r7
 8007048:	b027      	add	sp, #156	@ 0x9c
 800704a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704c:	20000e28 	.word	0x20000e28
 8007050:	20000560 	.word	0x20000560
 8007054:	20000e2c 	.word	0x20000e2c
 8007058:	20000e30 	.word	0x20000e30
 800705c:	20000c9c 	.word	0x20000c9c

08007060 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 8007066:	1dbb      	adds	r3, r7, #6
 8007068:	2200      	movs	r2, #0
 800706a:	801a      	strh	r2, [r3, #0]
	foo= reePlantilla[eetiempoAhorro1]*360;
 800706c:	4b08      	ldr	r3, [pc, #32]	@ (8007090 <load_tiempoAhorro1+0x30>)
 800706e:	226f      	movs	r2, #111	@ 0x6f
 8007070:	5c9b      	ldrb	r3, [r3, r2]
 8007072:	0019      	movs	r1, r3
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	22b4      	movs	r2, #180	@ 0xb4
 8007078:	0052      	lsls	r2, r2, #1
 800707a:	434a      	muls	r2, r1
 800707c:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 800707e:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <load_tiempoAhorro1+0x34>)
 8007080:	1dba      	adds	r2, r7, #6
 8007082:	8812      	ldrh	r2, [r2, #0]
 8007084:	801a      	strh	r2, [r3, #0]
}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	46bd      	mov	sp, r7
 800708a:	b002      	add	sp, #8
 800708c:	bd80      	pop	{r7, pc}
 800708e:	46c0      	nop			@ (mov r8, r8)
 8007090:	20000c9c 	.word	0x20000c9c
 8007094:	20000c40 	.word	0x20000c40

08007098 <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 800709e:	1dbb      	adds	r3, r7, #6
 80070a0:	2200      	movs	r2, #0
 80070a2:	801a      	strh	r2, [r3, #0]
		foo= reePlantilla[eetiempoAhorro2]*360;
 80070a4:	4b08      	ldr	r3, [pc, #32]	@ (80070c8 <load_tiempoAhorro2+0x30>)
 80070a6:	2270      	movs	r2, #112	@ 0x70
 80070a8:	5c9b      	ldrb	r3, [r3, r2]
 80070aa:	0019      	movs	r1, r3
 80070ac:	1dbb      	adds	r3, r7, #6
 80070ae:	22b4      	movs	r2, #180	@ 0xb4
 80070b0:	0052      	lsls	r2, r2, #1
 80070b2:	434a      	muls	r2, r1
 80070b4:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 80070b6:	4b05      	ldr	r3, [pc, #20]	@ (80070cc <load_tiempoAhorro2+0x34>)
 80070b8:	1dba      	adds	r2, r7, #6
 80070ba:	8812      	ldrh	r2, [r2, #0]
 80070bc:	801a      	strh	r2, [r3, #0]
}
 80070be:	46c0      	nop			@ (mov r8, r8)
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			@ (mov r8, r8)
 80070c8:	20000c9c 	.word	0x20000c9c
 80070cc:	20000c42 	.word	0x20000c42

080070d0 <load_timeNoct>:

void load_timeNoct(){
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = reePlantilla[eetimeNoct]*60;
 80070d4:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <load_timeNoct+0x1c>)
 80070d6:	224b      	movs	r2, #75	@ 0x4b
 80070d8:	5c9b      	ldrb	r3, [r3, r2]
 80070da:	001a      	movs	r2, r3
 80070dc:	233c      	movs	r3, #60	@ 0x3c
 80070de:	4353      	muls	r3, r2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	4b03      	ldr	r3, [pc, #12]	@ (80070f0 <load_timeNoct+0x20>)
 80070e4:	801a      	strh	r2, [r3, #0]
}
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000c9c 	.word	0x20000c9c
 80070f0:	20000c54 	.word	0x20000c54

080070f4 <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 80070fa:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <load_next_buffer+0x60>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8007100:	4b15      	ldr	r3, [pc, #84]	@ (8007158 <load_next_buffer+0x64>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	01db      	lsls	r3, r3, #7
 8007106:	b29a      	uxth	r2, r3
 8007108:	4b14      	ldr	r3, [pc, #80]	@ (800715c <load_next_buffer+0x68>)
 800710a:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 800710c:	4b14      	ldr	r3, [pc, #80]	@ (8007160 <load_next_buffer+0x6c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a12      	ldr	r2, [pc, #72]	@ (800715c <load_next_buffer+0x68>)
 8007112:	8812      	ldrh	r2, [r2, #0]
 8007114:	189b      	adds	r3, r3, r2
 8007116:	607b      	str	r3, [r7, #4]
	wreg = 0;
 8007118:	4b12      	ldr	r3, [pc, #72]	@ (8007164 <load_next_buffer+0x70>)
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	781a      	ldrb	r2, [r3, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	701a      	strb	r2, [r3, #0]
	point_X++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3301      	adds	r3, #1
 800712a:	607b      	str	r3, [r7, #4]
	point_Y++;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	603b      	str	r3, [r7, #0]
	wreg++;
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <load_next_buffer+0x70>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <load_next_buffer+0x70>)
 800713c:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 800713e:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <load_next_buffer+0x70>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b25b      	sxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	db00      	blt.n	800714a <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8007148:	e7e9      	b.n	800711e <load_next_buffer+0x2a>
	}
    asm ("nop");
 800714a:	46c0      	nop			@ (mov r8, r8)
}
 800714c:	46c0      	nop			@ (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000e40 	.word	0x20000e40
 8007158:	20000e36 	.word	0x20000e36
 800715c:	200008e6 	.word	0x200008e6
 8007160:	20000e3c 	.word	0x20000e3c
 8007164:	20000b67 	.word	0x20000b67

08007168 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
		//
		//waux = lowByte(cntReg);		// 		mov		waux,resull;
		//point_X++;  // cntRegPNT++;						//		incw	X
		//wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado

		FlashManager(cntRegPNT, cntReg);
 800716c:	4b07      	ldr	r3, [pc, #28]	@ (800718c <save_cntReg+0x24>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	001a      	movs	r2, r3
 8007172:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <save_cntReg+0x28>)
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	0019      	movs	r1, r3
 8007178:	0010      	movs	r0, r2
 800717a:	f7fb fff3 	bl	8003164 <FlashManager>


		HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800717e:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <save_cntReg+0x2c>)
 8007180:	0018      	movs	r0, r3
 8007182:	f00f fbe3 	bl	801694c <HAL_IWDG_Refresh>
		//
//		ret
}
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200010dc 	.word	0x200010dc
 8007190:	200010da 	.word	0x200010da
 8007194:	20000560 	.word	0x20000560

08007198 <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 800719c:	4b2d      	ldr	r3, [pc, #180]	@ (8007254 <save_timeUNIX+0xbc>)
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007258 <save_timeUNIX+0xc0>)
 80071a8:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 80071aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007258 <save_timeUNIX+0xc0>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	001a      	movs	r2, r3
 80071b0:	4b2a      	ldr	r3, [pc, #168]	@ (800725c <save_timeUNIX+0xc4>)
 80071b2:	0019      	movs	r1, r3
 80071b4:	0010      	movs	r0, r2
 80071b6:	f000 fa0b 	bl	80075d0 <wreeprom>
	reeTimeUnix1 = waux;
 80071ba:	4b27      	ldr	r3, [pc, #156]	@ (8007258 <save_timeUNIX+0xc0>)
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	4b28      	ldr	r3, [pc, #160]	@ (8007260 <save_timeUNIX+0xc8>)
 80071c0:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80071c2:	4b28      	ldr	r3, [pc, #160]	@ (8007264 <save_timeUNIX+0xcc>)
 80071c4:	0018      	movs	r0, r3
 80071c6:	f00f fbc1 	bl	801694c <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 80071ca:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <save_timeUNIX+0xbc>)
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	4b21      	ldr	r3, [pc, #132]	@ (8007258 <save_timeUNIX+0xc0>)
 80071d2:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 80071d4:	4b20      	ldr	r3, [pc, #128]	@ (8007258 <save_timeUNIX+0xc0>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	001a      	movs	r2, r3
 80071da:	4b23      	ldr	r3, [pc, #140]	@ (8007268 <save_timeUNIX+0xd0>)
 80071dc:	0019      	movs	r1, r3
 80071de:	0010      	movs	r0, r2
 80071e0:	f000 f9f6 	bl	80075d0 <wreeprom>
	reeTimeUnix2 = waux;
 80071e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <save_timeUNIX+0xc0>)
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	4b20      	ldr	r3, [pc, #128]	@ (800726c <save_timeUNIX+0xd4>)
 80071ea:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80071ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007264 <save_timeUNIX+0xcc>)
 80071ee:	0018      	movs	r0, r3
 80071f0:	f00f fbac 	bl	801694c <HAL_IWDG_Refresh>


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 80071f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007270 <save_timeUNIX+0xd8>)
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	0a1b      	lsrs	r3, r3, #8
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b16      	ldr	r3, [pc, #88]	@ (8007258 <save_timeUNIX+0xc0>)
 8007200:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8007202:	4b15      	ldr	r3, [pc, #84]	@ (8007258 <save_timeUNIX+0xc0>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	001a      	movs	r2, r3
 8007208:	4b1a      	ldr	r3, [pc, #104]	@ (8007274 <save_timeUNIX+0xdc>)
 800720a:	0019      	movs	r1, r3
 800720c:	0010      	movs	r0, r2
 800720e:	f000 f9df 	bl	80075d0 <wreeprom>
	reeTimeUnix3 = waux;
 8007212:	4b11      	ldr	r3, [pc, #68]	@ (8007258 <save_timeUNIX+0xc0>)
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <save_timeUNIX+0xe0>)
 8007218:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800721a:	4b12      	ldr	r3, [pc, #72]	@ (8007264 <save_timeUNIX+0xcc>)
 800721c:	0018      	movs	r0, r3
 800721e:	f00f fb95 	bl	801694c <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8007222:	4b13      	ldr	r3, [pc, #76]	@ (8007270 <save_timeUNIX+0xd8>)
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b2da      	uxtb	r2, r3
 8007228:	4b0b      	ldr	r3, [pc, #44]	@ (8007258 <save_timeUNIX+0xc0>)
 800722a:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 800722c:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <save_timeUNIX+0xc0>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	001a      	movs	r2, r3
 8007232:	4b12      	ldr	r3, [pc, #72]	@ (800727c <save_timeUNIX+0xe4>)
 8007234:	0019      	movs	r1, r3
 8007236:	0010      	movs	r0, r2
 8007238:	f000 f9ca 	bl	80075d0 <wreeprom>
	reeTimeUnix4 = waux;
 800723c:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <save_timeUNIX+0xc0>)
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	4b0f      	ldr	r3, [pc, #60]	@ (8007280 <save_timeUNIX+0xe8>)
 8007242:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8007244:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <save_timeUNIX+0xcc>)
 8007246:	0018      	movs	r0, r3
 8007248:	f00f fb80 	bl	801694c <HAL_IWDG_Refresh>

}
 800724c:	46c0      	nop			@ (mov r8, r8)
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	46c0      	nop			@ (mov r8, r8)
 8007254:	20000e4c 	.word	0x20000e4c
 8007258:	20000b66 	.word	0x20000b66
 800725c:	0803f804 	.word	0x0803f804
 8007260:	20000d1d 	.word	0x20000d1d
 8007264:	20000560 	.word	0x20000560
 8007268:	0803f805 	.word	0x0803f805
 800726c:	20000d1e 	.word	0x20000d1e
 8007270:	20000e4e 	.word	0x20000e4e
 8007274:	0803f806 	.word	0x0803f806
 8007278:	20000d1f 	.word	0x20000d1f
 800727c:	0803f807 	.word	0x0803f807
 8007280:	20000d20 	.word	0x20000d20

08007284 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	000a      	movs	r2, r1
 800728e:	1cfb      	adds	r3, r7, #3
 8007290:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8007292:	e011      	b.n	80072b8 <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8007294:	210f      	movs	r1, #15
 8007296:	187b      	adds	r3, r7, r1
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7812      	ldrb	r2, [r2, #0]
 800729c:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 800729e:	187b      	adds	r3, r7, r1
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	0018      	movs	r0, r3
 80072a4:	f000 f860 	bl	8007368 <build_chksum>
		*point_X++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3301      	adds	r3, #1
 80072ac:	607b      	str	r3, [r7, #4]
		waux--;
 80072ae:	1cfb      	adds	r3, r7, #3
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	1cfb      	adds	r3, r7, #3
 80072b4:	3a01      	subs	r2, #1
 80072b6:	701a      	strb	r2, [r3, #0]
	while (waux){
 80072b8:	1cfb      	adds	r3, r7, #3
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e9      	bne.n	8007294 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 80072c0:	46c0      	nop			@ (mov r8, r8)
 80072c2:	46c0      	nop			@ (mov r8, r8)
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b004      	add	sp, #16
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <ld_alarmDelay+0x1c>)
 80072d2:	224e      	movs	r2, #78	@ 0x4e
 80072d4:	5c9b      	ldrb	r3, [r3, r2]
 80072d6:	001a      	movs	r2, r3
 80072d8:	233c      	movs	r3, #60	@ 0x3c
 80072da:	4353      	muls	r3, r2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	4b03      	ldr	r3, [pc, #12]	@ (80072ec <ld_alarmDelay+0x20>)
 80072e0:	801a      	strh	r2, [r3, #0]
}
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	200000b8 	.word	0x200000b8
 80072ec:	2000103c 	.word	0x2000103c

080072f0 <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
 80072fa:	e007      	b.n	800730c <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 80072fc:	4a07      	ldr	r2, [pc, #28]	@ (800731c <clean_buffer+0x2c>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	18d3      	adds	r3, r2, r3
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3301      	adds	r3, #1
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007310:	ddf4      	ble.n	80072fc <clean_buffer+0xc>
	}
}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	46c0      	nop			@ (mov r8, r8)
 8007316:	46bd      	mov	sp, r7
 8007318:	b002      	add	sp, #8
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000d28 	.word	0x20000d28

08007320 <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e00c      	b.n	800734a <copyVector+0x2a>
		*dstY = *srcX;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	701a      	strb	r2, [r3, #0]
		srcX++;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3301      	adds	r3, #1
 800733c:	607b      	str	r3, [r7, #4]
		dstY++;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	3301      	adds	r3, #1
 8007342:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	4b06      	ldr	r3, [pc, #24]	@ (8007364 <copyVector+0x44>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	001a      	movs	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4293      	cmp	r3, r2
 8007354:	dbec      	blt.n	8007330 <copyVector+0x10>
	}
	wreg = 0;
 8007356:	4b03      	ldr	r3, [pc, #12]	@ (8007364 <copyVector+0x44>)
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
}
 800735c:	46c0      	nop			@ (mov r8, r8)
 800735e:	46bd      	mov	sp, r7
 8007360:	b004      	add	sp, #16
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000b67 	.word	0x20000b67

08007368 <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	0002      	movs	r2, r0
 8007370:	1dfb      	adds	r3, r7, #7
 8007372:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8007374:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8007376:	1dfb      	adds	r3, r7, #7
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	4b04      	ldr	r3, [pc, #16]	@ (800738c <build_chksum+0x24>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	18d2      	adds	r2, r2, r3
 8007380:	4b02      	ldr	r3, [pc, #8]	@ (800738c <build_chksum+0x24>)
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	46c0      	nop			@ (mov r8, r8)
 8007386:	46bd      	mov	sp, r7
 8007388:	b002      	add	sp, #8
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000ed0 	.word	0x20000ed0

08007390 <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 8007394:	f7ff fca8 	bl	8006ce8 <ram_reserved>
Return_RAM:

}
 8007398:	46c0      	nop			@ (mov r8, r8)
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <decword+0x1c>
		(*decwreg_Reg)--;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	801a      	strh	r2, [r3, #0]
}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	46bd      	mov	sp, r7
 80073be:	b002      	add	sp, #8
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <decwreg+0x1c>
		(*decwreg_Reg)--;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	701a      	strb	r2, [r3, #0]
}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b002      	add	sp, #8
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 80073ee:	4b40      	ldr	r3, [pc, #256]	@ (80074f0 <buildmode+0x108>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 80073f4:	4b3f      	ldr	r3, [pc, #252]	@ (80074f4 <buildmode+0x10c>)
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 80073fc:	4b3c      	ldr	r3, [pc, #240]	@ (80074f0 <buildmode+0x108>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2201      	movs	r2, #1
 8007402:	4313      	orrs	r3, r2
 8007404:	b2da      	uxtb	r2, r3
 8007406:	4b3a      	ldr	r3, [pc, #232]	@ (80074f0 <buildmode+0x108>)
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e000      	b.n	800740e <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 800740c:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 800740e:	1dbb      	adds	r3, r7, #6
 8007410:	2200      	movs	r2, #0
 8007412:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8007414:	4b38      	ldr	r3, [pc, #224]	@ (80074f8 <buildmode+0x110>)
 8007416:	2223      	movs	r2, #35	@ 0x23
 8007418:	5c9b      	ldrb	r3, [r3, r2]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	b29b      	uxth	r3, r3
 800741e:	4a36      	ldr	r2, [pc, #216]	@ (80074f8 <buildmode+0x110>)
 8007420:	2124      	movs	r1, #36	@ 0x24
 8007422:	5c52      	ldrb	r2, [r2, r1]
 8007424:	189b      	adds	r3, r3, r2
 8007426:	b29a      	uxth	r2, r3
 8007428:	1dbb      	adds	r3, r7, #6
 800742a:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 800742c:	4b33      	ldr	r3, [pc, #204]	@ (80074fc <buildmode+0x114>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	b29b      	uxth	r3, r3
 8007434:	4a32      	ldr	r2, [pc, #200]	@ (8007500 <buildmode+0x118>)
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	189b      	adds	r3, r3, r2
 800743a:	b29a      	uxth	r2, r3
 800743c:	4b31      	ldr	r3, [pc, #196]	@ (8007504 <buildmode+0x11c>)
 800743e:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8007440:	4b30      	ldr	r3, [pc, #192]	@ (8007504 <buildmode+0x11c>)
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b21b      	sxth	r3, r3
 8007446:	1dba      	adds	r2, r7, #6
 8007448:	2100      	movs	r1, #0
 800744a:	5e52      	ldrsh	r2, [r2, r1]
 800744c:	429a      	cmp	r2, r3
 800744e:	dc07      	bgt.n	8007460 <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8007450:	4b27      	ldr	r3, [pc, #156]	@ (80074f0 <buildmode+0x108>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2202      	movs	r2, #2
 8007456:	4313      	orrs	r3, r2
 8007458:	b2da      	uxtb	r2, r3
 800745a:	4b25      	ldr	r3, [pc, #148]	@ (80074f0 <buildmode+0x108>)
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	e000      	b.n	8007462 <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8007460:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8007462:	4b25      	ldr	r3, [pc, #148]	@ (80074f8 <buildmode+0x110>)
 8007464:	2259      	movs	r2, #89	@ 0x59
 8007466:	5c9b      	ldrb	r3, [r3, r2]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d025      	beq.n	80074b8 <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 800746c:	4b26      	ldr	r3, [pc, #152]	@ (8007508 <buildmode+0x120>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b29b      	uxth	r3, r3
 8007474:	4a25      	ldr	r2, [pc, #148]	@ (800750c <buildmode+0x124>)
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	189b      	adds	r3, r3, r2
 800747a:	b29a      	uxth	r2, r3
 800747c:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <buildmode+0x11c>)
 800747e:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 8007480:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <buildmode+0x110>)
 8007482:	2221      	movs	r2, #33	@ 0x21
 8007484:	5c9b      	ldrb	r3, [r3, r2]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	b29b      	uxth	r3, r3
 800748a:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <buildmode+0x110>)
 800748c:	2122      	movs	r1, #34	@ 0x22
 800748e:	5c52      	ldrb	r2, [r2, r1]
 8007490:	189b      	adds	r3, r3, r2
 8007492:	b29a      	uxth	r2, r3
 8007494:	1dbb      	adds	r3, r7, #6
 8007496:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8007498:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <buildmode+0x11c>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b21b      	sxth	r3, r3
 800749e:	1dba      	adds	r2, r7, #6
 80074a0:	2100      	movs	r1, #0
 80074a2:	5e52      	ldrsh	r2, [r2, r1]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	dc09      	bgt.n	80074bc <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 80074a8:	4b11      	ldr	r3, [pc, #68]	@ (80074f0 <buildmode+0x108>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2210      	movs	r2, #16
 80074ae:	4313      	orrs	r3, r2
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	4b0f      	ldr	r3, [pc, #60]	@ (80074f0 <buildmode+0x108>)
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e002      	b.n	80074be <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 80074b8:	46c0      	nop			@ (mov r8, r8)
 80074ba:	e000      	b.n	80074be <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 80074bc:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 80074be:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <buildmode+0x128>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2201      	movs	r2, #1
 80074c4:	4053      	eors	r3, r2
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 80074cc:	4b08      	ldr	r3, [pc, #32]	@ (80074f0 <buildmode+0x108>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2280      	movs	r2, #128	@ 0x80
 80074d2:	4252      	negs	r2, r2
 80074d4:	4313      	orrs	r3, r2
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <buildmode+0x108>)
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e000      	b.n	80074e0 <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 80074de:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 80074e0:	4b03      	ldr	r3, [pc, #12]	@ (80074f0 <buildmode+0x108>)
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <buildmode+0x12c>)
 80074e6:	701a      	strb	r2, [r3, #0]

}
 80074e8:	46c0      	nop			@ (mov r8, r8)
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b002      	add	sp, #8
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000b66 	.word	0x20000b66
 80074f4:	20000bca 	.word	0x20000bca
 80074f8:	200000b8 	.word	0x200000b8
 80074fc:	20000bc0 	.word	0x20000bc0
 8007500:	20000bc1 	.word	0x20000bc1
 8007504:	200008e6 	.word	0x200008e6
 8007508:	20000bc2 	.word	0x20000bc2
 800750c:	20000bc3 	.word	0x20000bc3
 8007510:	20000b88 	.word	0x20000b88
 8007514:	20000b64 	.word	0x20000b64

08007518 <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 800751e:	4b26      	ldr	r3, [pc, #152]	@ (80075b8 <memodriver+0xa0>)
 8007520:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 8007522:	4b26      	ldr	r3, [pc, #152]	@ (80075bc <memodriver+0xa4>)
 8007524:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 8007526:	4b26      	ldr	r3, [pc, #152]	@ (80075c0 <memodriver+0xa8>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2baa      	cmp	r3, #170	@ 0xaa
 800752c:	d11f      	bne.n	800756e <memodriver+0x56>
				goto  loaddat;
			}
grabmemo:
 800752e:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 8007530:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <memodriver+0xa0>)
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	4b23      	ldr	r3, [pc, #140]	@ (80075c4 <memodriver+0xac>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d025      	beq.n	8007588 <memodriver+0x70>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 800753c:	4b21      	ldr	r3, [pc, #132]	@ (80075c4 <memodriver+0xac>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	001a      	movs	r2, r3
 8007542:	4b21      	ldr	r3, [pc, #132]	@ (80075c8 <memodriver+0xb0>)
 8007544:	5c9b      	ldrb	r3, [r3, r2]
 8007546:	0018      	movs	r0, r3
 8007548:	4b1e      	ldr	r3, [pc, #120]	@ (80075c4 <memodriver+0xac>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	001a      	movs	r2, r3
 800754e:	4b1b      	ldr	r3, [pc, #108]	@ (80075bc <memodriver+0xa4>)
 8007550:	18d3      	adds	r3, r2, r3
 8007552:	0019      	movs	r1, r3
 8007554:	f000 f83c 	bl	80075d0 <wreeprom>
			reePlantilla[cntmemo] = copiaPlantilla[cntmemo];
 8007558:	4b1a      	ldr	r3, [pc, #104]	@ (80075c4 <memodriver+0xac>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	0019      	movs	r1, r3
 800755e:	4b19      	ldr	r3, [pc, #100]	@ (80075c4 <memodriver+0xac>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	001a      	movs	r2, r3
 8007564:	4b18      	ldr	r3, [pc, #96]	@ (80075c8 <memodriver+0xb0>)
 8007566:	5c59      	ldrb	r1, [r3, r1]
 8007568:	4b18      	ldr	r3, [pc, #96]	@ (80075cc <memodriver+0xb4>)
 800756a:	5499      	strb	r1, [r3, r2]
			goto nextdat;
 800756c:	e00d      	b.n	800758a <memodriver+0x72>
				goto  loaddat;
 800756e:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = reePlantilla[cntmemo];
 8007570:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <memodriver+0xac>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	0019      	movs	r1, r3
 8007576:	4b13      	ldr	r3, [pc, #76]	@ (80075c4 <memodriver+0xac>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	001a      	movs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	189b      	adds	r3, r3, r2
 8007580:	4a12      	ldr	r2, [pc, #72]	@ (80075cc <memodriver+0xb4>)
 8007582:	5c52      	ldrb	r2, [r2, r1]
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	e000      	b.n	800758a <memodriver+0x72>
				goto nextdat;
 8007588:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 800758a:	4b0e      	ldr	r3, [pc, #56]	@ (80075c4 <memodriver+0xac>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	b2da      	uxtb	r2, r3
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <memodriver+0xac>)
 8007594:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <memodriver+0xac>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b25b      	sxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	da06      	bge.n	80075ae <memodriver+0x96>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 80075a0:	4b07      	ldr	r3, [pc, #28]	@ (80075c0 <memodriver+0xa8>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <memodriver+0xac>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 80075ac:	e000      	b.n	80075b0 <memodriver+0x98>
				goto finmemodr;
 80075ae:	46c0      	nop			@ (mov r8, r8)
}
 80075b0:	46c0      	nop			@ (mov r8, r8)
 80075b2:	46bd      	mov	sp, r7
 80075b4:	b002      	add	sp, #8
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	200000b8 	.word	0x200000b8
 80075bc:	0803f000 	.word	0x0803f000
 80075c0:	20000c73 	.word	0x20000c73
 80075c4:	20000c74 	.word	0x20000c74
 80075c8:	20000138 	.word	0x20000138
 80075cc:	20000c9c 	.word	0x20000c9c

080075d0 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	0002      	movs	r2, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	FlashManager((uint32_t)AddressDestination, (uint32_t)Data);
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	0011      	movs	r1, r2
 80075ea:	0018      	movs	r0, r3
 80075ec:	f7fb fdba 	bl	8003164 <FlashManager>
}
 80075f0:	46c0      	nop			@ (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b004      	add	sp, #16
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	0002      	movs	r2, r0
 8007600:	1dfb      	adds	r3, r7, #7
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	1dbb      	adds	r3, r7, #6
 8007606:	1c0a      	adds	r2, r1, #0
 8007608:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 800760a:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <op_menu+0x2c>)
 800760c:	1dfa      	adds	r2, r7, #7
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 8007612:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <op_menu+0x30>)
 8007614:	1dba      	adds	r2, r7, #6
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	b002      	add	sp, #8
 8007620:	bd80      	pop	{r7, pc}
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	20000b63 	.word	0x20000b63
 8007628:	20000b62 	.word	0x20000b62

0800762c <datled_clear>:

void datled_clear()
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 8007630:	4b04      	ldr	r3, [pc, #16]	@ (8007644 <datled_clear+0x18>)
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 8007636:	4b03      	ldr	r3, [pc, #12]	@ (8007644 <datled_clear+0x18>)
 8007638:	2200      	movs	r2, #0
 800763a:	705a      	strb	r2, [r3, #1]
}
 800763c:	46c0      	nop			@ (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	46c0      	nop			@ (mov r8, r8)
 8007644:	20000ba0 	.word	0x20000ba0

08007648 <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	0004      	movs	r4, r0
 8007650:	0008      	movs	r0, r1
 8007652:	0011      	movs	r1, r2
 8007654:	1dfb      	adds	r3, r7, #7
 8007656:	1c22      	adds	r2, r4, #0
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	1dbb      	adds	r3, r7, #6
 800765c:	1c02      	adds	r2, r0, #0
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	1d7b      	adds	r3, r7, #5
 8007662:	1c0a      	adds	r2, r1, #0
 8007664:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 8007666:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <wreg_waux_conf+0x4c>)
 8007668:	1dfa      	adds	r2, r7, #7
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <wreg_waux_conf+0x50>)
 8007670:	1dba      	adds	r2, r7, #6
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 8007676:	1d7b      	adds	r3, r7, #5
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 800767e:	4b07      	ldr	r3, [pc, #28]	@ (800769c <wreg_waux_conf+0x54>)
 8007680:	2201      	movs	r2, #1
 8007682:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 8007684:	e002      	b.n	800768c <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 8007686:	4b05      	ldr	r3, [pc, #20]	@ (800769c <wreg_waux_conf+0x54>)
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
}
 800768c:	46c0      	nop			@ (mov r8, r8)
 800768e:	46bd      	mov	sp, r7
 8007690:	b003      	add	sp, #12
 8007692:	bd90      	pop	{r4, r7, pc}
 8007694:	20000b67 	.word	0x20000b67
 8007698:	20000b66 	.word	0x20000b66
 800769c:	20001034 	.word	0x20001034

080076a0 <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 80076a0:	b5b0      	push	{r4, r5, r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	0005      	movs	r5, r0
 80076a8:	000c      	movs	r4, r1
 80076aa:	0010      	movs	r0, r2
 80076ac:	0019      	movs	r1, r3
 80076ae:	1dbb      	adds	r3, r7, #6
 80076b0:	1c2a      	adds	r2, r5, #0
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	1c22      	adds	r2, r4, #0
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	1cbb      	adds	r3, r7, #2
 80076bc:	1c02      	adds	r2, r0, #0
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	1c7b      	adds	r3, r7, #1
 80076c2:	1c0a      	adds	r2, r1, #0
 80076c4:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 80076c6:	4b14      	ldr	r3, [pc, #80]	@ (8007718 <opc_nv+0x78>)
 80076c8:	1dba      	adds	r2, r7, #6
 80076ca:	8812      	ldrh	r2, [r2, #0]
 80076cc:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 80076ce:	4b13      	ldr	r3, [pc, #76]	@ (800771c <opc_nv+0x7c>)
 80076d0:	1d3a      	adds	r2, r7, #4
 80076d2:	8812      	ldrh	r2, [r2, #0]
 80076d4:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 80076d6:	4b12      	ldr	r3, [pc, #72]	@ (8007720 <opc_nv+0x80>)
 80076d8:	1cba      	adds	r2, r7, #2
 80076da:	8812      	ldrh	r2, [r2, #0]
 80076dc:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 80076de:	f7fe fe25 	bl	800632c <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 80076e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007720 <opc_nv+0x80>)
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	1c7b      	adds	r3, r7, #1
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2d1      	uxtb	r1, r2
 80076f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007724 <opc_nv+0x84>)
 80076f2:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 80076f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <opc_nv+0x80>)
 80076f6:	881a      	ldrh	r2, [r3, #0]
 80076f8:	2318      	movs	r3, #24
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b2d1      	uxtb	r1, r2
 8007700:	4a08      	ldr	r2, [pc, #32]	@ (8007724 <opc_nv+0x84>)
 8007702:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 8007704:	4b06      	ldr	r3, [pc, #24]	@ (8007720 <opc_nv+0x80>)
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	0018      	movs	r0, r3
 800770a:	f7ff f805 	bl	8006718 <convadec_math>

}
 800770e:	46c0      	nop			@ (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b002      	add	sp, #8
 8007714:	bdb0      	pop	{r4, r5, r7, pc}
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	20000c12 	.word	0x20000c12
 800771c:	20000c14 	.word	0x20000c14
 8007720:	200008e6 	.word	0x200008e6
 8007724:	20000138 	.word	0x20000138

08007728 <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 800772e:	4b79      	ldr	r3, [pc, #484]	@ (8007914 <comunicacion+0x1ec>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	3b01      	subs	r3, #1
 8007734:	b2da      	uxtb	r2, r3
 8007736:	4b77      	ldr	r3, [pc, #476]	@ (8007914 <comunicacion+0x1ec>)
 8007738:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 800773a:	4b76      	ldr	r3, [pc, #472]	@ (8007914 <comunicacion+0x1ec>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2bff      	cmp	r3, #255	@ 0xff
 8007740:	d103      	bne.n	800774a <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 8007742:	4b75      	ldr	r3, [pc, #468]	@ (8007918 <comunicacion+0x1f0>)
 8007744:	2200      	movs	r2, #0
 8007746:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8007748:	e0dd      	b.n	8007906 <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 800774a:	4b72      	ldr	r3, [pc, #456]	@ (8007914 <comunicacion+0x1ec>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007750:	d103      	bne.n	800775a <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 8007752:	4b71      	ldr	r3, [pc, #452]	@ (8007918 <comunicacion+0x1f0>)
 8007754:	2201      	movs	r2, #1
 8007756:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8007758:	e0d5      	b.n	8007906 <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 800775a:	4b6e      	ldr	r3, [pc, #440]	@ (8007914 <comunicacion+0x1ec>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d000      	beq.n	8007764 <comunicacion+0x3c>
 8007762:	e0cd      	b.n	8007900 <comunicacion+0x1d8>
			goto comu_01;
 8007764:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 8007766:	4b6b      	ldr	r3, [pc, #428]	@ (8007914 <comunicacion+0x1ec>)
 8007768:	2205      	movs	r2, #5
 800776a:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 800776c:	4b6b      	ldr	r3, [pc, #428]	@ (800791c <comunicacion+0x1f4>)
 800776e:	0018      	movs	r0, r3
 8007770:	f00d face 	bl	8014d10 <HAL_I2C_GetState>
 8007774:	0003      	movs	r3, r0
 8007776:	2b20      	cmp	r3, #32
 8007778:	d000      	beq.n	800777c <comunicacion+0x54>
 800777a:	e0ae      	b.n	80078da <comunicacion+0x1b2>
				countResetI2C = 0;
 800777c:	4b68      	ldr	r3, [pc, #416]	@ (8007920 <comunicacion+0x1f8>)
 800777e:	2200      	movs	r2, #0
 8007780:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 8007782:	4b68      	ldr	r3, [pc, #416]	@ (8007924 <comunicacion+0x1fc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 8007788:	4b66      	ldr	r3, [pc, #408]	@ (8007924 <comunicacion+0x1fc>)
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 800778e:	230f      	movs	r3, #15
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e00a      	b.n	80077ae <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 8007798:	200f      	movs	r0, #15
 800779a:	183b      	adds	r3, r7, r0
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	4a62      	ldr	r2, [pc, #392]	@ (8007928 <comunicacion+0x200>)
 80077a0:	2100      	movs	r1, #0
 80077a2:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 80077a4:	183b      	adds	r3, r7, r0
 80077a6:	781a      	ldrb	r2, [r3, #0]
 80077a8:	183b      	adds	r3, r7, r0
 80077aa:	3201      	adds	r2, #1
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	230f      	movs	r3, #15
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	d9ef      	bls.n	8007798 <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 80077b8:	4b5b      	ldr	r3, [pc, #364]	@ (8007928 <comunicacion+0x200>)
 80077ba:	2207      	movs	r2, #7
 80077bc:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 80077be:	4b5a      	ldr	r3, [pc, #360]	@ (8007928 <comunicacion+0x200>)
 80077c0:	2209      	movs	r2, #9
 80077c2:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 80077c4:	4b59      	ldr	r3, [pc, #356]	@ (800792c <comunicacion+0x204>)
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	4b57      	ldr	r3, [pc, #348]	@ (8007928 <comunicacion+0x200>)
 80077ca:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 80077cc:	4b58      	ldr	r3, [pc, #352]	@ (8007930 <comunicacion+0x208>)
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	4b55      	ldr	r3, [pc, #340]	@ (8007928 <comunicacion+0x200>)
 80077d2:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 80077d4:	4b54      	ldr	r3, [pc, #336]	@ (8007928 <comunicacion+0x200>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 80077da:	230e      	movs	r3, #14
 80077dc:	18fb      	adds	r3, r7, r3
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e015      	b.n	8007810 <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 80077e4:	4b50      	ldr	r3, [pc, #320]	@ (8007928 <comunicacion+0x200>)
 80077e6:	791a      	ldrb	r2, [r3, #4]
 80077e8:	200e      	movs	r0, #14
 80077ea:	183b      	adds	r3, r7, r0
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	4951      	ldr	r1, [pc, #324]	@ (8007934 <comunicacion+0x20c>)
 80077f0:	5ccb      	ldrb	r3, [r1, r3]
 80077f2:	0019      	movs	r1, r3
 80077f4:	183b      	adds	r3, r7, r0
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	4099      	lsls	r1, r3
 80077fa:	000b      	movs	r3, r1
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4313      	orrs	r3, r2
 8007800:	b2da      	uxtb	r2, r3
 8007802:	4b49      	ldr	r3, [pc, #292]	@ (8007928 <comunicacion+0x200>)
 8007804:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 8007806:	183b      	adds	r3, r7, r0
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	183b      	adds	r3, r7, r0
 800780c:	3201      	adds	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	230e      	movs	r3, #14
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b07      	cmp	r3, #7
 8007818:	d9e4      	bls.n	80077e4 <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 800781a:	4b43      	ldr	r3, [pc, #268]	@ (8007928 <comunicacion+0x200>)
 800781c:	2200      	movs	r2, #0
 800781e:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 8007820:	4b41      	ldr	r3, [pc, #260]	@ (8007928 <comunicacion+0x200>)
 8007822:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2106      	movs	r1, #6
 8007828:	0018      	movs	r0, r3
 800782a:	f7ff fd2b 	bl	8007284 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800782e:	4b3d      	ldr	r3, [pc, #244]	@ (8007924 <comunicacion+0x1fc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	4b3c      	ldr	r3, [pc, #240]	@ (8007928 <comunicacion+0x200>)
 8007836:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 8007838:	4b3a      	ldr	r3, [pc, #232]	@ (8007924 <comunicacion+0x1fc>)
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 800783e:	4b3e      	ldr	r3, [pc, #248]	@ (8007938 <comunicacion+0x210>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d034      	beq.n	80078b0 <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 8007846:	4a3d      	ldr	r2, [pc, #244]	@ (800793c <comunicacion+0x214>)
 8007848:	4834      	ldr	r0, [pc, #208]	@ (800791c <comunicacion+0x1f4>)
 800784a:	2309      	movs	r3, #9
 800784c:	2154      	movs	r1, #84	@ 0x54
 800784e:	f00d f885 	bl	801495c <HAL_I2C_Master_Receive_DMA>
 8007852:	1e03      	subs	r3, r0, #0
 8007854:	d123      	bne.n	800789e <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 8007856:	230d      	movs	r3, #13
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	e015      	b.n	800788c <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8007860:	4b36      	ldr	r3, [pc, #216]	@ (800793c <comunicacion+0x214>)
 8007862:	799b      	ldrb	r3, [r3, #6]
 8007864:	001a      	movs	r2, r3
 8007866:	200d      	movs	r0, #13
 8007868:	183b      	adds	r3, r7, r0
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	411a      	asrs	r2, r3
 800786e:	0013      	movs	r3, r2
 8007870:	2201      	movs	r2, #1
 8007872:	401a      	ands	r2, r3
 8007874:	183b      	adds	r3, r7, r0
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	1e51      	subs	r1, r2, #1
 800787a:	418a      	sbcs	r2, r1
 800787c:	b2d1      	uxtb	r1, r2
 800787e:	4a30      	ldr	r2, [pc, #192]	@ (8007940 <comunicacion+0x218>)
 8007880:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 8007882:	183b      	adds	r3, r7, r0
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	183b      	adds	r3, r7, r0
 8007888:	3201      	adds	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	230d      	movs	r3, #13
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b07      	cmp	r3, #7
 8007894:	d9e4      	bls.n	8007860 <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 8007896:	4b28      	ldr	r3, [pc, #160]	@ (8007938 <comunicacion+0x210>)
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e033      	b.n	8007906 <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 800789e:	4b1f      	ldr	r3, [pc, #124]	@ (800791c <comunicacion+0x1f4>)
 80078a0:	0018      	movs	r0, r3
 80078a2:	f00c ff25 	bl	80146f0 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 80078a6:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <comunicacion+0x1f4>)
 80078a8:	0018      	movs	r0, r3
 80078aa:	f00c fe7b 	bl	80145a4 <HAL_I2C_Init>
 80078ae:	e02a      	b.n	8007906 <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 80078b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007928 <comunicacion+0x200>)
 80078b2:	481a      	ldr	r0, [pc, #104]	@ (800791c <comunicacion+0x1f4>)
 80078b4:	2307      	movs	r3, #7
 80078b6:	2154      	movs	r1, #84	@ 0x54
 80078b8:	f00c ff4a 	bl	8014750 <HAL_I2C_Master_Transmit_DMA>
 80078bc:	1e03      	subs	r3, r0, #0
 80078be:	d103      	bne.n	80078c8 <comunicacion+0x1a0>
					  FlagTx= 1;
 80078c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <comunicacion+0x210>)
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	e01e      	b.n	8007906 <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 80078c8:	4b14      	ldr	r3, [pc, #80]	@ (800791c <comunicacion+0x1f4>)
 80078ca:	0018      	movs	r0, r3
 80078cc:	f00c ff10 	bl	80146f0 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 80078d0:	4b12      	ldr	r3, [pc, #72]	@ (800791c <comunicacion+0x1f4>)
 80078d2:	0018      	movs	r0, r3
 80078d4:	f00c fe66 	bl	80145a4 <HAL_I2C_Init>
 80078d8:	e015      	b.n	8007906 <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 80078da:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <comunicacion+0x1f8>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	3301      	adds	r3, #1
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <comunicacion+0x1f8>)
 80078e4:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 80078e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007920 <comunicacion+0x1f8>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <comunicacion+0x1f4>)
 80078f0:	0018      	movs	r0, r3
 80078f2:	f00c fefd 	bl	80146f0 <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <comunicacion+0x1f4>)
 80078f8:	0018      	movs	r0, r3
 80078fa:	f00c fe53 	bl	80145a4 <HAL_I2C_Init>
 80078fe:	e002      	b.n	8007906 <comunicacion+0x1de>
		goto fin_comu;
 8007900:	46c0      	nop			@ (mov r8, r8)
 8007902:	e000      	b.n	8007906 <comunicacion+0x1de>
				}
			}
fin_comu:
 8007904:	46c0      	nop			@ (mov r8, r8)
	detecta();
 8007906:	f000 f81d 	bl	8007944 <detecta>


}
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	46bd      	mov	sp, r7
 800790e:	b004      	add	sp, #16
 8007910:	bd80      	pop	{r7, pc}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	20000c88 	.word	0x20000c88
 8007918:	20000b68 	.word	0x20000b68
 800791c:	2000044c 	.word	0x2000044c
 8007920:	20001152 	.word	0x20001152
 8007924:	20000ed0 	.word	0x20000ed0
 8007928:	20000004 	.word	0x20000004
 800792c:	20000c89 	.word	0x20000c89
 8007930:	20000c8a 	.word	0x20000c8a
 8007934:	20000c8c 	.word	0x20000c8c
 8007938:	200003da 	.word	0x200003da
 800793c:	200003dc 	.word	0x200003dc
 8007940:	20000c94 	.word	0x20000c94

08007944 <detecta>:

void detecta(void){
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 800794a:	4bb0      	ldr	r3, [pc, #704]	@ (8007c0c <detecta+0x2c8>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <detecta+0x12>
 8007952:	f000 fc2f 	bl	80081b4 <detecta+0x870>
		goto dete03;
 8007956:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 8007958:	4bad      	ldr	r3, [pc, #692]	@ (8007c10 <detecta+0x2cc>)
 800795a:	225b      	movs	r2, #91	@ 0x5b
 800795c:	5c9b      	ldrb	r3, [r3, r2]
 800795e:	001a      	movs	r2, r3
 8007960:	2301      	movs	r3, #1
 8007962:	4013      	ands	r3, r2
 8007964:	d004      	beq.n	8007970 <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 8007966:	f7ff fb7b 	bl	8007060 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 800796a:	f7ff fb95 	bl	8007098 <load_tiempoAhorro2>
	goto closedoor_b;
 800796e:	e1cc      	b.n	8007d0a <detecta+0x3c6>
		goto detectaPuerta;
 8007970:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 8007972:	4ba7      	ldr	r3, [pc, #668]	@ (8007c10 <detecta+0x2cc>)
 8007974:	2253      	movs	r2, #83	@ 0x53
 8007976:	5c9b      	ldrb	r3, [r3, r2]
 8007978:	001a      	movs	r2, r3
 800797a:	2308      	movs	r3, #8
 800797c:	4013      	ands	r3, r2
 800797e:	d045      	beq.n	8007a0c <detecta+0xc8>
		goto detecta_j01;
 8007980:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 8007982:	1dfb      	adds	r3, r7, #7
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e03a      	b.n	8007a00 <detecta+0xbc>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 800798a:	1dfb      	adds	r3, r7, #7
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	4ba1      	ldr	r3, [pc, #644]	@ (8007c14 <detecta+0x2d0>)
 8007990:	0092      	lsls	r2, r2, #2
 8007992:	58d0      	ldr	r0, [r2, r3]
 8007994:	1dfb      	adds	r3, r7, #7
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4a9f      	ldr	r2, [pc, #636]	@ (8007c18 <detecta+0x2d4>)
 800799a:	5cd3      	ldrb	r3, [r2, r3]
 800799c:	2201      	movs	r2, #1
 800799e:	0019      	movs	r1, r3
 80079a0:	f00c fd89 	bl	80144b6 <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 80079a4:	1dbb      	adds	r3, r7, #6
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	e013      	b.n	80079d4 <detecta+0x90>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 80079ac:	1dbb      	adds	r3, r7, #6
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	4b98      	ldr	r3, [pc, #608]	@ (8007c14 <detecta+0x2d0>)
 80079b2:	0092      	lsls	r2, r2, #2
 80079b4:	58d0      	ldr	r0, [r2, r3]
 80079b6:	1dbb      	adds	r3, r7, #6
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	4a97      	ldr	r2, [pc, #604]	@ (8007c18 <detecta+0x2d4>)
 80079bc:	5cd3      	ldrb	r3, [r2, r3]
 80079be:	0019      	movs	r1, r3
 80079c0:	f00c fd5c 	bl	801447c <HAL_GPIO_ReadPin>
 80079c4:	1e03      	subs	r3, r0, #0
 80079c6:	d100      	bne.n	80079ca <detecta+0x86>
 80079c8:	e1cb      	b.n	8007d62 <detecta+0x41e>
		for(uint8_t Px = 0; Px < 5; Px++){
 80079ca:	1dbb      	adds	r3, r7, #6
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	1dbb      	adds	r3, r7, #6
 80079d0:	3201      	adds	r2, #1
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	1dbb      	adds	r3, r7, #6
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d9e7      	bls.n	80079ac <detecta+0x68>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 80079dc:	1dfb      	adds	r3, r7, #7
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	4b8c      	ldr	r3, [pc, #560]	@ (8007c14 <detecta+0x2d0>)
 80079e2:	0092      	lsls	r2, r2, #2
 80079e4:	58d0      	ldr	r0, [r2, r3]
 80079e6:	1dfb      	adds	r3, r7, #7
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	4a8b      	ldr	r2, [pc, #556]	@ (8007c18 <detecta+0x2d4>)
 80079ec:	5cd3      	ldrb	r3, [r2, r3]
 80079ee:	2200      	movs	r2, #0
 80079f0:	0019      	movs	r1, r3
 80079f2:	f00c fd60 	bl	80144b6 <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 80079f6:	1dfb      	adds	r3, r7, #7
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	3201      	adds	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	1dfb      	adds	r3, r7, #7
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d9c0      	bls.n	800798a <detecta+0x46>
	}
	goto detecta_j02;
 8007a08:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 8007a0a:	e174      	b.n	8007cf6 <detecta+0x3b2>
	goto switch_no;
 8007a0c:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 8007a0e:	4b83      	ldr	r3, [pc, #524]	@ (8007c1c <detecta+0x2d8>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	425a      	negs	r2, r3
 8007a14:	4153      	adcs	r3, r2
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	001a      	movs	r2, r3
 8007a1a:	4b81      	ldr	r3, [pc, #516]	@ (8007c20 <detecta+0x2dc>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	d022      	beq.n	8007a68 <detecta+0x124>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8007a22:	4b80      	ldr	r3, [pc, #512]	@ (8007c24 <detecta+0x2e0>)
 8007a24:	6858      	ldr	r0, [r3, #4]
 8007a26:	4b80      	ldr	r3, [pc, #512]	@ (8007c28 <detecta+0x2e4>)
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	0019      	movs	r1, r3
 8007a2e:	f00c fd42 	bl	80144b6 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8007a32:	200a      	movs	r0, #10
 8007a34:	f00a f988 	bl	8011d48 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 8007a38:	4b76      	ldr	r3, [pc, #472]	@ (8007c14 <detecta+0x2d0>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b76      	ldr	r3, [pc, #472]	@ (8007c18 <detecta+0x2d4>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	0019      	movs	r1, r3
 8007a42:	0010      	movs	r0, r2
 8007a44:	f00c fd1a 	bl	801447c <HAL_GPIO_ReadPin>
 8007a48:	1e03      	subs	r3, r0, #0
 8007a4a:	d002      	beq.n	8007a52 <detecta+0x10e>
			FlagPuertaX[4] = 1;// Puerta Abierta
 8007a4c:	4b77      	ldr	r3, [pc, #476]	@ (8007c2c <detecta+0x2e8>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8007a52:	4b74      	ldr	r3, [pc, #464]	@ (8007c24 <detecta+0x2e0>)
 8007a54:	6858      	ldr	r0, [r3, #4]
 8007a56:	4b74      	ldr	r3, [pc, #464]	@ (8007c28 <detecta+0x2e4>)
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	0019      	movs	r1, r3
 8007a5e:	f00c fd2a 	bl	80144b6 <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 8007a62:	4b6f      	ldr	r3, [pc, #444]	@ (8007c20 <detecta+0x2dc>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 8007a68:	4b6c      	ldr	r3, [pc, #432]	@ (8007c1c <detecta+0x2d8>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d000      	beq.n	8007a72 <detecta+0x12e>
 8007a70:	e083      	b.n	8007b7a <detecta+0x236>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007a72:	1d7b      	adds	r3, r7, #5
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e048      	b.n	8007b0c <detecta+0x1c8>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007a7a:	1d7b      	adds	r3, r7, #5
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	4b65      	ldr	r3, [pc, #404]	@ (8007c14 <detecta+0x2d0>)
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	58d0      	ldr	r0, [r2, r3]
 8007a84:	1d7b      	adds	r3, r7, #5
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	4a63      	ldr	r2, [pc, #396]	@ (8007c18 <detecta+0x2d4>)
 8007a8a:	5cd3      	ldrb	r3, [r2, r3]
 8007a8c:	0019      	movs	r1, r3
 8007a8e:	f00c fcf5 	bl	801447c <HAL_GPIO_ReadPin>
 8007a92:	1e03      	subs	r3, r0, #0
 8007a94:	d00f      	beq.n	8007ab6 <detecta+0x172>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 8007a96:	4b66      	ldr	r3, [pc, #408]	@ (8007c30 <detecta+0x2ec>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	0013      	movs	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	189a      	adds	r2, r3, r2
 8007aa2:	1d7b      	adds	r3, r7, #5
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	18d3      	adds	r3, r2, r3
 8007aa8:	4a62      	ldr	r2, [pc, #392]	@ (8007c34 <detecta+0x2f0>)
 8007aaa:	5cd2      	ldrb	r2, [r2, r3]
 8007aac:	3201      	adds	r2, #1
 8007aae:	b2d1      	uxtb	r1, r2
 8007ab0:	4a60      	ldr	r2, [pc, #384]	@ (8007c34 <detecta+0x2f0>)
 8007ab2:	54d1      	strb	r1, [r2, r3]
 8007ab4:	e025      	b.n	8007b02 <detecta+0x1be>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007ab6:	1d7b      	adds	r3, r7, #5
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	4b56      	ldr	r3, [pc, #344]	@ (8007c14 <detecta+0x2d0>)
 8007abc:	0092      	lsls	r2, r2, #2
 8007abe:	58d0      	ldr	r0, [r2, r3]
 8007ac0:	1d7b      	adds	r3, r7, #5
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	4a54      	ldr	r2, [pc, #336]	@ (8007c18 <detecta+0x2d4>)
 8007ac6:	5cd3      	ldrb	r3, [r2, r3]
 8007ac8:	0019      	movs	r1, r3
 8007aca:	f00c fcd7 	bl	801447c <HAL_GPIO_ReadPin>
 8007ace:	1e03      	subs	r3, r0, #0
 8007ad0:	d117      	bne.n	8007b02 <detecta+0x1be>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 8007ad2:	4b57      	ldr	r3, [pc, #348]	@ (8007c30 <detecta+0x2ec>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	0013      	movs	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	189a      	adds	r2, r3, r2
 8007ade:	1d7b      	adds	r3, r7, #5
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	18d3      	adds	r3, r2, r3
 8007ae4:	4a51      	ldr	r2, [pc, #324]	@ (8007c2c <detecta+0x2e8>)
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 8007aea:	4b51      	ldr	r3, [pc, #324]	@ (8007c30 <detecta+0x2ec>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	001a      	movs	r2, r3
 8007af0:	0013      	movs	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	189a      	adds	r2, r3, r2
 8007af6:	1d7b      	adds	r3, r7, #5
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	4a4d      	ldr	r2, [pc, #308]	@ (8007c34 <detecta+0x2f0>)
 8007afe:	2100      	movs	r1, #0
 8007b00:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 8007b02:	1d7b      	adds	r3, r7, #5
 8007b04:	781a      	ldrb	r2, [r3, #0]
 8007b06:	1d7b      	adds	r3, r7, #5
 8007b08:	3201      	adds	r2, #1
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	1d7b      	adds	r3, r7, #5
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d9b2      	bls.n	8007a7a <detecta+0x136>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 8007b14:	4b46      	ldr	r3, [pc, #280]	@ (8007c30 <detecta+0x2ec>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	001a      	movs	r2, r3
 8007b1a:	4b42      	ldr	r3, [pc, #264]	@ (8007c24 <detecta+0x2e0>)
 8007b1c:	0092      	lsls	r2, r2, #2
 8007b1e:	58d0      	ldr	r0, [r2, r3]
 8007b20:	4b43      	ldr	r3, [pc, #268]	@ (8007c30 <detecta+0x2ec>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	001a      	movs	r2, r3
 8007b26:	4b40      	ldr	r3, [pc, #256]	@ (8007c28 <detecta+0x2e4>)
 8007b28:	5c9b      	ldrb	r3, [r3, r2]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	0019      	movs	r1, r3
 8007b2e:	f00c fcc2 	bl	80144b6 <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 8007b32:	4b3f      	ldr	r3, [pc, #252]	@ (8007c30 <detecta+0x2ec>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d805      	bhi.n	8007b46 <detecta+0x202>
			countMPx++;
 8007b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c30 <detecta+0x2ec>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	4b3b      	ldr	r3, [pc, #236]	@ (8007c30 <detecta+0x2ec>)
 8007b44:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 8007b46:	4b3a      	ldr	r3, [pc, #232]	@ (8007c30 <detecta+0x2ec>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d102      	bne.n	8007b54 <detecta+0x210>
			countMPx = 0;
 8007b4e:	4b38      	ldr	r3, [pc, #224]	@ (8007c30 <detecta+0x2ec>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 8007b54:	4b36      	ldr	r3, [pc, #216]	@ (8007c30 <detecta+0x2ec>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	001a      	movs	r2, r3
 8007b5a:	4b32      	ldr	r3, [pc, #200]	@ (8007c24 <detecta+0x2e0>)
 8007b5c:	0092      	lsls	r2, r2, #2
 8007b5e:	58d0      	ldr	r0, [r2, r3]
 8007b60:	4b33      	ldr	r3, [pc, #204]	@ (8007c30 <detecta+0x2ec>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	001a      	movs	r2, r3
 8007b66:	4b30      	ldr	r3, [pc, #192]	@ (8007c28 <detecta+0x2e4>)
 8007b68:	5c9b      	ldrb	r3, [r3, r2]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	0019      	movs	r1, r3
 8007b6e:	f00c fca2 	bl	80144b6 <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 8007b72:	4b2a      	ldr	r3, [pc, #168]	@ (8007c1c <detecta+0x2d8>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	e009      	b.n	8007b8e <detecta+0x24a>
	}else if(countWaitPuerta < 10){
 8007b7a:	4b28      	ldr	r3, [pc, #160]	@ (8007c1c <detecta+0x2d8>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b09      	cmp	r3, #9
 8007b80:	d805      	bhi.n	8007b8e <detecta+0x24a>
		countWaitPuerta++;
 8007b82:	4b26      	ldr	r3, [pc, #152]	@ (8007c1c <detecta+0x2d8>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	3301      	adds	r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b24      	ldr	r3, [pc, #144]	@ (8007c1c <detecta+0x2d8>)
 8007b8c:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	2200      	movs	r2, #0
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e0a5      	b.n	8007ce2 <detecta+0x39e>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007b96:	1cfb      	adds	r3, r7, #3
 8007b98:	2200      	movs	r2, #0
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e097      	b.n	8007cce <detecta+0x38a>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 8007b9e:	1d3b      	adds	r3, r7, #4
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	0013      	movs	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	189a      	adds	r2, r3, r2
 8007ba8:	1cfb      	adds	r3, r7, #3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	4a21      	ldr	r2, [pc, #132]	@ (8007c34 <detecta+0x2f0>)
 8007bb0:	5cd3      	ldrb	r3, [r2, r3]
 8007bb2:	1e5a      	subs	r2, r3, #1
 8007bb4:	4193      	sbcs	r3, r2
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	4b18      	ldr	r3, [pc, #96]	@ (8007c1c <detecta+0x2d8>)
 8007bba:	7819      	ldrb	r1, [r3, #0]
 8007bbc:	2009      	movs	r0, #9
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4288      	cmp	r0, r1
 8007bc2:	415b      	adcs	r3, r3
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d100      	bne.n	8007bd0 <detecta+0x28c>
 8007bce:	e079      	b.n	8007cc4 <detecta+0x380>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007bd0:	1cfb      	adds	r3, r7, #3
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007c14 <detecta+0x2d0>)
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	58d0      	ldr	r0, [r2, r3]
 8007bda:	1cfb      	adds	r3, r7, #3
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	4a0e      	ldr	r2, [pc, #56]	@ (8007c18 <detecta+0x2d4>)
 8007be0:	5cd3      	ldrb	r3, [r2, r3]
 8007be2:	0019      	movs	r1, r3
 8007be4:	f00c fc4a 	bl	801447c <HAL_GPIO_ReadPin>
 8007be8:	1e03      	subs	r3, r0, #0
 8007bea:	d025      	beq.n	8007c38 <detecta+0x2f4>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 8007bec:	1d3b      	adds	r3, r7, #4
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	0013      	movs	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	189a      	adds	r2, r3, r2
 8007bf6:	1cfb      	adds	r3, r7, #3
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	18d3      	adds	r3, r2, r3
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c34 <detecta+0x2f0>)
 8007bfe:	5cd2      	ldrb	r2, [r2, r3]
 8007c00:	3201      	adds	r2, #1
 8007c02:	b2d1      	uxtb	r1, r2
 8007c04:	4a0b      	ldr	r2, [pc, #44]	@ (8007c34 <detecta+0x2f0>)
 8007c06:	54d1      	strb	r1, [r2, r3]
 8007c08:	e03a      	b.n	8007c80 <detecta+0x33c>
 8007c0a:	46c0      	nop			@ (mov r8, r8)
 8007c0c:	20000ba8 	.word	0x20000ba8
 8007c10:	200000b8 	.word	0x200000b8
 8007c14:	200001f4 	.word	0x200001f4
 8007c18:	20000208 	.word	0x20000208
 8007c1c:	2000117c 	.word	0x2000117c
 8007c20:	20000224 	.word	0x20000224
 8007c24:	20000210 	.word	0x20000210
 8007c28:	20000220 	.word	0x20000220
 8007c2c:	20001154 	.word	0x20001154
 8007c30:	2000117d 	.word	0x2000117d
 8007c34:	20001168 	.word	0x20001168
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007c38:	1cfb      	adds	r3, r7, #3
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	4bcc      	ldr	r3, [pc, #816]	@ (8007f70 <detecta+0x62c>)
 8007c3e:	0092      	lsls	r2, r2, #2
 8007c40:	58d0      	ldr	r0, [r2, r3]
 8007c42:	1cfb      	adds	r3, r7, #3
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	4acb      	ldr	r2, [pc, #812]	@ (8007f74 <detecta+0x630>)
 8007c48:	5cd3      	ldrb	r3, [r2, r3]
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	f00c fc16 	bl	801447c <HAL_GPIO_ReadPin>
 8007c50:	1e03      	subs	r3, r0, #0
 8007c52:	d115      	bne.n	8007c80 <detecta+0x33c>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 8007c54:	1d3b      	adds	r3, r7, #4
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	0013      	movs	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	189a      	adds	r2, r3, r2
 8007c5e:	1cfb      	adds	r3, r7, #3
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	18d3      	adds	r3, r2, r3
 8007c64:	4ac4      	ldr	r2, [pc, #784]	@ (8007f78 <detecta+0x634>)
 8007c66:	2100      	movs	r1, #0
 8007c68:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007c6a:	1d3b      	adds	r3, r7, #4
 8007c6c:	781a      	ldrb	r2, [r3, #0]
 8007c6e:	0013      	movs	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	189a      	adds	r2, r3, r2
 8007c74:	1cfb      	adds	r3, r7, #3
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	18d3      	adds	r3, r2, r3
 8007c7a:	4ac0      	ldr	r2, [pc, #768]	@ (8007f7c <detecta+0x638>)
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 8007c80:	1d3b      	adds	r3, r7, #4
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	0013      	movs	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	189a      	adds	r2, r3, r2
 8007c8a:	1cfb      	adds	r3, r7, #3
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	18d3      	adds	r3, r2, r3
 8007c90:	4aba      	ldr	r2, [pc, #744]	@ (8007f7c <detecta+0x638>)
 8007c92:	5cd3      	ldrb	r3, [r2, r3]
 8007c94:	2b0a      	cmp	r3, #10
 8007c96:	d115      	bne.n	8007cc4 <detecta+0x380>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	0013      	movs	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	189a      	adds	r2, r3, r2
 8007ca2:	1cfb      	adds	r3, r7, #3
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	18d3      	adds	r3, r2, r3
 8007ca8:	4ab3      	ldr	r2, [pc, #716]	@ (8007f78 <detecta+0x634>)
 8007caa:	2101      	movs	r1, #1
 8007cac:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	781a      	ldrb	r2, [r3, #0]
 8007cb2:	0013      	movs	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	189a      	adds	r2, r3, r2
 8007cb8:	1cfb      	adds	r3, r7, #3
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	18d3      	adds	r3, r2, r3
 8007cbe:	4aaf      	ldr	r2, [pc, #700]	@ (8007f7c <detecta+0x638>)
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007cc4:	1cfb      	adds	r3, r7, #3
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	1cfb      	adds	r3, r7, #3
 8007cca:	3201      	adds	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	1cfb      	adds	r3, r7, #3
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d800      	bhi.n	8007cd8 <detecta+0x394>
 8007cd6:	e762      	b.n	8007b9e <detecta+0x25a>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007cd8:	1d3b      	adds	r3, r7, #4
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	1d3b      	adds	r3, r7, #4
 8007cde:	3201      	adds	r2, #1
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	1d3b      	adds	r3, r7, #4
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d800      	bhi.n	8007cec <detecta+0x3a8>
 8007cea:	e754      	b.n	8007b96 <detecta+0x252>
			}
		}
	}


	if(FlagPuertaX[4]){
 8007cec:	4ba2      	ldr	r3, [pc, #648]	@ (8007f78 <detecta+0x634>)
 8007cee:	791b      	ldrb	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d138      	bne.n	8007d66 <detecta+0x422>
		goto opendoor;
	}
	goto detecta_j03;
 8007cf4:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 8007cf6:	4ba2      	ldr	r3, [pc, #648]	@ (8007f80 <detecta+0x63c>)
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f7ff fb62 	bl	80073c2 <decwreg>
	if(debdoor == 0){
 8007cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8007f80 <detecta+0x63c>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d000      	beq.n	8007d08 <detecta+0x3c4>
 8007d06:	e0a2      	b.n	8007e4e <detecta+0x50a>
		goto closedoor_b;
 8007d08:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 8007d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8007f84 <detecta+0x640>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 8007d10:	4b9d      	ldr	r3, [pc, #628]	@ (8007f88 <detecta+0x644>)
 8007d12:	2248      	movs	r2, #72	@ 0x48
 8007d14:	5c9a      	ldrb	r2, [r3, r2]
 8007d16:	4b9d      	ldr	r3, [pc, #628]	@ (8007f8c <detecta+0x648>)
 8007d18:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 8007d1a:	4b9d      	ldr	r3, [pc, #628]	@ (8007f90 <detecta+0x64c>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 8007d20:	f7fe fbe6 	bl	80064f0 <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 8007d24:	4b9b      	ldr	r3, [pc, #620]	@ (8007f94 <detecta+0x650>)
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d100      	bne.n	8007d2e <detecta+0x3ea>
 8007d2c:	e091      	b.n	8007e52 <detecta+0x50e>
		goto detecta_j04;
 8007d2e:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 8007d30:	4b98      	ldr	r3, [pc, #608]	@ (8007f94 <detecta+0x650>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 8007d36:	4b97      	ldr	r3, [pc, #604]	@ (8007f94 <detecta+0x650>)
 8007d38:	78db      	ldrb	r3, [r3, #3]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4053      	eors	r3, r2
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d100      	bne.n	8007d46 <detecta+0x402>
 8007d44:	e087      	b.n	8007e56 <detecta+0x512>
		goto det_j04;
 8007d46:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 8007d48:	f7ff f9c2 	bl	80070d0 <load_timeNoct>
	durdhh=0;
 8007d4c:	4b92      	ldr	r3, [pc, #584]	@ (8007f98 <detecta+0x654>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	801a      	strh	r2, [r3, #0]
	//durdhl=0;
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 8007d52:	4b90      	ldr	r3, [pc, #576]	@ (8007f94 <detecta+0x650>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 8007d58:	4b90      	ldr	r3, [pc, #576]	@ (8007f9c <detecta+0x658>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8007d5e:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 8007d60:	e05e      	b.n	8007e20 <detecta+0x4dc>
				goto opendoor;
 8007d62:	46c0      	nop			@ (mov r8, r8)
 8007d64:	e000      	b.n	8007d68 <detecta+0x424>
		goto opendoor;
 8007d66:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 8007d68:	4b85      	ldr	r3, [pc, #532]	@ (8007f80 <detecta+0x63c>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b25b      	sxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	db06      	blt.n	8007d80 <detecta+0x43c>
	debdoor++;
 8007d72:	4b83      	ldr	r3, [pc, #524]	@ (8007f80 <detecta+0x63c>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	4b81      	ldr	r3, [pc, #516]	@ (8007f80 <detecta+0x63c>)
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e000      	b.n	8007d82 <detecta+0x43e>
		goto noinc;
 8007d80:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 8007d82:	4b7f      	ldr	r3, [pc, #508]	@ (8007f80 <detecta+0x63c>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b25b      	sxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	da29      	bge.n	8007de0 <detecta+0x49c>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 8007d8c:	4b7d      	ldr	r3, [pc, #500]	@ (8007f84 <detecta+0x640>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 8007d92:	4b83      	ldr	r3, [pc, #524]	@ (8007fa0 <detecta+0x65c>)
 8007d94:	2205      	movs	r2, #5
 8007d96:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 8007d98:	4b7b      	ldr	r3, [pc, #492]	@ (8007f88 <detecta+0x644>)
 8007d9a:	224f      	movs	r2, #79	@ 0x4f
 8007d9c:	5c9a      	ldrb	r2, [r3, r2]
 8007d9e:	4b81      	ldr	r3, [pc, #516]	@ (8007fa4 <detecta+0x660>)
 8007da0:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 8007da2:	4b81      	ldr	r3, [pc, #516]	@ (8007fa8 <detecta+0x664>)
 8007da4:	2205      	movs	r2, #5
 8007da6:	701a      	strb	r2, [r3, #0]
	if(reePlantilla[eetimepaf]!= 0){
 8007da8:	4b80      	ldr	r3, [pc, #512]	@ (8007fac <detecta+0x668>)
 8007daa:	2248      	movs	r2, #72	@ 0x48
 8007dac:	5c9b      	ldrb	r3, [r3, r2]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <detecta+0x476>
	cnt_pta_fan=99;
 8007db2:	4b76      	ldr	r3, [pc, #472]	@ (8007f8c <detecta+0x648>)
 8007db4:	2263      	movs	r2, #99	@ 0x63
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e000      	b.n	8007dbc <detecta+0x478>
		goto no_ld_timepaf;
 8007dba:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8007dbc:	4b75      	ldr	r3, [pc, #468]	@ (8007f94 <detecta+0x650>)
 8007dbe:	78db      	ldrb	r3, [r3, #3]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00f      	beq.n	8007de4 <detecta+0x4a0>
		goto detecta_j05;
 8007dc4:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 8007dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8007fb0 <detecta+0x66c>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 8007dcc:	4b71      	ldr	r3, [pc, #452]	@ (8007f94 <detecta+0x650>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 8007dd2:	4b72      	ldr	r3, [pc, #456]	@ (8007f9c <detecta+0x658>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 8007dd8:	4b76      	ldr	r3, [pc, #472]	@ (8007fb4 <detecta+0x670>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 8007dde:	e01f      	b.n	8007e20 <detecta+0x4dc>
		goto revnocman;
 8007de0:	46c0      	nop			@ (mov r8, r8)
 8007de2:	e000      	b.n	8007de6 <detecta+0x4a2>
	goto revnocman;
 8007de4:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 8007de6:	4b74      	ldr	r3, [pc, #464]	@ (8007fb8 <detecta+0x674>)
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d113      	bne.n	8007e16 <detecta+0x4d2>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 8007dee:	4b67      	ldr	r3, [pc, #412]	@ (8007f8c <detecta+0x648>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <detecta+0x4c4>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 8007df6:	4b64      	ldr	r3, [pc, #400]	@ (8007f88 <detecta+0x644>)
 8007df8:	2249      	movs	r2, #73	@ 0x49
 8007dfa:	5c9b      	ldrb	r3, [r3, r2]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <detecta+0x4c8>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 8007e00:	4b63      	ldr	r3, [pc, #396]	@ (8007f90 <detecta+0x64c>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 8007e06:	e00b      	b.n	8007e20 <detecta+0x4dc>
		goto cancelAlarmPA;
 8007e08:	46c0      	nop			@ (mov r8, r8)
 8007e0a:	e000      	b.n	8007e0e <detecta+0x4ca>
		goto cancelAlarmPA;
 8007e0c:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 8007e0e:	4b60      	ldr	r3, [pc, #384]	@ (8007f90 <detecta+0x64c>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	711a      	strb	r2, [r3, #4]
 8007e14:	e004      	b.n	8007e20 <detecta+0x4dc>
		goto ahorro_off;
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	e002      	b.n	8007e20 <detecta+0x4dc>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 8007e1a:	46c0      	nop			@ (mov r8, r8)
 8007e1c:	e000      	b.n	8007e20 <detecta+0x4dc>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 8007e1e:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 8007e20:	4b58      	ldr	r3, [pc, #352]	@ (8007f84 <detecta+0x640>)
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2201      	movs	r2, #1
 8007e26:	4053      	eors	r3, r2
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <detecta+0x4f2>
	cntdpysp=0xF0;
 8007e2e:	4b63      	ldr	r3, [pc, #396]	@ (8007fbc <detecta+0x678>)
 8007e30:	22f0      	movs	r2, #240	@ 0xf0
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e000      	b.n	8007e38 <detecta+0x4f4>
		goto ahorro_off_00;
 8007e36:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 8007e38:	4b52      	ldr	r3, [pc, #328]	@ (8007f84 <detecta+0x640>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 8007e3e:	4b51      	ldr	r3, [pc, #324]	@ (8007f84 <detecta+0x640>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 8007e44:	f7ff f90c 	bl	8007060 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007e48:	f7ff f926 	bl	8007098 <load_tiempoAhorro2>
	goto fin_detecta;
 8007e4c:	e047      	b.n	8007ede <detecta+0x59a>
		goto revbotones;
 8007e4e:	46c0      	nop			@ (mov r8, r8)
 8007e50:	e002      	b.n	8007e58 <detecta+0x514>
	goto revbotones;
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	e000      	b.n	8007e58 <detecta+0x514>
	goto revbotones;
 8007e56:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 8007e58:	4b4a      	ldr	r3, [pc, #296]	@ (8007f84 <detecta+0x640>)
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10c      	bne.n	8007e7a <detecta+0x536>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8007e60:	f7fe fb10 	bl	8006484 <tdev_to_Word>
 8007e64:	0003      	movs	r3, r0
 8007e66:	b21c      	sxth	r4, r3
 8007e68:	4b55      	ldr	r3, [pc, #340]	@ (8007fc0 <detecta+0x67c>)
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f7fe fb22 	bl	80064b4 <TwoByteInArrayToWord>
 8007e70:	0003      	movs	r3, r0
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	429c      	cmp	r4, r3
 8007e76:	dad0      	bge.n	8007e1a <detecta+0x4d6>
ask_ahorro:
 8007e78:	e000      	b.n	8007e7c <detecta+0x538>
		goto ask_ahorro;
 8007e7a:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 8007e7c:	4b41      	ldr	r3, [pc, #260]	@ (8007f84 <detecta+0x640>)
 8007e7e:	79db      	ldrb	r3, [r3, #7]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0cc      	beq.n	8007e1e <detecta+0x4da>
		goto ask_time_ahorro;
 8007e84:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8007e86:	4b4f      	ldr	r3, [pc, #316]	@ (8007fc4 <detecta+0x680>)
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <detecta+0x55c>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8007e8e:	f7ff f903 	bl	8007098 <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8007e92:	4b3c      	ldr	r3, [pc, #240]	@ (8007f84 <detecta+0x640>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8007e98:	4b3a      	ldr	r3, [pc, #232]	@ (8007f84 <detecta+0x640>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8007e9e:	e01e      	b.n	8007ede <detecta+0x59a>
		goto modoAhorro1_ON;
 8007ea0:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8007ea2:	4b38      	ldr	r3, [pc, #224]	@ (8007f84 <detecta+0x640>)
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <detecta+0x56e>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8007eaa:	4b44      	ldr	r3, [pc, #272]	@ (8007fbc <detecta+0x678>)
 8007eac:	22f0      	movs	r2, #240	@ 0xf0
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e000      	b.n	8007eb4 <detecta+0x570>
		goto modoAhorro1_ON_2;
 8007eb2:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8007eb4:	4b33      	ldr	r3, [pc, #204]	@ (8007f84 <detecta+0x640>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8007eba:	4b43      	ldr	r3, [pc, #268]	@ (8007fc8 <detecta+0x684>)
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10c      	bne.n	8007edc <detecta+0x598>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8007ec2:	4b30      	ldr	r3, [pc, #192]	@ (8007f84 <detecta+0x640>)
 8007ec4:	789b      	ldrb	r3, [r3, #2]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <detecta+0x58e>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8007eca:	4b3c      	ldr	r3, [pc, #240]	@ (8007fbc <detecta+0x678>)
 8007ecc:	22f0      	movs	r2, #240	@ 0xf0
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e000      	b.n	8007ed4 <detecta+0x590>
		goto modoAhorro1_ON_3;
 8007ed2:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8007f84 <detecta+0x640>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	709a      	strb	r2, [r3, #2]
 8007eda:	e000      	b.n	8007ede <detecta+0x59a>
		goto fin_detecta;
 8007edc:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8007ede:	1cbb      	adds	r3, r7, #2
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	e013      	b.n	8007f0e <detecta+0x5ca>
		btn_pr[k] = 0;
 8007ee6:	1cbb      	adds	r3, r7, #2
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	4a38      	ldr	r2, [pc, #224]	@ (8007fcc <detecta+0x688>)
 8007eec:	2100      	movs	r1, #0
 8007eee:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007ef0:	1cbb      	adds	r3, r7, #2
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	4a36      	ldr	r2, [pc, #216]	@ (8007fd0 <detecta+0x68c>)
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8007efa:	1cbb      	adds	r3, r7, #2
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4a35      	ldr	r2, [pc, #212]	@ (8007fd4 <detecta+0x690>)
 8007f00:	2100      	movs	r1, #0
 8007f02:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007f04:	1cbb      	adds	r3, r7, #2
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	1cbb      	adds	r3, r7, #2
 8007f0a:	3201      	adds	r2, #1
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	1cbb      	adds	r3, r7, #2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b07      	cmp	r3, #7
 8007f14:	d9e7      	bls.n	8007ee6 <detecta+0x5a2>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8007f16:	4b26      	ldr	r3, [pc, #152]	@ (8007fb0 <detecta+0x66c>)
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d117      	bne.n	8007f4e <detecta+0x60a>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8007f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8007fd8 <detecta+0x694>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2201      	movs	r2, #1
 8007f24:	4053      	eors	r3, r2
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d112      	bne.n	8007f52 <detecta+0x60e>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8007f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8007fd8 <detecta+0x694>)
 8007f2e:	789b      	ldrb	r3, [r3, #2]
 8007f30:	2201      	movs	r2, #1
 8007f32:	4053      	eors	r3, r2
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <detecta+0x612>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8007f3a:	4b28      	ldr	r3, [pc, #160]	@ (8007fdc <detecta+0x698>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <detecta+0x606>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8007f42:	4b24      	ldr	r3, [pc, #144]	@ (8007fd4 <detecta+0x690>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8007f48:	e13d      	b.n	80081c6 <detecta+0x882>
		goto findet_jp;
 8007f4a:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8007f4c:	e13b      	b.n	80081c6 <detecta+0x882>
		goto no2btn;
 8007f4e:	46c0      	nop			@ (mov r8, r8)
 8007f50:	e002      	b.n	8007f58 <detecta+0x614>
		goto no2btn;
 8007f52:	46c0      	nop			@ (mov r8, r8)
 8007f54:	e000      	b.n	8007f58 <detecta+0x614>
		goto no2btn;
 8007f56:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8007f58:	4b20      	ldr	r3, [pc, #128]	@ (8007fdc <detecta+0x698>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b95      	cmp	r3, #149	@ 0x95
 8007f5e:	d83f      	bhi.n	8007fe0 <detecta+0x69c>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8007f60:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <detecta+0x698>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	3303      	adds	r3, #3
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	4b1c      	ldr	r3, [pc, #112]	@ (8007fdc <detecta+0x698>)
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e039      	b.n	8007fe2 <detecta+0x69e>
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	200001f4 	.word	0x200001f4
 8007f74:	20000208 	.word	0x20000208
 8007f78:	20001154 	.word	0x20001154
 8007f7c:	20001168 	.word	0x20001168
 8007f80:	20000bd1 	.word	0x20000bd1
 8007f84:	20000c4c 	.word	0x20000c4c
 8007f88:	200000b8 	.word	0x200000b8
 8007f8c:	20000c37 	.word	0x20000c37
 8007f90:	20000b98 	.word	0x20000b98
 8007f94:	20000b88 	.word	0x20000b88
 8007f98:	20000bc8 	.word	0x20000bc8
 8007f9c:	20000ba0 	.word	0x20000ba0
 8007fa0:	20001102 	.word	0x20001102
 8007fa4:	2000114c 	.word	0x2000114c
 8007fa8:	20000b7a 	.word	0x20000b7a
 8007fac:	20000c9c 	.word	0x20000c9c
 8007fb0:	20000bf8 	.word	0x20000bf8
 8007fb4:	20000c54 	.word	0x20000c54
 8007fb8:	20000b76 	.word	0x20000b76
 8007fbc:	20000bd2 	.word	0x20000bd2
 8007fc0:	200000e1 	.word	0x200000e1
 8007fc4:	20000c40 	.word	0x20000c40
 8007fc8:	20000c42 	.word	0x20000c42
 8007fcc:	20000c00 	.word	0x20000c00
 8007fd0:	20000bac 	.word	0x20000bac
 8007fd4:	20000c28 	.word	0x20000c28
 8007fd8:	20000c94 	.word	0x20000c94
 8007fdc:	20000c26 	.word	0x20000c26
		goto ask_btn2_f3;
 8007fe0:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8007fe2:	4b9e      	ldr	r3, [pc, #632]	@ (800825c <detecta+0x918>)
 8007fe4:	785b      	ldrb	r3, [r3, #1]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d114      	bne.n	8008014 <detecta+0x6d0>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8007fea:	4b9d      	ldr	r3, [pc, #628]	@ (8008260 <detecta+0x91c>)
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4053      	eors	r3, r2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10f      	bne.n	8008018 <detecta+0x6d4>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8007ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8008264 <detecta+0x920>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d117      	bne.n	8008030 <detecta+0x6ec>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8008000:	4b99      	ldr	r3, [pc, #612]	@ (8008268 <detecta+0x924>)
 8008002:	2201      	movs	r2, #1
 8008004:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 8008006:	4b99      	ldr	r3, [pc, #612]	@ (800826c <detecta+0x928>)
 8008008:	2200      	movs	r2, #0
 800800a:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 800800c:	4b95      	ldr	r3, [pc, #596]	@ (8008264 <detecta+0x920>)
 800800e:	221e      	movs	r2, #30
 8008010:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8008012:	e79b      	b.n	8007f4c <detecta+0x608>
		goto noBtn2F3;
 8008014:	46c0      	nop			@ (mov r8, r8)
 8008016:	e000      	b.n	800801a <detecta+0x6d6>
		goto noBtn2F3;
 8008018:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 800801a:	4b92      	ldr	r3, [pc, #584]	@ (8008264 <detecta+0x920>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b1d      	cmp	r3, #29
 8008020:	d808      	bhi.n	8008034 <detecta+0x6f0>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8008022:	4b90      	ldr	r3, [pc, #576]	@ (8008264 <detecta+0x920>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	3301      	adds	r3, #1
 8008028:	b2da      	uxtb	r2, r3
 800802a:	4b8e      	ldr	r3, [pc, #568]	@ (8008264 <detecta+0x920>)
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	e002      	b.n	8008036 <detecta+0x6f2>
		goto ask_btn1;
 8008030:	46c0      	nop			@ (mov r8, r8)
 8008032:	e000      	b.n	8008036 <detecta+0x6f2>
		goto ask_btn1;
 8008034:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 8008036:	4b8a      	ldr	r3, [pc, #552]	@ (8008260 <detecta+0x91c>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2201      	movs	r2, #1
 800803c:	4053      	eors	r3, r2
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d12a      	bne.n	800809a <detecta+0x756>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8008044:	4b8a      	ldr	r3, [pc, #552]	@ (8008270 <detecta+0x92c>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <detecta+0x716>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 800804c:	4b89      	ldr	r3, [pc, #548]	@ (8008274 <detecta+0x930>)
 800804e:	2201      	movs	r2, #1
 8008050:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8008052:	4b89      	ldr	r3, [pc, #548]	@ (8008278 <detecta+0x934>)
 8008054:	2214      	movs	r2, #20
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	e000      	b.n	800805c <detecta+0x718>
		goto ask_btn1_sec;
 800805a:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 800805c:	4b7f      	ldr	r3, [pc, #508]	@ (800825c <detecta+0x918>)
 800805e:	785b      	ldrb	r3, [r3, #1]
 8008060:	2201      	movs	r2, #1
 8008062:	4053      	eors	r3, r2
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d107      	bne.n	800807a <detecta+0x736>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 800806a:	4b84      	ldr	r3, [pc, #528]	@ (800827c <detecta+0x938>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b6e      	cmp	r3, #110	@ 0x6e
 8008070:	d822      	bhi.n	80080b8 <detecta+0x774>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8008072:	4b80      	ldr	r3, [pc, #512]	@ (8008274 <detecta+0x930>)
 8008074:	2201      	movs	r2, #1
 8008076:	705a      	strb	r2, [r3, #1]
	goto findet;
 8008078:	e0a5      	b.n	80081c6 <detecta+0x882>
		goto func_sec_norm_btn1;
 800807a:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 800807c:	4b80      	ldr	r3, [pc, #512]	@ (8008280 <detecta+0x93c>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d11b      	bne.n	80080bc <detecta+0x778>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8008084:	4b7d      	ldr	r3, [pc, #500]	@ (800827c <detecta+0x938>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d119      	bne.n	80080c0 <detecta+0x77c>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 800808c:	4b79      	ldr	r3, [pc, #484]	@ (8008274 <detecta+0x930>)
 800808e:	2201      	movs	r2, #1
 8008090:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8008092:	4b7b      	ldr	r3, [pc, #492]	@ (8008280 <detecta+0x93c>)
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 8008098:	e095      	b.n	80081c6 <detecta+0x882>
		goto no_btn1;
 800809a:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 800809c:	4b78      	ldr	r3, [pc, #480]	@ (8008280 <detecta+0x93c>)
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 80080a2:	4b76      	ldr	r3, [pc, #472]	@ (800827c <detecta+0x938>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b95      	cmp	r3, #149	@ 0x95
 80080a8:	d80c      	bhi.n	80080c4 <detecta+0x780>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 80080aa:	4b74      	ldr	r3, [pc, #464]	@ (800827c <detecta+0x938>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	3303      	adds	r3, #3
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	4b72      	ldr	r3, [pc, #456]	@ (800827c <detecta+0x938>)
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e006      	b.n	80080c6 <detecta+0x782>
		goto ask_btn2;
 80080b8:	46c0      	nop			@ (mov r8, r8)
 80080ba:	e004      	b.n	80080c6 <detecta+0x782>
		goto ask_btn2;
 80080bc:	46c0      	nop			@ (mov r8, r8)
 80080be:	e002      	b.n	80080c6 <detecta+0x782>
		goto ask_btn2;
 80080c0:	46c0      	nop			@ (mov r8, r8)
 80080c2:	e000      	b.n	80080c6 <detecta+0x782>
		goto ask_btn2;
 80080c4:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 80080c6:	4b66      	ldr	r3, [pc, #408]	@ (8008260 <detecta+0x91c>)
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2201      	movs	r2, #1
 80080cc:	4053      	eors	r3, r2
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11a      	bne.n	800810a <detecta+0x7c6>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 80080d4:	4b66      	ldr	r3, [pc, #408]	@ (8008270 <detecta+0x92c>)
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <detecta+0x7a6>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 80080dc:	4b65      	ldr	r3, [pc, #404]	@ (8008274 <detecta+0x930>)
 80080de:	2201      	movs	r2, #1
 80080e0:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 80080e2:	4b65      	ldr	r3, [pc, #404]	@ (8008278 <detecta+0x934>)
 80080e4:	2214      	movs	r2, #20
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	e000      	b.n	80080ec <detecta+0x7a8>
		goto ask_btn2_sec;
 80080ea:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 80080ec:	4b64      	ldr	r3, [pc, #400]	@ (8008280 <detecta+0x93c>)
 80080ee:	789b      	ldrb	r3, [r3, #2]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d119      	bne.n	8008128 <detecta+0x7e4>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 80080f4:	4b63      	ldr	r3, [pc, #396]	@ (8008284 <detecta+0x940>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d117      	bne.n	800812c <detecta+0x7e8>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 80080fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008274 <detecta+0x930>)
 80080fe:	2201      	movs	r2, #1
 8008100:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8008102:	4b5f      	ldr	r3, [pc, #380]	@ (8008280 <detecta+0x93c>)
 8008104:	2201      	movs	r2, #1
 8008106:	709a      	strb	r2, [r3, #2]
	goto findet;
 8008108:	e05d      	b.n	80081c6 <detecta+0x882>
		goto no_btn2;
 800810a:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 800810c:	4b5c      	ldr	r3, [pc, #368]	@ (8008280 <detecta+0x93c>)
 800810e:	2200      	movs	r2, #0
 8008110:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8008112:	4b5c      	ldr	r3, [pc, #368]	@ (8008284 <detecta+0x940>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b95      	cmp	r3, #149	@ 0x95
 8008118:	d80a      	bhi.n	8008130 <detecta+0x7ec>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 800811a:	4b5a      	ldr	r3, [pc, #360]	@ (8008284 <detecta+0x940>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	3303      	adds	r3, #3
 8008120:	b2da      	uxtb	r2, r3
 8008122:	4b58      	ldr	r3, [pc, #352]	@ (8008284 <detecta+0x940>)
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e004      	b.n	8008132 <detecta+0x7ee>
		goto ask_btn3;
 8008128:	46c0      	nop			@ (mov r8, r8)
 800812a:	e002      	b.n	8008132 <detecta+0x7ee>
		goto ask_btn3;
 800812c:	46c0      	nop			@ (mov r8, r8)
 800812e:	e000      	b.n	8008132 <detecta+0x7ee>
		goto ask_btn3;
 8008130:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8008132:	4b4b      	ldr	r3, [pc, #300]	@ (8008260 <detecta+0x91c>)
 8008134:	789b      	ldrb	r3, [r3, #2]
 8008136:	2201      	movs	r2, #1
 8008138:	4053      	eors	r3, r2
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d12a      	bne.n	8008196 <detecta+0x852>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8008140:	4b4b      	ldr	r3, [pc, #300]	@ (8008270 <detecta+0x92c>)
 8008142:	789b      	ldrb	r3, [r3, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <detecta+0x812>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 8008148:	4b4a      	ldr	r3, [pc, #296]	@ (8008274 <detecta+0x930>)
 800814a:	2201      	movs	r2, #1
 800814c:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 800814e:	4b4a      	ldr	r3, [pc, #296]	@ (8008278 <detecta+0x934>)
 8008150:	2214      	movs	r2, #20
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e000      	b.n	8008158 <detecta+0x814>
		goto ask_btn3_sec;
 8008156:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 8008158:	4b40      	ldr	r3, [pc, #256]	@ (800825c <detecta+0x918>)
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2201      	movs	r2, #1
 800815e:	4053      	eors	r3, r2
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d107      	bne.n	8008176 <detecta+0x832>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 8008166:	4b48      	ldr	r3, [pc, #288]	@ (8008288 <detecta+0x944>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b6e      	cmp	r3, #110	@ 0x6e
 800816c:	d824      	bhi.n	80081b8 <detecta+0x874>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 800816e:	4b41      	ldr	r3, [pc, #260]	@ (8008274 <detecta+0x930>)
 8008170:	2201      	movs	r2, #1
 8008172:	715a      	strb	r2, [r3, #5]
	goto findet;
 8008174:	e027      	b.n	80081c6 <detecta+0x882>
		goto func_sec_norm_btn3;
 8008176:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 8008178:	4b41      	ldr	r3, [pc, #260]	@ (8008280 <detecta+0x93c>)
 800817a:	791b      	ldrb	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11d      	bne.n	80081bc <detecta+0x878>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8008180:	4b41      	ldr	r3, [pc, #260]	@ (8008288 <detecta+0x944>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11b      	bne.n	80081c0 <detecta+0x87c>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 8008188:	4b3a      	ldr	r3, [pc, #232]	@ (8008274 <detecta+0x930>)
 800818a:	2201      	movs	r2, #1
 800818c:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 800818e:	4b3c      	ldr	r3, [pc, #240]	@ (8008280 <detecta+0x93c>)
 8008190:	2201      	movs	r2, #1
 8008192:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8008194:	e017      	b.n	80081c6 <detecta+0x882>
		goto no_btn3;
 8008196:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 8008198:	4b39      	ldr	r3, [pc, #228]	@ (8008280 <detecta+0x93c>)
 800819a:	2200      	movs	r2, #0
 800819c:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 800819e:	4b3a      	ldr	r3, [pc, #232]	@ (8008288 <detecta+0x944>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b95      	cmp	r3, #149	@ 0x95
 80081a4:	d80e      	bhi.n	80081c4 <detecta+0x880>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 80081a6:	4b38      	ldr	r3, [pc, #224]	@ (8008288 <detecta+0x944>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	3303      	adds	r3, #3
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	4b36      	ldr	r3, [pc, #216]	@ (8008288 <detecta+0x944>)
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e008      	b.n	80081c6 <detecta+0x882>
	goto findet;
 80081b4:	46c0      	nop			@ (mov r8, r8)
 80081b6:	e006      	b.n	80081c6 <detecta+0x882>
		goto ask_btn4;
 80081b8:	46c0      	nop			@ (mov r8, r8)
 80081ba:	e004      	b.n	80081c6 <detecta+0x882>
		goto ask_btn4;
 80081bc:	46c0      	nop			@ (mov r8, r8)
 80081be:	e002      	b.n	80081c6 <detecta+0x882>
		goto ask_btn4;
 80081c0:	46c0      	nop			@ (mov r8, r8)
 80081c2:	e000      	b.n	80081c6 <detecta+0x882>
		goto ask_btn4;
 80081c4:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 80081c6:	1c7b      	adds	r3, r7, #1
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	e00c      	b.n	80081e8 <detecta+0x8a4>
		Botones_COPY[k] = Botones_T[k];
 80081ce:	1c7b      	adds	r3, r7, #1
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	1c7b      	adds	r3, r7, #1
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4922      	ldr	r1, [pc, #136]	@ (8008260 <detecta+0x91c>)
 80081d8:	5c89      	ldrb	r1, [r1, r2]
 80081da:	4a25      	ldr	r2, [pc, #148]	@ (8008270 <detecta+0x92c>)
 80081dc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 80081de:	1c7b      	adds	r3, r7, #1
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	1c7b      	adds	r3, r7, #1
 80081e4:	3201      	adds	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	1c7b      	adds	r3, r7, #1
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b07      	cmp	r3, #7
 80081ee:	d9ee      	bls.n	80081ce <detecta+0x88a>
	if(!flagsb[f_prog]){
 80081f0:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <detecta+0x918>)
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	2201      	movs	r2, #1
 80081f6:	4053      	eors	r3, r2
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d11a      	bne.n	8008234 <detecta+0x8f0>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 80081fe:	003b      	movs	r3, r7
 8008200:	2200      	movs	r2, #0
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e011      	b.n	800822a <detecta+0x8e6>
		btn_pr[k] = botonst[k];
 8008206:	003b      	movs	r3, r7
 8008208:	781a      	ldrb	r2, [r3, #0]
 800820a:	003b      	movs	r3, r7
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	4919      	ldr	r1, [pc, #100]	@ (8008274 <detecta+0x930>)
 8008210:	5c89      	ldrb	r1, [r1, r2]
 8008212:	4a1e      	ldr	r2, [pc, #120]	@ (800828c <detecta+0x948>)
 8008214:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8008216:	003b      	movs	r3, r7
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	4a16      	ldr	r2, [pc, #88]	@ (8008274 <detecta+0x930>)
 800821c:	2100      	movs	r1, #0
 800821e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8008220:	003b      	movs	r3, r7
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	003b      	movs	r3, r7
 8008226:	3201      	adds	r2, #1
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	003b      	movs	r3, r7
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b07      	cmp	r3, #7
 8008230:	d9e9      	bls.n	8008206 <detecta+0x8c2>
	}

det_j18:
 8008232:	e000      	b.n	8008236 <detecta+0x8f2>
		goto det_j18;
 8008234:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 8008236:	4b16      	ldr	r3, [pc, #88]	@ (8008290 <detecta+0x94c>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2201      	movs	r2, #1
 800823c:	4053      	eors	r3, r2
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <detecta+0x90e>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8008244:	4b0b      	ldr	r3, [pc, #44]	@ (8008274 <detecta+0x930>)
 8008246:	2200      	movs	r2, #0
 8008248:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 800824a:	4b0a      	ldr	r3, [pc, #40]	@ (8008274 <detecta+0x930>)
 800824c:	2200      	movs	r2, #0
 800824e:	711a      	strb	r2, [r3, #4]

det_j19:

}
 8008250:	e000      	b.n	8008254 <detecta+0x910>
		goto det_j19;
 8008252:	46c0      	nop			@ (mov r8, r8)
}
 8008254:	46c0      	nop			@ (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	b003      	add	sp, #12
 800825a:	bd90      	pop	{r4, r7, pc}
 800825c:	20000bf8 	.word	0x20000bf8
 8008260:	20000c94 	.word	0x20000c94
 8008264:	20001140 	.word	0x20001140
 8008268:	20000c28 	.word	0x20000c28
 800826c:	20000c4c 	.word	0x20000c4c
 8008270:	20000c18 	.word	0x20000c18
 8008274:	20000bac 	.word	0x20000bac
 8008278:	20001139 	.word	0x20001139
 800827c:	20000c20 	.word	0x20000c20
 8008280:	20000be0 	.word	0x20000be0
 8008284:	20000c21 	.word	0x20000c21
 8008288:	20000c22 	.word	0x20000c22
 800828c:	20000c00 	.word	0x20000c00
 8008290:	20001144 	.word	0x20001144

08008294 <display>:





void display (void){
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
	uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 800829a:	1dbb      	adds	r3, r7, #6
 800829c:	4abb      	ldr	r2, [pc, #748]	@ (800858c <display+0x2f8>)
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 80082a2:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 80082a4:	4bba      	ldr	r3, [pc, #744]	@ (8008590 <display+0x2fc>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d100      	bne.n	80082ae <display+0x1a>
 80082ac:	e092      	b.n	80083d4 <display+0x140>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 80082ae:	4bb9      	ldr	r3, [pc, #740]	@ (8008594 <display+0x300>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d114      	bne.n	80082e0 <display+0x4c>
	//	goto display_00;
	//}

	//btjf    flagsTxControl,#f_statBLE,display_00   ;¿Esta conectado un dispositivo BLE?
	//btjf		flagsTX2,#2,display_00; Se ha respondido el token BLE alguna vez ?
	if((!flagsTxControl[f_statBLE]) || (!flagsTX2[2]))
 80082b6:	4bb8      	ldr	r3, [pc, #736]	@ (8008598 <display+0x304>)
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2201      	movs	r2, #1
 80082bc:	4053      	eors	r3, r2
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10f      	bne.n	80082e4 <display+0x50>
 80082c4:	4bb5      	ldr	r3, [pc, #724]	@ (800859c <display+0x308>)
 80082c6:	789b      	ldrb	r3, [r3, #2]
 80082c8:	2201      	movs	r2, #1
 80082ca:	4053      	eors	r3, r2
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <display+0x50>
		goto display_00;


	op_menu (0x0B, 0x11);
 80082d2:	2111      	movs	r1, #17
 80082d4:	200b      	movs	r0, #11
 80082d6:	f7ff f98f 	bl	80075f8 <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 80082da:	f7ff f9a7 	bl	800762c <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 80082de:	e01e      	b.n	800831e <display+0x8a>
		goto display_00;
 80082e0:	46c0      	nop			@ (mov r8, r8)
 80082e2:	e000      	b.n	80082e6 <display+0x52>
		goto display_00;
 80082e4:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(estado1_Aux, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 80082e6:	1dbb      	adds	r3, r7, #6
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d106      	bne.n	80082fe <display+0x6a>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 80082f0:	2110      	movs	r1, #16
 80082f2:	2011      	movs	r0, #17
 80082f4:	f7ff f980 	bl	80075f8 <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 80082f8:	f7ff f998 	bl	800762c <datled_clear>
 80082fc:	e000      	b.n	8008300 <display+0x6c>
		goto display_00b;
 80082fe:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 8008300:	4ba7      	ldr	r3, [pc, #668]	@ (80085a0 <display+0x30c>)
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2201      	movs	r2, #1
 8008306:	4053      	eors	r3, r2
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <display+0x88>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 800830e:	211d      	movs	r1, #29
 8008310:	201f      	movs	r0, #31
 8008312:	f7ff f971 	bl	80075f8 <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 8008316:	f7ff f989 	bl	800762c <datled_clear>
 800831a:	e000      	b.n	800831e <display+0x8a>
		goto display_01;
 800831c:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 800831e:	4ba1      	ldr	r3, [pc, #644]	@ (80085a4 <display+0x310>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d058      	beq.n	80083d8 <display+0x144>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 8008326:	4b9f      	ldr	r3, [pc, #636]	@ (80085a4 <display+0x310>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2bc7      	cmp	r3, #199	@ 0xc7
 800832c:	d900      	bls.n	8008330 <display+0x9c>
 800832e:	e09e      	b.n	800846e <display+0x1da>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 8008330:	4b9c      	ldr	r3, [pc, #624]	@ (80085a4 <display+0x310>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b31      	cmp	r3, #49	@ 0x31
 8008336:	d800      	bhi.n	800833a <display+0xa6>
 8008338:	e09b      	b.n	8008472 <display+0x1de>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 800833a:	f7ff f977 	bl	800762c <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 800833e:	4b9a      	ldr	r3, [pc, #616]	@ (80085a8 <display+0x314>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d10f      	bne.n	8008366 <display+0xd2>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 8008346:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 8008348:	2110      	movs	r1, #16
 800834a:	2011      	movs	r0, #17
 800834c:	f7ff f954 	bl	80075f8 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(estado1_Aux, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 8008350:	1dbb      	adds	r3, r7, #6
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2201      	movs	r2, #1
 8008356:	4013      	ands	r3, r2
 8008358:	d003      	beq.n	8008362 <display+0xce>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 800835a:	4b94      	ldr	r3, [pc, #592]	@ (80085ac <display+0x318>)
 800835c:	2201      	movs	r2, #1
 800835e:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8008360:	e0a0      	b.n	80084a4 <display+0x210>
		goto msg1_01;
 8008362:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 8008364:	e09e      	b.n	80084a4 <display+0x210>
		goto askMsg2; //jrne		askMsg2
 8008366:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 8008368:	4b8f      	ldr	r3, [pc, #572]	@ (80085a8 <display+0x314>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d10f      	bne.n	8008390 <display+0xfc>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8008370:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 8008372:	2101      	movs	r1, #1
 8008374:	2011      	movs	r0, #17
 8008376:	f7ff f93f 	bl	80075f8 <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(estado1_Aux, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 800837a:	1dbb      	adds	r3, r7, #6
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2204      	movs	r2, #4
 8008380:	4013      	ands	r3, r2
 8008382:	d003      	beq.n	800838c <display+0xf8>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 8008384:	4b8a      	ldr	r3, [pc, #552]	@ (80085b0 <display+0x31c>)
 8008386:	2202      	movs	r2, #2
 8008388:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 800838a:	e08b      	b.n	80084a4 <display+0x210>
		goto	msg2_01;
 800838c:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 800838e:	e089      	b.n	80084a4 <display+0x210>
		goto askMsg3; //jrne		askMsg3
 8008390:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 8008392:	4b85      	ldr	r3, [pc, #532]	@ (80085a8 <display+0x314>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b03      	cmp	r3, #3
 8008398:	d10f      	bne.n	80083ba <display+0x126>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 800839a:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 800839c:	2100      	movs	r1, #0
 800839e:	2011      	movs	r0, #17
 80083a0:	f7ff f92a 	bl	80075f8 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(estado1_Aux, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 80083a4:	1dbb      	adds	r3, r7, #6
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2240      	movs	r2, #64	@ 0x40
 80083aa:	4013      	ands	r3, r2
 80083ac:	d103      	bne.n	80083b6 <display+0x122>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 80083ae:	4b7f      	ldr	r3, [pc, #508]	@ (80085ac <display+0x318>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 80083b4:	e076      	b.n	80084a4 <display+0x210>
		goto msg3_01;
 80083b6:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 80083b8:	e074      	b.n	80084a4 <display+0x210>
		goto askMsg4;  //jrne askMsg4
 80083ba:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 80083bc:	4b7a      	ldr	r3, [pc, #488]	@ (80085a8 <display+0x314>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d105      	bne.n	80083d0 <display+0x13c>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 80083c4:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 80083c6:	211d      	movs	r1, #29
 80083c8:	201f      	movs	r0, #31
 80083ca:	f7ff f915 	bl	80075f8 <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 80083ce:	e069      	b.n	80084a4 <display+0x210>
		goto askMsg5;  //jrne		askMsg5
 80083d0:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 80083d2:	e067      	b.n	80084a4 <display+0x210>
		goto display_02;
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	e000      	b.n	80083da <display+0x146>
		goto display_02;//jreq		display_02;
 80083d8:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 80083da:	f7fd fb09 	bl	80059f0 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 80083de:	4b6c      	ldr	r3, [pc, #432]	@ (8008590 <display+0x2fc>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d018      	beq.n	8008418 <display+0x184>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 80083e6:	4b73      	ldr	r3, [pc, #460]	@ (80085b4 <display+0x320>)
 80083e8:	79db      	ldrb	r3, [r3, #7]
 80083ea:	2201      	movs	r2, #1
 80083ec:	4053      	eors	r3, r2
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d113      	bne.n	800841c <display+0x188>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 80083f4:	210a      	movs	r1, #10
 80083f6:	200a      	movs	r0, #10
 80083f8:	f7ff f8fe 	bl	80075f8 <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 80083fc:	4b6e      	ldr	r3, [pc, #440]	@ (80085b8 <display+0x324>)
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	001a      	movs	r2, r3
 8008404:	2340      	movs	r3, #64	@ 0x40
 8008406:	4013      	ands	r3, r2
 8008408:	d104      	bne.n	8008414 <display+0x180>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 800840a:	211f      	movs	r1, #31
 800840c:	201f      	movs	r0, #31
 800840e:	f7ff f8f3 	bl	80075f8 <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 8008412:	e047      	b.n	80084a4 <display+0x210>
    	goto blk_aa;
 8008414:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 8008416:	e045      	b.n	80084a4 <display+0x210>
    	goto display_norm3; //jreq		display_norm3;
 8008418:	46c0      	nop			@ (mov r8, r8)
 800841a:	e000      	b.n	800841e <display+0x18a>
    	goto display_norm3;
 800841c:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 800841e:	4b60      	ldr	r3, [pc, #384]	@ (80085a0 <display+0x30c>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2201      	movs	r2, #1
 8008424:	4053      	eors	r3, r2
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d02c      	beq.n	8008486 <display+0x1f2>
    	  goto display_j00;
 800842c:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 800842e:	4b63      	ldr	r3, [pc, #396]	@ (80085bc <display+0x328>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d019      	beq.n	800846a <display+0x1d6>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 8008436:	4b61      	ldr	r3, [pc, #388]	@ (80085bc <display+0x328>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2bc7      	cmp	r3, #199	@ 0xc7
 800843c:	d81b      	bhi.n	8008476 <display+0x1e2>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 800843e:	4b5f      	ldr	r3, [pc, #380]	@ (80085bc <display+0x328>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b95      	cmp	r3, #149	@ 0x95
 8008444:	d902      	bls.n	800844c <display+0x1b8>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 8008446:	f7fe f8b1 	bl	80065ac <sp_dpy>
      	  goto dpy07;
 800844a:	e02b      	b.n	80084a4 <display+0x210>
    	  goto dpydif;//jrult dpydif
 800844c:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 800844e:	4b5b      	ldr	r3, [pc, #364]	@ (80085bc <display+0x328>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b63      	cmp	r3, #99	@ 0x63
 8008454:	d811      	bhi.n	800847a <display+0x1e6>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 8008456:	4b59      	ldr	r3, [pc, #356]	@ (80085bc <display+0x328>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b31      	cmp	r3, #49	@ 0x31
 800845c:	d90f      	bls.n	800847e <display+0x1ea>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 800845e:	f7fe f8b1 	bl	80065c4 <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 8008462:	4b52      	ldr	r3, [pc, #328]	@ (80085ac <display+0x318>)
 8008464:	2200      	movs	r2, #0
 8008466:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 8008468:	e01c      	b.n	80084a4 <display+0x210>
    	  goto dpy02;//jreq		dpy02;
 800846a:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 800846c:	e00c      	b.n	8008488 <display+0x1f4>
		goto dpy03; //************** ?
 800846e:	46c0      	nop			@ (mov r8, r8)
 8008470:	e006      	b.n	8008480 <display+0x1ec>
		goto dpy03;
 8008472:	46c0      	nop			@ (mov r8, r8)
 8008474:	e004      	b.n	8008480 <display+0x1ec>
    	  goto dpy03;//jruge		dpy03;
 8008476:	46c0      	nop			@ (mov r8, r8)
 8008478:	e002      	b.n	8008480 <display+0x1ec>
    	 goto dpy03;//jruge		dpy03;
 800847a:	46c0      	nop			@ (mov r8, r8)
 800847c:	e000      	b.n	8008480 <display+0x1ec>
    	 goto dpy03;//jrult		dpy03;
 800847e:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8008480:	f7fe fc20 	bl	8006cc4 <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 8008484:	e00e      	b.n	80084a4 <display+0x210>
      goto dpy06;//jra dpy06;
 8008486:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 8008488:	4b4a      	ldr	r3, [pc, #296]	@ (80085b4 <display+0x320>)
 800848a:	78db      	ldrb	r3, [r3, #3]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <display+0x20a>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8008490:	4b4b      	ldr	r3, [pc, #300]	@ (80085c0 <display+0x32c>)
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d104      	bne.n	80084a2 <display+0x20e>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 8008498:	f7fe fab4 	bl	8006a04 <fallas>
 800849c:	e002      	b.n	80084a4 <display+0x210>
	   goto dpy07;
 800849e:	46c0      	nop			@ (mov r8, r8)
 80084a0:	e000      	b.n	80084a4 <display+0x210>
	   goto dpy07;
 80084a2:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 80084a4:	4b47      	ldr	r3, [pc, #284]	@ (80085c4 <display+0x330>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	001a      	movs	r2, r3
 80084aa:	4b47      	ldr	r3, [pc, #284]	@ (80085c8 <display+0x334>)
 80084ac:	5c9a      	ldrb	r2, [r3, r2]
 80084ae:	4b47      	ldr	r3, [pc, #284]	@ (80085cc <display+0x338>)
 80084b0:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 80084b2:	4b3f      	ldr	r3, [pc, #252]	@ (80085b0 <display+0x31c>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	001a      	movs	r2, r3
 80084b8:	4b43      	ldr	r3, [pc, #268]	@ (80085c8 <display+0x334>)
 80084ba:	5c9a      	ldrb	r2, [r3, r2]
 80084bc:	4b44      	ldr	r3, [pc, #272]	@ (80085d0 <display+0x33c>)
 80084be:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 80084c0:	230f      	movs	r3, #15
 80084c2:	18fb      	adds	r3, r7, r3
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e011      	b.n	80084ee <display+0x25a>
			if(trefst[k] ){ //tnz  trefst ***************??
 80084ca:	210f      	movs	r1, #15
 80084cc:	187b      	adds	r3, r7, r1
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	4a40      	ldr	r2, [pc, #256]	@ (80085d4 <display+0x340>)
 80084d2:	5cd3      	ldrb	r3, [r2, r3]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d113      	bne.n	8008500 <display+0x26c>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 80084d8:	187b      	adds	r3, r7, r1
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	4a3e      	ldr	r2, [pc, #248]	@ (80085d8 <display+0x344>)
 80084de:	5cd3      	ldrb	r3, [r2, r3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10f      	bne.n	8008504 <display+0x270>
		for(uint8_t k=0; k<8; k++){
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	3201      	adds	r2, #1
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	230f      	movs	r3, #15
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b07      	cmp	r3, #7
 80084f6:	d9e8      	bls.n	80084ca <display+0x236>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 80084f8:	4b38      	ldr	r3, [pc, #224]	@ (80085dc <display+0x348>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 80084fe:	e00d      	b.n	800851c <display+0x288>
				goto ask_snooze; //jrne	ask_snooze
 8008500:	46c0      	nop			@ (mov r8, r8)
 8008502:	e000      	b.n	8008506 <display+0x272>
				goto ask_snooze;  //jrne	ask_snooze
 8008504:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 8008506:	4b36      	ldr	r3, [pc, #216]	@ (80085e0 <display+0x34c>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2201      	movs	r2, #1
 800850c:	4053      	eors	r3, r2
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <display+0x286>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 8008514:	f7fe feda 	bl	80072cc <ld_alarmDelay>
 8008518:	e000      	b.n	800851c <display+0x288>
			goto noLoadSnooze;
 800851a:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 800851c:	4b2f      	ldr	r3, [pc, #188]	@ (80085dc <display+0x348>)
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <display+0x298>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 8008524:	4b2f      	ldr	r3, [pc, #188]	@ (80085e4 <display+0x350>)
 8008526:	2201      	movs	r2, #1
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e000      	b.n	800852e <display+0x29a>
			goto no_snooze;//jreq no_snooze
 800852c:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 800852e:	4b2e      	ldr	r3, [pc, #184]	@ (80085e8 <display+0x354>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00e      	beq.n	8008554 <display+0x2c0>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 8008536:	4b2b      	ldr	r3, [pc, #172]	@ (80085e4 <display+0x350>)
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <display+0x2bc>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800853e:	4b2b      	ldr	r3, [pc, #172]	@ (80085ec <display+0x358>)
 8008540:	2104      	movs	r1, #4
 8008542:	0018      	movs	r0, r3
 8008544:	f010 fe2c 	bl	80191a0 <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 8008548:	4b26      	ldr	r3, [pc, #152]	@ (80085e4 <display+0x350>)
 800854a:	2201      	movs	r2, #1
 800854c:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 800854e:	e185      	b.n	800885c <display+0x5c8>
			goto jp_termina_buzzer;
 8008550:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 8008552:	e183      	b.n	800885c <display+0x5c8>
			goto noBtnBuzz; //jreq noBtnBuzz
 8008554:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 8008556:	4b23      	ldr	r3, [pc, #140]	@ (80085e4 <display+0x350>)
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	2201      	movs	r2, #1
 800855c:	4053      	eors	r3, r2
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d14f      	bne.n	8008604 <display+0x370>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 8008564:	4b22      	ldr	r3, [pc, #136]	@ (80085f0 <display+0x35c>)
 8008566:	2200      	movs	r2, #0
 8008568:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800856a:	4b22      	ldr	r3, [pc, #136]	@ (80085f4 <display+0x360>)
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008570:	4b1e      	ldr	r3, [pc, #120]	@ (80085ec <display+0x358>)
 8008572:	2104      	movs	r1, #4
 8008574:	0018      	movs	r0, r3
 8008576:	f010 fef5 	bl	8019364 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 800857a:	4b1f      	ldr	r3, [pc, #124]	@ (80085f8 <display+0x364>)
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	4a1f      	ldr	r2, [pc, #124]	@ (80085fc <display+0x368>)
 8008580:	4694      	mov	ip, r2
 8008582:	4463      	add	r3, ip
 8008584:	b29a      	uxth	r2, r3
 8008586:	4b1e      	ldr	r3, [pc, #120]	@ (8008600 <display+0x36c>)
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	e03c      	b.n	8008606 <display+0x372>
 800858c:	200001ba 	.word	0x200001ba
 8008590:	20000ba8 	.word	0x20000ba8
 8008594:	20001144 	.word	0x20001144
 8008598:	20001188 	.word	0x20001188
 800859c:	20000fe0 	.word	0x20000fe0
 80085a0:	20000b88 	.word	0x20000b88
 80085a4:	20001100 	.word	0x20001100
 80085a8:	20001101 	.word	0x20001101
 80085ac:	20000ba0 	.word	0x20000ba0
 80085b0:	20000b62 	.word	0x20000b62
 80085b4:	20000be8 	.word	0x20000be8
 80085b8:	20000b60 	.word	0x20000b60
 80085bc:	20000bd2 	.word	0x20000bd2
 80085c0:	20000bf8 	.word	0x20000bf8
 80085c4:	20000b63 	.word	0x20000b63
 80085c8:	2000000c 	.word	0x2000000c
 80085cc:	20000c89 	.word	0x20000c89
 80085d0:	20000c8a 	.word	0x20000c8a
 80085d4:	20000b98 	.word	0x20000b98
 80085d8:	20000b90 	.word	0x20000b90
 80085dc:	2000103c 	.word	0x2000103c
 80085e0:	20000bac 	.word	0x20000bac
 80085e4:	20001034 	.word	0x20001034
 80085e8:	20001139 	.word	0x20001139
 80085ec:	200005a4 	.word	0x200005a4
 80085f0:	2000102c 	.word	0x2000102c
 80085f4:	20001024 	.word	0x20001024
 80085f8:	20001020 	.word	0x20001020
 80085fc:	00001388 	.word	0x00001388
 8008600:	20001022 	.word	0x20001022
			goto noBtnBuzz_01;
 8008604:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 8008606:	4bd0      	ldr	r3, [pc, #832]	@ (8008948 <display+0x6b4>)
 8008608:	2200      	movs	r2, #0
 800860a:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 800860c:	4bce      	ldr	r3, [pc, #824]	@ (8008948 <display+0x6b4>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d111      	bne.n	8008638 <display+0x3a4>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 8008614:	4bcd      	ldr	r3, [pc, #820]	@ (800894c <display+0x6b8>)
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800861a:	4bcd      	ldr	r3, [pc, #820]	@ (8008950 <display+0x6bc>)
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008620:	4bcc      	ldr	r3, [pc, #816]	@ (8008954 <display+0x6c0>)
 8008622:	2104      	movs	r1, #4
 8008624:	0018      	movs	r0, r3
 8008626:	f010 fe9d 	bl	8019364 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 800862a:	4bcb      	ldr	r3, [pc, #812]	@ (8008958 <display+0x6c4>)
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	3364      	adds	r3, #100	@ 0x64
 8008630:	b29a      	uxth	r2, r3
 8008632:	4bca      	ldr	r3, [pc, #808]	@ (800895c <display+0x6c8>)
 8008634:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 8008636:	e111      	b.n	800885c <display+0x5c8>
			goto buzzer_0;
 8008638:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 800863a:	4bc5      	ldr	r3, [pc, #788]	@ (8008950 <display+0x6bc>)
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 8008640:	4bc7      	ldr	r3, [pc, #796]	@ (8008960 <display+0x6cc>)
 8008642:	79db      	ldrb	r3, [r3, #7]
 8008644:	2201      	movs	r2, #1
 8008646:	4053      	eors	r3, r2
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <display+0x3c2>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800864e:	4bc0      	ldr	r3, [pc, #768]	@ (8008950 <display+0x6bc>)
 8008650:	2202      	movs	r2, #2
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	e000      	b.n	8008658 <display+0x3c4>
			goto buzzer_activado_04;
 8008656:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 8008658:	4bc1      	ldr	r3, [pc, #772]	@ (8008960 <display+0x6cc>)
 800865a:	799b      	ldrb	r3, [r3, #6]
 800865c:	2201      	movs	r2, #1
 800865e:	4053      	eors	r3, r2
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <display+0x3da>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008666:	4bba      	ldr	r3, [pc, #744]	@ (8008950 <display+0x6bc>)
 8008668:	2202      	movs	r2, #2
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	e000      	b.n	8008670 <display+0x3dc>
			goto buzzer_activado_05;
 800866e:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8008670:	4bbc      	ldr	r3, [pc, #752]	@ (8008964 <display+0x6d0>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2201      	movs	r2, #1
 8008676:	4053      	eors	r3, r2
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d103      	bne.n	8008686 <display+0x3f2>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800867e:	4bb4      	ldr	r3, [pc, #720]	@ (8008950 <display+0x6bc>)
 8008680:	2202      	movs	r2, #2
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	e000      	b.n	8008688 <display+0x3f4>
			goto buzzer_activado_08;
 8008686:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 8008688:	4bb7      	ldr	r3, [pc, #732]	@ (8008968 <display+0x6d4>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	4053      	eors	r3, r2
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <display+0x40a>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008696:	4bae      	ldr	r3, [pc, #696]	@ (8008950 <display+0x6bc>)
 8008698:	2202      	movs	r2, #2
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e000      	b.n	80086a0 <display+0x40c>
			goto buzzer_activado_01;
 800869e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 80086a0:	4bb1      	ldr	r3, [pc, #708]	@ (8008968 <display+0x6d4>)
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	2201      	movs	r2, #1
 80086a6:	4053      	eors	r3, r2
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <display+0x422>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 80086ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008950 <display+0x6bc>)
 80086b0:	2203      	movs	r2, #3
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	e000      	b.n	80086b8 <display+0x424>
			goto buzzer_activado_02;
 80086b6:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 80086b8:	4bab      	ldr	r3, [pc, #684]	@ (8008968 <display+0x6d4>)
 80086ba:	789b      	ldrb	r3, [r3, #2]
 80086bc:	2201      	movs	r2, #1
 80086be:	4053      	eors	r3, r2
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <display+0x43a>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80086c6:	4ba2      	ldr	r3, [pc, #648]	@ (8008950 <display+0x6bc>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	e000      	b.n	80086d0 <display+0x43c>
			goto buzzer_activado_03;
 80086ce:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 80086d0:	4ba4      	ldr	r3, [pc, #656]	@ (8008964 <display+0x6d0>)
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2201      	movs	r2, #1
 80086d6:	4053      	eors	r3, r2
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d103      	bne.n	80086e6 <display+0x452>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80086de:	4b9c      	ldr	r3, [pc, #624]	@ (8008950 <display+0x6bc>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e000      	b.n	80086e8 <display+0x454>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 80086e6:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 80086e8:	230e      	movs	r3, #14
 80086ea:	18fb      	adds	r3, r7, r3
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80086f0:	230d      	movs	r3, #13
 80086f2:	18fb      	adds	r3, r7, r3
 80086f4:	2200      	movs	r2, #0
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e015      	b.n	8008726 <display+0x492>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 80086fa:	200d      	movs	r0, #13
 80086fc:	183b      	adds	r3, r7, r0
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	4a97      	ldr	r2, [pc, #604]	@ (8008960 <display+0x6cc>)
 8008702:	5cd3      	ldrb	r3, [r2, r3]
 8008704:	001a      	movs	r2, r3
 8008706:	183b      	adds	r3, r7, r0
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	409a      	lsls	r2, r3
 800870c:	0013      	movs	r3, r2
 800870e:	b2d9      	uxtb	r1, r3
 8008710:	220e      	movs	r2, #14
 8008712:	18bb      	adds	r3, r7, r2
 8008714:	18ba      	adds	r2, r7, r2
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 800871c:	183b      	adds	r3, r7, r0
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	183b      	adds	r3, r7, r0
 8008722:	3201      	adds	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	230d      	movs	r3, #13
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b07      	cmp	r3, #7
 800872e:	d9e4      	bls.n	80086fa <display+0x466>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 8008730:	230e      	movs	r3, #14
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	223f      	movs	r2, #63	@ 0x3f
 8008738:	4013      	ands	r3, r2
 800873a:	d003      	beq.n	8008744 <display+0x4b0>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800873c:	4b84      	ldr	r3, [pc, #528]	@ (8008950 <display+0x6bc>)
 800873e:	2201      	movs	r2, #1
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	e000      	b.n	8008746 <display+0x4b2>
			goto buzzer_activado_06;
 8008744:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 8008746:	230e      	movs	r3, #14
 8008748:	18fb      	adds	r3, r7, r3
 800874a:	2200      	movs	r2, #0
 800874c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800874e:	2300      	movs	r3, #0
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	e013      	b.n	800877c <display+0x4e8>
			trefst_aux_ |= trefst2[k]<<k;
 8008754:	4a85      	ldr	r2, [pc, #532]	@ (800896c <display+0x6d8>)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	18d3      	adds	r3, r2, r3
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	001a      	movs	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	409a      	lsls	r2, r3
 8008762:	0013      	movs	r3, r2
 8008764:	b25a      	sxtb	r2, r3
 8008766:	210e      	movs	r1, #14
 8008768:	187b      	adds	r3, r7, r1
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b25b      	sxtb	r3, r3
 800876e:	4313      	orrs	r3, r2
 8008770:	b25a      	sxtb	r2, r3
 8008772:	187b      	adds	r3, r7, r1
 8008774:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	3301      	adds	r3, #1
 800877a:	60bb      	str	r3, [r7, #8]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b07      	cmp	r3, #7
 8008780:	dde8      	ble.n	8008754 <display+0x4c0>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 8008782:	230e      	movs	r3, #14
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <display+0x500>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800878c:	4b70      	ldr	r3, [pc, #448]	@ (8008950 <display+0x6bc>)
 800878e:	2201      	movs	r2, #1
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	e000      	b.n	8008796 <display+0x502>
			goto buzzer_activado_07;
 8008794:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 8008796:	4b6e      	ldr	r3, [pc, #440]	@ (8008950 <display+0x6bc>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b04      	cmp	r3, #4
 800879c:	d85b      	bhi.n	8008856 <display+0x5c2>
 800879e:	009a      	lsls	r2, r3, #2
 80087a0:	4b73      	ldr	r3, [pc, #460]	@ (8008970 <display+0x6dc>)
 80087a2:	18d3      	adds	r3, r2, r3
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 80087a8:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 80087aa:	4b6b      	ldr	r3, [pc, #428]	@ (8008958 <display+0x6c4>)
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	3364      	adds	r3, #100	@ 0x64
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	4b6a      	ldr	r3, [pc, #424]	@ (800895c <display+0x6c8>)
 80087b4:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 80087b6:	e051      	b.n	800885c <display+0x5c8>
			case 1: goto buzzer_etapa_1;
 80087b8:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 80087ba:	4b6e      	ldr	r3, [pc, #440]	@ (8008974 <display+0x6e0>)
 80087bc:	22fa      	movs	r2, #250	@ 0xfa
 80087be:	0052      	lsls	r2, r2, #1
 80087c0:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 80087c2:	4b6d      	ldr	r3, [pc, #436]	@ (8008978 <display+0x6e4>)
 80087c4:	22fa      	movs	r2, #250	@ 0xfa
 80087c6:	0052      	lsls	r2, r2, #1
 80087c8:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80087ca:	e012      	b.n	80087f2 <display+0x55e>
			case 2: goto buzzer_etapa_2;
 80087cc:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80087ce:	4b69      	ldr	r3, [pc, #420]	@ (8008974 <display+0x6e0>)
 80087d0:	22fa      	movs	r2, #250	@ 0xfa
 80087d2:	0052      	lsls	r2, r2, #1
 80087d4:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 80087d6:	4b68      	ldr	r3, [pc, #416]	@ (8008978 <display+0x6e4>)
 80087d8:	4a68      	ldr	r2, [pc, #416]	@ (800897c <display+0x6e8>)
 80087da:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80087dc:	e009      	b.n	80087f2 <display+0x55e>
			case 3: goto buzzer_etapa_3;
 80087de:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80087e0:	4b64      	ldr	r3, [pc, #400]	@ (8008974 <display+0x6e0>)
 80087e2:	22fa      	movs	r2, #250	@ 0xfa
 80087e4:	0052      	lsls	r2, r2, #1
 80087e6:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 80087e8:	4b63      	ldr	r3, [pc, #396]	@ (8008978 <display+0x6e4>)
 80087ea:	4a65      	ldr	r2, [pc, #404]	@ (8008980 <display+0x6ec>)
 80087ec:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80087ee:	e000      	b.n	80087f2 <display+0x55e>
			case 4: goto buzzer_etapa_4;
 80087f0:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 80087f2:	4b59      	ldr	r3, [pc, #356]	@ (8008958 <display+0x6c4>)
 80087f4:	881a      	ldrh	r2, [r3, #0]
 80087f6:	4b59      	ldr	r3, [pc, #356]	@ (800895c <display+0x6c8>)
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d12d      	bne.n	800885a <display+0x5c6>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 80087fe:	4b53      	ldr	r3, [pc, #332]	@ (800894c <display+0x6b8>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2201      	movs	r2, #1
 8008804:	4053      	eors	r3, r2
 8008806:	b2db      	uxtb	r3, r3
 8008808:	1e5a      	subs	r2, r3, #1
 800880a:	4193      	sbcs	r3, r2
 800880c:	b2da      	uxtb	r2, r3
 800880e:	4b4f      	ldr	r3, [pc, #316]	@ (800894c <display+0x6b8>)
 8008810:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 8008812:	4b4e      	ldr	r3, [pc, #312]	@ (800894c <display+0x6b8>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10e      	bne.n	8008838 <display+0x5a4>
			goto buzzer_on;
		}
buzzer_off:
 800881a:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 800881c:	4b4d      	ldr	r3, [pc, #308]	@ (8008954 <display+0x6c0>)
 800881e:	2104      	movs	r1, #4
 8008820:	0018      	movs	r0, r3
 8008822:	f010 fd9f 	bl	8019364 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 8008826:	4b4c      	ldr	r3, [pc, #304]	@ (8008958 <display+0x6c4>)
 8008828:	881a      	ldrh	r2, [r3, #0]
 800882a:	4b53      	ldr	r3, [pc, #332]	@ (8008978 <display+0x6e4>)
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	18d3      	adds	r3, r2, r3
 8008830:	b29a      	uxth	r2, r3
 8008832:	4b4a      	ldr	r3, [pc, #296]	@ (800895c <display+0x6c8>)
 8008834:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 8008836:	e011      	b.n	800885c <display+0x5c8>
			goto buzzer_on;
 8008838:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800883a:	4b46      	ldr	r3, [pc, #280]	@ (8008954 <display+0x6c0>)
 800883c:	2104      	movs	r1, #4
 800883e:	0018      	movs	r0, r3
 8008840:	f010 fcae 	bl	80191a0 <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 8008844:	4b44      	ldr	r3, [pc, #272]	@ (8008958 <display+0x6c4>)
 8008846:	881a      	ldrh	r2, [r3, #0]
 8008848:	4b4a      	ldr	r3, [pc, #296]	@ (8008974 <display+0x6e0>)
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	18d3      	adds	r3, r2, r3
 800884e:	b29a      	uxth	r2, r3
 8008850:	4b42      	ldr	r3, [pc, #264]	@ (800895c <display+0x6c8>)
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	e002      	b.n	800885c <display+0x5c8>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 8008856:	46c0      	nop			@ (mov r8, r8)
 8008858:	e000      	b.n	800885c <display+0x5c8>
			goto termina_buzzer;//jrne    termina_buzzer
 800885a:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 800885c:	1dfb      	adds	r3, r7, #7
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e009      	b.n	8008878 <display+0x5e4>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 8008864:	1dfb      	adds	r3, r7, #7
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	4a46      	ldr	r2, [pc, #280]	@ (8008984 <display+0x6f0>)
 800886a:	2101      	movs	r1, #1
 800886c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 800886e:	1dfb      	adds	r3, r7, #7
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	1dfb      	adds	r3, r7, #7
 8008874:	3201      	adds	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	1dfb      	adds	r3, r7, #7
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b07      	cmp	r3, #7
 800887e:	d9f1      	bls.n	8008864 <display+0x5d0>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8008880:	4b41      	ldr	r3, [pc, #260]	@ (8008988 <display+0x6f4>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2201      	movs	r2, #1
 8008886:	4053      	eors	r3, r2
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <display+0x600>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 800888e:	4b3d      	ldr	r3, [pc, #244]	@ (8008984 <display+0x6f0>)
 8008890:	2200      	movs	r2, #0
 8008892:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 8008894:	4b3c      	ldr	r3, [pc, #240]	@ (8008988 <display+0x6f4>)
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2201      	movs	r2, #1
 800889a:	4053      	eors	r3, r2
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <display+0x614>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 80088a2:	4b38      	ldr	r3, [pc, #224]	@ (8008984 <display+0x6f0>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 80088a8:	4b37      	ldr	r3, [pc, #220]	@ (8008988 <display+0x6f4>)
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	2201      	movs	r2, #1
 80088ae:	4053      	eors	r3, r2
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <display+0x628>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 80088b6:	4b33      	ldr	r3, [pc, #204]	@ (8008984 <display+0x6f0>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 80088bc:	4b32      	ldr	r3, [pc, #200]	@ (8008988 <display+0x6f4>)
 80088be:	78db      	ldrb	r3, [r3, #3]
 80088c0:	2201      	movs	r2, #1
 80088c2:	4053      	eors	r3, r2
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <display+0x63c>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 80088ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008984 <display+0x6f0>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 80088d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008988 <display+0x6f4>)
 80088d2:	79db      	ldrb	r3, [r3, #7]
 80088d4:	2201      	movs	r2, #1
 80088d6:	4053      	eors	r3, r2
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <display+0x650>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 80088de:	4b29      	ldr	r3, [pc, #164]	@ (8008984 <display+0x6f0>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 80088e4:	4b28      	ldr	r3, [pc, #160]	@ (8008988 <display+0x6f4>)
 80088e6:	791b      	ldrb	r3, [r3, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	4053      	eors	r3, r2
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <display+0x664>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 80088f2:	4b24      	ldr	r3, [pc, #144]	@ (8008984 <display+0x6f0>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 80088f8:	4b24      	ldr	r3, [pc, #144]	@ (800898c <display+0x6f8>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d803      	bhi.n	8008908 <display+0x674>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 8008900:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <display+0x6f0>)
 8008902:	2200      	movs	r2, #0
 8008904:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8008906:	e058      	b.n	80089ba <display+0x726>
		goto	clt_ledInd;
 8008908:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 800890a:	4b1e      	ldr	r3, [pc, #120]	@ (8008984 <display+0x6f0>)
 800890c:	2201      	movs	r2, #1
 800890e:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 8008910:	4b1d      	ldr	r3, [pc, #116]	@ (8008988 <display+0x6f4>)
 8008912:	78db      	ldrb	r3, [r3, #3]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d141      	bne.n	800899c <display+0x708>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 8008918:	4b1d      	ldr	r3, [pc, #116]	@ (8008990 <display+0x6fc>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d047      	beq.n	80089b0 <display+0x71c>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 8008920:	4b1c      	ldr	r3, [pc, #112]	@ (8008994 <display+0x700>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2201      	movs	r2, #1
 8008926:	4053      	eors	r3, r2
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d142      	bne.n	80089b4 <display+0x720>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 800892e:	4b1a      	ldr	r3, [pc, #104]	@ (8008998 <display+0x704>)
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	001a      	movs	r2, r3
 8008936:	2320      	movs	r3, #32
 8008938:	4013      	ands	r3, r2
 800893a:	d001      	beq.n	8008940 <display+0x6ac>
	    asm ("nop");
 800893c:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 800893e:	e03c      	b.n	80089ba <display+0x726>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 8008940:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <display+0x6f0>)
 8008942:	2200      	movs	r2, #0
 8008944:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8008946:	e038      	b.n	80089ba <display+0x726>
 8008948:	20001034 	.word	0x20001034
 800894c:	2000102c 	.word	0x2000102c
 8008950:	20001024 	.word	0x20001024
 8008954:	200005a4 	.word	0x200005a4
 8008958:	20001020 	.word	0x20001020
 800895c:	20001022 	.word	0x20001022
 8008960:	20000b98 	.word	0x20000b98
 8008964:	20001144 	.word	0x20001144
 8008968:	20001040 	.word	0x20001040
 800896c:	20000b90 	.word	0x20000b90
 8008970:	0801c278 	.word	0x0801c278
 8008974:	20001026 	.word	0x20001026
 8008978:	20001028 	.word	0x20001028
 800897c:	00007530 	.word	0x00007530
 8008980:	00003a98 	.word	0x00003a98
 8008984:	20000c8c 	.word	0x20000c8c
 8008988:	20000ba0 	.word	0x20000ba0
 800898c:	20000ba8 	.word	0x20000ba8
 8008990:	20000c37 	.word	0x20000c37
 8008994:	20000c4c 	.word	0x20000c4c
 8008998:	20000b60 	.word	0x20000b60
		goto	blink_dia;
 800899c:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 800899e:	4b0f      	ldr	r3, [pc, #60]	@ (80089dc <display+0x748>)
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	db07      	blt.n	80089b8 <display+0x724>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 80089a8:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <display+0x74c>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	709a      	strb	r2, [r3, #2]
 80089ae:	e004      	b.n	80089ba <display+0x726>
		goto	no_blk;
 80089b0:	46c0      	nop			@ (mov r8, r8)
 80089b2:	e002      	b.n	80089ba <display+0x726>
		goto	no_blk;
 80089b4:	46c0      	nop			@ (mov r8, r8)
 80089b6:	e000      	b.n	80089ba <display+0x726>
		goto	display_j11;
 80089b8:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 80089ba:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (estado1_Aux & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 80089bc:	1dbb      	adds	r3, r7, #6
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2201      	movs	r2, #1
 80089c2:	4013      	ands	r3, r2
 80089c4:	d104      	bne.n	80089d0 <display+0x73c>
		goto	refriON;
	}
refriOFF_2:
 80089c6:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <display+0x74c>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80089ce:	e000      	b.n	80089d2 <display+0x73e>
		goto	refriON;
 80089d0:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80089d2:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 80089d4:	46c0      	nop			@ (mov r8, r8)
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b004      	add	sp, #16
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000b60 	.word	0x20000b60
 80089e0:	20000c8c 	.word	0x20000c8c

080089e4 <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 80089ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008c88 <inicio+0x2a4>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 80089f0:	4ba5      	ldr	r3, [pc, #660]	@ (8008c88 <inicio+0x2a4>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 80089f6:	4ba5      	ldr	r3, [pc, #660]	@ (8008c8c <inicio+0x2a8>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 80089fc:	4ba4      	ldr	r3, [pc, #656]	@ (8008c90 <inicio+0x2ac>)
 80089fe:	2281      	movs	r2, #129	@ 0x81
 8008a00:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 8008a02:	4ba4      	ldr	r3, [pc, #656]	@ (8008c94 <inicio+0x2b0>)
 8008a04:	2278      	movs	r2, #120	@ 0x78
 8008a06:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8008a08:	4ba3      	ldr	r3, [pc, #652]	@ (8008c98 <inicio+0x2b4>)
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8008a0e:	4ba3      	ldr	r3, [pc, #652]	@ (8008c9c <inicio+0x2b8>)
 8008a10:	22c5      	movs	r2, #197	@ 0xc5
 8008a12:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8008a14:	4ba2      	ldr	r3, [pc, #648]	@ (8008ca0 <inicio+0x2bc>)
 8008a16:	22a4      	movs	r2, #164	@ 0xa4
 8008a18:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8008a1a:	4ba2      	ldr	r3, [pc, #648]	@ (8008ca4 <inicio+0x2c0>)
 8008a1c:	220f      	movs	r2, #15
 8008a1e:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008a20:	1cfb      	adds	r3, r7, #3
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e009      	b.n	8008a3c <inicio+0x58>
		cruze_por_cero[k] = 0;
 8008a28:	1cfb      	adds	r3, r7, #3
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	4a9e      	ldr	r2, [pc, #632]	@ (8008ca8 <inicio+0x2c4>)
 8008a2e:	2100      	movs	r1, #0
 8008a30:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008a32:	1cfb      	adds	r3, r7, #3
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	1cfb      	adds	r3, r7, #3
 8008a38:	3201      	adds	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	1cfb      	adds	r3, r7, #3
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d9f1      	bls.n	8008a28 <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008a44:	4b99      	ldr	r3, [pc, #612]	@ (8008cac <inicio+0x2c8>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008a4a:	4b99      	ldr	r3, [pc, #612]	@ (8008cb0 <inicio+0x2cc>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = reePlantilla[eeprotype];
 8008a50:	4b98      	ldr	r3, [pc, #608]	@ (8008cb4 <inicio+0x2d0>)
 8008a52:	2257      	movs	r2, #87	@ 0x57
 8008a54:	5c99      	ldrb	r1, [r3, r2]
 8008a56:	4b98      	ldr	r3, [pc, #608]	@ (8008cb8 <inicio+0x2d4>)
 8008a58:	2257      	movs	r2, #87	@ 0x57
 8008a5a:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 8008a5c:	4b97      	ldr	r3, [pc, #604]	@ (8008cbc <inicio+0x2d8>)
 8008a5e:	226e      	movs	r2, #110	@ 0x6e
 8008a60:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 8008a62:	4b95      	ldr	r3, [pc, #596]	@ (8008cb8 <inicio+0x2d4>)
 8008a64:	2257      	movs	r2, #87	@ 0x57
 8008a66:	5c9b      	ldrb	r3, [r3, r2]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d103      	bne.n	8008a74 <inicio+0x90>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8008a6c:	4b93      	ldr	r3, [pc, #588]	@ (8008cbc <inicio+0x2d8>)
 8008a6e:	22d2      	movs	r2, #210	@ 0xd2
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	e000      	b.n	8008a76 <inicio+0x92>
		goto no_ini_210;
 8008a74:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 8008a76:	4b92      	ldr	r3, [pc, #584]	@ (8008cc0 <inicio+0x2dc>)
 8008a78:	2201      	movs	r2, #1
 8008a7a:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8008a7c:	4b90      	ldr	r3, [pc, #576]	@ (8008cc0 <inicio+0x2dc>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 8008a82:	4b8f      	ldr	r3, [pc, #572]	@ (8008cc0 <inicio+0x2dc>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 8008a88:	4b8e      	ldr	r3, [pc, #568]	@ (8008cc4 <inicio+0x2e0>)
 8008a8a:	2296      	movs	r2, #150	@ 0x96
 8008a8c:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8008a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8008cc8 <inicio+0x2e4>)
 8008a90:	2296      	movs	r2, #150	@ 0x96
 8008a92:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 8008a94:	4b8d      	ldr	r3, [pc, #564]	@ (8008ccc <inicio+0x2e8>)
 8008a96:	2296      	movs	r2, #150	@ 0x96
 8008a98:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 8008a9a:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd0 <inicio+0x2ec>)
 8008a9c:	2296      	movs	r2, #150	@ 0x96
 8008a9e:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 8008aa0:	4b85      	ldr	r3, [pc, #532]	@ (8008cb8 <inicio+0x2d4>)
 8008aa2:	22aa      	movs	r2, #170	@ 0xaa
 8008aa4:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 8008aa6:	4b84      	ldr	r3, [pc, #528]	@ (8008cb8 <inicio+0x2d4>)
 8008aa8:	2241      	movs	r2, #65	@ 0x41
 8008aaa:	2166      	movs	r1, #102	@ 0x66
 8008aac:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 8008aae:	4b82      	ldr	r3, [pc, #520]	@ (8008cb8 <inicio+0x2d4>)
 8008ab0:	227f      	movs	r2, #127	@ 0x7f
 8008ab2:	21cc      	movs	r1, #204	@ 0xcc
 8008ab4:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = reePlantilla[eetimepaf];
 8008ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cb4 <inicio+0x2d0>)
 8008ab8:	2248      	movs	r2, #72	@ 0x48
 8008aba:	5c9a      	ldrb	r2, [r3, r2]
 8008abc:	4b85      	ldr	r3, [pc, #532]	@ (8008cd4 <inicio+0x2f0>)
 8008abe:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 8008ac0:	f7fe face 	bl	8007060 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 8008ac4:	f7fe fae8 	bl	8007098 <load_tiempoAhorro2>
	//timeSeconds_HW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix1) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix2));		//	ldw		X,eeTimeUnix1
																									//	ldw		timeSeconds_HW,X
	//timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
	//timeSeconds_LW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix3) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix4));		//	ldw		X,eeTimeUnix3
																										//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 8008ac8:	4b83      	ldr	r3, [pc, #524]	@ (8008cd8 <inicio+0x2f4>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 8008ace:	4b83      	ldr	r3, [pc, #524]	@ (8008cdc <inicio+0x2f8>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 8008ad4:	4b82      	ldr	r3, [pc, #520]	@ (8008ce0 <inicio+0x2fc>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 8008ada:	4b82      	ldr	r3, [pc, #520]	@ (8008ce4 <inicio+0x300>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 8008ae0:	4b81      	ldr	r3, [pc, #516]	@ (8008ce8 <inicio+0x304>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	70da      	strb	r2, [r3, #3]


	//timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
							//	ldw		X,#300;
	timeTxTWF = 20;
 8008ae6:	4b81      	ldr	r3, [pc, #516]	@ (8008cec <inicio+0x308>)
 8008ae8:	2214      	movs	r2, #20
 8008aea:	701a      	strb	r2, [r3, #0]
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 8008aec:	4b80      	ldr	r3, [pc, #512]	@ (8008cf0 <inicio+0x30c>)
 8008aee:	2296      	movs	r2, #150	@ 0x96
 8008af0:	0052      	lsls	r2, r2, #1
 8008af2:	801a      	strh	r2, [r3, #0]
	// carga tiempo de envio de token BLE
	//	mov		timeTxTBLE,#10;
	//	ldw		X,#300;
	//	ldw		timeoutTBLE,X
	timeTxTBLE = 10;
 8008af4:	4b7f      	ldr	r3, [pc, #508]	@ (8008cf4 <inicio+0x310>)
 8008af6:	220a      	movs	r2, #10
 8008af8:	701a      	strb	r2, [r3, #0]
	timeoutTBLE = 300;
 8008afa:	4b7f      	ldr	r3, [pc, #508]	@ (8008cf8 <inicio+0x314>)
 8008afc:	2296      	movs	r2, #150	@ 0x96
 8008afe:	0052      	lsls	r2, r2, #1
 8008b00:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 8008b02:	4b7e      	ldr	r3, [pc, #504]	@ (8008cfc <inicio+0x318>)
 8008b04:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	781a      	ldrb	r2, [r3, #0]
 8008b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8008d00 <inicio+0x31c>)
 8008b0c:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 8008b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8008d00 <inicio+0x31c>)
 8008b10:	781a      	ldrb	r2, [r3, #0]
 8008b12:	4b7c      	ldr	r3, [pc, #496]	@ (8008d04 <inicio+0x320>)
 8008b14:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008b16:	4b7c      	ldr	r3, [pc, #496]	@ (8008d08 <inicio+0x324>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d0c <inicio+0x328>)
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d103      	bne.n	8008b2c <inicio+0x148>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8008b24:	4b78      	ldr	r3, [pc, #480]	@ (8008d08 <inicio+0x324>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 8008b2a:	e015      	b.n	8008b58 <inicio+0x174>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 8008b2c:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 8008b2e:	4b76      	ldr	r3, [pc, #472]	@ (8008d08 <inicio+0x324>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	4b74      	ldr	r3, [pc, #464]	@ (8008d08 <inicio+0x324>)
 8008b38:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3380      	adds	r3, #128	@ 0x80
 8008b3e:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	4b6e      	ldr	r3, [pc, #440]	@ (8008d00 <inicio+0x31c>)
 8008b46:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 8008b48:	4b6d      	ldr	r3, [pc, #436]	@ (8008d00 <inicio+0x31c>)
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	4b6d      	ldr	r3, [pc, #436]	@ (8008d04 <inicio+0x320>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d100      	bne.n	8008b56 <inicio+0x172>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 8008b54:	e7e2      	b.n	8008b1c <inicio+0x138>
	}
lastDataBlockFound:
 8008b56:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 8008b58:	4b6b      	ldr	r3, [pc, #428]	@ (8008d08 <inicio+0x324>)
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8008d10 <inicio+0x32c>)
 8008b5e:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 8008b60:	4b6b      	ldr	r3, [pc, #428]	@ (8008d10 <inicio+0x32c>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	01db      	lsls	r3, r3, #7
 8008b66:	001a      	movs	r2, r3
 8008b68:	4b6a      	ldr	r3, [pc, #424]	@ (8008d14 <inicio+0x330>)
 8008b6a:	18d3      	adds	r3, r2, r3
 8008b6c:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	337e      	adds	r3, #126	@ 0x7e
 8008b72:	607b      	str	r3, [r7, #4]

	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	781a      	ldrb	r2, [r3, #0]
 8008b78:	4b67      	ldr	r3, [pc, #412]	@ (8008d18 <inicio+0x334>)
 8008b7a:	701a      	strb	r2, [r3, #0]

	dirBuffer = &data_buffer[0];
 8008b7c:	4b67      	ldr	r3, [pc, #412]	@ (8008d1c <inicio+0x338>)
 8008b7e:	4a68      	ldr	r2, [pc, #416]	@ (8008d20 <inicio+0x33c>)
 8008b80:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 8008b82:	4b68      	ldr	r3, [pc, #416]	@ (8008d24 <inicio+0x340>)
 8008b84:	4a63      	ldr	r2, [pc, #396]	@ (8008d14 <inicio+0x330>)
 8008b86:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8008b88:	4b61      	ldr	r3, [pc, #388]	@ (8008d10 <inicio+0x32c>)
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	4b53      	ldr	r3, [pc, #332]	@ (8008cdc <inicio+0x2f8>)
 8008b8e:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 8008b90:	f7fe fab0 	bl	80070f4 <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 8008b94:	4b64      	ldr	r3, [pc, #400]	@ (8008d28 <inicio+0x344>)
 8008b96:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	4b58      	ldr	r3, [pc, #352]	@ (8008d00 <inicio+0x31c>)
 8008b9e:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 8008ba0:	4b57      	ldr	r3, [pc, #348]	@ (8008d00 <inicio+0x31c>)
 8008ba2:	781a      	ldrb	r2, [r3, #0]
 8008ba4:	4b57      	ldr	r3, [pc, #348]	@ (8008d04 <inicio+0x320>)
 8008ba6:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008ba8:	4b57      	ldr	r3, [pc, #348]	@ (8008d08 <inicio+0x324>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8008d2c <inicio+0x348>)
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d103      	bne.n	8008bbe <inicio+0x1da>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8008bb6:	4b54      	ldr	r3, [pc, #336]	@ (8008d08 <inicio+0x324>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 8008bbc:	e015      	b.n	8008bea <inicio+0x206>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 8008bbe:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 8008bc0:	4b51      	ldr	r3, [pc, #324]	@ (8008d08 <inicio+0x324>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8008d08 <inicio+0x324>)
 8008bca:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3380      	adds	r3, #128	@ 0x80
 8008bd0:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8008d00 <inicio+0x31c>)
 8008bd8:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 8008bda:	4b49      	ldr	r3, [pc, #292]	@ (8008d00 <inicio+0x31c>)
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	4b49      	ldr	r3, [pc, #292]	@ (8008d04 <inicio+0x320>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d100      	bne.n	8008be8 <inicio+0x204>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 8008be6:	e7e2      	b.n	8008bae <inicio+0x1ca>
		}
lastEventBlockFound:
 8008be8:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 8008bea:	4b47      	ldr	r3, [pc, #284]	@ (8008d08 <inicio+0x324>)
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	4b50      	ldr	r3, [pc, #320]	@ (8008d30 <inicio+0x34c>)
 8008bf0:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8008bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8008d30 <inicio+0x34c>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	01db      	lsls	r3, r3, #7
 8008bf8:	001a      	movs	r2, r3
 8008bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8008d34 <inicio+0x350>)
 8008bfc:	18d3      	adds	r3, r2, r3
 8008bfe:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	337e      	adds	r3, #126	@ 0x7e
 8008c04:	607b      	str	r3, [r7, #4]

		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d38 <inicio+0x354>)
 8008c0c:	701a      	strb	r2, [r3, #0]

		dirBuffer = &event_buffer[0];
 8008c0e:	4b43      	ldr	r3, [pc, #268]	@ (8008d1c <inicio+0x338>)
 8008c10:	4a4a      	ldr	r2, [pc, #296]	@ (8008d3c <inicio+0x358>)
 8008c12:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 8008c14:	4b43      	ldr	r3, [pc, #268]	@ (8008d24 <inicio+0x340>)
 8008c16:	4a47      	ldr	r2, [pc, #284]	@ (8008d34 <inicio+0x350>)
 8008c18:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 8008c1a:	4b45      	ldr	r3, [pc, #276]	@ (8008d30 <inicio+0x34c>)
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008cdc <inicio+0x2f8>)
 8008c20:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 8008c22:	f7fe fa67 	bl	80070f4 <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 8008c26:	4b46      	ldr	r3, [pc, #280]	@ (8008d40 <inicio+0x35c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 8008c2c:	4b44      	ldr	r3, [pc, #272]	@ (8008d40 <inicio+0x35c>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	719a      	strb	r2, [r3, #6]
		uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8008c32:	1cbb      	adds	r3, r7, #2
 8008c34:	4a43      	ldr	r2, [pc, #268]	@ (8008d44 <inicio+0x360>)
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	701a      	strb	r2, [r3, #0]
		if(!GetRegFlagState(estado1_Aux, est1Lamp)){
 8008c3a:	1cbb      	adds	r3, r7, #2
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2204      	movs	r2, #4
 8008c40:	4013      	ands	r3, r2
 8008c42:	d003      	beq.n	8008c4c <inicio+0x268>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 8008c44:	4b3e      	ldr	r3, [pc, #248]	@ (8008d40 <inicio+0x35c>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	719a      	strb	r2, [r3, #6]
 8008c4a:	e000      	b.n	8008c4e <inicio+0x26a>
			goto initLampOFF;
 8008c4c:	46c0      	nop			@ (mov r8, r8)
initLampOFF:
		if(GetRegFlagState(Plantilla[logicos2], funReleDesh))//btjt		logicos2,#funReleDesh,deshTypeAct_02; omite estado Lock sí se eligio función deshielo para relevador
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <inicio+0x2d4>)
 8008c50:	225b      	movs	r2, #91	@ 0x5b
 8008c52:	5c9b      	ldrb	r3, [r3, r2]
 8008c54:	001a      	movs	r2, r3
 8008c56:	2308      	movs	r3, #8
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d10b      	bne.n	8008c74 <inicio+0x290>
			goto deshTypeAct_02;
		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 8008c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8008d48 <inicio+0x364>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(estado1_Aux, est1LockDr)){
 8008c62:	1cbb      	adds	r3, r7, #2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2240      	movs	r2, #64	@ 0x40
 8008c68:	4013      	ands	r3, r2
 8008c6a:	d005      	beq.n	8008c78 <inicio+0x294>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 8008c6c:	4b36      	ldr	r3, [pc, #216]	@ (8008d48 <inicio+0x364>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	705a      	strb	r2, [r3, #1]
 8008c72:	e002      	b.n	8008c7a <inicio+0x296>
			goto deshTypeAct_02;
 8008c74:	46c0      	nop			@ (mov r8, r8)
 8008c76:	e000      	b.n	8008c7a <inicio+0x296>
			goto initLockDrOFF;
 8008c78:	46c0      	nop			@ (mov r8, r8)
initLockDrOFF:
deshTypeAct_02:
//		ldw			X,#90
//		ldw			cntSetName,X
		cntSetName = 90;
 8008c7a:	4b34      	ldr	r3, [pc, #208]	@ (8008d4c <inicio+0x368>)
 8008c7c:	225a      	movs	r2, #90	@ 0x5a
 8008c7e:	801a      	strh	r2, [r3, #0]
	//jp	end_init
}
 8008c80:	46c0      	nop			@ (mov r8, r8)
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b002      	add	sp, #8
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000b88 	.word	0x20000b88
 8008c8c:	20000b5f 	.word	0x20000b5f
 8008c90:	20000bda 	.word	0x20000bda
 8008c94:	20000bdb 	.word	0x20000bdb
 8008c98:	20000c67 	.word	0x20000c67
 8008c9c:	20000c68 	.word	0x20000c68
 8008ca0:	20000c66 	.word	0x20000c66
 8008ca4:	20000c69 	.word	0x20000c69
 8008ca8:	20000c6c 	.word	0x20000c6c
 8008cac:	20000c71 	.word	0x20000c71
 8008cb0:	20000c72 	.word	0x20000c72
 8008cb4:	20000c9c 	.word	0x20000c9c
 8008cb8:	200000b8 	.word	0x200000b8
 8008cbc:	20000bde 	.word	0x20000bde
 8008cc0:	20000bf8 	.word	0x20000bf8
 8008cc4:	20000c20 	.word	0x20000c20
 8008cc8:	20000c21 	.word	0x20000c21
 8008ccc:	20000c22 	.word	0x20000c22
 8008cd0:	20000c23 	.word	0x20000c23
 8008cd4:	20000c37 	.word	0x20000c37
 8008cd8:	20000e34 	.word	0x20000e34
 8008cdc:	20000e36 	.word	0x20000e36
 8008ce0:	20000e37 	.word	0x20000e37
 8008ce4:	20000e38 	.word	0x20000e38
 8008ce8:	20000f64 	.word	0x20000f64
 8008cec:	20000fd6 	.word	0x20000fd6
 8008cf0:	20000fe8 	.word	0x20000fe8
 8008cf4:	20001196 	.word	0x20001196
 8008cf8:	20001198 	.word	0x20001198
 8008cfc:	0803c07f 	.word	0x0803c07f
 8008d00:	200008e4 	.word	0x200008e4
 8008d04:	20000b67 	.word	0x20000b67
 8008d08:	20000b66 	.word	0x20000b66
 8008d0c:	0803efff 	.word	0x0803efff
 8008d10:	20000e49 	.word	0x20000e49
 8008d14:	0803c000 	.word	0x0803c000
 8008d18:	20000e48 	.word	0x20000e48
 8008d1c:	20000e40 	.word	0x20000e40
 8008d20:	20000d28 	.word	0x20000d28
 8008d24:	20000e3c 	.word	0x20000e3c
 8008d28:	0803707f 	.word	0x0803707f
 8008d2c:	0803bfff 	.word	0x0803bfff
 8008d30:	20000e4b 	.word	0x20000e4b
 8008d34:	08037000 	.word	0x08037000
 8008d38:	20000e4a 	.word	0x20000e4a
 8008d3c:	20000da8 	.word	0x20000da8
 8008d40:	20000c4c 	.word	0x20000c4c
 8008d44:	200001ba 	.word	0x200001ba
 8008d48:	20000bb4 	.word	0x20000bb4
 8008d4c:	20001194 	.word	0x20001194

08008d50 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 8008d54:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd4 <timeBCD_to_UNIX+0x84>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 f853 	bl	8008e04 <BCDtoByte>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	22fa      	movs	r2, #250	@ 0xfa
 8008d62:	00d2      	lsls	r2, r2, #3
 8008d64:	4694      	mov	ip, r2
 8008d66:	4463      	add	r3, ip
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd8 <timeBCD_to_UNIX+0x88>)
 8008d6c:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 8008d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ddc <timeBCD_to_UNIX+0x8c>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	221f      	movs	r2, #31
 8008d74:	4013      	ands	r3, r2
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f000 f843 	bl	8008e04 <BCDtoByte>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	001a      	movs	r2, r3
 8008d82:	4b17      	ldr	r3, [pc, #92]	@ (8008de0 <timeBCD_to_UNIX+0x90>)
 8008d84:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 8008d86:	4b17      	ldr	r3, [pc, #92]	@ (8008de4 <timeBCD_to_UNIX+0x94>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 f83a 	bl	8008e04 <BCDtoByte>
 8008d90:	0003      	movs	r3, r0
 8008d92:	001a      	movs	r2, r3
 8008d94:	4b14      	ldr	r3, [pc, #80]	@ (8008de8 <timeBCD_to_UNIX+0x98>)
 8008d96:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 8008d98:	4b14      	ldr	r3, [pc, #80]	@ (8008dec <timeBCD_to_UNIX+0x9c>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f000 f831 	bl	8008e04 <BCDtoByte>
 8008da2:	0003      	movs	r3, r0
 8008da4:	001a      	movs	r2, r3
 8008da6:	4b12      	ldr	r3, [pc, #72]	@ (8008df0 <timeBCD_to_UNIX+0xa0>)
 8008da8:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 8008daa:	4b12      	ldr	r3, [pc, #72]	@ (8008df4 <timeBCD_to_UNIX+0xa4>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	0018      	movs	r0, r3
 8008db0:	f000 f828 	bl	8008e04 <BCDtoByte>
 8008db4:	0003      	movs	r3, r0
 8008db6:	001a      	movs	r2, r3
 8008db8:	4b0f      	ldr	r3, [pc, #60]	@ (8008df8 <timeBCD_to_UNIX+0xa8>)
 8008dba:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <timeBCD_to_UNIX+0xac>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f000 f81f 	bl	8008e04 <BCDtoByte>
 8008dc6:	0003      	movs	r3, r0
 8008dc8:	001a      	movs	r2, r3
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <timeBCD_to_UNIX+0xb0>)
 8008dcc:	701a      	strb	r2, [r3, #0]
}
 8008dce:	46c0      	nop			@ (mov r8, r8)
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	2000110c 	.word	0x2000110c
 8008dd8:	2000112c 	.word	0x2000112c
 8008ddc:	2000110d 	.word	0x2000110d
 8008de0:	2000112e 	.word	0x2000112e
 8008de4:	2000110e 	.word	0x2000110e
 8008de8:	2000112f 	.word	0x2000112f
 8008dec:	2000110f 	.word	0x2000110f
 8008df0:	20001130 	.word	0x20001130
 8008df4:	20001110 	.word	0x20001110
 8008df8:	20001131 	.word	0x20001131
 8008dfc:	20001111 	.word	0x20001111
 8008e00:	20001132 	.word	0x20001132

08008e04 <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	0002      	movs	r2, r0
 8008e0c:	1dfb      	adds	r3, r7, #7
 8008e0e:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8008e10:	1dfb      	adds	r3, r7, #7
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	220f      	movs	r2, #15
 8008e16:	4013      	ands	r3, r2
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	1dfb      	adds	r3, r7, #7
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	091b      	lsrs	r3, r3, #4
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	1c19      	adds	r1, r3, #0
 8008e24:	0089      	lsls	r1, r1, #2
 8008e26:	18cb      	adds	r3, r1, r3
 8008e28:	18db      	adds	r3, r3, r3
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	18d3      	adds	r3, r2, r3
 8008e2e:	b2db      	uxtb	r3, r3

}
 8008e30:	0018      	movs	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b002      	add	sp, #8
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <logger>:





void logger (void){
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 8008e3c:	4bb9      	ldr	r3, [pc, #740]	@ (8009124 <logger+0x2ec>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d800      	bhi.n	8008e46 <logger+0xe>
 8008e44:	e302      	b.n	800944c <logger+0x614>
			goto logger_01;//jruge	logger_01;
 8008e46:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 8008e48:	4bb7      	ldr	r3, [pc, #732]	@ (8009128 <logger+0x2f0>)
 8008e4a:	79db      	ldrb	r3, [r3, #7]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d118      	bne.n	8008e82 <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8008e50:	4bb6      	ldr	r3, [pc, #728]	@ (800912c <logger+0x2f4>)
 8008e52:	2257      	movs	r2, #87	@ 0x57
 8008e54:	5c9b      	ldrb	r3, [r3, r2]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d005      	beq.n	8008e66 <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 8008e5a:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 8008e5c:	4bb4      	ldr	r3, [pc, #720]	@ (8009130 <logger+0x2f8>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b45      	cmp	r3, #69	@ 0x45
 8008e62:	d90a      	bls.n	8008e7a <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8008e64:	e005      	b.n	8008e72 <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8008e66:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8008e68:	4bb1      	ldr	r3, [pc, #708]	@ (8009130 <logger+0x2f8>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2ba9      	cmp	r3, #169	@ 0xa9
 8008e6e:	d906      	bls.n	8008e7e <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8008e70:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8008e72:	4bad      	ldr	r3, [pc, #692]	@ (8009128 <logger+0x2f0>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8008e78:	e2e9      	b.n	800944e <logger+0x616>
		goto voltArranFAIL;//jra	voltArranFAIL
 8008e7a:	46c0      	nop			@ (mov r8, r8)
 8008e7c:	e2e7      	b.n	800944e <logger+0x616>
		goto voltArranFAIL;//jra voltArranFAIL
 8008e7e:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008e80:	e2e5      	b.n	800944e <logger+0x616>
			goto voltFlagOK;
 8008e82:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(flagsWIFI[f_eventLoggerSend])	//btjt		flagsWIFI,#f_eventLoggerSend,event_logg_01; No loggear hasta terminar Tx
 8008e84:	4bab      	ldr	r3, [pc, #684]	@ (8009134 <logger+0x2fc>)
 8008e86:	789b      	ldrb	r3, [r3, #2]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d107      	bne.n	8008e9c <logger+0x64>
			goto event_logg_01;
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8008e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8009128 <logger+0x2f0>)
 8008e8e:	791b      	ldrb	r3, [r3, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	4053      	eors	r3, r2
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <logger+0x68>
			goto door_event;
		}
event_logg_01:
 8008e9a:	e000      	b.n	8008e9e <logger+0x66>
			goto event_logg_01;
 8008e9c:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; // jp fin_logger
 8008e9e:	e2d6      	b.n	800944e <logger+0x616>
			goto door_event;
 8008ea0:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8008ea2:	4ba5      	ldr	r3, [pc, #660]	@ (8009138 <logger+0x300>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d136      	bne.n	8008f18 <logger+0xe0>
			goto ask_DE_end;
		}
ask_DE_start:
 8008eaa:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8008eac:	4ba3      	ldr	r3, [pc, #652]	@ (800913c <logger+0x304>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d068      	beq.n	8008f86 <logger+0x14e>
			goto ask_DE_start_01;
 8008eb4:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8008eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8009140 <logger+0x308>)
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	4ba0      	ldr	r3, [pc, #640]	@ (8009144 <logger+0x30c>)
 8008ec2:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8008ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8009140 <logger+0x308>)
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	4b9e      	ldr	r3, [pc, #632]	@ (8009144 <logger+0x30c>)
 8008ecc:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8008ece:	4b9e      	ldr	r3, [pc, #632]	@ (8009148 <logger+0x310>)
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8009144 <logger+0x30c>)
 8008eda:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008edc:	4b9a      	ldr	r3, [pc, #616]	@ (8009148 <logger+0x310>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	4b98      	ldr	r3, [pc, #608]	@ (8009144 <logger+0x30c>)
 8008ee4:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8008ee6:	4b97      	ldr	r3, [pc, #604]	@ (8009144 <logger+0x30c>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8008eec:	4b97      	ldr	r3, [pc, #604]	@ (800914c <logger+0x314>)
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	4b94      	ldr	r3, [pc, #592]	@ (8009144 <logger+0x30c>)
 8008ef2:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8008ef4:	4b96      	ldr	r3, [pc, #600]	@ (8009150 <logger+0x318>)
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	4b92      	ldr	r3, [pc, #584]	@ (8009144 <logger+0x30c>)
 8008efa:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8008efc:	4b8c      	ldr	r3, [pc, #560]	@ (8009130 <logger+0x2f8>)
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4b90      	ldr	r3, [pc, #576]	@ (8009144 <logger+0x30c>)
 8008f02:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8008f04:	4b8c      	ldr	r3, [pc, #560]	@ (8009138 <logger+0x300>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8008f0a:	4b88      	ldr	r3, [pc, #544]	@ (800912c <logger+0x2f4>)
 8008f0c:	2250      	movs	r2, #80	@ 0x50
 8008f0e:	5c9b      	ldrb	r3, [r3, r2]
 8008f10:	001a      	movs	r2, r3
 8008f12:	4b90      	ldr	r3, [pc, #576]	@ (8009154 <logger+0x31c>)
 8008f14:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8008f16:	e039      	b.n	8008f8c <logger+0x154>
			goto ask_DE_end;
 8008f18:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8008f1a:	4b88      	ldr	r3, [pc, #544]	@ (800913c <logger+0x304>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d133      	bne.n	8008f8a <logger+0x152>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8008f22:	4b8c      	ldr	r3, [pc, #560]	@ (8009154 <logger+0x31c>)
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <logger+0xfa>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8008f2a:	4b83      	ldr	r3, [pc, #524]	@ (8009138 <logger+0x300>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8008f30:	e02c      	b.n	8008f8c <logger+0x154>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8008f32:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8008f34:	4b82      	ldr	r3, [pc, #520]	@ (8009140 <logger+0x308>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	0a1b      	lsrs	r3, r3, #8
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	4b81      	ldr	r3, [pc, #516]	@ (8009144 <logger+0x30c>)
 8008f40:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8008f42:	4b7f      	ldr	r3, [pc, #508]	@ (8009140 <logger+0x308>)
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	4b7e      	ldr	r3, [pc, #504]	@ (8009144 <logger+0x30c>)
 8008f4a:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8009148 <logger+0x310>)
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4b7b      	ldr	r3, [pc, #492]	@ (8009144 <logger+0x30c>)
 8008f58:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8009148 <logger+0x310>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	4b78      	ldr	r3, [pc, #480]	@ (8009144 <logger+0x30c>)
 8008f62:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8008f64:	4b7c      	ldr	r3, [pc, #496]	@ (8009158 <logger+0x320>)
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	4b76      	ldr	r3, [pc, #472]	@ (8009144 <logger+0x30c>)
 8008f6a:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800915c <logger+0x324>)
 8008f6e:	781a      	ldrb	r2, [r3, #0]
 8008f70:	4b74      	ldr	r3, [pc, #464]	@ (8009144 <logger+0x30c>)
 8008f72:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8008f74:	4b7a      	ldr	r3, [pc, #488]	@ (8009160 <logger+0x328>)
 8008f76:	4a7b      	ldr	r2, [pc, #492]	@ (8009164 <logger+0x32c>)
 8008f78:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8008f7a:	f000 fabf 	bl	80094fc <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8008f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8009138 <logger+0x300>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8008f84:	e002      	b.n	8008f8c <logger+0x154>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8008f86:	46c0      	nop			@ (mov r8, r8)
 8008f88:	e000      	b.n	8008f8c <logger+0x154>
			goto comp_event;
 8008f8a:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8008f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8009138 <logger+0x300>)
 8008f8e:	785b      	ldrb	r3, [r3, #1]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d130      	bne.n	8008ff6 <logger+0x1be>
			goto ask_CE_end;
		}
ask_CE_start:
 8008f94:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8008f96:	4b74      	ldr	r3, [pc, #464]	@ (8009168 <logger+0x330>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d05a      	beq.n	8009054 <logger+0x21c>
			goto ask_CE_start_01;
 8008f9e:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8008fa0:	4b67      	ldr	r3, [pc, #412]	@ (8009140 <logger+0x308>)
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	4b70      	ldr	r3, [pc, #448]	@ (800916c <logger+0x334>)
 8008fac:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8008fae:	4b64      	ldr	r3, [pc, #400]	@ (8009140 <logger+0x308>)
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800916c <logger+0x334>)
 8008fb6:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8008fb8:	4b63      	ldr	r3, [pc, #396]	@ (8009148 <logger+0x310>)
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800916c <logger+0x334>)
 8008fc4:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008fc6:	4b60      	ldr	r3, [pc, #384]	@ (8009148 <logger+0x310>)
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	4b67      	ldr	r3, [pc, #412]	@ (800916c <logger+0x334>)
 8008fce:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8008fd0:	4b66      	ldr	r3, [pc, #408]	@ (800916c <logger+0x334>)
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8008fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800914c <logger+0x314>)
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	4b64      	ldr	r3, [pc, #400]	@ (800916c <logger+0x334>)
 8008fdc:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8008fde:	4b5c      	ldr	r3, [pc, #368]	@ (8009150 <logger+0x318>)
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	4b62      	ldr	r3, [pc, #392]	@ (800916c <logger+0x334>)
 8008fe4:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8008fe6:	4b52      	ldr	r3, [pc, #328]	@ (8009130 <logger+0x2f8>)
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	4b60      	ldr	r3, [pc, #384]	@ (800916c <logger+0x334>)
 8008fec:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8008fee:	4b52      	ldr	r3, [pc, #328]	@ (8009138 <logger+0x300>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8008ff4:	e031      	b.n	800905a <logger+0x222>
			goto ask_CE_end;
 8008ff6:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8008ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8009168 <logger+0x330>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d12b      	bne.n	8009058 <logger+0x220>
			goto desh_event;
		}
comp_event_end:
 8009000:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8009002:	4b4f      	ldr	r3, [pc, #316]	@ (8009140 <logger+0x308>)
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	b29b      	uxth	r3, r3
 800900a:	b2da      	uxtb	r2, r3
 800900c:	4b57      	ldr	r3, [pc, #348]	@ (800916c <logger+0x334>)
 800900e:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8009010:	4b4b      	ldr	r3, [pc, #300]	@ (8009140 <logger+0x308>)
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b55      	ldr	r3, [pc, #340]	@ (800916c <logger+0x334>)
 8009018:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 800901a:	4b4b      	ldr	r3, [pc, #300]	@ (8009148 <logger+0x310>)
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	b29b      	uxth	r3, r3
 8009022:	b2da      	uxtb	r2, r3
 8009024:	4b51      	ldr	r3, [pc, #324]	@ (800916c <logger+0x334>)
 8009026:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8009028:	4b47      	ldr	r3, [pc, #284]	@ (8009148 <logger+0x310>)
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	4b4f      	ldr	r3, [pc, #316]	@ (800916c <logger+0x334>)
 8009030:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8009032:	4b49      	ldr	r3, [pc, #292]	@ (8009158 <logger+0x320>)
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	4b4d      	ldr	r3, [pc, #308]	@ (800916c <logger+0x334>)
 8009038:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 800903a:	4b48      	ldr	r3, [pc, #288]	@ (800915c <logger+0x324>)
 800903c:	781a      	ldrb	r2, [r3, #0]
 800903e:	4b4b      	ldr	r3, [pc, #300]	@ (800916c <logger+0x334>)
 8009040:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8009042:	4b47      	ldr	r3, [pc, #284]	@ (8009160 <logger+0x328>)
 8009044:	4a4a      	ldr	r2, [pc, #296]	@ (8009170 <logger+0x338>)
 8009046:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8009048:	f000 fa58 	bl	80094fc <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 800904c:	4b3a      	ldr	r3, [pc, #232]	@ (8009138 <logger+0x300>)
 800904e:	2200      	movs	r2, #0
 8009050:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8009052:	e002      	b.n	800905a <logger+0x222>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8009054:	46c0      	nop			@ (mov r8, r8)
 8009056:	e000      	b.n	800905a <logger+0x222>
			goto desh_event;
 8009058:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 800905a:	4b37      	ldr	r3, [pc, #220]	@ (8009138 <logger+0x300>)
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d12f      	bne.n	80090c2 <logger+0x28a>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8009062:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8009064:	4b2f      	ldr	r3, [pc, #188]	@ (8009124 <logger+0x2ec>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b03      	cmp	r3, #3
 800906a:	d159      	bne.n	8009120 <logger+0x2e8>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 800906c:	4b34      	ldr	r3, [pc, #208]	@ (8009140 <logger+0x308>)
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	0a1b      	lsrs	r3, r3, #8
 8009072:	b29b      	uxth	r3, r3
 8009074:	b2da      	uxtb	r2, r3
 8009076:	4b3f      	ldr	r3, [pc, #252]	@ (8009174 <logger+0x33c>)
 8009078:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 800907a:	4b31      	ldr	r3, [pc, #196]	@ (8009140 <logger+0x308>)
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b2da      	uxtb	r2, r3
 8009080:	4b3c      	ldr	r3, [pc, #240]	@ (8009174 <logger+0x33c>)
 8009082:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8009084:	4b30      	ldr	r3, [pc, #192]	@ (8009148 <logger+0x310>)
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	b29b      	uxth	r3, r3
 800908c:	b2da      	uxtb	r2, r3
 800908e:	4b39      	ldr	r3, [pc, #228]	@ (8009174 <logger+0x33c>)
 8009090:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8009092:	4b2d      	ldr	r3, [pc, #180]	@ (8009148 <logger+0x310>)
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	4b36      	ldr	r3, [pc, #216]	@ (8009174 <logger+0x33c>)
 800909a:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 800909c:	4b35      	ldr	r3, [pc, #212]	@ (8009174 <logger+0x33c>)
 800909e:	2203      	movs	r2, #3
 80090a0:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 80090a2:	4b2a      	ldr	r3, [pc, #168]	@ (800914c <logger+0x314>)
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	4b33      	ldr	r3, [pc, #204]	@ (8009174 <logger+0x33c>)
 80090a8:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 80090aa:	4b29      	ldr	r3, [pc, #164]	@ (8009150 <logger+0x318>)
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	4b31      	ldr	r3, [pc, #196]	@ (8009174 <logger+0x33c>)
 80090b0:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 80090b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009130 <logger+0x2f8>)
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009174 <logger+0x33c>)
 80090b8:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 80090ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009138 <logger+0x300>)
 80090bc:	2201      	movs	r2, #1
 80090be:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 80090c0:	e05d      	b.n	800917e <logger+0x346>
			goto ask_DhE_end;
 80090c2:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 80090c4:	4b17      	ldr	r3, [pc, #92]	@ (8009124 <logger+0x2ec>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d057      	beq.n	800917c <logger+0x344>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 80090cc:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 80090ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009140 <logger+0x308>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	4b26      	ldr	r3, [pc, #152]	@ (8009174 <logger+0x33c>)
 80090da:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 80090dc:	4b18      	ldr	r3, [pc, #96]	@ (8009140 <logger+0x308>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b24      	ldr	r3, [pc, #144]	@ (8009174 <logger+0x33c>)
 80090e4:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 80090e6:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <logger+0x310>)
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	0a1b      	lsrs	r3, r3, #8
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	4b20      	ldr	r3, [pc, #128]	@ (8009174 <logger+0x33c>)
 80090f2:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 80090f4:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <logger+0x310>)
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009174 <logger+0x33c>)
 80090fc:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 80090fe:	4b16      	ldr	r3, [pc, #88]	@ (8009158 <logger+0x320>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4b1c      	ldr	r3, [pc, #112]	@ (8009174 <logger+0x33c>)
 8009104:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8009106:	4b15      	ldr	r3, [pc, #84]	@ (800915c <logger+0x324>)
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	4b1a      	ldr	r3, [pc, #104]	@ (8009174 <logger+0x33c>)
 800910c:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 800910e:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <logger+0x328>)
 8009110:	4a19      	ldr	r2, [pc, #100]	@ (8009178 <logger+0x340>)
 8009112:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8009114:	f000 f9f2 	bl	80094fc <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8009118:	4b07      	ldr	r3, [pc, #28]	@ (8009138 <logger+0x300>)
 800911a:	2200      	movs	r2, #0
 800911c:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 800911e:	e02e      	b.n	800917e <logger+0x346>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8009120:	46c0      	nop			@ (mov r8, r8)
 8009122:	e02c      	b.n	800917e <logger+0x346>
 8009124:	20000ba8 	.word	0x20000ba8
 8009128:	20000ea0 	.word	0x20000ea0
 800912c:	200000b8 	.word	0x200000b8
 8009130:	20000bde 	.word	0x20000bde
 8009134:	20000fec 	.word	0x20000fec
 8009138:	20000f64 	.word	0x20000f64
 800913c:	20000c4c 	.word	0x20000c4c
 8009140:	20000e4c 	.word	0x20000e4c
 8009144:	20000f88 	.word	0x20000f88
 8009148:	20000e4e 	.word	0x20000e4e
 800914c:	20000bc0 	.word	0x20000bc0
 8009150:	20000bc1 	.word	0x20000bc1
 8009154:	20000f74 	.word	0x20000f74
 8009158:	20000bc2 	.word	0x20000bc2
 800915c:	20000bc3 	.word	0x20000bc3
 8009160:	20000e44 	.word	0x20000e44
 8009164:	20000f8c 	.word	0x20000f8c
 8009168:	20000bb4 	.word	0x20000bb4
 800916c:	20000f9c 	.word	0x20000f9c
 8009170:	20000fa0 	.word	0x20000fa0
 8009174:	20000fb0 	.word	0x20000fb0
 8009178:	20000fb4 	.word	0x20000fb4
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 800917c:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 800917e:	4bb5      	ldr	r3, [pc, #724]	@ (8009454 <logger+0x61c>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d14c      	bne.n	8009220 <logger+0x3e8>
			//goto alarm_event;//	jrne	alarm_event
			goto wifi_event;
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8009186:	4bb4      	ldr	r3, [pc, #720]	@ (8009458 <logger+0x620>)
 8009188:	78db      	ldrb	r3, [r3, #3]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d04a      	beq.n	8009224 <logger+0x3ec>
			goto power_event_end;
 800918e:	46c0      	nop			@ (mov r8, r8)
//		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
//		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
//		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
//		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio

		BloqEventPwrOn[EPo_timeInit_4] = reeTimeUnix1;		//ldw	X,eeTimeUnix1
 8009190:	4bb2      	ldr	r3, [pc, #712]	@ (800945c <logger+0x624>)
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	4bb2      	ldr	r3, [pc, #712]	@ (8009460 <logger+0x628>)
 8009196:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = reeTimeUnix2;		//ldw	EPo_timeInit_HW,X
 8009198:	4bb2      	ldr	r3, [pc, #712]	@ (8009464 <logger+0x62c>)
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	4bb0      	ldr	r3, [pc, #704]	@ (8009460 <logger+0x628>)
 800919e:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = reeTimeUnix3;		//ldw	X,eeTimeUnix3
 80091a0:	4bb1      	ldr	r3, [pc, #708]	@ (8009468 <logger+0x630>)
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	4bae      	ldr	r3, [pc, #696]	@ (8009460 <logger+0x628>)
 80091a6:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = reeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 80091a8:	4bb0      	ldr	r3, [pc, #704]	@ (800946c <logger+0x634>)
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	4bac      	ldr	r3, [pc, #688]	@ (8009460 <logger+0x628>)
 80091ae:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 80091b0:	4bab      	ldr	r3, [pc, #684]	@ (8009460 <logger+0x628>)
 80091b2:	2204      	movs	r2, #4
 80091b4:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 80091b6:	4bae      	ldr	r3, [pc, #696]	@ (8009470 <logger+0x638>)
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	4ba9      	ldr	r3, [pc, #676]	@ (8009460 <logger+0x628>)
 80091bc:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 80091be:	4bad      	ldr	r3, [pc, #692]	@ (8009474 <logger+0x63c>)
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	4ba7      	ldr	r3, [pc, #668]	@ (8009460 <logger+0x628>)
 80091c4:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 80091c6:	4bac      	ldr	r3, [pc, #688]	@ (8009478 <logger+0x640>)
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	4ba5      	ldr	r3, [pc, #660]	@ (8009460 <logger+0x628>)
 80091cc:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 80091ce:	4bab      	ldr	r3, [pc, #684]	@ (800947c <logger+0x644>)
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	0a1b      	lsrs	r3, r3, #8
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	4ba1      	ldr	r3, [pc, #644]	@ (8009460 <logger+0x628>)
 80091da:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 80091dc:	4ba7      	ldr	r3, [pc, #668]	@ (800947c <logger+0x644>)
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	4b9f      	ldr	r3, [pc, #636]	@ (8009460 <logger+0x628>)
 80091e4:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 80091e6:	4ba6      	ldr	r3, [pc, #664]	@ (8009480 <logger+0x648>)
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	4b9b      	ldr	r3, [pc, #620]	@ (8009460 <logger+0x628>)
 80091f2:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 80091f4:	4ba2      	ldr	r3, [pc, #648]	@ (8009480 <logger+0x648>)
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	4b99      	ldr	r3, [pc, #612]	@ (8009460 <logger+0x628>)
 80091fc:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 80091fe:	4ba1      	ldr	r3, [pc, #644]	@ (8009484 <logger+0x64c>)
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	4b97      	ldr	r3, [pc, #604]	@ (8009460 <logger+0x628>)
 8009204:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8009206:	4ba0      	ldr	r3, [pc, #640]	@ (8009488 <logger+0x650>)
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	4b95      	ldr	r3, [pc, #596]	@ (8009460 <logger+0x628>)
 800920c:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 800920e:	4b9f      	ldr	r3, [pc, #636]	@ (800948c <logger+0x654>)
 8009210:	4a9f      	ldr	r2, [pc, #636]	@ (8009490 <logger+0x658>)
 8009212:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8009214:	f000 f972 	bl	80094fc <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8009218:	4b8f      	ldr	r3, [pc, #572]	@ (8009458 <logger+0x620>)
 800921a:	2200      	movs	r2, #0
 800921c:	70da      	strb	r2, [r3, #3]
		goto wifi_event;		//jra		wifi_event;
 800921e:	e002      	b.n	8009226 <logger+0x3ee>
			goto wifi_event;
 8009220:	46c0      	nop			@ (mov r8, r8)
 8009222:	e000      	b.n	8009226 <logger+0x3ee>
		goto wifi_event;
 8009224:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
//;										Evento de wifi
//;----------------------------------------------------------
wifi_event:
		if(flagsEvent[4])		// btjt	flagsEvent,#4,ask_wfE_end;	/ ya había iniciado evento wifi? Sí, checa si ya se termina evento
 8009226:	4b8c      	ldr	r3, [pc, #560]	@ (8009458 <logger+0x620>)
 8009228:	791b      	ldrb	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d133      	bne.n	8009296 <logger+0x45e>
			goto ask_wfE_end;
ask_wfE_start:
 800922e:	46c0      	nop			@ (mov r8, r8)
		if(!flagsTxControl[f_statWIFI])// btjf	flagsTxControl,#f_statWIFI,wifi_event_start; Hubo desconexión con servidor Wifi ? Si, inicia evento falla wifi
 8009230:	4b98      	ldr	r3, [pc, #608]	@ (8009494 <logger+0x65c>)
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	2201      	movs	r2, #1
 8009236:	4053      	eors	r3, r2
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d05a      	beq.n	80092f4 <logger+0x4bc>
			goto wifi_event_start;
 800923e:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi

wifi_event_start:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeInit_4] = highByte(timeSeconds_HW);	//ldw		WF_timeInit_HW,X
 8009240:	4b8e      	ldr	r3, [pc, #568]	@ (800947c <logger+0x644>)
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	b29b      	uxth	r3, r3
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b93      	ldr	r3, [pc, #588]	@ (8009498 <logger+0x660>)
 800924c:	711a      	strb	r2, [r3, #4]
		BloqEventWiFiEx[WF_timeInit_3] = lowByte(timeSeconds_HW);
 800924e:	4b8b      	ldr	r3, [pc, #556]	@ (800947c <logger+0x644>)
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b2da      	uxtb	r2, r3
 8009254:	4b90      	ldr	r3, [pc, #576]	@ (8009498 <logger+0x660>)
 8009256:	715a      	strb	r2, [r3, #5]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeInit_2] = highByte(timeSeconds_LW);//ldw		WF_timeInit_LW,X;				/ guarda el tiempo de inicio
 8009258:	4b89      	ldr	r3, [pc, #548]	@ (8009480 <logger+0x648>)
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	b29b      	uxth	r3, r3
 8009260:	b2da      	uxtb	r2, r3
 8009262:	4b8d      	ldr	r3, [pc, #564]	@ (8009498 <logger+0x660>)
 8009264:	719a      	strb	r2, [r3, #6]
		BloqEventWiFiEx[WF_timeInit_1] = lowByte(timeSeconds_LW);
 8009266:	4b86      	ldr	r3, [pc, #536]	@ (8009480 <logger+0x648>)
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b8a      	ldr	r3, [pc, #552]	@ (8009498 <logger+0x660>)
 800926e:	71da      	strb	r2, [r3, #7]

		BloqEventWiFiEx[WF_eventType] = 5;//mov		WF_eventType,#5;				/ carga el tipo de evento (5 para wifi)
 8009270:	4b89      	ldr	r3, [pc, #548]	@ (8009498 <logger+0x660>)
 8009272:	2205      	movs	r2, #5
 8009274:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventWiFiEx[WF_tempAmbInit_H] = tdevl;		//ldw		WF_tempAmbInit,x;				/ carga temperatura ambiente
 8009276:	4b7e      	ldr	r3, [pc, #504]	@ (8009470 <logger+0x638>)
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	4b87      	ldr	r3, [pc, #540]	@ (8009498 <logger+0x660>)
 800927c:	735a      	strb	r2, [r3, #13]
		BloqEventWiFiEx[WF_tempAmbInit_L] = tdevf;
 800927e:	4b7d      	ldr	r3, [pc, #500]	@ (8009474 <logger+0x63c>)
 8009280:	781a      	ldrb	r2, [r3, #0]
 8009282:	4b85      	ldr	r3, [pc, #532]	@ (8009498 <logger+0x660>)
 8009284:	739a      	strb	r2, [r3, #14]
		BloqEventWiFiEx[WF_voltInit] = voltl;		//mov		WF_voltInit,voltl; /carga voltaje
 8009286:	4b7c      	ldr	r3, [pc, #496]	@ (8009478 <logger+0x640>)
 8009288:	781a      	ldrb	r2, [r3, #0]
 800928a:	4b83      	ldr	r3, [pc, #524]	@ (8009498 <logger+0x660>)
 800928c:	745a      	strb	r2, [r3, #17]
		flagsEvent[4] = 1;			//bset	flagsEvent,#4;					/ indica que el evento wifi ya inició
 800928e:	4b72      	ldr	r3, [pc, #456]	@ (8009458 <logger+0x620>)
 8009290:	2201      	movs	r2, #1
 8009292:	711a      	strb	r2, [r3, #4]
		goto alarm_event;			//jp		alarm_event;						/ continúa
 8009294:	e031      	b.n	80092fa <logger+0x4c2>
			goto ask_wfE_end;
 8009296:	46c0      	nop			@ (mov r8, r8)
ask_wfE_end:
		if(flagsTxControl[f_statWIFI])	//btjt	flagsTxControl,#f_statWIFI,wifi_event_end; Volvió la conexión wifi ? Sí, termina evento falla de wifi
 8009298:	4b7e      	ldr	r3, [pc, #504]	@ (8009494 <logger+0x65c>)
 800929a:	789b      	ldrb	r3, [r3, #2]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02b      	beq.n	80092f8 <logger+0x4c0>
			goto wifi_event_end;
 80092a0:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
wifi_event_end:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		WF_timeEnd_HW,X
 80092a2:	4b76      	ldr	r3, [pc, #472]	@ (800947c <logger+0x644>)
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	4b7a      	ldr	r3, [pc, #488]	@ (8009498 <logger+0x660>)
 80092ae:	721a      	strb	r2, [r3, #8]
		BloqEventWiFiEx[WF_timeEnd_3] = lowByte(timeSeconds_HW);
 80092b0:	4b72      	ldr	r3, [pc, #456]	@ (800947c <logger+0x644>)
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4b78      	ldr	r3, [pc, #480]	@ (8009498 <logger+0x660>)
 80092b8:	725a      	strb	r2, [r3, #9]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeEnd_2] = highByte(timeSeconds_LW);//ldw		WF_timeEnd_LW,X;				/ guarda el tiempo final
 80092ba:	4b71      	ldr	r3, [pc, #452]	@ (8009480 <logger+0x648>)
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	4b74      	ldr	r3, [pc, #464]	@ (8009498 <logger+0x660>)
 80092c6:	729a      	strb	r2, [r3, #10]
		BloqEventWiFiEx[WF_timeEnd_1] = lowByte(timeSeconds_LW);
 80092c8:	4b6d      	ldr	r3, [pc, #436]	@ (8009480 <logger+0x648>)
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	4b72      	ldr	r3, [pc, #456]	@ (8009498 <logger+0x660>)
 80092d0:	72da      	strb	r2, [r3, #11]
		//ldw		X,teval
		BloqEventWiFiEx[WF_tempEvaEnd_H] = teval;//ldw		WF_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 80092d2:	4b6c      	ldr	r3, [pc, #432]	@ (8009484 <logger+0x64c>)
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	4b70      	ldr	r3, [pc, #448]	@ (8009498 <logger+0x660>)
 80092d8:	73da      	strb	r2, [r3, #15]
		BloqEventWiFiEx[WF_tempEvaEnd_L] = tevaf;
 80092da:	4b6b      	ldr	r3, [pc, #428]	@ (8009488 <logger+0x650>)
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	4b6e      	ldr	r3, [pc, #440]	@ (8009498 <logger+0x660>)
 80092e0:	741a      	strb	r2, [r3, #16]
		//ldw		X,#WF_timeInit_HW
		dirDataLoad = &BloqEventWiFiEx[0];//ldw		dirDataLoad,X;					/ indica el inicio del bloque de datos a cargar (evento wifi)
 80092e2:	4b6a      	ldr	r3, [pc, #424]	@ (800948c <logger+0x654>)
 80092e4:	4a6c      	ldr	r2, [pc, #432]	@ (8009498 <logger+0x660>)
 80092e6:	601a      	str	r2, [r3, #0]
		load_event();//call	load_event
 80092e8:	f000 f908 	bl	80094fc <load_event>

		flagsEvent[4] = 0;//bres	flagsEvent,#4;
 80092ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009458 <logger+0x620>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	711a      	strb	r2, [r3, #4]

		goto alarm_event;//jra alarm_event;	/continúa
 80092f2:	e002      	b.n	80092fa <logger+0x4c2>
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi
 80092f4:	46c0      	nop			@ (mov r8, r8)
 80092f6:	e000      	b.n	80092fa <logger+0x4c2>
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
 80092f8:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 80092fa:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsWIFI[f_timeLoggerSend])//btjt		flagsWIFI,#f_timeLoggerSend,jmp_fin_logger; No loggear hasta terminar Tx
 80092fc:	4b67      	ldr	r3, [pc, #412]	@ (800949c <logger+0x664>)
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d108      	bne.n	8009316 <logger+0x4de>
			goto jmp_fin_logger;
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 8009304:	4b66      	ldr	r3, [pc, #408]	@ (80094a0 <logger+0x668>)
 8009306:	795b      	ldrb	r3, [r3, #5]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <logger+0x4e2>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 800930c:	4b65      	ldr	r3, [pc, #404]	@ (80094a4 <logger+0x66c>)
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <logger+0x4e6>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 8009314:	e002      	b.n	800931c <logger+0x4e4>
			goto jmp_fin_logger;
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	e099      	b.n	800944e <logger+0x616>
			goto jmp_fin_logger;
 800931a:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 800931c:	e097      	b.n	800944e <logger+0x616>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 800931e:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 8009320:	4b61      	ldr	r3, [pc, #388]	@ (80094a8 <logger+0x670>)
 8009322:	2251      	movs	r2, #81	@ 0x51
 8009324:	5c9b      	ldrb	r3, [r3, r2]
 8009326:	001a      	movs	r2, r3
 8009328:	233c      	movs	r3, #60	@ 0x3c
 800932a:	4353      	muls	r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	4b5d      	ldr	r3, [pc, #372]	@ (80094a4 <logger+0x66c>)
 8009330:	801a      	strh	r2, [r3, #0]

        //DEBUG***********DEBUG---------DEBUG
        cntLogger_H = 120;  // valor de prueba a cada 10 segundos tomar muestras
 8009332:	4b5c      	ldr	r3, [pc, #368]	@ (80094a4 <logger+0x66c>)
 8009334:	2278      	movs	r2, #120	@ 0x78
 8009336:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 8009338:	4b50      	ldr	r3, [pc, #320]	@ (800947c <logger+0x644>)
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	0a1b      	lsrs	r3, r3, #8
 800933e:	b29b      	uxth	r3, r3
 8009340:	b2da      	uxtb	r2, r3
 8009342:	4b5a      	ldr	r3, [pc, #360]	@ (80094ac <logger+0x674>)
 8009344:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 8009346:	4b4d      	ldr	r3, [pc, #308]	@ (800947c <logger+0x644>)
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b2da      	uxtb	r2, r3
 800934c:	4b57      	ldr	r3, [pc, #348]	@ (80094ac <logger+0x674>)
 800934e:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 8009350:	4b4b      	ldr	r3, [pc, #300]	@ (8009480 <logger+0x648>)
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	0a1b      	lsrs	r3, r3, #8
 8009356:	b29b      	uxth	r3, r3
 8009358:	b2da      	uxtb	r2, r3
 800935a:	4b54      	ldr	r3, [pc, #336]	@ (80094ac <logger+0x674>)
 800935c:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 800935e:	4b48      	ldr	r3, [pc, #288]	@ (8009480 <logger+0x648>)
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b2da      	uxtb	r2, r3
 8009364:	4b51      	ldr	r3, [pc, #324]	@ (80094ac <logger+0x674>)
 8009366:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 8009368:	4b41      	ldr	r3, [pc, #260]	@ (8009470 <logger+0x638>)
 800936a:	781a      	ldrb	r2, [r3, #0]
 800936c:	4b4f      	ldr	r3, [pc, #316]	@ (80094ac <logger+0x674>)
 800936e:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 8009370:	4b40      	ldr	r3, [pc, #256]	@ (8009474 <logger+0x63c>)
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	4b4d      	ldr	r3, [pc, #308]	@ (80094ac <logger+0x674>)
 8009376:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 8009378:	4b42      	ldr	r3, [pc, #264]	@ (8009484 <logger+0x64c>)
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	4b4b      	ldr	r3, [pc, #300]	@ (80094ac <logger+0x674>)
 800937e:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 8009380:	4b41      	ldr	r3, [pc, #260]	@ (8009488 <logger+0x650>)
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	4b49      	ldr	r3, [pc, #292]	@ (80094ac <logger+0x674>)
 8009386:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8009388:	4b3b      	ldr	r3, [pc, #236]	@ (8009478 <logger+0x640>)
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	4b47      	ldr	r3, [pc, #284]	@ (80094ac <logger+0x674>)
 800938e:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 8009390:	4b47      	ldr	r3, [pc, #284]	@ (80094b0 <logger+0x678>)
 8009392:	4a48      	ldr	r2, [pc, #288]	@ (80094b4 <logger+0x67c>)
 8009394:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8009396:	4b3d      	ldr	r3, [pc, #244]	@ (800948c <logger+0x654>)
 8009398:	4a44      	ldr	r2, [pc, #272]	@ (80094ac <logger+0x674>)
 800939a:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 800939c:	4b46      	ldr	r3, [pc, #280]	@ (80094b8 <logger+0x680>)
 800939e:	4a47      	ldr	r2, [pc, #284]	@ (80094bc <logger+0x684>)
 80093a0:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 80093a2:	4b47      	ldr	r3, [pc, #284]	@ (80094c0 <logger+0x688>)
 80093a4:	2260      	movs	r2, #96	@ 0x60
 80093a6:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 80093a8:	4b46      	ldr	r3, [pc, #280]	@ (80094c4 <logger+0x68c>)
 80093aa:	2209      	movs	r2, #9
 80093ac:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 80093ae:	4b46      	ldr	r3, [pc, #280]	@ (80094c8 <logger+0x690>)
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	4b46      	ldr	r3, [pc, #280]	@ (80094cc <logger+0x694>)
 80093b4:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 80093b6:	4b46      	ldr	r3, [pc, #280]	@ (80094d0 <logger+0x698>)
 80093b8:	781a      	ldrb	r2, [r3, #0]
 80093ba:	4b46      	ldr	r3, [pc, #280]	@ (80094d4 <logger+0x69c>)
 80093bc:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 80093be:	4b41      	ldr	r3, [pc, #260]	@ (80094c4 <logger+0x68c>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	0019      	movs	r1, r3
 80093c4:	2080      	movs	r0, #128	@ 0x80
 80093c6:	f7f6 ff31 	bl	800022c <__divsi3>
 80093ca:	0003      	movs	r3, r0
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	4b42      	ldr	r3, [pc, #264]	@ (80094d8 <logger+0x6a0>)
 80093d0:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 80093d2:	4b41      	ldr	r3, [pc, #260]	@ (80094d8 <logger+0x6a0>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	4a3b      	ldr	r2, [pc, #236]	@ (80094c4 <logger+0x68c>)
 80093d8:	7812      	ldrb	r2, [r2, #0]
 80093da:	4353      	muls	r3, r2
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	4b3f      	ldr	r3, [pc, #252]	@ (80094dc <logger+0x6a4>)
 80093e0:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         cntRegDATA++;	//incw	X
 80093e2:	4b3f      	ldr	r3, [pc, #252]	@ (80094e0 <logger+0x6a8>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	4b3d      	ldr	r3, [pc, #244]	@ (80094e0 <logger+0x6a8>)
 80093ec:	801a      	strh	r2, [r3, #0]

		//;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
		//cpw		X,#1343
		if(cntRegDATA<1343)//jrult	no_clrREG_01
 80093ee:	4b3c      	ldr	r3, [pc, #240]	@ (80094e0 <logger+0x6a8>)
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	4a3c      	ldr	r2, [pc, #240]	@ (80094e4 <logger+0x6ac>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d903      	bls.n	8009400 <logger+0x5c8>
			goto no_clrREG_01;
		cntRegDATA = 1343;// ldw		X,#1343
 80093f8:	4b39      	ldr	r3, [pc, #228]	@ (80094e0 <logger+0x6a8>)
 80093fa:	4a3b      	ldr	r2, [pc, #236]	@ (80094e8 <logger+0x6b0>)
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	e000      	b.n	8009402 <logger+0x5ca>
			goto no_clrREG_01;
 8009400:	46c0      	nop			@ (mov r8, r8)
no_clrREG_01:


         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 8009402:	4b37      	ldr	r3, [pc, #220]	@ (80094e0 <logger+0x6a8>)
 8009404:	881a      	ldrh	r2, [r3, #0]
 8009406:	4b39      	ldr	r3, [pc, #228]	@ (80094ec <logger+0x6b4>)
 8009408:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 800940a:	4b39      	ldr	r3, [pc, #228]	@ (80094f0 <logger+0x6b8>)
 800940c:	4a39      	ldr	r2, [pc, #228]	@ (80094f4 <logger+0x6bc>)
 800940e:	601a      	str	r2, [r3, #0]
 		 reeCntRegDATA = cntReg;
 8009410:	4b36      	ldr	r3, [pc, #216]	@ (80094ec <logger+0x6b4>)
 8009412:	881a      	ldrh	r2, [r3, #0]
 8009414:	4b38      	ldr	r3, [pc, #224]	@ (80094f8 <logger+0x6c0>)
 8009416:	801a      	strh	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 8009418:	f000 f8f8 	bl	800960c <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 800941c:	4b2b      	ldr	r3, [pc, #172]	@ (80094cc <logger+0x694>)
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	4b29      	ldr	r3, [pc, #164]	@ (80094c8 <logger+0x690>)
 8009422:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 8009424:	4b2b      	ldr	r3, [pc, #172]	@ (80094d4 <logger+0x69c>)
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	4b29      	ldr	r3, [pc, #164]	@ (80094d0 <logger+0x698>)
 800942a:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 800942c:	4b1c      	ldr	r3, [pc, #112]	@ (80094a0 <logger+0x668>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2201      	movs	r2, #1
 8009432:	4053      	eors	r3, r2
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d106      	bne.n	8009448 <logger+0x610>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 800943a:	4b19      	ldr	r3, [pc, #100]	@ (80094a0 <logger+0x668>)
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 8009440:	4b17      	ldr	r3, [pc, #92]	@ (80094a0 <logger+0x668>)
 8009442:	2201      	movs	r2, #1
 8009444:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 8009446:	e002      	b.n	800944e <logger+0x616>
        	 	 goto noFullLoggerDATA;
 8009448:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 800944a:	e000      	b.n	800944e <logger+0x616>
		goto fin_logger; //jp fin_logger
 800944c:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	2000113a 	.word	0x2000113a
 8009458:	20000f64 	.word	0x20000f64
 800945c:	20000d1d 	.word	0x20000d1d
 8009460:	20000fc4 	.word	0x20000fc4
 8009464:	20000d1e 	.word	0x20000d1e
 8009468:	20000d1f 	.word	0x20000d1f
 800946c:	20000d20 	.word	0x20000d20
 8009470:	20000bc0 	.word	0x20000bc0
 8009474:	20000bc1 	.word	0x20000bc1
 8009478:	20000bde 	.word	0x20000bde
 800947c:	20000e4c 	.word	0x20000e4c
 8009480:	20000e4e 	.word	0x20000e4e
 8009484:	20000bc2 	.word	0x20000bc2
 8009488:	20000bc3 	.word	0x20000bc3
 800948c:	20000e44 	.word	0x20000e44
 8009490:	20000fc8 	.word	0x20000fc8
 8009494:	20001188 	.word	0x20001188
 8009498:	2000119c 	.word	0x2000119c
 800949c:	20000fec 	.word	0x20000fec
 80094a0:	20000ea0 	.word	0x20000ea0
 80094a4:	20000e34 	.word	0x20000e34
 80094a8:	200000b8 	.word	0x200000b8
 80094ac:	20000e50 	.word	0x20000e50
 80094b0:	20000e40 	.word	0x20000e40
 80094b4:	20000d28 	.word	0x20000d28
 80094b8:	20000e3c 	.word	0x20000e3c
 80094bc:	0803c000 	.word	0x0803c000
 80094c0:	20000e39 	.word	0x20000e39
 80094c4:	20000e3a 	.word	0x20000e3a
 80094c8:	20000e49 	.word	0x20000e49
 80094cc:	20000e36 	.word	0x20000e36
 80094d0:	20000e48 	.word	0x20000e48
 80094d4:	20000e37 	.word	0x20000e37
 80094d8:	200008e4 	.word	0x200008e4
 80094dc:	20000b67 	.word	0x20000b67
 80094e0:	200010d6 	.word	0x200010d6
 80094e4:	0000053e 	.word	0x0000053e
 80094e8:	0000053f 	.word	0x0000053f
 80094ec:	200010da 	.word	0x200010da
 80094f0:	200010dc 	.word	0x200010dc
 80094f4:	0803f810 	.word	0x0803f810
 80094f8:	20000d22 	.word	0x20000d22

080094fc <load_event>:
void load_event(){
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 8009500:	4b2e      	ldr	r3, [pc, #184]	@ (80095bc <load_event+0xc0>)
 8009502:	4a2f      	ldr	r2, [pc, #188]	@ (80095c0 <load_event+0xc4>)
 8009504:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 8009506:	4b2f      	ldr	r3, [pc, #188]	@ (80095c4 <load_event+0xc8>)
 8009508:	4a2f      	ldr	r2, [pc, #188]	@ (80095c8 <load_event+0xcc>)
 800950a:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800950c:	4b2f      	ldr	r3, [pc, #188]	@ (80095cc <load_event+0xd0>)
 800950e:	22a0      	movs	r2, #160	@ 0xa0
 8009510:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 8009512:	4b2f      	ldr	r3, [pc, #188]	@ (80095d0 <load_event+0xd4>)
 8009514:	220e      	movs	r2, #14
 8009516:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 8009518:	4b2e      	ldr	r3, [pc, #184]	@ (80095d4 <load_event+0xd8>)
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	4b2e      	ldr	r3, [pc, #184]	@ (80095d8 <load_event+0xdc>)
 800951e:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 8009520:	4b2e      	ldr	r3, [pc, #184]	@ (80095dc <load_event+0xe0>)
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	4b2e      	ldr	r3, [pc, #184]	@ (80095e0 <load_event+0xe4>)
 8009526:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 8009528:	4b29      	ldr	r3, [pc, #164]	@ (80095d0 <load_event+0xd4>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	0019      	movs	r1, r3
 800952e:	2080      	movs	r0, #128	@ 0x80
 8009530:	f7f6 fe7c 	bl	800022c <__divsi3>
 8009534:	0003      	movs	r3, r0
 8009536:	b2da      	uxtb	r2, r3
 8009538:	4b2a      	ldr	r3, [pc, #168]	@ (80095e4 <load_event+0xe8>)
 800953a:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 800953c:	4b29      	ldr	r3, [pc, #164]	@ (80095e4 <load_event+0xe8>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	4a23      	ldr	r2, [pc, #140]	@ (80095d0 <load_event+0xd4>)
 8009542:	7812      	ldrb	r2, [r2, #0]
 8009544:	4353      	muls	r3, r2
 8009546:	b2da      	uxtb	r2, r3
 8009548:	4b27      	ldr	r3, [pc, #156]	@ (80095e8 <load_event+0xec>)
 800954a:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 800954c:	4b27      	ldr	r3, [pc, #156]	@ (80095ec <load_event+0xf0>)
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	b29a      	uxth	r2, r3
 8009554:	4b25      	ldr	r3, [pc, #148]	@ (80095ec <load_event+0xf0>)
 8009556:	801a      	strh	r2, [r3, #0]
//		;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
//		cpw		X,#1439
//		jrult	no_clrREG_02
//		;clrw	X
//		ldw		X,#1439
		if(cntRegEVENT<1439)
 8009558:	4b24      	ldr	r3, [pc, #144]	@ (80095ec <load_event+0xf0>)
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	4a24      	ldr	r2, [pc, #144]	@ (80095f0 <load_event+0xf4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d903      	bls.n	800956a <load_event+0x6e>
			goto no_clrREG_02;
		cntRegEVENT = 1439;
 8009562:	4b22      	ldr	r3, [pc, #136]	@ (80095ec <load_event+0xf0>)
 8009564:	4a23      	ldr	r2, [pc, #140]	@ (80095f4 <load_event+0xf8>)
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	e000      	b.n	800956c <load_event+0x70>
			goto no_clrREG_02;
 800956a:	46c0      	nop			@ (mov r8, r8)
no_clrREG_02:

		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800956c:	4b1f      	ldr	r3, [pc, #124]	@ (80095ec <load_event+0xf0>)
 800956e:	881a      	ldrh	r2, [r3, #0]
 8009570:	4b21      	ldr	r3, [pc, #132]	@ (80095f8 <load_event+0xfc>)
 8009572:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 8009574:	4b21      	ldr	r3, [pc, #132]	@ (80095fc <load_event+0x100>)
 8009576:	4a22      	ldr	r2, [pc, #136]	@ (8009600 <load_event+0x104>)
 8009578:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 800957a:	4b1f      	ldr	r3, [pc, #124]	@ (80095f8 <load_event+0xfc>)
 800957c:	881a      	ldrh	r2, [r3, #0]
 800957e:	4b21      	ldr	r3, [pc, #132]	@ (8009604 <load_event+0x108>)
 8009580:	801a      	strh	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 8009582:	f000 f843 	bl	800960c <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 8009586:	4b14      	ldr	r3, [pc, #80]	@ (80095d8 <load_event+0xdc>)
 8009588:	781a      	ldrb	r2, [r3, #0]
 800958a:	4b12      	ldr	r3, [pc, #72]	@ (80095d4 <load_event+0xd8>)
 800958c:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 800958e:	4b14      	ldr	r3, [pc, #80]	@ (80095e0 <load_event+0xe4>)
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <load_event+0xe0>)
 8009594:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8009596:	4b1c      	ldr	r3, [pc, #112]	@ (8009608 <load_event+0x10c>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	4053      	eors	r3, r2
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <load_event+0xb6>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 80095a4:	4b18      	ldr	r3, [pc, #96]	@ (8009608 <load_event+0x10c>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 80095aa:	4b17      	ldr	r3, [pc, #92]	@ (8009608 <load_event+0x10c>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 80095b0:	e000      	b.n	80095b4 <load_event+0xb8>
			goto noFullLoggerEVENT;
 80095b2:	46c0      	nop			@ (mov r8, r8)
}
 80095b4:	46c0      	nop			@ (mov r8, r8)
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	46c0      	nop			@ (mov r8, r8)
 80095bc:	20000e40 	.word	0x20000e40
 80095c0:	20000da8 	.word	0x20000da8
 80095c4:	20000e3c 	.word	0x20000e3c
 80095c8:	08037000 	.word	0x08037000
 80095cc:	20000e39 	.word	0x20000e39
 80095d0:	20000e3a 	.word	0x20000e3a
 80095d4:	20000e4b 	.word	0x20000e4b
 80095d8:	20000e36 	.word	0x20000e36
 80095dc:	20000e4a 	.word	0x20000e4a
 80095e0:	20000e37 	.word	0x20000e37
 80095e4:	200008e4 	.word	0x200008e4
 80095e8:	20000b67 	.word	0x20000b67
 80095ec:	200010d8 	.word	0x200010d8
 80095f0:	0000059e 	.word	0x0000059e
 80095f4:	0000059f 	.word	0x0000059f
 80095f8:	200010da 	.word	0x200010da
 80095fc:	200010dc 	.word	0x200010dc
 8009600:	0803f812 	.word	0x0803f812
 8009604:	20000d24 	.word	0x20000d24
 8009608:	20000ea0 	.word	0x20000ea0

0800960c <load_buffer_logger>:

void load_buffer_logger(){
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 8009612:	4b45      	ldr	r3, [pc, #276]	@ (8009728 <load_buffer_logger+0x11c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 8009618:	4b44      	ldr	r3, [pc, #272]	@ (800972c <load_buffer_logger+0x120>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 800961e:	4b44      	ldr	r3, [pc, #272]	@ (8009730 <load_buffer_logger+0x124>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	001a      	movs	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	189b      	adds	r3, r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 800962a:	4b42      	ldr	r3, [pc, #264]	@ (8009734 <load_buffer_logger+0x128>)
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	3301      	adds	r3, #1
 8009642:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 8009644:	4b3b      	ldr	r3, [pc, #236]	@ (8009734 <load_buffer_logger+0x128>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	4b39      	ldr	r3, [pc, #228]	@ (8009734 <load_buffer_logger+0x128>)
 800964e:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 8009650:	4b37      	ldr	r3, [pc, #220]	@ (8009730 <load_buffer_logger+0x124>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	3301      	adds	r3, #1
 8009656:	b2da      	uxtb	r2, r3
 8009658:	4b35      	ldr	r3, [pc, #212]	@ (8009730 <load_buffer_logger+0x124>)
 800965a:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 800965c:	4b34      	ldr	r3, [pc, #208]	@ (8009730 <load_buffer_logger+0x124>)
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	4b35      	ldr	r3, [pc, #212]	@ (8009738 <load_buffer_logger+0x12c>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	429a      	cmp	r2, r3
 8009666:	d352      	bcc.n	800970e <load_buffer_logger+0x102>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 8009668:	4b30      	ldr	r3, [pc, #192]	@ (800972c <load_buffer_logger+0x120>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	337f      	adds	r3, #127	@ 0x7f
 800966e:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	781a      	ldrb	r2, [r3, #0]
 8009674:	4b31      	ldr	r3, [pc, #196]	@ (800973c <load_buffer_logger+0x130>)
 8009676:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 8009678:	4b30      	ldr	r3, [pc, #192]	@ (800973c <load_buffer_logger+0x130>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	3301      	adds	r3, #1
 800967e:	b2da      	uxtb	r2, r3
 8009680:	4b2e      	ldr	r3, [pc, #184]	@ (800973c <load_buffer_logger+0x130>)
 8009682:	701a      	strb	r2, [r3, #0]
		*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
 8009684:	4b2d      	ldr	r3, [pc, #180]	@ (800973c <load_buffer_logger+0x130>)
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3b01      	subs	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 8009698:	4b29      	ldr	r3, [pc, #164]	@ (8009740 <load_buffer_logger+0x134>)
 800969a:	22aa      	movs	r2, #170	@ 0xaa
 800969c:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 800969e:	4b29      	ldr	r3, [pc, #164]	@ (8009744 <load_buffer_logger+0x138>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	01db      	lsls	r3, r3, #7
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	4b28      	ldr	r3, [pc, #160]	@ (8009748 <load_buffer_logger+0x13c>)
 80096a8:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 80096aa:	4b28      	ldr	r3, [pc, #160]	@ (800974c <load_buffer_logger+0x140>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a26      	ldr	r2, [pc, #152]	@ (8009748 <load_buffer_logger+0x13c>)
 80096b0:	8812      	ldrh	r2, [r2, #0]
 80096b2:	189a      	adds	r2, r3, r2
 80096b4:	4b26      	ldr	r3, [pc, #152]	@ (8009750 <load_buffer_logger+0x144>)
 80096b6:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 80096b8:	4b1c      	ldr	r3, [pc, #112]	@ (800972c <load_buffer_logger+0x120>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	4b25      	ldr	r3, [pc, #148]	@ (8009754 <load_buffer_logger+0x148>)
 80096be:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	607b      	str	r3, [r7, #4]

		GRABA_BLOCK();		//call	GRABA_BLOCK
 80096c4:	f7fd fe64 	bl	8007390 <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 80096c8:	f7fd fd66 	bl	8007198 <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 80096cc:	f7fd fd4c 	bl	8007168 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 80096d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009744 <load_buffer_logger+0x138>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	3301      	adds	r3, #1
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009744 <load_buffer_logger+0x138>)
 80096da:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 80096dc:	4b19      	ldr	r3, [pc, #100]	@ (8009744 <load_buffer_logger+0x138>)
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009758 <load_buffer_logger+0x14c>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d306      	bcc.n	80096f6 <load_buffer_logger+0xea>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 80096e8:	4b16      	ldr	r3, [pc, #88]	@ (8009744 <load_buffer_logger+0x138>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 80096ee:	4b1b      	ldr	r3, [pc, #108]	@ (800975c <load_buffer_logger+0x150>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	e000      	b.n	80096f8 <load_buffer_logger+0xec>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 80096f6:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 80096f8:	f7fd fcfc 	bl	80070f4 <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 8009700:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <load_buffer_logger+0x120>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 8009706:	4b0a      	ldr	r3, [pc, #40]	@ (8009730 <load_buffer_logger+0x124>)
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e000      	b.n	8009710 <load_buffer_logger+0x104>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 800970e:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 8009710:	4b08      	ldr	r3, [pc, #32]	@ (8009734 <load_buffer_logger+0x128>)
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	4b12      	ldr	r3, [pc, #72]	@ (8009760 <load_buffer_logger+0x154>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d200      	bcs.n	800971e <load_buffer_logger+0x112>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 800971c:	e788      	b.n	8009630 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 800971e:	46c0      	nop			@ (mov r8, r8)

}
 8009720:	46c0      	nop			@ (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	b004      	add	sp, #16
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20000e44 	.word	0x20000e44
 800972c:	20000e40 	.word	0x20000e40
 8009730:	20000e37 	.word	0x20000e37
 8009734:	20000e38 	.word	0x20000e38
 8009738:	20000b67 	.word	0x20000b67
 800973c:	200008e4 	.word	0x200008e4
 8009740:	20000e28 	.word	0x20000e28
 8009744:	20000e36 	.word	0x20000e36
 8009748:	200008e6 	.word	0x200008e6
 800974c:	20000e3c 	.word	0x20000e3c
 8009750:	20000e2c 	.word	0x20000e2c
 8009754:	20000e30 	.word	0x20000e30
 8009758:	20000e39 	.word	0x20000e39
 800975c:	20000ea0 	.word	0x20000ea0
 8009760:	20000e3a 	.word	0x20000e3a

08009764 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0

    return timemilis;
 8009768:	4b02      	ldr	r3, [pc, #8]	@ (8009774 <millis+0x10>)
 800976a:	681b      	ldr	r3, [r3, #0]
}
 800976c:	0018      	movs	r0, r3
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	46c0      	nop			@ (mov r8, r8)
 8009774:	200008f0 	.word	0x200008f0

08009778 <reconfigura_perif>:

void reconfigura_perif(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
//	HAL_IWDG_Refresh(&hiwdg);
	initEEPROMEmulated(); // Init EEPROM Emulated
 800977c:	f7f8 ffb0 	bl	80026e0 <initEEPROMEmulated>

	HAL_Init();
 8009780:	f008 fa67 	bl	8011c52 <HAL_Init>
	SystemClock_Config();
 8009784:	f000 fa62 	bl	8009c4c <SystemClock_Config>

	configura_perif_2();
 8009788:	f000 f80c 	bl	80097a4 <configura_perif_2>

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800978c:	2007      	movs	r0, #7
 800978e:	f009 fe58 	bl	8013442 <HAL_NVIC_DisableIRQ>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8009792:	4b03      	ldr	r3, [pc, #12]	@ (80097a0 <reconfigura_perif+0x28>)
 8009794:	0018      	movs	r0, r3
 8009796:	f00f fbff 	bl	8018f98 <HAL_RTCEx_DeactivateWakeUpTimer>

}
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20000574 	.word	0x20000574

080097a4 <configura_perif_2>:

void configura_perif_2(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 80097a8:	f000 fe76 	bl	800a498 <MX_GPIO_Init>
	  MX_DMA_Init();
 80097ac:	f000 fe4e 	bl	800a44c <MX_DMA_Init>
	  MX_ADC1_Init();
 80097b0:	f000 fab6 	bl	8009d20 <MX_ADC1_Init>
	  MX_I2C1_Init();
 80097b4:	f000 fc10 	bl	8009fd8 <MX_I2C1_Init>
	  MX_IWDG_Init();
 80097b8:	f000 fc50 	bl	800a05c <MX_IWDG_Init>
	  MX_TIM3_Init();
 80097bc:	f000 fce6 	bl	800a18c <MX_TIM3_Init>
	  MX_TIM6_Init();
 80097c0:	f000 fd66 	bl	800a290 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80097c4:	f000 fda4 	bl	800a310 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80097c8:	f000 fdf0 	bl	800a3ac <MX_USART4_UART_Init>


}
 80097cc:	46c0      	nop			@ (mov r8, r8)
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 80097d8:	4b21      	ldr	r3, [pc, #132]	@ (8009860 <check_Tick_1ms+0x8c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	4b20      	ldr	r3, [pc, #128]	@ (8009860 <check_Tick_1ms+0x8c>)
 80097e0:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)							// contador prescala 1ms =
 80097e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009860 <check_Tick_1ms+0x8c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	dd0f      	ble.n	800980a <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 80097ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009860 <check_Tick_1ms+0x8c>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;							// Manuel, levanta flag 1ms
 80097f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009864 <check_Tick_1ms+0x90>)
 80097f2:	2201      	movs	r2, #1
 80097f4:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 80097f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009868 <check_Tick_1ms+0x94>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009868 <check_Tick_1ms+0x94>)
 80097fe:	601a      	str	r2, [r3, #0]
						timemilis++;							// variable contadora de milisegundos
 8009800:	4b1a      	ldr	r3, [pc, #104]	@ (800986c <check_Tick_1ms+0x98>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	4b19      	ldr	r3, [pc, #100]	@ (800986c <check_Tick_1ms+0x98>)
 8009808:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)						// contador prescala 10ms
 800980a:	4b17      	ldr	r3, [pc, #92]	@ (8009868 <check_Tick_1ms+0x94>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b09      	cmp	r3, #9
 8009810:	dd0a      	ble.n	8009828 <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 8009812:	4b15      	ldr	r3, [pc, #84]	@ (8009868 <check_Tick_1ms+0x94>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
						tick_10ms =1;							// flag base de tiempo 10ms
 8009818:	4b15      	ldr	r3, [pc, #84]	@ (8009870 <check_Tick_1ms+0x9c>)
 800981a:	2201      	movs	r2, #1
 800981c:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 800981e:	4b15      	ldr	r3, [pc, #84]	@ (8009874 <check_Tick_1ms+0xa0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	4b13      	ldr	r3, [pc, #76]	@ (8009874 <check_Tick_1ms+0xa0>)
 8009826:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)						// contador prescala 100ms
 8009828:	4b12      	ldr	r3, [pc, #72]	@ (8009874 <check_Tick_1ms+0xa0>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b09      	cmp	r3, #9
 800982e:	dd0a      	ble.n	8009846 <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 8009830:	4b10      	ldr	r3, [pc, #64]	@ (8009874 <check_Tick_1ms+0xa0>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
						tick_100ms =1;							// flag base de tiempo 100ms
 8009836:	4b10      	ldr	r3, [pc, #64]	@ (8009878 <check_Tick_1ms+0xa4>)
 8009838:	2201      	movs	r2, #1
 800983a:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 800983c:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <check_Tick_1ms+0xa8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <check_Tick_1ms+0xa8>)
 8009844:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)							// contador prescala 1s
 8009846:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <check_Tick_1ms+0xa8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b09      	cmp	r3, #9
 800984c:	dd05      	ble.n	800985a <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 800984e:	4b0b      	ldr	r3, [pc, #44]	@ (800987c <check_Tick_1ms+0xa8>)
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8009854:	4b0a      	ldr	r3, [pc, #40]	@ (8009880 <check_Tick_1ms+0xac>)
 8009856:	2201      	movs	r2, #1
 8009858:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 800985a:	46c0      	nop			@ (mov r8, r8)
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	200008f4 	.word	0x200008f4
 8009864:	200008e8 	.word	0x200008e8
 8009868:	200008f8 	.word	0x200008f8
 800986c:	200008f0 	.word	0x200008f0
 8009870:	200008e9 	.word	0x200008e9
 8009874:	200008fc 	.word	0x200008fc
 8009878:	200008ea 	.word	0x200008ea
 800987c:	20000900 	.word	0x20000900
 8009880:	200008eb 	.word	0x200008eb

08009884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initEEPROMEmulated(); // Init EEPROM Emulated
 800988a:	f7f8 ff29 	bl	80026e0 <initEEPROMEmulated>
	timeRstBLE = 1;
 800988e:	4bc7      	ldr	r3, [pc, #796]	@ (8009bac <main+0x328>)
 8009890:	2201      	movs	r2, #1
 8009892:	701a      	strb	r2, [r3, #0]
	inicio ();
 8009894:	f7ff f8a6 	bl	80089e4 <inicio>

	ProcesosC = 6;
 8009898:	4bc5      	ldr	r3, [pc, #788]	@ (8009bb0 <main+0x32c>)
 800989a:	2206      	movs	r2, #6
 800989c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800989e:	f008 f9d8 	bl	8011c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80098a2:	f000 f9d3 	bl	8009c4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  configura_perif_2();
 80098a6:	f7ff ff7d 	bl	80097a4 <configura_perif_2>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80098aa:	f000 fdf5 	bl	800a498 <MX_GPIO_Init>
  MX_DMA_Init();
 80098ae:	f000 fdcd 	bl	800a44c <MX_DMA_Init>
  MX_ADC1_Init();
 80098b2:	f000 fa35 	bl	8009d20 <MX_ADC1_Init>
  MX_I2C1_Init();
 80098b6:	f000 fb8f 	bl	8009fd8 <MX_I2C1_Init>
  MX_IWDG_Init();
 80098ba:	f000 fbcf 	bl	800a05c <MX_IWDG_Init>
  MX_RTC_Init();
 80098be:	f000 fbef 	bl	800a0a0 <MX_RTC_Init>
  MX_TIM3_Init();
 80098c2:	f000 fc63 	bl	800a18c <MX_TIM3_Init>
  MX_TIM6_Init();
 80098c6:	f000 fce3 	bl	800a290 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80098ca:	f000 fd21 	bl	800a310 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80098ce:	f000 fd6d 	bl	800a3ac <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 80098d2:	f7fa feab 	bl	800462c <Modbus_ModbusSalave>
  //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin(reePlantilla[eeAddModBus]);
 80098d6:	4bb7      	ldr	r3, [pc, #732]	@ (8009bb4 <main+0x330>)
 80098d8:	2272      	movs	r2, #114	@ 0x72
 80098da:	5c9b      	ldrb	r3, [r3, r2]
 80098dc:	0018      	movs	r0, r3
 80098de:	f7fa feab 	bl	8004638 <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 80098e2:	4bb5      	ldr	r3, [pc, #724]	@ (8009bb8 <main+0x334>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80098e8:	4bb4      	ldr	r3, [pc, #720]	@ (8009bbc <main+0x338>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	2104      	movs	r1, #4
 80098ee:	0018      	movs	r0, r3
 80098f0:	f00a fde1 	bl	80144b6 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 80098f4:	4bb2      	ldr	r3, [pc, #712]	@ (8009bc0 <main+0x33c>)
 80098f6:	2203      	movs	r2, #3
 80098f8:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 80098fa:	4bac      	ldr	r3, [pc, #688]	@ (8009bac <main+0x328>)
 80098fc:	2208      	movs	r2, #8
 80098fe:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 8009900:	4baf      	ldr	r3, [pc, #700]	@ (8009bc0 <main+0x33c>)
 8009902:	2201      	movs	r2, #1
 8009904:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 8009906:	4baf      	ldr	r3, [pc, #700]	@ (8009bc4 <main+0x340>)
 8009908:	2201      	movs	r2, #1
 800990a:	2120      	movs	r1, #32
 800990c:	0018      	movs	r0, r3
 800990e:	f00a fdd2 	bl	80144b6 <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8009912:	2007      	movs	r0, #7
 8009914:	f009 fd95 	bl	8013442 <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8009918:	4bab      	ldr	r3, [pc, #684]	@ (8009bc8 <main+0x344>)
 800991a:	0018      	movs	r0, r3
 800991c:	f00f fb3c 	bl	8018f98 <HAL_RTCEx_DeactivateWakeUpTimer>

  //HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
  while(Count_Test2 < 130000)
 8009920:	e012      	b.n	8009948 <main+0xc4>
  {
		Count_Test2++;//  eliminar JTA buzzer
 8009922:	4baa      	ldr	r3, [pc, #680]	@ (8009bcc <main+0x348>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	4ba8      	ldr	r3, [pc, #672]	@ (8009bcc <main+0x348>)
 800992a:	601a      	str	r2, [r3, #0]
		if(Count_Test2 == 129999 ) //eliminar JTA buzzer
 800992c:	4ba7      	ldr	r3, [pc, #668]	@ (8009bcc <main+0x348>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4aa7      	ldr	r2, [pc, #668]	@ (8009bd0 <main+0x34c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d104      	bne.n	8009940 <main+0xbc>
		{
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 8009936:	4ba7      	ldr	r3, [pc, #668]	@ (8009bd4 <main+0x350>)
 8009938:	2104      	movs	r1, #4
 800993a:	0018      	movs	r0, r3
 800993c:	f00f fd12 	bl	8019364 <HAL_TIM_PWM_Stop>
			//Count_Test2 = 255;//eliminar JTA buzzer
		}
		HAL_IWDG_Refresh(&hiwdg); // Se agrega porque el Wathcdog provoca un reinicio
 8009940:	4ba5      	ldr	r3, [pc, #660]	@ (8009bd8 <main+0x354>)
 8009942:	0018      	movs	r0, r3
 8009944:	f00d f802 	bl	801694c <HAL_IWDG_Refresh>
  while(Count_Test2 < 130000)
 8009948:	4ba0      	ldr	r3, [pc, #640]	@ (8009bcc <main+0x348>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4aa0      	ldr	r2, [pc, #640]	@ (8009bd0 <main+0x34c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d9e7      	bls.n	8009922 <main+0x9e>
  }
  Count_Test2 = 0;
 8009952:	4b9e      	ldr	r3, [pc, #632]	@ (8009bcc <main+0x348>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

  asm ("nop");
 8009958:	46c0      	nop			@ (mov r8, r8)

  for (int i = 0; i < 1000; i++)
 800995a:	2300      	movs	r3, #0
 800995c:	607b      	str	r3, [r7, #4]
 800995e:	e009      	b.n	8009974 <main+0xf0>
  {
	  HAL_Delay (1);
 8009960:	2001      	movs	r0, #1
 8009962:	f008 f9f1 	bl	8011d48 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8009966:	4b9c      	ldr	r3, [pc, #624]	@ (8009bd8 <main+0x354>)
 8009968:	0018      	movs	r0, r3
 800996a:	f00c ffef 	bl	801694c <HAL_IWDG_Refresh>
  for (int i = 0; i < 1000; i++)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	3301      	adds	r3, #1
 8009972:	607b      	str	r3, [r7, #4]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	23fa      	movs	r3, #250	@ 0xfa
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	429a      	cmp	r2, r3
 800997c:	dbf0      	blt.n	8009960 <main+0xdc>


  while (1)
  {

testTimmingProcess:
 800997e:	46c0      	nop			@ (mov r8, r8)
	ProcesosC++;
 8009980:	4b8b      	ldr	r3, [pc, #556]	@ (8009bb0 <main+0x32c>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	4b89      	ldr	r3, [pc, #548]	@ (8009bb0 <main+0x32c>)
 800998a:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 800998c:	e000      	b.n	8009990 <main+0x10c>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 800998e:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 8009990:	4b92      	ldr	r3, [pc, #584]	@ (8009bdc <main+0x358>)
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2201      	movs	r2, #1
 8009996:	4013      	ands	r3, r2
 8009998:	d0f9      	beq.n	800998e <main+0x10a>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 800999a:	4b90      	ldr	r3, [pc, #576]	@ (8009bdc <main+0x358>)
 800999c:	691a      	ldr	r2, [r3, #16]
 800999e:	4b8f      	ldr	r3, [pc, #572]	@ (8009bdc <main+0x358>)
 80099a0:	2101      	movs	r1, #1
 80099a2:	438a      	bics	r2, r1
 80099a4:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 80099a6:	4b8c      	ldr	r3, [pc, #560]	@ (8009bd8 <main+0x354>)
 80099a8:	0018      	movs	r0, r3
 80099aa:	f00c ffcf 	bl	801694c <HAL_IWDG_Refresh>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO6 toogle test
 80099ae:	2380      	movs	r3, #128	@ 0x80
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	4a84      	ldr	r2, [pc, #528]	@ (8009bc4 <main+0x340>)
 80099b4:	0019      	movs	r1, r3
 80099b6:	0010      	movs	r0, r2
 80099b8:	f00a fd9a 	bl	80144f0 <HAL_GPIO_TogglePin>
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 80099bc:	4b88      	ldr	r3, [pc, #544]	@ (8009be0 <main+0x35c>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	4b86      	ldr	r3, [pc, #536]	@ (8009be0 <main+0x35c>)
 80099c6:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 80099c8:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80099ca:	f7fb fdf9 	bl	80055c0 <main10>

    muestreo();
 80099ce:	f000 fe2d 	bl	800a62c <muestreo>

  	if(StateSleep == 0x55){
 80099d2:	4b84      	ldr	r3, [pc, #528]	@ (8009be4 <main+0x360>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b55      	cmp	r3, #85	@ 0x55
 80099d8:	d101      	bne.n	80099de <main+0x15a>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 80099da:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 80099dc:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80099de:	f7fb fe7b 	bl	80056d8 <retardoDeActuadores>

  	asm ("nop");
 80099e2:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 80099e4:	f7ff fef6 	bl	80097d4 <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 80099e8:	4b70      	ldr	r3, [pc, #448]	@ (8009bac <main+0x328>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d009      	beq.n	8009a04 <main+0x180>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 80099f0:	4b72      	ldr	r3, [pc, #456]	@ (8009bbc <main+0x338>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	2140      	movs	r1, #64	@ 0x40
 80099f6:	0018      	movs	r0, r3
 80099f8:	f00a fd5d 	bl	80144b6 <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 80099fc:	4b70      	ldr	r3, [pc, #448]	@ (8009bc0 <main+0x33c>)
 80099fe:	2201      	movs	r2, #1
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	e018      	b.n	8009a36 <main+0x1b2>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 8009a04:	4b6d      	ldr	r3, [pc, #436]	@ (8009bbc <main+0x338>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	2140      	movs	r1, #64	@ 0x40
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	f00a fd53 	bl	80144b6 <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 8009a10:	4b6b      	ldr	r3, [pc, #428]	@ (8009bc0 <main+0x33c>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d00b      	beq.n	8009a30 <main+0x1ac>
 8009a18:	dc0d      	bgt.n	8009a36 <main+0x1b2>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d002      	beq.n	8009a24 <main+0x1a0>
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d003      	beq.n	8009a2a <main+0x1a6>
 8009a22:	e008      	b.n	8009a36 <main+0x1b2>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8009a24:	f7fb fa0e 	bl	8004e44 <SetUpBluetooth_Ble>
 8009a28:	e005      	b.n	8009a36 <main+0x1b2>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 8009a2a:	f7fb fa77 	bl	8004f1c <GetParamBluetooth_Ble>
 8009a2e:	e002      	b.n	8009a36 <main+0x1b2>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 8009a30:	f7fb fad4 	bl	8004fdc <TransmitReceive_Ble>
 8009a34:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 8009a36:	f7fb fd27 	bl	8005488 <Read_Inpunts_ble>
//  			flagsLogger [5] = 0;				// permite loggeo de datos
//  		}
//  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
//  	}

  	if(tick_1s){
 8009a3a:	4b6b      	ldr	r3, [pc, #428]	@ (8009be8 <main+0x364>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d006      	beq.n	8009a50 <main+0x1cc>
  	  asm ("nop");
 8009a42:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 8009a44:	4b69      	ldr	r3, [pc, #420]	@ (8009bec <main+0x368>)
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	4b67      	ldr	r3, [pc, #412]	@ (8009bec <main+0x368>)
 8009a4e:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 8009a50:	4b67      	ldr	r3, [pc, #412]	@ (8009bf0 <main+0x36c>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <main+0x1e0>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 8009a58:	4b66      	ldr	r3, [pc, #408]	@ (8009bf4 <main+0x370>)
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	4b64      	ldr	r3, [pc, #400]	@ (8009bf4 <main+0x370>)
 8009a62:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  		  		HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 8009a64:	4964      	ldr	r1, [pc, #400]	@ (8009bf8 <main+0x374>)
 8009a66:	4b58      	ldr	r3, [pc, #352]	@ (8009bc8 <main+0x344>)
 8009a68:	2201      	movs	r2, #1
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f00f f802 	bl	8018a74 <HAL_RTC_GetTime>
  		  		HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 8009a70:	4962      	ldr	r1, [pc, #392]	@ (8009bfc <main+0x378>)
 8009a72:	4b55      	ldr	r3, [pc, #340]	@ (8009bc8 <main+0x344>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	0018      	movs	r0, r3
 8009a78:	f00f f906 	bl	8018c88 <HAL_RTC_GetDate>
  		  		timeBCD_year = hRtcDate.Year;
 8009a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8009bfc <main+0x378>)
 8009a7e:	78da      	ldrb	r2, [r3, #3]
 8009a80:	4b5f      	ldr	r3, [pc, #380]	@ (8009c00 <main+0x37c>)
 8009a82:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_month = hRtcDate.Month;
 8009a84:	4b5d      	ldr	r3, [pc, #372]	@ (8009bfc <main+0x378>)
 8009a86:	785a      	ldrb	r2, [r3, #1]
 8009a88:	4b5e      	ldr	r3, [pc, #376]	@ (8009c04 <main+0x380>)
 8009a8a:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_day = hRtcDate.Date;
 8009a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8009bfc <main+0x378>)
 8009a8e:	789a      	ldrb	r2, [r3, #2]
 8009a90:	4b5d      	ldr	r3, [pc, #372]	@ (8009c08 <main+0x384>)
 8009a92:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_hour = hRtcTime.Hours;
 8009a94:	4b58      	ldr	r3, [pc, #352]	@ (8009bf8 <main+0x374>)
 8009a96:	781a      	ldrb	r2, [r3, #0]
 8009a98:	4b5c      	ldr	r3, [pc, #368]	@ (8009c0c <main+0x388>)
 8009a9a:	701a      	strb	r2, [r3, #0]
    	  		timeBCD_min = hRtcTime.Minutes;
 8009a9c:	4b56      	ldr	r3, [pc, #344]	@ (8009bf8 <main+0x374>)
 8009a9e:	785a      	ldrb	r2, [r3, #1]
 8009aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8009c10 <main+0x38c>)
 8009aa2:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_sec = hRtcTime.Seconds;
 8009aa4:	4b54      	ldr	r3, [pc, #336]	@ (8009bf8 <main+0x374>)
 8009aa6:	789a      	ldrb	r2, [r3, #2]
 8009aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c14 <main+0x390>)
 8009aaa:	701a      	strb	r2, [r3, #0]


  		  		timeBCD_to_UNIX();
 8009aac:	f7ff f950 	bl	8008d50 <timeBCD_to_UNIX>
  		  		//------------------------------------------------------------------------------------------
  		  		calculando_tiempo_UNIX ();
 8009ab0:	f7fb feb0 	bl	8005814 <calculando_tiempo_UNIX>
//------------------------------------------------------------------------------------------
  		  		if(!flagsTime[f_timeConfigRTC]){
 8009ab4:	4b58      	ldr	r3, [pc, #352]	@ (8009c18 <main+0x394>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	4053      	eors	r3, r2
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d119      	bne.n	8009af6 <main+0x272>
  		  			goto noActTime;
  		  		}

  		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 8009ac2:	4b56      	ldr	r3, [pc, #344]	@ (8009c1c <main+0x398>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	4b55      	ldr	r3, [pc, #340]	@ (8009c20 <main+0x39c>)
 8009acc:	801a      	strh	r2, [r3, #0]
  		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 8009ace:	4b53      	ldr	r3, [pc, #332]	@ (8009c1c <main+0x398>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	4b53      	ldr	r3, [pc, #332]	@ (8009c24 <main+0x3a0>)
 8009ad6:	801a      	strh	r2, [r3, #0]

  		  		if(timeBCD_sec_ANT == timeBCD_sec){
 8009ad8:	4b53      	ldr	r3, [pc, #332]	@ (8009c28 <main+0x3a4>)
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	4b4d      	ldr	r3, [pc, #308]	@ (8009c14 <main+0x390>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d00a      	beq.n	8009afa <main+0x276>
  		  			goto no_inc_cnt_sec;
  		  		}
  		  		timeBCD_sec_ANT = timeBCD_sec;
 8009ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8009c14 <main+0x390>)
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8009c28 <main+0x3a4>)
 8009aea:	701a      	strb	r2, [r3, #0]
  		  		decword(&cntLogger_H);
 8009aec:	4b4f      	ldr	r3, [pc, #316]	@ (8009c2c <main+0x3a8>)
 8009aee:	0018      	movs	r0, r3
 8009af0:	f7fd fc55 	bl	800739e <decword>
 8009af4:	e002      	b.n	8009afc <main+0x278>
  		  			goto noActTime;
 8009af6:	46c0      	nop			@ (mov r8, r8)
 8009af8:	e000      	b.n	8009afc <main+0x278>
  		  			goto no_inc_cnt_sec;
 8009afa:	46c0      	nop			@ (mov r8, r8)
  		  no_inc_cnt_sec:
  		  noActTime:
		  asm ("nop");
 8009afc:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 8009afe:	4b2c      	ldr	r3, [pc, #176]	@ (8009bb0 <main+0x32c>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b07      	cmp	r3, #7
 8009b04:	d841      	bhi.n	8009b8a <main+0x306>
 8009b06:	009a      	lsls	r2, r3, #2
 8009b08:	4b49      	ldr	r3, [pc, #292]	@ (8009c30 <main+0x3ac>)
 8009b0a:	18d3      	adds	r3, r2, r3
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 8009b10:	f7fd fe0a 	bl	8007728 <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 8009b14:	e03d      	b.n	8009b92 <main+0x30e>
  	  		case 1:
  	  			voltmetro();
 8009b16:	f007 fe23 	bl	8011760 <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 8009b1a:	e03a      	b.n	8009b92 <main+0x30e>
  	  		case 2:
  	  			temper();
 8009b1c:	f002 fe3a 	bl	800c794 <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 8009b20:	e037      	b.n	8009b92 <main+0x30e>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 8009b22:	4b44      	ldr	r3, [pc, #272]	@ (8009c34 <main+0x3b0>)
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	2240      	movs	r2, #64	@ 0x40
 8009b28:	4013      	ands	r3, r2
 8009b2a:	d005      	beq.n	8009b38 <main+0x2b4>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 8009b2c:	4b23      	ldr	r3, [pc, #140]	@ (8009bbc <main+0x338>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2104      	movs	r1, #4
 8009b32:	0018      	movs	r0, r3
 8009b34:	f00a fcbf 	bl	80144b6 <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 8009b38:	f7f9 fd42 	bl	80035c0 <ModbusMap>
  	  			noctar ();
 8009b3c:	f000 ffcc 	bl	800aad8 <noctar>
  	  			break;		// ASM: Pendiente a traducir
 8009b40:	e027      	b.n	8009b92 <main+0x30e>
  	  		case 4:
  	  			refrigera();
 8009b42:	f000 ffcf 	bl	800aae4 <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 8009b46:	e024      	b.n	8009b92 <main+0x30e>
  	  		case 5:
  	  			display();
 8009b48:	f7fe fba4 	bl	8008294 <display>
  	  			break;		// ASM: Pendiente a traducir
 8009b4c:	e021      	b.n	8009b92 <main+0x30e>
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 8009b4e:	f003 fe1f 	bl	800d790 <tiempo>
  	  			if(bandera_act_fw_j == 0)    //Parche
 8009b52:	4b39      	ldr	r3, [pc, #228]	@ (8009c38 <main+0x3b4>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2201      	movs	r2, #1
 8009b58:	4053      	eors	r3, r2
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <main+0x2e0>
  	  			{
  	  				logger ();				// ASM: Pendiente a traducir
 8009b60:	f7ff f96a 	bl	8008e38 <logger>
  	  			}
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 8009b64:	f004 f9a0 	bl	800dea8 <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 8009b68:	4b34      	ldr	r3, [pc, #208]	@ (8009c3c <main+0x3b8>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2baa      	cmp	r3, #170	@ 0xaa
 8009b6e:	d10f      	bne.n	8009b90 <main+0x30c>
  	  			    asm ("nop");
 8009b70:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 8009b72:	4b33      	ldr	r3, [pc, #204]	@ (8009c40 <main+0x3bc>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <main+0x30c>
  	  				    asm ("nop");
 8009b7a:	46c0      	nop			@ (mov r8, r8)
// 	  					bootloader();
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 8009b7c:	e008      	b.n	8009b90 <main+0x30c>
  	  		case 7:
  	  			watch();
 8009b7e:	f007 ff37 	bl	80119f0 <watch>
  	  			ProcesosC = 255;
 8009b82:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb0 <main+0x32c>)
 8009b84:	22ff      	movs	r2, #255	@ 0xff
 8009b86:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 8009b88:	e003      	b.n	8009b92 <main+0x30e>
  	  		default:
  	  		    asm ("nop");
 8009b8a:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 8009b8c:	46c0      	nop			@ (mov r8, r8)
 8009b8e:	e7fd      	b.n	8009b8c <main+0x308>
  	  			break;		// ASM: Pendiente a traducir
 8009b90:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8009b92:	4b17      	ldr	r3, [pc, #92]	@ (8009bf0 <main+0x36c>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 8009b98:	4b2a      	ldr	r3, [pc, #168]	@ (8009c44 <main+0x3c0>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 8009b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8009c48 <main+0x3c4>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8009ba4:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <main+0x364>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
  {
 8009baa:	e6e9      	b.n	8009980 <main+0xfc>
 8009bac:	20000f84 	.word	0x20000f84
 8009bb0:	20000904 	.word	0x20000904
 8009bb4:	20000c9c 	.word	0x20000c9c
 8009bb8:	200008ed 	.word	0x200008ed
 8009bbc:	50000800 	.word	0x50000800
 8009bc0:	2000004c 	.word	0x2000004c
 8009bc4:	50000400 	.word	0x50000400
 8009bc8:	20000574 	.word	0x20000574
 8009bcc:	20001180 	.word	0x20001180
 8009bd0:	0001fbcf 	.word	0x0001fbcf
 8009bd4:	200005a4 	.word	0x200005a4
 8009bd8:	20000560 	.word	0x20000560
 8009bdc:	40001000 	.word	0x40001000
 8009be0:	200003d9 	.word	0x200003d9
 8009be4:	20000905 	.word	0x20000905
 8009be8:	200008eb 	.word	0x200008eb
 8009bec:	20000b16 	.word	0x20000b16
 8009bf0:	200008e8 	.word	0x200008e8
 8009bf4:	20001020 	.word	0x20001020
 8009bf8:	20001114 	.word	0x20001114
 8009bfc:	20001128 	.word	0x20001128
 8009c00:	2000110c 	.word	0x2000110c
 8009c04:	2000110d 	.word	0x2000110d
 8009c08:	2000110e 	.word	0x2000110e
 8009c0c:	2000110f 	.word	0x2000110f
 8009c10:	20001110 	.word	0x20001110
 8009c14:	20001111 	.word	0x20001111
 8009c18:	20001104 	.word	0x20001104
 8009c1c:	20001134 	.word	0x20001134
 8009c20:	20000e4c 	.word	0x20000e4c
 8009c24:	20000e4e 	.word	0x20000e4e
 8009c28:	20001185 	.word	0x20001185
 8009c2c:	20000e34 	.word	0x20000e34
 8009c30:	0801c28c 	.word	0x0801c28c
 8009c34:	40004c00 	.word	0x40004c00
 8009c38:	20001184 	.word	0x20001184
 8009c3c:	20000f80 	.word	0x20000f80
 8009c40:	20000eb5 	.word	0x20000eb5
 8009c44:	200008e9 	.word	0x200008e9
 8009c48:	200008ea 	.word	0x200008ea

08009c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c4c:	b590      	push	{r4, r7, lr}
 8009c4e:	b099      	sub	sp, #100	@ 0x64
 8009c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c52:	2414      	movs	r4, #20
 8009c54:	193b      	adds	r3, r7, r4
 8009c56:	0018      	movs	r0, r3
 8009c58:	234c      	movs	r3, #76	@ 0x4c
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	f012 f877 	bl	801bd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c62:	1d3b      	adds	r3, r7, #4
 8009c64:	0018      	movs	r0, r3
 8009c66:	2310      	movs	r3, #16
 8009c68:	001a      	movs	r2, r3
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	f012 f870 	bl	801bd50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c70:	2380      	movs	r3, #128	@ 0x80
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	0018      	movs	r0, r3
 8009c76:	f00c fe87 	bl	8016988 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009c7a:	f00c fe77 	bl	801696c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009c7e:	4a27      	ldr	r2, [pc, #156]	@ (8009d1c <SystemClock_Config+0xd0>)
 8009c80:	2390      	movs	r3, #144	@ 0x90
 8009c82:	58d3      	ldr	r3, [r2, r3]
 8009c84:	4925      	ldr	r1, [pc, #148]	@ (8009d1c <SystemClock_Config+0xd0>)
 8009c86:	2218      	movs	r2, #24
 8009c88:	4393      	bics	r3, r2
 8009c8a:	2290      	movs	r2, #144	@ 0x90
 8009c8c:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8009c8e:	193b      	adds	r3, r7, r4
 8009c90:	2206      	movs	r2, #6
 8009c92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009c94:	193b      	adds	r3, r7, r4
 8009c96:	2281      	movs	r2, #129	@ 0x81
 8009c98:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009c9a:	193b      	adds	r3, r7, r4
 8009c9c:	2280      	movs	r2, #128	@ 0x80
 8009c9e:	0052      	lsls	r2, r2, #1
 8009ca0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009ca2:	0021      	movs	r1, r4
 8009ca4:	187b      	adds	r3, r7, r1
 8009ca6:	2240      	movs	r2, #64	@ 0x40
 8009ca8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009caa:	187b      	adds	r3, r7, r1
 8009cac:	2202      	movs	r2, #2
 8009cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009cb6:	187b      	adds	r3, r7, r1
 8009cb8:	2200      	movs	r2, #0
 8009cba:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 7;
 8009cbc:	187b      	adds	r3, r7, r1
 8009cbe:	2207      	movs	r2, #7
 8009cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009cc2:	187b      	adds	r3, r7, r1
 8009cc4:	2280      	movs	r2, #128	@ 0x80
 8009cc6:	0292      	lsls	r2, r2, #10
 8009cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009cca:	187b      	adds	r3, r7, r1
 8009ccc:	2280      	movs	r2, #128	@ 0x80
 8009cce:	0492      	lsls	r2, r2, #18
 8009cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009cd2:	187b      	adds	r3, r7, r1
 8009cd4:	2280      	movs	r2, #128	@ 0x80
 8009cd6:	0592      	lsls	r2, r2, #22
 8009cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009cda:	187b      	adds	r3, r7, r1
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f00c fef3 	bl	8016ac8 <HAL_RCC_OscConfig>
 8009ce2:	1e03      	subs	r3, r0, #0
 8009ce4:	d001      	beq.n	8009cea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8009ce6:	f000 fc9b 	bl	800a620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009cea:	1d3b      	adds	r3, r7, #4
 8009cec:	2207      	movs	r2, #7
 8009cee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009cf0:	1d3b      	adds	r3, r7, #4
 8009cf2:	2203      	movs	r2, #3
 8009cf4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009cf6:	1d3b      	adds	r3, r7, #4
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009cfc:	1d3b      	adds	r3, r7, #4
 8009cfe:	2200      	movs	r2, #0
 8009d00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009d02:	1d3b      	adds	r3, r7, #4
 8009d04:	2102      	movs	r1, #2
 8009d06:	0018      	movs	r0, r3
 8009d08:	f00d fb08 	bl	801731c <HAL_RCC_ClockConfig>
 8009d0c:	1e03      	subs	r3, r0, #0
 8009d0e:	d001      	beq.n	8009d14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8009d10:	f000 fc86 	bl	800a620 <Error_Handler>
  }
}
 8009d14:	46c0      	nop			@ (mov r8, r8)
 8009d16:	46bd      	mov	sp, r7
 8009d18:	b019      	add	sp, #100	@ 0x64
 8009d1a:	bd90      	pop	{r4, r7, pc}
 8009d1c:	40021000 	.word	0x40021000

08009d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	@ 0x28
 8009d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 8009d26:	4b9c      	ldr	r3, [pc, #624]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009d28:	4a9c      	ldr	r2, [pc, #624]	@ (8009f9c <MX_ADC1_Init+0x27c>)
 8009d2a:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 8009d2c:	4b9a      	ldr	r3, [pc, #616]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8009f9c <MX_ADC1_Init+0x27c>)
 8009d30:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 8009d32:	4b9b      	ldr	r3, [pc, #620]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d36:	4b9a      	ldr	r3, [pc, #616]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d38:	2180      	movs	r1, #128	@ 0x80
 8009d3a:	0349      	lsls	r1, r1, #13
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8009d40:	4b97      	ldr	r3, [pc, #604]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d44:	4b96      	ldr	r3, [pc, #600]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d46:	2104      	movs	r1, #4
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8009d4c:	4b94      	ldr	r3, [pc, #592]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d50:	4b93      	ldr	r3, [pc, #588]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d52:	2101      	movs	r1, #1
 8009d54:	430a      	orrs	r2, r1
 8009d56:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 8009d58:	4b91      	ldr	r3, [pc, #580]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d5c:	4b90      	ldr	r3, [pc, #576]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d5e:	2110      	movs	r1, #16
 8009d60:	430a      	orrs	r2, r1
 8009d62:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 8009d64:	4b8f      	ldr	r3, [pc, #572]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4b8e      	ldr	r3, [pc, #568]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d6a:	210f      	movs	r1, #15
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8009d70:	4b8c      	ldr	r3, [pc, #560]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	4b8b      	ldr	r3, [pc, #556]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d76:	210f      	movs	r1, #15
 8009d78:	438a      	bics	r2, r1
 8009d7a:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8009d7c:	23a0      	movs	r3, #160	@ 0xa0
 8009d7e:	05db      	lsls	r3, r3, #23
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	23a0      	movs	r3, #160	@ 0xa0
 8009d84:	05db      	lsls	r3, r3, #23
 8009d86:	21fc      	movs	r1, #252	@ 0xfc
 8009d88:	0209      	lsls	r1, r1, #8
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8009d8e:	23a0      	movs	r3, #160	@ 0xa0
 8009d90:	05db      	lsls	r3, r3, #23
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	23a0      	movs	r3, #160	@ 0xa0
 8009d96:	05db      	lsls	r3, r3, #23
 8009d98:	4983      	ldr	r1, [pc, #524]	@ (8009fa8 <MX_ADC1_Init+0x288>)
 8009d9a:	400a      	ands	r2, r1
 8009d9c:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 8009d9e:	4b83      	ldr	r3, [pc, #524]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b82      	ldr	r3, [pc, #520]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009da4:	210c      	movs	r1, #12
 8009da6:	430a      	orrs	r2, r1
 8009da8:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8009daa:	4b80      	ldr	r3, [pc, #512]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	4b7f      	ldr	r3, [pc, #508]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009db0:	210c      	movs	r1, #12
 8009db2:	438a      	bics	r2, r1
 8009db4:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 8009db6:	4b78      	ldr	r3, [pc, #480]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009db8:	22c0      	movs	r2, #192	@ 0xc0
 8009dba:	0612      	lsls	r2, r2, #24
 8009dbc:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 8009dbe:	4b76      	ldr	r3, [pc, #472]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 8009dc4:	4b74      	ldr	r3, [pc, #464]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009dc6:	2280      	movs	r2, #128	@ 0x80
 8009dc8:	0552      	lsls	r2, r2, #21
 8009dca:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 8009dcc:	4b72      	ldr	r3, [pc, #456]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009dce:	4a78      	ldr	r2, [pc, #480]	@ (8009fb0 <MX_ADC1_Init+0x290>)
 8009dd0:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009dd2:	231c      	movs	r3, #28
 8009dd4:	18fb      	adds	r3, r7, r3
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	230c      	movs	r3, #12
 8009dda:	001a      	movs	r2, r3
 8009ddc:	2100      	movs	r1, #0
 8009dde:	f011 ffb7 	bl	801bd50 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8009de2:	1d3b      	adds	r3, r7, #4
 8009de4:	0018      	movs	r0, r3
 8009de6:	2318      	movs	r3, #24
 8009de8:	001a      	movs	r2, r3
 8009dea:	2100      	movs	r1, #0
 8009dec:	f011 ffb0 	bl	801bd50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009df0:	4b70      	ldr	r3, [pc, #448]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009df2:	4a69      	ldr	r2, [pc, #420]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009df4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009df6:	4b6f      	ldr	r3, [pc, #444]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009df8:	22c0      	movs	r2, #192	@ 0xc0
 8009dfa:	0612      	lsls	r2, r2, #24
 8009dfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8009dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e00:	2208      	movs	r2, #8
 8009e02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009e04:	4b6b      	ldr	r3, [pc, #428]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8009e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e0c:	2280      	movs	r2, #128	@ 0x80
 8009e0e:	0612      	lsls	r2, r2, #24
 8009e10:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009e12:	4b68      	ldr	r3, [pc, #416]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e14:	2204      	movs	r2, #4
 8009e16:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009e18:	4b66      	ldr	r3, [pc, #408]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8009e1e:	4b65      	ldr	r3, [pc, #404]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009e24:	4b63      	ldr	r3, [pc, #396]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8009e2a:	4b62      	ldr	r3, [pc, #392]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009e30:	4b60      	ldr	r3, [pc, #384]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e32:	2220      	movs	r2, #32
 8009e34:	2100      	movs	r1, #0
 8009e36:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009e38:	4b5e      	ldr	r3, [pc, #376]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009e44:	4b5b      	ldr	r3, [pc, #364]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e46:	222c      	movs	r2, #44	@ 0x2c
 8009e48:	2100      	movs	r1, #0
 8009e4a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009e4c:	4b59      	ldr	r3, [pc, #356]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009e52:	4b58      	ldr	r3, [pc, #352]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009e58:	4b56      	ldr	r3, [pc, #344]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e5a:	223c      	movs	r2, #60	@ 0x3c
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8009e60:	4b54      	ldr	r3, [pc, #336]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e62:	2280      	movs	r2, #128	@ 0x80
 8009e64:	0592      	lsls	r2, r2, #22
 8009e66:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009e68:	4b52      	ldr	r3, [pc, #328]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f008 f9d4 	bl	8012218 <HAL_ADC_Init>
 8009e70:	1e03      	subs	r3, r0, #0
 8009e72:	d001      	beq.n	8009e78 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8009e74:	f000 fbd4 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009e78:	211c      	movs	r1, #28
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009e80:	187b      	adds	r3, r7, r1
 8009e82:	2201      	movs	r2, #1
 8009e84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009e86:	187a      	adds	r2, r7, r1
 8009e88:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e8a:	0011      	movs	r1, r2
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f008 fc07 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009e92:	1e03      	subs	r3, r0, #0
 8009e94:	d001      	beq.n	8009e9a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8009e96:	f000 fbc3 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009e9a:	211c      	movs	r1, #28
 8009e9c:	187b      	adds	r3, r7, r1
 8009e9e:	4a46      	ldr	r2, [pc, #280]	@ (8009fb8 <MX_ADC1_Init+0x298>)
 8009ea0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ea2:	187a      	adds	r2, r7, r1
 8009ea4:	4b43      	ldr	r3, [pc, #268]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009ea6:	0011      	movs	r1, r2
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f008 fbf9 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009eae:	1e03      	subs	r3, r0, #0
 8009eb0:	d001      	beq.n	8009eb6 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8009eb2:	f000 fbb5 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009eb6:	211c      	movs	r1, #28
 8009eb8:	187b      	adds	r3, r7, r1
 8009eba:	4a40      	ldr	r2, [pc, #256]	@ (8009fbc <MX_ADC1_Init+0x29c>)
 8009ebc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ebe:	187a      	adds	r2, r7, r1
 8009ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009ec2:	0011      	movs	r1, r2
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f008 fbeb 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009eca:	1e03      	subs	r3, r0, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8009ece:	f000 fba7 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009ed2:	211c      	movs	r1, #28
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8009fc0 <MX_ADC1_Init+0x2a0>)
 8009ed8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009eda:	187a      	adds	r2, r7, r1
 8009edc:	4b35      	ldr	r3, [pc, #212]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009ede:	0011      	movs	r1, r2
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f008 fbdd 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009ee6:	1e03      	subs	r3, r0, #0
 8009ee8:	d001      	beq.n	8009eee <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8009eea:	f000 fb99 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009eee:	211c      	movs	r1, #28
 8009ef0:	187b      	adds	r3, r7, r1
 8009ef2:	4a34      	ldr	r2, [pc, #208]	@ (8009fc4 <MX_ADC1_Init+0x2a4>)
 8009ef4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ef6:	187a      	adds	r2, r7, r1
 8009ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009efa:	0011      	movs	r1, r2
 8009efc:	0018      	movs	r0, r3
 8009efe:	f008 fbcf 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009f02:	1e03      	subs	r3, r0, #0
 8009f04:	d001      	beq.n	8009f0a <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8009f06:	f000 fb8b 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009f0a:	211c      	movs	r1, #28
 8009f0c:	187b      	adds	r3, r7, r1
 8009f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8009fc8 <MX_ADC1_Init+0x2a8>)
 8009f10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f12:	187a      	adds	r2, r7, r1
 8009f14:	4b27      	ldr	r3, [pc, #156]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f16:	0011      	movs	r1, r2
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f008 fbc1 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009f1e:	1e03      	subs	r3, r0, #0
 8009f20:	d001      	beq.n	8009f26 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8009f22:	f000 fb7d 	bl	800a620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8009f26:	211c      	movs	r1, #28
 8009f28:	187b      	adds	r3, r7, r1
 8009f2a:	4a28      	ldr	r2, [pc, #160]	@ (8009fcc <MX_ADC1_Init+0x2ac>)
 8009f2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f2e:	187a      	adds	r2, r7, r1
 8009f30:	4b20      	ldr	r3, [pc, #128]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f32:	0011      	movs	r1, r2
 8009f34:	0018      	movs	r0, r3
 8009f36:	f008 fbb3 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8009f3a:	1e03      	subs	r3, r0, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8009f3e:	f000 fb6f 	bl	800a620 <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8009f42:	1d3b      	adds	r3, r7, #4
 8009f44:	4a22      	ldr	r2, [pc, #136]	@ (8009fd0 <MX_ADC1_Init+0x2b0>)
 8009f46:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8009f48:	1d3b      	adds	r3, r7, #4
 8009f4a:	22c0      	movs	r2, #192	@ 0xc0
 8009f4c:	0412      	lsls	r2, r2, #16
 8009f4e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009f50:	1d3a      	adds	r2, r7, #4
 8009f52:	4b18      	ldr	r3, [pc, #96]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f54:	0011      	movs	r1, r2
 8009f56:	0018      	movs	r0, r3
 8009f58:	f008 fd0e 	bl	8012978 <HAL_ADC_AnalogWDGConfig>
 8009f5c:	1e03      	subs	r3, r0, #0
 8009f5e:	d001      	beq.n	8009f64 <MX_ADC1_Init+0x244>
  {
    Error_Handler();
 8009f60:	f000 fb5e 	bl	800a620 <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8009f64:	1d3b      	adds	r3, r7, #4
 8009f66:	4a1b      	ldr	r2, [pc, #108]	@ (8009fd4 <MX_ADC1_Init+0x2b4>)
 8009f68:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009f6a:	1d3a      	adds	r2, r7, #4
 8009f6c:	4b11      	ldr	r3, [pc, #68]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f6e:	0011      	movs	r1, r2
 8009f70:	0018      	movs	r0, r3
 8009f72:	f008 fd01 	bl	8012978 <HAL_ADC_AnalogWDGConfig>
 8009f76:	1e03      	subs	r3, r0, #0
 8009f78:	d001      	beq.n	8009f7e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8009f7a:	f000 fb51 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8009f7e:	46c0      	nop			@ (mov r8, r8)
 8009f80:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f82:	0018      	movs	r0, r3
 8009f84:	f009 f870 	bl	8013068 <HAL_ADCEx_Calibration_Start>
 8009f88:	1e03      	subs	r3, r0, #0
 8009f8a:	d1f9      	bne.n	8009f80 <MX_ADC1_Init+0x260>

  /* USER CODE END ADC1_Init 2 */

}
 8009f8c:	46c0      	nop			@ (mov r8, r8)
 8009f8e:	46c0      	nop			@ (mov r8, r8)
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b00a      	add	sp, #40	@ 0x28
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	40012400 	.word	0x40012400
 8009f9c:	0fff0000 	.word	0x0fff0000
 8009fa0:	40021000 	.word	0x40021000
 8009fa4:	50000800 	.word	0x50000800
 8009fa8:	ffff03ff 	.word	0xffff03ff
 8009fac:	50000400 	.word	0x50000400
 8009fb0:	00044603 	.word	0x00044603
 8009fb4:	200003e8 	.word	0x200003e8
 8009fb8:	04000002 	.word	0x04000002
 8009fbc:	24000200 	.word	0x24000200
 8009fc0:	28000400 	.word	0x28000400
 8009fc4:	38004000 	.word	0x38004000
 8009fc8:	3c008000 	.word	0x3c008000
 8009fcc:	48040000 	.word	0x48040000
 8009fd0:	0017ffff 	.word	0x0017ffff
 8009fd4:	0027ffff 	.word	0x0027ffff

08009fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009fdc:	4b1c      	ldr	r3, [pc, #112]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009fde:	4a1d      	ldr	r2, [pc, #116]	@ (800a054 <MX_I2C1_Init+0x7c>)
 8009fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8009fe2:	4b1b      	ldr	r3, [pc, #108]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009fe4:	4a1c      	ldr	r2, [pc, #112]	@ (800a058 <MX_I2C1_Init+0x80>)
 8009fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009fe8:	4b19      	ldr	r3, [pc, #100]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009fee:	4b18      	ldr	r3, [pc, #96]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009ff4:	4b16      	ldr	r3, [pc, #88]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009ffa:	4b15      	ldr	r3, [pc, #84]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a000:	4b13      	ldr	r3, [pc, #76]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a002:	2200      	movs	r2, #0
 800a004:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a006:	4b12      	ldr	r3, [pc, #72]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a008:	2200      	movs	r2, #0
 800a00a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a00c:	4b10      	ldr	r3, [pc, #64]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a00e:	2200      	movs	r2, #0
 800a010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a012:	4b0f      	ldr	r3, [pc, #60]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a014:	0018      	movs	r0, r3
 800a016:	f00a fac5 	bl	80145a4 <HAL_I2C_Init>
 800a01a:	1e03      	subs	r3, r0, #0
 800a01c:	d001      	beq.n	800a022 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a01e:	f000 faff 	bl	800a620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800a022:	2380      	movs	r3, #128	@ 0x80
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	4b0a      	ldr	r3, [pc, #40]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a028:	0011      	movs	r1, r2
 800a02a:	0018      	movs	r0, r3
 800a02c:	f00c fb6c 	bl	8016708 <HAL_I2CEx_ConfigAnalogFilter>
 800a030:	1e03      	subs	r3, r0, #0
 800a032:	d001      	beq.n	800a038 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800a034:	f000 faf4 	bl	800a620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a038:	4b05      	ldr	r3, [pc, #20]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a03a:	2100      	movs	r1, #0
 800a03c:	0018      	movs	r0, r3
 800a03e:	f00c fbaf 	bl	80167a0 <HAL_I2CEx_ConfigDigitalFilter>
 800a042:	1e03      	subs	r3, r0, #0
 800a044:	d001      	beq.n	800a04a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800a046:	f000 faeb 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a04a:	46c0      	nop			@ (mov r8, r8)
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	2000044c 	.word	0x2000044c
 800a054:	40005400 	.word	0x40005400
 800a058:	201060ff 	.word	0x201060ff

0800a05c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a060:	4b0d      	ldr	r3, [pc, #52]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a062:	4a0e      	ldr	r2, [pc, #56]	@ (800a09c <MX_IWDG_Init+0x40>)
 800a064:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800a066:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a068:	2200      	movs	r2, #0
 800a06a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 800;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a06e:	22c8      	movs	r2, #200	@ 0xc8
 800a070:	0092      	lsls	r2, r2, #2
 800a072:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 800;
 800a074:	4b08      	ldr	r3, [pc, #32]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a076:	22c8      	movs	r2, #200	@ 0xc8
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 800a07c:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a07e:	2200      	movs	r2, #0
 800a080:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a082:	4b05      	ldr	r3, [pc, #20]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a084:	0018      	movs	r0, r3
 800a086:	f00c fbd7 	bl	8016838 <HAL_IWDG_Init>
 800a08a:	1e03      	subs	r3, r0, #0
 800a08c:	d001      	beq.n	800a092 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 800a08e:	f000 fac7 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a092:	46c0      	nop			@ (mov r8, r8)
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20000560 	.word	0x20000560
 800a09c:	40003000 	.word	0x40003000

0800a0a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	2314      	movs	r3, #20
 800a0ac:	001a      	movs	r2, r3
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f011 fe4e 	bl	801bd50 <memset>
  RTC_DateTypeDef sDate = {0};
 800a0b4:	003b      	movs	r3, r7
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a0ba:	4b32      	ldr	r3, [pc, #200]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0bc:	4a32      	ldr	r2, [pc, #200]	@ (800a188 <MX_RTC_Init+0xe8>)
 800a0be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a0c0:	4b30      	ldr	r3, [pc, #192]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a0c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0c8:	227f      	movs	r2, #127	@ 0x7f
 800a0ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0ce:	22ff      	movs	r2, #255	@ 0xff
 800a0d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a0d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a0d8:	4b2a      	ldr	r3, [pc, #168]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a0de:	4b29      	ldr	r3, [pc, #164]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a0e4:	4b27      	ldr	r3, [pc, #156]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0e6:	2280      	movs	r2, #128	@ 0x80
 800a0e8:	05d2      	lsls	r2, r2, #23
 800a0ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a0ec:	4b25      	ldr	r3, [pc, #148]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800a0f2:	4b24      	ldr	r3, [pc, #144]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a0f8:	4b22      	ldr	r3, [pc, #136]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f00e fb54 	bl	80187a8 <HAL_RTC_Init>
 800a100:	1e03      	subs	r3, r0, #0
 800a102:	d001      	beq.n	800a108 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 800a104:	f000 fa8c 	bl	800a620 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800a108:	1d3b      	adds	r3, r7, #4
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800a10e:	1d3b      	adds	r3, r7, #4
 800a110:	2200      	movs	r2, #0
 800a112:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	2200      	movs	r2, #0
 800a118:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a11a:	1d3b      	adds	r3, r7, #4
 800a11c:	2200      	movs	r2, #0
 800a11e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a120:	1d3b      	adds	r3, r7, #4
 800a122:	2200      	movs	r2, #0
 800a124:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a126:	1d39      	adds	r1, r7, #4
 800a128:	4b16      	ldr	r3, [pc, #88]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	0018      	movs	r0, r3
 800a12e:	f00e fbe1 	bl	80188f4 <HAL_RTC_SetTime>
 800a132:	1e03      	subs	r3, r0, #0
 800a134:	d001      	beq.n	800a13a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800a136:	f000 fa73 	bl	800a620 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a13a:	003b      	movs	r3, r7
 800a13c:	2201      	movs	r2, #1
 800a13e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800a140:	003b      	movs	r3, r7
 800a142:	2201      	movs	r2, #1
 800a144:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800a146:	003b      	movs	r3, r7
 800a148:	2201      	movs	r2, #1
 800a14a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800a14c:	003b      	movs	r3, r7
 800a14e:	2200      	movs	r2, #0
 800a150:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a152:	0039      	movs	r1, r7
 800a154:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a156:	2201      	movs	r2, #1
 800a158:	0018      	movs	r0, r3
 800a15a:	f00e fcef 	bl	8018b3c <HAL_RTC_SetDate>
 800a15e:	1e03      	subs	r3, r0, #0
 800a160:	d001      	beq.n	800a166 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800a162:	f000 fa5d 	bl	800a620 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800a166:	2380      	movs	r3, #128	@ 0x80
 800a168:	0199      	lsls	r1, r3, #6
 800a16a:	4806      	ldr	r0, [pc, #24]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	2200      	movs	r2, #0
 800a170:	f00e fe70 	bl	8018e54 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a174:	1e03      	subs	r3, r0, #0
 800a176:	d001      	beq.n	800a17c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800a178:	f000 fa52 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a17c:	46c0      	nop			@ (mov r8, r8)
 800a17e:	46bd      	mov	sp, r7
 800a180:	b006      	add	sp, #24
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000574 	.word	0x20000574
 800a188:	40002800 	.word	0x40002800

0800a18c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08e      	sub	sp, #56	@ 0x38
 800a190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a192:	2328      	movs	r3, #40	@ 0x28
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	0018      	movs	r0, r3
 800a198:	2310      	movs	r3, #16
 800a19a:	001a      	movs	r2, r3
 800a19c:	2100      	movs	r1, #0
 800a19e:	f011 fdd7 	bl	801bd50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1a2:	231c      	movs	r3, #28
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	001a      	movs	r2, r3
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	f011 fdcf 	bl	801bd50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1b2:	003b      	movs	r3, r7
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	231c      	movs	r3, #28
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	f011 fdc8 	bl	801bd50 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a1c0:	4b30      	ldr	r3, [pc, #192]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1c2:	4a31      	ldr	r2, [pc, #196]	@ (800a288 <MX_TIM3_Init+0xfc>)
 800a1c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14000;
 800a1d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1d4:	4a2d      	ldr	r2, [pc, #180]	@ (800a28c <MX_TIM3_Init+0x100>)
 800a1d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1d8:	4b2a      	ldr	r3, [pc, #168]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1de:	4b29      	ldr	r3, [pc, #164]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a1e4:	4b27      	ldr	r3, [pc, #156]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	f00e ff22 	bl	8019030 <HAL_TIM_Base_Init>
 800a1ec:	1e03      	subs	r3, r0, #0
 800a1ee:	d001      	beq.n	800a1f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800a1f0:	f000 fa16 	bl	800a620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1f4:	2128      	movs	r1, #40	@ 0x28
 800a1f6:	187b      	adds	r3, r7, r1
 800a1f8:	2280      	movs	r2, #128	@ 0x80
 800a1fa:	0152      	lsls	r2, r2, #5
 800a1fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a1fe:	187a      	adds	r2, r7, r1
 800a200:	4b20      	ldr	r3, [pc, #128]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a202:	0011      	movs	r1, r2
 800a204:	0018      	movs	r0, r3
 800a206:	f00f fa33 	bl	8019670 <HAL_TIM_ConfigClockSource>
 800a20a:	1e03      	subs	r3, r0, #0
 800a20c:	d001      	beq.n	800a212 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800a20e:	f000 fa07 	bl	800a620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a212:	4b1c      	ldr	r3, [pc, #112]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a214:	0018      	movs	r0, r3
 800a216:	f00e ff63 	bl	80190e0 <HAL_TIM_PWM_Init>
 800a21a:	1e03      	subs	r3, r0, #0
 800a21c:	d001      	beq.n	800a222 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800a21e:	f000 f9ff 	bl	800a620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a222:	211c      	movs	r1, #28
 800a224:	187b      	adds	r3, r7, r1
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a22a:	187b      	adds	r3, r7, r1
 800a22c:	2200      	movs	r2, #0
 800a22e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a230:	187a      	adds	r2, r7, r1
 800a232:	4b14      	ldr	r3, [pc, #80]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a234:	0011      	movs	r1, r2
 800a236:	0018      	movs	r0, r3
 800a238:	f00f fed0 	bl	8019fdc <HAL_TIMEx_MasterConfigSynchronization>
 800a23c:	1e03      	subs	r3, r0, #0
 800a23e:	d001      	beq.n	800a244 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800a240:	f000 f9ee 	bl	800a620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a244:	003b      	movs	r3, r7
 800a246:	2260      	movs	r2, #96	@ 0x60
 800a248:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 800a24a:	003b      	movs	r3, r7
 800a24c:	22fa      	movs	r2, #250	@ 0xfa
 800a24e:	00d2      	lsls	r2, r2, #3
 800a250:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a252:	003b      	movs	r3, r7
 800a254:	2200      	movs	r2, #0
 800a256:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a258:	003b      	movs	r3, r7
 800a25a:	2200      	movs	r2, #0
 800a25c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a25e:	0039      	movs	r1, r7
 800a260:	4b08      	ldr	r3, [pc, #32]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a262:	2204      	movs	r2, #4
 800a264:	0018      	movs	r0, r3
 800a266:	f00f f903 	bl	8019470 <HAL_TIM_PWM_ConfigChannel>
 800a26a:	1e03      	subs	r3, r0, #0
 800a26c:	d001      	beq.n	800a272 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800a26e:	f000 f9d7 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a272:	4b04      	ldr	r3, [pc, #16]	@ (800a284 <MX_TIM3_Init+0xf8>)
 800a274:	0018      	movs	r0, r3
 800a276:	f001 ff9d 	bl	800c1b4 <HAL_TIM_MspPostInit>

}
 800a27a:	46c0      	nop			@ (mov r8, r8)
 800a27c:	46bd      	mov	sp, r7
 800a27e:	b00e      	add	sp, #56	@ 0x38
 800a280:	bd80      	pop	{r7, pc}
 800a282:	46c0      	nop			@ (mov r8, r8)
 800a284:	200005a4 	.word	0x200005a4
 800a288:	40000400 	.word	0x40000400
 800a28c:	000036b0 	.word	0x000036b0

0800a290 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a296:	1d3b      	adds	r3, r7, #4
 800a298:	0018      	movs	r0, r3
 800a29a:	230c      	movs	r3, #12
 800a29c:	001a      	movs	r2, r3
 800a29e:	2100      	movs	r1, #0
 800a2a0:	f011 fd56 	bl	801bd50 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a2a4:	4b18      	ldr	r3, [pc, #96]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2a6:	4a19      	ldr	r2, [pc, #100]	@ (800a30c <MX_TIM6_Init+0x7c>)
 800a2a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 800a2aa:	4b17      	ldr	r3, [pc, #92]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2ac:	221f      	movs	r2, #31
 800a2ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2b0:	4b15      	ldr	r3, [pc, #84]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 438;
 800a2b6:	4b14      	ldr	r3, [pc, #80]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2b8:	22db      	movs	r2, #219	@ 0xdb
 800a2ba:	0052      	lsls	r2, r2, #1
 800a2bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a2be:	4b12      	ldr	r3, [pc, #72]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a2c4:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f00e feb2 	bl	8019030 <HAL_TIM_Base_Init>
 800a2cc:	1e03      	subs	r3, r0, #0
 800a2ce:	d001      	beq.n	800a2d4 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800a2d0:	f000 f9a6 	bl	800a620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a2d4:	1d3b      	adds	r3, r7, #4
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a2da:	1d3b      	adds	r3, r7, #4
 800a2dc:	2200      	movs	r2, #0
 800a2de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a2e0:	1d3a      	adds	r2, r7, #4
 800a2e2:	4b09      	ldr	r3, [pc, #36]	@ (800a308 <MX_TIM6_Init+0x78>)
 800a2e4:	0011      	movs	r1, r2
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f00f fe78 	bl	8019fdc <HAL_TIMEx_MasterConfigSynchronization>
 800a2ec:	1e03      	subs	r3, r0, #0
 800a2ee:	d001      	beq.n	800a2f4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800a2f0:	f000 f996 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <MX_TIM6_Init+0x7c>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <MX_TIM6_Init+0x7c>)
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 800a300:	46c0      	nop			@ (mov r8, r8)
 800a302:	46bd      	mov	sp, r7
 800a304:	b004      	add	sp, #16
 800a306:	bd80      	pop	{r7, pc}
 800a308:	200005f0 	.word	0x200005f0
 800a30c:	40001000 	.word	0x40001000

0800a310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a314:	4b23      	ldr	r3, [pc, #140]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a316:	4a24      	ldr	r2, [pc, #144]	@ (800a3a8 <MX_USART2_UART_Init+0x98>)
 800a318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a31a:	4b22      	ldr	r3, [pc, #136]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a31c:	22e1      	movs	r2, #225	@ 0xe1
 800a31e:	0252      	lsls	r2, r2, #9
 800a320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a322:	4b20      	ldr	r3, [pc, #128]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a324:	2200      	movs	r2, #0
 800a326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a328:	4b1e      	ldr	r3, [pc, #120]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a32e:	4b1d      	ldr	r3, [pc, #116]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a330:	2200      	movs	r2, #0
 800a332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a334:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a336:	220c      	movs	r2, #12
 800a338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a33a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a340:	4b18      	ldr	r3, [pc, #96]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a342:	2200      	movs	r2, #0
 800a344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a346:	4b17      	ldr	r3, [pc, #92]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a348:	2200      	movs	r2, #0
 800a34a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a34c:	4b15      	ldr	r3, [pc, #84]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a34e:	2200      	movs	r2, #0
 800a350:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a352:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a354:	2200      	movs	r2, #0
 800a356:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a358:	4b12      	ldr	r3, [pc, #72]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a35a:	0018      	movs	r0, r3
 800a35c:	f00f feac 	bl	801a0b8 <HAL_UART_Init>
 800a360:	1e03      	subs	r3, r0, #0
 800a362:	d001      	beq.n	800a368 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a364:	f000 f95c 	bl	800a620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a368:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a36a:	2100      	movs	r1, #0
 800a36c:	0018      	movs	r0, r3
 800a36e:	f011 fb3b 	bl	801b9e8 <HAL_UARTEx_SetTxFifoThreshold>
 800a372:	1e03      	subs	r3, r0, #0
 800a374:	d001      	beq.n	800a37a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a376:	f000 f953 	bl	800a620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a37a:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a37c:	2100      	movs	r1, #0
 800a37e:	0018      	movs	r0, r3
 800a380:	f011 fb72 	bl	801ba68 <HAL_UARTEx_SetRxFifoThreshold>
 800a384:	1e03      	subs	r3, r0, #0
 800a386:	d001      	beq.n	800a38c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a388:	f000 f94a 	bl	800a620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a38c:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <MX_USART2_UART_Init+0x94>)
 800a38e:	0018      	movs	r0, r3
 800a390:	f011 faf0 	bl	801b974 <HAL_UARTEx_DisableFifoMode>
 800a394:	1e03      	subs	r3, r0, #0
 800a396:	d001      	beq.n	800a39c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a398:	f000 f942 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a39c:	46c0      	nop			@ (mov r8, r8)
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	46c0      	nop			@ (mov r8, r8)
 800a3a4:	2000063c 	.word	0x2000063c
 800a3a8:	40004400 	.word	0x40004400

0800a3ac <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a3b0:	4b24      	ldr	r3, [pc, #144]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3b2:	4a25      	ldr	r2, [pc, #148]	@ (800a448 <MX_USART4_UART_Init+0x9c>)
 800a3b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800a3b6:	4b23      	ldr	r3, [pc, #140]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3b8:	2296      	movs	r2, #150	@ 0x96
 800a3ba:	0212      	lsls	r2, r2, #8
 800a3bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800a3be:	4b21      	ldr	r3, [pc, #132]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3c0:	2280      	movs	r2, #128	@ 0x80
 800a3c2:	0152      	lsls	r2, r2, #5
 800a3c4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800a3cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3ce:	2280      	movs	r2, #128	@ 0x80
 800a3d0:	00d2      	lsls	r2, r2, #3
 800a3d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a3d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3d6:	220c      	movs	r2, #12
 800a3d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3da:	4b1a      	ldr	r3, [pc, #104]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3e0:	4b18      	ldr	r3, [pc, #96]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3e6:	4b17      	ldr	r3, [pc, #92]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a3ec:	4b15      	ldr	r3, [pc, #84]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3f2:	4b14      	ldr	r3, [pc, #80]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a3f8:	4b12      	ldr	r3, [pc, #72]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f00f fe5c 	bl	801a0b8 <HAL_UART_Init>
 800a400:	1e03      	subs	r3, r0, #0
 800a402:	d001      	beq.n	800a408 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 800a404:	f000 f90c 	bl	800a620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a408:	4b0e      	ldr	r3, [pc, #56]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a40a:	2100      	movs	r1, #0
 800a40c:	0018      	movs	r0, r3
 800a40e:	f011 faeb 	bl	801b9e8 <HAL_UARTEx_SetTxFifoThreshold>
 800a412:	1e03      	subs	r3, r0, #0
 800a414:	d001      	beq.n	800a41a <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 800a416:	f000 f903 	bl	800a620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a41a:	4b0a      	ldr	r3, [pc, #40]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a41c:	2100      	movs	r1, #0
 800a41e:	0018      	movs	r0, r3
 800a420:	f011 fb22 	bl	801ba68 <HAL_UARTEx_SetRxFifoThreshold>
 800a424:	1e03      	subs	r3, r0, #0
 800a426:	d001      	beq.n	800a42c <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 800a428:	f000 f8fa 	bl	800a620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <MX_USART4_UART_Init+0x98>)
 800a42e:	0018      	movs	r0, r3
 800a430:	f011 faa0 	bl	801b974 <HAL_UARTEx_DisableFifoMode>
 800a434:	1e03      	subs	r3, r0, #0
 800a436:	d001      	beq.n	800a43c <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 800a438:	f000 f8f2 	bl	800a620 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a43c:	46c0      	nop			@ (mov r8, r8)
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	46c0      	nop			@ (mov r8, r8)
 800a444:	200006d0 	.word	0x200006d0
 800a448:	40004c00 	.word	0x40004c00

0800a44c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a452:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <MX_DMA_Init+0x48>)
 800a454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a456:	4b0f      	ldr	r3, [pc, #60]	@ (800a494 <MX_DMA_Init+0x48>)
 800a458:	2101      	movs	r1, #1
 800a45a:	430a      	orrs	r2, r1
 800a45c:	649a      	str	r2, [r3, #72]	@ 0x48
 800a45e:	4b0d      	ldr	r3, [pc, #52]	@ (800a494 <MX_DMA_Init+0x48>)
 800a460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a462:	2201      	movs	r2, #1
 800a464:	4013      	ands	r3, r2
 800a466:	607b      	str	r3, [r7, #4]
 800a468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a46a:	2200      	movs	r2, #0
 800a46c:	2100      	movs	r1, #0
 800a46e:	200a      	movs	r0, #10
 800a470:	f008 ffc2 	bl	80133f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a474:	200a      	movs	r0, #10
 800a476:	f008 ffd4 	bl	8013422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 800a47a:	2200      	movs	r2, #0
 800a47c:	2100      	movs	r1, #0
 800a47e:	200b      	movs	r0, #11
 800a480:	f008 ffba 	bl	80133f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a484:	200b      	movs	r0, #11
 800a486:	f008 ffcc 	bl	8013422 <HAL_NVIC_EnableIRQ>

}
 800a48a:	46c0      	nop			@ (mov r8, r8)
 800a48c:	46bd      	mov	sp, r7
 800a48e:	b002      	add	sp, #8
 800a490:	bd80      	pop	{r7, pc}
 800a492:	46c0      	nop			@ (mov r8, r8)
 800a494:	40021000 	.word	0x40021000

0800a498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b089      	sub	sp, #36	@ 0x24
 800a49c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a49e:	240c      	movs	r4, #12
 800a4a0:	193b      	adds	r3, r7, r4
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	2314      	movs	r3, #20
 800a4a6:	001a      	movs	r2, r3
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	f011 fc51 	bl	801bd50 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4ae:	4b56      	ldr	r3, [pc, #344]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4b2:	4b55      	ldr	r3, [pc, #340]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4b4:	2104      	movs	r1, #4
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a4ba:	4b53      	ldr	r3, [pc, #332]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4be:	2204      	movs	r2, #4
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4c6:	4b50      	ldr	r3, [pc, #320]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4ca:	4b4f      	ldr	r3, [pc, #316]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a4d2:	4b4d      	ldr	r3, [pc, #308]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4013      	ands	r3, r2
 800a4da:	607b      	str	r3, [r7, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4de:	4b4a      	ldr	r3, [pc, #296]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4e2:	4b49      	ldr	r3, [pc, #292]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a4ea:	4b47      	ldr	r3, [pc, #284]	@ (800a608 <MX_GPIO_Init+0x170>)
 800a4ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a4f6:	4945      	ldr	r1, [pc, #276]	@ (800a60c <MX_GPIO_Init+0x174>)
 800a4f8:	4b45      	ldr	r3, [pc, #276]	@ (800a610 <MX_GPIO_Init+0x178>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f009 ffda 	bl	80144b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a502:	4944      	ldr	r1, [pc, #272]	@ (800a614 <MX_GPIO_Init+0x17c>)
 800a504:	4b44      	ldr	r3, [pc, #272]	@ (800a618 <MX_GPIO_Init+0x180>)
 800a506:	2200      	movs	r2, #0
 800a508:	0018      	movs	r0, r3
 800a50a:	f009 ffd4 	bl	80144b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800a50e:	23f0      	movs	r3, #240	@ 0xf0
 800a510:	0119      	lsls	r1, r3, #4
 800a512:	23a0      	movs	r3, #160	@ 0xa0
 800a514:	05db      	lsls	r3, r3, #23
 800a516:	2200      	movs	r2, #0
 800a518:	0018      	movs	r0, r3
 800a51a:	f009 ffcc 	bl	80144b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a51e:	193b      	adds	r3, r7, r4
 800a520:	4a3a      	ldr	r2, [pc, #232]	@ (800a60c <MX_GPIO_Init+0x174>)
 800a522:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a524:	193b      	adds	r3, r7, r4
 800a526:	2201      	movs	r2, #1
 800a528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52a:	193b      	adds	r3, r7, r4
 800a52c:	2200      	movs	r2, #0
 800a52e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a530:	193b      	adds	r3, r7, r4
 800a532:	2200      	movs	r2, #0
 800a534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a536:	193b      	adds	r3, r7, r4
 800a538:	4a35      	ldr	r2, [pc, #212]	@ (800a610 <MX_GPIO_Init+0x178>)
 800a53a:	0019      	movs	r1, r3
 800a53c:	0010      	movs	r0, r2
 800a53e:	f009 fd49 	bl	8013fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a542:	193b      	adds	r3, r7, r4
 800a544:	4a33      	ldr	r2, [pc, #204]	@ (800a614 <MX_GPIO_Init+0x17c>)
 800a546:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a548:	193b      	adds	r3, r7, r4
 800a54a:	2201      	movs	r2, #1
 800a54c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a54e:	193b      	adds	r3, r7, r4
 800a550:	2200      	movs	r2, #0
 800a552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a554:	193b      	adds	r3, r7, r4
 800a556:	2200      	movs	r2, #0
 800a558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a55a:	193b      	adds	r3, r7, r4
 800a55c:	4a2e      	ldr	r2, [pc, #184]	@ (800a618 <MX_GPIO_Init+0x180>)
 800a55e:	0019      	movs	r1, r3
 800a560:	0010      	movs	r0, r2
 800a562:	f009 fd37 	bl	8013fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_4;
 800a566:	193b      	adds	r3, r7, r4
 800a568:	4a2c      	ldr	r2, [pc, #176]	@ (800a61c <MX_GPIO_Init+0x184>)
 800a56a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a56c:	193b      	adds	r3, r7, r4
 800a56e:	2200      	movs	r2, #0
 800a570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a572:	193b      	adds	r3, r7, r4
 800a574:	2200      	movs	r2, #0
 800a576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a578:	193b      	adds	r3, r7, r4
 800a57a:	4a27      	ldr	r2, [pc, #156]	@ (800a618 <MX_GPIO_Init+0x180>)
 800a57c:	0019      	movs	r1, r3
 800a57e:	0010      	movs	r0, r2
 800a580:	f009 fd28 	bl	8013fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a584:	0021      	movs	r1, r4
 800a586:	187b      	adds	r3, r7, r1
 800a588:	22f0      	movs	r2, #240	@ 0xf0
 800a58a:	0112      	lsls	r2, r2, #4
 800a58c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a58e:	000c      	movs	r4, r1
 800a590:	193b      	adds	r3, r7, r4
 800a592:	2201      	movs	r2, #1
 800a594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a596:	193b      	adds	r3, r7, r4
 800a598:	2200      	movs	r2, #0
 800a59a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a59c:	193b      	adds	r3, r7, r4
 800a59e:	2200      	movs	r2, #0
 800a5a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5a2:	193a      	adds	r2, r7, r4
 800a5a4:	23a0      	movs	r3, #160	@ 0xa0
 800a5a6:	05db      	lsls	r3, r3, #23
 800a5a8:	0011      	movs	r1, r2
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	f009 fd12 	bl	8013fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5b0:	0021      	movs	r1, r4
 800a5b2:	187b      	adds	r3, r7, r1
 800a5b4:	2280      	movs	r2, #128	@ 0x80
 800a5b6:	0212      	lsls	r2, r2, #8
 800a5b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a5ba:	187b      	adds	r3, r7, r1
 800a5bc:	2288      	movs	r2, #136	@ 0x88
 800a5be:	0352      	lsls	r2, r2, #13
 800a5c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c2:	187b      	adds	r3, r7, r1
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c8:	187a      	adds	r2, r7, r1
 800a5ca:	23a0      	movs	r3, #160	@ 0xa0
 800a5cc:	05db      	lsls	r3, r3, #23
 800a5ce:	0011      	movs	r1, r2
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	f009 fcff 	bl	8013fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	2007      	movs	r0, #7
 800a5dc:	f008 ff0c 	bl	80133f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a5e0:	2007      	movs	r0, #7
 800a5e2:	f008 ff1e 	bl	8013422 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800a5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a618 <MX_GPIO_Init+0x180>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	2108      	movs	r1, #8
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f009 ff62 	bl	80144b6 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 800a5f2:	2380      	movs	r3, #128	@ 0x80
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4a06      	ldr	r2, [pc, #24]	@ (800a610 <MX_GPIO_Init+0x178>)
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	0010      	movs	r0, r2
 800a5fc:	f009 ff78 	bl	80144f0 <HAL_GPIO_TogglePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800a600:	46c0      	nop			@ (mov r8, r8)
 800a602:	46bd      	mov	sp, r7
 800a604:	b009      	add	sp, #36	@ 0x24
 800a606:	bd90      	pop	{r4, r7, pc}
 800a608:	40021000 	.word	0x40021000
 800a60c:	0000074c 	.word	0x0000074c
 800a610:	50000800 	.word	0x50000800
 800a614:	0000142c 	.word	0x0000142c
 800a618:	50000400 	.word	0x50000400
 800a61c:	00004810 	.word	0x00004810

0800a620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a624:	b672      	cpsid	i
}
 800a626:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a628:	46c0      	nop			@ (mov r8, r8)
 800a62a:	e7fd      	b.n	800a628 <Error_Handler+0x8>

0800a62c <muestreo>:
#include "stm32u0xx_hal_pwr_ex.h"

uint32_t cnt_veces_muestreo_2 = 0;
//*************************************************************************************************

void muestreo(void){
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0


	     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);  PIn TEST


		cnt_veces_muestreo++; //inc cnt_veces_muestreo/// A,cnt_veces_muestreo
 800a632:	4be0      	ldr	r3, [pc, #896]	@ (800a9b4 <muestreo+0x388>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	3301      	adds	r3, #1
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	4bde      	ldr	r3, [pc, #888]	@ (800a9b4 <muestreo+0x388>)
 800a63c:	701a      	strb	r2, [r3, #0]


		if(cnt_veces_muestreo <= 200){ // 200){ //cp  A,#200
 800a63e:	4bdd      	ldr	r3, [pc, #884]	@ (800a9b4 <muestreo+0x388>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2bc8      	cmp	r3, #200	@ 0xc8
 800a644:	d800      	bhi.n	800a648 <muestreo+0x1c>
 800a646:	e0c3      	b.n	800a7d0 <muestreo+0x1a4>
//			cnt_veces_muestreo_2 = 0;
//
//		if(cnt_veces_muestreo_2 < 200)
//			goto detecta_flanco;

	    cnt_veces_muestreo = 0;  //clr cnt_veces_muestreo
 800a648:	4bda      	ldr	r3, [pc, #872]	@ (800a9b4 <muestreo+0x388>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
	    cruze_por_cero[0] = 1;		//bset    cruze_por_cero,#0
 800a64e:	4bda      	ldr	r3, [pc, #872]	@ (800a9b8 <muestreo+0x38c>)
 800a650:	2201      	movs	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
//        }
//	  	flagsLogger2 [2] = 1;//bset	flagsLogger2,#2
//	  	goto error_muestreo; //jp error_muestreo

//batOFF_OK:
	    flagsLogger2 [0] = 1; //bset flagsLogger2,#0
 800a654:	4bd9      	ldr	r3, [pc, #868]	@ (800a9bc <muestreo+0x390>)
 800a656:	2201      	movs	r2, #1
 800a658:	701a      	strb	r2, [r3, #0]
	    //cntRegPNT = &eeCntRegEVENT;
	    //call	save_cntReg
	    //call	save_timeUNIX

grabadoEmergenciaFin:
	save_timeUNIX();
 800a65a:	f7fc fd9d 	bl	8007198 <save_timeUNIX>
	GPIOA->MODER |= 0x3FFFFFFF;
 800a65e:	23a0      	movs	r3, #160	@ 0xa0
 800a660:	05db      	lsls	r3, r3, #23
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	23a0      	movs	r3, #160	@ 0xa0
 800a666:	05db      	lsls	r3, r3, #23
 800a668:	49d5      	ldr	r1, [pc, #852]	@ (800a9c0 <muestreo+0x394>)
 800a66a:	430a      	orrs	r2, r1
 800a66c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 0xFFFFFFFF;
 800a66e:	4bd5      	ldr	r3, [pc, #852]	@ (800a9c4 <muestreo+0x398>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4bd4      	ldr	r3, [pc, #848]	@ (800a9c4 <muestreo+0x398>)
 800a674:	2201      	movs	r2, #1
 800a676:	4252      	negs	r2, r2
 800a678:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= 0xFFFDFFFF;
 800a67a:	4bd3      	ldr	r3, [pc, #844]	@ (800a9c8 <muestreo+0x39c>)
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	4bd2      	ldr	r3, [pc, #840]	@ (800a9c8 <muestreo+0x39c>)
 800a680:	49d2      	ldr	r1, [pc, #840]	@ (800a9cc <muestreo+0x3a0>)
 800a682:	430a      	orrs	r2, r1
 800a684:	601a      	str	r2, [r3, #0]
	GPIOD->MODER |= 0xFFFFFFFF;
 800a686:	4bd2      	ldr	r3, [pc, #840]	@ (800a9d0 <muestreo+0x3a4>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4bd1      	ldr	r3, [pc, #836]	@ (800a9d0 <muestreo+0x3a4>)
 800a68c:	2201      	movs	r2, #1
 800a68e:	4252      	negs	r2, r2
 800a690:	601a      	str	r2, [r3, #0]
	GPIOE->MODER |= 0xFFFFFFFF;
 800a692:	4bd0      	ldr	r3, [pc, #832]	@ (800a9d4 <muestreo+0x3a8>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4bcf      	ldr	r3, [pc, #828]	@ (800a9d4 <muestreo+0x3a8>)
 800a698:	2201      	movs	r2, #1
 800a69a:	4252      	negs	r2, r2
 800a69c:	601a      	str	r2, [r3, #0]
	GPIOF->MODER |= 0xFFFFFFFF;
 800a69e:	4bce      	ldr	r3, [pc, #824]	@ (800a9d8 <muestreo+0x3ac>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4bcd      	ldr	r3, [pc, #820]	@ (800a9d8 <muestreo+0x3ac>)
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	4252      	negs	r2, r2
 800a6a8:	601a      	str	r2, [r3, #0]

	__HAL_RCC_GPIOB_CLK_DISABLE();
 800a6aa:	4bcc      	ldr	r3, [pc, #816]	@ (800a9dc <muestreo+0x3b0>)
 800a6ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6ae:	4bcb      	ldr	r3, [pc, #812]	@ (800a9dc <muestreo+0x3b0>)
 800a6b0:	2102      	movs	r1, #2
 800a6b2:	438a      	bics	r2, r1
 800a6b4:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800a6b6:	4bc9      	ldr	r3, [pc, #804]	@ (800a9dc <muestreo+0x3b0>)
 800a6b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6ba:	4bc8      	ldr	r3, [pc, #800]	@ (800a9dc <muestreo+0x3b0>)
 800a6bc:	2108      	movs	r1, #8
 800a6be:	438a      	bics	r2, r1
 800a6c0:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 800a6c2:	4bc6      	ldr	r3, [pc, #792]	@ (800a9dc <muestreo+0x3b0>)
 800a6c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6c6:	4bc5      	ldr	r3, [pc, #788]	@ (800a9dc <muestreo+0x3b0>)
 800a6c8:	2110      	movs	r1, #16
 800a6ca:	438a      	bics	r2, r1
 800a6cc:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOF_CLK_DISABLE();
 800a6ce:	4bc3      	ldr	r3, [pc, #780]	@ (800a9dc <muestreo+0x3b0>)
 800a6d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6d2:	4bc2      	ldr	r3, [pc, #776]	@ (800a9dc <muestreo+0x3b0>)
 800a6d4:	2120      	movs	r1, #32
 800a6d6:	438a      	bics	r2, r1
 800a6d8:	64da      	str	r2, [r3, #76]	@ 0x4c

	while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 800a6da:	46c0      	nop			@ (mov r8, r8)
 800a6dc:	4bc0      	ldr	r3, [pc, #768]	@ (800a9e0 <muestreo+0x3b4>)
 800a6de:	0018      	movs	r0, r3
 800a6e0:	f00a f806 	bl	80146f0 <HAL_I2C_DeInit>
 800a6e4:	1e03      	subs	r3, r0, #0
 800a6e6:	d1f9      	bne.n	800a6dc <muestreo+0xb0>
	while(HAL_UART_DeInit(&huart2) != HAL_OK);
 800a6e8:	46c0      	nop			@ (mov r8, r8)
 800a6ea:	4bbe      	ldr	r3, [pc, #760]	@ (800a9e4 <muestreo+0x3b8>)
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	f00f fd39 	bl	801a164 <HAL_UART_DeInit>
 800a6f2:	1e03      	subs	r3, r0, #0
 800a6f4:	d1f9      	bne.n	800a6ea <muestreo+0xbe>
	while(HAL_UART_DeInit(&huart4) != HAL_OK);
 800a6f6:	46c0      	nop			@ (mov r8, r8)
 800a6f8:	4bbb      	ldr	r3, [pc, #748]	@ (800a9e8 <muestreo+0x3bc>)
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f00f fd32 	bl	801a164 <HAL_UART_DeInit>
 800a700:	1e03      	subs	r3, r0, #0
 800a702:	d1f9      	bne.n	800a6f8 <muestreo+0xcc>
	//ADC_Deinit_Func();
	while(HAL_ADC_DeInit(&hadc1) != HAL_OK);
 800a704:	46c0      	nop			@ (mov r8, r8)
 800a706:	4bb9      	ldr	r3, [pc, #740]	@ (800a9ec <muestreo+0x3c0>)
 800a708:	0018      	movs	r0, r3
 800a70a:	f007 ff2d 	bl	8012568 <HAL_ADC_DeInit>
 800a70e:	1e03      	subs	r3, r0, #0
 800a710:	d1f9      	bne.n	800a706 <muestreo+0xda>
	__HAL_RCC_DMA1_CLK_DISABLE();
 800a712:	4bb2      	ldr	r3, [pc, #712]	@ (800a9dc <muestreo+0x3b0>)
 800a714:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a716:	4bb1      	ldr	r3, [pc, #708]	@ (800a9dc <muestreo+0x3b0>)
 800a718:	2101      	movs	r1, #1
 800a71a:	438a      	bics	r2, r1
 800a71c:	649a      	str	r2, [r3, #72]	@ 0x48

	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a71e:	4bb4      	ldr	r3, [pc, #720]	@ (800a9f0 <muestreo+0x3c4>)
 800a720:	2204      	movs	r2, #4
 800a722:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800a724:	2380      	movs	r3, #128	@ 0x80
 800a726:	0199      	lsls	r1, r3, #6
 800a728:	48b2      	ldr	r0, [pc, #712]	@ (800a9f4 <muestreo+0x3c8>)
 800a72a:	2300      	movs	r3, #0
 800a72c:	2200      	movs	r2, #0
 800a72e:	f00e fb91 	bl	8018e54 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a732:	1e03      	subs	r3, r0, #0
 800a734:	d001      	beq.n	800a73a <muestreo+0x10e>
	{
		Error_Handler();
 800a736:	f7ff ff73 	bl	800a620 <Error_Handler>
	}

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a73a:	2007      	movs	r0, #7
 800a73c:	f008 fe71 	bl	8013422 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 800a740:	200a      	movs	r0, #10
 800a742:	f008 fe7e 	bl	8013442 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a746:	200b      	movs	r0, #11
 800a748:	f008 fe7b 	bl	8013442 <HAL_NVIC_DisableIRQ>



sleep_rt:

	HAL_SuspendTick();
 800a74c:	f007 fb1e 	bl	8011d8c <HAL_SuspendTick>

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800a750:	2001      	movs	r0, #1
 800a752:	f00c f985 	bl	8016a60 <HAL_PWREx_EnterSTOP2Mode>

	HAL_ResumeTick();
 800a756:	f007 fb27 	bl	8011da8 <HAL_ResumeTick>
	if(bandera_RTC)
 800a75a:	4ba7      	ldr	r3, [pc, #668]	@ (800a9f8 <muestreo+0x3cc>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <muestreo+0x13e>
	{
		bandera_RTC = 0;
 800a762:	4ba5      	ldr	r3, [pc, #660]	@ (800a9f8 <muestreo+0x3cc>)
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
		goto sleep_rt;
 800a768:	e7f0      	b.n	800a74c <muestreo+0x120>
	}

	HAL_IWDG_Refresh(&hiwdg);
 800a76a:	4ba4      	ldr	r3, [pc, #656]	@ (800a9fc <muestreo+0x3d0>)
 800a76c:	0018      	movs	r0, r3
 800a76e:	f00c f8ed 	bl	801694c <HAL_IWDG_Refresh>
	reconfigura_perif();
 800a772:	f7ff f801 	bl	8009778 <reconfigura_perif>
	//{
	//	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
	//	HAL_Delay (15);
	//	HAL_IWDG_Refresh(&hiwdg);
	//}
	HAL_IWDG_Refresh(&hiwdg);
 800a776:	4ba1      	ldr	r3, [pc, #644]	@ (800a9fc <muestreo+0x3d0>)
 800a778:	0018      	movs	r0, r3
 800a77a:	f00c f8e7 	bl	801694c <HAL_IWDG_Refresh>

	flagsEvent[3] = 1;
 800a77e:	4ba0      	ldr	r3, [pc, #640]	@ (800aa00 <muestreo+0x3d4>)
 800a780:	2201      	movs	r2, #1
 800a782:	70da      	strb	r2, [r3, #3]
	retPowerOn = 10;
 800a784:	4b9f      	ldr	r3, [pc, #636]	@ (800aa04 <muestreo+0x3d8>)
 800a786:	220a      	movs	r2, #10
 800a788:	701a      	strb	r2, [r3, #0]
	edorefri = 0;
 800a78a:	4b9f      	ldr	r3, [pc, #636]	@ (800aa08 <muestreo+0x3dc>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
	cntblkh = 0;
 800a790:	4b9e      	ldr	r3, [pc, #632]	@ (800aa0c <muestreo+0x3e0>)
 800a792:	2200      	movs	r2, #0
 800a794:	801a      	strh	r2, [r3, #0]
	flagsa[7] = 1;// flagsa = 0x81;
 800a796:	4b9e      	ldr	r3, [pc, #632]	@ (800aa10 <muestreo+0x3e4>)
 800a798:	2201      	movs	r2, #1
 800a79a:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 800a79c:	4b9c      	ldr	r3, [pc, #624]	@ (800aa10 <muestreo+0x3e4>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	701a      	strb	r2, [r3, #0]
	cntseg = 0;
 800a7a2:	4b9c      	ldr	r3, [pc, #624]	@ (800aa14 <muestreo+0x3e8>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0; k<8; k++)
 800a7a8:	1dfb      	adds	r3, r7, #7
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e009      	b.n	800a7c4 <muestreo+0x198>
		flagsBattery[k] = 0;
 800a7b0:	1dfb      	adds	r3, r7, #7
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	4a98      	ldr	r2, [pc, #608]	@ (800aa18 <muestreo+0x3ec>)
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++)
 800a7ba:	1dfb      	adds	r3, r7, #7
 800a7bc:	781a      	ldrb	r2, [r3, #0]
 800a7be:	1dfb      	adds	r3, r7, #7
 800a7c0:	3201      	adds	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	1dfb      	adds	r3, r7, #7
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b07      	cmp	r3, #7
 800a7ca:	d9f1      	bls.n	800a7b0 <muestreo+0x184>

		//;Apaga Perifericos RGM_07-AGO-2023


ibus_ocupado_halt:
 800a7cc:	46c0      	nop			@ (mov r8, r8)


DoSleep:
goto error_muestreo;//jp error_muestreo
 800a7ce:	e168      	b.n	800aaa2 <muestreo+0x476>
			goto detecta_flanco;//jrule detecta_flanco
 800a7d0:	46c0      	nop			@ (mov r8, r8)

//;=========================================  Rutina DETECCIÓN DE FLANCO DE SUBIDA
//;La detección de cruce por cero se realiza por umbral en el pin de MUESTREO.

detecta_flanco:						 //;Más de 50ms sin cruces por cero
		s_reloj[2] = 0;//bres s_reloj,#2
 800a7d2:	4b92      	ldr	r3, [pc, #584]	@ (800aa1c <muestreo+0x3f0>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	709a      	strb	r2, [r3, #2]

up_anterior:

		if(s_reloj[0]){	//btjt s_reloj,#0,alto   [actual]	   ;¿El valor de la bandera "actual" es 1?
 800a7d8:	4b90      	ldr	r3, [pc, #576]	@ (800aa1c <muestreo+0x3f0>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <muestreo+0x1bc>
			goto alto;
		}
		s_reloj[1] = 0;   				//bres s_reloj,#1    ;[anterior]  ;NO: Anterior <- 0
 800a7e0:	4b8e      	ldr	r3, [pc, #568]	@ (800aa1c <muestreo+0x3f0>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	705a      	strb	r2, [r3, #1]
		goto end_up_anterior;//jra end_up_anterior
 800a7e6:	e003      	b.n	800a7f0 <muestreo+0x1c4>
			goto alto;
 800a7e8:	46c0      	nop			@ (mov r8, r8)

alto:
		s_reloj[1] = 1; 	//bset s_reloj,#1		;[anterior]   ;SI: Anterior <- 1
 800a7ea:	4b8c      	ldr	r3, [pc, #560]	@ (800aa1c <muestreo+0x3f0>)
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	705a      	strb	r2, [r3, #1]
			// 19-AGO-2024		HAL_ADC_Stop(&hadc);
		// ----------------------Codigo Julio Torres
//---Toogle  GPIOA->BSRR = GPIO_BSRR_BS_11;
		//ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
//		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
		ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800a7f0:	4b8b      	ldr	r3, [pc, #556]	@ (800aa20 <muestreo+0x3f4>)
 800a7f2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a7f4:	4b8a      	ldr	r3, [pc, #552]	@ (800aa20 <muestreo+0x3f4>)
 800a7f6:	2280      	movs	r2, #128	@ 0x80
 800a7f8:	00d2      	lsls	r2, r2, #3
 800a7fa:	400a      	ands	r2, r1
 800a7fc:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800a7fe:	4b88      	ldr	r3, [pc, #544]	@ (800aa20 <muestreo+0x3f4>)
 800a800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a802:	4b87      	ldr	r3, [pc, #540]	@ (800aa20 <muestreo+0x3f4>)
 800a804:	2101      	movs	r1, #1
 800a806:	400a      	ands	r2, r1
 800a808:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800a80a:	4b85      	ldr	r3, [pc, #532]	@ (800aa20 <muestreo+0x3f4>)
 800a80c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a80e:	4b84      	ldr	r3, [pc, #528]	@ (800aa20 <muestreo+0x3f4>)
 800a810:	2280      	movs	r2, #128	@ 0x80
 800a812:	02d2      	lsls	r2, r2, #11
 800a814:	400a      	ands	r2, r1
 800a816:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL14;  // Canal 0
 800a818:	4b81      	ldr	r3, [pc, #516]	@ (800aa20 <muestreo+0x3f4>)
 800a81a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a81c:	4b80      	ldr	r3, [pc, #512]	@ (800aa20 <muestreo+0x3f4>)
 800a81e:	2280      	movs	r2, #128	@ 0x80
 800a820:	01d2      	lsls	r2, r2, #7
 800a822:	400a      	ands	r2, r1
 800a824:	629a      	str	r2, [r3, #40]	@ 0x28

		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800a826:	4b7e      	ldr	r3, [pc, #504]	@ (800aa20 <muestreo+0x3f4>)
 800a828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a82a:	4b7d      	ldr	r3, [pc, #500]	@ (800aa20 <muestreo+0x3f4>)
 800a82c:	2180      	movs	r1, #128	@ 0x80
 800a82e:	0089      	lsls	r1, r1, #2
 800a830:	430a      	orrs	r2, r1
 800a832:	629a      	str	r2, [r3, #40]	@ 0x28
		//ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
		//ADC->CCR |= ADC_CCR_VREFEN;
		capturaAD();
 800a834:	f002 fef0 	bl	800d618 <capturaAD>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		//---Toogle  GPIOA->BSRR = GPIO_BSRR_BR_11;
		// ----------------------Codigo Julio Torres

		asm ("nop");
 800a838:	46c0      	nop			@ (mov r8, r8)
		//if(adcramh >= 10){//cpw     Y,#10
		//if(adcramh >= 20){//cpw     Y,#10
		//if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
		if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
 800a83a:	4b7a      	ldr	r3, [pc, #488]	@ (800aa24 <muestreo+0x3f8>)
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	2b22      	cmp	r3, #34	@ 0x22
 800a840:	d803      	bhi.n	800a84a <muestreo+0x21e>

			goto pin_cruce_alto;//jruge   pin_cruce_alto
		}
		s_reloj[0] = 0;		// bres    s_reloj,#0;
 800a842:	4b76      	ldr	r3, [pc, #472]	@ (800aa1c <muestreo+0x3f0>)
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
		goto end_up_actual;//jra     end_up_actual;
 800a848:	e003      	b.n	800a852 <muestreo+0x226>
			goto pin_cruce_alto;//jruge   pin_cruce_alto
 800a84a:	46c0      	nop			@ (mov r8, r8)
pin_cruce_alto:
		s_reloj[0] = 1;	 		//bset    s_reloj,#0;
 800a84c:	4b73      	ldr	r3, [pc, #460]	@ (800aa1c <muestreo+0x3f0>)
 800a84e:	2201      	movs	r2, #1
 800a850:	701a      	strb	r2, [r3, #0]

determina_flanco: //---------------------------------------------------------?
		//ld A,s_reloj
		//and A,#$03
		//-----if(!(s_reloj[0] | s_reloj[1])){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
        if((!s_reloj[1]) & (s_reloj[0]) ){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
 800a852:	4b72      	ldr	r3, [pc, #456]	@ (800aa1c <muestreo+0x3f0>)
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	2201      	movs	r2, #1
 800a858:	4053      	eors	r3, r2
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	001a      	movs	r2, r3
 800a85e:	4b6f      	ldr	r3, [pc, #444]	@ (800aa1c <muestreo+0x3f0>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	4013      	ands	r3, r2
 800a864:	d007      	beq.n	800a876 <muestreo+0x24a>

			goto flanco_subida;			//jreq flanco_subida/ salta si z=1
 800a866:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_detecta_flanco;//jra fin_detecta_flanco


flanco_subida:
		s_reloj[2] = 1;	//bset    s_reloj,#2								;[b_flancos]	;Activar bandera de flanco de subida
 800a868:	4b6c      	ldr	r3, [pc, #432]	@ (800aa1c <muestreo+0x3f0>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	709a      	strb	r2, [r3, #2]
		//bcpl    PA_ODR,#0					// Test por, prueba
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
		cruze_por_cero[0] = 1;			//bset    cruze_por_cero,#0			;Activa bandera de cruce por cero
 800a86e:	4b52      	ldr	r3, [pc, #328]	@ (800a9b8 <muestreo+0x38c>)
 800a870:	2201      	movs	r2, #1
 800a872:	701a      	strb	r2, [r3, #0]
 800a874:	e000      	b.n	800a878 <muestreo+0x24c>
		goto fin_detecta_flanco;//jra fin_detecta_flanco
 800a876:	46c0      	nop			@ (mov r8, r8)

fin_detecta_flanco:

//;=====================================  FIN Rutina DETECCIÓN DE FLANCO DE BAJADA

		if(s_reloj[2]){			//btjt    s_reloj,#2,pregunta_edo_muestreo
 800a878:	4b68      	ldr	r3, [pc, #416]	@ (800aa1c <muestreo+0x3f0>)
 800a87a:	789b      	ldrb	r3, [r3, #2]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d105      	bne.n	800a88c <muestreo+0x260>
			goto pregunta_edo_muestreo;
		}
		//ld    A,edo_muestreo
		if(edo_muestreo == 1){//cp    A,#1 ***************???
 800a880:	4b69      	ldr	r3, [pc, #420]	@ (800aa28 <muestreo+0x3fc>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d000      	beq.n	800a88a <muestreo+0x25e>
 800a888:	e115      	b.n	800aab6 <muestreo+0x48a>
			goto muestrea; //jreq  muestrea
 800a88a:	e009      	b.n	800a8a0 <muestreo+0x274>
			goto pregunta_edo_muestreo;
 800a88c:	46c0      	nop			@ (mov r8, r8)


pregunta_edo_muestreo:

		//ld A,cnt_mues
		if(cnt_mues == 0){//cp A,#0
 800a88e:	4b67      	ldr	r3, [pc, #412]	@ (800aa2c <muestreo+0x400>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d000      	beq.n	800a898 <muestreo+0x26c>
 800a896:	e103      	b.n	800aaa0 <muestreo+0x474>
			goto no_error_muestreo;//jreq no_error_muestreo
 800a898:	46c0      	nop			@ (mov r8, r8)
		}
		goto error_muestreo;//jp error_muestreo


no_error_muestreo:
		edo_muestreo = 1; //mov edo_muestreo,#1
 800a89a:	4b63      	ldr	r3, [pc, #396]	@ (800aa28 <muestreo+0x3fc>)
 800a89c:	2201      	movs	r2, #1
 800a89e:	701a      	strb	r2, [r3, #0]


muestrea:
	    //ld A,cnt_mues
		if(cnt_mues != 32 ){ //cp A,#32 ****************
 800a8a0:	4b62      	ldr	r3, [pc, #392]	@ (800aa2c <muestreo+0x400>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d10a      	bne.n	800a8be <muestreo+0x292>
			goto adq_muesn; //jrne    adq_muesn
		}
		cnt_mues = 0;//clr     cnt_mues         ;SI, limpia el contador de muestras
 800a8a8:	4b60      	ldr	r3, [pc, #384]	@ (800aa2c <muestreo+0x400>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	701a      	strb	r2, [r3, #0]
		edo_muestreo = 0;//mov     edo_muestreo,#0
 800a8ae:	4b5e      	ldr	r3, [pc, #376]	@ (800aa28 <muestreo+0x3fc>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	 //28-May-2024: Salida IO7 toogle test
		goto voltaje_rms;//jp      voltaje_rms
 800a8b4:	46c0      	nop			@ (mov r8, r8)
voltaje_rms:
		//sigma_cuad_sampl_1 = 0;			//clr     sigma_cuad_sampl_1
		//sigma_cuad_sampl_2 = 0;			//clr     sigma_cuad_sampl_2
		//sigma_cuad_sampl_3 = 0;			//clr     sigma_cuad_sampl_3
		//sigma_cuad_sampl_4 = 0;			//clr     sigma_cuad_sampl_4
		sigma_cuad_sampl = 0;
 800a8b6:	4b5e      	ldr	r3, [pc, #376]	@ (800aa30 <muestreo+0x404>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	e040      	b.n	800a940 <muestreo+0x314>
			goto adq_muesn; //jrne    adq_muesn
 800a8be:	46c0      	nop			@ (mov r8, r8)
		ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800a8c0:	4b57      	ldr	r3, [pc, #348]	@ (800aa20 <muestreo+0x3f4>)
 800a8c2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a8c4:	4b56      	ldr	r3, [pc, #344]	@ (800aa20 <muestreo+0x3f4>)
 800a8c6:	2280      	movs	r2, #128	@ 0x80
 800a8c8:	00d2      	lsls	r2, r2, #3
 800a8ca:	400a      	ands	r2, r1
 800a8cc:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800a8ce:	4b54      	ldr	r3, [pc, #336]	@ (800aa20 <muestreo+0x3f4>)
 800a8d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8d2:	4b53      	ldr	r3, [pc, #332]	@ (800aa20 <muestreo+0x3f4>)
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	400a      	ands	r2, r1
 800a8d8:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800a8da:	4b51      	ldr	r3, [pc, #324]	@ (800aa20 <muestreo+0x3f4>)
 800a8dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a8de:	4b50      	ldr	r3, [pc, #320]	@ (800aa20 <muestreo+0x3f4>)
 800a8e0:	2280      	movs	r2, #128	@ 0x80
 800a8e2:	02d2      	lsls	r2, r2, #11
 800a8e4:	400a      	ands	r2, r1
 800a8e6:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL14;  // Canal 0
 800a8e8:	4b4d      	ldr	r3, [pc, #308]	@ (800aa20 <muestreo+0x3f4>)
 800a8ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	@ (800aa20 <muestreo+0x3f4>)
 800a8ee:	2280      	movs	r2, #128	@ 0x80
 800a8f0:	01d2      	lsls	r2, r2, #7
 800a8f2:	400a      	ands	r2, r1
 800a8f4:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800a8f6:	4b4a      	ldr	r3, [pc, #296]	@ (800aa20 <muestreo+0x3f4>)
 800a8f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8fa:	4b49      	ldr	r3, [pc, #292]	@ (800aa20 <muestreo+0x3f4>)
 800a8fc:	2180      	movs	r1, #128	@ 0x80
 800a8fe:	0089      	lsls	r1, r1, #2
 800a900:	430a      	orrs	r2, r1
 800a902:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD();
 800a904:	f002 fe88 	bl	800d618 <capturaAD>
		asm ("nop");
 800a908:	46c0      	nop			@ (mov r8, r8)
		adcramh >>= 1;    			//srlw    Y             ;Convierte la muestra de 10 bits en 9 bits ****************?????
 800a90a:	4b46      	ldr	r3, [pc, #280]	@ (800aa24 <muestreo+0x3f8>)
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	085b      	lsrs	r3, r3, #1
 800a910:	b29a      	uxth	r2, r3
 800a912:	4b44      	ldr	r3, [pc, #272]	@ (800aa24 <muestreo+0x3f8>)
 800a914:	801a      	strh	r2, [r3, #0]
		adcramh >>= 1; 				//srlw    Y             ;Convierte la muestra de  9 bits en 8 bits ****************???
 800a916:	4b43      	ldr	r3, [pc, #268]	@ (800aa24 <muestreo+0x3f8>)
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	085b      	lsrs	r3, r3, #1
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	4b41      	ldr	r3, [pc, #260]	@ (800aa24 <muestreo+0x3f8>)
 800a920:	801a      	strh	r2, [r3, #0]
		vl_ram [cnt_mues] = (uint8_t) adcramh;
 800a922:	4b40      	ldr	r3, [pc, #256]	@ (800aa24 <muestreo+0x3f8>)
 800a924:	8819      	ldrh	r1, [r3, #0]
 800a926:	4b41      	ldr	r3, [pc, #260]	@ (800aa2c <muestreo+0x400>)
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	001a      	movs	r2, r3
 800a92c:	b2c9      	uxtb	r1, r1
 800a92e:	4b41      	ldr	r3, [pc, #260]	@ (800aa34 <muestreo+0x408>)
 800a930:	5499      	strb	r1, [r3, r2]
		cnt_mues++;			//inc     cnt_mues			;Una muestra más
 800a932:	4b3e      	ldr	r3, [pc, #248]	@ (800aa2c <muestreo+0x400>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	3301      	adds	r3, #1
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	4b3c      	ldr	r3, [pc, #240]	@ (800aa2c <muestreo+0x400>)
 800a93c:	701a      	strb	r2, [r3, #0]
		goto fin_voltrms;//jp      fin_voltrms
 800a93e:	e0bb      	b.n	800aab8 <muestreo+0x48c>
				// ldw X,#vl_ram
				// ld A,XL
				// add A,cnt_mues
				// ld  XL,A
				// ld A,(X)  ////////////?????
				wreg= vl_ram[cnt_mues]; //ld wreg,A
 800a940:	4b3a      	ldr	r3, [pc, #232]	@ (800aa2c <muestreo+0x400>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	001a      	movs	r2, r3
 800a946:	4b3b      	ldr	r3, [pc, #236]	@ (800aa34 <muestreo+0x408>)
 800a948:	5c9a      	ldrb	r2, [r3, r2]
 800a94a:	4b3b      	ldr	r3, [pc, #236]	@ (800aa38 <muestreo+0x40c>)
 800a94c:	701a      	strb	r2, [r3, #0]
take_sampling:
//----------------------- Factor
					//ldw     X,waux
					//ld      A,eevolt_mul
	                //eevolt_mul = waux * eevolt_mul;//mul     X,A ***************************????
					uint16_t	foo = 0;
 800a94e:	1d3b      	adds	r3, r7, #4
 800a950:	2200      	movs	r2, #0
 800a952:	801a      	strh	r2, [r3, #0]
					//foo = (uint16_t)(wreg * eevolt_mul);
					foo = (uint16_t)(wreg * reevolt_mul);
 800a954:	4b38      	ldr	r3, [pc, #224]	@ (800aa38 <muestreo+0x40c>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	001a      	movs	r2, r3
 800a95a:	4b38      	ldr	r3, [pc, #224]	@ (800aa3c <muestreo+0x410>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	0019      	movs	r1, r3
 800a960:	1d3b      	adds	r3, r7, #4
 800a962:	434a      	muls	r2, r1
 800a964:	801a      	strh	r2, [r3, #0]
					//resul = (uint16_t)(wreg * 100);
					//ld      A,eevolt_div
					//div     X,A
	                //eevolt_div = waux / eevolt_div; //************************************?????
					//foo = foo / eevolt_div;
					foo = foo / reevolt_div;
 800a966:	1d3b      	adds	r3, r7, #4
 800a968:	881a      	ldrh	r2, [r3, #0]
 800a96a:	4b35      	ldr	r3, [pc, #212]	@ (800aa40 <muestreo+0x414>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	0019      	movs	r1, r3
 800a970:	0010      	movs	r0, r2
 800a972:	f7f5 fc5b 	bl	800022c <__divsi3>
 800a976:	0003      	movs	r3, r0
 800a978:	001a      	movs	r2, r3
 800a97a:	1d3b      	adds	r3, r7, #4
 800a97c:	801a      	strh	r2, [r3, #0]
					//ld      XL,A
					//ld      A,resulh //----------------------------------------------?
					//mul     X,A
	                //resulh = waux*resulh;
	                //level_4st_mult_H = resulh;//ldw level_4st_mult_H,X
					level_4st_mult = (uint32_t)(foo * foo);
 800a97e:	1d3b      	adds	r3, r7, #4
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	1d3a      	adds	r2, r7, #4
 800a984:	8812      	ldrh	r2, [r2, #0]
 800a986:	4353      	muls	r3, r2
 800a988:	001a      	movs	r2, r3
 800a98a:	4b2e      	ldr	r3, [pc, #184]	@ (800aa44 <muestreo+0x418>)
 800a98c:	601a      	str	r2, [r3, #0]
			//addw X,level_2st_result_H
			//level_2st_result_H = waux + level_2st_result_H;
			//addw X,sigma_cuad_sampl_4
			//ldw sigma_cuad_sampl_4,X
			//sigma_cuad_sampl_4 = waux + sigma_cuad_sampl_4;
              sigma_cuad_sampl +=  level_4st_mult;
 800a98e:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <muestreo+0x404>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	4b2c      	ldr	r3, [pc, #176]	@ (800aa44 <muestreo+0x418>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	18d2      	adds	r2, r2, r3
 800a998:	4b25      	ldr	r3, [pc, #148]	@ (800aa30 <muestreo+0x404>)
 800a99a:	601a      	str	r2, [r3, #0]

	//================================================= FIN Rutina CALCULA SUMATORIA

			cnt_mues++;//inc cnt_mues
 800a99c:	4b23      	ldr	r3, [pc, #140]	@ (800aa2c <muestreo+0x400>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	4b21      	ldr	r3, [pc, #132]	@ (800aa2c <muestreo+0x400>)
 800a9a6:	701a      	strb	r2, [r3, #0]
			//ld      A,cnt_mues
			if(cnt_mues >= 32){//cp A,#32 -------------------------?
 800a9a8:	4b20      	ldr	r3, [pc, #128]	@ (800aa2c <muestreo+0x400>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b1f      	cmp	r3, #31
 800a9ae:	d84b      	bhi.n	800aa48 <muestreo+0x41c>
				goto sumatoria_completa;//jreq sumatoria_completa
			}
			goto suma_cuad;//jp suma_cuad
 800a9b0:	e7c6      	b.n	800a940 <muestreo+0x314>
 800a9b2:	46c0      	nop			@ (mov r8, r8)
 800a9b4:	20000b58 	.word	0x20000b58
 800a9b8:	20000c6c 	.word	0x20000c6c
 800a9bc:	20001018 	.word	0x20001018
 800a9c0:	3fffffff 	.word	0x3fffffff
 800a9c4:	50000400 	.word	0x50000400
 800a9c8:	50000800 	.word	0x50000800
 800a9cc:	fffdffff 	.word	0xfffdffff
 800a9d0:	50000c00 	.word	0x50000c00
 800a9d4:	50001000 	.word	0x50001000
 800a9d8:	50001400 	.word	0x50001400
 800a9dc:	40021000 	.word	0x40021000
 800a9e0:	2000044c 	.word	0x2000044c
 800a9e4:	2000063c 	.word	0x2000063c
 800a9e8:	200006d0 	.word	0x200006d0
 800a9ec:	200003e8 	.word	0x200003e8
 800a9f0:	40002800 	.word	0x40002800
 800a9f4:	20000574 	.word	0x20000574
 800a9f8:	2000117e 	.word	0x2000117e
 800a9fc:	20000560 	.word	0x20000560
 800aa00:	20000f64 	.word	0x20000f64
 800aa04:	2000113a 	.word	0x2000113a
 800aa08:	20000ba8 	.word	0x20000ba8
 800aa0c:	20000b60 	.word	0x20000b60
 800aa10:	20000b88 	.word	0x20000b88
 800aa14:	20000b5f 	.word	0x20000b5f
 800aa18:	20001144 	.word	0x20001144
 800aa1c:	20000b2c 	.word	0x20000b2c
 800aa20:	40012400 	.word	0x40012400
 800aa24:	20000b70 	.word	0x20000b70
 800aa28:	20000b5a 	.word	0x20000b5a
 800aa2c:	20000b2f 	.word	0x20000b2f
 800aa30:	20000b30 	.word	0x20000b30
 800aa34:	20000b38 	.word	0x20000b38
 800aa38:	20000b67 	.word	0x20000b67
 800aa3c:	200001b9 	.word	0x200001b9
 800aa40:	200001b8 	.word	0x200001b8
 800aa44:	20000b34 	.word	0x20000b34
				goto sumatoria_completa;//jreq sumatoria_completa
 800aa48:	46c0      	nop			@ (mov r8, r8)

sumatoria_completa:
			cnt_mues = 0;//clr cnt_mues
 800aa4a:	4b1d      	ldr	r3, [pc, #116]	@ (800aac0 <muestreo+0x494>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
			//		   goto taking_prom;//jrne taking_prom
			//	   }
				   //ldw X,sigma_cuad_sampl_2
				   //ldw	sigma_prom_h,X
			//	   sigma_prom_h = sigma_cuad_sampl_2;
			sigma_cuad_sampl  >>= 5;
 800aa50:	4b1c      	ldr	r3, [pc, #112]	@ (800aac4 <muestreo+0x498>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	095a      	lsrs	r2, r3, #5
 800aa56:	4b1b      	ldr	r3, [pc, #108]	@ (800aac4 <muestreo+0x498>)
 800aa58:	601a      	str	r2, [r3, #0]
	//				addw sp,#6

					//ld A, XL
					//ld volt_trms, A
					//volt_trms = sigma_prom_h;
					volt_trms = (uint8_t)(sqrt(sigma_cuad_sampl));
 800aa5a:	4b1a      	ldr	r3, [pc, #104]	@ (800aac4 <muestreo+0x498>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	0018      	movs	r0, r3
 800aa60:	f7f7 fd84 	bl	800256c <__aeabi_ui2d>
 800aa64:	0002      	movs	r2, r0
 800aa66:	000b      	movs	r3, r1
 800aa68:	0010      	movs	r0, r2
 800aa6a:	0019      	movs	r1, r3
 800aa6c:	f011 fa2e 	bl	801becc <sqrt>
 800aa70:	0002      	movs	r2, r0
 800aa72:	000b      	movs	r3, r1
 800aa74:	0010      	movs	r0, r2
 800aa76:	0019      	movs	r1, r3
 800aa78:	f7f5 fd40 	bl	80004fc <__aeabi_d2uiz>
 800aa7c:	0003      	movs	r3, r0
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	4b11      	ldr	r3, [pc, #68]	@ (800aac8 <muestreo+0x49c>)
 800aa82:	701a      	strb	r2, [r3, #0]
					cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800aa84:	4b11      	ldr	r3, [pc, #68]	@ (800aacc <muestreo+0x4a0>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]

					flagsLogger2[0] = 0;//bres flagsLogger2, #0
 800aa8a:	4b11      	ldr	r3, [pc, #68]	@ (800aad0 <muestreo+0x4a4>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
					flagsLogger2[1] = 0;//bres flagsLogger2, #1
 800aa90:	4b0f      	ldr	r3, [pc, #60]	@ (800aad0 <muestreo+0x4a4>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	705a      	strb	r2, [r3, #1]
					flagsLogger2[2] = 0;//BRES flagsLogger2, #2
 800aa96:	4b0e      	ldr	r3, [pc, #56]	@ (800aad0 <muestreo+0x4a4>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	709a      	strb	r2, [r3, #2]

					// SAlto por lo mientras
					goto fin_calibra_voltaje;
 800aa9c:	46c0      	nop			@ (mov r8, r8)
			asm ("nop");
			asm ("nop");
	        goto calibra_reset;//jp      calibra_reset

fin_calibra_voltaje:
	        goto fin_voltrms;// jp fin_voltrms
 800aa9e:	e00b      	b.n	800aab8 <muestreo+0x48c>
		goto error_muestreo;//jp error_muestreo
 800aaa0:	46c0      	nop			@ (mov r8, r8)
error_muestreo:
			cnt_mues = 0;//clr cnt_mues
 800aaa2:	4b07      	ldr	r3, [pc, #28]	@ (800aac0 <muestreo+0x494>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
			cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800aaa8:	4b08      	ldr	r3, [pc, #32]	@ (800aacc <muestreo+0x4a0>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
			edo_muestreo = 0;//mov edo_muestreo,#0
 800aaae:	4b09      	ldr	r3, [pc, #36]	@ (800aad4 <muestreo+0x4a8>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	701a      	strb	r2, [r3, #0]
fin_voltrms:


}
 800aab4:	e000      	b.n	800aab8 <muestreo+0x48c>
		goto fin_voltrms;//jp fin_voltrms
 800aab6:	46c0      	nop			@ (mov r8, r8)
}
 800aab8:	46c0      	nop			@ (mov r8, r8)
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b002      	add	sp, #8
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000b2f 	.word	0x20000b2f
 800aac4:	20000b30 	.word	0x20000b30
 800aac8:	20000b59 	.word	0x20000b59
 800aacc:	20000b58 	.word	0x20000b58
 800aad0:	20001018 	.word	0x20001018
 800aad4:	20000b5a 	.word	0x20000b5a

0800aad8 <noctar>:


void noctar (void){
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0

	asm ("nop");
 800aadc:	46c0      	nop			@ (mov r8, r8)

}
 800aade:	46c0      	nop			@ (mov r8, r8)
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 800aae4:	b590      	push	{r4, r7, lr}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]
 800aaee:	e00c      	b.n	800ab0a <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800aaf0:	4ad4      	ldr	r2, [pc, #848]	@ (800ae44 <refrigera+0x360>)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	18d3      	adds	r3, r2, r3
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800aafa:	4ad3      	ldr	r2, [pc, #844]	@ (800ae48 <refrigera+0x364>)
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	18d3      	adds	r3, r2, r3
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	3301      	adds	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b07      	cmp	r3, #7
 800ab0e:	ddef      	ble.n	800aaf0 <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800ab10:	4bce      	ldr	r3, [pc, #824]	@ (800ae4c <refrigera+0x368>)
 800ab12:	2253      	movs	r2, #83	@ 0x53
 800ab14:	5c9a      	ldrb	r2, [r3, r2]
 800ab16:	4bce      	ldr	r3, [pc, #824]	@ (800ae50 <refrigera+0x36c>)
 800ab18:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800ab1a:	4bcd      	ldr	r3, [pc, #820]	@ (800ae50 <refrigera+0x36c>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	001a      	movs	r2, r3
 800ab20:	2301      	movs	r3, #1
 800ab22:	4013      	ands	r3, r2
 800ab24:	d003      	beq.n	800ab2e <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800ab26:	4bc7      	ldr	r3, [pc, #796]	@ (800ae44 <refrigera+0x360>)
 800ab28:	2201      	movs	r2, #1
 800ab2a:	70da      	strb	r2, [r3, #3]
 800ab2c:	e000      	b.n	800ab30 <refrigera+0x4c>
					goto refrigera_j00;
 800ab2e:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 800ab30:	4bc7      	ldr	r3, [pc, #796]	@ (800ae50 <refrigera+0x36c>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	001a      	movs	r2, r3
 800ab36:	2302      	movs	r3, #2
 800ab38:	4013      	ands	r3, r2
 800ab3a:	d003      	beq.n	800ab44 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 800ab3c:	4bc1      	ldr	r3, [pc, #772]	@ (800ae44 <refrigera+0x360>)
 800ab3e:	2201      	movs	r2, #1
 800ab40:	711a      	strb	r2, [r3, #4]
 800ab42:	e000      	b.n	800ab46 <refrigera+0x62>
					goto refrigera_j01;
 800ab44:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 800ab46:	4bc1      	ldr	r3, [pc, #772]	@ (800ae4c <refrigera+0x368>)
 800ab48:	2262      	movs	r2, #98	@ 0x62
 800ab4a:	5c9a      	ldrb	r2, [r3, r2]
 800ab4c:	4bc0      	ldr	r3, [pc, #768]	@ (800ae50 <refrigera+0x36c>)
 800ab4e:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 800ab50:	f7fb fefa 	bl	8006948 <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 800ab54:	4bbd      	ldr	r3, [pc, #756]	@ (800ae4c <refrigera+0x368>)
 800ab56:	2257      	movs	r2, #87	@ 0x57
 800ab58:	5c9b      	ldrb	r3, [r3, r2]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d11e      	bne.n	800ab9c <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 800ab5e:	4bbb      	ldr	r3, [pc, #748]	@ (800ae4c <refrigera+0x368>)
 800ab60:	2243      	movs	r2, #67	@ 0x43
 800ab62:	5c9b      	ldrb	r3, [r3, r2]
 800ab64:	3364      	adds	r3, #100	@ 0x64
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	4bba      	ldr	r3, [pc, #744]	@ (800ae54 <refrigera+0x370>)
 800ab6a:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 800ab6c:	4bb9      	ldr	r3, [pc, #740]	@ (800ae54 <refrigera+0x370>)
 800ab6e:	781a      	ldrb	r2, [r3, #0]
 800ab70:	4bb9      	ldr	r3, [pc, #740]	@ (800ae58 <refrigera+0x374>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	18d3      	adds	r3, r2, r3
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	4bb8      	ldr	r3, [pc, #736]	@ (800ae5c <refrigera+0x378>)
 800ab7a:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 800ab7c:	4bb3      	ldr	r3, [pc, #716]	@ (800ae4c <refrigera+0x368>)
 800ab7e:	2244      	movs	r2, #68	@ 0x44
 800ab80:	5c9b      	ldrb	r3, [r3, r2]
 800ab82:	3b38      	subs	r3, #56	@ 0x38
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	4bb6      	ldr	r3, [pc, #728]	@ (800ae60 <refrigera+0x37c>)
 800ab88:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 800ab8a:	4bb5      	ldr	r3, [pc, #724]	@ (800ae60 <refrigera+0x37c>)
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	4bb0      	ldr	r3, [pc, #704]	@ (800ae50 <refrigera+0x36c>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	4bb3      	ldr	r3, [pc, #716]	@ (800ae64 <refrigera+0x380>)
 800ab98:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800ab9a:	e021      	b.n	800abe0 <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 800ab9c:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 800ab9e:	4bab      	ldr	r3, [pc, #684]	@ (800ae4c <refrigera+0x368>)
 800aba0:	2257      	movs	r2, #87	@ 0x57
 800aba2:	5c9b      	ldrb	r3, [r3, r2]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d11f      	bne.n	800abe8 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800aba8:	4ba8      	ldr	r3, [pc, #672]	@ (800ae4c <refrigera+0x368>)
 800abaa:	2242      	movs	r2, #66	@ 0x42
 800abac:	5c9a      	ldrb	r2, [r3, r2]
 800abae:	4ba9      	ldr	r3, [pc, #676]	@ (800ae54 <refrigera+0x370>)
 800abb0:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 800abb2:	4ba8      	ldr	r3, [pc, #672]	@ (800ae54 <refrigera+0x370>)
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	4ba8      	ldr	r3, [pc, #672]	@ (800ae58 <refrigera+0x374>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	18d3      	adds	r3, r2, r3
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	4ba7      	ldr	r3, [pc, #668]	@ (800ae5c <refrigera+0x378>)
 800abc0:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 800abc2:	4ba2      	ldr	r3, [pc, #648]	@ (800ae4c <refrigera+0x368>)
 800abc4:	2243      	movs	r2, #67	@ 0x43
 800abc6:	5c9b      	ldrb	r3, [r3, r2]
 800abc8:	3364      	adds	r3, #100	@ 0x64
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	4ba4      	ldr	r3, [pc, #656]	@ (800ae60 <refrigera+0x37c>)
 800abce:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 800abd0:	4ba3      	ldr	r3, [pc, #652]	@ (800ae60 <refrigera+0x37c>)
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	4b9e      	ldr	r3, [pc, #632]	@ (800ae50 <refrigera+0x36c>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	4ba1      	ldr	r3, [pc, #644]	@ (800ae64 <refrigera+0x380>)
 800abde:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 800abe0:	4b98      	ldr	r3, [pc, #608]	@ (800ae44 <refrigera+0x360>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	719a      	strb	r2, [r3, #6]
 800abe6:	e000      	b.n	800abea <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800abe8:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800abea:	4b97      	ldr	r3, [pc, #604]	@ (800ae48 <refrigera+0x364>)
 800abec:	2201      	movs	r2, #1
 800abee:	705a      	strb	r2, [r3, #1]
				if(GetRegFlagState(Plantilla[logicos2],funReleDesh))	// btjt		logicos2,#funReleDesh,deshTypeAct_01
 800abf0:	4b96      	ldr	r3, [pc, #600]	@ (800ae4c <refrigera+0x368>)
 800abf2:	225b      	movs	r2, #91	@ 0x5b
 800abf4:	5c9b      	ldrb	r3, [r3, r2]
 800abf6:	001a      	movs	r2, r3
 800abf8:	2308      	movs	r3, #8
 800abfa:	4013      	ands	r3, r2
 800abfc:	d104      	bne.n	800ac08 <refrigera+0x124>
					goto deshTypeAct_01;
				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 800abfe:	4b93      	ldr	r3, [pc, #588]	@ (800ae4c <refrigera+0x368>)
 800ac00:	2255      	movs	r2, #85	@ 0x55
 800ac02:	2100      	movs	r1, #0
 800ac04:	5499      	strb	r1, [r3, r2]
 800ac06:	e000      	b.n	800ac0a <refrigera+0x126>
					goto deshTypeAct_01;
 800ac08:	46c0      	nop			@ (mov r8, r8)
deshTypeAct_01:
              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800ac0a:	4b97      	ldr	r3, [pc, #604]	@ (800ae68 <refrigera+0x384>)
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	f7fb fc51 	bl	80064b4 <TwoByteInArrayToWord>
 800ac12:	0003      	movs	r3, r0
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	4b95      	ldr	r3, [pc, #596]	@ (800ae6c <refrigera+0x388>)
 800ac18:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800ac1a:	4b95      	ldr	r3, [pc, #596]	@ (800ae70 <refrigera+0x38c>)
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f7fb fc49 	bl	80064b4 <TwoByteInArrayToWord>
 800ac22:	0003      	movs	r3, r0
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	4b91      	ldr	r3, [pc, #580]	@ (800ae6c <refrigera+0x388>)
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	18d3      	adds	r3, r2, r3
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	4b91      	ldr	r3, [pc, #580]	@ (800ae74 <refrigera+0x390>)
 800ac30:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 800ac32:	4b91      	ldr	r3, [pc, #580]	@ (800ae78 <refrigera+0x394>)
 800ac34:	785b      	ldrb	r3, [r3, #1]
 800ac36:	2201      	movs	r2, #1
 800ac38:	4053      	eors	r3, r2
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d137      	bne.n	800acb0 <refrigera+0x1cc>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800ac40:	4b8e      	ldr	r3, [pc, #568]	@ (800ae7c <refrigera+0x398>)
 800ac42:	0018      	movs	r0, r3
 800ac44:	f7fb fc36 	bl	80064b4 <TwoByteInArrayToWord>
 800ac48:	0003      	movs	r3, r0
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	4b87      	ldr	r3, [pc, #540]	@ (800ae6c <refrigera+0x388>)
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	18d3      	adds	r3, r2, r3
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	4b85      	ldr	r3, [pc, #532]	@ (800ae6c <refrigera+0x388>)
 800ac56:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800ac58:	4b88      	ldr	r3, [pc, #544]	@ (800ae7c <refrigera+0x398>)
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f7fb fc2a 	bl	80064b4 <TwoByteInArrayToWord>
 800ac60:	0003      	movs	r3, r0
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	4b83      	ldr	r3, [pc, #524]	@ (800ae74 <refrigera+0x390>)
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	18d3      	adds	r3, r2, r3
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	4b81      	ldr	r3, [pc, #516]	@ (800ae74 <refrigera+0x390>)
 800ac6e:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 800ac70:	4b81      	ldr	r3, [pc, #516]	@ (800ae78 <refrigera+0x394>)
 800ac72:	789b      	ldrb	r3, [r3, #2]
 800ac74:	2201      	movs	r2, #1
 800ac76:	4053      	eors	r3, r2
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d11a      	bne.n	800acb4 <refrigera+0x1d0>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800ac7e:	4b80      	ldr	r3, [pc, #512]	@ (800ae80 <refrigera+0x39c>)
 800ac80:	0018      	movs	r0, r3
 800ac82:	f7fb fc17 	bl	80064b4 <TwoByteInArrayToWord>
 800ac86:	0003      	movs	r3, r0
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	4b78      	ldr	r3, [pc, #480]	@ (800ae6c <refrigera+0x388>)
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	18d3      	adds	r3, r2, r3
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	4b76      	ldr	r3, [pc, #472]	@ (800ae6c <refrigera+0x388>)
 800ac94:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800ac96:	4b7a      	ldr	r3, [pc, #488]	@ (800ae80 <refrigera+0x39c>)
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f7fb fc0b 	bl	80064b4 <TwoByteInArrayToWord>
 800ac9e:	0003      	movs	r3, r0
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	4b74      	ldr	r3, [pc, #464]	@ (800ae74 <refrigera+0x390>)
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	18d3      	adds	r3, r2, r3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	4b72      	ldr	r3, [pc, #456]	@ (800ae74 <refrigera+0x390>)
 800acac:	801a      	strh	r2, [r3, #0]
 800acae:	e002      	b.n	800acb6 <refrigera+0x1d2>
					goto no_ahorro1;
 800acb0:	46c0      	nop			@ (mov r8, r8)
 800acb2:	e000      	b.n	800acb6 <refrigera+0x1d2>
					goto no_ahorro1;
 800acb4:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 800acb6:	4b73      	ldr	r3, [pc, #460]	@ (800ae84 <refrigera+0x3a0>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	001a      	movs	r2, r3
 800acbc:	2302      	movs	r3, #2
 800acbe:	4013      	ands	r3, r2
 800acc0:	d138      	bne.n	800ad34 <refrigera+0x250>
					goto refrigera_j04;
 800acc2:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 800acc4:	f7fb fffe 	bl	8006cc4 <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800acc8:	2313      	movs	r3, #19
 800acca:	18fb      	adds	r3, r7, r3
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	e00f      	b.n	800acf2 <refrigera+0x20e>
					if(k!=4)
 800acd2:	2213      	movs	r2, #19
 800acd4:	18bb      	adds	r3, r7, r2
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d004      	beq.n	800ace6 <refrigera+0x202>
						datled[k] = 0;
 800acdc:	18bb      	adds	r3, r7, r2
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	4a69      	ldr	r2, [pc, #420]	@ (800ae88 <refrigera+0x3a4>)
 800ace2:	2100      	movs	r1, #0
 800ace4:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 800ace6:	2113      	movs	r1, #19
 800ace8:	187b      	adds	r3, r7, r1
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	187b      	adds	r3, r7, r1
 800acee:	3201      	adds	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	2313      	movs	r3, #19
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b06      	cmp	r3, #6
 800acfa:	d9ea      	bls.n	800acd2 <refrigera+0x1ee>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 800acfc:	4b61      	ldr	r3, [pc, #388]	@ (800ae84 <refrigera+0x3a0>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	001a      	movs	r2, r3
 800ad02:	2301      	movs	r3, #1
 800ad04:	4013      	ands	r3, r2
 800ad06:	d100      	bne.n	800ad0a <refrigera+0x226>
 800ad08:	e1fb      	b.n	800b102 <refrigera+0x61e>
					goto refrigera_j05;
 800ad0a:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 800ad0c:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 800ad0e:	4b5f      	ldr	r3, [pc, #380]	@ (800ae8c <refrigera+0x3a8>)
 800ad10:	781a      	ldrb	r2, [r3, #0]
 800ad12:	4b4f      	ldr	r3, [pc, #316]	@ (800ae50 <refrigera+0x36c>)
 800ad14:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800ad16:	4b4e      	ldr	r3, [pc, #312]	@ (800ae50 <refrigera+0x36c>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	001a      	movs	r2, r3
 800ad1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae90 <refrigera+0x3ac>)
 800ad1e:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 800ad20:	f7fb fc1a 	bl	8006558 <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800ad24:	4b4a      	ldr	r3, [pc, #296]	@ (800ae50 <refrigera+0x36c>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <refrigera+0x24c>
 800ad2c:	f000 fb98 	bl	800b460 <refrigera+0x97c>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 800ad30:	f000 fb9a 	bl	800b468 <refrigera+0x984>
				goto refrige10;
 800ad34:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800ad36:	f7fb fc7f 	bl	8006638 <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 800ad3a:	4953      	ldr	r1, [pc, #332]	@ (800ae88 <refrigera+0x3a4>)
 800ad3c:	4852      	ldr	r0, [pc, #328]	@ (800ae88 <refrigera+0x3a4>)
 800ad3e:	2303      	movs	r3, #3
 800ad40:	2202      	movs	r2, #2
 800ad42:	f002 fd0a 	bl	800d75a <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800ad46:	4b53      	ldr	r3, [pc, #332]	@ (800ae94 <refrigera+0x3b0>)
 800ad48:	791b      	ldrb	r3, [r3, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	4053      	eors	r3, r2
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d137      	bne.n	800adc4 <refrigera+0x2e0>
            cntMsgCmd = 250;
 800ad54:	4b50      	ldr	r3, [pc, #320]	@ (800ae98 <refrigera+0x3b4>)
 800ad56:	22fa      	movs	r2, #250	@ 0xfa
 800ad58:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 800ad5a:	4b50      	ldr	r3, [pc, #320]	@ (800ae9c <refrigera+0x3b8>)
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	701a      	strb	r2, [r3, #0]
            estado1[est1LockDr] ^= 0x1;
 800ad60:	4b4f      	ldr	r3, [pc, #316]	@ (800aea0 <refrigera+0x3bc>)
 800ad62:	799b      	ldrb	r3, [r3, #6]
 800ad64:	2201      	movs	r2, #1
 800ad66:	4053      	eors	r3, r2
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	1e5a      	subs	r2, r3, #1
 800ad6c:	4193      	sbcs	r3, r2
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	4b4b      	ldr	r3, [pc, #300]	@ (800aea0 <refrigera+0x3bc>)
 800ad72:	719a      	strb	r2, [r3, #6]
            waux = reeEstado1;
 800ad74:	4b4b      	ldr	r3, [pc, #300]	@ (800aea4 <refrigera+0x3c0>)
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	4b37      	ldr	r3, [pc, #220]	@ (800ae58 <refrigera+0x374>)
 800ad7a:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 800ad7c:	4b36      	ldr	r3, [pc, #216]	@ (800ae58 <refrigera+0x374>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2240      	movs	r2, #64	@ 0x40
 800ad82:	4393      	bics	r3, r2
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	4b34      	ldr	r3, [pc, #208]	@ (800ae58 <refrigera+0x374>)
 800ad88:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 800ad8a:	4b45      	ldr	r3, [pc, #276]	@ (800aea0 <refrigera+0x3bc>)
 800ad8c:	799b      	ldrb	r3, [r3, #6]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4053      	eors	r3, r2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d107      	bne.n	800ada8 <refrigera+0x2c4>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 800ad98:	4b2f      	ldr	r3, [pc, #188]	@ (800ae58 <refrigera+0x374>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2240      	movs	r2, #64	@ 0x40
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b2d      	ldr	r3, [pc, #180]	@ (800ae58 <refrigera+0x374>)
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e000      	b.n	800adaa <refrigera+0x2c6>
            	goto func_lock_01;
 800ada8:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 800adaa:	4b2b      	ldr	r3, [pc, #172]	@ (800ae58 <refrigera+0x374>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	001a      	movs	r2, r3
 800adb0:	4b3d      	ldr	r3, [pc, #244]	@ (800aea8 <refrigera+0x3c4>)
 800adb2:	0019      	movs	r1, r3
 800adb4:	0010      	movs	r0, r2
 800adb6:	f7fc fc0b 	bl	80075d0 <wreeprom>
			reeEstado1 = waux;
 800adba:	4b27      	ldr	r3, [pc, #156]	@ (800ae58 <refrigera+0x374>)
 800adbc:	781a      	ldrb	r2, [r3, #0]
 800adbe:	4b39      	ldr	r3, [pc, #228]	@ (800aea4 <refrigera+0x3c0>)
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e000      	b.n	800adc6 <refrigera+0x2e2>
            	goto no_Func_Lock;
 800adc4:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 800adc6:	4b33      	ldr	r3, [pc, #204]	@ (800ae94 <refrigera+0x3b0>)
 800adc8:	789b      	ldrb	r3, [r3, #2]
 800adca:	2201      	movs	r2, #1
 800adcc:	4053      	eors	r3, r2
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d16b      	bne.n	800aeac <refrigera+0x3c8>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 800add4:	4b30      	ldr	r3, [pc, #192]	@ (800ae98 <refrigera+0x3b4>)
 800add6:	22fa      	movs	r2, #250	@ 0xfa
 800add8:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 800adda:	4b30      	ldr	r3, [pc, #192]	@ (800ae9c <refrigera+0x3b8>)
 800addc:	2202      	movs	r2, #2
 800adde:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800ade0:	4b25      	ldr	r3, [pc, #148]	@ (800ae78 <refrigera+0x394>)
 800ade2:	799b      	ldrb	r3, [r3, #6]
 800ade4:	2201      	movs	r2, #1
 800ade6:	4053      	eors	r3, r2
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	1e5a      	subs	r2, r3, #1
 800adec:	4193      	sbcs	r3, r2
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	4b21      	ldr	r3, [pc, #132]	@ (800ae78 <refrigera+0x394>)
 800adf2:	719a      	strb	r2, [r3, #6]
               waux = reeEstado1;
 800adf4:	4b2b      	ldr	r3, [pc, #172]	@ (800aea4 <refrigera+0x3c0>)
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	4b17      	ldr	r3, [pc, #92]	@ (800ae58 <refrigera+0x374>)
 800adfa:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 800adfc:	4b16      	ldr	r3, [pc, #88]	@ (800ae58 <refrigera+0x374>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2204      	movs	r2, #4
 800ae02:	4393      	bics	r3, r2
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	4b14      	ldr	r3, [pc, #80]	@ (800ae58 <refrigera+0x374>)
 800ae08:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ae78 <refrigera+0x394>)
 800ae0c:	799b      	ldrb	r3, [r3, #6]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4053      	eors	r3, r2
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d107      	bne.n	800ae28 <refrigera+0x344>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 800ae18:	4b0f      	ldr	r3, [pc, #60]	@ (800ae58 <refrigera+0x374>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2204      	movs	r2, #4
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	4b0d      	ldr	r3, [pc, #52]	@ (800ae58 <refrigera+0x374>)
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e000      	b.n	800ae2a <refrigera+0x346>
            	   goto refrigera_j06d;
 800ae28:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae58 <refrigera+0x374>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	001a      	movs	r2, r3
 800ae30:	4b1d      	ldr	r3, [pc, #116]	@ (800aea8 <refrigera+0x3c4>)
 800ae32:	0019      	movs	r1, r3
 800ae34:	0010      	movs	r0, r2
 800ae36:	f7fc fbcb 	bl	80075d0 <wreeprom>
				reeEstado1 = waux;
 800ae3a:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <refrigera+0x374>)
 800ae3c:	781a      	ldrb	r2, [r3, #0]
 800ae3e:	4b19      	ldr	r3, [pc, #100]	@ (800aea4 <refrigera+0x3c0>)
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	e034      	b.n	800aeae <refrigera+0x3ca>
 800ae44:	20000bb4 	.word	0x20000bb4
 800ae48:	20000bf0 	.word	0x20000bf0
 800ae4c:	200000b8 	.word	0x200000b8
 800ae50:	20000b67 	.word	0x20000b67
 800ae54:	20000c34 	.word	0x20000c34
 800ae58:	20000b66 	.word	0x20000b66
 800ae5c:	20000c36 	.word	0x20000c36
 800ae60:	20000c33 	.word	0x20000c33
 800ae64:	20000c35 	.word	0x20000c35
 800ae68:	200000b9 	.word	0x200000b9
 800ae6c:	20000bbc 	.word	0x20000bbc
 800ae70:	200000bb 	.word	0x200000bb
 800ae74:	20000bbe 	.word	0x20000bbe
 800ae78:	20000c4c 	.word	0x20000c4c
 800ae7c:	200000d3 	.word	0x200000d3
 800ae80:	200000d5 	.word	0x200000d5
 800ae84:	20000ba8 	.word	0x20000ba8
 800ae88:	20000ba0 	.word	0x20000ba0
 800ae8c:	20000b7c 	.word	0x20000b7c
 800ae90:	20000bca 	.word	0x20000bca
 800ae94:	20000bac 	.word	0x20000bac
 800ae98:	20001100 	.word	0x20001100
 800ae9c:	20001101 	.word	0x20001101
 800aea0:	200010e0 	.word	0x200010e0
 800aea4:	200001ba 	.word	0x200001ba
 800aea8:	0803f803 	.word	0x0803f803
            	   goto refrigera_j06c;
 800aeac:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800aeae:	4bd0      	ldr	r3, [pc, #832]	@ (800b1f0 <refrigera+0x70c>)
 800aeb0:	789b      	ldrb	r3, [r3, #2]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d121      	bne.n	800aefa <refrigera+0x416>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 800aeb6:	4bcf      	ldr	r3, [pc, #828]	@ (800b1f4 <refrigera+0x710>)
 800aeb8:	78db      	ldrb	r3, [r3, #3]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d11f      	bne.n	800aefe <refrigera+0x41a>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800aebe:	4bce      	ldr	r3, [pc, #824]	@ (800b1f8 <refrigera+0x714>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2201      	movs	r2, #1
 800aec4:	4053      	eors	r3, r2
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d11a      	bne.n	800af02 <refrigera+0x41e>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 800aecc:	4bc8      	ldr	r3, [pc, #800]	@ (800b1f0 <refrigera+0x70c>)
 800aece:	799b      	ldrb	r3, [r3, #6]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10b      	bne.n	800aeec <refrigera+0x408>
                if(retLampOff != 0){ //tnz retLampOff
 800aed4:	4bc9      	ldr	r3, [pc, #804]	@ (800b1fc <refrigera+0x718>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d109      	bne.n	800aef0 <refrigera+0x40c>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 800aedc:	4bc4      	ldr	r3, [pc, #784]	@ (800b1f0 <refrigera+0x70c>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2201      	movs	r2, #1
 800aee2:	4053      	eors	r3, r2
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10d      	bne.n	800af06 <refrigera+0x422>
refrigera_j06a:
 800aeea:	e002      	b.n	800aef2 <refrigera+0x40e>
                	goto refrigera_j06a;
 800aeec:	46c0      	nop			@ (mov r8, r8)
 800aeee:	e000      	b.n	800aef2 <refrigera+0x40e>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 800aef0:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 800aef2:	4bc3      	ldr	r3, [pc, #780]	@ (800b200 <refrigera+0x71c>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	709a      	strb	r2, [r3, #2]
 800aef8:	e006      	b.n	800af08 <refrigera+0x424>
                	goto refrigera_j06;
 800aefa:	46c0      	nop			@ (mov r8, r8)
 800aefc:	e004      	b.n	800af08 <refrigera+0x424>
                	goto refrigera_j06;
 800aefe:	46c0      	nop			@ (mov r8, r8)
 800af00:	e002      	b.n	800af08 <refrigera+0x424>
                	goto refrigera_j06;
 800af02:	46c0      	nop			@ (mov r8, r8)
 800af04:	e000      	b.n	800af08 <refrigera+0x424>
                	goto refrigera_j06;
 800af06:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 800af08:	4bbe      	ldr	r3, [pc, #760]	@ (800b204 <refrigera+0x720>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	001a      	movs	r2, r3
 800af0e:	2301      	movs	r3, #1
 800af10:	4013      	ands	r3, r2
 800af12:	d101      	bne.n	800af18 <refrigera+0x434>
 800af14:	f000 fc16 	bl	800b744 <refrigera+0xc60>
                	goto refrigera_j07;
 800af18:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 800af1a:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800af1c:	49ba      	ldr	r1, [pc, #744]	@ (800b208 <refrigera+0x724>)
 800af1e:	48ba      	ldr	r0, [pc, #744]	@ (800b208 <refrigera+0x724>)
 800af20:	2307      	movs	r3, #7
 800af22:	2203      	movs	r2, #3
 800af24:	f002 fbfe 	bl	800d724 <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 800af28:	4bb8      	ldr	r3, [pc, #736]	@ (800b20c <refrigera+0x728>)
 800af2a:	2259      	movs	r2, #89	@ 0x59
 800af2c:	5c9b      	ldrb	r3, [r3, r2]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d001      	beq.n	800af36 <refrigera+0x452>
 800af32:	f000 fe40 	bl	800bbb6 <refrigera+0x10d2>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 800af36:	f000 fe4e 	bl	800bbd6 <refrigera+0x10f2>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 800af3a:	4bb5      	ldr	r3, [pc, #724]	@ (800b210 <refrigera+0x72c>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	801a      	strh	r2, [r3, #0]
				goto finref;
 800af40:	e061      	b.n	800b006 <refrigera+0x522>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 800af42:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 800af44:	4bb1      	ldr	r3, [pc, #708]	@ (800b20c <refrigera+0x728>)
 800af46:	2264      	movs	r2, #100	@ 0x64
 800af48:	5c9a      	ldrb	r2, [r3, r2]
 800af4a:	4bb2      	ldr	r3, [pc, #712]	@ (800b214 <refrigera+0x730>)
 800af4c:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800af4e:	f7fb fcfb 	bl	8006948 <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 800af52:	4bb1      	ldr	r3, [pc, #708]	@ (800b218 <refrigera+0x734>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	001a      	movs	r2, r3
 800af58:	233c      	movs	r3, #60	@ 0x3c
 800af5a:	4353      	muls	r3, r2
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	4baf      	ldr	r3, [pc, #700]	@ (800b21c <refrigera+0x738>)
 800af60:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 800af62:	4bac      	ldr	r3, [pc, #688]	@ (800b214 <refrigera+0x730>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	001a      	movs	r2, r3
 800af68:	233c      	movs	r3, #60	@ 0x3c
 800af6a:	4353      	muls	r3, r2
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	4bac      	ldr	r3, [pc, #688]	@ (800b220 <refrigera+0x73c>)
 800af70:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 800af72:	f7fb fb41 	bl	80065f8 <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 800af76:	4ba3      	ldr	r3, [pc, #652]	@ (800b204 <refrigera+0x720>)
 800af78:	2202      	movs	r2, #2
 800af7a:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 800af7c:	e040      	b.n	800b000 <refrigera+0x51c>
				retvent = 20;
 800af7e:	4ba9      	ldr	r3, [pc, #676]	@ (800b224 <refrigera+0x740>)
 800af80:	2214      	movs	r2, #20
 800af82:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 800af84:	4ba8      	ldr	r3, [pc, #672]	@ (800b228 <refrigera+0x744>)
 800af86:	2232      	movs	r2, #50	@ 0x32
 800af88:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 800af8a:	4b9e      	ldr	r3, [pc, #632]	@ (800b204 <refrigera+0x720>)
 800af8c:	2202      	movs	r2, #2
 800af8e:	701a      	strb	r2, [r3, #0]
				goto todh20;
 800af90:	e036      	b.n	800b000 <refrigera+0x51c>
                  goto todh; //jp todh
 800af92:	46c0      	nop			@ (mov r8, r8)
 800af94:	e000      	b.n	800af98 <refrigera+0x4b4>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 800af96:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 800af98:	4ba4      	ldr	r3, [pc, #656]	@ (800b22c <refrigera+0x748>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 800af9e:	f7fb fab9 	bl	8006514 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 800afa2:	4b9a      	ldr	r3, [pc, #616]	@ (800b20c <refrigera+0x728>)
 800afa4:	2247      	movs	r2, #71	@ 0x47
 800afa6:	5c9a      	ldrb	r2, [r3, r2]
 800afa8:	4b9a      	ldr	r3, [pc, #616]	@ (800b214 <refrigera+0x730>)
 800afaa:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 800afac:	4b97      	ldr	r3, [pc, #604]	@ (800b20c <refrigera+0x728>)
 800afae:	2255      	movs	r2, #85	@ 0x55
 800afb0:	5c9b      	ldrb	r3, [r3, r2]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d102      	bne.n	800afbc <refrigera+0x4d8>
				BaBentre10_math();					//call BaBentre10_math
 800afb6:	f7fb fcc7 	bl	8006948 <BaBentre10_math>
				goto todh2;
 800afba:	e014      	b.n	800afe6 <refrigera+0x502>
					goto todh1;
 800afbc:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 800afbe:	4b95      	ldr	r3, [pc, #596]	@ (800b214 <refrigera+0x730>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	001a      	movs	r2, r3
 800afc4:	233c      	movs	r3, #60	@ 0x3c
 800afc6:	4353      	muls	r3, r2
 800afc8:	b29a      	uxth	r2, r3
 800afca:	4b99      	ldr	r3, [pc, #612]	@ (800b230 <refrigera+0x74c>)
 800afcc:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800afce:	4b98      	ldr	r3, [pc, #608]	@ (800b230 <refrigera+0x74c>)
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	0a1b      	lsrs	r3, r3, #8
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	4b96      	ldr	r3, [pc, #600]	@ (800b234 <refrigera+0x750>)
 800afda:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800afdc:	4b94      	ldr	r3, [pc, #592]	@ (800b230 <refrigera+0x74c>)
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	4b95      	ldr	r3, [pc, #596]	@ (800b238 <refrigera+0x754>)
 800afe4:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 800afe6:	4b93      	ldr	r3, [pc, #588]	@ (800b234 <refrigera+0x750>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	b29b      	uxth	r3, r3
 800afee:	4a92      	ldr	r2, [pc, #584]	@ (800b238 <refrigera+0x754>)
 800aff0:	7812      	ldrb	r2, [r2, #0]
 800aff2:	189b      	adds	r3, r3, r2
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	4b91      	ldr	r3, [pc, #580]	@ (800b23c <refrigera+0x758>)
 800aff8:	801a      	strh	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800affa:	4b82      	ldr	r3, [pc, #520]	@ (800b204 <refrigera+0x720>)
 800affc:	2203      	movs	r2, #3
 800affe:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 800b000:	4b8f      	ldr	r3, [pc, #572]	@ (800b240 <refrigera+0x75c>)
 800b002:	2204      	movs	r2, #4
 800b004:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 800b006:	4b7e      	ldr	r3, [pc, #504]	@ (800b200 <refrigera+0x71c>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d103      	bne.n	800b016 <refrigera+0x532>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 800b00e:	4b7e      	ldr	r3, [pc, #504]	@ (800b208 <refrigera+0x724>)
 800b010:	2200      	movs	r2, #0
 800b012:	709a      	strb	r2, [r3, #2]
 800b014:	e000      	b.n	800b018 <refrigera+0x534>
                	goto refrigera_j11;
 800b016:	46c0      	nop			@ (mov r8, r8)
				estado1_Aux = reeEstado1;
 800b018:	1dfb      	adds	r3, r7, #7
 800b01a:	4a8a      	ldr	r2, [pc, #552]	@ (800b244 <refrigera+0x760>)
 800b01c:	7812      	ldrb	r2, [r2, #0]
 800b01e:	701a      	strb	r2, [r3, #0]
                if(!GetRegFlagState(estado1_Aux,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800b020:	1dfb      	adds	r3, r7, #7
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	2240      	movs	r2, #64	@ 0x40
 800b026:	4013      	ands	r3, r2
 800b028:	d003      	beq.n	800b032 <refrigera+0x54e>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 800b02a:	4b75      	ldr	r3, [pc, #468]	@ (800b200 <refrigera+0x71c>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	705a      	strb	r2, [r3, #1]
 800b030:	e000      	b.n	800b034 <refrigera+0x550>
                	goto refrigeraLockDrOFF;
 800b032:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 800b034:	4b84      	ldr	r3, [pc, #528]	@ (800b248 <refrigera+0x764>)
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00f      	beq.n	800b05c <refrigera+0x578>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 800b03c:	4b70      	ldr	r3, [pc, #448]	@ (800b200 <refrigera+0x71c>)
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800b042:	4b6f      	ldr	r3, [pc, #444]	@ (800b200 <refrigera+0x71c>)
 800b044:	2200      	movs	r2, #0
 800b046:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 800b048:	4b80      	ldr	r3, [pc, #512]	@ (800b24c <refrigera+0x768>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800b04e:	496e      	ldr	r1, [pc, #440]	@ (800b208 <refrigera+0x724>)
 800b050:	486d      	ldr	r0, [pc, #436]	@ (800b208 <refrigera+0x724>)
 800b052:	2307      	movs	r3, #7
 800b054:	2202      	movs	r2, #2
 800b056:	f002 fb80 	bl	800d75a <Bclear_Clear_trfst>
               goto endNoct;
 800b05a:	e01b      	b.n	800b094 <refrigera+0x5b0>
            	   goto endNocturno;
 800b05c:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800b05e:	4b65      	ldr	r3, [pc, #404]	@ (800b1f4 <refrigera+0x710>)
 800b060:	78db      	ldrb	r3, [r3, #3]
 800b062:	2201      	movs	r2, #1
 800b064:	4053      	eors	r3, r2
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d112      	bne.n	800b092 <refrigera+0x5ae>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 800b06c:	4961      	ldr	r1, [pc, #388]	@ (800b1f4 <refrigera+0x710>)
 800b06e:	4862      	ldr	r0, [pc, #392]	@ (800b1f8 <refrigera+0x714>)
 800b070:	2303      	movs	r3, #3
 800b072:	2200      	movs	r2, #0
 800b074:	f002 fb56 	bl	800d724 <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 800b078:	4963      	ldr	r1, [pc, #396]	@ (800b208 <refrigera+0x724>)
 800b07a:	485d      	ldr	r0, [pc, #372]	@ (800b1f0 <refrigera+0x70c>)
 800b07c:	2304      	movs	r3, #4
 800b07e:	2201      	movs	r2, #1
 800b080:	f002 fb50 	bl	800d724 <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 800b084:	4b72      	ldr	r3, [pc, #456]	@ (800b250 <refrigera+0x76c>)
 800b086:	2200      	movs	r2, #0
 800b088:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 800b08a:	4b72      	ldr	r3, [pc, #456]	@ (800b254 <refrigera+0x770>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	801a      	strh	r2, [r3, #0]
 800b090:	e000      	b.n	800b094 <refrigera+0x5b0>
            	  goto endNoct;
 800b092:	46c0      	nop			@ (mov r8, r8)
			estado1_Aux = reeEstado1;
 800b094:	1dfb      	adds	r3, r7, #7
 800b096:	4a6b      	ldr	r2, [pc, #428]	@ (800b244 <refrigera+0x760>)
 800b098:	7812      	ldrb	r2, [r2, #0]
 800b09a:	701a      	strb	r2, [r3, #0]
			if(GetRegFlagState (estado1_Aux, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 800b09c:	1dfb      	adds	r3, r7, #7
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	d118      	bne.n	800b0d8 <refrigera+0x5f4>
refriOFF:
 800b0a6:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 800b0a8:	f000 fe08 	bl	800bcbc <st_refri>
           for(uint8_t k=0; k<8; k++){
 800b0ac:	2312      	movs	r3, #18
 800b0ae:	18fb      	adds	r3, r7, r3
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	e00a      	b.n	800b0cc <refrigera+0x5e8>
        	   datled[k] = 0;
 800b0b6:	2012      	movs	r0, #18
 800b0b8:	183b      	adds	r3, r7, r0
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	4a52      	ldr	r2, [pc, #328]	@ (800b208 <refrigera+0x724>)
 800b0be:	2100      	movs	r1, #0
 800b0c0:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 800b0c2:	183b      	adds	r3, r7, r0
 800b0c4:	781a      	ldrb	r2, [r3, #0]
 800b0c6:	183b      	adds	r3, r7, r0
 800b0c8:	3201      	adds	r2, #1
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	2312      	movs	r3, #18
 800b0ce:	18fb      	adds	r3, r7, r3
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b07      	cmp	r3, #7
 800b0d4:	d9ef      	bls.n	800b0b6 <refrigera+0x5d2>
refriON:
 800b0d6:	e000      	b.n	800b0da <refrigera+0x5f6>
            	 goto refriON;
 800b0d8:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 800b0da:	4b5f      	ldr	r3, [pc, #380]	@ (800b258 <refrigera+0x774>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4053      	eors	r3, r2
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d109      	bne.n	800b0fc <refrigera+0x618>
         st_refri();
 800b0e8:	f000 fde8 	bl	800bcbc <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 800b0ec:	4b5b      	ldr	r3, [pc, #364]	@ (800b25c <refrigera+0x778>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 800b0f2:	4b3f      	ldr	r3, [pc, #252]	@ (800b1f0 <refrigera+0x70c>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800b0f8:	f000 fda2 	bl	800bc40 <refrigera+0x115c>
        	 goto ac_OK;
 800b0fc:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 800b0fe:	f000 fd9f 	bl	800bc40 <refrigera+0x115c>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 800b102:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800b104:	4b56      	ldr	r3, [pc, #344]	@ (800b260 <refrigera+0x77c>)
 800b106:	2200      	movs	r2, #0
 800b108:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 800b10a:	f7fb f9e9 	bl	80064e0 <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 800b10e:	f7fb f9ef 	bl	80064f0 <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 800b112:	4954      	ldr	r1, [pc, #336]	@ (800b264 <refrigera+0x780>)
 800b114:	4853      	ldr	r0, [pc, #332]	@ (800b264 <refrigera+0x780>)
 800b116:	2307      	movs	r3, #7
 800b118:	2206      	movs	r2, #6
 800b11a:	f002 fb1e 	bl	800d75a <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 800b11e:	4b52      	ldr	r3, [pc, #328]	@ (800b268 <refrigera+0x784>)
 800b120:	2202      	movs	r2, #2
 800b122:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800b124:	4b3b      	ldr	r3, [pc, #236]	@ (800b214 <refrigera+0x730>)
 800b126:	2205      	movs	r2, #5
 800b128:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 800b12a:	4b4d      	ldr	r3, [pc, #308]	@ (800b260 <refrigera+0x77c>)
 800b12c:	799b      	ldrb	r3, [r3, #6]
 800b12e:	2201      	movs	r2, #1
 800b130:	4053      	eors	r3, r2
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b00      	cmp	r3, #0
 800b136:	d103      	bne.n	800b140 <refrigera+0x65c>
          wreg = 0x01;
 800b138:	4b36      	ldr	r3, [pc, #216]	@ (800b214 <refrigera+0x730>)
 800b13a:	2201      	movs	r2, #1
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	e000      	b.n	800b142 <refrigera+0x65e>
        	  goto no_change_time;
 800b140:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 800b142:	4b34      	ldr	r3, [pc, #208]	@ (800b214 <refrigera+0x730>)
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	4b37      	ldr	r3, [pc, #220]	@ (800b224 <refrigera+0x740>)
 800b148:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 800b14a:	4b32      	ldr	r3, [pc, #200]	@ (800b214 <refrigera+0x730>)
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	001a      	movs	r2, r3
 800b150:	4b46      	ldr	r3, [pc, #280]	@ (800b26c <refrigera+0x788>)
 800b152:	801a      	strh	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 800b154:	f7fb fa00 	bl	8006558 <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800b158:	4b2d      	ldr	r3, [pc, #180]	@ (800b210 <refrigera+0x72c>)
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	2b63      	cmp	r3, #99	@ 0x63
 800b15e:	d929      	bls.n	800b1b4 <refrigera+0x6d0>
			if(cntblkh <= 250){
 800b160:	4b2b      	ldr	r3, [pc, #172]	@ (800b210 <refrigera+0x72c>)
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	2bfa      	cmp	r3, #250	@ 0xfa
 800b166:	d92d      	bls.n	800b1c4 <refrigera+0x6e0>
			if(cntblkh < 300){
 800b168:	4b29      	ldr	r3, [pc, #164]	@ (800b210 <refrigera+0x72c>)
 800b16a:	881a      	ldrh	r2, [r3, #0]
 800b16c:	2396      	movs	r3, #150	@ 0x96
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	429a      	cmp	r2, r3
 800b172:	d321      	bcc.n	800b1b8 <refrigera+0x6d4>
			if(cntblkh < 450){
 800b174:	4b26      	ldr	r3, [pc, #152]	@ (800b210 <refrigera+0x72c>)
 800b176:	881a      	ldrh	r2, [r3, #0]
 800b178:	23e1      	movs	r3, #225	@ 0xe1
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d200      	bcs.n	800b182 <refrigera+0x69e>
 800b180:	e08d      	b.n	800b29e <refrigera+0x7ba>
			if(cntblkh < 500){
 800b182:	4b23      	ldr	r3, [pc, #140]	@ (800b210 <refrigera+0x72c>)
 800b184:	881a      	ldrh	r2, [r3, #0]
 800b186:	23fa      	movs	r3, #250	@ 0xfa
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d316      	bcc.n	800b1bc <refrigera+0x6d8>
			if(cntblkh < 650){
 800b18e:	4b20      	ldr	r3, [pc, #128]	@ (800b210 <refrigera+0x72c>)
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	4a37      	ldr	r2, [pc, #220]	@ (800b270 <refrigera+0x78c>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d800      	bhi.n	800b19a <refrigera+0x6b6>
 800b198:	e0d8      	b.n	800b34c <refrigera+0x868>
			if(cntblkh < 700){
 800b19a:	4b1d      	ldr	r3, [pc, #116]	@ (800b210 <refrigera+0x72c>)
 800b19c:	881a      	ldrh	r2, [r3, #0]
 800b19e:	23af      	movs	r3, #175	@ 0xaf
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d30c      	bcc.n	800b1c0 <refrigera+0x6dc>
			if(cntblkh < 850){
 800b1a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b210 <refrigera+0x72c>)
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	4a32      	ldr	r2, [pc, #200]	@ (800b274 <refrigera+0x790>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d800      	bhi.n	800b1b2 <refrigera+0x6ce>
 800b1b0:	e0ea      	b.n	800b388 <refrigera+0x8a4>
indi_off:
 800b1b2:	e006      	b.n	800b1c2 <refrigera+0x6de>
				goto indi_off; //jrult	indi_off
 800b1b4:	46c0      	nop			@ (mov r8, r8)
 800b1b6:	e105      	b.n	800b3c4 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b1b8:	46c0      	nop			@ (mov r8, r8)
 800b1ba:	e103      	b.n	800b3c4 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b1bc:	46c0      	nop			@ (mov r8, r8)
 800b1be:	e101      	b.n	800b3c4 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b1c0:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 800b1c2:	e0ff      	b.n	800b3c4 <refrigera+0x8e0>
				goto Indi_int; //jrule	Indi_int
 800b1c4:	46c0      	nop			@ (mov r8, r8)
			soloent (reePlantilla[interdh]);
 800b1c6:	4b2c      	ldr	r3, [pc, #176]	@ (800b278 <refrigera+0x794>)
 800b1c8:	2246      	movs	r2, #70	@ 0x46
 800b1ca:	5c9b      	ldrb	r3, [r3, r2]
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f7fb fb89 	bl	80068e4 <soloent>
			op_menu (reePlantilla[eeD1_Msg1] , reePlantilla[eeD2_Msg1]);
 800b1d2:	4b29      	ldr	r3, [pc, #164]	@ (800b278 <refrigera+0x794>)
 800b1d4:	225f      	movs	r2, #95	@ 0x5f
 800b1d6:	5c9a      	ldrb	r2, [r3, r2]
 800b1d8:	4b27      	ldr	r3, [pc, #156]	@ (800b278 <refrigera+0x794>)
 800b1da:	2160      	movs	r1, #96	@ 0x60
 800b1dc:	5c5b      	ldrb	r3, [r3, r1]
 800b1de:	0019      	movs	r1, r3
 800b1e0:	0010      	movs	r0, r2
 800b1e2:	f7fc fa09 	bl	80075f8 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b1e6:	2311      	movs	r3, #17
 800b1e8:	18fb      	adds	r3, r7, r3
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
 800b1ee:	e050      	b.n	800b292 <refrigera+0x7ae>
 800b1f0:	20000c4c 	.word	0x20000c4c
 800b1f4:	20000b88 	.word	0x20000b88
 800b1f8:	20000bf8 	.word	0x20000bf8
 800b1fc:	20001102 	.word	0x20001102
 800b200:	20000bb4 	.word	0x20000bb4
 800b204:	20000ba8 	.word	0x20000ba8
 800b208:	20000ba0 	.word	0x20000ba0
 800b20c:	200000b8 	.word	0x200000b8
 800b210:	20000b60 	.word	0x20000b60
 800b214:	20000b67 	.word	0x20000b67
 800b218:	20000b66 	.word	0x20000b66
 800b21c:	20000c0a 	.word	0x20000c0a
 800b220:	20000c0c 	.word	0x20000c0c
 800b224:	20000b7a 	.word	0x20000b7a
 800b228:	20000b72 	.word	0x20000b72
 800b22c:	20000b7d 	.word	0x20000b7d
 800b230:	200008e6 	.word	0x200008e6
 800b234:	20000b5b 	.word	0x20000b5b
 800b238:	20000b5c 	.word	0x20000b5c
 800b23c:	20000bc8 	.word	0x20000bc8
 800b240:	20000b7b 	.word	0x20000b7b
 800b244:	200001ba 	.word	0x200001ba
 800b248:	20000c54 	.word	0x20000c54
 800b24c:	20000bf0 	.word	0x20000bf0
 800b250:	20000c40 	.word	0x20000c40
 800b254:	20000c42 	.word	0x20000c42
 800b258:	20001144 	.word	0x20001144
 800b25c:	20000f84 	.word	0x20000f84
 800b260:	20000be8 	.word	0x20000be8
 800b264:	20000b98 	.word	0x20000b98
 800b268:	20000b7e 	.word	0x20000b7e
 800b26c:	20000bc6 	.word	0x20000bc6
 800b270:	00000289 	.word	0x00000289
 800b274:	00000351 	.word	0x00000351
 800b278:	20000c9c 	.word	0x20000c9c
            	 datled[k] = 0;
 800b27c:	2011      	movs	r0, #17
 800b27e:	183b      	adds	r3, r7, r0
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	4ac0      	ldr	r2, [pc, #768]	@ (800b584 <refrigera+0xaa0>)
 800b284:	2100      	movs	r1, #0
 800b286:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b288:	183b      	adds	r3, r7, r0
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	183b      	adds	r3, r7, r0
 800b28e:	3201      	adds	r2, #1
 800b290:	701a      	strb	r2, [r3, #0]
 800b292:	2311      	movs	r3, #17
 800b294:	18fb      	adds	r3, r7, r3
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b07      	cmp	r3, #7
 800b29a:	d9ef      	bls.n	800b27c <refrigera+0x798>
             goto defindi;
 800b29c:	e092      	b.n	800b3c4 <refrigera+0x8e0>
				goto Indi_time;//rult Indi_time
 800b29e:	46c0      	nop			@ (mov r8, r8)
            if(reePlantilla[dhmode] != 1){
 800b2a0:	4bb9      	ldr	r3, [pc, #740]	@ (800b588 <refrigera+0xaa4>)
 800b2a2:	2255      	movs	r2, #85	@ 0x55
 800b2a4:	5c9b      	ldrb	r3, [r3, r2]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d109      	bne.n	800b2be <refrigera+0x7da>
            soloent( reePlantilla[timedh] );
 800b2aa:	4bb7      	ldr	r3, [pc, #732]	@ (800b588 <refrigera+0xaa4>)
 800b2ac:	2247      	movs	r2, #71	@ 0x47
 800b2ae:	5c9b      	ldrb	r3, [r3, r2]
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f7fb fb17 	bl	80068e4 <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 800b2b6:	4bb3      	ldr	r3, [pc, #716]	@ (800b584 <refrigera+0xaa0>)
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800b2bc:	e082      	b.n	800b3c4 <refrigera+0x8e0>
				goto indica45;
 800b2be:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800b2c0:	4bb2      	ldr	r3, [pc, #712]	@ (800b58c <refrigera+0xaa8>)
 800b2c2:	2247      	movs	r2, #71	@ 0x47
 800b2c4:	5c9b      	ldrb	r3, [r3, r2]
 800b2c6:	0018      	movs	r0, r3
 800b2c8:	f7fb fad6 	bl	8006878 <convad10>
            if(reePlantilla[eeprotype]){
 800b2cc:	4bae      	ldr	r3, [pc, #696]	@ (800b588 <refrigera+0xaa4>)
 800b2ce:	2257      	movs	r2, #87	@ 0x57
 800b2d0:	5c9b      	ldrb	r3, [r3, r2]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10c      	bne.n	800b2f0 <refrigera+0x80c>
            if(reePlantilla[eeprotype] == 2){
 800b2d6:	4bac      	ldr	r3, [pc, #688]	@ (800b588 <refrigera+0xaa4>)
 800b2d8:	2257      	movs	r2, #87	@ 0x57
 800b2da:	5c9b      	ldrb	r3, [r3, r2]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d00f      	beq.n	800b300 <refrigera+0x81c>
indica_na:
 800b2e0:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800b2e2:	4bab      	ldr	r3, [pc, #684]	@ (800b590 <refrigera+0xaac>)
 800b2e4:	2226      	movs	r2, #38	@ 0x26
 800b2e6:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 800b2e8:	4baa      	ldr	r3, [pc, #680]	@ (800b594 <refrigera+0xab0>)
 800b2ea:	2226      	movs	r2, #38	@ 0x26
 800b2ec:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800b2ee:	e00f      	b.n	800b310 <refrigera+0x82c>
            	goto indica_110v; //jreq indica_110v
 800b2f0:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800b2f2:	4ba7      	ldr	r3, [pc, #668]	@ (800b590 <refrigera+0xaac>)
 800b2f4:	221f      	movs	r2, #31
 800b2f6:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 800b2f8:	4ba6      	ldr	r3, [pc, #664]	@ (800b594 <refrigera+0xab0>)
 800b2fa:	220b      	movs	r2, #11
 800b2fc:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800b2fe:	e007      	b.n	800b310 <refrigera+0x82c>
            	goto indica_220v; //jreq indica_220v
 800b300:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800b302:	4ba3      	ldr	r3, [pc, #652]	@ (800b590 <refrigera+0xaac>)
 800b304:	221f      	movs	r2, #31
 800b306:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 800b308:	4ba2      	ldr	r3, [pc, #648]	@ (800b594 <refrigera+0xab0>)
 800b30a:	220a      	movs	r2, #10
 800b30c:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800b30e:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800b310:	4b9f      	ldr	r3, [pc, #636]	@ (800b590 <refrigera+0xaac>)
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	4b9f      	ldr	r3, [pc, #636]	@ (800b594 <refrigera+0xab0>)
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	0019      	movs	r1, r3
 800b31a:	0010      	movs	r0, r2
 800b31c:	f7fc f96c 	bl	80075f8 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b320:	2310      	movs	r3, #16
 800b322:	18fb      	adds	r3, r7, r3
 800b324:	2200      	movs	r2, #0
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	e00a      	b.n	800b340 <refrigera+0x85c>
            	 datled[k] = 0;
 800b32a:	2010      	movs	r0, #16
 800b32c:	183b      	adds	r3, r7, r0
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	4a94      	ldr	r2, [pc, #592]	@ (800b584 <refrigera+0xaa0>)
 800b332:	2100      	movs	r1, #0
 800b334:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b336:	183b      	adds	r3, r7, r0
 800b338:	781a      	ldrb	r2, [r3, #0]
 800b33a:	183b      	adds	r3, r7, r0
 800b33c:	3201      	adds	r2, #1
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	2310      	movs	r3, #16
 800b342:	18fb      	adds	r3, r7, r3
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b07      	cmp	r3, #7
 800b348:	d9ef      	bls.n	800b32a <refrigera+0x846>
             goto defindi;
 800b34a:	e03b      	b.n	800b3c4 <refrigera+0x8e0>
				goto Indi_sp; //rult Indi_sp
 800b34c:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 800b34e:	f7fb f92d 	bl	80065ac <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800b352:	4b91      	ldr	r3, [pc, #580]	@ (800b598 <refrigera+0xab4>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	0018      	movs	r0, r3
 800b358:	f7fb fac4 	bl	80068e4 <soloent>
			for(uint8_t k=0; k<8; k++){
 800b35c:	230f      	movs	r3, #15
 800b35e:	18fb      	adds	r3, r7, r3
 800b360:	2200      	movs	r2, #0
 800b362:	701a      	strb	r2, [r3, #0]
 800b364:	e00a      	b.n	800b37c <refrigera+0x898>
				datled[k] = 0;
 800b366:	200f      	movs	r0, #15
 800b368:	183b      	adds	r3, r7, r0
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	4a85      	ldr	r2, [pc, #532]	@ (800b584 <refrigera+0xaa0>)
 800b36e:	2100      	movs	r1, #0
 800b370:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 800b372:	183b      	adds	r3, r7, r0
 800b374:	781a      	ldrb	r2, [r3, #0]
 800b376:	183b      	adds	r3, r7, r0
 800b378:	3201      	adds	r2, #1
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	230f      	movs	r3, #15
 800b37e:	18fb      	adds	r3, r7, r3
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b07      	cmp	r3, #7
 800b384:	d9ef      	bls.n	800b366 <refrigera+0x882>
			goto defindi;
 800b386:	e01d      	b.n	800b3c4 <refrigera+0x8e0>
				goto Indi_dif; //rult Indi_dif
 800b388:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 800b38a:	f7fb f91b 	bl	80065c4 <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 800b38e:	4b83      	ldr	r3, [pc, #524]	@ (800b59c <refrigera+0xab8>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	0018      	movs	r0, r3
 800b394:	f7fb faa6 	bl	80068e4 <soloent>
            for(uint8_t k=0; k<8; k++){
 800b398:	230e      	movs	r3, #14
 800b39a:	18fb      	adds	r3, r7, r3
 800b39c:	2200      	movs	r2, #0
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	e00a      	b.n	800b3b8 <refrigera+0x8d4>
            	datled[k] = 0;
 800b3a2:	200e      	movs	r0, #14
 800b3a4:	183b      	adds	r3, r7, r0
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	4a76      	ldr	r2, [pc, #472]	@ (800b584 <refrigera+0xaa0>)
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 800b3ae:	183b      	adds	r3, r7, r0
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	183b      	adds	r3, r7, r0
 800b3b4:	3201      	adds	r2, #1
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	230e      	movs	r3, #14
 800b3ba:	18fb      	adds	r3, r7, r3
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b07      	cmp	r3, #7
 800b3c0:	d9ef      	bls.n	800b3a2 <refrigera+0x8be>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 800b3c2:	46c0      	nop			@ (mov r8, r8)
 800b3c4:	f7fc f810 	bl	80073e8 <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 800b3c8:	4b75      	ldr	r3, [pc, #468]	@ (800b5a0 <refrigera+0xabc>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b25b      	sxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	db2a      	blt.n	800b428 <refrigera+0x944>
        	   goto indica_j00;
 800b3d2:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 800b3d4:	4b6d      	ldr	r3, [pc, #436]	@ (800b58c <refrigera+0xaa8>)
 800b3d6:	2259      	movs	r2, #89	@ 0x59
 800b3d8:	5c9b      	ldrb	r3, [r3, r2]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d104      	bne.n	800b3e8 <refrigera+0x904>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b3de:	4b71      	ldr	r3, [pc, #452]	@ (800b5a4 <refrigera+0xac0>)
 800b3e0:	791b      	ldrb	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d01c      	beq.n	800b420 <refrigera+0x93c>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b3e6:	e018      	b.n	800b41a <refrigera+0x936>
            	goto indica_j00b;
 800b3e8:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 800b3ea:	4b6f      	ldr	r3, [pc, #444]	@ (800b5a8 <refrigera+0xac4>)
 800b3ec:	78db      	ldrb	r3, [r3, #3]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10e      	bne.n	800b410 <refrigera+0x92c>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800b3f2:	4b6d      	ldr	r3, [pc, #436]	@ (800b5a8 <refrigera+0xac4>)
 800b3f4:	789b      	ldrb	r3, [r3, #2]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10c      	bne.n	800b414 <refrigera+0x930>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 800b3fa:	4b6a      	ldr	r3, [pc, #424]	@ (800b5a4 <refrigera+0xac0>)
 800b3fc:	791b      	ldrb	r3, [r3, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <refrigera+0x934>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800b402:	4b67      	ldr	r3, [pc, #412]	@ (800b5a0 <refrigera+0xabc>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	001a      	movs	r2, r3
 800b408:	2310      	movs	r3, #16
 800b40a:	4013      	ands	r3, r2
 800b40c:	d00a      	beq.n	800b424 <refrigera+0x940>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b40e:	e004      	b.n	800b41a <refrigera+0x936>
            	 goto indica_j01;
 800b410:	46c0      	nop			@ (mov r8, r8)
 800b412:	e002      	b.n	800b41a <refrigera+0x936>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 800b414:	46c0      	nop			@ (mov r8, r8)
 800b416:	e000      	b.n	800b41a <refrigera+0x936>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 800b418:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b41a:	f7fb f87b 	bl	8006514 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b41e:	e5ae      	b.n	800af7e <refrigera+0x49a>
            goto indica_j02;
 800b420:	46c0      	nop			@ (mov r8, r8)
 800b422:	e5ac      	b.n	800af7e <refrigera+0x49a>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 800b424:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b426:	e5aa      	b.n	800af7e <refrigera+0x49a>
           goto defind10;				/// No, pregunta por otro modo
 800b428:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 800b42a:	4b60      	ldr	r3, [pc, #384]	@ (800b5ac <refrigera+0xac8>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d112      	bne.n	800b458 <refrigera+0x974>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800b432:	4b5d      	ldr	r3, [pc, #372]	@ (800b5a8 <refrigera+0xac4>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d010      	beq.n	800b45c <refrigera+0x978>
            	 goto indica_j04;
 800b43a:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 800b43c:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800b43e:	4b5c      	ldr	r3, [pc, #368]	@ (800b5b0 <refrigera+0xacc>)
 800b440:	2211      	movs	r2, #17
 800b442:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 800b444:	4b5b      	ldr	r3, [pc, #364]	@ (800b5b4 <refrigera+0xad0>)
 800b446:	2208      	movs	r2, #8
 800b448:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 800b44a:	4b5b      	ldr	r3, [pc, #364]	@ (800b5b8 <refrigera+0xad4>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800b450:	4b5a      	ldr	r3, [pc, #360]	@ (800b5bc <refrigera+0xad8>)
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e570      	b.n	800af3a <refrigera+0x456>
            	 goto finindi;
 800b458:	46c0      	nop			@ (mov r8, r8)
 800b45a:	e5d4      	b.n	800b006 <refrigera+0x522>
             goto finindi;
 800b45c:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800b45e:	e5d2      	b.n	800b006 <refrigera+0x522>
            fauto[7] = 1;						//bset		fauto,#7
 800b460:	4b57      	ldr	r3, [pc, #348]	@ (800b5c0 <refrigera+0xadc>)
 800b462:	2201      	movs	r2, #1
 800b464:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 800b466:	e156      	b.n	800b716 <refrigera+0xc32>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 800b468:	4b55      	ldr	r3, [pc, #340]	@ (800b5c0 <refrigera+0xadc>)
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d150      	bne.n	800b512 <refrigera+0xa2e>
			wreg = num_ver;			//;		/ Versión del Firmware
 800b470:	4b47      	ldr	r3, [pc, #284]	@ (800b590 <refrigera+0xaac>)
 800b472:	2205      	movs	r2, #5
 800b474:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 800b476:	f7fb fa53 	bl	8006920 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 800b47a:	4b42      	ldr	r3, [pc, #264]	@ (800b584 <refrigera+0xaa0>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 800b480:	4b4f      	ldr	r3, [pc, #316]	@ (800b5c0 <refrigera+0xadc>)
 800b482:	2201      	movs	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 800b486:	4b4a      	ldr	r3, [pc, #296]	@ (800b5b0 <refrigera+0xacc>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b10      	cmp	r3, #16
 800b48c:	d90c      	bls.n	800b4a8 <refrigera+0x9c4>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 800b48e:	4b4d      	ldr	r3, [pc, #308]	@ (800b5c4 <refrigera+0xae0>)
 800b490:	2110      	movs	r1, #16
 800b492:	0018      	movs	r0, r3
 800b494:	f008 fff2 	bl	801447c <HAL_GPIO_ReadPin>
 800b498:	1e03      	subs	r3, r0, #0
 800b49a:	d003      	beq.n	800b4a4 <refrigera+0x9c0>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 800b49c:	4b42      	ldr	r3, [pc, #264]	@ (800b5a8 <refrigera+0xac4>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 800b4a2:	e020      	b.n	800b4e6 <refrigera+0xa02>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 800b4a4:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 800b4a6:	e136      	b.n	800b716 <refrigera+0xc32>
        	   goto door_det; //jrule door_det
 800b4a8:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 800b4aa:	4b41      	ldr	r3, [pc, #260]	@ (800b5b0 <refrigera+0xacc>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2b0d      	cmp	r3, #13
 800b4b0:	d915      	bls.n	800b4de <refrigera+0x9fa>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 800b4b2:	4b34      	ldr	r3, [pc, #208]	@ (800b584 <refrigera+0xaa0>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 800b4b8:	4b42      	ldr	r3, [pc, #264]	@ (800b5c4 <refrigera+0xae0>)
 800b4ba:	2110      	movs	r1, #16
 800b4bc:	0018      	movs	r0, r3
 800b4be:	f008 ffdd 	bl	801447c <HAL_GPIO_ReadPin>
 800b4c2:	1e03      	subs	r3, r0, #0
 800b4c4:	d009      	beq.n	800b4da <refrigera+0x9f6>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c0 <refrigera+0xadc>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 800b4cc:	4b2d      	ldr	r3, [pc, #180]	@ (800b584 <refrigera+0xaa0>)
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 800b4d2:	4b3d      	ldr	r3, [pc, #244]	@ (800b5c8 <refrigera+0xae4>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	705a      	strb	r2, [r3, #1]
			goto defap;
 800b4d8:	e11d      	b.n	800b716 <refrigera+0xc32>
            	goto no_det_door;				//	¿La puerta está abierta?
 800b4da:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 800b4dc:	e11b      	b.n	800b716 <refrigera+0xc32>
            	goto do_sec;
 800b4de:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800b4e0:	4b37      	ldr	r3, [pc, #220]	@ (800b5c0 <refrigera+0xadc>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60bb      	str	r3, [r7, #8]
 800b4ea:	e00e      	b.n	800b50a <refrigera+0xa26>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 800b4ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b5a8 <refrigera+0xac4>)
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	18d3      	adds	r3, r2, r3
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10e      	bne.n	800b516 <refrigera+0xa32>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 800b4f8:	4a34      	ldr	r2, [pc, #208]	@ (800b5cc <refrigera+0xae8>)
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	18d3      	adds	r3, r2, r3
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <refrigera+0xa36>
			for(int k=0;k<8;k++){
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	3301      	adds	r3, #1
 800b508:	60bb      	str	r3, [r7, #8]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b07      	cmp	r3, #7
 800b50e:	dded      	ble.n	800b4ec <refrigera+0xa08>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800b510:	e085      	b.n	800b61e <refrigera+0xb3a>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800b512:	46c0      	nop			@ (mov r8, r8)
 800b514:	e004      	b.n	800b520 <refrigera+0xa3c>
           		   goto fail_det;//jrne fail_det
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	e002      	b.n	800b520 <refrigera+0xa3c>
           		   goto fail_det; //jrne fail_det
 800b51a:	46c0      	nop			@ (mov r8, r8)
 800b51c:	e000      	b.n	800b520 <refrigera+0xa3c>
				goto fail_det;
 800b51e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800b520:	210a      	movs	r1, #10
 800b522:	200a      	movs	r0, #10
 800b524:	f7fc f868 	bl	80075f8 <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 800b528:	4b29      	ldr	r3, [pc, #164]	@ (800b5d0 <refrigera+0xaec>)
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	001a      	movs	r2, r3
 800b530:	2340      	movs	r3, #64	@ 0x40
 800b532:	4013      	ands	r3, r2
 800b534:	d104      	bne.n	800b540 <refrigera+0xa5c>
			op_menu (0x1F, 0X1F);
 800b536:	211f      	movs	r1, #31
 800b538:	201f      	movs	r0, #31
 800b53a:	f7fc f85d 	bl	80075f8 <op_menu>
 800b53e:	e000      	b.n	800b542 <refrigera+0xa5e>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800b540:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800b542:	4b1f      	ldr	r3, [pc, #124]	@ (800b5c0 <refrigera+0xadc>)
 800b544:	2201      	movs	r2, #1
 800b546:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 800b548:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c0 <refrigera+0xadc>)
 800b54a:	2201      	movs	r2, #1
 800b54c:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800b54e:	4b16      	ldr	r3, [pc, #88]	@ (800b5a8 <refrigera+0xac4>)
 800b550:	79db      	ldrb	r3, [r3, #7]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d107      	bne.n	800b566 <refrigera+0xa82>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 800b556:	4b14      	ldr	r3, [pc, #80]	@ (800b5a8 <refrigera+0xac4>)
 800b558:	799b      	ldrb	r3, [r3, #6]
 800b55a:	2201      	movs	r2, #1
 800b55c:	4053      	eors	r3, r2
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d15a      	bne.n	800b61a <refrigera+0xb36>
dpy_volt_f:
 800b564:	e000      	b.n	800b568 <refrigera+0xa84>
        	   goto dpy_volt_f;
 800b566:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 800b568:	4b15      	ldr	r3, [pc, #84]	@ (800b5c0 <refrigera+0xadc>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800b56e:	4b11      	ldr	r3, [pc, #68]	@ (800b5b4 <refrigera+0xad0>)
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	001a      	movs	r2, r3
 800b574:	2301      	movs	r3, #1
 800b576:	4013      	ands	r3, r2
 800b578:	d12c      	bne.n	800b5d4 <refrigera+0xaf0>
              fauto[3] = 1;					//bset		fauto,#3
 800b57a:	4b11      	ldr	r3, [pc, #68]	@ (800b5c0 <refrigera+0xadc>)
 800b57c:	2201      	movs	r2, #1
 800b57e:	70da      	strb	r2, [r3, #3]
 800b580:	e029      	b.n	800b5d6 <refrigera+0xaf2>
 800b582:	46c0      	nop			@ (mov r8, r8)
 800b584:	20000ba0 	.word	0x20000ba0
 800b588:	20000c9c 	.word	0x20000c9c
 800b58c:	200000b8 	.word	0x200000b8
 800b590:	20000b67 	.word	0x20000b67
 800b594:	20000b66 	.word	0x20000b66
 800b598:	0801e7f0 	.word	0x0801e7f0
 800b59c:	0801e7f1 	.word	0x0801e7f1
 800b5a0:	20000b64 	.word	0x20000b64
 800b5a4:	20000bb4 	.word	0x20000bb4
 800b5a8:	20000b98 	.word	0x20000b98
 800b5ac:	20000b65 	.word	0x20000b65
 800b5b0:	20000b7c 	.word	0x20000b7c
 800b5b4:	20000c38 	.word	0x20000c38
 800b5b8:	20000ba8 	.word	0x20000ba8
 800b5bc:	20000b5f 	.word	0x20000b5f
 800b5c0:	20000be8 	.word	0x20000be8
 800b5c4:	50000400 	.word	0x50000400
 800b5c8:	20000bf0 	.word	0x20000bf0
 800b5cc:	20000b90 	.word	0x20000b90
 800b5d0:	20000b60 	.word	0x20000b60
            	  goto no_dpy_f;
 800b5d4:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 800b5d6:	4bc0      	ldr	r3, [pc, #768]	@ (800b8d8 <refrigera+0xdf4>)
 800b5d8:	781a      	ldrb	r2, [r3, #0]
 800b5da:	4bc0      	ldr	r3, [pc, #768]	@ (800b8dc <refrigera+0xdf8>)
 800b5dc:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 800b5de:	4bbf      	ldr	r3, [pc, #764]	@ (800b8dc <refrigera+0xdf8>)
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	2b63      	cmp	r3, #99	@ 0x63
 800b5e4:	d910      	bls.n	800b608 <refrigera+0xb24>
				wreg = wreg - 100;
 800b5e6:	4bbd      	ldr	r3, [pc, #756]	@ (800b8dc <refrigera+0xdf8>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	3b64      	subs	r3, #100	@ 0x64
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	4bbb      	ldr	r3, [pc, #748]	@ (800b8dc <refrigera+0xdf8>)
 800b5f0:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b5f2:	4bba      	ldr	r3, [pc, #744]	@ (800b8dc <refrigera+0xdf8>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b63      	cmp	r3, #99	@ 0x63
 800b5f8:	d908      	bls.n	800b60c <refrigera+0xb28>
				wreg = wreg - 100;
 800b5fa:	4bb8      	ldr	r3, [pc, #736]	@ (800b8dc <refrigera+0xdf8>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	3b64      	subs	r3, #100	@ 0x64
 800b600:	b2da      	uxtb	r2, r3
 800b602:	4bb6      	ldr	r3, [pc, #728]	@ (800b8dc <refrigera+0xdf8>)
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	e002      	b.n	800b60e <refrigera+0xb2a>
					goto under_100_f; //jrult under_100_f
 800b608:	46c0      	nop			@ (mov r8, r8)
 800b60a:	e000      	b.n	800b60e <refrigera+0xb2a>
					goto under_100_f;
 800b60c:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 800b60e:	f7fb f987 	bl	8006920 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 800b612:	4bb3      	ldr	r3, [pc, #716]	@ (800b8e0 <refrigera+0xdfc>)
 800b614:	2200      	movs	r2, #0
 800b616:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 800b618:	e07d      	b.n	800b716 <refrigera+0xc32>
        	   goto no_dpy_volt_f;
 800b61a:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 800b61c:	e07b      	b.n	800b716 <refrigera+0xc32>
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 800b61e:	4bb1      	ldr	r3, [pc, #708]	@ (800b8e4 <refrigera+0xe00>)
 800b620:	789b      	ldrb	r3, [r3, #2]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d100      	bne.n	800b628 <refrigera+0xb44>
 800b626:	e77a      	b.n	800b51e <refrigera+0xa3a>
					goto on_compres;
 800b628:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 800b62a:	4baf      	ldr	r3, [pc, #700]	@ (800b8e8 <refrigera+0xe04>)
 800b62c:	2201      	movs	r2, #1
 800b62e:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800b630:	4bab      	ldr	r3, [pc, #684]	@ (800b8e0 <refrigera+0xdfc>)
 800b632:	2201      	movs	r2, #1
 800b634:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 800b636:	4bad      	ldr	r3, [pc, #692]	@ (800b8ec <refrigera+0xe08>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b0b      	cmp	r3, #11
 800b63c:	d864      	bhi.n	800b708 <refrigera+0xc24>
            	 	 goto on_desh;
 800b63e:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800b640:	4ba9      	ldr	r3, [pc, #676]	@ (800b8e8 <refrigera+0xe04>)
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 800b646:	49a6      	ldr	r1, [pc, #664]	@ (800b8e0 <refrigera+0xdfc>)
 800b648:	48a5      	ldr	r0, [pc, #660]	@ (800b8e0 <refrigera+0xdfc>)
 800b64a:	2302      	movs	r3, #2
 800b64c:	2203      	movs	r2, #3
 800b64e:	f002 f869 	bl	800d724 <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800b652:	4ba5      	ldr	r3, [pc, #660]	@ (800b8e8 <refrigera+0xe04>)
 800b654:	2201      	movs	r2, #1
 800b656:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 800b658:	4ba1      	ldr	r3, [pc, #644]	@ (800b8e0 <refrigera+0xdfc>)
 800b65a:	2201      	movs	r2, #1
 800b65c:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 800b65e:	4ba3      	ldr	r3, [pc, #652]	@ (800b8ec <refrigera+0xe08>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b09      	cmp	r3, #9
 800b664:	d852      	bhi.n	800b70c <refrigera+0xc28>
            		goto on_vent;//jrule on_vent
 800b666:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 800b668:	4b9f      	ldr	r3, [pc, #636]	@ (800b8e8 <refrigera+0xe04>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 800b66e:	499c      	ldr	r1, [pc, #624]	@ (800b8e0 <refrigera+0xdfc>)
 800b670:	489b      	ldr	r0, [pc, #620]	@ (800b8e0 <refrigera+0xdfc>)
 800b672:	2303      	movs	r3, #3
 800b674:	2207      	movs	r2, #7
 800b676:	f002 f855 	bl	800d724 <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 800b67a:	4b9d      	ldr	r3, [pc, #628]	@ (800b8f0 <refrigera+0xe0c>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 800b680:	4b9a      	ldr	r3, [pc, #616]	@ (800b8ec <refrigera+0xe08>)
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b07      	cmp	r3, #7
 800b686:	d843      	bhi.n	800b710 <refrigera+0xc2c>
					goto on_lamp; //jrule	on_lamp
 800b688:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 800b68a:	4b99      	ldr	r3, [pc, #612]	@ (800b8f0 <refrigera+0xe0c>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 800b690:	4993      	ldr	r1, [pc, #588]	@ (800b8e0 <refrigera+0xdfc>)
 800b692:	4893      	ldr	r0, [pc, #588]	@ (800b8e0 <refrigera+0xdfc>)
 800b694:	2307      	movs	r3, #7
 800b696:	2204      	movs	r2, #4
 800b698:	f002 f844 	bl	800d724 <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 800b69c:	4b92      	ldr	r3, [pc, #584]	@ (800b8e8 <refrigera+0xe04>)
 800b69e:	2201      	movs	r2, #1
 800b6a0:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 800b6a2:	4b92      	ldr	r3, [pc, #584]	@ (800b8ec <refrigera+0xe08>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	d834      	bhi.n	800b714 <refrigera+0xc30>
					goto dpy_volt; //jrule	dpy_volt
 800b6aa:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 800b6ac:	4b8e      	ldr	r3, [pc, #568]	@ (800b8e8 <refrigera+0xe04>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 800b6b2:	4b8b      	ldr	r3, [pc, #556]	@ (800b8e0 <refrigera+0xdfc>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 800b6b8:	4b87      	ldr	r3, [pc, #540]	@ (800b8d8 <refrigera+0xdf4>)
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	4b87      	ldr	r3, [pc, #540]	@ (800b8dc <refrigera+0xdf8>)
 800b6be:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b6c0:	4b86      	ldr	r3, [pc, #536]	@ (800b8dc <refrigera+0xdf8>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b63      	cmp	r3, #99	@ 0x63
 800b6c6:	d910      	bls.n	800b6ea <refrigera+0xc06>
				wreg = wreg - 100;
 800b6c8:	4b84      	ldr	r3, [pc, #528]	@ (800b8dc <refrigera+0xdf8>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	3b64      	subs	r3, #100	@ 0x64
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	4b82      	ldr	r3, [pc, #520]	@ (800b8dc <refrigera+0xdf8>)
 800b6d2:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b6d4:	4b81      	ldr	r3, [pc, #516]	@ (800b8dc <refrigera+0xdf8>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b63      	cmp	r3, #99	@ 0x63
 800b6da:	d908      	bls.n	800b6ee <refrigera+0xc0a>
				wreg = wreg - 100;
 800b6dc:	4b7f      	ldr	r3, [pc, #508]	@ (800b8dc <refrigera+0xdf8>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	3b64      	subs	r3, #100	@ 0x64
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	4b7d      	ldr	r3, [pc, #500]	@ (800b8dc <refrigera+0xdf8>)
 800b6e6:	701a      	strb	r2, [r3, #0]
 800b6e8:	e002      	b.n	800b6f0 <refrigera+0xc0c>
					goto under_100; //jrult	under_100
 800b6ea:	46c0      	nop			@ (mov r8, r8)
 800b6ec:	e000      	b.n	800b6f0 <refrigera+0xc0c>
					goto under_100;
 800b6ee:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800b6f0:	f7fb f916 	bl	8006920 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800b6f4:	4b7a      	ldr	r3, [pc, #488]	@ (800b8e0 <refrigera+0xdfc>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 800b6fa:	4b7a      	ldr	r3, [pc, #488]	@ (800b8e4 <refrigera+0xe00>)
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800b700:	4b78      	ldr	r3, [pc, #480]	@ (800b8e4 <refrigera+0xe00>)
 800b702:	2200      	movs	r2, #0
 800b704:	71da      	strb	r2, [r3, #7]
 800b706:	e006      	b.n	800b716 <refrigera+0xc32>
             	 goto defap;
 800b708:	46c0      	nop			@ (mov r8, r8)
 800b70a:	e004      	b.n	800b716 <refrigera+0xc32>
            	goto defap;
 800b70c:	46c0      	nop			@ (mov r8, r8)
 800b70e:	e002      	b.n	800b716 <refrigera+0xc32>
				goto defap;
 800b710:	46c0      	nop			@ (mov r8, r8)
 800b712:	e000      	b.n	800b716 <refrigera+0xc32>
				goto defap;
 800b714:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 800b716:	f7fb fe67 	bl	80073e8 <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 800b71a:	4b76      	ldr	r3, [pc, #472]	@ (800b8f4 <refrigera+0xe10>)
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	001a      	movs	r2, r3
 800b720:	2301      	movs	r3, #1
 800b722:	4013      	ands	r3, r2
 800b724:	d00c      	beq.n	800b740 <refrigera+0xc5c>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 800b726:	46c0      	nop			@ (mov r8, r8)
 800b728:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 800b72a:	4b73      	ldr	r3, [pc, #460]	@ (800b8f8 <refrigera+0xe14>)
 800b72c:	2201      	movs	r2, #1
 800b72e:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800b730:	4b72      	ldr	r3, [pc, #456]	@ (800b8fc <refrigera+0xe18>)
 800b732:	2202      	movs	r2, #2
 800b734:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 800b736:	4b72      	ldr	r3, [pc, #456]	@ (800b900 <refrigera+0xe1c>)
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 800b73c:	f7ff fbfd 	bl	800af3a <refrigera+0x456>
					goto finap;
 800b740:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800b742:	e460      	b.n	800b006 <refrigera+0x522>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800b744:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 800b746:	4b66      	ldr	r3, [pc, #408]	@ (800b8e0 <refrigera+0xdfc>)
 800b748:	2200      	movs	r2, #0
 800b74a:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 800b74c:	4b6d      	ldr	r3, [pc, #436]	@ (800b904 <refrigera+0xe20>)
 800b74e:	881b      	ldrh	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d000      	beq.n	800b756 <refrigera+0xc72>
 800b754:	e060      	b.n	800b818 <refrigera+0xd34>
					goto ask_door_fan; //jreq ask_door_fan
 800b756:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b758:	4b6b      	ldr	r3, [pc, #428]	@ (800b908 <refrigera+0xe24>)
 800b75a:	225b      	movs	r2, #91	@ 0x5b
 800b75c:	5c9b      	ldrb	r3, [r3, r2]
 800b75e:	001a      	movs	r2, r3
 800b760:	2302      	movs	r3, #2
 800b762:	4013      	ands	r3, r2
 800b764:	d108      	bne.n	800b778 <refrigera+0xc94>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 800b766:	4b69      	ldr	r3, [pc, #420]	@ (800b90c <refrigera+0xe28>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d006      	beq.n	800b77c <refrigera+0xc98>
               if(retvent == 0){ //tnz retvent
 800b76e:	4b68      	ldr	r3, [pc, #416]	@ (800b910 <refrigera+0xe2c>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d152      	bne.n	800b81c <refrigera+0xd38>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 800b776:	e002      	b.n	800b77e <refrigera+0xc9a>
            	   goto ask_fan_on;
 800b778:	46c0      	nop			@ (mov r8, r8)
 800b77a:	e000      	b.n	800b77e <refrigera+0xc9a>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 800b77c:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 800b77e:	4b65      	ldr	r3, [pc, #404]	@ (800b914 <refrigera+0xe30>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2201      	movs	r2, #1
 800b784:	4053      	eors	r3, r2
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d104      	bne.n	800b796 <refrigera+0xcb2>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 800b78c:	4b62      	ldr	r3, [pc, #392]	@ (800b918 <refrigera+0xe34>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d033      	beq.n	800b7fc <refrigera+0xd18>
					goto fan_off; //jrne fan_off
 800b794:	e047      	b.n	800b826 <refrigera+0xd42>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b796:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 800b798:	4b5b      	ldr	r3, [pc, #364]	@ (800b908 <refrigera+0xe24>)
 800b79a:	2268      	movs	r2, #104	@ 0x68
 800b79c:	5c9a      	ldrb	r2, [r3, r2]
 800b79e:	4b4f      	ldr	r3, [pc, #316]	@ (800b8dc <refrigera+0xdf8>)
 800b7a0:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 800b7a2:	f7fb f8d1 	bl	8006948 <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 800b7a6:	4b5d      	ldr	r3, [pc, #372]	@ (800b91c <refrigera+0xe38>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d038      	beq.n	800b820 <refrigera+0xd3c>
					goto ciclof_00;					// No, pregunta por parte baja
 800b7ae:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 800b7b0:	4b4a      	ldr	r3, [pc, #296]	@ (800b8dc <refrigera+0xdf8>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d023      	beq.n	800b800 <refrigera+0xd1c>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 800b7b8:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b7ba:	4b56      	ldr	r3, [pc, #344]	@ (800b914 <refrigera+0xe30>)
 800b7bc:	78db      	ldrb	r3, [r3, #3]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4053      	eors	r3, r2
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00e      	beq.n	800b7e6 <refrigera+0xd02>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b7c8:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 800b7ca:	4b55      	ldr	r3, [pc, #340]	@ (800b920 <refrigera+0xe3c>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d128      	bne.n	800b824 <refrigera+0xd40>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 800b7d2:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 800b7d4:	4b53      	ldr	r3, [pc, #332]	@ (800b924 <refrigera+0xe40>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d113      	bne.n	800b804 <refrigera+0xd20>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 800b7dc:	4b4f      	ldr	r3, [pc, #316]	@ (800b91c <refrigera+0xe38>)
 800b7de:	781a      	ldrb	r2, [r3, #0]
 800b7e0:	4b50      	ldr	r3, [pc, #320]	@ (800b924 <refrigera+0xe40>)
 800b7e2:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800b7e4:	e011      	b.n	800b80a <refrigera+0xd26>
				goto ciclo_on;					/// Si, ciclo de encendido
 800b7e6:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 800b7e8:	4b4e      	ldr	r3, [pc, #312]	@ (800b924 <refrigera+0xe40>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10b      	bne.n	800b808 <refrigera+0xd24>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800b7f0:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800b7f2:	4b3a      	ldr	r3, [pc, #232]	@ (800b8dc <refrigera+0xdf8>)
 800b7f4:	781a      	ldrb	r2, [r3, #0]
 800b7f6:	4b4a      	ldr	r3, [pc, #296]	@ (800b920 <refrigera+0xe3c>)
 800b7f8:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 800b7fa:	e014      	b.n	800b826 <refrigera+0xd42>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 800b7fc:	46c0      	nop			@ (mov r8, r8)
 800b7fe:	e004      	b.n	800b80a <refrigera+0xd26>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800b800:	46c0      	nop			@ (mov r8, r8)
 800b802:	e002      	b.n	800b80a <refrigera+0xd26>
					goto fan_on; //jrne fan_on
 800b804:	46c0      	nop			@ (mov r8, r8)
 800b806:	e000      	b.n	800b80a <refrigera+0xd26>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 800b808:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 800b80a:	4b39      	ldr	r3, [pc, #228]	@ (800b8f0 <refrigera+0xe0c>)
 800b80c:	2201      	movs	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800b810:	4b33      	ldr	r3, [pc, #204]	@ (800b8e0 <refrigera+0xdfc>)
 800b812:	2201      	movs	r2, #1
 800b814:	71da      	strb	r2, [r3, #7]
 800b816:	e006      	b.n	800b826 <refrigera+0xd42>
				goto fan_off;
 800b818:	46c0      	nop			@ (mov r8, r8)
 800b81a:	e004      	b.n	800b826 <refrigera+0xd42>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 800b81c:	46c0      	nop			@ (mov r8, r8)
 800b81e:	e002      	b.n	800b826 <refrigera+0xd42>
				goto fan_off;							// Si, manten apagado el ventilador
 800b820:	46c0      	nop			@ (mov r8, r8)
 800b822:	e000      	b.n	800b826 <refrigera+0xd42>
				goto fan_off;						// No, manten apagado el ventilador
 800b824:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 800b826:	4b40      	ldr	r3, [pc, #256]	@ (800b928 <refrigera+0xe44>)
 800b828:	881a      	ldrh	r2, [r3, #0]
 800b82a:	4b40      	ldr	r3, [pc, #256]	@ (800b92c <refrigera+0xe48>)
 800b82c:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800b82e:	4b40      	ldr	r3, [pc, #256]	@ (800b930 <refrigera+0xe4c>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d107      	bne.n	800b846 <refrigera+0xd62>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 800b836:	4b3e      	ldr	r3, [pc, #248]	@ (800b930 <refrigera+0xe4c>)
 800b838:	785b      	ldrb	r3, [r3, #1]
 800b83a:	2201      	movs	r2, #1
 800b83c:	4053      	eors	r3, r2
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	d103      	bne.n	800b84c <refrigera+0xd68>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 800b844:	e000      	b.n	800b848 <refrigera+0xd64>
            	   goto control_j02;
 800b846:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 800b848:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 800b84a:	e029      	b.n	800b8a0 <refrigera+0xdbc>
            	   goto control_j03;
 800b84c:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800b84e:	4b39      	ldr	r3, [pc, #228]	@ (800b934 <refrigera+0xe50>)
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d13a      	bne.n	800b8cc <refrigera+0xde8>
ctl13:
 800b856:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 800b858:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 800b85a:	f7fa fe13 	bl	8006484 <tdev_to_Word>
 800b85e:	0003      	movs	r3, r0
 800b860:	b21a      	sxth	r2, r3
 800b862:	4b35      	ldr	r3, [pc, #212]	@ (800b938 <refrigera+0xe54>)
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	b21b      	sxth	r3, r3
 800b868:	429a      	cmp	r2, r3
 800b86a:	db09      	blt.n	800b880 <refrigera+0xd9c>
ctl15:			//	ld			A,tminstopl;
 800b86c:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800b86e:	4b33      	ldr	r3, [pc, #204]	@ (800b93c <refrigera+0xe58>)
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d12c      	bne.n	800b8d0 <refrigera+0xdec>
				if(drp_comph != 0){
 800b876:	4b32      	ldr	r3, [pc, #200]	@ (800b940 <refrigera+0xe5c>)
 800b878:	881b      	ldrh	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d01e      	beq.n	800b8bc <refrigera+0xdd8>
					goto defctl;
 800b87e:	e066      	b.n	800b94e <refrigera+0xe6a>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 800b880:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 800b882:	f7fa fdff 	bl	8006484 <tdev_to_Word>
 800b886:	0003      	movs	r3, r0
 800b888:	b21a      	sxth	r2, r3
 800b88a:	4b2e      	ldr	r3, [pc, #184]	@ (800b944 <refrigera+0xe60>)
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	b21b      	sxth	r3, r3
 800b890:	429a      	cmp	r2, r3
 800b892:	dc0d      	bgt.n	800b8b0 <refrigera+0xdcc>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 800b894:	4912      	ldr	r1, [pc, #72]	@ (800b8e0 <refrigera+0xdfc>)
 800b896:	482c      	ldr	r0, [pc, #176]	@ (800b948 <refrigera+0xe64>)
 800b898:	2306      	movs	r3, #6
 800b89a:	2207      	movs	r2, #7
 800b89c:	f001 ff42 	bl	800d724 <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b914 <refrigera+0xe30>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d015      	beq.n	800b8d4 <refrigera+0xdf0>
					goto control_j04;
 800b8a8:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 800b8aa:	f7fa fea5 	bl	80065f8 <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 800b8ae:	e04e      	b.n	800b94e <refrigera+0xe6a>
					goto equal;
 800b8b0:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b8b2:	4b18      	ldr	r3, [pc, #96]	@ (800b914 <refrigera+0xe30>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d048      	beq.n	800b94c <refrigera+0xe68>
					goto control_j05;
 800b8ba:	e000      	b.n	800b8be <refrigera+0xdda>
				goto on_comp;						// Enciende el compresor
 800b8bc:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 800b8be:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e8 <refrigera+0xe04>)
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 800b8c4:	4b06      	ldr	r3, [pc, #24]	@ (800b8e0 <refrigera+0xdfc>)
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	709a      	strb	r2, [r3, #2]
				goto defctl;
 800b8ca:	e040      	b.n	800b94e <refrigera+0xe6a>
             		 goto defctl;
 800b8cc:	46c0      	nop			@ (mov r8, r8)
 800b8ce:	e03e      	b.n	800b94e <refrigera+0xe6a>
					goto defctl;					// No, espera
 800b8d0:	46c0      	nop			@ (mov r8, r8)
 800b8d2:	e03c      	b.n	800b94e <refrigera+0xe6a>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 800b8d4:	46c0      	nop			@ (mov r8, r8)
 800b8d6:	e03a      	b.n	800b94e <refrigera+0xe6a>
 800b8d8:	20000bde 	.word	0x20000bde
 800b8dc:	20000b67 	.word	0x20000b67
 800b8e0:	20000ba0 	.word	0x20000ba0
 800b8e4:	20000be8 	.word	0x20000be8
 800b8e8:	20000bb4 	.word	0x20000bb4
 800b8ec:	20000b7c 	.word	0x20000b7c
 800b8f0:	20000bf0 	.word	0x20000bf0
 800b8f4:	20000b64 	.word	0x20000b64
 800b8f8:	20000b88 	.word	0x20000b88
 800b8fc:	20000b5f 	.word	0x20000b5f
 800b900:	20000ba8 	.word	0x20000ba8
 800b904:	20000c0c 	.word	0x20000c0c
 800b908:	200000b8 	.word	0x200000b8
 800b90c:	20000c37 	.word	0x20000c37
 800b910:	20000b7a 	.word	0x20000b7a
 800b914:	20000b68 	.word	0x20000b68
 800b918:	20000b84 	.word	0x20000b84
 800b91c:	20000b66 	.word	0x20000b66
 800b920:	20000c09 	.word	0x20000c09
 800b924:	20000c08 	.word	0x20000c08
 800b928:	20000bc6 	.word	0x20000bc6
 800b92c:	20000bca 	.word	0x20000bca
 800b930:	20000b98 	.word	0x20000b98
 800b934:	20000b90 	.word	0x20000b90
 800b938:	20000bbe 	.word	0x20000bbe
 800b93c:	20000b72 	.word	0x20000b72
 800b940:	20000c0a 	.word	0x20000c0a
 800b944:	20000bbc 	.word	0x20000bbc
 800b948:	20000c4c 	.word	0x20000c4c
        		goto defctl;
 800b94c:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 800b94e:	4bbe      	ldr	r3, [pc, #760]	@ (800bc48 <refrigera+0x1164>)
 800b950:	224d      	movs	r2, #77	@ 0x4d
 800b952:	2100      	movs	r1, #0
 800b954:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800b956:	4bbc      	ldr	r3, [pc, #752]	@ (800bc48 <refrigera+0x1164>)
 800b958:	224d      	movs	r2, #77	@ 0x4d
 800b95a:	5c9b      	ldrb	r3, [r3, r2]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d100      	bne.n	800b962 <refrigera+0xe7e>
 800b960:	e0a4      	b.n	800baac <refrigera+0xfc8>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b962:	4bba      	ldr	r3, [pc, #744]	@ (800bc4c <refrigera+0x1168>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d120      	bne.n	800b9ac <refrigera+0xec8>
				STM8_16_X = Plantilla[timeDefi] *60;
 800b96a:	4bb7      	ldr	r3, [pc, #732]	@ (800bc48 <refrigera+0x1164>)
 800b96c:	224d      	movs	r2, #77	@ 0x4d
 800b96e:	5c9b      	ldrb	r3, [r3, r2]
 800b970:	001a      	movs	r2, r3
 800b972:	233c      	movs	r3, #60	@ 0x3c
 800b974:	4353      	muls	r3, r2
 800b976:	b29a      	uxth	r2, r3
 800b978:	4bb5      	ldr	r3, [pc, #724]	@ (800bc50 <refrigera+0x116c>)
 800b97a:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 800b97c:	4bb4      	ldr	r3, [pc, #720]	@ (800bc50 <refrigera+0x116c>)
 800b97e:	881a      	ldrh	r2, [r3, #0]
 800b980:	4bb4      	ldr	r3, [pc, #720]	@ (800bc54 <refrigera+0x1170>)
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	429a      	cmp	r2, r3
 800b986:	d005      	beq.n	800b994 <refrigera+0xeb0>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 800b988:	4baf      	ldr	r3, [pc, #700]	@ (800bc48 <refrigera+0x1164>)
 800b98a:	2259      	movs	r2, #89	@ 0x59
 800b98c:	5c9b      	ldrb	r3, [r3, r2]
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d134      	bne.n	800b9fc <refrigera+0xf18>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800b992:	e05c      	b.n	800ba4e <refrigera+0xf6a>
					goto loadDefiCnts;
 800b994:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 800b996:	4bae      	ldr	r3, [pc, #696]	@ (800bc50 <refrigera+0x116c>)
 800b998:	881a      	ldrh	r2, [r3, #0]
 800b99a:	4bae      	ldr	r3, [pc, #696]	@ (800bc54 <refrigera+0x1170>)
 800b99c:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 800b99e:	4bac      	ldr	r3, [pc, #688]	@ (800bc50 <refrigera+0x116c>)
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	4bac      	ldr	r3, [pc, #688]	@ (800bc58 <refrigera+0x1174>)
 800b9a8:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 800b9aa:	e084      	b.n	800bab6 <refrigera+0xfd2>
					goto chkTimeDefi;
 800b9ac:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 800b9ae:	4ba6      	ldr	r3, [pc, #664]	@ (800bc48 <refrigera+0x1164>)
 800b9b0:	2259      	movs	r2, #89	@ 0x59
 800b9b2:	5c9b      	ldrb	r3, [r3, r2]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d03c      	beq.n	800ba32 <refrigera+0xf4e>
chkTimeDefi_1s:
 800b9b8:	46c0      	nop			@ (mov r8, r8)
 800b9ba:	e002      	b.n	800b9c2 <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800b9bc:	46c0      	nop			@ (mov r8, r8)
 800b9be:	e000      	b.n	800b9c2 <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800b9c0:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800b9c2:	4ba6      	ldr	r3, [pc, #664]	@ (800bc5c <refrigera+0x1178>)
 800b9c4:	791b      	ldrb	r3, [r3, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d000      	beq.n	800b9cc <refrigera+0xee8>
 800b9ca:	e066      	b.n	800ba9a <refrigera+0xfb6>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 800b9cc:	4ba3      	ldr	r3, [pc, #652]	@ (800bc5c <refrigera+0x1178>)
 800b9ce:	795b      	ldrb	r3, [r3, #5]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d000      	beq.n	800b9d6 <refrigera+0xef2>
 800b9d4:	e063      	b.n	800ba9e <refrigera+0xfba>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800b9d6:	4b9f      	ldr	r3, [pc, #636]	@ (800bc54 <refrigera+0x1170>)
 800b9d8:	881a      	ldrh	r2, [r3, #0]
 800b9da:	4b9f      	ldr	r3, [pc, #636]	@ (800bc58 <refrigera+0x1174>)
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d106      	bne.n	800b9f0 <refrigera+0xf0c>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800b9e2:	f7fa fd4f 	bl	8006484 <tdev_to_Word>
 800b9e6:	0003      	movs	r3, r0
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	4b9d      	ldr	r3, [pc, #628]	@ (800bc60 <refrigera+0x117c>)
 800b9ec:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800b9ee:	e062      	b.n	800bab6 <refrigera+0xfd2>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800b9f0:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800b9f2:	4b98      	ldr	r3, [pc, #608]	@ (800bc54 <refrigera+0x1170>)
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d15a      	bne.n	800bab0 <refrigera+0xfcc>
chkTimeDefi_1s_02:
 800b9fa:	e000      	b.n	800b9fe <refrigera+0xf1a>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 800b9fc:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800b9fe:	4b98      	ldr	r3, [pc, #608]	@ (800bc60 <refrigera+0x117c>)
 800ba00:	881a      	ldrh	r2, [r3, #0]
 800ba02:	4b93      	ldr	r3, [pc, #588]	@ (800bc50 <refrigera+0x116c>)
 800ba04:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800ba06:	4b92      	ldr	r3, [pc, #584]	@ (800bc50 <refrigera+0x116c>)
 800ba08:	881c      	ldrh	r4, [r3, #0]
 800ba0a:	f7fa fd3b 	bl	8006484 <tdev_to_Word>
 800ba0e:	0003      	movs	r3, r0
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	1ae3      	subs	r3, r4, r3
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	4b8e      	ldr	r3, [pc, #568]	@ (800bc50 <refrigera+0x116c>)
 800ba18:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800ba1a:	4b92      	ldr	r3, [pc, #584]	@ (800bc64 <refrigera+0x1180>)
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	f7fa fd49 	bl	80064b4 <TwoByteInArrayToWord>
 800ba22:	0003      	movs	r3, r0
 800ba24:	b21a      	sxth	r2, r3
 800ba26:	4b8a      	ldr	r3, [pc, #552]	@ (800bc50 <refrigera+0x116c>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b21b      	sxth	r3, r3
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	dc28      	bgt.n	800ba82 <refrigera+0xf9e>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800ba30:	e038      	b.n	800baa4 <refrigera+0xfc0>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800ba32:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 800ba34:	4b89      	ldr	r3, [pc, #548]	@ (800bc5c <refrigera+0x1178>)
 800ba36:	791b      	ldrb	r3, [r3, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1bf      	bne.n	800b9bc <refrigera+0xed8>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 800ba3c:	4b87      	ldr	r3, [pc, #540]	@ (800bc5c <refrigera+0x1178>)
 800ba3e:	795b      	ldrb	r3, [r3, #5]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1bd      	bne.n	800b9c0 <refrigera+0xedc>
                   if(cntDefi_H != 1){ //cpw X,#1
 800ba44:	4b83      	ldr	r3, [pc, #524]	@ (800bc54 <refrigera+0x1170>)
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d133      	bne.n	800bab4 <refrigera+0xfd0>
chkTimeDefi_3s_01:
 800ba4c:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800ba4e:	f7fa fd19 	bl	8006484 <tdev_to_Word>
 800ba52:	0003      	movs	r3, r0
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	4b7e      	ldr	r3, [pc, #504]	@ (800bc50 <refrigera+0x116c>)
 800ba58:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 800ba5a:	4b7d      	ldr	r3, [pc, #500]	@ (800bc50 <refrigera+0x116c>)
 800ba5c:	881a      	ldrh	r2, [r3, #0]
 800ba5e:	4b82      	ldr	r3, [pc, #520]	@ (800bc68 <refrigera+0x1184>)
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	4b7a      	ldr	r3, [pc, #488]	@ (800bc50 <refrigera+0x116c>)
 800ba68:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800ba6a:	4b7e      	ldr	r3, [pc, #504]	@ (800bc64 <refrigera+0x1180>)
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f7fa fd21 	bl	80064b4 <TwoByteInArrayToWord>
 800ba72:	0003      	movs	r3, r0
 800ba74:	b21a      	sxth	r2, r3
 800ba76:	4b76      	ldr	r3, [pc, #472]	@ (800bc50 <refrigera+0x116c>)
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	b21b      	sxth	r3, r3
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	dd10      	ble.n	800baa2 <refrigera+0xfbe>
alarmDefi:
 800ba80:	e000      	b.n	800ba84 <refrigera+0xfa0>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 800ba82:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 800ba84:	4b75      	ldr	r3, [pc, #468]	@ (800bc5c <refrigera+0x1178>)
 800ba86:	2201      	movs	r2, #1
 800ba88:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 800ba8a:	4b78      	ldr	r3, [pc, #480]	@ (800bc6c <refrigera+0x1188>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	801a      	strh	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 800ba90:	4b76      	ldr	r3, [pc, #472]	@ (800bc6c <refrigera+0x1188>)
 800ba92:	881a      	ldrh	r2, [r3, #0]
 800ba94:	4b76      	ldr	r3, [pc, #472]	@ (800bc70 <refrigera+0x118c>)
 800ba96:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 800ba98:	e00d      	b.n	800bab6 <refrigera+0xfd2>
                	  goto noAlarmDefi;
 800ba9a:	46c0      	nop			@ (mov r8, r8)
 800ba9c:	e002      	b.n	800baa4 <refrigera+0xfc0>
                	  goto noAlarmDefi;
 800ba9e:	46c0      	nop			@ (mov r8, r8)
 800baa0:	e000      	b.n	800baa4 <refrigera+0xfc0>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800baa2:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800baa4:	4b6d      	ldr	r3, [pc, #436]	@ (800bc5c <refrigera+0x1178>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	719a      	strb	r2, [r3, #6]
 800baaa:	e004      	b.n	800bab6 <refrigera+0xfd2>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 800baac:	46c0      	nop			@ (mov r8, r8)
 800baae:	e002      	b.n	800bab6 <refrigera+0xfd2>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800bab0:	46c0      	nop			@ (mov r8, r8)
 800bab2:	e000      	b.n	800bab6 <refrigera+0xfd2>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800bab4:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 800bab6:	f7fa fce5 	bl	8006484 <tdev_to_Word>
 800baba:	0003      	movs	r3, r0
 800babc:	b29a      	uxth	r2, r3
 800babe:	4b64      	ldr	r3, [pc, #400]	@ (800bc50 <refrigera+0x116c>)
 800bac0:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800bac2:	4b6c      	ldr	r3, [pc, #432]	@ (800bc74 <refrigera+0x1190>)
 800bac4:	0018      	movs	r0, r3
 800bac6:	f7fa fcf5 	bl	80064b4 <TwoByteInArrayToWord>
 800baca:	0003      	movs	r3, r0
 800bacc:	b21a      	sxth	r2, r3
 800bace:	4b60      	ldr	r3, [pc, #384]	@ (800bc50 <refrigera+0x116c>)
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	b21b      	sxth	r3, r3
 800bad4:	429a      	cmp	r2, r3
 800bad6:	dc02      	bgt.n	800bade <refrigera+0xffa>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 800bad8:	f7fa fd1c 	bl	8006514 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800badc:	e058      	b.n	800bb90 <refrigera+0x10ac>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800bade:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800bae0:	4b59      	ldr	r3, [pc, #356]	@ (800bc48 <refrigera+0x1164>)
 800bae2:	2259      	movs	r2, #89	@ 0x59
 800bae4:	5c9b      	ldrb	r3, [r3, r2]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d03c      	beq.n	800bb64 <refrigera+0x1080>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800baea:	4b63      	ldr	r3, [pc, #396]	@ (800bc78 <refrigera+0x1194>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	4a62      	ldr	r2, [pc, #392]	@ (800bc7c <refrigera+0x1198>)
 800baf4:	7812      	ldrb	r2, [r2, #0]
 800baf6:	189b      	adds	r3, r3, r2
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	4b55      	ldr	r3, [pc, #340]	@ (800bc50 <refrigera+0x116c>)
 800bafc:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800bafe:	4b60      	ldr	r3, [pc, #384]	@ (800bc80 <refrigera+0x119c>)
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d130      	bne.n	800bb68 <refrigera+0x1084>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 800bb06:	4b5e      	ldr	r3, [pc, #376]	@ (800bc80 <refrigera+0x119c>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d12e      	bne.n	800bb6c <refrigera+0x1088>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800bb0e:	4b5d      	ldr	r3, [pc, #372]	@ (800bc84 <refrigera+0x11a0>)
 800bb10:	0018      	movs	r0, r3
 800bb12:	f7fa fccf 	bl	80064b4 <TwoByteInArrayToWord>
 800bb16:	0003      	movs	r3, r0
 800bb18:	b21a      	sxth	r2, r3
 800bb1a:	4b4d      	ldr	r3, [pc, #308]	@ (800bc50 <refrigera+0x116c>)
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	b21b      	sxth	r3, r3
 800bb20:	429a      	cmp	r2, r3
 800bb22:	dd25      	ble.n	800bb70 <refrigera+0x108c>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800bb24:	4b58      	ldr	r3, [pc, #352]	@ (800bc88 <refrigera+0x11a4>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	021b      	lsls	r3, r3, #8
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	4a57      	ldr	r2, [pc, #348]	@ (800bc8c <refrigera+0x11a8>)
 800bb2e:	7812      	ldrb	r2, [r2, #0]
 800bb30:	189b      	adds	r3, r3, r2
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	4b46      	ldr	r3, [pc, #280]	@ (800bc50 <refrigera+0x116c>)
 800bb36:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 800bb38:	4b51      	ldr	r3, [pc, #324]	@ (800bc80 <refrigera+0x119c>)
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d119      	bne.n	800bb74 <refrigera+0x1090>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800bb40:	4b4f      	ldr	r3, [pc, #316]	@ (800bc80 <refrigera+0x119c>)
 800bb42:	789b      	ldrb	r3, [r3, #2]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d117      	bne.n	800bb78 <refrigera+0x1094>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 800bb48:	4b51      	ldr	r3, [pc, #324]	@ (800bc90 <refrigera+0x11ac>)
 800bb4a:	0018      	movs	r0, r3
 800bb4c:	f7fa fcb2 	bl	80064b4 <TwoByteInArrayToWord>
 800bb50:	0003      	movs	r3, r0
 800bb52:	b21a      	sxth	r2, r3
 800bb54:	4b3e      	ldr	r3, [pc, #248]	@ (800bc50 <refrigera+0x116c>)
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	dd01      	ble.n	800bb62 <refrigera+0x107e>
 800bb5e:	f7ff fa18 	bl	800af92 <refrigera+0x4ae>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 800bb62:	e00a      	b.n	800bb7a <refrigera+0x1096>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 800bb64:	46c0      	nop			@ (mov r8, r8)
 800bb66:	e008      	b.n	800bb7a <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb68:	46c0      	nop			@ (mov r8, r8)
 800bb6a:	e006      	b.n	800bb7a <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb6c:	46c0      	nop			@ (mov r8, r8)
 800bb6e:	e004      	b.n	800bb7a <refrigera+0x1096>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 800bb70:	46c0      	nop			@ (mov r8, r8)
 800bb72:	e002      	b.n	800bb7a <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb74:	46c0      	nop			@ (mov r8, r8)
 800bb76:	e000      	b.n	800bb7a <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bb78:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 800bb7a:	f7fb fc35 	bl	80073e8 <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 800bb7e:	4b45      	ldr	r3, [pc, #276]	@ (800bc94 <refrigera+0x11b0>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	001a      	movs	r2, r3
 800bb84:	2301      	movs	r3, #1
 800bb86:	4013      	ands	r3, r2
 800bb88:	d001      	beq.n	800bb8e <refrigera+0x10aa>
 800bb8a:	f7ff fa04 	bl	800af96 <refrigera+0x4b2>
            	   goto control_j06;
 800bb8e:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800bb90:	4b41      	ldr	r3, [pc, #260]	@ (800bc98 <refrigera+0x11b4>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d108      	bne.n	800bbaa <refrigera+0x10c6>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 800bb98:	4b40      	ldr	r3, [pc, #256]	@ (800bc9c <refrigera+0x11b8>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d007      	beq.n	800bbb0 <refrigera+0x10cc>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800bba0:	4b3e      	ldr	r3, [pc, #248]	@ (800bc9c <refrigera+0x11b8>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 800bba6:	f7ff f9f7 	bl	800af98 <refrigera+0x4b4>
					goto finctl; //jrne	finctl;
 800bbaa:	46c0      	nop			@ (mov r8, r8)
 800bbac:	f7ff fa2b 	bl	800b006 <refrigera+0x522>
            		goto control_j07;
 800bbb0:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800bbb2:	f7ff fa28 	bl	800b006 <refrigera+0x522>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 800bbb6:	4b24      	ldr	r3, [pc, #144]	@ (800bc48 <refrigera+0x1164>)
 800bbb8:	2255      	movs	r2, #85	@ 0x55
 800bbba:	5c9b      	ldrb	r3, [r3, r2]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d103      	bne.n	800bbc8 <refrigera+0x10e4>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800bbc0:	4b37      	ldr	r3, [pc, #220]	@ (800bca0 <refrigera+0x11bc>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	e000      	b.n	800bbca <refrigera+0x10e6>
					goto deshie20;				/// No
 800bbc8:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 800bbca:	4b1f      	ldr	r3, [pc, #124]	@ (800bc48 <refrigera+0x1164>)
 800bbcc:	2255      	movs	r2, #85	@ 0x55
 800bbce:	5c9b      	ldrb	r3, [r3, r2]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d114      	bne.n	800bbfe <refrigera+0x111a>
deshXvent:
 800bbd4:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800bbd6:	4b1c      	ldr	r3, [pc, #112]	@ (800bc48 <refrigera+0x1164>)
 800bbd8:	225b      	movs	r2, #91	@ 0x5b
 800bbda:	5c9b      	ldrb	r3, [r3, r2]
 800bbdc:	001a      	movs	r2, r3
 800bbde:	2302      	movs	r3, #2
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	d104      	bne.n	800bbee <refrigera+0x110a>
				if(retvent != 0){ //tnz retvent
 800bbe4:	4b2f      	ldr	r3, [pc, #188]	@ (800bca4 <refrigera+0x11c0>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10d      	bne.n	800bc08 <refrigera+0x1124>
deshie24:
 800bbec:	e000      	b.n	800bbf0 <refrigera+0x110c>
					goto deshie24;
 800bbee:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800bbf0:	4b2d      	ldr	r3, [pc, #180]	@ (800bca8 <refrigera+0x11c4>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 800bbf6:	4b2d      	ldr	r3, [pc, #180]	@ (800bcac <refrigera+0x11c8>)
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 800bbfc:	e005      	b.n	800bc0a <refrigera+0x1126>
					goto deshie25;				//;		/ No, acciona el deshielo
 800bbfe:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800bc00:	4b27      	ldr	r3, [pc, #156]	@ (800bca0 <refrigera+0x11bc>)
 800bc02:	2201      	movs	r2, #1
 800bc04:	705a      	strb	r2, [r3, #1]
 800bc06:	e000      	b.n	800bc0a <refrigera+0x1126>
					goto deshie30; //jrne		deshie30;		/ No, espera
 800bc08:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 800bc0a:	4b29      	ldr	r3, [pc, #164]	@ (800bcb0 <refrigera+0x11cc>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800bc10:	4b0d      	ldr	r3, [pc, #52]	@ (800bc48 <refrigera+0x1164>)
 800bc12:	224c      	movs	r2, #76	@ 0x4c
 800bc14:	5c9a      	ldrb	r2, [r3, r2]
 800bc16:	4b27      	ldr	r3, [pc, #156]	@ (800bcb4 <refrigera+0x11d0>)
 800bc18:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 800bc1a:	4b27      	ldr	r3, [pc, #156]	@ (800bcb8 <refrigera+0x11d4>)
 800bc1c:	881a      	ldrh	r2, [r3, #0]
 800bc1e:	4b14      	ldr	r3, [pc, #80]	@ (800bc70 <refrigera+0x118c>)
 800bc20:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800bc22:	f7fb fbe1 	bl	80073e8 <buildmode>
				 if((0x13 & modo ) == 0){
 800bc26:	4b1b      	ldr	r3, [pc, #108]	@ (800bc94 <refrigera+0x11b0>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2213      	movs	r2, #19
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <refrigera+0x1154>
 800bc34:	f7ff f985 	bl	800af42 <refrigera+0x45e>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 800bc38:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 800bc3a:	46c0      	nop			@ (mov r8, r8)
 800bc3c:	f7ff f9e3 	bl	800b006 <refrigera+0x522>


main_refrigera:


}
 800bc40:	46c0      	nop			@ (mov r8, r8)
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b007      	add	sp, #28
 800bc46:	bd90      	pop	{r4, r7, pc}
 800bc48:	200000b8 	.word	0x200000b8
 800bc4c:	20000b68 	.word	0x20000b68
 800bc50:	200008e6 	.word	0x200008e6
 800bc54:	20000c46 	.word	0x20000c46
 800bc58:	20000c4a 	.word	0x20000c4a
 800bc5c:	20000b90 	.word	0x20000b90
 800bc60:	20000c48 	.word	0x20000c48
 800bc64:	200000eb 	.word	0x200000eb
 800bc68:	20000c64 	.word	0x20000c64
 800bc6c:	20000bc6 	.word	0x20000bc6
 800bc70:	20000bca 	.word	0x20000bca
 800bc74:	200000cb 	.word	0x200000cb
 800bc78:	20000bc0 	.word	0x20000bc0
 800bc7c:	20000bc1 	.word	0x20000bc1
 800bc80:	20000b98 	.word	0x20000b98
 800bc84:	200000cf 	.word	0x200000cf
 800bc88:	20000bc2 	.word	0x20000bc2
 800bc8c:	20000bc3 	.word	0x20000bc3
 800bc90:	200000cd 	.word	0x200000cd
 800bc94:	20000b64 	.word	0x20000b64
 800bc98:	20000b7b 	.word	0x20000b7b
 800bc9c:	20000c60 	.word	0x20000c60
 800bca0:	20000bb4 	.word	0x20000bb4
 800bca4:	20000b7a 	.word	0x20000b7a
 800bca8:	20000bf0 	.word	0x20000bf0
 800bcac:	20000ba0 	.word	0x20000ba0
 800bcb0:	20000b65 	.word	0x20000b65
 800bcb4:	20000bd7 	.word	0x20000bd7
 800bcb8:	20000bc8 	.word	0x20000bc8

0800bcbc <st_refri>:

void st_refri (void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <st_refri+0x30>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800bcc6:	4b09      	ldr	r3, [pc, #36]	@ (800bcec <st_refri+0x30>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 800bccc:	4b07      	ldr	r3, [pc, #28]	@ (800bcec <st_refri+0x30>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800bcd2:	4b07      	ldr	r3, [pc, #28]	@ (800bcf0 <st_refri+0x34>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 800bcd8:	f7fa fc8e 	bl	80065f8 <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 800bcdc:	4b05      	ldr	r3, [pc, #20]	@ (800bcf4 <st_refri+0x38>)
 800bcde:	2202      	movs	r2, #2
 800bce0:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800bce2:	f7fa fc17 	bl	8006514 <ldadaptivo>
}
 800bce6:	46c0      	nop			@ (mov r8, r8)
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20000bb4 	.word	0x20000bb4
 800bcf0:	20000bf0 	.word	0x20000bf0
 800bcf4:	20000ba8 	.word	0x20000ba8

0800bcf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800bcfe:	4b0f      	ldr	r3, [pc, #60]	@ (800bd3c <HAL_MspInit+0x44>)
 800bd00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd02:	4b0e      	ldr	r3, [pc, #56]	@ (800bd3c <HAL_MspInit+0x44>)
 800bd04:	2180      	movs	r1, #128	@ 0x80
 800bd06:	0549      	lsls	r1, r1, #21
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <HAL_MspInit+0x44>)
 800bd0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd10:	2380      	movs	r3, #128	@ 0x80
 800bd12:	055b      	lsls	r3, r3, #21
 800bd14:	4013      	ands	r3, r2
 800bd16:	607b      	str	r3, [r7, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd1a:	4b08      	ldr	r3, [pc, #32]	@ (800bd3c <HAL_MspInit+0x44>)
 800bd1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bd1e:	4b07      	ldr	r3, [pc, #28]	@ (800bd3c <HAL_MspInit+0x44>)
 800bd20:	2101      	movs	r1, #1
 800bd22:	430a      	orrs	r2, r1
 800bd24:	661a      	str	r2, [r3, #96]	@ 0x60
 800bd26:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <HAL_MspInit+0x44>)
 800bd28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	603b      	str	r3, [r7, #0]
 800bd30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd32:	46c0      	nop			@ (mov r8, r8)
 800bd34:	46bd      	mov	sp, r7
 800bd36:	b002      	add	sp, #8
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	40021000 	.word	0x40021000

0800bd40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bd40:	b590      	push	{r4, r7, lr}
 800bd42:	b09d      	sub	sp, #116	@ 0x74
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd48:	235c      	movs	r3, #92	@ 0x5c
 800bd4a:	18fb      	adds	r3, r7, r3
 800bd4c:	0018      	movs	r0, r3
 800bd4e:	2314      	movs	r3, #20
 800bd50:	001a      	movs	r2, r3
 800bd52:	2100      	movs	r1, #0
 800bd54:	f00f fffc 	bl	801bd50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd58:	2418      	movs	r4, #24
 800bd5a:	193b      	adds	r3, r7, r4
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	2344      	movs	r3, #68	@ 0x44
 800bd60:	001a      	movs	r2, r3
 800bd62:	2100      	movs	r1, #0
 800bd64:	f00f fff4 	bl	801bd50 <memset>
  if(hadc->Instance==ADC1)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a3b      	ldr	r2, [pc, #236]	@ (800be5c <HAL_ADC_MspInit+0x11c>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d16f      	bne.n	800be52 <HAL_ADC_MspInit+0x112>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800bd72:	193b      	adds	r3, r7, r4
 800bd74:	2280      	movs	r2, #128	@ 0x80
 800bd76:	01d2      	lsls	r2, r2, #7
 800bd78:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800bd7a:	193b      	adds	r3, r7, r4
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd80:	193b      	adds	r3, r7, r4
 800bd82:	0018      	movs	r0, r3
 800bd84:	f00b fce0 	bl	8017748 <HAL_RCCEx_PeriphCLKConfig>
 800bd88:	1e03      	subs	r3, r0, #0
 800bd8a:	d001      	beq.n	800bd90 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800bd8c:	f7fe fc48 	bl	800a620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800bd90:	4b33      	ldr	r3, [pc, #204]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bd92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bd94:	4b32      	ldr	r3, [pc, #200]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bd96:	2180      	movs	r1, #128	@ 0x80
 800bd98:	0349      	lsls	r1, r1, #13
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	661a      	str	r2, [r3, #96]	@ 0x60
 800bd9e:	4b30      	ldr	r3, [pc, #192]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bda0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bda2:	2380      	movs	r3, #128	@ 0x80
 800bda4:	035b      	lsls	r3, r3, #13
 800bda6:	4013      	ands	r3, r2
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bdac:	4b2c      	ldr	r3, [pc, #176]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdb0:	4b2b      	ldr	r3, [pc, #172]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdb2:	2104      	movs	r1, #4
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bdb8:	4b29      	ldr	r3, [pc, #164]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdbc:	2204      	movs	r2, #4
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]
 800bdc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdc4:	4b26      	ldr	r3, [pc, #152]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdc8:	4b25      	ldr	r3, [pc, #148]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdca:	2101      	movs	r1, #1
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bdd0:	4b23      	ldr	r3, [pc, #140]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bddc:	4b20      	ldr	r3, [pc, #128]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bde0:	4b1f      	ldr	r3, [pc, #124]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bde2:	2102      	movs	r1, #2
 800bde4:	430a      	orrs	r2, r1
 800bde6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bde8:	4b1d      	ldr	r3, [pc, #116]	@ (800be60 <HAL_ADC_MspInit+0x120>)
 800bdea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdec:	2202      	movs	r2, #2
 800bdee:	4013      	ands	r3, r2
 800bdf0:	60bb      	str	r3, [r7, #8]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800bdf4:	245c      	movs	r4, #92	@ 0x5c
 800bdf6:	193b      	adds	r3, r7, r4
 800bdf8:	2213      	movs	r2, #19
 800bdfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bdfc:	193b      	adds	r3, r7, r4
 800bdfe:	2203      	movs	r2, #3
 800be00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be02:	193b      	adds	r3, r7, r4
 800be04:	2200      	movs	r2, #0
 800be06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be08:	193b      	adds	r3, r7, r4
 800be0a:	4a16      	ldr	r2, [pc, #88]	@ (800be64 <HAL_ADC_MspInit+0x124>)
 800be0c:	0019      	movs	r1, r3
 800be0e:	0010      	movs	r0, r2
 800be10:	f008 f8e0 	bl	8013fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800be14:	193b      	adds	r3, r7, r4
 800be16:	22e0      	movs	r2, #224	@ 0xe0
 800be18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be1a:	193b      	adds	r3, r7, r4
 800be1c:	2203      	movs	r2, #3
 800be1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be20:	193b      	adds	r3, r7, r4
 800be22:	2200      	movs	r2, #0
 800be24:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be26:	193a      	adds	r2, r7, r4
 800be28:	23a0      	movs	r3, #160	@ 0xa0
 800be2a:	05db      	lsls	r3, r3, #23
 800be2c:	0011      	movs	r1, r2
 800be2e:	0018      	movs	r0, r3
 800be30:	f008 f8d0 	bl	8013fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800be34:	193b      	adds	r3, r7, r4
 800be36:	2202      	movs	r2, #2
 800be38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be3a:	193b      	adds	r3, r7, r4
 800be3c:	2203      	movs	r2, #3
 800be3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be40:	193b      	adds	r3, r7, r4
 800be42:	2200      	movs	r2, #0
 800be44:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be46:	193b      	adds	r3, r7, r4
 800be48:	4a07      	ldr	r2, [pc, #28]	@ (800be68 <HAL_ADC_MspInit+0x128>)
 800be4a:	0019      	movs	r1, r3
 800be4c:	0010      	movs	r0, r2
 800be4e:	f008 f8c1 	bl	8013fd4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800be52:	46c0      	nop			@ (mov r8, r8)
 800be54:	46bd      	mov	sp, r7
 800be56:	b01d      	add	sp, #116	@ 0x74
 800be58:	bd90      	pop	{r4, r7, pc}
 800be5a:	46c0      	nop			@ (mov r8, r8)
 800be5c:	40012400 	.word	0x40012400
 800be60:	40021000 	.word	0x40021000
 800be64:	50000800 	.word	0x50000800
 800be68:	50000400 	.word	0x50000400

0800be6c <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a0e      	ldr	r2, [pc, #56]	@ (800beb4 <HAL_ADC_MspDeInit+0x48>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d115      	bne.n	800beaa <HAL_ADC_MspDeInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800be7e:	4b0e      	ldr	r3, [pc, #56]	@ (800beb8 <HAL_ADC_MspDeInit+0x4c>)
 800be80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800be82:	4b0d      	ldr	r3, [pc, #52]	@ (800beb8 <HAL_ADC_MspDeInit+0x4c>)
 800be84:	490d      	ldr	r1, [pc, #52]	@ (800bebc <HAL_ADC_MspDeInit+0x50>)
 800be86:	400a      	ands	r2, r1
 800be88:	661a      	str	r2, [r3, #96]	@ 0x60
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 800be8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bec0 <HAL_ADC_MspDeInit+0x54>)
 800be8c:	2113      	movs	r1, #19
 800be8e:	0018      	movs	r0, r3
 800be90:	f008 fa14 	bl	80142bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800be94:	23a0      	movs	r3, #160	@ 0xa0
 800be96:	05db      	lsls	r3, r3, #23
 800be98:	21e0      	movs	r1, #224	@ 0xe0
 800be9a:	0018      	movs	r0, r3
 800be9c:	f008 fa0e 	bl	80142bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 800bea0:	4b08      	ldr	r3, [pc, #32]	@ (800bec4 <HAL_ADC_MspDeInit+0x58>)
 800bea2:	2102      	movs	r1, #2
 800bea4:	0018      	movs	r0, r3
 800bea6:	f008 fa09 	bl	80142bc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800beaa:	46c0      	nop			@ (mov r8, r8)
 800beac:	46bd      	mov	sp, r7
 800beae:	b002      	add	sp, #8
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	46c0      	nop			@ (mov r8, r8)
 800beb4:	40012400 	.word	0x40012400
 800beb8:	40021000 	.word	0x40021000
 800bebc:	ffefffff 	.word	0xffefffff
 800bec0:	50000800 	.word	0x50000800
 800bec4:	50000400 	.word	0x50000400

0800bec8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bec8:	b590      	push	{r4, r7, lr}
 800beca:	b09b      	sub	sp, #108	@ 0x6c
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bed0:	2354      	movs	r3, #84	@ 0x54
 800bed2:	18fb      	adds	r3, r7, r3
 800bed4:	0018      	movs	r0, r3
 800bed6:	2314      	movs	r3, #20
 800bed8:	001a      	movs	r2, r3
 800beda:	2100      	movs	r1, #0
 800bedc:	f00f ff38 	bl	801bd50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bee0:	2410      	movs	r4, #16
 800bee2:	193b      	adds	r3, r7, r4
 800bee4:	0018      	movs	r0, r3
 800bee6:	2344      	movs	r3, #68	@ 0x44
 800bee8:	001a      	movs	r2, r3
 800beea:	2100      	movs	r1, #0
 800beec:	f00f ff30 	bl	801bd50 <memset>
  if(hi2c->Instance==I2C1)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a50      	ldr	r2, [pc, #320]	@ (800c038 <HAL_I2C_MspInit+0x170>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d000      	beq.n	800befc <HAL_I2C_MspInit+0x34>
 800befa:	e099      	b.n	800c030 <HAL_I2C_MspInit+0x168>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800befc:	193b      	adds	r3, r7, r4
 800befe:	2220      	movs	r2, #32
 800bf00:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800bf02:	193b      	adds	r3, r7, r4
 800bf04:	2280      	movs	r2, #128	@ 0x80
 800bf06:	0192      	lsls	r2, r2, #6
 800bf08:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf0a:	193b      	adds	r3, r7, r4
 800bf0c:	0018      	movs	r0, r3
 800bf0e:	f00b fc1b 	bl	8017748 <HAL_RCCEx_PeriphCLKConfig>
 800bf12:	1e03      	subs	r3, r0, #0
 800bf14:	d001      	beq.n	800bf1a <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800bf16:	f7fe fb83 	bl	800a620 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf1a:	4b48      	ldr	r3, [pc, #288]	@ (800c03c <HAL_I2C_MspInit+0x174>)
 800bf1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf1e:	4b47      	ldr	r3, [pc, #284]	@ (800c03c <HAL_I2C_MspInit+0x174>)
 800bf20:	2102      	movs	r1, #2
 800bf22:	430a      	orrs	r2, r1
 800bf24:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf26:	4b45      	ldr	r3, [pc, #276]	@ (800c03c <HAL_I2C_MspInit+0x174>)
 800bf28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bf32:	2154      	movs	r1, #84	@ 0x54
 800bf34:	187b      	adds	r3, r7, r1
 800bf36:	22c0      	movs	r2, #192	@ 0xc0
 800bf38:	0092      	lsls	r2, r2, #2
 800bf3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bf3c:	187b      	adds	r3, r7, r1
 800bf3e:	2212      	movs	r2, #18
 800bf40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf42:	187b      	adds	r3, r7, r1
 800bf44:	2200      	movs	r2, #0
 800bf46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf48:	187b      	adds	r3, r7, r1
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800bf4e:	187b      	adds	r3, r7, r1
 800bf50:	2204      	movs	r2, #4
 800bf52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf54:	187b      	adds	r3, r7, r1
 800bf56:	4a3a      	ldr	r2, [pc, #232]	@ (800c040 <HAL_I2C_MspInit+0x178>)
 800bf58:	0019      	movs	r1, r3
 800bf5a:	0010      	movs	r0, r2
 800bf5c:	f008 f83a 	bl	8013fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bf60:	4b36      	ldr	r3, [pc, #216]	@ (800c03c <HAL_I2C_MspInit+0x174>)
 800bf62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf64:	4b35      	ldr	r3, [pc, #212]	@ (800c03c <HAL_I2C_MspInit+0x174>)
 800bf66:	2180      	movs	r1, #128	@ 0x80
 800bf68:	0389      	lsls	r1, r1, #14
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf6e:	4b33      	ldr	r3, [pc, #204]	@ (800c03c <HAL_I2C_MspInit+0x174>)
 800bf70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf72:	2380      	movs	r3, #128	@ 0x80
 800bf74:	039b      	lsls	r3, r3, #14
 800bf76:	4013      	ands	r3, r2
 800bf78:	60bb      	str	r3, [r7, #8]
 800bf7a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800bf7c:	4b31      	ldr	r3, [pc, #196]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bf7e:	4a32      	ldr	r2, [pc, #200]	@ (800c048 <HAL_I2C_MspInit+0x180>)
 800bf80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800bf82:	4b30      	ldr	r3, [pc, #192]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bf84:	2209      	movs	r2, #9
 800bf86:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bf88:	4b2e      	ldr	r3, [pc, #184]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bf8e:	4b2d      	ldr	r3, [pc, #180]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bf94:	4b2b      	ldr	r3, [pc, #172]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bf96:	2280      	movs	r2, #128	@ 0x80
 800bf98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bf9a:	4b2a      	ldr	r3, [pc, #168]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bfa0:	4b28      	ldr	r3, [pc, #160]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800bfa6:	4b27      	ldr	r3, [pc, #156]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bfac:	4b25      	ldr	r3, [pc, #148]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800bfb2:	4b24      	ldr	r3, [pc, #144]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bfb4:	0018      	movs	r0, r3
 800bfb6:	f007 fa61 	bl	801347c <HAL_DMA_Init>
 800bfba:	1e03      	subs	r3, r0, #0
 800bfbc:	d001      	beq.n	800bfc2 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800bfbe:	f7fe fb2f 	bl	800a620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a1f      	ldr	r2, [pc, #124]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bfc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bfc8:	4b1e      	ldr	r3, [pc, #120]	@ (800c044 <HAL_I2C_MspInit+0x17c>)
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800bfce:	4b1f      	ldr	r3, [pc, #124]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bfd0:	4a1f      	ldr	r2, [pc, #124]	@ (800c050 <HAL_I2C_MspInit+0x188>)
 800bfd2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800bfd4:	4b1d      	ldr	r3, [pc, #116]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bfd6:	220a      	movs	r2, #10
 800bfd8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bfda:	4b1c      	ldr	r3, [pc, #112]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bfdc:	2210      	movs	r2, #16
 800bfde:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bfe0:	4b1a      	ldr	r3, [pc, #104]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bfe6:	4b19      	ldr	r3, [pc, #100]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bfe8:	2280      	movs	r2, #128	@ 0x80
 800bfea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bfec:	4b17      	ldr	r3, [pc, #92]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bff2:	4b16      	ldr	r3, [pc, #88]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800bff8:	4b14      	ldr	r3, [pc, #80]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bffe:	4b13      	ldr	r3, [pc, #76]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800c000:	2200      	movs	r2, #0
 800c002:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c004:	4b11      	ldr	r3, [pc, #68]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800c006:	0018      	movs	r0, r3
 800c008:	f007 fa38 	bl	801347c <HAL_DMA_Init>
 800c00c:	1e03      	subs	r3, r0, #0
 800c00e:	d001      	beq.n	800c014 <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 800c010:	f7fe fb06 	bl	800a620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a0d      	ldr	r2, [pc, #52]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800c018:	639a      	str	r2, [r3, #56]	@ 0x38
 800c01a:	4b0c      	ldr	r3, [pc, #48]	@ (800c04c <HAL_I2C_MspInit+0x184>)
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c020:	2200      	movs	r2, #0
 800c022:	2100      	movs	r1, #0
 800c024:	2017      	movs	r0, #23
 800c026:	f007 f9e7 	bl	80133f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c02a:	2017      	movs	r0, #23
 800c02c:	f007 f9f9 	bl	8013422 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800c030:	46c0      	nop			@ (mov r8, r8)
 800c032:	46bd      	mov	sp, r7
 800c034:	b01b      	add	sp, #108	@ 0x6c
 800c036:	bd90      	pop	{r4, r7, pc}
 800c038:	40005400 	.word	0x40005400
 800c03c:	40021000 	.word	0x40021000
 800c040:	50000400 	.word	0x50000400
 800c044:	200004a0 	.word	0x200004a0
 800c048:	40020080 	.word	0x40020080
 800c04c:	20000500 	.word	0x20000500
 800c050:	4002006c 	.word	0x4002006c

0800c054 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a13      	ldr	r2, [pc, #76]	@ (800c0b0 <HAL_I2C_MspDeInit+0x5c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d120      	bne.n	800c0a8 <HAL_I2C_MspDeInit+0x54>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800c066:	4b13      	ldr	r3, [pc, #76]	@ (800c0b4 <HAL_I2C_MspDeInit+0x60>)
 800c068:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c06a:	4b12      	ldr	r3, [pc, #72]	@ (800c0b4 <HAL_I2C_MspDeInit+0x60>)
 800c06c:	4912      	ldr	r1, [pc, #72]	@ (800c0b8 <HAL_I2C_MspDeInit+0x64>)
 800c06e:	400a      	ands	r2, r1
 800c070:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800c072:	2380      	movs	r3, #128	@ 0x80
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	4a11      	ldr	r2, [pc, #68]	@ (800c0bc <HAL_I2C_MspDeInit+0x68>)
 800c078:	0019      	movs	r1, r3
 800c07a:	0010      	movs	r0, r2
 800c07c:	f008 f91e 	bl	80142bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800c080:	2380      	movs	r3, #128	@ 0x80
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4a0d      	ldr	r2, [pc, #52]	@ (800c0bc <HAL_I2C_MspDeInit+0x68>)
 800c086:	0019      	movs	r1, r3
 800c088:	0010      	movs	r0, r2
 800c08a:	f008 f917 	bl	80142bc <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c092:	0018      	movs	r0, r3
 800c094:	f007 fa9e 	bl	80135d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c09c:	0018      	movs	r0, r3
 800c09e:	f007 fa99 	bl	80135d4 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800c0a2:	2017      	movs	r0, #23
 800c0a4:	f007 f9cd 	bl	8013442 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800c0a8:	46c0      	nop			@ (mov r8, r8)
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b002      	add	sp, #8
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	40005400 	.word	0x40005400
 800c0b4:	40021000 	.word	0x40021000
 800c0b8:	ffdfffff 	.word	0xffdfffff
 800c0bc:	50000400 	.word	0x50000400

0800c0c0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b095      	sub	sp, #84	@ 0x54
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c0c8:	240c      	movs	r4, #12
 800c0ca:	193b      	adds	r3, r7, r4
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	2344      	movs	r3, #68	@ 0x44
 800c0d0:	001a      	movs	r2, r3
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	f00f fe3c 	bl	801bd50 <memset>
  if(hrtc->Instance==RTC)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c148 <HAL_RTC_MspInit+0x88>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d12e      	bne.n	800c140 <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c0e2:	193b      	adds	r3, r7, r4
 800c0e4:	2280      	movs	r2, #128	@ 0x80
 800c0e6:	0212      	lsls	r2, r2, #8
 800c0e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c0ea:	193b      	adds	r3, r7, r4
 800c0ec:	2280      	movs	r2, #128	@ 0x80
 800c0ee:	0052      	lsls	r2, r2, #1
 800c0f0:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c0f2:	193b      	adds	r3, r7, r4
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f00b fb27 	bl	8017748 <HAL_RCCEx_PeriphCLKConfig>
 800c0fa:	1e03      	subs	r3, r0, #0
 800c0fc:	d001      	beq.n	800c102 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c0fe:	f7fe fa8f 	bl	800a620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c102:	4a12      	ldr	r2, [pc, #72]	@ (800c14c <HAL_RTC_MspInit+0x8c>)
 800c104:	2390      	movs	r3, #144	@ 0x90
 800c106:	58d3      	ldr	r3, [r2, r3]
 800c108:	4910      	ldr	r1, [pc, #64]	@ (800c14c <HAL_RTC_MspInit+0x8c>)
 800c10a:	2280      	movs	r2, #128	@ 0x80
 800c10c:	0212      	lsls	r2, r2, #8
 800c10e:	4313      	orrs	r3, r2
 800c110:	2290      	movs	r2, #144	@ 0x90
 800c112:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c114:	4b0d      	ldr	r3, [pc, #52]	@ (800c14c <HAL_RTC_MspInit+0x8c>)
 800c116:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c118:	4b0c      	ldr	r3, [pc, #48]	@ (800c14c <HAL_RTC_MspInit+0x8c>)
 800c11a:	2180      	movs	r1, #128	@ 0x80
 800c11c:	00c9      	lsls	r1, r1, #3
 800c11e:	430a      	orrs	r2, r1
 800c120:	659a      	str	r2, [r3, #88]	@ 0x58
 800c122:	4b0a      	ldr	r3, [pc, #40]	@ (800c14c <HAL_RTC_MspInit+0x8c>)
 800c124:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c126:	2380      	movs	r3, #128	@ 0x80
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	4013      	ands	r3, r2
 800c12c:	60bb      	str	r3, [r7, #8]
 800c12e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800c130:	2200      	movs	r2, #0
 800c132:	2100      	movs	r1, #0
 800c134:	2002      	movs	r0, #2
 800c136:	f007 f95f 	bl	80133f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800c13a:	2002      	movs	r0, #2
 800c13c:	f007 f971 	bl	8013422 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800c140:	46c0      	nop			@ (mov r8, r8)
 800c142:	46bd      	mov	sp, r7
 800c144:	b015      	add	sp, #84	@ 0x54
 800c146:	bd90      	pop	{r4, r7, pc}
 800c148:	40002800 	.word	0x40002800
 800c14c:	40021000 	.word	0x40021000

0800c150 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a12      	ldr	r2, [pc, #72]	@ (800c1a8 <HAL_TIM_Base_MspInit+0x58>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d10c      	bne.n	800c17c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c162:	4b12      	ldr	r3, [pc, #72]	@ (800c1ac <HAL_TIM_Base_MspInit+0x5c>)
 800c164:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c166:	4b11      	ldr	r3, [pc, #68]	@ (800c1ac <HAL_TIM_Base_MspInit+0x5c>)
 800c168:	2102      	movs	r1, #2
 800c16a:	430a      	orrs	r2, r1
 800c16c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c16e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ac <HAL_TIM_Base_MspInit+0x5c>)
 800c170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c172:	2202      	movs	r2, #2
 800c174:	4013      	ands	r3, r2
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800c17a:	e010      	b.n	800c19e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a0b      	ldr	r2, [pc, #44]	@ (800c1b0 <HAL_TIM_Base_MspInit+0x60>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d10b      	bne.n	800c19e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c186:	4b09      	ldr	r3, [pc, #36]	@ (800c1ac <HAL_TIM_Base_MspInit+0x5c>)
 800c188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c18a:	4b08      	ldr	r3, [pc, #32]	@ (800c1ac <HAL_TIM_Base_MspInit+0x5c>)
 800c18c:	2110      	movs	r1, #16
 800c18e:	430a      	orrs	r2, r1
 800c190:	659a      	str	r2, [r3, #88]	@ 0x58
 800c192:	4b06      	ldr	r3, [pc, #24]	@ (800c1ac <HAL_TIM_Base_MspInit+0x5c>)
 800c194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c196:	2210      	movs	r2, #16
 800c198:	4013      	ands	r3, r2
 800c19a:	60bb      	str	r3, [r7, #8]
 800c19c:	68bb      	ldr	r3, [r7, #8]
}
 800c19e:	46c0      	nop			@ (mov r8, r8)
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	b004      	add	sp, #16
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	46c0      	nop			@ (mov r8, r8)
 800c1a8:	40000400 	.word	0x40000400
 800c1ac:	40021000 	.word	0x40021000
 800c1b0:	40001000 	.word	0x40001000

0800c1b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b089      	sub	sp, #36	@ 0x24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1bc:	240c      	movs	r4, #12
 800c1be:	193b      	adds	r3, r7, r4
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	2314      	movs	r3, #20
 800c1c4:	001a      	movs	r2, r3
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	f00f fdc2 	bl	801bd50 <memset>
  if(htim->Instance==TIM3)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a14      	ldr	r2, [pc, #80]	@ (800c224 <HAL_TIM_MspPostInit+0x70>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d121      	bne.n	800c21a <HAL_TIM_MspPostInit+0x66>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1d6:	4b14      	ldr	r3, [pc, #80]	@ (800c228 <HAL_TIM_MspPostInit+0x74>)
 800c1d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1da:	4b13      	ldr	r3, [pc, #76]	@ (800c228 <HAL_TIM_MspPostInit+0x74>)
 800c1dc:	2104      	movs	r1, #4
 800c1de:	430a      	orrs	r2, r1
 800c1e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c1e2:	4b11      	ldr	r3, [pc, #68]	@ (800c228 <HAL_TIM_MspPostInit+0x74>)
 800c1e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	60bb      	str	r3, [r7, #8]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c1ee:	0021      	movs	r1, r4
 800c1f0:	187b      	adds	r3, r7, r1
 800c1f2:	2280      	movs	r2, #128	@ 0x80
 800c1f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1f6:	187b      	adds	r3, r7, r1
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1fc:	187b      	adds	r3, r7, r1
 800c1fe:	2200      	movs	r2, #0
 800c200:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c202:	187b      	adds	r3, r7, r1
 800c204:	2200      	movs	r2, #0
 800c206:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c208:	187b      	adds	r3, r7, r1
 800c20a:	2202      	movs	r2, #2
 800c20c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c20e:	187b      	adds	r3, r7, r1
 800c210:	4a06      	ldr	r2, [pc, #24]	@ (800c22c <HAL_TIM_MspPostInit+0x78>)
 800c212:	0019      	movs	r1, r3
 800c214:	0010      	movs	r0, r2
 800c216:	f007 fedd 	bl	8013fd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c21a:	46c0      	nop			@ (mov r8, r8)
 800c21c:	46bd      	mov	sp, r7
 800c21e:	b009      	add	sp, #36	@ 0x24
 800c220:	bd90      	pop	{r4, r7, pc}
 800c222:	46c0      	nop			@ (mov r8, r8)
 800c224:	40000400 	.word	0x40000400
 800c228:	40021000 	.word	0x40021000
 800c22c:	50000800 	.word	0x50000800

0800c230 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c230:	b590      	push	{r4, r7, lr}
 800c232:	b09d      	sub	sp, #116	@ 0x74
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c238:	235c      	movs	r3, #92	@ 0x5c
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	0018      	movs	r0, r3
 800c23e:	2314      	movs	r3, #20
 800c240:	001a      	movs	r2, r3
 800c242:	2100      	movs	r1, #0
 800c244:	f00f fd84 	bl	801bd50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c248:	2418      	movs	r4, #24
 800c24a:	193b      	adds	r3, r7, r4
 800c24c:	0018      	movs	r0, r3
 800c24e:	2344      	movs	r3, #68	@ 0x44
 800c250:	001a      	movs	r2, r3
 800c252:	2100      	movs	r1, #0
 800c254:	f00f fd7c 	bl	801bd50 <memset>
  if(huart->Instance==USART2)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4aa0      	ldr	r2, [pc, #640]	@ (800c4e0 <HAL_UART_MspInit+0x2b0>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d000      	beq.n	800c264 <HAL_UART_MspInit+0x34>
 800c262:	e09a      	b.n	800c39a <HAL_UART_MspInit+0x16a>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c264:	193b      	adds	r3, r7, r4
 800c266:	2202      	movs	r2, #2
 800c268:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c26a:	193b      	adds	r3, r7, r4
 800c26c:	2200      	movs	r2, #0
 800c26e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c270:	193b      	adds	r3, r7, r4
 800c272:	0018      	movs	r0, r3
 800c274:	f00b fa68 	bl	8017748 <HAL_RCCEx_PeriphCLKConfig>
 800c278:	1e03      	subs	r3, r0, #0
 800c27a:	d001      	beq.n	800c280 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800c27c:	f7fe f9d0 	bl	800a620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c280:	4b98      	ldr	r3, [pc, #608]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c282:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c284:	4b97      	ldr	r3, [pc, #604]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c286:	2180      	movs	r1, #128	@ 0x80
 800c288:	0289      	lsls	r1, r1, #10
 800c28a:	430a      	orrs	r2, r1
 800c28c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c28e:	4b95      	ldr	r3, [pc, #596]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c290:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c292:	2380      	movs	r3, #128	@ 0x80
 800c294:	029b      	lsls	r3, r3, #10
 800c296:	4013      	ands	r3, r2
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c29c:	4b91      	ldr	r3, [pc, #580]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c29e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2a0:	4b90      	ldr	r3, [pc, #576]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c2a8:	4b8e      	ldr	r3, [pc, #568]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c2aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	613b      	str	r3, [r7, #16]
 800c2b2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c2b4:	215c      	movs	r1, #92	@ 0x5c
 800c2b6:	187b      	adds	r3, r7, r1
 800c2b8:	220c      	movs	r2, #12
 800c2ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2bc:	187b      	adds	r3, r7, r1
 800c2be:	2202      	movs	r2, #2
 800c2c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2c2:	187b      	adds	r3, r7, r1
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2c8:	187b      	adds	r3, r7, r1
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c2ce:	187b      	adds	r3, r7, r1
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2d4:	187a      	adds	r2, r7, r1
 800c2d6:	23a0      	movs	r3, #160	@ 0xa0
 800c2d8:	05db      	lsls	r3, r3, #23
 800c2da:	0011      	movs	r1, r2
 800c2dc:	0018      	movs	r0, r3
 800c2de:	f007 fe79 	bl	8013fd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800c2e2:	4b81      	ldr	r3, [pc, #516]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c2e4:	4a81      	ldr	r2, [pc, #516]	@ (800c4ec <HAL_UART_MspInit+0x2bc>)
 800c2e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800c2e8:	4b7f      	ldr	r3, [pc, #508]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c2ea:	2247      	movs	r2, #71	@ 0x47
 800c2ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c2ee:	4b7e      	ldr	r3, [pc, #504]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c2f4:	4b7c      	ldr	r3, [pc, #496]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c2fa:	4b7b      	ldr	r3, [pc, #492]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c2fc:	2280      	movs	r2, #128	@ 0x80
 800c2fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c300:	4b79      	ldr	r3, [pc, #484]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c302:	2200      	movs	r2, #0
 800c304:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c306:	4b78      	ldr	r3, [pc, #480]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c308:	2200      	movs	r2, #0
 800c30a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800c30c:	4b76      	ldr	r3, [pc, #472]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c30e:	2200      	movs	r2, #0
 800c310:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c312:	4b75      	ldr	r3, [pc, #468]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c314:	2200      	movs	r2, #0
 800c316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c318:	4b73      	ldr	r3, [pc, #460]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c31a:	0018      	movs	r0, r3
 800c31c:	f007 f8ae 	bl	801347c <HAL_DMA_Init>
 800c320:	1e03      	subs	r3, r0, #0
 800c322:	d001      	beq.n	800c328 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800c324:	f7fe f97c 	bl	800a620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2180      	movs	r1, #128	@ 0x80
 800c32c:	4a6e      	ldr	r2, [pc, #440]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c32e:	505a      	str	r2, [r3, r1]
 800c330:	4b6d      	ldr	r3, [pc, #436]	@ (800c4e8 <HAL_UART_MspInit+0x2b8>)
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800c336:	4b6e      	ldr	r3, [pc, #440]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c338:	4a6e      	ldr	r2, [pc, #440]	@ (800c4f4 <HAL_UART_MspInit+0x2c4>)
 800c33a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800c33c:	4b6c      	ldr	r3, [pc, #432]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c33e:	2248      	movs	r2, #72	@ 0x48
 800c340:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c342:	4b6b      	ldr	r3, [pc, #428]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c344:	2210      	movs	r2, #16
 800c346:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c348:	4b69      	ldr	r3, [pc, #420]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c34e:	4b68      	ldr	r3, [pc, #416]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c350:	2280      	movs	r2, #128	@ 0x80
 800c352:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c354:	4b66      	ldr	r3, [pc, #408]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c356:	2200      	movs	r2, #0
 800c358:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c35a:	4b65      	ldr	r3, [pc, #404]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c360:	4b63      	ldr	r3, [pc, #396]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c362:	2200      	movs	r2, #0
 800c364:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c366:	4b62      	ldr	r3, [pc, #392]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c368:	2200      	movs	r2, #0
 800c36a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c36c:	4b60      	ldr	r3, [pc, #384]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c36e:	0018      	movs	r0, r3
 800c370:	f007 f884 	bl	801347c <HAL_DMA_Init>
 800c374:	1e03      	subs	r3, r0, #0
 800c376:	d001      	beq.n	800c37c <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 800c378:	f7fe f952 	bl	800a620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a5c      	ldr	r2, [pc, #368]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c380:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c382:	4b5b      	ldr	r3, [pc, #364]	@ (800c4f0 <HAL_UART_MspInit+0x2c0>)
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800c388:	2200      	movs	r2, #0
 800c38a:	2100      	movs	r1, #0
 800c38c:	201c      	movs	r0, #28
 800c38e:	f007 f833 	bl	80133f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800c392:	201c      	movs	r0, #28
 800c394:	f007 f845 	bl	8013422 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 800c398:	e09e      	b.n	800c4d8 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a56      	ldr	r2, [pc, #344]	@ (800c4f8 <HAL_UART_MspInit+0x2c8>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d000      	beq.n	800c3a6 <HAL_UART_MspInit+0x176>
 800c3a4:	e098      	b.n	800c4d8 <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 800c3a6:	2118      	movs	r1, #24
 800c3a8:	187b      	adds	r3, r7, r1
 800c3aa:	2280      	movs	r2, #128	@ 0x80
 800c3ac:	0292      	lsls	r2, r2, #10
 800c3ae:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c3b0:	187b      	adds	r3, r7, r1
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	f00b f9c8 	bl	8017748 <HAL_RCCEx_PeriphCLKConfig>
 800c3b8:	1e03      	subs	r3, r0, #0
 800c3ba:	d001      	beq.n	800c3c0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800c3bc:	f7fe f930 	bl	800a620 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 800c3c0:	4b48      	ldr	r3, [pc, #288]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c3c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c3c4:	4b47      	ldr	r3, [pc, #284]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c3c6:	2180      	movs	r1, #128	@ 0x80
 800c3c8:	0309      	lsls	r1, r1, #12
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800c3ce:	4b45      	ldr	r3, [pc, #276]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c3d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c3d2:	2380      	movs	r3, #128	@ 0x80
 800c3d4:	031b      	lsls	r3, r3, #12
 800c3d6:	4013      	ands	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3dc:	4b41      	ldr	r3, [pc, #260]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c3de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c3e0:	4b40      	ldr	r3, [pc, #256]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c3e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4e4 <HAL_UART_MspInit+0x2b4>)
 800c3ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	60bb      	str	r3, [r7, #8]
 800c3f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c3f4:	215c      	movs	r1, #92	@ 0x5c
 800c3f6:	187b      	adds	r3, r7, r1
 800c3f8:	2203      	movs	r2, #3
 800c3fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3fc:	187b      	adds	r3, r7, r1
 800c3fe:	2202      	movs	r2, #2
 800c400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c402:	187b      	adds	r3, r7, r1
 800c404:	2200      	movs	r2, #0
 800c406:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c408:	187b      	adds	r3, r7, r1
 800c40a:	2200      	movs	r2, #0
 800c40c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 800c40e:	187b      	adds	r3, r7, r1
 800c410:	2208      	movs	r2, #8
 800c412:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c414:	187a      	adds	r2, r7, r1
 800c416:	23a0      	movs	r3, #160	@ 0xa0
 800c418:	05db      	lsls	r3, r3, #23
 800c41a:	0011      	movs	r1, r2
 800c41c:	0018      	movs	r0, r3
 800c41e:	f007 fdd9 	bl	8013fd4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800c422:	4b36      	ldr	r3, [pc, #216]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c424:	4a36      	ldr	r2, [pc, #216]	@ (800c500 <HAL_UART_MspInit+0x2d0>)
 800c426:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800c428:	4b34      	ldr	r3, [pc, #208]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c42a:	224b      	movs	r2, #75	@ 0x4b
 800c42c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c42e:	4b33      	ldr	r3, [pc, #204]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c430:	2200      	movs	r2, #0
 800c432:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c434:	4b31      	ldr	r3, [pc, #196]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c436:	2200      	movs	r2, #0
 800c438:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c43a:	4b30      	ldr	r3, [pc, #192]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c43c:	2280      	movs	r2, #128	@ 0x80
 800c43e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c440:	4b2e      	ldr	r3, [pc, #184]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c442:	2200      	movs	r2, #0
 800c444:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c446:	4b2d      	ldr	r3, [pc, #180]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c448:	2200      	movs	r2, #0
 800c44a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800c44c:	4b2b      	ldr	r3, [pc, #172]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c44e:	2200      	movs	r2, #0
 800c450:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c452:	4b2a      	ldr	r3, [pc, #168]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c454:	2200      	movs	r2, #0
 800c456:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800c458:	4b28      	ldr	r3, [pc, #160]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c45a:	0018      	movs	r0, r3
 800c45c:	f007 f80e 	bl	801347c <HAL_DMA_Init>
 800c460:	1e03      	subs	r3, r0, #0
 800c462:	d001      	beq.n	800c468 <HAL_UART_MspInit+0x238>
      Error_Handler();
 800c464:	f7fe f8dc 	bl	800a620 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2180      	movs	r1, #128	@ 0x80
 800c46c:	4a23      	ldr	r2, [pc, #140]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c46e:	505a      	str	r2, [r3, r1]
 800c470:	4b22      	ldr	r3, [pc, #136]	@ (800c4fc <HAL_UART_MspInit+0x2cc>)
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 800c476:	4b23      	ldr	r3, [pc, #140]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c478:	4a23      	ldr	r2, [pc, #140]	@ (800c508 <HAL_UART_MspInit+0x2d8>)
 800c47a:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800c47c:	4b21      	ldr	r3, [pc, #132]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c47e:	224c      	movs	r2, #76	@ 0x4c
 800c480:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c482:	4b20      	ldr	r3, [pc, #128]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c484:	2210      	movs	r2, #16
 800c486:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c488:	4b1e      	ldr	r3, [pc, #120]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c48e:	4b1d      	ldr	r3, [pc, #116]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c490:	2280      	movs	r2, #128	@ 0x80
 800c492:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c494:	4b1b      	ldr	r3, [pc, #108]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c496:	2200      	movs	r2, #0
 800c498:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c49a:	4b1a      	ldr	r3, [pc, #104]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800c4a0:	4b18      	ldr	r3, [pc, #96]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c4a6:	4b17      	ldr	r3, [pc, #92]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800c4ac:	4b15      	ldr	r3, [pc, #84]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f006 ffe4 	bl	801347c <HAL_DMA_Init>
 800c4b4:	1e03      	subs	r3, r0, #0
 800c4b6:	d001      	beq.n	800c4bc <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800c4b8:	f7fe f8b2 	bl	800a620 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a11      	ldr	r2, [pc, #68]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c4c0:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c4c2:	4b10      	ldr	r3, [pc, #64]	@ (800c504 <HAL_UART_MspInit+0x2d4>)
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	201e      	movs	r0, #30
 800c4ce:	f006 ff93 	bl	80133f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 800c4d2:	201e      	movs	r0, #30
 800c4d4:	f006 ffa5 	bl	8013422 <HAL_NVIC_EnableIRQ>
}
 800c4d8:	46c0      	nop			@ (mov r8, r8)
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	b01d      	add	sp, #116	@ 0x74
 800c4de:	bd90      	pop	{r4, r7, pc}
 800c4e0:	40004400 	.word	0x40004400
 800c4e4:	40021000 	.word	0x40021000
 800c4e8:	20000764 	.word	0x20000764
 800c4ec:	40020058 	.word	0x40020058
 800c4f0:	200007c4 	.word	0x200007c4
 800c4f4:	40020044 	.word	0x40020044
 800c4f8:	40004c00 	.word	0x40004c00
 800c4fc:	20000824 	.word	0x20000824
 800c500:	4002001c 	.word	0x4002001c
 800c504:	20000884 	.word	0x20000884
 800c508:	40020030 	.word	0x40020030

0800c50c <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a20      	ldr	r2, [pc, #128]	@ (800c59c <HAL_UART_MspDeInit+0x90>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d11a      	bne.n	800c554 <HAL_UART_MspDeInit+0x48>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800c51e:	4b20      	ldr	r3, [pc, #128]	@ (800c5a0 <HAL_UART_MspDeInit+0x94>)
 800c520:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c522:	4b1f      	ldr	r3, [pc, #124]	@ (800c5a0 <HAL_UART_MspDeInit+0x94>)
 800c524:	491f      	ldr	r1, [pc, #124]	@ (800c5a4 <HAL_UART_MspDeInit+0x98>)
 800c526:	400a      	ands	r2, r1
 800c528:	659a      	str	r2, [r3, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800c52a:	23a0      	movs	r3, #160	@ 0xa0
 800c52c:	05db      	lsls	r3, r3, #23
 800c52e:	210c      	movs	r1, #12
 800c530:	0018      	movs	r0, r3
 800c532:	f007 fec3 	bl	80142bc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2280      	movs	r2, #128	@ 0x80
 800c53a:	589b      	ldr	r3, [r3, r2]
 800c53c:	0018      	movs	r0, r3
 800c53e:	f007 f849 	bl	80135d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c546:	0018      	movs	r0, r3
 800c548:	f007 f844 	bl	80135d4 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_LPUART2_IRQn);
 800c54c:	201c      	movs	r0, #28
 800c54e:	f006 ff78 	bl	8013442 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART4_MspDeInit 1 */

    /* USER CODE END USART4_MspDeInit 1 */
  }

}
 800c552:	e01e      	b.n	800c592 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==USART4)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a13      	ldr	r2, [pc, #76]	@ (800c5a8 <HAL_UART_MspDeInit+0x9c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d119      	bne.n	800c592 <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_USART4_CLK_DISABLE();
 800c55e:	4b10      	ldr	r3, [pc, #64]	@ (800c5a0 <HAL_UART_MspDeInit+0x94>)
 800c560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c562:	4b0f      	ldr	r3, [pc, #60]	@ (800c5a0 <HAL_UART_MspDeInit+0x94>)
 800c564:	4911      	ldr	r1, [pc, #68]	@ (800c5ac <HAL_UART_MspDeInit+0xa0>)
 800c566:	400a      	ands	r2, r1
 800c568:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800c56a:	23a0      	movs	r3, #160	@ 0xa0
 800c56c:	05db      	lsls	r3, r3, #23
 800c56e:	2103      	movs	r1, #3
 800c570:	0018      	movs	r0, r3
 800c572:	f007 fea3 	bl	80142bc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2280      	movs	r2, #128	@ 0x80
 800c57a:	589b      	ldr	r3, [r3, r2]
 800c57c:	0018      	movs	r0, r3
 800c57e:	f007 f829 	bl	80135d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c586:	0018      	movs	r0, r3
 800c588:	f007 f824 	bl	80135d4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART4_LPUART3_IRQn);
 800c58c:	201e      	movs	r0, #30
 800c58e:	f006 ff58 	bl	8013442 <HAL_NVIC_DisableIRQ>
}
 800c592:	46c0      	nop			@ (mov r8, r8)
 800c594:	46bd      	mov	sp, r7
 800c596:	b002      	add	sp, #8
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	40004400 	.word	0x40004400
 800c5a0:	40021000 	.word	0x40021000
 800c5a4:	fffdffff 	.word	0xfffdffff
 800c5a8:	40004c00 	.word	0x40004c00
 800c5ac:	fff7ffff 	.word	0xfff7ffff

0800c5b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c5b4:	46c0      	nop			@ (mov r8, r8)
 800c5b6:	e7fd      	b.n	800c5b4 <NMI_Handler+0x4>

0800c5b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c5bc:	46c0      	nop			@ (mov r8, r8)
 800c5be:	e7fd      	b.n	800c5bc <HardFault_Handler+0x4>

0800c5c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c5c4:	46c0      	nop			@ (mov r8, r8)
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c5ce:	46c0      	nop			@ (mov r8, r8)
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c5d8:	f005 fb9c 	bl	8011d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c5dc:	46c0      	nop			@ (mov r8, r8)
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c5e8:	4b03      	ldr	r3, [pc, #12]	@ (800c5f8 <RTC_TAMP_IRQHandler+0x14>)
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f00c fcfe 	bl	8018fec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800c5f0:	46c0      	nop			@ (mov r8, r8)
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	46c0      	nop			@ (mov r8, r8)
 800c5f8:	20000574 	.word	0x20000574

0800c5fc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800c600:	2380      	movs	r3, #128	@ 0x80
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	0018      	movs	r0, r3
 800c606:	f007 ff8f 	bl	8014528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800c60a:	46c0      	nop			@ (mov r8, r8)
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c614:	4b05      	ldr	r3, [pc, #20]	@ (800c62c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c616:	0018      	movs	r0, r3
 800c618:	f007 f9c2 	bl	80139a0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c61c:	4b04      	ldr	r3, [pc, #16]	@ (800c630 <DMA1_Channel2_3_IRQHandler+0x20>)
 800c61e:	0018      	movs	r0, r3
 800c620:	f007 f9be 	bl	80139a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c624:	46c0      	nop			@ (mov r8, r8)
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	46c0      	nop			@ (mov r8, r8)
 800c62c:	20000824 	.word	0x20000824
 800c630:	20000884 	.word	0x20000884

0800c634 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c638:	4b09      	ldr	r3, [pc, #36]	@ (800c660 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 800c63a:	0018      	movs	r0, r3
 800c63c:	f007 f9b0 	bl	80139a0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c640:	4b08      	ldr	r3, [pc, #32]	@ (800c664 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800c642:	0018      	movs	r0, r3
 800c644:	f007 f9ac 	bl	80139a0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c648:	4b07      	ldr	r3, [pc, #28]	@ (800c668 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 800c64a:	0018      	movs	r0, r3
 800c64c:	f007 f9a8 	bl	80139a0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c650:	4b06      	ldr	r3, [pc, #24]	@ (800c66c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800c652:	0018      	movs	r0, r3
 800c654:	f007 f9a4 	bl	80139a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 800c658:	46c0      	nop			@ (mov r8, r8)
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	46c0      	nop			@ (mov r8, r8)
 800c660:	200007c4 	.word	0x200007c4
 800c664:	20000764 	.word	0x20000764
 800c668:	20000500 	.word	0x20000500
 800c66c:	200004a0 	.word	0x200004a0

0800c670 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c674:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <I2C1_IRQHandler+0x2c>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	699a      	ldr	r2, [r3, #24]
 800c67a:	23e0      	movs	r3, #224	@ 0xe0
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	4013      	ands	r3, r2
 800c680:	d004      	beq.n	800c68c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c682:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <I2C1_IRQHandler+0x2c>)
 800c684:	0018      	movs	r0, r3
 800c686:	f008 fa89 	bl	8014b9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c68a:	e003      	b.n	800c694 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c68c:	4b03      	ldr	r3, [pc, #12]	@ (800c69c <I2C1_IRQHandler+0x2c>)
 800c68e:	0018      	movs	r0, r3
 800c690:	f008 fa6a 	bl	8014b68 <HAL_I2C_EV_IRQHandler>
}
 800c694:	46c0      	nop			@ (mov r8, r8)
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	46c0      	nop			@ (mov r8, r8)
 800c69c:	2000044c 	.word	0x2000044c

0800c6a0 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c6a4:	4b03      	ldr	r3, [pc, #12]	@ (800c6b4 <USART2_LPUART2_IRQHandler+0x14>)
 800c6a6:	0018      	movs	r0, r3
 800c6a8:	f00d ff4e 	bl	801a548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800c6ac:	46c0      	nop			@ (mov r8, r8)
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	46c0      	nop			@ (mov r8, r8)
 800c6b4:	2000063c 	.word	0x2000063c

0800c6b8 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c6bc:	4b03      	ldr	r3, [pc, #12]	@ (800c6cc <USART4_LPUART3_IRQHandler+0x14>)
 800c6be:	0018      	movs	r0, r3
 800c6c0:	f00d ff42 	bl	801a548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 800c6c4:	46c0      	nop			@ (mov r8, r8)
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	46c0      	nop			@ (mov r8, r8)
 800c6cc:	200006d0 	.word	0x200006d0

0800c6d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c6d8:	4a14      	ldr	r2, [pc, #80]	@ (800c72c <_sbrk+0x5c>)
 800c6da:	4b15      	ldr	r3, [pc, #84]	@ (800c730 <_sbrk+0x60>)
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c6e4:	4b13      	ldr	r3, [pc, #76]	@ (800c734 <_sbrk+0x64>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d102      	bne.n	800c6f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c6ec:	4b11      	ldr	r3, [pc, #68]	@ (800c734 <_sbrk+0x64>)
 800c6ee:	4a12      	ldr	r2, [pc, #72]	@ (800c738 <_sbrk+0x68>)
 800c6f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c6f2:	4b10      	ldr	r3, [pc, #64]	@ (800c734 <_sbrk+0x64>)
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	18d3      	adds	r3, r2, r3
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d207      	bcs.n	800c710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c700:	f00f fb64 	bl	801bdcc <__errno>
 800c704:	0003      	movs	r3, r0
 800c706:	220c      	movs	r2, #12
 800c708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c70a:	2301      	movs	r3, #1
 800c70c:	425b      	negs	r3, r3
 800c70e:	e009      	b.n	800c724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c710:	4b08      	ldr	r3, [pc, #32]	@ (800c734 <_sbrk+0x64>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c716:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <_sbrk+0x64>)
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	18d2      	adds	r2, r2, r3
 800c71e:	4b05      	ldr	r3, [pc, #20]	@ (800c734 <_sbrk+0x64>)
 800c720:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c722:	68fb      	ldr	r3, [r7, #12]
}
 800c724:	0018      	movs	r0, r3
 800c726:	46bd      	mov	sp, r7
 800c728:	b006      	add	sp, #24
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20008000 	.word	0x20008000
 800c730:	00000400 	.word	0x00000400
 800c734:	200011b0 	.word	0x200011b0
 800c738:	20001388 	.word	0x20001388

0800c73c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c742:	4b12      	ldr	r3, [pc, #72]	@ (800c78c <SystemInit+0x50>)
 800c744:	2280      	movs	r2, #128	@ 0x80
 800c746:	0512      	lsls	r2, r2, #20
 800c748:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800c74a:	4a11      	ldr	r2, [pc, #68]	@ (800c790 <SystemInit+0x54>)
 800c74c:	2380      	movs	r3, #128	@ 0x80
 800c74e:	58d3      	ldr	r3, [r2, r3]
 800c750:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800c752:	4b0f      	ldr	r3, [pc, #60]	@ (800c790 <SystemInit+0x54>)
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	2380      	movs	r3, #128	@ 0x80
 800c75c:	025b      	lsls	r3, r3, #9
 800c75e:	4013      	ands	r3, r2
 800c760:	d010      	beq.n	800c784 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	22ff      	movs	r2, #255	@ 0xff
 800c766:	4013      	ands	r3, r2
 800c768:	2bcc      	cmp	r3, #204	@ 0xcc
 800c76a:	d00b      	beq.n	800c784 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	22ff      	movs	r2, #255	@ 0xff
 800c770:	4013      	ands	r3, r2
 800c772:	2baa      	cmp	r3, #170	@ 0xaa
 800c774:	d006      	beq.n	800c784 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800c776:	4b06      	ldr	r3, [pc, #24]	@ (800c790 <SystemInit+0x54>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4b05      	ldr	r3, [pc, #20]	@ (800c790 <SystemInit+0x54>)
 800c77c:	2180      	movs	r1, #128	@ 0x80
 800c77e:	02c9      	lsls	r1, r1, #11
 800c780:	430a      	orrs	r2, r1
 800c782:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800c784:	46c0      	nop			@ (mov r8, r8)
 800c786:	46bd      	mov	sp, r7
 800c788:	b002      	add	sp, #8
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	e000ed00 	.word	0xe000ed00
 800c790:	40022000 	.word	0x40022000

0800c794 <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0


	cnttemp++;
 800c79a:	4bc5      	ldr	r3, [pc, #788]	@ (800cab0 <temper+0x31c>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	4bc3      	ldr	r3, [pc, #780]	@ (800cab0 <temper+0x31c>)
 800c7a4:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 800c7a6:	4bc2      	ldr	r3, [pc, #776]	@ (800cab0 <temper+0x31c>)
 800c7a8:	781a      	ldrb	r2, [r3, #0]
 800c7aa:	4bc2      	ldr	r3, [pc, #776]	@ (800cab4 <temper+0x320>)
 800c7ac:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800c7ae:	4bc1      	ldr	r3, [pc, #772]	@ (800cab4 <temper+0x320>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b31      	cmp	r3, #49	@ 0x31
 800c7b4:	d801      	bhi.n	800c7ba <temper+0x26>
 800c7b6:	f000 fd8b 	bl	800d2d0 <temper+0xb3c>
		goto tempe05;  // Sí no tomes muestras
 800c7ba:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800c7bc:	4bbe      	ldr	r3, [pc, #760]	@ (800cab8 <temper+0x324>)
 800c7be:	0018      	movs	r0, r3
 800c7c0:	f7fa fdff 	bl	80073c2 <decwreg>
		decwreg(&retcncfe);
 800c7c4:	4bbd      	ldr	r3, [pc, #756]	@ (800cabc <temper+0x328>)
 800c7c6:	0018      	movs	r0, r3
 800c7c8:	f7fa fdfb 	bl	80073c2 <decwreg>
		decwreg(&retcncfr);
 800c7cc:	4bbc      	ldr	r3, [pc, #752]	@ (800cac0 <temper+0x32c>)
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	f7fa fdf7 	bl	80073c2 <decwreg>
		decwreg(&retcncfc);
 800c7d4:	4bbb      	ldr	r3, [pc, #748]	@ (800cac4 <temper+0x330>)
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	f7fa fdf3 	bl	80073c2 <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 800c7dc:	4bb4      	ldr	r3, [pc, #720]	@ (800cab0 <temper+0x31c>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	701a      	strb	r2, [r3, #0]

		/*
		 * PRUEBAS DEBUGGER // Comentar de ser necesario
		 */

		ADC1->CHSELR = 0;
 800c7e2:	4bb9      	ldr	r3, [pc, #740]	@ (800cac8 <temper+0x334>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 800c7e8:	4bb7      	ldr	r3, [pc, #732]	@ (800cac8 <temper+0x334>)
 800c7ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7ec:	4bb6      	ldr	r3, [pc, #728]	@ (800cac8 <temper+0x334>)
 800c7ee:	2180      	movs	r1, #128	@ 0x80
 800c7f0:	0209      	lsls	r1, r1, #8
 800c7f2:	430a      	orrs	r2, r1
 800c7f4:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD ();
 800c7f6:	f000 ff0f 	bl	800d618 <capturaAD>
		tRTP1000[cntmues] = adcramh;
 800c7fa:	4bb4      	ldr	r3, [pc, #720]	@ (800cacc <temper+0x338>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	001a      	movs	r2, r3
 800c800:	4bb3      	ldr	r3, [pc, #716]	@ (800cad0 <temper+0x33c>)
 800c802:	8819      	ldrh	r1, [r3, #0]
 800c804:	4bb3      	ldr	r3, [pc, #716]	@ (800cad4 <temper+0x340>)
 800c806:	0052      	lsls	r2, r2, #1
 800c808:	52d1      	strh	r1, [r2, r3]
		if(cntmues == 7){
 800c80a:	4bb0      	ldr	r3, [pc, #704]	@ (800cacc <temper+0x338>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b07      	cmp	r3, #7
 800c810:	d171      	bne.n	800c8f6 <temper+0x162>
			tRTP1000_p = 0;
 800c812:	4bb1      	ldr	r3, [pc, #708]	@ (800cad8 <temper+0x344>)
 800c814:	2200      	movs	r2, #0
 800c816:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800c818:	230f      	movs	r3, #15
 800c81a:	18fb      	adds	r3, r7, r3
 800c81c:	2200      	movs	r2, #0
 800c81e:	701a      	strb	r2, [r3, #0]
 800c820:	e010      	b.n	800c844 <temper+0xb0>
				tRTP1000_p += tRTP1000[i];
 800c822:	210f      	movs	r1, #15
 800c824:	187b      	adds	r3, r7, r1
 800c826:	781a      	ldrb	r2, [r3, #0]
 800c828:	4baa      	ldr	r3, [pc, #680]	@ (800cad4 <temper+0x340>)
 800c82a:	0052      	lsls	r2, r2, #1
 800c82c:	5ad2      	ldrh	r2, [r2, r3]
 800c82e:	4baa      	ldr	r3, [pc, #680]	@ (800cad8 <temper+0x344>)
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	18d3      	adds	r3, r2, r3
 800c834:	b29a      	uxth	r2, r3
 800c836:	4ba8      	ldr	r3, [pc, #672]	@ (800cad8 <temper+0x344>)
 800c838:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800c83a:	187b      	adds	r3, r7, r1
 800c83c:	781a      	ldrb	r2, [r3, #0]
 800c83e:	187b      	adds	r3, r7, r1
 800c840:	3201      	adds	r2, #1
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	230f      	movs	r3, #15
 800c846:	18fb      	adds	r3, r7, r3
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	2b07      	cmp	r3, #7
 800c84c:	d9e9      	bls.n	800c822 <temper+0x8e>
			}

			tRTP1000_p = tRTP1000_p/8;
 800c84e:	4ba2      	ldr	r3, [pc, #648]	@ (800cad8 <temper+0x344>)
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	08db      	lsrs	r3, r3, #3
 800c854:	b29a      	uxth	r2, r3
 800c856:	4ba0      	ldr	r3, [pc, #640]	@ (800cad8 <temper+0x344>)
 800c858:	801a      	strh	r2, [r3, #0]
			vRTP1000_p = 330*tRTP1000_p/1024;
 800c85a:	4b9f      	ldr	r3, [pc, #636]	@ (800cad8 <temper+0x344>)
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	001a      	movs	r2, r3
 800c860:	0013      	movs	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	189b      	adds	r3, r3, r2
 800c866:	015a      	lsls	r2, r3, #5
 800c868:	189b      	adds	r3, r3, r2
 800c86a:	005b      	lsls	r3, r3, #1
 800c86c:	d502      	bpl.n	800c874 <temper+0xe0>
 800c86e:	4a9b      	ldr	r2, [pc, #620]	@ (800cadc <temper+0x348>)
 800c870:	4694      	mov	ip, r2
 800c872:	4463      	add	r3, ip
 800c874:	129b      	asrs	r3, r3, #10
 800c876:	b29a      	uxth	r2, r3
 800c878:	4b99      	ldr	r3, [pc, #612]	@ (800cae0 <temper+0x34c>)
 800c87a:	801a      	strh	r2, [r3, #0]
			uint32_t mul1 = vRTP1000_p+(R169/1000)*VSEN/R170;
 800c87c:	4b98      	ldr	r3, [pc, #608]	@ (800cae0 <temper+0x34c>)
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	4a98      	ldr	r2, [pc, #608]	@ (800cae4 <temper+0x350>)
 800c882:	4694      	mov	ip, r2
 800c884:	4463      	add	r3, ip
 800c886:	607b      	str	r3, [r7, #4]
			uint32_t mul2 = ((2*R169/R170+1000)*VSEN)/1000;
 800c888:	4b97      	ldr	r3, [pc, #604]	@ (800cae8 <temper+0x354>)
 800c88a:	603b      	str	r3, [r7, #0]
			constantRTP = 1000*mul1/mul2;
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	0013      	movs	r3, r2
 800c890:	015b      	lsls	r3, r3, #5
 800c892:	1a9b      	subs	r3, r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	189b      	adds	r3, r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	0018      	movs	r0, r3
 800c89e:	f7f3 fc3b 	bl	8000118 <__udivsi3>
 800c8a2:	0003      	movs	r3, r0
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	4b91      	ldr	r3, [pc, #580]	@ (800caec <temper+0x358>)
 800c8a8:	801a      	strh	r2, [r3, #0]
			RTP1000 = constantRTP*R157/(1000-constantRTP);
 800c8aa:	4b90      	ldr	r3, [pc, #576]	@ (800caec <temper+0x358>)
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	001a      	movs	r2, r3
 800c8b0:	0013      	movs	r3, r2
 800c8b2:	015b      	lsls	r3, r3, #5
 800c8b4:	1a9b      	subs	r3, r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	189b      	adds	r3, r3, r2
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	0018      	movs	r0, r3
 800c8be:	4b8b      	ldr	r3, [pc, #556]	@ (800caec <temper+0x358>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	001a      	movs	r2, r3
 800c8c4:	23fa      	movs	r3, #250	@ 0xfa
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	1a9b      	subs	r3, r3, r2
 800c8ca:	0019      	movs	r1, r3
 800c8cc:	f7f3 fcae 	bl	800022c <__divsi3>
 800c8d0:	0003      	movs	r3, r0
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	4b86      	ldr	r3, [pc, #536]	@ (800caf0 <temper+0x35c>)
 800c8d6:	801a      	strh	r2, [r3, #0]
			temperatureRTP = pendienteRTP*RTP1000/100 + (ordenadaRTP*10) ;
 800c8d8:	4b85      	ldr	r3, [pc, #532]	@ (800caf0 <temper+0x35c>)
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	021b      	lsls	r3, r3, #8
 800c8de:	2164      	movs	r1, #100	@ 0x64
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f7f3 fca3 	bl	800022c <__divsi3>
 800c8e6:	0003      	movs	r3, r0
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	4a82      	ldr	r2, [pc, #520]	@ (800caf4 <temper+0x360>)
 800c8ec:	4694      	mov	ip, r2
 800c8ee:	4463      	add	r3, ip
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	4b81      	ldr	r3, [pc, #516]	@ (800caf8 <temper+0x364>)
 800c8f4:	801a      	strh	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800c8f6:	4b74      	ldr	r3, [pc, #464]	@ (800cac8 <temper+0x334>)
 800c8f8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c8fa:	4b73      	ldr	r3, [pc, #460]	@ (800cac8 <temper+0x334>)
 800c8fc:	2280      	movs	r2, #128	@ 0x80
 800c8fe:	01d2      	lsls	r2, r2, #7
 800c900:	400a      	ands	r2, r1
 800c902:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c904:	4b70      	ldr	r3, [pc, #448]	@ (800cac8 <temper+0x334>)
 800c906:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c908:	4b6f      	ldr	r3, [pc, #444]	@ (800cac8 <temper+0x334>)
 800c90a:	2280      	movs	r2, #128	@ 0x80
 800c90c:	00d2      	lsls	r2, r2, #3
 800c90e:	400a      	ands	r2, r1
 800c910:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c912:	4b6d      	ldr	r3, [pc, #436]	@ (800cac8 <temper+0x334>)
 800c914:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c916:	4b6c      	ldr	r3, [pc, #432]	@ (800cac8 <temper+0x334>)
 800c918:	2280      	movs	r2, #128	@ 0x80
 800c91a:	02d2      	lsls	r2, r2, #11
 800c91c:	400a      	ands	r2, r1
 800c91e:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 800c920:	4b69      	ldr	r3, [pc, #420]	@ (800cac8 <temper+0x334>)
 800c922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c924:	4b68      	ldr	r3, [pc, #416]	@ (800cac8 <temper+0x334>)
 800c926:	2101      	movs	r1, #1
 800c928:	430a      	orrs	r2, r1
 800c92a:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 800c92c:	f000 fe74 	bl	800d618 <capturaAD>

//lookshort_S4:
		Y_A();
 800c930:	f000 fee2 	bl	800d6f8 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 800c934:	4b5f      	ldr	r3, [pc, #380]	@ (800cab4 <temper+0x320>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d005      	beq.n	800c948 <temper+0x1b4>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c93c:	4b6f      	ldr	r3, [pc, #444]	@ (800cafc <temper+0x368>)
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	4a6f      	ldr	r2, [pc, #444]	@ (800cb00 <temper+0x36c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d808      	bhi.n	800c958 <temper+0x1c4>
			goto lookopen_S04;          // No, revise límite inferior
 800c946:	e010      	b.n	800c96a <temper+0x1d6>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 800c948:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c94a:	4b6c      	ldr	r3, [pc, #432]	@ (800cafc <temper+0x368>)
 800c94c:	881a      	ldrh	r2, [r3, #0]
 800c94e:	23e2      	movs	r3, #226	@ 0xe2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	429a      	cmp	r2, r3
 800c954:	d308      	bcc.n	800c968 <temper+0x1d4>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 800c956:	e000      	b.n	800c95a <temper+0x1c6>
		goto sens_short_S04;
 800c958:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800c95a:	496a      	ldr	r1, [pc, #424]	@ (800cb04 <temper+0x370>)
 800c95c:	486a      	ldr	r0, [pc, #424]	@ (800cb08 <temper+0x374>)
 800c95e:	2307      	movs	r3, #7
 800c960:	2205      	movs	r2, #5
 800c962:	f000 fedf 	bl	800d724 <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 800c966:	e01c      	b.n	800c9a2 <temper+0x20e>
			goto lookopen_S04;          // No, revise límite inferior
 800c968:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 800c96a:	4b68      	ldr	r3, [pc, #416]	@ (800cb0c <temper+0x378>)
 800c96c:	781a      	ldrb	r2, [r3, #0]
 800c96e:	4b51      	ldr	r3, [pc, #324]	@ (800cab4 <temper+0x320>)
 800c970:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c972:	4b50      	ldr	r3, [pc, #320]	@ (800cab4 <temper+0x320>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d004      	beq.n	800c984 <temper+0x1f0>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c97a:	4b60      	ldr	r3, [pc, #384]	@ (800cafc <temper+0x368>)
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c980:	d908      	bls.n	800c994 <temper+0x200>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800c982:	e013      	b.n	800c9ac <temper+0x218>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 800c984:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 800c986:	4b5d      	ldr	r3, [pc, #372]	@ (800cafc <temper+0x368>)
 800c988:	881a      	ldrh	r2, [r3, #0]
 800c98a:	23d7      	movs	r3, #215	@ 0xd7
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	429a      	cmp	r2, r3
 800c990:	d20b      	bcs.n	800c9aa <temper+0x216>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800c992:	e000      	b.n	800c996 <temper+0x202>
		goto sens_open_S04;
 800c994:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 800c996:	495c      	ldr	r1, [pc, #368]	@ (800cb08 <temper+0x374>)
 800c998:	485a      	ldr	r0, [pc, #360]	@ (800cb04 <temper+0x370>)
 800c99a:	2305      	movs	r3, #5
 800c99c:	2207      	movs	r2, #7
 800c99e:	f000 fec1 	bl	800d724 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800c9a2:	4b48      	ldr	r3, [pc, #288]	@ (800cac4 <temper+0x330>)
 800c9a4:	220f      	movs	r2, #15
 800c9a6:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 800c9a8:	e010      	b.n	800c9cc <temper+0x238>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800c9aa:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 800c9ac:	4b45      	ldr	r3, [pc, #276]	@ (800cac4 <temper+0x330>)
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	4b40      	ldr	r3, [pc, #256]	@ (800cab4 <temper+0x320>)
 800c9b2:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 800c9b4:	4b3f      	ldr	r3, [pc, #252]	@ (800cab4 <temper+0x320>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d106      	bne.n	800c9ca <temper+0x236>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800c9bc:	4951      	ldr	r1, [pc, #324]	@ (800cb04 <temper+0x370>)
 800c9be:	4852      	ldr	r0, [pc, #328]	@ (800cb08 <temper+0x374>)
 800c9c0:	2307      	movs	r3, #7
 800c9c2:	2205      	movs	r2, #5
 800c9c4:	f000 fec9 	bl	800d75a <Bclear_Clear_trfst>
 800c9c8:	e000      	b.n	800c9cc <temper+0x238>
			goto tempeLoad_s04;
 800c9ca:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c9cc:	4b3f      	ldr	r3, [pc, #252]	@ (800cacc <temper+0x338>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	001a      	movs	r2, r3
 800c9d2:	4b3f      	ldr	r3, [pc, #252]	@ (800cad0 <temper+0x33c>)
 800c9d4:	8819      	ldrh	r1, [r3, #0]
 800c9d6:	4b4e      	ldr	r3, [pc, #312]	@ (800cb10 <temper+0x37c>)
 800c9d8:	0052      	lsls	r2, r2, #1
 800c9da:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c9dc:	4b3a      	ldr	r3, [pc, #232]	@ (800cac8 <temper+0x334>)
 800c9de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c9e0:	4b39      	ldr	r3, [pc, #228]	@ (800cac8 <temper+0x334>)
 800c9e2:	2280      	movs	r2, #128	@ 0x80
 800c9e4:	00d2      	lsls	r2, r2, #3
 800c9e6:	400a      	ands	r2, r1
 800c9e8:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c9ea:	4b37      	ldr	r3, [pc, #220]	@ (800cac8 <temper+0x334>)
 800c9ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9ee:	4b36      	ldr	r3, [pc, #216]	@ (800cac8 <temper+0x334>)
 800c9f0:	2101      	movs	r1, #1
 800c9f2:	400a      	ands	r2, r1
 800c9f4:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c9f6:	4b34      	ldr	r3, [pc, #208]	@ (800cac8 <temper+0x334>)
 800c9f8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c9fa:	4b33      	ldr	r3, [pc, #204]	@ (800cac8 <temper+0x334>)
 800c9fc:	2280      	movs	r2, #128	@ 0x80
 800c9fe:	02d2      	lsls	r2, r2, #11
 800ca00:	400a      	ands	r2, r1
 800ca02:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 800ca04:	4b30      	ldr	r3, [pc, #192]	@ (800cac8 <temper+0x334>)
 800ca06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca08:	4b2f      	ldr	r3, [pc, #188]	@ (800cac8 <temper+0x334>)
 800ca0a:	2180      	movs	r1, #128	@ 0x80
 800ca0c:	02c9      	lsls	r1, r1, #11
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 800ca12:	f000 fe01 	bl	800d618 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 800ca16:	f000 fe6f 	bl	800d6f8 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800ca1a:	4b26      	ldr	r3, [pc, #152]	@ (800cab4 <temper+0x320>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d005      	beq.n	800ca2e <temper+0x29a>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800ca22:	4b36      	ldr	r3, [pc, #216]	@ (800cafc <temper+0x368>)
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	4a3b      	ldr	r2, [pc, #236]	@ (800cb14 <temper+0x380>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d808      	bhi.n	800ca3e <temper+0x2aa>
		goto lookopen_S03;      // No, revise límite inferior
 800ca2c:	e010      	b.n	800ca50 <temper+0x2bc>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 800ca2e:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800ca30:	4b32      	ldr	r3, [pc, #200]	@ (800cafc <temper+0x368>)
 800ca32:	881a      	ldrh	r2, [r3, #0]
 800ca34:	23e2      	movs	r3, #226	@ 0xe2
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d308      	bcc.n	800ca4e <temper+0x2ba>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 800ca3c:	e000      	b.n	800ca40 <temper+0x2ac>
	goto sens_short_S03;
 800ca3e:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800ca40:	4930      	ldr	r1, [pc, #192]	@ (800cb04 <temper+0x370>)
 800ca42:	4830      	ldr	r0, [pc, #192]	@ (800cb04 <temper+0x370>)
 800ca44:	2305      	movs	r3, #5
 800ca46:	2204      	movs	r2, #4
 800ca48:	f000 fe6c 	bl	800d724 <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 800ca4c:	e01c      	b.n	800ca88 <temper+0x2f4>
			goto lookopen_S03; // No, revise límite inferior
 800ca4e:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800ca50:	4b2e      	ldr	r3, [pc, #184]	@ (800cb0c <temper+0x378>)
 800ca52:	781a      	ldrb	r2, [r3, #0]
 800ca54:	4b17      	ldr	r3, [pc, #92]	@ (800cab4 <temper+0x320>)
 800ca56:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800ca58:	4b16      	ldr	r3, [pc, #88]	@ (800cab4 <temper+0x320>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d004      	beq.n	800ca6a <temper+0x2d6>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800ca60:	4b26      	ldr	r3, [pc, #152]	@ (800cafc <temper+0x368>)
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca66:	d908      	bls.n	800ca7a <temper+0x2e6>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800ca68:	e013      	b.n	800ca92 <temper+0x2fe>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 800ca6a:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800ca6c:	4b23      	ldr	r3, [pc, #140]	@ (800cafc <temper+0x368>)
 800ca6e:	881a      	ldrh	r2, [r3, #0]
 800ca70:	23d7      	movs	r3, #215	@ 0xd7
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d20b      	bcs.n	800ca90 <temper+0x2fc>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 800ca78:	e000      	b.n	800ca7c <temper+0x2e8>
		goto sens_open_S03;
 800ca7a:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 800ca7c:	4921      	ldr	r1, [pc, #132]	@ (800cb04 <temper+0x370>)
 800ca7e:	4821      	ldr	r0, [pc, #132]	@ (800cb04 <temper+0x370>)
 800ca80:	2304      	movs	r3, #4
 800ca82:	2205      	movs	r2, #5
 800ca84:	f000 fe4e 	bl	800d724 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 800ca88:	4b0d      	ldr	r3, [pc, #52]	@ (800cac0 <temper+0x32c>)
 800ca8a:	220f      	movs	r2, #15
 800ca8c:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800ca8e:	e044      	b.n	800cb1a <temper+0x386>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800ca90:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800ca92:	4b0b      	ldr	r3, [pc, #44]	@ (800cac0 <temper+0x32c>)
 800ca94:	781a      	ldrb	r2, [r3, #0]
 800ca96:	4b07      	ldr	r3, [pc, #28]	@ (800cab4 <temper+0x320>)
 800ca98:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 800ca9a:	4b06      	ldr	r3, [pc, #24]	@ (800cab4 <temper+0x320>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d13a      	bne.n	800cb18 <temper+0x384>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800caa2:	4918      	ldr	r1, [pc, #96]	@ (800cb04 <temper+0x370>)
 800caa4:	4817      	ldr	r0, [pc, #92]	@ (800cb04 <temper+0x370>)
 800caa6:	2305      	movs	r3, #5
 800caa8:	2204      	movs	r2, #4
 800caaa:	f000 fe56 	bl	800d75a <Bclear_Clear_trfst>
 800caae:	e034      	b.n	800cb1a <temper+0x386>
 800cab0:	20000bcf 	.word	0x20000bcf
 800cab4:	20001202 	.word	0x20001202
 800cab8:	20000bd4 	.word	0x20000bd4
 800cabc:	20000bd5 	.word	0x20000bd5
 800cac0:	20000c62 	.word	0x20000c62
 800cac4:	20000c63 	.word	0x20000c63
 800cac8:	40012400 	.word	0x40012400
 800cacc:	20000bd0 	.word	0x20000bd0
 800cad0:	20000b70 	.word	0x20000b70
 800cad4:	20000260 	.word	0x20000260
 800cad8:	200011b4 	.word	0x200011b4
 800cadc:	000003ff 	.word	0x000003ff
 800cae0:	200011b6 	.word	0x200011b6
 800cae4:	000003e2 	.word	0x000003e2
 800cae8:	00000903 	.word	0x00000903
 800caec:	200011b8 	.word	0x200011b8
 800caf0:	200011ba 	.word	0x200011ba
 800caf4:	fffff600 	.word	0xfffff600
 800caf8:	200011bc 	.word	0x200011bc
 800cafc:	20001204 	.word	0x20001204
 800cb00:	000003ad 	.word	0x000003ad
 800cb04:	20000b90 	.word	0x20000b90
 800cb08:	20000b98 	.word	0x20000b98
 800cb0c:	20000ba8 	.word	0x20000ba8
 800cb10:	200011c0 	.word	0x200011c0
 800cb14:	000003b5 	.word	0x000003b5
			goto tempeLoad_s03;
 800cb18:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cb1a:	4bd0      	ldr	r3, [pc, #832]	@ (800ce5c <temper+0x6c8>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	001a      	movs	r2, r3
 800cb20:	4bcf      	ldr	r3, [pc, #828]	@ (800ce60 <temper+0x6cc>)
 800cb22:	8819      	ldrh	r1, [r3, #0]
 800cb24:	4bcf      	ldr	r3, [pc, #828]	@ (800ce64 <temper+0x6d0>)
 800cb26:	0052      	lsls	r2, r2, #1
 800cb28:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800cb2a:	4bcf      	ldr	r3, [pc, #828]	@ (800ce68 <temper+0x6d4>)
 800cb2c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cb2e:	4bce      	ldr	r3, [pc, #824]	@ (800ce68 <temper+0x6d4>)
 800cb30:	2280      	movs	r2, #128	@ 0x80
 800cb32:	01d2      	lsls	r2, r2, #7
 800cb34:	400a      	ands	r2, r1
 800cb36:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800cb38:	4bcb      	ldr	r3, [pc, #812]	@ (800ce68 <temper+0x6d4>)
 800cb3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cb3c:	4bca      	ldr	r3, [pc, #808]	@ (800ce68 <temper+0x6d4>)
 800cb3e:	2101      	movs	r1, #1
 800cb40:	400a      	ands	r2, r1
 800cb42:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cb44:	4bc8      	ldr	r3, [pc, #800]	@ (800ce68 <temper+0x6d4>)
 800cb46:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cb48:	4bc7      	ldr	r3, [pc, #796]	@ (800ce68 <temper+0x6d4>)
 800cb4a:	2280      	movs	r2, #128	@ 0x80
 800cb4c:	02d2      	lsls	r2, r2, #11
 800cb4e:	400a      	ands	r2, r1
 800cb50:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 800cb52:	4bc5      	ldr	r3, [pc, #788]	@ (800ce68 <temper+0x6d4>)
 800cb54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cb56:	4bc4      	ldr	r3, [pc, #784]	@ (800ce68 <temper+0x6d4>)
 800cb58:	2180      	movs	r1, #128	@ 0x80
 800cb5a:	00c9      	lsls	r1, r1, #3
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 800cb60:	f000 fd5a 	bl	800d618 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 800cb64:	f000 fdc8 	bl	800d6f8 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 800cb68:	4bc0      	ldr	r3, [pc, #768]	@ (800ce6c <temper+0x6d8>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d005      	beq.n	800cb7c <temper+0x3e8>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cb70:	4bbf      	ldr	r3, [pc, #764]	@ (800ce70 <temper+0x6dc>)
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	4abf      	ldr	r2, [pc, #764]	@ (800ce74 <temper+0x6e0>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d808      	bhi.n	800cb8c <temper+0x3f8>
			goto lookopen;     // No, revise límite inferior
 800cb7a:	e010      	b.n	800cb9e <temper+0x40a>
			goto cmp_man_01;   // En autoprueba deja estos límites
 800cb7c:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cb7e:	4bbc      	ldr	r3, [pc, #752]	@ (800ce70 <temper+0x6dc>)
 800cb80:	881a      	ldrh	r2, [r3, #0]
 800cb82:	23e2      	movs	r3, #226	@ 0xe2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d308      	bcc.n	800cb9c <temper+0x408>
			goto lookopen;     // No, revise límite inferior

sens_short:
 800cb8a:	e000      	b.n	800cb8e <temper+0x3fa>
		goto sens_short;
 800cb8c:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800cb8e:	49ba      	ldr	r1, [pc, #744]	@ (800ce78 <temper+0x6e4>)
 800cb90:	48b9      	ldr	r0, [pc, #740]	@ (800ce78 <temper+0x6e4>)
 800cb92:	2301      	movs	r3, #1
 800cb94:	2200      	movs	r2, #0
 800cb96:	f000 fdc5 	bl	800d724 <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 800cb9a:	e01c      	b.n	800cbd6 <temper+0x442>
			goto lookopen;     // No, revise límite inferior
 800cb9c:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 800cb9e:	4bb7      	ldr	r3, [pc, #732]	@ (800ce7c <temper+0x6e8>)
 800cba0:	781a      	ldrb	r2, [r3, #0]
 800cba2:	4bb2      	ldr	r3, [pc, #712]	@ (800ce6c <temper+0x6d8>)
 800cba4:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cba6:	4bb1      	ldr	r3, [pc, #708]	@ (800ce6c <temper+0x6d8>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d004      	beq.n	800cbb8 <temper+0x424>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cbae:	4bb0      	ldr	r3, [pc, #704]	@ (800ce70 <temper+0x6dc>)
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb4:	d908      	bls.n	800cbc8 <temper+0x434>
			goto sens_ok;       // Sí, indica sensor OK
 800cbb6:	e016      	b.n	800cbe6 <temper+0x452>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800cbb8:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cbba:	4bad      	ldr	r3, [pc, #692]	@ (800ce70 <temper+0x6dc>)
 800cbbc:	881a      	ldrh	r2, [r3, #0]
 800cbbe:	23d7      	movs	r3, #215	@ 0xd7
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d20e      	bcs.n	800cbe4 <temper+0x450>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800cbc6:	e000      	b.n	800cbca <temper+0x436>
		goto sens_open;
 800cbc8:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800cbca:	49ab      	ldr	r1, [pc, #684]	@ (800ce78 <temper+0x6e4>)
 800cbcc:	48aa      	ldr	r0, [pc, #680]	@ (800ce78 <temper+0x6e4>)
 800cbce:	2300      	movs	r3, #0
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f000 fda7 	bl	800d724 <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800cbd6:	4baa      	ldr	r3, [pc, #680]	@ (800ce80 <temper+0x6ec>)
 800cbd8:	220f      	movs	r2, #15
 800cbda:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 800cbdc:	4ba9      	ldr	r3, [pc, #676]	@ (800ce84 <temper+0x6f0>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 800cbe2:	e010      	b.n	800cc06 <temper+0x472>
			goto sens_ok;       // Sí, indica sensor OK
 800cbe4:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800cbe6:	4ba6      	ldr	r3, [pc, #664]	@ (800ce80 <temper+0x6ec>)
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	4ba0      	ldr	r3, [pc, #640]	@ (800ce6c <temper+0x6d8>)
 800cbec:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 800cbee:	4b9f      	ldr	r3, [pc, #636]	@ (800ce6c <temper+0x6d8>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d106      	bne.n	800cc04 <temper+0x470>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800cbf6:	49a0      	ldr	r1, [pc, #640]	@ (800ce78 <temper+0x6e4>)
 800cbf8:	489f      	ldr	r0, [pc, #636]	@ (800ce78 <temper+0x6e4>)
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f000 fdac 	bl	800d75a <Bclear_Clear_trfst>
 800cc02:	e000      	b.n	800cc06 <temper+0x472>
			goto tempe13;
 800cc04:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cc06:	4b95      	ldr	r3, [pc, #596]	@ (800ce5c <temper+0x6c8>)
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	001a      	movs	r2, r3
 800cc0c:	4b94      	ldr	r3, [pc, #592]	@ (800ce60 <temper+0x6cc>)
 800cc0e:	8819      	ldrh	r1, [r3, #0]
 800cc10:	4b9d      	ldr	r3, [pc, #628]	@ (800ce88 <temper+0x6f4>)
 800cc12:	0052      	lsls	r2, r2, #1
 800cc14:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800cc16:	4b94      	ldr	r3, [pc, #592]	@ (800ce68 <temper+0x6d4>)
 800cc18:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cc1a:	4b93      	ldr	r3, [pc, #588]	@ (800ce68 <temper+0x6d4>)
 800cc1c:	2280      	movs	r2, #128	@ 0x80
 800cc1e:	00d2      	lsls	r2, r2, #3
 800cc20:	400a      	ands	r2, r1
 800cc22:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800cc24:	4b90      	ldr	r3, [pc, #576]	@ (800ce68 <temper+0x6d4>)
 800cc26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc28:	4b8f      	ldr	r3, [pc, #572]	@ (800ce68 <temper+0x6d4>)
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	400a      	ands	r2, r1
 800cc2e:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cc30:	4b8d      	ldr	r3, [pc, #564]	@ (800ce68 <temper+0x6d4>)
 800cc32:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cc34:	4b8c      	ldr	r3, [pc, #560]	@ (800ce68 <temper+0x6d4>)
 800cc36:	2280      	movs	r2, #128	@ 0x80
 800cc38:	02d2      	lsls	r2, r2, #11
 800cc3a:	400a      	ands	r2, r1
 800cc3c:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800cc3e:	4b8a      	ldr	r3, [pc, #552]	@ (800ce68 <temper+0x6d4>)
 800cc40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc42:	4b89      	ldr	r3, [pc, #548]	@ (800ce68 <temper+0x6d4>)
 800cc44:	2180      	movs	r1, #128	@ 0x80
 800cc46:	01c9      	lsls	r1, r1, #7
 800cc48:	430a      	orrs	r2, r1
 800cc4a:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800cc4c:	f000 fce4 	bl	800d618 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800cc50:	f000 fd52 	bl	800d6f8 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cc54:	4b85      	ldr	r3, [pc, #532]	@ (800ce6c <temper+0x6d8>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d005      	beq.n	800cc68 <temper+0x4d4>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cc5c:	4b84      	ldr	r3, [pc, #528]	@ (800ce70 <temper+0x6dc>)
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	4a84      	ldr	r2, [pc, #528]	@ (800ce74 <temper+0x6e0>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d808      	bhi.n	800cc78 <temper+0x4e4>
		goto lookopene;    // No, revise límite inferior
 800cc66:	e010      	b.n	800cc8a <temper+0x4f6>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800cc68:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cc6a:	4b81      	ldr	r3, [pc, #516]	@ (800ce70 <temper+0x6dc>)
 800cc6c:	881a      	ldrh	r2, [r3, #0]
 800cc6e:	23e2      	movs	r3, #226	@ 0xe2
 800cc70:	005b      	lsls	r3, r3, #1
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d308      	bcc.n	800cc88 <temper+0x4f4>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800cc76:	e000      	b.n	800cc7a <temper+0x4e6>
	goto senshorte;
 800cc78:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cc7a:	497f      	ldr	r1, [pc, #508]	@ (800ce78 <temper+0x6e4>)
 800cc7c:	487e      	ldr	r0, [pc, #504]	@ (800ce78 <temper+0x6e4>)
 800cc7e:	2303      	movs	r3, #3
 800cc80:	2202      	movs	r2, #2
 800cc82:	f000 fd4f 	bl	800d724 <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800cc86:	e01c      	b.n	800ccc2 <temper+0x52e>
		goto lookopene;    // No, revise límite inferior
 800cc88:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800cc8a:	4b7c      	ldr	r3, [pc, #496]	@ (800ce7c <temper+0x6e8>)
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	4b77      	ldr	r3, [pc, #476]	@ (800ce6c <temper+0x6d8>)
 800cc90:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800cc92:	4b76      	ldr	r3, [pc, #472]	@ (800ce6c <temper+0x6d8>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d004      	beq.n	800cca4 <temper+0x510>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cc9a:	4b75      	ldr	r3, [pc, #468]	@ (800ce70 <temper+0x6dc>)
 800cc9c:	881b      	ldrh	r3, [r3, #0]
 800cc9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca0:	d908      	bls.n	800ccb4 <temper+0x520>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800cca2:	e013      	b.n	800cccc <temper+0x538>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800cca4:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cca6:	4b72      	ldr	r3, [pc, #456]	@ (800ce70 <temper+0x6dc>)
 800cca8:	881a      	ldrh	r2, [r3, #0]
 800ccaa:	23d7      	movs	r3, #215	@ 0xd7
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d20b      	bcs.n	800ccca <temper+0x536>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800ccb2:	e000      	b.n	800ccb6 <temper+0x522>
	goto sens_opene;
 800ccb4:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800ccb6:	4970      	ldr	r1, [pc, #448]	@ (800ce78 <temper+0x6e4>)
 800ccb8:	486f      	ldr	r0, [pc, #444]	@ (800ce78 <temper+0x6e4>)
 800ccba:	2302      	movs	r3, #2
 800ccbc:	2203      	movs	r2, #3
 800ccbe:	f000 fd31 	bl	800d724 <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800ccc2:	4b72      	ldr	r3, [pc, #456]	@ (800ce8c <temper+0x6f8>)
 800ccc4:	2214      	movs	r2, #20
 800ccc6:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800ccc8:	e010      	b.n	800ccec <temper+0x558>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800ccca:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800cccc:	4b6f      	ldr	r3, [pc, #444]	@ (800ce8c <temper+0x6f8>)
 800ccce:	781a      	ldrb	r2, [r3, #0]
 800ccd0:	4b66      	ldr	r3, [pc, #408]	@ (800ce6c <temper+0x6d8>)
 800ccd2:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800ccd4:	4b65      	ldr	r3, [pc, #404]	@ (800ce6c <temper+0x6d8>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d106      	bne.n	800ccea <temper+0x556>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800ccdc:	4966      	ldr	r1, [pc, #408]	@ (800ce78 <temper+0x6e4>)
 800ccde:	4866      	ldr	r0, [pc, #408]	@ (800ce78 <temper+0x6e4>)
 800cce0:	2303      	movs	r3, #3
 800cce2:	2202      	movs	r2, #2
 800cce4:	f000 fd39 	bl	800d75a <Bclear_Clear_trfst>
 800cce8:	e000      	b.n	800ccec <temper+0x558>
		goto tempe16;
 800ccea:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800ccec:	4b62      	ldr	r3, [pc, #392]	@ (800ce78 <temper+0x6e4>)
 800ccee:	789b      	ldrb	r3, [r3, #2]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d004      	beq.n	800ccfe <temper+0x56a>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800ccf4:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800ccf6:	4b5a      	ldr	r3, [pc, #360]	@ (800ce60 <temper+0x6cc>)
 800ccf8:	220a      	movs	r2, #10
 800ccfa:	801a      	strh	r2, [r3, #0]
 800ccfc:	e000      	b.n	800cd00 <temper+0x56c>
	goto tempe16a;                 // No, revisa temperatura alta
 800ccfe:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cd00:	4b56      	ldr	r3, [pc, #344]	@ (800ce5c <temper+0x6c8>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	001a      	movs	r2, r3
 800cd06:	4b56      	ldr	r3, [pc, #344]	@ (800ce60 <temper+0x6cc>)
 800cd08:	8819      	ldrh	r1, [r3, #0]
 800cd0a:	4b61      	ldr	r3, [pc, #388]	@ (800ce90 <temper+0x6fc>)
 800cd0c:	0052      	lsls	r2, r2, #1
 800cd0e:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800cd10:	4b52      	ldr	r3, [pc, #328]	@ (800ce5c <temper+0x6c8>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	3301      	adds	r3, #1
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	4b50      	ldr	r3, [pc, #320]	@ (800ce5c <temper+0x6c8>)
 800cd1a:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800cd1c:	4b4f      	ldr	r3, [pc, #316]	@ (800ce5c <temper+0x6c8>)
 800cd1e:	781a      	ldrb	r2, [r3, #0]
 800cd20:	4b52      	ldr	r3, [pc, #328]	@ (800ce6c <temper+0x6d8>)
 800cd22:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800cd24:	4b51      	ldr	r3, [pc, #324]	@ (800ce6c <temper+0x6d8>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	2b07      	cmp	r3, #7
 800cd2a:	d800      	bhi.n	800cd2e <temper+0x59a>
 800cd2c:	e2d2      	b.n	800d2d4 <temper+0xb40>
			goto tempe17;  // Si, obten el promedio
 800cd2e:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800cd30:	4b58      	ldr	r3, [pc, #352]	@ (800ce94 <temper+0x700>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cd36:	230e      	movs	r3, #14
 800cd38:	18fb      	adds	r3, r7, r3
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	e010      	b.n	800cd62 <temper+0x5ce>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800cd40:	210e      	movs	r1, #14
 800cd42:	187b      	adds	r3, r7, r1
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	4b54      	ldr	r3, [pc, #336]	@ (800ce98 <temper+0x704>)
 800cd48:	0052      	lsls	r2, r2, #1
 800cd4a:	5ad2      	ldrh	r2, [r2, r3]
 800cd4c:	4b51      	ldr	r3, [pc, #324]	@ (800ce94 <temper+0x700>)
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	18d3      	adds	r3, r2, r3
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	4b4f      	ldr	r3, [pc, #316]	@ (800ce94 <temper+0x700>)
 800cd56:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cd58:	187b      	adds	r3, r7, r1
 800cd5a:	781a      	ldrb	r2, [r3, #0]
 800cd5c:	187b      	adds	r3, r7, r1
 800cd5e:	3201      	adds	r2, #1
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	230e      	movs	r3, #14
 800cd64:	18fb      	adds	r3, r7, r3
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b07      	cmp	r3, #7
 800cd6a:	d9e9      	bls.n	800cd40 <temper+0x5ac>
	}
	resul = resul / 8;
 800cd6c:	4b49      	ldr	r3, [pc, #292]	@ (800ce94 <temper+0x700>)
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	08db      	lsrs	r3, r3, #3
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	4b47      	ldr	r3, [pc, #284]	@ (800ce94 <temper+0x700>)
 800cd76:	801a      	strh	r2, [r3, #0]
	linealiza();
 800cd78:	f000 fb16 	bl	800d3a8 <linealiza>
	X = tempo;
 800cd7c:	4b47      	ldr	r3, [pc, #284]	@ (800ce9c <temper+0x708>)
 800cd7e:	881a      	ldrh	r2, [r3, #0]
 800cd80:	4b47      	ldr	r3, [pc, #284]	@ (800cea0 <temper+0x70c>)
 800cd82:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800cd84:	4b46      	ldr	r3, [pc, #280]	@ (800cea0 <temper+0x70c>)
 800cd86:	881a      	ldrh	r2, [r3, #0]
 800cd88:	4b46      	ldr	r3, [pc, #280]	@ (800cea4 <temper+0x710>)
 800cd8a:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800cd8c:	4b41      	ldr	r3, [pc, #260]	@ (800ce94 <temper+0x700>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cd92:	230d      	movs	r3, #13
 800cd94:	18fb      	adds	r3, r7, r3
 800cd96:	2200      	movs	r2, #0
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	e010      	b.n	800cdbe <temper+0x62a>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800cd9c:	210d      	movs	r1, #13
 800cd9e:	187b      	adds	r3, r7, r1
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	4b30      	ldr	r3, [pc, #192]	@ (800ce64 <temper+0x6d0>)
 800cda4:	0052      	lsls	r2, r2, #1
 800cda6:	5ad2      	ldrh	r2, [r2, r3]
 800cda8:	4b3a      	ldr	r3, [pc, #232]	@ (800ce94 <temper+0x700>)
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	18d3      	adds	r3, r2, r3
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	4b38      	ldr	r3, [pc, #224]	@ (800ce94 <temper+0x700>)
 800cdb2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cdb4:	187b      	adds	r3, r7, r1
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	187b      	adds	r3, r7, r1
 800cdba:	3201      	adds	r2, #1
 800cdbc:	701a      	strb	r2, [r3, #0]
 800cdbe:	230d      	movs	r3, #13
 800cdc0:	18fb      	adds	r3, r7, r3
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b07      	cmp	r3, #7
 800cdc6:	d9e9      	bls.n	800cd9c <temper+0x608>
	}
	resul = resul / 8;
 800cdc8:	4b32      	ldr	r3, [pc, #200]	@ (800ce94 <temper+0x700>)
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	08db      	lsrs	r3, r3, #3
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	4b30      	ldr	r3, [pc, #192]	@ (800ce94 <temper+0x700>)
 800cdd2:	801a      	strh	r2, [r3, #0]
	linealiza();
 800cdd4:	f000 fae8 	bl	800d3a8 <linealiza>
	X = tempo;
 800cdd8:	4b30      	ldr	r3, [pc, #192]	@ (800ce9c <temper+0x708>)
 800cdda:	881a      	ldrh	r2, [r3, #0]
 800cddc:	4b30      	ldr	r3, [pc, #192]	@ (800cea0 <temper+0x70c>)
 800cdde:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800cde0:	4b2f      	ldr	r3, [pc, #188]	@ (800cea0 <temper+0x70c>)
 800cde2:	881a      	ldrh	r2, [r3, #0]
 800cde4:	4b30      	ldr	r3, [pc, #192]	@ (800cea8 <temper+0x714>)
 800cde6:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800cde8:	4b2a      	ldr	r3, [pc, #168]	@ (800ce94 <temper+0x700>)
 800cdea:	2200      	movs	r2, #0
 800cdec:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cdee:	230c      	movs	r3, #12
 800cdf0:	18fb      	adds	r3, r7, r3
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	e010      	b.n	800ce1a <temper+0x686>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800cdf8:	210c      	movs	r1, #12
 800cdfa:	187b      	adds	r3, r7, r1
 800cdfc:	781a      	ldrb	r2, [r3, #0]
 800cdfe:	4b24      	ldr	r3, [pc, #144]	@ (800ce90 <temper+0x6fc>)
 800ce00:	0052      	lsls	r2, r2, #1
 800ce02:	5ad2      	ldrh	r2, [r2, r3]
 800ce04:	4b23      	ldr	r3, [pc, #140]	@ (800ce94 <temper+0x700>)
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	18d3      	adds	r3, r2, r3
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	4b21      	ldr	r3, [pc, #132]	@ (800ce94 <temper+0x700>)
 800ce0e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ce10:	187b      	adds	r3, r7, r1
 800ce12:	781a      	ldrb	r2, [r3, #0]
 800ce14:	187b      	adds	r3, r7, r1
 800ce16:	3201      	adds	r2, #1
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	18fb      	adds	r3, r7, r3
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b07      	cmp	r3, #7
 800ce22:	d9e9      	bls.n	800cdf8 <temper+0x664>
	}
	resul = resul / 8;
 800ce24:	4b1b      	ldr	r3, [pc, #108]	@ (800ce94 <temper+0x700>)
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	08db      	lsrs	r3, r3, #3
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	4b19      	ldr	r3, [pc, #100]	@ (800ce94 <temper+0x700>)
 800ce2e:	801a      	strh	r2, [r3, #0]
	linealiza();
 800ce30:	f000 faba 	bl	800d3a8 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800ce34:	4b19      	ldr	r3, [pc, #100]	@ (800ce9c <temper+0x708>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	4b1c      	ldr	r3, [pc, #112]	@ (800ceac <temper+0x718>)
 800ce3c:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800ce3e:	4b17      	ldr	r3, [pc, #92]	@ (800ce9c <temper+0x708>)
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	0a1b      	lsrs	r3, r3, #8
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	4b19      	ldr	r3, [pc, #100]	@ (800ceb0 <temper+0x71c>)
 800ce4a:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800ce4c:	4b11      	ldr	r3, [pc, #68]	@ (800ce94 <temper+0x700>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800ce52:	230b      	movs	r3, #11
 800ce54:	18fb      	adds	r3, r7, r3
 800ce56:	2200      	movs	r2, #0
 800ce58:	701a      	strb	r2, [r3, #0]
 800ce5a:	e03c      	b.n	800ced6 <temper+0x742>
 800ce5c:	20000bd0 	.word	0x20000bd0
 800ce60:	20000b70 	.word	0x20000b70
 800ce64:	200011d0 	.word	0x200011d0
 800ce68:	40012400 	.word	0x40012400
 800ce6c:	20001202 	.word	0x20001202
 800ce70:	20001204 	.word	0x20001204
 800ce74:	000003b5 	.word	0x000003b5
 800ce78:	20000b98 	.word	0x20000b98
 800ce7c:	20000ba8 	.word	0x20000ba8
 800ce80:	20000bd4 	.word	0x20000bd4
 800ce84:	20000bd7 	.word	0x20000bd7
 800ce88:	200011e0 	.word	0x200011e0
 800ce8c:	20000bd5 	.word	0x20000bd5
 800ce90:	200011f0 	.word	0x200011f0
 800ce94:	20001208 	.word	0x20001208
 800ce98:	200011c0 	.word	0x200011c0
 800ce9c:	2000120a 	.word	0x2000120a
 800cea0:	20001206 	.word	0x20001206
 800cea4:	2000113c 	.word	0x2000113c
 800cea8:	20000c64 	.word	0x20000c64
 800ceac:	20000bc3 	.word	0x20000bc3
 800ceb0:	20000bc2 	.word	0x20000bc2
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800ceb4:	210b      	movs	r1, #11
 800ceb6:	187b      	adds	r3, r7, r1
 800ceb8:	781a      	ldrb	r2, [r3, #0]
 800ceba:	4bb4      	ldr	r3, [pc, #720]	@ (800d18c <temper+0x9f8>)
 800cebc:	0052      	lsls	r2, r2, #1
 800cebe:	5ad2      	ldrh	r2, [r2, r3]
 800cec0:	4bb3      	ldr	r3, [pc, #716]	@ (800d190 <temper+0x9fc>)
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	18d3      	adds	r3, r2, r3
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	4bb1      	ldr	r3, [pc, #708]	@ (800d190 <temper+0x9fc>)
 800ceca:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cecc:	187b      	adds	r3, r7, r1
 800cece:	781a      	ldrb	r2, [r3, #0]
 800ced0:	187b      	adds	r3, r7, r1
 800ced2:	3201      	adds	r2, #1
 800ced4:	701a      	strb	r2, [r3, #0]
 800ced6:	230b      	movs	r3, #11
 800ced8:	18fb      	adds	r3, r7, r3
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b07      	cmp	r3, #7
 800cede:	d9e9      	bls.n	800ceb4 <temper+0x720>
	}
	resul = resul / 8;
 800cee0:	4bab      	ldr	r3, [pc, #684]	@ (800d190 <temper+0x9fc>)
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	08db      	lsrs	r3, r3, #3
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	4ba9      	ldr	r3, [pc, #676]	@ (800d190 <temper+0x9fc>)
 800ceea:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800ceec:	4ba9      	ldr	r3, [pc, #676]	@ (800d194 <temper+0xa00>)
 800ceee:	881a      	ldrh	r2, [r3, #0]
 800cef0:	4ba9      	ldr	r3, [pc, #676]	@ (800d198 <temper+0xa04>)
 800cef2:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800cef4:	4ba8      	ldr	r3, [pc, #672]	@ (800d198 <temper+0xa04>)
 800cef6:	881a      	ldrh	r2, [r3, #0]
 800cef8:	4ba5      	ldr	r3, [pc, #660]	@ (800d190 <temper+0x9fc>)
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	4ba5      	ldr	r3, [pc, #660]	@ (800d198 <temper+0xa04>)
 800cf02:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800cf04:	4ba4      	ldr	r3, [pc, #656]	@ (800d198 <temper+0xa04>)
 800cf06:	881b      	ldrh	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d100      	bne.n	800cf0e <temper+0x77a>
 800cf0c:	e07d      	b.n	800d00a <temper+0x876>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800cf0e:	4ba2      	ldr	r3, [pc, #648]	@ (800d198 <temper+0xa04>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	b21b      	sxth	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	da18      	bge.n	800cf4a <temper+0x7b6>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800cf18:	4b9f      	ldr	r3, [pc, #636]	@ (800d198 <temper+0xa04>)
 800cf1a:	881b      	ldrh	r3, [r3, #0]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	4b9d      	ldr	r3, [pc, #628]	@ (800d198 <temper+0xa04>)
 800cf22:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800cf24:	4b9c      	ldr	r3, [pc, #624]	@ (800d198 <temper+0xa04>)
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d028      	beq.n	800cf7e <temper+0x7ea>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800cf2c:	4b98      	ldr	r3, [pc, #608]	@ (800d190 <temper+0x9fc>)
 800cf2e:	881a      	ldrh	r2, [r3, #0]
 800cf30:	4b99      	ldr	r3, [pc, #612]	@ (800d198 <temper+0xa04>)
 800cf32:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800cf34:	4b98      	ldr	r3, [pc, #608]	@ (800d198 <temper+0xa04>)
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	4b96      	ldr	r3, [pc, #600]	@ (800d198 <temper+0xa04>)
 800cf3e:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800cf40:	4b95      	ldr	r3, [pc, #596]	@ (800d198 <temper+0xa04>)
 800cf42:	881a      	ldrh	r2, [r3, #0]
 800cf44:	4b92      	ldr	r3, [pc, #584]	@ (800d190 <temper+0x9fc>)
 800cf46:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800cf48:	e048      	b.n	800cfdc <temper+0x848>
		goto tempe25b;            //La diferencia de promedios es positiva?
 800cf4a:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800cf4c:	4b92      	ldr	r3, [pc, #584]	@ (800d198 <temper+0xa04>)
 800cf4e:	881b      	ldrh	r3, [r3, #0]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	4b90      	ldr	r3, [pc, #576]	@ (800d198 <temper+0xa04>)
 800cf56:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800cf58:	4b8f      	ldr	r3, [pc, #572]	@ (800d198 <temper+0xa04>)
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d010      	beq.n	800cf82 <temper+0x7ee>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800cf60:	4b8b      	ldr	r3, [pc, #556]	@ (800d190 <temper+0x9fc>)
 800cf62:	881a      	ldrh	r2, [r3, #0]
 800cf64:	4b8c      	ldr	r3, [pc, #560]	@ (800d198 <temper+0xa04>)
 800cf66:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800cf68:	4b8b      	ldr	r3, [pc, #556]	@ (800d198 <temper+0xa04>)
 800cf6a:	881b      	ldrh	r3, [r3, #0]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	4b89      	ldr	r3, [pc, #548]	@ (800d198 <temper+0xa04>)
 800cf72:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800cf74:	4b88      	ldr	r3, [pc, #544]	@ (800d198 <temper+0xa04>)
 800cf76:	881a      	ldrh	r2, [r3, #0]
 800cf78:	4b85      	ldr	r3, [pc, #532]	@ (800d190 <temper+0x9fc>)
 800cf7a:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800cf7c:	e02e      	b.n	800cfdc <temper+0x848>
		goto vesiestab;  		  // Si, revisa estabilidad
 800cf7e:	46c0      	nop			@ (mov r8, r8)
 800cf80:	e000      	b.n	800cf84 <temper+0x7f0>
			goto vesiestab;       // Si, revisa estabilidad
 800cf82:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800cf84:	4b85      	ldr	r3, [pc, #532]	@ (800d19c <temper+0xa08>)
 800cf86:	881a      	ldrh	r2, [r3, #0]
 800cf88:	4b83      	ldr	r3, [pc, #524]	@ (800d198 <temper+0xa04>)
 800cf8a:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800cf8c:	4b82      	ldr	r3, [pc, #520]	@ (800d198 <temper+0xa04>)
 800cf8e:	881a      	ldrh	r2, [r3, #0]
 800cf90:	4b7f      	ldr	r3, [pc, #508]	@ (800d190 <temper+0x9fc>)
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	4b7f      	ldr	r3, [pc, #508]	@ (800d198 <temper+0xa04>)
 800cf9a:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800cf9c:	4b7e      	ldr	r3, [pc, #504]	@ (800d198 <temper+0xa04>)
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d003      	beq.n	800cfac <temper+0x818>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800cfa4:	4b7e      	ldr	r3, [pc, #504]	@ (800d1a0 <temper+0xa0c>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800cfaa:	e006      	b.n	800cfba <temper+0x826>
			goto estable;  // El nuevo dato es igual a último?
 800cfac:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800cfae:	4b7c      	ldr	r3, [pc, #496]	@ (800d1a0 <temper+0xa0c>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	4b7a      	ldr	r3, [pc, #488]	@ (800d1a0 <temper+0xa0c>)
 800cfb8:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800cfba:	4b75      	ldr	r3, [pc, #468]	@ (800d190 <temper+0x9fc>)
 800cfbc:	881a      	ldrh	r2, [r3, #0]
 800cfbe:	4b76      	ldr	r3, [pc, #472]	@ (800d198 <temper+0xa04>)
 800cfc0:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800cfc2:	4b75      	ldr	r3, [pc, #468]	@ (800d198 <temper+0xa04>)
 800cfc4:	881a      	ldrh	r2, [r3, #0]
 800cfc6:	4b75      	ldr	r3, [pc, #468]	@ (800d19c <temper+0xa08>)
 800cfc8:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800cfca:	4b75      	ldr	r3, [pc, #468]	@ (800d1a0 <temper+0xa0c>)
 800cfcc:	781a      	ldrb	r2, [r3, #0]
 800cfce:	4b75      	ldr	r3, [pc, #468]	@ (800d1a4 <temper+0xa10>)
 800cfd0:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800cfd2:	4b74      	ldr	r3, [pc, #464]	@ (800d1a4 <temper+0xa10>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b0e      	cmp	r3, #14
 800cfd8:	d920      	bls.n	800d01c <temper+0x888>
			goto tempe29;

tempe26:
 800cfda:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800cfdc:	4b6c      	ldr	r3, [pc, #432]	@ (800d190 <temper+0x9fc>)
 800cfde:	881a      	ldrh	r2, [r3, #0]
 800cfe0:	4b71      	ldr	r3, [pc, #452]	@ (800d1a8 <temper+0xa14>)
 800cfe2:	801a      	strh	r2, [r3, #0]
		promant = X;
 800cfe4:	4b70      	ldr	r3, [pc, #448]	@ (800d1a8 <temper+0xa14>)
 800cfe6:	881a      	ldrh	r2, [r3, #0]
 800cfe8:	4b6a      	ldr	r3, [pc, #424]	@ (800d194 <temper+0xa00>)
 800cfea:	801a      	strh	r2, [r3, #0]
		linealiza();
 800cfec:	f000 f9dc 	bl	800d3a8 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800cff0:	4b6e      	ldr	r3, [pc, #440]	@ (800d1ac <temper+0xa18>)
 800cff2:	881b      	ldrh	r3, [r3, #0]
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	4b6e      	ldr	r3, [pc, #440]	@ (800d1b0 <temper+0xa1c>)
 800cff8:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800cffa:	4b6c      	ldr	r3, [pc, #432]	@ (800d1ac <temper+0xa18>)
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	0a1b      	lsrs	r3, r3, #8
 800d000:	b29b      	uxth	r3, r3
 800d002:	b2da      	uxtb	r2, r3
 800d004:	4b6b      	ldr	r3, [pc, #428]	@ (800d1b4 <temper+0xa20>)
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	e000      	b.n	800d00c <temper+0x878>
		goto tempe27;                //nota1: checar comparaciones
 800d00a:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800d00c:	4b61      	ldr	r3, [pc, #388]	@ (800d194 <temper+0xa00>)
 800d00e:	881a      	ldrh	r2, [r3, #0]
 800d010:	4b62      	ldr	r3, [pc, #392]	@ (800d19c <temper+0xa08>)
 800d012:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800d014:	4b62      	ldr	r3, [pc, #392]	@ (800d1a0 <temper+0xa0c>)
 800d016:	2200      	movs	r2, #0
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e000      	b.n	800d01e <temper+0x88a>
			goto tempe29;
 800d01c:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800d01e:	f7f9 fa31 	bl	8006484 <tdev_to_Word>
 800d022:	0003      	movs	r3, r0
 800d024:	b29a      	uxth	r2, r3
 800d026:	4b60      	ldr	r3, [pc, #384]	@ (800d1a8 <temper+0xa14>)
 800d028:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d02a:	4b5f      	ldr	r3, [pc, #380]	@ (800d1a8 <temper+0xa14>)
 800d02c:	881a      	ldrh	r2, [r3, #0]
 800d02e:	4b62      	ldr	r3, [pc, #392]	@ (800d1b8 <temper+0xa24>)
 800d030:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800d032:	4b62      	ldr	r3, [pc, #392]	@ (800d1bc <temper+0xa28>)
 800d034:	2259      	movs	r2, #89	@ 0x59
 800d036:	5c9a      	ldrb	r2, [r3, r2]
 800d038:	4b5a      	ldr	r3, [pc, #360]	@ (800d1a4 <temper+0xa10>)
 800d03a:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800d03c:	4b59      	ldr	r3, [pc, #356]	@ (800d1a4 <temper+0xa10>)
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2b02      	cmp	r3, #2
 800d042:	d91d      	bls.n	800d080 <temper+0x8ec>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800d044:	4b5d      	ldr	r3, [pc, #372]	@ (800d1bc <temper+0xa28>)
 800d046:	2253      	movs	r2, #83	@ 0x53
 800d048:	5c9b      	ldrb	r3, [r3, r2]
 800d04a:	b25b      	sxtb	r3, r3
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	da19      	bge.n	800d084 <temper+0x8f0>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800d050:	4b5b      	ldr	r3, [pc, #364]	@ (800d1c0 <temper+0xa2c>)
 800d052:	791b      	ldrb	r3, [r3, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d107      	bne.n	800d068 <temper+0x8d4>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800d058:	4b59      	ldr	r3, [pc, #356]	@ (800d1c0 <temper+0xa2c>)
 800d05a:	795b      	ldrb	r3, [r3, #5]
 800d05c:	2201      	movs	r2, #1
 800d05e:	4053      	eors	r3, r2
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <temper+0x8d8>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800d066:	e000      	b.n	800d06a <temper+0x8d6>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800d068:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800d06a:	e00c      	b.n	800d086 <temper+0x8f2>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800d06c:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800d06e:	4b55      	ldr	r3, [pc, #340]	@ (800d1c4 <temper+0xa30>)
 800d070:	881a      	ldrh	r2, [r3, #0]
 800d072:	4b4d      	ldr	r3, [pc, #308]	@ (800d1a8 <temper+0xa14>)
 800d074:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d076:	4b4c      	ldr	r3, [pc, #304]	@ (800d1a8 <temper+0xa14>)
 800d078:	881a      	ldrh	r2, [r3, #0]
 800d07a:	4b4f      	ldr	r3, [pc, #316]	@ (800d1b8 <temper+0xa24>)
 800d07c:	801a      	strh	r2, [r3, #0]
 800d07e:	e002      	b.n	800d086 <temper+0x8f2>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800d080:	46c0      	nop			@ (mov r8, r8)
 800d082:	e000      	b.n	800d086 <temper+0x8f2>
			goto tempe26a;
 800d084:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800d086:	4b50      	ldr	r3, [pc, #320]	@ (800d1c8 <temper+0xa34>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d014      	beq.n	800d0b8 <temper+0x924>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800d08e:	4b4e      	ldr	r3, [pc, #312]	@ (800d1c8 <temper+0xa34>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b08      	cmp	r3, #8
 800d094:	d800      	bhi.n	800d098 <temper+0x904>
 800d096:	e073      	b.n	800d180 <temper+0x9ec>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800d098:	4b43      	ldr	r3, [pc, #268]	@ (800d1a8 <temper+0xa14>)
 800d09a:	4a4c      	ldr	r2, [pc, #304]	@ (800d1cc <temper+0xa38>)
 800d09c:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800d09e:	4b42      	ldr	r3, [pc, #264]	@ (800d1a8 <temper+0xa14>)
 800d0a0:	881b      	ldrh	r3, [r3, #0]
 800d0a2:	0a1b      	lsrs	r3, r3, #8
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	4b42      	ldr	r3, [pc, #264]	@ (800d1b4 <temper+0xa20>)
 800d0aa:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800d0ac:	4b3e      	ldr	r3, [pc, #248]	@ (800d1a8 <temper+0xa14>)
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4b3f      	ldr	r3, [pc, #252]	@ (800d1b0 <temper+0xa1c>)
 800d0b4:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800d0b6:	e0cc      	b.n	800d252 <temper+0xabe>
			goto tempe30;              // Si
 800d0b8:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800d0ba:	4b45      	ldr	r3, [pc, #276]	@ (800d1d0 <temper+0xa3c>)
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	4053      	eors	r3, r2
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d05d      	beq.n	800d184 <temper+0x9f0>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800d0c8:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800d0ca:	4b42      	ldr	r3, [pc, #264]	@ (800d1d4 <temper+0xa40>)
 800d0cc:	881a      	ldrh	r2, [r3, #0]
 800d0ce:	4b32      	ldr	r3, [pc, #200]	@ (800d198 <temper+0xa04>)
 800d0d0:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800d0d2:	4b31      	ldr	r3, [pc, #196]	@ (800d198 <temper+0xa04>)
 800d0d4:	881a      	ldrh	r2, [r3, #0]
 800d0d6:	4b38      	ldr	r3, [pc, #224]	@ (800d1b8 <temper+0xa24>)
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	4b2e      	ldr	r3, [pc, #184]	@ (800d198 <temper+0xa04>)
 800d0e0:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d0e2:	4b2d      	ldr	r3, [pc, #180]	@ (800d198 <temper+0xa04>)
 800d0e4:	881b      	ldrh	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d100      	bne.n	800d0ec <temper+0x958>
 800d0ea:	e0ad      	b.n	800d248 <temper+0xab4>
			goto tempe40;
		else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800d0ec:	4b2a      	ldr	r3, [pc, #168]	@ (800d198 <temper+0xa04>)
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	b21b      	sxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	da48      	bge.n	800d188 <temper+0x9f4>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800d0f6:	4b31      	ldr	r3, [pc, #196]	@ (800d1bc <temper+0xa28>)
 800d0f8:	2254      	movs	r2, #84	@ 0x54
 800d0fa:	5c9a      	ldrb	r2, [r3, r2]
 800d0fc:	4b29      	ldr	r3, [pc, #164]	@ (800d1a4 <temper+0xa10>)
 800d0fe:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800d100:	4b28      	ldr	r3, [pc, #160]	@ (800d1a4 <temper+0xa10>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d06b      	beq.n	800d1e0 <temper+0xa4c>
			goto tempe39;
		A = A << 1;
 800d108:	4b26      	ldr	r3, [pc, #152]	@ (800d1a4 <temper+0xa10>)
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	18db      	adds	r3, r3, r3
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	4b24      	ldr	r3, [pc, #144]	@ (800d1a4 <temper+0xa10>)
 800d112:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800d114:	4b30      	ldr	r3, [pc, #192]	@ (800d1d8 <temper+0xa44>)
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	4b2e      	ldr	r3, [pc, #184]	@ (800d1d8 <temper+0xa44>)
 800d11e:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800d120:	4b20      	ldr	r3, [pc, #128]	@ (800d1a4 <temper+0xa10>)
 800d122:	781a      	ldrb	r2, [r3, #0]
 800d124:	4b2c      	ldr	r3, [pc, #176]	@ (800d1d8 <temper+0xa44>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d900      	bls.n	800d12e <temper+0x99a>
 800d12c:	e095      	b.n	800d25a <temper+0xac6>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800d12e:	4b1a      	ldr	r3, [pc, #104]	@ (800d198 <temper+0xa04>)
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	425b      	negs	r3, r3
 800d134:	b29a      	uxth	r2, r3
 800d136:	4b18      	ldr	r3, [pc, #96]	@ (800d198 <temper+0xa04>)
 800d138:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800d13a:	4b17      	ldr	r3, [pc, #92]	@ (800d198 <temper+0xa04>)
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	2b0a      	cmp	r3, #10
 800d140:	d90e      	bls.n	800d160 <temper+0x9cc>
			goto tempe37b;

		X = tDisplay_w;
 800d142:	4b1d      	ldr	r3, [pc, #116]	@ (800d1b8 <temper+0xa24>)
 800d144:	881a      	ldrh	r2, [r3, #0]
 800d146:	4b18      	ldr	r3, [pc, #96]	@ (800d1a8 <temper+0xa14>)
 800d148:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800d14a:	4b17      	ldr	r3, [pc, #92]	@ (800d1a8 <temper+0xa14>)
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	3b0a      	subs	r3, #10
 800d150:	b29a      	uxth	r2, r3
 800d152:	4b15      	ldr	r3, [pc, #84]	@ (800d1a8 <temper+0xa14>)
 800d154:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d156:	4b14      	ldr	r3, [pc, #80]	@ (800d1a8 <temper+0xa14>)
 800d158:	881a      	ldrh	r2, [r3, #0]
 800d15a:	4b20      	ldr	r3, [pc, #128]	@ (800d1dc <temper+0xa48>)
 800d15c:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d15e:	e04b      	b.n	800d1f8 <temper+0xa64>
			goto tempe37b;
 800d160:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800d162:	4b1c      	ldr	r3, [pc, #112]	@ (800d1d4 <temper+0xa40>)
 800d164:	881a      	ldrh	r2, [r3, #0]
 800d166:	4b10      	ldr	r3, [pc, #64]	@ (800d1a8 <temper+0xa14>)
 800d168:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800d16a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1a8 <temper+0xa14>)
 800d16c:	881b      	ldrh	r3, [r3, #0]
 800d16e:	3301      	adds	r3, #1
 800d170:	b29a      	uxth	r2, r3
 800d172:	4b0d      	ldr	r3, [pc, #52]	@ (800d1a8 <temper+0xa14>)
 800d174:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d176:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a8 <temper+0xa14>)
 800d178:	881a      	ldrh	r2, [r3, #0]
 800d17a:	4b18      	ldr	r3, [pc, #96]	@ (800d1dc <temper+0xa48>)
 800d17c:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d17e:	e03b      	b.n	800d1f8 <temper+0xa64>
			goto tempe39;              // Si, cargalo al display
 800d180:	46c0      	nop			@ (mov r8, r8)
 800d182:	e02e      	b.n	800d1e2 <temper+0xa4e>
		goto tempe39;
 800d184:	46c0      	nop			@ (mov r8, r8)
 800d186:	e02c      	b.n	800d1e2 <temper+0xa4e>
			goto tempe39;      // La diferencia es positiva?
 800d188:	46c0      	nop			@ (mov r8, r8)
 800d18a:	e02a      	b.n	800d1e2 <temper+0xa4e>
 800d18c:	200011e0 	.word	0x200011e0
 800d190:	20001208 	.word	0x20001208
 800d194:	2000120e 	.word	0x2000120e
 800d198:	20001204 	.word	0x20001204
 800d19c:	20001210 	.word	0x20001210
 800d1a0:	20000bd6 	.word	0x20000bd6
 800d1a4:	20001202 	.word	0x20001202
 800d1a8:	20001206 	.word	0x20001206
 800d1ac:	2000120a 	.word	0x2000120a
 800d1b0:	20000bc1 	.word	0x20000bc1
 800d1b4:	20000bc0 	.word	0x20000bc0
 800d1b8:	2000113e 	.word	0x2000113e
 800d1bc:	200000b8 	.word	0x200000b8
 800d1c0:	20000b90 	.word	0x20000b90
 800d1c4:	20000c64 	.word	0x20000c64
 800d1c8:	20000bd4 	.word	0x20000bd4
 800d1cc:	fffffe34 	.word	0xfffffe34
 800d1d0:	20000b88 	.word	0x20000b88
 800d1d4:	20000bc4 	.word	0x20000bc4
 800d1d8:	20000bd3 	.word	0x20000bd3
 800d1dc:	2000120c 	.word	0x2000120c
			goto tempe39;
 800d1e0:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800d1e2:	4b5d      	ldr	r3, [pc, #372]	@ (800d358 <temper+0xbc4>)
 800d1e4:	881a      	ldrh	r2, [r3, #0]
 800d1e6:	4b5d      	ldr	r3, [pc, #372]	@ (800d35c <temper+0xbc8>)
 800d1e8:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d1ea:	4b5c      	ldr	r3, [pc, #368]	@ (800d35c <temper+0xbc8>)
 800d1ec:	881a      	ldrh	r2, [r3, #0]
 800d1ee:	4b5c      	ldr	r3, [pc, #368]	@ (800d360 <temper+0xbcc>)
 800d1f0:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800d1f2:	4b5c      	ldr	r3, [pc, #368]	@ (800d364 <temper+0xbd0>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	701a      	strb	r2, [r3, #0]
tempe39a:
//		tnz			cntHoldP;		/ Ya terminó el tiempo de bloqueo por puerta?
//		jrne		tempe40;  / no, congela display
//		;sí, pregunta por tiemmpo de bloqueo por deshielo

		if(cntHoldP)
 800d1f8:	4b5b      	ldr	r3, [pc, #364]	@ (800d368 <temper+0xbd4>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d125      	bne.n	800d24c <temper+0xab8>
			goto tempe40;

		A = cnthold;
 800d200:	4b58      	ldr	r3, [pc, #352]	@ (800d364 <temper+0xbd0>)
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	4b59      	ldr	r3, [pc, #356]	@ (800d36c <temper+0xbd8>)
 800d206:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800d208:	4b58      	ldr	r3, [pc, #352]	@ (800d36c <temper+0xbd8>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d011      	beq.n	800d234 <temper+0xaa0>
			goto tempe39b;            // Si, carga el dato a tdevdpy

		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800d210:	4b57      	ldr	r3, [pc, #348]	@ (800d370 <temper+0xbdc>)
 800d212:	881a      	ldrh	r2, [r3, #0]
 800d214:	4b57      	ldr	r3, [pc, #348]	@ (800d374 <temper+0xbe0>)
 800d216:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800d218:	4b56      	ldr	r3, [pc, #344]	@ (800d374 <temper+0xbe0>)
 800d21a:	881a      	ldrh	r2, [r3, #0]
 800d21c:	4b50      	ldr	r3, [pc, #320]	@ (800d360 <temper+0xbcc>)
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	b29a      	uxth	r2, r3
 800d224:	4b53      	ldr	r3, [pc, #332]	@ (800d374 <temper+0xbe0>)
 800d226:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800d228:	4b52      	ldr	r3, [pc, #328]	@ (800d374 <temper+0xbe0>)
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	b21b      	sxth	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	db0e      	blt.n	800d250 <temper+0xabc>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800d232:	e000      	b.n	800d236 <temper+0xaa2>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800d234:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800d236:	4b4a      	ldr	r3, [pc, #296]	@ (800d360 <temper+0xbcc>)
 800d238:	881a      	ldrh	r2, [r3, #0]
 800d23a:	4b48      	ldr	r3, [pc, #288]	@ (800d35c <temper+0xbc8>)
 800d23c:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800d23e:	4b47      	ldr	r3, [pc, #284]	@ (800d35c <temper+0xbc8>)
 800d240:	881a      	ldrh	r2, [r3, #0]
 800d242:	4b4d      	ldr	r3, [pc, #308]	@ (800d378 <temper+0xbe4>)
 800d244:	801a      	strh	r2, [r3, #0]
 800d246:	e004      	b.n	800d252 <temper+0xabe>
			goto tempe40;
 800d248:	46c0      	nop			@ (mov r8, r8)
 800d24a:	e002      	b.n	800d252 <temper+0xabe>
			goto tempe40;
 800d24c:	46c0      	nop			@ (mov r8, r8)
 800d24e:	e000      	b.n	800d252 <temper+0xabe>
			goto tempe40;             // Si, congela el display en limsup
 800d250:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800d252:	4b4a      	ldr	r3, [pc, #296]	@ (800d37c <temper+0xbe8>)
 800d254:	2200      	movs	r2, #0
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	e000      	b.n	800d25c <temper+0xac8>
			goto tempe50;
 800d25a:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800d25c:	4b48      	ldr	r3, [pc, #288]	@ (800d380 <temper+0xbec>)
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800d262:	4b48      	ldr	r3, [pc, #288]	@ (800d384 <temper+0xbf0>)
 800d264:	78db      	ldrb	r3, [r3, #3]
 800d266:	2201      	movs	r2, #1
 800d268:	4053      	eors	r3, r2
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10f      	bne.n	800d290 <temper+0xafc>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800d270:	4b3a      	ldr	r3, [pc, #232]	@ (800d35c <temper+0xbc8>)
 800d272:	4a45      	ldr	r2, [pc, #276]	@ (800d388 <temper+0xbf4>)
 800d274:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800d276:	4b39      	ldr	r3, [pc, #228]	@ (800d35c <temper+0xbc8>)
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	4b43      	ldr	r3, [pc, #268]	@ (800d38c <temper+0xbf8>)
 800d27e:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800d280:	4b36      	ldr	r3, [pc, #216]	@ (800d35c <temper+0xbc8>)
 800d282:	881b      	ldrh	r3, [r3, #0]
 800d284:	0a1b      	lsrs	r3, r3, #8
 800d286:	b29b      	uxth	r3, r3
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	4b41      	ldr	r3, [pc, #260]	@ (800d390 <temper+0xbfc>)
 800d28c:	701a      	strb	r2, [r3, #0]
 800d28e:	e000      	b.n	800d292 <temper+0xafe>
			goto tempe52;
 800d290:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800d292:	4b40      	ldr	r3, [pc, #256]	@ (800d394 <temper+0xc00>)
 800d294:	795b      	ldrb	r3, [r3, #5]
 800d296:	2201      	movs	r2, #1
 800d298:	4053      	eors	r3, r2
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d107      	bne.n	800d2b0 <temper+0xb1c>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800d2a0:	4b2e      	ldr	r3, [pc, #184]	@ (800d35c <temper+0xbc8>)
 800d2a2:	4a39      	ldr	r2, [pc, #228]	@ (800d388 <temper+0xbf4>)
 800d2a4:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800d2a6:	4b2d      	ldr	r3, [pc, #180]	@ (800d35c <temper+0xbc8>)
 800d2a8:	881a      	ldrh	r2, [r3, #0]
 800d2aa:	4b3b      	ldr	r3, [pc, #236]	@ (800d398 <temper+0xc04>)
 800d2ac:	801a      	strh	r2, [r3, #0]
 800d2ae:	e000      	b.n	800d2b2 <temper+0xb1e>
			goto tempe53;
 800d2b0:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800d2b2:	4b38      	ldr	r3, [pc, #224]	@ (800d394 <temper+0xc00>)
 800d2b4:	79db      	ldrb	r3, [r3, #7]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	4053      	eors	r3, r2
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10b      	bne.n	800d2d8 <temper+0xb44>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800d2c0:	4b26      	ldr	r3, [pc, #152]	@ (800d35c <temper+0xbc8>)
 800d2c2:	4a31      	ldr	r2, [pc, #196]	@ (800d388 <temper+0xbf4>)
 800d2c4:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800d2c6:	4b25      	ldr	r3, [pc, #148]	@ (800d35c <temper+0xbc8>)
 800d2c8:	881a      	ldrh	r2, [r3, #0]
 800d2ca:	4b34      	ldr	r3, [pc, #208]	@ (800d39c <temper+0xc08>)
 800d2cc:	801a      	strh	r2, [r3, #0]
 800d2ce:	e004      	b.n	800d2da <temper+0xb46>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800d2d0:	46c0      	nop			@ (mov r8, r8)
 800d2d2:	e002      	b.n	800d2da <temper+0xb46>
			goto fintemp;
 800d2d4:	46c0      	nop			@ (mov r8, r8)
 800d2d6:	e000      	b.n	800d2da <temper+0xb46>
			goto fintemp;
 800d2d8:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800d2da:	4b31      	ldr	r3, [pc, #196]	@ (800d3a0 <temper+0xc0c>)
 800d2dc:	781a      	ldrb	r2, [r3, #0]
 800d2de:	4b23      	ldr	r3, [pc, #140]	@ (800d36c <temper+0xbd8>)
 800d2e0:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800d2e2:	4b22      	ldr	r3, [pc, #136]	@ (800d36c <temper+0xbd8>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d02c      	beq.n	800d344 <temper+0xbb0>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800d2ea:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a4 <temper+0xc10>)
 800d2ec:	2259      	movs	r2, #89	@ 0x59
 800d2ee:	5c9a      	ldrb	r2, [r3, r2]
 800d2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800d36c <temper+0xbd8>)
 800d2f2:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800d2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800d36c <temper+0xbd8>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d025      	beq.n	800d348 <temper+0xbb4>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800d2fc:	4b1b      	ldr	r3, [pc, #108]	@ (800d36c <temper+0xbd8>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b03      	cmp	r3, #3
 800d302:	d017      	beq.n	800d334 <temper+0xba0>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800d304:	4b19      	ldr	r3, [pc, #100]	@ (800d36c <temper+0xbd8>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d00b      	beq.n	800d324 <temper+0xb90>
			goto clrRetFail;
		if (A != 1)
 800d30c:	4b17      	ldr	r3, [pc, #92]	@ (800d36c <temper+0xbd8>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d11b      	bne.n	800d34c <temper+0xbb8>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800d314:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800d316:	491b      	ldr	r1, [pc, #108]	@ (800d384 <temper+0xbf0>)
 800d318:	481a      	ldr	r0, [pc, #104]	@ (800d384 <temper+0xbf0>)
 800d31a:	2303      	movs	r3, #3
 800d31c:	2202      	movs	r2, #2
 800d31e:	f000 fa1c 	bl	800d75a <Bclear_Clear_trfst>
 800d322:	e000      	b.n	800d326 <temper+0xb92>
			goto clrRetFail;
 800d324:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800d326:	491b      	ldr	r1, [pc, #108]	@ (800d394 <temper+0xc00>)
 800d328:	481a      	ldr	r0, [pc, #104]	@ (800d394 <temper+0xc00>)
 800d32a:	2305      	movs	r3, #5
 800d32c:	2204      	movs	r2, #4
 800d32e:	f000 fa14 	bl	800d75a <Bclear_Clear_trfst>
 800d332:	e000      	b.n	800d336 <temper+0xba2>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800d334:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800d336:	4917      	ldr	r1, [pc, #92]	@ (800d394 <temper+0xc00>)
 800d338:	4812      	ldr	r0, [pc, #72]	@ (800d384 <temper+0xbf0>)
 800d33a:	2307      	movs	r3, #7
 800d33c:	2205      	movs	r2, #5
 800d33e:	f000 fa0c 	bl	800d75a <Bclear_Clear_trfst>
 800d342:	e004      	b.n	800d34e <temper+0xbba>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800d344:	46c0      	nop			@ (mov r8, r8)
 800d346:	e002      	b.n	800d34e <temper+0xbba>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800d348:	46c0      	nop			@ (mov r8, r8)
 800d34a:	e000      	b.n	800d34e <temper+0xbba>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800d34c:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800d34e:	46c0      	nop			@ (mov r8, r8)




}
 800d350:	46c0      	nop			@ (mov r8, r8)
 800d352:	46bd      	mov	sp, r7
 800d354:	b004      	add	sp, #16
 800d356:	bd80      	pop	{r7, pc}
 800d358:	2000113e 	.word	0x2000113e
 800d35c:	20001206 	.word	0x20001206
 800d360:	2000120c 	.word	0x2000120c
 800d364:	20000bd7 	.word	0x20000bd7
 800d368:	2000114c 	.word	0x2000114c
 800d36c:	20001202 	.word	0x20001202
 800d370:	20000bbe 	.word	0x20000bbe
 800d374:	20001204 	.word	0x20001204
 800d378:	20000bc4 	.word	0x20000bc4
 800d37c:	20000bd3 	.word	0x20000bd3
 800d380:	20000bd0 	.word	0x20000bd0
 800d384:	20000b98 	.word	0x20000b98
 800d388:	fffffe34 	.word	0xfffffe34
 800d38c:	20000bc3 	.word	0x20000bc3
 800d390:	20000bc2 	.word	0x20000bc2
 800d394:	20000b90 	.word	0x20000b90
 800d398:	20000c64 	.word	0x20000c64
 800d39c:	2000113c 	.word	0x2000113c
 800d3a0:	20000ba8 	.word	0x20000ba8
 800d3a4:	200000b8 	.word	0x200000b8

0800d3a8 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
	tempo = 0;
 800d3ac:	4b57      	ldr	r3, [pc, #348]	@ (800d50c <linealiza+0x164>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800d3b2:	4b57      	ldr	r3, [pc, #348]	@ (800d510 <linealiza+0x168>)
 800d3b4:	881a      	ldrh	r2, [r3, #0]
 800d3b6:	4b57      	ldr	r3, [pc, #348]	@ (800d514 <linealiza+0x16c>)
 800d3b8:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800d3ba:	4b56      	ldr	r3, [pc, #344]	@ (800d514 <linealiza+0x16c>)
 800d3bc:	881a      	ldrh	r2, [r3, #0]
 800d3be:	4b56      	ldr	r3, [pc, #344]	@ (800d518 <linealiza+0x170>)
 800d3c0:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800d3c2:	4b55      	ldr	r3, [pc, #340]	@ (800d518 <linealiza+0x170>)
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	4a55      	ldr	r2, [pc, #340]	@ (800d51c <linealiza+0x174>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d80e      	bhi.n	800d3ea <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800d3cc:	4b52      	ldr	r3, [pc, #328]	@ (800d518 <linealiza+0x170>)
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	4a53      	ldr	r2, [pc, #332]	@ (800d520 <linealiza+0x178>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d810      	bhi.n	800d3f8 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800d3d6:	4b50      	ldr	r3, [pc, #320]	@ (800d518 <linealiza+0x170>)
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	4a52      	ldr	r2, [pc, #328]	@ (800d524 <linealiza+0x17c>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d812      	bhi.n	800d406 <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800d3e0:	4b4d      	ldr	r3, [pc, #308]	@ (800d518 <linealiza+0x170>)
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	2bca      	cmp	r3, #202	@ 0xca
 800d3e6:	d91c      	bls.n	800d422 <linealiza+0x7a>
		goto lil_principal;
 800d3e8:	e015      	b.n	800d416 <linealiza+0x6e>
		goto wise_hot_3;
 800d3ea:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800d3ec:	4b4e      	ldr	r3, [pc, #312]	@ (800d528 <linealiza+0x180>)
 800d3ee:	0019      	movs	r1, r3
 800d3f0:	2053      	movs	r0, #83	@ 0x53
 800d3f2:	f000 f94d 	bl	800d690 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800d3f6:	e01b      	b.n	800d430 <linealiza+0x88>
		goto wise_hot_2;
 800d3f8:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800d3fa:	4b4c      	ldr	r3, [pc, #304]	@ (800d52c <linealiza+0x184>)
 800d3fc:	0019      	movs	r1, r3
 800d3fe:	2034      	movs	r0, #52	@ 0x34
 800d400:	f000 f946 	bl	800d690 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800d404:	e014      	b.n	800d430 <linealiza+0x88>
		goto wise_hot_1;
 800d406:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800d408:	2393      	movs	r3, #147	@ 0x93
 800d40a:	01db      	lsls	r3, r3, #7
 800d40c:	0019      	movs	r1, r3
 800d40e:	201d      	movs	r0, #29
 800d410:	f000 f93e 	bl	800d690 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800d414:	e00c      	b.n	800d430 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800d416:	4b46      	ldr	r3, [pc, #280]	@ (800d530 <linealiza+0x188>)
 800d418:	0019      	movs	r1, r3
 800d41a:	2013      	movs	r0, #19
 800d41c:	f000 f938 	bl	800d690 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800d420:	e006      	b.n	800d430 <linealiza+0x88>
		goto curva_fria;
 800d422:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800d424:	23de      	movs	r3, #222	@ 0xde
 800d426:	019b      	lsls	r3, r3, #6
 800d428:	0019      	movs	r1, r3
 800d42a:	201e      	movs	r0, #30
 800d42c:	f000 f930 	bl	800d690 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800d430:	4b36      	ldr	r3, [pc, #216]	@ (800d50c <linealiza+0x164>)
 800d432:	881a      	ldrh	r2, [r3, #0]
 800d434:	4b3f      	ldr	r3, [pc, #252]	@ (800d534 <linealiza+0x18c>)
 800d436:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800d438:	4b3e      	ldr	r3, [pc, #248]	@ (800d534 <linealiza+0x18c>)
 800d43a:	881a      	ldrh	r2, [r3, #0]
 800d43c:	4b35      	ldr	r3, [pc, #212]	@ (800d514 <linealiza+0x16c>)
 800d43e:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800d440:	4b34      	ldr	r3, [pc, #208]	@ (800d514 <linealiza+0x16c>)
 800d442:	881b      	ldrh	r3, [r3, #0]
 800d444:	b21b      	sxth	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	da05      	bge.n	800d456 <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800d44a:	4b3a      	ldr	r3, [pc, #232]	@ (800d534 <linealiza+0x18c>)
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	425b      	negs	r3, r3
 800d450:	b29a      	uxth	r2, r3
 800d452:	4b38      	ldr	r3, [pc, #224]	@ (800d534 <linealiza+0x18c>)
 800d454:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800d456:	4b37      	ldr	r3, [pc, #220]	@ (800d534 <linealiza+0x18c>)
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	0a1b      	lsrs	r3, r3, #8
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	4b35      	ldr	r3, [pc, #212]	@ (800d538 <linealiza+0x190>)
 800d462:	701a      	strb	r2, [r3, #0]
	waux = A;
 800d464:	4b34      	ldr	r3, [pc, #208]	@ (800d538 <linealiza+0x190>)
 800d466:	781a      	ldrb	r2, [r3, #0]
 800d468:	4b34      	ldr	r3, [pc, #208]	@ (800d53c <linealiza+0x194>)
 800d46a:	701a      	strb	r2, [r3, #0]
	A = 10;
 800d46c:	4b32      	ldr	r3, [pc, #200]	@ (800d538 <linealiza+0x190>)
 800d46e:	220a      	movs	r2, #10
 800d470:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800d472:	4b30      	ldr	r3, [pc, #192]	@ (800d534 <linealiza+0x18c>)
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	001a      	movs	r2, r3
 800d47a:	4b2f      	ldr	r3, [pc, #188]	@ (800d538 <linealiza+0x190>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	4353      	muls	r3, r2
 800d480:	b29a      	uxth	r2, r3
 800d482:	4b2c      	ldr	r3, [pc, #176]	@ (800d534 <linealiza+0x18c>)
 800d484:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800d486:	4b2b      	ldr	r3, [pc, #172]	@ (800d534 <linealiza+0x18c>)
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	0a1b      	lsrs	r3, r3, #8
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	4b29      	ldr	r3, [pc, #164]	@ (800d538 <linealiza+0x190>)
 800d492:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800d494:	4b27      	ldr	r3, [pc, #156]	@ (800d534 <linealiza+0x18c>)
 800d496:	2200      	movs	r2, #0
 800d498:	801a      	strh	r2, [r3, #0]
	X = A;
 800d49a:	4b27      	ldr	r3, [pc, #156]	@ (800d538 <linealiza+0x190>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	001a      	movs	r2, r3
 800d4a0:	4b24      	ldr	r3, [pc, #144]	@ (800d534 <linealiza+0x18c>)
 800d4a2:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800d4a4:	4b23      	ldr	r3, [pc, #140]	@ (800d534 <linealiza+0x18c>)
 800d4a6:	881a      	ldrh	r2, [r3, #0]
 800d4a8:	4b18      	ldr	r3, [pc, #96]	@ (800d50c <linealiza+0x164>)
 800d4aa:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800d4ac:	4b23      	ldr	r3, [pc, #140]	@ (800d53c <linealiza+0x194>)
 800d4ae:	781a      	ldrb	r2, [r3, #0]
 800d4b0:	4b21      	ldr	r3, [pc, #132]	@ (800d538 <linealiza+0x190>)
 800d4b2:	701a      	strb	r2, [r3, #0]
	X = A;
 800d4b4:	4b20      	ldr	r3, [pc, #128]	@ (800d538 <linealiza+0x190>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	001a      	movs	r2, r3
 800d4ba:	4b1e      	ldr	r3, [pc, #120]	@ (800d534 <linealiza+0x18c>)
 800d4bc:	801a      	strh	r2, [r3, #0]

	A = 10;
 800d4be:	4b1e      	ldr	r3, [pc, #120]	@ (800d538 <linealiza+0x190>)
 800d4c0:	220a      	movs	r2, #10
 800d4c2:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800d4c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d534 <linealiza+0x18c>)
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	001a      	movs	r2, r3
 800d4cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d538 <linealiza+0x190>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	4353      	muls	r3, r2
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	4b17      	ldr	r3, [pc, #92]	@ (800d534 <linealiza+0x18c>)
 800d4d6:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800d4d8:	4b16      	ldr	r3, [pc, #88]	@ (800d534 <linealiza+0x18c>)
 800d4da:	881a      	ldrh	r2, [r3, #0]
 800d4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d50c <linealiza+0x164>)
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	18d3      	adds	r3, r2, r3
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	4b13      	ldr	r3, [pc, #76]	@ (800d534 <linealiza+0x18c>)
 800d4e6:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800d4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d514 <linealiza+0x16c>)
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	b21b      	sxth	r3, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	da05      	bge.n	800d4fe <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800d4f2:	4b10      	ldr	r3, [pc, #64]	@ (800d534 <linealiza+0x18c>)
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	425b      	negs	r3, r3
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d534 <linealiza+0x18c>)
 800d4fc:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <linealiza+0x18c>)
 800d500:	881a      	ldrh	r2, [r3, #0]
 800d502:	4b02      	ldr	r3, [pc, #8]	@ (800d50c <linealiza+0x164>)
 800d504:	801a      	strh	r2, [r3, #0]
}
 800d506:	46c0      	nop			@ (mov r8, r8)
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	2000120a 	.word	0x2000120a
 800d510:	20001208 	.word	0x20001208
 800d514:	20001204 	.word	0x20001204
 800d518:	20001200 	.word	0x20001200
 800d51c:	0000038d 	.word	0x0000038d
 800d520:	00000339 	.word	0x00000339
 800d524:	000002aa 	.word	0x000002aa
 800d528:	0000ffff 	.word	0x0000ffff
 800d52c:	000093cc 	.word	0x000093cc
 800d530:	00002ecc 	.word	0x00002ecc
 800d534:	20001206 	.word	0x20001206
 800d538:	20001202 	.word	0x20001202
 800d53c:	20000b66 	.word	0x20000b66

0800d540 <mult1x2>:

void mult1x2(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800d544:	4b2f      	ldr	r3, [pc, #188]	@ (800d604 <mult1x2+0xc4>)
 800d546:	881a      	ldrh	r2, [r3, #0]
 800d548:	4b2f      	ldr	r3, [pc, #188]	@ (800d608 <mult1x2+0xc8>)
 800d54a:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800d54c:	4b2e      	ldr	r3, [pc, #184]	@ (800d608 <mult1x2+0xc8>)
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	b29b      	uxth	r3, r3
 800d554:	b2da      	uxtb	r2, r3
 800d556:	4b2d      	ldr	r3, [pc, #180]	@ (800d60c <mult1x2+0xcc>)
 800d558:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d55a:	4b2c      	ldr	r3, [pc, #176]	@ (800d60c <mult1x2+0xcc>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	001a      	movs	r2, r3
 800d560:	4b28      	ldr	r3, [pc, #160]	@ (800d604 <mult1x2+0xc4>)
 800d562:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d564:	4b2a      	ldr	r3, [pc, #168]	@ (800d610 <mult1x2+0xd0>)
 800d566:	781a      	ldrb	r2, [r3, #0]
 800d568:	4b28      	ldr	r3, [pc, #160]	@ (800d60c <mult1x2+0xcc>)
 800d56a:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800d56c:	4b27      	ldr	r3, [pc, #156]	@ (800d60c <mult1x2+0xcc>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	001a      	movs	r2, r3
 800d572:	4b24      	ldr	r3, [pc, #144]	@ (800d604 <mult1x2+0xc4>)
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	4353      	muls	r3, r2
 800d578:	b29a      	uxth	r2, r3
 800d57a:	4b22      	ldr	r3, [pc, #136]	@ (800d604 <mult1x2+0xc4>)
 800d57c:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800d57e:	4b21      	ldr	r3, [pc, #132]	@ (800d604 <mult1x2+0xc4>)
 800d580:	881a      	ldrh	r2, [r3, #0]
 800d582:	4b24      	ldr	r3, [pc, #144]	@ (800d614 <mult1x2+0xd4>)
 800d584:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800d586:	4b20      	ldr	r3, [pc, #128]	@ (800d608 <mult1x2+0xc8>)
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	4b1f      	ldr	r3, [pc, #124]	@ (800d60c <mult1x2+0xcc>)
 800d58e:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d590:	4b1e      	ldr	r3, [pc, #120]	@ (800d60c <mult1x2+0xcc>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	001a      	movs	r2, r3
 800d596:	4b1b      	ldr	r3, [pc, #108]	@ (800d604 <mult1x2+0xc4>)
 800d598:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d59a:	4b1d      	ldr	r3, [pc, #116]	@ (800d610 <mult1x2+0xd0>)
 800d59c:	781a      	ldrb	r2, [r3, #0]
 800d59e:	4b1b      	ldr	r3, [pc, #108]	@ (800d60c <mult1x2+0xcc>)
 800d5a0:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800d5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d60c <mult1x2+0xcc>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	001a      	movs	r2, r3
 800d5a8:	4b16      	ldr	r3, [pc, #88]	@ (800d604 <mult1x2+0xc4>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	4353      	muls	r3, r2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	4b14      	ldr	r3, [pc, #80]	@ (800d604 <mult1x2+0xc4>)
 800d5b2:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800d5b4:	4b13      	ldr	r3, [pc, #76]	@ (800d604 <mult1x2+0xc4>)
 800d5b6:	881b      	ldrh	r3, [r3, #0]
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	4b14      	ldr	r3, [pc, #80]	@ (800d60c <mult1x2+0xcc>)
 800d5bc:	701a      	strb	r2, [r3, #0]
	resul = A;
 800d5be:	4b13      	ldr	r3, [pc, #76]	@ (800d60c <mult1x2+0xcc>)
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	001a      	movs	r2, r3
 800d5c4:	4b10      	ldr	r3, [pc, #64]	@ (800d608 <mult1x2+0xc8>)
 800d5c6:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800d5c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d604 <mult1x2+0xc4>)
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	0a1b      	lsrs	r3, r3, #8
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d60c <mult1x2+0xcc>)
 800d5d4:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d614 <mult1x2+0xd4>)
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d60c <mult1x2+0xcc>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	18d3      	adds	r3, r2, r3
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	4b09      	ldr	r3, [pc, #36]	@ (800d60c <mult1x2+0xcc>)
 800d5e6:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800d5e8:	4b08      	ldr	r3, [pc, #32]	@ (800d60c <mult1x2+0xcc>)
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	021b      	lsls	r3, r3, #8
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	4b05      	ldr	r3, [pc, #20]	@ (800d608 <mult1x2+0xc8>)
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	18d3      	adds	r3, r2, r3
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	4b03      	ldr	r3, [pc, #12]	@ (800d608 <mult1x2+0xc8>)
 800d5fa:	801a      	strh	r2, [r3, #0]
}
 800d5fc:	46c0      	nop			@ (mov r8, r8)
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	20001204 	.word	0x20001204
 800d608:	20001208 	.word	0x20001208
 800d60c:	20001202 	.word	0x20001202
 800d610:	20000b67 	.word	0x20000b67
 800d614:	2000120c 	.word	0x2000120c

0800d618 <capturaAD>:

void capturaAD (void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800d61e:	4b1a      	ldr	r3, [pc, #104]	@ (800d688 <capturaAD+0x70>)
 800d620:	689a      	ldr	r2, [r3, #8]
 800d622:	4b19      	ldr	r3, [pc, #100]	@ (800d688 <capturaAD+0x70>)
 800d624:	2101      	movs	r1, #1
 800d626:	430a      	orrs	r2, r1
 800d628:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800d62a:	4b17      	ldr	r3, [pc, #92]	@ (800d688 <capturaAD+0x70>)
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	4b16      	ldr	r3, [pc, #88]	@ (800d688 <capturaAD+0x70>)
 800d630:	211c      	movs	r1, #28
 800d632:	430a      	orrs	r2, r1
 800d634:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800d636:	4b14      	ldr	r3, [pc, #80]	@ (800d688 <capturaAD+0x70>)
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	4b13      	ldr	r3, [pc, #76]	@ (800d688 <capturaAD+0x70>)
 800d63c:	2104      	movs	r1, #4
 800d63e:	430a      	orrs	r2, r1
 800d640:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800d642:	46c0      	nop			@ (mov r8, r8)
 800d644:	4b10      	ldr	r3, [pc, #64]	@ (800d688 <capturaAD+0x70>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2204      	movs	r2, #4
 800d64a:	4013      	ands	r3, r2
 800d64c:	d0fa      	beq.n	800d644 <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800d64e:	4b0e      	ldr	r3, [pc, #56]	@ (800d688 <capturaAD+0x70>)
 800d650:	689a      	ldr	r2, [r3, #8]
 800d652:	4b0d      	ldr	r3, [pc, #52]	@ (800d688 <capturaAD+0x70>)
 800d654:	210c      	movs	r1, #12
 800d656:	438a      	bics	r2, r1
 800d658:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 10; i++);
 800d65a:	1dfb      	adds	r3, r7, #7
 800d65c:	2200      	movs	r2, #0
 800d65e:	701a      	strb	r2, [r3, #0]
 800d660:	e004      	b.n	800d66c <capturaAD+0x54>
 800d662:	1dfb      	adds	r3, r7, #7
 800d664:	781a      	ldrb	r2, [r3, #0]
 800d666:	1dfb      	adds	r3, r7, #7
 800d668:	3201      	adds	r2, #1
 800d66a:	701a      	strb	r2, [r3, #0]
 800d66c:	1dfb      	adds	r3, r7, #7
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b09      	cmp	r3, #9
 800d672:	d9f6      	bls.n	800d662 <capturaAD+0x4a>

	adcramh = ADC1->DR;
 800d674:	4b04      	ldr	r3, [pc, #16]	@ (800d688 <capturaAD+0x70>)
 800d676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d678:	b29a      	uxth	r2, r3
 800d67a:	4b04      	ldr	r3, [pc, #16]	@ (800d68c <capturaAD+0x74>)
 800d67c:	801a      	strh	r2, [r3, #0]
}
 800d67e:	46c0      	nop			@ (mov r8, r8)
 800d680:	46bd      	mov	sp, r7
 800d682:	b002      	add	sp, #8
 800d684:	bd80      	pop	{r7, pc}
 800d686:	46c0      	nop			@ (mov r8, r8)
 800d688:	40012400 	.word	0x40012400
 800d68c:	20000b70 	.word	0x20000b70

0800d690 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	0002      	movs	r2, r0
 800d698:	1dfb      	adds	r3, r7, #7
 800d69a:	701a      	strb	r2, [r3, #0]
 800d69c:	1d3b      	adds	r3, r7, #4
 800d69e:	1c0a      	adds	r2, r1, #0
 800d6a0:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800d6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e0 <wise_hot_rep+0x50>)
 800d6a4:	1dfa      	adds	r2, r7, #7
 800d6a6:	7812      	ldrb	r2, [r2, #0]
 800d6a8:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800d6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e4 <wise_hot_rep+0x54>)
 800d6ac:	881a      	ldrh	r2, [r3, #0]
 800d6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e8 <wise_hot_rep+0x58>)
 800d6b0:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800d6b2:	f7ff ff45 	bl	800d540 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6ec <wise_hot_rep+0x5c>)
 800d6b8:	881a      	ldrh	r2, [r3, #0]
 800d6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d6f0 <wise_hot_rep+0x60>)
 800d6bc:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800d6be:	4b0c      	ldr	r3, [pc, #48]	@ (800d6f0 <wise_hot_rep+0x60>)
 800d6c0:	881a      	ldrh	r2, [r3, #0]
 800d6c2:	1d3b      	adds	r3, r7, #4
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	4b09      	ldr	r3, [pc, #36]	@ (800d6f0 <wise_hot_rep+0x60>)
 800d6cc:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800d6ce:	4b08      	ldr	r3, [pc, #32]	@ (800d6f0 <wise_hot_rep+0x60>)
 800d6d0:	881a      	ldrh	r2, [r3, #0]
 800d6d2:	4b08      	ldr	r3, [pc, #32]	@ (800d6f4 <wise_hot_rep+0x64>)
 800d6d4:	801a      	strh	r2, [r3, #0]
}
 800d6d6:	46c0      	nop			@ (mov r8, r8)
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	b002      	add	sp, #8
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	46c0      	nop			@ (mov r8, r8)
 800d6e0:	20000b67 	.word	0x20000b67
 800d6e4:	20001200 	.word	0x20001200
 800d6e8:	20001204 	.word	0x20001204
 800d6ec:	20001208 	.word	0x20001208
 800d6f0:	20001206 	.word	0x20001206
 800d6f4:	2000120a 	.word	0x2000120a

0800d6f8 <Y_A>:

void Y_A (void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	af00      	add	r7, sp, #0
	Y = adcramh;
 800d6fc:	4b05      	ldr	r3, [pc, #20]	@ (800d714 <Y_A+0x1c>)
 800d6fe:	881a      	ldrh	r2, [r3, #0]
 800d700:	4b05      	ldr	r3, [pc, #20]	@ (800d718 <Y_A+0x20>)
 800d702:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800d704:	4b05      	ldr	r3, [pc, #20]	@ (800d71c <Y_A+0x24>)
 800d706:	781a      	ldrb	r2, [r3, #0]
 800d708:	4b05      	ldr	r3, [pc, #20]	@ (800d720 <Y_A+0x28>)
 800d70a:	701a      	strb	r2, [r3, #0]
}
 800d70c:	46c0      	nop			@ (mov r8, r8)
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	46c0      	nop			@ (mov r8, r8)
 800d714:	20000b70 	.word	0x20000b70
 800d718:	20001204 	.word	0x20001204
 800d71c:	20000ba8 	.word	0x20000ba8
 800d720:	20001202 	.word	0x20001202

0800d724 <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	0019      	movs	r1, r3
 800d730:	1dfb      	adds	r3, r7, #7
 800d732:	701a      	strb	r2, [r3, #0]
 800d734:	1dbb      	adds	r3, r7, #6
 800d736:	1c0a      	adds	r2, r1, #0
 800d738:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800d73a:	1dfb      	adds	r3, r7, #7
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	18d3      	adds	r3, r2, r3
 800d742:	2201      	movs	r2, #1
 800d744:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800d746:	1dbb      	adds	r3, r7, #6
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	18d3      	adds	r3, r2, r3
 800d74e:	2200      	movs	r2, #0
 800d750:	701a      	strb	r2, [r3, #0]
}
 800d752:	46c0      	nop			@ (mov r8, r8)
 800d754:	46bd      	mov	sp, r7
 800d756:	b004      	add	sp, #16
 800d758:	bd80      	pop	{r7, pc}

0800d75a <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	0019      	movs	r1, r3
 800d766:	1dfb      	adds	r3, r7, #7
 800d768:	701a      	strb	r2, [r3, #0]
 800d76a:	1dbb      	adds	r3, r7, #6
 800d76c:	1c0a      	adds	r2, r1, #0
 800d76e:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800d770:	1dfb      	adds	r3, r7, #7
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	18d3      	adds	r3, r2, r3
 800d778:	2200      	movs	r2, #0
 800d77a:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800d77c:	1dbb      	adds	r3, r7, #6
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	18d3      	adds	r3, r2, r3
 800d784:	2200      	movs	r2, #0
 800d786:	701a      	strb	r2, [r3, #0]
}
 800d788:	46c0      	nop			@ (mov r8, r8)
 800d78a:	46bd      	mov	sp, r7
 800d78c:	b004      	add	sp, #16
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800d790:	b580      	push	{r7, lr}
 800d792:	af00      	add	r7, sp, #0

    asm ("nop");
 800d794:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800d796:	4bd1      	ldr	r3, [pc, #836]	@ (800dadc <tiempo+0x34c>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b07      	cmp	r3, #7
 800d79c:	d900      	bls.n	800d7a0 <tiempo+0x10>
 800d79e:	e261      	b.n	800dc64 <tiempo+0x4d4>
			goto tiempo10;				//	jrult		tiempo10;
 800d7a0:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800d7a2:	4bcf      	ldr	r3, [pc, #828]	@ (800dae0 <tiempo+0x350>)
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	4bcd      	ldr	r3, [pc, #820]	@ (800dae0 <tiempo+0x350>)
 800d7ac:	801a      	strh	r2, [r3, #0]

			   decwreg(&delayComStat);
 800d7ae:	4bcd      	ldr	r3, [pc, #820]	@ (800dae4 <tiempo+0x354>)
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f7f9 fe06 	bl	80073c2 <decwreg>
			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800d7b6:	4bcc      	ldr	r3, [pc, #816]	@ (800dae8 <tiempo+0x358>)
 800d7b8:	0018      	movs	r0, r3
 800d7ba:	f7f9 fe02 	bl	80073c2 <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800d7be:	4bcb      	ldr	r3, [pc, #812]	@ (800daec <tiempo+0x35c>)
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f7f9 fdfe 	bl	80073c2 <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800d7c6:	4bca      	ldr	r3, [pc, #808]	@ (800daf0 <tiempo+0x360>)
 800d7c8:	0018      	movs	r0, r3
 800d7ca:	f7f9 fdfa 	bl	80073c2 <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800d7ce:	4bc9      	ldr	r3, [pc, #804]	@ (800daf4 <tiempo+0x364>)
 800d7d0:	0018      	movs	r0, r3
 800d7d2:	f7f9 fdf6 	bl	80073c2 <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800d7d6:	4bc8      	ldr	r3, [pc, #800]	@ (800daf8 <tiempo+0x368>)
 800d7d8:	0018      	movs	r0, r3
 800d7da:	f7f9 fdf2 	bl	80073c2 <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800d7de:	4bc7      	ldr	r3, [pc, #796]	@ (800dafc <tiempo+0x36c>)
 800d7e0:	0018      	movs	r0, r3
 800d7e2:	f7f9 fdee 	bl	80073c2 <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800d7e6:	4bc6      	ldr	r3, [pc, #792]	@ (800db00 <tiempo+0x370>)
 800d7e8:	0018      	movs	r0, r3
 800d7ea:	f7f9 fdea 	bl	80073c2 <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800d7ee:	4bc5      	ldr	r3, [pc, #788]	@ (800db04 <tiempo+0x374>)
 800d7f0:	0018      	movs	r0, r3
 800d7f2:	f7f9 fde6 	bl	80073c2 <decwreg>

		       cntcent++;					//	Una centésima más
 800d7f6:	4bc4      	ldr	r3, [pc, #784]	@ (800db08 <tiempo+0x378>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	4bc2      	ldr	r3, [pc, #776]	@ (800db08 <tiempo+0x378>)
 800d800:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800d802:	4bc1      	ldr	r3, [pc, #772]	@ (800db08 <tiempo+0x378>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	001a      	movs	r2, r3
 800d808:	2301      	movs	r3, #1
 800d80a:	4013      	ands	r3, r2
 800d80c:	d01c      	beq.n	800d848 <tiempo+0xb8>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800d80e:	4bbf      	ldr	r3, [pc, #764]	@ (800db0c <tiempo+0x37c>)
 800d810:	0018      	movs	r0, r3
 800d812:	f7f9 fdd6 	bl	80073c2 <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800d816:	4bbe      	ldr	r3, [pc, #760]	@ (800db10 <tiempo+0x380>)
 800d818:	0018      	movs	r0, r3
 800d81a:	f7f9 fdd2 	bl	80073c2 <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800d81e:	4bbd      	ldr	r3, [pc, #756]	@ (800db14 <tiempo+0x384>)
 800d820:	0018      	movs	r0, r3
 800d822:	f7f9 fdce 	bl	80073c2 <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800d826:	4bbc      	ldr	r3, [pc, #752]	@ (800db18 <tiempo+0x388>)
 800d828:	0018      	movs	r0, r3
 800d82a:	f7f9 fdca 	bl	80073c2 <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800d82e:	4bbb      	ldr	r3, [pc, #748]	@ (800db1c <tiempo+0x38c>)
 800d830:	0018      	movs	r0, r3
 800d832:	f7f9 fdc6 	bl	80073c2 <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800d836:	4bba      	ldr	r3, [pc, #744]	@ (800db20 <tiempo+0x390>)
 800d838:	0018      	movs	r0, r3
 800d83a:	f7f9 fdc2 	bl	80073c2 <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800d83e:	4bb9      	ldr	r3, [pc, #740]	@ (800db24 <tiempo+0x394>)
 800d840:	0018      	movs	r0, r3
 800d842:	f7f9 fdbe 	bl	80073c2 <decwreg>
 800d846:	e000      	b.n	800d84a <tiempo+0xba>
			        goto no_dec_deb;
 800d848:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800d84a:	4baf      	ldr	r3, [pc, #700]	@ (800db08 <tiempo+0x378>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	2b63      	cmp	r3, #99	@ 0x63
 800d850:	d800      	bhi.n	800d854 <tiempo+0xc4>
 800d852:	e209      	b.n	800dc68 <tiempo+0x4d8>
		        	goto tiempo12;			//;jruge		tiempo12
 800d854:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;				//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800d856:	4bac      	ldr	r3, [pc, #688]	@ (800db08 <tiempo+0x378>)
 800d858:	2200      	movs	r2, #0
 800d85a:	701a      	strb	r2, [r3, #0]
//;-----------------------------------------------------------------------------------

				//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
				//ld			A,BluetoothState
				//cp			A,#3
				if(BluetoothState!=3)//jrne		endSelect
 800d85c:	4bb2      	ldr	r3, [pc, #712]	@ (800db28 <tiempo+0x398>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b03      	cmp	r3, #3
 800d862:	d142      	bne.n	800d8ea <tiempo+0x15a>
					goto endSelect;
				//ldw			X,#cntSetName;
				decword(&cntSetName);//call		decword
 800d864:	4bb1      	ldr	r3, [pc, #708]	@ (800db2c <tiempo+0x39c>)
 800d866:	0018      	movs	r0, r3
 800d868:	f7f9 fd99 	bl	800739e <decword>
				//btjt	flagsTxControl,#f_statBLE,no_toggleCOM;  Con conexión BLE activa no cambies el canal de comunicacion
				//; no cambies de canal de comunicación si se está transmitiendo algun logger via wifi
				//btjt	flagsWIFI,#f_timeLoggerCmd,no_toggleCOM;
				//btjt	flagsWIFI,#f_eventLoggerCmd,no_toggleCOM;

				if(flagsTxControl[f_statBLE] || flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800d86c:	4bb0      	ldr	r3, [pc, #704]	@ (800db30 <tiempo+0x3a0>)
 800d86e:	785b      	ldrb	r3, [r3, #1]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d11e      	bne.n	800d8b2 <tiempo+0x122>
 800d874:	4baf      	ldr	r3, [pc, #700]	@ (800db34 <tiempo+0x3a4>)
 800d876:	78db      	ldrb	r3, [r3, #3]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d11a      	bne.n	800d8b2 <tiempo+0x122>
 800d87c:	4bad      	ldr	r3, [pc, #692]	@ (800db34 <tiempo+0x3a4>)
 800d87e:	791b      	ldrb	r3, [r3, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d116      	bne.n	800d8b2 <tiempo+0x122>
					goto no_toggleCOM;

toggleCOM:
 800d884:	46c0      	nop			@ (mov r8, r8)
				//; no cambies el canal de comunicación si hay una respuesta en transmisión en progreso
				//tnz		keyTx
				if(keyTx)//jrne	no_toggleCOM
 800d886:	4bac      	ldr	r3, [pc, #688]	@ (800db38 <tiempo+0x3a8>)
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d113      	bne.n	800d8b6 <tiempo+0x126>
					goto no_toggleCOM;
				flagsTxControl[f_select] = !(flagsTxControl[f_select]);// bcpl		flagsTxControl,#f_select
 800d88e:	4ba8      	ldr	r3, [pc, #672]	@ (800db30 <tiempo+0x3a0>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	1e5a      	subs	r2, r3, #1
 800d894:	4193      	sbcs	r3, r2
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2201      	movs	r2, #1
 800d89a:	4053      	eors	r3, r2
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	1c1a      	adds	r2, r3, #0
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	4ba2      	ldr	r3, [pc, #648]	@ (800db30 <tiempo+0x3a0>)
 800d8a8:	701a      	strb	r2, [r3, #0]
				delayComStat = 10;//mov			delayComStat,#10
 800d8aa:	4b8e      	ldr	r3, [pc, #568]	@ (800dae4 <tiempo+0x354>)
 800d8ac:	220a      	movs	r2, #10
 800d8ae:	701a      	strb	r2, [r3, #0]
 800d8b0:	e002      	b.n	800d8b8 <tiempo+0x128>
					goto no_toggleCOM;
 800d8b2:	46c0      	nop			@ (mov r8, r8)
 800d8b4:	e000      	b.n	800d8b8 <tiempo+0x128>
					goto no_toggleCOM;
 800d8b6:	46c0      	nop			@ (mov r8, r8)
no_toggleCOM:

				if(!flagsTxControl[f_select])//btjf		flagsTxControl,#f_select,BLEselect
 800d8b8:	4b9d      	ldr	r3, [pc, #628]	@ (800db30 <tiempo+0x3a0>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	4053      	eors	r3, r2
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d108      	bne.n	800d8d8 <tiempo+0x148>
					goto BLEselect;
WIFIselect:
 800d8c6:	46c0      	nop			@ (mov r8, r8)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);//bset		PE_ODR,#2
 800d8c8:	2380      	movs	r3, #128	@ 0x80
 800d8ca:	015b      	lsls	r3, r3, #5
 800d8cc:	489b      	ldr	r0, [pc, #620]	@ (800db3c <tiempo+0x3ac>)
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	0019      	movs	r1, r3
 800d8d2:	f006 fdf0 	bl	80144b6 <HAL_GPIO_WritePin>
				goto endSelect;//jra			endSelect
 800d8d6:	e009      	b.n	800d8ec <tiempo+0x15c>
					goto BLEselect;
 800d8d8:	46c0      	nop			@ (mov r8, r8)
BLEselect:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);//bres		PE_ODR,#2
 800d8da:	2380      	movs	r3, #128	@ 0x80
 800d8dc:	015b      	lsls	r3, r3, #5
 800d8de:	4897      	ldr	r0, [pc, #604]	@ (800db3c <tiempo+0x3ac>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	0019      	movs	r1, r3
 800d8e4:	f006 fde7 	bl	80144b6 <HAL_GPIO_WritePin>
 800d8e8:	e000      	b.n	800d8ec <tiempo+0x15c>
					goto endSelect;
 800d8ea:	46c0      	nop			@ (mov r8, r8)
//    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
//no_inc_timeH:
//
//noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800d8ec:	4b94      	ldr	r3, [pc, #592]	@ (800db40 <tiempo+0x3b0>)
 800d8ee:	0018      	movs	r0, r3
 800d8f0:	f7f9 fd55 	bl	800739e <decword>
	            decwreg(&timeTxTBLE);
 800d8f4:	4b93      	ldr	r3, [pc, #588]	@ (800db44 <tiempo+0x3b4>)
 800d8f6:	0018      	movs	r0, r3
 800d8f8:	f7f9 fd63 	bl	80073c2 <decwreg>
				decword(&timeoutTBLE);
 800d8fc:	4b92      	ldr	r3, [pc, #584]	@ (800db48 <tiempo+0x3b8>)
 800d8fe:	0018      	movs	r0, r3
 800d900:	f7f9 fd4d 	bl	800739e <decword>
	            decwreg(&timeTxTWF);
 800d904:	4b91      	ldr	r3, [pc, #580]	@ (800db4c <tiempo+0x3bc>)
 800d906:	0018      	movs	r0, r3
 800d908:	f7f9 fd5b 	bl	80073c2 <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800d90c:	4b90      	ldr	r3, [pc, #576]	@ (800db50 <tiempo+0x3c0>)
 800d90e:	0018      	movs	r0, r3
 800d910:	f7f9 fd45 	bl	800739e <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800d914:	4b8f      	ldr	r3, [pc, #572]	@ (800db54 <tiempo+0x3c4>)
 800d916:	0018      	movs	r0, r3
 800d918:	f7f9 fd53 	bl	80073c2 <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800d91c:	4b8e      	ldr	r3, [pc, #568]	@ (800db58 <tiempo+0x3c8>)
 800d91e:	0018      	movs	r0, r3
 800d920:	f7f9 fd4f 	bl	80073c2 <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800d924:	4b8d      	ldr	r3, [pc, #564]	@ (800db5c <tiempo+0x3cc>)
 800d926:	0018      	movs	r0, r3
 800d928:	f7f9 fd4b 	bl	80073c2 <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800d92c:	4b8c      	ldr	r3, [pc, #560]	@ (800db60 <tiempo+0x3d0>)
 800d92e:	0018      	movs	r0, r3
 800d930:	f7f9 fd47 	bl	80073c2 <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800d934:	4b8b      	ldr	r3, [pc, #556]	@ (800db64 <tiempo+0x3d4>)
 800d936:	0018      	movs	r0, r3
 800d938:	f7f9 fd43 	bl	80073c2 <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800d93c:	4b8a      	ldr	r3, [pc, #552]	@ (800db68 <tiempo+0x3d8>)
 800d93e:	0018      	movs	r0, r3
 800d940:	f7f9 fd3f 	bl	80073c2 <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800d944:	4b89      	ldr	r3, [pc, #548]	@ (800db6c <tiempo+0x3dc>)
 800d946:	0018      	movs	r0, r3
 800d948:	f7f9 fd29 	bl	800739e <decword>
		    	decword(&timePreDh_h);
 800d94c:	4b88      	ldr	r3, [pc, #544]	@ (800db70 <tiempo+0x3e0>)
 800d94e:	0018      	movs	r0, r3
 800d950:	f7f9 fd25 	bl	800739e <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800d954:	4b87      	ldr	r3, [pc, #540]	@ (800db74 <tiempo+0x3e4>)
 800d956:	0018      	movs	r0, r3
 800d958:	f7f9 fd33 	bl	80073c2 <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800d95c:	4b86      	ldr	r3, [pc, #536]	@ (800db78 <tiempo+0x3e8>)
 800d95e:	0018      	movs	r0, r3
 800d960:	f7f9 fd2f 	bl	80073c2 <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800d964:	4b85      	ldr	r3, [pc, #532]	@ (800db7c <tiempo+0x3ec>)
 800d966:	0018      	movs	r0, r3
 800d968:	f7f9 fd2b 	bl	80073c2 <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800d96c:	4b84      	ldr	r3, [pc, #528]	@ (800db80 <tiempo+0x3f0>)
 800d96e:	0018      	movs	r0, r3
 800d970:	f7f9 fd27 	bl	80073c2 <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800d974:	4b83      	ldr	r3, [pc, #524]	@ (800db84 <tiempo+0x3f4>)
 800d976:	0018      	movs	r0, r3
 800d978:	f7f9 fd23 	bl	80073c2 <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800d97c:	4b82      	ldr	r3, [pc, #520]	@ (800db88 <tiempo+0x3f8>)
 800d97e:	0018      	movs	r0, r3
 800d980:	f7f9 fd1f 	bl	80073c2 <decwreg>
		    	decwreg(&valflvl);//
 800d984:	4b81      	ldr	r3, [pc, #516]	@ (800db8c <tiempo+0x3fc>)
 800d986:	0018      	movs	r0, r3
 800d988:	f7f9 fd1b 	bl	80073c2 <decwreg>
		    	decwreg(&valfhvl);//
 800d98c:	4b80      	ldr	r3, [pc, #512]	@ (800db90 <tiempo+0x400>)
 800d98e:	0018      	movs	r0, r3
 800d990:	f7f9 fd17 	bl	80073c2 <decwreg>
		    	decwreg(&cnt_prog);//
 800d994:	4b7f      	ldr	r3, [pc, #508]	@ (800db94 <tiempo+0x404>)
 800d996:	0018      	movs	r0, r3
 800d998:	f7f9 fd13 	bl	80073c2 <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800d99c:	4b7e      	ldr	r3, [pc, #504]	@ (800db98 <tiempo+0x408>)
 800d99e:	0018      	movs	r0, r3
 800d9a0:	f7f9 fd0f 	bl	80073c2 <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800d9a4:	4b7d      	ldr	r3, [pc, #500]	@ (800db9c <tiempo+0x40c>)
 800d9a6:	0018      	movs	r0, r3
 800d9a8:	f7f9 fd0b 	bl	80073c2 <decwreg>
		    	decwreg(&End_sec);//
 800d9ac:	4b7c      	ldr	r3, [pc, #496]	@ (800dba0 <tiempo+0x410>)
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f7f9 fd07 	bl	80073c2 <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800d9b4:	4b7b      	ldr	r3, [pc, #492]	@ (800dba4 <tiempo+0x414>)
 800d9b6:	0018      	movs	r0, r3
 800d9b8:	f7f9 fcf1 	bl	800739e <decword>

		    	decwreg(&timeOutRst);
 800d9bc:	4b7a      	ldr	r3, [pc, #488]	@ (800dba8 <tiempo+0x418>)
 800d9be:	0018      	movs	r0, r3
 800d9c0:	f7f9 fcff 	bl	80073c2 <decwreg>
		    	decwreg(&timeOutRx);
 800d9c4:	4b79      	ldr	r3, [pc, #484]	@ (800dbac <tiempo+0x41c>)
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	f7f9 fcfb 	bl	80073c2 <decwreg>
		    	decwreg(&timeRstBLE);
 800d9cc:	4b78      	ldr	r3, [pc, #480]	@ (800dbb0 <tiempo+0x420>)
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	f7f9 fcf7 	bl	80073c2 <decwreg>
		    	decword(&cntLogger_H);			// decrementra contador de logger
 800d9d4:	4b77      	ldr	r3, [pc, #476]	@ (800dbb4 <tiempo+0x424>)
 800d9d6:	0018      	movs	r0, r3
 800d9d8:	f7f9 fce1 	bl	800739e <decword>
		    	decwreg(&cntInitTx);
 800d9dc:	4b76      	ldr	r3, [pc, #472]	@ (800dbb8 <tiempo+0x428>)
 800d9de:	0018      	movs	r0, r3
 800d9e0:	f7f9 fcef 	bl	80073c2 <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800d9e4:	4b75      	ldr	r3, [pc, #468]	@ (800dbbc <tiempo+0x42c>)
 800d9e6:	0018      	movs	r0, r3
 800d9e8:	f7f9 fcd9 	bl	800739e <decword>

		    	decword(&t_ahorro1_H);
 800d9ec:	4b74      	ldr	r3, [pc, #464]	@ (800dbc0 <tiempo+0x430>)
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f7f9 fcd5 	bl	800739e <decword>
		    	decword(&t_ahorro2_H);
 800d9f4:	4b73      	ldr	r3, [pc, #460]	@ (800dbc4 <tiempo+0x434>)
 800d9f6:	0018      	movs	r0, r3
 800d9f8:	f7f9 fcd1 	bl	800739e <decword>
		    	decword(&cntNoct_H);
 800d9fc:	4b72      	ldr	r3, [pc, #456]	@ (800dbc8 <tiempo+0x438>)
 800d9fe:	0018      	movs	r0, r3
 800da00:	f7f9 fccd 	bl	800739e <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800da04:	4b5d      	ldr	r3, [pc, #372]	@ (800db7c <tiempo+0x3ec>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	001a      	movs	r2, r3
 800da0a:	2301      	movs	r3, #1
 800da0c:	4013      	ands	r3, r2
 800da0e:	d104      	bne.n	800da1a <tiempo+0x28a>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800da10:	4b6e      	ldr	r3, [pc, #440]	@ (800dbcc <tiempo+0x43c>)
 800da12:	0018      	movs	r0, r3
 800da14:	f7f9 fcd5 	bl	80073c2 <decwreg>
 800da18:	e000      	b.n	800da1c <tiempo+0x28c>
		    		goto no_dec2;
 800da1a:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800da1c:	4b6c      	ldr	r3, [pc, #432]	@ (800dbd0 <tiempo+0x440>)
 800da1e:	0018      	movs	r0, r3
 800da20:	f7f9 fcbd 	bl	800739e <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800da24:	4b6b      	ldr	r3, [pc, #428]	@ (800dbd4 <tiempo+0x444>)
 800da26:	0018      	movs	r0, r3
 800da28:	f7f9 fcb9 	bl	800739e <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800da2c:	4b6a      	ldr	r3, [pc, #424]	@ (800dbd8 <tiempo+0x448>)
 800da2e:	0018      	movs	r0, r3
 800da30:	f7f9 fcb5 	bl	800739e <decword>
		    	decword(&drp_fanh);
 800da34:	4b69      	ldr	r3, [pc, #420]	@ (800dbdc <tiempo+0x44c>)
 800da36:	0018      	movs	r0, r3
 800da38:	f7f9 fcb1 	bl	800739e <decword>
		    	decword(&drp_comph);
 800da3c:	4b68      	ldr	r3, [pc, #416]	@ (800dbe0 <tiempo+0x450>)
 800da3e:	0018      	movs	r0, r3
 800da40:	f7f9 fcad 	bl	800739e <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800da44:	4b67      	ldr	r3, [pc, #412]	@ (800dbe4 <tiempo+0x454>)
 800da46:	881a      	ldrh	r2, [r3, #0]
 800da48:	4b67      	ldr	r3, [pc, #412]	@ (800dbe8 <tiempo+0x458>)
 800da4a:	881b      	ldrh	r3, [r3, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d204      	bcs.n	800da5a <tiempo+0x2ca>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800da50:	4b66      	ldr	r3, [pc, #408]	@ (800dbec <tiempo+0x45c>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d006      	beq.n	800da66 <tiempo+0x2d6>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800da58:	e000      	b.n	800da5c <tiempo+0x2cc>
		    		goto tiempo_17;
 800da5a:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800da5c:	4b61      	ldr	r3, [pc, #388]	@ (800dbe4 <tiempo+0x454>)
 800da5e:	0018      	movs	r0, r3
 800da60:	f7f9 fc9d 	bl	800739e <decword>
 800da64:	e000      	b.n	800da68 <tiempo+0x2d8>
	        	goto tiempo20; //jra tiempo20
 800da66:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800da68:	4b61      	ldr	r3, [pc, #388]	@ (800dbf0 <tiempo+0x460>)
 800da6a:	0018      	movs	r0, r3
 800da6c:	f7f9 fc97 	bl	800739e <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800da70:	4b60      	ldr	r3, [pc, #384]	@ (800dbf4 <tiempo+0x464>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	4b5e      	ldr	r3, [pc, #376]	@ (800dbf4 <tiempo+0x464>)
 800da7a:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800da7c:	4b5d      	ldr	r3, [pc, #372]	@ (800dbf4 <tiempo+0x464>)
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b3b      	cmp	r3, #59	@ 0x3b
 800da82:	d907      	bls.n	800da94 <tiempo+0x304>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800da84:	4b5b      	ldr	r3, [pc, #364]	@ (800dbf4 <tiempo+0x464>)
 800da86:	2200      	movs	r2, #0
 800da88:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800da8a:	4b5b      	ldr	r3, [pc, #364]	@ (800dbf8 <tiempo+0x468>)
 800da8c:	0018      	movs	r0, r3
 800da8e:	f7f9 fc98 	bl	80073c2 <decwreg>
 800da92:	e000      	b.n	800da96 <tiempo+0x306>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800da94:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
				if(GetRegFlagState(cntseg, 3)){
 800da96:	4b59      	ldr	r3, [pc, #356]	@ (800dbfc <tiempo+0x46c>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	001a      	movs	r2, r3
 800da9c:	2308      	movs	r3, #8
 800da9e:	4013      	ands	r3, r2
 800daa0:	d001      	beq.n	800daa6 <tiempo+0x316>
					asm ("nop");
 800daa2:	46c0      	nop			@ (mov r8, r8)
 800daa4:	e000      	b.n	800daa8 <tiempo+0x318>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800daa6:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800daa8:	4b54      	ldr	r3, [pc, #336]	@ (800dbfc <tiempo+0x46c>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	3301      	adds	r3, #1
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	4b52      	ldr	r3, [pc, #328]	@ (800dbfc <tiempo+0x46c>)
 800dab2:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800dab4:	4b51      	ldr	r3, [pc, #324]	@ (800dbfc <tiempo+0x46c>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b08      	cmp	r3, #8
 800daba:	d903      	bls.n	800dac4 <tiempo+0x334>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800dabc:	4b50      	ldr	r3, [pc, #320]	@ (800dc00 <tiempo+0x470>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	701a      	strb	r2, [r3, #0]
 800dac2:	e000      	b.n	800dac6 <tiempo+0x336>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800dac4:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800dac6:	4b4d      	ldr	r3, [pc, #308]	@ (800dbfc <tiempo+0x46c>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	001a      	movs	r2, r3
 800dacc:	2310      	movs	r3, #16
 800dace:	4013      	ands	r3, r2
 800dad0:	d100      	bne.n	800dad4 <tiempo+0x344>
 800dad2:	e097      	b.n	800dc04 <tiempo+0x474>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800dad4:	4b4a      	ldr	r3, [pc, #296]	@ (800dc00 <tiempo+0x470>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	71da      	strb	r2, [r3, #7]
 800dada:	e094      	b.n	800dc06 <tiempo+0x476>
 800dadc:	20000bce 	.word	0x20000bce
 800dae0:	20000b60 	.word	0x20000b60
 800dae4:	20001190 	.word	0x20001190
 800dae8:	20001100 	.word	0x20001100
 800daec:	20001139 	.word	0x20001139
 800daf0:	20000bd2 	.word	0x20000bd2
 800daf4:	20000bd9 	.word	0x20000bd9
 800daf8:	20000c30 	.word	0x20000c30
 800dafc:	20000c31 	.word	0x20000c31
 800db00:	20000c32 	.word	0x20000c32
 800db04:	20000c44 	.word	0x20000c44
 800db08:	20000b5e 	.word	0x20000b5e
 800db0c:	20000c20 	.word	0x20000c20
 800db10:	20000c21 	.word	0x20000c21
 800db14:	20000c22 	.word	0x20000c22
 800db18:	20000c23 	.word	0x20000c23
 800db1c:	20000c24 	.word	0x20000c24
 800db20:	20000c25 	.word	0x20000c25
 800db24:	20000c26 	.word	0x20000c26
 800db28:	2000004c 	.word	0x2000004c
 800db2c:	20001194 	.word	0x20001194
 800db30:	20001188 	.word	0x20001188
 800db34:	20000fec 	.word	0x20000fec
 800db38:	20000eb5 	.word	0x20000eb5
 800db3c:	50000400 	.word	0x50000400
 800db40:	20000f74 	.word	0x20000f74
 800db44:	20001196 	.word	0x20001196
 800db48:	20001198 	.word	0x20001198
 800db4c:	20000fd6 	.word	0x20000fd6
 800db50:	20000fe8 	.word	0x20000fe8
 800db54:	20001016 	.word	0x20001016
 800db58:	20001017 	.word	0x20001017
 800db5c:	20001102 	.word	0x20001102
 800db60:	2000113a 	.word	0x2000113a
 800db64:	20000f83 	.word	0x20000f83
 800db68:	20001140 	.word	0x20001140
 800db6c:	2000103c 	.word	0x2000103c
 800db70:	2000119a 	.word	0x2000119a
 800db74:	20000b7a 	.word	0x20000b7a
 800db78:	20000b7b 	.word	0x20000b7b
 800db7c:	20000b7c 	.word	0x20000b7c
 800db80:	20000b7d 	.word	0x20000b7d
 800db84:	20000b7e 	.word	0x20000b7e
 800db88:	20000b7f 	.word	0x20000b7f
 800db8c:	20000b80 	.word	0x20000b80
 800db90:	20000b81 	.word	0x20000b81
 800db94:	20000b82 	.word	0x20000b82
 800db98:	20000b83 	.word	0x20000b83
 800db9c:	20000b84 	.word	0x20000b84
 800dba0:	20000b85 	.word	0x20000b85
 800dba4:	20000c46 	.word	0x20000c46
 800dba8:	20000f81 	.word	0x20000f81
 800dbac:	20000f82 	.word	0x20000f82
 800dbb0:	20000f84 	.word	0x20000f84
 800dbb4:	20000e34 	.word	0x20000e34
 800dbb8:	20000eb6 	.word	0x20000eb6
 800dbbc:	20000fea 	.word	0x20000fea
 800dbc0:	20000c40 	.word	0x20000c40
 800dbc4:	20000c42 	.word	0x20000c42
 800dbc8:	20000c54 	.word	0x20000c54
 800dbcc:	20000c38 	.word	0x20000c38
 800dbd0:	20000b78 	.word	0x20000b78
 800dbd4:	20000b72 	.word	0x20000b72
 800dbd8:	20000b76 	.word	0x20000b76
 800dbdc:	20000c0c 	.word	0x20000c0c
 800dbe0:	20000c0a 	.word	0x20000c0a
 800dbe4:	20000bc6 	.word	0x20000bc6
 800dbe8:	20000bcc 	.word	0x20000bcc
 800dbec:	20000b68 	.word	0x20000b68
 800dbf0:	20000bc8 	.word	0x20000bc8
 800dbf4:	20000b65 	.word	0x20000b65
 800dbf8:	20000bd7 	.word	0x20000bd7
 800dbfc:	20000b5f 	.word	0x20000b5f
 800dc00:	20000b88 	.word	0x20000b88
					goto	tiempo_j01;		// Ya son 16 segundos?
 800dc04:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800dc06:	4b1c      	ldr	r3, [pc, #112]	@ (800dc78 <tiempo+0x4e8>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b3b      	cmp	r3, #59	@ 0x3b
 800dc0c:	d92e      	bls.n	800dc6c <tiempo+0x4dc>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800dc0e:	4b1a      	ldr	r3, [pc, #104]	@ (800dc78 <tiempo+0x4e8>)
 800dc10:	2200      	movs	r2, #0
 800dc12:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800dc14:	4b19      	ldr	r3, [pc, #100]	@ (800dc7c <tiempo+0x4ec>)
 800dc16:	2200      	movs	r2, #0
 800dc18:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800dc1a:	4b19      	ldr	r3, [pc, #100]	@ (800dc80 <tiempo+0x4f0>)
 800dc1c:	0018      	movs	r0, r3
 800dc1e:	f7f9 fbd0 	bl	80073c2 <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800dc22:	4b18      	ldr	r3, [pc, #96]	@ (800dc84 <tiempo+0x4f4>)
 800dc24:	0018      	movs	r0, r3
 800dc26:	f7f9 fbcc 	bl	80073c2 <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800dc2a:	4b17      	ldr	r3, [pc, #92]	@ (800dc88 <tiempo+0x4f8>)
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	f7f9 fbc8 	bl	80073c2 <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800dc32:	4b16      	ldr	r3, [pc, #88]	@ (800dc8c <tiempo+0x4fc>)
 800dc34:	0018      	movs	r0, r3
 800dc36:	f7f9 fbc4 	bl	80073c2 <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800dc3a:	4b15      	ldr	r3, [pc, #84]	@ (800dc90 <tiempo+0x500>)
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f7f9 fbc0 	bl	80073c2 <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800dc42:	4b14      	ldr	r3, [pc, #80]	@ (800dc94 <tiempo+0x504>)
 800dc44:	0018      	movs	r0, r3
 800dc46:	f7f9 fbaa 	bl	800739e <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800dc4a:	4b13      	ldr	r3, [pc, #76]	@ (800dc98 <tiempo+0x508>)
 800dc4c:	0018      	movs	r0, r3
 800dc4e:	f7f9 fba6 	bl	800739e <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800dc52:	4b12      	ldr	r3, [pc, #72]	@ (800dc9c <tiempo+0x50c>)
 800dc54:	0018      	movs	r0, r3
 800dc56:	f7f9 fba2 	bl	800739e <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800dc5a:	4b11      	ldr	r3, [pc, #68]	@ (800dca0 <tiempo+0x510>)
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	f7f9 fbb0 	bl	80073c2 <decwreg>
	    		 goto fintiem;
 800dc62:	e004      	b.n	800dc6e <tiempo+0x4de>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800dc64:	46c0      	nop			@ (mov r8, r8)
 800dc66:	e002      	b.n	800dc6e <tiempo+0x4de>
		        goto fintiem;
 800dc68:	46c0      	nop			@ (mov r8, r8)
 800dc6a:	e000      	b.n	800dc6e <tiempo+0x4de>
					goto fintiem;				//jrult fintiem
 800dc6c:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800dc6e:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800dc70:	46c0      	nop			@ (mov r8, r8)
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	46c0      	nop			@ (mov r8, r8)
 800dc78:	20000b5f 	.word	0x20000b5f
 800dc7c:	20000be8 	.word	0x20000be8
 800dc80:	20000c37 	.word	0x20000c37
 800dc84:	20000c08 	.word	0x20000c08
 800dc88:	20000c09 	.word	0x20000c09
 800dc8c:	20000bd8 	.word	0x20000bd8
 800dc90:	20000bdb 	.word	0x20000bdb
 800dc94:	20000b74 	.word	0x20000b74
 800dc98:	20000c3c 	.word	0x20000c3c
 800dc9c:	20000c3e 	.word	0x20000c3e
 800dca0:	20000c61 	.word	0x20000c61

0800dca4 <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800dcaa:	4b6f      	ldr	r3, [pc, #444]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dcac:	789b      	ldrb	r3, [r3, #2]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d023      	beq.n	800dcfa <tx_buffer_prep+0x56>
			goto	tx_header;
 800dcb2:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800dcb4:	4b6d      	ldr	r3, [pc, #436]	@ (800de6c <tx_buffer_prep+0x1c8>)
 800dcb6:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800dcb8:	4b6d      	ldr	r3, [pc, #436]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dcba:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	781a      	ldrb	r2, [r3, #0]
 800dcc0:	4b6c      	ldr	r3, [pc, #432]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800dcc2:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800dcc4:	4b6b      	ldr	r3, [pc, #428]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800dcc6:	781a      	ldrb	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800dccc:	4b69      	ldr	r3, [pc, #420]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	0018      	movs	r0, r3
 800dcd2:	f7f9 fb49 	bl	8007368 <build_chksum>
	    	point_X++;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	3301      	adds	r3, #1
 800dce0:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	4b64      	ldr	r3, [pc, #400]	@ (800de78 <tx_buffer_prep+0x1d4>)
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d800      	bhi.n	800dcec <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800dcea:	e7e7      	b.n	800dcbc <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800dcec:	4b63      	ldr	r3, [pc, #396]	@ (800de7c <tx_buffer_prep+0x1d8>)
 800dcee:	2208      	movs	r2, #8
 800dcf0:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800dcf2:	4b5d      	ldr	r3, [pc, #372]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800dcf8:	e0b1      	b.n	800de5e <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800dcfa:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800dcfc:	4b5a      	ldr	r3, [pc, #360]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	2201      	movs	r2, #1
 800dd02:	4053      	eors	r3, r2
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d107      	bne.n	800dd1a <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800dd0a:	4b57      	ldr	r3, [pc, #348]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dd0c:	785b      	ldrb	r3, [r3, #1]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	4053      	eors	r3, r2
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d140      	bne.n	800dd9a <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800dd18:	e000      	b.n	800dd1c <tx_buffer_prep+0x78>
			goto	notest;
 800dd1a:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800dd1c:	4b58      	ldr	r3, [pc, #352]	@ (800de80 <tx_buffer_prep+0x1dc>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	4b58      	ldr	r3, [pc, #352]	@ (800de84 <tx_buffer_prep+0x1e0>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d33a      	bcc.n	800dd9e <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800dd28:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800dd2a:	4b4f      	ldr	r3, [pc, #316]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dd2c:	78db      	ldrb	r3, [r3, #3]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d122      	bne.n	800dd78 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800dd32:	4b4f      	ldr	r3, [pc, #316]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dd34:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800dd36:	4b54      	ldr	r3, [pc, #336]	@ (800de88 <tx_buffer_prep+0x1e4>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800dd3c:	4b53      	ldr	r3, [pc, #332]	@ (800de8c <tx_buffer_prep+0x1e8>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	0e1b      	lsrs	r3, r3, #24
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	4b4a      	ldr	r3, [pc, #296]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dd46:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800dd48:	4b50      	ldr	r3, [pc, #320]	@ (800de8c <tx_buffer_prep+0x1e8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	0c1b      	lsrs	r3, r3, #16
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	4b47      	ldr	r3, [pc, #284]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dd52:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800dd54:	4b4d      	ldr	r3, [pc, #308]	@ (800de8c <tx_buffer_prep+0x1e8>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	0a1b      	lsrs	r3, r3, #8
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	4b44      	ldr	r3, [pc, #272]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dd5e:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800dd60:	4b4a      	ldr	r3, [pc, #296]	@ (800de8c <tx_buffer_prep+0x1e8>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	4b42      	ldr	r3, [pc, #264]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dd68:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800dd6a:	4b44      	ldr	r3, [pc, #272]	@ (800de7c <tx_buffer_prep+0x1d8>)
 800dd6c:	2204      	movs	r2, #4
 800dd6e:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800dd70:	4b3d      	ldr	r3, [pc, #244]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dd72:	2201      	movs	r2, #1
 800dd74:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800dd76:	e072      	b.n	800de5e <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800dd78:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800dd7a:	4b45      	ldr	r3, [pc, #276]	@ (800de90 <tx_buffer_prep+0x1ec>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800dd80:	4b39      	ldr	r3, [pc, #228]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800dd86:	4b38      	ldr	r3, [pc, #224]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	701a      	strb	r2, [r3, #0]
		flagsLogger [4] = 0;				// permite loggeo de eventos
 800dd8c:	4b41      	ldr	r3, [pc, #260]	@ (800de94 <tx_buffer_prep+0x1f0>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	711a      	strb	r2, [r3, #4]
		flagsLogger [5] = 0;				// permite loggeo de datos
 800dd92:	4b40      	ldr	r3, [pc, #256]	@ (800de94 <tx_buffer_prep+0x1f0>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800dd98:	e061      	b.n	800de5e <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800dd9a:	46c0      	nop			@ (mov r8, r8)
 800dd9c:	e000      	b.n	800dda0 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800dd9e:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800dda0:	4b37      	ldr	r3, [pc, #220]	@ (800de80 <tx_buffer_prep+0x1dc>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800dda6:	4b32      	ldr	r3, [pc, #200]	@ (800de70 <tx_buffer_prep+0x1cc>)
 800dda8:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800ddaa:	4b37      	ldr	r3, [pc, #220]	@ (800de88 <tx_buffer_prep+0x1e4>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	781a      	ldrb	r2, [r3, #0]
 800ddb4:	4b2f      	ldr	r3, [pc, #188]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800ddb6:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800ddb8:	4b37      	ldr	r3, [pc, #220]	@ (800de98 <tx_buffer_prep+0x1f4>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d111      	bne.n	800dde4 <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800ddc0:	4b34      	ldr	r3, [pc, #208]	@ (800de94 <tx_buffer_prep+0x1f0>)
 800ddc2:	791b      	ldrb	r3, [r3, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d107      	bne.n	800ddd8 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800ddc8:	4b32      	ldr	r3, [pc, #200]	@ (800de94 <tx_buffer_prep+0x1f0>)
 800ddca:	795b      	ldrb	r3, [r3, #5]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	4053      	eors	r3, r2
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d108      	bne.n	800dde8 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800ddd6:	e000      	b.n	800ddda <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800ddd8:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	781a      	ldrb	r2, [r3, #0]
 800ddde:	4b25      	ldr	r3, [pc, #148]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800dde0:	701a      	strb	r2, [r3, #0]
 800dde2:	e002      	b.n	800ddea <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800dde4:	46c0      	nop			@ (mov r8, r8)
 800dde6:	e000      	b.n	800ddea <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800dde8:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800ddea:	4b22      	ldr	r3, [pc, #136]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800ddec:	781a      	ldrb	r2, [r3, #0]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800ddfe:	4b22      	ldr	r3, [pc, #136]	@ (800de88 <tx_buffer_prep+0x1e4>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	3301      	adds	r3, #1
 800de04:	b2da      	uxtb	r2, r3
 800de06:	4b20      	ldr	r3, [pc, #128]	@ (800de88 <tx_buffer_prep+0x1e4>)
 800de08:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800de0a:	4b1a      	ldr	r3, [pc, #104]	@ (800de74 <tx_buffer_prep+0x1d0>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	0018      	movs	r0, r3
 800de10:	f7f9 faaa 	bl	8007368 <build_chksum>

		if(!flagsTX [0]){
 800de14:	4b14      	ldr	r3, [pc, #80]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2201      	movs	r2, #1
 800de1a:	4053      	eors	r3, r2
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10b      	bne.n	800de3a <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800de22:	4b1e      	ldr	r3, [pc, #120]	@ (800de9c <tx_buffer_prep+0x1f8>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d108      	bne.n	800de3e <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800de2c:	4b1c      	ldr	r3, [pc, #112]	@ (800dea0 <tx_buffer_prep+0x1fc>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800de32:	4b0d      	ldr	r3, [pc, #52]	@ (800de68 <tx_buffer_prep+0x1c4>)
 800de34:	2201      	movs	r2, #1
 800de36:	705a      	strb	r2, [r3, #1]
 800de38:	e002      	b.n	800de40 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800de3a:	46c0      	nop			@ (mov r8, r8)
 800de3c:	e000      	b.n	800de40 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800de3e:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800de40:	4b11      	ldr	r3, [pc, #68]	@ (800de88 <tx_buffer_prep+0x1e4>)
 800de42:	781a      	ldrb	r2, [r3, #0]
 800de44:	4b17      	ldr	r3, [pc, #92]	@ (800dea4 <tx_buffer_prep+0x200>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d200      	bcs.n	800de4e <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800de4c:	e7b0      	b.n	800ddb0 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800de4e:	4b0c      	ldr	r3, [pc, #48]	@ (800de80 <tx_buffer_prep+0x1dc>)
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800de54:	4b13      	ldr	r3, [pc, #76]	@ (800dea4 <tx_buffer_prep+0x200>)
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	4b08      	ldr	r3, [pc, #32]	@ (800de7c <tx_buffer_prep+0x1d8>)
 800de5a:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800de5c:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800de5e:	46c0      	nop			@ (mov r8, r8)
 800de60:	46bd      	mov	sp, r7
 800de62:	b002      	add	sp, #8
 800de64:	bd80      	pop	{r7, pc}
 800de66:	46c0      	nop			@ (mov r8, r8)
 800de68:	20000eb8 	.word	0x20000eb8
 800de6c:	20000e74 	.word	0x20000e74
 800de70:	20000ed4 	.word	0x20000ed4
 800de74:	200008e4 	.word	0x200008e4
 800de78:	20000e7b 	.word	0x20000e7b
 800de7c:	20000ece 	.word	0x20000ece
 800de80:	20000eb0 	.word	0x20000eb0
 800de84:	20000eac 	.word	0x20000eac
 800de88:	20000eb4 	.word	0x20000eb4
 800de8c:	20000ed0 	.word	0x20000ed0
 800de90:	20000eb5 	.word	0x20000eb5
 800de94:	20000ea0 	.word	0x20000ea0
 800de98:	20000f78 	.word	0x20000f78
 800de9c:	20000ec8 	.word	0x20000ec8
 800dea0:	20000ec4 	.word	0x20000ec4
 800dea4:	20000ecc 	.word	0x20000ecc

0800dea8 <tx_control>:

uint32_t   chksum_to_compare = 0;
uint8_t    contador_bloques_fw = 16;


void tx_control(void){
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b092      	sub	sp, #72	@ 0x48
 800deac:	af00      	add	r7, sp, #0

	//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
	//ld			A,BluetoothState
	//cp			A,#3
	//jrne		end_tx_control_b ; directamente sal de tx_control
	if(BluetoothState != 3)
 800deae:	4bd9      	ldr	r3, [pc, #868]	@ (800e214 <tx_control+0x36c>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d001      	beq.n	800deba <tx_control+0x12>
 800deb6:	f003 f920 	bl	80110fa <tx_control+0x3252>
		goto end_tx_control_b;

	//; / define el estado actual de la conexion correspondiente
	//tnz			delayComStat
	//jrne		end_tx_control
	if(delayComStat)
 800deba:	4bd7      	ldr	r3, [pc, #860]	@ (800e218 <tx_control+0x370>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <tx_control+0x1e>
 800dec2:	f002 f86b 	bl	800ff9c <tx_control+0x20f4>
		goto end_tx_control;
statDef:
 800dec6:	46c0      	nop			@ (mov r8, r8)
	//tnz			statComFlag
	//jreq		statDef_clr
	if(statComFlag==0)
 800dec8:	4bd4      	ldr	r3, [pc, #848]	@ (800e21c <tx_control+0x374>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d029      	beq.n	800df24 <tx_control+0x7c>
		goto statDef_clr;
	//;si el pin de estado está en 1 , pregunta por que comunicacion está activa
	if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,statDef_WIFI
 800ded0:	4bd3      	ldr	r3, [pc, #844]	@ (800e220 <tx_control+0x378>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d11d      	bne.n	800df14 <tx_control+0x6c>
		goto statDef_WIFI;
statDef_BLE:
 800ded8:	46c0      	nop			@ (mov r8, r8)
	flagsTxControl[f_statBLE] = 1;	//bset		flagsTxControl,#f_statBLE
 800deda:	4bd1      	ldr	r3, [pc, #836]	@ (800e220 <tx_control+0x378>)
 800dedc:	2201      	movs	r2, #1
 800dede:	705a      	strb	r2, [r3, #1]
	//ldw		X,#300;
	timeoutTWF = 300;	//ldw		timeoutTWF,X;					/ manten carga time out de Token (5 min)
 800dee0:	4bd0      	ldr	r3, [pc, #832]	@ (800e224 <tx_control+0x37c>)
 800dee2:	2296      	movs	r2, #150	@ 0x96
 800dee4:	0052      	lsls	r2, r2, #1
 800dee6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800dee8:	233f      	movs	r3, #63	@ 0x3f
 800deea:	18fb      	adds	r3, r7, r3
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e00a      	b.n	800df08 <tx_control+0x60>
		flagsWIFI[i] = 0;
 800def2:	203f      	movs	r0, #63	@ 0x3f
 800def4:	183b      	adds	r3, r7, r0
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	4acb      	ldr	r2, [pc, #812]	@ (800e228 <tx_control+0x380>)
 800defa:	2100      	movs	r1, #0
 800defc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800defe:	183b      	adds	r3, r7, r0
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	183b      	adds	r3, r7, r0
 800df04:	3201      	adds	r2, #1
 800df06:	701a      	strb	r2, [r3, #0]
 800df08:	233f      	movs	r3, #63	@ 0x3f
 800df0a:	18fb      	adds	r3, r7, r3
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b07      	cmp	r3, #7
 800df10:	d9ef      	bls.n	800def2 <tx_control+0x4a>
	goto end_statDef;//jra			end_statDef
 800df12:	e047      	b.n	800dfa4 <tx_control+0xfc>
		goto statDef_WIFI;
 800df14:	46c0      	nop			@ (mov r8, r8)
statDef_WIFI:
	flagsTxControl[f_statWIFI] = 1;	//bset		flagsTxControl,#f_statWIFI
 800df16:	4bc2      	ldr	r3, [pc, #776]	@ (800e220 <tx_control+0x378>)
 800df18:	2201      	movs	r2, #1
 800df1a:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 255;			// mov			statComWIFIFlag,#255
 800df1c:	4bc3      	ldr	r3, [pc, #780]	@ (800e22c <tx_control+0x384>)
 800df1e:	22ff      	movs	r2, #255	@ 0xff
 800df20:	701a      	strb	r2, [r3, #0]
	goto end_statDef;				// jra			end_statDef
 800df22:	e03f      	b.n	800dfa4 <tx_control+0xfc>
		goto statDef_clr;
 800df24:	46c0      	nop			@ (mov r8, r8)
statDef_clr:
	//;pregunta por que comunicacion está inactiva
	//btjt		flagsTxControl,#f_select,statDef_clrWIFI
	if(flagsTxControl[f_select])
 800df26:	4bbe      	ldr	r3, [pc, #760]	@ (800e220 <tx_control+0x378>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d133      	bne.n	800df96 <tx_control+0xee>
		goto statDef_clrWIFI;
statDef_clrBLE:
 800df2e:	46c0      	nop			@ (mov r8, r8)

	//btjf	flagsTxControl,#f_statBLE,noCancelTx ;// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
	if(!flagsTxControl[f_statBLE])
 800df30:	4bbb      	ldr	r3, [pc, #748]	@ (800e220 <tx_control+0x378>)
 800df32:	785b      	ldrb	r3, [r3, #1]
 800df34:	2201      	movs	r2, #1
 800df36:	4053      	eors	r3, r2
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d123      	bne.n	800df86 <tx_control+0xde>
		goto noCancelTx;

	keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 800df3e:	4bbc      	ldr	r3, [pc, #752]	@ (800e230 <tx_control+0x388>)
 800df40:	2200      	movs	r2, #0
 800df42:	701a      	strb	r2, [r3, #0]
	// clr		flagsTX
	//clr		flagsRxFirm
	for(uint8_t i=0 ; i<8 ; i++){
 800df44:	233e      	movs	r3, #62	@ 0x3e
 800df46:	18fb      	adds	r3, r7, r3
 800df48:	2200      	movs	r2, #0
 800df4a:	701a      	strb	r2, [r3, #0]
 800df4c:	e00f      	b.n	800df6e <tx_control+0xc6>
		flagsTX[i] = 0;
 800df4e:	203e      	movs	r0, #62	@ 0x3e
 800df50:	183b      	adds	r3, r7, r0
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	4ab7      	ldr	r2, [pc, #732]	@ (800e234 <tx_control+0x38c>)
 800df56:	2100      	movs	r1, #0
 800df58:	54d1      	strb	r1, [r2, r3]
		flagsRxFirm[i] = 0;
 800df5a:	183b      	adds	r3, r7, r0
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	4ab6      	ldr	r2, [pc, #728]	@ (800e238 <tx_control+0x390>)
 800df60:	2100      	movs	r1, #0
 800df62:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0 ; i<8 ; i++){
 800df64:	183b      	adds	r3, r7, r0
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	183b      	adds	r3, r7, r0
 800df6a:	3201      	adds	r2, #1
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	233e      	movs	r3, #62	@ 0x3e
 800df70:	18fb      	adds	r3, r7, r3
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b07      	cmp	r3, #7
 800df76:	d9ea      	bls.n	800df4e <tx_control+0xa6>
	}

	flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 800df78:	4bb0      	ldr	r3, [pc, #704]	@ (800e23c <tx_control+0x394>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	711a      	strb	r2, [r3, #4]
	flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 800df7e:	4baf      	ldr	r3, [pc, #700]	@ (800e23c <tx_control+0x394>)
 800df80:	2200      	movs	r2, #0
 800df82:	715a      	strb	r2, [r3, #5]
 800df84:	e000      	b.n	800df88 <tx_control+0xe0>
		goto noCancelTx;
 800df86:	46c0      	nop			@ (mov r8, r8)
noCancelTx:

	flagsTxControl[f_statBLE] = 0;		//bres		flagsTxControl,#f_statBLE
 800df88:	4ba5      	ldr	r3, [pc, #660]	@ (800e220 <tx_control+0x378>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	705a      	strb	r2, [r3, #1]
	DevLock = 0;						//clr			DevLock;			sí se pierde conexión BLE el candado vuelve a estar activo
 800df8e:	4bac      	ldr	r3, [pc, #688]	@ (800e240 <tx_control+0x398>)
 800df90:	2200      	movs	r2, #0
 800df92:	701a      	strb	r2, [r3, #0]
	goto end_statDef;					//jra			end_statDef
 800df94:	e006      	b.n	800dfa4 <tx_control+0xfc>
		goto statDef_clrWIFI;
 800df96:	46c0      	nop			@ (mov r8, r8)
statDef_clrWIFI:
	flagsTxControl[f_statWIFI] = 0;		//bres		flagsTxControl,#f_statWIFI
 800df98:	4ba1      	ldr	r3, [pc, #644]	@ (800e220 <tx_control+0x378>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 0;				//clr			statComWIFIFlag
 800df9e:	4ba3      	ldr	r3, [pc, #652]	@ (800e22c <tx_control+0x384>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	701a      	strb	r2, [r3, #0]
//;===========================================================
//;										TOKEN BLE
//;===========================================================
tokenBLE:
	//;Token solo se manda cuando está seleccionada la comunicación BLE
	if(!flagsTxControl[f_select])//btjf	flagsTxControl,#f_select,tokenBLE_01
 800dfa4:	4b9e      	ldr	r3, [pc, #632]	@ (800e220 <tx_control+0x378>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	4053      	eors	r3, r2
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d058      	beq.n	800e064 <tx_control+0x1bc>
		goto tokenBLE_01;
 800dfb2:	46c0      	nop			@ (mov r8, r8)
tokenBLE_01:

//	btjt	flagsRxFirm,#0,tokenBLE_02; Empezó recepción de Firmware ?
//	btjt	flagsLogger,#5,tokenBLE_02; Empezó Tx logger datos
//	btjt	flagsLogger,#4,tokenBLE_02; Empezó Tx logger eventos
	if(flagsRxFirm[0] || flagsLogger[4] || flagsLogger[5])
 800dfb4:	4ba0      	ldr	r3, [pc, #640]	@ (800e238 <tx_control+0x390>)
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d117      	bne.n	800dfec <tx_control+0x144>
 800dfbc:	4b9f      	ldr	r3, [pc, #636]	@ (800e23c <tx_control+0x394>)
 800dfbe:	791b      	ldrb	r3, [r3, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d113      	bne.n	800dfec <tx_control+0x144>
 800dfc4:	4b9d      	ldr	r3, [pc, #628]	@ (800e23c <tx_control+0x394>)
 800dfc6:	795b      	ldrb	r3, [r3, #5]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10f      	bne.n	800dfec <tx_control+0x144>
		goto tokenBLE_02;

	//tnz		codeTX
	if(codeTX == 0)//jreq	tx_tokenBLE;			/se recibió algun comando valido? No, checa sí hay que mandar token
 800dfcc:	4b9d      	ldr	r3, [pc, #628]	@ (800e244 <tx_control+0x39c>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d019      	beq.n	800e008 <tx_control+0x160>
		goto tx_tokenBLE;
	//;Interpreta comando

	//ld		A,codeTX
	//cp		A,#$80;						/ se recibió respuesta WIFI ?
	if(codeTX == 0x80)		//jreq	finTokenBLE
 800dfd4:	4b9b      	ldr	r3, [pc, #620]	@ (800e244 <tx_control+0x39c>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b80      	cmp	r3, #128	@ 0x80
 800dfda:	d045      	beq.n	800e068 <tx_control+0x1c0>
		goto finTokenBLE;
	//cp		A,#$81;						/ se recibió respuesta BLE ?
	if(codeTX != 0x81)		//jrne	tokenBLE_03;			/ no, es otro comando, deja correr la ejecución
 800dfdc:	4b99      	ldr	r3, [pc, #612]	@ (800e244 <tx_control+0x39c>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b81      	cmp	r3, #129	@ 0x81
 800dfe2:	d108      	bne.n	800dff6 <tx_control+0x14e>
		goto tokenBLE_03;
	codeTX = 0;				// clr		codeTX;						/ sí, limpia código de Tx
 800dfe4:	4b97      	ldr	r3, [pc, #604]	@ (800e244 <tx_control+0x39c>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	701a      	strb	r2, [r3, #0]
 800dfea:	e000      	b.n	800dfee <tx_control+0x146>
		goto tokenBLE_02;
 800dfec:	46c0      	nop			@ (mov r8, r8)
tokenBLE_02:
	flagsTX2[2] = 1;		//bset	flagsTX2,#2;			/ sí se recibió repuesta, levanta bandera de token recibido
 800dfee:	4b96      	ldr	r3, [pc, #600]	@ (800e248 <tx_control+0x3a0>)
 800dff0:	2201      	movs	r2, #1
 800dff2:	709a      	strb	r2, [r3, #2]
 800dff4:	e000      	b.n	800dff8 <tx_control+0x150>
		goto tokenBLE_03;
 800dff6:	46c0      	nop			@ (mov r8, r8)

tokenBLE_03:
	//; la recepccion de cualquier comando tomala como una respuesta de  modulo de counicación
	timeTxTBLE = 20;			//mov		timeTxTBLE,#20;		/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800dff8:	4b94      	ldr	r3, [pc, #592]	@ (800e24c <tx_control+0x3a4>)
 800dffa:	2214      	movs	r2, #20
 800dffc:	701a      	strb	r2, [r3, #0]
	//ldw		X,#300;
	timeoutTBLE = 300;			//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 800dffe:	4b94      	ldr	r3, [pc, #592]	@ (800e250 <tx_control+0x3a8>)
 800e000:	2296      	movs	r2, #150	@ 0x96
 800e002:	0052      	lsls	r2, r2, #1
 800e004:	801a      	strh	r2, [r3, #0]
	goto finTokenBLE;			//jra		finTokenBLE
 800e006:	e034      	b.n	800e072 <tx_control+0x1ca>
		goto tx_tokenBLE;
 800e008:	46c0      	nop			@ (mov r8, r8)

tx_tokenBLE:
	//tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx)//jrne	finTokenBLE;						/ espera a que terminé
 800e00a:	4b89      	ldr	r3, [pc, #548]	@ (800e230 <tx_control+0x388>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d12c      	bne.n	800e06c <tx_control+0x1c4>
		goto finTokenBLE;
	//tnz		timeTxTBLE;						/ ya se cumplió tiempo para enviar Token Wifi ?
	if(timeTxTBLE)//jrne	finTokenBLE;					/ no, continua
 800e012:	4b8e      	ldr	r3, [pc, #568]	@ (800e24c <tx_control+0x3a4>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d12a      	bne.n	800e070 <tx_control+0x1c8>
		goto finTokenBLE;

	timeTxTBLE = 20;//mov		timeTxTBLE,#20;				/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e01a:	4b8c      	ldr	r3, [pc, #560]	@ (800e24c <tx_control+0x3a4>)
 800e01c:	2214      	movs	r2, #20
 800e01e:	701a      	strb	r2, [r3, #0]

	//ldw		X,#$40FA
	//ldw		bufferTxControl,X
	bufferTxControl[0] = 0x40;
 800e020:	4b8c      	ldr	r3, [pc, #560]	@ (800e254 <tx_control+0x3ac>)
 800e022:	2240      	movs	r2, #64	@ 0x40
 800e024:	701a      	strb	r2, [r3, #0]
	bufferTxControl[1] = 0xFA;
 800e026:	4b8b      	ldr	r3, [pc, #556]	@ (800e254 <tx_control+0x3ac>)
 800e028:	22fa      	movs	r2, #250	@ 0xfa
 800e02a:	705a      	strb	r2, [r3, #1]
	flagsTX[2] = 0;				//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e02c:	4b81      	ldr	r3, [pc, #516]	@ (800e234 <tx_control+0x38c>)
 800e02e:	2200      	movs	r2, #0
 800e030:	709a      	strb	r2, [r3, #2]
	//ldw		pointTx,X
	//ldw		pointInitTx,X
	//incw	X
	//ldw		pointEndTx,X
	//mov		blockSizeTX,#2
	pointTx = &bufferTxControl[0];
 800e032:	4b89      	ldr	r3, [pc, #548]	@ (800e258 <tx_control+0x3b0>)
 800e034:	4a87      	ldr	r2, [pc, #540]	@ (800e254 <tx_control+0x3ac>)
 800e036:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e038:	4b88      	ldr	r3, [pc, #544]	@ (800e25c <tx_control+0x3b4>)
 800e03a:	4a86      	ldr	r2, [pc, #536]	@ (800e254 <tx_control+0x3ac>)
 800e03c:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[2];
 800e03e:	4b88      	ldr	r3, [pc, #544]	@ (800e260 <tx_control+0x3b8>)
 800e040:	4a88      	ldr	r2, [pc, #544]	@ (800e264 <tx_control+0x3bc>)
 800e042:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800e044:	4b88      	ldr	r3, [pc, #544]	@ (800e268 <tx_control+0x3c0>)
 800e046:	2202      	movs	r2, #2
 800e048:	701a      	strb	r2, [r3, #0]

	//clrw	X
	//ldw		chksum_HW,X
	//ldw		chksum_LW,X;					/ limpia registros de checksum
	chksum_32_HW_LW = 0;
 800e04a:	4b88      	ldr	r3, [pc, #544]	@ (800e26c <tx_control+0x3c4>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;					// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e050:	4b78      	ldr	r3, [pc, #480]	@ (800e234 <tx_control+0x38c>)
 800e052:	2201      	movs	r2, #1
 800e054:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;					//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e056:	4b76      	ldr	r3, [pc, #472]	@ (800e230 <tx_control+0x388>)
 800e058:	2255      	movs	r2, #85	@ 0x55
 800e05a:	701a      	strb	r2, [r3, #0]
	codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800e05c:	4b79      	ldr	r3, [pc, #484]	@ (800e244 <tx_control+0x39c>)
 800e05e:	2200      	movs	r2, #0
 800e060:	701a      	strb	r2, [r3, #0]

	goto finTokenBLE;//jra		finTokenBLE
 800e062:	e006      	b.n	800e072 <tx_control+0x1ca>
	goto finTokenBLE;//jra		finTokenBLE
 800e064:	46c0      	nop			@ (mov r8, r8)
 800e066:	e004      	b.n	800e072 <tx_control+0x1ca>
		goto finTokenBLE;
 800e068:	46c0      	nop			@ (mov r8, r8)
 800e06a:	e002      	b.n	800e072 <tx_control+0x1ca>
		goto finTokenBLE;
 800e06c:	46c0      	nop			@ (mov r8, r8)
 800e06e:	e000      	b.n	800e072 <tx_control+0x1ca>
		goto finTokenBLE;
 800e070:	46c0      	nop			@ (mov r8, r8)
//;										TOKEN WiFi
//;===========================================================
tokenWiFi:

	//;Token solo se manda cuando está seleccionada la comunicación WIFI
	if(flagsTxControl[f_select])	//btjt	flagsTxControl,#f_select,tokenWiFi_01
 800e072:	4b6b      	ldr	r3, [pc, #428]	@ (800e220 <tx_control+0x378>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d100      	bne.n	800e07c <tx_control+0x1d4>
 800e07a:	e12f      	b.n	800e2dc <tx_control+0x434>
		goto tokenWiFi_01;
 800e07c:	46c0      	nop			@ (mov r8, r8)
	goto finTokenWiFi;				//jra		finTokenWiFi
tokenWiFi_01:

	//btjt	flagsWIFI,#f_timeLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	//btjt	flagsWIFI,#f_eventLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	if(flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800e07e:	4b6a      	ldr	r3, [pc, #424]	@ (800e228 <tx_control+0x380>)
 800e080:	78db      	ldrb	r3, [r3, #3]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d130      	bne.n	800e0e8 <tx_control+0x240>
 800e086:	4b68      	ldr	r3, [pc, #416]	@ (800e228 <tx_control+0x380>)
 800e088:	791b      	ldrb	r3, [r3, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d12c      	bne.n	800e0e8 <tx_control+0x240>
		goto tokenWiFi_02;

	//ldw		X,cntSetName
	//tnzw	X
	if(cntSetName)//jrne	tokenWiFi_02
 800e08e:	4b78      	ldr	r3, [pc, #480]	@ (800e270 <tx_control+0x3c8>)
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d12a      	bne.n	800e0ec <tx_control+0x244>
		goto tokenWiFi_02;

	//ldw			X,#600
	cntSetName = 600;	//ldw			cntSetName,X
 800e096:	4b76      	ldr	r3, [pc, #472]	@ (800e270 <tx_control+0x3c8>)
 800e098:	2296      	movs	r2, #150	@ 0x96
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	801a      	strh	r2, [r3, #0]

	//;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
	//;copia los datos al buffer de tx
	//ldw		X,#difName
	//ldw		Y,#bufferTxControl
	wreg = 50;//mov		wreg,#50
 800e09e:	4b75      	ldr	r3, [pc, #468]	@ (800e274 <tx_control+0x3cc>)
 800e0a0:	2232      	movs	r2, #50	@ 0x32
 800e0a2:	701a      	strb	r2, [r3, #0]
	copyVector(&difName[0],&bufferTxControl[0]);//call	copyVector
 800e0a4:	4a6b      	ldr	r2, [pc, #428]	@ (800e254 <tx_control+0x3ac>)
 800e0a6:	4b74      	ldr	r3, [pc, #464]	@ (800e278 <tx_control+0x3d0>)
 800e0a8:	0011      	movs	r1, r2
 800e0aa:	0018      	movs	r0, r3
 800e0ac:	f7f9 f938 	bl	8007320 <copyVector>
//	ldw		pointTx,X
//	ldw		pointInitTx,X
//	ldw		X,#(bufferTxControl+50)
//	ldw		pointEndTx,X
//	mov		blockSizeTX,#50
	pointTx = &bufferTxControl[0];
 800e0b0:	4b69      	ldr	r3, [pc, #420]	@ (800e258 <tx_control+0x3b0>)
 800e0b2:	4a68      	ldr	r2, [pc, #416]	@ (800e254 <tx_control+0x3ac>)
 800e0b4:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e0b6:	4b69      	ldr	r3, [pc, #420]	@ (800e25c <tx_control+0x3b4>)
 800e0b8:	4a66      	ldr	r2, [pc, #408]	@ (800e254 <tx_control+0x3ac>)
 800e0ba:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[50];
 800e0bc:	4b68      	ldr	r3, [pc, #416]	@ (800e260 <tx_control+0x3b8>)
 800e0be:	4a6f      	ldr	r2, [pc, #444]	@ (800e27c <tx_control+0x3d4>)
 800e0c0:	601a      	str	r2, [r3, #0]
	blockSizeTX = 50;
 800e0c2:	4b69      	ldr	r3, [pc, #420]	@ (800e268 <tx_control+0x3c0>)
 800e0c4:	2232      	movs	r2, #50	@ 0x32
 800e0c6:	701a      	strb	r2, [r3, #0]

	flagsTX[2] = 0;		//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e0c8:	4b5a      	ldr	r3, [pc, #360]	@ (800e234 <tx_control+0x38c>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	709a      	strb	r2, [r3, #2]

	//clrw	X
	//ldw		chksum_HW,X
	chksum_32_HW_LW = 0;		//ldw		chksum_LW,X;					/ limpia registros de checksum
 800e0ce:	4b67      	ldr	r3, [pc, #412]	@ (800e26c <tx_control+0x3c4>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;				//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e0d4:	4b57      	ldr	r3, [pc, #348]	@ (800e234 <tx_control+0x38c>)
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;				//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e0da:	4b55      	ldr	r3, [pc, #340]	@ (800e230 <tx_control+0x388>)
 800e0dc:	2255      	movs	r2, #85	@ 0x55
 800e0de:	701a      	strb	r2, [r3, #0]
	codeTX= 0;					//clr		codeTX;								/ limpia código de Tx
 800e0e0:	4b58      	ldr	r3, [pc, #352]	@ (800e244 <tx_control+0x39c>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	701a      	strb	r2, [r3, #0]

	goto finTokenWiFi;//jra		finTokenWiFi
 800e0e6:	e0fe      	b.n	800e2e6 <tx_control+0x43e>
		goto tokenWiFi_02;
 800e0e8:	46c0      	nop			@ (mov r8, r8)
 800e0ea:	e000      	b.n	800e0ee <tx_control+0x246>
		goto tokenWiFi_02;
 800e0ec:	46c0      	nop			@ (mov r8, r8)
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800e0ee:	4b52      	ldr	r3, [pc, #328]	@ (800e238 <tx_control+0x390>)
 800e0f0:	781a      	ldrb	r2, [r3, #0]
 800e0f2:	4b52      	ldr	r3, [pc, #328]	@ (800e23c <tx_control+0x394>)
 800e0f4:	795b      	ldrb	r3, [r3, #5]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	4b50      	ldr	r3, [pc, #320]	@ (800e23c <tx_control+0x394>)
 800e0fc:	791b      	ldrb	r3, [r3, #4]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	b2da      	uxtb	r2, r3
 800e102:	4b49      	ldr	r3, [pc, #292]	@ (800e228 <tx_control+0x380>)
 800e104:	78db      	ldrb	r3, [r3, #3]
 800e106:	4313      	orrs	r3, r2
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	4b47      	ldr	r3, [pc, #284]	@ (800e228 <tx_control+0x380>)
 800e10c:	791b      	ldrb	r3, [r3, #4]
 800e10e:	4313      	orrs	r3, r2
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	d000      	beq.n	800e118 <tx_control+0x270>
 800e116:	e0d9      	b.n	800e2cc <tx_control+0x424>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800e118:	4b4a      	ldr	r3, [pc, #296]	@ (800e244 <tx_control+0x39c>)
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d000      	beq.n	800e122 <tx_control+0x27a>
 800e120:	e0ca      	b.n	800e2b8 <tx_control+0x410>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800e122:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800e124:	4b42      	ldr	r3, [pc, #264]	@ (800e230 <tx_control+0x388>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d000      	beq.n	800e12e <tx_control+0x286>
 800e12c:	e0d8      	b.n	800e2e0 <tx_control+0x438>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800e12e:	4b54      	ldr	r3, [pc, #336]	@ (800e280 <tx_control+0x3d8>)
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d152      	bne.n	800e1dc <tx_control+0x334>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800e136:	4b52      	ldr	r3, [pc, #328]	@ (800e280 <tx_control+0x3d8>)
 800e138:	221e      	movs	r2, #30
 800e13a:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800e13c:	4b45      	ldr	r3, [pc, #276]	@ (800e254 <tx_control+0x3ac>)
 800e13e:	2240      	movs	r2, #64	@ 0x40
 800e140:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800e142:	4b44      	ldr	r3, [pc, #272]	@ (800e254 <tx_control+0x3ac>)
 800e144:	22f8      	movs	r2, #248	@ 0xf8
 800e146:	705a      	strb	r2, [r3, #1]
//		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
//		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
//		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
//		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X

		bufferTxControl[2] = reeLat1;	//ldw X,eeLat1
 800e148:	4b4e      	ldr	r3, [pc, #312]	@ (800e284 <tx_control+0x3dc>)
 800e14a:	781a      	ldrb	r2, [r3, #0]
 800e14c:	4b41      	ldr	r3, [pc, #260]	@ (800e254 <tx_control+0x3ac>)
 800e14e:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = reeLat2;	//ldw bufferTxControl+2,X
 800e150:	4b4d      	ldr	r3, [pc, #308]	@ (800e288 <tx_control+0x3e0>)
 800e152:	781a      	ldrb	r2, [r3, #0]
 800e154:	4b3f      	ldr	r3, [pc, #252]	@ (800e254 <tx_control+0x3ac>)
 800e156:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = reeLat3;	//ldw X,eeLat3
 800e158:	4b4c      	ldr	r3, [pc, #304]	@ (800e28c <tx_control+0x3e4>)
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	4b3d      	ldr	r3, [pc, #244]	@ (800e254 <tx_control+0x3ac>)
 800e15e:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = reeLat4;	//ldw bufferTxControl+4,X
 800e160:	4b4b      	ldr	r3, [pc, #300]	@ (800e290 <tx_control+0x3e8>)
 800e162:	781a      	ldrb	r2, [r3, #0]
 800e164:	4b3b      	ldr	r3, [pc, #236]	@ (800e254 <tx_control+0x3ac>)
 800e166:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = reeLong1;	//ldw X,eeLong1
 800e168:	4b4a      	ldr	r3, [pc, #296]	@ (800e294 <tx_control+0x3ec>)
 800e16a:	781a      	ldrb	r2, [r3, #0]
 800e16c:	4b39      	ldr	r3, [pc, #228]	@ (800e254 <tx_control+0x3ac>)
 800e16e:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = reeLong2;	//ldw bufferTxControl+6,X
 800e170:	4b49      	ldr	r3, [pc, #292]	@ (800e298 <tx_control+0x3f0>)
 800e172:	781a      	ldrb	r2, [r3, #0]
 800e174:	4b37      	ldr	r3, [pc, #220]	@ (800e254 <tx_control+0x3ac>)
 800e176:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = reeLong3;	//ldw X,eeLong3
 800e178:	4b48      	ldr	r3, [pc, #288]	@ (800e29c <tx_control+0x3f4>)
 800e17a:	781a      	ldrb	r2, [r3, #0]
 800e17c:	4b35      	ldr	r3, [pc, #212]	@ (800e254 <tx_control+0x3ac>)
 800e17e:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = reeLong4;	//ldw bufferTxControl+8,X
 800e180:	4b47      	ldr	r3, [pc, #284]	@ (800e2a0 <tx_control+0x3f8>)
 800e182:	781a      	ldrb	r2, [r3, #0]
 800e184:	4b33      	ldr	r3, [pc, #204]	@ (800e254 <tx_control+0x3ac>)
 800e186:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = versionFirm1;
 800e188:	4b46      	ldr	r3, [pc, #280]	@ (800e2a4 <tx_control+0x3fc>)
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	4b31      	ldr	r3, [pc, #196]	@ (800e254 <tx_control+0x3ac>)
 800e18e:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = versionFirm2;
 800e190:	4b45      	ldr	r3, [pc, #276]	@ (800e2a8 <tx_control+0x400>)
 800e192:	781a      	ldrb	r2, [r3, #0]
 800e194:	4b2f      	ldr	r3, [pc, #188]	@ (800e254 <tx_control+0x3ac>)
 800e196:	72da      	strb	r2, [r3, #11]
		bufferTxControl[12] = fm_hardware;
 800e198:	4b44      	ldr	r3, [pc, #272]	@ (800e2ac <tx_control+0x404>)
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	4b2d      	ldr	r3, [pc, #180]	@ (800e254 <tx_control+0x3ac>)
 800e19e:	731a      	strb	r2, [r3, #12]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800e1a0:	4b24      	ldr	r3, [pc, #144]	@ (800e234 <tx_control+0x38c>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800e1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800e254 <tx_control+0x3ac>)
 800e1a8:	647b      	str	r3, [r7, #68]	@ 0x44
		pointTx = point_X;				// ldw		pointTx,X
 800e1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800e258 <tx_control+0x3b0>)
 800e1ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1ae:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800e1b0:	4b2a      	ldr	r3, [pc, #168]	@ (800e25c <tx_control+0x3b4>)
 800e1b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1b4:	601a      	str	r2, [r3, #0]

		//pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
    										// ldw		pointEndTx,X
		pointEndTx = &bufferTxControl[13];
 800e1b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e260 <tx_control+0x3b8>)
 800e1b8:	4a3d      	ldr	r2, [pc, #244]	@ (800e2b0 <tx_control+0x408>)
 800e1ba:	601a      	str	r2, [r3, #0]
		//blockSizeTX = 10;						// mov		blockSizeTX,#10
		blockSizeTX = 13;
 800e1bc:	4b2a      	ldr	r3, [pc, #168]	@ (800e268 <tx_control+0x3c0>)
 800e1be:	220d      	movs	r2, #13
 800e1c0:	701a      	strb	r2, [r3, #0]
		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800e1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800e26c <tx_control+0x3c4>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e234 <tx_control+0x38c>)
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800e1ce:	4b18      	ldr	r3, [pc, #96]	@ (800e230 <tx_control+0x388>)
 800e1d0:	2255      	movs	r2, #85	@ 0x55
 800e1d2:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800e1d4:	4b1b      	ldr	r3, [pc, #108]	@ (800e244 <tx_control+0x39c>)
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800e1da:	e084      	b.n	800e2e6 <tx_control+0x43e>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800e1dc:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800e1de:	4b19      	ldr	r3, [pc, #100]	@ (800e244 <tx_control+0x39c>)
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b80      	cmp	r3, #128	@ 0x80
 800e1e4:	d00f      	beq.n	800e206 <tx_control+0x35e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e224 <tx_control+0x37c>)
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d000      	beq.n	800e1f0 <tx_control+0x348>
 800e1ee:	e079      	b.n	800e2e4 <tx_control+0x43c>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800e1f0:	4b15      	ldr	r3, [pc, #84]	@ (800e248 <tx_control+0x3a0>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800e1f6:	4b2f      	ldr	r3, [pc, #188]	@ (800e2b4 <tx_control+0x40c>)
 800e1f8:	2205      	movs	r2, #5
 800e1fa:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800e1fc:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <tx_control+0x37c>)
 800e1fe:	2296      	movs	r2, #150	@ 0x96
 800e200:	0052      	lsls	r2, r2, #1
 800e202:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800e204:	e06f      	b.n	800e2e6 <tx_control+0x43e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800e206:	46c0      	nop			@ (mov r8, r8)
 800e208:	e000      	b.n	800e20c <tx_control+0x364>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800e20a:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800e20c:	4b0d      	ldr	r3, [pc, #52]	@ (800e244 <tx_control+0x39c>)
 800e20e:	2200      	movs	r2, #0
 800e210:	701a      	strb	r2, [r3, #0]
 800e212:	e052      	b.n	800e2ba <tx_control+0x412>
 800e214:	2000004c 	.word	0x2000004c
 800e218:	20001190 	.word	0x20001190
 800e21c:	20001192 	.word	0x20001192
 800e220:	20001188 	.word	0x20001188
 800e224:	20000fe8 	.word	0x20000fe8
 800e228:	20000fec 	.word	0x20000fec
 800e22c:	20001193 	.word	0x20001193
 800e230:	20000eb5 	.word	0x20000eb5
 800e234:	20000eb8 	.word	0x20000eb8
 800e238:	20000f78 	.word	0x20000f78
 800e23c:	20000ea0 	.word	0x20000ea0
 800e240:	20001191 	.word	0x20001191
 800e244:	20000ec0 	.word	0x20000ec0
 800e248:	20000fe0 	.word	0x20000fe0
 800e24c:	20001196 	.word	0x20001196
 800e250:	20001198 	.word	0x20001198
 800e254:	20001044 	.word	0x20001044
 800e258:	20000eb0 	.word	0x20000eb0
 800e25c:	20000ea8 	.word	0x20000ea8
 800e260:	20000eac 	.word	0x20000eac
 800e264:	20001046 	.word	0x20001046
 800e268:	20000ecc 	.word	0x20000ecc
 800e26c:	20000ed0 	.word	0x20000ed0
 800e270:	20001194 	.word	0x20001194
 800e274:	20000b67 	.word	0x20000b67
 800e278:	20000228 	.word	0x20000228
 800e27c:	20001076 	.word	0x20001076
 800e280:	20000fd6 	.word	0x20000fd6
 800e284:	200001bb 	.word	0x200001bb
 800e288:	200001bc 	.word	0x200001bc
 800e28c:	200001bd 	.word	0x200001bd
 800e290:	200001be 	.word	0x200001be
 800e294:	200001bf 	.word	0x200001bf
 800e298:	200001c0 	.word	0x200001c0
 800e29c:	200001c1 	.word	0x200001c1
 800e2a0:	200001c2 	.word	0x200001c2
 800e2a4:	0801e7f0 	.word	0x0801e7f0
 800e2a8:	0801e7f1 	.word	0x0801e7f1
 800e2ac:	0801e7f2 	.word	0x0801e7f2
 800e2b0:	20001051 	.word	0x20001051
 800e2b4:	20000f84 	.word	0x20000f84
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800e2b8:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800e2ba:	4bda      	ldr	r3, [pc, #872]	@ (800e624 <tx_control+0x77c>)
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b80      	cmp	r3, #128	@ 0x80
 800e2c0:	d0a3      	beq.n	800e20a <tx_control+0x362>
		}
		timeoutTWF = 300;
 800e2c2:	4bd9      	ldr	r3, [pc, #868]	@ (800e628 <tx_control+0x780>)
 800e2c4:	2296      	movs	r2, #150	@ 0x96
 800e2c6:	0052      	lsls	r2, r2, #1
 800e2c8:	801a      	strh	r2, [r3, #0]
 800e2ca:	e000      	b.n	800e2ce <tx_control+0x426>
			goto rx_tokenWiFi_02;
 800e2cc:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi_02:

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800e2ce:	4bd7      	ldr	r3, [pc, #860]	@ (800e62c <tx_control+0x784>)
 800e2d0:	221e      	movs	r2, #30
 800e2d2:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800e2d4:	4bd6      	ldr	r3, [pc, #856]	@ (800e630 <tx_control+0x788>)
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		//timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800e2da:	e004      	b.n	800e2e6 <tx_control+0x43e>
	goto finTokenWiFi;				//jra		finTokenWiFi
 800e2dc:	46c0      	nop			@ (mov r8, r8)
 800e2de:	e002      	b.n	800e2e6 <tx_control+0x43e>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800e2e0:	46c0      	nop			@ (mov r8, r8)
 800e2e2:	e000      	b.n	800e2e6 <tx_control+0x43e>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800e2e4:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800e2e6:	4bd2      	ldr	r3, [pc, #840]	@ (800e630 <tx_control+0x788>)
 800e2e8:	785b      	ldrb	r3, [r3, #1]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <tx_control+0x44a>
 800e2ee:	f001 fe57 	bl	800ffa0 <tx_control+0x20f8>
			goto tokenWiFi_OK;
 800e2f2:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800e2f4:	4bcf      	ldr	r3, [pc, #828]	@ (800e634 <tx_control+0x78c>)
 800e2f6:	78db      	ldrb	r3, [r3, #3]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	4053      	eors	r3, r2
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d101      	bne.n	800e306 <tx_control+0x45e>
 800e302:	f000 fca7 	bl	800ec54 <tx_control+0xdac>
			goto tx_control_00;
 800e306:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800e308:	4bca      	ldr	r3, [pc, #808]	@ (800e634 <tx_control+0x78c>)
 800e30a:	791b      	ldrb	r3, [r3, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	4053      	eors	r3, r2
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d101      	bne.n	800e31a <tx_control+0x472>
 800e316:	f000 fc9f 	bl	800ec58 <tx_control+0xdb0>
			goto tx_control_00b;
 800e31a:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800e31c:	4bc6      	ldr	r3, [pc, #792]	@ (800e638 <tx_control+0x790>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2201      	movs	r2, #1
 800e322:	4053      	eors	r3, r2
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d13a      	bne.n	800e3a0 <tx_control+0x4f8>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e32a:	4bc4      	ldr	r3, [pc, #784]	@ (800e63c <tx_control+0x794>)
 800e32c:	22f1      	movs	r2, #241	@ 0xf1
 800e32e:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800e330:	4bbd      	ldr	r3, [pc, #756]	@ (800e628 <tx_control+0x780>)
 800e332:	2296      	movs	r2, #150	@ 0x96
 800e334:	0052      	lsls	r2, r2, #1
 800e336:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800e338:	4bc1      	ldr	r3, [pc, #772]	@ (800e640 <tx_control+0x798>)
 800e33a:	2296      	movs	r2, #150	@ 0x96
 800e33c:	0052      	lsls	r2, r2, #1
 800e33e:	801a      	strh	r2, [r3, #0]
		if(timeOutRx != 0){//tnz timeOutRx
 800e340:	4bc0      	ldr	r3, [pc, #768]	@ (800e644 <tx_control+0x79c>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d118      	bne.n	800e37a <tx_control+0x4d2>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e348:	233d      	movs	r3, #61	@ 0x3d
 800e34a:	18fb      	adds	r3, r7, r3
 800e34c:	2200      	movs	r2, #0
 800e34e:	701a      	strb	r2, [r3, #0]
 800e350:	e00a      	b.n	800e368 <tx_control+0x4c0>
			flagsRxFirm [i]= 0;
 800e352:	203d      	movs	r0, #61	@ 0x3d
 800e354:	183b      	adds	r3, r7, r0
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	4ab7      	ldr	r2, [pc, #732]	@ (800e638 <tx_control+0x790>)
 800e35a:	2100      	movs	r1, #0
 800e35c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e35e:	183b      	adds	r3, r7, r0
 800e360:	781a      	ldrb	r2, [r3, #0]
 800e362:	183b      	adds	r3, r7, r0
 800e364:	3201      	adds	r2, #1
 800e366:	701a      	strb	r2, [r3, #0]
 800e368:	233d      	movs	r3, #61	@ 0x3d
 800e36a:	18fb      	adds	r3, r7, r3
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b07      	cmp	r3, #7
 800e370:	d9ef      	bls.n	800e352 <tx_control+0x4aa>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800e372:	4bac      	ldr	r3, [pc, #688]	@ (800e624 <tx_control+0x77c>)
 800e374:	2200      	movs	r2, #0
 800e376:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800e378:	e013      	b.n	800e3a2 <tx_control+0x4fa>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800e37a:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800e37c:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800e37e:	4bb2      	ldr	r3, [pc, #712]	@ (800e648 <tx_control+0x7a0>)
 800e380:	2201      	movs	r2, #1
 800e382:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800e384:	4bb0      	ldr	r3, [pc, #704]	@ (800e648 <tx_control+0x7a0>)
 800e386:	2201      	movs	r2, #1
 800e388:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800e38a:	4bab      	ldr	r3, [pc, #684]	@ (800e638 <tx_control+0x790>)
 800e38c:	78db      	ldrb	r3, [r3, #3]
 800e38e:	2201      	movs	r2, #1
 800e390:	4053      	eors	r3, r2
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <tx_control+0x4f4>
 800e398:	f001 f8f9 	bl	800f58e <tx_control+0x16e6>
				goto rx_firmware01;
 800e39c:	f001 f801 	bl	800f3a2 <tx_control+0x14fa>
			goto ask_tx_control_01;
 800e3a0:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800e3a2:	4ba0      	ldr	r3, [pc, #640]	@ (800e624 <tx_control+0x77c>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	2b21      	cmp	r3, #33	@ 0x21
 800e3a8:	d131      	bne.n	800e40e <tx_control+0x566>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e3aa:	4ba4      	ldr	r3, [pc, #656]	@ (800e63c <tx_control+0x794>)
 800e3ac:	22f1      	movs	r2, #241	@ 0xf1
 800e3ae:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800e3b0:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800e3b2:	4ba6      	ldr	r3, [pc, #664]	@ (800e64c <tx_control+0x7a4>)
 800e3b4:	22f1      	movs	r2, #241	@ 0xf1
 800e3b6:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800e3b8:	4ba4      	ldr	r3, [pc, #656]	@ (800e64c <tx_control+0x7a4>)
 800e3ba:	223f      	movs	r2, #63	@ 0x3f
 800e3bc:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800e3be:	4ba4      	ldr	r3, [pc, #656]	@ (800e650 <tx_control+0x7a8>)
 800e3c0:	781a      	ldrb	r2, [r3, #0]
 800e3c2:	4ba2      	ldr	r3, [pc, #648]	@ (800e64c <tx_control+0x7a4>)
 800e3c4:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800e3c6:	4ba3      	ldr	r3, [pc, #652]	@ (800e654 <tx_control+0x7ac>)
 800e3c8:	781a      	ldrb	r2, [r3, #0]
 800e3ca:	4ba0      	ldr	r3, [pc, #640]	@ (800e64c <tx_control+0x7a4>)
 800e3cc:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800e3ce:	4ba2      	ldr	r3, [pc, #648]	@ (800e658 <tx_control+0x7b0>)
 800e3d0:	781a      	ldrb	r2, [r3, #0]
 800e3d2:	4b9e      	ldr	r3, [pc, #632]	@ (800e64c <tx_control+0x7a4>)
 800e3d4:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800e3d6:	4ba1      	ldr	r3, [pc, #644]	@ (800e65c <tx_control+0x7b4>)
 800e3d8:	227d      	movs	r2, #125	@ 0x7d
 800e3da:	5c9a      	ldrb	r2, [r3, r2]
 800e3dc:	4b9b      	ldr	r3, [pc, #620]	@ (800e64c <tx_control+0x7a4>)
 800e3de:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800e3e0:	4b9e      	ldr	r3, [pc, #632]	@ (800e65c <tx_control+0x7b4>)
 800e3e2:	227e      	movs	r2, #126	@ 0x7e
 800e3e4:	5c9a      	ldrb	r2, [r3, r2]
 800e3e6:	4b99      	ldr	r3, [pc, #612]	@ (800e64c <tx_control+0x7a4>)
 800e3e8:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800e3ea:	4b9d      	ldr	r3, [pc, #628]	@ (800e660 <tx_control+0x7b8>)
 800e3ec:	781a      	ldrb	r2, [r3, #0]
 800e3ee:	4b97      	ldr	r3, [pc, #604]	@ (800e64c <tx_control+0x7a4>)
 800e3f0:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800e3f2:	4b9c      	ldr	r3, [pc, #624]	@ (800e664 <tx_control+0x7bc>)
 800e3f4:	781a      	ldrb	r2, [r3, #0]
 800e3f6:	4b95      	ldr	r3, [pc, #596]	@ (800e64c <tx_control+0x7a4>)
 800e3f8:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800e3fa:	4b94      	ldr	r3, [pc, #592]	@ (800e64c <tx_control+0x7a4>)
 800e3fc:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800e3fe:	4b9a      	ldr	r3, [pc, #616]	@ (800e668 <tx_control+0x7c0>)
 800e400:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800e402:	233c      	movs	r3, #60	@ 0x3c
 800e404:	18fb      	adds	r3, r7, r3
 800e406:	2200      	movs	r2, #0
 800e408:	701a      	strb	r2, [r3, #0]
 800e40a:	f000 fc41 	bl	800ec90 <tx_control+0xde8>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800e40e:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800e410:	4b88      	ldr	r3, [pc, #544]	@ (800e634 <tx_control+0x78c>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d148      	bne.n	800e4aa <tx_control+0x602>
		if(codeTX != 0x60){//	cp	A,#$60
 800e418:	4b82      	ldr	r3, [pc, #520]	@ (800e624 <tx_control+0x77c>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b60      	cmp	r3, #96	@ 0x60
 800e41e:	d11f      	bne.n	800e460 <tx_control+0x5b8>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e420:	4b86      	ldr	r3, [pc, #536]	@ (800e63c <tx_control+0x794>)
 800e422:	22f1      	movs	r2, #241	@ 0xf1
 800e424:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800e426:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800e428:	4b90      	ldr	r3, [pc, #576]	@ (800e66c <tx_control+0x7c4>)
 800e42a:	781a      	ldrb	r2, [r3, #0]
 800e42c:	4b90      	ldr	r3, [pc, #576]	@ (800e670 <tx_control+0x7c8>)
 800e42e:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800e430:	4b90      	ldr	r3, [pc, #576]	@ (800e674 <tx_control+0x7cc>)
 800e432:	781a      	ldrb	r2, [r3, #0]
 800e434:	4b90      	ldr	r3, [pc, #576]	@ (800e678 <tx_control+0x7d0>)
 800e436:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e438:	4b90      	ldr	r3, [pc, #576]	@ (800e67c <tx_control+0x7d4>)
 800e43a:	2203      	movs	r2, #3
 800e43c:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800e43e:	4b90      	ldr	r3, [pc, #576]	@ (800e680 <tx_control+0x7d8>)
 800e440:	4a90      	ldr	r2, [pc, #576]	@ (800e684 <tx_control+0x7dc>)
 800e442:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800e444:	4b90      	ldr	r3, [pc, #576]	@ (800e688 <tx_control+0x7e0>)
 800e446:	4a91      	ldr	r2, [pc, #580]	@ (800e68c <tx_control+0x7e4>)
 800e448:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800e44a:	4b7f      	ldr	r3, [pc, #508]	@ (800e648 <tx_control+0x7a0>)
 800e44c:	785b      	ldrb	r3, [r3, #1]
 800e44e:	2201      	movs	r2, #1
 800e450:	4053      	eors	r3, r2
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <tx_control+0x5b4>
 800e458:	f000 fc61 	bl	800ed1e <tx_control+0xe76>
			goto noFullFlagTXDATA;
 800e45c:	f000 fc62 	bl	800ed24 <tx_control+0xe7c>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800e460:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800e462:	4b70      	ldr	r3, [pc, #448]	@ (800e624 <tx_control+0x77c>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	2b61      	cmp	r3, #97	@ 0x61
 800e468:	d121      	bne.n	800e4ae <tx_control+0x606>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800e46a:	4b74      	ldr	r3, [pc, #464]	@ (800e63c <tx_control+0x794>)
 800e46c:	22f1      	movs	r2, #241	@ 0xf1
 800e46e:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800e470:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800e472:	4b87      	ldr	r3, [pc, #540]	@ (800e690 <tx_control+0x7e8>)
 800e474:	781a      	ldrb	r2, [r3, #0]
 800e476:	4b7e      	ldr	r3, [pc, #504]	@ (800e670 <tx_control+0x7c8>)
 800e478:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800e47a:	4b86      	ldr	r3, [pc, #536]	@ (800e694 <tx_control+0x7ec>)
 800e47c:	781a      	ldrb	r2, [r3, #0]
 800e47e:	4b7e      	ldr	r3, [pc, #504]	@ (800e678 <tx_control+0x7d0>)
 800e480:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e482:	4b7e      	ldr	r3, [pc, #504]	@ (800e67c <tx_control+0x7d4>)
 800e484:	220a      	movs	r2, #10
 800e486:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800e488:	4b7d      	ldr	r3, [pc, #500]	@ (800e680 <tx_control+0x7d8>)
 800e48a:	4a83      	ldr	r2, [pc, #524]	@ (800e698 <tx_control+0x7f0>)
 800e48c:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800e48e:	4b7e      	ldr	r3, [pc, #504]	@ (800e688 <tx_control+0x7e0>)
 800e490:	4a82      	ldr	r2, [pc, #520]	@ (800e69c <tx_control+0x7f4>)
 800e492:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800e494:	4b6c      	ldr	r3, [pc, #432]	@ (800e648 <tx_control+0x7a0>)
 800e496:	789b      	ldrb	r3, [r3, #2]
 800e498:	2201      	movs	r2, #1
 800e49a:	4053      	eors	r3, r2
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <tx_control+0x5fe>
 800e4a2:	f000 fc8d 	bl	800edc0 <tx_control+0xf18>
			goto noFullFlagTXEVENT;
 800e4a6:	f000 fc8e 	bl	800edc6 <tx_control+0xf1e>
			goto ask_tx_control_04;
 800e4aa:	46c0      	nop			@ (mov r8, r8)
 800e4ac:	e000      	b.n	800e4b0 <tx_control+0x608>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800e4ae:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800e4b0:	4b5c      	ldr	r3, [pc, #368]	@ (800e624 <tx_control+0x77c>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	2b53      	cmp	r3, #83	@ 0x53
 800e4b6:	d12e      	bne.n	800e516 <tx_control+0x66e>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e4b8:	4b60      	ldr	r3, [pc, #384]	@ (800e63c <tx_control+0x794>)
 800e4ba:	22f1      	movs	r2, #241	@ 0xf1
 800e4bc:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800e4be:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800e4c0:	4b77      	ldr	r3, [pc, #476]	@ (800e6a0 <tx_control+0x7f8>)
 800e4c2:	781a      	ldrb	r2, [r3, #0]
 800e4c4:	4b77      	ldr	r3, [pc, #476]	@ (800e6a4 <tx_control+0x7fc>)
 800e4c6:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800e4c8:	4b77      	ldr	r3, [pc, #476]	@ (800e6a8 <tx_control+0x800>)
 800e4ca:	781a      	ldrb	r2, [r3, #0]
 800e4cc:	4b75      	ldr	r3, [pc, #468]	@ (800e6a4 <tx_control+0x7fc>)
 800e4ce:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800e4d0:	4b76      	ldr	r3, [pc, #472]	@ (800e6ac <tx_control+0x804>)
 800e4d2:	781a      	ldrb	r2, [r3, #0]
 800e4d4:	4b73      	ldr	r3, [pc, #460]	@ (800e6a4 <tx_control+0x7fc>)
 800e4d6:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800e4d8:	4b75      	ldr	r3, [pc, #468]	@ (800e6b0 <tx_control+0x808>)
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	4b71      	ldr	r3, [pc, #452]	@ (800e6a4 <tx_control+0x7fc>)
 800e4de:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800e4e0:	4b74      	ldr	r3, [pc, #464]	@ (800e6b4 <tx_control+0x80c>)
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	0a1b      	lsrs	r3, r3, #8
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	4b6e      	ldr	r3, [pc, #440]	@ (800e6a4 <tx_control+0x7fc>)
 800e4ec:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800e4ee:	4b71      	ldr	r3, [pc, #452]	@ (800e6b4 <tx_control+0x80c>)
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	4b6b      	ldr	r3, [pc, #428]	@ (800e6a4 <tx_control+0x7fc>)
 800e4f6:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800e4f8:	4b6f      	ldr	r3, [pc, #444]	@ (800e6b8 <tx_control+0x810>)
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	4b69      	ldr	r3, [pc, #420]	@ (800e6a4 <tx_control+0x7fc>)
 800e4fe:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800e500:	4b68      	ldr	r3, [pc, #416]	@ (800e6a4 <tx_control+0x7fc>)
 800e502:	2200      	movs	r2, #0
 800e504:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_comp])											// compresor activo ?
 800e506:	4b6d      	ldr	r3, [pc, #436]	@ (800e6bc <tx_control+0x814>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d101      	bne.n	800e512 <tx_control+0x66a>
 800e50e:	f000 fcf6 	bl	800eefe <tx_control+0x1056>
 800e512:	f000 fced 	bl	800eef0 <tx_control+0x1048>
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800e516:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800e518:	4b42      	ldr	r3, [pc, #264]	@ (800e624 <tx_control+0x77c>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2b51      	cmp	r3, #81	@ 0x51
 800e51e:	d125      	bne.n	800e56c <tx_control+0x6c4>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800e520:	4b46      	ldr	r3, [pc, #280]	@ (800e63c <tx_control+0x794>)
 800e522:	22f1      	movs	r2, #241	@ 0xf1
 800e524:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800e526:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800e528:	4b65      	ldr	r3, [pc, #404]	@ (800e6c0 <tx_control+0x818>)
 800e52a:	227b      	movs	r2, #123	@ 0x7b
 800e52c:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800e52e:	4b64      	ldr	r3, [pc, #400]	@ (800e6c0 <tx_control+0x818>)
 800e530:	227c      	movs	r2, #124	@ 0x7c
 800e532:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800e534:	4b62      	ldr	r3, [pc, #392]	@ (800e6c0 <tx_control+0x818>)
 800e536:	2200      	movs	r2, #0
 800e538:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800e53a:	4b61      	ldr	r3, [pc, #388]	@ (800e6c0 <tx_control+0x818>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800e540:	4b5f      	ldr	r3, [pc, #380]	@ (800e6c0 <tx_control+0x818>)
 800e542:	2200      	movs	r2, #0
 800e544:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800e546:	4b5e      	ldr	r3, [pc, #376]	@ (800e6c0 <tx_control+0x818>)
 800e548:	2201      	movs	r2, #1
 800e54a:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800e54c:	4b5c      	ldr	r3, [pc, #368]	@ (800e6c0 <tx_control+0x818>)
 800e54e:	2204      	movs	r2, #4
 800e550:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800e552:	4b5b      	ldr	r3, [pc, #364]	@ (800e6c0 <tx_control+0x818>)
 800e554:	2280      	movs	r2, #128	@ 0x80
 800e556:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800e558:	4b59      	ldr	r3, [pc, #356]	@ (800e6c0 <tx_control+0x818>)
 800e55a:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800e55c:	4b42      	ldr	r3, [pc, #264]	@ (800e668 <tx_control+0x7c0>)
 800e55e:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800e560:	2334      	movs	r3, #52	@ 0x34
 800e562:	18fb      	adds	r3, r7, r3
 800e564:	2200      	movs	r2, #0
 800e566:	701a      	strb	r2, [r3, #0]
 800e568:	f000 fe05 	bl	800f176 <tx_control+0x12ce>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800e56c:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800e56e:	4b2d      	ldr	r3, [pc, #180]	@ (800e624 <tx_control+0x77c>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	2b50      	cmp	r3, #80	@ 0x50
 800e574:	d10f      	bne.n	800e596 <tx_control+0x6ee>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800e576:	4b31      	ldr	r3, [pc, #196]	@ (800e63c <tx_control+0x794>)
 800e578:	22f1      	movs	r2, #241	@ 0xf1
 800e57a:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800e57c:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == reePlantilla[eeversion1]){
 800e57e:	4b51      	ldr	r3, [pc, #324]	@ (800e6c4 <tx_control+0x81c>)
 800e580:	227d      	movs	r2, #125	@ 0x7d
 800e582:	5c9a      	ldrb	r2, [r3, r2]
 800e584:	4b50      	ldr	r3, [pc, #320]	@ (800e6c8 <tx_control+0x820>)
 800e586:	217b      	movs	r1, #123	@ 0x7b
 800e588:	5c5b      	ldrb	r3, [r3, r1]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d001      	beq.n	800e592 <tx_control+0x6ea>
 800e58e:	f000 fee0 	bl	800f352 <tx_control+0x14aa>
				goto 	verifica_version2;		//jreq	verifica_version2
 800e592:	f000 fe7d 	bl	800f290 <tx_control+0x13e8>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800e596:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800e598:	4b22      	ldr	r3, [pc, #136]	@ (800e624 <tx_control+0x77c>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	2b46      	cmp	r3, #70	@ 0x46
 800e59e:	d126      	bne.n	800e5ee <tx_control+0x746>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e5a0:	4b26      	ldr	r3, [pc, #152]	@ (800e63c <tx_control+0x794>)
 800e5a2:	22f1      	movs	r2, #241	@ 0xf1
 800e5a4:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800e5a6:	46c0      	nop			@ (mov r8, r8)
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800e5a8:	4b28      	ldr	r3, [pc, #160]	@ (800e64c <tx_control+0x7a4>)
 800e5aa:	22f1      	movs	r2, #241	@ 0xf1
 800e5ac:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X04;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800e5ae:	4b27      	ldr	r3, [pc, #156]	@ (800e64c <tx_control+0x7a4>)
 800e5b0:	2204      	movs	r2, #4
 800e5b2:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800e5b4:	4b20      	ldr	r3, [pc, #128]	@ (800e638 <tx_control+0x790>)
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800e5ba:	4b44      	ldr	r3, [pc, #272]	@ (800e6cc <tx_control+0x824>)
 800e5bc:	4a23      	ldr	r2, [pc, #140]	@ (800e64c <tx_control+0x7a4>)
 800e5be:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800e5c0:	4b43      	ldr	r3, [pc, #268]	@ (800e6d0 <tx_control+0x828>)
 800e5c2:	4a22      	ldr	r2, [pc, #136]	@ (800e64c <tx_control+0x7a4>)
 800e5c4:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800e5c6:	4b43      	ldr	r3, [pc, #268]	@ (800e6d4 <tx_control+0x82c>)
 800e5c8:	4a43      	ldr	r2, [pc, #268]	@ (800e6d8 <tx_control+0x830>)
 800e5ca:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800e5cc:	4b43      	ldr	r3, [pc, #268]	@ (800e6dc <tx_control+0x834>)
 800e5ce:	2202      	movs	r2, #2
 800e5d0:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800e5d2:	4b43      	ldr	r3, [pc, #268]	@ (800e6e0 <tx_control+0x838>)
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800e5d8:	4b42      	ldr	r3, [pc, #264]	@ (800e6e4 <tx_control+0x83c>)
 800e5da:	2255      	movs	r2, #85	@ 0x55
 800e5dc:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800e5de:	4b11      	ldr	r3, [pc, #68]	@ (800e624 <tx_control+0x77c>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800e5e4:	4b17      	ldr	r3, [pc, #92]	@ (800e644 <tx_control+0x79c>)
 800e5e6:	2205      	movs	r2, #5
 800e5e8:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800e5ea:	f001 fcdc 	bl	800ffa6 <tx_control+0x20fe>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800e5ee:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800e5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e624 <tx_control+0x77c>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	2b54      	cmp	r3, #84	@ 0x54
 800e5f6:	d10a      	bne.n	800e60e <tx_control+0x766>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e5f8:	4b10      	ldr	r3, [pc, #64]	@ (800e63c <tx_control+0x794>)
 800e5fa:	22f1      	movs	r2, #241	@ 0xf1
 800e5fc:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800e5fe:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800e600:	f7f8 fe76 	bl	80072f0 <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800e604:	4b38      	ldr	r3, [pc, #224]	@ (800e6e8 <tx_control+0x840>)
 800e606:	2200      	movs	r2, #0
 800e608:	801a      	strh	r2, [r3, #0]
 800e60a:	f001 f86b 	bl	800f6e4 <tx_control+0x183c>
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800e60e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800e610:	4b04      	ldr	r3, [pc, #16]	@ (800e624 <tx_control+0x77c>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	2b55      	cmp	r3, #85	@ 0x55
 800e616:	d169      	bne.n	800e6ec <tx_control+0x844>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e618:	4b08      	ldr	r3, [pc, #32]	@ (800e63c <tx_control+0x794>)
 800e61a:	22f0      	movs	r2, #240	@ 0xf0
 800e61c:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800e61e:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800e620:	f001 fcc1 	bl	800ffa6 <tx_control+0x20fe>
 800e624:	20000ec0 	.word	0x20000ec0
 800e628:	20000fe8 	.word	0x20000fe8
 800e62c:	20000fd6 	.word	0x20000fd6
 800e630:	20000fe0 	.word	0x20000fe0
 800e634:	20000fec 	.word	0x20000fec
 800e638:	20000f78 	.word	0x20000f78
 800e63c:	20000f81 	.word	0x20000f81
 800e640:	20001198 	.word	0x20001198
 800e644:	20000f82 	.word	0x20000f82
 800e648:	20000ea0 	.word	0x20000ea0
 800e64c:	20000e7c 	.word	0x20000e7c
 800e650:	0801e7f4 	.word	0x0801e7f4
 800e654:	0801e7f0 	.word	0x0801e7f0
 800e658:	0801e7f1 	.word	0x0801e7f1
 800e65c:	200000b8 	.word	0x200000b8
 800e660:	0801e7f3 	.word	0x0801e7f3
 800e664:	0801e7f2 	.word	0x0801e7f2
 800e668:	20001044 	.word	0x20001044
 800e66c:	20000e49 	.word	0x20000e49
 800e670:	20000e36 	.word	0x20000e36
 800e674:	20000e48 	.word	0x20000e48
 800e678:	20000e37 	.word	0x20000e37
 800e67c:	20000ecd 	.word	0x20000ecd
 800e680:	20000e40 	.word	0x20000e40
 800e684:	20000d28 	.word	0x20000d28
 800e688:	20000e3c 	.word	0x20000e3c
 800e68c:	0803c000 	.word	0x0803c000
 800e690:	20000e4b 	.word	0x20000e4b
 800e694:	20000e4a 	.word	0x20000e4a
 800e698:	20000da8 	.word	0x20000da8
 800e69c:	08037000 	.word	0x08037000
 800e6a0:	20000bc0 	.word	0x20000bc0
 800e6a4:	20000e94 	.word	0x20000e94
 800e6a8:	20000bc1 	.word	0x20000bc1
 800e6ac:	20000bc2 	.word	0x20000bc2
 800e6b0:	20000bc3 	.word	0x20000bc3
 800e6b4:	20000c64 	.word	0x20000c64
 800e6b8:	20000bde 	.word	0x20000bde
 800e6bc:	20000bb4 	.word	0x20000bb4
 800e6c0:	20000e74 	.word	0x20000e74
 800e6c4:	20000998 	.word	0x20000998
 800e6c8:	20000c9c 	.word	0x20000c9c
 800e6cc:	20000eb0 	.word	0x20000eb0
 800e6d0:	20000ea8 	.word	0x20000ea8
 800e6d4:	20000eac 	.word	0x20000eac
 800e6d8:	20000e7d 	.word	0x20000e7d
 800e6dc:	20000ecc 	.word	0x20000ecc
 800e6e0:	20000eb8 	.word	0x20000eb8
 800e6e4:	20000eb5 	.word	0x20000eb5
 800e6e8:	20000f6e 	.word	0x20000f6e
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800e6ec:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800e6ee:	4bec      	ldr	r3, [pc, #944]	@ (800eaa0 <tx_control+0xbf8>)
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	2b56      	cmp	r3, #86	@ 0x56
 800e6f4:	d132      	bne.n	800e75c <tx_control+0x8b4>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e6f6:	4beb      	ldr	r3, [pc, #940]	@ (800eaa4 <tx_control+0xbfc>)
 800e6f8:	22f0      	movs	r2, #240	@ 0xf0
 800e6fa:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800e6fc:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e6fe:	4bea      	ldr	r3, [pc, #936]	@ (800eaa8 <tx_control+0xc00>)
 800e700:	2200      	movs	r2, #0
 800e702:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800e704:	4be9      	ldr	r3, [pc, #932]	@ (800eaac <tx_control+0xc04>)
 800e706:	2200      	movs	r2, #0
 800e708:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e70a:	4be9      	ldr	r3, [pc, #932]	@ (800eab0 <tx_control+0xc08>)
 800e70c:	2206      	movs	r2, #6
 800e70e:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e710:	4be8      	ldr	r3, [pc, #928]	@ (800eab4 <tx_control+0xc0c>)
 800e712:	2106      	movs	r1, #6
 800e714:	0018      	movs	r0, r3
 800e716:	f7f8 fdb5 	bl	8007284 <buildChksumBloq>
			chksum_to_compare = 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e71e:	4be5      	ldr	r3, [pc, #916]	@ (800eab4 <tx_control+0xc0c>)
 800e720:	799b      	ldrb	r3, [r3, #6]
 800e722:	061b      	lsls	r3, r3, #24
 800e724:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e726:	4be3      	ldr	r3, [pc, #908]	@ (800eab4 <tx_control+0xc0c>)
 800e728:	79db      	ldrb	r3, [r3, #7]
 800e72a:	041b      	lsls	r3, r3, #16
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	18d3      	adds	r3, r2, r3
 800e730:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e732:	4be0      	ldr	r3, [pc, #896]	@ (800eab4 <tx_control+0xc0c>)
 800e734:	7a1b      	ldrb	r3, [r3, #8]
 800e736:	021b      	lsls	r3, r3, #8
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	18d3      	adds	r3, r2, r3
 800e73c:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e73e:	4bdd      	ldr	r3, [pc, #884]	@ (800eab4 <tx_control+0xc0c>)
 800e740:	7a5b      	ldrb	r3, [r3, #9]
 800e742:	001a      	movs	r2, r3
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	189b      	adds	r3, r3, r2
 800e748:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e74a:	4bd7      	ldr	r3, [pc, #860]	@ (800eaa8 <tx_control+0xc00>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d101      	bne.n	800e758 <tx_control+0x8b0>
 800e754:	f001 f82f 	bl	800f7b6 <tx_control+0x190e>
				goto tx_write_status_error;
 800e758:	f001 f8e5 	bl	800f926 <tx_control+0x1a7e>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800e75c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800e75e:	4bd0      	ldr	r3, [pc, #832]	@ (800eaa0 <tx_control+0xbf8>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	2b57      	cmp	r3, #87	@ 0x57
 800e764:	d10b      	bne.n	800e77e <tx_control+0x8d6>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e766:	4bcf      	ldr	r3, [pc, #828]	@ (800eaa4 <tx_control+0xbfc>)
 800e768:	22f0      	movs	r2, #240	@ 0xf0
 800e76a:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800e76c:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		uint8_t estado1_Aux = reeEstado1;
 800e76e:	1dfb      	adds	r3, r7, #7
 800e770:	4ad1      	ldr	r2, [pc, #836]	@ (800eab8 <tx_control+0xc10>)
 800e772:	7812      	ldrb	r2, [r2, #0]
 800e774:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800e776:	2300      	movs	r3, #0
 800e778:	623b      	str	r3, [r7, #32]
 800e77a:	f001 f902 	bl	800f982 <tx_control+0x1ada>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800e77e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800e780:	4bc7      	ldr	r3, [pc, #796]	@ (800eaa0 <tx_control+0xbf8>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	2b58      	cmp	r3, #88	@ 0x58
 800e786:	d132      	bne.n	800e7ee <tx_control+0x946>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800e788:	4bc6      	ldr	r3, [pc, #792]	@ (800eaa4 <tx_control+0xbfc>)
 800e78a:	22f0      	movs	r2, #240	@ 0xf0
 800e78c:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800e78e:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800e790:	4bc5      	ldr	r3, [pc, #788]	@ (800eaa8 <tx_control+0xc00>)
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800e796:	4bc5      	ldr	r3, [pc, #788]	@ (800eaac <tx_control+0xc04>)
 800e798:	2200      	movs	r2, #0
 800e79a:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e79c:	4bc4      	ldr	r3, [pc, #784]	@ (800eab0 <tx_control+0xc08>)
 800e79e:	2206      	movs	r2, #6
 800e7a0:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e7a2:	4bc4      	ldr	r3, [pc, #784]	@ (800eab4 <tx_control+0xc0c>)
 800e7a4:	2106      	movs	r1, #6
 800e7a6:	0018      	movs	r0, r3
 800e7a8:	f7f8 fd6c 	bl	8007284 <buildChksumBloq>
		chksum_to_compare = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	60bb      	str	r3, [r7, #8]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e7b0:	4bc0      	ldr	r3, [pc, #768]	@ (800eab4 <tx_control+0xc0c>)
 800e7b2:	799b      	ldrb	r3, [r3, #6]
 800e7b4:	061b      	lsls	r3, r3, #24
 800e7b6:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e7b8:	4bbe      	ldr	r3, [pc, #760]	@ (800eab4 <tx_control+0xc0c>)
 800e7ba:	79db      	ldrb	r3, [r3, #7]
 800e7bc:	041b      	lsls	r3, r3, #16
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	18d3      	adds	r3, r2, r3
 800e7c2:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e7c4:	4bbb      	ldr	r3, [pc, #748]	@ (800eab4 <tx_control+0xc0c>)
 800e7c6:	7a1b      	ldrb	r3, [r3, #8]
 800e7c8:	021b      	lsls	r3, r3, #8
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	18d3      	adds	r3, r2, r3
 800e7ce:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e7d0:	4bb8      	ldr	r3, [pc, #736]	@ (800eab4 <tx_control+0xc0c>)
 800e7d2:	7a5b      	ldrb	r3, [r3, #9]
 800e7d4:	001a      	movs	r2, r3
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	189b      	adds	r3, r3, r2
 800e7da:	60bb      	str	r3, [r7, #8]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e7dc:	4bb2      	ldr	r3, [pc, #712]	@ (800eaa8 <tx_control+0xc00>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d101      	bne.n	800e7ea <tx_control+0x942>
 800e7e6:	f001 fa2f 	bl	800fc48 <tx_control+0x1da0>
			goto tx_write_status_error;
 800e7ea:	f001 f89c 	bl	800f926 <tx_control+0x1a7e>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800e7ee:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800e7f0:	4bab      	ldr	r3, [pc, #684]	@ (800eaa0 <tx_control+0xbf8>)
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	2b59      	cmp	r3, #89	@ 0x59
 800e7f6:	d132      	bne.n	800e85e <tx_control+0x9b6>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800e7f8:	4baa      	ldr	r3, [pc, #680]	@ (800eaa4 <tx_control+0xbfc>)
 800e7fa:	22f0      	movs	r2, #240	@ 0xf0
 800e7fc:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800e7fe:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e800:	4ba9      	ldr	r3, [pc, #676]	@ (800eaa8 <tx_control+0xc00>)
 800e802:	2200      	movs	r2, #0
 800e804:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800e806:	4ba9      	ldr	r3, [pc, #676]	@ (800eaac <tx_control+0xc04>)
 800e808:	2200      	movs	r2, #0
 800e80a:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800e80c:	4ba8      	ldr	r3, [pc, #672]	@ (800eab0 <tx_control+0xc08>)
 800e80e:	220a      	movs	r2, #10
 800e810:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800e812:	4ba8      	ldr	r3, [pc, #672]	@ (800eab4 <tx_control+0xc0c>)
 800e814:	210a      	movs	r1, #10
 800e816:	0018      	movs	r0, r3
 800e818:	f7f8 fd34 	bl	8007284 <buildChksumBloq>
			chksum_to_compare = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800e820:	4ba4      	ldr	r3, [pc, #656]	@ (800eab4 <tx_control+0xc0c>)
 800e822:	7a9b      	ldrb	r3, [r3, #10]
 800e824:	061b      	lsls	r3, r3, #24
 800e826:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800e828:	4ba2      	ldr	r3, [pc, #648]	@ (800eab4 <tx_control+0xc0c>)
 800e82a:	7adb      	ldrb	r3, [r3, #11]
 800e82c:	041b      	lsls	r3, r3, #16
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	18d3      	adds	r3, r2, r3
 800e832:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800e834:	4b9f      	ldr	r3, [pc, #636]	@ (800eab4 <tx_control+0xc0c>)
 800e836:	7b1b      	ldrb	r3, [r3, #12]
 800e838:	021b      	lsls	r3, r3, #8
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	18d3      	adds	r3, r2, r3
 800e83e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800e840:	4b9c      	ldr	r3, [pc, #624]	@ (800eab4 <tx_control+0xc0c>)
 800e842:	7b5b      	ldrb	r3, [r3, #13]
 800e844:	001a      	movs	r2, r3
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	189b      	adds	r3, r3, r2
 800e84a:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e84c:	4b96      	ldr	r3, [pc, #600]	@ (800eaa8 <tx_control+0xc00>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	429a      	cmp	r2, r3
 800e854:	d101      	bne.n	800e85a <tx_control+0x9b2>
 800e856:	f001 fa14 	bl	800fc82 <tx_control+0x1dda>
				goto tx_write_GEO_error;
 800e85a:	f001 fa99 	bl	800fd90 <tx_control+0x1ee8>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800e85e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800e860:	4b8f      	ldr	r3, [pc, #572]	@ (800eaa0 <tx_control+0xbf8>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b5a      	cmp	r3, #90	@ 0x5a
 800e866:	d000      	beq.n	800e86a <tx_control+0x9c2>
 800e868:	e089      	b.n	800e97e <tx_control+0xad6>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e86a:	4b8e      	ldr	r3, [pc, #568]	@ (800eaa4 <tx_control+0xbfc>)
 800e86c:	22f0      	movs	r2, #240	@ 0xf0
 800e86e:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800e870:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800e872:	4b92      	ldr	r3, [pc, #584]	@ (800eabc <tx_control+0xc14>)
 800e874:	2208      	movs	r2, #8
 800e876:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800e878:	4b91      	ldr	r3, [pc, #580]	@ (800eac0 <tx_control+0xc18>)
 800e87a:	227c      	movs	r2, #124	@ 0x7c
 800e87c:	5c9a      	ldrb	r2, [r3, r2]
 800e87e:	4b91      	ldr	r3, [pc, #580]	@ (800eac4 <tx_control+0xc1c>)
 800e880:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e882:	4b90      	ldr	r3, [pc, #576]	@ (800eac4 <tx_control+0xc1c>)
 800e884:	2200      	movs	r2, #0
 800e886:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e888:	4b8e      	ldr	r3, [pc, #568]	@ (800eac4 <tx_control+0xc1c>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e88e:	4b8d      	ldr	r3, [pc, #564]	@ (800eac4 <tx_control+0xc1c>)
 800e890:	2200      	movs	r2, #0
 800e892:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e894:	4b8b      	ldr	r3, [pc, #556]	@ (800eac4 <tx_control+0xc1c>)
 800e896:	2201      	movs	r2, #1
 800e898:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800e89a:	4b8a      	ldr	r3, [pc, #552]	@ (800eac4 <tx_control+0xc1c>)
 800e89c:	2206      	movs	r2, #6
 800e89e:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800e8a0:	4b86      	ldr	r3, [pc, #536]	@ (800eabc <tx_control+0xc14>)
 800e8a2:	781a      	ldrb	r2, [r3, #0]
 800e8a4:	4b87      	ldr	r3, [pc, #540]	@ (800eac4 <tx_control+0xc1c>)
 800e8a6:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e8a8:	4b80      	ldr	r3, [pc, #512]	@ (800eaac <tx_control+0xc04>)
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800e8ae:	4a86      	ldr	r2, [pc, #536]	@ (800eac8 <tx_control+0xc20>)
 800e8b0:	4b84      	ldr	r3, [pc, #528]	@ (800eac4 <tx_control+0xc1c>)
 800e8b2:	0011      	movs	r1, r2
 800e8b4:	0018      	movs	r0, r3
 800e8b6:	f7f8 fd33 	bl	8007320 <copyVector>
//			bufferTxControl[12]	= eeLong1;
//			bufferTxControl[13]	= eeLong2;
//			bufferTxControl[14] = eeLong3;
//			bufferTxControl[15] = eeLong4;

			bufferTxControl[8] = reeLat1;
 800e8ba:	4b84      	ldr	r3, [pc, #528]	@ (800eacc <tx_control+0xc24>)
 800e8bc:	781a      	ldrb	r2, [r3, #0]
 800e8be:	4b82      	ldr	r3, [pc, #520]	@ (800eac8 <tx_control+0xc20>)
 800e8c0:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = reeLat2;
 800e8c2:	4b83      	ldr	r3, [pc, #524]	@ (800ead0 <tx_control+0xc28>)
 800e8c4:	781a      	ldrb	r2, [r3, #0]
 800e8c6:	4b80      	ldr	r3, [pc, #512]	@ (800eac8 <tx_control+0xc20>)
 800e8c8:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = reeLat3;
 800e8ca:	4b82      	ldr	r3, [pc, #520]	@ (800ead4 <tx_control+0xc2c>)
 800e8cc:	781a      	ldrb	r2, [r3, #0]
 800e8ce:	4b7e      	ldr	r3, [pc, #504]	@ (800eac8 <tx_control+0xc20>)
 800e8d0:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = reeLat4;
 800e8d2:	4b81      	ldr	r3, [pc, #516]	@ (800ead8 <tx_control+0xc30>)
 800e8d4:	781a      	ldrb	r2, [r3, #0]
 800e8d6:	4b7c      	ldr	r3, [pc, #496]	@ (800eac8 <tx_control+0xc20>)
 800e8d8:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= reeLong1;
 800e8da:	4b80      	ldr	r3, [pc, #512]	@ (800eadc <tx_control+0xc34>)
 800e8dc:	781a      	ldrb	r2, [r3, #0]
 800e8de:	4b7a      	ldr	r3, [pc, #488]	@ (800eac8 <tx_control+0xc20>)
 800e8e0:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= reeLong2;
 800e8e2:	4b7f      	ldr	r3, [pc, #508]	@ (800eae0 <tx_control+0xc38>)
 800e8e4:	781a      	ldrb	r2, [r3, #0]
 800e8e6:	4b78      	ldr	r3, [pc, #480]	@ (800eac8 <tx_control+0xc20>)
 800e8e8:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = reeLong3;
 800e8ea:	4b7e      	ldr	r3, [pc, #504]	@ (800eae4 <tx_control+0xc3c>)
 800e8ec:	781a      	ldrb	r2, [r3, #0]
 800e8ee:	4b76      	ldr	r3, [pc, #472]	@ (800eac8 <tx_control+0xc20>)
 800e8f0:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = reeLong4;
 800e8f2:	4b7d      	ldr	r3, [pc, #500]	@ (800eae8 <tx_control+0xc40>)
 800e8f4:	781a      	ldrb	r2, [r3, #0]
 800e8f6:	4b74      	ldr	r3, [pc, #464]	@ (800eac8 <tx_control+0xc20>)
 800e8f8:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e8fa:	4b6b      	ldr	r3, [pc, #428]	@ (800eaa8 <tx_control+0xc00>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800e900:	4b6a      	ldr	r3, [pc, #424]	@ (800eaac <tx_control+0xc04>)
 800e902:	2200      	movs	r2, #0
 800e904:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800e906:	4b6a      	ldr	r3, [pc, #424]	@ (800eab0 <tx_control+0xc08>)
 800e908:	2210      	movs	r2, #16
 800e90a:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800e90c:	4b68      	ldr	r3, [pc, #416]	@ (800eab0 <tx_control+0xc08>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	001a      	movs	r2, r3
 800e912:	4b6d      	ldr	r3, [pc, #436]	@ (800eac8 <tx_control+0xc20>)
 800e914:	0011      	movs	r1, r2
 800e916:	0018      	movs	r0, r3
 800e918:	f7f8 fcb4 	bl	8007284 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800e91c:	4b62      	ldr	r3, [pc, #392]	@ (800eaa8 <tx_control+0xc00>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	0e1b      	lsrs	r3, r3, #24
 800e922:	b2da      	uxtb	r2, r3
 800e924:	4b68      	ldr	r3, [pc, #416]	@ (800eac8 <tx_control+0xc20>)
 800e926:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800e928:	4b5f      	ldr	r3, [pc, #380]	@ (800eaa8 <tx_control+0xc00>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	0c1b      	lsrs	r3, r3, #16
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	4b65      	ldr	r3, [pc, #404]	@ (800eac8 <tx_control+0xc20>)
 800e932:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800e934:	4b5c      	ldr	r3, [pc, #368]	@ (800eaa8 <tx_control+0xc00>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	0a1b      	lsrs	r3, r3, #8
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	4b62      	ldr	r3, [pc, #392]	@ (800eac8 <tx_control+0xc20>)
 800e93e:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800e940:	4b59      	ldr	r3, [pc, #356]	@ (800eaa8 <tx_control+0xc00>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	b2da      	uxtb	r2, r3
 800e946:	4b60      	ldr	r3, [pc, #384]	@ (800eac8 <tx_control+0xc20>)
 800e948:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800e94a:	4b68      	ldr	r3, [pc, #416]	@ (800eaec <tx_control+0xc44>)
 800e94c:	4a5e      	ldr	r2, [pc, #376]	@ (800eac8 <tx_control+0xc20>)
 800e94e:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800e950:	4b67      	ldr	r3, [pc, #412]	@ (800eaf0 <tx_control+0xc48>)
 800e952:	4a5d      	ldr	r2, [pc, #372]	@ (800eac8 <tx_control+0xc20>)
 800e954:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800e956:	4b67      	ldr	r3, [pc, #412]	@ (800eaf4 <tx_control+0xc4c>)
 800e958:	4a67      	ldr	r2, [pc, #412]	@ (800eaf8 <tx_control+0xc50>)
 800e95a:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800e95c:	4b57      	ldr	r3, [pc, #348]	@ (800eabc <tx_control+0xc14>)
 800e95e:	2214      	movs	r2, #20
 800e960:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e962:	4b66      	ldr	r3, [pc, #408]	@ (800eafc <tx_control+0xc54>)
 800e964:	2200      	movs	r2, #0
 800e966:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800e968:	4b64      	ldr	r3, [pc, #400]	@ (800eafc <tx_control+0xc54>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e96e:	4b64      	ldr	r3, [pc, #400]	@ (800eb00 <tx_control+0xc58>)
 800e970:	2255      	movs	r2, #85	@ 0x55
 800e972:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800e974:	4b4a      	ldr	r3, [pc, #296]	@ (800eaa0 <tx_control+0xbf8>)
 800e976:	2200      	movs	r2, #0
 800e978:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800e97a:	f001 fb14 	bl	800ffa6 <tx_control+0x20fe>
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800e97e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800e980:	4b47      	ldr	r3, [pc, #284]	@ (800eaa0 <tx_control+0xbf8>)
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	2b5b      	cmp	r3, #91	@ 0x5b
 800e986:	d000      	beq.n	800e98a <tx_control+0xae2>
 800e988:	e0c2      	b.n	800eb10 <tx_control+0xc68>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e98a:	4b46      	ldr	r3, [pc, #280]	@ (800eaa4 <tx_control+0xbfc>)
 800e98c:	22f0      	movs	r2, #240	@ 0xf0
 800e98e:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800e990:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800e992:	4b4a      	ldr	r3, [pc, #296]	@ (800eabc <tx_control+0xc14>)
 800e994:	2204      	movs	r2, #4
 800e996:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800e998:	4b49      	ldr	r3, [pc, #292]	@ (800eac0 <tx_control+0xc18>)
 800e99a:	227b      	movs	r2, #123	@ 0x7b
 800e99c:	5c9a      	ldrb	r2, [r3, r2]
 800e99e:	4b49      	ldr	r3, [pc, #292]	@ (800eac4 <tx_control+0xc1c>)
 800e9a0:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800e9a2:	4b47      	ldr	r3, [pc, #284]	@ (800eac0 <tx_control+0xc18>)
 800e9a4:	227c      	movs	r2, #124	@ 0x7c
 800e9a6:	5c9a      	ldrb	r2, [r3, r2]
 800e9a8:	4b46      	ldr	r3, [pc, #280]	@ (800eac4 <tx_control+0xc1c>)
 800e9aa:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e9ac:	4b45      	ldr	r3, [pc, #276]	@ (800eac4 <tx_control+0xc1c>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e9b2:	4b44      	ldr	r3, [pc, #272]	@ (800eac4 <tx_control+0xc1c>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e9b8:	4b42      	ldr	r3, [pc, #264]	@ (800eac4 <tx_control+0xc1c>)
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e9be:	4b41      	ldr	r3, [pc, #260]	@ (800eac4 <tx_control+0xc1c>)
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800e9c4:	4b3f      	ldr	r3, [pc, #252]	@ (800eac4 <tx_control+0xc1c>)
 800e9c6:	2207      	movs	r2, #7
 800e9c8:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800e9ca:	4b3c      	ldr	r3, [pc, #240]	@ (800eabc <tx_control+0xc14>)
 800e9cc:	781a      	ldrb	r2, [r3, #0]
 800e9ce:	4b3d      	ldr	r3, [pc, #244]	@ (800eac4 <tx_control+0xc1c>)
 800e9d0:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800e9d2:	4b4a      	ldr	r3, [pc, #296]	@ (800eafc <tx_control+0xc54>)
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e9d8:	4b34      	ldr	r3, [pc, #208]	@ (800eaac <tx_control+0xc04>)
 800e9da:	2208      	movs	r2, #8
 800e9dc:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800e9de:	4a3a      	ldr	r2, [pc, #232]	@ (800eac8 <tx_control+0xc20>)
 800e9e0:	4b38      	ldr	r3, [pc, #224]	@ (800eac4 <tx_control+0xc1c>)
 800e9e2:	0011      	movs	r1, r2
 800e9e4:	0018      	movs	r0, r3
 800e9e6:	f7f8 fc9b 	bl	8007320 <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800e9ea:	4b46      	ldr	r3, [pc, #280]	@ (800eb04 <tx_control+0xc5c>)
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	0a1b      	lsrs	r3, r3, #8
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	4b34      	ldr	r3, [pc, #208]	@ (800eac8 <tx_control+0xc20>)
 800e9f6:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800e9f8:	4b42      	ldr	r3, [pc, #264]	@ (800eb04 <tx_control+0xc5c>)
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	4b32      	ldr	r3, [pc, #200]	@ (800eac8 <tx_control+0xc20>)
 800ea00:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800ea02:	4b41      	ldr	r3, [pc, #260]	@ (800eb08 <tx_control+0xc60>)
 800ea04:	881b      	ldrh	r3, [r3, #0]
 800ea06:	0a1b      	lsrs	r3, r3, #8
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	4b2e      	ldr	r3, [pc, #184]	@ (800eac8 <tx_control+0xc20>)
 800ea0e:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800ea10:	4b3d      	ldr	r3, [pc, #244]	@ (800eb08 <tx_control+0xc60>)
 800ea12:	881b      	ldrh	r3, [r3, #0]
 800ea14:	b2da      	uxtb	r2, r3
 800ea16:	4b2c      	ldr	r3, [pc, #176]	@ (800eac8 <tx_control+0xc20>)
 800ea18:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ea1a:	4b23      	ldr	r3, [pc, #140]	@ (800eaa8 <tx_control+0xc00>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800ea20:	4b22      	ldr	r3, [pc, #136]	@ (800eaac <tx_control+0xc04>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800ea26:	4b22      	ldr	r3, [pc, #136]	@ (800eab0 <tx_control+0xc08>)
 800ea28:	220c      	movs	r2, #12
 800ea2a:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800ea2c:	4b20      	ldr	r3, [pc, #128]	@ (800eab0 <tx_control+0xc08>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	001a      	movs	r2, r3
 800ea32:	4b25      	ldr	r3, [pc, #148]	@ (800eac8 <tx_control+0xc20>)
 800ea34:	0011      	movs	r1, r2
 800ea36:	0018      	movs	r0, r3
 800ea38:	f7f8 fc24 	bl	8007284 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ea3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eaa8 <tx_control+0xc00>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	0e1b      	lsrs	r3, r3, #24
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	4b20      	ldr	r3, [pc, #128]	@ (800eac8 <tx_control+0xc20>)
 800ea46:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ea48:	4b17      	ldr	r3, [pc, #92]	@ (800eaa8 <tx_control+0xc00>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	0c1b      	lsrs	r3, r3, #16
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	4b1d      	ldr	r3, [pc, #116]	@ (800eac8 <tx_control+0xc20>)
 800ea52:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ea54:	4b14      	ldr	r3, [pc, #80]	@ (800eaa8 <tx_control+0xc00>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	0a1b      	lsrs	r3, r3, #8
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	4b1a      	ldr	r3, [pc, #104]	@ (800eac8 <tx_control+0xc20>)
 800ea5e:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800ea60:	4b11      	ldr	r3, [pc, #68]	@ (800eaa8 <tx_control+0xc00>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	4b18      	ldr	r3, [pc, #96]	@ (800eac8 <tx_control+0xc20>)
 800ea68:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800ea6a:	4b20      	ldr	r3, [pc, #128]	@ (800eaec <tx_control+0xc44>)
 800ea6c:	4a16      	ldr	r2, [pc, #88]	@ (800eac8 <tx_control+0xc20>)
 800ea6e:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800ea70:	4b1f      	ldr	r3, [pc, #124]	@ (800eaf0 <tx_control+0xc48>)
 800ea72:	4a15      	ldr	r2, [pc, #84]	@ (800eac8 <tx_control+0xc20>)
 800ea74:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800ea76:	4b1f      	ldr	r3, [pc, #124]	@ (800eaf4 <tx_control+0xc4c>)
 800ea78:	4a24      	ldr	r2, [pc, #144]	@ (800eb0c <tx_control+0xc64>)
 800ea7a:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800ea7c:	4b0f      	ldr	r3, [pc, #60]	@ (800eabc <tx_control+0xc14>)
 800ea7e:	2210      	movs	r2, #16
 800ea80:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ea82:	4b1e      	ldr	r3, [pc, #120]	@ (800eafc <tx_control+0xc54>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800ea88:	4b1c      	ldr	r3, [pc, #112]	@ (800eafc <tx_control+0xc54>)
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ea8e:	4b1c      	ldr	r3, [pc, #112]	@ (800eb00 <tx_control+0xc58>)
 800ea90:	2255      	movs	r2, #85	@ 0x55
 800ea92:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800ea94:	4b02      	ldr	r3, [pc, #8]	@ (800eaa0 <tx_control+0xbf8>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800ea9a:	f001 fa84 	bl	800ffa6 <tx_control+0x20fe>
 800ea9e:	46c0      	nop			@ (mov r8, r8)
 800eaa0:	20000ec0 	.word	0x20000ec0
 800eaa4:	20000f81 	.word	0x20000f81
 800eaa8:	20000ed0 	.word	0x20000ed0
 800eaac:	20000b67 	.word	0x20000b67
 800eab0:	20000b66 	.word	0x20000b66
 800eab4:	20000998 	.word	0x20000998
 800eab8:	200001ba 	.word	0x200001ba
 800eabc:	20000ecc 	.word	0x20000ecc
 800eac0:	200000b8 	.word	0x200000b8
 800eac4:	20000e74 	.word	0x20000e74
 800eac8:	20001044 	.word	0x20001044
 800eacc:	200001bb 	.word	0x200001bb
 800ead0:	200001bc 	.word	0x200001bc
 800ead4:	200001bd 	.word	0x200001bd
 800ead8:	200001be 	.word	0x200001be
 800eadc:	200001bf 	.word	0x200001bf
 800eae0:	200001c0 	.word	0x200001c0
 800eae4:	200001c1 	.word	0x200001c1
 800eae8:	200001c2 	.word	0x200001c2
 800eaec:	20000eb0 	.word	0x20000eb0
 800eaf0:	20000ea8 	.word	0x20000ea8
 800eaf4:	20000eac 	.word	0x20000eac
 800eaf8:	20001058 	.word	0x20001058
 800eafc:	20000eb8 	.word	0x20000eb8
 800eb00:	20000eb5 	.word	0x20000eb5
 800eb04:	20000e4c 	.word	0x20000e4c
 800eb08:	20000e4e 	.word	0x20000e4e
 800eb0c:	20001054 	.word	0x20001054
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800eb10:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800eb12:	4bd4      	ldr	r3, [pc, #848]	@ (800ee64 <tx_control+0xfbc>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb18:	d132      	bne.n	800eb80 <tx_control+0xcd8>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eb1a:	4bd3      	ldr	r3, [pc, #844]	@ (800ee68 <tx_control+0xfc0>)
 800eb1c:	22f0      	movs	r2, #240	@ 0xf0
 800eb1e:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800eb20:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800eb22:	4bd2      	ldr	r3, [pc, #840]	@ (800ee6c <tx_control+0xfc4>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800eb28:	4bd1      	ldr	r3, [pc, #836]	@ (800ee70 <tx_control+0xfc8>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800eb2e:	4bd1      	ldr	r3, [pc, #836]	@ (800ee74 <tx_control+0xfcc>)
 800eb30:	220b      	movs	r2, #11
 800eb32:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800eb34:	4bd0      	ldr	r3, [pc, #832]	@ (800ee78 <tx_control+0xfd0>)
 800eb36:	210b      	movs	r1, #11
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f7f8 fba3 	bl	8007284 <buildChksumBloq>
			chksum_to_compare = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800eb42:	4bcd      	ldr	r3, [pc, #820]	@ (800ee78 <tx_control+0xfd0>)
 800eb44:	7adb      	ldrb	r3, [r3, #11]
 800eb46:	061b      	lsls	r3, r3, #24
 800eb48:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800eb4a:	4bcb      	ldr	r3, [pc, #812]	@ (800ee78 <tx_control+0xfd0>)
 800eb4c:	7b1b      	ldrb	r3, [r3, #12]
 800eb4e:	041b      	lsls	r3, r3, #16
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	18d3      	adds	r3, r2, r3
 800eb54:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800eb56:	4bc8      	ldr	r3, [pc, #800]	@ (800ee78 <tx_control+0xfd0>)
 800eb58:	7b5b      	ldrb	r3, [r3, #13]
 800eb5a:	021b      	lsls	r3, r3, #8
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	18d3      	adds	r3, r2, r3
 800eb60:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800eb62:	4bc5      	ldr	r3, [pc, #788]	@ (800ee78 <tx_control+0xfd0>)
 800eb64:	7b9b      	ldrb	r3, [r3, #14]
 800eb66:	001a      	movs	r2, r3
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	189b      	adds	r3, r3, r2
 800eb6c:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800eb6e:	4bbf      	ldr	r3, [pc, #764]	@ (800ee6c <tx_control+0xfc4>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d101      	bne.n	800eb7c <tx_control+0xcd4>
 800eb78:	f001 f974 	bl	800fe64 <tx_control+0x1fbc>
				goto tx_timeBCD_error;
 800eb7c:	f001 f9f2 	bl	800ff64 <tx_control+0x20bc>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800eb80:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800eb82:	4bb8      	ldr	r3, [pc, #736]	@ (800ee64 <tx_control+0xfbc>)
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	2b5f      	cmp	r3, #95	@ 0x5f
 800eb88:	d142      	bne.n	800ec10 <tx_control+0xd68>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eb8a:	4bb7      	ldr	r3, [pc, #732]	@ (800ee68 <tx_control+0xfc0>)
 800eb8c:	22f0      	movs	r2, #240	@ 0xf0
 800eb8e:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800eb90:	46c0      	nop			@ (mov r8, r8)
			//typeClock = 0;					// mov		typeClock,#0;				Reloj interno
			// ;mov		typeClock,#1;				Reloj con señal de CA
			//if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
			//	goto noCristal;
			//}
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800eb92:	4bba      	ldr	r3, [pc, #744]	@ (800ee7c <tx_control+0xfd4>)
 800eb94:	2202      	movs	r2, #2
 800eb96:	701a      	strb	r2, [r3, #0]
//noCristal:

			// ldw		X,#typeClock;				/ inicio del bloque
			pointTx = &typeClock ;				// ldw		pointTx,X
 800eb98:	4bb9      	ldr	r3, [pc, #740]	@ (800ee80 <tx_control+0xfd8>)
 800eb9a:	4ab8      	ldr	r2, [pc, #736]	@ (800ee7c <tx_control+0xfd4>)
 800eb9c:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800eb9e:	4bb9      	ldr	r3, [pc, #740]	@ (800ee84 <tx_control+0xfdc>)
 800eba0:	4ab6      	ldr	r2, [pc, #728]	@ (800ee7c <tx_control+0xfd4>)
 800eba2:	601a      	str	r2, [r3, #0]
			// ldw		X,#(typeClock + 1);				/ fin del bloque
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800eba4:	4bb7      	ldr	r3, [pc, #732]	@ (800ee84 <tx_control+0xfdc>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	1c5a      	adds	r2, r3, #1
 800ebaa:	4bb7      	ldr	r3, [pc, #732]	@ (800ee88 <tx_control+0xfe0>)
 800ebac:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800ebae:	4bb7      	ldr	r3, [pc, #732]	@ (800ee8c <tx_control+0xfe4>)
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	701a      	strb	r2, [r3, #0]

			//; Carga datos de Header
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800ebb4:	4bb6      	ldr	r3, [pc, #728]	@ (800ee90 <tx_control+0xfe8>)
 800ebb6:	227b      	movs	r2, #123	@ 0x7b
 800ebb8:	5c9a      	ldrb	r2, [r3, r2]
 800ebba:	4bb6      	ldr	r3, [pc, #728]	@ (800ee94 <tx_control+0xfec>)
 800ebbc:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ebbe:	4bb4      	ldr	r3, [pc, #720]	@ (800ee90 <tx_control+0xfe8>)
 800ebc0:	227c      	movs	r2, #124	@ 0x7c
 800ebc2:	5c9a      	ldrb	r2, [r3, r2]
 800ebc4:	4bb3      	ldr	r3, [pc, #716]	@ (800ee94 <tx_control+0xfec>)
 800ebc6:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ebc8:	4bb2      	ldr	r3, [pc, #712]	@ (800ee94 <tx_control+0xfec>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ebce:	4bb1      	ldr	r3, [pc, #708]	@ (800ee94 <tx_control+0xfec>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ebd4:	4baf      	ldr	r3, [pc, #700]	@ (800ee94 <tx_control+0xfec>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ebda:	4bae      	ldr	r3, [pc, #696]	@ (800ee94 <tx_control+0xfec>)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800ebe0:	4bac      	ldr	r3, [pc, #688]	@ (800ee94 <tx_control+0xfec>)
 800ebe2:	2209      	movs	r2, #9
 800ebe4:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800ebe6:	4ba9      	ldr	r3, [pc, #676]	@ (800ee8c <tx_control+0xfe4>)
 800ebe8:	781a      	ldrb	r2, [r3, #0]
 800ebea:	4baa      	ldr	r3, [pc, #680]	@ (800ee94 <tx_control+0xfec>)
 800ebec:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800ebee:	4baa      	ldr	r3, [pc, #680]	@ (800ee98 <tx_control+0xff0>)
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	709a      	strb	r2, [r3, #2]

			//clrw	X
			//ldw		chksum_HW,X
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800ebf4:	4b9d      	ldr	r3, [pc, #628]	@ (800ee6c <tx_control+0xfc4>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800ebfa:	4ba7      	ldr	r3, [pc, #668]	@ (800ee98 <tx_control+0xff0>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ec00:	4ba6      	ldr	r3, [pc, #664]	@ (800ee9c <tx_control+0xff4>)
 800ec02:	2255      	movs	r2, #85	@ 0x55
 800ec04:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800ec06:	4b97      	ldr	r3, [pc, #604]	@ (800ee64 <tx_control+0xfbc>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	701a      	strb	r2, [r3, #0]

fin_tx_infoReloj:
			goto end_tx_control;		//jp		end_tx_control
 800ec0c:	f001 f9cb 	bl	800ffa6 <tx_control+0x20fe>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800ec10:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x62)//jrne	ask_tx_control_19
 800ec12:	4b94      	ldr	r3, [pc, #592]	@ (800ee64 <tx_control+0xfbc>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b62      	cmp	r3, #98	@ 0x62
 800ec18:	d10b      	bne.n	800ec32 <tx_control+0xd8a>
			timeOutRst = 240; //mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ec1a:	4b93      	ldr	r3, [pc, #588]	@ (800ee68 <tx_control+0xfc0>)
 800ec1c:	22f0      	movs	r2, #240	@ 0xf0
 800ec1e:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_datalogger;//jp		tx_wifi_datalogger
 800ec20:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_wifi_datalogger:

			flagsWIFI[f_timeLoggerSend] = 1;	//bset		flagsWIFI,#f_timeLoggerSend;
 800ec22:	4b9f      	ldr	r3, [pc, #636]	@ (800eea0 <tx_control+0xff8>)
 800ec24:	2201      	movs	r2, #1
 800ec26:	705a      	strb	r2, [r3, #1]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800ec28:	4b8e      	ldr	r3, [pc, #568]	@ (800ee64 <tx_control+0xfbc>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800ec2e:	f001 f9ba 	bl	800ffa6 <tx_control+0x20fe>
				goto ask_tx_control_19;
 800ec32:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x63)//jrne	ask_tx_control_20
 800ec34:	4b8b      	ldr	r3, [pc, #556]	@ (800ee64 <tx_control+0xfbc>)
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	2b63      	cmp	r3, #99	@ 0x63
 800ec3a:	d10f      	bne.n	800ec5c <tx_control+0xdb4>
			timeOutRst = 240;		//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ec3c:	4b8a      	ldr	r3, [pc, #552]	@ (800ee68 <tx_control+0xfc0>)
 800ec3e:	22f0      	movs	r2, #240	@ 0xf0
 800ec40:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_eventlogger;//jp		tx_wifi_eventlogger
 800ec42:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
tx_wifi_eventlogger:
			flagsWIFI[f_eventLoggerSend] = 1;	//bset		flagsWIFI,#f_eventLoggerSend;
 800ec44:	4b96      	ldr	r3, [pc, #600]	@ (800eea0 <tx_control+0xff8>)
 800ec46:	2201      	movs	r2, #1
 800ec48:	709a      	strb	r2, [r3, #2]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800ec4a:	4b86      	ldr	r3, [pc, #536]	@ (800ee64 <tx_control+0xfbc>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800ec50:	f001 f9a9 	bl	800ffa6 <tx_control+0x20fe>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800ec54:	46c0      	nop			@ (mov r8, r8)
 800ec56:	e002      	b.n	800ec5e <tx_control+0xdb6>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800ec58:	46c0      	nop			@ (mov r8, r8)
 800ec5a:	e000      	b.n	800ec5e <tx_control+0xdb6>
				goto ask_tx_control_20;
 800ec5c:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800ec5e:	46c0      	nop			@ (mov r8, r8)

		//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
		//	goto tx_wifi_OK;
		//}
		//; logger, telemetria y eventos por servidor solo están permitidos con comunicación WiFi seleccionada
		if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,tx_wifi_01
 800ec60:	4b90      	ldr	r3, [pc, #576]	@ (800eea4 <tx_control+0xffc>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <tx_control+0xdc4>
 800ec68:	f002 fa35 	bl	80110d6 <tx_control+0x322e>
			goto tx_wifi_01;
 800ec6c:	f001 f9c1 	bl	800fff2 <tx_control+0x214a>
	     	point_Y[i] = point_X[i];
 800ec70:	203c      	movs	r0, #60	@ 0x3c
 800ec72:	183b      	adds	r3, r7, r0
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec78:	18d2      	adds	r2, r2, r3
 800ec7a:	183b      	adds	r3, r7, r0
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec80:	18cb      	adds	r3, r1, r3
 800ec82:	7812      	ldrb	r2, [r2, #0]
 800ec84:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800ec86:	183b      	adds	r3, r7, r0
 800ec88:	781a      	ldrb	r2, [r3, #0]
 800ec8a:	183b      	adds	r3, r7, r0
 800ec8c:	3201      	adds	r2, #1
 800ec8e:	701a      	strb	r2, [r3, #0]
 800ec90:	233c      	movs	r3, #60	@ 0x3c
 800ec92:	18fb      	adds	r3, r7, r3
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b14      	cmp	r3, #20
 800ec98:	d9ea      	bls.n	800ec70 <tx_control+0xdc8>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ec9a:	4b74      	ldr	r3, [pc, #464]	@ (800ee6c <tx_control+0xfc4>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800eca0:	4b81      	ldr	r3, [pc, #516]	@ (800eea8 <tx_control+0x1000>)
 800eca2:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, size_handshake);
 800eca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca6:	2115      	movs	r1, #21
 800eca8:	0018      	movs	r0, r3
 800ecaa:	f7f8 faeb 	bl	8007284 <buildChksumBloq>
		asm ("nop");
 800ecae:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800ecb0:	4b6e      	ldr	r3, [pc, #440]	@ (800ee6c <tx_control+0xfc4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	0e1b      	lsrs	r3, r3, #24
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	4b7b      	ldr	r3, [pc, #492]	@ (800eea8 <tx_control+0x1000>)
 800ecba:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800ecbc:	4b6b      	ldr	r3, [pc, #428]	@ (800ee6c <tx_control+0xfc4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	0c1b      	lsrs	r3, r3, #16
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	4b78      	ldr	r3, [pc, #480]	@ (800eea8 <tx_control+0x1000>)
 800ecc6:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800ecc8:	4b68      	ldr	r3, [pc, #416]	@ (800ee6c <tx_control+0xfc4>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	0a1b      	lsrs	r3, r3, #8
 800ecce:	b2da      	uxtb	r2, r3
 800ecd0:	4b75      	ldr	r3, [pc, #468]	@ (800eea8 <tx_control+0x1000>)
 800ecd2:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800ecd4:	4b65      	ldr	r3, [pc, #404]	@ (800ee6c <tx_control+0xfc4>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	4b73      	ldr	r3, [pc, #460]	@ (800eea8 <tx_control+0x1000>)
 800ecdc:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800ecde:	4b68      	ldr	r3, [pc, #416]	@ (800ee80 <tx_control+0xfd8>)
 800ece0:	4a71      	ldr	r2, [pc, #452]	@ (800eea8 <tx_control+0x1000>)
 800ece2:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800ece4:	4b67      	ldr	r3, [pc, #412]	@ (800ee84 <tx_control+0xfdc>)
 800ece6:	4a70      	ldr	r2, [pc, #448]	@ (800eea8 <tx_control+0x1000>)
 800ece8:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800ecea:	4b67      	ldr	r3, [pc, #412]	@ (800ee88 <tx_control+0xfe0>)
 800ecec:	4a6f      	ldr	r2, [pc, #444]	@ (800eeac <tx_control+0x1004>)
 800ecee:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800ecf0:	4b66      	ldr	r3, [pc, #408]	@ (800ee8c <tx_control+0xfe4>)
 800ecf2:	2219      	movs	r2, #25
 800ecf4:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800ecf6:	4b68      	ldr	r3, [pc, #416]	@ (800ee98 <tx_control+0xff0>)
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800ecfc:	4b66      	ldr	r3, [pc, #408]	@ (800ee98 <tx_control+0xff0>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ed02:	4b5a      	ldr	r3, [pc, #360]	@ (800ee6c <tx_control+0xfc4>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800ed08:	4b63      	ldr	r3, [pc, #396]	@ (800ee98 <tx_control+0xff0>)
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800ed0e:	4b63      	ldr	r3, [pc, #396]	@ (800ee9c <tx_control+0xff4>)
 800ed10:	2255      	movs	r2, #85	@ 0x55
 800ed12:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800ed14:	4b53      	ldr	r3, [pc, #332]	@ (800ee64 <tx_control+0xfbc>)
 800ed16:	2200      	movs	r2, #0
 800ed18:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800ed1a:	f001 f944 	bl	800ffa6 <tx_control+0x20fe>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800ed1e:	4b5e      	ldr	r3, [pc, #376]	@ (800ee98 <tx_control+0xff0>)
 800ed20:	2201      	movs	r2, #1
 800ed22:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800ed24:	4b59      	ldr	r3, [pc, #356]	@ (800ee8c <tx_control+0xfe4>)
 800ed26:	2208      	movs	r2, #8
 800ed28:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800ed2a:	4b61      	ldr	r3, [pc, #388]	@ (800eeb0 <tx_control+0x1008>)
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800ed30:	4b60      	ldr	r3, [pc, #384]	@ (800eeb4 <tx_control+0x100c>)
 800ed32:	4a61      	ldr	r2, [pc, #388]	@ (800eeb8 <tx_control+0x1010>)
 800ed34:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800ed36:	4b61      	ldr	r3, [pc, #388]	@ (800eebc <tx_control+0x1014>)
 800ed38:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;		//incw X ******************************************
 800ed3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800ed40:	4b5f      	ldr	r3, [pc, #380]	@ (800eec0 <tx_control+0x1018>)
 800ed42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed44:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800ed46:	4b5f      	ldr	r3, [pc, #380]	@ (800eec4 <tx_control+0x101c>)
 800ed48:	2260      	movs	r2, #96	@ 0x60
 800ed4a:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800ed4c:	4b5e      	ldr	r3, [pc, #376]	@ (800eec8 <tx_control+0x1020>)
 800ed4e:	881a      	ldrh	r2, [r3, #0]
 800ed50:	4b5e      	ldr	r3, [pc, #376]	@ (800eecc <tx_control+0x1024>)
 800ed52:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800ed54:	4b5e      	ldr	r3, [pc, #376]	@ (800eed0 <tx_control+0x1028>)
 800ed56:	4a5f      	ldr	r2, [pc, #380]	@ (800eed4 <tx_control+0x102c>)
 800ed58:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 800ed5a:	4b5c      	ldr	r3, [pc, #368]	@ (800eecc <tx_control+0x1024>)
 800ed5c:	881a      	ldrh	r2, [r3, #0]
 800ed5e:	4b5e      	ldr	r3, [pc, #376]	@ (800eed8 <tx_control+0x1030>)
 800ed60:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800ed62:	f002 fa01 	bl	8011168 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800ed66:	4b4a      	ldr	r3, [pc, #296]	@ (800ee90 <tx_control+0xfe8>)
 800ed68:	227b      	movs	r2, #123	@ 0x7b
 800ed6a:	5c9a      	ldrb	r2, [r3, r2]
 800ed6c:	4b49      	ldr	r3, [pc, #292]	@ (800ee94 <tx_control+0xfec>)
 800ed6e:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800ed70:	4b47      	ldr	r3, [pc, #284]	@ (800ee90 <tx_control+0xfe8>)
 800ed72:	227c      	movs	r2, #124	@ 0x7c
 800ed74:	5c9a      	ldrb	r2, [r3, r2]
 800ed76:	4b47      	ldr	r3, [pc, #284]	@ (800ee94 <tx_control+0xfec>)
 800ed78:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800ed7a:	4b46      	ldr	r3, [pc, #280]	@ (800ee94 <tx_control+0xfec>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800ed80:	4b44      	ldr	r3, [pc, #272]	@ (800ee94 <tx_control+0xfec>)
 800ed82:	2200      	movs	r2, #0
 800ed84:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800ed86:	4b43      	ldr	r3, [pc, #268]	@ (800ee94 <tx_control+0xfec>)
 800ed88:	2205      	movs	r2, #5
 800ed8a:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800ed8c:	4b41      	ldr	r3, [pc, #260]	@ (800ee94 <tx_control+0xfec>)
 800ed8e:	2240      	movs	r2, #64	@ 0x40
 800ed90:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800ed92:	4b40      	ldr	r3, [pc, #256]	@ (800ee94 <tx_control+0xfec>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800ed98:	4b3e      	ldr	r3, [pc, #248]	@ (800ee94 <tx_control+0xfec>)
 800ed9a:	2209      	movs	r2, #9
 800ed9c:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800ed9e:	4b3e      	ldr	r3, [pc, #248]	@ (800ee98 <tx_control+0xff0>)
 800eda0:	2201      	movs	r2, #1
 800eda2:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800eda4:	4b31      	ldr	r3, [pc, #196]	@ (800ee6c <tx_control+0xfc4>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800edaa:	4b3b      	ldr	r3, [pc, #236]	@ (800ee98 <tx_control+0xff0>)
 800edac:	2200      	movs	r2, #0
 800edae:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800edb0:	4b3a      	ldr	r3, [pc, #232]	@ (800ee9c <tx_control+0xff4>)
 800edb2:	2255      	movs	r2, #85	@ 0x55
 800edb4:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800edb6:	4b2b      	ldr	r3, [pc, #172]	@ (800ee64 <tx_control+0xfbc>)
 800edb8:	2200      	movs	r2, #0
 800edba:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800edbc:	f001 f8f3 	bl	800ffa6 <tx_control+0x20fe>
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800edc0:	4b35      	ldr	r3, [pc, #212]	@ (800ee98 <tx_control+0xff0>)
 800edc2:	2201      	movs	r2, #1
 800edc4:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800edc6:	4b31      	ldr	r3, [pc, #196]	@ (800ee8c <tx_control+0xfe4>)
 800edc8:	2208      	movs	r2, #8
 800edca:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800edcc:	4b38      	ldr	r3, [pc, #224]	@ (800eeb0 <tx_control+0x1008>)
 800edce:	2201      	movs	r2, #1
 800edd0:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800edd2:	4b38      	ldr	r3, [pc, #224]	@ (800eeb4 <tx_control+0x100c>)
 800edd4:	4a41      	ldr	r2, [pc, #260]	@ (800eedc <tx_control+0x1034>)
 800edd6:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800edd8:	4b41      	ldr	r3, [pc, #260]	@ (800eee0 <tx_control+0x1038>)
 800edda:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;						//incw	X ******************
 800eddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edde:	3301      	adds	r3, #1
 800ede0:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800ede2:	4b37      	ldr	r3, [pc, #220]	@ (800eec0 <tx_control+0x1018>)
 800ede4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ede6:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800ede8:	4b36      	ldr	r3, [pc, #216]	@ (800eec4 <tx_control+0x101c>)
 800edea:	22a0      	movs	r2, #160	@ 0xa0
 800edec:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800edee:	4b3d      	ldr	r3, [pc, #244]	@ (800eee4 <tx_control+0x103c>)
 800edf0:	881a      	ldrh	r2, [r3, #0]
 800edf2:	4b36      	ldr	r3, [pc, #216]	@ (800eecc <tx_control+0x1024>)
 800edf4:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800edf6:	4b36      	ldr	r3, [pc, #216]	@ (800eed0 <tx_control+0x1028>)
 800edf8:	4a3b      	ldr	r2, [pc, #236]	@ (800eee8 <tx_control+0x1040>)
 800edfa:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 800edfc:	4b33      	ldr	r3, [pc, #204]	@ (800eecc <tx_control+0x1024>)
 800edfe:	881a      	ldrh	r2, [r3, #0]
 800ee00:	4b3a      	ldr	r3, [pc, #232]	@ (800eeec <tx_control+0x1044>)
 800ee02:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800ee04:	f002 f9b0 	bl	8011168 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800ee08:	4b21      	ldr	r3, [pc, #132]	@ (800ee90 <tx_control+0xfe8>)
 800ee0a:	227b      	movs	r2, #123	@ 0x7b
 800ee0c:	5c9a      	ldrb	r2, [r3, r2]
 800ee0e:	4b21      	ldr	r3, [pc, #132]	@ (800ee94 <tx_control+0xfec>)
 800ee10:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800ee12:	4b1f      	ldr	r3, [pc, #124]	@ (800ee90 <tx_control+0xfe8>)
 800ee14:	227c      	movs	r2, #124	@ 0x7c
 800ee16:	5c9a      	ldrb	r2, [r3, r2]
 800ee18:	4b1e      	ldr	r3, [pc, #120]	@ (800ee94 <tx_control+0xfec>)
 800ee1a:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ee1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ee94 <tx_control+0xfec>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800ee22:	4b1c      	ldr	r3, [pc, #112]	@ (800ee94 <tx_control+0xfec>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ee28:	4b1a      	ldr	r3, [pc, #104]	@ (800ee94 <tx_control+0xfec>)
 800ee2a:	2205      	movs	r2, #5
 800ee2c:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800ee2e:	4b19      	ldr	r3, [pc, #100]	@ (800ee94 <tx_control+0xfec>)
 800ee30:	22a0      	movs	r2, #160	@ 0xa0
 800ee32:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800ee34:	4b17      	ldr	r3, [pc, #92]	@ (800ee94 <tx_control+0xfec>)
 800ee36:	2202      	movs	r2, #2
 800ee38:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800ee3a:	4b16      	ldr	r3, [pc, #88]	@ (800ee94 <tx_control+0xfec>)
 800ee3c:	220e      	movs	r2, #14
 800ee3e:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800ee40:	4b15      	ldr	r3, [pc, #84]	@ (800ee98 <tx_control+0xff0>)
 800ee42:	2201      	movs	r2, #1
 800ee44:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800ee46:	4b09      	ldr	r3, [pc, #36]	@ (800ee6c <tx_control+0xfc4>)
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800ee4c:	4b12      	ldr	r3, [pc, #72]	@ (800ee98 <tx_control+0xff0>)
 800ee4e:	2200      	movs	r2, #0
 800ee50:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800ee52:	4b12      	ldr	r3, [pc, #72]	@ (800ee9c <tx_control+0xff4>)
 800ee54:	2255      	movs	r2, #85	@ 0x55
 800ee56:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800ee58:	4b02      	ldr	r3, [pc, #8]	@ (800ee64 <tx_control+0xfbc>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800ee5e:	f001 f8a2 	bl	800ffa6 <tx_control+0x20fe>
 800ee62:	46c0      	nop			@ (mov r8, r8)
 800ee64:	20000ec0 	.word	0x20000ec0
 800ee68:	20000f81 	.word	0x20000f81
 800ee6c:	20000ed0 	.word	0x20000ed0
 800ee70:	20000b67 	.word	0x20000b67
 800ee74:	20000b66 	.word	0x20000b66
 800ee78:	20000998 	.word	0x20000998
 800ee7c:	2000114d 	.word	0x2000114d
 800ee80:	20000eb0 	.word	0x20000eb0
 800ee84:	20000ea8 	.word	0x20000ea8
 800ee88:	20000eac 	.word	0x20000eac
 800ee8c:	20000ecc 	.word	0x20000ecc
 800ee90:	200000b8 	.word	0x200000b8
 800ee94:	20000e74 	.word	0x20000e74
 800ee98:	20000eb8 	.word	0x20000eb8
 800ee9c:	20000eb5 	.word	0x20000eb5
 800eea0:	20000fec 	.word	0x20000fec
 800eea4:	20001188 	.word	0x20001188
 800eea8:	20001044 	.word	0x20001044
 800eeac:	2000105d 	.word	0x2000105d
 800eeb0:	20000ea0 	.word	0x20000ea0
 800eeb4:	20000ec4 	.word	0x20000ec4
 800eeb8:	0803c000 	.word	0x0803c000
 800eebc:	0803efff 	.word	0x0803efff
 800eec0:	20000ec8 	.word	0x20000ec8
 800eec4:	20000e39 	.word	0x20000e39
 800eec8:	200010d6 	.word	0x200010d6
 800eecc:	200010da 	.word	0x200010da
 800eed0:	200010dc 	.word	0x200010dc
 800eed4:	0803f810 	.word	0x0803f810
 800eed8:	20000d22 	.word	0x20000d22
 800eedc:	08037000 	.word	0x08037000
 800eee0:	0803bfff 	.word	0x0803bfff
 800eee4:	200010d8 	.word	0x200010d8
 800eee8:	0803f812 	.word	0x0803f812
 800eeec:	20000d24 	.word	0x20000d24
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800eef0:	4bd1      	ldr	r3, [pc, #836]	@ (800f238 <tx_control+0x1390>)
 800eef2:	79db      	ldrb	r3, [r3, #7]
 800eef4:	2201      	movs	r2, #1
 800eef6:	4313      	orrs	r3, r2
 800eef8:	b2da      	uxtb	r2, r3
 800eefa:	4bcf      	ldr	r3, [pc, #828]	@ (800f238 <tx_control+0x1390>)
 800eefc:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_dh])												// deshielo activo ?
 800eefe:	4bcf      	ldr	r3, [pc, #828]	@ (800f23c <tx_control+0x1394>)
 800ef00:	785b      	ldrb	r3, [r3, #1]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <tx_control+0x106c>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800ef06:	4bcc      	ldr	r3, [pc, #816]	@ (800f238 <tx_control+0x1390>)
 800ef08:	79db      	ldrb	r3, [r3, #7]
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	4bc9      	ldr	r3, [pc, #804]	@ (800f238 <tx_control+0x1390>)
 800ef12:	71da      	strb	r2, [r3, #7]
		if (flagsC[0])													// puerta abierta ?
 800ef14:	4bca      	ldr	r3, [pc, #808]	@ (800f240 <tx_control+0x1398>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d006      	beq.n	800ef2a <tx_control+0x1082>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800ef1c:	4bc6      	ldr	r3, [pc, #792]	@ (800f238 <tx_control+0x1390>)
 800ef1e:	79db      	ldrb	r3, [r3, #7]
 800ef20:	2204      	movs	r2, #4
 800ef22:	4313      	orrs	r3, r2
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	4bc4      	ldr	r3, [pc, #784]	@ (800f238 <tx_control+0x1390>)
 800ef28:	71da      	strb	r2, [r3, #7]
		if (flagsC[1])													// Modo ahorro 1 activo ?
 800ef2a:	4bc5      	ldr	r3, [pc, #788]	@ (800f240 <tx_control+0x1398>)
 800ef2c:	785b      	ldrb	r3, [r3, #1]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d006      	beq.n	800ef40 <tx_control+0x1098>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800ef32:	4bc1      	ldr	r3, [pc, #772]	@ (800f238 <tx_control+0x1390>)
 800ef34:	79db      	ldrb	r3, [r3, #7]
 800ef36:	2208      	movs	r2, #8
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	4bbe      	ldr	r3, [pc, #760]	@ (800f238 <tx_control+0x1390>)
 800ef3e:	71da      	strb	r2, [r3, #7]
		if (flagsC[2])													// Modo ahorro 1 activo ?
 800ef40:	4bbf      	ldr	r3, [pc, #764]	@ (800f240 <tx_control+0x1398>)
 800ef42:	789b      	ldrb	r3, [r3, #2]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d006      	beq.n	800ef56 <tx_control+0x10ae>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800ef48:	4bbb      	ldr	r3, [pc, #748]	@ (800f238 <tx_control+0x1390>)
 800ef4a:	79db      	ldrb	r3, [r3, #7]
 800ef4c:	2210      	movs	r2, #16
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	4bb9      	ldr	r3, [pc, #740]	@ (800f238 <tx_control+0x1390>)
 800ef54:	71da      	strb	r2, [r3, #7]
		if (flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800ef56:	4bbb      	ldr	r3, [pc, #748]	@ (800f244 <tx_control+0x139c>)
 800ef58:	78db      	ldrb	r3, [r3, #3]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d006      	beq.n	800ef6c <tx_control+0x10c4>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800ef5e:	4bb6      	ldr	r3, [pc, #728]	@ (800f238 <tx_control+0x1390>)
 800ef60:	79db      	ldrb	r3, [r3, #7]
 800ef62:	2220      	movs	r2, #32
 800ef64:	4313      	orrs	r3, r2
 800ef66:	b2da      	uxtb	r2, r3
 800ef68:	4bb3      	ldr	r3, [pc, #716]	@ (800f238 <tx_control+0x1390>)
 800ef6a:	71da      	strb	r2, [r3, #7]
		if (GPIOR1 [f_fan])												// ventilador activo ?
 800ef6c:	4bb6      	ldr	r3, [pc, #728]	@ (800f248 <tx_control+0x13a0>)
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <tx_control+0x10da>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800ef74:	4bb0      	ldr	r3, [pc, #704]	@ (800f238 <tx_control+0x1390>)
 800ef76:	79db      	ldrb	r3, [r3, #7]
 800ef78:	2240      	movs	r2, #64	@ 0x40
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	4bae      	ldr	r3, [pc, #696]	@ (800f238 <tx_control+0x1390>)
 800ef80:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800ef82:	4bae      	ldr	r3, [pc, #696]	@ (800f23c <tx_control+0x1394>)
 800ef84:	789b      	ldrb	r3, [r3, #2]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d007      	beq.n	800ef9a <tx_control+0x10f2>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800ef8a:	4bab      	ldr	r3, [pc, #684]	@ (800f238 <tx_control+0x1390>)
 800ef8c:	79db      	ldrb	r3, [r3, #7]
 800ef8e:	2280      	movs	r2, #128	@ 0x80
 800ef90:	4252      	negs	r2, r2
 800ef92:	4313      	orrs	r3, r2
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	4ba8      	ldr	r3, [pc, #672]	@ (800f238 <tx_control+0x1390>)
 800ef98:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800ef9a:	4ba7      	ldr	r3, [pc, #668]	@ (800f238 <tx_control+0x1390>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800efa0:	2300      	movs	r3, #0
 800efa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800efa4:	e011      	b.n	800efca <tx_control+0x1122>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800efa6:	4ba4      	ldr	r3, [pc, #656]	@ (800f238 <tx_control+0x1390>)
 800efa8:	7a1a      	ldrb	r2, [r3, #8]
 800efaa:	49a8      	ldr	r1, [pc, #672]	@ (800f24c <tx_control+0x13a4>)
 800efac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efae:	18cb      	adds	r3, r1, r3
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	0019      	movs	r1, r3
 800efb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb6:	4099      	lsls	r1, r3
 800efb8:	000b      	movs	r3, r1
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	4313      	orrs	r3, r2
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	4b9d      	ldr	r3, [pc, #628]	@ (800f238 <tx_control+0x1390>)
 800efc2:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800efc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efc6:	3301      	adds	r3, #1
 800efc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800efca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efcc:	2b07      	cmp	r3, #7
 800efce:	ddea      	ble.n	800efa6 <tx_control+0x10fe>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800efd0:	4b99      	ldr	r3, [pc, #612]	@ (800f238 <tx_control+0x1390>)
 800efd2:	7a1b      	ldrb	r3, [r3, #8]
 800efd4:	2201      	movs	r2, #1
 800efd6:	4393      	bics	r3, r2
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	4b97      	ldr	r3, [pc, #604]	@ (800f238 <tx_control+0x1390>)
 800efdc:	721a      	strb	r2, [r3, #8]
		for(uint8_t k=0; k<8; k++){
 800efde:	2337      	movs	r3, #55	@ 0x37
 800efe0:	18fb      	adds	r3, r7, r3
 800efe2:	2200      	movs	r2, #0
 800efe4:	701a      	strb	r2, [r3, #0]
 800efe6:	e017      	b.n	800f018 <tx_control+0x1170>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800efe8:	4b93      	ldr	r3, [pc, #588]	@ (800f238 <tx_control+0x1390>)
 800efea:	7a5b      	ldrb	r3, [r3, #9]
 800efec:	b25a      	sxtb	r2, r3
 800efee:	2037      	movs	r0, #55	@ 0x37
 800eff0:	183b      	adds	r3, r7, r0
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	4996      	ldr	r1, [pc, #600]	@ (800f250 <tx_control+0x13a8>)
 800eff6:	5ccb      	ldrb	r3, [r1, r3]
 800eff8:	0019      	movs	r1, r3
 800effa:	183b      	adds	r3, r7, r0
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	4099      	lsls	r1, r3
 800f000:	000b      	movs	r3, r1
 800f002:	b25b      	sxtb	r3, r3
 800f004:	4313      	orrs	r3, r2
 800f006:	b25b      	sxtb	r3, r3
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	4b8b      	ldr	r3, [pc, #556]	@ (800f238 <tx_control+0x1390>)
 800f00c:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800f00e:	183b      	adds	r3, r7, r0
 800f010:	781a      	ldrb	r2, [r3, #0]
 800f012:	183b      	adds	r3, r7, r0
 800f014:	3201      	adds	r2, #1
 800f016:	701a      	strb	r2, [r3, #0]
 800f018:	2337      	movs	r3, #55	@ 0x37
 800f01a:	18fb      	adds	r3, r7, r3
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	2b07      	cmp	r3, #7
 800f020:	d9e2      	bls.n	800efe8 <tx_control+0x1140>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800f022:	4b8c      	ldr	r3, [pc, #560]	@ (800f254 <tx_control+0x13ac>)
 800f024:	220a      	movs	r2, #10
 800f026:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f028:	4b8b      	ldr	r3, [pc, #556]	@ (800f258 <tx_control+0x13b0>)
 800f02a:	227b      	movs	r2, #123	@ 0x7b
 800f02c:	5c9a      	ldrb	r2, [r3, r2]
 800f02e:	4b8b      	ldr	r3, [pc, #556]	@ (800f25c <tx_control+0x13b4>)
 800f030:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800f032:	4b89      	ldr	r3, [pc, #548]	@ (800f258 <tx_control+0x13b0>)
 800f034:	227c      	movs	r2, #124	@ 0x7c
 800f036:	5c9a      	ldrb	r2, [r3, r2]
 800f038:	4b88      	ldr	r3, [pc, #544]	@ (800f25c <tx_control+0x13b4>)
 800f03a:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800f03c:	4b87      	ldr	r3, [pc, #540]	@ (800f25c <tx_control+0x13b4>)
 800f03e:	2200      	movs	r2, #0
 800f040:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800f042:	4b86      	ldr	r3, [pc, #536]	@ (800f25c <tx_control+0x13b4>)
 800f044:	2200      	movs	r2, #0
 800f046:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800f048:	4b84      	ldr	r3, [pc, #528]	@ (800f25c <tx_control+0x13b4>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800f04e:	4b83      	ldr	r3, [pc, #524]	@ (800f25c <tx_control+0x13b4>)
 800f050:	2201      	movs	r2, #1
 800f052:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800f054:	4b81      	ldr	r3, [pc, #516]	@ (800f25c <tx_control+0x13b4>)
 800f056:	2203      	movs	r2, #3
 800f058:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800f05a:	4b7e      	ldr	r3, [pc, #504]	@ (800f254 <tx_control+0x13ac>)
 800f05c:	781a      	ldrb	r2, [r3, #0]
 800f05e:	4b7f      	ldr	r3, [pc, #508]	@ (800f25c <tx_control+0x13b4>)
 800f060:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800f062:	4b7f      	ldr	r3, [pc, #508]	@ (800f260 <tx_control+0x13b8>)
 800f064:	2201      	movs	r2, #1
 800f066:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800f068:	4b7c      	ldr	r3, [pc, #496]	@ (800f25c <tx_control+0x13b4>)
 800f06a:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800f06c:	4b7d      	ldr	r3, [pc, #500]	@ (800f264 <tx_control+0x13bc>)
 800f06e:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800f070:	2336      	movs	r3, #54	@ 0x36
 800f072:	18fb      	adds	r3, r7, r3
 800f074:	2200      	movs	r2, #0
 800f076:	701a      	strb	r2, [r3, #0]
 800f078:	e00f      	b.n	800f09a <tx_control+0x11f2>
			point_Y[i] = point_X[i];
 800f07a:	2036      	movs	r0, #54	@ 0x36
 800f07c:	183b      	adds	r3, r7, r0
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f082:	18d2      	adds	r2, r2, r3
 800f084:	183b      	adds	r3, r7, r0
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f08a:	18cb      	adds	r3, r1, r3
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f090:	183b      	adds	r3, r7, r0
 800f092:	781a      	ldrb	r2, [r3, #0]
 800f094:	183b      	adds	r3, r7, r0
 800f096:	3201      	adds	r2, #1
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	2336      	movs	r3, #54	@ 0x36
 800f09c:	18fb      	adds	r3, r7, r3
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b07      	cmp	r3, #7
 800f0a2:	d9ea      	bls.n	800f07a <tx_control+0x11d2>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800f0a4:	4b64      	ldr	r3, [pc, #400]	@ (800f238 <tx_control+0x1390>)
 800f0a6:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[8];	 //
 800f0a8:	4b6f      	ldr	r3, [pc, #444]	@ (800f268 <tx_control+0x13c0>)
 800f0aa:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 10 ; i++ )
 800f0ac:	2335      	movs	r3, #53	@ 0x35
 800f0ae:	18fb      	adds	r3, r7, r3
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
 800f0b4:	e00f      	b.n	800f0d6 <tx_control+0x122e>
			point_Y[i] = point_X[i];
 800f0b6:	2035      	movs	r0, #53	@ 0x35
 800f0b8:	183b      	adds	r3, r7, r0
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0be:	18d2      	adds	r2, r2, r3
 800f0c0:	183b      	adds	r3, r7, r0
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0c6:	18cb      	adds	r3, r1, r3
 800f0c8:	7812      	ldrb	r2, [r2, #0]
 800f0ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800f0cc:	183b      	adds	r3, r7, r0
 800f0ce:	781a      	ldrb	r2, [r3, #0]
 800f0d0:	183b      	adds	r3, r7, r0
 800f0d2:	3201      	adds	r2, #1
 800f0d4:	701a      	strb	r2, [r3, #0]
 800f0d6:	2335      	movs	r3, #53	@ 0x35
 800f0d8:	18fb      	adds	r3, r7, r3
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	2b09      	cmp	r3, #9
 800f0de:	d9ea      	bls.n	800f0b6 <tx_control+0x120e>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f0e0:	4b62      	ldr	r3, [pc, #392]	@ (800f26c <tx_control+0x13c4>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f0e6:	4b5f      	ldr	r3, [pc, #380]	@ (800f264 <tx_control+0x13bc>)
 800f0e8:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800f0ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0ec:	2112      	movs	r1, #18
 800f0ee:	0018      	movs	r0, r3
 800f0f0:	f7f8 f8c8 	bl	8007284 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f0f4:	4b5d      	ldr	r3, [pc, #372]	@ (800f26c <tx_control+0x13c4>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	0e1b      	lsrs	r3, r3, #24
 800f0fa:	b2da      	uxtb	r2, r3
 800f0fc:	4b59      	ldr	r3, [pc, #356]	@ (800f264 <tx_control+0x13bc>)
 800f0fe:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f100:	4b5a      	ldr	r3, [pc, #360]	@ (800f26c <tx_control+0x13c4>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	0c1b      	lsrs	r3, r3, #16
 800f106:	b2da      	uxtb	r2, r3
 800f108:	4b56      	ldr	r3, [pc, #344]	@ (800f264 <tx_control+0x13bc>)
 800f10a:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f10c:	4b57      	ldr	r3, [pc, #348]	@ (800f26c <tx_control+0x13c4>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	0a1b      	lsrs	r3, r3, #8
 800f112:	b2da      	uxtb	r2, r3
 800f114:	4b53      	ldr	r3, [pc, #332]	@ (800f264 <tx_control+0x13bc>)
 800f116:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f118:	4b54      	ldr	r3, [pc, #336]	@ (800f26c <tx_control+0x13c4>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	4b51      	ldr	r3, [pc, #324]	@ (800f264 <tx_control+0x13bc>)
 800f120:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800f122:	4b53      	ldr	r3, [pc, #332]	@ (800f270 <tx_control+0x13c8>)
 800f124:	4a4f      	ldr	r2, [pc, #316]	@ (800f264 <tx_control+0x13bc>)
 800f126:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f128:	4b52      	ldr	r3, [pc, #328]	@ (800f274 <tx_control+0x13cc>)
 800f12a:	4a4e      	ldr	r2, [pc, #312]	@ (800f264 <tx_control+0x13bc>)
 800f12c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800f12e:	4b52      	ldr	r3, [pc, #328]	@ (800f278 <tx_control+0x13d0>)
 800f130:	4a52      	ldr	r2, [pc, #328]	@ (800f27c <tx_control+0x13d4>)
 800f132:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f134:	4b47      	ldr	r3, [pc, #284]	@ (800f254 <tx_control+0x13ac>)
 800f136:	2216      	movs	r2, #22
 800f138:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800f13a:	4b49      	ldr	r3, [pc, #292]	@ (800f260 <tx_control+0x13b8>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800f140:	4b47      	ldr	r3, [pc, #284]	@ (800f260 <tx_control+0x13b8>)
 800f142:	2201      	movs	r2, #1
 800f144:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f146:	4b4e      	ldr	r3, [pc, #312]	@ (800f280 <tx_control+0x13d8>)
 800f148:	2255      	movs	r2, #85	@ 0x55
 800f14a:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f14c:	4b4d      	ldr	r3, [pc, #308]	@ (800f284 <tx_control+0x13dc>)
 800f14e:	2200      	movs	r2, #0
 800f150:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f152:	f000 ff28 	bl	800ffa6 <tx_control+0x20fe>
			point_Y[i] = point_X[i];
 800f156:	2034      	movs	r0, #52	@ 0x34
 800f158:	183b      	adds	r3, r7, r0
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f15e:	18d2      	adds	r2, r2, r3
 800f160:	183b      	adds	r3, r7, r0
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f166:	18cb      	adds	r3, r1, r3
 800f168:	7812      	ldrb	r2, [r2, #0]
 800f16a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f16c:	183b      	adds	r3, r7, r0
 800f16e:	781a      	ldrb	r2, [r3, #0]
 800f170:	183b      	adds	r3, r7, r0
 800f172:	3201      	adds	r2, #1
 800f174:	701a      	strb	r2, [r3, #0]
 800f176:	2334      	movs	r3, #52	@ 0x34
 800f178:	18fb      	adds	r3, r7, r3
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b07      	cmp	r3, #7
 800f17e:	d9ea      	bls.n	800f156 <tx_control+0x12ae>
		point_Y = &bufferTxControl[8];	 //
 800f180:	4b39      	ldr	r3, [pc, #228]	@ (800f268 <tx_control+0x13c0>)
 800f182:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 128 ; i++ )
 800f184:	2333      	movs	r3, #51	@ 0x33
 800f186:	18fb      	adds	r3, r7, r3
 800f188:	2200      	movs	r2, #0
 800f18a:	701a      	strb	r2, [r3, #0]
 800f18c:	e00e      	b.n	800f1ac <tx_control+0x1304>
			point_Y[i] = reePlantilla[i];
 800f18e:	2033      	movs	r0, #51	@ 0x33
 800f190:	183b      	adds	r3, r7, r0
 800f192:	781a      	ldrb	r2, [r3, #0]
 800f194:	183b      	adds	r3, r7, r0
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f19a:	18cb      	adds	r3, r1, r3
 800f19c:	493a      	ldr	r1, [pc, #232]	@ (800f288 <tx_control+0x13e0>)
 800f19e:	5c8a      	ldrb	r2, [r1, r2]
 800f1a0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800f1a2:	183b      	adds	r3, r7, r0
 800f1a4:	781a      	ldrb	r2, [r3, #0]
 800f1a6:	183b      	adds	r3, r7, r0
 800f1a8:	3201      	adds	r2, #1
 800f1aa:	701a      	strb	r2, [r3, #0]
 800f1ac:	2333      	movs	r3, #51	@ 0x33
 800f1ae:	18fb      	adds	r3, r7, r3
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	b25b      	sxtb	r3, r3
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	daea      	bge.n	800f18e <tx_control+0x12e6>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f1b8:	4b2c      	ldr	r3, [pc, #176]	@ (800f26c <tx_control+0x13c4>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f1be:	4b29      	ldr	r3, [pc, #164]	@ (800f264 <tx_control+0x13bc>)
 800f1c0:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800f1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1c4:	2188      	movs	r1, #136	@ 0x88
 800f1c6:	0018      	movs	r0, r3
 800f1c8:	f7f8 f85c 	bl	8007284 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f1cc:	4b27      	ldr	r3, [pc, #156]	@ (800f26c <tx_control+0x13c4>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	0e1b      	lsrs	r3, r3, #24
 800f1d2:	b2d9      	uxtb	r1, r3
 800f1d4:	4b23      	ldr	r3, [pc, #140]	@ (800f264 <tx_control+0x13bc>)
 800f1d6:	2288      	movs	r2, #136	@ 0x88
 800f1d8:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f1da:	4b24      	ldr	r3, [pc, #144]	@ (800f26c <tx_control+0x13c4>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	0c1b      	lsrs	r3, r3, #16
 800f1e0:	b2d9      	uxtb	r1, r3
 800f1e2:	4b20      	ldr	r3, [pc, #128]	@ (800f264 <tx_control+0x13bc>)
 800f1e4:	2289      	movs	r2, #137	@ 0x89
 800f1e6:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f1e8:	4b20      	ldr	r3, [pc, #128]	@ (800f26c <tx_control+0x13c4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	0a1b      	lsrs	r3, r3, #8
 800f1ee:	b2d9      	uxtb	r1, r3
 800f1f0:	4b1c      	ldr	r3, [pc, #112]	@ (800f264 <tx_control+0x13bc>)
 800f1f2:	228a      	movs	r2, #138	@ 0x8a
 800f1f4:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f1f6:	4b1d      	ldr	r3, [pc, #116]	@ (800f26c <tx_control+0x13c4>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	b2d9      	uxtb	r1, r3
 800f1fc:	4b19      	ldr	r3, [pc, #100]	@ (800f264 <tx_control+0x13bc>)
 800f1fe:	228b      	movs	r2, #139	@ 0x8b
 800f200:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800f202:	4b1b      	ldr	r3, [pc, #108]	@ (800f270 <tx_control+0x13c8>)
 800f204:	4a17      	ldr	r2, [pc, #92]	@ (800f264 <tx_control+0x13bc>)
 800f206:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f208:	4b1a      	ldr	r3, [pc, #104]	@ (800f274 <tx_control+0x13cc>)
 800f20a:	4a16      	ldr	r2, [pc, #88]	@ (800f264 <tx_control+0x13bc>)
 800f20c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800f20e:	4b1a      	ldr	r3, [pc, #104]	@ (800f278 <tx_control+0x13d0>)
 800f210:	4a1e      	ldr	r2, [pc, #120]	@ (800f28c <tx_control+0x13e4>)
 800f212:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f214:	4b0f      	ldr	r3, [pc, #60]	@ (800f254 <tx_control+0x13ac>)
 800f216:	228c      	movs	r2, #140	@ 0x8c
 800f218:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800f21a:	4b11      	ldr	r3, [pc, #68]	@ (800f260 <tx_control+0x13b8>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800f220:	4b0f      	ldr	r3, [pc, #60]	@ (800f260 <tx_control+0x13b8>)
 800f222:	2201      	movs	r2, #1
 800f224:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f226:	4b16      	ldr	r3, [pc, #88]	@ (800f280 <tx_control+0x13d8>)
 800f228:	2255      	movs	r2, #85	@ 0x55
 800f22a:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f22c:	4b15      	ldr	r3, [pc, #84]	@ (800f284 <tx_control+0x13dc>)
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f232:	f000 feb8 	bl	800ffa6 <tx_control+0x20fe>
 800f236:	46c0      	nop			@ (mov r8, r8)
 800f238:	20000e94 	.word	0x20000e94
 800f23c:	20000bb4 	.word	0x20000bb4
 800f240:	20000c4c 	.word	0x20000c4c
 800f244:	20000b88 	.word	0x20000b88
 800f248:	20000bf0 	.word	0x20000bf0
 800f24c:	20000b90 	.word	0x20000b90
 800f250:	20000b98 	.word	0x20000b98
 800f254:	20000ecc 	.word	0x20000ecc
 800f258:	200000b8 	.word	0x200000b8
 800f25c:	20000e74 	.word	0x20000e74
 800f260:	20000eb8 	.word	0x20000eb8
 800f264:	20001044 	.word	0x20001044
 800f268:	2000104c 	.word	0x2000104c
 800f26c:	20000ed0 	.word	0x20000ed0
 800f270:	20000eb0 	.word	0x20000eb0
 800f274:	20000ea8 	.word	0x20000ea8
 800f278:	20000eac 	.word	0x20000eac
 800f27c:	2000105a 	.word	0x2000105a
 800f280:	20000eb5 	.word	0x20000eb5
 800f284:	20000ec0 	.word	0x20000ec0
 800f288:	20000c9c 	.word	0x20000c9c
 800f28c:	200010d0 	.word	0x200010d0
				goto 	verifica_version2;		//jreq	verifica_version2
 800f290:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == reePlantilla[eeversion2]){
 800f292:	4bdd      	ldr	r3, [pc, #884]	@ (800f608 <tx_control+0x1760>)
 800f294:	227e      	movs	r2, #126	@ 0x7e
 800f296:	5c9a      	ldrb	r2, [r3, r2]
 800f298:	4bdc      	ldr	r3, [pc, #880]	@ (800f60c <tx_control+0x1764>)
 800f29a:	217c      	movs	r1, #124	@ 0x7c
 800f29c:	5c5b      	ldrb	r3, [r3, r1]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d159      	bne.n	800f356 <tx_control+0x14ae>
				goto 	verifica_version3;		//jreq	verifica_version3
 800f2a2:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800f2a4:	4bd8      	ldr	r3, [pc, #864]	@ (800f608 <tx_control+0x1760>)
 800f2a6:	789b      	ldrb	r3, [r3, #2]
 800f2a8:	2baa      	cmp	r3, #170	@ 0xaa
 800f2aa:	d156      	bne.n	800f35a <tx_control+0x14b2>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800f2ac:	4bd6      	ldr	r3, [pc, #856]	@ (800f608 <tx_control+0x1760>)
 800f2ae:	2243      	movs	r2, #67	@ 0x43
 800f2b0:	5c9b      	ldrb	r3, [r3, r2]
 800f2b2:	2b66      	cmp	r3, #102	@ 0x66
 800f2b4:	d153      	bne.n	800f35e <tx_control+0x14b6>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800f2b6:	4bd4      	ldr	r3, [pc, #848]	@ (800f608 <tx_control+0x1760>)
 800f2b8:	2281      	movs	r2, #129	@ 0x81
 800f2ba:	5c9b      	ldrb	r3, [r3, r2]
 800f2bc:	2bcc      	cmp	r3, #204	@ 0xcc
 800f2be:	d150      	bne.n	800f362 <tx_control+0x14ba>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f2c0:	4bd3      	ldr	r3, [pc, #844]	@ (800f610 <tx_control+0x1768>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800f2c6:	4bd0      	ldr	r3, [pc, #832]	@ (800f608 <tx_control+0x1760>)
 800f2c8:	647b      	str	r3, [r7, #68]	@ 0x44
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800f2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2cc:	2182      	movs	r1, #130	@ 0x82
 800f2ce:	0018      	movs	r0, r3
 800f2d0:	f7f7 ffd8 	bl	8007284 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800f2d8:	4bcb      	ldr	r3, [pc, #812]	@ (800f608 <tx_control+0x1760>)
 800f2da:	2282      	movs	r2, #130	@ 0x82
 800f2dc:	5c9b      	ldrb	r3, [r3, r2]
 800f2de:	061b      	lsls	r3, r3, #24
 800f2e0:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800f2e2:	4bc9      	ldr	r3, [pc, #804]	@ (800f608 <tx_control+0x1760>)
 800f2e4:	2283      	movs	r2, #131	@ 0x83
 800f2e6:	5c9b      	ldrb	r3, [r3, r2]
 800f2e8:	041b      	lsls	r3, r3, #16
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	18d3      	adds	r3, r2, r3
 800f2ee:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800f2f0:	4bc5      	ldr	r3, [pc, #788]	@ (800f608 <tx_control+0x1760>)
 800f2f2:	2284      	movs	r2, #132	@ 0x84
 800f2f4:	5c9b      	ldrb	r3, [r3, r2]
 800f2f6:	021b      	lsls	r3, r3, #8
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	18d3      	adds	r3, r2, r3
 800f2fc:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800f2fe:	4bc2      	ldr	r3, [pc, #776]	@ (800f608 <tx_control+0x1760>)
 800f300:	2285      	movs	r2, #133	@ 0x85
 800f302:	5c9b      	ldrb	r3, [r3, r2]
 800f304:	001a      	movs	r2, r3
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	189b      	adds	r3, r3, r2
 800f30a:	60bb      	str	r3, [r7, #8]
			if (chksum_32_HW_LW != chksum_to_compare){
 800f30c:	4bc0      	ldr	r3, [pc, #768]	@ (800f610 <tx_control+0x1768>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	429a      	cmp	r2, r3
 800f314:	d127      	bne.n	800f366 <tx_control+0x14be>
write_param:
 800f316:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800f318:	4bbe      	ldr	r3, [pc, #760]	@ (800f614 <tx_control+0x176c>)
 800f31a:	2255      	movs	r2, #85	@ 0x55
 800f31c:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800f31e:	4bba      	ldr	r3, [pc, #744]	@ (800f608 <tx_control+0x1760>)
 800f320:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f324:	3301      	adds	r3, #1
 800f326:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f32a:	3301      	adds	r3, #1
 800f32c:	647b      	str	r3, [r7, #68]	@ 0x44
			dataPointer =	point_X;	// LDW		dataPointer,X
 800f32e:	4bba      	ldr	r3, [pc, #744]	@ (800f618 <tx_control+0x1770>)
 800f330:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f332:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800f334:	4bb9      	ldr	r3, [pc, #740]	@ (800f61c <tx_control+0x1774>)
 800f336:	4aba      	ldr	r2, [pc, #744]	@ (800f620 <tx_control+0x1778>)
 800f338:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800f33a:	f7f8 f829 	bl	8007390 <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800f33e:	4bb9      	ldr	r3, [pc, #740]	@ (800f624 <tx_control+0x177c>)
 800f340:	22f1      	movs	r2, #241	@ 0xf1
 800f342:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f344:	4bb7      	ldr	r3, [pc, #732]	@ (800f624 <tx_control+0x177c>)
 800f346:	223d      	movs	r2, #61	@ 0x3d
 800f348:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800f34a:	4bb7      	ldr	r3, [pc, #732]	@ (800f628 <tx_control+0x1780>)
 800f34c:	2201      	movs	r2, #1
 800f34e:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800f350:	e010      	b.n	800f374 <tx_control+0x14cc>
			goto	no_writeParam;				//jp		no_writeParam
 800f352:	46c0      	nop			@ (mov r8, r8)
 800f354:	e008      	b.n	800f368 <tx_control+0x14c0>
			goto	no_writeParam;				//jp		no_writeParam
 800f356:	46c0      	nop			@ (mov r8, r8)
 800f358:	e006      	b.n	800f368 <tx_control+0x14c0>
				goto	no_writeParam;			//jrne	no_writeParam
 800f35a:	46c0      	nop			@ (mov r8, r8)
 800f35c:	e004      	b.n	800f368 <tx_control+0x14c0>
				goto	no_writeParam;			//jrne	no_writeParam
 800f35e:	46c0      	nop			@ (mov r8, r8)
 800f360:	e002      	b.n	800f368 <tx_control+0x14c0>
				goto	no_writeParam;			//jrne	no_writeParam
 800f362:	46c0      	nop			@ (mov r8, r8)
 800f364:	e000      	b.n	800f368 <tx_control+0x14c0>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800f366:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800f368:	4bae      	ldr	r3, [pc, #696]	@ (800f624 <tx_control+0x177c>)
 800f36a:	22f1      	movs	r2, #241	@ 0xf1
 800f36c:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f36e:	4bad      	ldr	r3, [pc, #692]	@ (800f624 <tx_control+0x177c>)
 800f370:	223e      	movs	r2, #62	@ 0x3e
 800f372:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800f374:	4bad      	ldr	r3, [pc, #692]	@ (800f62c <tx_control+0x1784>)
 800f376:	4aab      	ldr	r2, [pc, #684]	@ (800f624 <tx_control+0x177c>)
 800f378:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800f37a:	4bad      	ldr	r3, [pc, #692]	@ (800f630 <tx_control+0x1788>)
 800f37c:	4aa9      	ldr	r2, [pc, #676]	@ (800f624 <tx_control+0x177c>)
 800f37e:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800f380:	4bac      	ldr	r3, [pc, #688]	@ (800f634 <tx_control+0x178c>)
 800f382:	4aad      	ldr	r2, [pc, #692]	@ (800f638 <tx_control+0x1790>)
 800f384:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f386:	4bad      	ldr	r3, [pc, #692]	@ (800f63c <tx_control+0x1794>)
 800f388:	2202      	movs	r2, #2
 800f38a:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800f38c:	4ba6      	ldr	r3, [pc, #664]	@ (800f628 <tx_control+0x1780>)
 800f38e:	2201      	movs	r2, #1
 800f390:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800f392:	4bab      	ldr	r3, [pc, #684]	@ (800f640 <tx_control+0x1798>)
 800f394:	2255      	movs	r2, #85	@ 0x55
 800f396:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800f398:	4baa      	ldr	r3, [pc, #680]	@ (800f644 <tx_control+0x179c>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f39e:	f000 fe02 	bl	800ffa6 <tx_control+0x20fe>
				goto rx_firmware01;
 800f3a2:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800f3a4:	4ba8      	ldr	r3, [pc, #672]	@ (800f648 <tx_control+0x17a0>)
 800f3a6:	785b      	ldrb	r3, [r3, #1]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d13c      	bne.n	800f426 <tx_control+0x157e>
rx_numBloqFirm:
 800f3ac:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800f3ae:	4ba5      	ldr	r3, [pc, #660]	@ (800f644 <tx_control+0x179c>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	2b49      	cmp	r3, #73	@ 0x49
 800f3b4:	d000      	beq.n	800f3b8 <tx_control+0x1510>
 800f3b6:	e18c      	b.n	800f6d2 <tx_control+0x182a>
				goto rx_numBloqFirm_01;
 800f3b8:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = (RxBuffer_Ble[2] << 8) | RxBuffer_Ble[3] ;
 800f3ba:	4b93      	ldr	r3, [pc, #588]	@ (800f608 <tx_control+0x1760>)
 800f3bc:	789b      	ldrb	r3, [r3, #2]
 800f3be:	b21b      	sxth	r3, r3
 800f3c0:	021b      	lsls	r3, r3, #8
 800f3c2:	b21a      	sxth	r2, r3
 800f3c4:	4b90      	ldr	r3, [pc, #576]	@ (800f608 <tx_control+0x1760>)
 800f3c6:	78db      	ldrb	r3, [r3, #3]
 800f3c8:	b21b      	sxth	r3, r3
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	b21b      	sxth	r3, r3
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	4b9e      	ldr	r3, [pc, #632]	@ (800f64c <tx_control+0x17a4>)
 800f3d2:	801a      	strh	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800f3d4:	4b9e      	ldr	r3, [pc, #632]	@ (800f650 <tx_control+0x17a8>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	801a      	strh	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800f3da:	4b9e      	ldr	r3, [pc, #632]	@ (800f654 <tx_control+0x17ac>)
 800f3dc:	22f1      	movs	r2, #241	@ 0xf1
 800f3de:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800f3e0:	4b9c      	ldr	r3, [pc, #624]	@ (800f654 <tx_control+0x17ac>)
 800f3e2:	2207      	movs	r2, #7
 800f3e4:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800f3e6:	4b98      	ldr	r3, [pc, #608]	@ (800f648 <tx_control+0x17a0>)
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800f3ec:	4b9a      	ldr	r3, [pc, #616]	@ (800f658 <tx_control+0x17b0>)
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800f3f2:	4b8e      	ldr	r3, [pc, #568]	@ (800f62c <tx_control+0x1784>)
 800f3f4:	4a97      	ldr	r2, [pc, #604]	@ (800f654 <tx_control+0x17ac>)
 800f3f6:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f3f8:	4b8d      	ldr	r3, [pc, #564]	@ (800f630 <tx_control+0x1788>)
 800f3fa:	4a96      	ldr	r2, [pc, #600]	@ (800f654 <tx_control+0x17ac>)
 800f3fc:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800f3fe:	4b8d      	ldr	r3, [pc, #564]	@ (800f634 <tx_control+0x178c>)
 800f400:	4a96      	ldr	r2, [pc, #600]	@ (800f65c <tx_control+0x17b4>)
 800f402:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f404:	4b8d      	ldr	r3, [pc, #564]	@ (800f63c <tx_control+0x1794>)
 800f406:	2202      	movs	r2, #2
 800f408:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f40a:	4b87      	ldr	r3, [pc, #540]	@ (800f628 <tx_control+0x1780>)
 800f40c:	2201      	movs	r2, #1
 800f40e:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f410:	4b8b      	ldr	r3, [pc, #556]	@ (800f640 <tx_control+0x1798>)
 800f412:	2255      	movs	r2, #85	@ 0x55
 800f414:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800f416:	4b8b      	ldr	r3, [pc, #556]	@ (800f644 <tx_control+0x179c>)
 800f418:	2200      	movs	r2, #0
 800f41a:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;
 800f41c:	4b90      	ldr	r3, [pc, #576]	@ (800f660 <tx_control+0x17b8>)
 800f41e:	2205      	movs	r2, #5
 800f420:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800f422:	f000 fdc0 	bl	800ffa6 <tx_control+0x20fe>
				goto rxBloqFirm;
 800f426:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800f428:	4b87      	ldr	r3, [pc, #540]	@ (800f648 <tx_control+0x17a0>)
 800f42a:	789b      	ldrb	r3, [r3, #2]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <tx_control+0x158c>
 800f430:	f000 fdb8 	bl	800ffa4 <tx_control+0x20fc>
				goto rxBloqFirm_01;
 800f434:	46c0      	nop			@ (mov r8, r8)
			GPIOR1[f_fan] = 0;
 800f436:	4b8b      	ldr	r3, [pc, #556]	@ (800f664 <tx_control+0x17bc>)
 800f438:	2200      	movs	r2, #0
 800f43a:	701a      	strb	r2, [r3, #0]
			GPIOR0[f_comp] = 0;  //Parche, desactivacion de relevadores
 800f43c:	4b8a      	ldr	r3, [pc, #552]	@ (800f668 <tx_control+0x17c0>)
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800f442:	4b81      	ldr	r3, [pc, #516]	@ (800f648 <tx_control+0x17a0>)
 800f444:	2200      	movs	r2, #0
 800f446:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800f448:	4b71      	ldr	r3, [pc, #452]	@ (800f610 <tx_control+0x1768>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800f44e:	4b87      	ldr	r3, [pc, #540]	@ (800f66c <tx_control+0x17c4>)
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]
			cksum_aux = 0;
 800f454:	4b86      	ldr	r3, [pc, #536]	@ (800f670 <tx_control+0x17c8>)
 800f456:	2200      	movs	r2, #0
 800f458:	601a      	str	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[wreg]); // call	build_chksum;	/ ve calculando el checksum
 800f45a:	4b84      	ldr	r3, [pc, #528]	@ (800f66c <tx_control+0x17c4>)
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	001a      	movs	r2, r3
 800f460:	4b69      	ldr	r3, [pc, #420]	@ (800f608 <tx_control+0x1760>)
 800f462:	5c9b      	ldrb	r3, [r3, r2]
 800f464:	0018      	movs	r0, r3
 800f466:	f7f7 ff7f 	bl	8007368 <build_chksum>
			wreg++;			// inc		wreg
 800f46a:	4b80      	ldr	r3, [pc, #512]	@ (800f66c <tx_control+0x17c4>)
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	3301      	adds	r3, #1
 800f470:	b2da      	uxtb	r2, r3
 800f472:	4b7e      	ldr	r3, [pc, #504]	@ (800f66c <tx_control+0x17c4>)
 800f474:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800f476:	4b7d      	ldr	r3, [pc, #500]	@ (800f66c <tx_control+0x17c4>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	b25b      	sxtb	r3, r3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	db00      	blt.n	800f482 <tx_control+0x15da>
				goto load_bloqFirm;
 800f480:	e7eb      	b.n	800f45a <tx_control+0x15b2>
			cksum_aux = (RxBuffer_Ble[128] << 24) | (RxBuffer_Ble[129] << 16) |(RxBuffer_Ble[130] << 8) | RxBuffer_Ble[131];
 800f482:	4b61      	ldr	r3, [pc, #388]	@ (800f608 <tx_control+0x1760>)
 800f484:	2280      	movs	r2, #128	@ 0x80
 800f486:	5c9b      	ldrb	r3, [r3, r2]
 800f488:	061a      	lsls	r2, r3, #24
 800f48a:	4b5f      	ldr	r3, [pc, #380]	@ (800f608 <tx_control+0x1760>)
 800f48c:	2181      	movs	r1, #129	@ 0x81
 800f48e:	5c5b      	ldrb	r3, [r3, r1]
 800f490:	041b      	lsls	r3, r3, #16
 800f492:	431a      	orrs	r2, r3
 800f494:	4b5c      	ldr	r3, [pc, #368]	@ (800f608 <tx_control+0x1760>)
 800f496:	2182      	movs	r1, #130	@ 0x82
 800f498:	5c5b      	ldrb	r3, [r3, r1]
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	4313      	orrs	r3, r2
 800f49e:	4a5a      	ldr	r2, [pc, #360]	@ (800f608 <tx_control+0x1760>)
 800f4a0:	2183      	movs	r1, #131	@ 0x83
 800f4a2:	5c52      	ldrb	r2, [r2, r1]
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	001a      	movs	r2, r3
 800f4a8:	4b71      	ldr	r3, [pc, #452]	@ (800f670 <tx_control+0x17c8>)
 800f4aa:	601a      	str	r2, [r3, #0]
			if(cksum_aux != chksum_32_HW_LW){
 800f4ac:	4b70      	ldr	r3, [pc, #448]	@ (800f670 <tx_control+0x17c8>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	4b57      	ldr	r3, [pc, #348]	@ (800f610 <tx_control+0x1768>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d13b      	bne.n	800f530 <tx_control+0x1688>
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800f4b8:	4b67      	ldr	r3, [pc, #412]	@ (800f658 <tx_control+0x17b0>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	4b54      	ldr	r3, [pc, #336]	@ (800f610 <tx_control+0x1768>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	18d2      	adds	r2, r2, r3
 800f4c2:	4b65      	ldr	r3, [pc, #404]	@ (800f658 <tx_control+0x17b0>)
 800f4c4:	601a      	str	r2, [r3, #0]
			if(contador_bloques_fw == 16)
 800f4c6:	4b6b      	ldr	r3, [pc, #428]	@ (800f674 <tx_control+0x17cc>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	2b10      	cmp	r3, #16
 800f4cc:	d107      	bne.n	800f4de <tx_control+0x1636>
				borra_pagina_logger(pagina_borrado);
 800f4ce:	4b6a      	ldr	r3, [pc, #424]	@ (800f678 <tx_control+0x17d0>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	f001 fec8 	bl	8011268 <borra_pagina_logger>
				contador_bloques_fw = 0;
 800f4d8:	4b66      	ldr	r3, [pc, #408]	@ (800f674 <tx_control+0x17cc>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
			contador_bloques_fw++;
 800f4de:	4b65      	ldr	r3, [pc, #404]	@ (800f674 <tx_control+0x17cc>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	b2da      	uxtb	r2, r3
 800f4e6:	4b63      	ldr	r3, [pc, #396]	@ (800f674 <tx_control+0x17cc>)
 800f4e8:	701a      	strb	r2, [r3, #0]
			graba_bloque_fw();
 800f4ea:	f001 feed 	bl	80112c8 <graba_bloque_fw>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800f4ee:	4b58      	ldr	r3, [pc, #352]	@ (800f650 <tx_control+0x17a8>)
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	4b56      	ldr	r3, [pc, #344]	@ (800f650 <tx_control+0x17a8>)
 800f4f8:	801a      	strh	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800f4fa:	4b55      	ldr	r3, [pc, #340]	@ (800f650 <tx_control+0x17a8>)
 800f4fc:	881a      	ldrh	r2, [r3, #0]
 800f4fe:	4b53      	ldr	r3, [pc, #332]	@ (800f64c <tx_control+0x17a4>)
 800f500:	881b      	ldrh	r3, [r3, #0]
 800f502:	429a      	cmp	r2, r3
 800f504:	d109      	bne.n	800f51a <tx_control+0x1672>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800f506:	4b50      	ldr	r3, [pc, #320]	@ (800f648 <tx_control+0x17a0>)
 800f508:	2201      	movs	r2, #1
 800f50a:	70da      	strb	r2, [r3, #3]
			direccion_fw = 0x8020000;
 800f50c:	4b5b      	ldr	r3, [pc, #364]	@ (800f67c <tx_control+0x17d4>)
 800f50e:	4a5c      	ldr	r2, [pc, #368]	@ (800f680 <tx_control+0x17d8>)
 800f510:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f512:	4b59      	ldr	r3, [pc, #356]	@ (800f678 <tx_control+0x17d0>)
 800f514:	2240      	movs	r2, #64	@ 0x40
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	e000      	b.n	800f51c <tx_control+0x1674>
				goto rxFirm_noComplete ;
 800f51a:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f51c:	4b4d      	ldr	r3, [pc, #308]	@ (800f654 <tx_control+0x17ac>)
 800f51e:	22f1      	movs	r2, #241	@ 0xf1
 800f520:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f522:	4b4c      	ldr	r3, [pc, #304]	@ (800f654 <tx_control+0x17ac>)
 800f524:	223d      	movs	r2, #61	@ 0x3d
 800f526:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f528:	4b4d      	ldr	r3, [pc, #308]	@ (800f660 <tx_control+0x17b8>)
 800f52a:	2205      	movs	r2, #5
 800f52c:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800f52e:	e017      	b.n	800f560 <tx_control+0x16b8>
				goto no_writeBloqFirm;
 800f530:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800f532:	4b48      	ldr	r3, [pc, #288]	@ (800f654 <tx_control+0x17ac>)
 800f534:	22f1      	movs	r2, #241	@ 0xf1
 800f536:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f538:	4b46      	ldr	r3, [pc, #280]	@ (800f654 <tx_control+0x17ac>)
 800f53a:	223e      	movs	r2, #62	@ 0x3e
 800f53c:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f53e:	2300      	movs	r3, #0
 800f540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f542:	e007      	b.n	800f554 <tx_control+0x16ac>
				flagsRxFirm[i]=0;
 800f544:	4a40      	ldr	r2, [pc, #256]	@ (800f648 <tx_control+0x17a0>)
 800f546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f548:	18d3      	adds	r3, r2, r3
 800f54a:	2200      	movs	r2, #0
 800f54c:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f550:	3301      	adds	r3, #1
 800f552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f556:	2b07      	cmp	r3, #7
 800f558:	ddf4      	ble.n	800f544 <tx_control+0x169c>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800f55a:	4b3a      	ldr	r3, [pc, #232]	@ (800f644 <tx_control+0x179c>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f560:	4b32      	ldr	r3, [pc, #200]	@ (800f62c <tx_control+0x1784>)
 800f562:	4a3c      	ldr	r2, [pc, #240]	@ (800f654 <tx_control+0x17ac>)
 800f564:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f566:	4b32      	ldr	r3, [pc, #200]	@ (800f630 <tx_control+0x1788>)
 800f568:	4a3a      	ldr	r2, [pc, #232]	@ (800f654 <tx_control+0x17ac>)
 800f56a:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f56c:	4b31      	ldr	r3, [pc, #196]	@ (800f634 <tx_control+0x178c>)
 800f56e:	4a3b      	ldr	r2, [pc, #236]	@ (800f65c <tx_control+0x17b4>)
 800f570:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800f572:	4b32      	ldr	r3, [pc, #200]	@ (800f63c <tx_control+0x1794>)
 800f574:	2202      	movs	r2, #2
 800f576:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800f578:	4b2b      	ldr	r3, [pc, #172]	@ (800f628 <tx_control+0x1780>)
 800f57a:	2201      	movs	r2, #1
 800f57c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f57e:	4b30      	ldr	r3, [pc, #192]	@ (800f640 <tx_control+0x1798>)
 800f580:	2255      	movs	r2, #85	@ 0x55
 800f582:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800f584:	4b2f      	ldr	r3, [pc, #188]	@ (800f644 <tx_control+0x179c>)
 800f586:	2200      	movs	r2, #0
 800f588:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;
 800f58a:	f000 fd0c 	bl	800ffa6 <tx_control+0x20fe>
			goto rxChkFirm;				// jp		rxChkFirm;
 800f58e:	46c0      	nop			@ (mov r8, r8)
			cksum_gral_aux = 0;
 800f590:	4b3c      	ldr	r3, [pc, #240]	@ (800f684 <tx_control+0x17dc>)
 800f592:	2200      	movs	r2, #0
 800f594:	601a      	str	r2, [r3, #0]
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800f596:	4b2c      	ldr	r3, [pc, #176]	@ (800f648 <tx_control+0x17a0>)
 800f598:	791b      	ldrb	r3, [r3, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d000      	beq.n	800f5a0 <tx_control+0x16f8>
 800f59e:	e09b      	b.n	800f6d8 <tx_control+0x1830>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800f5a0:	4b28      	ldr	r3, [pc, #160]	@ (800f644 <tx_control+0x179c>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	2b4a      	cmp	r3, #74	@ 0x4a
 800f5a6:	d000      	beq.n	800f5aa <tx_control+0x1702>
 800f5a8:	e099      	b.n	800f6de <tx_control+0x1836>
			cksum_gral_aux = (RxBuffer_Ble[2] << 24) | (RxBuffer_Ble[3] << 16) | (RxBuffer_Ble[4] << 8) | RxBuffer_Ble[5];
 800f5aa:	4b17      	ldr	r3, [pc, #92]	@ (800f608 <tx_control+0x1760>)
 800f5ac:	789b      	ldrb	r3, [r3, #2]
 800f5ae:	061a      	lsls	r2, r3, #24
 800f5b0:	4b15      	ldr	r3, [pc, #84]	@ (800f608 <tx_control+0x1760>)
 800f5b2:	78db      	ldrb	r3, [r3, #3]
 800f5b4:	041b      	lsls	r3, r3, #16
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	4b13      	ldr	r3, [pc, #76]	@ (800f608 <tx_control+0x1760>)
 800f5ba:	791b      	ldrb	r3, [r3, #4]
 800f5bc:	021b      	lsls	r3, r3, #8
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	4a11      	ldr	r2, [pc, #68]	@ (800f608 <tx_control+0x1760>)
 800f5c2:	7952      	ldrb	r2, [r2, #5]
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	001a      	movs	r2, r3
 800f5c8:	4b2e      	ldr	r3, [pc, #184]	@ (800f684 <tx_control+0x17dc>)
 800f5ca:	601a      	str	r2, [r3, #0]
			if(cksum_gral_aux != chksumFirm_HW_LW){
 800f5cc:	4b2d      	ldr	r3, [pc, #180]	@ (800f684 <tx_control+0x17dc>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	4b21      	ldr	r3, [pc, #132]	@ (800f658 <tx_control+0x17b0>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d10c      	bne.n	800f5f2 <tx_control+0x174a>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f5d8:	4b1e      	ldr	r3, [pc, #120]	@ (800f654 <tx_control+0x17ac>)
 800f5da:	22f1      	movs	r2, #241	@ 0xf1
 800f5dc:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;
 800f5de:	4b1d      	ldr	r3, [pc, #116]	@ (800f654 <tx_control+0x17ac>)
 800f5e0:	223d      	movs	r2, #61	@ 0x3d
 800f5e2:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800f5e4:	4b18      	ldr	r3, [pc, #96]	@ (800f648 <tx_control+0x17a0>)
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f5ea:	4b1d      	ldr	r3, [pc, #116]	@ (800f660 <tx_control+0x17b8>)
 800f5ec:	2205      	movs	r2, #5
 800f5ee:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800f5f0:	e058      	b.n	800f6a4 <tx_control+0x17fc>
				goto rxFirmErr;
 800f5f2:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f5f4:	4b17      	ldr	r3, [pc, #92]	@ (800f654 <tx_control+0x17ac>)
 800f5f6:	22f1      	movs	r2, #241	@ 0xf1
 800f5f8:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f5fa:	4b16      	ldr	r3, [pc, #88]	@ (800f654 <tx_control+0x17ac>)
 800f5fc:	223e      	movs	r2, #62	@ 0x3e
 800f5fe:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f600:	2300      	movs	r3, #0
 800f602:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f604:	e048      	b.n	800f698 <tx_control+0x17f0>
 800f606:	46c0      	nop			@ (mov r8, r8)
 800f608:	20000998 	.word	0x20000998
 800f60c:	20000c9c 	.word	0x20000c9c
 800f610:	20000ed0 	.word	0x20000ed0
 800f614:	20000e28 	.word	0x20000e28
 800f618:	20000e30 	.word	0x20000e30
 800f61c:	20000e2c 	.word	0x20000e2c
 800f620:	0803f000 	.word	0x0803f000
 800f624:	20000e7c 	.word	0x20000e7c
 800f628:	20000eb8 	.word	0x20000eb8
 800f62c:	20000eb0 	.word	0x20000eb0
 800f630:	20000ea8 	.word	0x20000ea8
 800f634:	20000eac 	.word	0x20000eac
 800f638:	20000e7d 	.word	0x20000e7d
 800f63c:	20000ecc 	.word	0x20000ecc
 800f640:	20000eb5 	.word	0x20000eb5
 800f644:	20000ec0 	.word	0x20000ec0
 800f648:	20000f78 	.word	0x20000f78
 800f64c:	20000f6c 	.word	0x20000f6c
 800f650:	20000f6e 	.word	0x20000f6e
 800f654:	20000e50 	.word	0x20000e50
 800f658:	20000f70 	.word	0x20000f70
 800f65c:	20000e51 	.word	0x20000e51
 800f660:	20000f82 	.word	0x20000f82
 800f664:	20000bf0 	.word	0x20000bf0
 800f668:	20000bb4 	.word	0x20000bb4
 800f66c:	20000b67 	.word	0x20000b67
 800f670:	20001214 	.word	0x20001214
 800f674:	20000278 	.word	0x20000278
 800f678:	20000270 	.word	0x20000270
 800f67c:	20000274 	.word	0x20000274
 800f680:	08020000 	.word	0x08020000
 800f684:	20001218 	.word	0x20001218
				flagsRxFirm[i]=0;
 800f688:	4add      	ldr	r2, [pc, #884]	@ (800fa00 <tx_control+0x1b58>)
 800f68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68c:	18d3      	adds	r3, r2, r3
 800f68e:	2200      	movs	r2, #0
 800f690:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f694:	3301      	adds	r3, #1
 800f696:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69a:	2b07      	cmp	r3, #7
 800f69c:	ddf4      	ble.n	800f688 <tx_control+0x17e0>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800f69e:	4bd9      	ldr	r3, [pc, #868]	@ (800fa04 <tx_control+0x1b5c>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f6a4:	4bd8      	ldr	r3, [pc, #864]	@ (800fa08 <tx_control+0x1b60>)
 800f6a6:	4ad9      	ldr	r2, [pc, #868]	@ (800fa0c <tx_control+0x1b64>)
 800f6a8:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f6aa:	4bd9      	ldr	r3, [pc, #868]	@ (800fa10 <tx_control+0x1b68>)
 800f6ac:	4ad7      	ldr	r2, [pc, #860]	@ (800fa0c <tx_control+0x1b64>)
 800f6ae:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f6b0:	4bd8      	ldr	r3, [pc, #864]	@ (800fa14 <tx_control+0x1b6c>)
 800f6b2:	4ad9      	ldr	r2, [pc, #868]	@ (800fa18 <tx_control+0x1b70>)
 800f6b4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800f6b6:	4bd9      	ldr	r3, [pc, #868]	@ (800fa1c <tx_control+0x1b74>)
 800f6b8:	2202      	movs	r2, #2
 800f6ba:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f6bc:	4bd8      	ldr	r3, [pc, #864]	@ (800fa20 <tx_control+0x1b78>)
 800f6be:	2201      	movs	r2, #1
 800f6c0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800f6c2:	4bd8      	ldr	r3, [pc, #864]	@ (800fa24 <tx_control+0x1b7c>)
 800f6c4:	2255      	movs	r2, #85	@ 0x55
 800f6c6:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800f6c8:	4bce      	ldr	r3, [pc, #824]	@ (800fa04 <tx_control+0x1b5c>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f6ce:	f000 fc6a 	bl	800ffa6 <tx_control+0x20fe>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800f6d2:	46c0      	nop			@ (mov r8, r8)
 800f6d4:	f000 fc67 	bl	800ffa6 <tx_control+0x20fe>
				goto end_rx_firmware;
 800f6d8:	46c0      	nop			@ (mov r8, r8)
 800f6da:	f000 fc64 	bl	800ffa6 <tx_control+0x20fe>
					goto end_rx_firmware;
 800f6de:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800f6e0:	f000 fc61 	bl	800ffa6 <tx_control+0x20fe>
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800f6e4:	4bd0      	ldr	r3, [pc, #832]	@ (800fa28 <tx_control+0x1b80>)
 800f6e6:	22aa      	movs	r2, #170	@ 0xaa
 800f6e8:	701a      	strb	r2, [r3, #0]
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800f6ea:	4bd0      	ldr	r3, [pc, #832]	@ (800fa2c <tx_control+0x1b84>)
 800f6ec:	4ad0      	ldr	r2, [pc, #832]	@ (800fa30 <tx_control+0x1b88>)
 800f6ee:	601a      	str	r2, [r3, #0]
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800f6f0:	4bd0      	ldr	r3, [pc, #832]	@ (800fa34 <tx_control+0x1b8c>)
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	01db      	lsls	r3, r3, #7
 800f6f6:	001a      	movs	r2, r3
 800f6f8:	4bcf      	ldr	r3, [pc, #828]	@ (800fa38 <tx_control+0x1b90>)
 800f6fa:	18d2      	adds	r2, r2, r3
 800f6fc:	4bcf      	ldr	r3, [pc, #828]	@ (800fa3c <tx_control+0x1b94>)
 800f6fe:	601a      	str	r2, [r3, #0]
			cntBloqFirm++; // inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800f700:	4bcc      	ldr	r3, [pc, #816]	@ (800fa34 <tx_control+0x1b8c>)
 800f702:	881b      	ldrh	r3, [r3, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	b29a      	uxth	r2, r3
 800f708:	4bca      	ldr	r3, [pc, #808]	@ (800fa34 <tx_control+0x1b8c>)
 800f70a:	801a      	strh	r2, [r3, #0]
			if(cntBloqFirm!= 0){ // jrne	tx_clean_logger_loop
 800f70c:	4bc9      	ldr	r3, [pc, #804]	@ (800fa34 <tx_control+0x1b8c>)
 800f70e:	881b      	ldrh	r3, [r3, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d000      	beq.n	800f716 <tx_control+0x186e>
				goto tx_clean_logger_loop;
 800f714:	e7e6      	b.n	800f6e4 <tx_control+0x183c>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800f716:	4bbd      	ldr	r3, [pc, #756]	@ (800fa0c <tx_control+0x1b64>)
 800f718:	22f1      	movs	r2, #241	@ 0xf1
 800f71a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f71c:	4bbb      	ldr	r3, [pc, #748]	@ (800fa0c <tx_control+0x1b64>)
 800f71e:	223d      	movs	r2, #61	@ 0x3d
 800f720:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800f722:	4bc7      	ldr	r3, [pc, #796]	@ (800fa40 <tx_control+0x1b98>)
 800f724:	2200      	movs	r2, #0
 800f726:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800f728:	4bc6      	ldr	r3, [pc, #792]	@ (800fa44 <tx_control+0x1b9c>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800f72e:	4bc6      	ldr	r3, [pc, #792]	@ (800fa48 <tx_control+0x1ba0>)
 800f730:	2200      	movs	r2, #0
 800f732:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800f734:	4bc5      	ldr	r3, [pc, #788]	@ (800fa4c <tx_control+0x1ba4>)
 800f736:	2200      	movs	r2, #0
 800f738:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800f73a:	4bc5      	ldr	r3, [pc, #788]	@ (800fa50 <tx_control+0x1ba8>)
 800f73c:	4abc      	ldr	r2, [pc, #752]	@ (800fa30 <tx_control+0x1b88>)
 800f73e:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800f740:	4bc4      	ldr	r3, [pc, #784]	@ (800fa54 <tx_control+0x1bac>)
 800f742:	4ac5      	ldr	r2, [pc, #788]	@ (800fa58 <tx_control+0x1bb0>)
 800f744:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800f746:	4bbf      	ldr	r3, [pc, #764]	@ (800fa44 <tx_control+0x1b9c>)
 800f748:	781a      	ldrb	r2, [r3, #0]
 800f74a:	4bc4      	ldr	r3, [pc, #784]	@ (800fa5c <tx_control+0x1bb4>)
 800f74c:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f74e:	f7f7 fcd1 	bl	80070f4 <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800f752:	4bbf      	ldr	r3, [pc, #764]	@ (800fa50 <tx_control+0x1ba8>)
 800f754:	4ac2      	ldr	r2, [pc, #776]	@ (800fa60 <tx_control+0x1bb8>)
 800f756:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800f758:	4bbe      	ldr	r3, [pc, #760]	@ (800fa54 <tx_control+0x1bac>)
 800f75a:	4ab7      	ldr	r2, [pc, #732]	@ (800fa38 <tx_control+0x1b90>)
 800f75c:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800f75e:	4bbb      	ldr	r3, [pc, #748]	@ (800fa4c <tx_control+0x1ba4>)
 800f760:	781a      	ldrb	r2, [r3, #0]
 800f762:	4bbe      	ldr	r3, [pc, #760]	@ (800fa5c <tx_control+0x1bb4>)
 800f764:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f766:	f7f7 fcc5 	bl	80070f4 <load_next_buffer>
			for(int i = 0; i<8; i++)
 800f76a:	2300      	movs	r3, #0
 800f76c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f76e:	e007      	b.n	800f780 <tx_control+0x18d8>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800f770:	4abc      	ldr	r2, [pc, #752]	@ (800fa64 <tx_control+0x1bbc>)
 800f772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f774:	18d3      	adds	r3, r2, r3
 800f776:	2200      	movs	r2, #0
 800f778:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800f77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f77c:	3301      	adds	r3, #1
 800f77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f782:	2b07      	cmp	r3, #7
 800f784:	ddf4      	ble.n	800f770 <tx_control+0x18c8>
			goto ok_clean_logger; //jp		ok_clean_logger
 800f786:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800f788:	4b9f      	ldr	r3, [pc, #636]	@ (800fa08 <tx_control+0x1b60>)
 800f78a:	4aa0      	ldr	r2, [pc, #640]	@ (800fa0c <tx_control+0x1b64>)
 800f78c:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800f78e:	4ba0      	ldr	r3, [pc, #640]	@ (800fa10 <tx_control+0x1b68>)
 800f790:	4a9e      	ldr	r2, [pc, #632]	@ (800fa0c <tx_control+0x1b64>)
 800f792:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f794:	4b9f      	ldr	r3, [pc, #636]	@ (800fa14 <tx_control+0x1b6c>)
 800f796:	4aa0      	ldr	r2, [pc, #640]	@ (800fa18 <tx_control+0x1b70>)
 800f798:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f79a:	4ba0      	ldr	r3, [pc, #640]	@ (800fa1c <tx_control+0x1b74>)
 800f79c:	2202      	movs	r2, #2
 800f79e:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f7a0:	4b9f      	ldr	r3, [pc, #636]	@ (800fa20 <tx_control+0x1b78>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f7a6:	4b9f      	ldr	r3, [pc, #636]	@ (800fa24 <tx_control+0x1b7c>)
 800f7a8:	2255      	movs	r2, #85	@ 0x55
 800f7aa:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800f7ac:	4b95      	ldr	r3, [pc, #596]	@ (800fa04 <tx_control+0x1b5c>)
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f7b2:	f000 fbf8 	bl	800ffa6 <tx_control+0x20fe>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800f7b6:	4bac      	ldr	r3, [pc, #688]	@ (800fa68 <tx_control+0x1bc0>)
 800f7b8:	789a      	ldrb	r2, [r3, #2]
 800f7ba:	4bac      	ldr	r3, [pc, #688]	@ (800fa6c <tx_control+0x1bc4>)
 800f7bc:	701a      	strb	r2, [r3, #0]
			waux = reeEstado1;
 800f7be:	4bac      	ldr	r3, [pc, #688]	@ (800fa70 <tx_control+0x1bc8>)
 800f7c0:	781a      	ldrb	r2, [r3, #0]
 800f7c2:	4bac      	ldr	r3, [pc, #688]	@ (800fa74 <tx_control+0x1bcc>)
 800f7c4:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800f7c6:	4ba9      	ldr	r3, [pc, #676]	@ (800fa6c <tx_control+0x1bc4>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	001a      	movs	r2, r3
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	4013      	ands	r3, r2
 800f7d0:	d00d      	beq.n	800f7ee <tx_control+0x1946>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800f7d2:	4ba8      	ldr	r3, [pc, #672]	@ (800fa74 <tx_control+0x1bcc>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	4053      	eors	r3, r2
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	4ba5      	ldr	r3, [pc, #660]	@ (800fa74 <tx_control+0x1bcc>)
 800f7de:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f7e0:	4ba5      	ldr	r3, [pc, #660]	@ (800fa78 <tx_control+0x1bd0>)
 800f7e2:	22fa      	movs	r2, #250	@ 0xfa
 800f7e4:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800f7e6:	4ba5      	ldr	r3, [pc, #660]	@ (800fa7c <tx_control+0x1bd4>)
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	701a      	strb	r2, [r3, #0]
 800f7ec:	e000      	b.n	800f7f0 <tx_control+0x1948>
				goto chk_est1_b1;
 800f7ee:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800f7f0:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800f7f2:	4b9e      	ldr	r3, [pc, #632]	@ (800fa6c <tx_control+0x1bc4>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	001a      	movs	r2, r3
 800f7f8:	2304      	movs	r3, #4
 800f7fa:	4013      	ands	r3, r2
 800f7fc:	d027      	beq.n	800f84e <tx_control+0x19a6>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800f7fe:	4ba0      	ldr	r3, [pc, #640]	@ (800fa80 <tx_control+0x1bd8>)
 800f800:	799b      	ldrb	r3, [r3, #6]
 800f802:	2201      	movs	r2, #1
 800f804:	4053      	eors	r3, r2
 800f806:	b2db      	uxtb	r3, r3
 800f808:	1e5a      	subs	r2, r3, #1
 800f80a:	4193      	sbcs	r3, r2
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	4b9c      	ldr	r3, [pc, #624]	@ (800fa80 <tx_control+0x1bd8>)
 800f810:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800f812:	4b98      	ldr	r3, [pc, #608]	@ (800fa74 <tx_control+0x1bcc>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	2204      	movs	r2, #4
 800f818:	4393      	bics	r3, r2
 800f81a:	b2da      	uxtb	r2, r3
 800f81c:	4b95      	ldr	r3, [pc, #596]	@ (800fa74 <tx_control+0x1bcc>)
 800f81e:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800f820:	4b97      	ldr	r3, [pc, #604]	@ (800fa80 <tx_control+0x1bd8>)
 800f822:	799b      	ldrb	r3, [r3, #6]
 800f824:	2201      	movs	r2, #1
 800f826:	4053      	eors	r3, r2
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d107      	bne.n	800f83e <tx_control+0x1996>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800f82e:	4b91      	ldr	r3, [pc, #580]	@ (800fa74 <tx_control+0x1bcc>)
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	2204      	movs	r2, #4
 800f834:	4313      	orrs	r3, r2
 800f836:	b2da      	uxtb	r2, r3
 800f838:	4b8e      	ldr	r3, [pc, #568]	@ (800fa74 <tx_control+0x1bcc>)
 800f83a:	701a      	strb	r2, [r3, #0]
 800f83c:	e000      	b.n	800f840 <tx_control+0x1998>
				goto chk_est1_b2_01;
 800f83e:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800f840:	4b8d      	ldr	r3, [pc, #564]	@ (800fa78 <tx_control+0x1bd0>)
 800f842:	22fa      	movs	r2, #250	@ 0xfa
 800f844:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800f846:	4b8d      	ldr	r3, [pc, #564]	@ (800fa7c <tx_control+0x1bd4>)
 800f848:	2202      	movs	r2, #2
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	e000      	b.n	800f850 <tx_control+0x19a8>
				goto chk_est1_b3;
 800f84e:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800f850:	4b86      	ldr	r3, [pc, #536]	@ (800fa6c <tx_control+0x1bc4>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	001a      	movs	r2, r3
 800f856:	2308      	movs	r3, #8
 800f858:	4013      	ands	r3, r2
 800f85a:	d019      	beq.n	800f890 <tx_control+0x19e8>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800f85c:	4b88      	ldr	r3, [pc, #544]	@ (800fa80 <tx_control+0x1bd8>)
 800f85e:	789b      	ldrb	r3, [r3, #2]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d106      	bne.n	800f872 <tx_control+0x19ca>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800f864:	4b87      	ldr	r3, [pc, #540]	@ (800fa84 <tx_control+0x1bdc>)
 800f866:	2200      	movs	r2, #0
 800f868:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800f86a:	4b87      	ldr	r3, [pc, #540]	@ (800fa88 <tx_control+0x1be0>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800f870:	e00f      	b.n	800f892 <tx_control+0x19ea>
				goto chk_est1_b3_01;
 800f872:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800f874:	4b85      	ldr	r3, [pc, #532]	@ (800fa8c <tx_control+0x1be4>)
 800f876:	22f0      	movs	r2, #240	@ 0xf0
 800f878:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800f87a:	4b81      	ldr	r3, [pc, #516]	@ (800fa80 <tx_control+0x1bd8>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800f880:	4b7f      	ldr	r3, [pc, #508]	@ (800fa80 <tx_control+0x1bd8>)
 800f882:	2200      	movs	r2, #0
 800f884:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800f886:	f7f7 fbeb 	bl	8007060 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800f88a:	f7f7 fc05 	bl	8007098 <load_tiempoAhorro2>
 800f88e:	e000      	b.n	800f892 <tx_control+0x19ea>
				goto chk_est1_b4;
 800f890:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800f892:	4b76      	ldr	r3, [pc, #472]	@ (800fa6c <tx_control+0x1bc4>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	001a      	movs	r2, r3
 800f898:	2310      	movs	r3, #16
 800f89a:	4013      	ands	r3, r2
 800f89c:	d003      	beq.n	800f8a6 <tx_control+0x19fe>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800f89e:	4b7c      	ldr	r3, [pc, #496]	@ (800fa90 <tx_control+0x1be8>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	711a      	strb	r2, [r3, #4]
 800f8a4:	e000      	b.n	800f8a8 <tx_control+0x1a00>
				goto chk_est1_b5;
 800f8a6:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800f8a8:	4b70      	ldr	r3, [pc, #448]	@ (800fa6c <tx_control+0x1bc4>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	001a      	movs	r2, r3
 800f8ae:	2320      	movs	r3, #32
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	d002      	beq.n	800f8ba <tx_control+0x1a12>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800f8b4:	f7f7 fd0a 	bl	80072cc <ld_alarmDelay>
 800f8b8:	e000      	b.n	800f8bc <tx_control+0x1a14>
				goto chk_est1_b6;
 800f8ba:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState(Plantilla[logicos2],funReleDesh)){
 800f8bc:	4b75      	ldr	r3, [pc, #468]	@ (800fa94 <tx_control+0x1bec>)
 800f8be:	225b      	movs	r2, #91	@ 0x5b
 800f8c0:	5c9b      	ldrb	r3, [r3, r2]
 800f8c2:	001a      	movs	r2, r3
 800f8c4:	2308      	movs	r3, #8
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	d113      	bne.n	800f8f2 <tx_control+0x1a4a>
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800f8ca:	4b68      	ldr	r3, [pc, #416]	@ (800fa6c <tx_control+0x1bc4>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	001a      	movs	r2, r3
 800f8d0:	2340      	movs	r3, #64	@ 0x40
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	d00f      	beq.n	800f8f6 <tx_control+0x1a4e>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800f8d6:	4b67      	ldr	r3, [pc, #412]	@ (800fa74 <tx_control+0x1bcc>)
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	2240      	movs	r2, #64	@ 0x40
 800f8dc:	4053      	eors	r3, r2
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	4b64      	ldr	r3, [pc, #400]	@ (800fa74 <tx_control+0x1bcc>)
 800f8e2:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f8e4:	4b64      	ldr	r3, [pc, #400]	@ (800fa78 <tx_control+0x1bd0>)
 800f8e6:	22fa      	movs	r2, #250	@ 0xfa
 800f8e8:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800f8ea:	4b64      	ldr	r3, [pc, #400]	@ (800fa7c <tx_control+0x1bd4>)
 800f8ec:	2203      	movs	r2, #3
 800f8ee:	701a      	strb	r2, [r3, #0]
 800f8f0:	e002      	b.n	800f8f8 <tx_control+0x1a50>
				goto deshTypeAct_05;
 800f8f2:	46c0      	nop			@ (mov r8, r8)
 800f8f4:	e000      	b.n	800f8f8 <tx_control+0x1a50>
				goto chk_est1_b7;
 800f8f6:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800f8f8:	4b5e      	ldr	r3, [pc, #376]	@ (800fa74 <tx_control+0x1bcc>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	001a      	movs	r2, r3
 800f8fe:	4b66      	ldr	r3, [pc, #408]	@ (800fa98 <tx_control+0x1bf0>)
 800f900:	0019      	movs	r1, r3
 800f902:	0010      	movs	r0, r2
 800f904:	f7f7 fe64 	bl	80075d0 <wreeprom>
			reeEstado1 = waux;
 800f908:	4b5a      	ldr	r3, [pc, #360]	@ (800fa74 <tx_control+0x1bcc>)
 800f90a:	781a      	ldrb	r2, [r3, #0]
 800f90c:	4b58      	ldr	r3, [pc, #352]	@ (800fa70 <tx_control+0x1bc8>)
 800f90e:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg ); 			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f910:	4b62      	ldr	r3, [pc, #392]	@ (800fa9c <tx_control+0x1bf4>)
 800f912:	0018      	movs	r0, r3
 800f914:	f007 f81a 	bl	801694c <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f918:	4b3c      	ldr	r3, [pc, #240]	@ (800fa0c <tx_control+0x1b64>)
 800f91a:	22f1      	movs	r2, #241	@ 0xf1
 800f91c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f91e:	4b3b      	ldr	r3, [pc, #236]	@ (800fa0c <tx_control+0x1b64>)
 800f920:	223d      	movs	r2, #61	@ 0x3d
 800f922:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800f924:	e005      	b.n	800f932 <tx_control+0x1a8a>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f926:	4b39      	ldr	r3, [pc, #228]	@ (800fa0c <tx_control+0x1b64>)
 800f928:	22f1      	movs	r2, #241	@ 0xf1
 800f92a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f92c:	4b37      	ldr	r3, [pc, #220]	@ (800fa0c <tx_control+0x1b64>)
 800f92e:	223d      	movs	r2, #61	@ 0x3d
 800f930:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f932:	4b35      	ldr	r3, [pc, #212]	@ (800fa08 <tx_control+0x1b60>)
 800f934:	4a35      	ldr	r2, [pc, #212]	@ (800fa0c <tx_control+0x1b64>)
 800f936:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f938:	4b35      	ldr	r3, [pc, #212]	@ (800fa10 <tx_control+0x1b68>)
 800f93a:	4a34      	ldr	r2, [pc, #208]	@ (800fa0c <tx_control+0x1b64>)
 800f93c:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f93e:	4b35      	ldr	r3, [pc, #212]	@ (800fa14 <tx_control+0x1b6c>)
 800f940:	4a35      	ldr	r2, [pc, #212]	@ (800fa18 <tx_control+0x1b70>)
 800f942:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f944:	4b35      	ldr	r3, [pc, #212]	@ (800fa1c <tx_control+0x1b74>)
 800f946:	2202      	movs	r2, #2
 800f948:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f94a:	4b35      	ldr	r3, [pc, #212]	@ (800fa20 <tx_control+0x1b78>)
 800f94c:	2201      	movs	r2, #1
 800f94e:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f950:	4b34      	ldr	r3, [pc, #208]	@ (800fa24 <tx_control+0x1b7c>)
 800f952:	2255      	movs	r2, #85	@ 0x55
 800f954:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800f956:	4b2b      	ldr	r3, [pc, #172]	@ (800fa04 <tx_control+0x1b5c>)
 800f958:	2200      	movs	r2, #0
 800f95a:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800f95c:	e323      	b.n	800ffa6 <tx_control+0x20fe>
			estado1[k] = ((estado1_Aux>>k) & 0x1);
 800f95e:	1dfb      	adds	r3, r7, #7
 800f960:	781a      	ldrb	r2, [r3, #0]
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	411a      	asrs	r2, r3
 800f966:	0013      	movs	r3, r2
 800f968:	2201      	movs	r2, #1
 800f96a:	4013      	ands	r3, r2
 800f96c:	1e5a      	subs	r2, r3, #1
 800f96e:	4193      	sbcs	r3, r2
 800f970:	b2d9      	uxtb	r1, r3
 800f972:	4a47      	ldr	r2, [pc, #284]	@ (800fa90 <tx_control+0x1be8>)
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	18d3      	adds	r3, r2, r3
 800f978:	1c0a      	adds	r2, r1, #0
 800f97a:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800f97c:	6a3b      	ldr	r3, [r7, #32]
 800f97e:	3301      	adds	r3, #1
 800f980:	623b      	str	r3, [r7, #32]
 800f982:	6a3b      	ldr	r3, [r7, #32]
 800f984:	2b07      	cmp	r3, #7
 800f986:	ddea      	ble.n	800f95e <tx_control+0x1ab6>
estado1_b1:
 800f988:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800f98a:	4b41      	ldr	r3, [pc, #260]	@ (800fa90 <tx_control+0x1be8>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800f990:	4b43      	ldr	r3, [pc, #268]	@ (800faa0 <tx_control+0x1bf8>)
 800f992:	78db      	ldrb	r3, [r3, #3]
 800f994:	2201      	movs	r2, #1
 800f996:	4053      	eors	r3, r2
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d103      	bne.n	800f9a6 <tx_control+0x1afe>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800f99e:	4b3c      	ldr	r3, [pc, #240]	@ (800fa90 <tx_control+0x1be8>)
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	705a      	strb	r2, [r3, #1]
 800f9a4:	e000      	b.n	800f9a8 <tx_control+0x1b00>
			goto estado1_b2;
 800f9a6:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800f9a8:	4b39      	ldr	r3, [pc, #228]	@ (800fa90 <tx_control+0x1be8>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800f9ae:	4b3d      	ldr	r3, [pc, #244]	@ (800faa4 <tx_control+0x1bfc>)
 800f9b0:	789b      	ldrb	r3, [r3, #2]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	4053      	eors	r3, r2
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d103      	bne.n	800f9c4 <tx_control+0x1b1c>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800f9bc:	4b34      	ldr	r3, [pc, #208]	@ (800fa90 <tx_control+0x1be8>)
 800f9be:	2201      	movs	r2, #1
 800f9c0:	709a      	strb	r2, [r3, #2]
 800f9c2:	e000      	b.n	800f9c6 <tx_control+0x1b1e>
			goto estado1_b3;
 800f9c4:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800f9c6:	4b32      	ldr	r3, [pc, #200]	@ (800fa90 <tx_control+0x1be8>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800f9cc:	4b2c      	ldr	r3, [pc, #176]	@ (800fa80 <tx_control+0x1bd8>)
 800f9ce:	789b      	ldrb	r3, [r3, #2]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	4053      	eors	r3, r2
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d103      	bne.n	800f9e2 <tx_control+0x1b3a>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800f9da:	4b2d      	ldr	r3, [pc, #180]	@ (800fa90 <tx_control+0x1be8>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	70da      	strb	r2, [r3, #3]
 800f9e0:	e000      	b.n	800f9e4 <tx_control+0x1b3c>
			goto estado1_b4;
 800f9e2:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800f9e4:	4b2a      	ldr	r3, [pc, #168]	@ (800fa90 <tx_control+0x1be8>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800f9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800faa8 <tx_control+0x1c00>)
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4053      	eors	r3, r2
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d159      	bne.n	800faac <tx_control+0x1c04>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800f9f8:	4b25      	ldr	r3, [pc, #148]	@ (800fa90 <tx_control+0x1be8>)
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	715a      	strb	r2, [r3, #5]
 800f9fe:	e056      	b.n	800faae <tx_control+0x1c06>
 800fa00:	20000f78 	.word	0x20000f78
 800fa04:	20000ec0 	.word	0x20000ec0
 800fa08:	20000eb0 	.word	0x20000eb0
 800fa0c:	20000e50 	.word	0x20000e50
 800fa10:	20000ea8 	.word	0x20000ea8
 800fa14:	20000eac 	.word	0x20000eac
 800fa18:	20000e51 	.word	0x20000e51
 800fa1c:	20000ecc 	.word	0x20000ecc
 800fa20:	20000eb8 	.word	0x20000eb8
 800fa24:	20000eb5 	.word	0x20000eb5
 800fa28:	20000e28 	.word	0x20000e28
 800fa2c:	20000e30 	.word	0x20000e30
 800fa30:	20000d28 	.word	0x20000d28
 800fa34:	20000f6e 	.word	0x20000f6e
 800fa38:	08037000 	.word	0x08037000
 800fa3c:	20000e2c 	.word	0x20000e2c
 800fa40:	20000e48 	.word	0x20000e48
 800fa44:	20000e49 	.word	0x20000e49
 800fa48:	20000e4a 	.word	0x20000e4a
 800fa4c:	20000e4b 	.word	0x20000e4b
 800fa50:	20000e40 	.word	0x20000e40
 800fa54:	20000e3c 	.word	0x20000e3c
 800fa58:	0803c000 	.word	0x0803c000
 800fa5c:	20000e36 	.word	0x20000e36
 800fa60:	20000da8 	.word	0x20000da8
 800fa64:	20000f64 	.word	0x20000f64
 800fa68:	20000998 	.word	0x20000998
 800fa6c:	20000b67 	.word	0x20000b67
 800fa70:	200001ba 	.word	0x200001ba
 800fa74:	20000b66 	.word	0x20000b66
 800fa78:	20001100 	.word	0x20001100
 800fa7c:	20001101 	.word	0x20001101
 800fa80:	20000c4c 	.word	0x20000c4c
 800fa84:	20000c40 	.word	0x20000c40
 800fa88:	20000c42 	.word	0x20000c42
 800fa8c:	20000bd2 	.word	0x20000bd2
 800fa90:	200010e0 	.word	0x200010e0
 800fa94:	200000b8 	.word	0x200000b8
 800fa98:	0803f803 	.word	0x0803f803
 800fa9c:	20000560 	.word	0x20000560
 800faa0:	20000b88 	.word	0x20000b88
 800faa4:	20000bb4 	.word	0x20000bb4
 800faa8:	20001034 	.word	0x20001034
			goto estado1_b6;
 800faac:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800faae:	4bc6      	ldr	r3, [pc, #792]	@ (800fdc8 <tx_control+0x1f20>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800fab4:	4bc5      	ldr	r3, [pc, #788]	@ (800fdcc <tx_control+0x1f24>)
 800fab6:	785b      	ldrb	r3, [r3, #1]
 800fab8:	2201      	movs	r2, #1
 800faba:	4053      	eors	r3, r2
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d103      	bne.n	800faca <tx_control+0x1c22>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800fac2:	4bc1      	ldr	r3, [pc, #772]	@ (800fdc8 <tx_control+0x1f20>)
 800fac4:	2201      	movs	r2, #1
 800fac6:	719a      	strb	r2, [r3, #6]
 800fac8:	e000      	b.n	800facc <tx_control+0x1c24>
			goto estado1_b7;
 800faca:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800facc:	4bc0      	ldr	r3, [pc, #768]	@ (800fdd0 <tx_control+0x1f28>)
 800face:	2204      	movs	r2, #4
 800fad0:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800fad2:	4bc0      	ldr	r3, [pc, #768]	@ (800fdd4 <tx_control+0x1f2c>)
 800fad4:	227b      	movs	r2, #123	@ 0x7b
 800fad6:	5c9a      	ldrb	r2, [r3, r2]
 800fad8:	4bbf      	ldr	r3, [pc, #764]	@ (800fdd8 <tx_control+0x1f30>)
 800fada:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800fadc:	4bbd      	ldr	r3, [pc, #756]	@ (800fdd4 <tx_control+0x1f2c>)
 800fade:	227c      	movs	r2, #124	@ 0x7c
 800fae0:	5c9a      	ldrb	r2, [r3, r2]
 800fae2:	4bbd      	ldr	r3, [pc, #756]	@ (800fdd8 <tx_control+0x1f30>)
 800fae4:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800fae6:	4bbc      	ldr	r3, [pc, #752]	@ (800fdd8 <tx_control+0x1f30>)
 800fae8:	2200      	movs	r2, #0
 800faea:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800faec:	4bba      	ldr	r3, [pc, #744]	@ (800fdd8 <tx_control+0x1f30>)
 800faee:	2200      	movs	r2, #0
 800faf0:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800faf2:	4bb9      	ldr	r3, [pc, #740]	@ (800fdd8 <tx_control+0x1f30>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800faf8:	4bb7      	ldr	r3, [pc, #732]	@ (800fdd8 <tx_control+0x1f30>)
 800fafa:	2201      	movs	r2, #1
 800fafc:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800fafe:	4bb6      	ldr	r3, [pc, #728]	@ (800fdd8 <tx_control+0x1f30>)
 800fb00:	2205      	movs	r2, #5
 800fb02:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800fb04:	4bb2      	ldr	r3, [pc, #712]	@ (800fdd0 <tx_control+0x1f28>)
 800fb06:	781a      	ldrb	r2, [r3, #0]
 800fb08:	4bb3      	ldr	r3, [pc, #716]	@ (800fdd8 <tx_control+0x1f30>)
 800fb0a:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800fb0c:	4bb3      	ldr	r3, [pc, #716]	@ (800fddc <tx_control+0x1f34>)
 800fb0e:	2201      	movs	r2, #1
 800fb10:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800fb12:	4bb3      	ldr	r3, [pc, #716]	@ (800fde0 <tx_control+0x1f38>)
 800fb14:	2208      	movs	r2, #8
 800fb16:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800fb18:	4ab2      	ldr	r2, [pc, #712]	@ (800fde4 <tx_control+0x1f3c>)
 800fb1a:	4baf      	ldr	r3, [pc, #700]	@ (800fdd8 <tx_control+0x1f30>)
 800fb1c:	0011      	movs	r1, r2
 800fb1e:	0018      	movs	r0, r3
 800fb20:	f7f7 fbfe 	bl	8007320 <copyVector>
		bufferTxControl[8] = 0;
 800fb24:	4baf      	ldr	r3, [pc, #700]	@ (800fde4 <tx_control+0x1f3c>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800fb2a:	4bae      	ldr	r3, [pc, #696]	@ (800fde4 <tx_control+0x1f3c>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800fb30:	4bac      	ldr	r3, [pc, #688]	@ (800fde4 <tx_control+0x1f3c>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800fb36:	4bab      	ldr	r3, [pc, #684]	@ (800fde4 <tx_control+0x1f3c>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	61fb      	str	r3, [r7, #28]
 800fb40:	e03e      	b.n	800fbc0 <tx_control+0x1d18>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800fb42:	4ba8      	ldr	r3, [pc, #672]	@ (800fde4 <tx_control+0x1f3c>)
 800fb44:	7a1a      	ldrb	r2, [r3, #8]
 800fb46:	49a0      	ldr	r1, [pc, #640]	@ (800fdc8 <tx_control+0x1f20>)
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	18cb      	adds	r3, r1, r3
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	0019      	movs	r1, r3
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	4099      	lsls	r1, r3
 800fb54:	000b      	movs	r3, r1
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	4ba1      	ldr	r3, [pc, #644]	@ (800fde4 <tx_control+0x1f3c>)
 800fb5e:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800fb60:	4ba0      	ldr	r3, [pc, #640]	@ (800fde4 <tx_control+0x1f3c>)
 800fb62:	7a5a      	ldrb	r2, [r3, #9]
 800fb64:	49a0      	ldr	r1, [pc, #640]	@ (800fde8 <tx_control+0x1f40>)
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	18cb      	adds	r3, r1, r3
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	0019      	movs	r1, r3
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	4099      	lsls	r1, r3
 800fb72:	000b      	movs	r3, r1
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	4313      	orrs	r3, r2
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b9a      	ldr	r3, [pc, #616]	@ (800fde4 <tx_control+0x1f3c>)
 800fb7c:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800fb7e:	4b99      	ldr	r3, [pc, #612]	@ (800fde4 <tx_control+0x1f3c>)
 800fb80:	7a9a      	ldrb	r2, [r3, #10]
 800fb82:	499a      	ldr	r1, [pc, #616]	@ (800fdec <tx_control+0x1f44>)
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	18cb      	adds	r3, r1, r3
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	0019      	movs	r1, r3
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	4099      	lsls	r1, r3
 800fb90:	000b      	movs	r3, r1
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	4313      	orrs	r3, r2
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	4b92      	ldr	r3, [pc, #584]	@ (800fde4 <tx_control+0x1f3c>)
 800fb9a:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800fb9c:	4b91      	ldr	r3, [pc, #580]	@ (800fde4 <tx_control+0x1f3c>)
 800fb9e:	7ada      	ldrb	r2, [r3, #11]
 800fba0:	4993      	ldr	r1, [pc, #588]	@ (800fdf0 <tx_control+0x1f48>)
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	18cb      	adds	r3, r1, r3
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	0019      	movs	r1, r3
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	4099      	lsls	r1, r3
 800fbae:	000b      	movs	r3, r1
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	b2da      	uxtb	r2, r3
 800fbb6:	4b8b      	ldr	r3, [pc, #556]	@ (800fde4 <tx_control+0x1f3c>)
 800fbb8:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	61fb      	str	r3, [r7, #28]
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	2b07      	cmp	r3, #7
 800fbc4:	ddbd      	ble.n	800fb42 <tx_control+0x1c9a>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fbc6:	4b8b      	ldr	r3, [pc, #556]	@ (800fdf4 <tx_control+0x1f4c>)
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800fbcc:	4b84      	ldr	r3, [pc, #528]	@ (800fde0 <tx_control+0x1f38>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800fbd2:	4b89      	ldr	r3, [pc, #548]	@ (800fdf8 <tx_control+0x1f50>)
 800fbd4:	220c      	movs	r2, #12
 800fbd6:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800fbd8:	4b87      	ldr	r3, [pc, #540]	@ (800fdf8 <tx_control+0x1f50>)
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	001a      	movs	r2, r3
 800fbde:	4b81      	ldr	r3, [pc, #516]	@ (800fde4 <tx_control+0x1f3c>)
 800fbe0:	0011      	movs	r1, r2
 800fbe2:	0018      	movs	r0, r3
 800fbe4:	f7f7 fb4e 	bl	8007284 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800fbe8:	4b82      	ldr	r3, [pc, #520]	@ (800fdf4 <tx_control+0x1f4c>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	0e1b      	lsrs	r3, r3, #24
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	4b7c      	ldr	r3, [pc, #496]	@ (800fde4 <tx_control+0x1f3c>)
 800fbf2:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800fbf4:	4b7f      	ldr	r3, [pc, #508]	@ (800fdf4 <tx_control+0x1f4c>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	0c1b      	lsrs	r3, r3, #16
 800fbfa:	b2da      	uxtb	r2, r3
 800fbfc:	4b79      	ldr	r3, [pc, #484]	@ (800fde4 <tx_control+0x1f3c>)
 800fbfe:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800fc00:	4b7c      	ldr	r3, [pc, #496]	@ (800fdf4 <tx_control+0x1f4c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	0a1b      	lsrs	r3, r3, #8
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	4b76      	ldr	r3, [pc, #472]	@ (800fde4 <tx_control+0x1f3c>)
 800fc0a:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800fc0c:	4b79      	ldr	r3, [pc, #484]	@ (800fdf4 <tx_control+0x1f4c>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	4b74      	ldr	r3, [pc, #464]	@ (800fde4 <tx_control+0x1f3c>)
 800fc14:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800fc16:	4b79      	ldr	r3, [pc, #484]	@ (800fdfc <tx_control+0x1f54>)
 800fc18:	4a72      	ldr	r2, [pc, #456]	@ (800fde4 <tx_control+0x1f3c>)
 800fc1a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800fc1c:	4b78      	ldr	r3, [pc, #480]	@ (800fe00 <tx_control+0x1f58>)
 800fc1e:	4a71      	ldr	r2, [pc, #452]	@ (800fde4 <tx_control+0x1f3c>)
 800fc20:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800fc22:	4b78      	ldr	r3, [pc, #480]	@ (800fe04 <tx_control+0x1f5c>)
 800fc24:	4a78      	ldr	r2, [pc, #480]	@ (800fe08 <tx_control+0x1f60>)
 800fc26:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800fc28:	4b69      	ldr	r3, [pc, #420]	@ (800fdd0 <tx_control+0x1f28>)
 800fc2a:	2210      	movs	r2, #16
 800fc2c:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fc2e:	4b6b      	ldr	r3, [pc, #428]	@ (800fddc <tx_control+0x1f34>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800fc34:	4b69      	ldr	r3, [pc, #420]	@ (800fddc <tx_control+0x1f34>)
 800fc36:	2201      	movs	r2, #1
 800fc38:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fc3a:	4b74      	ldr	r3, [pc, #464]	@ (800fe0c <tx_control+0x1f64>)
 800fc3c:	2255      	movs	r2, #85	@ 0x55
 800fc3e:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800fc40:	4b73      	ldr	r3, [pc, #460]	@ (800fe10 <tx_control+0x1f68>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800fc46:	e1ae      	b.n	800ffa6 <tx_control+0x20fe>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fc48:	4b72      	ldr	r3, [pc, #456]	@ (800fe14 <tx_control+0x1f6c>)
 800fc4a:	22f1      	movs	r2, #241	@ 0xf1
 800fc4c:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fc4e:	4b71      	ldr	r3, [pc, #452]	@ (800fe14 <tx_control+0x1f6c>)
 800fc50:	223d      	movs	r2, #61	@ 0x3d
 800fc52:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800fc54:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800fc56:	4b69      	ldr	r3, [pc, #420]	@ (800fdfc <tx_control+0x1f54>)
 800fc58:	4a6e      	ldr	r2, [pc, #440]	@ (800fe14 <tx_control+0x1f6c>)
 800fc5a:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800fc5c:	4b68      	ldr	r3, [pc, #416]	@ (800fe00 <tx_control+0x1f58>)
 800fc5e:	4a6d      	ldr	r2, [pc, #436]	@ (800fe14 <tx_control+0x1f6c>)
 800fc60:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800fc62:	4b68      	ldr	r3, [pc, #416]	@ (800fe04 <tx_control+0x1f5c>)
 800fc64:	4a6c      	ldr	r2, [pc, #432]	@ (800fe18 <tx_control+0x1f70>)
 800fc66:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800fc68:	4b59      	ldr	r3, [pc, #356]	@ (800fdd0 <tx_control+0x1f28>)
 800fc6a:	2202      	movs	r2, #2
 800fc6c:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800fc6e:	4b5b      	ldr	r3, [pc, #364]	@ (800fddc <tx_control+0x1f34>)
 800fc70:	2201      	movs	r2, #1
 800fc72:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fc74:	4b65      	ldr	r3, [pc, #404]	@ (800fe0c <tx_control+0x1f64>)
 800fc76:	2255      	movs	r2, #85	@ 0x55
 800fc78:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800fc7a:	4b65      	ldr	r3, [pc, #404]	@ (800fe10 <tx_control+0x1f68>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800fc80:	e191      	b.n	800ffa6 <tx_control+0x20fe>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800fc82:	4b66      	ldr	r3, [pc, #408]	@ (800fe1c <tx_control+0x1f74>)
 800fc84:	789b      	ldrb	r3, [r3, #2]
 800fc86:	001a      	movs	r2, r3
 800fc88:	4b65      	ldr	r3, [pc, #404]	@ (800fe20 <tx_control+0x1f78>)
 800fc8a:	0019      	movs	r1, r3
 800fc8c:	0010      	movs	r0, r2
 800fc8e:	f7f7 fc9f 	bl	80075d0 <wreeprom>
			reeLat1 = RxBuffer_Ble[2];
 800fc92:	4b62      	ldr	r3, [pc, #392]	@ (800fe1c <tx_control+0x1f74>)
 800fc94:	789a      	ldrb	r2, [r3, #2]
 800fc96:	4b63      	ldr	r3, [pc, #396]	@ (800fe24 <tx_control+0x1f7c>)
 800fc98:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );  // MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800fc9a:	4b63      	ldr	r3, [pc, #396]	@ (800fe28 <tx_control+0x1f80>)
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	f006 fe55 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800fca2:	4b5e      	ldr	r3, [pc, #376]	@ (800fe1c <tx_control+0x1f74>)
 800fca4:	78db      	ldrb	r3, [r3, #3]
 800fca6:	001a      	movs	r2, r3
 800fca8:	4b60      	ldr	r3, [pc, #384]	@ (800fe2c <tx_control+0x1f84>)
 800fcaa:	0019      	movs	r1, r3
 800fcac:	0010      	movs	r0, r2
 800fcae:	f7f7 fc8f 	bl	80075d0 <wreeprom>
			reeLat2 = RxBuffer_Ble[3];
 800fcb2:	4b5a      	ldr	r3, [pc, #360]	@ (800fe1c <tx_control+0x1f74>)
 800fcb4:	78da      	ldrb	r2, [r3, #3]
 800fcb6:	4b5e      	ldr	r3, [pc, #376]	@ (800fe30 <tx_control+0x1f88>)
 800fcb8:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800fcba:	4b5b      	ldr	r3, [pc, #364]	@ (800fe28 <tx_control+0x1f80>)
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	f006 fe45 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800fcc2:	4b56      	ldr	r3, [pc, #344]	@ (800fe1c <tx_control+0x1f74>)
 800fcc4:	791b      	ldrb	r3, [r3, #4]
 800fcc6:	001a      	movs	r2, r3
 800fcc8:	4b5a      	ldr	r3, [pc, #360]	@ (800fe34 <tx_control+0x1f8c>)
 800fcca:	0019      	movs	r1, r3
 800fccc:	0010      	movs	r0, r2
 800fcce:	f7f7 fc7f 	bl	80075d0 <wreeprom>
			reeLat3 = RxBuffer_Ble[4];
 800fcd2:	4b52      	ldr	r3, [pc, #328]	@ (800fe1c <tx_control+0x1f74>)
 800fcd4:	791a      	ldrb	r2, [r3, #4]
 800fcd6:	4b58      	ldr	r3, [pc, #352]	@ (800fe38 <tx_control+0x1f90>)
 800fcd8:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800fcda:	4b53      	ldr	r3, [pc, #332]	@ (800fe28 <tx_control+0x1f80>)
 800fcdc:	0018      	movs	r0, r3
 800fcde:	f006 fe35 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800fce2:	4b4e      	ldr	r3, [pc, #312]	@ (800fe1c <tx_control+0x1f74>)
 800fce4:	795b      	ldrb	r3, [r3, #5]
 800fce6:	001a      	movs	r2, r3
 800fce8:	4b54      	ldr	r3, [pc, #336]	@ (800fe3c <tx_control+0x1f94>)
 800fcea:	0019      	movs	r1, r3
 800fcec:	0010      	movs	r0, r2
 800fcee:	f7f7 fc6f 	bl	80075d0 <wreeprom>
			reeLat4 = RxBuffer_Ble[5];
 800fcf2:	4b4a      	ldr	r3, [pc, #296]	@ (800fe1c <tx_control+0x1f74>)
 800fcf4:	795a      	ldrb	r2, [r3, #5]
 800fcf6:	4b52      	ldr	r3, [pc, #328]	@ (800fe40 <tx_control+0x1f98>)
 800fcf8:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800fcfa:	4b4b      	ldr	r3, [pc, #300]	@ (800fe28 <tx_control+0x1f80>)
 800fcfc:	0018      	movs	r0, r3
 800fcfe:	f006 fe25 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800fd02:	4b46      	ldr	r3, [pc, #280]	@ (800fe1c <tx_control+0x1f74>)
 800fd04:	799b      	ldrb	r3, [r3, #6]
 800fd06:	001a      	movs	r2, r3
 800fd08:	4b4e      	ldr	r3, [pc, #312]	@ (800fe44 <tx_control+0x1f9c>)
 800fd0a:	0019      	movs	r1, r3
 800fd0c:	0010      	movs	r0, r2
 800fd0e:	f7f7 fc5f 	bl	80075d0 <wreeprom>
			reeLong1 = RxBuffer_Ble[6];
 800fd12:	4b42      	ldr	r3, [pc, #264]	@ (800fe1c <tx_control+0x1f74>)
 800fd14:	799a      	ldrb	r2, [r3, #6]
 800fd16:	4b4c      	ldr	r3, [pc, #304]	@ (800fe48 <tx_control+0x1fa0>)
 800fd18:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 800fd1a:	4b43      	ldr	r3, [pc, #268]	@ (800fe28 <tx_control+0x1f80>)
 800fd1c:	0018      	movs	r0, r3
 800fd1e:	f006 fe15 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800fd22:	4b3e      	ldr	r3, [pc, #248]	@ (800fe1c <tx_control+0x1f74>)
 800fd24:	79db      	ldrb	r3, [r3, #7]
 800fd26:	001a      	movs	r2, r3
 800fd28:	4b48      	ldr	r3, [pc, #288]	@ (800fe4c <tx_control+0x1fa4>)
 800fd2a:	0019      	movs	r1, r3
 800fd2c:	0010      	movs	r0, r2
 800fd2e:	f7f7 fc4f 	bl	80075d0 <wreeprom>
			reeLong2 = RxBuffer_Ble[7];
 800fd32:	4b3a      	ldr	r3, [pc, #232]	@ (800fe1c <tx_control+0x1f74>)
 800fd34:	79da      	ldrb	r2, [r3, #7]
 800fd36:	4b46      	ldr	r3, [pc, #280]	@ (800fe50 <tx_control+0x1fa8>)
 800fd38:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 800fd3a:	4b3b      	ldr	r3, [pc, #236]	@ (800fe28 <tx_control+0x1f80>)
 800fd3c:	0018      	movs	r0, r3
 800fd3e:	f006 fe05 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800fd42:	4b36      	ldr	r3, [pc, #216]	@ (800fe1c <tx_control+0x1f74>)
 800fd44:	7a1b      	ldrb	r3, [r3, #8]
 800fd46:	001a      	movs	r2, r3
 800fd48:	4b42      	ldr	r3, [pc, #264]	@ (800fe54 <tx_control+0x1fac>)
 800fd4a:	0019      	movs	r1, r3
 800fd4c:	0010      	movs	r0, r2
 800fd4e:	f7f7 fc3f 	bl	80075d0 <wreeprom>
			reeLong3 = RxBuffer_Ble[8];
 800fd52:	4b32      	ldr	r3, [pc, #200]	@ (800fe1c <tx_control+0x1f74>)
 800fd54:	7a1a      	ldrb	r2, [r3, #8]
 800fd56:	4b40      	ldr	r3, [pc, #256]	@ (800fe58 <tx_control+0x1fb0>)
 800fd58:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 800fd5a:	4b33      	ldr	r3, [pc, #204]	@ (800fe28 <tx_control+0x1f80>)
 800fd5c:	0018      	movs	r0, r3
 800fd5e:	f006 fdf5 	bl	801694c <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 800fd62:	4b2e      	ldr	r3, [pc, #184]	@ (800fe1c <tx_control+0x1f74>)
 800fd64:	7a5b      	ldrb	r3, [r3, #9]
 800fd66:	001a      	movs	r2, r3
 800fd68:	4b3c      	ldr	r3, [pc, #240]	@ (800fe5c <tx_control+0x1fb4>)
 800fd6a:	0019      	movs	r1, r3
 800fd6c:	0010      	movs	r0, r2
 800fd6e:	f7f7 fc2f 	bl	80075d0 <wreeprom>
			reeLong4 = RxBuffer_Ble[9];
 800fd72:	4b2a      	ldr	r3, [pc, #168]	@ (800fe1c <tx_control+0x1f74>)
 800fd74:	7a5a      	ldrb	r2, [r3, #9]
 800fd76:	4b3a      	ldr	r3, [pc, #232]	@ (800fe60 <tx_control+0x1fb8>)
 800fd78:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 800fd7a:	4b2b      	ldr	r3, [pc, #172]	@ (800fe28 <tx_control+0x1f80>)
 800fd7c:	0018      	movs	r0, r3
 800fd7e:	f006 fde5 	bl	801694c <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800fd82:	4b24      	ldr	r3, [pc, #144]	@ (800fe14 <tx_control+0x1f6c>)
 800fd84:	22f1      	movs	r2, #241	@ 0xf1
 800fd86:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fd88:	4b22      	ldr	r3, [pc, #136]	@ (800fe14 <tx_control+0x1f6c>)
 800fd8a:	223d      	movs	r2, #61	@ 0x3d
 800fd8c:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 800fd8e:	e005      	b.n	800fd9c <tx_control+0x1ef4>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800fd90:	4b20      	ldr	r3, [pc, #128]	@ (800fe14 <tx_control+0x1f6c>)
 800fd92:	22f1      	movs	r2, #241	@ 0xf1
 800fd94:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800fd96:	4b1f      	ldr	r3, [pc, #124]	@ (800fe14 <tx_control+0x1f6c>)
 800fd98:	223e      	movs	r2, #62	@ 0x3e
 800fd9a:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 800fd9c:	4b17      	ldr	r3, [pc, #92]	@ (800fdfc <tx_control+0x1f54>)
 800fd9e:	4a1d      	ldr	r2, [pc, #116]	@ (800fe14 <tx_control+0x1f6c>)
 800fda0:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800fda2:	4b17      	ldr	r3, [pc, #92]	@ (800fe00 <tx_control+0x1f58>)
 800fda4:	4a1b      	ldr	r2, [pc, #108]	@ (800fe14 <tx_control+0x1f6c>)
 800fda6:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 800fda8:	4b16      	ldr	r3, [pc, #88]	@ (800fe04 <tx_control+0x1f5c>)
 800fdaa:	4a1b      	ldr	r2, [pc, #108]	@ (800fe18 <tx_control+0x1f70>)
 800fdac:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 800fdae:	4b08      	ldr	r3, [pc, #32]	@ (800fdd0 <tx_control+0x1f28>)
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 800fdb4:	4b09      	ldr	r3, [pc, #36]	@ (800fddc <tx_control+0x1f34>)
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fdba:	4b14      	ldr	r3, [pc, #80]	@ (800fe0c <tx_control+0x1f64>)
 800fdbc:	2255      	movs	r2, #85	@ 0x55
 800fdbe:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 800fdc0:	4b13      	ldr	r3, [pc, #76]	@ (800fe10 <tx_control+0x1f68>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800fdc6:	e0ee      	b.n	800ffa6 <tx_control+0x20fe>
 800fdc8:	200010e0 	.word	0x200010e0
 800fdcc:	20000bb4 	.word	0x20000bb4
 800fdd0:	20000ecc 	.word	0x20000ecc
 800fdd4:	200000b8 	.word	0x200000b8
 800fdd8:	20000e74 	.word	0x20000e74
 800fddc:	20000eb8 	.word	0x20000eb8
 800fde0:	20000b67 	.word	0x20000b67
 800fde4:	20001044 	.word	0x20001044
 800fde8:	200010e8 	.word	0x200010e8
 800fdec:	200010f0 	.word	0x200010f0
 800fdf0:	200010f8 	.word	0x200010f8
 800fdf4:	20000ed0 	.word	0x20000ed0
 800fdf8:	20000b66 	.word	0x20000b66
 800fdfc:	20000eb0 	.word	0x20000eb0
 800fe00:	20000ea8 	.word	0x20000ea8
 800fe04:	20000eac 	.word	0x20000eac
 800fe08:	20001054 	.word	0x20001054
 800fe0c:	20000eb5 	.word	0x20000eb5
 800fe10:	20000ec0 	.word	0x20000ec0
 800fe14:	20000e50 	.word	0x20000e50
 800fe18:	20000e51 	.word	0x20000e51
 800fe1c:	20000998 	.word	0x20000998
 800fe20:	0803f808 	.word	0x0803f808
 800fe24:	200001bb 	.word	0x200001bb
 800fe28:	20000560 	.word	0x20000560
 800fe2c:	0803f809 	.word	0x0803f809
 800fe30:	200001bc 	.word	0x200001bc
 800fe34:	0803f80a 	.word	0x0803f80a
 800fe38:	200001bd 	.word	0x200001bd
 800fe3c:	0803f80b 	.word	0x0803f80b
 800fe40:	200001be 	.word	0x200001be
 800fe44:	0803f80c 	.word	0x0803f80c
 800fe48:	200001bf 	.word	0x200001bf
 800fe4c:	0803f80d 	.word	0x0803f80d
 800fe50:	200001c0 	.word	0x200001c0
 800fe54:	0803f80e 	.word	0x0803f80e
 800fe58:	200001c1 	.word	0x200001c1
 800fe5c:	0803f80f 	.word	0x0803f80f
 800fe60:	200001c2 	.word	0x200001c2
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 800fe64:	4be9      	ldr	r3, [pc, #932]	@ (801020c <tx_control+0x2364>)
 800fe66:	789a      	ldrb	r2, [r3, #2]
 800fe68:	4be9      	ldr	r3, [pc, #932]	@ (8010210 <tx_control+0x2368>)
 800fe6a:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 800fe6c:	4be7      	ldr	r3, [pc, #924]	@ (801020c <tx_control+0x2364>)
 800fe6e:	78da      	ldrb	r2, [r3, #3]
 800fe70:	4be8      	ldr	r3, [pc, #928]	@ (8010214 <tx_control+0x236c>)
 800fe72:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 800fe74:	4be5      	ldr	r3, [pc, #916]	@ (801020c <tx_control+0x2364>)
 800fe76:	791a      	ldrb	r2, [r3, #4]
 800fe78:	4be7      	ldr	r3, [pc, #924]	@ (8010218 <tx_control+0x2370>)
 800fe7a:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 800fe7c:	4be3      	ldr	r3, [pc, #908]	@ (801020c <tx_control+0x2364>)
 800fe7e:	795a      	ldrb	r2, [r3, #5]
 800fe80:	4be6      	ldr	r3, [pc, #920]	@ (801021c <tx_control+0x2374>)
 800fe82:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 800fe84:	4be1      	ldr	r3, [pc, #900]	@ (801020c <tx_control+0x2364>)
 800fe86:	799a      	ldrb	r2, [r3, #6]
 800fe88:	4be5      	ldr	r3, [pc, #916]	@ (8010220 <tx_control+0x2378>)
 800fe8a:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 800fe8c:	4bdf      	ldr	r3, [pc, #892]	@ (801020c <tx_control+0x2364>)
 800fe8e:	79da      	ldrb	r2, [r3, #7]
 800fe90:	4be4      	ldr	r3, [pc, #912]	@ (8010224 <tx_control+0x237c>)
 800fe92:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 800fe94:	4bdd      	ldr	r3, [pc, #884]	@ (801020c <tx_control+0x2364>)
 800fe96:	7a1a      	ldrb	r2, [r3, #8]
 800fe98:	4be3      	ldr	r3, [pc, #908]	@ (8010228 <tx_control+0x2380>)
 800fe9a:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 800fe9c:	4be2      	ldr	r3, [pc, #904]	@ (8010228 <tx_control+0x2380>)
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	015b      	lsls	r3, r3, #5
 800fea2:	b2da      	uxtb	r2, r3
 800fea4:	4be0      	ldr	r3, [pc, #896]	@ (8010228 <tx_control+0x2380>)
 800fea6:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 800fea8:	4bdf      	ldr	r3, [pc, #892]	@ (8010228 <tx_control+0x2380>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	b25b      	sxtb	r3, r3
 800feae:	221f      	movs	r2, #31
 800feb0:	4393      	bics	r3, r2
 800feb2:	b25a      	sxtb	r2, r3
 800feb4:	4bd7      	ldr	r3, [pc, #860]	@ (8010214 <tx_control+0x236c>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	b25b      	sxtb	r3, r3
 800feba:	4313      	orrs	r3, r2
 800febc:	b25b      	sxtb	r3, r3
 800febe:	b2da      	uxtb	r2, r3
 800fec0:	4bd4      	ldr	r3, [pc, #848]	@ (8010214 <tx_control+0x236c>)
 800fec2:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 800fec4:	4bd1      	ldr	r3, [pc, #836]	@ (801020c <tx_control+0x2364>)
 800fec6:	7a5a      	ldrb	r2, [r3, #9]
 800fec8:	4bd7      	ldr	r3, [pc, #860]	@ (8010228 <tx_control+0x2380>)
 800feca:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 800fecc:	4bd3      	ldr	r3, [pc, #844]	@ (801021c <tx_control+0x2374>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	2240      	movs	r2, #64	@ 0x40
 800fed2:	4393      	bics	r3, r2
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	4bd1      	ldr	r3, [pc, #836]	@ (801021c <tx_control+0x2374>)
 800fed8:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 800feda:	4bcd      	ldr	r3, [pc, #820]	@ (8010210 <tx_control+0x2368>)
 800fedc:	781a      	ldrb	r2, [r3, #0]
 800fede:	4bd3      	ldr	r3, [pc, #844]	@ (801022c <tx_control+0x2384>)
 800fee0:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 800fee2:	4bcc      	ldr	r3, [pc, #816]	@ (8010214 <tx_control+0x236c>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	221f      	movs	r2, #31
 800fee8:	4013      	ands	r3, r2
 800feea:	b2da      	uxtb	r2, r3
 800feec:	4bcf      	ldr	r3, [pc, #828]	@ (801022c <tx_control+0x2384>)
 800feee:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 800fef0:	4bc9      	ldr	r3, [pc, #804]	@ (8010218 <tx_control+0x2370>)
 800fef2:	781a      	ldrb	r2, [r3, #0]
 800fef4:	4bcd      	ldr	r3, [pc, #820]	@ (801022c <tx_control+0x2384>)
 800fef6:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 800fef8:	4bc6      	ldr	r3, [pc, #792]	@ (8010214 <tx_control+0x236c>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	095b      	lsrs	r3, r3, #5
 800fefe:	b2da      	uxtb	r2, r3
 800ff00:	4bca      	ldr	r3, [pc, #808]	@ (801022c <tx_control+0x2384>)
 800ff02:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800ff04:	49c9      	ldr	r1, [pc, #804]	@ (801022c <tx_control+0x2384>)
 800ff06:	4bca      	ldr	r3, [pc, #808]	@ (8010230 <tx_control+0x2388>)
 800ff08:	2201      	movs	r2, #1
 800ff0a:	0018      	movs	r0, r3
 800ff0c:	f008 fe16 	bl	8018b3c <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 800ff10:	4bc2      	ldr	r3, [pc, #776]	@ (801021c <tx_control+0x2374>)
 800ff12:	781a      	ldrb	r2, [r3, #0]
 800ff14:	4bc7      	ldr	r3, [pc, #796]	@ (8010234 <tx_control+0x238c>)
 800ff16:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 800ff18:	4bc1      	ldr	r3, [pc, #772]	@ (8010220 <tx_control+0x2378>)
 800ff1a:	781a      	ldrb	r2, [r3, #0]
 800ff1c:	4bc5      	ldr	r3, [pc, #788]	@ (8010234 <tx_control+0x238c>)
 800ff1e:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 800ff20:	4bc0      	ldr	r3, [pc, #768]	@ (8010224 <tx_control+0x237c>)
 800ff22:	781a      	ldrb	r2, [r3, #0]
 800ff24:	4bc3      	ldr	r3, [pc, #780]	@ (8010234 <tx_control+0x238c>)
 800ff26:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 800ff28:	4bb8      	ldr	r3, [pc, #736]	@ (801020c <tx_control+0x2364>)
 800ff2a:	7a5a      	ldrb	r2, [r3, #9]
 800ff2c:	4bc1      	ldr	r3, [pc, #772]	@ (8010234 <tx_control+0x238c>)
 800ff2e:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ff30:	4bc0      	ldr	r3, [pc, #768]	@ (8010234 <tx_control+0x238c>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800ff36:	4bbf      	ldr	r3, [pc, #764]	@ (8010234 <tx_control+0x238c>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 800ff3c:	49bd      	ldr	r1, [pc, #756]	@ (8010234 <tx_control+0x238c>)
 800ff3e:	4bbc      	ldr	r3, [pc, #752]	@ (8010230 <tx_control+0x2388>)
 800ff40:	2201      	movs	r2, #1
 800ff42:	0018      	movs	r0, r3
 800ff44:	f008 fcd6 	bl	80188f4 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 800ff48:	4bb6      	ldr	r3, [pc, #728]	@ (8010224 <tx_control+0x237c>)
 800ff4a:	781a      	ldrb	r2, [r3, #0]
 800ff4c:	4bba      	ldr	r3, [pc, #744]	@ (8010238 <tx_control+0x2390>)
 800ff4e:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 800ff50:	4bba      	ldr	r3, [pc, #744]	@ (801023c <tx_control+0x2394>)
 800ff52:	2201      	movs	r2, #1
 800ff54:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800ff56:	4bba      	ldr	r3, [pc, #744]	@ (8010240 <tx_control+0x2398>)
 800ff58:	22f1      	movs	r2, #241	@ 0xf1
 800ff5a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ff5c:	4bb8      	ldr	r3, [pc, #736]	@ (8010240 <tx_control+0x2398>)
 800ff5e:	223d      	movs	r2, #61	@ 0x3d
 800ff60:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 800ff62:	e005      	b.n	800ff70 <tx_control+0x20c8>
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 800ff64:	4bb6      	ldr	r3, [pc, #728]	@ (8010240 <tx_control+0x2398>)
 800ff66:	22f1      	movs	r2, #241	@ 0xf1
 800ff68:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800ff6a:	4bb5      	ldr	r3, [pc, #724]	@ (8010240 <tx_control+0x2398>)
 800ff6c:	223e      	movs	r2, #62	@ 0x3e
 800ff6e:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 800ff70:	4bb4      	ldr	r3, [pc, #720]	@ (8010244 <tx_control+0x239c>)
 800ff72:	4ab3      	ldr	r2, [pc, #716]	@ (8010240 <tx_control+0x2398>)
 800ff74:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800ff76:	4bb4      	ldr	r3, [pc, #720]	@ (8010248 <tx_control+0x23a0>)
 800ff78:	4ab1      	ldr	r2, [pc, #708]	@ (8010240 <tx_control+0x2398>)
 800ff7a:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 800ff7c:	4bb3      	ldr	r3, [pc, #716]	@ (801024c <tx_control+0x23a4>)
 800ff7e:	4ab4      	ldr	r2, [pc, #720]	@ (8010250 <tx_control+0x23a8>)
 800ff80:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 800ff82:	4bb4      	ldr	r3, [pc, #720]	@ (8010254 <tx_control+0x23ac>)
 800ff84:	2202      	movs	r2, #2
 800ff86:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 800ff88:	4bb3      	ldr	r3, [pc, #716]	@ (8010258 <tx_control+0x23b0>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ff8e:	4bb3      	ldr	r3, [pc, #716]	@ (801025c <tx_control+0x23b4>)
 800ff90:	2255      	movs	r2, #85	@ 0x55
 800ff92:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800ff94:	4bb2      	ldr	r3, [pc, #712]	@ (8010260 <tx_control+0x23b8>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800ff9a:	e004      	b.n	800ffa6 <tx_control+0x20fe>
		goto end_tx_control;
 800ff9c:	46c0      	nop			@ (mov r8, r8)
 800ff9e:	e002      	b.n	800ffa6 <tx_control+0x20fe>
		goto end_tx_control;//	jp end_tx_control
 800ffa0:	46c0      	nop			@ (mov r8, r8)
 800ffa2:	e000      	b.n	800ffa6 <tx_control+0x20fe>
			goto end_tx_control;		//jp		end_tx_control
 800ffa4:	46c0      	nop			@ (mov r8, r8)
		if (keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 800ffa6:	4bad      	ldr	r3, [pc, #692]	@ (801025c <tx_control+0x23b4>)
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d11b      	bne.n	800ffe6 <tx_control+0x213e>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 800ffae:	4bad      	ldr	r3, [pc, #692]	@ (8010264 <tx_control+0x23bc>)
 800ffb0:	791b      	ldrb	r3, [r3, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	4053      	eors	r3, r2
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d103      	bne.n	800ffc4 <tx_control+0x211c>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 800ffbc:	4baa      	ldr	r3, [pc, #680]	@ (8010268 <tx_control+0x23c0>)
 800ffbe:	22aa      	movs	r2, #170	@ 0xaa
 800ffc0:	701a      	strb	r2, [r3, #0]
 800ffc2:	e000      	b.n	800ffc6 <tx_control+0x211e>
			goto ask_resetLoopTx;
 800ffc4:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 800ffc6:	4ba9      	ldr	r3, [pc, #676]	@ (801026c <tx_control+0x23c4>)
 800ffc8:	791b      	ldrb	r3, [r3, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d109      	bne.n	800ffe2 <tx_control+0x213a>
resetLoopTx:
 800ffce:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 800ffd0:	4ba1      	ldr	r3, [pc, #644]	@ (8010258 <tx_control+0x23b0>)
 800ffd2:	795b      	ldrb	r3, [r3, #5]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4053      	eors	r3, r2
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d106      	bne.n	800ffec <tx_control+0x2144>
		asm ("nop");
 800ffde:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 800ffe0:	e7f6      	b.n	800ffd0 <tx_control+0x2128>
		asm ("nop");
 800ffe2:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx_2;
 800ffe4:	e7fd      	b.n	800ffe2 <tx_control+0x213a>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 800ffe6:	46c0      	nop			@ (mov r8, r8)
 800ffe8:	f001 f888 	bl	80110fc <tx_control+0x3254>
			goto no_resetLoopTx;
 800ffec:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 800ffee:	f001 f885 	bl	80110fc <tx_control+0x3254>
			goto tx_wifi_01;
 800fff2:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;//jp			end_tx_wifi
tx_wifi_01:
		//;  Pregunta por el estado de la conexión a Servidor
		if(flagsTxControl[f_statWIFI])//btjt		flagsTxControl,#f_statWIFI,tx_wifi_OK
 800fff4:	4b9e      	ldr	r3, [pc, #632]	@ (8010270 <tx_control+0x23c8>)
 800fff6:	789b      	ldrb	r3, [r3, #2]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d119      	bne.n	8010030 <tx_control+0x2188>
			goto tx_wifi_OK;
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 800fffc:	4b9d      	ldr	r3, [pc, #628]	@ (8010274 <tx_control+0x23cc>)
 800fffe:	2200      	movs	r2, #0
 8010000:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 8010002:	4b9c      	ldr	r3, [pc, #624]	@ (8010274 <tx_control+0x23cc>)
 8010004:	2200      	movs	r2, #0
 8010006:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 8010008:	4b9a      	ldr	r3, [pc, #616]	@ (8010274 <tx_control+0x23cc>)
 801000a:	2200      	movs	r2, #0
 801000c:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 801000e:	4b99      	ldr	r3, [pc, #612]	@ (8010274 <tx_control+0x23cc>)
 8010010:	2200      	movs	r2, #0
 8010012:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 8010014:	4b97      	ldr	r3, [pc, #604]	@ (8010274 <tx_control+0x23cc>)
 8010016:	2200      	movs	r2, #0
 8010018:	711a      	strb	r2, [r3, #4]
		cntRegTxWifi = 0;
 801001a:	4b97      	ldr	r3, [pc, #604]	@ (8010278 <tx_control+0x23d0>)
 801001c:	2200      	movs	r2, #0
 801001e:	801a      	strh	r2, [r3, #0]
		blockLoggWifi = 0;
 8010020:	4b96      	ldr	r3, [pc, #600]	@ (801027c <tx_control+0x23d4>)
 8010022:	2200      	movs	r2, #0
 8010024:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;
 8010026:	4b96      	ldr	r3, [pc, #600]	@ (8010280 <tx_control+0x23d8>)
 8010028:	2200      	movs	r2, #0
 801002a:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp			end_tx_wifi
 801002c:	f001 f863 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_OK;
 8010030:	46c0      	nop			@ (mov r8, r8)

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 8010032:	4b90      	ldr	r3, [pc, #576]	@ (8010274 <tx_control+0x23cc>)
 8010034:	2201      	movs	r2, #1
 8010036:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 8010038:	4b8a      	ldr	r3, [pc, #552]	@ (8010264 <tx_control+0x23bc>)
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2201      	movs	r2, #1
 801003e:	4053      	eors	r3, r2
 8010040:	b2db      	uxtb	r3, r3
 8010042:	2b00      	cmp	r3, #0
 8010044:	d101      	bne.n	801004a <tx_control+0x21a2>
 8010046:	f001 f849 	bl	80110dc <tx_control+0x3234>
			goto tx_wifi_OK_01;
 801004a:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 801004c:	4b83      	ldr	r3, [pc, #524]	@ (801025c <tx_control+0x23b4>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d001      	beq.n	8010058 <tx_control+0x21b0>
 8010054:	f001 f845 	bl	80110e2 <tx_control+0x323a>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 8010058:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		//if(!flagsWIFI[f_timeLoggerSend]){
		if(flagsWIFI[f_timeLoggerSend]){
 801005a:	4b86      	ldr	r3, [pc, #536]	@ (8010274 <tx_control+0x23cc>)
 801005c:	785b      	ldrb	r3, [r3, #1]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d100      	bne.n	8010064 <tx_control+0x21bc>
 8010062:	e1fd      	b.n	8010460 <tx_control+0x25b8>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 8010064:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 8010066:	4b83      	ldr	r3, [pc, #524]	@ (8010274 <tx_control+0x23cc>)
 8010068:	78db      	ldrb	r3, [r3, #3]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d000      	beq.n	8010070 <tx_control+0x21c8>
 801006e:	e0b8      	b.n	80101e2 <tx_control+0x233a>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 8010070:	4b80      	ldr	r3, [pc, #512]	@ (8010274 <tx_control+0x23cc>)
 8010072:	2201      	movs	r2, #1
 8010074:	70da      	strb	r2, [r3, #3]
		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_cmd
		if(cntRegTxWifi)
 8010076:	4b80      	ldr	r3, [pc, #512]	@ (8010278 <tx_control+0x23d0>)
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d134      	bne.n	80100e8 <tx_control+0x2240>
			goto tx_wifi_timeLogger_cmd;

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 801007e:	4b81      	ldr	r3, [pc, #516]	@ (8010284 <tx_control+0x23dc>)
 8010080:	781a      	ldrb	r2, [r3, #0]
 8010082:	4b81      	ldr	r3, [pc, #516]	@ (8010288 <tx_control+0x23e0>)
 8010084:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 8010086:	4b81      	ldr	r3, [pc, #516]	@ (801028c <tx_control+0x23e4>)
 8010088:	781a      	ldrb	r2, [r3, #0]
 801008a:	4b81      	ldr	r3, [pc, #516]	@ (8010290 <tx_control+0x23e8>)
 801008c:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 801008e:	4b81      	ldr	r3, [pc, #516]	@ (8010294 <tx_control+0x23ec>)
 8010090:	4a81      	ldr	r2, [pc, #516]	@ (8010298 <tx_control+0x23f0>)
 8010092:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 8010094:	4b81      	ldr	r3, [pc, #516]	@ (801029c <tx_control+0x23f4>)
 8010096:	4a82      	ldr	r2, [pc, #520]	@ (80102a0 <tx_control+0x23f8>)
 8010098:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 801009a:	4b7e      	ldr	r3, [pc, #504]	@ (8010294 <tx_control+0x23ec>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	337e      	adds	r3, #126	@ 0x7e
 80100a0:	4a7b      	ldr	r2, [pc, #492]	@ (8010290 <tx_control+0x23e8>)
 80100a2:	7812      	ldrb	r2, [r2, #0]
 80100a4:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 80100a6:	4b7f      	ldr	r3, [pc, #508]	@ (80102a4 <tx_control+0x23fc>)
 80100a8:	22aa      	movs	r2, #170	@ 0xaa
 80100aa:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 80100ac:	4b7b      	ldr	r3, [pc, #492]	@ (801029c <tx_control+0x23f4>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a75      	ldr	r2, [pc, #468]	@ (8010288 <tx_control+0x23e0>)
 80100b2:	7812      	ldrb	r2, [r2, #0]
 80100b4:	01d2      	lsls	r2, r2, #7
 80100b6:	189a      	adds	r2, r3, r2
 80100b8:	4b7b      	ldr	r3, [pc, #492]	@ (80102a8 <tx_control+0x2400>)
 80100ba:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 80100bc:	4b75      	ldr	r3, [pc, #468]	@ (8010294 <tx_control+0x23ec>)
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	4b7a      	ldr	r3, [pc, #488]	@ (80102ac <tx_control+0x2404>)
 80100c2:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 80100c4:	f7f7 f964 	bl	8007390 <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 80100c8:	4b79      	ldr	r3, [pc, #484]	@ (80102b0 <tx_control+0x2408>)
 80100ca:	881a      	ldrh	r2, [r3, #0]
 80100cc:	4b79      	ldr	r3, [pc, #484]	@ (80102b4 <tx_control+0x240c>)
 80100ce:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 80100d0:	4b79      	ldr	r3, [pc, #484]	@ (80102b8 <tx_control+0x2410>)
 80100d2:	4a7a      	ldr	r2, [pc, #488]	@ (80102bc <tx_control+0x2414>)
 80100d4:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 80100d6:	4b77      	ldr	r3, [pc, #476]	@ (80102b4 <tx_control+0x240c>)
 80100d8:	881a      	ldrh	r2, [r3, #0]
 80100da:	4b79      	ldr	r3, [pc, #484]	@ (80102c0 <tx_control+0x2418>)
 80100dc:	801a      	strh	r2, [r3, #0]

		save_cntReg();// call	save_cntReg
 80100de:	f7f7 f843 	bl	8007168 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 80100e2:	f7f7 f859 	bl	8007198 <save_timeUNIX>
 80100e6:	e000      	b.n	80100ea <tx_control+0x2242>
			goto tx_wifi_timeLogger_cmd;
 80100e8:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_cmd:
		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 80100ea:	4b76      	ldr	r3, [pc, #472]	@ (80102c4 <tx_control+0x241c>)
 80100ec:	2240      	movs	r2, #64	@ 0x40
 80100ee:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 80100f0:	4b74      	ldr	r3, [pc, #464]	@ (80102c4 <tx_control+0x241c>)
 80100f2:	2285      	movs	r2, #133	@ 0x85
 80100f4:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 80100f6:	4b74      	ldr	r3, [pc, #464]	@ (80102c8 <tx_control+0x2420>)
 80100f8:	227b      	movs	r2, #123	@ 0x7b
 80100fa:	5c9a      	ldrb	r2, [r3, r2]
 80100fc:	4b71      	ldr	r3, [pc, #452]	@ (80102c4 <tx_control+0x241c>)
 80100fe:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 8010100:	4b71      	ldr	r3, [pc, #452]	@ (80102c8 <tx_control+0x2420>)
 8010102:	227c      	movs	r2, #124	@ 0x7c
 8010104:	5c9a      	ldrb	r2, [r3, r2]
 8010106:	4b6f      	ldr	r3, [pc, #444]	@ (80102c4 <tx_control+0x241c>)
 8010108:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 801010a:	4b70      	ldr	r3, [pc, #448]	@ (80102cc <tx_control+0x2424>)
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	0a1b      	lsrs	r3, r3, #8
 8010110:	b29b      	uxth	r3, r3
 8010112:	b2da      	uxtb	r2, r3
 8010114:	4b6b      	ldr	r3, [pc, #428]	@ (80102c4 <tx_control+0x241c>)
 8010116:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 8010118:	4b6c      	ldr	r3, [pc, #432]	@ (80102cc <tx_control+0x2424>)
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	b2da      	uxtb	r2, r3
 801011e:	4b69      	ldr	r3, [pc, #420]	@ (80102c4 <tx_control+0x241c>)
 8010120:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 8010122:	4b6b      	ldr	r3, [pc, #428]	@ (80102d0 <tx_control+0x2428>)
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	0a1b      	lsrs	r3, r3, #8
 8010128:	b29b      	uxth	r3, r3
 801012a:	b2da      	uxtb	r2, r3
 801012c:	4b65      	ldr	r3, [pc, #404]	@ (80102c4 <tx_control+0x241c>)
 801012e:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 8010130:	4b67      	ldr	r3, [pc, #412]	@ (80102d0 <tx_control+0x2428>)
 8010132:	881b      	ldrh	r3, [r3, #0]
 8010134:	b2da      	uxtb	r2, r3
 8010136:	4b63      	ldr	r3, [pc, #396]	@ (80102c4 <tx_control+0x241c>)
 8010138:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[11] = eeLat4;
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;
		bufferWifiTx[8] = reeLat1;
 801013a:	4b66      	ldr	r3, [pc, #408]	@ (80102d4 <tx_control+0x242c>)
 801013c:	781a      	ldrb	r2, [r3, #0]
 801013e:	4b61      	ldr	r3, [pc, #388]	@ (80102c4 <tx_control+0x241c>)
 8010140:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 8010142:	4b65      	ldr	r3, [pc, #404]	@ (80102d8 <tx_control+0x2430>)
 8010144:	781a      	ldrb	r2, [r3, #0]
 8010146:	4b5f      	ldr	r3, [pc, #380]	@ (80102c4 <tx_control+0x241c>)
 8010148:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 801014a:	4b64      	ldr	r3, [pc, #400]	@ (80102dc <tx_control+0x2434>)
 801014c:	781a      	ldrb	r2, [r3, #0]
 801014e:	4b5d      	ldr	r3, [pc, #372]	@ (80102c4 <tx_control+0x241c>)
 8010150:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 8010152:	4b63      	ldr	r3, [pc, #396]	@ (80102e0 <tx_control+0x2438>)
 8010154:	781a      	ldrb	r2, [r3, #0]
 8010156:	4b5b      	ldr	r3, [pc, #364]	@ (80102c4 <tx_control+0x241c>)
 8010158:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 801015a:	4b62      	ldr	r3, [pc, #392]	@ (80102e4 <tx_control+0x243c>)
 801015c:	781a      	ldrb	r2, [r3, #0]
 801015e:	4b59      	ldr	r3, [pc, #356]	@ (80102c4 <tx_control+0x241c>)
 8010160:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 8010162:	4b61      	ldr	r3, [pc, #388]	@ (80102e8 <tx_control+0x2440>)
 8010164:	781a      	ldrb	r2, [r3, #0]
 8010166:	4b57      	ldr	r3, [pc, #348]	@ (80102c4 <tx_control+0x241c>)
 8010168:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 801016a:	4b60      	ldr	r3, [pc, #384]	@ (80102ec <tx_control+0x2444>)
 801016c:	781a      	ldrb	r2, [r3, #0]
 801016e:	4b55      	ldr	r3, [pc, #340]	@ (80102c4 <tx_control+0x241c>)
 8010170:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 8010172:	4b5f      	ldr	r3, [pc, #380]	@ (80102f0 <tx_control+0x2448>)
 8010174:	781a      	ldrb	r2, [r3, #0]
 8010176:	4b53      	ldr	r3, [pc, #332]	@ (80102c4 <tx_control+0x241c>)
 8010178:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801017a:	4b32      	ldr	r3, [pc, #200]	@ (8010244 <tx_control+0x239c>)
 801017c:	4a51      	ldr	r2, [pc, #324]	@ (80102c4 <tx_control+0x241c>)
 801017e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010180:	4b31      	ldr	r3, [pc, #196]	@ (8010248 <tx_control+0x23a0>)
 8010182:	4a50      	ldr	r2, [pc, #320]	@ (80102c4 <tx_control+0x241c>)
 8010184:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 8010186:	4b31      	ldr	r3, [pc, #196]	@ (801024c <tx_control+0x23a4>)
 8010188:	4a5a      	ldr	r2, [pc, #360]	@ (80102f4 <tx_control+0x244c>)
 801018a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 801018c:	4b31      	ldr	r3, [pc, #196]	@ (8010254 <tx_control+0x23ac>)
 801018e:	2210      	movs	r2, #16
 8010190:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010192:	4b31      	ldr	r3, [pc, #196]	@ (8010258 <tx_control+0x23b0>)
 8010194:	2200      	movs	r2, #0
 8010196:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010198:	4b57      	ldr	r3, [pc, #348]	@ (80102f8 <tx_control+0x2450>)
 801019a:	2200      	movs	r2, #0
 801019c:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801019e:	4b2e      	ldr	r3, [pc, #184]	@ (8010258 <tx_control+0x23b0>)
 80101a0:	2201      	movs	r2, #1
 80101a2:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 80101a4:	4b2d      	ldr	r3, [pc, #180]	@ (801025c <tx_control+0x23b4>)
 80101a6:	2255      	movs	r2, #85	@ 0x55
 80101a8:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80101aa:	4b2d      	ldr	r3, [pc, #180]	@ (8010260 <tx_control+0x23b8>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	701a      	strb	r2, [r3, #0]

		//;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_noInit
		if(cntRegTxWifi)
 80101b0:	4b31      	ldr	r3, [pc, #196]	@ (8010278 <tx_control+0x23d0>)
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10b      	bne.n	80101d0 <tx_control+0x2328>
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 80101b8:	4b32      	ldr	r3, [pc, #200]	@ (8010284 <tx_control+0x23dc>)
 80101ba:	781a      	ldrb	r2, [r3, #0]
 80101bc:	4b2f      	ldr	r3, [pc, #188]	@ (801027c <tx_control+0x23d4>)
 80101be:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 80101c0:	4b32      	ldr	r3, [pc, #200]	@ (801028c <tx_control+0x23e4>)
 80101c2:	781a      	ldrb	r2, [r3, #0]
 80101c4:	4b2e      	ldr	r3, [pc, #184]	@ (8010280 <tx_control+0x23d8>)
 80101c6:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 80101c8:	4b2b      	ldr	r3, [pc, #172]	@ (8010278 <tx_control+0x23d0>)
 80101ca:	2200      	movs	r2, #0
 80101cc:	801a      	strh	r2, [r3, #0]
 80101ce:	e000      	b.n	80101d2 <tx_control+0x232a>
			goto tx_wifi_timeLogger_noInit;
 80101d0:	46c0      	nop			@ (mov r8, r8)
tx_wifi_timeLogger_noInit:
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 80101d2:	4b4a      	ldr	r3, [pc, #296]	@ (80102fc <tx_control+0x2454>)
 80101d4:	2203      	movs	r2, #3
 80101d6:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegDATA) == 0){
		//	goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegDATA;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegDATA);
		numRegTx = 1343;
 80101d8:	4b49      	ldr	r3, [pc, #292]	@ (8010300 <tx_control+0x2458>)
 80101da:	4a4a      	ldr	r2, [pc, #296]	@ (8010304 <tx_control+0x245c>)
 80101dc:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 80101de:	f000 ff8a 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_timeLogger_01;
 80101e2:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 80101e4:	4b1e      	ldr	r3, [pc, #120]	@ (8010260 <tx_control+0x23b8>)
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	2b3d      	cmp	r3, #61	@ 0x3d
 80101ea:	d100      	bne.n	80101ee <tx_control+0x2346>
 80101ec:	e08c      	b.n	8010308 <tx_control+0x2460>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		codeTX = 0;
 80101ee:	4b1c      	ldr	r3, [pc, #112]	@ (8010260 <tx_control+0x23b8>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 80101f4:	4b41      	ldr	r3, [pc, #260]	@ (80102fc <tx_control+0x2454>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d104      	bne.n	8010206 <tx_control+0x235e>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 80101fc:	4b1d      	ldr	r3, [pc, #116]	@ (8010274 <tx_control+0x23cc>)
 80101fe:	2200      	movs	r2, #0
 8010200:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 8010202:	f000 ff78 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 8010206:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 8010208:	f000 ff75 	bl	80110f6 <tx_control+0x324e>
 801020c:	20000998 	.word	0x20000998
 8010210:	2000110c 	.word	0x2000110c
 8010214:	2000110d 	.word	0x2000110d
 8010218:	2000110e 	.word	0x2000110e
 801021c:	2000110f 	.word	0x2000110f
 8010220:	20001110 	.word	0x20001110
 8010224:	20001111 	.word	0x20001111
 8010228:	20000b66 	.word	0x20000b66
 801022c:	20001128 	.word	0x20001128
 8010230:	20000574 	.word	0x20000574
 8010234:	20001114 	.word	0x20001114
 8010238:	20001185 	.word	0x20001185
 801023c:	20001104 	.word	0x20001104
 8010240:	20000e50 	.word	0x20000e50
 8010244:	20000eb0 	.word	0x20000eb0
 8010248:	20000ea8 	.word	0x20000ea8
 801024c:	20000eac 	.word	0x20000eac
 8010250:	20000e51 	.word	0x20000e51
 8010254:	20000ecc 	.word	0x20000ecc
 8010258:	20000eb8 	.word	0x20000eb8
 801025c:	20000eb5 	.word	0x20000eb5
 8010260:	20000ec0 	.word	0x20000ec0
 8010264:	20000f78 	.word	0x20000f78
 8010268:	20000f80 	.word	0x20000f80
 801026c:	200010e0 	.word	0x200010e0
 8010270:	20001188 	.word	0x20001188
 8010274:	20000fec 	.word	0x20000fec
 8010278:	20001014 	.word	0x20001014
 801027c:	20001012 	.word	0x20001012
 8010280:	20001013 	.word	0x20001013
 8010284:	20000e49 	.word	0x20000e49
 8010288:	20000e36 	.word	0x20000e36
 801028c:	20000e48 	.word	0x20000e48
 8010290:	20000e37 	.word	0x20000e37
 8010294:	20000e40 	.word	0x20000e40
 8010298:	20000d28 	.word	0x20000d28
 801029c:	20000e3c 	.word	0x20000e3c
 80102a0:	0803c000 	.word	0x0803c000
 80102a4:	20000e28 	.word	0x20000e28
 80102a8:	20000e2c 	.word	0x20000e2c
 80102ac:	20000e30 	.word	0x20000e30
 80102b0:	200010d6 	.word	0x200010d6
 80102b4:	200010da 	.word	0x200010da
 80102b8:	200010dc 	.word	0x200010dc
 80102bc:	0803f810 	.word	0x0803f810
 80102c0:	20000d22 	.word	0x20000d22
 80102c4:	20000ff4 	.word	0x20000ff4
 80102c8:	20000c9c 	.word	0x20000c9c
 80102cc:	20000e4c 	.word	0x20000e4c
 80102d0:	20000e4e 	.word	0x20000e4e
 80102d4:	200001bb 	.word	0x200001bb
 80102d8:	200001bc 	.word	0x200001bc
 80102dc:	200001bd 	.word	0x200001bd
 80102e0:	200001be 	.word	0x200001be
 80102e4:	200001bf 	.word	0x200001bf
 80102e8:	200001c0 	.word	0x200001c0
 80102ec:	200001c1 	.word	0x200001c1
 80102f0:	200001c2 	.word	0x200001c2
 80102f4:	20001004 	.word	0x20001004
 80102f8:	20000ed0 	.word	0x20000ed0
 80102fc:	20001016 	.word	0x20001016
 8010300:	200010d4 	.word	0x200010d4
 8010304:	0000053f 	.word	0x0000053f
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 8010308:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 801030a:	4be7      	ldr	r3, [pc, #924]	@ (80106a8 <tx_control+0x2800>)
 801030c:	2296      	movs	r2, #150	@ 0x96
 801030e:	0052      	lsls	r2, r2, #1
 8010310:	801a      	strh	r2, [r3, #0]
		//ldw		X,#300;
		timeoutTBLE = 300;//ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
 8010312:	4be6      	ldr	r3, [pc, #920]	@ (80106ac <tx_control+0x2804>)
 8010314:	2296      	movs	r2, #150	@ 0x96
 8010316:	0052      	lsls	r2, r2, #1
 8010318:	801a      	strh	r2, [r3, #0]

		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 801031a:	4be5      	ldr	r3, [pc, #916]	@ (80106b0 <tx_control+0x2808>)
 801031c:	2203      	movs	r2, #3
 801031e:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 8010320:	4be4      	ldr	r3, [pc, #912]	@ (80106b4 <tx_control+0x280c>)
 8010322:	881a      	ldrh	r2, [r3, #0]
 8010324:	4be4      	ldr	r3, [pc, #912]	@ (80106b8 <tx_control+0x2810>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	429a      	cmp	r2, r3
 801032a:	d314      	bcc.n	8010356 <tx_control+0x24ae>
		//cntReg = 0;// ldw		cntReg,X
		// ldw		X,#eeCntRegDATA
		//cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
		//save_cntReg();// call	save_cntReg

tx_wifi_timeLogger_END:
 801032c:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
		flagsWIFI[f_timeLoggerSend] = 0;
 801032e:	4be3      	ldr	r3, [pc, #908]	@ (80106bc <tx_control+0x2814>)
 8010330:	2200      	movs	r2, #0
 8010332:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 8010334:	4be1      	ldr	r3, [pc, #900]	@ (80106bc <tx_control+0x2814>)
 8010336:	2200      	movs	r2, #0
 8010338:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 801033a:	4be1      	ldr	r3, [pc, #900]	@ (80106c0 <tx_control+0x2818>)
 801033c:	220a      	movs	r2, #10
 801033e:	701a      	strb	r2, [r3, #0]

		blockLoggWifi = 0; 		//clr	blockLoggWifi
 8010340:	4be0      	ldr	r3, [pc, #896]	@ (80106c4 <tx_control+0x281c>)
 8010342:	2200      	movs	r2, #0
 8010344:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;		//clr		byteLoggWifi
 8010346:	4be0      	ldr	r3, [pc, #896]	@ (80106c8 <tx_control+0x2820>)
 8010348:	2200      	movs	r2, #0
 801034a:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 801034c:	4bda      	ldr	r3, [pc, #872]	@ (80106b8 <tx_control+0x2810>)
 801034e:	2200      	movs	r2, #0
 8010350:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 8010352:	f000 fed0 	bl	80110f6 <tx_control+0x324e>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 8010356:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 8010358:	4bdc      	ldr	r3, [pc, #880]	@ (80106cc <tx_control+0x2824>)
 801035a:	2240      	movs	r2, #64	@ 0x40
 801035c:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 801035e:	4bdb      	ldr	r3, [pc, #876]	@ (80106cc <tx_control+0x2824>)
 8010360:	2283      	movs	r2, #131	@ 0x83
 8010362:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010364:	4bd9      	ldr	r3, [pc, #868]	@ (80106cc <tx_control+0x2824>)
 8010366:	2203      	movs	r2, #3
 8010368:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 801036a:	4bd9      	ldr	r3, [pc, #868]	@ (80106d0 <tx_control+0x2828>)
 801036c:	227b      	movs	r2, #123	@ 0x7b
 801036e:	5c9a      	ldrb	r2, [r3, r2]
 8010370:	4bd6      	ldr	r3, [pc, #856]	@ (80106cc <tx_control+0x2824>)
 8010372:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010374:	4bd6      	ldr	r3, [pc, #856]	@ (80106d0 <tx_control+0x2828>)
 8010376:	227c      	movs	r2, #124	@ 0x7c
 8010378:	5c9a      	ldrb	r2, [r3, r2]
 801037a:	4bd4      	ldr	r3, [pc, #848]	@ (80106cc <tx_control+0x2824>)
 801037c:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 801037e:	4bd2      	ldr	r3, [pc, #840]	@ (80106c8 <tx_control+0x2820>)
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d112      	bne.n	80103ac <tx_control+0x2504>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 8010386:	4bd0      	ldr	r3, [pc, #832]	@ (80106c8 <tx_control+0x2820>)
 8010388:	227e      	movs	r2, #126	@ 0x7e
 801038a:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 801038c:	4bcd      	ldr	r3, [pc, #820]	@ (80106c4 <tx_control+0x281c>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d103      	bne.n	801039c <tx_control+0x24f4>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 8010394:	4bcb      	ldr	r3, [pc, #812]	@ (80106c4 <tx_control+0x281c>)
 8010396:	2260      	movs	r2, #96	@ 0x60
 8010398:	701a      	strb	r2, [r3, #0]
 801039a:	e000      	b.n	801039e <tx_control+0x24f6>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 801039c:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 801039e:	4bc9      	ldr	r3, [pc, #804]	@ (80106c4 <tx_control+0x281c>)
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	3b01      	subs	r3, #1
 80103a4:	b2da      	uxtb	r2, r3
 80103a6:	4bc7      	ldr	r3, [pc, #796]	@ (80106c4 <tx_control+0x281c>)
 80103a8:	701a      	strb	r2, [r3, #0]
 80103aa:	e000      	b.n	80103ae <tx_control+0x2506>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 80103ac:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 80103ae:	4bc9      	ldr	r3, [pc, #804]	@ (80106d4 <tx_control+0x282c>)
 80103b0:	643b      	str	r3, [r7, #64]	@ 0x40
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 80103b2:	4bc4      	ldr	r3, [pc, #784]	@ (80106c4 <tx_control+0x281c>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	01db      	lsls	r3, r3, #7
 80103b8:	4ac3      	ldr	r2, [pc, #780]	@ (80106c8 <tx_control+0x2820>)
 80103ba:	7812      	ldrb	r2, [r2, #0]
 80103bc:	189a      	adds	r2, r3, r2
 80103be:	4bc6      	ldr	r3, [pc, #792]	@ (80106d8 <tx_control+0x2830>)
 80103c0:	18d3      	adds	r3, r2, r3
 80103c2:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 80103c4:	4bc5      	ldr	r3, [pc, #788]	@ (80106dc <tx_control+0x2834>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 80103ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103cc:	3b01      	subs	r3, #1
 80103ce:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 80103d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103d2:	3b01      	subs	r3, #1
 80103d4:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80103d6:	4bbc      	ldr	r3, [pc, #752]	@ (80106c8 <tx_control+0x2820>)
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	3b01      	subs	r3, #1
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	4bba      	ldr	r3, [pc, #744]	@ (80106c8 <tx_control+0x2820>)
 80103e0:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 80103e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80103e4:	2380      	movs	r3, #128	@ 0x80
 80103e6:	025b      	lsls	r3, r3, #9
 80103e8:	5cd2      	ldrb	r2, [r2, r3]
 80103ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103ec:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 80103ee:	4bbb      	ldr	r3, [pc, #748]	@ (80106dc <tx_control+0x2834>)
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	3301      	adds	r3, #1
 80103f4:	b2da      	uxtb	r2, r3
 80103f6:	4bb9      	ldr	r3, [pc, #740]	@ (80106dc <tx_control+0x2834>)
 80103f8:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 80103fa:	4bb8      	ldr	r3, [pc, #736]	@ (80106dc <tx_control+0x2834>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	2b08      	cmp	r3, #8
 8010400:	d800      	bhi.n	8010404 <tx_control+0x255c>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 8010402:	e7e2      	b.n	80103ca <tx_control+0x2522>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 8010404:	4bb1      	ldr	r3, [pc, #708]	@ (80106cc <tx_control+0x2824>)
 8010406:	7b5a      	ldrb	r2, [r3, #13]
 8010408:	4bb5      	ldr	r3, [pc, #724]	@ (80106e0 <tx_control+0x2838>)
 801040a:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 801040c:	4baf      	ldr	r3, [pc, #700]	@ (80106cc <tx_control+0x2824>)
 801040e:	2200      	movs	r2, #0
 8010410:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 8010412:	4bb3      	ldr	r3, [pc, #716]	@ (80106e0 <tx_control+0x2838>)
 8010414:	781a      	ldrb	r2, [r3, #0]
 8010416:	4bad      	ldr	r3, [pc, #692]	@ (80106cc <tx_control+0x2824>)
 8010418:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801041a:	4bb2      	ldr	r3, [pc, #712]	@ (80106e4 <tx_control+0x283c>)
 801041c:	4aab      	ldr	r2, [pc, #684]	@ (80106cc <tx_control+0x2824>)
 801041e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010420:	4bb1      	ldr	r3, [pc, #708]	@ (80106e8 <tx_control+0x2840>)
 8010422:	4aaa      	ldr	r2, [pc, #680]	@ (80106cc <tx_control+0x2824>)
 8010424:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 8010426:	4bb1      	ldr	r3, [pc, #708]	@ (80106ec <tx_control+0x2844>)
 8010428:	4ab1      	ldr	r2, [pc, #708]	@ (80106f0 <tx_control+0x2848>)
 801042a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 801042c:	4bb1      	ldr	r3, [pc, #708]	@ (80106f4 <tx_control+0x284c>)
 801042e:	220f      	movs	r2, #15
 8010430:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010432:	4bb1      	ldr	r3, [pc, #708]	@ (80106f8 <tx_control+0x2850>)
 8010434:	2200      	movs	r2, #0
 8010436:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010438:	4bb0      	ldr	r3, [pc, #704]	@ (80106fc <tx_control+0x2854>)
 801043a:	2200      	movs	r2, #0
 801043c:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801043e:	4bae      	ldr	r3, [pc, #696]	@ (80106f8 <tx_control+0x2850>)
 8010440:	2201      	movs	r2, #1
 8010442:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010444:	4bae      	ldr	r3, [pc, #696]	@ (8010700 <tx_control+0x2858>)
 8010446:	2255      	movs	r2, #85	@ 0x55
 8010448:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 801044a:	4bae      	ldr	r3, [pc, #696]	@ (8010704 <tx_control+0x285c>)
 801044c:	2200      	movs	r2, #0
 801044e:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 8010450:	4b99      	ldr	r3, [pc, #612]	@ (80106b8 <tx_control+0x2810>)
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	3301      	adds	r3, #1
 8010456:	b29a      	uxth	r2, r3
 8010458:	4b97      	ldr	r3, [pc, #604]	@ (80106b8 <tx_control+0x2810>)
 801045a:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 801045c:	f000 fe4b 	bl	80110f6 <tx_control+0x324e>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 8010460:	46c0      	nop			@ (mov r8, r8)
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		//if(!flagsWIFI[f_eventLoggerSend]){
		if(flagsWIFI[f_eventLoggerSend]){
 8010462:	4b96      	ldr	r3, [pc, #600]	@ (80106bc <tx_control+0x2814>)
 8010464:	789b      	ldrb	r3, [r3, #2]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d100      	bne.n	801046c <tx_control+0x25c4>
 801046a:	e1e8      	b.n	801083e <tx_control+0x2996>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 801046c:	46c0      	nop			@ (mov r8, r8)
//tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 801046e:	4b93      	ldr	r3, [pc, #588]	@ (80106bc <tx_control+0x2814>)
 8010470:	791b      	ldrb	r3, [r3, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d000      	beq.n	8010478 <tx_control+0x25d0>
 8010476:	e0b7      	b.n	80105e8 <tx_control+0x2740>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 8010478:	4b90      	ldr	r3, [pc, #576]	@ (80106bc <tx_control+0x2814>)
 801047a:	2201      	movs	r2, #1
 801047c:	711a      	strb	r2, [r3, #4]

		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_eventLogger_cmd
		if(cntRegTxWifi)
 801047e:	4b8e      	ldr	r3, [pc, #568]	@ (80106b8 <tx_control+0x2810>)
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d133      	bne.n	80104ee <tx_control+0x2646>
			goto tx_wifi_eventLogger_cmd;
		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 8010486:	4ba0      	ldr	r3, [pc, #640]	@ (8010708 <tx_control+0x2860>)
 8010488:	781a      	ldrb	r2, [r3, #0]
 801048a:	4ba0      	ldr	r3, [pc, #640]	@ (801070c <tx_control+0x2864>)
 801048c:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 801048e:	4ba0      	ldr	r3, [pc, #640]	@ (8010710 <tx_control+0x2868>)
 8010490:	781a      	ldrb	r2, [r3, #0]
 8010492:	4ba0      	ldr	r3, [pc, #640]	@ (8010714 <tx_control+0x286c>)
 8010494:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 8010496:	4ba0      	ldr	r3, [pc, #640]	@ (8010718 <tx_control+0x2870>)
 8010498:	4aa0      	ldr	r2, [pc, #640]	@ (801071c <tx_control+0x2874>)
 801049a:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 801049c:	4ba0      	ldr	r3, [pc, #640]	@ (8010720 <tx_control+0x2878>)
 801049e:	4aa1      	ldr	r2, [pc, #644]	@ (8010724 <tx_control+0x287c>)
 80104a0:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 80104a2:	4b9c      	ldr	r3, [pc, #624]	@ (8010714 <tx_control+0x286c>)
 80104a4:	7819      	ldrb	r1, [r3, #0]
 80104a6:	4b9d      	ldr	r3, [pc, #628]	@ (801071c <tx_control+0x2874>)
 80104a8:	227e      	movs	r2, #126	@ 0x7e
 80104aa:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 80104ac:	4b9e      	ldr	r3, [pc, #632]	@ (8010728 <tx_control+0x2880>)
 80104ae:	22aa      	movs	r2, #170	@ 0xaa
 80104b0:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 80104b2:	4b9b      	ldr	r3, [pc, #620]	@ (8010720 <tx_control+0x2878>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a95      	ldr	r2, [pc, #596]	@ (801070c <tx_control+0x2864>)
 80104b8:	7812      	ldrb	r2, [r2, #0]
 80104ba:	01d2      	lsls	r2, r2, #7
 80104bc:	189a      	adds	r2, r3, r2
 80104be:	4b9b      	ldr	r3, [pc, #620]	@ (801072c <tx_control+0x2884>)
 80104c0:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 80104c2:	4b95      	ldr	r3, [pc, #596]	@ (8010718 <tx_control+0x2870>)
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	4b9a      	ldr	r3, [pc, #616]	@ (8010730 <tx_control+0x2888>)
 80104c8:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 80104ca:	f7f6 ff61 	bl	8007390 <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 80104ce:	4b99      	ldr	r3, [pc, #612]	@ (8010734 <tx_control+0x288c>)
 80104d0:	881a      	ldrh	r2, [r3, #0]
 80104d2:	4b99      	ldr	r3, [pc, #612]	@ (8010738 <tx_control+0x2890>)
 80104d4:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 80104d6:	4b99      	ldr	r3, [pc, #612]	@ (801073c <tx_control+0x2894>)
 80104d8:	4a99      	ldr	r2, [pc, #612]	@ (8010740 <tx_control+0x2898>)
 80104da:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 80104dc:	4b96      	ldr	r3, [pc, #600]	@ (8010738 <tx_control+0x2890>)
 80104de:	881a      	ldrh	r2, [r3, #0]
 80104e0:	4b98      	ldr	r3, [pc, #608]	@ (8010744 <tx_control+0x289c>)
 80104e2:	801a      	strh	r2, [r3, #0]

		save_cntReg();		// call	save_cntReg
 80104e4:	f7f6 fe40 	bl	8007168 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 80104e8:	f7f6 fe56 	bl	8007198 <save_timeUNIX>
 80104ec:	e000      	b.n	80104f0 <tx_control+0x2648>
			goto tx_wifi_eventLogger_cmd;
 80104ee:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_cmd:
		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 80104f0:	4b76      	ldr	r3, [pc, #472]	@ (80106cc <tx_control+0x2824>)
 80104f2:	2240      	movs	r2, #64	@ 0x40
 80104f4:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 80104f6:	4b75      	ldr	r3, [pc, #468]	@ (80106cc <tx_control+0x2824>)
 80104f8:	2286      	movs	r2, #134	@ 0x86
 80104fa:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 80104fc:	4b74      	ldr	r3, [pc, #464]	@ (80106d0 <tx_control+0x2828>)
 80104fe:	227b      	movs	r2, #123	@ 0x7b
 8010500:	5c9a      	ldrb	r2, [r3, r2]
 8010502:	4b72      	ldr	r3, [pc, #456]	@ (80106cc <tx_control+0x2824>)
 8010504:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 8010506:	4b72      	ldr	r3, [pc, #456]	@ (80106d0 <tx_control+0x2828>)
 8010508:	227c      	movs	r2, #124	@ 0x7c
 801050a:	5c9a      	ldrb	r2, [r3, r2]
 801050c:	4b6f      	ldr	r3, [pc, #444]	@ (80106cc <tx_control+0x2824>)
 801050e:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 8010510:	4b8d      	ldr	r3, [pc, #564]	@ (8010748 <tx_control+0x28a0>)
 8010512:	881b      	ldrh	r3, [r3, #0]
 8010514:	0a1b      	lsrs	r3, r3, #8
 8010516:	b29b      	uxth	r3, r3
 8010518:	b2da      	uxtb	r2, r3
 801051a:	4b6c      	ldr	r3, [pc, #432]	@ (80106cc <tx_control+0x2824>)
 801051c:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 801051e:	4b8a      	ldr	r3, [pc, #552]	@ (8010748 <tx_control+0x28a0>)
 8010520:	881b      	ldrh	r3, [r3, #0]
 8010522:	b2da      	uxtb	r2, r3
 8010524:	4b69      	ldr	r3, [pc, #420]	@ (80106cc <tx_control+0x2824>)
 8010526:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 8010528:	4b88      	ldr	r3, [pc, #544]	@ (801074c <tx_control+0x28a4>)
 801052a:	881b      	ldrh	r3, [r3, #0]
 801052c:	0a1b      	lsrs	r3, r3, #8
 801052e:	b29b      	uxth	r3, r3
 8010530:	b2da      	uxtb	r2, r3
 8010532:	4b66      	ldr	r3, [pc, #408]	@ (80106cc <tx_control+0x2824>)
 8010534:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 8010536:	4b85      	ldr	r3, [pc, #532]	@ (801074c <tx_control+0x28a4>)
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	b2da      	uxtb	r2, r3
 801053c:	4b63      	ldr	r3, [pc, #396]	@ (80106cc <tx_control+0x2824>)
 801053e:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;

		bufferWifiTx[8] = reeLat1;
 8010540:	4b83      	ldr	r3, [pc, #524]	@ (8010750 <tx_control+0x28a8>)
 8010542:	781a      	ldrb	r2, [r3, #0]
 8010544:	4b61      	ldr	r3, [pc, #388]	@ (80106cc <tx_control+0x2824>)
 8010546:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 8010548:	4b82      	ldr	r3, [pc, #520]	@ (8010754 <tx_control+0x28ac>)
 801054a:	781a      	ldrb	r2, [r3, #0]
 801054c:	4b5f      	ldr	r3, [pc, #380]	@ (80106cc <tx_control+0x2824>)
 801054e:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 8010550:	4b81      	ldr	r3, [pc, #516]	@ (8010758 <tx_control+0x28b0>)
 8010552:	781a      	ldrb	r2, [r3, #0]
 8010554:	4b5d      	ldr	r3, [pc, #372]	@ (80106cc <tx_control+0x2824>)
 8010556:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 8010558:	4b80      	ldr	r3, [pc, #512]	@ (801075c <tx_control+0x28b4>)
 801055a:	781a      	ldrb	r2, [r3, #0]
 801055c:	4b5b      	ldr	r3, [pc, #364]	@ (80106cc <tx_control+0x2824>)
 801055e:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 8010560:	4b7f      	ldr	r3, [pc, #508]	@ (8010760 <tx_control+0x28b8>)
 8010562:	781a      	ldrb	r2, [r3, #0]
 8010564:	4b59      	ldr	r3, [pc, #356]	@ (80106cc <tx_control+0x2824>)
 8010566:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 8010568:	4b7e      	ldr	r3, [pc, #504]	@ (8010764 <tx_control+0x28bc>)
 801056a:	781a      	ldrb	r2, [r3, #0]
 801056c:	4b57      	ldr	r3, [pc, #348]	@ (80106cc <tx_control+0x2824>)
 801056e:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 8010570:	4b7d      	ldr	r3, [pc, #500]	@ (8010768 <tx_control+0x28c0>)
 8010572:	781a      	ldrb	r2, [r3, #0]
 8010574:	4b55      	ldr	r3, [pc, #340]	@ (80106cc <tx_control+0x2824>)
 8010576:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 8010578:	4b7c      	ldr	r3, [pc, #496]	@ (801076c <tx_control+0x28c4>)
 801057a:	781a      	ldrb	r2, [r3, #0]
 801057c:	4b53      	ldr	r3, [pc, #332]	@ (80106cc <tx_control+0x2824>)
 801057e:	73da      	strb	r2, [r3, #15]


		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010580:	4b58      	ldr	r3, [pc, #352]	@ (80106e4 <tx_control+0x283c>)
 8010582:	4a52      	ldr	r2, [pc, #328]	@ (80106cc <tx_control+0x2824>)
 8010584:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010586:	4b58      	ldr	r3, [pc, #352]	@ (80106e8 <tx_control+0x2840>)
 8010588:	4a50      	ldr	r2, [pc, #320]	@ (80106cc <tx_control+0x2824>)
 801058a:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 801058c:	4b57      	ldr	r3, [pc, #348]	@ (80106ec <tx_control+0x2844>)
 801058e:	4a78      	ldr	r2, [pc, #480]	@ (8010770 <tx_control+0x28c8>)
 8010590:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 8010592:	4b58      	ldr	r3, [pc, #352]	@ (80106f4 <tx_control+0x284c>)
 8010594:	2210      	movs	r2, #16
 8010596:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010598:	4b57      	ldr	r3, [pc, #348]	@ (80106f8 <tx_control+0x2850>)
 801059a:	2200      	movs	r2, #0
 801059c:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 801059e:	4b57      	ldr	r3, [pc, #348]	@ (80106fc <tx_control+0x2854>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80105a4:	4b54      	ldr	r3, [pc, #336]	@ (80106f8 <tx_control+0x2850>)
 80105a6:	2201      	movs	r2, #1
 80105a8:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 80105aa:	4b55      	ldr	r3, [pc, #340]	@ (8010700 <tx_control+0x2858>)
 80105ac:	2255      	movs	r2, #85	@ 0x55
 80105ae:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 80105b0:	4b54      	ldr	r3, [pc, #336]	@ (8010704 <tx_control+0x285c>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	701a      	strb	r2, [r3, #0]

//		;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
//		ldw		X,cntRegTxWifi
//		tnzw	X
//		jrne	tx_wifi_eventLogger_noInit
		if(cntRegTxWifi)
 80105b6:	4b40      	ldr	r3, [pc, #256]	@ (80106b8 <tx_control+0x2810>)
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d10b      	bne.n	80105d6 <tx_control+0x272e>

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 80105be:	4b52      	ldr	r3, [pc, #328]	@ (8010708 <tx_control+0x2860>)
 80105c0:	781a      	ldrb	r2, [r3, #0]
 80105c2:	4b40      	ldr	r3, [pc, #256]	@ (80106c4 <tx_control+0x281c>)
 80105c4:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 80105c6:	4b52      	ldr	r3, [pc, #328]	@ (8010710 <tx_control+0x2868>)
 80105c8:	781a      	ldrb	r2, [r3, #0]
 80105ca:	4b3f      	ldr	r3, [pc, #252]	@ (80106c8 <tx_control+0x2820>)
 80105cc:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 80105ce:	4b3a      	ldr	r3, [pc, #232]	@ (80106b8 <tx_control+0x2810>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	801a      	strh	r2, [r3, #0]
 80105d4:	e000      	b.n	80105d8 <tx_control+0x2730>
			goto tx_wifi_eventLogger_noInit;
 80105d6:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_noInit:
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 80105d8:	4b35      	ldr	r3, [pc, #212]	@ (80106b0 <tx_control+0x2808>)
 80105da:	2203      	movs	r2, #3
 80105dc:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegEVENT)==0){
		//	goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegEVENT);
		numRegTx = 1439;
 80105de:	4b35      	ldr	r3, [pc, #212]	@ (80106b4 <tx_control+0x280c>)
 80105e0:	4a64      	ldr	r2, [pc, #400]	@ (8010774 <tx_control+0x28cc>)
 80105e2:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 80105e4:	f000 fd87 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 80105e8:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 80105ea:	4b46      	ldr	r3, [pc, #280]	@ (8010704 <tx_control+0x285c>)
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	2b3d      	cmp	r3, #61	@ 0x3d
 80105f0:	d00e      	beq.n	8010610 <tx_control+0x2768>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		codeTX = 0;
 80105f2:	4b44      	ldr	r3, [pc, #272]	@ (8010704 <tx_control+0x285c>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 80105f8:	4b2d      	ldr	r3, [pc, #180]	@ (80106b0 <tx_control+0x2808>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d104      	bne.n	801060a <tx_control+0x2762>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 8010600:	4b2e      	ldr	r3, [pc, #184]	@ (80106bc <tx_control+0x2814>)
 8010602:	2200      	movs	r2, #0
 8010604:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 8010606:	f000 fd76 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 801060a:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 801060c:	f000 fd73 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 8010610:	46c0      	nop			@ (mov r8, r8)
//		; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
//		ldw		X,#300;
//		ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
//		ldw		X,#300;
//		ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
		timeoutTWF = 300;
 8010612:	4b25      	ldr	r3, [pc, #148]	@ (80106a8 <tx_control+0x2800>)
 8010614:	2296      	movs	r2, #150	@ 0x96
 8010616:	0052      	lsls	r2, r2, #1
 8010618:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 801061a:	4b24      	ldr	r3, [pc, #144]	@ (80106ac <tx_control+0x2804>)
 801061c:	2296      	movs	r2, #150	@ 0x96
 801061e:	0052      	lsls	r2, r2, #1
 8010620:	801a      	strh	r2, [r3, #0]
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 8010622:	4b23      	ldr	r3, [pc, #140]	@ (80106b0 <tx_control+0x2808>)
 8010624:	2203      	movs	r2, #3
 8010626:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 8010628:	4b22      	ldr	r3, [pc, #136]	@ (80106b4 <tx_control+0x280c>)
 801062a:	881a      	ldrh	r2, [r3, #0]
 801062c:	4b22      	ldr	r3, [pc, #136]	@ (80106b8 <tx_control+0x2810>)
 801062e:	881b      	ldrh	r3, [r3, #0]
 8010630:	429a      	cmp	r2, r3
 8010632:	d314      	bcc.n	801065e <tx_control+0x27b6>
//		cntReg = 0;// ldw		cntReg,X
//		// ldw		X,#eeCntRegEVENT
//		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
//		save_cntReg();// call	save_cntReg

tx_wifi_eventLogger_END:
 8010634:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
		flagsWIFI[f_eventLoggerSend] = 0;
 8010636:	4b21      	ldr	r3, [pc, #132]	@ (80106bc <tx_control+0x2814>)
 8010638:	2200      	movs	r2, #0
 801063a:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 801063c:	4b1f      	ldr	r3, [pc, #124]	@ (80106bc <tx_control+0x2814>)
 801063e:	2200      	movs	r2, #0
 8010640:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 8010642:	4b1f      	ldr	r3, [pc, #124]	@ (80106c0 <tx_control+0x2818>)
 8010644:	220a      	movs	r2, #10
 8010646:	701a      	strb	r2, [r3, #0]
		blockLoggWifi = 0;//clr		blockLoggWifi
 8010648:	4b1e      	ldr	r3, [pc, #120]	@ (80106c4 <tx_control+0x281c>)
 801064a:	2200      	movs	r2, #0
 801064c:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;//clr		byteLoggWifi
 801064e:	4b1e      	ldr	r3, [pc, #120]	@ (80106c8 <tx_control+0x2820>)
 8010650:	2200      	movs	r2, #0
 8010652:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 8010654:	4b18      	ldr	r3, [pc, #96]	@ (80106b8 <tx_control+0x2810>)
 8010656:	2200      	movs	r2, #0
 8010658:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;//jp		end_tx_wifi
 801065a:	f000 fd4c 	bl	80110f6 <tx_control+0x324e>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 801065e:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 8010660:	4b1a      	ldr	r3, [pc, #104]	@ (80106cc <tx_control+0x2824>)
 8010662:	2240      	movs	r2, #64	@ 0x40
 8010664:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 8010666:	4b19      	ldr	r3, [pc, #100]	@ (80106cc <tx_control+0x2824>)
 8010668:	2284      	movs	r2, #132	@ 0x84
 801066a:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 801066c:	4b17      	ldr	r3, [pc, #92]	@ (80106cc <tx_control+0x2824>)
 801066e:	2203      	movs	r2, #3
 8010670:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 8010672:	4b17      	ldr	r3, [pc, #92]	@ (80106d0 <tx_control+0x2828>)
 8010674:	227b      	movs	r2, #123	@ 0x7b
 8010676:	5c9a      	ldrb	r2, [r3, r2]
 8010678:	4b14      	ldr	r3, [pc, #80]	@ (80106cc <tx_control+0x2824>)
 801067a:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 801067c:	4b14      	ldr	r3, [pc, #80]	@ (80106d0 <tx_control+0x2828>)
 801067e:	227c      	movs	r2, #124	@ 0x7c
 8010680:	5c9a      	ldrb	r2, [r3, r2]
 8010682:	4b12      	ldr	r3, [pc, #72]	@ (80106cc <tx_control+0x2824>)
 8010684:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 8010686:	4b10      	ldr	r3, [pc, #64]	@ (80106c8 <tx_control+0x2820>)
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d000      	beq.n	8010690 <tx_control+0x27e8>
 801068e:	e07b      	b.n	8010788 <tx_control+0x28e0>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 8010690:	4b0d      	ldr	r3, [pc, #52]	@ (80106c8 <tx_control+0x2820>)
 8010692:	227e      	movs	r2, #126	@ 0x7e
 8010694:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 8010696:	4b0b      	ldr	r3, [pc, #44]	@ (80106c4 <tx_control+0x281c>)
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d16c      	bne.n	8010778 <tx_control+0x28d0>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 801069e:	4b09      	ldr	r3, [pc, #36]	@ (80106c4 <tx_control+0x281c>)
 80106a0:	22a0      	movs	r2, #160	@ 0xa0
 80106a2:	701a      	strb	r2, [r3, #0]
 80106a4:	e069      	b.n	801077a <tx_control+0x28d2>
 80106a6:	46c0      	nop			@ (mov r8, r8)
 80106a8:	20000fe8 	.word	0x20000fe8
 80106ac:	20001198 	.word	0x20001198
 80106b0:	20001016 	.word	0x20001016
 80106b4:	200010d4 	.word	0x200010d4
 80106b8:	20001014 	.word	0x20001014
 80106bc:	20000fec 	.word	0x20000fec
 80106c0:	20001017 	.word	0x20001017
 80106c4:	20001012 	.word	0x20001012
 80106c8:	20001013 	.word	0x20001013
 80106cc:	20000ff4 	.word	0x20000ff4
 80106d0:	20000c9c 	.word	0x20000c9c
 80106d4:	20001002 	.word	0x20001002
 80106d8:	0803c000 	.word	0x0803c000
 80106dc:	20000b67 	.word	0x20000b67
 80106e0:	20000b66 	.word	0x20000b66
 80106e4:	20000eb0 	.word	0x20000eb0
 80106e8:	20000ea8 	.word	0x20000ea8
 80106ec:	20000eac 	.word	0x20000eac
 80106f0:	20001003 	.word	0x20001003
 80106f4:	20000ecc 	.word	0x20000ecc
 80106f8:	20000eb8 	.word	0x20000eb8
 80106fc:	20000ed0 	.word	0x20000ed0
 8010700:	20000eb5 	.word	0x20000eb5
 8010704:	20000ec0 	.word	0x20000ec0
 8010708:	20000e4b 	.word	0x20000e4b
 801070c:	20000e36 	.word	0x20000e36
 8010710:	20000e4a 	.word	0x20000e4a
 8010714:	20000e37 	.word	0x20000e37
 8010718:	20000e40 	.word	0x20000e40
 801071c:	20000da8 	.word	0x20000da8
 8010720:	20000e3c 	.word	0x20000e3c
 8010724:	08037000 	.word	0x08037000
 8010728:	20000e28 	.word	0x20000e28
 801072c:	20000e2c 	.word	0x20000e2c
 8010730:	20000e30 	.word	0x20000e30
 8010734:	200010d8 	.word	0x200010d8
 8010738:	200010da 	.word	0x200010da
 801073c:	200010dc 	.word	0x200010dc
 8010740:	0803f812 	.word	0x0803f812
 8010744:	20000d24 	.word	0x20000d24
 8010748:	20000e4c 	.word	0x20000e4c
 801074c:	20000e4e 	.word	0x20000e4e
 8010750:	200001bb 	.word	0x200001bb
 8010754:	200001bc 	.word	0x200001bc
 8010758:	200001bd 	.word	0x200001bd
 801075c:	200001be 	.word	0x200001be
 8010760:	200001bf 	.word	0x200001bf
 8010764:	200001c0 	.word	0x200001c0
 8010768:	200001c1 	.word	0x200001c1
 801076c:	200001c2 	.word	0x200001c2
 8010770:	20001004 	.word	0x20001004
 8010774:	0000059f 	.word	0x0000059f
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 8010778:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 801077a:	4bde      	ldr	r3, [pc, #888]	@ (8010af4 <tx_control+0x2c4c>)
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	3b01      	subs	r3, #1
 8010780:	b2da      	uxtb	r2, r3
 8010782:	4bdc      	ldr	r3, [pc, #880]	@ (8010af4 <tx_control+0x2c4c>)
 8010784:	701a      	strb	r2, [r3, #0]
 8010786:	e000      	b.n	801078a <tx_control+0x28e2>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 8010788:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 801078a:	4bdb      	ldr	r3, [pc, #876]	@ (8010af8 <tx_control+0x2c50>)
 801078c:	643b      	str	r3, [r7, #64]	@ 0x40
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 801078e:	4bdb      	ldr	r3, [pc, #876]	@ (8010afc <tx_control+0x2c54>)
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	001a      	movs	r2, r3
 8010794:	4bd7      	ldr	r3, [pc, #860]	@ (8010af4 <tx_control+0x2c4c>)
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	01db      	lsls	r3, r3, #7
 801079a:	18d2      	adds	r2, r2, r3
 801079c:	4bd8      	ldr	r3, [pc, #864]	@ (8010b00 <tx_control+0x2c58>)
 801079e:	18d3      	adds	r3, r2, r3
 80107a0:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 80107a2:	4bd8      	ldr	r3, [pc, #864]	@ (8010b04 <tx_control+0x2c5c>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 80107a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107aa:	3b01      	subs	r3, #1
 80107ac:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 80107ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107b0:	3b01      	subs	r3, #1
 80107b2:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80107b4:	4bd1      	ldr	r3, [pc, #836]	@ (8010afc <tx_control+0x2c54>)
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	b2da      	uxtb	r2, r3
 80107bc:	4bcf      	ldr	r3, [pc, #828]	@ (8010afc <tx_control+0x2c54>)
 80107be:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 80107c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80107c2:	2380      	movs	r3, #128	@ 0x80
 80107c4:	025b      	lsls	r3, r3, #9
 80107c6:	5cd2      	ldrb	r2, [r2, r3]
 80107c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107ca:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 80107cc:	4bcd      	ldr	r3, [pc, #820]	@ (8010b04 <tx_control+0x2c5c>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	3301      	adds	r3, #1
 80107d2:	b2da      	uxtb	r2, r3
 80107d4:	4bcb      	ldr	r3, [pc, #812]	@ (8010b04 <tx_control+0x2c5c>)
 80107d6:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 80107d8:	4bca      	ldr	r3, [pc, #808]	@ (8010b04 <tx_control+0x2c5c>)
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b0d      	cmp	r3, #13
 80107de:	d800      	bhi.n	80107e2 <tx_control+0x293a>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 80107e0:	e7e2      	b.n	80107a8 <tx_control+0x2900>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 80107e2:	4bc9      	ldr	r3, [pc, #804]	@ (8010b08 <tx_control+0x2c60>)
 80107e4:	7c9a      	ldrb	r2, [r3, #18]
 80107e6:	4bc9      	ldr	r3, [pc, #804]	@ (8010b0c <tx_control+0x2c64>)
 80107e8:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 80107ea:	4bc7      	ldr	r3, [pc, #796]	@ (8010b08 <tx_control+0x2c60>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 80107f0:	4bc6      	ldr	r3, [pc, #792]	@ (8010b0c <tx_control+0x2c64>)
 80107f2:	781a      	ldrb	r2, [r3, #0]
 80107f4:	4bc4      	ldr	r3, [pc, #784]	@ (8010b08 <tx_control+0x2c60>)
 80107f6:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80107f8:	4bc5      	ldr	r3, [pc, #788]	@ (8010b10 <tx_control+0x2c68>)
 80107fa:	4ac3      	ldr	r2, [pc, #780]	@ (8010b08 <tx_control+0x2c60>)
 80107fc:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80107fe:	4bc5      	ldr	r3, [pc, #788]	@ (8010b14 <tx_control+0x2c6c>)
 8010800:	4ac1      	ldr	r2, [pc, #772]	@ (8010b08 <tx_control+0x2c60>)
 8010802:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 8010804:	4bc4      	ldr	r3, [pc, #784]	@ (8010b18 <tx_control+0x2c70>)
 8010806:	4ac5      	ldr	r2, [pc, #788]	@ (8010b1c <tx_control+0x2c74>)
 8010808:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 801080a:	4bc5      	ldr	r3, [pc, #788]	@ (8010b20 <tx_control+0x2c78>)
 801080c:	2214      	movs	r2, #20
 801080e:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010810:	4bc4      	ldr	r3, [pc, #784]	@ (8010b24 <tx_control+0x2c7c>)
 8010812:	2200      	movs	r2, #0
 8010814:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010816:	4bc4      	ldr	r3, [pc, #784]	@ (8010b28 <tx_control+0x2c80>)
 8010818:	2200      	movs	r2, #0
 801081a:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801081c:	4bc1      	ldr	r3, [pc, #772]	@ (8010b24 <tx_control+0x2c7c>)
 801081e:	2201      	movs	r2, #1
 8010820:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010822:	4bc2      	ldr	r3, [pc, #776]	@ (8010b2c <tx_control+0x2c84>)
 8010824:	2255      	movs	r2, #85	@ 0x55
 8010826:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 8010828:	4bc1      	ldr	r3, [pc, #772]	@ (8010b30 <tx_control+0x2c88>)
 801082a:	2200      	movs	r2, #0
 801082c:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 801082e:	4bc1      	ldr	r3, [pc, #772]	@ (8010b34 <tx_control+0x2c8c>)
 8010830:	881b      	ldrh	r3, [r3, #0]
 8010832:	3301      	adds	r3, #1
 8010834:	b29a      	uxth	r2, r3
 8010836:	4bbf      	ldr	r3, [pc, #764]	@ (8010b34 <tx_control+0x2c8c>)
 8010838:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 801083a:	f000 fc5c 	bl	80110f6 <tx_control+0x324e>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 801083e:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 8010840:	4bbd      	ldr	r3, [pc, #756]	@ (8010b38 <tx_control+0x2c90>)
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d001      	beq.n	801084c <tx_control+0x29a4>
 8010848:	f000 fc4e 	bl	80110e8 <tx_control+0x3240>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 801084c:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 801084e:	4bb7      	ldr	r3, [pc, #732]	@ (8010b2c <tx_control+0x2c84>)
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <tx_control+0x29b2>
 8010856:	f000 fc4a 	bl	80110ee <tx_control+0x3246>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 801085a:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 801085c:	4bb7      	ldr	r3, [pc, #732]	@ (8010b3c <tx_control+0x2c94>)
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d147      	bne.n	80108f4 <tx_control+0x2a4c>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 8010864:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 8010866:	4bb6      	ldr	r3, [pc, #728]	@ (8010b40 <tx_control+0x2c98>)
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d100      	bne.n	8010870 <tx_control+0x29c8>
 801086e:	e07f      	b.n	8010970 <tx_control+0x2ac8>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 8010870:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 8010872:	4bb4      	ldr	r3, [pc, #720]	@ (8010b44 <tx_control+0x2c9c>)
 8010874:	2240      	movs	r2, #64	@ 0x40
 8010876:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 8010878:	4bb2      	ldr	r3, [pc, #712]	@ (8010b44 <tx_control+0x2c9c>)
 801087a:	2282      	movs	r2, #130	@ 0x82
 801087c:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = reePlantilla[eeversion1];
 801087e:	4bb2      	ldr	r3, [pc, #712]	@ (8010b48 <tx_control+0x2ca0>)
 8010880:	227b      	movs	r2, #123	@ 0x7b
 8010882:	5c9a      	ldrb	r2, [r3, r2]
 8010884:	4baf      	ldr	r3, [pc, #700]	@ (8010b44 <tx_control+0x2c9c>)
 8010886:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = reePlantilla[eeversion2];
 8010888:	4baf      	ldr	r3, [pc, #700]	@ (8010b48 <tx_control+0x2ca0>)
 801088a:	227c      	movs	r2, #124	@ 0x7c
 801088c:	5c9a      	ldrb	r2, [r3, r2]
 801088e:	4bad      	ldr	r3, [pc, #692]	@ (8010b44 <tx_control+0x2c9c>)
 8010890:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 8010892:	4bae      	ldr	r3, [pc, #696]	@ (8010b4c <tx_control+0x2ca4>)
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	0a1b      	lsrs	r3, r3, #8
 8010898:	b29b      	uxth	r3, r3
 801089a:	b2da      	uxtb	r2, r3
 801089c:	4ba9      	ldr	r3, [pc, #676]	@ (8010b44 <tx_control+0x2c9c>)
 801089e:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 80108a0:	4baa      	ldr	r3, [pc, #680]	@ (8010b4c <tx_control+0x2ca4>)
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	b2da      	uxtb	r2, r3
 80108a6:	4ba7      	ldr	r3, [pc, #668]	@ (8010b44 <tx_control+0x2c9c>)
 80108a8:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 80108aa:	4ba9      	ldr	r3, [pc, #676]	@ (8010b50 <tx_control+0x2ca8>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	0a1b      	lsrs	r3, r3, #8
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	b2da      	uxtb	r2, r3
 80108b4:	4ba3      	ldr	r3, [pc, #652]	@ (8010b44 <tx_control+0x2c9c>)
 80108b6:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 80108b8:	4ba5      	ldr	r3, [pc, #660]	@ (8010b50 <tx_control+0x2ca8>)
 80108ba:	881b      	ldrh	r3, [r3, #0]
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	4ba1      	ldr	r3, [pc, #644]	@ (8010b44 <tx_control+0x2c9c>)
 80108c0:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 80108c2:	4ba0      	ldr	r3, [pc, #640]	@ (8010b44 <tx_control+0x2c9c>)
 80108c4:	2201      	movs	r2, #1
 80108c6:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 80108c8:	4ba2      	ldr	r3, [pc, #648]	@ (8010b54 <tx_control+0x2cac>)
 80108ca:	781a      	ldrb	r2, [r3, #0]
 80108cc:	4b9d      	ldr	r3, [pc, #628]	@ (8010b44 <tx_control+0x2c9c>)
 80108ce:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 80108d0:	4ba1      	ldr	r3, [pc, #644]	@ (8010b58 <tx_control+0x2cb0>)
 80108d2:	781a      	ldrb	r2, [r3, #0]
 80108d4:	4b9b      	ldr	r3, [pc, #620]	@ (8010b44 <tx_control+0x2c9c>)
 80108d6:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 80108d8:	4ba0      	ldr	r3, [pc, #640]	@ (8010b5c <tx_control+0x2cb4>)
 80108da:	781a      	ldrb	r2, [r3, #0]
 80108dc:	4b99      	ldr	r3, [pc, #612]	@ (8010b44 <tx_control+0x2c9c>)
 80108de:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 80108e0:	4b96      	ldr	r3, [pc, #600]	@ (8010b3c <tx_control+0x2c94>)
 80108e2:	2201      	movs	r2, #1
 80108e4:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 80108e6:	4b9e      	ldr	r3, [pc, #632]	@ (8010b60 <tx_control+0x2cb8>)
 80108e8:	2250      	movs	r2, #80	@ 0x50
 80108ea:	5c9b      	ldrb	r3, [r3, r2]
 80108ec:	001a      	movs	r2, r3
 80108ee:	4b9d      	ldr	r3, [pc, #628]	@ (8010b64 <tx_control+0x2cbc>)
 80108f0:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 80108f2:	e040      	b.n	8010976 <tx_control+0x2ace>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 80108f4:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 80108f6:	4b92      	ldr	r3, [pc, #584]	@ (8010b40 <tx_control+0x2c98>)
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d13a      	bne.n	8010974 <tx_control+0x2acc>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 80108fe:	4b99      	ldr	r3, [pc, #612]	@ (8010b64 <tx_control+0x2cbc>)
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d003      	beq.n	801090e <tx_control+0x2a66>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010906:	4b8d      	ldr	r3, [pc, #564]	@ (8010b3c <tx_control+0x2c94>)
 8010908:	2200      	movs	r2, #0
 801090a:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 801090c:	e033      	b.n	8010976 <tx_control+0x2ace>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 801090e:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 8010910:	4b8e      	ldr	r3, [pc, #568]	@ (8010b4c <tx_control+0x2ca4>)
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	0a1b      	lsrs	r3, r3, #8
 8010916:	b29b      	uxth	r3, r3
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b8a      	ldr	r3, [pc, #552]	@ (8010b44 <tx_control+0x2c9c>)
 801091c:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 801091e:	4b8b      	ldr	r3, [pc, #556]	@ (8010b4c <tx_control+0x2ca4>)
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	b2da      	uxtb	r2, r3
 8010924:	4b87      	ldr	r3, [pc, #540]	@ (8010b44 <tx_control+0x2c9c>)
 8010926:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 8010928:	4b89      	ldr	r3, [pc, #548]	@ (8010b50 <tx_control+0x2ca8>)
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	0a1b      	lsrs	r3, r3, #8
 801092e:	b29b      	uxth	r3, r3
 8010930:	b2da      	uxtb	r2, r3
 8010932:	4b84      	ldr	r3, [pc, #528]	@ (8010b44 <tx_control+0x2c9c>)
 8010934:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8010936:	4b86      	ldr	r3, [pc, #536]	@ (8010b50 <tx_control+0x2ca8>)
 8010938:	881b      	ldrh	r3, [r3, #0]
 801093a:	b2da      	uxtb	r2, r3
 801093c:	4b81      	ldr	r3, [pc, #516]	@ (8010b44 <tx_control+0x2c9c>)
 801093e:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8010940:	4b89      	ldr	r3, [pc, #548]	@ (8010b68 <tx_control+0x2cc0>)
 8010942:	781a      	ldrb	r2, [r3, #0]
 8010944:	4b7f      	ldr	r3, [pc, #508]	@ (8010b44 <tx_control+0x2c9c>)
 8010946:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 8010948:	4b88      	ldr	r3, [pc, #544]	@ (8010b6c <tx_control+0x2cc4>)
 801094a:	781a      	ldrb	r2, [r3, #0]
 801094c:	4b7d      	ldr	r3, [pc, #500]	@ (8010b44 <tx_control+0x2c9c>)
 801094e:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010950:	4b7a      	ldr	r3, [pc, #488]	@ (8010b3c <tx_control+0x2c94>)
 8010952:	2200      	movs	r2, #0
 8010954:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 8010956:	4b6e      	ldr	r3, [pc, #440]	@ (8010b10 <tx_control+0x2c68>)
 8010958:	4a85      	ldr	r2, [pc, #532]	@ (8010b70 <tx_control+0x2cc8>)
 801095a:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 801095c:	4b6d      	ldr	r3, [pc, #436]	@ (8010b14 <tx_control+0x2c6c>)
 801095e:	4a84      	ldr	r2, [pc, #528]	@ (8010b70 <tx_control+0x2cc8>)
 8010960:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 8010962:	4b6d      	ldr	r3, [pc, #436]	@ (8010b18 <tx_control+0x2c70>)
 8010964:	4a83      	ldr	r2, [pc, #524]	@ (8010b74 <tx_control+0x2ccc>)
 8010966:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 8010968:	4b6d      	ldr	r3, [pc, #436]	@ (8010b20 <tx_control+0x2c78>)
 801096a:	2212      	movs	r2, #18
 801096c:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 801096e:	e1b9      	b.n	8010ce4 <tx_control+0x2e3c>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 8010970:	46c0      	nop			@ (mov r8, r8)
 8010972:	e000      	b.n	8010976 <tx_control+0x2ace>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 8010974:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 8010976:	4b71      	ldr	r3, [pc, #452]	@ (8010b3c <tx_control+0x2c94>)
 8010978:	785b      	ldrb	r3, [r3, #1]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d140      	bne.n	8010a00 <tx_control+0x2b58>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 801097e:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 8010980:	4b7d      	ldr	r3, [pc, #500]	@ (8010b78 <tx_control+0x2cd0>)
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d071      	beq.n	8010a6c <tx_control+0x2bc4>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 8010988:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 801098a:	4b7c      	ldr	r3, [pc, #496]	@ (8010b7c <tx_control+0x2cd4>)
 801098c:	2240      	movs	r2, #64	@ 0x40
 801098e:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 8010990:	4b7a      	ldr	r3, [pc, #488]	@ (8010b7c <tx_control+0x2cd4>)
 8010992:	2282      	movs	r2, #130	@ 0x82
 8010994:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = reePlantilla[eeversion1];
 8010996:	4b6c      	ldr	r3, [pc, #432]	@ (8010b48 <tx_control+0x2ca0>)
 8010998:	227b      	movs	r2, #123	@ 0x7b
 801099a:	5c9a      	ldrb	r2, [r3, r2]
 801099c:	4b77      	ldr	r3, [pc, #476]	@ (8010b7c <tx_control+0x2cd4>)
 801099e:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = reePlantilla[eeversion2];
 80109a0:	4b69      	ldr	r3, [pc, #420]	@ (8010b48 <tx_control+0x2ca0>)
 80109a2:	227c      	movs	r2, #124	@ 0x7c
 80109a4:	5c9a      	ldrb	r2, [r3, r2]
 80109a6:	4b75      	ldr	r3, [pc, #468]	@ (8010b7c <tx_control+0x2cd4>)
 80109a8:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 80109aa:	4b68      	ldr	r3, [pc, #416]	@ (8010b4c <tx_control+0x2ca4>)
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	0a1b      	lsrs	r3, r3, #8
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	b2da      	uxtb	r2, r3
 80109b4:	4b71      	ldr	r3, [pc, #452]	@ (8010b7c <tx_control+0x2cd4>)
 80109b6:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 80109b8:	4b64      	ldr	r3, [pc, #400]	@ (8010b4c <tx_control+0x2ca4>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	4b6f      	ldr	r3, [pc, #444]	@ (8010b7c <tx_control+0x2cd4>)
 80109c0:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 80109c2:	4b63      	ldr	r3, [pc, #396]	@ (8010b50 <tx_control+0x2ca8>)
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	0a1b      	lsrs	r3, r3, #8
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	4b6b      	ldr	r3, [pc, #428]	@ (8010b7c <tx_control+0x2cd4>)
 80109ce:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 80109d0:	4b5f      	ldr	r3, [pc, #380]	@ (8010b50 <tx_control+0x2ca8>)
 80109d2:	881b      	ldrh	r3, [r3, #0]
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	4b69      	ldr	r3, [pc, #420]	@ (8010b7c <tx_control+0x2cd4>)
 80109d8:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 80109da:	4b68      	ldr	r3, [pc, #416]	@ (8010b7c <tx_control+0x2cd4>)
 80109dc:	2202      	movs	r2, #2
 80109de:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 80109e0:	4b5c      	ldr	r3, [pc, #368]	@ (8010b54 <tx_control+0x2cac>)
 80109e2:	781a      	ldrb	r2, [r3, #0]
 80109e4:	4b65      	ldr	r3, [pc, #404]	@ (8010b7c <tx_control+0x2cd4>)
 80109e6:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 80109e8:	4b5b      	ldr	r3, [pc, #364]	@ (8010b58 <tx_control+0x2cb0>)
 80109ea:	781a      	ldrb	r2, [r3, #0]
 80109ec:	4b63      	ldr	r3, [pc, #396]	@ (8010b7c <tx_control+0x2cd4>)
 80109ee:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 80109f0:	4b5a      	ldr	r3, [pc, #360]	@ (8010b5c <tx_control+0x2cb4>)
 80109f2:	781a      	ldrb	r2, [r3, #0]
 80109f4:	4b61      	ldr	r3, [pc, #388]	@ (8010b7c <tx_control+0x2cd4>)
 80109f6:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 80109f8:	4b50      	ldr	r3, [pc, #320]	@ (8010b3c <tx_control+0x2c94>)
 80109fa:	2201      	movs	r2, #1
 80109fc:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 80109fe:	e038      	b.n	8010a72 <tx_control+0x2bca>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8010a00:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 8010a02:	4b5d      	ldr	r3, [pc, #372]	@ (8010b78 <tx_control+0x2cd0>)
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d132      	bne.n	8010a70 <tx_control+0x2bc8>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 8010a0a:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8010b4c <tx_control+0x2ca4>)
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	0a1b      	lsrs	r3, r3, #8
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	4b59      	ldr	r3, [pc, #356]	@ (8010b7c <tx_control+0x2cd4>)
 8010a18:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8010b4c <tx_control+0x2ca4>)
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	b2da      	uxtb	r2, r3
 8010a20:	4b56      	ldr	r3, [pc, #344]	@ (8010b7c <tx_control+0x2cd4>)
 8010a22:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010a24:	4b4a      	ldr	r3, [pc, #296]	@ (8010b50 <tx_control+0x2ca8>)
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	0a1b      	lsrs	r3, r3, #8
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	b2da      	uxtb	r2, r3
 8010a2e:	4b53      	ldr	r3, [pc, #332]	@ (8010b7c <tx_control+0x2cd4>)
 8010a30:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010a32:	4b47      	ldr	r3, [pc, #284]	@ (8010b50 <tx_control+0x2ca8>)
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	b2da      	uxtb	r2, r3
 8010a38:	4b50      	ldr	r3, [pc, #320]	@ (8010b7c <tx_control+0x2cd4>)
 8010a3a:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 8010a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8010b68 <tx_control+0x2cc0>)
 8010a3e:	781a      	ldrb	r2, [r3, #0]
 8010a40:	4b4e      	ldr	r3, [pc, #312]	@ (8010b7c <tx_control+0x2cd4>)
 8010a42:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 8010a44:	4b49      	ldr	r3, [pc, #292]	@ (8010b6c <tx_control+0x2cc4>)
 8010a46:	781a      	ldrb	r2, [r3, #0]
 8010a48:	4b4c      	ldr	r3, [pc, #304]	@ (8010b7c <tx_control+0x2cd4>)
 8010a4a:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 8010a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8010b3c <tx_control+0x2c94>)
 8010a4e:	2200      	movs	r2, #0
 8010a50:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 8010a52:	4b2f      	ldr	r3, [pc, #188]	@ (8010b10 <tx_control+0x2c68>)
 8010a54:	4a49      	ldr	r2, [pc, #292]	@ (8010b7c <tx_control+0x2cd4>)
 8010a56:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 8010a58:	4b2e      	ldr	r3, [pc, #184]	@ (8010b14 <tx_control+0x2c6c>)
 8010a5a:	4a48      	ldr	r2, [pc, #288]	@ (8010b7c <tx_control+0x2cd4>)
 8010a5c:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 8010a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8010b18 <tx_control+0x2c70>)
 8010a60:	4a47      	ldr	r2, [pc, #284]	@ (8010b80 <tx_control+0x2cd8>)
 8010a62:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010a64:	4b2e      	ldr	r3, [pc, #184]	@ (8010b20 <tx_control+0x2c78>)
 8010a66:	2212      	movs	r2, #18
 8010a68:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 8010a6a:	e13b      	b.n	8010ce4 <tx_control+0x2e3c>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 8010a6c:	46c0      	nop			@ (mov r8, r8)
 8010a6e:	e000      	b.n	8010a72 <tx_control+0x2bca>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 8010a70:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 8010a72:	4b32      	ldr	r3, [pc, #200]	@ (8010b3c <tx_control+0x2c94>)
 8010a74:	789b      	ldrb	r3, [r3, #2]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d000      	beq.n	8010a7c <tx_control+0x2bd4>
 8010a7a:	e087      	b.n	8010b8c <tx_control+0x2ce4>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 8010a7c:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 8010a7e:	4b41      	ldr	r3, [pc, #260]	@ (8010b84 <tx_control+0x2cdc>)
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	2b03      	cmp	r3, #3
 8010a84:	d000      	beq.n	8010a88 <tx_control+0x2be0>
 8010a86:	e0b7      	b.n	8010bf8 <tx_control+0x2d50>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = reePlantilla[eeversion1];
 8010a88:	4b2f      	ldr	r3, [pc, #188]	@ (8010b48 <tx_control+0x2ca0>)
 8010a8a:	227b      	movs	r2, #123	@ 0x7b
 8010a8c:	5c9a      	ldrb	r2, [r3, r2]
 8010a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8010b88 <tx_control+0x2ce0>)
 8010a90:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = reePlantilla[eeversion2];
 8010a92:	4b2d      	ldr	r3, [pc, #180]	@ (8010b48 <tx_control+0x2ca0>)
 8010a94:	227c      	movs	r2, #124	@ 0x7c
 8010a96:	5c9a      	ldrb	r2, [r3, r2]
 8010a98:	4b3b      	ldr	r3, [pc, #236]	@ (8010b88 <tx_control+0x2ce0>)
 8010a9a:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8010b4c <tx_control+0x2ca4>)
 8010a9e:	881b      	ldrh	r3, [r3, #0]
 8010aa0:	0a1b      	lsrs	r3, r3, #8
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	4b38      	ldr	r3, [pc, #224]	@ (8010b88 <tx_control+0x2ce0>)
 8010aa8:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010aaa:	4b28      	ldr	r3, [pc, #160]	@ (8010b4c <tx_control+0x2ca4>)
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	4b35      	ldr	r3, [pc, #212]	@ (8010b88 <tx_control+0x2ce0>)
 8010ab2:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010ab4:	4b26      	ldr	r3, [pc, #152]	@ (8010b50 <tx_control+0x2ca8>)
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	0a1b      	lsrs	r3, r3, #8
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	4b32      	ldr	r3, [pc, #200]	@ (8010b88 <tx_control+0x2ce0>)
 8010ac0:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010ac2:	4b23      	ldr	r3, [pc, #140]	@ (8010b50 <tx_control+0x2ca8>)
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8010b88 <tx_control+0x2ce0>)
 8010aca:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 8010acc:	4b2e      	ldr	r3, [pc, #184]	@ (8010b88 <tx_control+0x2ce0>)
 8010ace:	2203      	movs	r2, #3
 8010ad0:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 8010ad2:	4b20      	ldr	r3, [pc, #128]	@ (8010b54 <tx_control+0x2cac>)
 8010ad4:	781a      	ldrb	r2, [r3, #0]
 8010ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8010b88 <tx_control+0x2ce0>)
 8010ad8:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 8010ada:	4b1f      	ldr	r3, [pc, #124]	@ (8010b58 <tx_control+0x2cb0>)
 8010adc:	781a      	ldrb	r2, [r3, #0]
 8010ade:	4b2a      	ldr	r3, [pc, #168]	@ (8010b88 <tx_control+0x2ce0>)
 8010ae0:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 8010ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8010b5c <tx_control+0x2cb4>)
 8010ae4:	781a      	ldrb	r2, [r3, #0]
 8010ae6:	4b28      	ldr	r3, [pc, #160]	@ (8010b88 <tx_control+0x2ce0>)
 8010ae8:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 8010aea:	4b14      	ldr	r3, [pc, #80]	@ (8010b3c <tx_control+0x2c94>)
 8010aec:	2201      	movs	r2, #1
 8010aee:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 8010af0:	e085      	b.n	8010bfe <tx_control+0x2d56>
 8010af2:	46c0      	nop			@ (mov r8, r8)
 8010af4:	20001012 	.word	0x20001012
 8010af8:	20001007 	.word	0x20001007
 8010afc:	20001013 	.word	0x20001013
 8010b00:	08037000 	.word	0x08037000
 8010b04:	20000b67 	.word	0x20000b67
 8010b08:	20000ff4 	.word	0x20000ff4
 8010b0c:	20000b66 	.word	0x20000b66
 8010b10:	20000eb0 	.word	0x20000eb0
 8010b14:	20000ea8 	.word	0x20000ea8
 8010b18:	20000eac 	.word	0x20000eac
 8010b1c:	20001008 	.word	0x20001008
 8010b20:	20000ecc 	.word	0x20000ecc
 8010b24:	20000eb8 	.word	0x20000eb8
 8010b28:	20000ed0 	.word	0x20000ed0
 8010b2c:	20000eb5 	.word	0x20000eb5
 8010b30:	20000ec0 	.word	0x20000ec0
 8010b34:	20001014 	.word	0x20001014
 8010b38:	20001017 	.word	0x20001017
 8010b3c:	20000fd8 	.word	0x20000fd8
 8010b40:	20000c4c 	.word	0x20000c4c
 8010b44:	20000f88 	.word	0x20000f88
 8010b48:	20000c9c 	.word	0x20000c9c
 8010b4c:	20000e4c 	.word	0x20000e4c
 8010b50:	20000e4e 	.word	0x20000e4e
 8010b54:	20000bc0 	.word	0x20000bc0
 8010b58:	20000bc1 	.word	0x20000bc1
 8010b5c:	20000bde 	.word	0x20000bde
 8010b60:	200000b8 	.word	0x200000b8
 8010b64:	20000f74 	.word	0x20000f74
 8010b68:	20000bc2 	.word	0x20000bc2
 8010b6c:	20000bc3 	.word	0x20000bc3
 8010b70:	20000fc4 	.word	0x20000fc4
 8010b74:	20000fd5 	.word	0x20000fd5
 8010b78:	20000bb4 	.word	0x20000bb4
 8010b7c:	20000f9c 	.word	0x20000f9c
 8010b80:	20000fad 	.word	0x20000fad
 8010b84:	20000ba8 	.word	0x20000ba8
 8010b88:	20000fb0 	.word	0x20000fb0
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8010b8c:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 8010b8e:	4bc3      	ldr	r3, [pc, #780]	@ (8010e9c <tx_control+0x2ff4>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b03      	cmp	r3, #3
 8010b94:	d032      	beq.n	8010bfc <tx_control+0x2d54>
			goto power_event_WF;
		}
desh_event_end_WF:
 8010b96:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010b98:	4bc1      	ldr	r3, [pc, #772]	@ (8010ea0 <tx_control+0x2ff8>)
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	0a1b      	lsrs	r3, r3, #8
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	b2da      	uxtb	r2, r3
 8010ba2:	4bc0      	ldr	r3, [pc, #768]	@ (8010ea4 <tx_control+0x2ffc>)
 8010ba4:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8010ea0 <tx_control+0x2ff8>)
 8010ba8:	881b      	ldrh	r3, [r3, #0]
 8010baa:	b2da      	uxtb	r2, r3
 8010bac:	4bbd      	ldr	r3, [pc, #756]	@ (8010ea4 <tx_control+0x2ffc>)
 8010bae:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010bb0:	4bbd      	ldr	r3, [pc, #756]	@ (8010ea8 <tx_control+0x3000>)
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	0a1b      	lsrs	r3, r3, #8
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	4bba      	ldr	r3, [pc, #744]	@ (8010ea4 <tx_control+0x2ffc>)
 8010bbc:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010bbe:	4bba      	ldr	r3, [pc, #744]	@ (8010ea8 <tx_control+0x3000>)
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	4bb7      	ldr	r3, [pc, #732]	@ (8010ea4 <tx_control+0x2ffc>)
 8010bc6:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 8010bc8:	4bb8      	ldr	r3, [pc, #736]	@ (8010eac <tx_control+0x3004>)
 8010bca:	781a      	ldrb	r2, [r3, #0]
 8010bcc:	4bb5      	ldr	r3, [pc, #724]	@ (8010ea4 <tx_control+0x2ffc>)
 8010bce:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 8010bd0:	4bb7      	ldr	r3, [pc, #732]	@ (8010eb0 <tx_control+0x3008>)
 8010bd2:	781a      	ldrb	r2, [r3, #0]
 8010bd4:	4bb3      	ldr	r3, [pc, #716]	@ (8010ea4 <tx_control+0x2ffc>)
 8010bd6:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 8010bd8:	4bb6      	ldr	r3, [pc, #728]	@ (8010eb4 <tx_control+0x300c>)
 8010bda:	2200      	movs	r2, #0
 8010bdc:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 8010bde:	4bb6      	ldr	r3, [pc, #728]	@ (8010eb8 <tx_control+0x3010>)
 8010be0:	4ab0      	ldr	r2, [pc, #704]	@ (8010ea4 <tx_control+0x2ffc>)
 8010be2:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 8010be4:	4bb5      	ldr	r3, [pc, #724]	@ (8010ebc <tx_control+0x3014>)
 8010be6:	4aaf      	ldr	r2, [pc, #700]	@ (8010ea4 <tx_control+0x2ffc>)
 8010be8:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 8010bea:	4bb5      	ldr	r3, [pc, #724]	@ (8010ec0 <tx_control+0x3018>)
 8010bec:	4ab5      	ldr	r2, [pc, #724]	@ (8010ec4 <tx_control+0x301c>)
 8010bee:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010bf0:	4bb5      	ldr	r3, [pc, #724]	@ (8010ec8 <tx_control+0x3020>)
 8010bf2:	2212      	movs	r2, #18
 8010bf4:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010bf6:	e075      	b.n	8010ce4 <tx_control+0x2e3c>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 8010bf8:	46c0      	nop			@ (mov r8, r8)
 8010bfa:	e000      	b.n	8010bfe <tx_control+0x2d56>
			goto power_event_WF;
 8010bfc:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 8010bfe:	4bad      	ldr	r3, [pc, #692]	@ (8010eb4 <tx_control+0x300c>)
 8010c00:	78db      	ldrb	r3, [r3, #3]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d067      	beq.n	8010cd6 <tx_control+0x2e2e>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 8010c06:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 8010c08:	4bb0      	ldr	r3, [pc, #704]	@ (8010ecc <tx_control+0x3024>)
 8010c0a:	2240      	movs	r2, #64	@ 0x40
 8010c0c:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 8010c0e:	4baf      	ldr	r3, [pc, #700]	@ (8010ecc <tx_control+0x3024>)
 8010c10:	2282      	movs	r2, #130	@ 0x82
 8010c12:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = reePlantilla[eeversion1];
 8010c14:	4bae      	ldr	r3, [pc, #696]	@ (8010ed0 <tx_control+0x3028>)
 8010c16:	227b      	movs	r2, #123	@ 0x7b
 8010c18:	5c9a      	ldrb	r2, [r3, r2]
 8010c1a:	4bac      	ldr	r3, [pc, #688]	@ (8010ecc <tx_control+0x3024>)
 8010c1c:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = reePlantilla[eeversion2];
 8010c1e:	4bac      	ldr	r3, [pc, #688]	@ (8010ed0 <tx_control+0x3028>)
 8010c20:	227c      	movs	r2, #124	@ 0x7c
 8010c22:	5c9a      	ldrb	r2, [r3, r2]
 8010c24:	4ba9      	ldr	r3, [pc, #676]	@ (8010ecc <tx_control+0x3024>)
 8010c26:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010c28:	4b9d      	ldr	r3, [pc, #628]	@ (8010ea0 <tx_control+0x2ff8>)
 8010c2a:	881b      	ldrh	r3, [r3, #0]
 8010c2c:	0a1b      	lsrs	r3, r3, #8
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4ba6      	ldr	r3, [pc, #664]	@ (8010ecc <tx_control+0x3024>)
 8010c34:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010c36:	4b9a      	ldr	r3, [pc, #616]	@ (8010ea0 <tx_control+0x2ff8>)
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	4ba3      	ldr	r3, [pc, #652]	@ (8010ecc <tx_control+0x3024>)
 8010c3e:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010c40:	4b99      	ldr	r3, [pc, #612]	@ (8010ea8 <tx_control+0x3000>)
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	0a1b      	lsrs	r3, r3, #8
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	4ba0      	ldr	r3, [pc, #640]	@ (8010ecc <tx_control+0x3024>)
 8010c4c:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010c4e:	4b96      	ldr	r3, [pc, #600]	@ (8010ea8 <tx_control+0x3000>)
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	4b9d      	ldr	r3, [pc, #628]	@ (8010ecc <tx_control+0x3024>)
 8010c56:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 8010c58:	4b9c      	ldr	r3, [pc, #624]	@ (8010ecc <tx_control+0x3024>)
 8010c5a:	2204      	movs	r2, #4
 8010c5c:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 8010c5e:	4b9d      	ldr	r3, [pc, #628]	@ (8010ed4 <tx_control+0x302c>)
 8010c60:	781a      	ldrb	r2, [r3, #0]
 8010c62:	4b9a      	ldr	r3, [pc, #616]	@ (8010ecc <tx_control+0x3024>)
 8010c64:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 8010c66:	4b9c      	ldr	r3, [pc, #624]	@ (8010ed8 <tx_control+0x3030>)
 8010c68:	781a      	ldrb	r2, [r3, #0]
 8010c6a:	4b98      	ldr	r3, [pc, #608]	@ (8010ecc <tx_control+0x3024>)
 8010c6c:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 8010c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8010edc <tx_control+0x3034>)
 8010c70:	781a      	ldrb	r2, [r3, #0]
 8010c72:	4b96      	ldr	r3, [pc, #600]	@ (8010ecc <tx_control+0x3024>)
 8010c74:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010c76:	4b8a      	ldr	r3, [pc, #552]	@ (8010ea0 <tx_control+0x2ff8>)
 8010c78:	881b      	ldrh	r3, [r3, #0]
 8010c7a:	0a1b      	lsrs	r3, r3, #8
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	b2da      	uxtb	r2, r3
 8010c80:	4b92      	ldr	r3, [pc, #584]	@ (8010ecc <tx_control+0x3024>)
 8010c82:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010c84:	4b86      	ldr	r3, [pc, #536]	@ (8010ea0 <tx_control+0x2ff8>)
 8010c86:	881b      	ldrh	r3, [r3, #0]
 8010c88:	b2da      	uxtb	r2, r3
 8010c8a:	4b90      	ldr	r3, [pc, #576]	@ (8010ecc <tx_control+0x3024>)
 8010c8c:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010c8e:	4b86      	ldr	r3, [pc, #536]	@ (8010ea8 <tx_control+0x3000>)
 8010c90:	881b      	ldrh	r3, [r3, #0]
 8010c92:	0a1b      	lsrs	r3, r3, #8
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	4b8c      	ldr	r3, [pc, #560]	@ (8010ecc <tx_control+0x3024>)
 8010c9a:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010c9c:	4b82      	ldr	r3, [pc, #520]	@ (8010ea8 <tx_control+0x3000>)
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	b2da      	uxtb	r2, r3
 8010ca2:	4b8a      	ldr	r3, [pc, #552]	@ (8010ecc <tx_control+0x3024>)
 8010ca4:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 8010ca6:	4b81      	ldr	r3, [pc, #516]	@ (8010eac <tx_control+0x3004>)
 8010ca8:	781a      	ldrb	r2, [r3, #0]
 8010caa:	4b88      	ldr	r3, [pc, #544]	@ (8010ecc <tx_control+0x3024>)
 8010cac:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 8010cae:	4b80      	ldr	r3, [pc, #512]	@ (8010eb0 <tx_control+0x3008>)
 8010cb0:	781a      	ldrb	r2, [r3, #0]
 8010cb2:	4b86      	ldr	r3, [pc, #536]	@ (8010ecc <tx_control+0x3024>)
 8010cb4:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 8010cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8010eb4 <tx_control+0x300c>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 8010cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8010eb8 <tx_control+0x3010>)
 8010cbe:	4a83      	ldr	r2, [pc, #524]	@ (8010ecc <tx_control+0x3024>)
 8010cc0:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 8010cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8010ebc <tx_control+0x3014>)
 8010cc4:	4a81      	ldr	r2, [pc, #516]	@ (8010ecc <tx_control+0x3024>)
 8010cc6:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 8010cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8010ec0 <tx_control+0x3018>)
 8010cca:	4a85      	ldr	r2, [pc, #532]	@ (8010ee0 <tx_control+0x3038>)
 8010ccc:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010cce:	4b7e      	ldr	r3, [pc, #504]	@ (8010ec8 <tx_control+0x3020>)
 8010cd0:	2212      	movs	r2, #18
 8010cd2:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010cd4:	e006      	b.n	8010ce4 <tx_control+0x2e3c>
		goto alarm_event_WF;// jra		alarm_event_WF
 8010cd6:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 8010cd8:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 8010cda:	4b82      	ldr	r3, [pc, #520]	@ (8010ee4 <tx_control+0x303c>)
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d045      	beq.n	8010d6e <tx_control+0x2ec6>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 8010ce2:	e208      	b.n	80110f6 <tx_control+0x324e>
		bufferWifiTx[0] = 0x40;
 8010ce4:	4b80      	ldr	r3, [pc, #512]	@ (8010ee8 <tx_control+0x3040>)
 8010ce6:	2240      	movs	r2, #64	@ 0x40
 8010ce8:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 8010cea:	4b7f      	ldr	r3, [pc, #508]	@ (8010ee8 <tx_control+0x3040>)
 8010cec:	2282      	movs	r2, #130	@ 0x82
 8010cee:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010cf0:	4b7d      	ldr	r3, [pc, #500]	@ (8010ee8 <tx_control+0x3040>)
 8010cf2:	2203      	movs	r2, #3
 8010cf4:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 8010cf6:	4b76      	ldr	r3, [pc, #472]	@ (8010ed0 <tx_control+0x3028>)
 8010cf8:	227b      	movs	r2, #123	@ 0x7b
 8010cfa:	5c9a      	ldrb	r2, [r3, r2]
 8010cfc:	4b7a      	ldr	r3, [pc, #488]	@ (8010ee8 <tx_control+0x3040>)
 8010cfe:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010d00:	4b73      	ldr	r3, [pc, #460]	@ (8010ed0 <tx_control+0x3028>)
 8010d02:	227c      	movs	r2, #124	@ 0x7c
 8010d04:	5c9a      	ldrb	r2, [r3, r2]
 8010d06:	4b78      	ldr	r3, [pc, #480]	@ (8010ee8 <tx_control+0x3040>)
 8010d08:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 8010d0a:	4b78      	ldr	r3, [pc, #480]	@ (8010eec <tx_control+0x3044>)
 8010d0c:	220e      	movs	r2, #14
 8010d0e:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 8010d10:	4b69      	ldr	r3, [pc, #420]	@ (8010eb8 <tx_control+0x3010>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	3304      	adds	r3, #4
 8010d16:	4a76      	ldr	r2, [pc, #472]	@ (8010ef0 <tx_control+0x3048>)
 8010d18:	0011      	movs	r1, r2
 8010d1a:	0018      	movs	r0, r3
 8010d1c:	f7f6 fb00 	bl	8007320 <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 8010d20:	4b71      	ldr	r3, [pc, #452]	@ (8010ee8 <tx_control+0x3040>)
 8010d22:	7c9a      	ldrb	r2, [r3, #18]
 8010d24:	4b73      	ldr	r3, [pc, #460]	@ (8010ef4 <tx_control+0x304c>)
 8010d26:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 8010d28:	4b6f      	ldr	r3, [pc, #444]	@ (8010ee8 <tx_control+0x3040>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 8010d2e:	4b71      	ldr	r3, [pc, #452]	@ (8010ef4 <tx_control+0x304c>)
 8010d30:	781a      	ldrb	r2, [r3, #0]
 8010d32:	4b6d      	ldr	r3, [pc, #436]	@ (8010ee8 <tx_control+0x3040>)
 8010d34:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 8010d36:	4b60      	ldr	r3, [pc, #384]	@ (8010eb8 <tx_control+0x3010>)
 8010d38:	4a6b      	ldr	r2, [pc, #428]	@ (8010ee8 <tx_control+0x3040>)
 8010d3a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 8010d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8010ebc <tx_control+0x3014>)
 8010d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8010ee8 <tx_control+0x3040>)
 8010d40:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 8010d42:	4b5f      	ldr	r3, [pc, #380]	@ (8010ec0 <tx_control+0x3018>)
 8010d44:	4a6c      	ldr	r2, [pc, #432]	@ (8010ef8 <tx_control+0x3050>)
 8010d46:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 8010d48:	4b5f      	ldr	r3, [pc, #380]	@ (8010ec8 <tx_control+0x3020>)
 8010d4a:	2214      	movs	r2, #20
 8010d4c:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8010efc <tx_control+0x3054>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 8010d54:	4b6a      	ldr	r3, [pc, #424]	@ (8010f00 <tx_control+0x3058>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010d5a:	4b68      	ldr	r3, [pc, #416]	@ (8010efc <tx_control+0x3054>)
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010d60:	4b60      	ldr	r3, [pc, #384]	@ (8010ee4 <tx_control+0x303c>)
 8010d62:	2255      	movs	r2, #85	@ 0x55
 8010d64:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 8010d66:	4b67      	ldr	r3, [pc, #412]	@ (8010f04 <tx_control+0x305c>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 8010d6c:	e1c3      	b.n	80110f6 <tx_control+0x324e>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 8010d6e:	4b66      	ldr	r3, [pc, #408]	@ (8010f08 <tx_control+0x3060>)
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d000      	beq.n	8010d78 <tx_control+0x2ed0>
 8010d76:	e1bd      	b.n	80110f4 <tx_control+0x324c>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 8010d78:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 8010d7a:	4b64      	ldr	r3, [pc, #400]	@ (8010f0c <tx_control+0x3064>)
 8010d7c:	2251      	movs	r2, #81	@ 0x51
 8010d7e:	5c9a      	ldrb	r2, [r3, r2]
 8010d80:	4b5a      	ldr	r3, [pc, #360]	@ (8010eec <tx_control+0x3044>)
 8010d82:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 8010d84:	4b59      	ldr	r3, [pc, #356]	@ (8010eec <tx_control+0x3044>)
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	001a      	movs	r2, r3
 8010d8a:	233c      	movs	r3, #60	@ 0x3c
 8010d8c:	4353      	muls	r3, r2
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	4b5d      	ldr	r3, [pc, #372]	@ (8010f08 <tx_control+0x3060>)
 8010d92:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 8010d94:	4b5e      	ldr	r3, [pc, #376]	@ (8010f10 <tx_control+0x3068>)
 8010d96:	781a      	ldrb	r2, [r3, #0]
 8010d98:	4b5e      	ldr	r3, [pc, #376]	@ (8010f14 <tx_control+0x306c>)
 8010d9a:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 8010d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8010f10 <tx_control+0x3068>)
 8010d9e:	785a      	ldrb	r2, [r3, #1]
 8010da0:	4b5c      	ldr	r3, [pc, #368]	@ (8010f14 <tx_control+0x306c>)
 8010da2:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 8010da4:	4b5b      	ldr	r3, [pc, #364]	@ (8010f14 <tx_control+0x306c>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 8010daa:	4b5a      	ldr	r3, [pc, #360]	@ (8010f14 <tx_control+0x306c>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 8010db0:	4b58      	ldr	r3, [pc, #352]	@ (8010f14 <tx_control+0x306c>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 8010db6:	4b57      	ldr	r3, [pc, #348]	@ (8010f14 <tx_control+0x306c>)
 8010db8:	2200      	movs	r2, #0
 8010dba:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 8010dbc:	4b55      	ldr	r3, [pc, #340]	@ (8010f14 <tx_control+0x306c>)
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 8010dc2:	4b54      	ldr	r3, [pc, #336]	@ (8010f14 <tx_control+0x306c>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 8010dc8:	4b53      	ldr	r3, [pc, #332]	@ (8010f18 <tx_control+0x3070>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	2201      	movs	r2, #1
 8010dce:	4053      	eors	r3, r2
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d103      	bne.n	8010dde <tx_control+0x2f36>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 8010dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8010f14 <tx_control+0x306c>)
 8010dd8:	2201      	movs	r2, #1
 8010dda:	709a      	strb	r2, [r3, #2]
 8010ddc:	e000      	b.n	8010de0 <tx_control+0x2f38>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 8010dde:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 8010de0:	4b4d      	ldr	r3, [pc, #308]	@ (8010f18 <tx_control+0x3070>)
 8010de2:	785b      	ldrb	r3, [r3, #1]
 8010de4:	2201      	movs	r2, #1
 8010de6:	4053      	eors	r3, r2
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d103      	bne.n	8010df6 <tx_control+0x2f4e>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 8010dee:	4b49      	ldr	r3, [pc, #292]	@ (8010f14 <tx_control+0x306c>)
 8010df0:	2201      	movs	r2, #1
 8010df2:	70da      	strb	r2, [r3, #3]
 8010df4:	e000      	b.n	8010df8 <tx_control+0x2f50>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 8010df6:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 8010df8:	4b47      	ldr	r3, [pc, #284]	@ (8010f18 <tx_control+0x3070>)
 8010dfa:	789b      	ldrb	r3, [r3, #2]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	4053      	eors	r3, r2
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d103      	bne.n	8010e0e <tx_control+0x2f66>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 8010e06:	4b43      	ldr	r3, [pc, #268]	@ (8010f14 <tx_control+0x306c>)
 8010e08:	2201      	movs	r2, #1
 8010e0a:	711a      	strb	r2, [r3, #4]
 8010e0c:	e000      	b.n	8010e10 <tx_control+0x2f68>
			goto noFlag_ahorro2_TD;
 8010e0e:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 8010e10:	4b42      	ldr	r3, [pc, #264]	@ (8010f1c <tx_control+0x3074>)
 8010e12:	78db      	ldrb	r3, [r3, #3]
 8010e14:	2201      	movs	r2, #1
 8010e16:	4053      	eors	r3, r2
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d103      	bne.n	8010e26 <tx_control+0x2f7e>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 8010e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8010f14 <tx_control+0x306c>)
 8010e20:	2201      	movs	r2, #1
 8010e22:	715a      	strb	r2, [r3, #5]
 8010e24:	e000      	b.n	8010e28 <tx_control+0x2f80>
			goto noFlag_nocturno_TD;
 8010e26:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 8010e28:	4b3d      	ldr	r3, [pc, #244]	@ (8010f20 <tx_control+0x3078>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	4053      	eors	r3, r2
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d103      	bne.n	8010e3e <tx_control+0x2f96>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 8010e36:	4b37      	ldr	r3, [pc, #220]	@ (8010f14 <tx_control+0x306c>)
 8010e38:	2201      	movs	r2, #1
 8010e3a:	719a      	strb	r2, [r3, #6]
 8010e3c:	e000      	b.n	8010e40 <tx_control+0x2f98>
			goto noFlag_vent_TD;
 8010e3e:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 8010e40:	4b33      	ldr	r3, [pc, #204]	@ (8010f10 <tx_control+0x3068>)
 8010e42:	789b      	ldrb	r3, [r3, #2]
 8010e44:	2201      	movs	r2, #1
 8010e46:	4053      	eors	r3, r2
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d103      	bne.n	8010e56 <tx_control+0x2fae>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 8010e4e:	4b31      	ldr	r3, [pc, #196]	@ (8010f14 <tx_control+0x306c>)
 8010e50:	2201      	movs	r2, #1
 8010e52:	71da      	strb	r2, [r3, #7]
 8010e54:	e000      	b.n	8010e58 <tx_control+0x2fb0>
			goto noFlag_Aux_TD;
 8010e56:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 8010e58:	231b      	movs	r3, #27
 8010e5a:	18fb      	adds	r3, r7, r3
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	701a      	strb	r2, [r3, #0]
 8010e60:	e00d      	b.n	8010e7e <tx_control+0x2fd6>
			alarmas2_TD[k] = (trefst2[k]);
 8010e62:	201b      	movs	r0, #27
 8010e64:	183b      	adds	r3, r7, r0
 8010e66:	781a      	ldrb	r2, [r3, #0]
 8010e68:	183b      	adds	r3, r7, r0
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	492d      	ldr	r1, [pc, #180]	@ (8010f24 <tx_control+0x307c>)
 8010e6e:	5c89      	ldrb	r1, [r1, r2]
 8010e70:	4a2d      	ldr	r2, [pc, #180]	@ (8010f28 <tx_control+0x3080>)
 8010e72:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 8010e74:	183b      	adds	r3, r7, r0
 8010e76:	781a      	ldrb	r2, [r3, #0]
 8010e78:	183b      	adds	r3, r7, r0
 8010e7a:	3201      	adds	r2, #1
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	231b      	movs	r3, #27
 8010e80:	18fb      	adds	r3, r7, r3
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	2b07      	cmp	r3, #7
 8010e86:	d9ec      	bls.n	8010e62 <tx_control+0x2fba>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 8010e88:	4b27      	ldr	r3, [pc, #156]	@ (8010f28 <tx_control+0x3080>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 8010e8e:	4b27      	ldr	r3, [pc, #156]	@ (8010f2c <tx_control+0x3084>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010e94:	2300      	movs	r3, #0
 8010e96:	617b      	str	r3, [r7, #20]
 8010e98:	e05e      	b.n	8010f58 <tx_control+0x30b0>
 8010e9a:	46c0      	nop			@ (mov r8, r8)
 8010e9c:	20000ba8 	.word	0x20000ba8
 8010ea0:	20000e4c 	.word	0x20000e4c
 8010ea4:	20000fb0 	.word	0x20000fb0
 8010ea8:	20000e4e 	.word	0x20000e4e
 8010eac:	20000bc2 	.word	0x20000bc2
 8010eb0:	20000bc3 	.word	0x20000bc3
 8010eb4:	20000fd8 	.word	0x20000fd8
 8010eb8:	20000eb0 	.word	0x20000eb0
 8010ebc:	20000ea8 	.word	0x20000ea8
 8010ec0:	20000eac 	.word	0x20000eac
 8010ec4:	20000fc1 	.word	0x20000fc1
 8010ec8:	20000ecc 	.word	0x20000ecc
 8010ecc:	20000fc4 	.word	0x20000fc4
 8010ed0:	20000c9c 	.word	0x20000c9c
 8010ed4:	20000bc0 	.word	0x20000bc0
 8010ed8:	20000bc1 	.word	0x20000bc1
 8010edc:	20000bde 	.word	0x20000bde
 8010ee0:	20000fd5 	.word	0x20000fd5
 8010ee4:	20000eb5 	.word	0x20000eb5
 8010ee8:	20000ff4 	.word	0x20000ff4
 8010eec:	20000b67 	.word	0x20000b67
 8010ef0:	20000ff9 	.word	0x20000ff9
 8010ef4:	20000b66 	.word	0x20000b66
 8010ef8:	20001008 	.word	0x20001008
 8010efc:	20000eb8 	.word	0x20000eb8
 8010f00:	20000ed0 	.word	0x20000ed0
 8010f04:	20000ec0 	.word	0x20000ec0
 8010f08:	20000fea 	.word	0x20000fea
 8010f0c:	200000b8 	.word	0x200000b8
 8010f10:	20000bb4 	.word	0x20000bb4
 8010f14:	20000e5c 	.word	0x20000e5c
 8010f18:	20000c4c 	.word	0x20000c4c
 8010f1c:	20000b88 	.word	0x20000b88
 8010f20:	20000bf0 	.word	0x20000bf0
 8010f24:	20000b90 	.word	0x20000b90
 8010f28:	20000e68 	.word	0x20000e68
 8010f2c:	20000e70 	.word	0x20000e70
			alarmas_TD |= (trefst[k] << k);
 8010f30:	4a75      	ldr	r2, [pc, #468]	@ (8011108 <tx_control+0x3260>)
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	18d3      	adds	r3, r2, r3
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	001a      	movs	r2, r3
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	409a      	lsls	r2, r3
 8010f3e:	0013      	movs	r3, r2
 8010f40:	b25a      	sxtb	r2, r3
 8010f42:	4b72      	ldr	r3, [pc, #456]	@ (801110c <tx_control+0x3264>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	b25b      	sxtb	r3, r3
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	b25b      	sxtb	r3, r3
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	4b6f      	ldr	r3, [pc, #444]	@ (801110c <tx_control+0x3264>)
 8010f50:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	3301      	adds	r3, #1
 8010f56:	617b      	str	r3, [r7, #20]
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	2b07      	cmp	r3, #7
 8010f5c:	dde8      	ble.n	8010f30 <tx_control+0x3088>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 8010f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8011110 <tx_control+0x3268>)
 8010f60:	2240      	movs	r2, #64	@ 0x40
 8010f62:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 8010f64:	4b6a      	ldr	r3, [pc, #424]	@ (8011110 <tx_control+0x3268>)
 8010f66:	2281      	movs	r2, #129	@ 0x81
 8010f68:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 8010f6a:	4b69      	ldr	r3, [pc, #420]	@ (8011110 <tx_control+0x3268>)
 8010f6c:	2207      	movs	r2, #7
 8010f6e:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeveTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
		bufferWifiTx[3] = reePlantilla[eeversion1];
 8010f70:	4b68      	ldr	r3, [pc, #416]	@ (8011114 <tx_control+0x326c>)
 8010f72:	227b      	movs	r2, #123	@ 0x7b
 8010f74:	5c9a      	ldrb	r2, [r3, r2]
 8010f76:	4b66      	ldr	r3, [pc, #408]	@ (8011110 <tx_control+0x3268>)
 8010f78:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010f7a:	4b66      	ldr	r3, [pc, #408]	@ (8011114 <tx_control+0x326c>)
 8010f7c:	227c      	movs	r2, #124	@ 0x7c
 8010f7e:	5c9a      	ldrb	r2, [r3, r2]
 8010f80:	4b63      	ldr	r3, [pc, #396]	@ (8011110 <tx_control+0x3268>)
 8010f82:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010f84:	4b64      	ldr	r3, [pc, #400]	@ (8011118 <tx_control+0x3270>)
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	0a1b      	lsrs	r3, r3, #8
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	4b60      	ldr	r3, [pc, #384]	@ (8011110 <tx_control+0x3268>)
 8010f90:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010f92:	4b61      	ldr	r3, [pc, #388]	@ (8011118 <tx_control+0x3270>)
 8010f94:	881b      	ldrh	r3, [r3, #0]
 8010f96:	b2da      	uxtb	r2, r3
 8010f98:	4b5d      	ldr	r3, [pc, #372]	@ (8011110 <tx_control+0x3268>)
 8010f9a:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010f9c:	4b5f      	ldr	r3, [pc, #380]	@ (801111c <tx_control+0x3274>)
 8010f9e:	881b      	ldrh	r3, [r3, #0]
 8010fa0:	0a1b      	lsrs	r3, r3, #8
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	4b5a      	ldr	r3, [pc, #360]	@ (8011110 <tx_control+0x3268>)
 8010fa8:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010faa:	4b5c      	ldr	r3, [pc, #368]	@ (801111c <tx_control+0x3274>)
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	4b57      	ldr	r3, [pc, #348]	@ (8011110 <tx_control+0x3268>)
 8010fb2:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 8010fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8011120 <tx_control+0x3278>)
 8010fb6:	781a      	ldrb	r2, [r3, #0]
 8010fb8:	4b55      	ldr	r3, [pc, #340]	@ (8011110 <tx_control+0x3268>)
 8010fba:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 8010fbc:	4b59      	ldr	r3, [pc, #356]	@ (8011124 <tx_control+0x327c>)
 8010fbe:	781a      	ldrb	r2, [r3, #0]
 8010fc0:	4b53      	ldr	r3, [pc, #332]	@ (8011110 <tx_control+0x3268>)
 8010fc2:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 8010fc4:	4b58      	ldr	r3, [pc, #352]	@ (8011128 <tx_control+0x3280>)
 8010fc6:	781a      	ldrb	r2, [r3, #0]
 8010fc8:	4b51      	ldr	r3, [pc, #324]	@ (8011110 <tx_control+0x3268>)
 8010fca:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 8010fcc:	4b57      	ldr	r3, [pc, #348]	@ (801112c <tx_control+0x3284>)
 8010fce:	781a      	ldrb	r2, [r3, #0]
 8010fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8011110 <tx_control+0x3268>)
 8010fd2:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 8010fd4:	4b4e      	ldr	r3, [pc, #312]	@ (8011110 <tx_control+0x3268>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 8010fda:	4b55      	ldr	r3, [pc, #340]	@ (8011130 <tx_control+0x3288>)
 8010fdc:	781a      	ldrb	r2, [r3, #0]
 8010fde:	4b4c      	ldr	r3, [pc, #304]	@ (8011110 <tx_control+0x3268>)
 8010fe0:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 8010fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8011110 <tx_control+0x3268>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8010fe8:	2300      	movs	r3, #0
 8010fea:	613b      	str	r3, [r7, #16]
 8010fec:	e011      	b.n	8011012 <tx_control+0x316a>
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 8010fee:	4b48      	ldr	r3, [pc, #288]	@ (8011110 <tx_control+0x3268>)
 8010ff0:	7bda      	ldrb	r2, [r3, #15]
 8010ff2:	4950      	ldr	r1, [pc, #320]	@ (8011134 <tx_control+0x328c>)
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	18cb      	adds	r3, r1, r3
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	0019      	movs	r1, r3
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	4099      	lsls	r1, r3
 8011000:	000b      	movs	r3, r1
 8011002:	b2db      	uxtb	r3, r3
 8011004:	4313      	orrs	r3, r2
 8011006:	b2da      	uxtb	r2, r3
 8011008:	4b41      	ldr	r3, [pc, #260]	@ (8011110 <tx_control+0x3268>)
 801100a:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	3301      	adds	r3, #1
 8011010:	613b      	str	r3, [r7, #16]
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	2b07      	cmp	r3, #7
 8011016:	ddea      	ble.n	8010fee <tx_control+0x3146>
		}
		bufferWifiTx[16] =estados_TD;
 8011018:	4b47      	ldr	r3, [pc, #284]	@ (8011138 <tx_control+0x3290>)
 801101a:	781a      	ldrb	r2, [r3, #0]
 801101c:	4b3c      	ldr	r3, [pc, #240]	@ (8011110 <tx_control+0x3268>)
 801101e:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 8011020:	4b3b      	ldr	r3, [pc, #236]	@ (8011110 <tx_control+0x3268>)
 8011022:	2200      	movs	r2, #0
 8011024:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8011026:	230f      	movs	r3, #15
 8011028:	18fb      	adds	r3, r7, r3
 801102a:	2200      	movs	r2, #0
 801102c:	701a      	strb	r2, [r3, #0]
 801102e:	e015      	b.n	801105c <tx_control+0x31b4>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 8011030:	4b37      	ldr	r3, [pc, #220]	@ (8011110 <tx_control+0x3268>)
 8011032:	7c5a      	ldrb	r2, [r3, #17]
 8011034:	200f      	movs	r0, #15
 8011036:	183b      	adds	r3, r7, r0
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	4940      	ldr	r1, [pc, #256]	@ (801113c <tx_control+0x3294>)
 801103c:	5ccb      	ldrb	r3, [r1, r3]
 801103e:	0019      	movs	r1, r3
 8011040:	183b      	adds	r3, r7, r0
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	4099      	lsls	r1, r3
 8011046:	000b      	movs	r3, r1
 8011048:	b2db      	uxtb	r3, r3
 801104a:	4313      	orrs	r3, r2
 801104c:	b2da      	uxtb	r2, r3
 801104e:	4b30      	ldr	r3, [pc, #192]	@ (8011110 <tx_control+0x3268>)
 8011050:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8011052:	183b      	adds	r3, r7, r0
 8011054:	781a      	ldrb	r2, [r3, #0]
 8011056:	183b      	adds	r3, r7, r0
 8011058:	3201      	adds	r2, #1
 801105a:	701a      	strb	r2, [r3, #0]
 801105c:	230f      	movs	r3, #15
 801105e:	18fb      	adds	r3, r7, r3
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	2b07      	cmp	r3, #7
 8011064:	d9e4      	bls.n	8011030 <tx_control+0x3188>
		}

		bufferWifiTx[18] = alarmas_TD;
 8011066:	4b29      	ldr	r3, [pc, #164]	@ (801110c <tx_control+0x3264>)
 8011068:	781a      	ldrb	r2, [r3, #0]
 801106a:	4b29      	ldr	r3, [pc, #164]	@ (8011110 <tx_control+0x3268>)
 801106c:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 801106e:	4b34      	ldr	r3, [pc, #208]	@ (8011140 <tx_control+0x3298>)
 8011070:	881b      	ldrh	r3, [r3, #0]
 8011072:	0a1b      	lsrs	r3, r3, #8
 8011074:	b29b      	uxth	r3, r3
 8011076:	b2da      	uxtb	r2, r3
 8011078:	4b25      	ldr	r3, [pc, #148]	@ (8011110 <tx_control+0x3268>)
 801107a:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 801107c:	4b30      	ldr	r3, [pc, #192]	@ (8011140 <tx_control+0x3298>)
 801107e:	881b      	ldrh	r3, [r3, #0]
 8011080:	b2da      	uxtb	r2, r3
 8011082:	4b23      	ldr	r3, [pc, #140]	@ (8011110 <tx_control+0x3268>)
 8011084:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 8011086:	4b2e      	ldr	r3, [pc, #184]	@ (8011140 <tx_control+0x3298>)
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	0a1b      	lsrs	r3, r3, #8
 801108c:	b29b      	uxth	r3, r3
 801108e:	b2da      	uxtb	r2, r3
 8011090:	4b1f      	ldr	r3, [pc, #124]	@ (8011110 <tx_control+0x3268>)
 8011092:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 8011094:	4b2a      	ldr	r3, [pc, #168]	@ (8011140 <tx_control+0x3298>)
 8011096:	881b      	ldrh	r3, [r3, #0]
 8011098:	b2da      	uxtb	r2, r3
 801109a:	4b1d      	ldr	r3, [pc, #116]	@ (8011110 <tx_control+0x3268>)
 801109c:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801109e:	4b29      	ldr	r3, [pc, #164]	@ (8011144 <tx_control+0x329c>)
 80110a0:	4a1b      	ldr	r2, [pc, #108]	@ (8011110 <tx_control+0x3268>)
 80110a2:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80110a4:	4b28      	ldr	r3, [pc, #160]	@ (8011148 <tx_control+0x32a0>)
 80110a6:	4a1a      	ldr	r2, [pc, #104]	@ (8011110 <tx_control+0x3268>)
 80110a8:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 80110aa:	4b28      	ldr	r3, [pc, #160]	@ (801114c <tx_control+0x32a4>)
 80110ac:	4a28      	ldr	r2, [pc, #160]	@ (8011150 <tx_control+0x32a8>)
 80110ae:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 80110b0:	4b28      	ldr	r3, [pc, #160]	@ (8011154 <tx_control+0x32ac>)
 80110b2:	2217      	movs	r2, #23
 80110b4:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80110b6:	4b28      	ldr	r3, [pc, #160]	@ (8011158 <tx_control+0x32b0>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80110bc:	4b27      	ldr	r3, [pc, #156]	@ (801115c <tx_control+0x32b4>)
 80110be:	2200      	movs	r2, #0
 80110c0:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80110c2:	4b25      	ldr	r3, [pc, #148]	@ (8011158 <tx_control+0x32b0>)
 80110c4:	2201      	movs	r2, #1
 80110c6:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 80110c8:	4b25      	ldr	r3, [pc, #148]	@ (8011160 <tx_control+0x32b8>)
 80110ca:	2255      	movs	r2, #85	@ 0x55
 80110cc:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80110ce:	4b25      	ldr	r3, [pc, #148]	@ (8011164 <tx_control+0x32bc>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 80110d4:	e00f      	b.n	80110f6 <tx_control+0x324e>
		goto end_tx_wifi;//jp			end_tx_wifi
 80110d6:	46c0      	nop			@ (mov r8, r8)
 80110d8:	f7fe ff65 	bl	800ffa6 <tx_control+0x20fe>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 80110dc:	46c0      	nop			@ (mov r8, r8)
 80110de:	f7fe ff62 	bl	800ffa6 <tx_control+0x20fe>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80110e2:	46c0      	nop			@ (mov r8, r8)
 80110e4:	f7fe ff5f 	bl	800ffa6 <tx_control+0x20fe>
		goto end_tx_wifi;// jp		end_tx_wifi
 80110e8:	46c0      	nop			@ (mov r8, r8)
 80110ea:	f7fe ff5c 	bl	800ffa6 <tx_control+0x20fe>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80110ee:	46c0      	nop			@ (mov r8, r8)
 80110f0:	f7fe ff59 	bl	800ffa6 <tx_control+0x20fe>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 80110f4:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 80110f6:	f7fe ff56 	bl	800ffa6 <tx_control+0x20fe>
		goto end_tx_control_b;
 80110fa:	46c0      	nop			@ (mov r8, r8)

end_tx_control_b:
		asm ("nop");
 80110fc:	46c0      	nop			@ (mov r8, r8)

}
 80110fe:	46c0      	nop			@ (mov r8, r8)
 8011100:	46bd      	mov	sp, r7
 8011102:	b012      	add	sp, #72	@ 0x48
 8011104:	bd80      	pop	{r7, pc}
 8011106:	46c0      	nop			@ (mov r8, r8)
 8011108:	20000b98 	.word	0x20000b98
 801110c:	20000e70 	.word	0x20000e70
 8011110:	20000ff4 	.word	0x20000ff4
 8011114:	20000c9c 	.word	0x20000c9c
 8011118:	20000e4c 	.word	0x20000e4c
 801111c:	20000e4e 	.word	0x20000e4e
 8011120:	20000bc0 	.word	0x20000bc0
 8011124:	20000bc1 	.word	0x20000bc1
 8011128:	20000bc2 	.word	0x20000bc2
 801112c:	20000bc3 	.word	0x20000bc3
 8011130:	20000bde 	.word	0x20000bde
 8011134:	20000e5c 	.word	0x20000e5c
 8011138:	20000e64 	.word	0x20000e64
 801113c:	20000e68 	.word	0x20000e68
 8011140:	20000c64 	.word	0x20000c64
 8011144:	20000eb0 	.word	0x20000eb0
 8011148:	20000ea8 	.word	0x20000ea8
 801114c:	20000eac 	.word	0x20000eac
 8011150:	2000100b 	.word	0x2000100b
 8011154:	20000ecc 	.word	0x20000ecc
 8011158:	20000eb8 	.word	0x20000eb8
 801115c:	20000ed0 	.word	0x20000ed0
 8011160:	20000eb5 	.word	0x20000eb5
 8011164:	20000ec0 	.word	0x20000ec0

08011168 <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 801116e:	4b2f      	ldr	r3, [pc, #188]	@ (801122c <prepTXlogg_2+0xc4>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	337e      	adds	r3, #126	@ 0x7e
 8011178:	4a2d      	ldr	r2, [pc, #180]	@ (8011230 <prepTXlogg_2+0xc8>)
 801117a:	7812      	ldrb	r2, [r2, #0]
 801117c:	701a      	strb	r2, [r3, #0]


			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 801117e:	4b2d      	ldr	r3, [pc, #180]	@ (8011234 <prepTXlogg_2+0xcc>)
 8011180:	22aa      	movs	r2, #170	@ 0xaa
 8011182:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 8011184:	4b2c      	ldr	r3, [pc, #176]	@ (8011238 <prepTXlogg_2+0xd0>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	01db      	lsls	r3, r3, #7
 801118a:	b29a      	uxth	r2, r3
 801118c:	4b2b      	ldr	r3, [pc, #172]	@ (801123c <prepTXlogg_2+0xd4>)
 801118e:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 8011190:	4b2b      	ldr	r3, [pc, #172]	@ (8011240 <prepTXlogg_2+0xd8>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4a29      	ldr	r2, [pc, #164]	@ (801123c <prepTXlogg_2+0xd4>)
 8011196:	8812      	ldrh	r2, [r2, #0]
 8011198:	189a      	adds	r2, r3, r2
 801119a:	4b2a      	ldr	r3, [pc, #168]	@ (8011244 <prepTXlogg_2+0xdc>)
 801119c:	601a      	str	r2, [r3, #0]
			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 801119e:	4b23      	ldr	r3, [pc, #140]	@ (801122c <prepTXlogg_2+0xc4>)
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	4b29      	ldr	r3, [pc, #164]	@ (8011248 <prepTXlogg_2+0xe0>)
 80111a4:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 80111a6:	f7f6 f8f3 	bl	8007390 <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 80111aa:	f7f5 fff5 	bl	8007198 <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 80111ae:	f7f5 ffdb 	bl	8007168 <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 80111b2:	4b21      	ldr	r3, [pc, #132]	@ (8011238 <prepTXlogg_2+0xd0>)
 80111b4:	781a      	ldrb	r2, [r3, #0]
 80111b6:	4b25      	ldr	r3, [pc, #148]	@ (801124c <prepTXlogg_2+0xe4>)
 80111b8:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 80111ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011230 <prepTXlogg_2+0xc8>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d006      	beq.n	80111d0 <prepTXlogg_2+0x68>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 80111c2:	4b22      	ldr	r3, [pc, #136]	@ (801124c <prepTXlogg_2+0xe4>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	3301      	adds	r3, #1
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	4b20      	ldr	r3, [pc, #128]	@ (801124c <prepTXlogg_2+0xe4>)
 80111cc:	701a      	strb	r2, [r3, #0]
 80111ce:	e000      	b.n	80111d2 <prepTXlogg_2+0x6a>
				goto noIncBlock;//jreq	noIncBlock
 80111d0:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 80111d2:	4b1e      	ldr	r3, [pc, #120]	@ (801124c <prepTXlogg_2+0xe4>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	01db      	lsls	r3, r3, #7
 80111d8:	b29a      	uxth	r2, r3
 80111da:	4b18      	ldr	r3, [pc, #96]	@ (801123c <prepTXlogg_2+0xd4>)
 80111dc:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 80111de:	4b18      	ldr	r3, [pc, #96]	@ (8011240 <prepTXlogg_2+0xd8>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4a16      	ldr	r2, [pc, #88]	@ (801123c <prepTXlogg_2+0xd4>)
 80111e4:	8812      	ldrh	r2, [r2, #0]
 80111e6:	189b      	adds	r3, r3, r2
 80111e8:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 80111ea:	4b19      	ldr	r3, [pc, #100]	@ (8011250 <prepTXlogg_2+0xe8>)
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 80111f0:	4b18      	ldr	r3, [pc, #96]	@ (8011254 <prepTXlogg_2+0xec>)
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 80111f6:	4b18      	ldr	r3, [pc, #96]	@ (8011258 <prepTXlogg_2+0xf0>)
 80111f8:	2201      	movs	r2, #1
 80111fa:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 80111fc:	4b15      	ldr	r3, [pc, #84]	@ (8011254 <prepTXlogg_2+0xec>)
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	4b16      	ldr	r3, [pc, #88]	@ (801125c <prepTXlogg_2+0xf4>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	429a      	cmp	r2, r3
 8011206:	d106      	bne.n	8011216 <prepTXlogg_2+0xae>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 8011208:	4b15      	ldr	r3, [pc, #84]	@ (8011260 <prepTXlogg_2+0xf8>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 801120e:	4b12      	ldr	r3, [pc, #72]	@ (8011258 <prepTXlogg_2+0xf0>)
 8011210:	2200      	movs	r2, #0
 8011212:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 8011214:	e003      	b.n	801121e <prepTXlogg_2+0xb6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 8011216:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	3b01      	subs	r3, #1
 801121c:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 801121e:	4b11      	ldr	r3, [pc, #68]	@ (8011264 <prepTXlogg_2+0xfc>)
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	601a      	str	r2, [r3, #0]
			//ret
}
 8011224:	46c0      	nop			@ (mov r8, r8)
 8011226:	46bd      	mov	sp, r7
 8011228:	b002      	add	sp, #8
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000e40 	.word	0x20000e40
 8011230:	20000e37 	.word	0x20000e37
 8011234:	20000e28 	.word	0x20000e28
 8011238:	20000e36 	.word	0x20000e36
 801123c:	200008e6 	.word	0x200008e6
 8011240:	20000e3c 	.word	0x20000e3c
 8011244:	20000e2c 	.word	0x20000e2c
 8011248:	20000e30 	.word	0x20000e30
 801124c:	200008e4 	.word	0x200008e4
 8011250:	20000ea8 	.word	0x20000ea8
 8011254:	20000eb0 	.word	0x20000eb0
 8011258:	20000eb8 	.word	0x20000eb8
 801125c:	20000ec4 	.word	0x20000ec4
 8011260:	20000ec8 	.word	0x20000ec8
 8011264:	20000eac 	.word	0x20000eac

08011268 <borra_pagina_logger>:
	BloqDatalooger[comando1] =	0xF1; // mov		comando1,#$F1
	BloqDatalooger[comando2] = 	0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
}

void borra_pagina_logger(uint32_t pagina)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b088      	sub	sp, #32
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 8011270:	2300      	movs	r3, #0
 8011272:	60fb      	str	r3, [r7, #12]

    while (HAL_FLASH_Unlock() != HAL_OK);
 8011274:	46c0      	nop			@ (mov r8, r8)
 8011276:	f002 fd65 	bl	8013d44 <HAL_FLASH_Unlock>
 801127a:	1e03      	subs	r3, r0, #0
 801127c:	d1fb      	bne.n	8011276 <borra_pagina_logger+0xe>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // Borrado por páginas
 801127e:	2110      	movs	r1, #16
 8011280:	187b      	adds	r3, r7, r1
 8011282:	2202      	movs	r2, #2
 8011284:	601a      	str	r2, [r3, #0]
    eraseInitStruct.Page = pagina;                   // Página inicial a borrar
 8011286:	187b      	adds	r3, r7, r1
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbPages = 1;
 801128c:	187b      	adds	r3, r7, r1
 801128e:	2201      	movs	r2, #1
 8011290:	60da      	str	r2, [r3, #12]

    while (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK);
 8011292:	46c0      	nop			@ (mov r8, r8)
 8011294:	230c      	movs	r3, #12
 8011296:	18fa      	adds	r2, r7, r3
 8011298:	2310      	movs	r3, #16
 801129a:	18fb      	adds	r3, r7, r3
 801129c:	0011      	movs	r1, r2
 801129e:	0018      	movs	r0, r3
 80112a0:	f002 fdfe 	bl	8013ea0 <HAL_FLASHEx_Erase>
 80112a4:	1e03      	subs	r3, r0, #0
 80112a6:	d1f5      	bne.n	8011294 <borra_pagina_logger+0x2c>
    while (HAL_FLASH_Lock() != HAL_OK);
 80112a8:	46c0      	nop			@ (mov r8, r8)
 80112aa:	f002 fd6f 	bl	8013d8c <HAL_FLASH_Lock>
 80112ae:	1e03      	subs	r3, r0, #0
 80112b0:	d1fb      	bne.n	80112aa <borra_pagina_logger+0x42>

    pagina_borrado++;
 80112b2:	4b04      	ldr	r3, [pc, #16]	@ (80112c4 <borra_pagina_logger+0x5c>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	4b02      	ldr	r3, [pc, #8]	@ (80112c4 <borra_pagina_logger+0x5c>)
 80112ba:	601a      	str	r2, [r3, #0]
}
 80112bc:	46c0      	nop			@ (mov r8, r8)
 80112be:	46bd      	mov	sp, r7
 80112c0:	b008      	add	sp, #32
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	20000270 	.word	0x20000270

080112c8 <graba_bloque_fw>:

void graba_bloque_fw (void)
{
 80112c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ca:	b0b1      	sub	sp, #196	@ 0xc4
 80112cc:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80112ce:	2357      	movs	r3, #87	@ 0x57
 80112d0:	2168      	movs	r1, #104	@ 0x68
 80112d2:	185b      	adds	r3, r3, r1
 80112d4:	19da      	adds	r2, r3, r7
 80112d6:	2300      	movs	r3, #0
 80112d8:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 80112da:	2356      	movs	r3, #86	@ 0x56
 80112dc:	185b      	adds	r3, r3, r1
 80112de:	19da      	adds	r2, r3, r7
 80112e0:	2300      	movs	r3, #0
 80112e2:	7013      	strb	r3, [r2, #0]

	uint8_t a = 0;
 80112e4:	2355      	movs	r3, #85	@ 0x55
 80112e6:	185b      	adds	r3, r3, r1
 80112e8:	19da      	adds	r2, r3, r7
 80112ea:	2300      	movs	r3, #0
 80112ec:	7013      	strb	r3, [r2, #0]
	uint8_t b = 1;
 80112ee:	2354      	movs	r3, #84	@ 0x54
 80112f0:	185b      	adds	r3, r3, r1
 80112f2:	19da      	adds	r2, r3, r7
 80112f4:	2301      	movs	r3, #1
 80112f6:	7013      	strb	r3, [r2, #0]
	uint8_t c = 2;
 80112f8:	2353      	movs	r3, #83	@ 0x53
 80112fa:	185b      	adds	r3, r3, r1
 80112fc:	19da      	adds	r2, r3, r7
 80112fe:	2302      	movs	r3, #2
 8011300:	7013      	strb	r3, [r2, #0]
	uint8_t d = 3;
 8011302:	2352      	movs	r3, #82	@ 0x52
 8011304:	185b      	adds	r3, r3, r1
 8011306:	19da      	adds	r2, r3, r7
 8011308:	2303      	movs	r3, #3
 801130a:	7013      	strb	r3, [r2, #0]
	uint8_t e = 4;
 801130c:	2351      	movs	r3, #81	@ 0x51
 801130e:	185b      	adds	r3, r3, r1
 8011310:	19da      	adds	r2, r3, r7
 8011312:	2304      	movs	r3, #4
 8011314:	7013      	strb	r3, [r2, #0]
	uint8_t f = 5;
 8011316:	2350      	movs	r3, #80	@ 0x50
 8011318:	185b      	adds	r3, r3, r1
 801131a:	19da      	adds	r2, r3, r7
 801131c:	2305      	movs	r3, #5
 801131e:	7013      	strb	r3, [r2, #0]
	uint8_t g = 6;
 8011320:	234f      	movs	r3, #79	@ 0x4f
 8011322:	185b      	adds	r3, r3, r1
 8011324:	19da      	adds	r2, r3, r7
 8011326:	2306      	movs	r3, #6
 8011328:	7013      	strb	r3, [r2, #0]
	uint8_t h = 7;
 801132a:	234e      	movs	r3, #78	@ 0x4e
 801132c:	185b      	adds	r3, r3, r1
 801132e:	19da      	adds	r2, r3, r7
 8011330:	2307      	movs	r3, #7
 8011332:	7013      	strb	r3, [r2, #0]

//	uint32_t buffer_recepcion = 0;

	uint64_t buffer_recepcion = 0;
 8011334:	2200      	movs	r2, #0
 8011336:	2300      	movs	r3, #0
 8011338:	673a      	str	r2, [r7, #112]	@ 0x70
 801133a:	677b      	str	r3, [r7, #116]	@ 0x74

	uint64_t contenido1 = 0;
 801133c:	2200      	movs	r2, #0
 801133e:	2300      	movs	r3, #0
 8011340:	21a8      	movs	r1, #168	@ 0xa8
 8011342:	1879      	adds	r1, r7, r1
 8011344:	600a      	str	r2, [r1, #0]
 8011346:	604b      	str	r3, [r1, #4]
	uint64_t contenido2 = 0;
 8011348:	2200      	movs	r2, #0
 801134a:	2300      	movs	r3, #0
 801134c:	21a0      	movs	r1, #160	@ 0xa0
 801134e:	1879      	adds	r1, r7, r1
 8011350:	600a      	str	r2, [r1, #0]
 8011352:	604b      	str	r3, [r1, #4]
	uint64_t contenido3 = 0;
 8011354:	2200      	movs	r2, #0
 8011356:	2300      	movs	r3, #0
 8011358:	2198      	movs	r1, #152	@ 0x98
 801135a:	1879      	adds	r1, r7, r1
 801135c:	600a      	str	r2, [r1, #0]
 801135e:	604b      	str	r3, [r1, #4]
	uint64_t contenido4 = 0;
 8011360:	2200      	movs	r2, #0
 8011362:	2300      	movs	r3, #0
 8011364:	2190      	movs	r1, #144	@ 0x90
 8011366:	1879      	adds	r1, r7, r1
 8011368:	600a      	str	r2, [r1, #0]
 801136a:	604b      	str	r3, [r1, #4]
	uint64_t contenido5 = 0;
 801136c:	2200      	movs	r2, #0
 801136e:	2300      	movs	r3, #0
 8011370:	2188      	movs	r1, #136	@ 0x88
 8011372:	1879      	adds	r1, r7, r1
 8011374:	600a      	str	r2, [r1, #0]
 8011376:	604b      	str	r3, [r1, #4]
	uint64_t contenido6 = 0;
 8011378:	2200      	movs	r2, #0
 801137a:	2300      	movs	r3, #0
 801137c:	2180      	movs	r1, #128	@ 0x80
 801137e:	1879      	adds	r1, r7, r1
 8011380:	600a      	str	r2, [r1, #0]
 8011382:	604b      	str	r3, [r1, #4]
	uint64_t contenido7 = 0;
 8011384:	2200      	movs	r2, #0
 8011386:	2300      	movs	r3, #0
 8011388:	67ba      	str	r2, [r7, #120]	@ 0x78
 801138a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint64_t contenido8 = 0;
 801138c:	2200      	movs	r2, #0
 801138e:	2300      	movs	r3, #0
 8011390:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011392:	66fb      	str	r3, [r7, #108]	@ 0x6c

	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8011394:	46c0      	nop			@ (mov r8, r8)
 8011396:	f002 fcd5 	bl	8013d44 <HAL_FLASH_Unlock>
 801139a:	1e03      	subs	r3, r0, #0
 801139c:	d1fb      	bne.n	8011396 <graba_bloque_fw+0xce>
	for(i = 0; i < 16; i++)
 801139e:	2357      	movs	r3, #87	@ 0x57
 80113a0:	2268      	movs	r2, #104	@ 0x68
 80113a2:	189b      	adds	r3, r3, r2
 80113a4:	19da      	adds	r2, r3, r7
 80113a6:	2300      	movs	r3, #0
 80113a8:	7013      	strb	r3, [r2, #0]
 80113aa:	e1c0      	b.n	801172e <graba_bloque_fw+0x466>
	{
		switch (j)
 80113ac:	2356      	movs	r3, #86	@ 0x56
 80113ae:	2268      	movs	r2, #104	@ 0x68
 80113b0:	189b      	adds	r3, r3, r2
 80113b2:	19db      	adds	r3, r3, r7
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	2b07      	cmp	r3, #7
 80113b8:	d900      	bls.n	80113bc <graba_bloque_fw+0xf4>
 80113ba:	e1af      	b.n	801171c <graba_bloque_fw+0x454>
 80113bc:	009a      	lsls	r2, r3, #2
 80113be:	4be5      	ldr	r3, [pc, #916]	@ (8011754 <graba_bloque_fw+0x48c>)
 80113c0:	18d3      	adds	r3, r2, r3
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	469f      	mov	pc, r3
		{
			case 0:
				contenido1 =  RxBuffer_Ble[a];
 80113c6:	2355      	movs	r3, #85	@ 0x55
 80113c8:	2168      	movs	r1, #104	@ 0x68
 80113ca:	185b      	adds	r3, r3, r1
 80113cc:	19db      	adds	r3, r3, r7
 80113ce:	781a      	ldrb	r2, [r3, #0]
 80113d0:	4be1      	ldr	r3, [pc, #900]	@ (8011758 <graba_bloque_fw+0x490>)
 80113d2:	5c9b      	ldrb	r3, [r3, r2]
 80113d4:	22a8      	movs	r2, #168	@ 0xa8
 80113d6:	18ba      	adds	r2, r7, r2
 80113d8:	6013      	str	r3, [r2, #0]
 80113da:	2300      	movs	r3, #0
 80113dc:	22ac      	movs	r2, #172	@ 0xac
 80113de:	18ba      	adds	r2, r7, r2
 80113e0:	6013      	str	r3, [r2, #0]
				j++;
 80113e2:	2256      	movs	r2, #86	@ 0x56
 80113e4:	1853      	adds	r3, r2, r1
 80113e6:	19db      	adds	r3, r3, r7
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	1852      	adds	r2, r2, r1
 80113ec:	19d2      	adds	r2, r2, r7
 80113ee:	3301      	adds	r3, #1
 80113f0:	7013      	strb	r3, [r2, #0]
			case 1:

				contenido2 =  RxBuffer_Ble[b];
 80113f2:	2354      	movs	r3, #84	@ 0x54
 80113f4:	2068      	movs	r0, #104	@ 0x68
 80113f6:	181b      	adds	r3, r3, r0
 80113f8:	19db      	adds	r3, r3, r7
 80113fa:	781a      	ldrb	r2, [r3, #0]
 80113fc:	4bd6      	ldr	r3, [pc, #856]	@ (8011758 <graba_bloque_fw+0x490>)
 80113fe:	5c9b      	ldrb	r3, [r3, r2]
 8011400:	21a0      	movs	r1, #160	@ 0xa0
 8011402:	187a      	adds	r2, r7, r1
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	2300      	movs	r3, #0
 8011408:	26a4      	movs	r6, #164	@ 0xa4
 801140a:	19ba      	adds	r2, r7, r6
 801140c:	6013      	str	r3, [r2, #0]
				contenido2 = contenido2 << 8;
 801140e:	187b      	adds	r3, r7, r1
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	0e1a      	lsrs	r2, r3, #24
 8011414:	19bb      	adds	r3, r7, r6
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	021d      	lsls	r5, r3, #8
 801141a:	4315      	orrs	r5, r2
 801141c:	187b      	adds	r3, r7, r1
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	021c      	lsls	r4, r3, #8
 8011422:	187b      	adds	r3, r7, r1
 8011424:	601c      	str	r4, [r3, #0]
 8011426:	605d      	str	r5, [r3, #4]
				j++;
 8011428:	2256      	movs	r2, #86	@ 0x56
 801142a:	1813      	adds	r3, r2, r0
 801142c:	19db      	adds	r3, r3, r7
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	1812      	adds	r2, r2, r0
 8011432:	19d2      	adds	r2, r2, r7
 8011434:	3301      	adds	r3, #1
 8011436:	7013      	strb	r3, [r2, #0]

			case 2:
				contenido3 =  RxBuffer_Ble[c];
 8011438:	2353      	movs	r3, #83	@ 0x53
 801143a:	2068      	movs	r0, #104	@ 0x68
 801143c:	181b      	adds	r3, r3, r0
 801143e:	19db      	adds	r3, r3, r7
 8011440:	781a      	ldrb	r2, [r3, #0]
 8011442:	4bc5      	ldr	r3, [pc, #788]	@ (8011758 <graba_bloque_fw+0x490>)
 8011444:	5c9b      	ldrb	r3, [r3, r2]
 8011446:	2198      	movs	r1, #152	@ 0x98
 8011448:	187a      	adds	r2, r7, r1
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	2300      	movs	r3, #0
 801144e:	269c      	movs	r6, #156	@ 0x9c
 8011450:	19ba      	adds	r2, r7, r6
 8011452:	6013      	str	r3, [r2, #0]
				contenido3 = contenido3 << 16;
 8011454:	187b      	adds	r3, r7, r1
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	0c1a      	lsrs	r2, r3, #16
 801145a:	19bb      	adds	r3, r7, r6
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	041b      	lsls	r3, r3, #16
 8011460:	667b      	str	r3, [r7, #100]	@ 0x64
 8011462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011464:	4313      	orrs	r3, r2
 8011466:	667b      	str	r3, [r7, #100]	@ 0x64
 8011468:	187b      	adds	r3, r7, r1
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	041b      	lsls	r3, r3, #16
 801146e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011470:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011474:	1879      	adds	r1, r7, r1
 8011476:	600a      	str	r2, [r1, #0]
 8011478:	604b      	str	r3, [r1, #4]
				j++;
 801147a:	2256      	movs	r2, #86	@ 0x56
 801147c:	1813      	adds	r3, r2, r0
 801147e:	19db      	adds	r3, r3, r7
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	1812      	adds	r2, r2, r0
 8011484:	19d2      	adds	r2, r2, r7
 8011486:	3301      	adds	r3, #1
 8011488:	7013      	strb	r3, [r2, #0]

			case 3:
				contenido4 =  RxBuffer_Ble[d];
 801148a:	2352      	movs	r3, #82	@ 0x52
 801148c:	2068      	movs	r0, #104	@ 0x68
 801148e:	181b      	adds	r3, r3, r0
 8011490:	19db      	adds	r3, r3, r7
 8011492:	781a      	ldrb	r2, [r3, #0]
 8011494:	4bb0      	ldr	r3, [pc, #704]	@ (8011758 <graba_bloque_fw+0x490>)
 8011496:	5c9b      	ldrb	r3, [r3, r2]
 8011498:	2190      	movs	r1, #144	@ 0x90
 801149a:	187a      	adds	r2, r7, r1
 801149c:	6013      	str	r3, [r2, #0]
 801149e:	2300      	movs	r3, #0
 80114a0:	2694      	movs	r6, #148	@ 0x94
 80114a2:	19ba      	adds	r2, r7, r6
 80114a4:	6013      	str	r3, [r2, #0]
				contenido4 = contenido4 << 24;
 80114a6:	187b      	adds	r3, r7, r1
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	0a1a      	lsrs	r2, r3, #8
 80114ac:	19bb      	adds	r3, r7, r6
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	061b      	lsls	r3, r3, #24
 80114b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114b6:	4313      	orrs	r3, r2
 80114b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114ba:	187b      	adds	r3, r7, r1
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	061b      	lsls	r3, r3, #24
 80114c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80114c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80114c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114c6:	1879      	adds	r1, r7, r1
 80114c8:	600a      	str	r2, [r1, #0]
 80114ca:	604b      	str	r3, [r1, #4]
				j++;
 80114cc:	2256      	movs	r2, #86	@ 0x56
 80114ce:	1813      	adds	r3, r2, r0
 80114d0:	19db      	adds	r3, r3, r7
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	1812      	adds	r2, r2, r0
 80114d6:	19d2      	adds	r2, r2, r7
 80114d8:	3301      	adds	r3, #1
 80114da:	7013      	strb	r3, [r2, #0]

			case 4:
				contenido5 =  RxBuffer_Ble[e];
 80114dc:	2351      	movs	r3, #81	@ 0x51
 80114de:	2068      	movs	r0, #104	@ 0x68
 80114e0:	181b      	adds	r3, r3, r0
 80114e2:	19db      	adds	r3, r3, r7
 80114e4:	781a      	ldrb	r2, [r3, #0]
 80114e6:	4b9c      	ldr	r3, [pc, #624]	@ (8011758 <graba_bloque_fw+0x490>)
 80114e8:	5c9b      	ldrb	r3, [r3, r2]
 80114ea:	2188      	movs	r1, #136	@ 0x88
 80114ec:	187a      	adds	r2, r7, r1
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	2300      	movs	r3, #0
 80114f2:	228c      	movs	r2, #140	@ 0x8c
 80114f4:	18ba      	adds	r2, r7, r2
 80114f6:	6013      	str	r3, [r2, #0]
				contenido5 = contenido5 << 32;
 80114f8:	187b      	adds	r3, r7, r1
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	001b      	movs	r3, r3
 80114fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011500:	2300      	movs	r3, #0
 8011502:	623b      	str	r3, [r7, #32]
 8011504:	6a3a      	ldr	r2, [r7, #32]
 8011506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011508:	1879      	adds	r1, r7, r1
 801150a:	600a      	str	r2, [r1, #0]
 801150c:	604b      	str	r3, [r1, #4]
				j++;
 801150e:	2256      	movs	r2, #86	@ 0x56
 8011510:	1813      	adds	r3, r2, r0
 8011512:	19db      	adds	r3, r3, r7
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	1812      	adds	r2, r2, r0
 8011518:	19d2      	adds	r2, r2, r7
 801151a:	3301      	adds	r3, #1
 801151c:	7013      	strb	r3, [r2, #0]

			case 5:
				contenido6 = RxBuffer_Ble[f];
 801151e:	2350      	movs	r3, #80	@ 0x50
 8011520:	2068      	movs	r0, #104	@ 0x68
 8011522:	181b      	adds	r3, r3, r0
 8011524:	19db      	adds	r3, r3, r7
 8011526:	781a      	ldrb	r2, [r3, #0]
 8011528:	4b8b      	ldr	r3, [pc, #556]	@ (8011758 <graba_bloque_fw+0x490>)
 801152a:	5c9b      	ldrb	r3, [r3, r2]
 801152c:	2180      	movs	r1, #128	@ 0x80
 801152e:	187a      	adds	r2, r7, r1
 8011530:	6013      	str	r3, [r2, #0]
 8011532:	2300      	movs	r3, #0
 8011534:	2284      	movs	r2, #132	@ 0x84
 8011536:	18ba      	adds	r2, r7, r2
 8011538:	6013      	str	r3, [r2, #0]
				contenido6 = contenido6 << 40;
 801153a:	187b      	adds	r3, r7, r1
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	021b      	lsls	r3, r3, #8
 8011540:	61fb      	str	r3, [r7, #28]
 8011542:	2300      	movs	r3, #0
 8011544:	61bb      	str	r3, [r7, #24]
 8011546:	69ba      	ldr	r2, [r7, #24]
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	1879      	adds	r1, r7, r1
 801154c:	600a      	str	r2, [r1, #0]
 801154e:	604b      	str	r3, [r1, #4]
				j++;
 8011550:	2256      	movs	r2, #86	@ 0x56
 8011552:	1813      	adds	r3, r2, r0
 8011554:	19db      	adds	r3, r3, r7
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	1812      	adds	r2, r2, r0
 801155a:	19d2      	adds	r2, r2, r7
 801155c:	3301      	adds	r3, #1
 801155e:	7013      	strb	r3, [r2, #0]

			case 6:
				contenido7 = RxBuffer_Ble[g];
 8011560:	234f      	movs	r3, #79	@ 0x4f
 8011562:	2168      	movs	r1, #104	@ 0x68
 8011564:	185b      	adds	r3, r3, r1
 8011566:	19db      	adds	r3, r3, r7
 8011568:	781a      	ldrb	r2, [r3, #0]
 801156a:	4b7b      	ldr	r3, [pc, #492]	@ (8011758 <graba_bloque_fw+0x490>)
 801156c:	5c9b      	ldrb	r3, [r3, r2]
 801156e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011570:	2300      	movs	r3, #0
 8011572:	67fb      	str	r3, [r7, #124]	@ 0x7c
				contenido7 = contenido7 << 48;
 8011574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011576:	041b      	lsls	r3, r3, #16
 8011578:	617b      	str	r3, [r7, #20]
 801157a:	2300      	movs	r3, #0
 801157c:	613b      	str	r3, [r7, #16]
 801157e:	693a      	ldr	r2, [r7, #16]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011584:	67fb      	str	r3, [r7, #124]	@ 0x7c
				j++;
 8011586:	2256      	movs	r2, #86	@ 0x56
 8011588:	1853      	adds	r3, r2, r1
 801158a:	19db      	adds	r3, r3, r7
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	1852      	adds	r2, r2, r1
 8011590:	19d2      	adds	r2, r2, r7
 8011592:	3301      	adds	r3, #1
 8011594:	7013      	strb	r3, [r2, #0]

			case 7:
				contenido8 = RxBuffer_Ble[h];
 8011596:	234e      	movs	r3, #78	@ 0x4e
 8011598:	2268      	movs	r2, #104	@ 0x68
 801159a:	189b      	adds	r3, r3, r2
 801159c:	19db      	adds	r3, r3, r7
 801159e:	781a      	ldrb	r2, [r3, #0]
 80115a0:	4b6d      	ldr	r3, [pc, #436]	@ (8011758 <graba_bloque_fw+0x490>)
 80115a2:	5c9b      	ldrb	r3, [r3, r2]
 80115a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115a6:	2300      	movs	r3, #0
 80115a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
				contenido8 = contenido8 << 56;
 80115aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115ac:	061b      	lsls	r3, r3, #24
 80115ae:	60fb      	str	r3, [r7, #12]
 80115b0:	2300      	movs	r3, #0
 80115b2:	60bb      	str	r3, [r7, #8]
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80115ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

				buffer_recepcion = contenido1 | contenido2 | contenido3 | contenido4 | contenido5 |contenido6 | contenido7 |contenido8;
 80115bc:	23a8      	movs	r3, #168	@ 0xa8
 80115be:	18fb      	adds	r3, r7, r3
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	23a0      	movs	r3, #160	@ 0xa0
 80115c4:	18fb      	adds	r3, r7, r3
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	431a      	orrs	r2, r3
 80115ca:	653a      	str	r2, [r7, #80]	@ 0x50
 80115cc:	23ac      	movs	r3, #172	@ 0xac
 80115ce:	18fb      	adds	r3, r7, r3
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	23a4      	movs	r3, #164	@ 0xa4
 80115d4:	18fb      	adds	r3, r7, r3
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	431a      	orrs	r2, r3
 80115da:	657a      	str	r2, [r7, #84]	@ 0x54
 80115dc:	2398      	movs	r3, #152	@ 0x98
 80115de:	18fb      	adds	r3, r7, r3
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80115e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115e6:	0008      	movs	r0, r1
 80115e8:	4318      	orrs	r0, r3
 80115ea:	64b8      	str	r0, [r7, #72]	@ 0x48
 80115ec:	239c      	movs	r3, #156	@ 0x9c
 80115ee:	18fb      	adds	r3, r7, r3
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	431a      	orrs	r2, r3
 80115f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80115f6:	2390      	movs	r3, #144	@ 0x90
 80115f8:	18fb      	adds	r3, r7, r3
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80115fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011600:	0008      	movs	r0, r1
 8011602:	4318      	orrs	r0, r3
 8011604:	6438      	str	r0, [r7, #64]	@ 0x40
 8011606:	2394      	movs	r3, #148	@ 0x94
 8011608:	18fb      	adds	r3, r7, r3
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	431a      	orrs	r2, r3
 801160e:	647a      	str	r2, [r7, #68]	@ 0x44
 8011610:	2388      	movs	r3, #136	@ 0x88
 8011612:	18fb      	adds	r3, r7, r3
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801161a:	0008      	movs	r0, r1
 801161c:	4318      	orrs	r0, r3
 801161e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011620:	238c      	movs	r3, #140	@ 0x8c
 8011622:	18fb      	adds	r3, r7, r3
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	431a      	orrs	r2, r3
 8011628:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801162a:	2380      	movs	r3, #128	@ 0x80
 801162c:	18fb      	adds	r3, r7, r3
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011634:	0008      	movs	r0, r1
 8011636:	4318      	orrs	r0, r3
 8011638:	6338      	str	r0, [r7, #48]	@ 0x30
 801163a:	2384      	movs	r3, #132	@ 0x84
 801163c:	18fb      	adds	r3, r7, r3
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	431a      	orrs	r2, r3
 8011642:	637a      	str	r2, [r7, #52]	@ 0x34
 8011644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011646:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801164a:	0008      	movs	r0, r1
 801164c:	4318      	orrs	r0, r3
 801164e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011652:	431a      	orrs	r2, r3
 8011654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801165a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801165c:	0008      	movs	r0, r1
 801165e:	4318      	orrs	r0, r3
 8011660:	6038      	str	r0, [r7, #0]
 8011662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011664:	431a      	orrs	r2, r3
 8011666:	607a      	str	r2, [r7, #4]
 8011668:	683a      	ldr	r2, [r7, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	673a      	str	r2, [r7, #112]	@ 0x70
 801166e:	677b      	str	r3, [r7, #116]	@ 0x74
				while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
 8011670:	46c0      	nop			@ (mov r8, r8)
 8011672:	4b3a      	ldr	r3, [pc, #232]	@ (801175c <graba_bloque_fw+0x494>)
 8011674:	6819      	ldr	r1, [r3, #0]
 8011676:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011678:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801167a:	2001      	movs	r0, #1
 801167c:	f002 fb14 	bl	8013ca8 <HAL_FLASH_Program>
 8011680:	1e03      	subs	r3, r0, #0
 8011682:	d1f6      	bne.n	8011672 <graba_bloque_fw+0x3aa>
				//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion)!=  HAL_OK);
				//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion);
				direccion_fw = direccion_fw + 8;
 8011684:	4b35      	ldr	r3, [pc, #212]	@ (801175c <graba_bloque_fw+0x494>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	3308      	adds	r3, #8
 801168a:	001a      	movs	r2, r3
 801168c:	4b33      	ldr	r3, [pc, #204]	@ (801175c <graba_bloque_fw+0x494>)
 801168e:	601a      	str	r2, [r3, #0]
				j = 0;
 8011690:	2356      	movs	r3, #86	@ 0x56
 8011692:	2168      	movs	r1, #104	@ 0x68
 8011694:	185b      	adds	r3, r3, r1
 8011696:	19da      	adds	r2, r3, r7
 8011698:	2300      	movs	r3, #0
 801169a:	7013      	strb	r3, [r2, #0]
				a = a + 8;
 801169c:	2355      	movs	r3, #85	@ 0x55
 801169e:	185a      	adds	r2, r3, r1
 80116a0:	19d2      	adds	r2, r2, r7
 80116a2:	185b      	adds	r3, r3, r1
 80116a4:	19db      	adds	r3, r3, r7
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	3308      	adds	r3, #8
 80116aa:	7013      	strb	r3, [r2, #0]
				b = b + 8;
 80116ac:	2354      	movs	r3, #84	@ 0x54
 80116ae:	185a      	adds	r2, r3, r1
 80116b0:	19d2      	adds	r2, r2, r7
 80116b2:	185b      	adds	r3, r3, r1
 80116b4:	19db      	adds	r3, r3, r7
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	3308      	adds	r3, #8
 80116ba:	7013      	strb	r3, [r2, #0]
				c = c + 8;
 80116bc:	2353      	movs	r3, #83	@ 0x53
 80116be:	185a      	adds	r2, r3, r1
 80116c0:	19d2      	adds	r2, r2, r7
 80116c2:	185b      	adds	r3, r3, r1
 80116c4:	19db      	adds	r3, r3, r7
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	3308      	adds	r3, #8
 80116ca:	7013      	strb	r3, [r2, #0]
				d = d + 8;
 80116cc:	2352      	movs	r3, #82	@ 0x52
 80116ce:	185a      	adds	r2, r3, r1
 80116d0:	19d2      	adds	r2, r2, r7
 80116d2:	185b      	adds	r3, r3, r1
 80116d4:	19db      	adds	r3, r3, r7
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	3308      	adds	r3, #8
 80116da:	7013      	strb	r3, [r2, #0]
				e = e + 8;
 80116dc:	2351      	movs	r3, #81	@ 0x51
 80116de:	185a      	adds	r2, r3, r1
 80116e0:	19d2      	adds	r2, r2, r7
 80116e2:	185b      	adds	r3, r3, r1
 80116e4:	19db      	adds	r3, r3, r7
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	3308      	adds	r3, #8
 80116ea:	7013      	strb	r3, [r2, #0]
				f = f + 8;
 80116ec:	2350      	movs	r3, #80	@ 0x50
 80116ee:	185a      	adds	r2, r3, r1
 80116f0:	19d2      	adds	r2, r2, r7
 80116f2:	185b      	adds	r3, r3, r1
 80116f4:	19db      	adds	r3, r3, r7
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	3308      	adds	r3, #8
 80116fa:	7013      	strb	r3, [r2, #0]
				g = g + 8;
 80116fc:	234f      	movs	r3, #79	@ 0x4f
 80116fe:	185a      	adds	r2, r3, r1
 8011700:	19d2      	adds	r2, r2, r7
 8011702:	185b      	adds	r3, r3, r1
 8011704:	19db      	adds	r3, r3, r7
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	3308      	adds	r3, #8
 801170a:	7013      	strb	r3, [r2, #0]
				h = h + 8;
 801170c:	234e      	movs	r3, #78	@ 0x4e
 801170e:	185a      	adds	r2, r3, r1
 8011710:	19d2      	adds	r2, r2, r7
 8011712:	185b      	adds	r3, r3, r1
 8011714:	19db      	adds	r3, r3, r7
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	3308      	adds	r3, #8
 801171a:	7013      	strb	r3, [r2, #0]
	for(i = 0; i < 16; i++)
 801171c:	2257      	movs	r2, #87	@ 0x57
 801171e:	2168      	movs	r1, #104	@ 0x68
 8011720:	1853      	adds	r3, r2, r1
 8011722:	19db      	adds	r3, r3, r7
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	1852      	adds	r2, r2, r1
 8011728:	19d2      	adds	r2, r2, r7
 801172a:	3301      	adds	r3, #1
 801172c:	7013      	strb	r3, [r2, #0]
 801172e:	2357      	movs	r3, #87	@ 0x57
 8011730:	2268      	movs	r2, #104	@ 0x68
 8011732:	189b      	adds	r3, r3, r2
 8011734:	19db      	adds	r3, r3, r7
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	2b0f      	cmp	r3, #15
 801173a:	d800      	bhi.n	801173e <graba_bloque_fw+0x476>
 801173c:	e636      	b.n	80113ac <graba_bloque_fw+0xe4>
		}


	}
	while(HAL_FLASH_Lock() != HAL_OK );
 801173e:	46c0      	nop			@ (mov r8, r8)
 8011740:	f002 fb24 	bl	8013d8c <HAL_FLASH_Lock>
 8011744:	1e03      	subs	r3, r0, #0
 8011746:	d1fb      	bne.n	8011740 <graba_bloque_fw+0x478>
}
 8011748:	46c0      	nop			@ (mov r8, r8)
 801174a:	46c0      	nop			@ (mov r8, r8)
 801174c:	46bd      	mov	sp, r7
 801174e:	b031      	add	sp, #196	@ 0xc4
 8011750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011752:	46c0      	nop			@ (mov r8, r8)
 8011754:	0801c2f4 	.word	0x0801c2f4
 8011758:	20000998 	.word	0x20000998
 801175c:	20000274 	.word	0x20000274

08011760 <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 8011760:	b580      	push	{r7, lr}
 8011762:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 8011764:	4b8b      	ldr	r3, [pc, #556]	@ (8011994 <voltmetro+0x234>)
 8011766:	799b      	ldrb	r3, [r3, #6]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d100      	bne.n	801176e <voltmetro+0xe>
 801176c:	e0fb      	b.n	8011966 <voltmetro+0x206>
					goto voltmetro1;
 801176e:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 8011770:	4b89      	ldr	r3, [pc, #548]	@ (8011998 <voltmetro+0x238>)
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	3301      	adds	r3, #1
 8011776:	b2da      	uxtb	r2, r3
 8011778:	4b87      	ldr	r3, [pc, #540]	@ (8011998 <voltmetro+0x238>)
 801177a:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 801177c:	4b86      	ldr	r3, [pc, #536]	@ (8011998 <voltmetro+0x238>)
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	2b18      	cmp	r3, #24
 8011782:	d800      	bhi.n	8011786 <voltmetro+0x26>
 8011784:	e06f      	b.n	8011866 <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 8011786:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 8011788:	4b83      	ldr	r3, [pc, #524]	@ (8011998 <voltmetro+0x238>)
 801178a:	2200      	movs	r2, #0
 801178c:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 801178e:	4b83      	ldr	r3, [pc, #524]	@ (801199c <voltmetro+0x23c>)
 8011790:	781a      	ldrb	r2, [r3, #0]
 8011792:	4b83      	ldr	r3, [pc, #524]	@ (80119a0 <voltmetro+0x240>)
 8011794:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 8011796:	4b82      	ldr	r3, [pc, #520]	@ (80119a0 <voltmetro+0x240>)
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	2bff      	cmp	r3, #255	@ 0xff
 801179c:	d10a      	bne.n	80117b4 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 801179e:	4b81      	ldr	r3, [pc, #516]	@ (80119a4 <voltmetro+0x244>)
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	d019      	beq.n	80117da <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 80117a6:	4b7f      	ldr	r3, [pc, #508]	@ (80119a4 <voltmetro+0x244>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	3301      	adds	r3, #1
 80117ac:	b2da      	uxtb	r2, r3
 80117ae:	4b7d      	ldr	r3, [pc, #500]	@ (80119a4 <voltmetro+0x244>)
 80117b0:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 80117b2:	e05b      	b.n	801186c <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 80117b4:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 80117b6:	4b7b      	ldr	r3, [pc, #492]	@ (80119a4 <voltmetro+0x244>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 80117bc:	4b78      	ldr	r3, [pc, #480]	@ (80119a0 <voltmetro+0x240>)
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b32      	cmp	r3, #50	@ 0x32
 80117c2:	d82a      	bhi.n	801181a <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 80117c4:	4b78      	ldr	r3, [pc, #480]	@ (80119a8 <voltmetro+0x248>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d008      	beq.n	80117de <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 80117cc:	4b76      	ldr	r3, [pc, #472]	@ (80119a8 <voltmetro+0x248>)
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	3301      	adds	r3, #1
 80117d2:	b2da      	uxtb	r2, r3
 80117d4:	4b74      	ldr	r3, [pc, #464]	@ (80119a8 <voltmetro+0x248>)
 80117d6:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 80117d8:	e048      	b.n	801186c <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 80117da:	46c0      	nop			@ (mov r8, r8)
 80117dc:	e000      	b.n	80117e0 <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 80117de:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 80117e0:	4b72      	ldr	r3, [pc, #456]	@ (80119ac <voltmetro+0x24c>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 80117e6:	4b72      	ldr	r3, [pc, #456]	@ (80119b0 <voltmetro+0x250>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d103      	bne.n	80117f6 <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 80117ee:	4b6f      	ldr	r3, [pc, #444]	@ (80119ac <voltmetro+0x24c>)
 80117f0:	2201      	movs	r2, #1
 80117f2:	701a      	strb	r2, [r3, #0]
 80117f4:	e000      	b.n	80117f8 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 80117f6:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 80117f8:	4b6e      	ldr	r3, [pc, #440]	@ (80119b4 <voltmetro+0x254>)
 80117fa:	2200      	movs	r2, #0
 80117fc:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 80117fe:	4b6e      	ldr	r3, [pc, #440]	@ (80119b8 <voltmetro+0x258>)
 8011800:	2273      	movs	r2, #115	@ 0x73
 8011802:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 8011804:	4b6d      	ldr	r3, [pc, #436]	@ (80119bc <voltmetro+0x25c>)
 8011806:	2257      	movs	r2, #87	@ 0x57
 8011808:	5c9b      	ldrb	r3, [r3, r2]
 801180a:	2b02      	cmp	r3, #2
 801180c:	d103      	bne.n	8011816 <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 801180e:	4b6a      	ldr	r3, [pc, #424]	@ (80119b8 <voltmetro+0x258>)
 8011810:	22d2      	movs	r2, #210	@ 0xd2
 8011812:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 8011814:	e02a      	b.n	801186c <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 8011816:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 8011818:	e028      	b.n	801186c <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 801181a:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 801181c:	4b62      	ldr	r3, [pc, #392]	@ (80119a8 <voltmetro+0x248>)
 801181e:	2200      	movs	r2, #0
 8011820:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8011822:	4b62      	ldr	r3, [pc, #392]	@ (80119ac <voltmetro+0x24c>)
 8011824:	2200      	movs	r2, #0
 8011826:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 8011828:	4b62      	ldr	r3, [pc, #392]	@ (80119b4 <voltmetro+0x254>)
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	001a      	movs	r2, r3
 801182e:	4b5c      	ldr	r3, [pc, #368]	@ (80119a0 <voltmetro+0x240>)
 8011830:	7819      	ldrb	r1, [r3, #0]
 8011832:	4b63      	ldr	r3, [pc, #396]	@ (80119c0 <voltmetro+0x260>)
 8011834:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 8011836:	4b5f      	ldr	r3, [pc, #380]	@ (80119b4 <voltmetro+0x254>)
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	3301      	adds	r3, #1
 801183c:	b2da      	uxtb	r2, r3
 801183e:	4b5d      	ldr	r3, [pc, #372]	@ (80119b4 <voltmetro+0x254>)
 8011840:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 8011842:	4b5c      	ldr	r3, [pc, #368]	@ (80119b4 <voltmetro+0x254>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	2b07      	cmp	r3, #7
 8011848:	d90f      	bls.n	801186a <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 801184a:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 801184c:	4b59      	ldr	r3, [pc, #356]	@ (80119b4 <voltmetro+0x254>)
 801184e:	2200      	movs	r2, #0
 8011850:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 8011852:	4b5b      	ldr	r3, [pc, #364]	@ (80119c0 <voltmetro+0x260>)
 8011854:	2108      	movs	r1, #8
 8011856:	0018      	movs	r0, r3
 8011858:	f7f4 f88e 	bl	8005978 <prom8m1b>
 801185c:	0003      	movs	r3, r0
 801185e:	b2da      	uxtb	r2, r3
 8011860:	4b55      	ldr	r3, [pc, #340]	@ (80119b8 <voltmetro+0x258>)
 8011862:	701a      	strb	r2, [r3, #0]
 8011864:	e002      	b.n	801186c <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 8011866:	46c0      	nop			@ (mov r8, r8)
 8011868:	e000      	b.n	801186c <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 801186a:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 801186c:	4b55      	ldr	r3, [pc, #340]	@ (80119c4 <voltmetro+0x264>)
 801186e:	79db      	ldrb	r3, [r3, #7]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d104      	bne.n	801187e <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 8011874:	4b54      	ldr	r3, [pc, #336]	@ (80119c8 <voltmetro+0x268>)
 8011876:	781a      	ldrb	r2, [r3, #0]
 8011878:	4b54      	ldr	r3, [pc, #336]	@ (80119cc <voltmetro+0x26c>)
 801187a:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 801187c:	e004      	b.n	8011888 <voltmetro+0x128>
					goto hist_vla;
 801187e:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 8011880:	4b53      	ldr	r3, [pc, #332]	@ (80119d0 <voltmetro+0x270>)
 8011882:	781a      	ldrb	r2, [r3, #0]
 8011884:	4b51      	ldr	r3, [pc, #324]	@ (80119cc <voltmetro+0x26c>)
 8011886:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 8011888:	4b50      	ldr	r3, [pc, #320]	@ (80119cc <voltmetro+0x26c>)
 801188a:	781a      	ldrb	r2, [r3, #0]
 801188c:	4b4a      	ldr	r3, [pc, #296]	@ (80119b8 <voltmetro+0x258>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	429a      	cmp	r2, r3
 8011892:	d80c      	bhi.n	80118ae <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 8011894:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 8011896:	4b4f      	ldr	r3, [pc, #316]	@ (80119d4 <voltmetro+0x274>)
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d165      	bne.n	801196a <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 801189e:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 80118a0:	4948      	ldr	r1, [pc, #288]	@ (80119c4 <voltmetro+0x264>)
 80118a2:	4848      	ldr	r0, [pc, #288]	@ (80119c4 <voltmetro+0x264>)
 80118a4:	2306      	movs	r3, #6
 80118a6:	2207      	movs	r2, #7
 80118a8:	f7fb ff3c 	bl	800d724 <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 80118ac:	e02e      	b.n	801190c <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 80118ae:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 80118b0:	4b42      	ldr	r3, [pc, #264]	@ (80119bc <voltmetro+0x25c>)
 80118b2:	2245      	movs	r2, #69	@ 0x45
 80118b4:	5c9a      	ldrb	r2, [r3, r2]
 80118b6:	4b47      	ldr	r3, [pc, #284]	@ (80119d4 <voltmetro+0x274>)
 80118b8:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 80118ba:	4b3d      	ldr	r3, [pc, #244]	@ (80119b0 <voltmetro+0x250>)
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d103      	bne.n	80118ca <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 80118c2:	4b44      	ldr	r3, [pc, #272]	@ (80119d4 <voltmetro+0x274>)
 80118c4:	2202      	movs	r2, #2
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	e000      	b.n	80118cc <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 80118ca:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 80118cc:	4b3d      	ldr	r3, [pc, #244]	@ (80119c4 <voltmetro+0x264>)
 80118ce:	799b      	ldrb	r3, [r3, #6]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d104      	bne.n	80118de <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 80118d4:	4b40      	ldr	r3, [pc, #256]	@ (80119d8 <voltmetro+0x278>)
 80118d6:	781a      	ldrb	r2, [r3, #0]
 80118d8:	4b3c      	ldr	r3, [pc, #240]	@ (80119cc <voltmetro+0x26c>)
 80118da:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 80118dc:	e004      	b.n	80118e8 <voltmetro+0x188>
						goto hist_vlb; //
 80118de:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 80118e0:	4b3e      	ldr	r3, [pc, #248]	@ (80119dc <voltmetro+0x27c>)
 80118e2:	781a      	ldrb	r2, [r3, #0]
 80118e4:	4b39      	ldr	r3, [pc, #228]	@ (80119cc <voltmetro+0x26c>)
 80118e6:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 80118e8:	4b38      	ldr	r3, [pc, #224]	@ (80119cc <voltmetro+0x26c>)
 80118ea:	781a      	ldrb	r2, [r3, #0]
 80118ec:	4b32      	ldr	r3, [pc, #200]	@ (80119b8 <voltmetro+0x258>)
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d31d      	bcc.n	8011930 <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 80118f4:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 80118f6:	4b3a      	ldr	r3, [pc, #232]	@ (80119e0 <voltmetro+0x280>)
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d137      	bne.n	801196e <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 80118fe:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 8011900:	4930      	ldr	r1, [pc, #192]	@ (80119c4 <voltmetro+0x264>)
 8011902:	4830      	ldr	r0, [pc, #192]	@ (80119c4 <voltmetro+0x264>)
 8011904:	2307      	movs	r3, #7
 8011906:	2206      	movs	r2, #6
 8011908:	f7fb ff0c 	bl	800d724 <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 801190c:	4b2b      	ldr	r3, [pc, #172]	@ (80119bc <voltmetro+0x25c>)
 801190e:	2263      	movs	r2, #99	@ 0x63
 8011910:	5c9a      	ldrb	r2, [r3, r2]
 8011912:	4b23      	ldr	r3, [pc, #140]	@ (80119a0 <voltmetro+0x240>)
 8011914:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 8011916:	f7f5 f817 	bl	8006948 <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 801191a:	4b32      	ldr	r3, [pc, #200]	@ (80119e4 <voltmetro+0x284>)
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	021b      	lsls	r3, r3, #8
 8011920:	b29b      	uxth	r3, r3
 8011922:	4a31      	ldr	r2, [pc, #196]	@ (80119e8 <voltmetro+0x288>)
 8011924:	7812      	ldrb	r2, [r2, #0]
 8011926:	189b      	adds	r3, r3, r2
 8011928:	b29a      	uxth	r2, r3
 801192a:	4b30      	ldr	r3, [pc, #192]	@ (80119ec <voltmetro+0x28c>)
 801192c:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 801192e:	e021      	b.n	8011974 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 8011930:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 8011932:	4b22      	ldr	r3, [pc, #136]	@ (80119bc <voltmetro+0x25c>)
 8011934:	2245      	movs	r2, #69	@ 0x45
 8011936:	5c9a      	ldrb	r2, [r3, r2]
 8011938:	4b29      	ldr	r3, [pc, #164]	@ (80119e0 <voltmetro+0x280>)
 801193a:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 801193c:	4b1c      	ldr	r3, [pc, #112]	@ (80119b0 <voltmetro+0x250>)
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	2b01      	cmp	r3, #1
 8011942:	d103      	bne.n	801194c <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 8011944:	4b26      	ldr	r3, [pc, #152]	@ (80119e0 <voltmetro+0x280>)
 8011946:	2202      	movs	r2, #2
 8011948:	701a      	strb	r2, [r3, #0]
 801194a:	e000      	b.n	801194e <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 801194c:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 801194e:	4b27      	ldr	r3, [pc, #156]	@ (80119ec <voltmetro+0x28c>)
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d10d      	bne.n	8011972 <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 8011956:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011958:	491a      	ldr	r1, [pc, #104]	@ (80119c4 <voltmetro+0x264>)
 801195a:	481a      	ldr	r0, [pc, #104]	@ (80119c4 <voltmetro+0x264>)
 801195c:	2307      	movs	r3, #7
 801195e:	2206      	movs	r2, #6
 8011960:	f7fb fefb 	bl	800d75a <Bclear_Clear_trfst>
 8011964:	e006      	b.n	8011974 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 8011966:	46c0      	nop			@ (mov r8, r8)
 8011968:	e004      	b.n	8011974 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 801196a:	46c0      	nop			@ (mov r8, r8)
 801196c:	e002      	b.n	8011974 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 801196e:	46c0      	nop			@ (mov r8, r8)
 8011970:	e000      	b.n	8011974 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 8011972:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 8011974:	4b07      	ldr	r3, [pc, #28]	@ (8011994 <voltmetro+0x234>)
 8011976:	799b      	ldrb	r3, [r3, #6]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d106      	bne.n	801198a <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 801197c:	4911      	ldr	r1, [pc, #68]	@ (80119c4 <voltmetro+0x264>)
 801197e:	4811      	ldr	r0, [pc, #68]	@ (80119c4 <voltmetro+0x264>)
 8011980:	2307      	movs	r3, #7
 8011982:	2206      	movs	r2, #6
 8011984:	f7fb fee9 	bl	800d75a <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 8011988:	e000      	b.n	801198c <voltmetro+0x22c>
						goto fin_voltmetro1;
 801198a:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 801198c:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 801198e:	46c0      	nop			@ (mov r8, r8)
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	20000bb4 	.word	0x20000bb4
 8011998:	20000bdc 	.word	0x20000bdc
 801199c:	20000b59 	.word	0x20000b59
 80119a0:	20000b67 	.word	0x20000b67
 80119a4:	20000c3a 	.word	0x20000c3a
 80119a8:	20000c39 	.word	0x20000c39
 80119ac:	20000b90 	.word	0x20000b90
 80119b0:	20000ba8 	.word	0x20000ba8
 80119b4:	20000bdd 	.word	0x20000bdd
 80119b8:	20000bde 	.word	0x20000bde
 80119bc:	200000b8 	.word	0x200000b8
 80119c0:	20000c78 	.word	0x20000c78
 80119c4:	20000b98 	.word	0x20000b98
 80119c8:	20000c33 	.word	0x20000c33
 80119cc:	200008e4 	.word	0x200008e4
 80119d0:	20000c35 	.word	0x20000c35
 80119d4:	20000b81 	.word	0x20000b81
 80119d8:	20000c34 	.word	0x20000c34
 80119dc:	20000c36 	.word	0x20000c36
 80119e0:	20000b80 	.word	0x20000b80
 80119e4:	20000b5b 	.word	0x20000b5b
 80119e8:	20000b5c 	.word	0x20000b5c
 80119ec:	20000b78 	.word	0x20000b78

080119f0 <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0


			memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 80119f6:	f7f5 fd8f 	bl	8007518 <memodriver>
//;------------------------------------------------------------------------------------------------------------------
//;							supervicion de timeout token wifi - ble
//;------------------------------------------------------------------------------------------------------------------
			//ldw		X,timeoutTBLE;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTBLE == 1)//jreq	resetComMod;					/
 80119fa:	4b6c      	ldr	r3, [pc, #432]	@ (8011bac <watch+0x1bc>)
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d004      	beq.n	8011a0c <watch+0x1c>
				goto resetComMod;
			//ldw		X,timeoutTWF;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTWF != 1)//jrne	fallas_temp;					/ No, continúa
 8011a02:	4b6b      	ldr	r3, [pc, #428]	@ (8011bb0 <watch+0x1c0>)
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d143      	bne.n	8011a92 <watch+0xa2>
				goto fallas_temp;
resetComMod:
 8011a0a:	e000      	b.n	8011a0e <watch+0x1e>
				goto resetComMod;
 8011a0c:	46c0      	nop			@ (mov r8, r8)
			timeTxTBLE = 20;	//mov		timeTxTBLE,#20
 8011a0e:	4b69      	ldr	r3, [pc, #420]	@ (8011bb4 <watch+0x1c4>)
 8011a10:	2214      	movs	r2, #20
 8011a12:	701a      	strb	r2, [r3, #0]
			flagsTX2[2] =0;		//bres	flagsTX2,#2;					/ sí, cancela bandera de token recibido
 8011a14:	4b68      	ldr	r3, [pc, #416]	@ (8011bb8 <watch+0x1c8>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	709a      	strb	r2, [r3, #2]
			//ldw		X,#300;
			timeoutTBLE = 300;	//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 8011a1a:	4b64      	ldr	r3, [pc, #400]	@ (8011bac <watch+0x1bc>)
 8011a1c:	2296      	movs	r2, #150	@ 0x96
 8011a1e:	0052      	lsls	r2, r2, #1
 8011a20:	801a      	strh	r2, [r3, #0]

			timeTxTWF = 30;			//mov		timeTxTWF,#30
 8011a22:	4b66      	ldr	r3, [pc, #408]	@ (8011bbc <watch+0x1cc>)
 8011a24:	221e      	movs	r2, #30
 8011a26:	701a      	strb	r2, [r3, #0]
			flagsTX2 [1] = 0; 		//bres	flagsTX2,#1;					/ sí, cancela bandera de token recibido
 8011a28:	4b63      	ldr	r3, [pc, #396]	@ (8011bb8 <watch+0x1c8>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	705a      	strb	r2, [r3, #1]
			timeRstBLE = 5;			//mov		timeRstBLE,#5;				/ carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 8011a2e:	4b64      	ldr	r3, [pc, #400]	@ (8011bc0 <watch+0x1d0>)
 8011a30:	2205      	movs	r2, #5
 8011a32:	701a      	strb	r2, [r3, #0]
			//ldw		X,#300;
			timeoutTWF = 300;		//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 8011a34:	4b5e      	ldr	r3, [pc, #376]	@ (8011bb0 <watch+0x1c0>)
 8011a36:	2296      	movs	r2, #150	@ 0x96
 8011a38:	0052      	lsls	r2, r2, #1
 8011a3a:	801a      	strh	r2, [r3, #0]
			keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 8011a3c:	4b61      	ldr	r3, [pc, #388]	@ (8011bc4 <watch+0x1d4>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<8; i++){
 8011a42:	1dfb      	adds	r3, r7, #7
 8011a44:	2200      	movs	r2, #0
 8011a46:	701a      	strb	r2, [r3, #0]
 8011a48:	e018      	b.n	8011a7c <watch+0x8c>
				flagsTX[i] = 0;		//clr		flagsTX
 8011a4a:	1dfb      	adds	r3, r7, #7
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8011bc8 <watch+0x1d8>)
 8011a50:	2100      	movs	r1, #0
 8011a52:	54d1      	strb	r1, [r2, r3]
				flagsRxFirm[i]= 0;	//clr		flagsRxFirm
 8011a54:	1dfb      	adds	r3, r7, #7
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	4a5c      	ldr	r2, [pc, #368]	@ (8011bcc <watch+0x1dc>)
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	54d1      	strb	r1, [r2, r3]
				flagsTxControl[i] = 0; // clr		flagsTxControl
 8011a5e:	1dfb      	adds	r3, r7, #7
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	4a5b      	ldr	r2, [pc, #364]	@ (8011bd0 <watch+0x1e0>)
 8011a64:	2100      	movs	r1, #0
 8011a66:	54d1      	strb	r1, [r2, r3]
				flagsWIFI[i] = 0; 		//clr		flagsWIFI
 8011a68:	1dfb      	adds	r3, r7, #7
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	4a59      	ldr	r2, [pc, #356]	@ (8011bd4 <watch+0x1e4>)
 8011a6e:	2100      	movs	r1, #0
 8011a70:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<8; i++){
 8011a72:	1dfb      	adds	r3, r7, #7
 8011a74:	781a      	ldrb	r2, [r3, #0]
 8011a76:	1dfb      	adds	r3, r7, #7
 8011a78:	3201      	adds	r2, #1
 8011a7a:	701a      	strb	r2, [r3, #0]
 8011a7c:	1dfb      	adds	r3, r7, #7
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	2b07      	cmp	r3, #7
 8011a82:	d9e2      	bls.n	8011a4a <watch+0x5a>
			}

			flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 8011a84:	4b54      	ldr	r3, [pc, #336]	@ (8011bd8 <watch+0x1e8>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	711a      	strb	r2, [r3, #4]
			flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 8011a8a:	4b53      	ldr	r3, [pc, #332]	@ (8011bd8 <watch+0x1e8>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	715a      	strb	r2, [r3, #5]
 8011a90:	e000      	b.n	8011a94 <watch+0xa4>
				goto fallas_temp;
 8011a92:	46c0      	nop			@ (mov r8, r8)
fallas_temp:

////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 8011a94:	4b51      	ldr	r3, [pc, #324]	@ (8011bdc <watch+0x1ec>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 8011a9a:	4b50      	ldr	r3, [pc, #320]	@ (8011bdc <watch+0x1ec>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 8011aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8011bdc <watch+0x1ec>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 8011aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8011bdc <watch+0x1ec>)
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 8011aac:	4b4b      	ldr	r3, [pc, #300]	@ (8011bdc <watch+0x1ec>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 8011ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8011be0 <watch+0x1f0>)
 8011ab4:	785b      	ldrb	r3, [r3, #1]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	4053      	eors	r3, r2
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d103      	bne.n	8011ac8 <watch+0xd8>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 8011ac0:	4b46      	ldr	r3, [pc, #280]	@ (8011bdc <watch+0x1ec>)
 8011ac2:	2201      	movs	r2, #1
 8011ac4:	715a      	strb	r2, [r3, #5]
 8011ac6:	e000      	b.n	8011aca <watch+0xda>
					goto	jmp_watch_02;
 8011ac8:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 8011aca:	4b46      	ldr	r3, [pc, #280]	@ (8011be4 <watch+0x1f4>)
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d000      	beq.n	8011ad4 <watch+0xe4>
 8011ad2:	e064      	b.n	8011b9e <watch+0x1ae>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 8011ad4:	4b44      	ldr	r3, [pc, #272]	@ (8011be8 <watch+0x1f8>)
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	4053      	eors	r3, r2
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d107      	bne.n	8011af2 <watch+0x102>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 8011ae2:	4b42      	ldr	r3, [pc, #264]	@ (8011bec <watch+0x1fc>)
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d108      	bne.n	8011afc <watch+0x10c>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 8011aea:	4b3c      	ldr	r3, [pc, #240]	@ (8011bdc <watch+0x1ec>)
 8011aec:	2201      	movs	r2, #1
 8011aee:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 8011af0:	e005      	b.n	8011afe <watch+0x10e>
					goto	jmp_watch_03_00;
 8011af2:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8011af4:	4b3d      	ldr	r3, [pc, #244]	@ (8011bec <watch+0x1fc>)
 8011af6:	22a4      	movs	r2, #164	@ 0xa4
 8011af8:	701a      	strb	r2, [r3, #0]
 8011afa:	e000      	b.n	8011afe <watch+0x10e>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 8011afc:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 8011afe:	4b3a      	ldr	r3, [pc, #232]	@ (8011be8 <watch+0x1f8>)
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d10c      	bne.n	8011b20 <watch+0x130>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 8011b06:	4b36      	ldr	r3, [pc, #216]	@ (8011be0 <watch+0x1f0>)
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d103      	bne.n	8011b16 <watch+0x126>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 8011b0e:	4b38      	ldr	r3, [pc, #224]	@ (8011bf0 <watch+0x200>)
 8011b10:	220f      	movs	r2, #15
 8011b12:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 8011b14:	e005      	b.n	8011b22 <watch+0x132>
					goto	jmp_watch_04;
 8011b16:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 8011b18:	4b35      	ldr	r3, [pc, #212]	@ (8011bf0 <watch+0x200>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
 8011b1e:	e000      	b.n	8011b22 <watch+0x132>
					goto	jmp_watch_05;
 8011b20:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 8011b22:	4b31      	ldr	r3, [pc, #196]	@ (8011be8 <watch+0x1f8>)
 8011b24:	785b      	ldrb	r3, [r3, #1]
 8011b26:	2201      	movs	r2, #1
 8011b28:	4053      	eors	r3, r2
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d107      	bne.n	8011b40 <watch+0x150>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 8011b30:	4b30      	ldr	r3, [pc, #192]	@ (8011bf4 <watch+0x204>)
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d108      	bne.n	8011b4a <watch+0x15a>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 8011b38:	4b28      	ldr	r3, [pc, #160]	@ (8011bdc <watch+0x1ec>)
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 8011b3e:	e005      	b.n	8011b4c <watch+0x15c>
					goto	jmp_watch_07_00;
 8011b40:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8011b42:	4b2c      	ldr	r3, [pc, #176]	@ (8011bf4 <watch+0x204>)
 8011b44:	2204      	movs	r2, #4
 8011b46:	701a      	strb	r2, [r3, #0]
 8011b48:	e000      	b.n	8011b4c <watch+0x15c>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 8011b4a:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 8011b4c:	4b26      	ldr	r3, [pc, #152]	@ (8011be8 <watch+0x1f8>)
 8011b4e:	789b      	ldrb	r3, [r3, #2]
 8011b50:	2201      	movs	r2, #1
 8011b52:	4053      	eors	r3, r2
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d107      	bne.n	8011b6a <watch+0x17a>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 8011b5a:	4b27      	ldr	r3, [pc, #156]	@ (8011bf8 <watch+0x208>)
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d108      	bne.n	8011b74 <watch+0x184>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 8011b62:	4b1e      	ldr	r3, [pc, #120]	@ (8011bdc <watch+0x1ec>)
 8011b64:	2201      	movs	r2, #1
 8011b66:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 8011b68:	e005      	b.n	8011b76 <watch+0x186>
					goto	jmp_watch_11_00;
 8011b6a:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8011b6c:	4b22      	ldr	r3, [pc, #136]	@ (8011bf8 <watch+0x208>)
 8011b6e:	220f      	movs	r2, #15
 8011b70:	701a      	strb	r2, [r3, #0]
 8011b72:	e000      	b.n	8011b76 <watch+0x186>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 8011b74:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 8011b76:	4b1a      	ldr	r3, [pc, #104]	@ (8011be0 <watch+0x1f0>)
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	4053      	eors	r3, r2
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d107      	bne.n	8011b94 <watch+0x1a4>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 8011b84:	4b1d      	ldr	r3, [pc, #116]	@ (8011bfc <watch+0x20c>)
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10a      	bne.n	8011ba2 <watch+0x1b2>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 8011b8c:	4b13      	ldr	r3, [pc, #76]	@ (8011bdc <watch+0x1ec>)
 8011b8e:	2201      	movs	r2, #1
 8011b90:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 8011b92:	e007      	b.n	8011ba4 <watch+0x1b4>
					goto jmp_watch_12_00;
 8011b94:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8011b96:	4b19      	ldr	r3, [pc, #100]	@ (8011bfc <watch+0x20c>)
 8011b98:	22c5      	movs	r2, #197	@ 0xc5
 8011b9a:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 8011b9c:	e002      	b.n	8011ba4 <watch+0x1b4>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 8011b9e:	46c0      	nop			@ (mov r8, r8)
 8011ba0:	e000      	b.n	8011ba4 <watch+0x1b4>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 8011ba2:	46c0      	nop			@ (mov r8, r8)
}
 8011ba4:	46c0      	nop			@ (mov r8, r8)
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	b002      	add	sp, #8
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	20001198 	.word	0x20001198
 8011bb0:	20000fe8 	.word	0x20000fe8
 8011bb4:	20001196 	.word	0x20001196
 8011bb8:	20000fe0 	.word	0x20000fe0
 8011bbc:	20000fd6 	.word	0x20000fd6
 8011bc0:	20000f84 	.word	0x20000f84
 8011bc4:	20000eb5 	.word	0x20000eb5
 8011bc8:	20000eb8 	.word	0x20000eb8
 8011bcc:	20000f78 	.word	0x20000f78
 8011bd0:	20001188 	.word	0x20001188
 8011bd4:	20000fec 	.word	0x20000fec
 8011bd8:	20000ea0 	.word	0x20000ea0
 8011bdc:	20000b68 	.word	0x20000b68
 8011be0:	20000bf0 	.word	0x20000bf0
 8011be4:	20000c61 	.word	0x20000c61
 8011be8:	20000bb4 	.word	0x20000bb4
 8011bec:	20000c66 	.word	0x20000c66
 8011bf0:	20000b84 	.word	0x20000b84
 8011bf4:	20000c67 	.word	0x20000c67
 8011bf8:	20000c69 	.word	0x20000c69
 8011bfc:	20000c68 	.word	0x20000c68

08011c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011c00:	480d      	ldr	r0, [pc, #52]	@ (8011c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011c02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011c04:	f7fa fd9a 	bl	800c73c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011c08:	480c      	ldr	r0, [pc, #48]	@ (8011c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8011c0a:	490d      	ldr	r1, [pc, #52]	@ (8011c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8011c44 <LoopForever+0xe>)
  movs r3, #0
 8011c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011c10:	e002      	b.n	8011c18 <LoopCopyDataInit>

08011c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011c16:	3304      	adds	r3, #4

08011c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011c1c:	d3f9      	bcc.n	8011c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8011c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011c20:	4c0a      	ldr	r4, [pc, #40]	@ (8011c4c <LoopForever+0x16>)
  movs r3, #0
 8011c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011c24:	e001      	b.n	8011c2a <LoopFillZerobss>

08011c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011c28:	3204      	adds	r2, #4

08011c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011c2c:	d3fb      	bcc.n	8011c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8011c2e:	f00a f8d3 	bl	801bdd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011c32:	f7f7 fe27 	bl	8009884 <main>

08011c36 <LoopForever>:

LoopForever:
  b LoopForever
 8011c36:	e7fe      	b.n	8011c36 <LoopForever>
  ldr   r0, =_estack
 8011c38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8011c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011c40:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8011c44:	0801c438 	.word	0x0801c438
  ldr r2, =_sbss
 8011c48:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8011c4c:	20001384 	.word	0x20001384

08011c50 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011c50:	e7fe      	b.n	8011c50 <ADC_COMP1_2_IRQHandler>

08011c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b082      	sub	sp, #8
 8011c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011c58:	1dfb      	adds	r3, r7, #7
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011c5e:	2003      	movs	r0, #3
 8011c60:	f000 f80e 	bl	8011c80 <HAL_InitTick>
 8011c64:	1e03      	subs	r3, r0, #0
 8011c66:	d003      	beq.n	8011c70 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8011c68:	1dfb      	adds	r3, r7, #7
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	701a      	strb	r2, [r3, #0]
 8011c6e:	e001      	b.n	8011c74 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011c70:	f7fa f842 	bl	800bcf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011c74:	1dfb      	adds	r3, r7, #7
 8011c76:	781b      	ldrb	r3, [r3, #0]
}
 8011c78:	0018      	movs	r0, r3
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	b002      	add	sp, #8
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011c80:	b590      	push	{r4, r7, lr}
 8011c82:	b085      	sub	sp, #20
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011c88:	230f      	movs	r3, #15
 8011c8a:	18fb      	adds	r3, r7, r3
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8011c90:	4b1d      	ldr	r3, [pc, #116]	@ (8011d08 <HAL_InitTick+0x88>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d02b      	beq.n	8011cf0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8011c98:	4b1c      	ldr	r3, [pc, #112]	@ (8011d0c <HAL_InitTick+0x8c>)
 8011c9a:	681c      	ldr	r4, [r3, #0]
 8011c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8011d08 <HAL_InitTick+0x88>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	0019      	movs	r1, r3
 8011ca2:	23fa      	movs	r3, #250	@ 0xfa
 8011ca4:	0098      	lsls	r0, r3, #2
 8011ca6:	f7ee fa37 	bl	8000118 <__udivsi3>
 8011caa:	0003      	movs	r3, r0
 8011cac:	0019      	movs	r1, r3
 8011cae:	0020      	movs	r0, r4
 8011cb0:	f7ee fa32 	bl	8000118 <__udivsi3>
 8011cb4:	0003      	movs	r3, r0
 8011cb6:	0018      	movs	r0, r3
 8011cb8:	f001 fbd3 	bl	8013462 <HAL_SYSTICK_Config>
 8011cbc:	1e03      	subs	r3, r0, #0
 8011cbe:	d112      	bne.n	8011ce6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d80a      	bhi.n	8011cdc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011cc6:	6879      	ldr	r1, [r7, #4]
 8011cc8:	2301      	movs	r3, #1
 8011cca:	425b      	negs	r3, r3
 8011ccc:	2200      	movs	r2, #0
 8011cce:	0018      	movs	r0, r3
 8011cd0:	f001 fb92 	bl	80133f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8011d10 <HAL_InitTick+0x90>)
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	601a      	str	r2, [r3, #0]
 8011cda:	e00d      	b.n	8011cf8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8011cdc:	230f      	movs	r3, #15
 8011cde:	18fb      	adds	r3, r7, r3
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	701a      	strb	r2, [r3, #0]
 8011ce4:	e008      	b.n	8011cf8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011ce6:	230f      	movs	r3, #15
 8011ce8:	18fb      	adds	r3, r7, r3
 8011cea:	2201      	movs	r2, #1
 8011cec:	701a      	strb	r2, [r3, #0]
 8011cee:	e003      	b.n	8011cf8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011cf0:	230f      	movs	r3, #15
 8011cf2:	18fb      	adds	r3, r7, r3
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8011cf8:	230f      	movs	r3, #15
 8011cfa:	18fb      	adds	r3, r7, r3
 8011cfc:	781b      	ldrb	r3, [r3, #0]
}
 8011cfe:	0018      	movs	r0, r3
 8011d00:	46bd      	mov	sp, r7
 8011d02:	b005      	add	sp, #20
 8011d04:	bd90      	pop	{r4, r7, pc}
 8011d06:	46c0      	nop			@ (mov r8, r8)
 8011d08:	20000280 	.word	0x20000280
 8011d0c:	2000025c 	.word	0x2000025c
 8011d10:	2000027c 	.word	0x2000027c

08011d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011d18:	4b04      	ldr	r3, [pc, #16]	@ (8011d2c <HAL_IncTick+0x18>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	4b04      	ldr	r3, [pc, #16]	@ (8011d30 <HAL_IncTick+0x1c>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	18d2      	adds	r2, r2, r3
 8011d22:	4b02      	ldr	r3, [pc, #8]	@ (8011d2c <HAL_IncTick+0x18>)
 8011d24:	601a      	str	r2, [r3, #0]
}
 8011d26:	46c0      	nop			@ (mov r8, r8)
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	2000121c 	.word	0x2000121c
 8011d30:	20000280 	.word	0x20000280

08011d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	af00      	add	r7, sp, #0
  return uwTick;
 8011d38:	4b02      	ldr	r3, [pc, #8]	@ (8011d44 <HAL_GetTick+0x10>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
}
 8011d3c:	0018      	movs	r0, r3
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	46c0      	nop			@ (mov r8, r8)
 8011d44:	2000121c 	.word	0x2000121c

08011d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b084      	sub	sp, #16
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011d50:	f7ff fff0 	bl	8011d34 <HAL_GetTick>
 8011d54:	0003      	movs	r3, r0
 8011d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	3301      	adds	r3, #1
 8011d60:	d004      	beq.n	8011d6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8011d62:	4b09      	ldr	r3, [pc, #36]	@ (8011d88 <HAL_Delay+0x40>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	18d3      	adds	r3, r2, r3
 8011d6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011d6c:	46c0      	nop			@ (mov r8, r8)
 8011d6e:	f7ff ffe1 	bl	8011d34 <HAL_GetTick>
 8011d72:	0002      	movs	r2, r0
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	1ad3      	subs	r3, r2, r3
 8011d78:	68fa      	ldr	r2, [r7, #12]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d8f7      	bhi.n	8011d6e <HAL_Delay+0x26>
  {
  }
}
 8011d7e:	46c0      	nop			@ (mov r8, r8)
 8011d80:	46c0      	nop			@ (mov r8, r8)
 8011d82:	46bd      	mov	sp, r7
 8011d84:	b004      	add	sp, #16
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	20000280 	.word	0x20000280

08011d8c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8011d90:	4b04      	ldr	r3, [pc, #16]	@ (8011da4 <HAL_SuspendTick+0x18>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	4b03      	ldr	r3, [pc, #12]	@ (8011da4 <HAL_SuspendTick+0x18>)
 8011d96:	2102      	movs	r1, #2
 8011d98:	438a      	bics	r2, r1
 8011d9a:	601a      	str	r2, [r3, #0]
}
 8011d9c:	46c0      	nop			@ (mov r8, r8)
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	46c0      	nop			@ (mov r8, r8)
 8011da4:	e000e010 	.word	0xe000e010

08011da8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8011dac:	4b04      	ldr	r3, [pc, #16]	@ (8011dc0 <HAL_ResumeTick+0x18>)
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	4b03      	ldr	r3, [pc, #12]	@ (8011dc0 <HAL_ResumeTick+0x18>)
 8011db2:	2102      	movs	r1, #2
 8011db4:	430a      	orrs	r2, r1
 8011db6:	601a      	str	r2, [r3, #0]
}
 8011db8:	46c0      	nop			@ (mov r8, r8)
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	46c0      	nop			@ (mov r8, r8)
 8011dc0:	e000e010 	.word	0xe000e010

08011dc4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a05      	ldr	r2, [pc, #20]	@ (8011de8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8011dd4:	401a      	ands	r2, r3
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	431a      	orrs	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	601a      	str	r2, [r3, #0]
}
 8011dde:	46c0      	nop			@ (mov r8, r8)
 8011de0:	46bd      	mov	sp, r7
 8011de2:	b002      	add	sp, #8
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	46c0      	nop			@ (mov r8, r8)
 8011de8:	fe3fffff 	.word	0xfe3fffff

08011dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	23e0      	movs	r3, #224	@ 0xe0
 8011dfa:	045b      	lsls	r3, r3, #17
 8011dfc:	4013      	ands	r3, r2
}
 8011dfe:	0018      	movs	r0, r3
 8011e00:	46bd      	mov	sp, r7
 8011e02:	b002      	add	sp, #8
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b084      	sub	sp, #16
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	60f8      	str	r0, [r7, #12]
 8011e0e:	60b9      	str	r1, [r7, #8]
 8011e10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	695b      	ldr	r3, [r3, #20]
 8011e16:	68ba      	ldr	r2, [r7, #8]
 8011e18:	2104      	movs	r1, #4
 8011e1a:	400a      	ands	r2, r1
 8011e1c:	2107      	movs	r1, #7
 8011e1e:	4091      	lsls	r1, r2
 8011e20:	000a      	movs	r2, r1
 8011e22:	43d2      	mvns	r2, r2
 8011e24:	401a      	ands	r2, r3
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	2104      	movs	r1, #4
 8011e2a:	400b      	ands	r3, r1
 8011e2c:	6879      	ldr	r1, [r7, #4]
 8011e2e:	4099      	lsls	r1, r3
 8011e30:	000b      	movs	r3, r1
 8011e32:	431a      	orrs	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8011e38:	46c0      	nop			@ (mov r8, r8)
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	b004      	add	sp, #16
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	695b      	ldr	r3, [r3, #20]
 8011e4e:	683a      	ldr	r2, [r7, #0]
 8011e50:	2104      	movs	r1, #4
 8011e52:	400a      	ands	r2, r1
 8011e54:	2107      	movs	r1, #7
 8011e56:	4091      	lsls	r1, r2
 8011e58:	000a      	movs	r2, r1
 8011e5a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	2104      	movs	r1, #4
 8011e60:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8011e62:	40da      	lsrs	r2, r3
 8011e64:	0013      	movs	r3, r2
}
 8011e66:	0018      	movs	r0, r3
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	b002      	add	sp, #8
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b084      	sub	sp, #16
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	60f8      	str	r0, [r7, #12]
 8011e76:	60b9      	str	r1, [r7, #8]
 8011e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	211f      	movs	r1, #31
 8011e82:	400a      	ands	r2, r1
 8011e84:	210f      	movs	r1, #15
 8011e86:	4091      	lsls	r1, r2
 8011e88:	000a      	movs	r2, r1
 8011e8a:	43d2      	mvns	r2, r2
 8011e8c:	401a      	ands	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	0e9b      	lsrs	r3, r3, #26
 8011e92:	210f      	movs	r1, #15
 8011e94:	4019      	ands	r1, r3
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	201f      	movs	r0, #31
 8011e9a:	4003      	ands	r3, r0
 8011e9c:	4099      	lsls	r1, r3
 8011e9e:	000b      	movs	r3, r1
 8011ea0:	431a      	orrs	r2, r3
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8011ea6:	46c0      	nop			@ (mov r8, r8)
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	b004      	add	sp, #16
 8011eac:	bd80      	pop	{r7, pc}

08011eae <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	025b      	lsls	r3, r3, #9
 8011ec0:	0a5b      	lsrs	r3, r3, #9
 8011ec2:	431a      	orrs	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011ec8:	46c0      	nop			@ (mov r8, r8)
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	b002      	add	sp, #8
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	0252      	lsls	r2, r2, #9
 8011ee2:	0a52      	lsrs	r2, r2, #9
 8011ee4:	43d2      	mvns	r2, r2
 8011ee6:	401a      	ands	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011eec:	46c0      	nop			@ (mov r8, r8)
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	b002      	add	sp, #8
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	695b      	ldr	r3, [r3, #20]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	0212      	lsls	r2, r2, #8
 8011f08:	43d2      	mvns	r2, r2
 8011f0a:	401a      	ands	r2, r3
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	021b      	lsls	r3, r3, #8
 8011f10:	6879      	ldr	r1, [r7, #4]
 8011f12:	400b      	ands	r3, r1
 8011f14:	4904      	ldr	r1, [pc, #16]	@ (8011f28 <LL_ADC_SetChannelSamplingTime+0x34>)
 8011f16:	400b      	ands	r3, r1
 8011f18:	431a      	orrs	r2, r3
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8011f1e:	46c0      	nop			@ (mov r8, r8)
 8011f20:	46bd      	mov	sp, r7
 8011f22:	b004      	add	sp, #16
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	46c0      	nop			@ (mov r8, r8)
 8011f28:	7fffff00 	.word	0x7fffff00

08011f2c <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b086      	sub	sp, #24
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	60f8      	str	r0, [r7, #12]
 8011f34:	60b9      	str	r1, [r7, #8]
 8011f36:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	4a11      	ldr	r2, [pc, #68]	@ (8011f80 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d103      	bne.n	8011f48 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	330c      	adds	r3, #12
 8011f44:	617b      	str	r3, [r7, #20]
 8011f46:	e009      	b.n	8011f5c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	33a0      	adds	r3, #160	@ 0xa0
 8011f4c:	0019      	movs	r1, r3
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	0d5b      	lsrs	r3, r3, #21
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	2204      	movs	r2, #4
 8011f56:	4013      	ands	r3, r2
 8011f58:	18cb      	adds	r3, r1, r3
 8011f5a:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	4908      	ldr	r1, [pc, #32]	@ (8011f84 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8011f64:	400a      	ands	r2, r1
 8011f66:	43d2      	mvns	r2, r2
 8011f68:	401a      	ands	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68b9      	ldr	r1, [r7, #8]
 8011f6e:	400b      	ands	r3, r1
 8011f70:	431a      	orrs	r2, r3
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8011f76:	46c0      	nop			@ (mov r8, r8)
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	b006      	add	sp, #24
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	46c0      	nop			@ (mov r8, r8)
 8011f80:	7cc00000 	.word	0x7cc00000
 8011f84:	7cc7ffff 	.word	0x7cc7ffff

08011f88 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
 8011f94:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	3320      	adds	r3, #32
 8011f9a:	0018      	movs	r0, r3
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	0d1b      	lsrs	r3, r3, #20
 8011fa0:	2203      	movs	r2, #3
 8011fa2:	401a      	ands	r2, r3
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	0d5b      	lsrs	r3, r3, #21
 8011fa8:	2101      	movs	r1, #1
 8011faa:	400b      	ands	r3, r1
 8011fac:	18d3      	adds	r3, r2, r3
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	18c3      	adds	r3, r0, r3
 8011fb2:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a06      	ldr	r2, [pc, #24]	@ (8011fd4 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 8011fba:	401a      	ands	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	0419      	lsls	r1, r3, #16
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	430b      	orrs	r3, r1
 8011fc4:	431a      	orrs	r2, r3
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8011fca:	46c0      	nop			@ (mov r8, r8)
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	b006      	add	sp, #24
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	46c0      	nop			@ (mov r8, r8)
 8011fd4:	f000f000 	.word	0xf000f000

08011fd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	4a05      	ldr	r2, [pc, #20]	@ (8011ffc <LL_ADC_EnableInternalRegulator+0x24>)
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	2280      	movs	r2, #128	@ 0x80
 8011fea:	0552      	lsls	r2, r2, #21
 8011fec:	431a      	orrs	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8011ff2:	46c0      	nop			@ (mov r8, r8)
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	b002      	add	sp, #8
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	46c0      	nop			@ (mov r8, r8)
 8011ffc:	6fffffe8 	.word	0x6fffffe8

08012000 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	4a03      	ldr	r2, [pc, #12]	@ (801201c <LL_ADC_DisableInternalRegulator+0x1c>)
 801200e:	401a      	ands	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	609a      	str	r2, [r3, #8]
}
 8012014:	46c0      	nop			@ (mov r8, r8)
 8012016:	46bd      	mov	sp, r7
 8012018:	b002      	add	sp, #8
 801201a:	bd80      	pop	{r7, pc}
 801201c:	6fffffe8 	.word	0x6fffffe8

08012020 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	689a      	ldr	r2, [r3, #8]
 801202c:	2380      	movs	r3, #128	@ 0x80
 801202e:	055b      	lsls	r3, r3, #21
 8012030:	401a      	ands	r2, r3
 8012032:	2380      	movs	r3, #128	@ 0x80
 8012034:	055b      	lsls	r3, r3, #21
 8012036:	429a      	cmp	r2, r3
 8012038:	d101      	bne.n	801203e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 801203a:	2301      	movs	r3, #1
 801203c:	e000      	b.n	8012040 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 801203e:	2300      	movs	r3, #0
}
 8012040:	0018      	movs	r0, r3
 8012042:	46bd      	mov	sp, r7
 8012044:	b002      	add	sp, #8
 8012046:	bd80      	pop	{r7, pc}

08012048 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	4a04      	ldr	r2, [pc, #16]	@ (8012068 <LL_ADC_Enable+0x20>)
 8012056:	4013      	ands	r3, r2
 8012058:	2201      	movs	r2, #1
 801205a:	431a      	orrs	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8012060:	46c0      	nop			@ (mov r8, r8)
 8012062:	46bd      	mov	sp, r7
 8012064:	b002      	add	sp, #8
 8012066:	bd80      	pop	{r7, pc}
 8012068:	7fffffe8 	.word	0x7fffffe8

0801206c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	4a04      	ldr	r2, [pc, #16]	@ (801208c <LL_ADC_Disable+0x20>)
 801207a:	4013      	ands	r3, r2
 801207c:	2202      	movs	r2, #2
 801207e:	431a      	orrs	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8012084:	46c0      	nop			@ (mov r8, r8)
 8012086:	46bd      	mov	sp, r7
 8012088:	b002      	add	sp, #8
 801208a:	bd80      	pop	{r7, pc}
 801208c:	7fffffe8 	.word	0x7fffffe8

08012090 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	2201      	movs	r2, #1
 801209e:	4013      	ands	r3, r2
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d101      	bne.n	80120a8 <LL_ADC_IsEnabled+0x18>
 80120a4:	2301      	movs	r3, #1
 80120a6:	e000      	b.n	80120aa <LL_ADC_IsEnabled+0x1a>
 80120a8:	2300      	movs	r3, #0
}
 80120aa:	0018      	movs	r0, r3
 80120ac:	46bd      	mov	sp, r7
 80120ae:	b002      	add	sp, #8
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b082      	sub	sp, #8
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	2202      	movs	r2, #2
 80120c0:	4013      	ands	r3, r2
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d101      	bne.n	80120ca <LL_ADC_IsDisableOngoing+0x18>
 80120c6:	2301      	movs	r3, #1
 80120c8:	e000      	b.n	80120cc <LL_ADC_IsDisableOngoing+0x1a>
 80120ca:	2300      	movs	r3, #0
}
 80120cc:	0018      	movs	r0, r3
 80120ce:	46bd      	mov	sp, r7
 80120d0:	b002      	add	sp, #8
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	4a04      	ldr	r2, [pc, #16]	@ (80120f4 <LL_ADC_REG_StopConversion+0x20>)
 80120e2:	4013      	ands	r3, r2
 80120e4:	2210      	movs	r2, #16
 80120e6:	431a      	orrs	r2, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80120ec:	46c0      	nop			@ (mov r8, r8)
 80120ee:	46bd      	mov	sp, r7
 80120f0:	b002      	add	sp, #8
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	7fffffe8 	.word	0x7fffffe8

080120f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	689b      	ldr	r3, [r3, #8]
 8012104:	2204      	movs	r2, #4
 8012106:	4013      	ands	r3, r2
 8012108:	2b04      	cmp	r3, #4
 801210a:	d101      	bne.n	8012110 <LL_ADC_REG_IsConversionOngoing+0x18>
 801210c:	2301      	movs	r3, #1
 801210e:	e000      	b.n	8012112 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012110:	2300      	movs	r3, #0
}
 8012112:	0018      	movs	r0, r3
 8012114:	46bd      	mov	sp, r7
 8012116:	b002      	add	sp, #8
 8012118:	bd80      	pop	{r7, pc}

0801211a <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b082      	sub	sp, #8
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2280      	movs	r2, #128	@ 0x80
 8012126:	601a      	str	r2, [r3, #0]
}
 8012128:	46c0      	nop			@ (mov r8, r8)
 801212a:	46bd      	mov	sp, r7
 801212c:	b002      	add	sp, #8
 801212e:	bd80      	pop	{r7, pc}

08012130 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2280      	movs	r2, #128	@ 0x80
 801213c:	0052      	lsls	r2, r2, #1
 801213e:	601a      	str	r2, [r3, #0]
}
 8012140:	46c0      	nop			@ (mov r8, r8)
 8012142:	46bd      	mov	sp, r7
 8012144:	b002      	add	sp, #8
 8012146:	bd80      	pop	{r7, pc}

08012148 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2280      	movs	r2, #128	@ 0x80
 8012154:	0092      	lsls	r2, r2, #2
 8012156:	601a      	str	r2, [r3, #0]
}
 8012158:	46c0      	nop			@ (mov r8, r8)
 801215a:	46bd      	mov	sp, r7
 801215c:	b002      	add	sp, #8
 801215e:	bd80      	pop	{r7, pc}

08012160 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	2280      	movs	r2, #128	@ 0x80
 801216e:	431a      	orrs	r2, r3
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	605a      	str	r2, [r3, #4]
}
 8012174:	46c0      	nop			@ (mov r8, r8)
 8012176:	46bd      	mov	sp, r7
 8012178:	b002      	add	sp, #8
 801217a:	bd80      	pop	{r7, pc}

0801217c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	2280      	movs	r2, #128	@ 0x80
 801218a:	0052      	lsls	r2, r2, #1
 801218c:	431a      	orrs	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	605a      	str	r2, [r3, #4]
}
 8012192:	46c0      	nop			@ (mov r8, r8)
 8012194:	46bd      	mov	sp, r7
 8012196:	b002      	add	sp, #8
 8012198:	bd80      	pop	{r7, pc}

0801219a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b082      	sub	sp, #8
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	2280      	movs	r2, #128	@ 0x80
 80121a8:	0092      	lsls	r2, r2, #2
 80121aa:	431a      	orrs	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	605a      	str	r2, [r3, #4]
}
 80121b0:	46c0      	nop			@ (mov r8, r8)
 80121b2:	46bd      	mov	sp, r7
 80121b4:	b002      	add	sp, #8
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	2280      	movs	r2, #128	@ 0x80
 80121c6:	4393      	bics	r3, r2
 80121c8:	001a      	movs	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	605a      	str	r2, [r3, #4]
}
 80121ce:	46c0      	nop			@ (mov r8, r8)
 80121d0:	46bd      	mov	sp, r7
 80121d2:	b002      	add	sp, #8
 80121d4:	bd80      	pop	{r7, pc}
	...

080121d8 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	4a03      	ldr	r2, [pc, #12]	@ (80121f4 <LL_ADC_DisableIT_AWD2+0x1c>)
 80121e6:	401a      	ands	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	605a      	str	r2, [r3, #4]
}
 80121ec:	46c0      	nop			@ (mov r8, r8)
 80121ee:	46bd      	mov	sp, r7
 80121f0:	b002      	add	sp, #8
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	fffffeff 	.word	0xfffffeff

080121f8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	4a03      	ldr	r2, [pc, #12]	@ (8012214 <LL_ADC_DisableIT_AWD3+0x1c>)
 8012206:	401a      	ands	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	605a      	str	r2, [r3, #4]
}
 801220c:	46c0      	nop			@ (mov r8, r8)
 801220e:	46bd      	mov	sp, r7
 8012210:	b002      	add	sp, #8
 8012212:	bd80      	pop	{r7, pc}
 8012214:	fffffdff 	.word	0xfffffdff

08012218 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b088      	sub	sp, #32
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012220:	231f      	movs	r3, #31
 8012222:	18fb      	adds	r3, r7, r3
 8012224:	2200      	movs	r2, #0
 8012226:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8012228:	2300      	movs	r3, #0
 801222a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 801222c:	2300      	movs	r3, #0
 801222e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8012230:	2300      	movs	r3, #0
 8012232:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 801223a:	2301      	movs	r3, #1
 801223c:	e17f      	b.n	801253e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012242:	2b00      	cmp	r3, #0
 8012244:	d10a      	bne.n	801225c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	0018      	movs	r0, r3
 801224a:	f7f9 fd79 	bl	800bd40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2254      	movs	r2, #84	@ 0x54
 8012258:	2100      	movs	r1, #0
 801225a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	0018      	movs	r0, r3
 8012262:	f7ff fedd 	bl	8012020 <LL_ADC_IsInternalRegulatorEnabled>
 8012266:	1e03      	subs	r3, r0, #0
 8012268:	d115      	bne.n	8012296 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	0018      	movs	r0, r3
 8012270:	f7ff feb2 	bl	8011fd8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012274:	4bb4      	ldr	r3, [pc, #720]	@ (8012548 <HAL_ADC_Init+0x330>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	49b4      	ldr	r1, [pc, #720]	@ (801254c <HAL_ADC_Init+0x334>)
 801227a:	0018      	movs	r0, r3
 801227c:	f7ed ff4c 	bl	8000118 <__udivsi3>
 8012280:	0003      	movs	r3, r0
 8012282:	3301      	adds	r3, #1
 8012284:	005b      	lsls	r3, r3, #1
 8012286:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012288:	e002      	b.n	8012290 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3b01      	subs	r3, #1
 801228e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1f9      	bne.n	801228a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	0018      	movs	r0, r3
 801229c:	f7ff fec0 	bl	8012020 <LL_ADC_IsInternalRegulatorEnabled>
 80122a0:	1e03      	subs	r3, r0, #0
 80122a2:	d10f      	bne.n	80122c4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122a8:	2210      	movs	r2, #16
 80122aa:	431a      	orrs	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80122b4:	2201      	movs	r2, #1
 80122b6:	431a      	orrs	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80122bc:	231f      	movs	r3, #31
 80122be:	18fb      	adds	r3, r7, r3
 80122c0:	2201      	movs	r2, #1
 80122c2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	0018      	movs	r0, r3
 80122ca:	f7ff ff15 	bl	80120f8 <LL_ADC_REG_IsConversionOngoing>
 80122ce:	0003      	movs	r3, r0
 80122d0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122d6:	2210      	movs	r2, #16
 80122d8:	4013      	ands	r3, r2
 80122da:	d000      	beq.n	80122de <HAL_ADC_Init+0xc6>
 80122dc:	e122      	b.n	8012524 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d000      	beq.n	80122e6 <HAL_ADC_Init+0xce>
 80122e4:	e11e      	b.n	8012524 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122ea:	4a99      	ldr	r2, [pc, #612]	@ (8012550 <HAL_ADC_Init+0x338>)
 80122ec:	4013      	ands	r3, r2
 80122ee:	2202      	movs	r2, #2
 80122f0:	431a      	orrs	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	0018      	movs	r0, r3
 80122fc:	f7ff fec8 	bl	8012090 <LL_ADC_IsEnabled>
 8012300:	1e03      	subs	r3, r0, #0
 8012302:	d000      	beq.n	8012306 <HAL_ADC_Init+0xee>
 8012304:	e0ad      	b.n	8012462 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	7e1b      	ldrb	r3, [r3, #24]
 801230e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8012310:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	7e5b      	ldrb	r3, [r3, #25]
 8012316:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8012318:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	7e9b      	ldrb	r3, [r3, #26]
 801231e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8012320:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <HAL_ADC_Init+0x118>
 801232a:	2380      	movs	r3, #128	@ 0x80
 801232c:	015b      	lsls	r3, r3, #5
 801232e:	e000      	b.n	8012332 <HAL_ADC_Init+0x11a>
 8012330:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8012332:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8012338:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	691b      	ldr	r3, [r3, #16]
 801233e:	2b00      	cmp	r3, #0
 8012340:	da04      	bge.n	801234c <HAL_ADC_Init+0x134>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	691b      	ldr	r3, [r3, #16]
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	085b      	lsrs	r3, r3, #1
 801234a:	e001      	b.n	8012350 <HAL_ADC_Init+0x138>
 801234c:	2380      	movs	r3, #128	@ 0x80
 801234e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8012350:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	212c      	movs	r1, #44	@ 0x2c
 8012356:	5c5b      	ldrb	r3, [r3, r1]
 8012358:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 801235a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 801235c:	69ba      	ldr	r2, [r7, #24]
 801235e:	4313      	orrs	r3, r2
 8012360:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2220      	movs	r2, #32
 8012366:	5c9b      	ldrb	r3, [r3, r2]
 8012368:	2b01      	cmp	r3, #1
 801236a:	d115      	bne.n	8012398 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	7e9b      	ldrb	r3, [r3, #26]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d105      	bne.n	8012380 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	2280      	movs	r2, #128	@ 0x80
 8012378:	0252      	lsls	r2, r2, #9
 801237a:	4313      	orrs	r3, r2
 801237c:	61bb      	str	r3, [r7, #24]
 801237e:	e00b      	b.n	8012398 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012384:	2220      	movs	r2, #32
 8012386:	431a      	orrs	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012390:	2201      	movs	r2, #1
 8012392:	431a      	orrs	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00a      	beq.n	80123b6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123a4:	23e0      	movs	r3, #224	@ 0xe0
 80123a6:	005b      	lsls	r3, r3, #1
 80123a8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80123ae:	4313      	orrs	r3, r2
 80123b0:	69ba      	ldr	r2, [r7, #24]
 80123b2:	4313      	orrs	r3, r2
 80123b4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	4a65      	ldr	r2, [pc, #404]	@ (8012554 <HAL_ADC_Init+0x33c>)
 80123be:	4013      	ands	r3, r2
 80123c0:	0019      	movs	r1, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	69ba      	ldr	r2, [r7, #24]
 80123c8:	430a      	orrs	r2, r1
 80123ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	0f9b      	lsrs	r3, r3, #30
 80123d2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80123d8:	4313      	orrs	r3, r2
 80123da:	697a      	ldr	r2, [r7, #20]
 80123dc:	4313      	orrs	r3, r2
 80123de:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	223c      	movs	r2, #60	@ 0x3c
 80123e4:	5c9b      	ldrb	r3, [r3, r2]
 80123e6:	2b01      	cmp	r3, #1
 80123e8:	d111      	bne.n	801240e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	0f9b      	lsrs	r3, r3, #30
 80123f0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80123f6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80123fc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8012402:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	4313      	orrs	r3, r2
 8012408:	2201      	movs	r2, #1
 801240a:	4313      	orrs	r3, r2
 801240c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	4a50      	ldr	r2, [pc, #320]	@ (8012558 <HAL_ADC_Init+0x340>)
 8012416:	4013      	ands	r3, r2
 8012418:	0019      	movs	r1, r3
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	697a      	ldr	r2, [r7, #20]
 8012420:	430a      	orrs	r2, r1
 8012422:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	685a      	ldr	r2, [r3, #4]
 8012428:	23c0      	movs	r3, #192	@ 0xc0
 801242a:	061b      	lsls	r3, r3, #24
 801242c:	429a      	cmp	r2, r3
 801242e:	d018      	beq.n	8012462 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8012434:	2380      	movs	r3, #128	@ 0x80
 8012436:	05db      	lsls	r3, r3, #23
 8012438:	429a      	cmp	r2, r3
 801243a:	d012      	beq.n	8012462 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8012440:	2380      	movs	r3, #128	@ 0x80
 8012442:	061b      	lsls	r3, r3, #24
 8012444:	429a      	cmp	r2, r3
 8012446:	d00c      	beq.n	8012462 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8012448:	4b44      	ldr	r3, [pc, #272]	@ (801255c <HAL_ADC_Init+0x344>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	4a44      	ldr	r2, [pc, #272]	@ (8012560 <HAL_ADC_Init+0x348>)
 801244e:	4013      	ands	r3, r2
 8012450:	0019      	movs	r1, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	685a      	ldr	r2, [r3, #4]
 8012456:	23f0      	movs	r3, #240	@ 0xf0
 8012458:	039b      	lsls	r3, r3, #14
 801245a:	401a      	ands	r2, r3
 801245c:	4b3f      	ldr	r3, [pc, #252]	@ (801255c <HAL_ADC_Init+0x344>)
 801245e:	430a      	orrs	r2, r1
 8012460:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6818      	ldr	r0, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801246a:	001a      	movs	r2, r3
 801246c:	2100      	movs	r1, #0
 801246e:	f7ff fcca 	bl	8011e06 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6818      	ldr	r0, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801247a:	493a      	ldr	r1, [pc, #232]	@ (8012564 <HAL_ADC_Init+0x34c>)
 801247c:	001a      	movs	r2, r3
 801247e:	f7ff fcc2 	bl	8011e06 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d109      	bne.n	801249e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2110      	movs	r1, #16
 8012496:	4249      	negs	r1, r1
 8012498:	430a      	orrs	r2, r1
 801249a:	629a      	str	r2, [r3, #40]	@ 0x28
 801249c:	e018      	b.n	80124d0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	691a      	ldr	r2, [r3, #16]
 80124a2:	2380      	movs	r3, #128	@ 0x80
 80124a4:	039b      	lsls	r3, r3, #14
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d112      	bne.n	80124d0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	69db      	ldr	r3, [r3, #28]
 80124b4:	3b01      	subs	r3, #1
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	221c      	movs	r2, #28
 80124ba:	4013      	ands	r3, r2
 80124bc:	2210      	movs	r2, #16
 80124be:	4252      	negs	r2, r2
 80124c0:	409a      	lsls	r2, r3
 80124c2:	0011      	movs	r1, r2
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	430a      	orrs	r2, r1
 80124ce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2100      	movs	r1, #0
 80124d6:	0018      	movs	r0, r3
 80124d8:	f7ff fcb2 	bl	8011e40 <LL_ADC_GetSamplingTimeCommonChannels>
 80124dc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d10b      	bne.n	80124fe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2200      	movs	r2, #0
 80124ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124f0:	2203      	movs	r2, #3
 80124f2:	4393      	bics	r3, r2
 80124f4:	2201      	movs	r2, #1
 80124f6:	431a      	orrs	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80124fc:	e01c      	b.n	8012538 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012502:	2212      	movs	r2, #18
 8012504:	4393      	bics	r3, r2
 8012506:	2210      	movs	r2, #16
 8012508:	431a      	orrs	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012512:	2201      	movs	r2, #1
 8012514:	431a      	orrs	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 801251a:	231f      	movs	r3, #31
 801251c:	18fb      	adds	r3, r7, r3
 801251e:	2201      	movs	r2, #1
 8012520:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8012522:	e009      	b.n	8012538 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012528:	2210      	movs	r2, #16
 801252a:	431a      	orrs	r2, r3
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8012530:	231f      	movs	r3, #31
 8012532:	18fb      	adds	r3, r7, r3
 8012534:	2201      	movs	r2, #1
 8012536:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8012538:	231f      	movs	r3, #31
 801253a:	18fb      	adds	r3, r7, r3
 801253c:	781b      	ldrb	r3, [r3, #0]
}
 801253e:	0018      	movs	r0, r3
 8012540:	46bd      	mov	sp, r7
 8012542:	b008      	add	sp, #32
 8012544:	bd80      	pop	{r7, pc}
 8012546:	46c0      	nop			@ (mov r8, r8)
 8012548:	2000025c 	.word	0x2000025c
 801254c:	00030d40 	.word	0x00030d40
 8012550:	fffffefd 	.word	0xfffffefd
 8012554:	ffde0201 	.word	0xffde0201
 8012558:	1ffffc02 	.word	0x1ffffc02
 801255c:	40012708 	.word	0x40012708
 8012560:	ffc3ffff 	.word	0xffc3ffff
 8012564:	7fffff04 	.word	0x7fffff04

08012568 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8012568:	b5b0      	push	{r4, r5, r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d101      	bne.n	801257a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8012576:	2301      	movs	r3, #1
 8012578:	e081      	b.n	801267e <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801257e:	2202      	movs	r2, #2
 8012580:	431a      	orrs	r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8012586:	250f      	movs	r5, #15
 8012588:	197c      	adds	r4, r7, r5
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	0018      	movs	r0, r3
 801258e:	f000 fbad 	bl	8012cec <ADC_ConversionStop>
 8012592:	0003      	movs	r3, r0
 8012594:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8012596:	197b      	adds	r3, r7, r5
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d112      	bne.n	80125c4 <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801259e:	197c      	adds	r4, r7, r5
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	0018      	movs	r0, r3
 80125a4:	f000 fc6a 	bl	8012e7c <ADC_Disable>
 80125a8:	0003      	movs	r3, r0
 80125aa:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80125ac:	197b      	adds	r3, r7, r5
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d102      	bne.n	80125ba <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2201      	movs	r2, #1
 80125b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	0018      	movs	r0, r3
 80125c0:	f7ff fd1e 	bl	8012000 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	685a      	ldr	r2, [r3, #4]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	492e      	ldr	r1, [pc, #184]	@ (8012688 <HAL_ADC_DeInit+0x120>)
 80125d0:	400a      	ands	r2, r1
 80125d2:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a2c      	ldr	r2, [pc, #176]	@ (801268c <HAL_ADC_DeInit+0x124>)
 80125da:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	68da      	ldr	r2, [r3, #12]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	492a      	ldr	r1, [pc, #168]	@ (8012690 <HAL_ADC_DeInit+0x128>)
 80125e8:	400a      	ands	r2, r1
 80125ea:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	695a      	ldr	r2, [r3, #20]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2107      	movs	r1, #7
 80125f8:	438a      	bics	r2, r1
 80125fa:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2200      	movs	r2, #0
 8012608:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	6a1a      	ldr	r2, [r3, #32]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	491f      	ldr	r1, [pc, #124]	@ (8012694 <HAL_ADC_DeInit+0x12c>)
 8012616:	400a      	ands	r2, r1
 8012618:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	491b      	ldr	r1, [pc, #108]	@ (8012694 <HAL_ADC_DeInit+0x12c>)
 8012626:	400a      	ands	r2, r1
 8012628:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4917      	ldr	r1, [pc, #92]	@ (8012694 <HAL_ADC_DeInit+0x12c>)
 8012636:	400a      	ands	r2, r1
 8012638:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	691a      	ldr	r2, [r3, #16]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	0092      	lsls	r2, r2, #2
 8012646:	0892      	lsrs	r2, r2, #2
 8012648:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 801264a:	4b13      	ldr	r3, [pc, #76]	@ (8012698 <HAL_ADC_DeInit+0x130>)
 801264c:	681a      	ldr	r2, [r3, #0]
 801264e:	4b12      	ldr	r3, [pc, #72]	@ (8012698 <HAL_ADC_DeInit+0x130>)
 8012650:	4912      	ldr	r1, [pc, #72]	@ (801269c <HAL_ADC_DeInit+0x134>)
 8012652:	400a      	ands	r2, r1
 8012654:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	0018      	movs	r0, r3
 801265a:	f7f9 fc07 	bl	800be6c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2254      	movs	r2, #84	@ 0x54
 8012674:	2100      	movs	r1, #0
 8012676:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012678:	230f      	movs	r3, #15
 801267a:	18fb      	adds	r3, r7, r3
 801267c:	781b      	ldrb	r3, [r3, #0]
}
 801267e:	0018      	movs	r0, r3
 8012680:	46bd      	mov	sp, r7
 8012682:	b004      	add	sp, #16
 8012684:	bdb0      	pop	{r4, r5, r7, pc}
 8012686:	46c0      	nop			@ (mov r8, r8)
 8012688:	fffff460 	.word	0xfffff460
 801268c:	00000b9f 	.word	0x00000b9f
 8012690:	831e0200 	.word	0x831e0200
 8012694:	f000f000 	.word	0xf000f000
 8012698:	40012708 	.word	0x40012708
 801269c:	fe03ffff 	.word	0xfe03ffff

080126a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80126a0:	b590      	push	{r4, r7, lr}
 80126a2:	b08b      	sub	sp, #44	@ 0x2c
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80126aa:	2327      	movs	r3, #39	@ 0x27
 80126ac:	18fb      	adds	r3, r7, r3
 80126ae:	2200      	movs	r2, #0
 80126b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80126b2:	2300      	movs	r3, #0
 80126b4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2254      	movs	r2, #84	@ 0x54
 80126ba:	5c9b      	ldrb	r3, [r3, r2]
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d101      	bne.n	80126c4 <HAL_ADC_ConfigChannel+0x24>
 80126c0:	2302      	movs	r3, #2
 80126c2:	e141      	b.n	8012948 <HAL_ADC_ConfigChannel+0x2a8>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2254      	movs	r2, #84	@ 0x54
 80126c8:	2101      	movs	r1, #1
 80126ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	0018      	movs	r0, r3
 80126d2:	f7ff fd11 	bl	80120f8 <LL_ADC_REG_IsConversionOngoing>
 80126d6:	1e03      	subs	r3, r0, #0
 80126d8:	d000      	beq.n	80126dc <HAL_ADC_ConfigChannel+0x3c>
 80126da:	e124      	b.n	8012926 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	2b02      	cmp	r3, #2
 80126e2:	d100      	bne.n	80126e6 <HAL_ADC_ConfigChannel+0x46>
 80126e4:	e0d8      	b.n	8012898 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	691a      	ldr	r2, [r3, #16]
 80126ea:	2380      	movs	r3, #128	@ 0x80
 80126ec:	061b      	lsls	r3, r3, #24
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d004      	beq.n	80126fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80126f6:	4a96      	ldr	r2, [pc, #600]	@ (8012950 <HAL_ADC_ConfigChannel+0x2b0>)
 80126f8:	4293      	cmp	r3, r2
 80126fa:	d108      	bne.n	801270e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	0019      	movs	r1, r3
 8012706:	0010      	movs	r0, r2
 8012708:	f7ff fbd1 	bl	8011eae <LL_ADC_REG_SetSequencerChAdd>
 801270c:	e060      	b.n	80127d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	211f      	movs	r1, #31
 8012718:	400b      	ands	r3, r1
 801271a:	210f      	movs	r1, #15
 801271c:	4099      	lsls	r1, r3
 801271e:	000b      	movs	r3, r1
 8012720:	43db      	mvns	r3, r3
 8012722:	4013      	ands	r3, r2
 8012724:	001c      	movs	r4, r3
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	025b      	lsls	r3, r3, #9
 801272c:	0a5b      	lsrs	r3, r3, #9
 801272e:	d105      	bne.n	801273c <HAL_ADC_ConfigChannel+0x9c>
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	0e9b      	lsrs	r3, r3, #26
 8012736:	221f      	movs	r2, #31
 8012738:	401a      	ands	r2, r3
 801273a:	e02e      	b.n	801279a <HAL_ADC_ConfigChannel+0xfa>
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012742:	231f      	movs	r3, #31
 8012744:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	085b      	lsrs	r3, r3, #1
 801274e:	61bb      	str	r3, [r7, #24]
 8012750:	e00e      	b.n	8012770 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	2201      	movs	r2, #1
 801275c:	4013      	ands	r3, r2
 801275e:	693a      	ldr	r2, [r7, #16]
 8012760:	4313      	orrs	r3, r2
 8012762:	613b      	str	r3, [r7, #16]
    s--;
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	3b01      	subs	r3, #1
 8012768:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 801276a:	69bb      	ldr	r3, [r7, #24]
 801276c:	085b      	lsrs	r3, r3, #1
 801276e:	61bb      	str	r3, [r7, #24]
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1ed      	bne.n	8012752 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012776:	693a      	ldr	r2, [r7, #16]
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	409a      	lsls	r2, r3
 801277c:	0013      	movs	r3, r2
 801277e:	613b      	str	r3, [r7, #16]
  return result;
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d101      	bne.n	801278e <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 801278a:	2320      	movs	r3, #32
 801278c:	e004      	b.n	8012798 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 801278e:	69f8      	ldr	r0, [r7, #28]
 8012790:	f7ed fe76 	bl	8000480 <__clzsi2>
 8012794:	0003      	movs	r3, r0
 8012796:	b2db      	uxtb	r3, r3
 8012798:	001a      	movs	r2, r3
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	211f      	movs	r1, #31
 80127a0:	400b      	ands	r3, r1
 80127a2:	409a      	lsls	r2, r3
 80127a4:	0013      	movs	r3, r2
 80127a6:	0022      	movs	r2, r4
 80127a8:	431a      	orrs	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	089b      	lsrs	r3, r3, #2
 80127b4:	1c5a      	adds	r2, r3, #1
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	69db      	ldr	r3, [r3, #28]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d808      	bhi.n	80127d0 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6818      	ldr	r0, [r3, #0]
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	6859      	ldr	r1, [r3, #4]
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	001a      	movs	r2, r3
 80127cc:	f7ff fb4f 	bl	8011e6e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6818      	ldr	r0, [r3, #0]
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	6819      	ldr	r1, [r3, #0]
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	001a      	movs	r2, r3
 80127de:	f7ff fb89 	bl	8011ef4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	db00      	blt.n	80127ec <HAL_ADC_ConfigChannel+0x14c>
 80127ea:	e0a6      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80127ec:	4b59      	ldr	r3, [pc, #356]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 80127ee:	0018      	movs	r0, r3
 80127f0:	f7ff fafc 	bl	8011dec <LL_ADC_GetCommonPathInternalCh>
 80127f4:	0003      	movs	r3, r0
 80127f6:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4a56      	ldr	r2, [pc, #344]	@ (8012958 <HAL_ADC_ConfigChannel+0x2b8>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d122      	bne.n	8012848 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8012802:	6a3a      	ldr	r2, [r7, #32]
 8012804:	2380      	movs	r3, #128	@ 0x80
 8012806:	041b      	lsls	r3, r3, #16
 8012808:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 801280a:	d11d      	bne.n	8012848 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801280c:	6a3b      	ldr	r3, [r7, #32]
 801280e:	2280      	movs	r2, #128	@ 0x80
 8012810:	0412      	lsls	r2, r2, #16
 8012812:	4313      	orrs	r3, r2
 8012814:	4a4f      	ldr	r2, [pc, #316]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 8012816:	0019      	movs	r1, r3
 8012818:	0010      	movs	r0, r2
 801281a:	f7ff fad3 	bl	8011dc4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801281e:	4b4f      	ldr	r3, [pc, #316]	@ (801295c <HAL_ADC_ConfigChannel+0x2bc>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	494f      	ldr	r1, [pc, #316]	@ (8012960 <HAL_ADC_ConfigChannel+0x2c0>)
 8012824:	0018      	movs	r0, r3
 8012826:	f7ed fc77 	bl	8000118 <__udivsi3>
 801282a:	0003      	movs	r3, r0
 801282c:	1c5a      	adds	r2, r3, #1
 801282e:	0013      	movs	r3, r2
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	189b      	adds	r3, r3, r2
 8012834:	009b      	lsls	r3, r3, #2
 8012836:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012838:	e002      	b.n	8012840 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3b01      	subs	r3, #1
 801283e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1f9      	bne.n	801283a <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8012846:	e078      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a45      	ldr	r2, [pc, #276]	@ (8012964 <HAL_ADC_ConfigChannel+0x2c4>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d10e      	bne.n	8012870 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8012852:	6a3a      	ldr	r2, [r7, #32]
 8012854:	2380      	movs	r3, #128	@ 0x80
 8012856:	045b      	lsls	r3, r3, #17
 8012858:	4013      	ands	r3, r2
 801285a:	d109      	bne.n	8012870 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	2280      	movs	r2, #128	@ 0x80
 8012860:	0452      	lsls	r2, r2, #17
 8012862:	4313      	orrs	r3, r2
 8012864:	4a3b      	ldr	r2, [pc, #236]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 8012866:	0019      	movs	r1, r3
 8012868:	0010      	movs	r0, r2
 801286a:	f7ff faab 	bl	8011dc4 <LL_ADC_SetCommonPathInternalCh>
 801286e:	e064      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4a3c      	ldr	r2, [pc, #240]	@ (8012968 <HAL_ADC_ConfigChannel+0x2c8>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d15f      	bne.n	801293a <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801287a:	6a3a      	ldr	r2, [r7, #32]
 801287c:	2380      	movs	r3, #128	@ 0x80
 801287e:	03db      	lsls	r3, r3, #15
 8012880:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8012882:	d15a      	bne.n	801293a <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012884:	6a3b      	ldr	r3, [r7, #32]
 8012886:	2280      	movs	r2, #128	@ 0x80
 8012888:	03d2      	lsls	r2, r2, #15
 801288a:	4313      	orrs	r3, r2
 801288c:	4a31      	ldr	r2, [pc, #196]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 801288e:	0019      	movs	r1, r3
 8012890:	0010      	movs	r0, r2
 8012892:	f7ff fa97 	bl	8011dc4 <LL_ADC_SetCommonPathInternalCh>
 8012896:	e050      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	691a      	ldr	r2, [r3, #16]
 801289c:	2380      	movs	r3, #128	@ 0x80
 801289e:	061b      	lsls	r3, r3, #24
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d004      	beq.n	80128ae <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80128a8:	4a29      	ldr	r2, [pc, #164]	@ (8012950 <HAL_ADC_ConfigChannel+0x2b0>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d107      	bne.n	80128be <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	0019      	movs	r1, r3
 80128b8:	0010      	movs	r0, r2
 80128ba:	f7ff fb09 	bl	8011ed0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	da39      	bge.n	801293a <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80128c6:	4b23      	ldr	r3, [pc, #140]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 80128c8:	0018      	movs	r0, r3
 80128ca:	f7ff fa8f 	bl	8011dec <LL_ADC_GetCommonPathInternalCh>
 80128ce:	0003      	movs	r3, r0
 80128d0:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4a20      	ldr	r2, [pc, #128]	@ (8012958 <HAL_ADC_ConfigChannel+0x2b8>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d108      	bne.n	80128ee <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80128dc:	6a3b      	ldr	r3, [r7, #32]
 80128de:	4a23      	ldr	r2, [pc, #140]	@ (801296c <HAL_ADC_ConfigChannel+0x2cc>)
 80128e0:	4013      	ands	r3, r2
 80128e2:	4a1c      	ldr	r2, [pc, #112]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 80128e4:	0019      	movs	r1, r3
 80128e6:	0010      	movs	r0, r2
 80128e8:	f7ff fa6c 	bl	8011dc4 <LL_ADC_SetCommonPathInternalCh>
 80128ec:	e025      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4a1c      	ldr	r2, [pc, #112]	@ (8012964 <HAL_ADC_ConfigChannel+0x2c4>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d108      	bne.n	801290a <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80128f8:	6a3b      	ldr	r3, [r7, #32]
 80128fa:	4a1d      	ldr	r2, [pc, #116]	@ (8012970 <HAL_ADC_ConfigChannel+0x2d0>)
 80128fc:	4013      	ands	r3, r2
 80128fe:	4a15      	ldr	r2, [pc, #84]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 8012900:	0019      	movs	r1, r3
 8012902:	0010      	movs	r0, r2
 8012904:	f7ff fa5e 	bl	8011dc4 <LL_ADC_SetCommonPathInternalCh>
 8012908:	e017      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4a16      	ldr	r2, [pc, #88]	@ (8012968 <HAL_ADC_ConfigChannel+0x2c8>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d112      	bne.n	801293a <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012914:	6a3b      	ldr	r3, [r7, #32]
 8012916:	4a17      	ldr	r2, [pc, #92]	@ (8012974 <HAL_ADC_ConfigChannel+0x2d4>)
 8012918:	4013      	ands	r3, r2
 801291a:	4a0e      	ldr	r2, [pc, #56]	@ (8012954 <HAL_ADC_ConfigChannel+0x2b4>)
 801291c:	0019      	movs	r1, r3
 801291e:	0010      	movs	r0, r2
 8012920:	f7ff fa50 	bl	8011dc4 <LL_ADC_SetCommonPathInternalCh>
 8012924:	e009      	b.n	801293a <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801292a:	2220      	movs	r2, #32
 801292c:	431a      	orrs	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8012932:	2327      	movs	r3, #39	@ 0x27
 8012934:	18fb      	adds	r3, r7, r3
 8012936:	2201      	movs	r2, #1
 8012938:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2254      	movs	r2, #84	@ 0x54
 801293e:	2100      	movs	r1, #0
 8012940:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012942:	2327      	movs	r3, #39	@ 0x27
 8012944:	18fb      	adds	r3, r7, r3
 8012946:	781b      	ldrb	r3, [r3, #0]
}
 8012948:	0018      	movs	r0, r3
 801294a:	46bd      	mov	sp, r7
 801294c:	b00b      	add	sp, #44	@ 0x2c
 801294e:	bd90      	pop	{r4, r7, pc}
 8012950:	80000004 	.word	0x80000004
 8012954:	40012708 	.word	0x40012708
 8012958:	ac000800 	.word	0xac000800
 801295c:	2000025c 	.word	0x2000025c
 8012960:	00030d40 	.word	0x00030d40
 8012964:	b4002000 	.word	0xb4002000
 8012968:	b0001000 	.word	0xb0001000
 801296c:	ff7fffff 	.word	0xff7fffff
 8012970:	feffffff 	.word	0xfeffffff
 8012974:	ffbfffff 	.word	0xffbfffff

08012978 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8012978:	b590      	push	{r4, r7, lr}
 801297a:	b08f      	sub	sp, #60	@ 0x3c
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012982:	2337      	movs	r3, #55	@ 0x37
 8012984:	18fb      	adds	r3, r7, r3
 8012986:	2200      	movs	r2, #0
 8012988:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 801298a:	2300      	movs	r3, #0
 801298c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2254      	movs	r2, #84	@ 0x54
 8012992:	5c9b      	ldrb	r3, [r3, r2]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d101      	bne.n	801299c <HAL_ADC_AnalogWDGConfig+0x24>
 8012998:	2302      	movs	r3, #2
 801299a:	e195      	b.n	8012cc8 <HAL_ADC_AnalogWDGConfig+0x350>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2254      	movs	r2, #84	@ 0x54
 80129a0:	2101      	movs	r1, #1
 80129a2:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	0018      	movs	r0, r3
 80129aa:	f7ff fba5 	bl	80120f8 <LL_ADC_REG_IsConversionOngoing>
 80129ae:	1e03      	subs	r3, r0, #0
 80129b0:	d000      	beq.n	80129b4 <HAL_ADC_AnalogWDGConfig+0x3c>
 80129b2:	e156      	b.n	8012c62 <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4ac5      	ldr	r2, [pc, #788]	@ (8012cd0 <HAL_ADC_AnalogWDGConfig+0x358>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d162      	bne.n	8012a84 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	0018      	movs	r0, r3
 80129c4:	f7ff fb64 	bl	8012090 <LL_ADC_IsEnabled>
 80129c8:	1e03      	subs	r3, r0, #0
 80129ca:	d009      	beq.n	80129e0 <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 80129cc:	2301      	movs	r3, #1
 80129ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 80129d0:	2337      	movs	r3, #55	@ 0x37
 80129d2:	18fc      	adds	r4, r7, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	0018      	movs	r0, r3
 80129d8:	f000 fa50 	bl	8012e7c <ADC_Disable>
 80129dc:	0003      	movs	r3, r0
 80129de:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	2280      	movs	r2, #128	@ 0x80
 80129e6:	0412      	lsls	r2, r2, #16
 80129e8:	4293      	cmp	r3, r2
 80129ea:	d011      	beq.n	8012a10 <HAL_ADC_AnalogWDGConfig+0x98>
 80129ec:	22c0      	movs	r2, #192	@ 0xc0
 80129ee:	0412      	lsls	r2, r2, #16
 80129f0:	4293      	cmp	r3, r2
 80129f2:	d115      	bne.n	8012a20 <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	689b      	ldr	r3, [r3, #8]
 80129fc:	4ab5      	ldr	r2, [pc, #724]	@ (8012cd4 <HAL_ADC_AnalogWDGConfig+0x35c>)
 80129fe:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8012a00:	22c0      	movs	r2, #192	@ 0xc0
 8012a02:	0412      	lsls	r2, r2, #16
 8012a04:	4313      	orrs	r3, r2
 8012a06:	49b2      	ldr	r1, [pc, #712]	@ (8012cd0 <HAL_ADC_AnalogWDGConfig+0x358>)
 8012a08:	001a      	movs	r2, r3
 8012a0a:	f7ff fa8f 	bl	8011f2c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8012a0e:	e00f      	b.n	8012a30 <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4ab0      	ldr	r2, [pc, #704]	@ (8012cd8 <HAL_ADC_AnalogWDGConfig+0x360>)
 8012a16:	49ae      	ldr	r1, [pc, #696]	@ (8012cd0 <HAL_ADC_AnalogWDGConfig+0x358>)
 8012a18:	0018      	movs	r0, r3
 8012a1a:	f7ff fa87 	bl	8011f2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012a1e:	e007      	b.n	8012a30 <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	49aa      	ldr	r1, [pc, #680]	@ (8012cd0 <HAL_ADC_AnalogWDGConfig+0x358>)
 8012a26:	2200      	movs	r2, #0
 8012a28:	0018      	movs	r0, r3
 8012a2a:	f7ff fa7f 	bl	8011f2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012a2e:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 8012a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d10b      	bne.n	8012a4e <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 8012a36:	2237      	movs	r2, #55	@ 0x37
 8012a38:	18bb      	adds	r3, r7, r2
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d106      	bne.n	8012a4e <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 8012a40:	18bc      	adds	r4, r7, r2
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	0018      	movs	r0, r3
 8012a46:	f000 f993 	bl	8012d70 <ADC_Enable>
 8012a4a:	0003      	movs	r3, r0
 8012a4c:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a52:	4aa2      	ldr	r2, [pc, #648]	@ (8012cdc <HAL_ADC_AnalogWDGConfig+0x364>)
 8012a54:	401a      	ands	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	0018      	movs	r0, r3
 8012a60:	f7ff fb5b 	bl	801211a <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	7b1b      	ldrb	r3, [r3, #12]
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d105      	bne.n	8012a78 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	0018      	movs	r0, r3
 8012a72:	f7ff fb75 	bl	8012160 <LL_ADC_EnableIT_AWD1>
 8012a76:	e0f4      	b.n	8012c62 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	0018      	movs	r0, r3
 8012a7e:	f7ff fb9b 	bl	80121b8 <LL_ADC_DisableIT_AWD1>
 8012a82:	e0ee      	b.n	8012c62 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	2280      	movs	r2, #128	@ 0x80
 8012a8a:	0412      	lsls	r2, r2, #16
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d100      	bne.n	8012a92 <HAL_ADC_AnalogWDGConfig+0x11a>
 8012a90:	e09b      	b.n	8012bca <HAL_ADC_AnalogWDGConfig+0x252>
 8012a92:	22c0      	movs	r2, #192	@ 0xc0
 8012a94:	0412      	lsls	r2, r2, #16
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d000      	beq.n	8012a9c <HAL_ADC_AnalogWDGConfig+0x124>
 8012a9a:	e09f      	b.n	8012bdc <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4a8f      	ldr	r2, [pc, #572]	@ (8012ce0 <HAL_ADC_AnalogWDGConfig+0x368>)
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	d148      	bne.n	8012b38 <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	689b      	ldr	r3, [r3, #8]
 8012aaa:	025b      	lsls	r3, r3, #9
 8012aac:	0a5b      	lsrs	r3, r3, #9
 8012aae:	d108      	bne.n	8012ac2 <HAL_ADC_AnalogWDGConfig+0x14a>
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	689b      	ldr	r3, [r3, #8]
 8012ab4:	0e9b      	lsrs	r3, r3, #26
 8012ab6:	221f      	movs	r2, #31
 8012ab8:	4013      	ands	r3, r2
 8012aba:	2201      	movs	r2, #1
 8012abc:	409a      	lsls	r2, r3
 8012abe:	0013      	movs	r3, r2
 8012ac0:	e030      	b.n	8012b24 <HAL_ADC_AnalogWDGConfig+0x1ac>
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	689b      	ldr	r3, [r3, #8]
 8012ac6:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012ac8:	231f      	movs	r3, #31
 8012aca:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012ad0:	6a3b      	ldr	r3, [r7, #32]
 8012ad2:	085b      	lsrs	r3, r3, #1
 8012ad4:	623b      	str	r3, [r7, #32]
 8012ad6:	e00e      	b.n	8012af6 <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	005b      	lsls	r3, r3, #1
 8012adc:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8012ade:	6a3b      	ldr	r3, [r7, #32]
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	4013      	ands	r3, r2
 8012ae4:	69ba      	ldr	r2, [r7, #24]
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	61bb      	str	r3, [r7, #24]
    s--;
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	3b01      	subs	r3, #1
 8012aee:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012af0:	6a3b      	ldr	r3, [r7, #32]
 8012af2:	085b      	lsrs	r3, r3, #1
 8012af4:	623b      	str	r3, [r7, #32]
 8012af6:	6a3b      	ldr	r3, [r7, #32]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d1ed      	bne.n	8012ad8 <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012afc:	69ba      	ldr	r2, [r7, #24]
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	409a      	lsls	r2, r3
 8012b02:	0013      	movs	r3, r2
 8012b04:	61bb      	str	r3, [r7, #24]
  return result;
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d101      	bne.n	8012b14 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 8012b10:	2320      	movs	r3, #32
 8012b12:	e004      	b.n	8012b1e <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 8012b14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012b16:	f7ed fcb3 	bl	8000480 <__clzsi2>
 8012b1a:	0003      	movs	r3, r0
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	001a      	movs	r2, r3
 8012b20:	2301      	movs	r3, #1
 8012b22:	4093      	lsls	r3, r2
 8012b24:	687a      	ldr	r2, [r7, #4]
 8012b26:	6812      	ldr	r2, [r2, #0]
 8012b28:	21a0      	movs	r1, #160	@ 0xa0
 8012b2a:	5851      	ldr	r1, [r2, r1]
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	6812      	ldr	r2, [r2, #0]
 8012b30:	430b      	orrs	r3, r1
 8012b32:	21a0      	movs	r1, #160	@ 0xa0
 8012b34:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 8012b36:	e05a      	b.n	8012bee <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	689b      	ldr	r3, [r3, #8]
 8012b3c:	025b      	lsls	r3, r3, #9
 8012b3e:	0a5b      	lsrs	r3, r3, #9
 8012b40:	d108      	bne.n	8012b54 <HAL_ADC_AnalogWDGConfig+0x1dc>
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	689b      	ldr	r3, [r3, #8]
 8012b46:	0e9b      	lsrs	r3, r3, #26
 8012b48:	221f      	movs	r2, #31
 8012b4a:	4013      	ands	r3, r2
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	409a      	lsls	r2, r3
 8012b50:	0013      	movs	r3, r2
 8012b52:	e030      	b.n	8012bb6 <HAL_ADC_AnalogWDGConfig+0x23e>
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012b5a:	231f      	movs	r3, #31
 8012b5c:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	085b      	lsrs	r3, r3, #1
 8012b66:	613b      	str	r3, [r7, #16]
 8012b68:	e00e      	b.n	8012b88 <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	005b      	lsls	r3, r3, #1
 8012b6e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	2201      	movs	r2, #1
 8012b74:	4013      	ands	r3, r2
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	60bb      	str	r3, [r7, #8]
    s--;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	085b      	lsrs	r3, r3, #1
 8012b86:	613b      	str	r3, [r7, #16]
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d1ed      	bne.n	8012b6a <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012b8e:	68ba      	ldr	r2, [r7, #8]
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	409a      	lsls	r2, r3
 8012b94:	0013      	movs	r3, r2
 8012b96:	60bb      	str	r3, [r7, #8]
  return result;
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d101      	bne.n	8012ba6 <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 8012ba2:	2320      	movs	r3, #32
 8012ba4:	e004      	b.n	8012bb0 <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 8012ba6:	6978      	ldr	r0, [r7, #20]
 8012ba8:	f7ed fc6a 	bl	8000480 <__clzsi2>
 8012bac:	0003      	movs	r3, r0
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	001a      	movs	r2, r3
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	4093      	lsls	r3, r2
 8012bb6:	687a      	ldr	r2, [r7, #4]
 8012bb8:	6812      	ldr	r2, [r2, #0]
 8012bba:	21a4      	movs	r1, #164	@ 0xa4
 8012bbc:	5851      	ldr	r1, [r2, r1]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	6812      	ldr	r2, [r2, #0]
 8012bc2:	430b      	orrs	r3, r1
 8012bc4:	21a4      	movs	r1, #164	@ 0xa4
 8012bc6:	5053      	str	r3, [r2, r1]
          break;
 8012bc8:	e011      	b.n	8012bee <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012bd2:	4a41      	ldr	r2, [pc, #260]	@ (8012cd8 <HAL_ADC_AnalogWDGConfig+0x360>)
 8012bd4:	0019      	movs	r1, r3
 8012bd6:	f7ff f9a9 	bl	8011f2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 8012bda:	e008      	b.n	8012bee <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2200      	movs	r2, #0
 8012be6:	0019      	movs	r1, r3
 8012be8:	f7ff f9a0 	bl	8011f2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012bec:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8012ce0 <HAL_ADC_AnalogWDGConfig+0x368>)
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d11a      	bne.n	8012c2e <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012bfc:	4a39      	ldr	r2, [pc, #228]	@ (8012ce4 <HAL_ADC_AnalogWDGConfig+0x36c>)
 8012bfe:	401a      	ands	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	0018      	movs	r0, r3
 8012c0a:	f7ff fa91 	bl	8012130 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	7b1b      	ldrb	r3, [r3, #12]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d105      	bne.n	8012c22 <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	0018      	movs	r0, r3
 8012c1c:	f7ff faae 	bl	801217c <LL_ADC_EnableIT_AWD2>
 8012c20:	e01f      	b.n	8012c62 <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	0018      	movs	r0, r3
 8012c28:	f7ff fad6 	bl	80121d8 <LL_ADC_DisableIT_AWD2>
 8012c2c:	e019      	b.n	8012c62 <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c32:	4a2d      	ldr	r2, [pc, #180]	@ (8012ce8 <HAL_ADC_AnalogWDGConfig+0x370>)
 8012c34:	401a      	ands	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	0018      	movs	r0, r3
 8012c40:	f7ff fa82 	bl	8012148 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	7b1b      	ldrb	r3, [r3, #12]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d105      	bne.n	8012c58 <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	0018      	movs	r0, r3
 8012c52:	f7ff faa2 	bl	801219a <LL_ADC_EnableIT_AWD3>
 8012c56:	e004      	b.n	8012c62 <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	0018      	movs	r0, r3
 8012c5e:	f7ff facb 	bl	80121f8 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4a1a      	ldr	r2, [pc, #104]	@ (8012cd0 <HAL_ADC_AnalogWDGConfig+0x358>)
 8012c68:	4293      	cmp	r3, r2
 8012c6a:	d118      	bne.n	8012c9e <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	691a      	ldr	r2, [r3, #16]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	08db      	lsrs	r3, r3, #3
 8012c78:	2103      	movs	r1, #3
 8012c7a:	400b      	ands	r3, r1
 8012c7c:	005b      	lsls	r3, r3, #1
 8012c7e:	409a      	lsls	r2, r3
 8012c80:	0013      	movs	r3, r2
 8012c82:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	695a      	ldr	r2, [r3, #20]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	08db      	lsrs	r3, r3, #3
 8012c90:	2103      	movs	r1, #3
 8012c92:	400b      	ands	r3, r1
 8012c94:	005b      	lsls	r3, r3, #1
 8012c96:	409a      	lsls	r2, r3
 8012c98:	0013      	movs	r3, r2
 8012c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c9c:	e005      	b.n	8012caa <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	691b      	ldr	r3, [r3, #16]
 8012ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	695b      	ldr	r3, [r3, #20]
 8012ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6818      	ldr	r0, [r3, #0]
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	6819      	ldr	r1, [r3, #0]
 8012cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012cb6:	f7ff f967 	bl	8011f88 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2254      	movs	r2, #84	@ 0x54
 8012cbe:	2100      	movs	r1, #0
 8012cc0:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012cc2:	2337      	movs	r3, #55	@ 0x37
 8012cc4:	18fb      	adds	r3, r7, r3
 8012cc6:	781b      	ldrb	r3, [r3, #0]
}
 8012cc8:	0018      	movs	r0, r3
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	b00f      	add	sp, #60	@ 0x3c
 8012cce:	bd90      	pop	{r4, r7, pc}
 8012cd0:	7cc00000 	.word	0x7cc00000
 8012cd4:	fc3fffff 	.word	0xfc3fffff
 8012cd8:	0087ffff 	.word	0x0087ffff
 8012cdc:	fffeffff 	.word	0xfffeffff
 8012ce0:	0017ffff 	.word	0x0017ffff
 8012ce4:	fffdffff 	.word	0xfffdffff
 8012ce8:	fffbffff 	.word	0xfffbffff

08012cec <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	0018      	movs	r0, r3
 8012cfa:	f7ff f9fd 	bl	80120f8 <LL_ADC_REG_IsConversionOngoing>
 8012cfe:	1e03      	subs	r3, r0, #0
 8012d00:	d031      	beq.n	8012d66 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	0018      	movs	r0, r3
 8012d08:	f7ff f9d3 	bl	80120b2 <LL_ADC_IsDisableOngoing>
 8012d0c:	1e03      	subs	r3, r0, #0
 8012d0e:	d104      	bne.n	8012d1a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	0018      	movs	r0, r3
 8012d16:	f7ff f9dd 	bl	80120d4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012d1a:	f7ff f80b 	bl	8011d34 <HAL_GetTick>
 8012d1e:	0003      	movs	r3, r0
 8012d20:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012d22:	e01a      	b.n	8012d5a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8012d24:	f7ff f806 	bl	8011d34 <HAL_GetTick>
 8012d28:	0002      	movs	r2, r0
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	2b02      	cmp	r3, #2
 8012d30:	d913      	bls.n	8012d5a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	689b      	ldr	r3, [r3, #8]
 8012d38:	2204      	movs	r2, #4
 8012d3a:	4013      	ands	r3, r2
 8012d3c:	d00d      	beq.n	8012d5a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d42:	2210      	movs	r2, #16
 8012d44:	431a      	orrs	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d4e:	2201      	movs	r2, #1
 8012d50:	431a      	orrs	r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8012d56:	2301      	movs	r3, #1
 8012d58:	e006      	b.n	8012d68 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	2204      	movs	r2, #4
 8012d62:	4013      	ands	r3, r2
 8012d64:	d1de      	bne.n	8012d24 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8012d66:	2300      	movs	r3, #0
}
 8012d68:	0018      	movs	r0, r3
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	b004      	add	sp, #16
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	0018      	movs	r0, r3
 8012d82:	f7ff f985 	bl	8012090 <LL_ADC_IsEnabled>
 8012d86:	1e03      	subs	r3, r0, #0
 8012d88:	d000      	beq.n	8012d8c <ADC_Enable+0x1c>
 8012d8a:	e069      	b.n	8012e60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	4a36      	ldr	r2, [pc, #216]	@ (8012e6c <ADC_Enable+0xfc>)
 8012d94:	4013      	ands	r3, r2
 8012d96:	d00d      	beq.n	8012db4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d9c:	2210      	movs	r2, #16
 8012d9e:	431a      	orrs	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012da8:	2201      	movs	r2, #1
 8012daa:	431a      	orrs	r2, r3
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8012db0:	2301      	movs	r3, #1
 8012db2:	e056      	b.n	8012e62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	0018      	movs	r0, r3
 8012dba:	f7ff f945 	bl	8012048 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8012dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8012e70 <ADC_Enable+0x100>)
 8012dc0:	0018      	movs	r0, r3
 8012dc2:	f7ff f813 	bl	8011dec <LL_ADC_GetCommonPathInternalCh>
 8012dc6:	0002      	movs	r2, r0
 8012dc8:	2380      	movs	r3, #128	@ 0x80
 8012dca:	041b      	lsls	r3, r3, #16
 8012dcc:	4013      	ands	r3, r2
 8012dce:	d00f      	beq.n	8012df0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012dd0:	4b28      	ldr	r3, [pc, #160]	@ (8012e74 <ADC_Enable+0x104>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4928      	ldr	r1, [pc, #160]	@ (8012e78 <ADC_Enable+0x108>)
 8012dd6:	0018      	movs	r0, r3
 8012dd8:	f7ed f99e 	bl	8000118 <__udivsi3>
 8012ddc:	0003      	movs	r3, r0
 8012dde:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8012de0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8012de2:	e002      	b.n	8012dea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	3b01      	subs	r3, #1
 8012de8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1f9      	bne.n	8012de4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	7e5b      	ldrb	r3, [r3, #25]
 8012df4:	2b01      	cmp	r3, #1
 8012df6:	d033      	beq.n	8012e60 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8012df8:	f7fe ff9c 	bl	8011d34 <HAL_GetTick>
 8012dfc:	0003      	movs	r3, r0
 8012dfe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012e00:	e027      	b.n	8012e52 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	0018      	movs	r0, r3
 8012e08:	f7ff f942 	bl	8012090 <LL_ADC_IsEnabled>
 8012e0c:	1e03      	subs	r3, r0, #0
 8012e0e:	d104      	bne.n	8012e1a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	0018      	movs	r0, r3
 8012e16:	f7ff f917 	bl	8012048 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8012e1a:	f7fe ff8b 	bl	8011d34 <HAL_GetTick>
 8012e1e:	0002      	movs	r2, r0
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	1ad3      	subs	r3, r2, r3
 8012e24:	2b02      	cmp	r3, #2
 8012e26:	d914      	bls.n	8012e52 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	4013      	ands	r3, r2
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d00d      	beq.n	8012e52 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e3a:	2210      	movs	r2, #16
 8012e3c:	431a      	orrs	r2, r3
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e46:	2201      	movs	r2, #1
 8012e48:	431a      	orrs	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e007      	b.n	8012e62 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2201      	movs	r2, #1
 8012e5a:	4013      	ands	r3, r2
 8012e5c:	2b01      	cmp	r3, #1
 8012e5e:	d1d0      	bne.n	8012e02 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012e60:	2300      	movs	r3, #0
}
 8012e62:	0018      	movs	r0, r3
 8012e64:	46bd      	mov	sp, r7
 8012e66:	b004      	add	sp, #16
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	46c0      	nop			@ (mov r8, r8)
 8012e6c:	80000017 	.word	0x80000017
 8012e70:	40012708 	.word	0x40012708
 8012e74:	2000025c 	.word	0x2000025c
 8012e78:	00030d40 	.word	0x00030d40

08012e7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	0018      	movs	r0, r3
 8012e8a:	f7ff f912 	bl	80120b2 <LL_ADC_IsDisableOngoing>
 8012e8e:	0003      	movs	r3, r0
 8012e90:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	0018      	movs	r0, r3
 8012e98:	f7ff f8fa 	bl	8012090 <LL_ADC_IsEnabled>
 8012e9c:	1e03      	subs	r3, r0, #0
 8012e9e:	d046      	beq.n	8012f2e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d143      	bne.n	8012f2e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	689b      	ldr	r3, [r3, #8]
 8012eac:	2205      	movs	r2, #5
 8012eae:	4013      	ands	r3, r2
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d10d      	bne.n	8012ed0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	0018      	movs	r0, r3
 8012eba:	f7ff f8d7 	bl	801206c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2203      	movs	r2, #3
 8012ec4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012ec6:	f7fe ff35 	bl	8011d34 <HAL_GetTick>
 8012eca:	0003      	movs	r3, r0
 8012ecc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012ece:	e028      	b.n	8012f22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ed4:	2210      	movs	r2, #16
 8012ed6:	431a      	orrs	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	431a      	orrs	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	e021      	b.n	8012f30 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8012eec:	f7fe ff22 	bl	8011d34 <HAL_GetTick>
 8012ef0:	0002      	movs	r2, r0
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	1ad3      	subs	r3, r2, r3
 8012ef6:	2b02      	cmp	r3, #2
 8012ef8:	d913      	bls.n	8012f22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	689b      	ldr	r3, [r3, #8]
 8012f00:	2201      	movs	r2, #1
 8012f02:	4013      	ands	r3, r2
 8012f04:	d00d      	beq.n	8012f22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f0a:	2210      	movs	r2, #16
 8012f0c:	431a      	orrs	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f16:	2201      	movs	r2, #1
 8012f18:	431a      	orrs	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e006      	b.n	8012f30 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	689b      	ldr	r3, [r3, #8]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	d1de      	bne.n	8012eec <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	0018      	movs	r0, r3
 8012f32:	46bd      	mov	sp, r7
 8012f34:	b004      	add	sp, #16
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <LL_ADC_GetCommonClock>:
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	23f0      	movs	r3, #240	@ 0xf0
 8012f46:	039b      	lsls	r3, r3, #14
 8012f48:	4013      	ands	r3, r2
}
 8012f4a:	0018      	movs	r0, r3
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	b002      	add	sp, #8
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <LL_ADC_GetClock>:
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b082      	sub	sp, #8
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	691b      	ldr	r3, [r3, #16]
 8012f5e:	0f9b      	lsrs	r3, r3, #30
 8012f60:	079b      	lsls	r3, r3, #30
}
 8012f62:	0018      	movs	r0, r3
 8012f64:	46bd      	mov	sp, r7
 8012f66:	b002      	add	sp, #8
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <LL_ADC_SetCalibrationFactor>:
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b082      	sub	sp, #8
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
 8012f72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	22b4      	movs	r2, #180	@ 0xb4
 8012f78:	589b      	ldr	r3, [r3, r2]
 8012f7a:	227f      	movs	r2, #127	@ 0x7f
 8012f7c:	4393      	bics	r3, r2
 8012f7e:	001a      	movs	r2, r3
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	431a      	orrs	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	21b4      	movs	r1, #180	@ 0xb4
 8012f88:	505a      	str	r2, [r3, r1]
}
 8012f8a:	46c0      	nop			@ (mov r8, r8)
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	b002      	add	sp, #8
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <LL_ADC_GetCalibrationFactor>:
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b082      	sub	sp, #8
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	22b4      	movs	r2, #180	@ 0xb4
 8012f9e:	589b      	ldr	r3, [r3, r2]
 8012fa0:	227f      	movs	r2, #127	@ 0x7f
 8012fa2:	4013      	ands	r3, r2
}
 8012fa4:	0018      	movs	r0, r3
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	b002      	add	sp, #8
 8012faa:	bd80      	pop	{r7, pc}

08012fac <LL_ADC_Enable>:
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	4a04      	ldr	r2, [pc, #16]	@ (8012fcc <LL_ADC_Enable+0x20>)
 8012fba:	4013      	ands	r3, r2
 8012fbc:	2201      	movs	r2, #1
 8012fbe:	431a      	orrs	r2, r3
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	609a      	str	r2, [r3, #8]
}
 8012fc4:	46c0      	nop			@ (mov r8, r8)
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	b002      	add	sp, #8
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	7fffffe8 	.word	0x7fffffe8

08012fd0 <LL_ADC_Disable>:
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	4a04      	ldr	r2, [pc, #16]	@ (8012ff0 <LL_ADC_Disable+0x20>)
 8012fde:	4013      	ands	r3, r2
 8012fe0:	2202      	movs	r2, #2
 8012fe2:	431a      	orrs	r2, r3
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	609a      	str	r2, [r3, #8]
}
 8012fe8:	46c0      	nop			@ (mov r8, r8)
 8012fea:	46bd      	mov	sp, r7
 8012fec:	b002      	add	sp, #8
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	7fffffe8 	.word	0x7fffffe8

08012ff4 <LL_ADC_IsEnabled>:
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	2201      	movs	r2, #1
 8013002:	4013      	ands	r3, r2
 8013004:	2b01      	cmp	r3, #1
 8013006:	d101      	bne.n	801300c <LL_ADC_IsEnabled+0x18>
 8013008:	2301      	movs	r3, #1
 801300a:	e000      	b.n	801300e <LL_ADC_IsEnabled+0x1a>
 801300c:	2300      	movs	r3, #0
}
 801300e:	0018      	movs	r0, r3
 8013010:	46bd      	mov	sp, r7
 8013012:	b002      	add	sp, #8
 8013014:	bd80      	pop	{r7, pc}
	...

08013018 <LL_ADC_StartCalibration>:
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	4a05      	ldr	r2, [pc, #20]	@ (801303c <LL_ADC_StartCalibration+0x24>)
 8013026:	4013      	ands	r3, r2
 8013028:	2280      	movs	r2, #128	@ 0x80
 801302a:	0612      	lsls	r2, r2, #24
 801302c:	431a      	orrs	r2, r3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	609a      	str	r2, [r3, #8]
}
 8013032:	46c0      	nop			@ (mov r8, r8)
 8013034:	46bd      	mov	sp, r7
 8013036:	b002      	add	sp, #8
 8013038:	bd80      	pop	{r7, pc}
 801303a:	46c0      	nop			@ (mov r8, r8)
 801303c:	7fffffe8 	.word	0x7fffffe8

08013040 <LL_ADC_IsCalibrationOnGoing>:
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	689b      	ldr	r3, [r3, #8]
 801304c:	0fdb      	lsrs	r3, r3, #31
 801304e:	07da      	lsls	r2, r3, #31
 8013050:	2380      	movs	r3, #128	@ 0x80
 8013052:	061b      	lsls	r3, r3, #24
 8013054:	429a      	cmp	r2, r3
 8013056:	d101      	bne.n	801305c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8013058:	2301      	movs	r3, #1
 801305a:	e000      	b.n	801305e <LL_ADC_IsCalibrationOnGoing+0x1e>
 801305c:	2300      	movs	r3, #0
}
 801305e:	0018      	movs	r0, r3
 8013060:	46bd      	mov	sp, r7
 8013062:	b002      	add	sp, #8
 8013064:	bd80      	pop	{r7, pc}
	...

08013068 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8013068:	b590      	push	{r4, r7, lr}
 801306a:	b08b      	sub	sp, #44	@ 0x2c
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8013070:	2300      	movs	r3, #0
 8013072:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8013074:	2300      	movs	r3, #0
 8013076:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2254      	movs	r2, #84	@ 0x54
 801307c:	5c9b      	ldrb	r3, [r3, r2]
 801307e:	2b01      	cmp	r3, #1
 8013080:	d101      	bne.n	8013086 <HAL_ADCEx_Calibration_Start+0x1e>
 8013082:	2302      	movs	r3, #2
 8013084:	e0de      	b.n	8013244 <HAL_ADCEx_Calibration_Start+0x1dc>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2254      	movs	r2, #84	@ 0x54
 801308a:	2101      	movs	r1, #1
 801308c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801308e:	231f      	movs	r3, #31
 8013090:	18fc      	adds	r4, r7, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	0018      	movs	r0, r3
 8013096:	f7ff fef1 	bl	8012e7c <ADC_Disable>
 801309a:	0003      	movs	r3, r0
 801309c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	0018      	movs	r0, r3
 80130a4:	f7ff ffa6 	bl	8012ff4 <LL_ADC_IsEnabled>
 80130a8:	1e03      	subs	r3, r0, #0
 80130aa:	d000      	beq.n	80130ae <HAL_ADCEx_Calibration_Start+0x46>
 80130ac:	e0bd      	b.n	801322a <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130b2:	4a66      	ldr	r2, [pc, #408]	@ (801324c <HAL_ADCEx_Calibration_Start+0x1e4>)
 80130b4:	4013      	ands	r3, r2
 80130b6:	2202      	movs	r2, #2
 80130b8:	431a      	orrs	r2, r3
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	4a62      	ldr	r2, [pc, #392]	@ (8013250 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80130c6:	4013      	ands	r3, r2
 80130c8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	68da      	ldr	r2, [r3, #12]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	495f      	ldr	r1, [pc, #380]	@ (8013254 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80130d6:	400a      	ands	r2, r1
 80130d8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80130da:	2300      	movs	r3, #0
 80130dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80130de:	e02e      	b.n	801313e <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	0018      	movs	r0, r3
 80130e6:	f7ff ff97 	bl	8013018 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80130ea:	e015      	b.n	8013118 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	3301      	adds	r3, #1
 80130f0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80130f2:	68fa      	ldr	r2, [r7, #12]
 80130f4:	23ae      	movs	r3, #174	@ 0xae
 80130f6:	029b      	lsls	r3, r3, #10
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d30d      	bcc.n	8013118 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013100:	2212      	movs	r2, #18
 8013102:	4393      	bics	r3, r2
 8013104:	2210      	movs	r2, #16
 8013106:	431a      	orrs	r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2254      	movs	r2, #84	@ 0x54
 8013110:	2100      	movs	r1, #0
 8013112:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	e095      	b.n	8013244 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	0018      	movs	r0, r3
 801311e:	f7ff ff8f 	bl	8013040 <LL_ADC_IsCalibrationOnGoing>
 8013122:	1e03      	subs	r3, r0, #0
 8013124:	d1e2      	bne.n	80130ec <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	0018      	movs	r0, r3
 801312c:	f7ff ff31 	bl	8012f92 <LL_ADC_GetCalibrationFactor>
 8013130:	0002      	movs	r2, r0
 8013132:	6a3b      	ldr	r3, [r7, #32]
 8013134:	189b      	adds	r3, r3, r2
 8013136:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8013138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801313a:	3301      	adds	r3, #1
 801313c:	627b      	str	r3, [r7, #36]	@ 0x24
 801313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013140:	2b07      	cmp	r3, #7
 8013142:	d9cd      	bls.n	80130e0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8013144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013146:	6a38      	ldr	r0, [r7, #32]
 8013148:	f7ec ffe6 	bl	8000118 <__udivsi3>
 801314c:	0003      	movs	r3, r0
 801314e:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	0018      	movs	r0, r3
 8013156:	f7ff ff29 	bl	8012fac <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	0018      	movs	r0, r3
 8013160:	f7ff fef7 	bl	8012f52 <LL_ADC_GetClock>
 8013164:	1e03      	subs	r3, r0, #0
 8013166:	d11b      	bne.n	80131a0 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013168:	4b3b      	ldr	r3, [pc, #236]	@ (8013258 <HAL_ADCEx_Calibration_Start+0x1f0>)
 801316a:	0018      	movs	r0, r3
 801316c:	f7ff fee4 	bl	8012f38 <LL_ADC_GetCommonClock>
 8013170:	0003      	movs	r3, r0
 8013172:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8013174:	697a      	ldr	r2, [r7, #20]
 8013176:	23e0      	movs	r3, #224	@ 0xe0
 8013178:	035b      	lsls	r3, r3, #13
 801317a:	429a      	cmp	r2, r3
 801317c:	d310      	bcc.n	80131a0 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	0c9b      	lsrs	r3, r3, #18
 8013182:	3b03      	subs	r3, #3
 8013184:	2201      	movs	r2, #1
 8013186:	409a      	lsls	r2, r3
 8013188:	0013      	movs	r3, r2
 801318a:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	085b      	lsrs	r3, r3, #1
 8013190:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8013192:	e002      	b.n	801319a <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	3b01      	subs	r3, #1
 8013198:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1f9      	bne.n	8013194 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6a3a      	ldr	r2, [r7, #32]
 80131a6:	0011      	movs	r1, r2
 80131a8:	0018      	movs	r0, r3
 80131aa:	f7ff fede 	bl	8012f6a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	0018      	movs	r0, r3
 80131b4:	f7ff ff0c 	bl	8012fd0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80131b8:	f7fe fdbc 	bl	8011d34 <HAL_GetTick>
 80131bc:	0003      	movs	r3, r0
 80131be:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80131c0:	e01b      	b.n	80131fa <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80131c2:	f7fe fdb7 	bl	8011d34 <HAL_GetTick>
 80131c6:	0002      	movs	r2, r0
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	2b02      	cmp	r3, #2
 80131ce:	d914      	bls.n	80131fa <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	0018      	movs	r0, r3
 80131d6:	f7ff ff0d 	bl	8012ff4 <LL_ADC_IsEnabled>
 80131da:	1e03      	subs	r3, r0, #0
 80131dc:	d00d      	beq.n	80131fa <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131e2:	2210      	movs	r2, #16
 80131e4:	431a      	orrs	r2, r3
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80131ee:	2201      	movs	r2, #1
 80131f0:	431a      	orrs	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80131f6:	2301      	movs	r3, #1
 80131f8:	e024      	b.n	8013244 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	0018      	movs	r0, r3
 8013200:	f7ff fef8 	bl	8012ff4 <LL_ADC_IsEnabled>
 8013204:	1e03      	subs	r3, r0, #0
 8013206:	d1dc      	bne.n	80131c2 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	68d9      	ldr	r1, [r3, #12]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	69ba      	ldr	r2, [r7, #24]
 8013214:	430a      	orrs	r2, r1
 8013216:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801321c:	2203      	movs	r2, #3
 801321e:	4393      	bics	r3, r2
 8013220:	2201      	movs	r2, #1
 8013222:	431a      	orrs	r2, r3
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	659a      	str	r2, [r3, #88]	@ 0x58
 8013228:	e005      	b.n	8013236 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801322e:	2210      	movs	r2, #16
 8013230:	431a      	orrs	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2254      	movs	r2, #84	@ 0x54
 801323a:	2100      	movs	r1, #0
 801323c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 801323e:	231f      	movs	r3, #31
 8013240:	18fb      	adds	r3, r7, r3
 8013242:	781b      	ldrb	r3, [r3, #0]
}
 8013244:	0018      	movs	r0, r3
 8013246:	46bd      	mov	sp, r7
 8013248:	b00b      	add	sp, #44	@ 0x2c
 801324a:	bd90      	pop	{r4, r7, pc}
 801324c:	fffffefd 	.word	0xfffffefd
 8013250:	00008003 	.word	0x00008003
 8013254:	ffff7ffc 	.word	0xffff7ffc
 8013258:	40012708 	.word	0x40012708

0801325c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	0002      	movs	r2, r0
 8013264:	1dfb      	adds	r3, r7, #7
 8013266:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013268:	1dfb      	adds	r3, r7, #7
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b7f      	cmp	r3, #127	@ 0x7f
 801326e:	d809      	bhi.n	8013284 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013270:	1dfb      	adds	r3, r7, #7
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	001a      	movs	r2, r3
 8013276:	231f      	movs	r3, #31
 8013278:	401a      	ands	r2, r3
 801327a:	4b04      	ldr	r3, [pc, #16]	@ (801328c <__NVIC_EnableIRQ+0x30>)
 801327c:	2101      	movs	r1, #1
 801327e:	4091      	lsls	r1, r2
 8013280:	000a      	movs	r2, r1
 8013282:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8013284:	46c0      	nop			@ (mov r8, r8)
 8013286:	46bd      	mov	sp, r7
 8013288:	b002      	add	sp, #8
 801328a:	bd80      	pop	{r7, pc}
 801328c:	e000e100 	.word	0xe000e100

08013290 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	0002      	movs	r2, r0
 8013298:	1dfb      	adds	r3, r7, #7
 801329a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801329c:	1dfb      	adds	r3, r7, #7
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80132a2:	d810      	bhi.n	80132c6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80132a4:	1dfb      	adds	r3, r7, #7
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	001a      	movs	r2, r3
 80132aa:	231f      	movs	r3, #31
 80132ac:	4013      	ands	r3, r2
 80132ae:	4908      	ldr	r1, [pc, #32]	@ (80132d0 <__NVIC_DisableIRQ+0x40>)
 80132b0:	2201      	movs	r2, #1
 80132b2:	409a      	lsls	r2, r3
 80132b4:	0013      	movs	r3, r2
 80132b6:	2280      	movs	r2, #128	@ 0x80
 80132b8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80132ba:	f3bf 8f4f 	dsb	sy
}
 80132be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80132c0:	f3bf 8f6f 	isb	sy
}
 80132c4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80132c6:	46c0      	nop			@ (mov r8, r8)
 80132c8:	46bd      	mov	sp, r7
 80132ca:	b002      	add	sp, #8
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	46c0      	nop			@ (mov r8, r8)
 80132d0:	e000e100 	.word	0xe000e100

080132d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80132d4:	b590      	push	{r4, r7, lr}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	0002      	movs	r2, r0
 80132dc:	6039      	str	r1, [r7, #0]
 80132de:	1dfb      	adds	r3, r7, #7
 80132e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80132e2:	1dfb      	adds	r3, r7, #7
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80132e8:	d828      	bhi.n	801333c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80132ea:	4a2f      	ldr	r2, [pc, #188]	@ (80133a8 <__NVIC_SetPriority+0xd4>)
 80132ec:	1dfb      	adds	r3, r7, #7
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	b25b      	sxtb	r3, r3
 80132f2:	089b      	lsrs	r3, r3, #2
 80132f4:	33c0      	adds	r3, #192	@ 0xc0
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	589b      	ldr	r3, [r3, r2]
 80132fa:	1dfa      	adds	r2, r7, #7
 80132fc:	7812      	ldrb	r2, [r2, #0]
 80132fe:	0011      	movs	r1, r2
 8013300:	2203      	movs	r2, #3
 8013302:	400a      	ands	r2, r1
 8013304:	00d2      	lsls	r2, r2, #3
 8013306:	21ff      	movs	r1, #255	@ 0xff
 8013308:	4091      	lsls	r1, r2
 801330a:	000a      	movs	r2, r1
 801330c:	43d2      	mvns	r2, r2
 801330e:	401a      	ands	r2, r3
 8013310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	019b      	lsls	r3, r3, #6
 8013316:	22ff      	movs	r2, #255	@ 0xff
 8013318:	401a      	ands	r2, r3
 801331a:	1dfb      	adds	r3, r7, #7
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	0018      	movs	r0, r3
 8013320:	2303      	movs	r3, #3
 8013322:	4003      	ands	r3, r0
 8013324:	00db      	lsls	r3, r3, #3
 8013326:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013328:	481f      	ldr	r0, [pc, #124]	@ (80133a8 <__NVIC_SetPriority+0xd4>)
 801332a:	1dfb      	adds	r3, r7, #7
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	b25b      	sxtb	r3, r3
 8013330:	089b      	lsrs	r3, r3, #2
 8013332:	430a      	orrs	r2, r1
 8013334:	33c0      	adds	r3, #192	@ 0xc0
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801333a:	e031      	b.n	80133a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801333c:	4a1b      	ldr	r2, [pc, #108]	@ (80133ac <__NVIC_SetPriority+0xd8>)
 801333e:	1dfb      	adds	r3, r7, #7
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	0019      	movs	r1, r3
 8013344:	230f      	movs	r3, #15
 8013346:	400b      	ands	r3, r1
 8013348:	3b08      	subs	r3, #8
 801334a:	089b      	lsrs	r3, r3, #2
 801334c:	3306      	adds	r3, #6
 801334e:	009b      	lsls	r3, r3, #2
 8013350:	18d3      	adds	r3, r2, r3
 8013352:	3304      	adds	r3, #4
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	1dfa      	adds	r2, r7, #7
 8013358:	7812      	ldrb	r2, [r2, #0]
 801335a:	0011      	movs	r1, r2
 801335c:	2203      	movs	r2, #3
 801335e:	400a      	ands	r2, r1
 8013360:	00d2      	lsls	r2, r2, #3
 8013362:	21ff      	movs	r1, #255	@ 0xff
 8013364:	4091      	lsls	r1, r2
 8013366:	000a      	movs	r2, r1
 8013368:	43d2      	mvns	r2, r2
 801336a:	401a      	ands	r2, r3
 801336c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	019b      	lsls	r3, r3, #6
 8013372:	22ff      	movs	r2, #255	@ 0xff
 8013374:	401a      	ands	r2, r3
 8013376:	1dfb      	adds	r3, r7, #7
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	0018      	movs	r0, r3
 801337c:	2303      	movs	r3, #3
 801337e:	4003      	ands	r3, r0
 8013380:	00db      	lsls	r3, r3, #3
 8013382:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013384:	4809      	ldr	r0, [pc, #36]	@ (80133ac <__NVIC_SetPriority+0xd8>)
 8013386:	1dfb      	adds	r3, r7, #7
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	001c      	movs	r4, r3
 801338c:	230f      	movs	r3, #15
 801338e:	4023      	ands	r3, r4
 8013390:	3b08      	subs	r3, #8
 8013392:	089b      	lsrs	r3, r3, #2
 8013394:	430a      	orrs	r2, r1
 8013396:	3306      	adds	r3, #6
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	18c3      	adds	r3, r0, r3
 801339c:	3304      	adds	r3, #4
 801339e:	601a      	str	r2, [r3, #0]
}
 80133a0:	46c0      	nop			@ (mov r8, r8)
 80133a2:	46bd      	mov	sp, r7
 80133a4:	b003      	add	sp, #12
 80133a6:	bd90      	pop	{r4, r7, pc}
 80133a8:	e000e100 	.word	0xe000e100
 80133ac:	e000ed00 	.word	0xe000ed00

080133b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	1e5a      	subs	r2, r3, #1
 80133bc:	2380      	movs	r3, #128	@ 0x80
 80133be:	045b      	lsls	r3, r3, #17
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d301      	bcc.n	80133c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80133c4:	2301      	movs	r3, #1
 80133c6:	e010      	b.n	80133ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80133c8:	4b0a      	ldr	r3, [pc, #40]	@ (80133f4 <SysTick_Config+0x44>)
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	3a01      	subs	r2, #1
 80133ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80133d0:	2301      	movs	r3, #1
 80133d2:	425b      	negs	r3, r3
 80133d4:	2103      	movs	r1, #3
 80133d6:	0018      	movs	r0, r3
 80133d8:	f7ff ff7c 	bl	80132d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80133dc:	4b05      	ldr	r3, [pc, #20]	@ (80133f4 <SysTick_Config+0x44>)
 80133de:	2200      	movs	r2, #0
 80133e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80133e2:	4b04      	ldr	r3, [pc, #16]	@ (80133f4 <SysTick_Config+0x44>)
 80133e4:	2207      	movs	r2, #7
 80133e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80133e8:	2300      	movs	r3, #0
}
 80133ea:	0018      	movs	r0, r3
 80133ec:	46bd      	mov	sp, r7
 80133ee:	b002      	add	sp, #8
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	46c0      	nop			@ (mov r8, r8)
 80133f4:	e000e010 	.word	0xe000e010

080133f8 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	60b9      	str	r1, [r7, #8]
 8013400:	607a      	str	r2, [r7, #4]
 8013402:	210f      	movs	r1, #15
 8013404:	187b      	adds	r3, r7, r1
 8013406:	1c02      	adds	r2, r0, #0
 8013408:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	187b      	adds	r3, r7, r1
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	b25b      	sxtb	r3, r3
 8013412:	0011      	movs	r1, r2
 8013414:	0018      	movs	r0, r3
 8013416:	f7ff ff5d 	bl	80132d4 <__NVIC_SetPriority>
}
 801341a:	46c0      	nop			@ (mov r8, r8)
 801341c:	46bd      	mov	sp, r7
 801341e:	b004      	add	sp, #16
 8013420:	bd80      	pop	{r7, pc}

08013422 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013422:	b580      	push	{r7, lr}
 8013424:	b082      	sub	sp, #8
 8013426:	af00      	add	r7, sp, #0
 8013428:	0002      	movs	r2, r0
 801342a:	1dfb      	adds	r3, r7, #7
 801342c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801342e:	1dfb      	adds	r3, r7, #7
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	b25b      	sxtb	r3, r3
 8013434:	0018      	movs	r0, r3
 8013436:	f7ff ff11 	bl	801325c <__NVIC_EnableIRQ>
}
 801343a:	46c0      	nop			@ (mov r8, r8)
 801343c:	46bd      	mov	sp, r7
 801343e:	b002      	add	sp, #8
 8013440:	bd80      	pop	{r7, pc}

08013442 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8013442:	b580      	push	{r7, lr}
 8013444:	b082      	sub	sp, #8
 8013446:	af00      	add	r7, sp, #0
 8013448:	0002      	movs	r2, r0
 801344a:	1dfb      	adds	r3, r7, #7
 801344c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801344e:	1dfb      	adds	r3, r7, #7
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	b25b      	sxtb	r3, r3
 8013454:	0018      	movs	r0, r3
 8013456:	f7ff ff1b 	bl	8013290 <__NVIC_DisableIRQ>
}
 801345a:	46c0      	nop			@ (mov r8, r8)
 801345c:	46bd      	mov	sp, r7
 801345e:	b002      	add	sp, #8
 8013460:	bd80      	pop	{r7, pc}

08013462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8013462:	b580      	push	{r7, lr}
 8013464:	b082      	sub	sp, #8
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	0018      	movs	r0, r3
 801346e:	f7ff ff9f 	bl	80133b0 <SysTick_Config>
 8013472:	0003      	movs	r3, r0
}
 8013474:	0018      	movs	r0, r3
 8013476:	46bd      	mov	sp, r7
 8013478:	b002      	add	sp, #8
 801347a:	bd80      	pop	{r7, pc}

0801347c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801348a:	2301      	movs	r3, #1
 801348c:	e091      	b.n	80135b2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	001a      	movs	r2, r3
 8013494:	4b49      	ldr	r3, [pc, #292]	@ (80135bc <HAL_DMA_Init+0x140>)
 8013496:	429a      	cmp	r2, r3
 8013498:	d810      	bhi.n	80134bc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4a48      	ldr	r2, [pc, #288]	@ (80135c0 <HAL_DMA_Init+0x144>)
 80134a0:	4694      	mov	ip, r2
 80134a2:	4463      	add	r3, ip
 80134a4:	2114      	movs	r1, #20
 80134a6:	0018      	movs	r0, r3
 80134a8:	f7ec fe36 	bl	8000118 <__udivsi3>
 80134ac:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80134ae:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4a43      	ldr	r2, [pc, #268]	@ (80135c4 <HAL_DMA_Init+0x148>)
 80134b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80134ba:	e00f      	b.n	80134dc <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a41      	ldr	r2, [pc, #260]	@ (80135c8 <HAL_DMA_Init+0x14c>)
 80134c2:	4694      	mov	ip, r2
 80134c4:	4463      	add	r3, ip
 80134c6:	2114      	movs	r1, #20
 80134c8:	0018      	movs	r0, r3
 80134ca:	f7ec fe25 	bl	8000118 <__udivsi3>
 80134ce:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80134d0:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	4a3c      	ldr	r2, [pc, #240]	@ (80135cc <HAL_DMA_Init+0x150>)
 80134da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2225      	movs	r2, #37	@ 0x25
 80134e0:	2102      	movs	r1, #2
 80134e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	4938      	ldr	r1, [pc, #224]	@ (80135d0 <HAL_DMA_Init+0x154>)
 80134f0:	400a      	ands	r2, r1
 80134f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6819      	ldr	r1, [r3, #0]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	689a      	ldr	r2, [r3, #8]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	431a      	orrs	r2, r3
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	691b      	ldr	r3, [r3, #16]
 8013508:	431a      	orrs	r2, r3
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	695b      	ldr	r3, [r3, #20]
 801350e:	431a      	orrs	r2, r3
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	431a      	orrs	r2, r3
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	69db      	ldr	r3, [r3, #28]
 801351a:	431a      	orrs	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a1b      	ldr	r3, [r3, #32]
 8013520:	431a      	orrs	r2, r3
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	430a      	orrs	r2, r1
 8013528:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	0018      	movs	r0, r3
 801352e:	f000 fb4d 	bl	8013bcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	689a      	ldr	r2, [r3, #8]
 8013536:	2380      	movs	r3, #128	@ 0x80
 8013538:	01db      	lsls	r3, r3, #7
 801353a:	429a      	cmp	r2, r3
 801353c:	d102      	bne.n	8013544 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801354c:	21ff      	movs	r1, #255	@ 0xff
 801354e:	400a      	ands	r2, r1
 8013550:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801355a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d011      	beq.n	8013588 <HAL_DMA_Init+0x10c>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	2b04      	cmp	r3, #4
 801356a:	d80d      	bhi.n	8013588 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	0018      	movs	r0, r3
 8013570:	f000 fb76 	bl	8013c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013578:	2200      	movs	r2, #0
 801357a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013580:	687a      	ldr	r2, [r7, #4]
 8013582:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013584:	605a      	str	r2, [r3, #4]
 8013586:	e008      	b.n	801359a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2200      	movs	r2, #0
 801358c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2200      	movs	r2, #0
 8013592:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2200      	movs	r2, #0
 8013598:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2225      	movs	r2, #37	@ 0x25
 80135a4:	2101      	movs	r1, #1
 80135a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2224      	movs	r2, #36	@ 0x24
 80135ac:	2100      	movs	r1, #0
 80135ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80135b0:	2300      	movs	r3, #0
}
 80135b2:	0018      	movs	r0, r3
 80135b4:	46bd      	mov	sp, r7
 80135b6:	b002      	add	sp, #8
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	46c0      	nop			@ (mov r8, r8)
 80135bc:	40020407 	.word	0x40020407
 80135c0:	bffdfff8 	.word	0xbffdfff8
 80135c4:	40020000 	.word	0x40020000
 80135c8:	bffdfbf8 	.word	0xbffdfbf8
 80135cc:	40020400 	.word	0x40020400
 80135d0:	ffff800f 	.word	0xffff800f

080135d4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b082      	sub	sp, #8
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d101      	bne.n	80135e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80135e2:	2301      	movs	r3, #1
 80135e4:	e07f      	b.n	80136e6 <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	2101      	movs	r1, #1
 80135f2:	438a      	bics	r2, r1
 80135f4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	001a      	movs	r2, r3
 80135fc:	4b3c      	ldr	r3, [pc, #240]	@ (80136f0 <HAL_DMA_DeInit+0x11c>)
 80135fe:	429a      	cmp	r2, r3
 8013600:	d810      	bhi.n	8013624 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4a3b      	ldr	r2, [pc, #236]	@ (80136f4 <HAL_DMA_DeInit+0x120>)
 8013608:	4694      	mov	ip, r2
 801360a:	4463      	add	r3, ip
 801360c:	2114      	movs	r1, #20
 801360e:	0018      	movs	r0, r3
 8013610:	f7ec fd82 	bl	8000118 <__udivsi3>
 8013614:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8013616:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	4a36      	ldr	r2, [pc, #216]	@ (80136f8 <HAL_DMA_DeInit+0x124>)
 8013620:	641a      	str	r2, [r3, #64]	@ 0x40
 8013622:	e00f      	b.n	8013644 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4a34      	ldr	r2, [pc, #208]	@ (80136fc <HAL_DMA_DeInit+0x128>)
 801362a:	4694      	mov	ip, r2
 801362c:	4463      	add	r3, ip
 801362e:	2114      	movs	r1, #20
 8013630:	0018      	movs	r0, r3
 8013632:	f7ec fd71 	bl	8000118 <__udivsi3>
 8013636:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8013638:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4a2f      	ldr	r2, [pc, #188]	@ (8013700 <HAL_DMA_DeInit+0x12c>)
 8013642:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	2200      	movs	r2, #0
 801364a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013650:	221c      	movs	r2, #28
 8013652:	401a      	ands	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013658:	2101      	movs	r1, #1
 801365a:	4091      	lsls	r1, r2
 801365c:	000a      	movs	r2, r1
 801365e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	0018      	movs	r0, r3
 8013664:	f000 fab2 	bl	8013bcc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801366c:	2200      	movs	r2, #0
 801366e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013678:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	685b      	ldr	r3, [r3, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d010      	beq.n	80136a4 <HAL_DMA_DeInit+0xd0>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	2b04      	cmp	r3, #4
 8013688:	d80c      	bhi.n	80136a4 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	0018      	movs	r0, r3
 801368e:	f000 fae7 	bl	8013c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80136a2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2200      	movs	r2, #0
 80136a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2200      	movs	r2, #0
 80136ae:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2200      	movs	r2, #0
 80136b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2200      	movs	r2, #0
 80136c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2200      	movs	r2, #0
 80136cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2200      	movs	r2, #0
 80136d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2225      	movs	r2, #37	@ 0x25
 80136d8:	2100      	movs	r1, #0
 80136da:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2224      	movs	r2, #36	@ 0x24
 80136e0:	2100      	movs	r1, #0
 80136e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80136e4:	2300      	movs	r3, #0
}
 80136e6:	0018      	movs	r0, r3
 80136e8:	46bd      	mov	sp, r7
 80136ea:	b002      	add	sp, #8
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	46c0      	nop			@ (mov r8, r8)
 80136f0:	40020407 	.word	0x40020407
 80136f4:	bffdfff8 	.word	0xbffdfff8
 80136f8:	40020000 	.word	0x40020000
 80136fc:	bffdfbf8 	.word	0xbffdfbf8
 8013700:	40020400 	.word	0x40020400

08013704 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	607a      	str	r2, [r7, #4]
 8013710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013712:	2317      	movs	r3, #23
 8013714:	18fb      	adds	r3, r7, r3
 8013716:	2200      	movs	r2, #0
 8013718:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	2224      	movs	r2, #36	@ 0x24
 801371e:	5c9b      	ldrb	r3, [r3, r2]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d101      	bne.n	8013728 <HAL_DMA_Start_IT+0x24>
 8013724:	2302      	movs	r3, #2
 8013726:	e06f      	b.n	8013808 <HAL_DMA_Start_IT+0x104>
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	2224      	movs	r2, #36	@ 0x24
 801372c:	2101      	movs	r1, #1
 801372e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2225      	movs	r2, #37	@ 0x25
 8013734:	5c9b      	ldrb	r3, [r3, r2]
 8013736:	b2db      	uxtb	r3, r3
 8013738:	2b01      	cmp	r3, #1
 801373a:	d157      	bne.n	80137ec <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2225      	movs	r2, #37	@ 0x25
 8013740:	2102      	movs	r1, #2
 8013742:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2200      	movs	r2, #0
 8013748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	2101      	movs	r1, #1
 8013756:	438a      	bics	r2, r1
 8013758:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	687a      	ldr	r2, [r7, #4]
 801375e:	68b9      	ldr	r1, [r7, #8]
 8013760:	68f8      	ldr	r0, [r7, #12]
 8013762:	f000 f9f7 	bl	8013b54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801376a:	2b00      	cmp	r3, #0
 801376c:	d008      	beq.n	8013780 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	210e      	movs	r1, #14
 801377a:	430a      	orrs	r2, r1
 801377c:	601a      	str	r2, [r3, #0]
 801377e:	e00f      	b.n	80137a0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2104      	movs	r1, #4
 801378c:	438a      	bics	r2, r1
 801378e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	210a      	movs	r1, #10
 801379c:	430a      	orrs	r2, r1
 801379e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	2380      	movs	r3, #128	@ 0x80
 80137a8:	025b      	lsls	r3, r3, #9
 80137aa:	4013      	ands	r3, r2
 80137ac:	d008      	beq.n	80137c0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137b2:	681a      	ldr	r2, [r3, #0]
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137b8:	2180      	movs	r1, #128	@ 0x80
 80137ba:	0049      	lsls	r1, r1, #1
 80137bc:	430a      	orrs	r2, r1
 80137be:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d008      	beq.n	80137da <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137d2:	2180      	movs	r1, #128	@ 0x80
 80137d4:	0049      	lsls	r1, r1, #1
 80137d6:	430a      	orrs	r2, r1
 80137d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2101      	movs	r1, #1
 80137e6:	430a      	orrs	r2, r1
 80137e8:	601a      	str	r2, [r3, #0]
 80137ea:	e00a      	b.n	8013802 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2280      	movs	r2, #128	@ 0x80
 80137f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2224      	movs	r2, #36	@ 0x24
 80137f6:	2100      	movs	r1, #0
 80137f8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80137fa:	2317      	movs	r3, #23
 80137fc:	18fb      	adds	r3, r7, r3
 80137fe:	2201      	movs	r2, #1
 8013800:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013802:	2317      	movs	r3, #23
 8013804:	18fb      	adds	r3, r7, r3
 8013806:	781b      	ldrb	r3, [r3, #0]
}
 8013808:	0018      	movs	r0, r3
 801380a:	46bd      	mov	sp, r7
 801380c:	b006      	add	sp, #24
 801380e:	bd80      	pop	{r7, pc}

08013810 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 801381e:	2301      	movs	r3, #1
 8013820:	e04f      	b.n	80138c2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2225      	movs	r2, #37	@ 0x25
 8013826:	5c9b      	ldrb	r3, [r3, r2]
 8013828:	b2db      	uxtb	r3, r3
 801382a:	2b02      	cmp	r3, #2
 801382c:	d008      	beq.n	8013840 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2204      	movs	r2, #4
 8013832:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2224      	movs	r2, #36	@ 0x24
 8013838:	2100      	movs	r1, #0
 801383a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801383c:	2301      	movs	r3, #1
 801383e:	e040      	b.n	80138c2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	210e      	movs	r1, #14
 801384c:	438a      	bics	r2, r1
 801384e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801385a:	491c      	ldr	r1, [pc, #112]	@ (80138cc <HAL_DMA_Abort+0xbc>)
 801385c:	400a      	ands	r2, r1
 801385e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	681a      	ldr	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2101      	movs	r1, #1
 801386c:	438a      	bics	r2, r1
 801386e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013874:	221c      	movs	r2, #28
 8013876:	401a      	ands	r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801387c:	2101      	movs	r1, #1
 801387e:	4091      	lsls	r1, r2
 8013880:	000a      	movs	r2, r1
 8013882:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801388c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00c      	beq.n	80138b0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138a0:	490a      	ldr	r1, [pc, #40]	@ (80138cc <HAL_DMA_Abort+0xbc>)
 80138a2:	400a      	ands	r2, r1
 80138a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80138ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2225      	movs	r2, #37	@ 0x25
 80138b4:	2101      	movs	r1, #1
 80138b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2224      	movs	r2, #36	@ 0x24
 80138bc:	2100      	movs	r1, #0
 80138be:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80138c0:	2300      	movs	r3, #0
}
 80138c2:	0018      	movs	r0, r3
 80138c4:	46bd      	mov	sp, r7
 80138c6:	b002      	add	sp, #8
 80138c8:	bd80      	pop	{r7, pc}
 80138ca:	46c0      	nop			@ (mov r8, r8)
 80138cc:	fffffeff 	.word	0xfffffeff

080138d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80138d8:	210f      	movs	r1, #15
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	2200      	movs	r2, #0
 80138de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2225      	movs	r2, #37	@ 0x25
 80138e4:	5c9b      	ldrb	r3, [r3, r2]
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	2b02      	cmp	r3, #2
 80138ea:	d006      	beq.n	80138fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2204      	movs	r2, #4
 80138f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80138f2:	187b      	adds	r3, r7, r1
 80138f4:	2201      	movs	r2, #1
 80138f6:	701a      	strb	r2, [r3, #0]
 80138f8:	e048      	b.n	801398c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	210e      	movs	r1, #14
 8013906:	438a      	bics	r2, r1
 8013908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2101      	movs	r1, #1
 8013916:	438a      	bics	r2, r1
 8013918:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013924:	491d      	ldr	r1, [pc, #116]	@ (801399c <HAL_DMA_Abort_IT+0xcc>)
 8013926:	400a      	ands	r2, r1
 8013928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801392e:	221c      	movs	r2, #28
 8013930:	401a      	ands	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013936:	2101      	movs	r1, #1
 8013938:	4091      	lsls	r1, r2
 801393a:	000a      	movs	r2, r1
 801393c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013946:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00c      	beq.n	801396a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801395a:	4910      	ldr	r1, [pc, #64]	@ (801399c <HAL_DMA_Abort_IT+0xcc>)
 801395c:	400a      	ands	r2, r1
 801395e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013968:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2225      	movs	r2, #37	@ 0x25
 801396e:	2101      	movs	r1, #1
 8013970:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2224      	movs	r2, #36	@ 0x24
 8013976:	2100      	movs	r1, #0
 8013978:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801397e:	2b00      	cmp	r3, #0
 8013980:	d004      	beq.n	801398c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	0010      	movs	r0, r2
 801398a:	4798      	blx	r3
    }
  }
  return status;
 801398c:	230f      	movs	r3, #15
 801398e:	18fb      	adds	r3, r7, r3
 8013990:	781b      	ldrb	r3, [r3, #0]
}
 8013992:	0018      	movs	r0, r3
 8013994:	46bd      	mov	sp, r7
 8013996:	b004      	add	sp, #16
 8013998:	bd80      	pop	{r7, pc}
 801399a:	46c0      	nop			@ (mov r8, r8)
 801399c:	fffffeff 	.word	0xfffffeff

080139a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139bc:	221c      	movs	r2, #28
 80139be:	4013      	ands	r3, r2
 80139c0:	2204      	movs	r2, #4
 80139c2:	409a      	lsls	r2, r3
 80139c4:	0013      	movs	r3, r2
 80139c6:	68fa      	ldr	r2, [r7, #12]
 80139c8:	4013      	ands	r3, r2
 80139ca:	d026      	beq.n	8013a1a <HAL_DMA_IRQHandler+0x7a>
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	2204      	movs	r2, #4
 80139d0:	4013      	ands	r3, r2
 80139d2:	d022      	beq.n	8013a1a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2220      	movs	r2, #32
 80139dc:	4013      	ands	r3, r2
 80139de:	d107      	bne.n	80139f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	2104      	movs	r1, #4
 80139ec:	438a      	bics	r2, r1
 80139ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139f4:	221c      	movs	r2, #28
 80139f6:	401a      	ands	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139fc:	2104      	movs	r1, #4
 80139fe:	4091      	lsls	r1, r2
 8013a00:	000a      	movs	r2, r1
 8013a02:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d100      	bne.n	8013a0e <HAL_DMA_IRQHandler+0x6e>
 8013a0c:	e080      	b.n	8013b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	0010      	movs	r0, r2
 8013a16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8013a18:	e07a      	b.n	8013b10 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a1e:	221c      	movs	r2, #28
 8013a20:	4013      	ands	r3, r2
 8013a22:	2202      	movs	r2, #2
 8013a24:	409a      	lsls	r2, r3
 8013a26:	0013      	movs	r3, r2
 8013a28:	68fa      	ldr	r2, [r7, #12]
 8013a2a:	4013      	ands	r3, r2
 8013a2c:	d03c      	beq.n	8013aa8 <HAL_DMA_IRQHandler+0x108>
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	2202      	movs	r2, #2
 8013a32:	4013      	ands	r3, r2
 8013a34:	d038      	beq.n	8013aa8 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	2220      	movs	r2, #32
 8013a3e:	4013      	ands	r3, r2
 8013a40:	d10b      	bne.n	8013a5a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	210a      	movs	r1, #10
 8013a4e:	438a      	bics	r2, r1
 8013a50:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2225      	movs	r2, #37	@ 0x25
 8013a56:	2101      	movs	r1, #1
 8013a58:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	001a      	movs	r2, r3
 8013a60:	4b2e      	ldr	r3, [pc, #184]	@ (8013b1c <HAL_DMA_IRQHandler+0x17c>)
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d909      	bls.n	8013a7a <HAL_DMA_IRQHandler+0xda>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a6a:	221c      	movs	r2, #28
 8013a6c:	401a      	ands	r2, r3
 8013a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8013b20 <HAL_DMA_IRQHandler+0x180>)
 8013a70:	2102      	movs	r1, #2
 8013a72:	4091      	lsls	r1, r2
 8013a74:	000a      	movs	r2, r1
 8013a76:	605a      	str	r2, [r3, #4]
 8013a78:	e008      	b.n	8013a8c <HAL_DMA_IRQHandler+0xec>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a7e:	221c      	movs	r2, #28
 8013a80:	401a      	ands	r2, r3
 8013a82:	4b28      	ldr	r3, [pc, #160]	@ (8013b24 <HAL_DMA_IRQHandler+0x184>)
 8013a84:	2102      	movs	r1, #2
 8013a86:	4091      	lsls	r1, r2
 8013a88:	000a      	movs	r2, r1
 8013a8a:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2224      	movs	r2, #36	@ 0x24
 8013a90:	2100      	movs	r1, #0
 8013a92:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d039      	beq.n	8013b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	0010      	movs	r0, r2
 8013aa4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8013aa6:	e033      	b.n	8013b10 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013aac:	221c      	movs	r2, #28
 8013aae:	4013      	ands	r3, r2
 8013ab0:	2208      	movs	r2, #8
 8013ab2:	409a      	lsls	r2, r3
 8013ab4:	0013      	movs	r3, r2
 8013ab6:	68fa      	ldr	r2, [r7, #12]
 8013ab8:	4013      	ands	r3, r2
 8013aba:	d02a      	beq.n	8013b12 <HAL_DMA_IRQHandler+0x172>
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	2208      	movs	r2, #8
 8013ac0:	4013      	ands	r3, r2
 8013ac2:	d026      	beq.n	8013b12 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	210e      	movs	r1, #14
 8013ad0:	438a      	bics	r2, r1
 8013ad2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ad8:	221c      	movs	r2, #28
 8013ada:	401a      	ands	r2, r3
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ae0:	2101      	movs	r1, #1
 8013ae2:	4091      	lsls	r1, r2
 8013ae4:	000a      	movs	r2, r1
 8013ae6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2201      	movs	r2, #1
 8013aec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2225      	movs	r2, #37	@ 0x25
 8013af2:	2101      	movs	r1, #1
 8013af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2224      	movs	r2, #36	@ 0x24
 8013afa:	2100      	movs	r1, #0
 8013afc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d005      	beq.n	8013b12 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	0010      	movs	r0, r2
 8013b0e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8013b10:	46c0      	nop			@ (mov r8, r8)
 8013b12:	46c0      	nop			@ (mov r8, r8)
}
 8013b14:	46bd      	mov	sp, r7
 8013b16:	b004      	add	sp, #16
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	46c0      	nop			@ (mov r8, r8)
 8013b1c:	40020080 	.word	0x40020080
 8013b20:	40020400 	.word	0x40020400
 8013b24:	40020000 	.word	0x40020000

08013b28 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2225      	movs	r2, #37	@ 0x25
 8013b34:	5c9b      	ldrb	r3, [r3, r2]
 8013b36:	b2db      	uxtb	r3, r3
}
 8013b38:	0018      	movs	r0, r3
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	b002      	add	sp, #8
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8013b4c:	0018      	movs	r0, r3
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	b002      	add	sp, #8
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
 8013b60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013b6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d004      	beq.n	8013b7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013b7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b82:	221c      	movs	r2, #28
 8013b84:	401a      	ands	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	4091      	lsls	r1, r2
 8013b8e:	000a      	movs	r2, r1
 8013b90:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	683a      	ldr	r2, [r7, #0]
 8013b98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	2b10      	cmp	r3, #16
 8013ba0:	d108      	bne.n	8013bb4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	68ba      	ldr	r2, [r7, #8]
 8013bb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8013bb2:	e007      	b.n	8013bc4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	68ba      	ldr	r2, [r7, #8]
 8013bba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	60da      	str	r2, [r3, #12]
}
 8013bc4:	46c0      	nop			@ (mov r8, r8)
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	b004      	add	sp, #16
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	001a      	movs	r2, r3
 8013bda:	4b1d      	ldr	r3, [pc, #116]	@ (8013c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d814      	bhi.n	8013c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013be4:	089b      	lsrs	r3, r3, #2
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	4a1a      	ldr	r2, [pc, #104]	@ (8013c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8013bea:	189a      	adds	r2, r3, r2
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	001a      	movs	r2, r3
 8013bf6:	23ff      	movs	r3, #255	@ 0xff
 8013bf8:	4013      	ands	r3, r2
 8013bfa:	3b08      	subs	r3, #8
 8013bfc:	2114      	movs	r1, #20
 8013bfe:	0018      	movs	r0, r3
 8013c00:	f7ec fa8a 	bl	8000118 <__udivsi3>
 8013c04:	0003      	movs	r3, r0
 8013c06:	60fb      	str	r3, [r7, #12]
 8013c08:	e014      	b.n	8013c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c0e:	089b      	lsrs	r3, r3, #2
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4a11      	ldr	r2, [pc, #68]	@ (8013c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8013c14:	189a      	adds	r2, r3, r2
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	001a      	movs	r2, r3
 8013c20:	23ff      	movs	r3, #255	@ 0xff
 8013c22:	4013      	ands	r3, r2
 8013c24:	3b08      	subs	r3, #8
 8013c26:	2114      	movs	r1, #20
 8013c28:	0018      	movs	r0, r3
 8013c2a:	f7ec fa75 	bl	8000118 <__udivsi3>
 8013c2e:	0003      	movs	r3, r0
 8013c30:	3307      	adds	r3, #7
 8013c32:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4a09      	ldr	r2, [pc, #36]	@ (8013c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8013c38:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	221f      	movs	r2, #31
 8013c3e:	4013      	ands	r3, r2
 8013c40:	2201      	movs	r2, #1
 8013c42:	409a      	lsls	r2, r3
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8013c48:	46c0      	nop			@ (mov r8, r8)
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	b004      	add	sp, #16
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	40020407 	.word	0x40020407
 8013c54:	40020800 	.word	0x40020800
 8013c58:	4002081c 	.word	0x4002081c
 8013c5c:	40020880 	.word	0x40020880

08013c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b084      	sub	sp, #16
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	22ff      	movs	r2, #255	@ 0xff
 8013c6e:	4013      	ands	r3, r2
 8013c70:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	4a0a      	ldr	r2, [pc, #40]	@ (8013ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8013c76:	4694      	mov	ip, r2
 8013c78:	4463      	add	r3, ip
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	001a      	movs	r2, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	4a07      	ldr	r2, [pc, #28]	@ (8013ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013c86:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	3b01      	subs	r3, #1
 8013c8c:	2203      	movs	r2, #3
 8013c8e:	4013      	ands	r3, r2
 8013c90:	2201      	movs	r2, #1
 8013c92:	409a      	lsls	r2, r3
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8013c98:	46c0      	nop			@ (mov r8, r8)
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	b004      	add	sp, #16
 8013c9e:	bd80      	pop	{r7, pc}
 8013ca0:	1000823f 	.word	0x1000823f
 8013ca4:	40020940 	.word	0x40020940

08013ca8 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013ca8:	b5b0      	push	{r4, r5, r7, lr}
 8013caa:	b086      	sub	sp, #24
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	603a      	str	r2, [r7, #0]
 8013cb4:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013cb6:	4b21      	ldr	r3, [pc, #132]	@ (8013d3c <HAL_FLASH_Program+0x94>)
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d101      	bne.n	8013cc2 <HAL_FLASH_Program+0x1a>
 8013cbe:	2302      	movs	r3, #2
 8013cc0:	e038      	b.n	8013d34 <HAL_FLASH_Program+0x8c>
 8013cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8013d3c <HAL_FLASH_Program+0x94>)
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8013d3c <HAL_FLASH_Program+0x94>)
 8013cca:	2200      	movs	r2, #0
 8013ccc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013cce:	2517      	movs	r5, #23
 8013cd0:	197c      	adds	r4, r7, r5
 8013cd2:	23fa      	movs	r3, #250	@ 0xfa
 8013cd4:	009b      	lsls	r3, r3, #2
 8013cd6:	0018      	movs	r0, r3
 8013cd8:	f000 f874 	bl	8013dc4 <FLASH_WaitForLastOperation>
 8013cdc:	0003      	movs	r3, r0
 8013cde:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013ce0:	197b      	adds	r3, r7, r5
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d11f      	bne.n	8013d28 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d106      	bne.n	8013cfc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8013cee:	683a      	ldr	r2, [r7, #0]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	68b9      	ldr	r1, [r7, #8]
 8013cf4:	0008      	movs	r0, r1
 8013cf6:	f000 f8b3 	bl	8013e60 <FLASH_Program_DoubleWord>
 8013cfa:	e005      	b.n	8013d08 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	0011      	movs	r1, r2
 8013d02:	0018      	movs	r0, r3
 8013d04:	f008 f9f8 	bl	801c0f8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013d08:	2317      	movs	r3, #23
 8013d0a:	18fc      	adds	r4, r7, r3
 8013d0c:	23fa      	movs	r3, #250	@ 0xfa
 8013d0e:	009b      	lsls	r3, r3, #2
 8013d10:	0018      	movs	r0, r3
 8013d12:	f000 f857 	bl	8013dc4 <FLASH_WaitForLastOperation>
 8013d16:	0003      	movs	r3, r0
 8013d18:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8013d1a:	4b09      	ldr	r3, [pc, #36]	@ (8013d40 <HAL_FLASH_Program+0x98>)
 8013d1c:	695a      	ldr	r2, [r3, #20]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	43d9      	mvns	r1, r3
 8013d22:	4b07      	ldr	r3, [pc, #28]	@ (8013d40 <HAL_FLASH_Program+0x98>)
 8013d24:	400a      	ands	r2, r1
 8013d26:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013d28:	4b04      	ldr	r3, [pc, #16]	@ (8013d3c <HAL_FLASH_Program+0x94>)
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8013d2e:	2317      	movs	r3, #23
 8013d30:	18fb      	adds	r3, r7, r3
 8013d32:	781b      	ldrb	r3, [r3, #0]
}
 8013d34:	0018      	movs	r0, r3
 8013d36:	46bd      	mov	sp, r7
 8013d38:	b006      	add	sp, #24
 8013d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8013d3c:	20001220 	.word	0x20001220
 8013d40:	40022000 	.word	0x40022000

08013d44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013d4a:	1dfb      	adds	r3, r7, #7
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8013d50:	4b0b      	ldr	r3, [pc, #44]	@ (8013d80 <HAL_FLASH_Unlock+0x3c>)
 8013d52:	695b      	ldr	r3, [r3, #20]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	da0c      	bge.n	8013d72 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013d58:	4b09      	ldr	r3, [pc, #36]	@ (8013d80 <HAL_FLASH_Unlock+0x3c>)
 8013d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8013d84 <HAL_FLASH_Unlock+0x40>)
 8013d5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013d5e:	4b08      	ldr	r3, [pc, #32]	@ (8013d80 <HAL_FLASH_Unlock+0x3c>)
 8013d60:	4a09      	ldr	r2, [pc, #36]	@ (8013d88 <HAL_FLASH_Unlock+0x44>)
 8013d62:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8013d64:	4b06      	ldr	r3, [pc, #24]	@ (8013d80 <HAL_FLASH_Unlock+0x3c>)
 8013d66:	695b      	ldr	r3, [r3, #20]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	da02      	bge.n	8013d72 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8013d6c:	1dfb      	adds	r3, r7, #7
 8013d6e:	2201      	movs	r2, #1
 8013d70:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8013d72:	1dfb      	adds	r3, r7, #7
 8013d74:	781b      	ldrb	r3, [r3, #0]
}
 8013d76:	0018      	movs	r0, r3
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	b002      	add	sp, #8
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	46c0      	nop			@ (mov r8, r8)
 8013d80:	40022000 	.word	0x40022000
 8013d84:	45670123 	.word	0x45670123
 8013d88:	cdef89ab 	.word	0xcdef89ab

08013d8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8013d92:	1dfb      	adds	r3, r7, #7
 8013d94:	2201      	movs	r2, #1
 8013d96:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8013d98:	4b09      	ldr	r3, [pc, #36]	@ (8013dc0 <HAL_FLASH_Lock+0x34>)
 8013d9a:	695a      	ldr	r2, [r3, #20]
 8013d9c:	4b08      	ldr	r3, [pc, #32]	@ (8013dc0 <HAL_FLASH_Lock+0x34>)
 8013d9e:	2180      	movs	r1, #128	@ 0x80
 8013da0:	0609      	lsls	r1, r1, #24
 8013da2:	430a      	orrs	r2, r1
 8013da4:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8013da6:	4b06      	ldr	r3, [pc, #24]	@ (8013dc0 <HAL_FLASH_Lock+0x34>)
 8013da8:	695b      	ldr	r3, [r3, #20]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	da02      	bge.n	8013db4 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8013dae:	1dfb      	adds	r3, r7, #7
 8013db0:	2200      	movs	r2, #0
 8013db2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013db4:	1dfb      	adds	r3, r7, #7
 8013db6:	781b      	ldrb	r3, [r3, #0]
}
 8013db8:	0018      	movs	r0, r3
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	b002      	add	sp, #8
 8013dbe:	bd80      	pop	{r7, pc}
 8013dc0:	40022000 	.word	0x40022000

08013dc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8013dcc:	f7fd ffb2 	bl	8011d34 <HAL_GetTick>
 8013dd0:	0002      	movs	r2, r0
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	189b      	adds	r3, r3, r2
 8013dd6:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8013dd8:	2380      	movs	r3, #128	@ 0x80
 8013dda:	025b      	lsls	r3, r3, #9
 8013ddc:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 8013dde:	e007      	b.n	8013df0 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8013de0:	f7fd ffa8 	bl	8011d34 <HAL_GetTick>
 8013de4:	0002      	movs	r2, r0
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d801      	bhi.n	8013df0 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8013dec:	2303      	movs	r3, #3
 8013dee:	e02a      	b.n	8013e46 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8013df0:	4b17      	ldr	r3, [pc, #92]	@ (8013e50 <FLASH_WaitForLastOperation+0x8c>)
 8013df2:	691b      	ldr	r3, [r3, #16]
 8013df4:	68ba      	ldr	r2, [r7, #8]
 8013df6:	4013      	ands	r3, r2
 8013df8:	d1f2      	bne.n	8013de0 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8013dfa:	4b15      	ldr	r3, [pc, #84]	@ (8013e50 <FLASH_WaitForLastOperation+0x8c>)
 8013dfc:	691b      	ldr	r3, [r3, #16]
 8013dfe:	4a15      	ldr	r2, [pc, #84]	@ (8013e54 <FLASH_WaitForLastOperation+0x90>)
 8013e00:	4013      	ands	r3, r2
 8013e02:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8013e04:	4b12      	ldr	r3, [pc, #72]	@ (8013e50 <FLASH_WaitForLastOperation+0x8c>)
 8013e06:	4a14      	ldr	r2, [pc, #80]	@ (8013e58 <FLASH_WaitForLastOperation+0x94>)
 8013e08:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d004      	beq.n	8013e1a <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8013e10:	4b12      	ldr	r3, [pc, #72]	@ (8013e5c <FLASH_WaitForLastOperation+0x98>)
 8013e12:	68ba      	ldr	r2, [r7, #8]
 8013e14:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8013e16:	2301      	movs	r3, #1
 8013e18:	e015      	b.n	8013e46 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8013e1a:	f7fd ff8b 	bl	8011d34 <HAL_GetTick>
 8013e1e:	0002      	movs	r2, r0
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	189b      	adds	r3, r3, r2
 8013e24:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8013e26:	e007      	b.n	8013e38 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8013e28:	f7fd ff84 	bl	8011d34 <HAL_GetTick>
 8013e2c:	0002      	movs	r2, r0
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d801      	bhi.n	8013e38 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8013e34:	2303      	movs	r3, #3
 8013e36:	e006      	b.n	8013e46 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8013e38:	4b05      	ldr	r3, [pc, #20]	@ (8013e50 <FLASH_WaitForLastOperation+0x8c>)
 8013e3a:	691a      	ldr	r2, [r3, #16]
 8013e3c:	2380      	movs	r3, #128	@ 0x80
 8013e3e:	02db      	lsls	r3, r3, #11
 8013e40:	4013      	ands	r3, r2
 8013e42:	d1f1      	bne.n	8013e28 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8013e44:	2300      	movs	r3, #0
}
 8013e46:	0018      	movs	r0, r3
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	b004      	add	sp, #16
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	46c0      	nop			@ (mov r8, r8)
 8013e50:	40022000 	.word	0x40022000
 8013e54:	000083fa 	.word	0x000083fa
 8013e58:	000083fb 	.word	0x000083fb
 8013e5c:	20001220 	.word	0x20001220

08013e60 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013e60:	b5b0      	push	{r4, r5, r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	603a      	str	r2, [r7, #0]
 8013e6a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8013e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8013e9c <FLASH_Program_DoubleWord+0x3c>)
 8013e6e:	695a      	ldr	r2, [r3, #20]
 8013e70:	4b0a      	ldr	r3, [pc, #40]	@ (8013e9c <FLASH_Program_DoubleWord+0x3c>)
 8013e72:	2101      	movs	r1, #1
 8013e74:	430a      	orrs	r2, r1
 8013e76:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	683a      	ldr	r2, [r7, #0]
 8013e7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8013e7e:	f3bf 8f6f 	isb	sy
}
 8013e82:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	001c      	movs	r4, r3
 8013e88:	2300      	movs	r3, #0
 8013e8a:	001d      	movs	r5, r3
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	3304      	adds	r3, #4
 8013e90:	0022      	movs	r2, r4
 8013e92:	601a      	str	r2, [r3, #0]
}
 8013e94:	46c0      	nop			@ (mov r8, r8)
 8013e96:	46bd      	mov	sp, r7
 8013e98:	b004      	add	sp, #16
 8013e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e9c:	40022000 	.word	0x40022000

08013ea0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8013ea0:	b5b0      	push	{r4, r5, r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013eaa:	4b32      	ldr	r3, [pc, #200]	@ (8013f74 <HAL_FLASHEx_Erase+0xd4>)
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d101      	bne.n	8013eb6 <HAL_FLASHEx_Erase+0x16>
 8013eb2:	2302      	movs	r3, #2
 8013eb4:	e059      	b.n	8013f6a <HAL_FLASHEx_Erase+0xca>
 8013eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8013f74 <HAL_FLASHEx_Erase+0xd4>)
 8013eb8:	2201      	movs	r2, #1
 8013eba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8013f74 <HAL_FLASHEx_Erase+0xd4>)
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013ec2:	250f      	movs	r5, #15
 8013ec4:	197c      	adds	r4, r7, r5
 8013ec6:	23fa      	movs	r3, #250	@ 0xfa
 8013ec8:	009b      	lsls	r3, r3, #2
 8013eca:	0018      	movs	r0, r3
 8013ecc:	f7ff ff7a 	bl	8013dc4 <FLASH_WaitForLastOperation>
 8013ed0:	0003      	movs	r3, r0
 8013ed2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013ed4:	002c      	movs	r4, r5
 8013ed6:	193b      	adds	r3, r7, r4
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d13f      	bne.n	8013f5e <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b04      	cmp	r3, #4
 8013eea:	d10a      	bne.n	8013f02 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8013eec:	f000 f846 	bl	8013f7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013ef0:	193c      	adds	r4, r7, r4
 8013ef2:	23fa      	movs	r3, #250	@ 0xfa
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	0018      	movs	r0, r3
 8013ef8:	f7ff ff64 	bl	8013dc4 <FLASH_WaitForLastOperation>
 8013efc:	0003      	movs	r3, r0
 8013efe:	7023      	strb	r3, [r4, #0]
 8013f00:	e02d      	b.n	8013f5e <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	2201      	movs	r2, #1
 8013f06:	4252      	negs	r2, r2
 8013f08:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	689b      	ldr	r3, [r3, #8]
 8013f0e:	60bb      	str	r3, [r7, #8]
 8013f10:	e017      	b.n	8013f42 <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	0018      	movs	r0, r3
 8013f16:	f000 f841 	bl	8013f9c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013f1a:	250f      	movs	r5, #15
 8013f1c:	197c      	adds	r4, r7, r5
 8013f1e:	23fa      	movs	r3, #250	@ 0xfa
 8013f20:	009b      	lsls	r3, r3, #2
 8013f22:	0018      	movs	r0, r3
 8013f24:	f7ff ff4e 	bl	8013dc4 <FLASH_WaitForLastOperation>
 8013f28:	0003      	movs	r3, r0
 8013f2a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8013f2c:	197b      	adds	r3, r7, r5
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d003      	beq.n	8013f3c <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	68ba      	ldr	r2, [r7, #8]
 8013f38:	601a      	str	r2, [r3, #0]
          break;
 8013f3a:	e00a      	b.n	8013f52 <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	60bb      	str	r3, [r7, #8]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	689a      	ldr	r2, [r3, #8]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	18d3      	adds	r3, r2, r3
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d3df      	bcc.n	8013f12 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8013f52:	4b09      	ldr	r3, [pc, #36]	@ (8013f78 <HAL_FLASHEx_Erase+0xd8>)
 8013f54:	695a      	ldr	r2, [r3, #20]
 8013f56:	4b08      	ldr	r3, [pc, #32]	@ (8013f78 <HAL_FLASHEx_Erase+0xd8>)
 8013f58:	2102      	movs	r1, #2
 8013f5a:	438a      	bics	r2, r1
 8013f5c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013f5e:	4b05      	ldr	r3, [pc, #20]	@ (8013f74 <HAL_FLASHEx_Erase+0xd4>)
 8013f60:	2200      	movs	r2, #0
 8013f62:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8013f64:	230f      	movs	r3, #15
 8013f66:	18fb      	adds	r3, r7, r3
 8013f68:	781b      	ldrb	r3, [r3, #0]
}
 8013f6a:	0018      	movs	r0, r3
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	b004      	add	sp, #16
 8013f70:	bdb0      	pop	{r4, r5, r7, pc}
 8013f72:	46c0      	nop			@ (mov r8, r8)
 8013f74:	20001220 	.word	0x20001220
 8013f78:	40022000 	.word	0x40022000

08013f7c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 8013f80:	4b04      	ldr	r3, [pc, #16]	@ (8013f94 <FLASH_MassErase+0x18>)
 8013f82:	695a      	ldr	r2, [r3, #20]
 8013f84:	4b03      	ldr	r3, [pc, #12]	@ (8013f94 <FLASH_MassErase+0x18>)
 8013f86:	4904      	ldr	r1, [pc, #16]	@ (8013f98 <FLASH_MassErase+0x1c>)
 8013f88:	430a      	orrs	r2, r1
 8013f8a:	615a      	str	r2, [r3, #20]
}
 8013f8c:	46c0      	nop			@ (mov r8, r8)
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	46c0      	nop			@ (mov r8, r8)
 8013f94:	40022000 	.word	0x40022000
 8013f98:	00010004 	.word	0x00010004

08013f9c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8013fa4:	4b08      	ldr	r3, [pc, #32]	@ (8013fc8 <FLASH_PageErase+0x2c>)
 8013fa6:	695b      	ldr	r3, [r3, #20]
 8013fa8:	4a08      	ldr	r2, [pc, #32]	@ (8013fcc <FLASH_PageErase+0x30>)
 8013faa:	4013      	ands	r3, r2
 8013fac:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	00da      	lsls	r2, r3, #3
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	431a      	orrs	r2, r3
 8013fb6:	4b04      	ldr	r3, [pc, #16]	@ (8013fc8 <FLASH_PageErase+0x2c>)
 8013fb8:	4905      	ldr	r1, [pc, #20]	@ (8013fd0 <FLASH_PageErase+0x34>)
 8013fba:	430a      	orrs	r2, r1
 8013fbc:	615a      	str	r2, [r3, #20]
}
 8013fbe:	46c0      	nop			@ (mov r8, r8)
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	b004      	add	sp, #16
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	46c0      	nop			@ (mov r8, r8)
 8013fc8:	40022000 	.word	0x40022000
 8013fcc:	fffffc07 	.word	0xfffffc07
 8013fd0:	00010002 	.word	0x00010002

08013fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b086      	sub	sp, #24
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013fe2:	e153      	b.n	801428c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	2101      	movs	r1, #1
 8013fea:	697a      	ldr	r2, [r7, #20]
 8013fec:	4091      	lsls	r1, r2
 8013fee:	000a      	movs	r2, r1
 8013ff0:	4013      	ands	r3, r2
 8013ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d100      	bne.n	8013ffc <HAL_GPIO_Init+0x28>
 8013ffa:	e144      	b.n	8014286 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	2203      	movs	r2, #3
 8014002:	4013      	ands	r3, r2
 8014004:	2b01      	cmp	r3, #1
 8014006:	d005      	beq.n	8014014 <HAL_GPIO_Init+0x40>
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	2203      	movs	r2, #3
 801400e:	4013      	ands	r3, r2
 8014010:	2b02      	cmp	r3, #2
 8014012:	d130      	bne.n	8014076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	005b      	lsls	r3, r3, #1
 801401e:	2203      	movs	r2, #3
 8014020:	409a      	lsls	r2, r3
 8014022:	0013      	movs	r3, r2
 8014024:	43da      	mvns	r2, r3
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	4013      	ands	r3, r2
 801402a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	68da      	ldr	r2, [r3, #12]
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	409a      	lsls	r2, r3
 8014036:	0013      	movs	r3, r2
 8014038:	693a      	ldr	r2, [r7, #16]
 801403a:	4313      	orrs	r3, r2
 801403c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	693a      	ldr	r2, [r7, #16]
 8014042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801404a:	2201      	movs	r2, #1
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	409a      	lsls	r2, r3
 8014050:	0013      	movs	r3, r2
 8014052:	43da      	mvns	r2, r3
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	4013      	ands	r3, r2
 8014058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	091b      	lsrs	r3, r3, #4
 8014060:	2201      	movs	r2, #1
 8014062:	401a      	ands	r2, r3
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	409a      	lsls	r2, r3
 8014068:	0013      	movs	r3, r2
 801406a:	693a      	ldr	r2, [r7, #16]
 801406c:	4313      	orrs	r3, r2
 801406e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	693a      	ldr	r2, [r7, #16]
 8014074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	2203      	movs	r2, #3
 801407c:	4013      	ands	r3, r2
 801407e:	2b03      	cmp	r3, #3
 8014080:	d017      	beq.n	80140b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	68db      	ldr	r3, [r3, #12]
 8014086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	2203      	movs	r2, #3
 801408e:	409a      	lsls	r2, r3
 8014090:	0013      	movs	r3, r2
 8014092:	43da      	mvns	r2, r3
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	4013      	ands	r3, r2
 8014098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	689a      	ldr	r2, [r3, #8]
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	409a      	lsls	r2, r3
 80140a4:	0013      	movs	r3, r2
 80140a6:	693a      	ldr	r2, [r7, #16]
 80140a8:	4313      	orrs	r3, r2
 80140aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	693a      	ldr	r2, [r7, #16]
 80140b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	2203      	movs	r2, #3
 80140b8:	4013      	ands	r3, r2
 80140ba:	2b02      	cmp	r3, #2
 80140bc:	d123      	bne.n	8014106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	08da      	lsrs	r2, r3, #3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	3208      	adds	r2, #8
 80140c6:	0092      	lsls	r2, r2, #2
 80140c8:	58d3      	ldr	r3, [r2, r3]
 80140ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	2207      	movs	r2, #7
 80140d0:	4013      	ands	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	220f      	movs	r2, #15
 80140d6:	409a      	lsls	r2, r3
 80140d8:	0013      	movs	r3, r2
 80140da:	43da      	mvns	r2, r3
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	4013      	ands	r3, r2
 80140e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	691a      	ldr	r2, [r3, #16]
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	2107      	movs	r1, #7
 80140ea:	400b      	ands	r3, r1
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	409a      	lsls	r2, r3
 80140f0:	0013      	movs	r3, r2
 80140f2:	693a      	ldr	r2, [r7, #16]
 80140f4:	4313      	orrs	r3, r2
 80140f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	08da      	lsrs	r2, r3, #3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	3208      	adds	r2, #8
 8014100:	0092      	lsls	r2, r2, #2
 8014102:	6939      	ldr	r1, [r7, #16]
 8014104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	2203      	movs	r2, #3
 8014112:	409a      	lsls	r2, r3
 8014114:	0013      	movs	r3, r2
 8014116:	43da      	mvns	r2, r3
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	4013      	ands	r3, r2
 801411c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	2203      	movs	r2, #3
 8014124:	401a      	ands	r2, r3
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	005b      	lsls	r3, r3, #1
 801412a:	409a      	lsls	r2, r3
 801412c:	0013      	movs	r3, r2
 801412e:	693a      	ldr	r2, [r7, #16]
 8014130:	4313      	orrs	r3, r2
 8014132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	693a      	ldr	r2, [r7, #16]
 8014138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	685a      	ldr	r2, [r3, #4]
 801413e:	23c0      	movs	r3, #192	@ 0xc0
 8014140:	029b      	lsls	r3, r3, #10
 8014142:	4013      	ands	r3, r2
 8014144:	d100      	bne.n	8014148 <HAL_GPIO_Init+0x174>
 8014146:	e09e      	b.n	8014286 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8014148:	4a56      	ldr	r2, [pc, #344]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	089b      	lsrs	r3, r3, #2
 801414e:	3318      	adds	r3, #24
 8014150:	009b      	lsls	r3, r3, #2
 8014152:	589b      	ldr	r3, [r3, r2]
 8014154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	2203      	movs	r2, #3
 801415a:	4013      	ands	r3, r2
 801415c:	00db      	lsls	r3, r3, #3
 801415e:	220f      	movs	r2, #15
 8014160:	409a      	lsls	r2, r3
 8014162:	0013      	movs	r3, r2
 8014164:	43da      	mvns	r2, r3
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	4013      	ands	r3, r2
 801416a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	23a0      	movs	r3, #160	@ 0xa0
 8014170:	05db      	lsls	r3, r3, #23
 8014172:	429a      	cmp	r2, r3
 8014174:	d01f      	beq.n	80141b6 <HAL_GPIO_Init+0x1e2>
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	4a4b      	ldr	r2, [pc, #300]	@ (80142a8 <HAL_GPIO_Init+0x2d4>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d019      	beq.n	80141b2 <HAL_GPIO_Init+0x1de>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	4a4a      	ldr	r2, [pc, #296]	@ (80142ac <HAL_GPIO_Init+0x2d8>)
 8014182:	4293      	cmp	r3, r2
 8014184:	d013      	beq.n	80141ae <HAL_GPIO_Init+0x1da>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	4a49      	ldr	r2, [pc, #292]	@ (80142b0 <HAL_GPIO_Init+0x2dc>)
 801418a:	4293      	cmp	r3, r2
 801418c:	d00d      	beq.n	80141aa <HAL_GPIO_Init+0x1d6>
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	4a48      	ldr	r2, [pc, #288]	@ (80142b4 <HAL_GPIO_Init+0x2e0>)
 8014192:	4293      	cmp	r3, r2
 8014194:	d007      	beq.n	80141a6 <HAL_GPIO_Init+0x1d2>
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	4a47      	ldr	r2, [pc, #284]	@ (80142b8 <HAL_GPIO_Init+0x2e4>)
 801419a:	4293      	cmp	r3, r2
 801419c:	d101      	bne.n	80141a2 <HAL_GPIO_Init+0x1ce>
 801419e:	2305      	movs	r3, #5
 80141a0:	e00a      	b.n	80141b8 <HAL_GPIO_Init+0x1e4>
 80141a2:	2306      	movs	r3, #6
 80141a4:	e008      	b.n	80141b8 <HAL_GPIO_Init+0x1e4>
 80141a6:	2304      	movs	r3, #4
 80141a8:	e006      	b.n	80141b8 <HAL_GPIO_Init+0x1e4>
 80141aa:	2303      	movs	r3, #3
 80141ac:	e004      	b.n	80141b8 <HAL_GPIO_Init+0x1e4>
 80141ae:	2302      	movs	r3, #2
 80141b0:	e002      	b.n	80141b8 <HAL_GPIO_Init+0x1e4>
 80141b2:	2301      	movs	r3, #1
 80141b4:	e000      	b.n	80141b8 <HAL_GPIO_Init+0x1e4>
 80141b6:	2300      	movs	r3, #0
 80141b8:	697a      	ldr	r2, [r7, #20]
 80141ba:	2103      	movs	r1, #3
 80141bc:	400a      	ands	r2, r1
 80141be:	00d2      	lsls	r2, r2, #3
 80141c0:	4093      	lsls	r3, r2
 80141c2:	693a      	ldr	r2, [r7, #16]
 80141c4:	4313      	orrs	r3, r2
 80141c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80141c8:	4936      	ldr	r1, [pc, #216]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	089b      	lsrs	r3, r3, #2
 80141ce:	3318      	adds	r3, #24
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	693a      	ldr	r2, [r7, #16]
 80141d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80141d6:	4b33      	ldr	r3, [pc, #204]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	43da      	mvns	r2, r3
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	4013      	ands	r3, r2
 80141e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	685a      	ldr	r2, [r3, #4]
 80141ea:	2380      	movs	r3, #128	@ 0x80
 80141ec:	035b      	lsls	r3, r3, #13
 80141ee:	4013      	ands	r3, r2
 80141f0:	d003      	beq.n	80141fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80141f2:	693a      	ldr	r2, [r7, #16]
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	4313      	orrs	r3, r2
 80141f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80141fa:	4b2a      	ldr	r3, [pc, #168]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 80141fc:	693a      	ldr	r2, [r7, #16]
 80141fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8014200:	4b28      	ldr	r3, [pc, #160]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	43da      	mvns	r2, r3
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	4013      	ands	r3, r2
 801420e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	685a      	ldr	r2, [r3, #4]
 8014214:	2380      	movs	r3, #128	@ 0x80
 8014216:	039b      	lsls	r3, r3, #14
 8014218:	4013      	ands	r3, r2
 801421a:	d003      	beq.n	8014224 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 801421c:	693a      	ldr	r2, [r7, #16]
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	4313      	orrs	r3, r2
 8014222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8014224:	4b1f      	ldr	r3, [pc, #124]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 8014226:	693a      	ldr	r2, [r7, #16]
 8014228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801422a:	4a1e      	ldr	r2, [pc, #120]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 801422c:	2384      	movs	r3, #132	@ 0x84
 801422e:	58d3      	ldr	r3, [r2, r3]
 8014230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	43da      	mvns	r2, r3
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	4013      	ands	r3, r2
 801423a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	685a      	ldr	r2, [r3, #4]
 8014240:	2380      	movs	r3, #128	@ 0x80
 8014242:	029b      	lsls	r3, r3, #10
 8014244:	4013      	ands	r3, r2
 8014246:	d003      	beq.n	8014250 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8014248:	693a      	ldr	r2, [r7, #16]
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	4313      	orrs	r3, r2
 801424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8014250:	4914      	ldr	r1, [pc, #80]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 8014252:	2284      	movs	r2, #132	@ 0x84
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8014258:	4a12      	ldr	r2, [pc, #72]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 801425a:	2380      	movs	r3, #128	@ 0x80
 801425c:	58d3      	ldr	r3, [r2, r3]
 801425e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	43da      	mvns	r2, r3
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	4013      	ands	r3, r2
 8014268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	685a      	ldr	r2, [r3, #4]
 801426e:	2380      	movs	r3, #128	@ 0x80
 8014270:	025b      	lsls	r3, r3, #9
 8014272:	4013      	ands	r3, r2
 8014274:	d003      	beq.n	801427e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8014276:	693a      	ldr	r2, [r7, #16]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	4313      	orrs	r3, r2
 801427c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801427e:	4909      	ldr	r1, [pc, #36]	@ (80142a4 <HAL_GPIO_Init+0x2d0>)
 8014280:	2280      	movs	r2, #128	@ 0x80
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	3301      	adds	r3, #1
 801428a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	40da      	lsrs	r2, r3
 8014294:	1e13      	subs	r3, r2, #0
 8014296:	d000      	beq.n	801429a <HAL_GPIO_Init+0x2c6>
 8014298:	e6a4      	b.n	8013fe4 <HAL_GPIO_Init+0x10>
  }
}
 801429a:	46c0      	nop			@ (mov r8, r8)
 801429c:	46c0      	nop			@ (mov r8, r8)
 801429e:	46bd      	mov	sp, r7
 80142a0:	b006      	add	sp, #24
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	40021800 	.word	0x40021800
 80142a8:	50000400 	.word	0x50000400
 80142ac:	50000800 	.word	0x50000800
 80142b0:	50000c00 	.word	0x50000c00
 80142b4:	50001000 	.word	0x50001000
 80142b8:	50001400 	.word	0x50001400

080142bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b086      	sub	sp, #24
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80142c6:	2300      	movs	r3, #0
 80142c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80142ca:	e0c0      	b.n	801444e <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80142cc:	2201      	movs	r2, #1
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	409a      	lsls	r2, r3
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	4013      	ands	r3, r2
 80142d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d100      	bne.n	80142e0 <HAL_GPIO_DeInit+0x24>
 80142de:	e0b3      	b.n	8014448 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80142e0:	4a60      	ldr	r2, [pc, #384]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	089b      	lsrs	r3, r3, #2
 80142e6:	3318      	adds	r3, #24
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	589b      	ldr	r3, [r3, r2]
 80142ec:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	2203      	movs	r2, #3
 80142f2:	4013      	ands	r3, r2
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	220f      	movs	r2, #15
 80142f8:	409a      	lsls	r2, r3
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	4013      	ands	r3, r2
 80142fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	23a0      	movs	r3, #160	@ 0xa0
 8014304:	05db      	lsls	r3, r3, #23
 8014306:	429a      	cmp	r2, r3
 8014308:	d01f      	beq.n	801434a <HAL_GPIO_DeInit+0x8e>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4a56      	ldr	r2, [pc, #344]	@ (8014468 <HAL_GPIO_DeInit+0x1ac>)
 801430e:	4293      	cmp	r3, r2
 8014310:	d019      	beq.n	8014346 <HAL_GPIO_DeInit+0x8a>
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	4a55      	ldr	r2, [pc, #340]	@ (801446c <HAL_GPIO_DeInit+0x1b0>)
 8014316:	4293      	cmp	r3, r2
 8014318:	d013      	beq.n	8014342 <HAL_GPIO_DeInit+0x86>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	4a54      	ldr	r2, [pc, #336]	@ (8014470 <HAL_GPIO_DeInit+0x1b4>)
 801431e:	4293      	cmp	r3, r2
 8014320:	d00d      	beq.n	801433e <HAL_GPIO_DeInit+0x82>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	4a53      	ldr	r2, [pc, #332]	@ (8014474 <HAL_GPIO_DeInit+0x1b8>)
 8014326:	4293      	cmp	r3, r2
 8014328:	d007      	beq.n	801433a <HAL_GPIO_DeInit+0x7e>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	4a52      	ldr	r2, [pc, #328]	@ (8014478 <HAL_GPIO_DeInit+0x1bc>)
 801432e:	4293      	cmp	r3, r2
 8014330:	d101      	bne.n	8014336 <HAL_GPIO_DeInit+0x7a>
 8014332:	2305      	movs	r3, #5
 8014334:	e00a      	b.n	801434c <HAL_GPIO_DeInit+0x90>
 8014336:	2306      	movs	r3, #6
 8014338:	e008      	b.n	801434c <HAL_GPIO_DeInit+0x90>
 801433a:	2304      	movs	r3, #4
 801433c:	e006      	b.n	801434c <HAL_GPIO_DeInit+0x90>
 801433e:	2303      	movs	r3, #3
 8014340:	e004      	b.n	801434c <HAL_GPIO_DeInit+0x90>
 8014342:	2302      	movs	r3, #2
 8014344:	e002      	b.n	801434c <HAL_GPIO_DeInit+0x90>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <HAL_GPIO_DeInit+0x90>
 801434a:	2300      	movs	r3, #0
 801434c:	697a      	ldr	r2, [r7, #20]
 801434e:	2103      	movs	r1, #3
 8014350:	400a      	ands	r2, r1
 8014352:	00d2      	lsls	r2, r2, #3
 8014354:	4093      	lsls	r3, r2
 8014356:	68fa      	ldr	r2, [r7, #12]
 8014358:	429a      	cmp	r2, r3
 801435a:	d136      	bne.n	80143ca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801435c:	4a41      	ldr	r2, [pc, #260]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 801435e:	2380      	movs	r3, #128	@ 0x80
 8014360:	58d3      	ldr	r3, [r2, r3]
 8014362:	693a      	ldr	r2, [r7, #16]
 8014364:	43d2      	mvns	r2, r2
 8014366:	493f      	ldr	r1, [pc, #252]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 8014368:	4013      	ands	r3, r2
 801436a:	2280      	movs	r2, #128	@ 0x80
 801436c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 801436e:	4a3d      	ldr	r2, [pc, #244]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 8014370:	2384      	movs	r3, #132	@ 0x84
 8014372:	58d3      	ldr	r3, [r2, r3]
 8014374:	693a      	ldr	r2, [r7, #16]
 8014376:	43d2      	mvns	r2, r2
 8014378:	493a      	ldr	r1, [pc, #232]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 801437a:	4013      	ands	r3, r2
 801437c:	2284      	movs	r2, #132	@ 0x84
 801437e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8014380:	4b38      	ldr	r3, [pc, #224]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 8014382:	685a      	ldr	r2, [r3, #4]
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	43d9      	mvns	r1, r3
 8014388:	4b36      	ldr	r3, [pc, #216]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 801438a:	400a      	ands	r2, r1
 801438c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801438e:	4b35      	ldr	r3, [pc, #212]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 8014390:	681a      	ldr	r2, [r3, #0]
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	43d9      	mvns	r1, r3
 8014396:	4b33      	ldr	r3, [pc, #204]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 8014398:	400a      	ands	r2, r1
 801439a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	2203      	movs	r2, #3
 80143a0:	4013      	ands	r3, r2
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	220f      	movs	r2, #15
 80143a6:	409a      	lsls	r2, r3
 80143a8:	0013      	movs	r3, r2
 80143aa:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80143ac:	4a2d      	ldr	r2, [pc, #180]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	089b      	lsrs	r3, r3, #2
 80143b2:	3318      	adds	r3, #24
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	589a      	ldr	r2, [r3, r2]
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	43d9      	mvns	r1, r3
 80143bc:	4829      	ldr	r0, [pc, #164]	@ (8014464 <HAL_GPIO_DeInit+0x1a8>)
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	089b      	lsrs	r3, r3, #2
 80143c2:	400a      	ands	r2, r1
 80143c4:	3318      	adds	r3, #24
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	2103      	movs	r1, #3
 80143d4:	4099      	lsls	r1, r3
 80143d6:	000b      	movs	r3, r1
 80143d8:	431a      	orrs	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	08da      	lsrs	r2, r3, #3
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	3208      	adds	r2, #8
 80143e6:	0092      	lsls	r2, r2, #2
 80143e8:	58d3      	ldr	r3, [r2, r3]
 80143ea:	697a      	ldr	r2, [r7, #20]
 80143ec:	2107      	movs	r1, #7
 80143ee:	400a      	ands	r2, r1
 80143f0:	0092      	lsls	r2, r2, #2
 80143f2:	210f      	movs	r1, #15
 80143f4:	4091      	lsls	r1, r2
 80143f6:	000a      	movs	r2, r1
 80143f8:	43d1      	mvns	r1, r2
 80143fa:	697a      	ldr	r2, [r7, #20]
 80143fc:	08d2      	lsrs	r2, r2, #3
 80143fe:	4019      	ands	r1, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	3208      	adds	r2, #8
 8014404:	0092      	lsls	r2, r2, #2
 8014406:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	697a      	ldr	r2, [r7, #20]
 801440e:	0052      	lsls	r2, r2, #1
 8014410:	2103      	movs	r1, #3
 8014412:	4091      	lsls	r1, r2
 8014414:	000a      	movs	r2, r1
 8014416:	43d2      	mvns	r2, r2
 8014418:	401a      	ands	r2, r3
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	2101      	movs	r1, #1
 8014424:	697a      	ldr	r2, [r7, #20]
 8014426:	4091      	lsls	r1, r2
 8014428:	000a      	movs	r2, r1
 801442a:	43d2      	mvns	r2, r2
 801442c:	401a      	ands	r2, r3
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	68db      	ldr	r3, [r3, #12]
 8014436:	697a      	ldr	r2, [r7, #20]
 8014438:	0052      	lsls	r2, r2, #1
 801443a:	2103      	movs	r1, #3
 801443c:	4091      	lsls	r1, r2
 801443e:	000a      	movs	r2, r1
 8014440:	43d2      	mvns	r2, r2
 8014442:	401a      	ands	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	60da      	str	r2, [r3, #12]
    }

    position++;
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	3301      	adds	r3, #1
 801444c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801444e:	683a      	ldr	r2, [r7, #0]
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	40da      	lsrs	r2, r3
 8014454:	1e13      	subs	r3, r2, #0
 8014456:	d000      	beq.n	801445a <HAL_GPIO_DeInit+0x19e>
 8014458:	e738      	b.n	80142cc <HAL_GPIO_DeInit+0x10>
  }
}
 801445a:	46c0      	nop			@ (mov r8, r8)
 801445c:	46c0      	nop			@ (mov r8, r8)
 801445e:	46bd      	mov	sp, r7
 8014460:	b006      	add	sp, #24
 8014462:	bd80      	pop	{r7, pc}
 8014464:	40021800 	.word	0x40021800
 8014468:	50000400 	.word	0x50000400
 801446c:	50000800 	.word	0x50000800
 8014470:	50000c00 	.word	0x50000c00
 8014474:	50001000 	.word	0x50001000
 8014478:	50001400 	.word	0x50001400

0801447c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	000a      	movs	r2, r1
 8014486:	1cbb      	adds	r3, r7, #2
 8014488:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	691b      	ldr	r3, [r3, #16]
 801448e:	1cba      	adds	r2, r7, #2
 8014490:	8812      	ldrh	r2, [r2, #0]
 8014492:	4013      	ands	r3, r2
 8014494:	d004      	beq.n	80144a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8014496:	230f      	movs	r3, #15
 8014498:	18fb      	adds	r3, r7, r3
 801449a:	2201      	movs	r2, #1
 801449c:	701a      	strb	r2, [r3, #0]
 801449e:	e003      	b.n	80144a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80144a0:	230f      	movs	r3, #15
 80144a2:	18fb      	adds	r3, r7, r3
 80144a4:	2200      	movs	r2, #0
 80144a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80144a8:	230f      	movs	r3, #15
 80144aa:	18fb      	adds	r3, r7, r3
 80144ac:	781b      	ldrb	r3, [r3, #0]
}
 80144ae:	0018      	movs	r0, r3
 80144b0:	46bd      	mov	sp, r7
 80144b2:	b004      	add	sp, #16
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b082      	sub	sp, #8
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	0008      	movs	r0, r1
 80144c0:	0011      	movs	r1, r2
 80144c2:	1cbb      	adds	r3, r7, #2
 80144c4:	1c02      	adds	r2, r0, #0
 80144c6:	801a      	strh	r2, [r3, #0]
 80144c8:	1c7b      	adds	r3, r7, #1
 80144ca:	1c0a      	adds	r2, r1, #0
 80144cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80144ce:	1c7b      	adds	r3, r7, #1
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d004      	beq.n	80144e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80144d6:	1cbb      	adds	r3, r7, #2
 80144d8:	881a      	ldrh	r2, [r3, #0]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80144de:	e003      	b.n	80144e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80144e0:	1cbb      	adds	r3, r7, #2
 80144e2:	881a      	ldrh	r2, [r3, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80144e8:	46c0      	nop			@ (mov r8, r8)
 80144ea:	46bd      	mov	sp, r7
 80144ec:	b002      	add	sp, #8
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b084      	sub	sp, #16
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	000a      	movs	r2, r1
 80144fa:	1cbb      	adds	r3, r7, #2
 80144fc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	695b      	ldr	r3, [r3, #20]
 8014502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8014504:	1cbb      	adds	r3, r7, #2
 8014506:	881b      	ldrh	r3, [r3, #0]
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	4013      	ands	r3, r2
 801450c:	041a      	lsls	r2, r3, #16
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	43db      	mvns	r3, r3
 8014512:	1cb9      	adds	r1, r7, #2
 8014514:	8809      	ldrh	r1, [r1, #0]
 8014516:	400b      	ands	r3, r1
 8014518:	431a      	orrs	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	619a      	str	r2, [r3, #24]
}
 801451e:	46c0      	nop			@ (mov r8, r8)
 8014520:	46bd      	mov	sp, r7
 8014522:	b004      	add	sp, #16
 8014524:	bd80      	pop	{r7, pc}
	...

08014528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	0002      	movs	r2, r0
 8014530:	1dbb      	adds	r3, r7, #6
 8014532:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8014534:	4b10      	ldr	r3, [pc, #64]	@ (8014578 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	1dba      	adds	r2, r7, #6
 801453a:	8812      	ldrh	r2, [r2, #0]
 801453c:	4013      	ands	r3, r2
 801453e:	d008      	beq.n	8014552 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8014540:	4b0d      	ldr	r3, [pc, #52]	@ (8014578 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014542:	1dba      	adds	r2, r7, #6
 8014544:	8812      	ldrh	r2, [r2, #0]
 8014546:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8014548:	1dbb      	adds	r3, r7, #6
 801454a:	881b      	ldrh	r3, [r3, #0]
 801454c:	0018      	movs	r0, r3
 801454e:	f000 f815 	bl	801457c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8014552:	4b09      	ldr	r3, [pc, #36]	@ (8014578 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014554:	691b      	ldr	r3, [r3, #16]
 8014556:	1dba      	adds	r2, r7, #6
 8014558:	8812      	ldrh	r2, [r2, #0]
 801455a:	4013      	ands	r3, r2
 801455c:	d008      	beq.n	8014570 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801455e:	4b06      	ldr	r3, [pc, #24]	@ (8014578 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014560:	1dba      	adds	r2, r7, #6
 8014562:	8812      	ldrh	r2, [r2, #0]
 8014564:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8014566:	1dbb      	adds	r3, r7, #6
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	0018      	movs	r0, r3
 801456c:	f000 f810 	bl	8014590 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8014570:	46c0      	nop			@ (mov r8, r8)
 8014572:	46bd      	mov	sp, r7
 8014574:	b002      	add	sp, #8
 8014576:	bd80      	pop	{r7, pc}
 8014578:	40021800 	.word	0x40021800

0801457c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	0002      	movs	r2, r0
 8014584:	1dbb      	adds	r3, r7, #6
 8014586:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8014588:	46c0      	nop			@ (mov r8, r8)
 801458a:	46bd      	mov	sp, r7
 801458c:	b002      	add	sp, #8
 801458e:	bd80      	pop	{r7, pc}

08014590 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
 8014596:	0002      	movs	r2, r0
 8014598:	1dbb      	adds	r3, r7, #6
 801459a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 801459c:	46c0      	nop			@ (mov r8, r8)
 801459e:	46bd      	mov	sp, r7
 80145a0:	b002      	add	sp, #8
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80145b2:	2301      	movs	r3, #1
 80145b4:	e08f      	b.n	80146d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2241      	movs	r2, #65	@ 0x41
 80145ba:	5c9b      	ldrb	r3, [r3, r2]
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d107      	bne.n	80145d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2240      	movs	r2, #64	@ 0x40
 80145c6:	2100      	movs	r1, #0
 80145c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	0018      	movs	r0, r3
 80145ce:	f7f7 fc7b 	bl	800bec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2241      	movs	r2, #65	@ 0x41
 80145d6:	2124      	movs	r1, #36	@ 0x24
 80145d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	2101      	movs	r1, #1
 80145e6:	438a      	bics	r2, r1
 80145e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	685a      	ldr	r2, [r3, #4]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	493b      	ldr	r1, [pc, #236]	@ (80146e0 <HAL_I2C_Init+0x13c>)
 80145f4:	400a      	ands	r2, r1
 80145f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	689a      	ldr	r2, [r3, #8]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	4938      	ldr	r1, [pc, #224]	@ (80146e4 <HAL_I2C_Init+0x140>)
 8014604:	400a      	ands	r2, r1
 8014606:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	2b01      	cmp	r3, #1
 801460e:	d108      	bne.n	8014622 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	689a      	ldr	r2, [r3, #8]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2180      	movs	r1, #128	@ 0x80
 801461a:	0209      	lsls	r1, r1, #8
 801461c:	430a      	orrs	r2, r1
 801461e:	609a      	str	r2, [r3, #8]
 8014620:	e007      	b.n	8014632 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	689a      	ldr	r2, [r3, #8]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2184      	movs	r1, #132	@ 0x84
 801462c:	0209      	lsls	r1, r1, #8
 801462e:	430a      	orrs	r2, r1
 8014630:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	2b02      	cmp	r3, #2
 8014638:	d109      	bne.n	801464e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	685a      	ldr	r2, [r3, #4]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2180      	movs	r1, #128	@ 0x80
 8014646:	0109      	lsls	r1, r1, #4
 8014648:	430a      	orrs	r2, r1
 801464a:	605a      	str	r2, [r3, #4]
 801464c:	e007      	b.n	801465e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	685a      	ldr	r2, [r3, #4]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4923      	ldr	r1, [pc, #140]	@ (80146e8 <HAL_I2C_Init+0x144>)
 801465a:	400a      	ands	r2, r1
 801465c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	685a      	ldr	r2, [r3, #4]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4920      	ldr	r1, [pc, #128]	@ (80146ec <HAL_I2C_Init+0x148>)
 801466a:	430a      	orrs	r2, r1
 801466c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	68da      	ldr	r2, [r3, #12]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	491a      	ldr	r1, [pc, #104]	@ (80146e4 <HAL_I2C_Init+0x140>)
 801467a:	400a      	ands	r2, r1
 801467c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	691a      	ldr	r2, [r3, #16]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	695b      	ldr	r3, [r3, #20]
 8014686:	431a      	orrs	r2, r3
 8014688:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	699b      	ldr	r3, [r3, #24]
 801468e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	430a      	orrs	r2, r1
 8014696:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	69d9      	ldr	r1, [r3, #28]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	6a1a      	ldr	r2, [r3, #32]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	430a      	orrs	r2, r1
 80146a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2101      	movs	r1, #1
 80146b4:	430a      	orrs	r2, r1
 80146b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2200      	movs	r2, #0
 80146bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2241      	movs	r2, #65	@ 0x41
 80146c2:	2120      	movs	r1, #32
 80146c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2200      	movs	r2, #0
 80146ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2242      	movs	r2, #66	@ 0x42
 80146d0:	2100      	movs	r1, #0
 80146d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	0018      	movs	r0, r3
 80146d8:	46bd      	mov	sp, r7
 80146da:	b002      	add	sp, #8
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	46c0      	nop			@ (mov r8, r8)
 80146e0:	f0ffffff 	.word	0xf0ffffff
 80146e4:	ffff7fff 	.word	0xffff7fff
 80146e8:	fffff7ff 	.word	0xfffff7ff
 80146ec:	02008000 	.word	0x02008000

080146f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d101      	bne.n	8014702 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80146fe:	2301      	movs	r3, #1
 8014700:	e022      	b.n	8014748 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2241      	movs	r2, #65	@ 0x41
 8014706:	2124      	movs	r1, #36	@ 0x24
 8014708:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2101      	movs	r1, #1
 8014716:	438a      	bics	r2, r1
 8014718:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	0018      	movs	r0, r3
 801471e:	f7f7 fc99 	bl	800c054 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2200      	movs	r2, #0
 8014726:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2241      	movs	r2, #65	@ 0x41
 801472c:	2100      	movs	r1, #0
 801472e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2200      	movs	r2, #0
 8014734:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2242      	movs	r2, #66	@ 0x42
 801473a:	2100      	movs	r1, #0
 801473c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2240      	movs	r2, #64	@ 0x40
 8014742:	2100      	movs	r1, #0
 8014744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014746:	2300      	movs	r3, #0
}
 8014748:	0018      	movs	r0, r3
 801474a:	46bd      	mov	sp, r7
 801474c:	b002      	add	sp, #8
 801474e:	bd80      	pop	{r7, pc}

08014750 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8014750:	b5b0      	push	{r4, r5, r7, lr}
 8014752:	b088      	sub	sp, #32
 8014754:	af02      	add	r7, sp, #8
 8014756:	60f8      	str	r0, [r7, #12]
 8014758:	0008      	movs	r0, r1
 801475a:	607a      	str	r2, [r7, #4]
 801475c:	0019      	movs	r1, r3
 801475e:	230a      	movs	r3, #10
 8014760:	18fb      	adds	r3, r7, r3
 8014762:	1c02      	adds	r2, r0, #0
 8014764:	801a      	strh	r2, [r3, #0]
 8014766:	2308      	movs	r3, #8
 8014768:	18fb      	adds	r3, r7, r3
 801476a:	1c0a      	adds	r2, r1, #0
 801476c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2241      	movs	r2, #65	@ 0x41
 8014772:	5c9b      	ldrb	r3, [r3, r2]
 8014774:	b2db      	uxtb	r3, r3
 8014776:	2b20      	cmp	r3, #32
 8014778:	d000      	beq.n	801477c <HAL_I2C_Master_Transmit_DMA+0x2c>
 801477a:	e0dd      	b.n	8014938 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	699a      	ldr	r2, [r3, #24]
 8014782:	2380      	movs	r3, #128	@ 0x80
 8014784:	021b      	lsls	r3, r3, #8
 8014786:	401a      	ands	r2, r3
 8014788:	2380      	movs	r3, #128	@ 0x80
 801478a:	021b      	lsls	r3, r3, #8
 801478c:	429a      	cmp	r2, r3
 801478e:	d101      	bne.n	8014794 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8014790:	2302      	movs	r3, #2
 8014792:	e0d2      	b.n	801493a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2240      	movs	r2, #64	@ 0x40
 8014798:	5c9b      	ldrb	r3, [r3, r2]
 801479a:	2b01      	cmp	r3, #1
 801479c:	d101      	bne.n	80147a2 <HAL_I2C_Master_Transmit_DMA+0x52>
 801479e:	2302      	movs	r3, #2
 80147a0:	e0cb      	b.n	801493a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2240      	movs	r2, #64	@ 0x40
 80147a6:	2101      	movs	r1, #1
 80147a8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2241      	movs	r2, #65	@ 0x41
 80147ae:	2121      	movs	r1, #33	@ 0x21
 80147b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	2242      	movs	r2, #66	@ 0x42
 80147b6:	2110      	movs	r1, #16
 80147b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2200      	movs	r2, #0
 80147be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	687a      	ldr	r2, [r7, #4]
 80147c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	2208      	movs	r2, #8
 80147ca:	18ba      	adds	r2, r7, r2
 80147cc:	8812      	ldrh	r2, [r2, #0]
 80147ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	4a5c      	ldr	r2, [pc, #368]	@ (8014944 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80147d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	4a5b      	ldr	r2, [pc, #364]	@ (8014948 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80147da:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	2bff      	cmp	r3, #255	@ 0xff
 80147e4:	d906      	bls.n	80147f4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	22ff      	movs	r2, #255	@ 0xff
 80147ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80147ec:	2380      	movs	r3, #128	@ 0x80
 80147ee:	045b      	lsls	r3, r3, #17
 80147f0:	617b      	str	r3, [r7, #20]
 80147f2:	e007      	b.n	8014804 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80147fe:	2380      	movs	r3, #128	@ 0x80
 8014800:	049b      	lsls	r3, r3, #18
 8014802:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014808:	2b00      	cmp	r3, #0
 801480a:	d100      	bne.n	801480e <HAL_I2C_Master_Transmit_DMA+0xbe>
 801480c:	e078      	b.n	8014900 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014812:	2b00      	cmp	r3, #0
 8014814:	d023      	beq.n	801485e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801481a:	4a4c      	ldr	r2, [pc, #304]	@ (801494c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 801481c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014822:	4a4b      	ldr	r2, [pc, #300]	@ (8014950 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8014824:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801482a:	2200      	movs	r2, #0
 801482c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014832:	2200      	movs	r2, #0
 8014834:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801483a:	6879      	ldr	r1, [r7, #4]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	3328      	adds	r3, #40	@ 0x28
 8014842:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014848:	2513      	movs	r5, #19
 801484a:	197c      	adds	r4, r7, r5
 801484c:	f7fe ff5a 	bl	8013704 <HAL_DMA_Start_IT>
 8014850:	0003      	movs	r3, r0
 8014852:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014854:	197b      	adds	r3, r7, r5
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d13d      	bne.n	80148d8 <HAL_I2C_Master_Transmit_DMA+0x188>
 801485c:	e013      	b.n	8014886 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2241      	movs	r2, #65	@ 0x41
 8014862:	2120      	movs	r1, #32
 8014864:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	2242      	movs	r2, #66	@ 0x42
 801486a:	2100      	movs	r1, #0
 801486c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014872:	2280      	movs	r2, #128	@ 0x80
 8014874:	431a      	orrs	r2, r3
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2240      	movs	r2, #64	@ 0x40
 801487e:	2100      	movs	r1, #0
 8014880:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014882:	2301      	movs	r3, #1
 8014884:	e059      	b.n	801493a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801488a:	b2da      	uxtb	r2, r3
 801488c:	697c      	ldr	r4, [r7, #20]
 801488e:	230a      	movs	r3, #10
 8014890:	18fb      	adds	r3, r7, r3
 8014892:	8819      	ldrh	r1, [r3, #0]
 8014894:	68f8      	ldr	r0, [r7, #12]
 8014896:	4b2f      	ldr	r3, [pc, #188]	@ (8014954 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8014898:	9300      	str	r3, [sp, #0]
 801489a:	0023      	movs	r3, r4
 801489c:	f001 fe0c 	bl	80164b8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148aa:	1ad3      	subs	r3, r2, r3
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2240      	movs	r2, #64	@ 0x40
 80148b6:	2100      	movs	r1, #0
 80148b8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2110      	movs	r1, #16
 80148be:	0018      	movs	r0, r3
 80148c0:	f001 fe34 	bl	801652c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	2180      	movs	r1, #128	@ 0x80
 80148d0:	01c9      	lsls	r1, r1, #7
 80148d2:	430a      	orrs	r2, r1
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	e02d      	b.n	8014934 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2241      	movs	r2, #65	@ 0x41
 80148dc:	2120      	movs	r1, #32
 80148de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2242      	movs	r2, #66	@ 0x42
 80148e4:	2100      	movs	r1, #0
 80148e6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148ec:	2210      	movs	r2, #16
 80148ee:	431a      	orrs	r2, r3
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2240      	movs	r2, #64	@ 0x40
 80148f8:	2100      	movs	r1, #0
 80148fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80148fc:	2301      	movs	r3, #1
 80148fe:	e01c      	b.n	801493a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	4a15      	ldr	r2, [pc, #84]	@ (8014958 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8014904:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801490a:	b2da      	uxtb	r2, r3
 801490c:	2380      	movs	r3, #128	@ 0x80
 801490e:	049c      	lsls	r4, r3, #18
 8014910:	230a      	movs	r3, #10
 8014912:	18fb      	adds	r3, r7, r3
 8014914:	8819      	ldrh	r1, [r3, #0]
 8014916:	68f8      	ldr	r0, [r7, #12]
 8014918:	4b0e      	ldr	r3, [pc, #56]	@ (8014954 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801491a:	9300      	str	r3, [sp, #0]
 801491c:	0023      	movs	r3, r4
 801491e:	f001 fdcb 	bl	80164b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2240      	movs	r2, #64	@ 0x40
 8014926:	2100      	movs	r1, #0
 8014928:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	2101      	movs	r1, #1
 801492e:	0018      	movs	r0, r3
 8014930:	f001 fdfc 	bl	801652c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014934:	2300      	movs	r3, #0
 8014936:	e000      	b.n	801493a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014938:	2302      	movs	r3, #2
  }
}
 801493a:	0018      	movs	r0, r3
 801493c:	46bd      	mov	sp, r7
 801493e:	b006      	add	sp, #24
 8014940:	bdb0      	pop	{r4, r5, r7, pc}
 8014942:	46c0      	nop			@ (mov r8, r8)
 8014944:	ffff0000 	.word	0xffff0000
 8014948:	080151d5 	.word	0x080151d5
 801494c:	08016309 	.word	0x08016309
 8014950:	08016449 	.word	0x08016449
 8014954:	80002000 	.word	0x80002000
 8014958:	08014d29 	.word	0x08014d29

0801495c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 801495c:	b5b0      	push	{r4, r5, r7, lr}
 801495e:	b088      	sub	sp, #32
 8014960:	af02      	add	r7, sp, #8
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	0008      	movs	r0, r1
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	0019      	movs	r1, r3
 801496a:	230a      	movs	r3, #10
 801496c:	18fb      	adds	r3, r7, r3
 801496e:	1c02      	adds	r2, r0, #0
 8014970:	801a      	strh	r2, [r3, #0]
 8014972:	2308      	movs	r3, #8
 8014974:	18fb      	adds	r3, r7, r3
 8014976:	1c0a      	adds	r2, r1, #0
 8014978:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2241      	movs	r2, #65	@ 0x41
 801497e:	5c9b      	ldrb	r3, [r3, r2]
 8014980:	b2db      	uxtb	r3, r3
 8014982:	2b20      	cmp	r3, #32
 8014984:	d000      	beq.n	8014988 <HAL_I2C_Master_Receive_DMA+0x2c>
 8014986:	e0dd      	b.n	8014b44 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	699a      	ldr	r2, [r3, #24]
 801498e:	2380      	movs	r3, #128	@ 0x80
 8014990:	021b      	lsls	r3, r3, #8
 8014992:	401a      	ands	r2, r3
 8014994:	2380      	movs	r3, #128	@ 0x80
 8014996:	021b      	lsls	r3, r3, #8
 8014998:	429a      	cmp	r2, r3
 801499a:	d101      	bne.n	80149a0 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 801499c:	2302      	movs	r3, #2
 801499e:	e0d2      	b.n	8014b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	2240      	movs	r2, #64	@ 0x40
 80149a4:	5c9b      	ldrb	r3, [r3, r2]
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d101      	bne.n	80149ae <HAL_I2C_Master_Receive_DMA+0x52>
 80149aa:	2302      	movs	r3, #2
 80149ac:	e0cb      	b.n	8014b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2240      	movs	r2, #64	@ 0x40
 80149b2:	2101      	movs	r1, #1
 80149b4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2241      	movs	r2, #65	@ 0x41
 80149ba:	2122      	movs	r1, #34	@ 0x22
 80149bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2242      	movs	r2, #66	@ 0x42
 80149c2:	2110      	movs	r1, #16
 80149c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2200      	movs	r2, #0
 80149ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	687a      	ldr	r2, [r7, #4]
 80149d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2208      	movs	r2, #8
 80149d6:	18ba      	adds	r2, r7, r2
 80149d8:	8812      	ldrh	r2, [r2, #0]
 80149da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	4a5c      	ldr	r2, [pc, #368]	@ (8014b50 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80149e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	4a5b      	ldr	r2, [pc, #364]	@ (8014b54 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80149e6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	2bff      	cmp	r3, #255	@ 0xff
 80149f0:	d906      	bls.n	8014a00 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	22ff      	movs	r2, #255	@ 0xff
 80149f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80149f8:	2380      	movs	r3, #128	@ 0x80
 80149fa:	045b      	lsls	r3, r3, #17
 80149fc:	617b      	str	r3, [r7, #20]
 80149fe:	e007      	b.n	8014a10 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014a0a:	2380      	movs	r3, #128	@ 0x80
 8014a0c:	049b      	lsls	r3, r3, #18
 8014a0e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d100      	bne.n	8014a1a <HAL_I2C_Master_Receive_DMA+0xbe>
 8014a18:	e078      	b.n	8014b0c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d023      	beq.n	8014a6a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a26:	4a4c      	ldr	r2, [pc, #304]	@ (8014b58 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8014a28:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8014b5c <HAL_I2C_Master_Receive_DMA+0x200>)
 8014a30:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a36:	2200      	movs	r2, #0
 8014a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a3e:	2200      	movs	r2, #0
 8014a40:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	3324      	adds	r3, #36	@ 0x24
 8014a4c:	0019      	movs	r1, r3
 8014a4e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014a54:	2513      	movs	r5, #19
 8014a56:	197c      	adds	r4, r7, r5
 8014a58:	f7fe fe54 	bl	8013704 <HAL_DMA_Start_IT>
 8014a5c:	0003      	movs	r3, r0
 8014a5e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014a60:	197b      	adds	r3, r7, r5
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d13d      	bne.n	8014ae4 <HAL_I2C_Master_Receive_DMA+0x188>
 8014a68:	e013      	b.n	8014a92 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2241      	movs	r2, #65	@ 0x41
 8014a6e:	2120      	movs	r1, #32
 8014a70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2242      	movs	r2, #66	@ 0x42
 8014a76:	2100      	movs	r1, #0
 8014a78:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a7e:	2280      	movs	r2, #128	@ 0x80
 8014a80:	431a      	orrs	r2, r3
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2240      	movs	r2, #64	@ 0x40
 8014a8a:	2100      	movs	r1, #0
 8014a8c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	e059      	b.n	8014b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a96:	b2da      	uxtb	r2, r3
 8014a98:	697c      	ldr	r4, [r7, #20]
 8014a9a:	230a      	movs	r3, #10
 8014a9c:	18fb      	adds	r3, r7, r3
 8014a9e:	8819      	ldrh	r1, [r3, #0]
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8014b60 <HAL_I2C_Master_Receive_DMA+0x204>)
 8014aa4:	9300      	str	r3, [sp, #0]
 8014aa6:	0023      	movs	r3, r4
 8014aa8:	f001 fd06 	bl	80164b8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ab0:	b29a      	uxth	r2, r3
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ab6:	1ad3      	subs	r3, r2, r3
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2240      	movs	r2, #64	@ 0x40
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2110      	movs	r1, #16
 8014aca:	0018      	movs	r0, r3
 8014acc:	f001 fd2e 	bl	801652c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2180      	movs	r1, #128	@ 0x80
 8014adc:	0209      	lsls	r1, r1, #8
 8014ade:	430a      	orrs	r2, r1
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	e02d      	b.n	8014b40 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2241      	movs	r2, #65	@ 0x41
 8014ae8:	2120      	movs	r1, #32
 8014aea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2242      	movs	r2, #66	@ 0x42
 8014af0:	2100      	movs	r1, #0
 8014af2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014af8:	2210      	movs	r2, #16
 8014afa:	431a      	orrs	r2, r3
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2240      	movs	r2, #64	@ 0x40
 8014b04:	2100      	movs	r1, #0
 8014b06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	e01c      	b.n	8014b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	4a15      	ldr	r2, [pc, #84]	@ (8014b64 <HAL_I2C_Master_Receive_DMA+0x208>)
 8014b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b16:	b2da      	uxtb	r2, r3
 8014b18:	2380      	movs	r3, #128	@ 0x80
 8014b1a:	049c      	lsls	r4, r3, #18
 8014b1c:	230a      	movs	r3, #10
 8014b1e:	18fb      	adds	r3, r7, r3
 8014b20:	8819      	ldrh	r1, [r3, #0]
 8014b22:	68f8      	ldr	r0, [r7, #12]
 8014b24:	4b0e      	ldr	r3, [pc, #56]	@ (8014b60 <HAL_I2C_Master_Receive_DMA+0x204>)
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	0023      	movs	r3, r4
 8014b2a:	f001 fcc5 	bl	80164b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2240      	movs	r2, #64	@ 0x40
 8014b32:	2100      	movs	r1, #0
 8014b34:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2102      	movs	r1, #2
 8014b3a:	0018      	movs	r0, r3
 8014b3c:	f001 fcf6 	bl	801652c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014b40:	2300      	movs	r3, #0
 8014b42:	e000      	b.n	8014b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014b44:	2302      	movs	r3, #2
  }
}
 8014b46:	0018      	movs	r0, r3
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	b006      	add	sp, #24
 8014b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b4e:	46c0      	nop			@ (mov r8, r8)
 8014b50:	ffff0000 	.word	0xffff0000
 8014b54:	080151d5 	.word	0x080151d5
 8014b58:	080163a9 	.word	0x080163a9
 8014b5c:	08016449 	.word	0x08016449
 8014b60:	80002400 	.word	0x80002400
 8014b64:	08014d29 	.word	0x08014d29

08014b68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	699b      	ldr	r3, [r3, #24]
 8014b76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d005      	beq.n	8014b94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	68f9      	ldr	r1, [r7, #12]
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	4798      	blx	r3
  }
}
 8014b94:	46c0      	nop			@ (mov r8, r8)
 8014b96:	46bd      	mov	sp, r7
 8014b98:	b004      	add	sp, #16
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b086      	sub	sp, #24
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	699b      	ldr	r3, [r3, #24]
 8014baa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	0a1b      	lsrs	r3, r3, #8
 8014bb8:	001a      	movs	r2, r3
 8014bba:	2301      	movs	r3, #1
 8014bbc:	4013      	ands	r3, r2
 8014bbe:	d010      	beq.n	8014be2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	09db      	lsrs	r3, r3, #7
 8014bc4:	001a      	movs	r2, r3
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8014bca:	d00a      	beq.n	8014be2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bd0:	2201      	movs	r2, #1
 8014bd2:	431a      	orrs	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2280      	movs	r2, #128	@ 0x80
 8014bde:	0052      	lsls	r2, r2, #1
 8014be0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	0a9b      	lsrs	r3, r3, #10
 8014be6:	001a      	movs	r2, r3
 8014be8:	2301      	movs	r3, #1
 8014bea:	4013      	ands	r3, r2
 8014bec:	d010      	beq.n	8014c10 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	09db      	lsrs	r3, r3, #7
 8014bf2:	001a      	movs	r2, r3
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014bf8:	d00a      	beq.n	8014c10 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bfe:	2208      	movs	r2, #8
 8014c00:	431a      	orrs	r2, r3
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	2280      	movs	r2, #128	@ 0x80
 8014c0c:	00d2      	lsls	r2, r2, #3
 8014c0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	0a5b      	lsrs	r3, r3, #9
 8014c14:	001a      	movs	r2, r3
 8014c16:	2301      	movs	r3, #1
 8014c18:	4013      	ands	r3, r2
 8014c1a:	d010      	beq.n	8014c3e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	09db      	lsrs	r3, r3, #7
 8014c20:	001a      	movs	r2, r3
 8014c22:	2301      	movs	r3, #1
 8014c24:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014c26:	d00a      	beq.n	8014c3e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c2c:	2202      	movs	r2, #2
 8014c2e:	431a      	orrs	r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2280      	movs	r2, #128	@ 0x80
 8014c3a:	0092      	lsls	r2, r2, #2
 8014c3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	220b      	movs	r2, #11
 8014c48:	4013      	ands	r3, r2
 8014c4a:	d005      	beq.n	8014c58 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8014c4c:	68fa      	ldr	r2, [r7, #12]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	0011      	movs	r1, r2
 8014c52:	0018      	movs	r0, r3
 8014c54:	f001 fa0a 	bl	801606c <I2C_ITError>
  }
}
 8014c58:	46c0      	nop			@ (mov r8, r8)
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	b006      	add	sp, #24
 8014c5e:	bd80      	pop	{r7, pc}

08014c60 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b082      	sub	sp, #8
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014c68:	46c0      	nop			@ (mov r8, r8)
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	b002      	add	sp, #8
 8014c6e:	bd80      	pop	{r7, pc}

08014c70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b082      	sub	sp, #8
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014c78:	46c0      	nop			@ (mov r8, r8)
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	b002      	add	sp, #8
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014c88:	46c0      	nop			@ (mov r8, r8)
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	b002      	add	sp, #8
 8014c8e:	bd80      	pop	{r7, pc}

08014c90 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014c98:	46c0      	nop			@ (mov r8, r8)
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	b002      	add	sp, #8
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
 8014ca8:	0008      	movs	r0, r1
 8014caa:	0011      	movs	r1, r2
 8014cac:	1cfb      	adds	r3, r7, #3
 8014cae:	1c02      	adds	r2, r0, #0
 8014cb0:	701a      	strb	r2, [r3, #0]
 8014cb2:	003b      	movs	r3, r7
 8014cb4:	1c0a      	adds	r2, r1, #0
 8014cb6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014cb8:	46c0      	nop			@ (mov r8, r8)
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	b002      	add	sp, #8
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8014cc8:	46c0      	nop			@ (mov r8, r8)
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	b002      	add	sp, #8
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8014cd8:	46c0      	nop			@ (mov r8, r8)
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	b002      	add	sp, #8
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8014ce8:	46c0      	nop			@ (mov r8, r8)
 8014cea:	46bd      	mov	sp, r7
 8014cec:	b002      	add	sp, #8
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8014cf8:	46c0      	nop			@ (mov r8, r8)
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	b002      	add	sp, #8
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8014d08:	46c0      	nop			@ (mov r8, r8)
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	b002      	add	sp, #8
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2241      	movs	r2, #65	@ 0x41
 8014d1c:	5c9b      	ldrb	r3, [r3, r2]
 8014d1e:	b2db      	uxtb	r3, r3
}
 8014d20:	0018      	movs	r0, r3
 8014d22:	46bd      	mov	sp, r7
 8014d24:	b002      	add	sp, #8
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014d28:	b590      	push	{r4, r7, lr}
 8014d2a:	b089      	sub	sp, #36	@ 0x24
 8014d2c:	af02      	add	r7, sp, #8
 8014d2e:	60f8      	str	r0, [r7, #12]
 8014d30:	60b9      	str	r1, [r7, #8]
 8014d32:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2240      	movs	r2, #64	@ 0x40
 8014d3c:	5c9b      	ldrb	r3, [r3, r2]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d101      	bne.n	8014d46 <I2C_Master_ISR_IT+0x1e>
 8014d42:	2302      	movs	r3, #2
 8014d44:	e12b      	b.n	8014f9e <I2C_Master_ISR_IT+0x276>
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2240      	movs	r2, #64	@ 0x40
 8014d4a:	2101      	movs	r1, #1
 8014d4c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	091b      	lsrs	r3, r3, #4
 8014d52:	001a      	movs	r2, r3
 8014d54:	2301      	movs	r3, #1
 8014d56:	4013      	ands	r3, r2
 8014d58:	d014      	beq.n	8014d84 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	091b      	lsrs	r3, r3, #4
 8014d5e:	001a      	movs	r2, r3
 8014d60:	2301      	movs	r3, #1
 8014d62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014d64:	d00e      	beq.n	8014d84 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2210      	movs	r2, #16
 8014d6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d72:	2204      	movs	r2, #4
 8014d74:	431a      	orrs	r2, r3
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	0018      	movs	r0, r3
 8014d7e:	f001 faa0 	bl	80162c2 <I2C_Flush_TXDR>
 8014d82:	e0f5      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	089b      	lsrs	r3, r3, #2
 8014d88:	001a      	movs	r2, r3
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	4013      	ands	r3, r2
 8014d8e:	d023      	beq.n	8014dd8 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	089b      	lsrs	r3, r3, #2
 8014d94:	001a      	movs	r2, r3
 8014d96:	2301      	movs	r3, #1
 8014d98:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014d9a:	d01d      	beq.n	8014dd8 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	2204      	movs	r2, #4
 8014da0:	4393      	bics	r3, r2
 8014da2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dae:	b2d2      	uxtb	r2, r2
 8014db0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014db6:	1c5a      	adds	r2, r3, #1
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dc0:	3b01      	subs	r3, #1
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	b29a      	uxth	r2, r3
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014dd6:	e0cb      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	085b      	lsrs	r3, r3, #1
 8014ddc:	001a      	movs	r2, r3
 8014dde:	2301      	movs	r3, #1
 8014de0:	4013      	ands	r3, r2
 8014de2:	d01e      	beq.n	8014e22 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	085b      	lsrs	r3, r3, #1
 8014de8:	001a      	movs	r2, r3
 8014dea:	2301      	movs	r3, #1
 8014dec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014dee:	d018      	beq.n	8014e22 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014df4:	781a      	ldrb	r2, [r3, #0]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e00:	1c5a      	adds	r2, r3, #1
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	b29a      	uxth	r2, r3
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014e20:	e0a6      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	09db      	lsrs	r3, r3, #7
 8014e26:	001a      	movs	r2, r3
 8014e28:	2301      	movs	r3, #1
 8014e2a:	4013      	ands	r3, r2
 8014e2c:	d100      	bne.n	8014e30 <I2C_Master_ISR_IT+0x108>
 8014e2e:	e06b      	b.n	8014f08 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	099b      	lsrs	r3, r3, #6
 8014e34:	001a      	movs	r2, r3
 8014e36:	2301      	movs	r3, #1
 8014e38:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8014e3a:	d065      	beq.n	8014f08 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d04a      	beq.n	8014edc <I2C_Master_ISR_IT+0x1b4>
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d146      	bne.n	8014edc <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	2112      	movs	r1, #18
 8014e58:	187b      	adds	r3, r7, r1
 8014e5a:	0592      	lsls	r2, r2, #22
 8014e5c:	0d92      	lsrs	r2, r2, #22
 8014e5e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	2bff      	cmp	r3, #255	@ 0xff
 8014e68:	d910      	bls.n	8014e8c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	22ff      	movs	r2, #255	@ 0xff
 8014e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e74:	b2da      	uxtb	r2, r3
 8014e76:	2380      	movs	r3, #128	@ 0x80
 8014e78:	045c      	lsls	r4, r3, #17
 8014e7a:	187b      	adds	r3, r7, r1
 8014e7c:	8819      	ldrh	r1, [r3, #0]
 8014e7e:	68f8      	ldr	r0, [r7, #12]
 8014e80:	2300      	movs	r3, #0
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	0023      	movs	r3, r4
 8014e86:	f001 fb17 	bl	80164b8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014e8a:	e03c      	b.n	8014f06 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e9a:	4a43      	ldr	r2, [pc, #268]	@ (8014fa8 <I2C_Master_ISR_IT+0x280>)
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	d00e      	beq.n	8014ebe <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ea4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014eaa:	2312      	movs	r3, #18
 8014eac:	18fb      	adds	r3, r7, r3
 8014eae:	8819      	ldrh	r1, [r3, #0]
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	0023      	movs	r3, r4
 8014eb8:	f001 fafe 	bl	80164b8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ebc:	e023      	b.n	8014f06 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ec2:	b2da      	uxtb	r2, r3
 8014ec4:	2380      	movs	r3, #128	@ 0x80
 8014ec6:	049c      	lsls	r4, r3, #18
 8014ec8:	2312      	movs	r3, #18
 8014eca:	18fb      	adds	r3, r7, r3
 8014ecc:	8819      	ldrh	r1, [r3, #0]
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	0023      	movs	r3, r4
 8014ed6:	f001 faef 	bl	80164b8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014eda:	e014      	b.n	8014f06 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	685a      	ldr	r2, [r3, #4]
 8014ee2:	2380      	movs	r3, #128	@ 0x80
 8014ee4:	049b      	lsls	r3, r3, #18
 8014ee6:	401a      	ands	r2, r3
 8014ee8:	2380      	movs	r3, #128	@ 0x80
 8014eea:	049b      	lsls	r3, r3, #18
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d004      	beq.n	8014efa <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	0018      	movs	r0, r3
 8014ef4:	f000 fd56 	bl	80159a4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014ef8:	e03a      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	2140      	movs	r1, #64	@ 0x40
 8014efe:	0018      	movs	r0, r3
 8014f00:	f001 f8b4 	bl	801606c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014f04:	e034      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
 8014f06:	e033      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	099b      	lsrs	r3, r3, #6
 8014f0c:	001a      	movs	r2, r3
 8014f0e:	2301      	movs	r3, #1
 8014f10:	4013      	ands	r3, r2
 8014f12:	d02d      	beq.n	8014f70 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	099b      	lsrs	r3, r3, #6
 8014f18:	001a      	movs	r2, r3
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014f1e:	d027      	beq.n	8014f70 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d11d      	bne.n	8014f66 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	685a      	ldr	r2, [r3, #4]
 8014f30:	2380      	movs	r3, #128	@ 0x80
 8014f32:	049b      	lsls	r3, r3, #18
 8014f34:	401a      	ands	r2, r3
 8014f36:	2380      	movs	r3, #128	@ 0x80
 8014f38:	049b      	lsls	r3, r3, #18
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d018      	beq.n	8014f70 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f42:	4a19      	ldr	r2, [pc, #100]	@ (8014fa8 <I2C_Master_ISR_IT+0x280>)
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d109      	bne.n	8014f5c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	685a      	ldr	r2, [r3, #4]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2180      	movs	r1, #128	@ 0x80
 8014f54:	01c9      	lsls	r1, r1, #7
 8014f56:	430a      	orrs	r2, r1
 8014f58:	605a      	str	r2, [r3, #4]
 8014f5a:	e009      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	0018      	movs	r0, r3
 8014f60:	f000 fd20 	bl	80159a4 <I2C_ITMasterSeqCplt>
 8014f64:	e004      	b.n	8014f70 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2140      	movs	r1, #64	@ 0x40
 8014f6a:	0018      	movs	r0, r3
 8014f6c:	f001 f87e 	bl	801606c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	095b      	lsrs	r3, r3, #5
 8014f74:	001a      	movs	r2, r3
 8014f76:	2301      	movs	r3, #1
 8014f78:	4013      	ands	r3, r2
 8014f7a:	d00b      	beq.n	8014f94 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	095b      	lsrs	r3, r3, #5
 8014f80:	001a      	movs	r2, r3
 8014f82:	2301      	movs	r3, #1
 8014f84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014f86:	d005      	beq.n	8014f94 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8014f88:	697a      	ldr	r2, [r7, #20]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	0011      	movs	r1, r2
 8014f8e:	0018      	movs	r0, r3
 8014f90:	f000 fdb0 	bl	8015af4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2240      	movs	r2, #64	@ 0x40
 8014f98:	2100      	movs	r1, #0
 8014f9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014f9c:	2300      	movs	r3, #0
}
 8014f9e:	0018      	movs	r0, r3
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	b007      	add	sp, #28
 8014fa4:	bd90      	pop	{r4, r7, pc}
 8014fa6:	46c0      	nop			@ (mov r8, r8)
 8014fa8:	ffff0000 	.word	0xffff0000

08014fac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b086      	sub	sp, #24
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	60f8      	str	r0, [r7, #12]
 8014fb4:	60b9      	str	r1, [r7, #8]
 8014fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2240      	movs	r2, #64	@ 0x40
 8014fc6:	5c9b      	ldrb	r3, [r3, r2]
 8014fc8:	2b01      	cmp	r3, #1
 8014fca:	d101      	bne.n	8014fd0 <I2C_Slave_ISR_IT+0x24>
 8014fcc:	2302      	movs	r3, #2
 8014fce:	e0fb      	b.n	80151c8 <I2C_Slave_ISR_IT+0x21c>
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2240      	movs	r2, #64	@ 0x40
 8014fd4:	2101      	movs	r1, #1
 8014fd6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	095b      	lsrs	r3, r3, #5
 8014fdc:	001a      	movs	r2, r3
 8014fde:	2301      	movs	r3, #1
 8014fe0:	4013      	ands	r3, r2
 8014fe2:	d00c      	beq.n	8014ffe <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	095b      	lsrs	r3, r3, #5
 8014fe8:	001a      	movs	r2, r3
 8014fea:	2301      	movs	r3, #1
 8014fec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014fee:	d006      	beq.n	8014ffe <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8014ff0:	693a      	ldr	r2, [r7, #16]
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	0011      	movs	r1, r2
 8014ff6:	0018      	movs	r0, r3
 8014ff8:	f000 fe4e 	bl	8015c98 <I2C_ITSlaveCplt>
 8014ffc:	e0df      	b.n	80151be <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	091b      	lsrs	r3, r3, #4
 8015002:	001a      	movs	r2, r3
 8015004:	2301      	movs	r3, #1
 8015006:	4013      	ands	r3, r2
 8015008:	d054      	beq.n	80150b4 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	091b      	lsrs	r3, r3, #4
 801500e:	001a      	movs	r2, r3
 8015010:	2301      	movs	r3, #1
 8015012:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015014:	d04e      	beq.n	80150b4 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801501a:	b29b      	uxth	r3, r3
 801501c:	2b00      	cmp	r3, #0
 801501e:	d12d      	bne.n	801507c <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	2241      	movs	r2, #65	@ 0x41
 8015024:	5c9b      	ldrb	r3, [r3, r2]
 8015026:	b2db      	uxtb	r3, r3
 8015028:	2b28      	cmp	r3, #40	@ 0x28
 801502a:	d10b      	bne.n	8015044 <I2C_Slave_ISR_IT+0x98>
 801502c:	697a      	ldr	r2, [r7, #20]
 801502e:	2380      	movs	r3, #128	@ 0x80
 8015030:	049b      	lsls	r3, r3, #18
 8015032:	429a      	cmp	r2, r3
 8015034:	d106      	bne.n	8015044 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015036:	693a      	ldr	r2, [r7, #16]
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	0011      	movs	r1, r2
 801503c:	0018      	movs	r0, r3
 801503e:	f000 ffbb 	bl	8015fb8 <I2C_ITListenCplt>
 8015042:	e036      	b.n	80150b2 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	2241      	movs	r2, #65	@ 0x41
 8015048:	5c9b      	ldrb	r3, [r3, r2]
 801504a:	b2db      	uxtb	r3, r3
 801504c:	2b29      	cmp	r3, #41	@ 0x29
 801504e:	d110      	bne.n	8015072 <I2C_Slave_ISR_IT+0xc6>
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	4a5f      	ldr	r2, [pc, #380]	@ (80151d0 <I2C_Slave_ISR_IT+0x224>)
 8015054:	4293      	cmp	r3, r2
 8015056:	d00c      	beq.n	8015072 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2210      	movs	r2, #16
 801505e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	0018      	movs	r0, r3
 8015064:	f001 f92d 	bl	80162c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	0018      	movs	r0, r3
 801506c:	f000 fcdc 	bl	8015a28 <I2C_ITSlaveSeqCplt>
 8015070:	e01f      	b.n	80150b2 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2210      	movs	r2, #16
 8015078:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801507a:	e09d      	b.n	80151b8 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2210      	movs	r2, #16
 8015082:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015088:	2204      	movs	r2, #4
 801508a:	431a      	orrs	r2, r3
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015090:	697b      	ldr	r3, [r7, #20]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d005      	beq.n	80150a2 <I2C_Slave_ISR_IT+0xf6>
 8015096:	697a      	ldr	r2, [r7, #20]
 8015098:	2380      	movs	r3, #128	@ 0x80
 801509a:	045b      	lsls	r3, r3, #17
 801509c:	429a      	cmp	r2, r3
 801509e:	d000      	beq.n	80150a2 <I2C_Slave_ISR_IT+0xf6>
 80150a0:	e08a      	b.n	80151b8 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	0011      	movs	r1, r2
 80150aa:	0018      	movs	r0, r3
 80150ac:	f000 ffde 	bl	801606c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80150b0:	e082      	b.n	80151b8 <I2C_Slave_ISR_IT+0x20c>
 80150b2:	e081      	b.n	80151b8 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	089b      	lsrs	r3, r3, #2
 80150b8:	001a      	movs	r2, r3
 80150ba:	2301      	movs	r3, #1
 80150bc:	4013      	ands	r3, r2
 80150be:	d031      	beq.n	8015124 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	089b      	lsrs	r3, r3, #2
 80150c4:	001a      	movs	r2, r3
 80150c6:	2301      	movs	r3, #1
 80150c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80150ca:	d02b      	beq.n	8015124 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d018      	beq.n	8015108 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150e0:	b2d2      	uxtb	r2, r2
 80150e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150e8:	1c5a      	adds	r2, r3, #1
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150f2:	3b01      	subs	r3, #1
 80150f4:	b29a      	uxth	r2, r3
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150fe:	b29b      	uxth	r3, r3
 8015100:	3b01      	subs	r3, #1
 8015102:	b29a      	uxth	r2, r3
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801510c:	b29b      	uxth	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d154      	bne.n	80151bc <I2C_Slave_ISR_IT+0x210>
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	4a2e      	ldr	r2, [pc, #184]	@ (80151d0 <I2C_Slave_ISR_IT+0x224>)
 8015116:	4293      	cmp	r3, r2
 8015118:	d050      	beq.n	80151bc <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	0018      	movs	r0, r3
 801511e:	f000 fc83 	bl	8015a28 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8015122:	e04b      	b.n	80151bc <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	08db      	lsrs	r3, r3, #3
 8015128:	001a      	movs	r2, r3
 801512a:	2301      	movs	r3, #1
 801512c:	4013      	ands	r3, r2
 801512e:	d00c      	beq.n	801514a <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	08db      	lsrs	r3, r3, #3
 8015134:	001a      	movs	r2, r3
 8015136:	2301      	movs	r3, #1
 8015138:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801513a:	d006      	beq.n	801514a <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801513c:	693a      	ldr	r2, [r7, #16]
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	0011      	movs	r1, r2
 8015142:	0018      	movs	r0, r3
 8015144:	f000 fb8a 	bl	801585c <I2C_ITAddrCplt>
 8015148:	e039      	b.n	80151be <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	085b      	lsrs	r3, r3, #1
 801514e:	001a      	movs	r2, r3
 8015150:	2301      	movs	r3, #1
 8015152:	4013      	ands	r3, r2
 8015154:	d033      	beq.n	80151be <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	085b      	lsrs	r3, r3, #1
 801515a:	001a      	movs	r2, r3
 801515c:	2301      	movs	r3, #1
 801515e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015160:	d02d      	beq.n	80151be <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015166:	b29b      	uxth	r3, r3
 8015168:	2b00      	cmp	r3, #0
 801516a:	d018      	beq.n	801519e <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015170:	781a      	ldrb	r2, [r3, #0]
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801517c:	1c5a      	adds	r2, r3, #1
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015186:	b29b      	uxth	r3, r3
 8015188:	3b01      	subs	r3, #1
 801518a:	b29a      	uxth	r2, r3
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015194:	3b01      	subs	r3, #1
 8015196:	b29a      	uxth	r2, r3
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801519c:	e00f      	b.n	80151be <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801519e:	697a      	ldr	r2, [r7, #20]
 80151a0:	2380      	movs	r3, #128	@ 0x80
 80151a2:	045b      	lsls	r3, r3, #17
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d002      	beq.n	80151ae <I2C_Slave_ISR_IT+0x202>
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d107      	bne.n	80151be <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	0018      	movs	r0, r3
 80151b2:	f000 fc39 	bl	8015a28 <I2C_ITSlaveSeqCplt>
 80151b6:	e002      	b.n	80151be <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 80151b8:	46c0      	nop			@ (mov r8, r8)
 80151ba:	e000      	b.n	80151be <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 80151bc:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	2240      	movs	r2, #64	@ 0x40
 80151c2:	2100      	movs	r1, #0
 80151c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80151c6:	2300      	movs	r3, #0
}
 80151c8:	0018      	movs	r0, r3
 80151ca:	46bd      	mov	sp, r7
 80151cc:	b006      	add	sp, #24
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	ffff0000 	.word	0xffff0000

080151d4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80151d4:	b590      	push	{r4, r7, lr}
 80151d6:	b089      	sub	sp, #36	@ 0x24
 80151d8:	af02      	add	r7, sp, #8
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2240      	movs	r2, #64	@ 0x40
 80151e4:	5c9b      	ldrb	r3, [r3, r2]
 80151e6:	2b01      	cmp	r3, #1
 80151e8:	d101      	bne.n	80151ee <I2C_Master_ISR_DMA+0x1a>
 80151ea:	2302      	movs	r3, #2
 80151ec:	e0f7      	b.n	80153de <I2C_Master_ISR_DMA+0x20a>
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2240      	movs	r2, #64	@ 0x40
 80151f2:	2101      	movs	r1, #1
 80151f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80151f6:	68bb      	ldr	r3, [r7, #8]
 80151f8:	091b      	lsrs	r3, r3, #4
 80151fa:	001a      	movs	r2, r3
 80151fc:	2301      	movs	r3, #1
 80151fe:	4013      	ands	r3, r2
 8015200:	d019      	beq.n	8015236 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	091b      	lsrs	r3, r3, #4
 8015206:	001a      	movs	r2, r3
 8015208:	2301      	movs	r3, #1
 801520a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801520c:	d013      	beq.n	8015236 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2210      	movs	r2, #16
 8015214:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801521a:	2204      	movs	r2, #4
 801521c:	431a      	orrs	r2, r3
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2120      	movs	r1, #32
 8015226:	0018      	movs	r0, r3
 8015228:	f001 f980 	bl	801652c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	0018      	movs	r0, r3
 8015230:	f001 f847 	bl	80162c2 <I2C_Flush_TXDR>
 8015234:	e0ce      	b.n	80153d4 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	09db      	lsrs	r3, r3, #7
 801523a:	001a      	movs	r2, r3
 801523c:	2301      	movs	r3, #1
 801523e:	4013      	ands	r3, r2
 8015240:	d100      	bne.n	8015244 <I2C_Master_ISR_DMA+0x70>
 8015242:	e07e      	b.n	8015342 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	099b      	lsrs	r3, r3, #6
 8015248:	001a      	movs	r2, r3
 801524a:	2301      	movs	r3, #1
 801524c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801524e:	d100      	bne.n	8015252 <I2C_Master_ISR_DMA+0x7e>
 8015250:	e077      	b.n	8015342 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2140      	movs	r1, #64	@ 0x40
 801525e:	438a      	bics	r2, r1
 8015260:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015266:	b29b      	uxth	r3, r3
 8015268:	2b00      	cmp	r3, #0
 801526a:	d055      	beq.n	8015318 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	b29a      	uxth	r2, r3
 8015274:	2312      	movs	r3, #18
 8015276:	18fb      	adds	r3, r7, r3
 8015278:	0592      	lsls	r2, r2, #22
 801527a:	0d92      	lsrs	r2, r2, #22
 801527c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015282:	b29b      	uxth	r3, r3
 8015284:	2bff      	cmp	r3, #255	@ 0xff
 8015286:	d906      	bls.n	8015296 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	22ff      	movs	r2, #255	@ 0xff
 801528c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801528e:	2380      	movs	r3, #128	@ 0x80
 8015290:	045b      	lsls	r3, r3, #17
 8015292:	617b      	str	r3, [r7, #20]
 8015294:	e010      	b.n	80152b8 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801529a:	b29a      	uxth	r2, r3
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152a4:	4a50      	ldr	r2, [pc, #320]	@ (80153e8 <I2C_Master_ISR_DMA+0x214>)
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d003      	beq.n	80152b2 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152ae:	617b      	str	r3, [r7, #20]
 80152b0:	e002      	b.n	80152b8 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80152b2:	2380      	movs	r3, #128	@ 0x80
 80152b4:	049b      	lsls	r3, r3, #18
 80152b6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152bc:	b2da      	uxtb	r2, r3
 80152be:	697c      	ldr	r4, [r7, #20]
 80152c0:	2312      	movs	r3, #18
 80152c2:	18fb      	adds	r3, r7, r3
 80152c4:	8819      	ldrh	r1, [r3, #0]
 80152c6:	68f8      	ldr	r0, [r7, #12]
 80152c8:	2300      	movs	r3, #0
 80152ca:	9300      	str	r3, [sp, #0]
 80152cc:	0023      	movs	r3, r4
 80152ce:	f001 f8f3 	bl	80164b8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152d6:	b29a      	uxth	r2, r3
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152dc:	1ad3      	subs	r3, r2, r3
 80152de:	b29a      	uxth	r2, r3
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	2241      	movs	r2, #65	@ 0x41
 80152e8:	5c9b      	ldrb	r3, [r3, r2]
 80152ea:	b2db      	uxtb	r3, r3
 80152ec:	2b22      	cmp	r3, #34	@ 0x22
 80152ee:	d109      	bne.n	8015304 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2180      	movs	r1, #128	@ 0x80
 80152fc:	0209      	lsls	r1, r1, #8
 80152fe:	430a      	orrs	r2, r1
 8015300:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015302:	e067      	b.n	80153d4 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2180      	movs	r1, #128	@ 0x80
 8015310:	01c9      	lsls	r1, r1, #7
 8015312:	430a      	orrs	r2, r1
 8015314:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015316:	e05d      	b.n	80153d4 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	685a      	ldr	r2, [r3, #4]
 801531e:	2380      	movs	r3, #128	@ 0x80
 8015320:	049b      	lsls	r3, r3, #18
 8015322:	401a      	ands	r2, r3
 8015324:	2380      	movs	r3, #128	@ 0x80
 8015326:	049b      	lsls	r3, r3, #18
 8015328:	429a      	cmp	r2, r3
 801532a:	d004      	beq.n	8015336 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	0018      	movs	r0, r3
 8015330:	f000 fb38 	bl	80159a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8015334:	e04e      	b.n	80153d4 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2140      	movs	r1, #64	@ 0x40
 801533a:	0018      	movs	r0, r3
 801533c:	f000 fe96 	bl	801606c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015340:	e048      	b.n	80153d4 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	099b      	lsrs	r3, r3, #6
 8015346:	001a      	movs	r2, r3
 8015348:	2301      	movs	r3, #1
 801534a:	4013      	ands	r3, r2
 801534c:	d02e      	beq.n	80153ac <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	099b      	lsrs	r3, r3, #6
 8015352:	001a      	movs	r2, r3
 8015354:	2301      	movs	r3, #1
 8015356:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015358:	d028      	beq.n	80153ac <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801535e:	b29b      	uxth	r3, r3
 8015360:	2b00      	cmp	r3, #0
 8015362:	d11d      	bne.n	80153a0 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	685a      	ldr	r2, [r3, #4]
 801536a:	2380      	movs	r3, #128	@ 0x80
 801536c:	049b      	lsls	r3, r3, #18
 801536e:	401a      	ands	r2, r3
 8015370:	2380      	movs	r3, #128	@ 0x80
 8015372:	049b      	lsls	r3, r3, #18
 8015374:	429a      	cmp	r2, r3
 8015376:	d02c      	beq.n	80153d2 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801537c:	4a1a      	ldr	r2, [pc, #104]	@ (80153e8 <I2C_Master_ISR_DMA+0x214>)
 801537e:	4293      	cmp	r3, r2
 8015380:	d109      	bne.n	8015396 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	685a      	ldr	r2, [r3, #4]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	2180      	movs	r1, #128	@ 0x80
 801538e:	01c9      	lsls	r1, r1, #7
 8015390:	430a      	orrs	r2, r1
 8015392:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8015394:	e01d      	b.n	80153d2 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	0018      	movs	r0, r3
 801539a:	f000 fb03 	bl	80159a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801539e:	e018      	b.n	80153d2 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2140      	movs	r1, #64	@ 0x40
 80153a4:	0018      	movs	r0, r3
 80153a6:	f000 fe61 	bl	801606c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80153aa:	e012      	b.n	80153d2 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	095b      	lsrs	r3, r3, #5
 80153b0:	001a      	movs	r2, r3
 80153b2:	2301      	movs	r3, #1
 80153b4:	4013      	ands	r3, r2
 80153b6:	d00d      	beq.n	80153d4 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	095b      	lsrs	r3, r3, #5
 80153bc:	001a      	movs	r2, r3
 80153be:	2301      	movs	r3, #1
 80153c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80153c2:	d007      	beq.n	80153d4 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	0011      	movs	r1, r2
 80153ca:	0018      	movs	r0, r3
 80153cc:	f000 fb92 	bl	8015af4 <I2C_ITMasterCplt>
 80153d0:	e000      	b.n	80153d4 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80153d2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2240      	movs	r2, #64	@ 0x40
 80153d8:	2100      	movs	r1, #0
 80153da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80153dc:	2300      	movs	r3, #0
}
 80153de:	0018      	movs	r0, r3
 80153e0:	46bd      	mov	sp, r7
 80153e2:	b007      	add	sp, #28
 80153e4:	bd90      	pop	{r4, r7, pc}
 80153e6:	46c0      	nop			@ (mov r8, r8)
 80153e8:	ffff0000 	.word	0xffff0000

080153ec <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80153ec:	b590      	push	{r4, r7, lr}
 80153ee:	b089      	sub	sp, #36	@ 0x24
 80153f0:	af02      	add	r7, sp, #8
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	60b9      	str	r1, [r7, #8]
 80153f6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80153f8:	4b9a      	ldr	r3, [pc, #616]	@ (8015664 <I2C_Mem_ISR_DMA+0x278>)
 80153fa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2240      	movs	r2, #64	@ 0x40
 8015400:	5c9b      	ldrb	r3, [r3, r2]
 8015402:	2b01      	cmp	r3, #1
 8015404:	d101      	bne.n	801540a <I2C_Mem_ISR_DMA+0x1e>
 8015406:	2302      	movs	r3, #2
 8015408:	e127      	b.n	801565a <I2C_Mem_ISR_DMA+0x26e>
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2240      	movs	r2, #64	@ 0x40
 801540e:	2101      	movs	r1, #1
 8015410:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015412:	68bb      	ldr	r3, [r7, #8]
 8015414:	091b      	lsrs	r3, r3, #4
 8015416:	001a      	movs	r2, r3
 8015418:	2301      	movs	r3, #1
 801541a:	4013      	ands	r3, r2
 801541c:	d019      	beq.n	8015452 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	091b      	lsrs	r3, r3, #4
 8015422:	001a      	movs	r2, r3
 8015424:	2301      	movs	r3, #1
 8015426:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015428:	d013      	beq.n	8015452 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2210      	movs	r2, #16
 8015430:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015436:	2204      	movs	r2, #4
 8015438:	431a      	orrs	r2, r3
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2120      	movs	r1, #32
 8015442:	0018      	movs	r0, r3
 8015444:	f001 f872 	bl	801652c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	0018      	movs	r0, r3
 801544c:	f000 ff39 	bl	80162c2 <I2C_Flush_TXDR>
 8015450:	e0fe      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	085b      	lsrs	r3, r3, #1
 8015456:	001a      	movs	r2, r3
 8015458:	2301      	movs	r3, #1
 801545a:	4013      	ands	r3, r2
 801545c:	d00f      	beq.n	801547e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	085b      	lsrs	r3, r3, #1
 8015462:	001a      	movs	r2, r3
 8015464:	2301      	movs	r3, #1
 8015466:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015468:	d009      	beq.n	801547e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	68fa      	ldr	r2, [r7, #12]
 8015470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015472:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2201      	movs	r2, #1
 8015478:	4252      	negs	r2, r2
 801547a:	651a      	str	r2, [r3, #80]	@ 0x50
 801547c:	e0e8      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	09db      	lsrs	r3, r3, #7
 8015482:	001a      	movs	r2, r3
 8015484:	2301      	movs	r3, #1
 8015486:	4013      	ands	r3, r2
 8015488:	d065      	beq.n	8015556 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	099b      	lsrs	r3, r3, #6
 801548e:	001a      	movs	r2, r3
 8015490:	2301      	movs	r3, #1
 8015492:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015494:	d05f      	beq.n	8015556 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	2101      	movs	r1, #1
 801549a:	0018      	movs	r0, r3
 801549c:	f001 f8d0 	bl	8016640 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2110      	movs	r1, #16
 80154a4:	0018      	movs	r0, r3
 80154a6:	f001 f841 	bl	801652c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d04a      	beq.n	801554a <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	2bff      	cmp	r3, #255	@ 0xff
 80154bc:	d910      	bls.n	80154e0 <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	22ff      	movs	r2, #255	@ 0xff
 80154c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154c8:	b299      	uxth	r1, r3
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80154ce:	b2da      	uxtb	r2, r3
 80154d0:	2380      	movs	r3, #128	@ 0x80
 80154d2:	045b      	lsls	r3, r3, #17
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	2400      	movs	r4, #0
 80154d8:	9400      	str	r4, [sp, #0]
 80154da:	f000 ffed 	bl	80164b8 <I2C_TransferConfig>
 80154de:	e011      	b.n	8015504 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154e4:	b29a      	uxth	r2, r3
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154ee:	b299      	uxth	r1, r3
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80154f4:	b2da      	uxtb	r2, r3
 80154f6:	2380      	movs	r3, #128	@ 0x80
 80154f8:	049b      	lsls	r3, r3, #18
 80154fa:	68f8      	ldr	r0, [r7, #12]
 80154fc:	2400      	movs	r4, #0
 80154fe:	9400      	str	r4, [sp, #0]
 8015500:	f000 ffda 	bl	80164b8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015508:	b29a      	uxth	r2, r3
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801550e:	1ad3      	subs	r3, r2, r3
 8015510:	b29a      	uxth	r2, r3
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2241      	movs	r2, #65	@ 0x41
 801551a:	5c9b      	ldrb	r3, [r3, r2]
 801551c:	b2db      	uxtb	r3, r3
 801551e:	2b22      	cmp	r3, #34	@ 0x22
 8015520:	d109      	bne.n	8015536 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	681a      	ldr	r2, [r3, #0]
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	2180      	movs	r1, #128	@ 0x80
 801552e:	0209      	lsls	r1, r1, #8
 8015530:	430a      	orrs	r2, r1
 8015532:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015534:	e08c      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	2180      	movs	r1, #128	@ 0x80
 8015542:	01c9      	lsls	r1, r1, #7
 8015544:	430a      	orrs	r2, r1
 8015546:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015548:	e082      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2140      	movs	r1, #64	@ 0x40
 801554e:	0018      	movs	r0, r3
 8015550:	f000 fd8c 	bl	801606c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015554:	e07c      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	099b      	lsrs	r3, r3, #6
 801555a:	001a      	movs	r2, r3
 801555c:	2301      	movs	r3, #1
 801555e:	4013      	ands	r3, r2
 8015560:	d064      	beq.n	801562c <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	099b      	lsrs	r3, r3, #6
 8015566:	001a      	movs	r2, r3
 8015568:	2301      	movs	r3, #1
 801556a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801556c:	d05e      	beq.n	801562c <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2101      	movs	r1, #1
 8015572:	0018      	movs	r0, r3
 8015574:	f001 f864 	bl	8016640 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	2110      	movs	r1, #16
 801557c:	0018      	movs	r0, r3
 801557e:	f000 ffd5 	bl	801652c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2241      	movs	r2, #65	@ 0x41
 8015586:	5c9b      	ldrb	r3, [r3, r2]
 8015588:	b2db      	uxtb	r3, r3
 801558a:	2b22      	cmp	r3, #34	@ 0x22
 801558c:	d101      	bne.n	8015592 <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
 801558e:	4b36      	ldr	r3, [pc, #216]	@ (8015668 <I2C_Mem_ISR_DMA+0x27c>)
 8015590:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015596:	b29b      	uxth	r3, r3
 8015598:	2bff      	cmp	r3, #255	@ 0xff
 801559a:	d911      	bls.n	80155c0 <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	22ff      	movs	r2, #255	@ 0xff
 80155a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155a6:	b299      	uxth	r1, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155ac:	b2da      	uxtb	r2, r3
 80155ae:	2380      	movs	r3, #128	@ 0x80
 80155b0:	045c      	lsls	r4, r3, #17
 80155b2:	68f8      	ldr	r0, [r7, #12]
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	9300      	str	r3, [sp, #0]
 80155b8:	0023      	movs	r3, r4
 80155ba:	f000 ff7d 	bl	80164b8 <I2C_TransferConfig>
 80155be:	e012      	b.n	80155e6 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155ce:	b299      	uxth	r1, r3
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155d4:	b2da      	uxtb	r2, r3
 80155d6:	2380      	movs	r3, #128	@ 0x80
 80155d8:	049c      	lsls	r4, r3, #18
 80155da:	68f8      	ldr	r0, [r7, #12]
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	0023      	movs	r3, r4
 80155e2:	f000 ff69 	bl	80164b8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155f0:	1ad3      	subs	r3, r2, r3
 80155f2:	b29a      	uxth	r2, r3
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2241      	movs	r2, #65	@ 0x41
 80155fc:	5c9b      	ldrb	r3, [r3, r2]
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	2b22      	cmp	r3, #34	@ 0x22
 8015602:	d109      	bne.n	8015618 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2180      	movs	r1, #128	@ 0x80
 8015610:	0209      	lsls	r1, r1, #8
 8015612:	430a      	orrs	r2, r1
 8015614:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015616:	e01b      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2180      	movs	r1, #128	@ 0x80
 8015624:	01c9      	lsls	r1, r1, #7
 8015626:	430a      	orrs	r2, r1
 8015628:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801562a:	e011      	b.n	8015650 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	095b      	lsrs	r3, r3, #5
 8015630:	001a      	movs	r2, r3
 8015632:	2301      	movs	r3, #1
 8015634:	4013      	ands	r3, r2
 8015636:	d00b      	beq.n	8015650 <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	095b      	lsrs	r3, r3, #5
 801563c:	001a      	movs	r2, r3
 801563e:	2301      	movs	r3, #1
 8015640:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015642:	d005      	beq.n	8015650 <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8015644:	68ba      	ldr	r2, [r7, #8]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	0011      	movs	r1, r2
 801564a:	0018      	movs	r0, r3
 801564c:	f000 fa52 	bl	8015af4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2240      	movs	r2, #64	@ 0x40
 8015654:	2100      	movs	r1, #0
 8015656:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015658:	2300      	movs	r3, #0
}
 801565a:	0018      	movs	r0, r3
 801565c:	46bd      	mov	sp, r7
 801565e:	b007      	add	sp, #28
 8015660:	bd90      	pop	{r4, r7, pc}
 8015662:	46c0      	nop			@ (mov r8, r8)
 8015664:	80002000 	.word	0x80002000
 8015668:	80002400 	.word	0x80002400

0801566c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b088      	sub	sp, #32
 8015670:	af00      	add	r7, sp, #0
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801567c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801567e:	2300      	movs	r3, #0
 8015680:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2240      	movs	r2, #64	@ 0x40
 8015686:	5c9b      	ldrb	r3, [r3, r2]
 8015688:	2b01      	cmp	r3, #1
 801568a:	d101      	bne.n	8015690 <I2C_Slave_ISR_DMA+0x24>
 801568c:	2302      	movs	r3, #2
 801568e:	e0de      	b.n	801584e <I2C_Slave_ISR_DMA+0x1e2>
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2240      	movs	r2, #64	@ 0x40
 8015694:	2101      	movs	r1, #1
 8015696:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	095b      	lsrs	r3, r3, #5
 801569c:	001a      	movs	r2, r3
 801569e:	2301      	movs	r3, #1
 80156a0:	4013      	ands	r3, r2
 80156a2:	d00c      	beq.n	80156be <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	095b      	lsrs	r3, r3, #5
 80156a8:	001a      	movs	r2, r3
 80156aa:	2301      	movs	r3, #1
 80156ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80156ae:	d006      	beq.n	80156be <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80156b0:	68ba      	ldr	r2, [r7, #8]
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	0011      	movs	r1, r2
 80156b6:	0018      	movs	r0, r3
 80156b8:	f000 faee 	bl	8015c98 <I2C_ITSlaveCplt>
 80156bc:	e0c2      	b.n	8015844 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	091b      	lsrs	r3, r3, #4
 80156c2:	001a      	movs	r2, r3
 80156c4:	2301      	movs	r3, #1
 80156c6:	4013      	ands	r3, r2
 80156c8:	d100      	bne.n	80156cc <I2C_Slave_ISR_DMA+0x60>
 80156ca:	e0a9      	b.n	8015820 <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	091b      	lsrs	r3, r3, #4
 80156d0:	001a      	movs	r2, r3
 80156d2:	2301      	movs	r3, #1
 80156d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80156d6:	d100      	bne.n	80156da <I2C_Slave_ISR_DMA+0x6e>
 80156d8:	e0a2      	b.n	8015820 <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	0b9b      	lsrs	r3, r3, #14
 80156de:	001a      	movs	r2, r3
 80156e0:	2301      	movs	r3, #1
 80156e2:	4013      	ands	r3, r2
 80156e4:	d106      	bne.n	80156f4 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	0bdb      	lsrs	r3, r3, #15
 80156ea:	001a      	movs	r2, r3
 80156ec:	2301      	movs	r3, #1
 80156ee:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80156f0:	d100      	bne.n	80156f4 <I2C_Slave_ISR_DMA+0x88>
 80156f2:	e08e      	b.n	8015812 <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d00d      	beq.n	8015718 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	0bdb      	lsrs	r3, r3, #15
 8015700:	001a      	movs	r2, r3
 8015702:	2301      	movs	r3, #1
 8015704:	4013      	ands	r3, r2
 8015706:	d007      	beq.n	8015718 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d101      	bne.n	8015718 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
 8015714:	2301      	movs	r3, #1
 8015716:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801571c:	2b00      	cmp	r3, #0
 801571e:	d00d      	beq.n	801573c <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	0b9b      	lsrs	r3, r3, #14
 8015724:	001a      	movs	r2, r3
 8015726:	2301      	movs	r3, #1
 8015728:	4013      	ands	r3, r2
 801572a:	d007      	beq.n	801573c <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d101      	bne.n	801573c <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
 8015738:	2301      	movs	r3, #1
 801573a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801573c:	69fb      	ldr	r3, [r7, #28]
 801573e:	2b01      	cmp	r3, #1
 8015740:	d12d      	bne.n	801579e <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2241      	movs	r2, #65	@ 0x41
 8015746:	5c9b      	ldrb	r3, [r3, r2]
 8015748:	b2db      	uxtb	r3, r3
 801574a:	2b28      	cmp	r3, #40	@ 0x28
 801574c:	d10b      	bne.n	8015766 <I2C_Slave_ISR_DMA+0xfa>
 801574e:	69ba      	ldr	r2, [r7, #24]
 8015750:	2380      	movs	r3, #128	@ 0x80
 8015752:	049b      	lsls	r3, r3, #18
 8015754:	429a      	cmp	r2, r3
 8015756:	d106      	bne.n	8015766 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	0011      	movs	r1, r2
 801575e:	0018      	movs	r0, r3
 8015760:	f000 fc2a 	bl	8015fb8 <I2C_ITListenCplt>
 8015764:	e054      	b.n	8015810 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2241      	movs	r2, #65	@ 0x41
 801576a:	5c9b      	ldrb	r3, [r3, r2]
 801576c:	b2db      	uxtb	r3, r3
 801576e:	2b29      	cmp	r3, #41	@ 0x29
 8015770:	d110      	bne.n	8015794 <I2C_Slave_ISR_DMA+0x128>
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	4a38      	ldr	r2, [pc, #224]	@ (8015858 <I2C_Slave_ISR_DMA+0x1ec>)
 8015776:	4293      	cmp	r3, r2
 8015778:	d00c      	beq.n	8015794 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	2210      	movs	r2, #16
 8015780:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	0018      	movs	r0, r3
 8015786:	f000 fd9c 	bl	80162c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	0018      	movs	r0, r3
 801578e:	f000 f94b 	bl	8015a28 <I2C_ITSlaveSeqCplt>
 8015792:	e03d      	b.n	8015810 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2210      	movs	r2, #16
 801579a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801579c:	e03e      	b.n	801581c <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2210      	movs	r2, #16
 80157a4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157aa:	2204      	movs	r2, #4
 80157ac:	431a      	orrs	r2, r3
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80157b2:	2317      	movs	r3, #23
 80157b4:	18fb      	adds	r3, r7, r3
 80157b6:	68fa      	ldr	r2, [r7, #12]
 80157b8:	2141      	movs	r1, #65	@ 0x41
 80157ba:	5c52      	ldrb	r2, [r2, r1]
 80157bc:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d004      	beq.n	80157ce <I2C_Slave_ISR_DMA+0x162>
 80157c4:	69ba      	ldr	r2, [r7, #24]
 80157c6:	2380      	movs	r3, #128	@ 0x80
 80157c8:	045b      	lsls	r3, r3, #17
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d126      	bne.n	801581c <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80157ce:	2217      	movs	r2, #23
 80157d0:	18bb      	adds	r3, r7, r2
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	2b21      	cmp	r3, #33	@ 0x21
 80157d6:	d003      	beq.n	80157e0 <I2C_Slave_ISR_DMA+0x174>
 80157d8:	18bb      	adds	r3, r7, r2
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	2b29      	cmp	r3, #41	@ 0x29
 80157de:	d103      	bne.n	80157e8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2221      	movs	r2, #33	@ 0x21
 80157e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80157e6:	e00b      	b.n	8015800 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80157e8:	2217      	movs	r2, #23
 80157ea:	18bb      	adds	r3, r7, r2
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	2b22      	cmp	r3, #34	@ 0x22
 80157f0:	d003      	beq.n	80157fa <I2C_Slave_ISR_DMA+0x18e>
 80157f2:	18bb      	adds	r3, r7, r2
 80157f4:	781b      	ldrb	r3, [r3, #0]
 80157f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80157f8:	d102      	bne.n	8015800 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	2222      	movs	r2, #34	@ 0x22
 80157fe:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	0011      	movs	r1, r2
 8015808:	0018      	movs	r0, r3
 801580a:	f000 fc2f 	bl	801606c <I2C_ITError>
      if (treatdmanack == 1U)
 801580e:	e005      	b.n	801581c <I2C_Slave_ISR_DMA+0x1b0>
 8015810:	e004      	b.n	801581c <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	2210      	movs	r2, #16
 8015818:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801581a:	e013      	b.n	8015844 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
 801581c:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801581e:	e011      	b.n	8015844 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	08db      	lsrs	r3, r3, #3
 8015824:	001a      	movs	r2, r3
 8015826:	2301      	movs	r3, #1
 8015828:	4013      	ands	r3, r2
 801582a:	d00b      	beq.n	8015844 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	08db      	lsrs	r3, r3, #3
 8015830:	001a      	movs	r2, r3
 8015832:	2301      	movs	r3, #1
 8015834:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015836:	d005      	beq.n	8015844 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8015838:	68ba      	ldr	r2, [r7, #8]
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	0011      	movs	r1, r2
 801583e:	0018      	movs	r0, r3
 8015840:	f000 f80c 	bl	801585c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	2240      	movs	r2, #64	@ 0x40
 8015848:	2100      	movs	r1, #0
 801584a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	0018      	movs	r0, r3
 8015850:	46bd      	mov	sp, r7
 8015852:	b008      	add	sp, #32
 8015854:	bd80      	pop	{r7, pc}
 8015856:	46c0      	nop			@ (mov r8, r8)
 8015858:	ffff0000 	.word	0xffff0000

0801585c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801585c:	b5b0      	push	{r4, r5, r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2241      	movs	r2, #65	@ 0x41
 801586a:	5c9b      	ldrb	r3, [r3, r2]
 801586c:	b2db      	uxtb	r3, r3
 801586e:	001a      	movs	r2, r3
 8015870:	2328      	movs	r3, #40	@ 0x28
 8015872:	4013      	ands	r3, r2
 8015874:	2b28      	cmp	r3, #40	@ 0x28
 8015876:	d000      	beq.n	801587a <I2C_ITAddrCplt+0x1e>
 8015878:	e088      	b.n	801598c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	699b      	ldr	r3, [r3, #24]
 8015880:	0c1b      	lsrs	r3, r3, #16
 8015882:	b2da      	uxtb	r2, r3
 8015884:	250f      	movs	r5, #15
 8015886:	197b      	adds	r3, r7, r5
 8015888:	2101      	movs	r1, #1
 801588a:	400a      	ands	r2, r1
 801588c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	699b      	ldr	r3, [r3, #24]
 8015894:	0c1b      	lsrs	r3, r3, #16
 8015896:	b29a      	uxth	r2, r3
 8015898:	200c      	movs	r0, #12
 801589a:	183b      	adds	r3, r7, r0
 801589c:	21fe      	movs	r1, #254	@ 0xfe
 801589e:	400a      	ands	r2, r1
 80158a0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	240a      	movs	r4, #10
 80158ac:	193b      	adds	r3, r7, r4
 80158ae:	0592      	lsls	r2, r2, #22
 80158b0:	0d92      	lsrs	r2, r2, #22
 80158b2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	2308      	movs	r3, #8
 80158be:	18fb      	adds	r3, r7, r3
 80158c0:	21fe      	movs	r1, #254	@ 0xfe
 80158c2:	400a      	ands	r2, r1
 80158c4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	2b02      	cmp	r3, #2
 80158cc:	d148      	bne.n	8015960 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80158ce:	0021      	movs	r1, r4
 80158d0:	187b      	adds	r3, r7, r1
 80158d2:	881b      	ldrh	r3, [r3, #0]
 80158d4:	09db      	lsrs	r3, r3, #7
 80158d6:	b29a      	uxth	r2, r3
 80158d8:	183b      	adds	r3, r7, r0
 80158da:	881b      	ldrh	r3, [r3, #0]
 80158dc:	4053      	eors	r3, r2
 80158de:	b29b      	uxth	r3, r3
 80158e0:	001a      	movs	r2, r3
 80158e2:	2306      	movs	r3, #6
 80158e4:	4013      	ands	r3, r2
 80158e6:	d120      	bne.n	801592a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80158e8:	183b      	adds	r3, r7, r0
 80158ea:	187a      	adds	r2, r7, r1
 80158ec:	8812      	ldrh	r2, [r2, #0]
 80158ee:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80158f4:	1c5a      	adds	r2, r3, #1
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80158fe:	2b02      	cmp	r3, #2
 8015900:	d14c      	bne.n	801599c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2200      	movs	r2, #0
 8015906:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2208      	movs	r2, #8
 801590e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2240      	movs	r2, #64	@ 0x40
 8015914:	2100      	movs	r1, #0
 8015916:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015918:	183b      	adds	r3, r7, r0
 801591a:	881a      	ldrh	r2, [r3, #0]
 801591c:	197b      	adds	r3, r7, r5
 801591e:	7819      	ldrb	r1, [r3, #0]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	0018      	movs	r0, r3
 8015924:	f7ff f9bc 	bl	8014ca0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8015928:	e038      	b.n	801599c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801592a:	240c      	movs	r4, #12
 801592c:	193b      	adds	r3, r7, r4
 801592e:	2208      	movs	r2, #8
 8015930:	18ba      	adds	r2, r7, r2
 8015932:	8812      	ldrh	r2, [r2, #0]
 8015934:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015936:	2380      	movs	r3, #128	@ 0x80
 8015938:	021a      	lsls	r2, r3, #8
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	0011      	movs	r1, r2
 801593e:	0018      	movs	r0, r3
 8015940:	f000 fe7e 	bl	8016640 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2240      	movs	r2, #64	@ 0x40
 8015948:	2100      	movs	r1, #0
 801594a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801594c:	193b      	adds	r3, r7, r4
 801594e:	881a      	ldrh	r2, [r3, #0]
 8015950:	230f      	movs	r3, #15
 8015952:	18fb      	adds	r3, r7, r3
 8015954:	7819      	ldrb	r1, [r3, #0]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	0018      	movs	r0, r3
 801595a:	f7ff f9a1 	bl	8014ca0 <HAL_I2C_AddrCallback>
}
 801595e:	e01d      	b.n	801599c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015960:	2380      	movs	r3, #128	@ 0x80
 8015962:	021a      	lsls	r2, r3, #8
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	0011      	movs	r1, r2
 8015968:	0018      	movs	r0, r3
 801596a:	f000 fe69 	bl	8016640 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2240      	movs	r2, #64	@ 0x40
 8015972:	2100      	movs	r1, #0
 8015974:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015976:	230c      	movs	r3, #12
 8015978:	18fb      	adds	r3, r7, r3
 801597a:	881a      	ldrh	r2, [r3, #0]
 801597c:	230f      	movs	r3, #15
 801597e:	18fb      	adds	r3, r7, r3
 8015980:	7819      	ldrb	r1, [r3, #0]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	0018      	movs	r0, r3
 8015986:	f7ff f98b 	bl	8014ca0 <HAL_I2C_AddrCallback>
}
 801598a:	e007      	b.n	801599c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2208      	movs	r2, #8
 8015992:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2240      	movs	r2, #64	@ 0x40
 8015998:	2100      	movs	r1, #0
 801599a:	5499      	strb	r1, [r3, r2]
}
 801599c:	46c0      	nop			@ (mov r8, r8)
 801599e:	46bd      	mov	sp, r7
 80159a0:	b004      	add	sp, #16
 80159a2:	bdb0      	pop	{r4, r5, r7, pc}

080159a4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2242      	movs	r2, #66	@ 0x42
 80159b0:	2100      	movs	r1, #0
 80159b2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2241      	movs	r2, #65	@ 0x41
 80159b8:	5c9b      	ldrb	r3, [r3, r2]
 80159ba:	b2db      	uxtb	r3, r3
 80159bc:	2b21      	cmp	r3, #33	@ 0x21
 80159be:	d117      	bne.n	80159f0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2241      	movs	r2, #65	@ 0x41
 80159c4:	2120      	movs	r1, #32
 80159c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2211      	movs	r2, #17
 80159cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2200      	movs	r2, #0
 80159d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2101      	movs	r1, #1
 80159d8:	0018      	movs	r0, r3
 80159da:	f000 fe31 	bl	8016640 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2240      	movs	r2, #64	@ 0x40
 80159e2:	2100      	movs	r1, #0
 80159e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	0018      	movs	r0, r3
 80159ea:	f7ff f939 	bl	8014c60 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80159ee:	e016      	b.n	8015a1e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2241      	movs	r2, #65	@ 0x41
 80159f4:	2120      	movs	r1, #32
 80159f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2212      	movs	r2, #18
 80159fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2200      	movs	r2, #0
 8015a02:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2102      	movs	r1, #2
 8015a08:	0018      	movs	r0, r3
 8015a0a:	f000 fe19 	bl	8016640 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2240      	movs	r2, #64	@ 0x40
 8015a12:	2100      	movs	r1, #0
 8015a14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	0018      	movs	r0, r3
 8015a1a:	f7ff f929 	bl	8014c70 <HAL_I2C_MasterRxCpltCallback>
}
 8015a1e:	46c0      	nop			@ (mov r8, r8)
 8015a20:	46bd      	mov	sp, r7
 8015a22:	b002      	add	sp, #8
 8015a24:	bd80      	pop	{r7, pc}
	...

08015a28 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2242      	movs	r2, #66	@ 0x42
 8015a3c:	2100      	movs	r1, #0
 8015a3e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	0b9b      	lsrs	r3, r3, #14
 8015a44:	001a      	movs	r2, r3
 8015a46:	2301      	movs	r3, #1
 8015a48:	4013      	ands	r3, r2
 8015a4a:	d008      	beq.n	8015a5e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	4925      	ldr	r1, [pc, #148]	@ (8015aec <I2C_ITSlaveSeqCplt+0xc4>)
 8015a58:	400a      	ands	r2, r1
 8015a5a:	601a      	str	r2, [r3, #0]
 8015a5c:	e00d      	b.n	8015a7a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	0bdb      	lsrs	r3, r3, #15
 8015a62:	001a      	movs	r2, r3
 8015a64:	2301      	movs	r3, #1
 8015a66:	4013      	ands	r3, r2
 8015a68:	d007      	beq.n	8015a7a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	681a      	ldr	r2, [r3, #0]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	491e      	ldr	r1, [pc, #120]	@ (8015af0 <I2C_ITSlaveSeqCplt+0xc8>)
 8015a76:	400a      	ands	r2, r1
 8015a78:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2241      	movs	r2, #65	@ 0x41
 8015a7e:	5c9b      	ldrb	r3, [r3, r2]
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b29      	cmp	r3, #41	@ 0x29
 8015a84:	d114      	bne.n	8015ab0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2241      	movs	r2, #65	@ 0x41
 8015a8a:	2128      	movs	r1, #40	@ 0x28
 8015a8c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	2221      	movs	r2, #33	@ 0x21
 8015a92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2101      	movs	r1, #1
 8015a98:	0018      	movs	r0, r3
 8015a9a:	f000 fdd1 	bl	8016640 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2240      	movs	r2, #64	@ 0x40
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	0018      	movs	r0, r3
 8015aaa:	f7ff f8e9 	bl	8014c80 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015aae:	e019      	b.n	8015ae4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2241      	movs	r2, #65	@ 0x41
 8015ab4:	5c9b      	ldrb	r3, [r3, r2]
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8015aba:	d113      	bne.n	8015ae4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2241      	movs	r2, #65	@ 0x41
 8015ac0:	2128      	movs	r1, #40	@ 0x28
 8015ac2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2222      	movs	r2, #34	@ 0x22
 8015ac8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2102      	movs	r1, #2
 8015ace:	0018      	movs	r0, r3
 8015ad0:	f000 fdb6 	bl	8016640 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2240      	movs	r2, #64	@ 0x40
 8015ad8:	2100      	movs	r1, #0
 8015ada:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	0018      	movs	r0, r3
 8015ae0:	f7ff f8d6 	bl	8014c90 <HAL_I2C_SlaveRxCpltCallback>
}
 8015ae4:	46c0      	nop			@ (mov r8, r8)
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	b004      	add	sp, #16
 8015aea:	bd80      	pop	{r7, pc}
 8015aec:	ffffbfff 	.word	0xffffbfff
 8015af0:	ffff7fff 	.word	0xffff7fff

08015af4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	2220      	movs	r2, #32
 8015b08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2241      	movs	r2, #65	@ 0x41
 8015b0e:	5c9b      	ldrb	r3, [r3, r2]
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	2b21      	cmp	r3, #33	@ 0x21
 8015b14:	d108      	bne.n	8015b28 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2101      	movs	r1, #1
 8015b1a:	0018      	movs	r0, r3
 8015b1c:	f000 fd90 	bl	8016640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2211      	movs	r2, #17
 8015b24:	631a      	str	r2, [r3, #48]	@ 0x30
 8015b26:	e00d      	b.n	8015b44 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2241      	movs	r2, #65	@ 0x41
 8015b2c:	5c9b      	ldrb	r3, [r3, r2]
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	2b22      	cmp	r3, #34	@ 0x22
 8015b32:	d107      	bne.n	8015b44 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2102      	movs	r1, #2
 8015b38:	0018      	movs	r0, r3
 8015b3a:	f000 fd81 	bl	8016640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2212      	movs	r2, #18
 8015b42:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	685a      	ldr	r2, [r3, #4]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	4950      	ldr	r1, [pc, #320]	@ (8015c90 <I2C_ITMasterCplt+0x19c>)
 8015b50:	400a      	ands	r2, r1
 8015b52:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2200      	movs	r2, #0
 8015b58:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8015c94 <I2C_ITMasterCplt+0x1a0>)
 8015b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	091b      	lsrs	r3, r3, #4
 8015b64:	001a      	movs	r2, r3
 8015b66:	2301      	movs	r3, #1
 8015b68:	4013      	ands	r3, r2
 8015b6a:	d009      	beq.n	8015b80 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2210      	movs	r2, #16
 8015b72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b78:	2204      	movs	r2, #4
 8015b7a:	431a      	orrs	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	2241      	movs	r2, #65	@ 0x41
 8015b84:	5c9b      	ldrb	r3, [r3, r2]
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	2b60      	cmp	r3, #96	@ 0x60
 8015b8a:	d10b      	bne.n	8015ba4 <I2C_ITMasterCplt+0xb0>
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	089b      	lsrs	r3, r3, #2
 8015b90:	001a      	movs	r2, r3
 8015b92:	2301      	movs	r3, #1
 8015b94:	4013      	ands	r3, r2
 8015b96:	d005      	beq.n	8015ba4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b9e:	b2db      	uxtb	r3, r3
 8015ba0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8015ba2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	0018      	movs	r0, r3
 8015ba8:	f000 fb8b 	bl	80162c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bb0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2241      	movs	r2, #65	@ 0x41
 8015bb6:	5c9b      	ldrb	r3, [r3, r2]
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2b60      	cmp	r3, #96	@ 0x60
 8015bbc:	d002      	beq.n	8015bc4 <I2C_ITMasterCplt+0xd0>
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d007      	beq.n	8015bd4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	0011      	movs	r1, r2
 8015bcc:	0018      	movs	r0, r3
 8015bce:	f000 fa4d 	bl	801606c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015bd2:	e058      	b.n	8015c86 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2241      	movs	r2, #65	@ 0x41
 8015bd8:	5c9b      	ldrb	r3, [r3, r2]
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	2b21      	cmp	r3, #33	@ 0x21
 8015bde:	d126      	bne.n	8015c2e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2241      	movs	r2, #65	@ 0x41
 8015be4:	2120      	movs	r1, #32
 8015be6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2242      	movs	r2, #66	@ 0x42
 8015bf2:	5c9b      	ldrb	r3, [r3, r2]
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b40      	cmp	r3, #64	@ 0x40
 8015bf8:	d10c      	bne.n	8015c14 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2242      	movs	r2, #66	@ 0x42
 8015bfe:	2100      	movs	r1, #0
 8015c00:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2240      	movs	r2, #64	@ 0x40
 8015c06:	2100      	movs	r1, #0
 8015c08:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	0018      	movs	r0, r3
 8015c0e:	f7ff f85f 	bl	8014cd0 <HAL_I2C_MemTxCpltCallback>
}
 8015c12:	e038      	b.n	8015c86 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2242      	movs	r2, #66	@ 0x42
 8015c18:	2100      	movs	r1, #0
 8015c1a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2240      	movs	r2, #64	@ 0x40
 8015c20:	2100      	movs	r1, #0
 8015c22:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	0018      	movs	r0, r3
 8015c28:	f7ff f81a 	bl	8014c60 <HAL_I2C_MasterTxCpltCallback>
}
 8015c2c:	e02b      	b.n	8015c86 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2241      	movs	r2, #65	@ 0x41
 8015c32:	5c9b      	ldrb	r3, [r3, r2]
 8015c34:	b2db      	uxtb	r3, r3
 8015c36:	2b22      	cmp	r3, #34	@ 0x22
 8015c38:	d125      	bne.n	8015c86 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	2241      	movs	r2, #65	@ 0x41
 8015c3e:	2120      	movs	r1, #32
 8015c40:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2200      	movs	r2, #0
 8015c46:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2242      	movs	r2, #66	@ 0x42
 8015c4c:	5c9b      	ldrb	r3, [r3, r2]
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b40      	cmp	r3, #64	@ 0x40
 8015c52:	d10c      	bne.n	8015c6e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2242      	movs	r2, #66	@ 0x42
 8015c58:	2100      	movs	r1, #0
 8015c5a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2240      	movs	r2, #64	@ 0x40
 8015c60:	2100      	movs	r1, #0
 8015c62:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	0018      	movs	r0, r3
 8015c68:	f7ff f83a 	bl	8014ce0 <HAL_I2C_MemRxCpltCallback>
}
 8015c6c:	e00b      	b.n	8015c86 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2242      	movs	r2, #66	@ 0x42
 8015c72:	2100      	movs	r1, #0
 8015c74:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2240      	movs	r2, #64	@ 0x40
 8015c7a:	2100      	movs	r1, #0
 8015c7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	0018      	movs	r0, r3
 8015c82:	f7fe fff5 	bl	8014c70 <HAL_I2C_MasterRxCpltCallback>
}
 8015c86:	46c0      	nop			@ (mov r8, r8)
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	b006      	add	sp, #24
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	46c0      	nop			@ (mov r8, r8)
 8015c90:	fe00e800 	.word	0xfe00e800
 8015c94:	ffff0000 	.word	0xffff0000

08015c98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b086      	sub	sp, #24
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cb2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8015cb4:	200b      	movs	r0, #11
 8015cb6:	183b      	adds	r3, r7, r0
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	2141      	movs	r1, #65	@ 0x41
 8015cbc:	5c52      	ldrb	r2, [r2, r1]
 8015cbe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	2220      	movs	r2, #32
 8015cc6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015cc8:	183b      	adds	r3, r7, r0
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	2b21      	cmp	r3, #33	@ 0x21
 8015cce:	d003      	beq.n	8015cd8 <I2C_ITSlaveCplt+0x40>
 8015cd0:	183b      	adds	r3, r7, r0
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	2b29      	cmp	r3, #41	@ 0x29
 8015cd6:	d109      	bne.n	8015cec <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8015cd8:	4ab0      	ldr	r2, [pc, #704]	@ (8015f9c <I2C_ITSlaveCplt+0x304>)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	0011      	movs	r1, r2
 8015cde:	0018      	movs	r0, r3
 8015ce0:	f000 fcae 	bl	8016640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2221      	movs	r2, #33	@ 0x21
 8015ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8015cea:	e020      	b.n	8015d2e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015cec:	220b      	movs	r2, #11
 8015cee:	18bb      	adds	r3, r7, r2
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	2b22      	cmp	r3, #34	@ 0x22
 8015cf4:	d003      	beq.n	8015cfe <I2C_ITSlaveCplt+0x66>
 8015cf6:	18bb      	adds	r3, r7, r2
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cfc:	d109      	bne.n	8015d12 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8015cfe:	4aa8      	ldr	r2, [pc, #672]	@ (8015fa0 <I2C_ITSlaveCplt+0x308>)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	0011      	movs	r1, r2
 8015d04:	0018      	movs	r0, r3
 8015d06:	f000 fc9b 	bl	8016640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2222      	movs	r2, #34	@ 0x22
 8015d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8015d10:	e00d      	b.n	8015d2e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8015d12:	230b      	movs	r3, #11
 8015d14:	18fb      	adds	r3, r7, r3
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	2b28      	cmp	r3, #40	@ 0x28
 8015d1a:	d108      	bne.n	8015d2e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8015d1c:	4aa1      	ldr	r2, [pc, #644]	@ (8015fa4 <I2C_ITSlaveCplt+0x30c>)
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	0011      	movs	r1, r2
 8015d22:	0018      	movs	r0, r3
 8015d24:	f000 fc8c 	bl	8016640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	685a      	ldr	r2, [r3, #4]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	2180      	movs	r1, #128	@ 0x80
 8015d3a:	0209      	lsls	r1, r1, #8
 8015d3c:	430a      	orrs	r2, r1
 8015d3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	685a      	ldr	r2, [r3, #4]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	4997      	ldr	r1, [pc, #604]	@ (8015fa8 <I2C_ITSlaveCplt+0x310>)
 8015d4c:	400a      	ands	r2, r1
 8015d4e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	0018      	movs	r0, r3
 8015d54:	f000 fab5 	bl	80162c2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	0b9b      	lsrs	r3, r3, #14
 8015d5c:	001a      	movs	r2, r3
 8015d5e:	2301      	movs	r3, #1
 8015d60:	4013      	ands	r3, r2
 8015d62:	d013      	beq.n	8015d8c <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	498f      	ldr	r1, [pc, #572]	@ (8015fac <I2C_ITSlaveCplt+0x314>)
 8015d70:	400a      	ands	r2, r1
 8015d72:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d020      	beq.n	8015dbe <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	685b      	ldr	r3, [r3, #4]
 8015d84:	b29a      	uxth	r2, r3
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015d8a:	e018      	b.n	8015dbe <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	0bdb      	lsrs	r3, r3, #15
 8015d90:	001a      	movs	r2, r3
 8015d92:	2301      	movs	r3, #1
 8015d94:	4013      	ands	r3, r2
 8015d96:	d012      	beq.n	8015dbe <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	4983      	ldr	r1, [pc, #524]	@ (8015fb0 <I2C_ITSlaveCplt+0x318>)
 8015da4:	400a      	ands	r2, r1
 8015da6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d006      	beq.n	8015dbe <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	089b      	lsrs	r3, r3, #2
 8015dc2:	001a      	movs	r2, r3
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	d020      	beq.n	8015e0c <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	2204      	movs	r2, #4
 8015dce:	4393      	bics	r3, r2
 8015dd0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ddc:	b2d2      	uxtb	r2, r2
 8015dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de4:	1c5a      	adds	r2, r3, #1
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d00c      	beq.n	8015e0c <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015df6:	3b01      	subs	r3, #1
 8015df8:	b29a      	uxth	r2, r3
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	3b01      	subs	r3, #1
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d005      	beq.n	8015e22 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e1a:	2204      	movs	r2, #4
 8015e1c:	431a      	orrs	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	091b      	lsrs	r3, r3, #4
 8015e26:	001a      	movs	r2, r3
 8015e28:	2301      	movs	r3, #1
 8015e2a:	4013      	ands	r3, r2
 8015e2c:	d051      	beq.n	8015ed2 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	091b      	lsrs	r3, r3, #4
 8015e32:	001a      	movs	r2, r3
 8015e34:	2301      	movs	r3, #1
 8015e36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015e38:	d04b      	beq.n	8015ed2 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d12d      	bne.n	8015ea0 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2241      	movs	r2, #65	@ 0x41
 8015e48:	5c9b      	ldrb	r3, [r3, r2]
 8015e4a:	b2db      	uxtb	r3, r3
 8015e4c:	2b28      	cmp	r3, #40	@ 0x28
 8015e4e:	d10b      	bne.n	8015e68 <I2C_ITSlaveCplt+0x1d0>
 8015e50:	68fa      	ldr	r2, [r7, #12]
 8015e52:	2380      	movs	r3, #128	@ 0x80
 8015e54:	049b      	lsls	r3, r3, #18
 8015e56:	429a      	cmp	r2, r3
 8015e58:	d106      	bne.n	8015e68 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015e5a:	697a      	ldr	r2, [r7, #20]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	0011      	movs	r1, r2
 8015e60:	0018      	movs	r0, r3
 8015e62:	f000 f8a9 	bl	8015fb8 <I2C_ITListenCplt>
 8015e66:	e034      	b.n	8015ed2 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2241      	movs	r2, #65	@ 0x41
 8015e6c:	5c9b      	ldrb	r3, [r3, r2]
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	2b29      	cmp	r3, #41	@ 0x29
 8015e72:	d110      	bne.n	8015e96 <I2C_ITSlaveCplt+0x1fe>
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	4a4f      	ldr	r2, [pc, #316]	@ (8015fb4 <I2C_ITSlaveCplt+0x31c>)
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	d00c      	beq.n	8015e96 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	2210      	movs	r2, #16
 8015e82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	0018      	movs	r0, r3
 8015e88:	f000 fa1b 	bl	80162c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	0018      	movs	r0, r3
 8015e90:	f7ff fdca 	bl	8015a28 <I2C_ITSlaveSeqCplt>
 8015e94:	e01d      	b.n	8015ed2 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2210      	movs	r2, #16
 8015e9c:	61da      	str	r2, [r3, #28]
 8015e9e:	e018      	b.n	8015ed2 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2210      	movs	r2, #16
 8015ea6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015eac:	2204      	movs	r2, #4
 8015eae:	431a      	orrs	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d004      	beq.n	8015ec4 <I2C_ITSlaveCplt+0x22c>
 8015eba:	68fa      	ldr	r2, [r7, #12]
 8015ebc:	2380      	movs	r3, #128	@ 0x80
 8015ebe:	045b      	lsls	r3, r3, #17
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d106      	bne.n	8015ed2 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	0011      	movs	r1, r2
 8015ecc:	0018      	movs	r0, r3
 8015ece:	f000 f8cd 	bl	801606c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	2242      	movs	r2, #66	@ 0x42
 8015ed6:	2100      	movs	r1, #0
 8015ed8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2200      	movs	r2, #0
 8015ede:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d013      	beq.n	8015f10 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	0011      	movs	r1, r2
 8015ef0:	0018      	movs	r0, r3
 8015ef2:	f000 f8bb 	bl	801606c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2241      	movs	r2, #65	@ 0x41
 8015efa:	5c9b      	ldrb	r3, [r3, r2]
 8015efc:	b2db      	uxtb	r3, r3
 8015efe:	2b28      	cmp	r3, #40	@ 0x28
 8015f00:	d147      	bne.n	8015f92 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8015f02:	697a      	ldr	r2, [r7, #20]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	0011      	movs	r1, r2
 8015f08:	0018      	movs	r0, r3
 8015f0a:	f000 f855 	bl	8015fb8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015f0e:	e040      	b.n	8015f92 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f14:	4a27      	ldr	r2, [pc, #156]	@ (8015fb4 <I2C_ITSlaveCplt+0x31c>)
 8015f16:	4293      	cmp	r3, r2
 8015f18:	d016      	beq.n	8015f48 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	0018      	movs	r0, r3
 8015f1e:	f7ff fd83 	bl	8015a28 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	4a23      	ldr	r2, [pc, #140]	@ (8015fb4 <I2C_ITSlaveCplt+0x31c>)
 8015f26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2241      	movs	r2, #65	@ 0x41
 8015f2c:	2120      	movs	r1, #32
 8015f2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2200      	movs	r2, #0
 8015f34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2240      	movs	r2, #64	@ 0x40
 8015f3a:	2100      	movs	r1, #0
 8015f3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	0018      	movs	r0, r3
 8015f42:	f7fe febd 	bl	8014cc0 <HAL_I2C_ListenCpltCallback>
}
 8015f46:	e024      	b.n	8015f92 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2241      	movs	r2, #65	@ 0x41
 8015f4c:	5c9b      	ldrb	r3, [r3, r2]
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	2b22      	cmp	r3, #34	@ 0x22
 8015f52:	d10f      	bne.n	8015f74 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2241      	movs	r2, #65	@ 0x41
 8015f58:	2120      	movs	r1, #32
 8015f5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2240      	movs	r2, #64	@ 0x40
 8015f66:	2100      	movs	r1, #0
 8015f68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	0018      	movs	r0, r3
 8015f6e:	f7fe fe8f 	bl	8014c90 <HAL_I2C_SlaveRxCpltCallback>
}
 8015f72:	e00e      	b.n	8015f92 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2241      	movs	r2, #65	@ 0x41
 8015f78:	2120      	movs	r1, #32
 8015f7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2240      	movs	r2, #64	@ 0x40
 8015f86:	2100      	movs	r1, #0
 8015f88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	0018      	movs	r0, r3
 8015f8e:	f7fe fe77 	bl	8014c80 <HAL_I2C_SlaveTxCpltCallback>
}
 8015f92:	46c0      	nop			@ (mov r8, r8)
 8015f94:	46bd      	mov	sp, r7
 8015f96:	b006      	add	sp, #24
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	46c0      	nop			@ (mov r8, r8)
 8015f9c:	00008001 	.word	0x00008001
 8015fa0:	00008002 	.word	0x00008002
 8015fa4:	00008003 	.word	0x00008003
 8015fa8:	fe00e800 	.word	0xfe00e800
 8015fac:	ffffbfff 	.word	0xffffbfff
 8015fb0:	ffff7fff 	.word	0xffff7fff
 8015fb4:	ffff0000 	.word	0xffff0000

08015fb8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b082      	sub	sp, #8
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4a27      	ldr	r2, [pc, #156]	@ (8016064 <I2C_ITListenCplt+0xac>)
 8015fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2241      	movs	r2, #65	@ 0x41
 8015fd2:	2120      	movs	r1, #32
 8015fd4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2242      	movs	r2, #66	@ 0x42
 8015fda:	2100      	movs	r1, #0
 8015fdc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	089b      	lsrs	r3, r3, #2
 8015fe8:	001a      	movs	r2, r3
 8015fea:	2301      	movs	r3, #1
 8015fec:	4013      	ands	r3, r2
 8015fee:	d022      	beq.n	8016036 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ffa:	b2d2      	uxtb	r2, r2
 8015ffc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016002:	1c5a      	adds	r2, r3, #1
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801600c:	2b00      	cmp	r3, #0
 801600e:	d012      	beq.n	8016036 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016014:	3b01      	subs	r3, #1
 8016016:	b29a      	uxth	r2, r3
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016020:	b29b      	uxth	r3, r3
 8016022:	3b01      	subs	r3, #1
 8016024:	b29a      	uxth	r2, r3
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801602e:	2204      	movs	r2, #4
 8016030:	431a      	orrs	r2, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016036:	4a0c      	ldr	r2, [pc, #48]	@ (8016068 <I2C_ITListenCplt+0xb0>)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	0011      	movs	r1, r2
 801603c:	0018      	movs	r0, r3
 801603e:	f000 faff 	bl	8016640 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2210      	movs	r2, #16
 8016048:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2240      	movs	r2, #64	@ 0x40
 801604e:	2100      	movs	r1, #0
 8016050:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	0018      	movs	r0, r3
 8016056:	f7fe fe33 	bl	8014cc0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801605a:	46c0      	nop			@ (mov r8, r8)
 801605c:	46bd      	mov	sp, r7
 801605e:	b002      	add	sp, #8
 8016060:	bd80      	pop	{r7, pc}
 8016062:	46c0      	nop			@ (mov r8, r8)
 8016064:	ffff0000 	.word	0xffff0000
 8016068:	00008003 	.word	0x00008003

0801606c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b084      	sub	sp, #16
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
 8016074:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016076:	200f      	movs	r0, #15
 8016078:	183b      	adds	r3, r7, r0
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	2141      	movs	r1, #65	@ 0x41
 801607e:	5c52      	ldrb	r2, [r2, r1]
 8016080:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2242      	movs	r2, #66	@ 0x42
 8016086:	2100      	movs	r1, #0
 8016088:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	4a72      	ldr	r2, [pc, #456]	@ (8016258 <I2C_ITError+0x1ec>)
 801608e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2200      	movs	r2, #0
 8016094:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	431a      	orrs	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80160a2:	183b      	adds	r3, r7, r0
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	2b28      	cmp	r3, #40	@ 0x28
 80160a8:	d007      	beq.n	80160ba <I2C_ITError+0x4e>
 80160aa:	183b      	adds	r3, r7, r0
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	2b29      	cmp	r3, #41	@ 0x29
 80160b0:	d003      	beq.n	80160ba <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80160b2:	183b      	adds	r3, r7, r0
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80160b8:	d10c      	bne.n	80160d4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2103      	movs	r1, #3
 80160be:	0018      	movs	r0, r3
 80160c0:	f000 fabe 	bl	8016640 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2241      	movs	r2, #65	@ 0x41
 80160c8:	2128      	movs	r1, #40	@ 0x28
 80160ca:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	4a63      	ldr	r2, [pc, #396]	@ (801625c <I2C_ITError+0x1f0>)
 80160d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80160d2:	e032      	b.n	801613a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80160d4:	4a62      	ldr	r2, [pc, #392]	@ (8016260 <I2C_ITError+0x1f4>)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	0011      	movs	r1, r2
 80160da:	0018      	movs	r0, r3
 80160dc:	f000 fab0 	bl	8016640 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	0018      	movs	r0, r3
 80160e4:	f000 f8ed 	bl	80162c2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2241      	movs	r2, #65	@ 0x41
 80160ec:	5c9b      	ldrb	r3, [r3, r2]
 80160ee:	b2db      	uxtb	r3, r3
 80160f0:	2b60      	cmp	r3, #96	@ 0x60
 80160f2:	d01f      	beq.n	8016134 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2241      	movs	r2, #65	@ 0x41
 80160f8:	2120      	movs	r1, #32
 80160fa:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	699b      	ldr	r3, [r3, #24]
 8016102:	2220      	movs	r2, #32
 8016104:	4013      	ands	r3, r2
 8016106:	2b20      	cmp	r3, #32
 8016108:	d114      	bne.n	8016134 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	699b      	ldr	r3, [r3, #24]
 8016110:	2210      	movs	r2, #16
 8016112:	4013      	ands	r3, r2
 8016114:	2b10      	cmp	r3, #16
 8016116:	d109      	bne.n	801612c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	2210      	movs	r2, #16
 801611e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016124:	2204      	movs	r2, #4
 8016126:	431a      	orrs	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2220      	movs	r2, #32
 8016132:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2200      	movs	r2, #0
 8016138:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801613e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016144:	2b00      	cmp	r3, #0
 8016146:	d03b      	beq.n	80161c0 <I2C_ITError+0x154>
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	2b11      	cmp	r3, #17
 801614c:	d002      	beq.n	8016154 <I2C_ITError+0xe8>
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	2b21      	cmp	r3, #33	@ 0x21
 8016152:	d135      	bne.n	80161c0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	2380      	movs	r3, #128	@ 0x80
 801615c:	01db      	lsls	r3, r3, #7
 801615e:	401a      	ands	r2, r3
 8016160:	2380      	movs	r3, #128	@ 0x80
 8016162:	01db      	lsls	r3, r3, #7
 8016164:	429a      	cmp	r2, r3
 8016166:	d107      	bne.n	8016178 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	493c      	ldr	r1, [pc, #240]	@ (8016264 <I2C_ITError+0x1f8>)
 8016174:	400a      	ands	r2, r1
 8016176:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801617c:	0018      	movs	r0, r3
 801617e:	f7fd fcd3 	bl	8013b28 <HAL_DMA_GetState>
 8016182:	0003      	movs	r3, r0
 8016184:	2b01      	cmp	r3, #1
 8016186:	d016      	beq.n	80161b6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801618c:	4a36      	ldr	r2, [pc, #216]	@ (8016268 <I2C_ITError+0x1fc>)
 801618e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2240      	movs	r2, #64	@ 0x40
 8016194:	2100      	movs	r1, #0
 8016196:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801619c:	0018      	movs	r0, r3
 801619e:	f7fd fb97 	bl	80138d0 <HAL_DMA_Abort_IT>
 80161a2:	1e03      	subs	r3, r0, #0
 80161a4:	d051      	beq.n	801624a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161b0:	0018      	movs	r0, r3
 80161b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80161b4:	e049      	b.n	801624a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	0018      	movs	r0, r3
 80161ba:	f000 f859 	bl	8016270 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80161be:	e044      	b.n	801624a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d03b      	beq.n	8016240 <I2C_ITError+0x1d4>
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	2b12      	cmp	r3, #18
 80161cc:	d002      	beq.n	80161d4 <I2C_ITError+0x168>
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	2b22      	cmp	r3, #34	@ 0x22
 80161d2:	d135      	bne.n	8016240 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	2380      	movs	r3, #128	@ 0x80
 80161dc:	021b      	lsls	r3, r3, #8
 80161de:	401a      	ands	r2, r3
 80161e0:	2380      	movs	r3, #128	@ 0x80
 80161e2:	021b      	lsls	r3, r3, #8
 80161e4:	429a      	cmp	r2, r3
 80161e6:	d107      	bne.n	80161f8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	681a      	ldr	r2, [r3, #0]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	491e      	ldr	r1, [pc, #120]	@ (801626c <I2C_ITError+0x200>)
 80161f4:	400a      	ands	r2, r1
 80161f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161fc:	0018      	movs	r0, r3
 80161fe:	f7fd fc93 	bl	8013b28 <HAL_DMA_GetState>
 8016202:	0003      	movs	r3, r0
 8016204:	2b01      	cmp	r3, #1
 8016206:	d016      	beq.n	8016236 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801620c:	4a16      	ldr	r2, [pc, #88]	@ (8016268 <I2C_ITError+0x1fc>)
 801620e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2240      	movs	r2, #64	@ 0x40
 8016214:	2100      	movs	r1, #0
 8016216:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801621c:	0018      	movs	r0, r3
 801621e:	f7fd fb57 	bl	80138d0 <HAL_DMA_Abort_IT>
 8016222:	1e03      	subs	r3, r0, #0
 8016224:	d013      	beq.n	801624e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801622a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016230:	0018      	movs	r0, r3
 8016232:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016234:	e00b      	b.n	801624e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	0018      	movs	r0, r3
 801623a:	f000 f819 	bl	8016270 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801623e:	e006      	b.n	801624e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	0018      	movs	r0, r3
 8016244:	f000 f814 	bl	8016270 <I2C_TreatErrorCallback>
  }
}
 8016248:	e002      	b.n	8016250 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801624a:	46c0      	nop			@ (mov r8, r8)
 801624c:	e000      	b.n	8016250 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801624e:	46c0      	nop			@ (mov r8, r8)
}
 8016250:	46c0      	nop			@ (mov r8, r8)
 8016252:	46bd      	mov	sp, r7
 8016254:	b004      	add	sp, #16
 8016256:	bd80      	pop	{r7, pc}
 8016258:	ffff0000 	.word	0xffff0000
 801625c:	08014fad 	.word	0x08014fad
 8016260:	00008003 	.word	0x00008003
 8016264:	ffffbfff 	.word	0xffffbfff
 8016268:	0801647b 	.word	0x0801647b
 801626c:	ffff7fff 	.word	0xffff7fff

08016270 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b082      	sub	sp, #8
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2241      	movs	r2, #65	@ 0x41
 801627c:	5c9b      	ldrb	r3, [r3, r2]
 801627e:	b2db      	uxtb	r3, r3
 8016280:	2b60      	cmp	r3, #96	@ 0x60
 8016282:	d10f      	bne.n	80162a4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2241      	movs	r2, #65	@ 0x41
 8016288:	2120      	movs	r1, #32
 801628a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2200      	movs	r2, #0
 8016290:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2240      	movs	r2, #64	@ 0x40
 8016296:	2100      	movs	r1, #0
 8016298:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	0018      	movs	r0, r3
 801629e:	f7fe fd2f 	bl	8014d00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80162a2:	e00a      	b.n	80162ba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2200      	movs	r2, #0
 80162a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2240      	movs	r2, #64	@ 0x40
 80162ae:	2100      	movs	r1, #0
 80162b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	0018      	movs	r0, r3
 80162b6:	f7fe fd1b 	bl	8014cf0 <HAL_I2C_ErrorCallback>
}
 80162ba:	46c0      	nop			@ (mov r8, r8)
 80162bc:	46bd      	mov	sp, r7
 80162be:	b002      	add	sp, #8
 80162c0:	bd80      	pop	{r7, pc}

080162c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80162c2:	b580      	push	{r7, lr}
 80162c4:	b082      	sub	sp, #8
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	699b      	ldr	r3, [r3, #24]
 80162d0:	2202      	movs	r2, #2
 80162d2:	4013      	ands	r3, r2
 80162d4:	2b02      	cmp	r3, #2
 80162d6:	d103      	bne.n	80162e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2200      	movs	r2, #0
 80162de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	699b      	ldr	r3, [r3, #24]
 80162e6:	2201      	movs	r2, #1
 80162e8:	4013      	ands	r3, r2
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d007      	beq.n	80162fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	699a      	ldr	r2, [r3, #24]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2101      	movs	r1, #1
 80162fa:	430a      	orrs	r2, r1
 80162fc:	619a      	str	r2, [r3, #24]
  }
}
 80162fe:	46c0      	nop			@ (mov r8, r8)
 8016300:	46bd      	mov	sp, r7
 8016302:	b002      	add	sp, #8
 8016304:	bd80      	pop	{r7, pc}
	...

08016308 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016314:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	4920      	ldr	r1, [pc, #128]	@ (80163a4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8016322:	400a      	ands	r2, r1
 8016324:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801632a:	b29b      	uxth	r3, r3
 801632c:	2b00      	cmp	r3, #0
 801632e:	d105      	bne.n	801633c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2120      	movs	r1, #32
 8016334:	0018      	movs	r0, r3
 8016336:	f000 f8f9 	bl	801652c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801633a:	e02e      	b.n	801639a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016340:	68fa      	ldr	r2, [r7, #12]
 8016342:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016344:	189a      	adds	r2, r3, r2
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801634e:	b29b      	uxth	r3, r3
 8016350:	2bff      	cmp	r3, #255	@ 0xff
 8016352:	d903      	bls.n	801635c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	22ff      	movs	r2, #255	@ 0xff
 8016358:	851a      	strh	r2, [r3, #40]	@ 0x28
 801635a:	e004      	b.n	8016366 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016360:	b29a      	uxth	r2, r3
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801636e:	0019      	movs	r1, r3
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	3328      	adds	r3, #40	@ 0x28
 8016376:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801637c:	f7fd f9c2 	bl	8013704 <HAL_DMA_Start_IT>
 8016380:	1e03      	subs	r3, r0, #0
 8016382:	d005      	beq.n	8016390 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2110      	movs	r1, #16
 8016388:	0018      	movs	r0, r3
 801638a:	f7ff fe6f 	bl	801606c <I2C_ITError>
}
 801638e:	e004      	b.n	801639a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	2140      	movs	r1, #64	@ 0x40
 8016394:	0018      	movs	r0, r3
 8016396:	f000 f8c9 	bl	801652c <I2C_Enable_IRQ>
}
 801639a:	46c0      	nop			@ (mov r8, r8)
 801639c:	46bd      	mov	sp, r7
 801639e:	b004      	add	sp, #16
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	46c0      	nop			@ (mov r8, r8)
 80163a4:	ffffbfff 	.word	0xffffbfff

080163a8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163b4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	4920      	ldr	r1, [pc, #128]	@ (8016444 <I2C_DMAMasterReceiveCplt+0x9c>)
 80163c2:	400a      	ands	r2, r1
 80163c4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d105      	bne.n	80163dc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	2120      	movs	r1, #32
 80163d4:	0018      	movs	r0, r3
 80163d6:	f000 f8a9 	bl	801652c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80163da:	e02e      	b.n	801643a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163e0:	68fa      	ldr	r2, [r7, #12]
 80163e2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80163e4:	189a      	adds	r2, r3, r2
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	2bff      	cmp	r3, #255	@ 0xff
 80163f2:	d903      	bls.n	80163fc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	22ff      	movs	r2, #255	@ 0xff
 80163f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80163fa:	e004      	b.n	8016406 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016400:	b29a      	uxth	r2, r3
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	3324      	adds	r3, #36	@ 0x24
 8016410:	0019      	movs	r1, r3
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016416:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801641c:	f7fd f972 	bl	8013704 <HAL_DMA_Start_IT>
 8016420:	1e03      	subs	r3, r0, #0
 8016422:	d005      	beq.n	8016430 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2110      	movs	r1, #16
 8016428:	0018      	movs	r0, r3
 801642a:	f7ff fe1f 	bl	801606c <I2C_ITError>
}
 801642e:	e004      	b.n	801643a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2140      	movs	r1, #64	@ 0x40
 8016434:	0018      	movs	r0, r3
 8016436:	f000 f879 	bl	801652c <I2C_Enable_IRQ>
}
 801643a:	46c0      	nop			@ (mov r8, r8)
 801643c:	46bd      	mov	sp, r7
 801643e:	b004      	add	sp, #16
 8016440:	bd80      	pop	{r7, pc}
 8016442:	46c0      	nop			@ (mov r8, r8)
 8016444:	ffff7fff 	.word	0xffff7fff

08016448 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016454:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	685a      	ldr	r2, [r3, #4]
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	2180      	movs	r1, #128	@ 0x80
 8016462:	0209      	lsls	r1, r1, #8
 8016464:	430a      	orrs	r2, r1
 8016466:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2110      	movs	r1, #16
 801646c:	0018      	movs	r0, r3
 801646e:	f7ff fdfd 	bl	801606c <I2C_ITError>
}
 8016472:	46c0      	nop			@ (mov r8, r8)
 8016474:	46bd      	mov	sp, r7
 8016476:	b004      	add	sp, #16
 8016478:	bd80      	pop	{r7, pc}

0801647a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801647a:	b580      	push	{r7, lr}
 801647c:	b084      	sub	sp, #16
 801647e:	af00      	add	r7, sp, #0
 8016480:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016486:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801648c:	2b00      	cmp	r3, #0
 801648e:	d003      	beq.n	8016498 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016494:	2200      	movs	r2, #0
 8016496:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801649c:	2b00      	cmp	r3, #0
 801649e:	d003      	beq.n	80164a8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164a4:	2200      	movs	r2, #0
 80164a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	0018      	movs	r0, r3
 80164ac:	f7ff fee0 	bl	8016270 <I2C_TreatErrorCallback>
}
 80164b0:	46c0      	nop			@ (mov r8, r8)
 80164b2:	46bd      	mov	sp, r7
 80164b4:	b004      	add	sp, #16
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80164b8:	b590      	push	{r4, r7, lr}
 80164ba:	b087      	sub	sp, #28
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	0008      	movs	r0, r1
 80164c2:	0011      	movs	r1, r2
 80164c4:	607b      	str	r3, [r7, #4]
 80164c6:	240a      	movs	r4, #10
 80164c8:	193b      	adds	r3, r7, r4
 80164ca:	1c02      	adds	r2, r0, #0
 80164cc:	801a      	strh	r2, [r3, #0]
 80164ce:	2009      	movs	r0, #9
 80164d0:	183b      	adds	r3, r7, r0
 80164d2:	1c0a      	adds	r2, r1, #0
 80164d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164d6:	193b      	adds	r3, r7, r4
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	059b      	lsls	r3, r3, #22
 80164dc:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80164de:	183b      	adds	r3, r7, r0
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	0419      	lsls	r1, r3, #16
 80164e4:	23ff      	movs	r3, #255	@ 0xff
 80164e6:	041b      	lsls	r3, r3, #16
 80164e8:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164ea:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164f2:	4313      	orrs	r3, r2
 80164f4:	005b      	lsls	r3, r3, #1
 80164f6:	085b      	lsrs	r3, r3, #1
 80164f8:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016502:	0d51      	lsrs	r1, r2, #21
 8016504:	2280      	movs	r2, #128	@ 0x80
 8016506:	00d2      	lsls	r2, r2, #3
 8016508:	400a      	ands	r2, r1
 801650a:	4907      	ldr	r1, [pc, #28]	@ (8016528 <I2C_TransferConfig+0x70>)
 801650c:	430a      	orrs	r2, r1
 801650e:	43d2      	mvns	r2, r2
 8016510:	401a      	ands	r2, r3
 8016512:	0011      	movs	r1, r2
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	697a      	ldr	r2, [r7, #20]
 801651a:	430a      	orrs	r2, r1
 801651c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801651e:	46c0      	nop			@ (mov r8, r8)
 8016520:	46bd      	mov	sp, r7
 8016522:	b007      	add	sp, #28
 8016524:	bd90      	pop	{r4, r7, pc}
 8016526:	46c0      	nop			@ (mov r8, r8)
 8016528:	03ff63ff 	.word	0x03ff63ff

0801652c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	000a      	movs	r2, r1
 8016536:	1cbb      	adds	r3, r7, #2
 8016538:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801653a:	2300      	movs	r3, #0
 801653c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016542:	4b3c      	ldr	r3, [pc, #240]	@ (8016634 <I2C_Enable_IRQ+0x108>)
 8016544:	429a      	cmp	r2, r3
 8016546:	d035      	beq.n	80165b4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801654c:	4b3a      	ldr	r3, [pc, #232]	@ (8016638 <I2C_Enable_IRQ+0x10c>)
 801654e:	429a      	cmp	r2, r3
 8016550:	d030      	beq.n	80165b4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8016556:	4b39      	ldr	r3, [pc, #228]	@ (801663c <I2C_Enable_IRQ+0x110>)
 8016558:	429a      	cmp	r2, r3
 801655a:	d02b      	beq.n	80165b4 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801655c:	1cbb      	adds	r3, r7, #2
 801655e:	2200      	movs	r2, #0
 8016560:	5e9b      	ldrsh	r3, [r3, r2]
 8016562:	2b00      	cmp	r3, #0
 8016564:	da03      	bge.n	801656e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	22b8      	movs	r2, #184	@ 0xb8
 801656a:	4313      	orrs	r3, r2
 801656c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801656e:	1cbb      	adds	r3, r7, #2
 8016570:	881b      	ldrh	r3, [r3, #0]
 8016572:	2201      	movs	r2, #1
 8016574:	4013      	ands	r3, r2
 8016576:	d003      	beq.n	8016580 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	22f2      	movs	r2, #242	@ 0xf2
 801657c:	4313      	orrs	r3, r2
 801657e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8016580:	1cbb      	adds	r3, r7, #2
 8016582:	881b      	ldrh	r3, [r3, #0]
 8016584:	2202      	movs	r2, #2
 8016586:	4013      	ands	r3, r2
 8016588:	d003      	beq.n	8016592 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	22f4      	movs	r2, #244	@ 0xf4
 801658e:	4313      	orrs	r3, r2
 8016590:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016592:	1cbb      	adds	r3, r7, #2
 8016594:	881b      	ldrh	r3, [r3, #0]
 8016596:	2b10      	cmp	r3, #16
 8016598:	d103      	bne.n	80165a2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	2290      	movs	r2, #144	@ 0x90
 801659e:	4313      	orrs	r3, r2
 80165a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80165a2:	1cbb      	adds	r3, r7, #2
 80165a4:	881b      	ldrh	r3, [r3, #0]
 80165a6:	2b20      	cmp	r3, #32
 80165a8:	d137      	bne.n	801661a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2220      	movs	r2, #32
 80165ae:	4313      	orrs	r3, r2
 80165b0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80165b2:	e032      	b.n	801661a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80165b4:	1cbb      	adds	r3, r7, #2
 80165b6:	2200      	movs	r2, #0
 80165b8:	5e9b      	ldrsh	r3, [r3, r2]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	da03      	bge.n	80165c6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	22b8      	movs	r2, #184	@ 0xb8
 80165c2:	4313      	orrs	r3, r2
 80165c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80165c6:	1cbb      	adds	r3, r7, #2
 80165c8:	881b      	ldrh	r3, [r3, #0]
 80165ca:	2201      	movs	r2, #1
 80165cc:	4013      	ands	r3, r2
 80165ce:	d003      	beq.n	80165d8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	22f2      	movs	r2, #242	@ 0xf2
 80165d4:	4313      	orrs	r3, r2
 80165d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80165d8:	1cbb      	adds	r3, r7, #2
 80165da:	881b      	ldrh	r3, [r3, #0]
 80165dc:	2202      	movs	r2, #2
 80165de:	4013      	ands	r3, r2
 80165e0:	d003      	beq.n	80165ea <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	22f4      	movs	r2, #244	@ 0xf4
 80165e6:	4313      	orrs	r3, r2
 80165e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80165ea:	1cbb      	adds	r3, r7, #2
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	2b10      	cmp	r3, #16
 80165f0:	d103      	bne.n	80165fa <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	2290      	movs	r2, #144	@ 0x90
 80165f6:	4313      	orrs	r3, r2
 80165f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80165fa:	1cbb      	adds	r3, r7, #2
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	2b20      	cmp	r3, #32
 8016600:	d103      	bne.n	801660a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	2260      	movs	r2, #96	@ 0x60
 8016606:	4313      	orrs	r3, r2
 8016608:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801660a:	1cbb      	adds	r3, r7, #2
 801660c:	881b      	ldrh	r3, [r3, #0]
 801660e:	2b40      	cmp	r3, #64	@ 0x40
 8016610:	d103      	bne.n	801661a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	2240      	movs	r2, #64	@ 0x40
 8016616:	4313      	orrs	r3, r2
 8016618:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	6819      	ldr	r1, [r3, #0]
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	68fa      	ldr	r2, [r7, #12]
 8016626:	430a      	orrs	r2, r1
 8016628:	601a      	str	r2, [r3, #0]
}
 801662a:	46c0      	nop			@ (mov r8, r8)
 801662c:	46bd      	mov	sp, r7
 801662e:	b004      	add	sp, #16
 8016630:	bd80      	pop	{r7, pc}
 8016632:	46c0      	nop			@ (mov r8, r8)
 8016634:	080151d5 	.word	0x080151d5
 8016638:	0801566d 	.word	0x0801566d
 801663c:	080153ed 	.word	0x080153ed

08016640 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	000a      	movs	r2, r1
 801664a:	1cbb      	adds	r3, r7, #2
 801664c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801664e:	2300      	movs	r3, #0
 8016650:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8016652:	1cbb      	adds	r3, r7, #2
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	2201      	movs	r2, #1
 8016658:	4013      	ands	r3, r2
 801665a:	d010      	beq.n	801667e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	2242      	movs	r2, #66	@ 0x42
 8016660:	4313      	orrs	r3, r2
 8016662:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2241      	movs	r2, #65	@ 0x41
 8016668:	5c9b      	ldrb	r3, [r3, r2]
 801666a:	b2db      	uxtb	r3, r3
 801666c:	001a      	movs	r2, r3
 801666e:	2328      	movs	r3, #40	@ 0x28
 8016670:	4013      	ands	r3, r2
 8016672:	2b28      	cmp	r3, #40	@ 0x28
 8016674:	d003      	beq.n	801667e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	22b0      	movs	r2, #176	@ 0xb0
 801667a:	4313      	orrs	r3, r2
 801667c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801667e:	1cbb      	adds	r3, r7, #2
 8016680:	881b      	ldrh	r3, [r3, #0]
 8016682:	2202      	movs	r2, #2
 8016684:	4013      	ands	r3, r2
 8016686:	d010      	beq.n	80166aa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2244      	movs	r2, #68	@ 0x44
 801668c:	4313      	orrs	r3, r2
 801668e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2241      	movs	r2, #65	@ 0x41
 8016694:	5c9b      	ldrb	r3, [r3, r2]
 8016696:	b2db      	uxtb	r3, r3
 8016698:	001a      	movs	r2, r3
 801669a:	2328      	movs	r3, #40	@ 0x28
 801669c:	4013      	ands	r3, r2
 801669e:	2b28      	cmp	r3, #40	@ 0x28
 80166a0:	d003      	beq.n	80166aa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	22b0      	movs	r2, #176	@ 0xb0
 80166a6:	4313      	orrs	r3, r2
 80166a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80166aa:	1cbb      	adds	r3, r7, #2
 80166ac:	2200      	movs	r2, #0
 80166ae:	5e9b      	ldrsh	r3, [r3, r2]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	da03      	bge.n	80166bc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	22b8      	movs	r2, #184	@ 0xb8
 80166b8:	4313      	orrs	r3, r2
 80166ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80166bc:	1cbb      	adds	r3, r7, #2
 80166be:	881b      	ldrh	r3, [r3, #0]
 80166c0:	2b10      	cmp	r3, #16
 80166c2:	d103      	bne.n	80166cc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	2290      	movs	r2, #144	@ 0x90
 80166c8:	4313      	orrs	r3, r2
 80166ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80166cc:	1cbb      	adds	r3, r7, #2
 80166ce:	881b      	ldrh	r3, [r3, #0]
 80166d0:	2b20      	cmp	r3, #32
 80166d2:	d103      	bne.n	80166dc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	2220      	movs	r2, #32
 80166d8:	4313      	orrs	r3, r2
 80166da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80166dc:	1cbb      	adds	r3, r7, #2
 80166de:	881b      	ldrh	r3, [r3, #0]
 80166e0:	2b40      	cmp	r3, #64	@ 0x40
 80166e2:	d103      	bne.n	80166ec <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2240      	movs	r2, #64	@ 0x40
 80166e8:	4313      	orrs	r3, r2
 80166ea:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	43d9      	mvns	r1, r3
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	400a      	ands	r2, r1
 80166fc:	601a      	str	r2, [r3, #0]
}
 80166fe:	46c0      	nop			@ (mov r8, r8)
 8016700:	46bd      	mov	sp, r7
 8016702:	b004      	add	sp, #16
 8016704:	bd80      	pop	{r7, pc}
	...

08016708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2241      	movs	r2, #65	@ 0x41
 8016716:	5c9b      	ldrb	r3, [r3, r2]
 8016718:	b2db      	uxtb	r3, r3
 801671a:	2b20      	cmp	r3, #32
 801671c:	d138      	bne.n	8016790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2240      	movs	r2, #64	@ 0x40
 8016722:	5c9b      	ldrb	r3, [r3, r2]
 8016724:	2b01      	cmp	r3, #1
 8016726:	d101      	bne.n	801672c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016728:	2302      	movs	r3, #2
 801672a:	e032      	b.n	8016792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	2240      	movs	r2, #64	@ 0x40
 8016730:	2101      	movs	r1, #1
 8016732:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	2241      	movs	r2, #65	@ 0x41
 8016738:	2124      	movs	r1, #36	@ 0x24
 801673a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2101      	movs	r1, #1
 8016748:	438a      	bics	r2, r1
 801674a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	4911      	ldr	r1, [pc, #68]	@ (801679c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8016758:	400a      	ands	r2, r1
 801675a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	6819      	ldr	r1, [r3, #0]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	683a      	ldr	r2, [r7, #0]
 8016768:	430a      	orrs	r2, r1
 801676a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	2101      	movs	r1, #1
 8016778:	430a      	orrs	r2, r1
 801677a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2241      	movs	r2, #65	@ 0x41
 8016780:	2120      	movs	r1, #32
 8016782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2240      	movs	r2, #64	@ 0x40
 8016788:	2100      	movs	r1, #0
 801678a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801678c:	2300      	movs	r3, #0
 801678e:	e000      	b.n	8016792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016790:	2302      	movs	r3, #2
  }
}
 8016792:	0018      	movs	r0, r3
 8016794:	46bd      	mov	sp, r7
 8016796:	b002      	add	sp, #8
 8016798:	bd80      	pop	{r7, pc}
 801679a:	46c0      	nop			@ (mov r8, r8)
 801679c:	ffffefff 	.word	0xffffefff

080167a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2241      	movs	r2, #65	@ 0x41
 80167ae:	5c9b      	ldrb	r3, [r3, r2]
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	2b20      	cmp	r3, #32
 80167b4:	d139      	bne.n	801682a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	2240      	movs	r2, #64	@ 0x40
 80167ba:	5c9b      	ldrb	r3, [r3, r2]
 80167bc:	2b01      	cmp	r3, #1
 80167be:	d101      	bne.n	80167c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80167c0:	2302      	movs	r3, #2
 80167c2:	e033      	b.n	801682c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2240      	movs	r2, #64	@ 0x40
 80167c8:	2101      	movs	r1, #1
 80167ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2241      	movs	r2, #65	@ 0x41
 80167d0:	2124      	movs	r1, #36	@ 0x24
 80167d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	681a      	ldr	r2, [r3, #0]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2101      	movs	r1, #1
 80167e0:	438a      	bics	r2, r1
 80167e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	4a11      	ldr	r2, [pc, #68]	@ (8016834 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80167f0:	4013      	ands	r3, r2
 80167f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	021b      	lsls	r3, r3, #8
 80167f8:	68fa      	ldr	r2, [r7, #12]
 80167fa:	4313      	orrs	r3, r2
 80167fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	68fa      	ldr	r2, [r7, #12]
 8016804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2101      	movs	r1, #1
 8016812:	430a      	orrs	r2, r1
 8016814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2241      	movs	r2, #65	@ 0x41
 801681a:	2120      	movs	r1, #32
 801681c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2240      	movs	r2, #64	@ 0x40
 8016822:	2100      	movs	r1, #0
 8016824:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016826:	2300      	movs	r3, #0
 8016828:	e000      	b.n	801682c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801682a:	2302      	movs	r3, #2
  }
}
 801682c:	0018      	movs	r0, r3
 801682e:	46bd      	mov	sp, r7
 8016830:	b004      	add	sp, #16
 8016832:	bd80      	pop	{r7, pc}
 8016834:	fffff0ff 	.word	0xfffff0ff

08016838 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b084      	sub	sp, #16
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d101      	bne.n	801684a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8016846:	2301      	movs	r3, #1
 8016848:	e06d      	b.n	8016926 <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	0018      	movs	r0, r3
 801684e:	f000 f875 	bl	801693c <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	4a36      	ldr	r2, [pc, #216]	@ (8016930 <HAL_IWDG_Init+0xf8>)
 8016858:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	4a35      	ldr	r2, [pc, #212]	@ (8016934 <HAL_IWDG_Init+0xfc>)
 8016860:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	687a      	ldr	r2, [r7, #4]
 8016868:	6852      	ldr	r2, [r2, #4]
 801686a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	6892      	ldr	r2, [r2, #8]
 8016874:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 8016876:	f7fb fa5d 	bl	8011d34 <HAL_GetTick>
 801687a:	0003      	movs	r3, r0
 801687c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801687e:	e00e      	b.n	801689e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8016880:	f7fb fa58 	bl	8011d34 <HAL_GetTick>
 8016884:	0002      	movs	r2, r0
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	1ad3      	subs	r3, r2, r3
 801688a:	2b21      	cmp	r3, #33	@ 0x21
 801688c:	d907      	bls.n	801689e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	68db      	ldr	r3, [r3, #12]
 8016894:	2202      	movs	r2, #2
 8016896:	4013      	ands	r3, r2
 8016898:	d001      	beq.n	801689e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 801689a:	2303      	movs	r3, #3
 801689c:	e043      	b.n	8016926 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	68db      	ldr	r3, [r3, #12]
 80168a4:	2202      	movs	r2, #2
 80168a6:	4013      	ands	r3, r2
 80168a8:	d1ea      	bne.n	8016880 <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	691b      	ldr	r3, [r3, #16]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d105      	bne.n	80168be <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	2280      	movs	r2, #128	@ 0x80
 80168b8:	01d2      	lsls	r2, r2, #7
 80168ba:	615a      	str	r2, [r3, #20]
 80168bc:	e007      	b.n	80168ce <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	691a      	ldr	r2, [r3, #16]
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	21c0      	movs	r1, #192	@ 0xc0
 80168c8:	0209      	lsls	r1, r1, #8
 80168ca:	430a      	orrs	r2, r1
 80168cc:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80168ce:	f7fb fa31 	bl	8011d34 <HAL_GetTick>
 80168d2:	0003      	movs	r3, r0
 80168d4:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80168d6:	e00e      	b.n	80168f6 <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80168d8:	f7fb fa2c 	bl	8011d34 <HAL_GetTick>
 80168dc:	0002      	movs	r2, r0
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	1ad3      	subs	r3, r2, r3
 80168e2:	2b21      	cmp	r3, #33	@ 0x21
 80168e4:	d907      	bls.n	80168f6 <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	68db      	ldr	r3, [r3, #12]
 80168ec:	220f      	movs	r2, #15
 80168ee:	4013      	ands	r3, r2
 80168f0:	d001      	beq.n	80168f6 <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 80168f2:	2303      	movs	r3, #3
 80168f4:	e017      	b.n	8016926 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	68db      	ldr	r3, [r3, #12]
 80168fc:	220f      	movs	r2, #15
 80168fe:	4013      	ands	r3, r2
 8016900:	d1ea      	bne.n	80168d8 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	691a      	ldr	r2, [r3, #16]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	429a      	cmp	r2, r3
 801690e:	d005      	beq.n	801691c <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	687a      	ldr	r2, [r7, #4]
 8016916:	68d2      	ldr	r2, [r2, #12]
 8016918:	611a      	str	r2, [r3, #16]
 801691a:	e003      	b.n	8016924 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a05      	ldr	r2, [pc, #20]	@ (8016938 <HAL_IWDG_Init+0x100>)
 8016922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016924:	2300      	movs	r3, #0
}
 8016926:	0018      	movs	r0, r3
 8016928:	46bd      	mov	sp, r7
 801692a:	b004      	add	sp, #16
 801692c:	bd80      	pop	{r7, pc}
 801692e:	46c0      	nop			@ (mov r8, r8)
 8016930:	0000cccc 	.word	0x0000cccc
 8016934:	00005555 	.word	0x00005555
 8016938:	0000aaaa 	.word	0x0000aaaa

0801693c <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8016944:	46c0      	nop			@ (mov r8, r8)
 8016946:	46bd      	mov	sp, r7
 8016948:	b002      	add	sp, #8
 801694a:	bd80      	pop	{r7, pc}

0801694c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	4a03      	ldr	r2, [pc, #12]	@ (8016968 <HAL_IWDG_Refresh+0x1c>)
 801695a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801695c:	2300      	movs	r3, #0
}
 801695e:	0018      	movs	r0, r3
 8016960:	46bd      	mov	sp, r7
 8016962:	b002      	add	sp, #8
 8016964:	bd80      	pop	{r7, pc}
 8016966:	46c0      	nop			@ (mov r8, r8)
 8016968:	0000aaaa 	.word	0x0000aaaa

0801696c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016970:	4b04      	ldr	r3, [pc, #16]	@ (8016984 <HAL_PWR_EnableBkUpAccess+0x18>)
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	4b03      	ldr	r3, [pc, #12]	@ (8016984 <HAL_PWR_EnableBkUpAccess+0x18>)
 8016976:	2180      	movs	r1, #128	@ 0x80
 8016978:	0049      	lsls	r1, r1, #1
 801697a:	430a      	orrs	r2, r1
 801697c:	601a      	str	r2, [r3, #0]
}
 801697e:	46c0      	nop			@ (mov r8, r8)
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}
 8016984:	40007000 	.word	0x40007000

08016988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b084      	sub	sp, #16
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016990:	687a      	ldr	r2, [r7, #4]
 8016992:	2380      	movs	r3, #128	@ 0x80
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	429a      	cmp	r2, r3
 8016998:	d137      	bne.n	8016a0a <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801699a:	4b27      	ldr	r3, [pc, #156]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	23c0      	movs	r3, #192	@ 0xc0
 80169a0:	00db      	lsls	r3, r3, #3
 80169a2:	401a      	ands	r2, r3
 80169a4:	2380      	movs	r3, #128	@ 0x80
 80169a6:	009b      	lsls	r3, r3, #2
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d040      	beq.n	8016a2e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80169ac:	4b22      	ldr	r3, [pc, #136]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4a22      	ldr	r2, [pc, #136]	@ (8016a3c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80169b2:	401a      	ands	r2, r3
 80169b4:	4b20      	ldr	r3, [pc, #128]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80169b6:	2180      	movs	r1, #128	@ 0x80
 80169b8:	0089      	lsls	r1, r1, #2
 80169ba:	430a      	orrs	r2, r1
 80169bc:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80169be:	4b20      	ldr	r3, [pc, #128]	@ (8016a40 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	2232      	movs	r2, #50	@ 0x32
 80169c4:	4353      	muls	r3, r2
 80169c6:	491f      	ldr	r1, [pc, #124]	@ (8016a44 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80169c8:	0018      	movs	r0, r3
 80169ca:	f7e9 fba5 	bl	8000118 <__udivsi3>
 80169ce:	0003      	movs	r3, r0
 80169d0:	3301      	adds	r3, #1
 80169d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80169d4:	e002      	b.n	80169dc <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	3b01      	subs	r3, #1
 80169da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80169dc:	4b16      	ldr	r3, [pc, #88]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80169de:	695a      	ldr	r2, [r3, #20]
 80169e0:	2380      	movs	r3, #128	@ 0x80
 80169e2:	00db      	lsls	r3, r3, #3
 80169e4:	401a      	ands	r2, r3
 80169e6:	2380      	movs	r3, #128	@ 0x80
 80169e8:	00db      	lsls	r3, r3, #3
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d102      	bne.n	80169f4 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d1f0      	bne.n	80169d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80169f4:	4b10      	ldr	r3, [pc, #64]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80169f6:	695a      	ldr	r2, [r3, #20]
 80169f8:	2380      	movs	r3, #128	@ 0x80
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	401a      	ands	r2, r3
 80169fe:	2380      	movs	r3, #128	@ 0x80
 8016a00:	00db      	lsls	r3, r3, #3
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d113      	bne.n	8016a2e <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8016a06:	2303      	movs	r3, #3
 8016a08:	e012      	b.n	8016a30 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8016a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	23c0      	movs	r3, #192	@ 0xc0
 8016a10:	00db      	lsls	r3, r3, #3
 8016a12:	401a      	ands	r2, r3
 8016a14:	2380      	movs	r3, #128	@ 0x80
 8016a16:	00db      	lsls	r3, r3, #3
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d008      	beq.n	8016a2e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8016a1c:	4b06      	ldr	r3, [pc, #24]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	4a06      	ldr	r2, [pc, #24]	@ (8016a3c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016a22:	401a      	ands	r2, r3
 8016a24:	4b04      	ldr	r3, [pc, #16]	@ (8016a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016a26:	2180      	movs	r1, #128	@ 0x80
 8016a28:	00c9      	lsls	r1, r1, #3
 8016a2a:	430a      	orrs	r2, r1
 8016a2c:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8016a2e:	2300      	movs	r3, #0
}
 8016a30:	0018      	movs	r0, r3
 8016a32:	46bd      	mov	sp, r7
 8016a34:	b004      	add	sp, #16
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	40007000 	.word	0x40007000
 8016a3c:	fffff9ff 	.word	0xfffff9ff
 8016a40:	2000025c 	.word	0x2000025c
 8016a44:	000f4240 	.word	0x000f4240

08016a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016a4c:	4b03      	ldr	r3, [pc, #12]	@ (8016a5c <HAL_PWREx_GetVoltageRange+0x14>)
 8016a4e:	681a      	ldr	r2, [r3, #0]
 8016a50:	23c0      	movs	r3, #192	@ 0xc0
 8016a52:	00db      	lsls	r3, r3, #3
 8016a54:	4013      	ands	r3, r2
}
 8016a56:	0018      	movs	r0, r3
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	40007000 	.word	0x40007000

08016a60 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	0002      	movs	r2, r0
 8016a68:	1dfb      	adds	r3, r7, #7
 8016a6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8016a6c:	4b13      	ldr	r3, [pc, #76]	@ (8016abc <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	4b12      	ldr	r3, [pc, #72]	@ (8016abc <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016a72:	4913      	ldr	r1, [pc, #76]	@ (8016ac0 <HAL_PWREx_EnterSTOP2Mode+0x60>)
 8016a74:	400a      	ands	r2, r1
 8016a76:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8016a78:	4b10      	ldr	r3, [pc, #64]	@ (8016abc <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	2207      	movs	r2, #7
 8016a7e:	4393      	bics	r3, r2
 8016a80:	001a      	movs	r2, r3
 8016a82:	4b0e      	ldr	r3, [pc, #56]	@ (8016abc <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016a84:	2102      	movs	r1, #2
 8016a86:	430a      	orrs	r2, r1
 8016a88:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8016a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8016ac4 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016a8c:	691a      	ldr	r2, [r3, #16]
 8016a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ac4 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016a90:	2104      	movs	r1, #4
 8016a92:	430a      	orrs	r2, r1
 8016a94:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8016a96:	1dfb      	adds	r3, r7, #7
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d101      	bne.n	8016aa2 <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016a9e:	bf30      	wfi
 8016aa0:	e002      	b.n	8016aa8 <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016aa2:	bf40      	sev
    __WFE();
 8016aa4:	bf20      	wfe
    __WFE();
 8016aa6:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8016aa8:	4b06      	ldr	r3, [pc, #24]	@ (8016ac4 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016aaa:	691a      	ldr	r2, [r3, #16]
 8016aac:	4b05      	ldr	r3, [pc, #20]	@ (8016ac4 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016aae:	2104      	movs	r1, #4
 8016ab0:	438a      	bics	r2, r1
 8016ab2:	611a      	str	r2, [r3, #16]
}
 8016ab4:	46c0      	nop			@ (mov r8, r8)
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	b002      	add	sp, #8
 8016aba:	bd80      	pop	{r7, pc}
 8016abc:	40007000 	.word	0x40007000
 8016ac0:	ffffbfff 	.word	0xffffbfff
 8016ac4:	e000ed00 	.word	0xe000ed00

08016ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016ac8:	b5b0      	push	{r4, r5, r7, lr}
 8016aca:	b088      	sub	sp, #32
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016ad0:	4bc9      	ldr	r3, [pc, #804]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016ad2:	689b      	ldr	r3, [r3, #8]
 8016ad4:	2238      	movs	r2, #56	@ 0x38
 8016ad6:	4013      	ands	r3, r2
 8016ad8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016ada:	4bc7      	ldr	r3, [pc, #796]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016adc:	68db      	ldr	r3, [r3, #12]
 8016ade:	2203      	movs	r2, #3
 8016ae0:	4013      	ands	r3, r2
 8016ae2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	2210      	movs	r2, #16
 8016aea:	4013      	ands	r3, r2
 8016aec:	d100      	bne.n	8016af0 <HAL_RCC_OscConfig+0x28>
 8016aee:	e0ef      	b.n	8016cd0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016af0:	69bb      	ldr	r3, [r7, #24]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d007      	beq.n	8016b06 <HAL_RCC_OscConfig+0x3e>
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	2b18      	cmp	r3, #24
 8016afa:	d000      	beq.n	8016afe <HAL_RCC_OscConfig+0x36>
 8016afc:	e093      	b.n	8016c26 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	d000      	beq.n	8016b06 <HAL_RCC_OscConfig+0x3e>
 8016b04:	e08f      	b.n	8016c26 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016b06:	4bbc      	ldr	r3, [pc, #752]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	2202      	movs	r2, #2
 8016b0c:	4013      	ands	r3, r2
 8016b0e:	d006      	beq.n	8016b1e <HAL_RCC_OscConfig+0x56>
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	69db      	ldr	r3, [r3, #28]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d102      	bne.n	8016b1e <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8016b18:	2301      	movs	r3, #1
 8016b1a:	f000 fbf2 	bl	8017302 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b22:	4bb5      	ldr	r3, [pc, #724]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2108      	movs	r1, #8
 8016b28:	400b      	ands	r3, r1
 8016b2a:	d004      	beq.n	8016b36 <HAL_RCC_OscConfig+0x6e>
 8016b2c:	4bb2      	ldr	r3, [pc, #712]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	21f0      	movs	r1, #240	@ 0xf0
 8016b32:	400b      	ands	r3, r1
 8016b34:	e005      	b.n	8016b42 <HAL_RCC_OscConfig+0x7a>
 8016b36:	49b0      	ldr	r1, [pc, #704]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b38:	2394      	movs	r3, #148	@ 0x94
 8016b3a:	58cb      	ldr	r3, [r1, r3]
 8016b3c:	091b      	lsrs	r3, r3, #4
 8016b3e:	21f0      	movs	r1, #240	@ 0xf0
 8016b40:	400b      	ands	r3, r1
 8016b42:	4293      	cmp	r3, r2
 8016b44:	d225      	bcs.n	8016b92 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b4a:	0018      	movs	r0, r3
 8016b4c:	f000 fd90 	bl	8017670 <RCC_SetFlashLatencyFromMSIRange>
 8016b50:	1e03      	subs	r3, r0, #0
 8016b52:	d002      	beq.n	8016b5a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8016b54:	2301      	movs	r3, #1
 8016b56:	f000 fbd4 	bl	8017302 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016b5a:	4ba7      	ldr	r3, [pc, #668]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	4ba6      	ldr	r3, [pc, #664]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b60:	2108      	movs	r1, #8
 8016b62:	430a      	orrs	r2, r1
 8016b64:	601a      	str	r2, [r3, #0]
 8016b66:	4ba4      	ldr	r3, [pc, #656]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	22f0      	movs	r2, #240	@ 0xf0
 8016b6c:	4393      	bics	r3, r2
 8016b6e:	0019      	movs	r1, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b74:	4ba0      	ldr	r3, [pc, #640]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b76:	430a      	orrs	r2, r1
 8016b78:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	4a9f      	ldr	r2, [pc, #636]	@ (8016dfc <HAL_RCC_OscConfig+0x334>)
 8016b80:	4013      	ands	r3, r2
 8016b82:	0019      	movs	r1, r3
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6a1b      	ldr	r3, [r3, #32]
 8016b88:	021a      	lsls	r2, r3, #8
 8016b8a:	4b9b      	ldr	r3, [pc, #620]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b8c:	430a      	orrs	r2, r1
 8016b8e:	605a      	str	r2, [r3, #4]
 8016b90:	e027      	b.n	8016be2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016b92:	4b99      	ldr	r3, [pc, #612]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	4b98      	ldr	r3, [pc, #608]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016b98:	2108      	movs	r1, #8
 8016b9a:	430a      	orrs	r2, r1
 8016b9c:	601a      	str	r2, [r3, #0]
 8016b9e:	4b96      	ldr	r3, [pc, #600]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	22f0      	movs	r2, #240	@ 0xf0
 8016ba4:	4393      	bics	r3, r2
 8016ba6:	0019      	movs	r1, r3
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bac:	4b92      	ldr	r3, [pc, #584]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016bae:	430a      	orrs	r2, r1
 8016bb0:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016bb2:	4b91      	ldr	r3, [pc, #580]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	4a91      	ldr	r2, [pc, #580]	@ (8016dfc <HAL_RCC_OscConfig+0x334>)
 8016bb8:	4013      	ands	r3, r2
 8016bba:	0019      	movs	r1, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6a1b      	ldr	r3, [r3, #32]
 8016bc0:	021a      	lsls	r2, r3, #8
 8016bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016bc4:	430a      	orrs	r2, r1
 8016bc6:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016bc8:	69bb      	ldr	r3, [r7, #24]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d109      	bne.n	8016be2 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd2:	0018      	movs	r0, r3
 8016bd4:	f000 fd4c 	bl	8017670 <RCC_SetFlashLatencyFromMSIRange>
 8016bd8:	1e03      	subs	r3, r0, #0
 8016bda:	d002      	beq.n	8016be2 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8016bdc:	2301      	movs	r3, #1
 8016bde:	f000 fb90 	bl	8017302 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016be2:	f000 fc87 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8016be6:	0001      	movs	r1, r0
 8016be8:	4b83      	ldr	r3, [pc, #524]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016bea:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016bec:	0a1b      	lsrs	r3, r3, #8
 8016bee:	220f      	movs	r2, #15
 8016bf0:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016bf2:	4a83      	ldr	r2, [pc, #524]	@ (8016e00 <HAL_RCC_OscConfig+0x338>)
 8016bf4:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016bf6:	001a      	movs	r2, r3
 8016bf8:	231f      	movs	r3, #31
 8016bfa:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016bfc:	000a      	movs	r2, r1
 8016bfe:	40da      	lsrs	r2, r3
 8016c00:	4b80      	ldr	r3, [pc, #512]	@ (8016e04 <HAL_RCC_OscConfig+0x33c>)
 8016c02:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8016c04:	4b80      	ldr	r3, [pc, #512]	@ (8016e08 <HAL_RCC_OscConfig+0x340>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	250f      	movs	r5, #15
 8016c0a:	197c      	adds	r4, r7, r5
 8016c0c:	0018      	movs	r0, r3
 8016c0e:	f7fb f837 	bl	8011c80 <HAL_InitTick>
 8016c12:	0003      	movs	r3, r0
 8016c14:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8016c16:	197b      	adds	r3, r7, r5
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d057      	beq.n	8016cce <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8016c1e:	197b      	adds	r3, r7, r5
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	f000 fb6e 	bl	8017302 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	69db      	ldr	r3, [r3, #28]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d035      	beq.n	8016c9a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016c2e:	4b72      	ldr	r3, [pc, #456]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	4b71      	ldr	r3, [pc, #452]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c34:	2101      	movs	r1, #1
 8016c36:	430a      	orrs	r2, r1
 8016c38:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016c3a:	f7fb f87b 	bl	8011d34 <HAL_GetTick>
 8016c3e:	0003      	movs	r3, r0
 8016c40:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016c42:	e009      	b.n	8016c58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8016c44:	f7fb f876 	bl	8011d34 <HAL_GetTick>
 8016c48:	0002      	movs	r2, r0
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	1ad3      	subs	r3, r2, r3
 8016c4e:	2b02      	cmp	r3, #2
 8016c50:	d902      	bls.n	8016c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8016c52:	2303      	movs	r3, #3
 8016c54:	f000 fb55 	bl	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016c58:	4b67      	ldr	r3, [pc, #412]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2202      	movs	r2, #2
 8016c5e:	4013      	ands	r3, r2
 8016c60:	d0f0      	beq.n	8016c44 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016c62:	4b65      	ldr	r3, [pc, #404]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	4b64      	ldr	r3, [pc, #400]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c68:	2108      	movs	r1, #8
 8016c6a:	430a      	orrs	r2, r1
 8016c6c:	601a      	str	r2, [r3, #0]
 8016c6e:	4b62      	ldr	r3, [pc, #392]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	22f0      	movs	r2, #240	@ 0xf0
 8016c74:	4393      	bics	r3, r2
 8016c76:	0019      	movs	r1, r3
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c7e:	430a      	orrs	r2, r1
 8016c80:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016c82:	4b5d      	ldr	r3, [pc, #372]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	4a5d      	ldr	r2, [pc, #372]	@ (8016dfc <HAL_RCC_OscConfig+0x334>)
 8016c88:	4013      	ands	r3, r2
 8016c8a:	0019      	movs	r1, r3
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	6a1b      	ldr	r3, [r3, #32]
 8016c90:	021a      	lsls	r2, r3, #8
 8016c92:	4b59      	ldr	r3, [pc, #356]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c94:	430a      	orrs	r2, r1
 8016c96:	605a      	str	r2, [r3, #4]
 8016c98:	e01a      	b.n	8016cd0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016c9a:	4b57      	ldr	r3, [pc, #348]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	4b56      	ldr	r3, [pc, #344]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016ca0:	2101      	movs	r1, #1
 8016ca2:	438a      	bics	r2, r1
 8016ca4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016ca6:	f7fb f845 	bl	8011d34 <HAL_GetTick>
 8016caa:	0003      	movs	r3, r0
 8016cac:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016cae:	e008      	b.n	8016cc2 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8016cb0:	f7fb f840 	bl	8011d34 <HAL_GetTick>
 8016cb4:	0002      	movs	r2, r0
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	1ad3      	subs	r3, r2, r3
 8016cba:	2b02      	cmp	r3, #2
 8016cbc:	d901      	bls.n	8016cc2 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8016cbe:	2303      	movs	r3, #3
 8016cc0:	e31f      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	2202      	movs	r2, #2
 8016cc8:	4013      	ands	r3, r2
 8016cca:	d1f1      	bne.n	8016cb0 <HAL_RCC_OscConfig+0x1e8>
 8016ccc:	e000      	b.n	8016cd0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016cce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	2201      	movs	r2, #1
 8016cd6:	4013      	ands	r3, r2
 8016cd8:	d100      	bne.n	8016cdc <HAL_RCC_OscConfig+0x214>
 8016cda:	e065      	b.n	8016da8 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016cdc:	69bb      	ldr	r3, [r7, #24]
 8016cde:	2b10      	cmp	r3, #16
 8016ce0:	d005      	beq.n	8016cee <HAL_RCC_OscConfig+0x226>
 8016ce2:	69bb      	ldr	r3, [r7, #24]
 8016ce4:	2b18      	cmp	r3, #24
 8016ce6:	d10e      	bne.n	8016d06 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	2b03      	cmp	r3, #3
 8016cec:	d10b      	bne.n	8016d06 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016cee:	4b42      	ldr	r3, [pc, #264]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	2380      	movs	r3, #128	@ 0x80
 8016cf4:	029b      	lsls	r3, r3, #10
 8016cf6:	4013      	ands	r3, r2
 8016cf8:	d055      	beq.n	8016da6 <HAL_RCC_OscConfig+0x2de>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d151      	bne.n	8016da6 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8016d02:	2301      	movs	r3, #1
 8016d04:	e2fd      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	685a      	ldr	r2, [r3, #4]
 8016d0a:	2380      	movs	r3, #128	@ 0x80
 8016d0c:	025b      	lsls	r3, r3, #9
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d107      	bne.n	8016d22 <HAL_RCC_OscConfig+0x25a>
 8016d12:	4b39      	ldr	r3, [pc, #228]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d14:	681a      	ldr	r2, [r3, #0]
 8016d16:	4b38      	ldr	r3, [pc, #224]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d18:	2180      	movs	r1, #128	@ 0x80
 8016d1a:	0249      	lsls	r1, r1, #9
 8016d1c:	430a      	orrs	r2, r1
 8016d1e:	601a      	str	r2, [r3, #0]
 8016d20:	e013      	b.n	8016d4a <HAL_RCC_OscConfig+0x282>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	685a      	ldr	r2, [r3, #4]
 8016d26:	23a0      	movs	r3, #160	@ 0xa0
 8016d28:	02db      	lsls	r3, r3, #11
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d107      	bne.n	8016d3e <HAL_RCC_OscConfig+0x276>
 8016d2e:	4b32      	ldr	r3, [pc, #200]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d30:	681a      	ldr	r2, [r3, #0]
 8016d32:	4b31      	ldr	r3, [pc, #196]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d34:	21a0      	movs	r1, #160	@ 0xa0
 8016d36:	02c9      	lsls	r1, r1, #11
 8016d38:	430a      	orrs	r2, r1
 8016d3a:	601a      	str	r2, [r3, #0]
 8016d3c:	e005      	b.n	8016d4a <HAL_RCC_OscConfig+0x282>
 8016d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d40:	681a      	ldr	r2, [r3, #0]
 8016d42:	4b2d      	ldr	r3, [pc, #180]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d44:	4931      	ldr	r1, [pc, #196]	@ (8016e0c <HAL_RCC_OscConfig+0x344>)
 8016d46:	400a      	ands	r2, r1
 8016d48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d014      	beq.n	8016d7c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d52:	f7fa ffef 	bl	8011d34 <HAL_GetTick>
 8016d56:	0003      	movs	r3, r0
 8016d58:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016d5a:	e008      	b.n	8016d6e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8016d5c:	f7fa ffea 	bl	8011d34 <HAL_GetTick>
 8016d60:	0002      	movs	r2, r0
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	1ad3      	subs	r3, r2, r3
 8016d66:	2b64      	cmp	r3, #100	@ 0x64
 8016d68:	d901      	bls.n	8016d6e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8016d6a:	2303      	movs	r3, #3
 8016d6c:	e2c9      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016d6e:	4b22      	ldr	r3, [pc, #136]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	2380      	movs	r3, #128	@ 0x80
 8016d74:	029b      	lsls	r3, r3, #10
 8016d76:	4013      	ands	r3, r2
 8016d78:	d0f0      	beq.n	8016d5c <HAL_RCC_OscConfig+0x294>
 8016d7a:	e015      	b.n	8016da8 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d7c:	f7fa ffda 	bl	8011d34 <HAL_GetTick>
 8016d80:	0003      	movs	r3, r0
 8016d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016d84:	e008      	b.n	8016d98 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8016d86:	f7fa ffd5 	bl	8011d34 <HAL_GetTick>
 8016d8a:	0002      	movs	r2, r0
 8016d8c:	693b      	ldr	r3, [r7, #16]
 8016d8e:	1ad3      	subs	r3, r2, r3
 8016d90:	2b64      	cmp	r3, #100	@ 0x64
 8016d92:	d901      	bls.n	8016d98 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8016d94:	2303      	movs	r3, #3
 8016d96:	e2b4      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016d98:	4b17      	ldr	r3, [pc, #92]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016d9a:	681a      	ldr	r2, [r3, #0]
 8016d9c:	2380      	movs	r3, #128	@ 0x80
 8016d9e:	029b      	lsls	r3, r3, #10
 8016da0:	4013      	ands	r3, r2
 8016da2:	d1f0      	bne.n	8016d86 <HAL_RCC_OscConfig+0x2be>
 8016da4:	e000      	b.n	8016da8 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016da6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	2202      	movs	r2, #2
 8016dae:	4013      	ands	r3, r2
 8016db0:	d100      	bne.n	8016db4 <HAL_RCC_OscConfig+0x2ec>
 8016db2:	e074      	b.n	8016e9e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8016db4:	69bb      	ldr	r3, [r7, #24]
 8016db6:	2b08      	cmp	r3, #8
 8016db8:	d005      	beq.n	8016dc6 <HAL_RCC_OscConfig+0x2fe>
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	2b18      	cmp	r3, #24
 8016dbe:	d129      	bne.n	8016e14 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	2b02      	cmp	r3, #2
 8016dc4:	d126      	bne.n	8016e14 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016dc8:	681a      	ldr	r2, [r3, #0]
 8016dca:	2380      	movs	r3, #128	@ 0x80
 8016dcc:	00db      	lsls	r3, r3, #3
 8016dce:	4013      	ands	r3, r2
 8016dd0:	d005      	beq.n	8016dde <HAL_RCC_OscConfig+0x316>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d101      	bne.n	8016dde <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	e291      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016dde:	4b06      	ldr	r3, [pc, #24]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016de0:	685b      	ldr	r3, [r3, #4]
 8016de2:	4a0b      	ldr	r2, [pc, #44]	@ (8016e10 <HAL_RCC_OscConfig+0x348>)
 8016de4:	4013      	ands	r3, r2
 8016de6:	0019      	movs	r1, r3
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	691b      	ldr	r3, [r3, #16]
 8016dec:	061a      	lsls	r2, r3, #24
 8016dee:	4b02      	ldr	r3, [pc, #8]	@ (8016df8 <HAL_RCC_OscConfig+0x330>)
 8016df0:	430a      	orrs	r2, r1
 8016df2:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016df4:	e053      	b.n	8016e9e <HAL_RCC_OscConfig+0x3d6>
 8016df6:	46c0      	nop			@ (mov r8, r8)
 8016df8:	40021000 	.word	0x40021000
 8016dfc:	ffff00ff 	.word	0xffff00ff
 8016e00:	0801c2ac 	.word	0x0801c2ac
 8016e04:	2000025c 	.word	0x2000025c
 8016e08:	2000027c 	.word	0x2000027c
 8016e0c:	fffaffff 	.word	0xfffaffff
 8016e10:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	68db      	ldr	r3, [r3, #12]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d026      	beq.n	8016e6a <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016e1c:	4bc7      	ldr	r3, [pc, #796]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	4bc6      	ldr	r3, [pc, #792]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e22:	2180      	movs	r1, #128	@ 0x80
 8016e24:	0049      	lsls	r1, r1, #1
 8016e26:	430a      	orrs	r2, r1
 8016e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e2a:	f7fa ff83 	bl	8011d34 <HAL_GetTick>
 8016e2e:	0003      	movs	r3, r0
 8016e30:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016e32:	e008      	b.n	8016e46 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8016e34:	f7fa ff7e 	bl	8011d34 <HAL_GetTick>
 8016e38:	0002      	movs	r2, r0
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	1ad3      	subs	r3, r2, r3
 8016e3e:	2b02      	cmp	r3, #2
 8016e40:	d901      	bls.n	8016e46 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8016e42:	2303      	movs	r3, #3
 8016e44:	e25d      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016e46:	4bbd      	ldr	r3, [pc, #756]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	2380      	movs	r3, #128	@ 0x80
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	4013      	ands	r3, r2
 8016e50:	d0f0      	beq.n	8016e34 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016e52:	4bba      	ldr	r3, [pc, #744]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e54:	685b      	ldr	r3, [r3, #4]
 8016e56:	4aba      	ldr	r2, [pc, #744]	@ (8017140 <HAL_RCC_OscConfig+0x678>)
 8016e58:	4013      	ands	r3, r2
 8016e5a:	0019      	movs	r1, r3
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	691b      	ldr	r3, [r3, #16]
 8016e60:	061a      	lsls	r2, r3, #24
 8016e62:	4bb6      	ldr	r3, [pc, #728]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e64:	430a      	orrs	r2, r1
 8016e66:	605a      	str	r2, [r3, #4]
 8016e68:	e019      	b.n	8016e9e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016e6a:	4bb4      	ldr	r3, [pc, #720]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e6c:	681a      	ldr	r2, [r3, #0]
 8016e6e:	4bb3      	ldr	r3, [pc, #716]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e70:	49b4      	ldr	r1, [pc, #720]	@ (8017144 <HAL_RCC_OscConfig+0x67c>)
 8016e72:	400a      	ands	r2, r1
 8016e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e76:	f7fa ff5d 	bl	8011d34 <HAL_GetTick>
 8016e7a:	0003      	movs	r3, r0
 8016e7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016e7e:	e008      	b.n	8016e92 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8016e80:	f7fa ff58 	bl	8011d34 <HAL_GetTick>
 8016e84:	0002      	movs	r2, r0
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	1ad3      	subs	r3, r2, r3
 8016e8a:	2b02      	cmp	r3, #2
 8016e8c:	d901      	bls.n	8016e92 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8016e8e:	2303      	movs	r3, #3
 8016e90:	e237      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016e92:	4baa      	ldr	r3, [pc, #680]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016e94:	681a      	ldr	r2, [r3, #0]
 8016e96:	2380      	movs	r3, #128	@ 0x80
 8016e98:	00db      	lsls	r3, r3, #3
 8016e9a:	4013      	ands	r3, r2
 8016e9c:	d1f0      	bne.n	8016e80 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2208      	movs	r2, #8
 8016ea4:	4013      	ands	r3, r2
 8016ea6:	d051      	beq.n	8016f4c <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	695b      	ldr	r3, [r3, #20]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d031      	beq.n	8016f14 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	699b      	ldr	r3, [r3, #24]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d108      	bne.n	8016eca <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8016eb8:	4aa0      	ldr	r2, [pc, #640]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016eba:	2394      	movs	r3, #148	@ 0x94
 8016ebc:	58d3      	ldr	r3, [r2, r3]
 8016ebe:	499f      	ldr	r1, [pc, #636]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016ec0:	2204      	movs	r2, #4
 8016ec2:	4393      	bics	r3, r2
 8016ec4:	2294      	movs	r2, #148	@ 0x94
 8016ec6:	508b      	str	r3, [r1, r2]
 8016ec8:	e007      	b.n	8016eda <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8016eca:	4a9c      	ldr	r2, [pc, #624]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016ecc:	2394      	movs	r3, #148	@ 0x94
 8016ece:	58d3      	ldr	r3, [r2, r3]
 8016ed0:	499a      	ldr	r1, [pc, #616]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016ed2:	2204      	movs	r2, #4
 8016ed4:	4313      	orrs	r3, r2
 8016ed6:	2294      	movs	r2, #148	@ 0x94
 8016ed8:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016eda:	4a98      	ldr	r2, [pc, #608]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016edc:	2394      	movs	r3, #148	@ 0x94
 8016ede:	58d3      	ldr	r3, [r2, r3]
 8016ee0:	4996      	ldr	r1, [pc, #600]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016ee2:	2201      	movs	r2, #1
 8016ee4:	4313      	orrs	r3, r2
 8016ee6:	2294      	movs	r2, #148	@ 0x94
 8016ee8:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016eea:	f7fa ff23 	bl	8011d34 <HAL_GetTick>
 8016eee:	0003      	movs	r3, r0
 8016ef0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016ef2:	e008      	b.n	8016f06 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016ef4:	f7fa ff1e 	bl	8011d34 <HAL_GetTick>
 8016ef8:	0002      	movs	r2, r0
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	1ad3      	subs	r3, r2, r3
 8016efe:	2b11      	cmp	r3, #17
 8016f00:	d901      	bls.n	8016f06 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8016f02:	2303      	movs	r3, #3
 8016f04:	e1fd      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016f06:	4a8d      	ldr	r2, [pc, #564]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f08:	2394      	movs	r3, #148	@ 0x94
 8016f0a:	58d3      	ldr	r3, [r2, r3]
 8016f0c:	2202      	movs	r2, #2
 8016f0e:	4013      	ands	r3, r2
 8016f10:	d0f0      	beq.n	8016ef4 <HAL_RCC_OscConfig+0x42c>
 8016f12:	e01b      	b.n	8016f4c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016f14:	4a89      	ldr	r2, [pc, #548]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f16:	2394      	movs	r3, #148	@ 0x94
 8016f18:	58d3      	ldr	r3, [r2, r3]
 8016f1a:	4988      	ldr	r1, [pc, #544]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f1c:	2201      	movs	r2, #1
 8016f1e:	4393      	bics	r3, r2
 8016f20:	2294      	movs	r2, #148	@ 0x94
 8016f22:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016f24:	f7fa ff06 	bl	8011d34 <HAL_GetTick>
 8016f28:	0003      	movs	r3, r0
 8016f2a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8016f2c:	e008      	b.n	8016f40 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016f2e:	f7fa ff01 	bl	8011d34 <HAL_GetTick>
 8016f32:	0002      	movs	r2, r0
 8016f34:	693b      	ldr	r3, [r7, #16]
 8016f36:	1ad3      	subs	r3, r2, r3
 8016f38:	2b11      	cmp	r3, #17
 8016f3a:	d901      	bls.n	8016f40 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8016f3c:	2303      	movs	r3, #3
 8016f3e:	e1e0      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8016f40:	4a7e      	ldr	r2, [pc, #504]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f42:	2394      	movs	r3, #148	@ 0x94
 8016f44:	58d3      	ldr	r3, [r2, r3]
 8016f46:	2202      	movs	r2, #2
 8016f48:	4013      	ands	r3, r2
 8016f4a:	d1f0      	bne.n	8016f2e <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2204      	movs	r2, #4
 8016f52:	4013      	ands	r3, r2
 8016f54:	d100      	bne.n	8016f58 <HAL_RCC_OscConfig+0x490>
 8016f56:	e10d      	b.n	8017174 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016f58:	201f      	movs	r0, #31
 8016f5a:	183b      	adds	r3, r7, r0
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8016f60:	4b76      	ldr	r3, [pc, #472]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016f64:	2380      	movs	r3, #128	@ 0x80
 8016f66:	055b      	lsls	r3, r3, #21
 8016f68:	4013      	ands	r3, r2
 8016f6a:	d110      	bne.n	8016f8e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016f6c:	4b73      	ldr	r3, [pc, #460]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016f70:	4b72      	ldr	r3, [pc, #456]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f72:	2180      	movs	r1, #128	@ 0x80
 8016f74:	0549      	lsls	r1, r1, #21
 8016f76:	430a      	orrs	r2, r1
 8016f78:	659a      	str	r2, [r3, #88]	@ 0x58
 8016f7a:	4b70      	ldr	r3, [pc, #448]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016f7e:	2380      	movs	r3, #128	@ 0x80
 8016f80:	055b      	lsls	r3, r3, #21
 8016f82:	4013      	ands	r3, r2
 8016f84:	60bb      	str	r3, [r7, #8]
 8016f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016f88:	183b      	adds	r3, r7, r0
 8016f8a:	2201      	movs	r2, #1
 8016f8c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8017148 <HAL_RCC_OscConfig+0x680>)
 8016f90:	681a      	ldr	r2, [r3, #0]
 8016f92:	2380      	movs	r3, #128	@ 0x80
 8016f94:	005b      	lsls	r3, r3, #1
 8016f96:	4013      	ands	r3, r2
 8016f98:	d11a      	bne.n	8016fd0 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8017148 <HAL_RCC_OscConfig+0x680>)
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8017148 <HAL_RCC_OscConfig+0x680>)
 8016fa0:	2180      	movs	r1, #128	@ 0x80
 8016fa2:	0049      	lsls	r1, r1, #1
 8016fa4:	430a      	orrs	r2, r1
 8016fa6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016fa8:	f7fa fec4 	bl	8011d34 <HAL_GetTick>
 8016fac:	0003      	movs	r3, r0
 8016fae:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016fb0:	e008      	b.n	8016fc4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016fb2:	f7fa febf 	bl	8011d34 <HAL_GetTick>
 8016fb6:	0002      	movs	r2, r0
 8016fb8:	693b      	ldr	r3, [r7, #16]
 8016fba:	1ad3      	subs	r3, r2, r3
 8016fbc:	2b02      	cmp	r3, #2
 8016fbe:	d901      	bls.n	8016fc4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8016fc0:	2303      	movs	r3, #3
 8016fc2:	e19e      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016fc4:	4b60      	ldr	r3, [pc, #384]	@ (8017148 <HAL_RCC_OscConfig+0x680>)
 8016fc6:	681a      	ldr	r2, [r3, #0]
 8016fc8:	2380      	movs	r3, #128	@ 0x80
 8016fca:	005b      	lsls	r3, r3, #1
 8016fcc:	4013      	ands	r3, r2
 8016fce:	d0f0      	beq.n	8016fb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	689b      	ldr	r3, [r3, #8]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	4013      	ands	r3, r2
 8016fd8:	d01e      	beq.n	8017018 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	689b      	ldr	r3, [r3, #8]
 8016fde:	2204      	movs	r2, #4
 8016fe0:	4013      	ands	r3, r2
 8016fe2:	d010      	beq.n	8017006 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016fe4:	4a55      	ldr	r2, [pc, #340]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016fe6:	2390      	movs	r3, #144	@ 0x90
 8016fe8:	58d3      	ldr	r3, [r2, r3]
 8016fea:	4954      	ldr	r1, [pc, #336]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016fec:	2204      	movs	r2, #4
 8016fee:	4313      	orrs	r3, r2
 8016ff0:	2290      	movs	r2, #144	@ 0x90
 8016ff2:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016ff4:	4a51      	ldr	r2, [pc, #324]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016ff6:	2390      	movs	r3, #144	@ 0x90
 8016ff8:	58d3      	ldr	r3, [r2, r3]
 8016ffa:	4950      	ldr	r1, [pc, #320]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8016ffc:	2201      	movs	r2, #1
 8016ffe:	4313      	orrs	r3, r2
 8017000:	2290      	movs	r2, #144	@ 0x90
 8017002:	508b      	str	r3, [r1, r2]
 8017004:	e018      	b.n	8017038 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017006:	4a4d      	ldr	r2, [pc, #308]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017008:	2390      	movs	r3, #144	@ 0x90
 801700a:	58d3      	ldr	r3, [r2, r3]
 801700c:	494b      	ldr	r1, [pc, #300]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801700e:	2201      	movs	r2, #1
 8017010:	4313      	orrs	r3, r2
 8017012:	2290      	movs	r2, #144	@ 0x90
 8017014:	508b      	str	r3, [r1, r2]
 8017016:	e00f      	b.n	8017038 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017018:	4a48      	ldr	r2, [pc, #288]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801701a:	2390      	movs	r3, #144	@ 0x90
 801701c:	58d3      	ldr	r3, [r2, r3]
 801701e:	4947      	ldr	r1, [pc, #284]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017020:	2201      	movs	r2, #1
 8017022:	4393      	bics	r3, r2
 8017024:	2290      	movs	r2, #144	@ 0x90
 8017026:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017028:	4a44      	ldr	r2, [pc, #272]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801702a:	2390      	movs	r3, #144	@ 0x90
 801702c:	58d3      	ldr	r3, [r2, r3]
 801702e:	4943      	ldr	r1, [pc, #268]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017030:	2204      	movs	r2, #4
 8017032:	4393      	bics	r3, r2
 8017034:	2290      	movs	r2, #144	@ 0x90
 8017036:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	689b      	ldr	r3, [r3, #8]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d04f      	beq.n	80170e0 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017040:	f7fa fe78 	bl	8011d34 <HAL_GetTick>
 8017044:	0003      	movs	r3, r0
 8017046:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017048:	e009      	b.n	801705e <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801704a:	f7fa fe73 	bl	8011d34 <HAL_GetTick>
 801704e:	0002      	movs	r2, r0
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	1ad3      	subs	r3, r2, r3
 8017054:	4a3d      	ldr	r2, [pc, #244]	@ (801714c <HAL_RCC_OscConfig+0x684>)
 8017056:	4293      	cmp	r3, r2
 8017058:	d901      	bls.n	801705e <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 801705a:	2303      	movs	r3, #3
 801705c:	e151      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801705e:	4a37      	ldr	r2, [pc, #220]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017060:	2390      	movs	r3, #144	@ 0x90
 8017062:	58d3      	ldr	r3, [r2, r3]
 8017064:	2202      	movs	r2, #2
 8017066:	4013      	ands	r3, r2
 8017068:	d0ef      	beq.n	801704a <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	689b      	ldr	r3, [r3, #8]
 801706e:	2280      	movs	r2, #128	@ 0x80
 8017070:	4013      	ands	r3, r2
 8017072:	d01a      	beq.n	80170aa <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017074:	4a31      	ldr	r2, [pc, #196]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017076:	2390      	movs	r3, #144	@ 0x90
 8017078:	58d3      	ldr	r3, [r2, r3]
 801707a:	4930      	ldr	r1, [pc, #192]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801707c:	2280      	movs	r2, #128	@ 0x80
 801707e:	4313      	orrs	r3, r2
 8017080:	2290      	movs	r2, #144	@ 0x90
 8017082:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017084:	e009      	b.n	801709a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017086:	f7fa fe55 	bl	8011d34 <HAL_GetTick>
 801708a:	0002      	movs	r2, r0
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	4a2e      	ldr	r2, [pc, #184]	@ (801714c <HAL_RCC_OscConfig+0x684>)
 8017092:	4293      	cmp	r3, r2
 8017094:	d901      	bls.n	801709a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8017096:	2303      	movs	r3, #3
 8017098:	e133      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801709a:	4a28      	ldr	r2, [pc, #160]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801709c:	2390      	movs	r3, #144	@ 0x90
 801709e:	58d2      	ldr	r2, [r2, r3]
 80170a0:	2380      	movs	r3, #128	@ 0x80
 80170a2:	011b      	lsls	r3, r3, #4
 80170a4:	4013      	ands	r3, r2
 80170a6:	d0ee      	beq.n	8017086 <HAL_RCC_OscConfig+0x5be>
 80170a8:	e059      	b.n	801715e <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80170aa:	4a24      	ldr	r2, [pc, #144]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 80170ac:	2390      	movs	r3, #144	@ 0x90
 80170ae:	58d3      	ldr	r3, [r2, r3]
 80170b0:	4922      	ldr	r1, [pc, #136]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 80170b2:	2280      	movs	r2, #128	@ 0x80
 80170b4:	4393      	bics	r3, r2
 80170b6:	2290      	movs	r2, #144	@ 0x90
 80170b8:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80170ba:	e009      	b.n	80170d0 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80170bc:	f7fa fe3a 	bl	8011d34 <HAL_GetTick>
 80170c0:	0002      	movs	r2, r0
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	1ad3      	subs	r3, r2, r3
 80170c6:	4a21      	ldr	r2, [pc, #132]	@ (801714c <HAL_RCC_OscConfig+0x684>)
 80170c8:	4293      	cmp	r3, r2
 80170ca:	d901      	bls.n	80170d0 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 80170cc:	2303      	movs	r3, #3
 80170ce:	e118      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80170d0:	4a1a      	ldr	r2, [pc, #104]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 80170d2:	2390      	movs	r3, #144	@ 0x90
 80170d4:	58d2      	ldr	r2, [r2, r3]
 80170d6:	2380      	movs	r3, #128	@ 0x80
 80170d8:	011b      	lsls	r3, r3, #4
 80170da:	4013      	ands	r3, r2
 80170dc:	d1ee      	bne.n	80170bc <HAL_RCC_OscConfig+0x5f4>
 80170de:	e03e      	b.n	801715e <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80170e0:	f7fa fe28 	bl	8011d34 <HAL_GetTick>
 80170e4:	0003      	movs	r3, r0
 80170e6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80170e8:	e009      	b.n	80170fe <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80170ea:	f7fa fe23 	bl	8011d34 <HAL_GetTick>
 80170ee:	0002      	movs	r2, r0
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	4a15      	ldr	r2, [pc, #84]	@ (801714c <HAL_RCC_OscConfig+0x684>)
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d901      	bls.n	80170fe <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80170fa:	2303      	movs	r3, #3
 80170fc:	e101      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80170fe:	4a0f      	ldr	r2, [pc, #60]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017100:	2390      	movs	r3, #144	@ 0x90
 8017102:	58d3      	ldr	r3, [r2, r3]
 8017104:	2202      	movs	r2, #2
 8017106:	4013      	ands	r3, r2
 8017108:	d1ef      	bne.n	80170ea <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801710a:	4a0c      	ldr	r2, [pc, #48]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801710c:	2390      	movs	r3, #144	@ 0x90
 801710e:	58d3      	ldr	r3, [r2, r3]
 8017110:	2280      	movs	r2, #128	@ 0x80
 8017112:	4013      	ands	r3, r2
 8017114:	d023      	beq.n	801715e <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017116:	4a09      	ldr	r2, [pc, #36]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 8017118:	2390      	movs	r3, #144	@ 0x90
 801711a:	58d3      	ldr	r3, [r2, r3]
 801711c:	4907      	ldr	r1, [pc, #28]	@ (801713c <HAL_RCC_OscConfig+0x674>)
 801711e:	2280      	movs	r2, #128	@ 0x80
 8017120:	4393      	bics	r3, r2
 8017122:	2290      	movs	r2, #144	@ 0x90
 8017124:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017126:	e013      	b.n	8017150 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017128:	f7fa fe04 	bl	8011d34 <HAL_GetTick>
 801712c:	0002      	movs	r2, r0
 801712e:	693b      	ldr	r3, [r7, #16]
 8017130:	1ad3      	subs	r3, r2, r3
 8017132:	4a06      	ldr	r2, [pc, #24]	@ (801714c <HAL_RCC_OscConfig+0x684>)
 8017134:	4293      	cmp	r3, r2
 8017136:	d90b      	bls.n	8017150 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8017138:	2303      	movs	r3, #3
 801713a:	e0e2      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
 801713c:	40021000 	.word	0x40021000
 8017140:	80ffffff 	.word	0x80ffffff
 8017144:	fffffeff 	.word	0xfffffeff
 8017148:	40007000 	.word	0x40007000
 801714c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017150:	4a6e      	ldr	r2, [pc, #440]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017152:	2390      	movs	r3, #144	@ 0x90
 8017154:	58d2      	ldr	r2, [r2, r3]
 8017156:	2380      	movs	r3, #128	@ 0x80
 8017158:	011b      	lsls	r3, r3, #4
 801715a:	4013      	ands	r3, r2
 801715c:	d1e4      	bne.n	8017128 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801715e:	231f      	movs	r3, #31
 8017160:	18fb      	adds	r3, r7, r3
 8017162:	781b      	ldrb	r3, [r3, #0]
 8017164:	2b01      	cmp	r3, #1
 8017166:	d105      	bne.n	8017174 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017168:	4b68      	ldr	r3, [pc, #416]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801716a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801716c:	4b67      	ldr	r3, [pc, #412]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801716e:	4968      	ldr	r1, [pc, #416]	@ (8017310 <HAL_RCC_OscConfig+0x848>)
 8017170:	400a      	ands	r2, r1
 8017172:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	2220      	movs	r2, #32
 801717a:	4013      	ands	r3, r2
 801717c:	d03c      	beq.n	80171f8 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017182:	2b00      	cmp	r3, #0
 8017184:	d01c      	beq.n	80171c0 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017186:	4a61      	ldr	r2, [pc, #388]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017188:	2398      	movs	r3, #152	@ 0x98
 801718a:	58d3      	ldr	r3, [r2, r3]
 801718c:	495f      	ldr	r1, [pc, #380]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801718e:	2201      	movs	r2, #1
 8017190:	4313      	orrs	r3, r2
 8017192:	2298      	movs	r2, #152	@ 0x98
 8017194:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017196:	f7fa fdcd 	bl	8011d34 <HAL_GetTick>
 801719a:	0003      	movs	r3, r0
 801719c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801719e:	e008      	b.n	80171b2 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80171a0:	f7fa fdc8 	bl	8011d34 <HAL_GetTick>
 80171a4:	0002      	movs	r2, r0
 80171a6:	693b      	ldr	r3, [r7, #16]
 80171a8:	1ad3      	subs	r3, r2, r3
 80171aa:	2b02      	cmp	r3, #2
 80171ac:	d901      	bls.n	80171b2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 80171ae:	2303      	movs	r3, #3
 80171b0:	e0a7      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80171b2:	4a56      	ldr	r2, [pc, #344]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80171b4:	2398      	movs	r3, #152	@ 0x98
 80171b6:	58d3      	ldr	r3, [r2, r3]
 80171b8:	2202      	movs	r2, #2
 80171ba:	4013      	ands	r3, r2
 80171bc:	d0f0      	beq.n	80171a0 <HAL_RCC_OscConfig+0x6d8>
 80171be:	e01b      	b.n	80171f8 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80171c0:	4a52      	ldr	r2, [pc, #328]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80171c2:	2398      	movs	r3, #152	@ 0x98
 80171c4:	58d3      	ldr	r3, [r2, r3]
 80171c6:	4951      	ldr	r1, [pc, #324]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80171c8:	2201      	movs	r2, #1
 80171ca:	4393      	bics	r3, r2
 80171cc:	2298      	movs	r2, #152	@ 0x98
 80171ce:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171d0:	f7fa fdb0 	bl	8011d34 <HAL_GetTick>
 80171d4:	0003      	movs	r3, r0
 80171d6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80171d8:	e008      	b.n	80171ec <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80171da:	f7fa fdab 	bl	8011d34 <HAL_GetTick>
 80171de:	0002      	movs	r2, r0
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	1ad3      	subs	r3, r2, r3
 80171e4:	2b02      	cmp	r3, #2
 80171e6:	d901      	bls.n	80171ec <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80171e8:	2303      	movs	r3, #3
 80171ea:	e08a      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80171ec:	4a47      	ldr	r2, [pc, #284]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80171ee:	2398      	movs	r3, #152	@ 0x98
 80171f0:	58d3      	ldr	r3, [r2, r3]
 80171f2:	2202      	movs	r2, #2
 80171f4:	4013      	ands	r3, r2
 80171f6:	d1f0      	bne.n	80171da <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d100      	bne.n	8017202 <HAL_RCC_OscConfig+0x73a>
 8017200:	e07e      	b.n	8017300 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017202:	4b42      	ldr	r3, [pc, #264]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017204:	689b      	ldr	r3, [r3, #8]
 8017206:	2238      	movs	r2, #56	@ 0x38
 8017208:	4013      	ands	r3, r2
 801720a:	2b18      	cmp	r3, #24
 801720c:	d100      	bne.n	8017210 <HAL_RCC_OscConfig+0x748>
 801720e:	e075      	b.n	80172fc <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017214:	2b02      	cmp	r3, #2
 8017216:	d156      	bne.n	80172c6 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017218:	4b3c      	ldr	r3, [pc, #240]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	4b3b      	ldr	r3, [pc, #236]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801721e:	493d      	ldr	r1, [pc, #244]	@ (8017314 <HAL_RCC_OscConfig+0x84c>)
 8017220:	400a      	ands	r2, r1
 8017222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017224:	f7fa fd86 	bl	8011d34 <HAL_GetTick>
 8017228:	0003      	movs	r3, r0
 801722a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801722c:	e008      	b.n	8017240 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801722e:	f7fa fd81 	bl	8011d34 <HAL_GetTick>
 8017232:	0002      	movs	r2, r0
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	1ad3      	subs	r3, r2, r3
 8017238:	2b02      	cmp	r3, #2
 801723a:	d901      	bls.n	8017240 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 801723c:	2303      	movs	r3, #3
 801723e:	e060      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017240:	4b32      	ldr	r3, [pc, #200]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	2380      	movs	r3, #128	@ 0x80
 8017246:	049b      	lsls	r3, r3, #18
 8017248:	4013      	ands	r3, r2
 801724a:	d1f0      	bne.n	801722e <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801724c:	4b2f      	ldr	r3, [pc, #188]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	4a31      	ldr	r2, [pc, #196]	@ (8017318 <HAL_RCC_OscConfig+0x850>)
 8017252:	4013      	ands	r3, r2
 8017254:	0019      	movs	r1, r3
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801725e:	431a      	orrs	r2, r3
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017264:	021b      	lsls	r3, r3, #8
 8017266:	431a      	orrs	r2, r3
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801726c:	431a      	orrs	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017272:	431a      	orrs	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017278:	431a      	orrs	r2, r3
 801727a:	4b24      	ldr	r3, [pc, #144]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 801727c:	430a      	orrs	r2, r1
 801727e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8017280:	4b22      	ldr	r3, [pc, #136]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017282:	68da      	ldr	r2, [r3, #12]
 8017284:	4b21      	ldr	r3, [pc, #132]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017286:	2180      	movs	r1, #128	@ 0x80
 8017288:	0549      	lsls	r1, r1, #21
 801728a:	430a      	orrs	r2, r1
 801728c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801728e:	4b1f      	ldr	r3, [pc, #124]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	4b1e      	ldr	r3, [pc, #120]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 8017294:	2180      	movs	r1, #128	@ 0x80
 8017296:	0449      	lsls	r1, r1, #17
 8017298:	430a      	orrs	r2, r1
 801729a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801729c:	f7fa fd4a 	bl	8011d34 <HAL_GetTick>
 80172a0:	0003      	movs	r3, r0
 80172a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80172a4:	e008      	b.n	80172b8 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80172a6:	f7fa fd45 	bl	8011d34 <HAL_GetTick>
 80172aa:	0002      	movs	r2, r0
 80172ac:	693b      	ldr	r3, [r7, #16]
 80172ae:	1ad3      	subs	r3, r2, r3
 80172b0:	2b02      	cmp	r3, #2
 80172b2:	d901      	bls.n	80172b8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80172b4:	2303      	movs	r3, #3
 80172b6:	e024      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80172b8:	4b14      	ldr	r3, [pc, #80]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80172ba:	681a      	ldr	r2, [r3, #0]
 80172bc:	2380      	movs	r3, #128	@ 0x80
 80172be:	049b      	lsls	r3, r3, #18
 80172c0:	4013      	ands	r3, r2
 80172c2:	d0f0      	beq.n	80172a6 <HAL_RCC_OscConfig+0x7de>
 80172c4:	e01c      	b.n	8017300 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80172c6:	4b11      	ldr	r3, [pc, #68]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	4b10      	ldr	r3, [pc, #64]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80172cc:	4911      	ldr	r1, [pc, #68]	@ (8017314 <HAL_RCC_OscConfig+0x84c>)
 80172ce:	400a      	ands	r2, r1
 80172d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80172d2:	f7fa fd2f 	bl	8011d34 <HAL_GetTick>
 80172d6:	0003      	movs	r3, r0
 80172d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80172da:	e008      	b.n	80172ee <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80172dc:	f7fa fd2a 	bl	8011d34 <HAL_GetTick>
 80172e0:	0002      	movs	r2, r0
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	1ad3      	subs	r3, r2, r3
 80172e6:	2b02      	cmp	r3, #2
 80172e8:	d901      	bls.n	80172ee <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80172ea:	2303      	movs	r3, #3
 80172ec:	e009      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80172ee:	4b07      	ldr	r3, [pc, #28]	@ (801730c <HAL_RCC_OscConfig+0x844>)
 80172f0:	681a      	ldr	r2, [r3, #0]
 80172f2:	2380      	movs	r3, #128	@ 0x80
 80172f4:	049b      	lsls	r3, r3, #18
 80172f6:	4013      	ands	r3, r2
 80172f8:	d1f0      	bne.n	80172dc <HAL_RCC_OscConfig+0x814>
 80172fa:	e001      	b.n	8017300 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80172fc:	2301      	movs	r3, #1
 80172fe:	e000      	b.n	8017302 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8017300:	2300      	movs	r3, #0
}
 8017302:	0018      	movs	r0, r3
 8017304:	46bd      	mov	sp, r7
 8017306:	b008      	add	sp, #32
 8017308:	bdb0      	pop	{r4, r5, r7, pc}
 801730a:	46c0      	nop			@ (mov r8, r8)
 801730c:	40021000 	.word	0x40021000
 8017310:	efffffff 	.word	0xefffffff
 8017314:	feffffff 	.word	0xfeffffff
 8017318:	11c1808c 	.word	0x11c1808c

0801731c <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 801731c:	b5b0      	push	{r4, r5, r7, lr}
 801731e:	b084      	sub	sp, #16
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
 8017324:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017326:	4b6c      	ldr	r3, [pc, #432]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2207      	movs	r2, #7
 801732c:	4013      	ands	r3, r2
 801732e:	683a      	ldr	r2, [r7, #0]
 8017330:	429a      	cmp	r2, r3
 8017332:	d911      	bls.n	8017358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017334:	4b68      	ldr	r3, [pc, #416]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	2207      	movs	r2, #7
 801733a:	4393      	bics	r3, r2
 801733c:	0019      	movs	r1, r3
 801733e:	4b66      	ldr	r3, [pc, #408]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 8017340:	683a      	ldr	r2, [r7, #0]
 8017342:	430a      	orrs	r2, r1
 8017344:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017346:	4b64      	ldr	r3, [pc, #400]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2207      	movs	r2, #7
 801734c:	4013      	ands	r3, r2
 801734e:	683a      	ldr	r2, [r7, #0]
 8017350:	429a      	cmp	r2, r3
 8017352:	d001      	beq.n	8017358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017354:	2301      	movs	r3, #1
 8017356:	e0bb      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	2201      	movs	r2, #1
 801735e:	4013      	ands	r3, r2
 8017360:	d100      	bne.n	8017364 <HAL_RCC_ClockConfig+0x48>
 8017362:	e064      	b.n	801742e <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	2b03      	cmp	r3, #3
 801736a:	d107      	bne.n	801737c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801736c:	4b5b      	ldr	r3, [pc, #364]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	2380      	movs	r3, #128	@ 0x80
 8017372:	049b      	lsls	r3, r3, #18
 8017374:	4013      	ands	r3, r2
 8017376:	d138      	bne.n	80173ea <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8017378:	2301      	movs	r3, #1
 801737a:	e0a9      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	685b      	ldr	r3, [r3, #4]
 8017380:	2b02      	cmp	r3, #2
 8017382:	d107      	bne.n	8017394 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017384:	4b55      	ldr	r3, [pc, #340]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	2380      	movs	r3, #128	@ 0x80
 801738a:	029b      	lsls	r3, r3, #10
 801738c:	4013      	ands	r3, r2
 801738e:	d12c      	bne.n	80173ea <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8017390:	2301      	movs	r3, #1
 8017392:	e09d      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	685b      	ldr	r3, [r3, #4]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d106      	bne.n	80173aa <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801739c:	4b4f      	ldr	r3, [pc, #316]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	2202      	movs	r2, #2
 80173a2:	4013      	ands	r3, r2
 80173a4:	d121      	bne.n	80173ea <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80173a6:	2301      	movs	r3, #1
 80173a8:	e092      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	685b      	ldr	r3, [r3, #4]
 80173ae:	2b01      	cmp	r3, #1
 80173b0:	d107      	bne.n	80173c2 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80173b2:	4b4a      	ldr	r3, [pc, #296]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 80173b4:	681a      	ldr	r2, [r3, #0]
 80173b6:	2380      	movs	r3, #128	@ 0x80
 80173b8:	00db      	lsls	r3, r3, #3
 80173ba:	4013      	ands	r3, r2
 80173bc:	d115      	bne.n	80173ea <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80173be:	2301      	movs	r3, #1
 80173c0:	e086      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	2b04      	cmp	r3, #4
 80173c8:	d107      	bne.n	80173da <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80173ca:	4a44      	ldr	r2, [pc, #272]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 80173cc:	2394      	movs	r3, #148	@ 0x94
 80173ce:	58d3      	ldr	r3, [r2, r3]
 80173d0:	2202      	movs	r2, #2
 80173d2:	4013      	ands	r3, r2
 80173d4:	d109      	bne.n	80173ea <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80173d6:	2301      	movs	r3, #1
 80173d8:	e07a      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80173da:	4a40      	ldr	r2, [pc, #256]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 80173dc:	2390      	movs	r3, #144	@ 0x90
 80173de:	58d3      	ldr	r3, [r2, r3]
 80173e0:	2202      	movs	r2, #2
 80173e2:	4013      	ands	r3, r2
 80173e4:	d101      	bne.n	80173ea <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80173e6:	2301      	movs	r3, #1
 80173e8:	e072      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80173ea:	4b3c      	ldr	r3, [pc, #240]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 80173ec:	689b      	ldr	r3, [r3, #8]
 80173ee:	2207      	movs	r2, #7
 80173f0:	4393      	bics	r3, r2
 80173f2:	0019      	movs	r1, r3
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	685a      	ldr	r2, [r3, #4]
 80173f8:	4b38      	ldr	r3, [pc, #224]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 80173fa:	430a      	orrs	r2, r1
 80173fc:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80173fe:	f7fa fc99 	bl	8011d34 <HAL_GetTick>
 8017402:	0003      	movs	r3, r0
 8017404:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017406:	e009      	b.n	801741c <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017408:	f7fa fc94 	bl	8011d34 <HAL_GetTick>
 801740c:	0002      	movs	r2, r0
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	1ad3      	subs	r3, r2, r3
 8017412:	4a33      	ldr	r2, [pc, #204]	@ (80174e0 <HAL_RCC_ClockConfig+0x1c4>)
 8017414:	4293      	cmp	r3, r2
 8017416:	d901      	bls.n	801741c <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8017418:	2303      	movs	r3, #3
 801741a:	e059      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801741c:	4b2f      	ldr	r3, [pc, #188]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 801741e:	689b      	ldr	r3, [r3, #8]
 8017420:	2238      	movs	r2, #56	@ 0x38
 8017422:	401a      	ands	r2, r3
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	00db      	lsls	r3, r3, #3
 801742a:	429a      	cmp	r2, r3
 801742c:	d1ec      	bne.n	8017408 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	2202      	movs	r2, #2
 8017434:	4013      	ands	r3, r2
 8017436:	d009      	beq.n	801744c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017438:	4b28      	ldr	r3, [pc, #160]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 801743a:	689b      	ldr	r3, [r3, #8]
 801743c:	4a29      	ldr	r2, [pc, #164]	@ (80174e4 <HAL_RCC_ClockConfig+0x1c8>)
 801743e:	4013      	ands	r3, r2
 8017440:	0019      	movs	r1, r3
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	689a      	ldr	r2, [r3, #8]
 8017446:	4b25      	ldr	r3, [pc, #148]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 8017448:	430a      	orrs	r2, r1
 801744a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801744c:	4b22      	ldr	r3, [pc, #136]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	2207      	movs	r2, #7
 8017452:	4013      	ands	r3, r2
 8017454:	683a      	ldr	r2, [r7, #0]
 8017456:	429a      	cmp	r2, r3
 8017458:	d211      	bcs.n	801747e <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801745a:	4b1f      	ldr	r3, [pc, #124]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	2207      	movs	r2, #7
 8017460:	4393      	bics	r3, r2
 8017462:	0019      	movs	r1, r3
 8017464:	4b1c      	ldr	r3, [pc, #112]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 8017466:	683a      	ldr	r2, [r7, #0]
 8017468:	430a      	orrs	r2, r1
 801746a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801746c:	4b1a      	ldr	r3, [pc, #104]	@ (80174d8 <HAL_RCC_ClockConfig+0x1bc>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	2207      	movs	r2, #7
 8017472:	4013      	ands	r3, r2
 8017474:	683a      	ldr	r2, [r7, #0]
 8017476:	429a      	cmp	r2, r3
 8017478:	d001      	beq.n	801747e <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 801747a:	2301      	movs	r3, #1
 801747c:	e028      	b.n	80174d0 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	2204      	movs	r2, #4
 8017484:	4013      	ands	r3, r2
 8017486:	d009      	beq.n	801749c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8017488:	4b14      	ldr	r3, [pc, #80]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 801748a:	689b      	ldr	r3, [r3, #8]
 801748c:	4a16      	ldr	r2, [pc, #88]	@ (80174e8 <HAL_RCC_ClockConfig+0x1cc>)
 801748e:	4013      	ands	r3, r2
 8017490:	0019      	movs	r1, r3
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	68da      	ldr	r2, [r3, #12]
 8017496:	4b11      	ldr	r3, [pc, #68]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 8017498:	430a      	orrs	r2, r1
 801749a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 801749c:	f000 f82a 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 80174a0:	0001      	movs	r1, r0
 80174a2:	4b0e      	ldr	r3, [pc, #56]	@ (80174dc <HAL_RCC_ClockConfig+0x1c0>)
 80174a4:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80174a6:	0a1b      	lsrs	r3, r3, #8
 80174a8:	220f      	movs	r2, #15
 80174aa:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80174ac:	4a0f      	ldr	r2, [pc, #60]	@ (80174ec <HAL_RCC_ClockConfig+0x1d0>)
 80174ae:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80174b0:	001a      	movs	r2, r3
 80174b2:	231f      	movs	r3, #31
 80174b4:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80174b6:	000a      	movs	r2, r1
 80174b8:	40da      	lsrs	r2, r3
 80174ba:	4b0d      	ldr	r3, [pc, #52]	@ (80174f0 <HAL_RCC_ClockConfig+0x1d4>)
 80174bc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80174be:	250b      	movs	r5, #11
 80174c0:	197c      	adds	r4, r7, r5
 80174c2:	2003      	movs	r0, #3
 80174c4:	f7fa fbdc 	bl	8011c80 <HAL_InitTick>
 80174c8:	0003      	movs	r3, r0
 80174ca:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80174cc:	197b      	adds	r3, r7, r5
 80174ce:	781b      	ldrb	r3, [r3, #0]
}
 80174d0:	0018      	movs	r0, r3
 80174d2:	46bd      	mov	sp, r7
 80174d4:	b004      	add	sp, #16
 80174d6:	bdb0      	pop	{r4, r5, r7, pc}
 80174d8:	40022000 	.word	0x40022000
 80174dc:	40021000 	.word	0x40021000
 80174e0:	00001388 	.word	0x00001388
 80174e4:	fffff0ff 	.word	0xfffff0ff
 80174e8:	ffff8fff 	.word	0xffff8fff
 80174ec:	0801c2ac 	.word	0x0801c2ac
 80174f0:	2000025c 	.word	0x2000025c

080174f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b08a      	sub	sp, #40	@ 0x28
 80174f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80174fa:	2300      	movs	r3, #0
 80174fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80174fe:	2300      	movs	r3, #0
 8017500:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017502:	4b46      	ldr	r3, [pc, #280]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 8017504:	689b      	ldr	r3, [r3, #8]
 8017506:	2238      	movs	r2, #56	@ 0x38
 8017508:	4013      	ands	r3, r2
 801750a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801750c:	4b43      	ldr	r3, [pc, #268]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	2203      	movs	r2, #3
 8017512:	4013      	ands	r3, r2
 8017514:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d005      	beq.n	8017528 <HAL_RCC_GetSysClockFreq+0x34>
 801751c:	69bb      	ldr	r3, [r7, #24]
 801751e:	2b18      	cmp	r3, #24
 8017520:	d125      	bne.n	801756e <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	2b01      	cmp	r3, #1
 8017526:	d122      	bne.n	801756e <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8017528:	4b3c      	ldr	r3, [pc, #240]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	2208      	movs	r2, #8
 801752e:	4013      	ands	r3, r2
 8017530:	d107      	bne.n	8017542 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8017532:	4a3a      	ldr	r2, [pc, #232]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 8017534:	2394      	movs	r3, #148	@ 0x94
 8017536:	58d3      	ldr	r3, [r2, r3]
 8017538:	0a1b      	lsrs	r3, r3, #8
 801753a:	220f      	movs	r2, #15
 801753c:	4013      	ands	r3, r2
 801753e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017540:	e005      	b.n	801754e <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8017542:	4b36      	ldr	r3, [pc, #216]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	091b      	lsrs	r3, r3, #4
 8017548:	220f      	movs	r2, #15
 801754a:	4013      	ands	r3, r2
 801754c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 801754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017550:	2b0b      	cmp	r3, #11
 8017552:	d901      	bls.n	8017558 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8017554:	2300      	movs	r3, #0
 8017556:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8017558:	4b31      	ldr	r3, [pc, #196]	@ (8017620 <HAL_RCC_GetSysClockFreq+0x12c>)
 801755a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801755c:	0092      	lsls	r2, r2, #2
 801755e:	58d3      	ldr	r3, [r2, r3]
 8017560:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d11b      	bne.n	80175a0 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8017568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801756c:	e018      	b.n	80175a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801756e:	69bb      	ldr	r3, [r7, #24]
 8017570:	2b08      	cmp	r3, #8
 8017572:	d102      	bne.n	801757a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017574:	4b2b      	ldr	r3, [pc, #172]	@ (8017624 <HAL_RCC_GetSysClockFreq+0x130>)
 8017576:	623b      	str	r3, [r7, #32]
 8017578:	e012      	b.n	80175a0 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801757a:	69bb      	ldr	r3, [r7, #24]
 801757c:	2b10      	cmp	r3, #16
 801757e:	d102      	bne.n	8017586 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8017580:	4b29      	ldr	r3, [pc, #164]	@ (8017628 <HAL_RCC_GetSysClockFreq+0x134>)
 8017582:	623b      	str	r3, [r7, #32]
 8017584:	e00c      	b.n	80175a0 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	2b20      	cmp	r3, #32
 801758a:	d103      	bne.n	8017594 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 801758c:	23fa      	movs	r3, #250	@ 0xfa
 801758e:	01db      	lsls	r3, r3, #7
 8017590:	623b      	str	r3, [r7, #32]
 8017592:	e005      	b.n	80175a0 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8017594:	69bb      	ldr	r3, [r7, #24]
 8017596:	2b28      	cmp	r3, #40	@ 0x28
 8017598:	d102      	bne.n	80175a0 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 801759a:	2380      	movs	r3, #128	@ 0x80
 801759c:	021b      	lsls	r3, r3, #8
 801759e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80175a0:	69bb      	ldr	r3, [r7, #24]
 80175a2:	2b18      	cmp	r3, #24
 80175a4:	d135      	bne.n	8017612 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80175a6:	4b1d      	ldr	r3, [pc, #116]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 80175a8:	68db      	ldr	r3, [r3, #12]
 80175aa:	2203      	movs	r2, #3
 80175ac:	4013      	ands	r3, r2
 80175ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80175b0:	4b1a      	ldr	r3, [pc, #104]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	091b      	lsrs	r3, r3, #4
 80175b6:	2207      	movs	r2, #7
 80175b8:	4013      	ands	r3, r2
 80175ba:	3301      	adds	r3, #1
 80175bc:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	2b02      	cmp	r3, #2
 80175c2:	d003      	beq.n	80175cc <HAL_RCC_GetSysClockFreq+0xd8>
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	2b03      	cmp	r3, #3
 80175c8:	d003      	beq.n	80175d2 <HAL_RCC_GetSysClockFreq+0xde>
 80175ca:	e005      	b.n	80175d8 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80175cc:	4b15      	ldr	r3, [pc, #84]	@ (8017624 <HAL_RCC_GetSysClockFreq+0x130>)
 80175ce:	61fb      	str	r3, [r7, #28]
        break;
 80175d0:	e005      	b.n	80175de <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80175d2:	4b15      	ldr	r3, [pc, #84]	@ (8017628 <HAL_RCC_GetSysClockFreq+0x134>)
 80175d4:	61fb      	str	r3, [r7, #28]
        break;
 80175d6:	e002      	b.n	80175de <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80175d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175da:	61fb      	str	r3, [r7, #28]
        break;
 80175dc:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80175de:	4b0f      	ldr	r3, [pc, #60]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 80175e0:	68db      	ldr	r3, [r3, #12]
 80175e2:	0a1b      	lsrs	r3, r3, #8
 80175e4:	227f      	movs	r2, #127	@ 0x7f
 80175e6:	4013      	ands	r3, r2
 80175e8:	69fa      	ldr	r2, [r7, #28]
 80175ea:	4353      	muls	r3, r2
 80175ec:	68f9      	ldr	r1, [r7, #12]
 80175ee:	0018      	movs	r0, r3
 80175f0:	f7e8 fd92 	bl	8000118 <__udivsi3>
 80175f4:	0003      	movs	r3, r0
 80175f6:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80175f8:	4b08      	ldr	r3, [pc, #32]	@ (801761c <HAL_RCC_GetSysClockFreq+0x128>)
 80175fa:	68db      	ldr	r3, [r3, #12]
 80175fc:	0f5b      	lsrs	r3, r3, #29
 80175fe:	2207      	movs	r2, #7
 8017600:	4013      	ands	r3, r2
 8017602:	3301      	adds	r3, #1
 8017604:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8017606:	6879      	ldr	r1, [r7, #4]
 8017608:	68b8      	ldr	r0, [r7, #8]
 801760a:	f7e8 fd85 	bl	8000118 <__udivsi3>
 801760e:	0003      	movs	r3, r0
 8017610:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8017612:	6a3b      	ldr	r3, [r7, #32]
}
 8017614:	0018      	movs	r0, r3
 8017616:	46bd      	mov	sp, r7
 8017618:	b00a      	add	sp, #40	@ 0x28
 801761a:	bd80      	pop	{r7, pc}
 801761c:	40021000 	.word	0x40021000
 8017620:	0801c2c4 	.word	0x0801c2c4
 8017624:	00f42400 	.word	0x00f42400
 8017628:	003d0900 	.word	0x003d0900

0801762c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017630:	4b02      	ldr	r3, [pc, #8]	@ (801763c <HAL_RCC_GetHCLKFreq+0x10>)
 8017632:	681b      	ldr	r3, [r3, #0]
}
 8017634:	0018      	movs	r0, r3
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
 801763a:	46c0      	nop			@ (mov r8, r8)
 801763c:	2000025c 	.word	0x2000025c

08017640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8017644:	f7ff fff2 	bl	801762c <HAL_RCC_GetHCLKFreq>
 8017648:	0001      	movs	r1, r0
 801764a:	4b07      	ldr	r3, [pc, #28]	@ (8017668 <HAL_RCC_GetPCLK1Freq+0x28>)
 801764c:	689b      	ldr	r3, [r3, #8]
 801764e:	0b1b      	lsrs	r3, r3, #12
 8017650:	2207      	movs	r2, #7
 8017652:	4013      	ands	r3, r2
 8017654:	4a05      	ldr	r2, [pc, #20]	@ (801766c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8017656:	5cd3      	ldrb	r3, [r2, r3]
 8017658:	001a      	movs	r2, r3
 801765a:	231f      	movs	r3, #31
 801765c:	4013      	ands	r3, r2
 801765e:	40d9      	lsrs	r1, r3
 8017660:	000b      	movs	r3, r1
}
 8017662:	0018      	movs	r0, r3
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	40021000 	.word	0x40021000
 801766c:	0801c2bc 	.word	0x0801c2bc

08017670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b086      	sub	sp, #24
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8017678:	2300      	movs	r3, #0
 801767a:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 801767c:	4b2f      	ldr	r3, [pc, #188]	@ (801773c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801767e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017680:	2380      	movs	r3, #128	@ 0x80
 8017682:	055b      	lsls	r3, r3, #21
 8017684:	4013      	ands	r3, r2
 8017686:	d004      	beq.n	8017692 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017688:	f7ff f9de 	bl	8016a48 <HAL_PWREx_GetVoltageRange>
 801768c:	0003      	movs	r3, r0
 801768e:	617b      	str	r3, [r7, #20]
 8017690:	e017      	b.n	80176c2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8017692:	4b2a      	ldr	r3, [pc, #168]	@ (801773c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017694:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017696:	4b29      	ldr	r3, [pc, #164]	@ (801773c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017698:	2180      	movs	r1, #128	@ 0x80
 801769a:	0549      	lsls	r1, r1, #21
 801769c:	430a      	orrs	r2, r1
 801769e:	659a      	str	r2, [r3, #88]	@ 0x58
 80176a0:	4b26      	ldr	r3, [pc, #152]	@ (801773c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80176a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80176a4:	2380      	movs	r3, #128	@ 0x80
 80176a6:	055b      	lsls	r3, r3, #21
 80176a8:	4013      	ands	r3, r2
 80176aa:	60fb      	str	r3, [r7, #12]
 80176ac:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80176ae:	f7ff f9cb 	bl	8016a48 <HAL_PWREx_GetVoltageRange>
 80176b2:	0003      	movs	r3, r0
 80176b4:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80176b6:	4b21      	ldr	r3, [pc, #132]	@ (801773c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80176b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80176ba:	4b20      	ldr	r3, [pc, #128]	@ (801773c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80176bc:	4920      	ldr	r1, [pc, #128]	@ (8017740 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80176be:	400a      	ands	r2, r1
 80176c0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80176c2:	697a      	ldr	r2, [r7, #20]
 80176c4:	2380      	movs	r3, #128	@ 0x80
 80176c6:	009b      	lsls	r3, r3, #2
 80176c8:	429a      	cmp	r2, r3
 80176ca:	d111      	bne.n	80176f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	2b80      	cmp	r3, #128	@ 0x80
 80176d0:	d91c      	bls.n	801770c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	2bb0      	cmp	r3, #176	@ 0xb0
 80176d6:	d902      	bls.n	80176de <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80176d8:	2302      	movs	r3, #2
 80176da:	613b      	str	r3, [r7, #16]
 80176dc:	e016      	b.n	801770c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2b90      	cmp	r3, #144	@ 0x90
 80176e2:	d902      	bls.n	80176ea <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80176e4:	2301      	movs	r3, #1
 80176e6:	613b      	str	r3, [r7, #16]
 80176e8:	e010      	b.n	801770c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80176ea:	2300      	movs	r3, #0
 80176ec:	613b      	str	r3, [r7, #16]
 80176ee:	e00d      	b.n	801770c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80176f4:	d902      	bls.n	80176fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80176f6:	2302      	movs	r3, #2
 80176f8:	613b      	str	r3, [r7, #16]
 80176fa:	e007      	b.n	801770c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2b70      	cmp	r3, #112	@ 0x70
 8017700:	d102      	bne.n	8017708 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8017702:	2301      	movs	r3, #1
 8017704:	613b      	str	r3, [r7, #16]
 8017706:	e001      	b.n	801770c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8017708:	2300      	movs	r3, #0
 801770a:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801770c:	4b0d      	ldr	r3, [pc, #52]	@ (8017744 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	2207      	movs	r2, #7
 8017712:	4393      	bics	r3, r2
 8017714:	0019      	movs	r1, r3
 8017716:	4b0b      	ldr	r3, [pc, #44]	@ (8017744 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8017718:	693a      	ldr	r2, [r7, #16]
 801771a:	430a      	orrs	r2, r1
 801771c:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801771e:	4b09      	ldr	r3, [pc, #36]	@ (8017744 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	2207      	movs	r2, #7
 8017724:	4013      	ands	r3, r2
 8017726:	693a      	ldr	r2, [r7, #16]
 8017728:	429a      	cmp	r2, r3
 801772a:	d001      	beq.n	8017730 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 801772c:	2301      	movs	r3, #1
 801772e:	e000      	b.n	8017732 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8017730:	2300      	movs	r3, #0
}
 8017732:	0018      	movs	r0, r3
 8017734:	46bd      	mov	sp, r7
 8017736:	b006      	add	sp, #24
 8017738:	bd80      	pop	{r7, pc}
 801773a:	46c0      	nop			@ (mov r8, r8)
 801773c:	40021000 	.word	0x40021000
 8017740:	efffffff 	.word	0xefffffff
 8017744:	40022000 	.word	0x40022000

08017748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b086      	sub	sp, #24
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8017750:	2313      	movs	r3, #19
 8017752:	18fb      	adds	r3, r7, r3
 8017754:	2200      	movs	r2, #0
 8017756:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017758:	2312      	movs	r3, #18
 801775a:	18fb      	adds	r3, r7, r3
 801775c:	2200      	movs	r2, #0
 801775e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681a      	ldr	r2, [r3, #0]
 8017764:	2380      	movs	r3, #128	@ 0x80
 8017766:	021b      	lsls	r3, r3, #8
 8017768:	4013      	ands	r3, r2
 801776a:	d100      	bne.n	801776e <HAL_RCCEx_PeriphCLKConfig+0x26>
 801776c:	e0b7      	b.n	80178de <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 801776e:	2011      	movs	r0, #17
 8017770:	183b      	adds	r3, r7, r0
 8017772:	2200      	movs	r2, #0
 8017774:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017776:	4b4c      	ldr	r3, [pc, #304]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017778:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801777a:	2380      	movs	r3, #128	@ 0x80
 801777c:	055b      	lsls	r3, r3, #21
 801777e:	4013      	ands	r3, r2
 8017780:	d110      	bne.n	80177a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017782:	4b49      	ldr	r3, [pc, #292]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017784:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017786:	4b48      	ldr	r3, [pc, #288]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017788:	2180      	movs	r1, #128	@ 0x80
 801778a:	0549      	lsls	r1, r1, #21
 801778c:	430a      	orrs	r2, r1
 801778e:	659a      	str	r2, [r3, #88]	@ 0x58
 8017790:	4b45      	ldr	r3, [pc, #276]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017792:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017794:	2380      	movs	r3, #128	@ 0x80
 8017796:	055b      	lsls	r3, r3, #21
 8017798:	4013      	ands	r3, r2
 801779a:	60bb      	str	r3, [r7, #8]
 801779c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801779e:	183b      	adds	r3, r7, r0
 80177a0:	2201      	movs	r2, #1
 80177a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80177a4:	4b41      	ldr	r3, [pc, #260]	@ (80178ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80177a6:	681a      	ldr	r2, [r3, #0]
 80177a8:	4b40      	ldr	r3, [pc, #256]	@ (80178ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80177aa:	2180      	movs	r1, #128	@ 0x80
 80177ac:	0049      	lsls	r1, r1, #1
 80177ae:	430a      	orrs	r2, r1
 80177b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80177b2:	f7fa fabf 	bl	8011d34 <HAL_GetTick>
 80177b6:	0003      	movs	r3, r0
 80177b8:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80177ba:	e00b      	b.n	80177d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80177bc:	f7fa faba 	bl	8011d34 <HAL_GetTick>
 80177c0:	0002      	movs	r2, r0
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	1ad3      	subs	r3, r2, r3
 80177c6:	2b02      	cmp	r3, #2
 80177c8:	d904      	bls.n	80177d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80177ca:	2313      	movs	r3, #19
 80177cc:	18fb      	adds	r3, r7, r3
 80177ce:	2203      	movs	r2, #3
 80177d0:	701a      	strb	r2, [r3, #0]
        break;
 80177d2:	e005      	b.n	80177e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80177d4:	4b35      	ldr	r3, [pc, #212]	@ (80178ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80177d6:	681a      	ldr	r2, [r3, #0]
 80177d8:	2380      	movs	r3, #128	@ 0x80
 80177da:	005b      	lsls	r3, r3, #1
 80177dc:	4013      	ands	r3, r2
 80177de:	d0ed      	beq.n	80177bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80177e0:	2313      	movs	r3, #19
 80177e2:	18fb      	adds	r3, r7, r3
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d168      	bne.n	80178bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80177ea:	4a2f      	ldr	r2, [pc, #188]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80177ec:	2390      	movs	r3, #144	@ 0x90
 80177ee:	58d2      	ldr	r2, [r2, r3]
 80177f0:	23c0      	movs	r3, #192	@ 0xc0
 80177f2:	009b      	lsls	r3, r3, #2
 80177f4:	4013      	ands	r3, r2
 80177f6:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d01f      	beq.n	801783e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017802:	697a      	ldr	r2, [r7, #20]
 8017804:	429a      	cmp	r2, r3
 8017806:	d01a      	beq.n	801783e <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8017808:	4a27      	ldr	r2, [pc, #156]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801780a:	2390      	movs	r3, #144	@ 0x90
 801780c:	58d3      	ldr	r3, [r2, r3]
 801780e:	4a28      	ldr	r2, [pc, #160]	@ (80178b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8017810:	4013      	ands	r3, r2
 8017812:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8017814:	4a24      	ldr	r2, [pc, #144]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017816:	2390      	movs	r3, #144	@ 0x90
 8017818:	58d3      	ldr	r3, [r2, r3]
 801781a:	4923      	ldr	r1, [pc, #140]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801781c:	2280      	movs	r2, #128	@ 0x80
 801781e:	0252      	lsls	r2, r2, #9
 8017820:	4313      	orrs	r3, r2
 8017822:	2290      	movs	r2, #144	@ 0x90
 8017824:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017826:	4a20      	ldr	r2, [pc, #128]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017828:	2390      	movs	r3, #144	@ 0x90
 801782a:	58d3      	ldr	r3, [r2, r3]
 801782c:	491e      	ldr	r1, [pc, #120]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801782e:	4a21      	ldr	r2, [pc, #132]	@ (80178b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8017830:	4013      	ands	r3, r2
 8017832:	2290      	movs	r2, #144	@ 0x90
 8017834:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017836:	491c      	ldr	r1, [pc, #112]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017838:	2290      	movs	r2, #144	@ 0x90
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801783e:	697b      	ldr	r3, [r7, #20]
 8017840:	2201      	movs	r2, #1
 8017842:	4013      	ands	r3, r2
 8017844:	d017      	beq.n	8017876 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017846:	f7fa fa75 	bl	8011d34 <HAL_GetTick>
 801784a:	0003      	movs	r3, r0
 801784c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801784e:	e00c      	b.n	801786a <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017850:	f7fa fa70 	bl	8011d34 <HAL_GetTick>
 8017854:	0002      	movs	r2, r0
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	1ad3      	subs	r3, r2, r3
 801785a:	4a17      	ldr	r2, [pc, #92]	@ (80178b8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 801785c:	4293      	cmp	r3, r2
 801785e:	d904      	bls.n	801786a <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8017860:	2313      	movs	r3, #19
 8017862:	18fb      	adds	r3, r7, r3
 8017864:	2203      	movs	r2, #3
 8017866:	701a      	strb	r2, [r3, #0]
            break;
 8017868:	e005      	b.n	8017876 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801786a:	4a0f      	ldr	r2, [pc, #60]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801786c:	2390      	movs	r3, #144	@ 0x90
 801786e:	58d3      	ldr	r3, [r2, r3]
 8017870:	2202      	movs	r2, #2
 8017872:	4013      	ands	r3, r2
 8017874:	d0ec      	beq.n	8017850 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8017876:	2313      	movs	r3, #19
 8017878:	18fb      	adds	r3, r7, r3
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d10b      	bne.n	8017898 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017880:	4a09      	ldr	r2, [pc, #36]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017882:	2390      	movs	r3, #144	@ 0x90
 8017884:	58d3      	ldr	r3, [r2, r3]
 8017886:	4a0a      	ldr	r2, [pc, #40]	@ (80178b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8017888:	401a      	ands	r2, r3
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801788e:	4906      	ldr	r1, [pc, #24]	@ (80178a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017890:	4313      	orrs	r3, r2
 8017892:	2290      	movs	r2, #144	@ 0x90
 8017894:	508b      	str	r3, [r1, r2]
 8017896:	e017      	b.n	80178c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017898:	2312      	movs	r3, #18
 801789a:	18fb      	adds	r3, r7, r3
 801789c:	2213      	movs	r2, #19
 801789e:	18ba      	adds	r2, r7, r2
 80178a0:	7812      	ldrb	r2, [r2, #0]
 80178a2:	701a      	strb	r2, [r3, #0]
 80178a4:	e010      	b.n	80178c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80178a6:	46c0      	nop			@ (mov r8, r8)
 80178a8:	40021000 	.word	0x40021000
 80178ac:	40007000 	.word	0x40007000
 80178b0:	fffffcff 	.word	0xfffffcff
 80178b4:	fffeffff 	.word	0xfffeffff
 80178b8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80178bc:	2312      	movs	r3, #18
 80178be:	18fb      	adds	r3, r7, r3
 80178c0:	2213      	movs	r2, #19
 80178c2:	18ba      	adds	r2, r7, r2
 80178c4:	7812      	ldrb	r2, [r2, #0]
 80178c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80178c8:	2311      	movs	r3, #17
 80178ca:	18fb      	adds	r3, r7, r3
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	2b01      	cmp	r3, #1
 80178d0:	d105      	bne.n	80178de <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80178d2:	4ba4      	ldr	r3, [pc, #656]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80178d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80178d6:	4ba3      	ldr	r3, [pc, #652]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80178d8:	49a3      	ldr	r1, [pc, #652]	@ (8017b68 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80178da:	400a      	ands	r2, r1
 80178dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2201      	movs	r2, #1
 80178e4:	4013      	ands	r3, r2
 80178e6:	d00b      	beq.n	8017900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80178e8:	4a9e      	ldr	r2, [pc, #632]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80178ea:	2388      	movs	r3, #136	@ 0x88
 80178ec:	58d3      	ldr	r3, [r2, r3]
 80178ee:	2203      	movs	r2, #3
 80178f0:	4393      	bics	r3, r2
 80178f2:	001a      	movs	r2, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	499a      	ldr	r1, [pc, #616]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80178fa:	4313      	orrs	r3, r2
 80178fc:	2288      	movs	r2, #136	@ 0x88
 80178fe:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2202      	movs	r2, #2
 8017906:	4013      	ands	r3, r2
 8017908:	d00b      	beq.n	8017922 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801790a:	4a96      	ldr	r2, [pc, #600]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801790c:	2388      	movs	r3, #136	@ 0x88
 801790e:	58d3      	ldr	r3, [r2, r3]
 8017910:	220c      	movs	r2, #12
 8017912:	4393      	bics	r3, r2
 8017914:	001a      	movs	r2, r3
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	689b      	ldr	r3, [r3, #8]
 801791a:	4992      	ldr	r1, [pc, #584]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801791c:	4313      	orrs	r3, r2
 801791e:	2288      	movs	r2, #136	@ 0x88
 8017920:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2210      	movs	r2, #16
 8017928:	4013      	ands	r3, r2
 801792a:	d00a      	beq.n	8017942 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801792c:	4a8d      	ldr	r2, [pc, #564]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801792e:	2388      	movs	r3, #136	@ 0x88
 8017930:	58d3      	ldr	r3, [r2, r3]
 8017932:	4a8e      	ldr	r2, [pc, #568]	@ (8017b6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8017934:	401a      	ands	r2, r3
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	695b      	ldr	r3, [r3, #20]
 801793a:	498a      	ldr	r1, [pc, #552]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801793c:	4313      	orrs	r3, r2
 801793e:	2288      	movs	r2, #136	@ 0x88
 8017940:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	2208      	movs	r2, #8
 8017948:	4013      	ands	r3, r2
 801794a:	d00a      	beq.n	8017962 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 801794c:	4a85      	ldr	r2, [pc, #532]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801794e:	2388      	movs	r3, #136	@ 0x88
 8017950:	58d3      	ldr	r3, [r2, r3]
 8017952:	4a87      	ldr	r2, [pc, #540]	@ (8017b70 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8017954:	401a      	ands	r2, r3
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	691b      	ldr	r3, [r3, #16]
 801795a:	4982      	ldr	r1, [pc, #520]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801795c:	4313      	orrs	r3, r2
 801795e:	2288      	movs	r2, #136	@ 0x88
 8017960:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2204      	movs	r2, #4
 8017968:	4013      	ands	r3, r2
 801796a:	d00b      	beq.n	8017984 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 801796c:	4a7d      	ldr	r2, [pc, #500]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801796e:	2388      	movs	r3, #136	@ 0x88
 8017970:	58d3      	ldr	r3, [r2, r3]
 8017972:	22c0      	movs	r2, #192	@ 0xc0
 8017974:	4393      	bics	r3, r2
 8017976:	001a      	movs	r2, r3
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	68db      	ldr	r3, [r3, #12]
 801797c:	4979      	ldr	r1, [pc, #484]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801797e:	4313      	orrs	r3, r2
 8017980:	2288      	movs	r2, #136	@ 0x88
 8017982:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2220      	movs	r2, #32
 801798a:	4013      	ands	r3, r2
 801798c:	d00a      	beq.n	80179a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801798e:	4a75      	ldr	r2, [pc, #468]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017990:	2388      	movs	r3, #136	@ 0x88
 8017992:	58d3      	ldr	r3, [r2, r3]
 8017994:	4a77      	ldr	r2, [pc, #476]	@ (8017b74 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8017996:	401a      	ands	r2, r3
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	699b      	ldr	r3, [r3, #24]
 801799c:	4971      	ldr	r1, [pc, #452]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801799e:	4313      	orrs	r3, r2
 80179a0:	2288      	movs	r2, #136	@ 0x88
 80179a2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	2240      	movs	r2, #64	@ 0x40
 80179aa:	4013      	ands	r3, r2
 80179ac:	d00a      	beq.n	80179c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80179ae:	4a6d      	ldr	r2, [pc, #436]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179b0:	2388      	movs	r3, #136	@ 0x88
 80179b2:	58d3      	ldr	r3, [r2, r3]
 80179b4:	4a70      	ldr	r2, [pc, #448]	@ (8017b78 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80179b6:	401a      	ands	r2, r3
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	69db      	ldr	r3, [r3, #28]
 80179bc:	4969      	ldr	r1, [pc, #420]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179be:	4313      	orrs	r3, r2
 80179c0:	2288      	movs	r2, #136	@ 0x88
 80179c2:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	2280      	movs	r2, #128	@ 0x80
 80179ca:	4013      	ands	r3, r2
 80179cc:	d00a      	beq.n	80179e4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80179ce:	4a65      	ldr	r2, [pc, #404]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179d0:	2388      	movs	r3, #136	@ 0x88
 80179d2:	58d3      	ldr	r3, [r2, r3]
 80179d4:	4a69      	ldr	r2, [pc, #420]	@ (8017b7c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80179d6:	401a      	ands	r2, r3
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6a1b      	ldr	r3, [r3, #32]
 80179dc:	4961      	ldr	r1, [pc, #388]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179de:	4313      	orrs	r3, r2
 80179e0:	2288      	movs	r2, #136	@ 0x88
 80179e2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681a      	ldr	r2, [r3, #0]
 80179e8:	2380      	movs	r3, #128	@ 0x80
 80179ea:	005b      	lsls	r3, r3, #1
 80179ec:	4013      	ands	r3, r2
 80179ee:	d00a      	beq.n	8017a06 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80179f0:	4a5c      	ldr	r2, [pc, #368]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80179f2:	2388      	movs	r3, #136	@ 0x88
 80179f4:	58d3      	ldr	r3, [r2, r3]
 80179f6:	4a62      	ldr	r2, [pc, #392]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80179f8:	401a      	ands	r2, r3
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179fe:	4959      	ldr	r1, [pc, #356]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a00:	4313      	orrs	r3, r2
 8017a02:	2288      	movs	r2, #136	@ 0x88
 8017a04:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681a      	ldr	r2, [r3, #0]
 8017a0a:	2380      	movs	r3, #128	@ 0x80
 8017a0c:	009b      	lsls	r3, r3, #2
 8017a0e:	4013      	ands	r3, r2
 8017a10:	d00a      	beq.n	8017a28 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8017a12:	4a54      	ldr	r2, [pc, #336]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a14:	2388      	movs	r3, #136	@ 0x88
 8017a16:	58d3      	ldr	r3, [r2, r3]
 8017a18:	4a5a      	ldr	r2, [pc, #360]	@ (8017b84 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8017a1a:	401a      	ands	r2, r3
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a20:	4950      	ldr	r1, [pc, #320]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a22:	4313      	orrs	r3, r2
 8017a24:	2288      	movs	r2, #136	@ 0x88
 8017a26:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	2380      	movs	r3, #128	@ 0x80
 8017a2e:	01db      	lsls	r3, r3, #7
 8017a30:	4013      	ands	r3, r2
 8017a32:	d017      	beq.n	8017a64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017a38:	2380      	movs	r3, #128	@ 0x80
 8017a3a:	055b      	lsls	r3, r3, #21
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	d106      	bne.n	8017a4e <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8017a40:	4b48      	ldr	r3, [pc, #288]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a42:	68da      	ldr	r2, [r3, #12]
 8017a44:	4b47      	ldr	r3, [pc, #284]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a46:	2180      	movs	r1, #128	@ 0x80
 8017a48:	0249      	lsls	r1, r1, #9
 8017a4a:	430a      	orrs	r2, r1
 8017a4c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017a4e:	4a45      	ldr	r2, [pc, #276]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a50:	2388      	movs	r3, #136	@ 0x88
 8017a52:	58d3      	ldr	r3, [r2, r3]
 8017a54:	4a4c      	ldr	r2, [pc, #304]	@ (8017b88 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8017a56:	401a      	ands	r2, r3
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a5c:	4941      	ldr	r1, [pc, #260]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a5e:	4313      	orrs	r3, r2
 8017a60:	2288      	movs	r2, #136	@ 0x88
 8017a62:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681a      	ldr	r2, [r3, #0]
 8017a68:	2380      	movs	r3, #128	@ 0x80
 8017a6a:	015b      	lsls	r3, r3, #5
 8017a6c:	4013      	ands	r3, r2
 8017a6e:	d017      	beq.n	8017aa0 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a74:	2380      	movs	r3, #128	@ 0x80
 8017a76:	051b      	lsls	r3, r3, #20
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d106      	bne.n	8017a8a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017a7c:	4b39      	ldr	r3, [pc, #228]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a7e:	68da      	ldr	r2, [r3, #12]
 8017a80:	4b38      	ldr	r3, [pc, #224]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a82:	2180      	movs	r1, #128	@ 0x80
 8017a84:	0449      	lsls	r1, r1, #17
 8017a86:	430a      	orrs	r2, r1
 8017a88:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017a8a:	4a36      	ldr	r2, [pc, #216]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a8c:	2388      	movs	r3, #136	@ 0x88
 8017a8e:	58d3      	ldr	r3, [r2, r3]
 8017a90:	4a3e      	ldr	r2, [pc, #248]	@ (8017b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8017a92:	401a      	ands	r2, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a98:	4932      	ldr	r1, [pc, #200]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	2288      	movs	r2, #136	@ 0x88
 8017a9e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681a      	ldr	r2, [r3, #0]
 8017aa4:	2380      	movs	r3, #128	@ 0x80
 8017aa6:	019b      	lsls	r3, r3, #6
 8017aa8:	4013      	ands	r3, r2
 8017aaa:	d017      	beq.n	8017adc <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017ab0:	2380      	movs	r3, #128	@ 0x80
 8017ab2:	051b      	lsls	r3, r3, #20
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	d106      	bne.n	8017ac6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017aba:	68da      	ldr	r2, [r3, #12]
 8017abc:	4b29      	ldr	r3, [pc, #164]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017abe:	2180      	movs	r1, #128	@ 0x80
 8017ac0:	0449      	lsls	r1, r1, #17
 8017ac2:	430a      	orrs	r2, r1
 8017ac4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017ac6:	4a27      	ldr	r2, [pc, #156]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017ac8:	2388      	movs	r3, #136	@ 0x88
 8017aca:	58d3      	ldr	r3, [r2, r3]
 8017acc:	4a2f      	ldr	r2, [pc, #188]	@ (8017b8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8017ace:	401a      	ands	r2, r3
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ad4:	4923      	ldr	r1, [pc, #140]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017ad6:	4313      	orrs	r3, r2
 8017ad8:	2288      	movs	r2, #136	@ 0x88
 8017ada:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	681a      	ldr	r2, [r3, #0]
 8017ae0:	2380      	movs	r3, #128	@ 0x80
 8017ae2:	00db      	lsls	r3, r3, #3
 8017ae4:	4013      	ands	r3, r2
 8017ae6:	d017      	beq.n	8017b18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017aec:	2380      	movs	r3, #128	@ 0x80
 8017aee:	045b      	lsls	r3, r3, #17
 8017af0:	429a      	cmp	r2, r3
 8017af2:	d106      	bne.n	8017b02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017af4:	4b1b      	ldr	r3, [pc, #108]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017af6:	68da      	ldr	r2, [r3, #12]
 8017af8:	4b1a      	ldr	r3, [pc, #104]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017afa:	2180      	movs	r1, #128	@ 0x80
 8017afc:	0449      	lsls	r1, r1, #17
 8017afe:	430a      	orrs	r2, r1
 8017b00:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8017b02:	4a18      	ldr	r2, [pc, #96]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b04:	2388      	movs	r3, #136	@ 0x88
 8017b06:	58d3      	ldr	r3, [r2, r3]
 8017b08:	4a21      	ldr	r2, [pc, #132]	@ (8017b90 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8017b0a:	401a      	ands	r2, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b10:	4914      	ldr	r1, [pc, #80]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b12:	4313      	orrs	r3, r2
 8017b14:	2288      	movs	r2, #136	@ 0x88
 8017b16:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681a      	ldr	r2, [r3, #0]
 8017b1c:	2380      	movs	r3, #128	@ 0x80
 8017b1e:	011b      	lsls	r3, r3, #4
 8017b20:	4013      	ands	r3, r2
 8017b22:	d017      	beq.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017b28:	2380      	movs	r3, #128	@ 0x80
 8017b2a:	049b      	lsls	r3, r3, #18
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d106      	bne.n	8017b3e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017b30:	4b0c      	ldr	r3, [pc, #48]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b32:	68da      	ldr	r2, [r3, #12]
 8017b34:	4b0b      	ldr	r3, [pc, #44]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b36:	2180      	movs	r1, #128	@ 0x80
 8017b38:	0449      	lsls	r1, r1, #17
 8017b3a:	430a      	orrs	r2, r1
 8017b3c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8017b3e:	4a09      	ldr	r2, [pc, #36]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b40:	2388      	movs	r3, #136	@ 0x88
 8017b42:	58d3      	ldr	r3, [r2, r3]
 8017b44:	4a12      	ldr	r2, [pc, #72]	@ (8017b90 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8017b46:	401a      	ands	r2, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b4c:	4905      	ldr	r1, [pc, #20]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b4e:	4313      	orrs	r3, r2
 8017b50:	2288      	movs	r2, #136	@ 0x88
 8017b52:	508b      	str	r3, [r1, r2]

  }

  return status;
 8017b54:	2312      	movs	r3, #18
 8017b56:	18fb      	adds	r3, r7, r3
 8017b58:	781b      	ldrb	r3, [r3, #0]
}
 8017b5a:	0018      	movs	r0, r3
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	b006      	add	sp, #24
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	46c0      	nop			@ (mov r8, r8)
 8017b64:	40021000 	.word	0x40021000
 8017b68:	efffffff 	.word	0xefffffff
 8017b6c:	fffff3ff 	.word	0xfffff3ff
 8017b70:	fffffcff 	.word	0xfffffcff
 8017b74:	ffffcfff 	.word	0xffffcfff
 8017b78:	fffcffff 	.word	0xfffcffff
 8017b7c:	fff3ffff 	.word	0xfff3ffff
 8017b80:	ffcfffff 	.word	0xffcfffff
 8017b84:	ff3fffff 	.word	0xff3fffff
 8017b88:	cfffffff 	.word	0xcfffffff
 8017b8c:	f3ffffff 	.word	0xf3ffffff
 8017b90:	feffffff 	.word	0xfeffffff

08017b94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8017b94:	b590      	push	{r4, r7, lr}
 8017b96:	b089      	sub	sp, #36	@ 0x24
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8017ba0:	687a      	ldr	r2, [r7, #4]
 8017ba2:	2380      	movs	r3, #128	@ 0x80
 8017ba4:	021b      	lsls	r3, r3, #8
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d154      	bne.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8017baa:	4ad5      	ldr	r2, [pc, #852]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017bac:	2390      	movs	r3, #144	@ 0x90
 8017bae:	58d2      	ldr	r2, [r2, r3]
 8017bb0:	23c0      	movs	r3, #192	@ 0xc0
 8017bb2:	009b      	lsls	r3, r3, #2
 8017bb4:	4013      	ands	r3, r2
 8017bb6:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8017bb8:	697a      	ldr	r2, [r7, #20]
 8017bba:	23c0      	movs	r3, #192	@ 0xc0
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d039      	beq.n	8017c36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8017bc2:	697a      	ldr	r2, [r7, #20]
 8017bc4:	23c0      	movs	r3, #192	@ 0xc0
 8017bc6:	009b      	lsls	r3, r3, #2
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d901      	bls.n	8017bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8017bcc:	f000 fd1a 	bl	8018604 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8017bd0:	697a      	ldr	r2, [r7, #20]
 8017bd2:	2380      	movs	r3, #128	@ 0x80
 8017bd4:	005b      	lsls	r3, r3, #1
 8017bd6:	429a      	cmp	r2, r3
 8017bd8:	d006      	beq.n	8017be8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8017bda:	697a      	ldr	r2, [r7, #20]
 8017bdc:	2380      	movs	r3, #128	@ 0x80
 8017bde:	009b      	lsls	r3, r3, #2
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d00f      	beq.n	8017c04 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8017be4:	f000 fd0e 	bl	8018604 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017be8:	4ac5      	ldr	r2, [pc, #788]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017bea:	2390      	movs	r3, #144	@ 0x90
 8017bec:	58d3      	ldr	r3, [r2, r3]
 8017bee:	2202      	movs	r2, #2
 8017bf0:	4013      	ands	r3, r2
 8017bf2:	2b02      	cmp	r3, #2
 8017bf4:	d001      	beq.n	8017bfa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8017bf6:	f000 fd07 	bl	8018608 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8017bfa:	2380      	movs	r3, #128	@ 0x80
 8017bfc:	021b      	lsls	r3, r3, #8
 8017bfe:	61fb      	str	r3, [r7, #28]
        break;
 8017c00:	f000 fd02 	bl	8018608 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017c04:	4abe      	ldr	r2, [pc, #760]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017c06:	2394      	movs	r3, #148	@ 0x94
 8017c08:	58d3      	ldr	r3, [r2, r3]
 8017c0a:	2202      	movs	r2, #2
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	2b02      	cmp	r3, #2
 8017c10:	d001      	beq.n	8017c16 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8017c12:	f000 fcfb 	bl	801860c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8017c16:	4aba      	ldr	r2, [pc, #744]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017c18:	2394      	movs	r3, #148	@ 0x94
 8017c1a:	58d3      	ldr	r3, [r2, r3]
 8017c1c:	2204      	movs	r2, #4
 8017c1e:	4013      	ands	r3, r2
 8017c20:	2b04      	cmp	r3, #4
 8017c22:	d103      	bne.n	8017c2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8017c24:	23fa      	movs	r3, #250	@ 0xfa
 8017c26:	61fb      	str	r3, [r7, #28]
        break;
 8017c28:	f000 fcf0 	bl	801860c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8017c2c:	23fa      	movs	r3, #250	@ 0xfa
 8017c2e:	01db      	lsls	r3, r3, #7
 8017c30:	61fb      	str	r3, [r7, #28]
        break;
 8017c32:	f000 fceb 	bl	801860c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8017c36:	4bb2      	ldr	r3, [pc, #712]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	2380      	movs	r3, #128	@ 0x80
 8017c3c:	029b      	lsls	r3, r3, #10
 8017c3e:	401a      	ands	r2, r3
 8017c40:	2380      	movs	r3, #128	@ 0x80
 8017c42:	029b      	lsls	r3, r3, #10
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d001      	beq.n	8017c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8017c48:	f000 fce2 	bl	8018610 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8017c4c:	4bad      	ldr	r3, [pc, #692]	@ (8017f04 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8017c4e:	61fb      	str	r3, [r7, #28]
        break;
 8017c50:	f000 fcde 	bl	8018610 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8017c54:	687a      	ldr	r2, [r7, #4]
 8017c56:	2380      	movs	r3, #128	@ 0x80
 8017c58:	029b      	lsls	r3, r3, #10
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	d100      	bne.n	8017c60 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8017c5e:	e11a      	b.n	8017e96 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	2380      	movs	r3, #128	@ 0x80
 8017c64:	029b      	lsls	r3, r3, #10
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d901      	bls.n	8017c6e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8017c6a:	f000 fcd3 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017c6e:	687a      	ldr	r2, [r7, #4]
 8017c70:	2380      	movs	r3, #128	@ 0x80
 8017c72:	025b      	lsls	r3, r3, #9
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d100      	bne.n	8017c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8017c78:	e10d      	b.n	8017e96 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8017c7a:	687a      	ldr	r2, [r7, #4]
 8017c7c:	2380      	movs	r3, #128	@ 0x80
 8017c7e:	025b      	lsls	r3, r3, #9
 8017c80:	429a      	cmp	r2, r3
 8017c82:	d901      	bls.n	8017c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8017c84:	f000 fcc6 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	2380      	movs	r3, #128	@ 0x80
 8017c8c:	01db      	lsls	r3, r3, #7
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d100      	bne.n	8017c94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8017c92:	e1eb      	b.n	801806c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	2380      	movs	r3, #128	@ 0x80
 8017c98:	01db      	lsls	r3, r3, #7
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d901      	bls.n	8017ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8017c9e:	f000 fcb9 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017ca2:	687a      	ldr	r2, [r7, #4]
 8017ca4:	2380      	movs	r3, #128	@ 0x80
 8017ca6:	019b      	lsls	r3, r3, #6
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d101      	bne.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8017cac:	f000 fc50 	bl	8018550 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	2380      	movs	r3, #128	@ 0x80
 8017cb4:	019b      	lsls	r3, r3, #6
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d901      	bls.n	8017cbe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8017cba:	f000 fcab 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	2380      	movs	r3, #128	@ 0x80
 8017cc2:	015b      	lsls	r3, r3, #5
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d101      	bne.n	8017ccc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8017cc8:	f000 fbe2 	bl	8018490 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8017ccc:	687a      	ldr	r2, [r7, #4]
 8017cce:	2380      	movs	r3, #128	@ 0x80
 8017cd0:	015b      	lsls	r3, r3, #5
 8017cd2:	429a      	cmp	r2, r3
 8017cd4:	d901      	bls.n	8017cda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8017cd6:	f000 fc9d 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017cda:	687a      	ldr	r2, [r7, #4]
 8017cdc:	2380      	movs	r3, #128	@ 0x80
 8017cde:	011b      	lsls	r3, r3, #4
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	d101      	bne.n	8017ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8017ce4:	f000 fba9 	bl	801843a <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8017ce8:	687a      	ldr	r2, [r7, #4]
 8017cea:	2380      	movs	r3, #128	@ 0x80
 8017cec:	011b      	lsls	r3, r3, #4
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	d901      	bls.n	8017cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8017cf2:	f000 fc8f 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017cf6:	687a      	ldr	r2, [r7, #4]
 8017cf8:	2380      	movs	r3, #128	@ 0x80
 8017cfa:	00db      	lsls	r3, r3, #3
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d101      	bne.n	8017d04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8017d00:	f000 fb70 	bl	80183e4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8017d04:	687a      	ldr	r2, [r7, #4]
 8017d06:	2380      	movs	r3, #128	@ 0x80
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d901      	bls.n	8017d12 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8017d0e:	f000 fc81 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d12:	687a      	ldr	r2, [r7, #4]
 8017d14:	2380      	movs	r3, #128	@ 0x80
 8017d16:	009b      	lsls	r3, r3, #2
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	d100      	bne.n	8017d1e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8017d1c:	e305      	b.n	801832a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	2380      	movs	r3, #128	@ 0x80
 8017d22:	009b      	lsls	r3, r3, #2
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d901      	bls.n	8017d2c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8017d28:	f000 fc74 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d2c:	687a      	ldr	r2, [r7, #4]
 8017d2e:	2380      	movs	r3, #128	@ 0x80
 8017d30:	005b      	lsls	r3, r3, #1
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d100      	bne.n	8017d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8017d36:	e29b      	b.n	8018270 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8017d38:	687a      	ldr	r2, [r7, #4]
 8017d3a:	2380      	movs	r3, #128	@ 0x80
 8017d3c:	005b      	lsls	r3, r3, #1
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d901      	bls.n	8017d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8017d42:	f000 fc67 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	2b80      	cmp	r3, #128	@ 0x80
 8017d4a:	d100      	bne.n	8017d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8017d4c:	e22f      	b.n	80181ae <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2b80      	cmp	r3, #128	@ 0x80
 8017d52:	d901      	bls.n	8017d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8017d54:	f000 fc5e 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2b20      	cmp	r3, #32
 8017d5c:	d80f      	bhi.n	8017d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d101      	bne.n	8017d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8017d64:	f000 fc56 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2b20      	cmp	r3, #32
 8017d6c:	d901      	bls.n	8017d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8017d6e:	f000 fc51 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	009a      	lsls	r2, r3, #2
 8017d76:	4b64      	ldr	r3, [pc, #400]	@ (8017f08 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8017d78:	18d3      	adds	r3, r2, r3
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	469f      	mov	pc, r3
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2b40      	cmp	r3, #64	@ 0x40
 8017d82:	d100      	bne.n	8017d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8017d84:	e1df      	b.n	8018146 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8017d86:	f000 fc45 	bl	8018614 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8017d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017d8c:	2388      	movs	r3, #136	@ 0x88
 8017d8e:	58d3      	ldr	r3, [r2, r3]
 8017d90:	2203      	movs	r2, #3
 8017d92:	4013      	ands	r3, r2
 8017d94:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	2b03      	cmp	r3, #3
 8017d9a:	d025      	beq.n	8017de8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8017d9c:	697b      	ldr	r3, [r7, #20]
 8017d9e:	2b03      	cmp	r3, #3
 8017da0:	d82d      	bhi.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8017da2:	697b      	ldr	r3, [r7, #20]
 8017da4:	2b02      	cmp	r3, #2
 8017da6:	d013      	beq.n	8017dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	2b02      	cmp	r3, #2
 8017dac:	d827      	bhi.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d003      	beq.n	8017dbc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8017db4:	697b      	ldr	r3, [r7, #20]
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	d005      	beq.n	8017dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8017dba:	e020      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017dbc:	f7ff fc40 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8017dc0:	0003      	movs	r3, r0
 8017dc2:	61fb      	str	r3, [r7, #28]
            break;
 8017dc4:	e022      	b.n	8017e0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8017dc6:	f7ff fb95 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8017dca:	0003      	movs	r3, r0
 8017dcc:	61fb      	str	r3, [r7, #28]
            break;
 8017dce:	e01d      	b.n	8017e0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017dd2:	681a      	ldr	r2, [r3, #0]
 8017dd4:	2380      	movs	r3, #128	@ 0x80
 8017dd6:	00db      	lsls	r3, r3, #3
 8017dd8:	401a      	ands	r2, r3
 8017dda:	2380      	movs	r3, #128	@ 0x80
 8017ddc:	00db      	lsls	r3, r3, #3
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d110      	bne.n	8017e04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8017de2:	4b4a      	ldr	r3, [pc, #296]	@ (8017f0c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8017de4:	61fb      	str	r3, [r7, #28]
            break;
 8017de6:	e00d      	b.n	8017e04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017de8:	4a45      	ldr	r2, [pc, #276]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017dea:	2390      	movs	r3, #144	@ 0x90
 8017dec:	58d3      	ldr	r3, [r2, r3]
 8017dee:	2202      	movs	r2, #2
 8017df0:	4013      	ands	r3, r2
 8017df2:	2b02      	cmp	r3, #2
 8017df4:	d109      	bne.n	8017e0a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8017df6:	2380      	movs	r3, #128	@ 0x80
 8017df8:	021b      	lsls	r3, r3, #8
 8017dfa:	61fb      	str	r3, [r7, #28]
            break;
 8017dfc:	e005      	b.n	8017e0a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8017dfe:	46c0      	nop			@ (mov r8, r8)
 8017e00:	f000 fc09 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017e04:	46c0      	nop			@ (mov r8, r8)
 8017e06:	f000 fc06 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017e0a:	46c0      	nop			@ (mov r8, r8)
        break;
 8017e0c:	f000 fc03 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8017e10:	4a3b      	ldr	r2, [pc, #236]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017e12:	2388      	movs	r3, #136	@ 0x88
 8017e14:	58d3      	ldr	r3, [r2, r3]
 8017e16:	220c      	movs	r2, #12
 8017e18:	4013      	ands	r3, r2
 8017e1a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017e1c:	697b      	ldr	r3, [r7, #20]
 8017e1e:	2b0c      	cmp	r3, #12
 8017e20:	d025      	beq.n	8017e6e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	2b0c      	cmp	r3, #12
 8017e26:	d82d      	bhi.n	8017e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8017e28:	697b      	ldr	r3, [r7, #20]
 8017e2a:	2b08      	cmp	r3, #8
 8017e2c:	d013      	beq.n	8017e56 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	2b08      	cmp	r3, #8
 8017e32:	d827      	bhi.n	8017e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d003      	beq.n	8017e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8017e3a:	697b      	ldr	r3, [r7, #20]
 8017e3c:	2b04      	cmp	r3, #4
 8017e3e:	d005      	beq.n	8017e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8017e40:	e020      	b.n	8017e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017e42:	f7ff fbfd 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8017e46:	0003      	movs	r3, r0
 8017e48:	61fb      	str	r3, [r7, #28]
            break;
 8017e4a:	e022      	b.n	8017e92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8017e4c:	f7ff fb52 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8017e50:	0003      	movs	r3, r0
 8017e52:	61fb      	str	r3, [r7, #28]
            break;
 8017e54:	e01d      	b.n	8017e92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017e56:	4b2a      	ldr	r3, [pc, #168]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017e58:	681a      	ldr	r2, [r3, #0]
 8017e5a:	2380      	movs	r3, #128	@ 0x80
 8017e5c:	00db      	lsls	r3, r3, #3
 8017e5e:	401a      	ands	r2, r3
 8017e60:	2380      	movs	r3, #128	@ 0x80
 8017e62:	00db      	lsls	r3, r3, #3
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d110      	bne.n	8017e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8017e68:	4b28      	ldr	r3, [pc, #160]	@ (8017f0c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8017e6a:	61fb      	str	r3, [r7, #28]
            break;
 8017e6c:	e00d      	b.n	8017e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017e6e:	4a24      	ldr	r2, [pc, #144]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017e70:	2390      	movs	r3, #144	@ 0x90
 8017e72:	58d3      	ldr	r3, [r2, r3]
 8017e74:	2202      	movs	r2, #2
 8017e76:	4013      	ands	r3, r2
 8017e78:	2b02      	cmp	r3, #2
 8017e7a:	d109      	bne.n	8017e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8017e7c:	2380      	movs	r3, #128	@ 0x80
 8017e7e:	021b      	lsls	r3, r3, #8
 8017e80:	61fb      	str	r3, [r7, #28]
            break;
 8017e82:	e005      	b.n	8017e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8017e84:	46c0      	nop			@ (mov r8, r8)
 8017e86:	f000 fbc6 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017e8a:	46c0      	nop			@ (mov r8, r8)
 8017e8c:	f000 fbc3 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017e90:	46c0      	nop			@ (mov r8, r8)
        break;
 8017e92:	f000 fbc0 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8017e96:	f7ff fbd3 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8017e9a:	0003      	movs	r3, r0
 8017e9c:	61fb      	str	r3, [r7, #28]
        break;
 8017e9e:	f000 fbba 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8017ea2:	4a17      	ldr	r2, [pc, #92]	@ (8017f00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ea4:	2388      	movs	r3, #136	@ 0x88
 8017ea6:	58d2      	ldr	r2, [r2, r3]
 8017ea8:	23c0      	movs	r3, #192	@ 0xc0
 8017eaa:	011b      	lsls	r3, r3, #4
 8017eac:	4013      	ands	r3, r2
 8017eae:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017eb0:	697a      	ldr	r2, [r7, #20]
 8017eb2:	23c0      	movs	r3, #192	@ 0xc0
 8017eb4:	011b      	lsls	r3, r3, #4
 8017eb6:	429a      	cmp	r2, r3
 8017eb8:	d036      	beq.n	8017f28 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8017eba:	697a      	ldr	r2, [r7, #20]
 8017ebc:	23c0      	movs	r3, #192	@ 0xc0
 8017ebe:	011b      	lsls	r3, r3, #4
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d83c      	bhi.n	8017f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8017ec4:	697a      	ldr	r2, [r7, #20]
 8017ec6:	2380      	movs	r3, #128	@ 0x80
 8017ec8:	011b      	lsls	r3, r3, #4
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d020      	beq.n	8017f10 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8017ece:	697a      	ldr	r2, [r7, #20]
 8017ed0:	2380      	movs	r3, #128	@ 0x80
 8017ed2:	011b      	lsls	r3, r3, #4
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d832      	bhi.n	8017f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d005      	beq.n	8017eea <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8017ede:	697a      	ldr	r2, [r7, #20]
 8017ee0:	2380      	movs	r3, #128	@ 0x80
 8017ee2:	00db      	lsls	r3, r3, #3
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d005      	beq.n	8017ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8017ee8:	e029      	b.n	8017f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017eea:	f7ff fba9 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8017eee:	0003      	movs	r3, r0
 8017ef0:	61fb      	str	r3, [r7, #28]
            break;
 8017ef2:	e02b      	b.n	8017f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8017ef4:	f7ff fafe 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8017ef8:	0003      	movs	r3, r0
 8017efa:	61fb      	str	r3, [r7, #28]
            break;
 8017efc:	e026      	b.n	8017f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8017efe:	46c0      	nop			@ (mov r8, r8)
 8017f00:	40021000 	.word	0x40021000
 8017f04:	0001e848 	.word	0x0001e848
 8017f08:	0801c314 	.word	0x0801c314
 8017f0c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017f10:	4bbb      	ldr	r3, [pc, #748]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017f12:	681a      	ldr	r2, [r3, #0]
 8017f14:	2380      	movs	r3, #128	@ 0x80
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	401a      	ands	r2, r3
 8017f1a:	2380      	movs	r3, #128	@ 0x80
 8017f1c:	00db      	lsls	r3, r3, #3
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d110      	bne.n	8017f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8017f22:	4bb8      	ldr	r3, [pc, #736]	@ (8018204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017f24:	61fb      	str	r3, [r7, #28]
            break;
 8017f26:	e00d      	b.n	8017f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017f28:	4ab5      	ldr	r2, [pc, #724]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017f2a:	2390      	movs	r3, #144	@ 0x90
 8017f2c:	58d3      	ldr	r3, [r2, r3]
 8017f2e:	2202      	movs	r2, #2
 8017f30:	4013      	ands	r3, r2
 8017f32:	2b02      	cmp	r3, #2
 8017f34:	d109      	bne.n	8017f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8017f36:	2380      	movs	r3, #128	@ 0x80
 8017f38:	021b      	lsls	r3, r3, #8
 8017f3a:	61fb      	str	r3, [r7, #28]
            break;
 8017f3c:	e005      	b.n	8017f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8017f3e:	46c0      	nop			@ (mov r8, r8)
 8017f40:	f000 fb69 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017f44:	46c0      	nop			@ (mov r8, r8)
 8017f46:	f000 fb66 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017f4a:	46c0      	nop			@ (mov r8, r8)
        break;
 8017f4c:	f000 fb63 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8017f50:	4aab      	ldr	r2, [pc, #684]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017f52:	2388      	movs	r3, #136	@ 0x88
 8017f54:	58d2      	ldr	r2, [r2, r3]
 8017f56:	23c0      	movs	r3, #192	@ 0xc0
 8017f58:	009b      	lsls	r3, r3, #2
 8017f5a:	4013      	ands	r3, r2
 8017f5c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017f5e:	697a      	ldr	r2, [r7, #20]
 8017f60:	23c0      	movs	r3, #192	@ 0xc0
 8017f62:	009b      	lsls	r3, r3, #2
 8017f64:	429a      	cmp	r2, r3
 8017f66:	d02d      	beq.n	8017fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8017f68:	697a      	ldr	r2, [r7, #20]
 8017f6a:	23c0      	movs	r3, #192	@ 0xc0
 8017f6c:	009b      	lsls	r3, r3, #2
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d833      	bhi.n	8017fda <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8017f72:	697a      	ldr	r2, [r7, #20]
 8017f74:	2380      	movs	r3, #128	@ 0x80
 8017f76:	009b      	lsls	r3, r3, #2
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	d017      	beq.n	8017fac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8017f7c:	697a      	ldr	r2, [r7, #20]
 8017f7e:	2380      	movs	r3, #128	@ 0x80
 8017f80:	009b      	lsls	r3, r3, #2
 8017f82:	429a      	cmp	r2, r3
 8017f84:	d829      	bhi.n	8017fda <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d005      	beq.n	8017f98 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8017f8c:	697a      	ldr	r2, [r7, #20]
 8017f8e:	2380      	movs	r3, #128	@ 0x80
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d005      	beq.n	8017fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8017f96:	e020      	b.n	8017fda <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017f98:	f7ff fb52 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8017f9c:	0003      	movs	r3, r0
 8017f9e:	61fb      	str	r3, [r7, #28]
            break;
 8017fa0:	e022      	b.n	8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8017fa2:	f7ff faa7 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8017fa6:	0003      	movs	r3, r0
 8017fa8:	61fb      	str	r3, [r7, #28]
            break;
 8017faa:	e01d      	b.n	8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017fac:	4b94      	ldr	r3, [pc, #592]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017fae:	681a      	ldr	r2, [r3, #0]
 8017fb0:	2380      	movs	r3, #128	@ 0x80
 8017fb2:	00db      	lsls	r3, r3, #3
 8017fb4:	401a      	ands	r2, r3
 8017fb6:	2380      	movs	r3, #128	@ 0x80
 8017fb8:	00db      	lsls	r3, r3, #3
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d110      	bne.n	8017fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8017fbe:	4b91      	ldr	r3, [pc, #580]	@ (8018204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017fc0:	61fb      	str	r3, [r7, #28]
            break;
 8017fc2:	e00d      	b.n	8017fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017fc6:	2390      	movs	r3, #144	@ 0x90
 8017fc8:	58d3      	ldr	r3, [r2, r3]
 8017fca:	2202      	movs	r2, #2
 8017fcc:	4013      	ands	r3, r2
 8017fce:	2b02      	cmp	r3, #2
 8017fd0:	d109      	bne.n	8017fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8017fd2:	2380      	movs	r3, #128	@ 0x80
 8017fd4:	021b      	lsls	r3, r3, #8
 8017fd6:	61fb      	str	r3, [r7, #28]
            break;
 8017fd8:	e005      	b.n	8017fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8017fda:	46c0      	nop			@ (mov r8, r8)
 8017fdc:	f000 fb1b 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017fe0:	46c0      	nop			@ (mov r8, r8)
 8017fe2:	f000 fb18 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017fe6:	46c0      	nop			@ (mov r8, r8)
        break;
 8017fe8:	f000 fb15 	bl	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8017fec:	4a84      	ldr	r2, [pc, #528]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017fee:	2388      	movs	r3, #136	@ 0x88
 8017ff0:	58d3      	ldr	r3, [r2, r3]
 8017ff2:	22c0      	movs	r2, #192	@ 0xc0
 8017ff4:	4013      	ands	r3, r2
 8017ff6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8017ffc:	d025      	beq.n	801804a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	2bc0      	cmp	r3, #192	@ 0xc0
 8018002:	d82d      	bhi.n	8018060 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8018004:	697b      	ldr	r3, [r7, #20]
 8018006:	2b80      	cmp	r3, #128	@ 0x80
 8018008:	d013      	beq.n	8018032 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	2b80      	cmp	r3, #128	@ 0x80
 801800e:	d827      	bhi.n	8018060 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8018010:	697b      	ldr	r3, [r7, #20]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d003      	beq.n	801801e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	2b40      	cmp	r3, #64	@ 0x40
 801801a:	d005      	beq.n	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 801801c:	e020      	b.n	8018060 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 801801e:	f7ff fb0f 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8018022:	0003      	movs	r3, r0
 8018024:	61fb      	str	r3, [r7, #28]
            break;
 8018026:	e020      	b.n	801806a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8018028:	f7ff fa64 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 801802c:	0003      	movs	r3, r0
 801802e:	61fb      	str	r3, [r7, #28]
            break;
 8018030:	e01b      	b.n	801806a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018032:	4b73      	ldr	r3, [pc, #460]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018034:	681a      	ldr	r2, [r3, #0]
 8018036:	2380      	movs	r3, #128	@ 0x80
 8018038:	00db      	lsls	r3, r3, #3
 801803a:	401a      	ands	r2, r3
 801803c:	2380      	movs	r3, #128	@ 0x80
 801803e:	00db      	lsls	r3, r3, #3
 8018040:	429a      	cmp	r2, r3
 8018042:	d10f      	bne.n	8018064 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8018044:	4b6f      	ldr	r3, [pc, #444]	@ (8018204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8018046:	61fb      	str	r3, [r7, #28]
            break;
 8018048:	e00c      	b.n	8018064 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801804a:	4a6d      	ldr	r2, [pc, #436]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801804c:	2390      	movs	r3, #144	@ 0x90
 801804e:	58d3      	ldr	r3, [r2, r3]
 8018050:	2202      	movs	r2, #2
 8018052:	4013      	ands	r3, r2
 8018054:	2b02      	cmp	r3, #2
 8018056:	d107      	bne.n	8018068 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8018058:	2380      	movs	r3, #128	@ 0x80
 801805a:	021b      	lsls	r3, r3, #8
 801805c:	61fb      	str	r3, [r7, #28]
            break;
 801805e:	e003      	b.n	8018068 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8018060:	46c0      	nop			@ (mov r8, r8)
 8018062:	e2d8      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018064:	46c0      	nop			@ (mov r8, r8)
 8018066:	e2d6      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018068:	46c0      	nop			@ (mov r8, r8)
        break;
 801806a:	e2d4      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801806c:	4a64      	ldr	r2, [pc, #400]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801806e:	2388      	movs	r3, #136	@ 0x88
 8018070:	58d2      	ldr	r2, [r2, r3]
 8018072:	23c0      	movs	r3, #192	@ 0xc0
 8018074:	059b      	lsls	r3, r3, #22
 8018076:	4013      	ands	r3, r2
 8018078:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801807a:	697a      	ldr	r2, [r7, #20]
 801807c:	2380      	movs	r3, #128	@ 0x80
 801807e:	059b      	lsls	r3, r3, #22
 8018080:	429a      	cmp	r2, r3
 8018082:	d012      	beq.n	80180aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8018084:	697a      	ldr	r2, [r7, #20]
 8018086:	2380      	movs	r3, #128	@ 0x80
 8018088:	059b      	lsls	r3, r3, #22
 801808a:	429a      	cmp	r2, r3
 801808c:	d825      	bhi.n	80180da <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 801808e:	697b      	ldr	r3, [r7, #20]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d005      	beq.n	80180a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8018094:	697a      	ldr	r2, [r7, #20]
 8018096:	2380      	movs	r3, #128	@ 0x80
 8018098:	055b      	lsls	r3, r3, #21
 801809a:	429a      	cmp	r2, r3
 801809c:	d014      	beq.n	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 801809e:	e01c      	b.n	80180da <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 80180a0:	f7ff fa28 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 80180a4:	0003      	movs	r3, r0
 80180a6:	61fb      	str	r3, [r7, #28]
            break;
 80180a8:	e018      	b.n	80180dc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80180aa:	4b55      	ldr	r3, [pc, #340]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	2380      	movs	r3, #128	@ 0x80
 80180b0:	00db      	lsls	r3, r3, #3
 80180b2:	401a      	ands	r2, r3
 80180b4:	2380      	movs	r3, #128	@ 0x80
 80180b6:	00db      	lsls	r3, r3, #3
 80180b8:	429a      	cmp	r2, r3
 80180ba:	d102      	bne.n	80180c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 80180bc:	4b51      	ldr	r3, [pc, #324]	@ (8018204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80180be:	61fb      	str	r3, [r7, #28]
            break;
 80180c0:	e00c      	b.n	80180dc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 80180c2:	2300      	movs	r3, #0
 80180c4:	61fb      	str	r3, [r7, #28]
            break;
 80180c6:	e009      	b.n	80180dc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80180c8:	2408      	movs	r4, #8
 80180ca:	193b      	adds	r3, r7, r4
 80180cc:	0018      	movs	r0, r3
 80180ce:	f000 faad 	bl	801862c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80180d2:	193b      	adds	r3, r7, r4
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	61fb      	str	r3, [r7, #28]
            break;
 80180d8:	e000      	b.n	80180dc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 80180da:	46c0      	nop			@ (mov r8, r8)
        break;
 80180dc:	e29b      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80180de:	4a48      	ldr	r2, [pc, #288]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80180e0:	2388      	movs	r3, #136	@ 0x88
 80180e2:	58d2      	ldr	r2, [r2, r3]
 80180e4:	23c0      	movs	r3, #192	@ 0xc0
 80180e6:	019b      	lsls	r3, r3, #6
 80180e8:	4013      	ands	r3, r2
 80180ea:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80180ec:	697a      	ldr	r2, [r7, #20]
 80180ee:	2380      	movs	r3, #128	@ 0x80
 80180f0:	019b      	lsls	r3, r3, #6
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d017      	beq.n	8018126 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80180f6:	697a      	ldr	r2, [r7, #20]
 80180f8:	2380      	movs	r3, #128	@ 0x80
 80180fa:	019b      	lsls	r3, r3, #6
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d81e      	bhi.n	801813e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d005      	beq.n	8018112 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8018106:	697a      	ldr	r2, [r7, #20]
 8018108:	2380      	movs	r3, #128	@ 0x80
 801810a:	015b      	lsls	r3, r3, #5
 801810c:	429a      	cmp	r2, r3
 801810e:	d005      	beq.n	801811c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8018110:	e015      	b.n	801813e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018112:	f7ff fa95 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8018116:	0003      	movs	r3, r0
 8018118:	61fb      	str	r3, [r7, #28]
            break;
 801811a:	e013      	b.n	8018144 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 801811c:	f7ff f9ea 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8018120:	0003      	movs	r3, r0
 8018122:	61fb      	str	r3, [r7, #28]
            break;
 8018124:	e00e      	b.n	8018144 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018126:	4b36      	ldr	r3, [pc, #216]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018128:	681a      	ldr	r2, [r3, #0]
 801812a:	2380      	movs	r3, #128	@ 0x80
 801812c:	00db      	lsls	r3, r3, #3
 801812e:	401a      	ands	r2, r3
 8018130:	2380      	movs	r3, #128	@ 0x80
 8018132:	00db      	lsls	r3, r3, #3
 8018134:	429a      	cmp	r2, r3
 8018136:	d104      	bne.n	8018142 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8018138:	4b32      	ldr	r3, [pc, #200]	@ (8018204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801813a:	61fb      	str	r3, [r7, #28]
            break;
 801813c:	e001      	b.n	8018142 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 801813e:	46c0      	nop			@ (mov r8, r8)
 8018140:	e269      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018142:	46c0      	nop			@ (mov r8, r8)
        break;
 8018144:	e267      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8018146:	4a2e      	ldr	r2, [pc, #184]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018148:	2388      	movs	r3, #136	@ 0x88
 801814a:	58d2      	ldr	r2, [r2, r3]
 801814c:	23c0      	movs	r3, #192	@ 0xc0
 801814e:	029b      	lsls	r3, r3, #10
 8018150:	4013      	ands	r3, r2
 8018152:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018154:	697a      	ldr	r2, [r7, #20]
 8018156:	2380      	movs	r3, #128	@ 0x80
 8018158:	029b      	lsls	r3, r3, #10
 801815a:	429a      	cmp	r2, r3
 801815c:	d017      	beq.n	801818e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 801815e:	697a      	ldr	r2, [r7, #20]
 8018160:	2380      	movs	r3, #128	@ 0x80
 8018162:	029b      	lsls	r3, r3, #10
 8018164:	429a      	cmp	r2, r3
 8018166:	d81e      	bhi.n	80181a6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d005      	beq.n	801817a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 801816e:	697a      	ldr	r2, [r7, #20]
 8018170:	2380      	movs	r3, #128	@ 0x80
 8018172:	025b      	lsls	r3, r3, #9
 8018174:	429a      	cmp	r2, r3
 8018176:	d005      	beq.n	8018184 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8018178:	e015      	b.n	80181a6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 801817a:	f7ff fa61 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 801817e:	0003      	movs	r3, r0
 8018180:	61fb      	str	r3, [r7, #28]
            break;
 8018182:	e013      	b.n	80181ac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8018184:	f7ff f9b6 	bl	80174f4 <HAL_RCC_GetSysClockFreq>
 8018188:	0003      	movs	r3, r0
 801818a:	61fb      	str	r3, [r7, #28]
            break;
 801818c:	e00e      	b.n	80181ac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801818e:	4b1c      	ldr	r3, [pc, #112]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018190:	681a      	ldr	r2, [r3, #0]
 8018192:	2380      	movs	r3, #128	@ 0x80
 8018194:	00db      	lsls	r3, r3, #3
 8018196:	401a      	ands	r2, r3
 8018198:	2380      	movs	r3, #128	@ 0x80
 801819a:	00db      	lsls	r3, r3, #3
 801819c:	429a      	cmp	r2, r3
 801819e:	d104      	bne.n	80181aa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 80181a0:	4b18      	ldr	r3, [pc, #96]	@ (8018204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80181a2:	61fb      	str	r3, [r7, #28]
            break;
 80181a4:	e001      	b.n	80181aa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 80181a6:	46c0      	nop			@ (mov r8, r8)
 80181a8:	e235      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80181aa:	46c0      	nop			@ (mov r8, r8)
        break;
 80181ac:	e233      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80181ae:	4a14      	ldr	r2, [pc, #80]	@ (8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80181b0:	2388      	movs	r3, #136	@ 0x88
 80181b2:	58d2      	ldr	r2, [r2, r3]
 80181b4:	23c0      	movs	r3, #192	@ 0xc0
 80181b6:	031b      	lsls	r3, r3, #12
 80181b8:	4013      	ands	r3, r2
 80181ba:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80181bc:	697a      	ldr	r2, [r7, #20]
 80181be:	23c0      	movs	r3, #192	@ 0xc0
 80181c0:	031b      	lsls	r3, r3, #12
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d041      	beq.n	801824a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80181c6:	697a      	ldr	r2, [r7, #20]
 80181c8:	23c0      	movs	r3, #192	@ 0xc0
 80181ca:	031b      	lsls	r3, r3, #12
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d847      	bhi.n	8018260 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80181d0:	697a      	ldr	r2, [r7, #20]
 80181d2:	2380      	movs	r3, #128	@ 0x80
 80181d4:	031b      	lsls	r3, r3, #12
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d02b      	beq.n	8018232 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80181da:	697a      	ldr	r2, [r7, #20]
 80181dc:	2380      	movs	r3, #128	@ 0x80
 80181de:	031b      	lsls	r3, r3, #12
 80181e0:	429a      	cmp	r2, r3
 80181e2:	d83d      	bhi.n	8018260 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d005      	beq.n	80181f6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80181ea:	697a      	ldr	r2, [r7, #20]
 80181ec:	2380      	movs	r3, #128	@ 0x80
 80181ee:	02db      	lsls	r3, r3, #11
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d009      	beq.n	8018208 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80181f4:	e034      	b.n	8018260 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80181f6:	f7ff fa23 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 80181fa:	0003      	movs	r3, r0
 80181fc:	61fb      	str	r3, [r7, #28]
            break;
 80181fe:	e036      	b.n	801826e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8018200:	40021000 	.word	0x40021000
 8018204:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8018208:	4abd      	ldr	r2, [pc, #756]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801820a:	2394      	movs	r3, #148	@ 0x94
 801820c:	58d3      	ldr	r3, [r2, r3]
 801820e:	2202      	movs	r2, #2
 8018210:	4013      	ands	r3, r2
 8018212:	2b02      	cmp	r3, #2
 8018214:	d126      	bne.n	8018264 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8018216:	4aba      	ldr	r2, [pc, #744]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018218:	2394      	movs	r3, #148	@ 0x94
 801821a:	58d3      	ldr	r3, [r2, r3]
 801821c:	2204      	movs	r2, #4
 801821e:	4013      	ands	r3, r2
 8018220:	2b04      	cmp	r3, #4
 8018222:	d102      	bne.n	801822a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8018224:	23fa      	movs	r3, #250	@ 0xfa
 8018226:	61fb      	str	r3, [r7, #28]
            break;
 8018228:	e01c      	b.n	8018264 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 801822a:	23fa      	movs	r3, #250	@ 0xfa
 801822c:	01db      	lsls	r3, r3, #7
 801822e:	61fb      	str	r3, [r7, #28]
            break;
 8018230:	e018      	b.n	8018264 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018232:	4bb3      	ldr	r3, [pc, #716]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018234:	681a      	ldr	r2, [r3, #0]
 8018236:	2380      	movs	r3, #128	@ 0x80
 8018238:	00db      	lsls	r3, r3, #3
 801823a:	401a      	ands	r2, r3
 801823c:	2380      	movs	r3, #128	@ 0x80
 801823e:	00db      	lsls	r3, r3, #3
 8018240:	429a      	cmp	r2, r3
 8018242:	d111      	bne.n	8018268 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8018244:	4baf      	ldr	r3, [pc, #700]	@ (8018504 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8018246:	61fb      	str	r3, [r7, #28]
            break;
 8018248:	e00e      	b.n	8018268 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801824a:	4aad      	ldr	r2, [pc, #692]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801824c:	2390      	movs	r3, #144	@ 0x90
 801824e:	58d3      	ldr	r3, [r2, r3]
 8018250:	2202      	movs	r2, #2
 8018252:	4013      	ands	r3, r2
 8018254:	2b02      	cmp	r3, #2
 8018256:	d109      	bne.n	801826c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8018258:	2380      	movs	r3, #128	@ 0x80
 801825a:	021b      	lsls	r3, r3, #8
 801825c:	61fb      	str	r3, [r7, #28]
            break;
 801825e:	e005      	b.n	801826c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8018260:	46c0      	nop			@ (mov r8, r8)
 8018262:	e1d8      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018264:	46c0      	nop			@ (mov r8, r8)
 8018266:	e1d6      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018268:	46c0      	nop			@ (mov r8, r8)
 801826a:	e1d4      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801826c:	46c0      	nop			@ (mov r8, r8)
        break;
 801826e:	e1d2      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8018270:	4aa3      	ldr	r2, [pc, #652]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018272:	2388      	movs	r3, #136	@ 0x88
 8018274:	58d2      	ldr	r2, [r2, r3]
 8018276:	23c0      	movs	r3, #192	@ 0xc0
 8018278:	039b      	lsls	r3, r3, #14
 801827a:	4013      	ands	r3, r2
 801827c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801827e:	697a      	ldr	r2, [r7, #20]
 8018280:	23c0      	movs	r3, #192	@ 0xc0
 8018282:	039b      	lsls	r3, r3, #14
 8018284:	429a      	cmp	r2, r3
 8018286:	d03d      	beq.n	8018304 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8018288:	697a      	ldr	r2, [r7, #20]
 801828a:	23c0      	movs	r3, #192	@ 0xc0
 801828c:	039b      	lsls	r3, r3, #14
 801828e:	429a      	cmp	r2, r3
 8018290:	d843      	bhi.n	801831a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8018292:	697a      	ldr	r2, [r7, #20]
 8018294:	2380      	movs	r3, #128	@ 0x80
 8018296:	039b      	lsls	r3, r3, #14
 8018298:	429a      	cmp	r2, r3
 801829a:	d027      	beq.n	80182ec <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 801829c:	697a      	ldr	r2, [r7, #20]
 801829e:	2380      	movs	r3, #128	@ 0x80
 80182a0:	039b      	lsls	r3, r3, #14
 80182a2:	429a      	cmp	r2, r3
 80182a4:	d839      	bhi.n	801831a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80182a6:	697b      	ldr	r3, [r7, #20]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d005      	beq.n	80182b8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80182ac:	697a      	ldr	r2, [r7, #20]
 80182ae:	2380      	movs	r3, #128	@ 0x80
 80182b0:	035b      	lsls	r3, r3, #13
 80182b2:	429a      	cmp	r2, r3
 80182b4:	d005      	beq.n	80182c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 80182b6:	e030      	b.n	801831a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 80182b8:	f7ff f9c2 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 80182bc:	0003      	movs	r3, r0
 80182be:	61fb      	str	r3, [r7, #28]
            break;
 80182c0:	e032      	b.n	8018328 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80182c2:	4a8f      	ldr	r2, [pc, #572]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80182c4:	2394      	movs	r3, #148	@ 0x94
 80182c6:	58d3      	ldr	r3, [r2, r3]
 80182c8:	2202      	movs	r2, #2
 80182ca:	4013      	ands	r3, r2
 80182cc:	2b02      	cmp	r3, #2
 80182ce:	d126      	bne.n	801831e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80182d0:	4a8b      	ldr	r2, [pc, #556]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80182d2:	2394      	movs	r3, #148	@ 0x94
 80182d4:	58d3      	ldr	r3, [r2, r3]
 80182d6:	2204      	movs	r2, #4
 80182d8:	4013      	ands	r3, r2
 80182da:	2b04      	cmp	r3, #4
 80182dc:	d102      	bne.n	80182e4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 80182de:	23fa      	movs	r3, #250	@ 0xfa
 80182e0:	61fb      	str	r3, [r7, #28]
            break;
 80182e2:	e01c      	b.n	801831e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80182e4:	23fa      	movs	r3, #250	@ 0xfa
 80182e6:	01db      	lsls	r3, r3, #7
 80182e8:	61fb      	str	r3, [r7, #28]
            break;
 80182ea:	e018      	b.n	801831e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80182ec:	4b84      	ldr	r3, [pc, #528]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80182ee:	681a      	ldr	r2, [r3, #0]
 80182f0:	2380      	movs	r3, #128	@ 0x80
 80182f2:	00db      	lsls	r3, r3, #3
 80182f4:	401a      	ands	r2, r3
 80182f6:	2380      	movs	r3, #128	@ 0x80
 80182f8:	00db      	lsls	r3, r3, #3
 80182fa:	429a      	cmp	r2, r3
 80182fc:	d111      	bne.n	8018322 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80182fe:	4b81      	ldr	r3, [pc, #516]	@ (8018504 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8018300:	61fb      	str	r3, [r7, #28]
            break;
 8018302:	e00e      	b.n	8018322 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018304:	4a7e      	ldr	r2, [pc, #504]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018306:	2390      	movs	r3, #144	@ 0x90
 8018308:	58d3      	ldr	r3, [r2, r3]
 801830a:	2202      	movs	r2, #2
 801830c:	4013      	ands	r3, r2
 801830e:	2b02      	cmp	r3, #2
 8018310:	d109      	bne.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8018312:	2380      	movs	r3, #128	@ 0x80
 8018314:	021b      	lsls	r3, r3, #8
 8018316:	61fb      	str	r3, [r7, #28]
            break;
 8018318:	e005      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 801831a:	46c0      	nop			@ (mov r8, r8)
 801831c:	e17b      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801831e:	46c0      	nop			@ (mov r8, r8)
 8018320:	e179      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018322:	46c0      	nop			@ (mov r8, r8)
 8018324:	e177      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018326:	46c0      	nop			@ (mov r8, r8)
        break;
 8018328:	e175      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 801832a:	4a75      	ldr	r2, [pc, #468]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801832c:	2388      	movs	r3, #136	@ 0x88
 801832e:	58d2      	ldr	r2, [r2, r3]
 8018330:	23c0      	movs	r3, #192	@ 0xc0
 8018332:	041b      	lsls	r3, r3, #16
 8018334:	4013      	ands	r3, r2
 8018336:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018338:	697a      	ldr	r2, [r7, #20]
 801833a:	23c0      	movs	r3, #192	@ 0xc0
 801833c:	041b      	lsls	r3, r3, #16
 801833e:	429a      	cmp	r2, r3
 8018340:	d03d      	beq.n	80183be <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8018342:	697a      	ldr	r2, [r7, #20]
 8018344:	23c0      	movs	r3, #192	@ 0xc0
 8018346:	041b      	lsls	r3, r3, #16
 8018348:	429a      	cmp	r2, r3
 801834a:	d843      	bhi.n	80183d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801834c:	697a      	ldr	r2, [r7, #20]
 801834e:	2380      	movs	r3, #128	@ 0x80
 8018350:	041b      	lsls	r3, r3, #16
 8018352:	429a      	cmp	r2, r3
 8018354:	d027      	beq.n	80183a6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8018356:	697a      	ldr	r2, [r7, #20]
 8018358:	2380      	movs	r3, #128	@ 0x80
 801835a:	041b      	lsls	r3, r3, #16
 801835c:	429a      	cmp	r2, r3
 801835e:	d839      	bhi.n	80183d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8018360:	697b      	ldr	r3, [r7, #20]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d005      	beq.n	8018372 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8018366:	697a      	ldr	r2, [r7, #20]
 8018368:	2380      	movs	r3, #128	@ 0x80
 801836a:	03db      	lsls	r3, r3, #15
 801836c:	429a      	cmp	r2, r3
 801836e:	d005      	beq.n	801837c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8018370:	e030      	b.n	80183d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018372:	f7ff f965 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8018376:	0003      	movs	r3, r0
 8018378:	61fb      	str	r3, [r7, #28]
            break;
 801837a:	e032      	b.n	80183e2 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801837c:	4a60      	ldr	r2, [pc, #384]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801837e:	2394      	movs	r3, #148	@ 0x94
 8018380:	58d3      	ldr	r3, [r2, r3]
 8018382:	2202      	movs	r2, #2
 8018384:	4013      	ands	r3, r2
 8018386:	2b02      	cmp	r3, #2
 8018388:	d126      	bne.n	80183d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 801838a:	4a5d      	ldr	r2, [pc, #372]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801838c:	2394      	movs	r3, #148	@ 0x94
 801838e:	58d3      	ldr	r3, [r2, r3]
 8018390:	2204      	movs	r2, #4
 8018392:	4013      	ands	r3, r2
 8018394:	2b04      	cmp	r3, #4
 8018396:	d102      	bne.n	801839e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8018398:	23fa      	movs	r3, #250	@ 0xfa
 801839a:	61fb      	str	r3, [r7, #28]
            break;
 801839c:	e01c      	b.n	80183d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 801839e:	23fa      	movs	r3, #250	@ 0xfa
 80183a0:	01db      	lsls	r3, r3, #7
 80183a2:	61fb      	str	r3, [r7, #28]
            break;
 80183a4:	e018      	b.n	80183d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80183a6:	4b56      	ldr	r3, [pc, #344]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183a8:	681a      	ldr	r2, [r3, #0]
 80183aa:	2380      	movs	r3, #128	@ 0x80
 80183ac:	00db      	lsls	r3, r3, #3
 80183ae:	401a      	ands	r2, r3
 80183b0:	2380      	movs	r3, #128	@ 0x80
 80183b2:	00db      	lsls	r3, r3, #3
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d111      	bne.n	80183dc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 80183b8:	4b52      	ldr	r3, [pc, #328]	@ (8018504 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80183ba:	61fb      	str	r3, [r7, #28]
            break;
 80183bc:	e00e      	b.n	80183dc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80183be:	4a50      	ldr	r2, [pc, #320]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183c0:	2390      	movs	r3, #144	@ 0x90
 80183c2:	58d3      	ldr	r3, [r2, r3]
 80183c4:	2202      	movs	r2, #2
 80183c6:	4013      	ands	r3, r2
 80183c8:	2b02      	cmp	r3, #2
 80183ca:	d109      	bne.n	80183e0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 80183cc:	2380      	movs	r3, #128	@ 0x80
 80183ce:	021b      	lsls	r3, r3, #8
 80183d0:	61fb      	str	r3, [r7, #28]
            break;
 80183d2:	e005      	b.n	80183e0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 80183d4:	46c0      	nop			@ (mov r8, r8)
 80183d6:	e11e      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80183d8:	46c0      	nop			@ (mov r8, r8)
 80183da:	e11c      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80183dc:	46c0      	nop			@ (mov r8, r8)
 80183de:	e11a      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80183e0:	46c0      	nop			@ (mov r8, r8)
        break;
 80183e2:	e118      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80183e4:	4a46      	ldr	r2, [pc, #280]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80183e6:	2388      	movs	r3, #136	@ 0x88
 80183e8:	58d2      	ldr	r2, [r2, r3]
 80183ea:	2380      	movs	r3, #128	@ 0x80
 80183ec:	045b      	lsls	r3, r3, #17
 80183ee:	4013      	ands	r3, r2
 80183f0:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d005      	beq.n	8018404 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80183f8:	697a      	ldr	r2, [r7, #20]
 80183fa:	2380      	movs	r3, #128	@ 0x80
 80183fc:	045b      	lsls	r3, r3, #17
 80183fe:	429a      	cmp	r2, r3
 8018400:	d011      	beq.n	8018426 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8018402:	e019      	b.n	8018438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8018404:	4b3e      	ldr	r3, [pc, #248]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018406:	689a      	ldr	r2, [r3, #8]
 8018408:	23e0      	movs	r3, #224	@ 0xe0
 801840a:	01db      	lsls	r3, r3, #7
 801840c:	4013      	ands	r3, r2
 801840e:	d104      	bne.n	801841a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8018410:	f7ff f916 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8018414:	0003      	movs	r3, r0
 8018416:	61fb      	str	r3, [r7, #28]
            break;
 8018418:	e00e      	b.n	8018438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 801841a:	f7ff f911 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 801841e:	0003      	movs	r3, r0
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	61fb      	str	r3, [r7, #28]
            break;
 8018424:	e008      	b.n	8018438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8018426:	2408      	movs	r4, #8
 8018428:	193b      	adds	r3, r7, r4
 801842a:	0018      	movs	r0, r3
 801842c:	f000 f8fe 	bl	801862c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8018430:	193b      	adds	r3, r7, r4
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	61fb      	str	r3, [r7, #28]
            break;
 8018436:	46c0      	nop			@ (mov r8, r8)
        break;
 8018438:	e0ed      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 801843a:	4a31      	ldr	r2, [pc, #196]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801843c:	2388      	movs	r3, #136	@ 0x88
 801843e:	58d2      	ldr	r2, [r2, r3]
 8018440:	2380      	movs	r3, #128	@ 0x80
 8018442:	049b      	lsls	r3, r3, #18
 8018444:	4013      	ands	r3, r2
 8018446:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d005      	beq.n	801845a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 801844e:	697a      	ldr	r2, [r7, #20]
 8018450:	2380      	movs	r3, #128	@ 0x80
 8018452:	049b      	lsls	r3, r3, #18
 8018454:	429a      	cmp	r2, r3
 8018456:	d011      	beq.n	801847c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8018458:	e019      	b.n	801848e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 801845a:	4b29      	ldr	r3, [pc, #164]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801845c:	689a      	ldr	r2, [r3, #8]
 801845e:	23e0      	movs	r3, #224	@ 0xe0
 8018460:	01db      	lsls	r3, r3, #7
 8018462:	4013      	ands	r3, r2
 8018464:	d104      	bne.n	8018470 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8018466:	f7ff f8eb 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 801846a:	0003      	movs	r3, r0
 801846c:	61fb      	str	r3, [r7, #28]
            break;
 801846e:	e00e      	b.n	801848e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8018470:	f7ff f8e6 	bl	8017640 <HAL_RCC_GetPCLK1Freq>
 8018474:	0003      	movs	r3, r0
 8018476:	005b      	lsls	r3, r3, #1
 8018478:	61fb      	str	r3, [r7, #28]
            break;
 801847a:	e008      	b.n	801848e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801847c:	2408      	movs	r4, #8
 801847e:	193b      	adds	r3, r7, r4
 8018480:	0018      	movs	r0, r3
 8018482:	f000 f8d3 	bl	801862c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8018486:	193b      	adds	r3, r7, r4
 8018488:	685b      	ldr	r3, [r3, #4]
 801848a:	61fb      	str	r3, [r7, #28]
            break;
 801848c:	46c0      	nop			@ (mov r8, r8)
        break;
 801848e:	e0c2      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8018490:	4a1b      	ldr	r2, [pc, #108]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018492:	2388      	movs	r3, #136	@ 0x88
 8018494:	58d2      	ldr	r2, [r2, r3]
 8018496:	23c0      	movs	r3, #192	@ 0xc0
 8018498:	051b      	lsls	r3, r3, #20
 801849a:	4013      	ands	r3, r2
 801849c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801849e:	697a      	ldr	r2, [r7, #20]
 80184a0:	23c0      	movs	r3, #192	@ 0xc0
 80184a2:	051b      	lsls	r3, r3, #20
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d017      	beq.n	80184d8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80184a8:	697a      	ldr	r2, [r7, #20]
 80184aa:	23c0      	movs	r3, #192	@ 0xc0
 80184ac:	051b      	lsls	r3, r3, #20
 80184ae:	429a      	cmp	r2, r3
 80184b0:	d84a      	bhi.n	8018548 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80184b2:	697a      	ldr	r2, [r7, #20]
 80184b4:	2380      	movs	r3, #128	@ 0x80
 80184b6:	051b      	lsls	r3, r3, #20
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d039      	beq.n	8018530 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80184bc:	697a      	ldr	r2, [r7, #20]
 80184be:	2380      	movs	r3, #128	@ 0x80
 80184c0:	051b      	lsls	r3, r3, #20
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d840      	bhi.n	8018548 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d03a      	beq.n	8018542 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80184cc:	697a      	ldr	r2, [r7, #20]
 80184ce:	2380      	movs	r3, #128	@ 0x80
 80184d0:	04db      	lsls	r3, r3, #19
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d003      	beq.n	80184de <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 80184d6:	e037      	b.n	8018548 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 80184d8:	4b0b      	ldr	r3, [pc, #44]	@ (8018508 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 80184da:	61fb      	str	r3, [r7, #28]
            break;
 80184dc:	e037      	b.n	801854e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80184de:	4b08      	ldr	r3, [pc, #32]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	2202      	movs	r2, #2
 80184e4:	4013      	ands	r3, r2
 80184e6:	2b02      	cmp	r3, #2
 80184e8:	d130      	bne.n	801854c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80184ea:	4b05      	ldr	r3, [pc, #20]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	2208      	movs	r2, #8
 80184f0:	4013      	ands	r3, r2
 80184f2:	d00b      	beq.n	801850c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80184f4:	4b02      	ldr	r3, [pc, #8]	@ (8018500 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	091b      	lsrs	r3, r3, #4
 80184fa:	220f      	movs	r2, #15
 80184fc:	4013      	ands	r3, r2
 80184fe:	e00b      	b.n	8018518 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8018500:	40021000 	.word	0x40021000
 8018504:	00f42400 	.word	0x00f42400
 8018508:	02dc6c00 	.word	0x02dc6c00
 801850c:	4a44      	ldr	r2, [pc, #272]	@ (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801850e:	2394      	movs	r3, #148	@ 0x94
 8018510:	58d3      	ldr	r3, [r2, r3]
 8018512:	0a1b      	lsrs	r3, r3, #8
 8018514:	220f      	movs	r2, #15
 8018516:	4013      	ands	r3, r2
 8018518:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 801851a:	69bb      	ldr	r3, [r7, #24]
 801851c:	2b0b      	cmp	r3, #11
 801851e:	d901      	bls.n	8018524 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8018520:	230b      	movs	r3, #11
 8018522:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8018524:	4b3f      	ldr	r3, [pc, #252]	@ (8018624 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8018526:	69ba      	ldr	r2, [r7, #24]
 8018528:	0092      	lsls	r2, r2, #2
 801852a:	58d3      	ldr	r3, [r2, r3]
 801852c:	61fb      	str	r3, [r7, #28]
            break;
 801852e:	e00d      	b.n	801854c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8018530:	2408      	movs	r4, #8
 8018532:	193b      	adds	r3, r7, r4
 8018534:	0018      	movs	r0, r3
 8018536:	f000 f879 	bl	801862c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801853a:	193b      	adds	r3, r7, r4
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	61fb      	str	r3, [r7, #28]
            break;
 8018540:	e005      	b.n	801854e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 8018542:	2300      	movs	r3, #0
 8018544:	61fb      	str	r3, [r7, #28]
            break;
 8018546:	e002      	b.n	801854e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8018548:	46c0      	nop			@ (mov r8, r8)
 801854a:	e064      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801854c:	46c0      	nop			@ (mov r8, r8)
        break;
 801854e:	e062      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8018550:	4a33      	ldr	r2, [pc, #204]	@ (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8018552:	2388      	movs	r3, #136	@ 0x88
 8018554:	58d2      	ldr	r2, [r2, r3]
 8018556:	23c0      	movs	r3, #192	@ 0xc0
 8018558:	051b      	lsls	r3, r3, #20
 801855a:	4013      	ands	r3, r2
 801855c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801855e:	697a      	ldr	r2, [r7, #20]
 8018560:	23c0      	movs	r3, #192	@ 0xc0
 8018562:	051b      	lsls	r3, r3, #20
 8018564:	429a      	cmp	r2, r3
 8018566:	d017      	beq.n	8018598 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8018568:	697a      	ldr	r2, [r7, #20]
 801856a:	23c0      	movs	r3, #192	@ 0xc0
 801856c:	051b      	lsls	r3, r3, #20
 801856e:	429a      	cmp	r2, r3
 8018570:	d844      	bhi.n	80185fc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8018572:	697a      	ldr	r2, [r7, #20]
 8018574:	2380      	movs	r3, #128	@ 0x80
 8018576:	051b      	lsls	r3, r3, #20
 8018578:	429a      	cmp	r2, r3
 801857a:	d033      	beq.n	80185e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 801857c:	697a      	ldr	r2, [r7, #20]
 801857e:	2380      	movs	r3, #128	@ 0x80
 8018580:	051b      	lsls	r3, r3, #20
 8018582:	429a      	cmp	r2, r3
 8018584:	d83a      	bhi.n	80185fc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d034      	beq.n	80185f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 801858c:	697a      	ldr	r2, [r7, #20]
 801858e:	2380      	movs	r3, #128	@ 0x80
 8018590:	04db      	lsls	r3, r3, #19
 8018592:	429a      	cmp	r2, r3
 8018594:	d003      	beq.n	801859e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8018596:	e031      	b.n	80185fc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8018598:	4b23      	ldr	r3, [pc, #140]	@ (8018628 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 801859a:	61fb      	str	r3, [r7, #28]
            break;
 801859c:	e031      	b.n	8018602 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801859e:	4b20      	ldr	r3, [pc, #128]	@ (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	2202      	movs	r2, #2
 80185a4:	4013      	ands	r3, r2
 80185a6:	2b02      	cmp	r3, #2
 80185a8:	d12a      	bne.n	8018600 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80185aa:	4b1d      	ldr	r3, [pc, #116]	@ (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	2208      	movs	r2, #8
 80185b0:	4013      	ands	r3, r2
 80185b2:	d005      	beq.n	80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 80185b4:	4b1a      	ldr	r3, [pc, #104]	@ (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	091b      	lsrs	r3, r3, #4
 80185ba:	220f      	movs	r2, #15
 80185bc:	4013      	ands	r3, r2
 80185be:	e005      	b.n	80185cc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80185c0:	4a17      	ldr	r2, [pc, #92]	@ (8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80185c2:	2394      	movs	r3, #148	@ 0x94
 80185c4:	58d3      	ldr	r3, [r2, r3]
 80185c6:	0a1b      	lsrs	r3, r3, #8
 80185c8:	220f      	movs	r2, #15
 80185ca:	4013      	ands	r3, r2
 80185cc:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80185ce:	69bb      	ldr	r3, [r7, #24]
 80185d0:	2b0b      	cmp	r3, #11
 80185d2:	d901      	bls.n	80185d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 80185d4:	230b      	movs	r3, #11
 80185d6:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80185d8:	4b12      	ldr	r3, [pc, #72]	@ (8018624 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80185da:	69ba      	ldr	r2, [r7, #24]
 80185dc:	0092      	lsls	r2, r2, #2
 80185de:	58d3      	ldr	r3, [r2, r3]
 80185e0:	61fb      	str	r3, [r7, #28]
            break;
 80185e2:	e00d      	b.n	8018600 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80185e4:	2408      	movs	r4, #8
 80185e6:	193b      	adds	r3, r7, r4
 80185e8:	0018      	movs	r0, r3
 80185ea:	f000 f81f 	bl	801862c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80185ee:	193b      	adds	r3, r7, r4
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	61fb      	str	r3, [r7, #28]
            break;
 80185f4:	e005      	b.n	8018602 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80185f6:	2300      	movs	r3, #0
 80185f8:	61fb      	str	r3, [r7, #28]
            break;
 80185fa:	e002      	b.n	8018602 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80185fc:	46c0      	nop			@ (mov r8, r8)
 80185fe:	e00a      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018600:	46c0      	nop			@ (mov r8, r8)
        break;
 8018602:	e008      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8018604:	46c0      	nop			@ (mov r8, r8)
 8018606:	e006      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8018608:	46c0      	nop			@ (mov r8, r8)
 801860a:	e004      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801860c:	46c0      	nop			@ (mov r8, r8)
 801860e:	e002      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8018610:	46c0      	nop			@ (mov r8, r8)
 8018612:	e000      	b.n	8018616 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8018614:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8018616:	69fb      	ldr	r3, [r7, #28]
}
 8018618:	0018      	movs	r0, r3
 801861a:	46bd      	mov	sp, r7
 801861c:	b009      	add	sp, #36	@ 0x24
 801861e:	bd90      	pop	{r4, r7, pc}
 8018620:	40021000 	.word	0x40021000
 8018624:	0801c2c4 	.word	0x0801c2c4
 8018628:	02dc6c00 	.word	0x02dc6c00

0801862c <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b088      	sub	sp, #32
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8018634:	4b58      	ldr	r3, [pc, #352]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018636:	68db      	ldr	r3, [r3, #12]
 8018638:	0a1b      	lsrs	r3, r3, #8
 801863a:	227f      	movs	r2, #127	@ 0x7f
 801863c:	4013      	ands	r3, r2
 801863e:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8018640:	4b55      	ldr	r3, [pc, #340]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018642:	68db      	ldr	r3, [r3, #12]
 8018644:	2203      	movs	r2, #3
 8018646:	4013      	ands	r3, r2
 8018648:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 801864a:	4b53      	ldr	r3, [pc, #332]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801864c:	68db      	ldr	r3, [r3, #12]
 801864e:	091b      	lsrs	r3, r3, #4
 8018650:	2207      	movs	r2, #7
 8018652:	4013      	ands	r3, r2
 8018654:	3301      	adds	r3, #1
 8018656:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8018658:	4b4f      	ldr	r3, [pc, #316]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	2208      	movs	r2, #8
 801865e:	4013      	ands	r3, r2
 8018660:	d005      	beq.n	801866e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8018662:	4b4d      	ldr	r3, [pc, #308]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	091b      	lsrs	r3, r3, #4
 8018668:	220f      	movs	r2, #15
 801866a:	4013      	ands	r3, r2
 801866c:	e005      	b.n	801867a <HAL_RCCEx_GetPLLClockFreq+0x4e>
 801866e:	4a4a      	ldr	r2, [pc, #296]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018670:	2394      	movs	r3, #148	@ 0x94
 8018672:	58d3      	ldr	r3, [r2, r3]
 8018674:	0a1b      	lsrs	r3, r3, #8
 8018676:	220f      	movs	r2, #15
 8018678:	4013      	ands	r3, r2
 801867a:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 801867c:	69bb      	ldr	r3, [r7, #24]
 801867e:	2b0b      	cmp	r3, #11
 8018680:	d901      	bls.n	8018686 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8018682:	230b      	movs	r3, #11
 8018684:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8018686:	693b      	ldr	r3, [r7, #16]
 8018688:	2b03      	cmp	r3, #3
 801868a:	d020      	beq.n	80186ce <HAL_RCCEx_GetPLLClockFreq+0xa2>
 801868c:	693b      	ldr	r3, [r7, #16]
 801868e:	2b03      	cmp	r3, #3
 8018690:	d827      	bhi.n	80186e2 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	2b01      	cmp	r3, #1
 8018696:	d00c      	beq.n	80186b2 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8018698:	693b      	ldr	r3, [r7, #16]
 801869a:	2b02      	cmp	r3, #2
 801869c:	d121      	bne.n	80186e2 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 801869e:	68f9      	ldr	r1, [r7, #12]
 80186a0:	483e      	ldr	r0, [pc, #248]	@ (801879c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80186a2:	f7e7 fd39 	bl	8000118 <__udivsi3>
 80186a6:	0003      	movs	r3, r0
 80186a8:	001a      	movs	r2, r3
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	4353      	muls	r3, r2
 80186ae:	61fb      	str	r3, [r7, #28]
      break;
 80186b0:	e025      	b.n	80186fe <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80186b2:	4b3b      	ldr	r3, [pc, #236]	@ (80187a0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80186b4:	69ba      	ldr	r2, [r7, #24]
 80186b6:	0092      	lsls	r2, r2, #2
 80186b8:	58d3      	ldr	r3, [r2, r3]
 80186ba:	68f9      	ldr	r1, [r7, #12]
 80186bc:	0018      	movs	r0, r3
 80186be:	f7e7 fd2b 	bl	8000118 <__udivsi3>
 80186c2:	0003      	movs	r3, r0
 80186c4:	001a      	movs	r2, r3
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	4353      	muls	r3, r2
 80186ca:	61fb      	str	r3, [r7, #28]
      break;
 80186cc:	e017      	b.n	80186fe <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80186ce:	68f9      	ldr	r1, [r7, #12]
 80186d0:	4834      	ldr	r0, [pc, #208]	@ (80187a4 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80186d2:	f7e7 fd21 	bl	8000118 <__udivsi3>
 80186d6:	0003      	movs	r3, r0
 80186d8:	001a      	movs	r2, r3
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	4353      	muls	r3, r2
 80186de:	61fb      	str	r3, [r7, #28]
      break;
 80186e0:	e00d      	b.n	80186fe <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80186e2:	4b2f      	ldr	r3, [pc, #188]	@ (80187a0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80186e4:	69ba      	ldr	r2, [r7, #24]
 80186e6:	0092      	lsls	r2, r2, #2
 80186e8:	58d3      	ldr	r3, [r2, r3]
 80186ea:	68f9      	ldr	r1, [r7, #12]
 80186ec:	0018      	movs	r0, r3
 80186ee:	f7e7 fd13 	bl	8000118 <__udivsi3>
 80186f2:	0003      	movs	r3, r0
 80186f4:	001a      	movs	r2, r3
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	4353      	muls	r3, r2
 80186fa:	61fb      	str	r3, [r7, #28]
      break;
 80186fc:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80186fe:	4b26      	ldr	r3, [pc, #152]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018700:	68da      	ldr	r2, [r3, #12]
 8018702:	2380      	movs	r3, #128	@ 0x80
 8018704:	025b      	lsls	r3, r3, #9
 8018706:	4013      	ands	r3, r2
 8018708:	d00e      	beq.n	8018728 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 801870a:	4b23      	ldr	r3, [pc, #140]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801870c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 801870e:	0c5b      	lsrs	r3, r3, #17
 8018710:	221f      	movs	r2, #31
 8018712:	4013      	ands	r3, r2
 8018714:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8018716:	0019      	movs	r1, r3
 8018718:	69f8      	ldr	r0, [r7, #28]
 801871a:	f7e7 fcfd 	bl	8000118 <__udivsi3>
 801871e:	0003      	movs	r3, r0
 8018720:	001a      	movs	r2, r3
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	601a      	str	r2, [r3, #0]
 8018726:	e002      	b.n	801872e <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2200      	movs	r2, #0
 801872c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 801872e:	4b1a      	ldr	r3, [pc, #104]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018730:	68da      	ldr	r2, [r3, #12]
 8018732:	2380      	movs	r3, #128	@ 0x80
 8018734:	045b      	lsls	r3, r3, #17
 8018736:	4013      	ands	r3, r2
 8018738:	d00e      	beq.n	8018758 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 801873a:	4b17      	ldr	r3, [pc, #92]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801873c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 801873e:	0e5b      	lsrs	r3, r3, #25
 8018740:	2207      	movs	r2, #7
 8018742:	4013      	ands	r3, r2
 8018744:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8018746:	0019      	movs	r1, r3
 8018748:	69f8      	ldr	r0, [r7, #28]
 801874a:	f7e7 fce5 	bl	8000118 <__udivsi3>
 801874e:	0003      	movs	r3, r0
 8018750:	001a      	movs	r2, r3
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	605a      	str	r2, [r3, #4]
 8018756:	e002      	b.n	801875e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	2200      	movs	r2, #0
 801875c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 801875e:	4b0e      	ldr	r3, [pc, #56]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018760:	68da      	ldr	r2, [r3, #12]
 8018762:	2380      	movs	r3, #128	@ 0x80
 8018764:	055b      	lsls	r3, r3, #21
 8018766:	4013      	ands	r3, r2
 8018768:	d00e      	beq.n	8018788 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 801876a:	4b0b      	ldr	r3, [pc, #44]	@ (8018798 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801876c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 801876e:	0f5b      	lsrs	r3, r3, #29
 8018770:	2207      	movs	r2, #7
 8018772:	4013      	ands	r3, r2
 8018774:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8018776:	0019      	movs	r1, r3
 8018778:	69f8      	ldr	r0, [r7, #28]
 801877a:	f7e7 fccd 	bl	8000118 <__udivsi3>
 801877e:	0003      	movs	r3, r0
 8018780:	001a      	movs	r2, r3
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8018786:	e002      	b.n	801878e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	2200      	movs	r2, #0
 801878c:	609a      	str	r2, [r3, #8]
}
 801878e:	46c0      	nop			@ (mov r8, r8)
 8018790:	46bd      	mov	sp, r7
 8018792:	b008      	add	sp, #32
 8018794:	bd80      	pop	{r7, pc}
 8018796:	46c0      	nop			@ (mov r8, r8)
 8018798:	40021000 	.word	0x40021000
 801879c:	00f42400 	.word	0x00f42400
 80187a0:	0801c2c4 	.word	0x0801c2c4
 80187a4:	003d0900 	.word	0x003d0900

080187a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b084      	sub	sp, #16
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80187b0:	210f      	movs	r1, #15
 80187b2:	187b      	adds	r3, r7, r1
 80187b4:	2201      	movs	r2, #1
 80187b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d100      	bne.n	80187c0 <HAL_RTC_Init+0x18>
 80187be:	e08b      	b.n	80188d8 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 80187c0:	187b      	adds	r3, r7, r1
 80187c2:	2200      	movs	r2, #0
 80187c4:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	222d      	movs	r2, #45	@ 0x2d
 80187ca:	5c9b      	ldrb	r3, [r3, r2]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d107      	bne.n	80187e2 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	222c      	movs	r2, #44	@ 0x2c
 80187d6:	2100      	movs	r1, #0
 80187d8:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	0018      	movs	r0, r3
 80187de:	f7f3 fc6f 	bl	800c0c0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	222d      	movs	r2, #45	@ 0x2d
 80187e6:	2102      	movs	r1, #2
 80187e8:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80187ea:	4b3f      	ldr	r3, [pc, #252]	@ (80188e8 <HAL_RTC_Init+0x140>)
 80187ec:	22ca      	movs	r2, #202	@ 0xca
 80187ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80187f0:	4b3d      	ldr	r3, [pc, #244]	@ (80188e8 <HAL_RTC_Init+0x140>)
 80187f2:	2253      	movs	r2, #83	@ 0x53
 80187f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	0018      	movs	r0, r3
 80187fa:	f000 fab9 	bl	8018d70 <RTC_EnterInitMode>
 80187fe:	1e03      	subs	r3, r0, #0
 8018800:	d00b      	beq.n	801881a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018802:	4b39      	ldr	r3, [pc, #228]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018804:	22ff      	movs	r2, #255	@ 0xff
 8018806:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	222d      	movs	r2, #45	@ 0x2d
 801880c:	2104      	movs	r1, #4
 801880e:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8018810:	230f      	movs	r3, #15
 8018812:	18fb      	adds	r3, r7, r3
 8018814:	2201      	movs	r2, #1
 8018816:	701a      	strb	r2, [r3, #0]
 8018818:	e05e      	b.n	80188d8 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801881a:	4b33      	ldr	r3, [pc, #204]	@ (80188e8 <HAL_RTC_Init+0x140>)
 801881c:	699a      	ldr	r2, [r3, #24]
 801881e:	4b32      	ldr	r3, [pc, #200]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018820:	4932      	ldr	r1, [pc, #200]	@ (80188ec <HAL_RTC_Init+0x144>)
 8018822:	400a      	ands	r2, r1
 8018824:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8018826:	4b30      	ldr	r3, [pc, #192]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018828:	6999      	ldr	r1, [r3, #24]
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	685a      	ldr	r2, [r3, #4]
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	691b      	ldr	r3, [r3, #16]
 8018832:	431a      	orrs	r2, r3
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	699b      	ldr	r3, [r3, #24]
 8018838:	431a      	orrs	r2, r3
 801883a:	4b2b      	ldr	r3, [pc, #172]	@ (80188e8 <HAL_RTC_Init+0x140>)
 801883c:	430a      	orrs	r2, r1
 801883e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	68d9      	ldr	r1, [r3, #12]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	689b      	ldr	r3, [r3, #8]
 8018848:	041a      	lsls	r2, r3, #16
 801884a:	4b27      	ldr	r3, [pc, #156]	@ (80188e8 <HAL_RTC_Init+0x140>)
 801884c:	430a      	orrs	r2, r1
 801884e:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8018850:	4b25      	ldr	r3, [pc, #148]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018852:	68db      	ldr	r3, [r3, #12]
 8018854:	4a26      	ldr	r2, [pc, #152]	@ (80188f0 <HAL_RTC_Init+0x148>)
 8018856:	4013      	ands	r3, r2
 8018858:	0019      	movs	r1, r3
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018862:	431a      	orrs	r2, r3
 8018864:	4b20      	ldr	r3, [pc, #128]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018866:	430a      	orrs	r2, r1
 8018868:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801886a:	4b1f      	ldr	r3, [pc, #124]	@ (80188e8 <HAL_RTC_Init+0x140>)
 801886c:	68da      	ldr	r2, [r3, #12]
 801886e:	4b1e      	ldr	r3, [pc, #120]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018870:	2180      	movs	r1, #128	@ 0x80
 8018872:	438a      	bics	r2, r1
 8018874:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018876:	4b1c      	ldr	r3, [pc, #112]	@ (80188e8 <HAL_RTC_Init+0x140>)
 8018878:	699b      	ldr	r3, [r3, #24]
 801887a:	2220      	movs	r2, #32
 801887c:	4013      	ands	r3, r2
 801887e:	d110      	bne.n	80188a2 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	0018      	movs	r0, r3
 8018884:	f000 fa4e 	bl	8018d24 <HAL_RTC_WaitForSynchro>
 8018888:	1e03      	subs	r3, r0, #0
 801888a:	d00a      	beq.n	80188a2 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801888c:	4b16      	ldr	r3, [pc, #88]	@ (80188e8 <HAL_RTC_Init+0x140>)
 801888e:	22ff      	movs	r2, #255	@ 0xff
 8018890:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	222d      	movs	r2, #45	@ 0x2d
 8018896:	2104      	movs	r1, #4
 8018898:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 801889a:	230f      	movs	r3, #15
 801889c:	18fb      	adds	r3, r7, r3
 801889e:	2201      	movs	r2, #1
 80188a0:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80188a2:	230f      	movs	r3, #15
 80188a4:	18fb      	adds	r3, r7, r3
 80188a6:	781b      	ldrb	r3, [r3, #0]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d115      	bne.n	80188d8 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 80188ac:	4b0e      	ldr	r3, [pc, #56]	@ (80188e8 <HAL_RTC_Init+0x140>)
 80188ae:	699b      	ldr	r3, [r3, #24]
 80188b0:	00db      	lsls	r3, r3, #3
 80188b2:	08d9      	lsrs	r1, r3, #3
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6a1a      	ldr	r2, [r3, #32]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	69db      	ldr	r3, [r3, #28]
 80188bc:	431a      	orrs	r2, r3
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	695b      	ldr	r3, [r3, #20]
 80188c2:	431a      	orrs	r2, r3
 80188c4:	4b08      	ldr	r3, [pc, #32]	@ (80188e8 <HAL_RTC_Init+0x140>)
 80188c6:	430a      	orrs	r2, r1
 80188c8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80188ca:	4b07      	ldr	r3, [pc, #28]	@ (80188e8 <HAL_RTC_Init+0x140>)
 80188cc:	22ff      	movs	r2, #255	@ 0xff
 80188ce:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	222d      	movs	r2, #45	@ 0x2d
 80188d4:	2101      	movs	r1, #1
 80188d6:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 80188d8:	230f      	movs	r3, #15
 80188da:	18fb      	adds	r3, r7, r3
 80188dc:	781b      	ldrb	r3, [r3, #0]
}
 80188de:	0018      	movs	r0, r3
 80188e0:	46bd      	mov	sp, r7
 80188e2:	b004      	add	sp, #16
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	46c0      	nop			@ (mov r8, r8)
 80188e8:	40002800 	.word	0x40002800
 80188ec:	fb8fffbf 	.word	0xfb8fffbf
 80188f0:	ffffe0ff 	.word	0xffffe0ff

080188f4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80188f4:	b590      	push	{r4, r7, lr}
 80188f6:	b087      	sub	sp, #28
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	222c      	movs	r2, #44	@ 0x2c
 8018904:	5c9b      	ldrb	r3, [r3, r2]
 8018906:	2b01      	cmp	r3, #1
 8018908:	d101      	bne.n	801890e <HAL_RTC_SetTime+0x1a>
 801890a:	2302      	movs	r3, #2
 801890c:	e0a7      	b.n	8018a5e <HAL_RTC_SetTime+0x16a>
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	222c      	movs	r2, #44	@ 0x2c
 8018912:	2101      	movs	r1, #1
 8018914:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	222d      	movs	r2, #45	@ 0x2d
 801891a:	2102      	movs	r1, #2
 801891c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801891e:	4b52      	ldr	r3, [pc, #328]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018920:	22ca      	movs	r2, #202	@ 0xca
 8018922:	625a      	str	r2, [r3, #36]	@ 0x24
 8018924:	4b50      	ldr	r3, [pc, #320]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018926:	2253      	movs	r2, #83	@ 0x53
 8018928:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	0018      	movs	r0, r3
 801892e:	f000 fa1f 	bl	8018d70 <RTC_EnterInitMode>
 8018932:	1e03      	subs	r3, r0, #0
 8018934:	d00c      	beq.n	8018950 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018936:	4b4c      	ldr	r3, [pc, #304]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018938:	22ff      	movs	r2, #255	@ 0xff
 801893a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	222d      	movs	r2, #45	@ 0x2d
 8018940:	2104      	movs	r1, #4
 8018942:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	222c      	movs	r2, #44	@ 0x2c
 8018948:	2100      	movs	r1, #0
 801894a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801894c:	2301      	movs	r3, #1
 801894e:	e086      	b.n	8018a5e <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018950:	4b45      	ldr	r3, [pc, #276]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018952:	68da      	ldr	r2, [r3, #12]
 8018954:	23c0      	movs	r3, #192	@ 0xc0
 8018956:	009b      	lsls	r3, r3, #2
 8018958:	401a      	ands	r2, r3
 801895a:	2380      	movs	r3, #128	@ 0x80
 801895c:	005b      	lsls	r3, r3, #1
 801895e:	429a      	cmp	r2, r3
 8018960:	d053      	beq.n	8018a0a <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d124      	bne.n	80189b2 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018968:	4b3f      	ldr	r3, [pc, #252]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 801896a:	699b      	ldr	r3, [r3, #24]
 801896c:	2240      	movs	r2, #64	@ 0x40
 801896e:	4013      	ands	r3, r2
 8018970:	d102      	bne.n	8018978 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	2200      	movs	r2, #0
 8018976:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018978:	68bb      	ldr	r3, [r7, #8]
 801897a:	781b      	ldrb	r3, [r3, #0]
 801897c:	0018      	movs	r0, r3
 801897e:	f000 fa23 	bl	8018dc8 <RTC_ByteToBcd2>
 8018982:	0003      	movs	r3, r0
 8018984:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	785b      	ldrb	r3, [r3, #1]
 801898a:	0018      	movs	r0, r3
 801898c:	f000 fa1c 	bl	8018dc8 <RTC_ByteToBcd2>
 8018990:	0003      	movs	r3, r0
 8018992:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018994:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	789b      	ldrb	r3, [r3, #2]
 801899a:	0018      	movs	r0, r3
 801899c:	f000 fa14 	bl	8018dc8 <RTC_ByteToBcd2>
 80189a0:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80189a2:	0022      	movs	r2, r4
 80189a4:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80189a6:	68bb      	ldr	r3, [r7, #8]
 80189a8:	78db      	ldrb	r3, [r3, #3]
 80189aa:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80189ac:	4313      	orrs	r3, r2
 80189ae:	617b      	str	r3, [r7, #20]
 80189b0:	e016      	b.n	80189e0 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80189b2:	4b2d      	ldr	r3, [pc, #180]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 80189b4:	699b      	ldr	r3, [r3, #24]
 80189b6:	2240      	movs	r2, #64	@ 0x40
 80189b8:	4013      	ands	r3, r2
 80189ba:	d102      	bne.n	80189c2 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	2200      	movs	r2, #0
 80189c0:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80189c2:	68bb      	ldr	r3, [r7, #8]
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	785b      	ldrb	r3, [r3, #1]
 80189cc:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80189ce:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80189d0:	68ba      	ldr	r2, [r7, #8]
 80189d2:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80189d4:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	78db      	ldrb	r3, [r3, #3]
 80189da:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80189dc:	4313      	orrs	r3, r2
 80189de:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80189e0:	4b21      	ldr	r3, [pc, #132]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 80189e2:	697a      	ldr	r2, [r7, #20]
 80189e4:	4921      	ldr	r1, [pc, #132]	@ (8018a6c <HAL_RTC_SetTime+0x178>)
 80189e6:	400a      	ands	r2, r1
 80189e8:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80189ea:	4b1f      	ldr	r3, [pc, #124]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 80189ec:	699a      	ldr	r2, [r3, #24]
 80189ee:	4b1e      	ldr	r3, [pc, #120]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 80189f0:	491f      	ldr	r1, [pc, #124]	@ (8018a70 <HAL_RTC_SetTime+0x17c>)
 80189f2:	400a      	ands	r2, r1
 80189f4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80189f6:	4b1c      	ldr	r3, [pc, #112]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 80189f8:	6999      	ldr	r1, [r3, #24]
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	68da      	ldr	r2, [r3, #12]
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	691b      	ldr	r3, [r3, #16]
 8018a02:	431a      	orrs	r2, r3
 8018a04:	4b18      	ldr	r3, [pc, #96]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018a06:	430a      	orrs	r2, r1
 8018a08:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018a0a:	4b17      	ldr	r3, [pc, #92]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018a0c:	68da      	ldr	r2, [r3, #12]
 8018a0e:	4b16      	ldr	r3, [pc, #88]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018a10:	2180      	movs	r1, #128	@ 0x80
 8018a12:	438a      	bics	r2, r1
 8018a14:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018a16:	4b14      	ldr	r3, [pc, #80]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018a18:	699b      	ldr	r3, [r3, #24]
 8018a1a:	2220      	movs	r2, #32
 8018a1c:	4013      	ands	r3, r2
 8018a1e:	d112      	bne.n	8018a46 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	0018      	movs	r0, r3
 8018a24:	f000 f97e 	bl	8018d24 <HAL_RTC_WaitForSynchro>
 8018a28:	1e03      	subs	r3, r0, #0
 8018a2a:	d00c      	beq.n	8018a46 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018a2e:	22ff      	movs	r2, #255	@ 0xff
 8018a30:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	222d      	movs	r2, #45	@ 0x2d
 8018a36:	2104      	movs	r1, #4
 8018a38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	222c      	movs	r2, #44	@ 0x2c
 8018a3e:	2100      	movs	r1, #0
 8018a40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018a42:	2301      	movs	r3, #1
 8018a44:	e00b      	b.n	8018a5e <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018a46:	4b08      	ldr	r3, [pc, #32]	@ (8018a68 <HAL_RTC_SetTime+0x174>)
 8018a48:	22ff      	movs	r2, #255	@ 0xff
 8018a4a:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	222d      	movs	r2, #45	@ 0x2d
 8018a50:	2101      	movs	r1, #1
 8018a52:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	222c      	movs	r2, #44	@ 0x2c
 8018a58:	2100      	movs	r1, #0
 8018a5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018a5c:	2300      	movs	r3, #0
  }
}
 8018a5e:	0018      	movs	r0, r3
 8018a60:	46bd      	mov	sp, r7
 8018a62:	b007      	add	sp, #28
 8018a64:	bd90      	pop	{r4, r7, pc}
 8018a66:	46c0      	nop			@ (mov r8, r8)
 8018a68:	40002800 	.word	0x40002800
 8018a6c:	007f7f7f 	.word	0x007f7f7f
 8018a70:	fffbffff 	.word	0xfffbffff

08018a74 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b086      	sub	sp, #24
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8018a80:	4b2c      	ldr	r3, [pc, #176]	@ (8018b34 <HAL_RTC_GetTime+0xc0>)
 8018a82:	689a      	ldr	r2, [r3, #8]
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018a88:	4b2a      	ldr	r3, [pc, #168]	@ (8018b34 <HAL_RTC_GetTime+0xc0>)
 8018a8a:	68da      	ldr	r2, [r3, #12]
 8018a8c:	23c0      	movs	r3, #192	@ 0xc0
 8018a8e:	009b      	lsls	r3, r3, #2
 8018a90:	401a      	ands	r2, r3
 8018a92:	2380      	movs	r3, #128	@ 0x80
 8018a94:	005b      	lsls	r3, r3, #1
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d047      	beq.n	8018b2a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8018a9a:	4b26      	ldr	r3, [pc, #152]	@ (8018b34 <HAL_RTC_GetTime+0xc0>)
 8018a9c:	691b      	ldr	r3, [r3, #16]
 8018a9e:	045b      	lsls	r3, r3, #17
 8018aa0:	0c5a      	lsrs	r2, r3, #17
 8018aa2:	68bb      	ldr	r3, [r7, #8]
 8018aa4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8018aa6:	4b23      	ldr	r3, [pc, #140]	@ (8018b34 <HAL_RTC_GetTime+0xc0>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4a23      	ldr	r2, [pc, #140]	@ (8018b38 <HAL_RTC_GetTime+0xc4>)
 8018aac:	4013      	ands	r3, r2
 8018aae:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	0c1b      	lsrs	r3, r3, #16
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	223f      	movs	r2, #63	@ 0x3f
 8018ab8:	4013      	ands	r3, r2
 8018aba:	b2da      	uxtb	r2, r3
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018ac0:	697b      	ldr	r3, [r7, #20]
 8018ac2:	0a1b      	lsrs	r3, r3, #8
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	227f      	movs	r2, #127	@ 0x7f
 8018ac8:	4013      	ands	r3, r2
 8018aca:	b2da      	uxtb	r2, r3
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8018ad0:	697b      	ldr	r3, [r7, #20]
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	227f      	movs	r2, #127	@ 0x7f
 8018ad6:	4013      	ands	r3, r2
 8018ad8:	b2da      	uxtb	r2, r3
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	0d9b      	lsrs	r3, r3, #22
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	2201      	movs	r2, #1
 8018ae6:	4013      	ands	r3, r2
 8018ae8:	b2da      	uxtb	r2, r3
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d11a      	bne.n	8018b2a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	0018      	movs	r0, r3
 8018afa:	f000 f98d 	bl	8018e18 <RTC_Bcd2ToByte>
 8018afe:	0003      	movs	r3, r0
 8018b00:	001a      	movs	r2, r3
 8018b02:	68bb      	ldr	r3, [r7, #8]
 8018b04:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018b06:	68bb      	ldr	r3, [r7, #8]
 8018b08:	785b      	ldrb	r3, [r3, #1]
 8018b0a:	0018      	movs	r0, r3
 8018b0c:	f000 f984 	bl	8018e18 <RTC_Bcd2ToByte>
 8018b10:	0003      	movs	r3, r0
 8018b12:	001a      	movs	r2, r3
 8018b14:	68bb      	ldr	r3, [r7, #8]
 8018b16:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	789b      	ldrb	r3, [r3, #2]
 8018b1c:	0018      	movs	r0, r3
 8018b1e:	f000 f97b 	bl	8018e18 <RTC_Bcd2ToByte>
 8018b22:	0003      	movs	r3, r0
 8018b24:	001a      	movs	r2, r3
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8018b2a:	2300      	movs	r3, #0
}
 8018b2c:	0018      	movs	r0, r3
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	b006      	add	sp, #24
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	40002800 	.word	0x40002800
 8018b38:	007f7f7f 	.word	0x007f7f7f

08018b3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018b3c:	b590      	push	{r4, r7, lr}
 8018b3e:	b087      	sub	sp, #28
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	60f8      	str	r0, [r7, #12]
 8018b44:	60b9      	str	r1, [r7, #8]
 8018b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	222c      	movs	r2, #44	@ 0x2c
 8018b4c:	5c9b      	ldrb	r3, [r3, r2]
 8018b4e:	2b01      	cmp	r3, #1
 8018b50:	d101      	bne.n	8018b56 <HAL_RTC_SetDate+0x1a>
 8018b52:	2302      	movs	r3, #2
 8018b54:	e090      	b.n	8018c78 <HAL_RTC_SetDate+0x13c>
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	222c      	movs	r2, #44	@ 0x2c
 8018b5a:	2101      	movs	r1, #1
 8018b5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	222d      	movs	r2, #45	@ 0x2d
 8018b62:	2102      	movs	r1, #2
 8018b64:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d10e      	bne.n	8018b8a <HAL_RTC_SetDate+0x4e>
 8018b6c:	68bb      	ldr	r3, [r7, #8]
 8018b6e:	785b      	ldrb	r3, [r3, #1]
 8018b70:	001a      	movs	r2, r3
 8018b72:	2310      	movs	r3, #16
 8018b74:	4013      	ands	r3, r2
 8018b76:	d008      	beq.n	8018b8a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018b78:	68bb      	ldr	r3, [r7, #8]
 8018b7a:	785b      	ldrb	r3, [r3, #1]
 8018b7c:	2210      	movs	r2, #16
 8018b7e:	4393      	bics	r3, r2
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	330a      	adds	r3, #10
 8018b84:	b2da      	uxtb	r2, r3
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d11c      	bne.n	8018bca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	78db      	ldrb	r3, [r3, #3]
 8018b94:	0018      	movs	r0, r3
 8018b96:	f000 f917 	bl	8018dc8 <RTC_ByteToBcd2>
 8018b9a:	0003      	movs	r3, r0
 8018b9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	785b      	ldrb	r3, [r3, #1]
 8018ba2:	0018      	movs	r0, r3
 8018ba4:	f000 f910 	bl	8018dc8 <RTC_ByteToBcd2>
 8018ba8:	0003      	movs	r3, r0
 8018baa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018bac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	789b      	ldrb	r3, [r3, #2]
 8018bb2:	0018      	movs	r0, r3
 8018bb4:	f000 f908 	bl	8018dc8 <RTC_ByteToBcd2>
 8018bb8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018bba:	0022      	movs	r2, r4
 8018bbc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8018bbe:	68bb      	ldr	r3, [r7, #8]
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018bc4:	4313      	orrs	r3, r2
 8018bc6:	617b      	str	r3, [r7, #20]
 8018bc8:	e00e      	b.n	8018be8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	78db      	ldrb	r3, [r3, #3]
 8018bce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	785b      	ldrb	r3, [r3, #1]
 8018bd4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018bd6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8018bd8:	68ba      	ldr	r2, [r7, #8]
 8018bda:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018bdc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018be4:	4313      	orrs	r3, r2
 8018be6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018be8:	4b25      	ldr	r3, [pc, #148]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018bea:	22ca      	movs	r2, #202	@ 0xca
 8018bec:	625a      	str	r2, [r3, #36]	@ 0x24
 8018bee:	4b24      	ldr	r3, [pc, #144]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018bf0:	2253      	movs	r2, #83	@ 0x53
 8018bf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	0018      	movs	r0, r3
 8018bf8:	f000 f8ba 	bl	8018d70 <RTC_EnterInitMode>
 8018bfc:	1e03      	subs	r3, r0, #0
 8018bfe:	d00c      	beq.n	8018c1a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018c00:	4b1f      	ldr	r3, [pc, #124]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c02:	22ff      	movs	r2, #255	@ 0xff
 8018c04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	222d      	movs	r2, #45	@ 0x2d
 8018c0a:	2104      	movs	r1, #4
 8018c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	222c      	movs	r2, #44	@ 0x2c
 8018c12:	2100      	movs	r1, #0
 8018c14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8018c16:	2301      	movs	r3, #1
 8018c18:	e02e      	b.n	8018c78 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8018c1a:	4b19      	ldr	r3, [pc, #100]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c1c:	697a      	ldr	r2, [r7, #20]
 8018c1e:	4919      	ldr	r1, [pc, #100]	@ (8018c84 <HAL_RTC_SetDate+0x148>)
 8018c20:	400a      	ands	r2, r1
 8018c22:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018c24:	4b16      	ldr	r3, [pc, #88]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c26:	68da      	ldr	r2, [r3, #12]
 8018c28:	4b15      	ldr	r3, [pc, #84]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c2a:	2180      	movs	r1, #128	@ 0x80
 8018c2c:	438a      	bics	r2, r1
 8018c2e:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018c30:	4b13      	ldr	r3, [pc, #76]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c32:	699b      	ldr	r3, [r3, #24]
 8018c34:	2220      	movs	r2, #32
 8018c36:	4013      	ands	r3, r2
 8018c38:	d112      	bne.n	8018c60 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	0018      	movs	r0, r3
 8018c3e:	f000 f871 	bl	8018d24 <HAL_RTC_WaitForSynchro>
 8018c42:	1e03      	subs	r3, r0, #0
 8018c44:	d00c      	beq.n	8018c60 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018c46:	4b0e      	ldr	r3, [pc, #56]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c48:	22ff      	movs	r2, #255	@ 0xff
 8018c4a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	222d      	movs	r2, #45	@ 0x2d
 8018c50:	2104      	movs	r1, #4
 8018c52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	222c      	movs	r2, #44	@ 0x2c
 8018c58:	2100      	movs	r1, #0
 8018c5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	e00b      	b.n	8018c78 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018c60:	4b07      	ldr	r3, [pc, #28]	@ (8018c80 <HAL_RTC_SetDate+0x144>)
 8018c62:	22ff      	movs	r2, #255	@ 0xff
 8018c64:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	222d      	movs	r2, #45	@ 0x2d
 8018c6a:	2101      	movs	r1, #1
 8018c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	222c      	movs	r2, #44	@ 0x2c
 8018c72:	2100      	movs	r1, #0
 8018c74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018c76:	2300      	movs	r3, #0
  }
}
 8018c78:	0018      	movs	r0, r3
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	b007      	add	sp, #28
 8018c7e:	bd90      	pop	{r4, r7, pc}
 8018c80:	40002800 	.word	0x40002800
 8018c84:	00ffff3f 	.word	0x00ffff3f

08018c88 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b086      	sub	sp, #24
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8018c94:	4b21      	ldr	r3, [pc, #132]	@ (8018d1c <HAL_RTC_GetDate+0x94>)
 8018c96:	685b      	ldr	r3, [r3, #4]
 8018c98:	4a21      	ldr	r2, [pc, #132]	@ (8018d20 <HAL_RTC_GetDate+0x98>)
 8018c9a:	4013      	ands	r3, r2
 8018c9c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018c9e:	697b      	ldr	r3, [r7, #20]
 8018ca0:	0c1b      	lsrs	r3, r3, #16
 8018ca2:	b2da      	uxtb	r2, r3
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	0a1b      	lsrs	r3, r3, #8
 8018cac:	b2db      	uxtb	r3, r3
 8018cae:	221f      	movs	r2, #31
 8018cb0:	4013      	ands	r3, r2
 8018cb2:	b2da      	uxtb	r2, r3
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8018cb8:	697b      	ldr	r3, [r7, #20]
 8018cba:	b2db      	uxtb	r3, r3
 8018cbc:	223f      	movs	r2, #63	@ 0x3f
 8018cbe:	4013      	ands	r3, r2
 8018cc0:	b2da      	uxtb	r2, r3
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8018cc6:	697b      	ldr	r3, [r7, #20]
 8018cc8:	0b5b      	lsrs	r3, r3, #13
 8018cca:	b2db      	uxtb	r3, r3
 8018ccc:	2207      	movs	r2, #7
 8018cce:	4013      	ands	r3, r2
 8018cd0:	b2da      	uxtb	r2, r3
 8018cd2:	68bb      	ldr	r3, [r7, #8]
 8018cd4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d11a      	bne.n	8018d12 <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018cdc:	68bb      	ldr	r3, [r7, #8]
 8018cde:	78db      	ldrb	r3, [r3, #3]
 8018ce0:	0018      	movs	r0, r3
 8018ce2:	f000 f899 	bl	8018e18 <RTC_Bcd2ToByte>
 8018ce6:	0003      	movs	r3, r0
 8018ce8:	001a      	movs	r2, r3
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	785b      	ldrb	r3, [r3, #1]
 8018cf2:	0018      	movs	r0, r3
 8018cf4:	f000 f890 	bl	8018e18 <RTC_Bcd2ToByte>
 8018cf8:	0003      	movs	r3, r0
 8018cfa:	001a      	movs	r2, r3
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	789b      	ldrb	r3, [r3, #2]
 8018d04:	0018      	movs	r0, r3
 8018d06:	f000 f887 	bl	8018e18 <RTC_Bcd2ToByte>
 8018d0a:	0003      	movs	r3, r0
 8018d0c:	001a      	movs	r2, r3
 8018d0e:	68bb      	ldr	r3, [r7, #8]
 8018d10:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018d12:	2300      	movs	r3, #0
}
 8018d14:	0018      	movs	r0, r3
 8018d16:	46bd      	mov	sp, r7
 8018d18:	b006      	add	sp, #24
 8018d1a:	bd80      	pop	{r7, pc}
 8018d1c:	40002800 	.word	0x40002800
 8018d20:	00ffff3f 	.word	0x00ffff3f

08018d24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b084      	sub	sp, #16
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8018d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8018d6c <HAL_RTC_WaitForSynchro+0x48>)
 8018d2e:	68da      	ldr	r2, [r3, #12]
 8018d30:	4b0e      	ldr	r3, [pc, #56]	@ (8018d6c <HAL_RTC_WaitForSynchro+0x48>)
 8018d32:	2120      	movs	r1, #32
 8018d34:	438a      	bics	r2, r1
 8018d36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8018d38:	f7f8 fffc 	bl	8011d34 <HAL_GetTick>
 8018d3c:	0003      	movs	r3, r0
 8018d3e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018d40:	e00a      	b.n	8018d58 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018d42:	f7f8 fff7 	bl	8011d34 <HAL_GetTick>
 8018d46:	0002      	movs	r2, r0
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	1ad2      	subs	r2, r2, r3
 8018d4c:	23fa      	movs	r3, #250	@ 0xfa
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	429a      	cmp	r2, r3
 8018d52:	d901      	bls.n	8018d58 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8018d54:	2303      	movs	r3, #3
 8018d56:	e005      	b.n	8018d64 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018d58:	4b04      	ldr	r3, [pc, #16]	@ (8018d6c <HAL_RTC_WaitForSynchro+0x48>)
 8018d5a:	68db      	ldr	r3, [r3, #12]
 8018d5c:	2220      	movs	r2, #32
 8018d5e:	4013      	ands	r3, r2
 8018d60:	d0ef      	beq.n	8018d42 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8018d62:	2300      	movs	r3, #0
}
 8018d64:	0018      	movs	r0, r3
 8018d66:	46bd      	mov	sp, r7
 8018d68:	b004      	add	sp, #16
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	40002800 	.word	0x40002800

08018d70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b084      	sub	sp, #16
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018d78:	4b12      	ldr	r3, [pc, #72]	@ (8018dc4 <RTC_EnterInitMode+0x54>)
 8018d7a:	68db      	ldr	r3, [r3, #12]
 8018d7c:	2240      	movs	r2, #64	@ 0x40
 8018d7e:	4013      	ands	r3, r2
 8018d80:	d11a      	bne.n	8018db8 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018d82:	4b10      	ldr	r3, [pc, #64]	@ (8018dc4 <RTC_EnterInitMode+0x54>)
 8018d84:	68da      	ldr	r2, [r3, #12]
 8018d86:	4b0f      	ldr	r3, [pc, #60]	@ (8018dc4 <RTC_EnterInitMode+0x54>)
 8018d88:	2180      	movs	r1, #128	@ 0x80
 8018d8a:	430a      	orrs	r2, r1
 8018d8c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8018d8e:	f7f8 ffd1 	bl	8011d34 <HAL_GetTick>
 8018d92:	0003      	movs	r3, r0
 8018d94:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018d96:	e00a      	b.n	8018dae <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8018d98:	f7f8 ffcc 	bl	8011d34 <HAL_GetTick>
 8018d9c:	0002      	movs	r2, r0
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	1ad2      	subs	r2, r2, r3
 8018da2:	23fa      	movs	r3, #250	@ 0xfa
 8018da4:	009b      	lsls	r3, r3, #2
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d901      	bls.n	8018dae <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8018daa:	2303      	movs	r3, #3
 8018dac:	e005      	b.n	8018dba <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018dae:	4b05      	ldr	r3, [pc, #20]	@ (8018dc4 <RTC_EnterInitMode+0x54>)
 8018db0:	68db      	ldr	r3, [r3, #12]
 8018db2:	2240      	movs	r2, #64	@ 0x40
 8018db4:	4013      	ands	r3, r2
 8018db6:	d0ef      	beq.n	8018d98 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8018db8:	2300      	movs	r3, #0
}
 8018dba:	0018      	movs	r0, r3
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	b004      	add	sp, #16
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	46c0      	nop			@ (mov r8, r8)
 8018dc4:	40002800 	.word	0x40002800

08018dc8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b084      	sub	sp, #16
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	0002      	movs	r2, r0
 8018dd0:	1dfb      	adds	r3, r7, #7
 8018dd2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8018dd8:	230b      	movs	r3, #11
 8018dda:	18fb      	adds	r3, r7, r3
 8018ddc:	1dfa      	adds	r2, r7, #7
 8018dde:	7812      	ldrb	r2, [r2, #0]
 8018de0:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8018de2:	e008      	b.n	8018df6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	3301      	adds	r3, #1
 8018de8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8018dea:	220b      	movs	r2, #11
 8018dec:	18bb      	adds	r3, r7, r2
 8018dee:	18ba      	adds	r2, r7, r2
 8018df0:	7812      	ldrb	r2, [r2, #0]
 8018df2:	3a0a      	subs	r2, #10
 8018df4:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8018df6:	210b      	movs	r1, #11
 8018df8:	187b      	adds	r3, r7, r1
 8018dfa:	781b      	ldrb	r3, [r3, #0]
 8018dfc:	2b09      	cmp	r3, #9
 8018dfe:	d8f1      	bhi.n	8018de4 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	011b      	lsls	r3, r3, #4
 8018e06:	b2da      	uxtb	r2, r3
 8018e08:	187b      	adds	r3, r7, r1
 8018e0a:	781b      	ldrb	r3, [r3, #0]
 8018e0c:	4313      	orrs	r3, r2
 8018e0e:	b2db      	uxtb	r3, r3
}
 8018e10:	0018      	movs	r0, r3
 8018e12:	46bd      	mov	sp, r7
 8018e14:	b004      	add	sp, #16
 8018e16:	bd80      	pop	{r7, pc}

08018e18 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b084      	sub	sp, #16
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	0002      	movs	r2, r0
 8018e20:	1dfb      	adds	r3, r7, #7
 8018e22:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8018e24:	1dfb      	adds	r3, r7, #7
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	091b      	lsrs	r3, r3, #4
 8018e2a:	b2db      	uxtb	r3, r3
 8018e2c:	001a      	movs	r2, r3
 8018e2e:	0013      	movs	r3, r2
 8018e30:	009b      	lsls	r3, r3, #2
 8018e32:	189b      	adds	r3, r3, r2
 8018e34:	005b      	lsls	r3, r3, #1
 8018e36:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	b2da      	uxtb	r2, r3
 8018e3c:	1dfb      	adds	r3, r7, #7
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	210f      	movs	r1, #15
 8018e42:	400b      	ands	r3, r1
 8018e44:	b2db      	uxtb	r3, r3
 8018e46:	18d3      	adds	r3, r2, r3
 8018e48:	b2db      	uxtb	r3, r3
}
 8018e4a:	0018      	movs	r0, r3
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	b004      	add	sp, #16
 8018e50:	bd80      	pop	{r7, pc}
	...

08018e54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b086      	sub	sp, #24
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	60f8      	str	r0, [r7, #12]
 8018e5c:	60b9      	str	r1, [r7, #8]
 8018e5e:	607a      	str	r2, [r7, #4]
 8018e60:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	222c      	movs	r2, #44	@ 0x2c
 8018e66:	5c9b      	ldrb	r3, [r3, r2]
 8018e68:	2b01      	cmp	r3, #1
 8018e6a:	d101      	bne.n	8018e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8018e6c:	2302      	movs	r3, #2
 8018e6e:	e088      	b.n	8018f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	222c      	movs	r2, #44	@ 0x2c
 8018e74:	2101      	movs	r1, #1
 8018e76:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	222d      	movs	r2, #45	@ 0x2d
 8018e7c:	2102      	movs	r1, #2
 8018e7e:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8018e80:	4b42      	ldr	r3, [pc, #264]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018e82:	699a      	ldr	r2, [r3, #24]
 8018e84:	2380      	movs	r3, #128	@ 0x80
 8018e86:	00db      	lsls	r3, r3, #3
 8018e88:	4013      	ands	r3, r2
 8018e8a:	d01c      	beq.n	8018ec6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8018e8c:	f7f8 ff52 	bl	8011d34 <HAL_GetTick>
 8018e90:	0003      	movs	r3, r0
 8018e92:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8018e94:	e012      	b.n	8018ebc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018e96:	f7f8 ff4d 	bl	8011d34 <HAL_GetTick>
 8018e9a:	0002      	movs	r2, r0
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	1ad2      	subs	r2, r2, r3
 8018ea0:	23fa      	movs	r3, #250	@ 0xfa
 8018ea2:	009b      	lsls	r3, r3, #2
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d909      	bls.n	8018ebc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	222d      	movs	r2, #45	@ 0x2d
 8018eac:	2103      	movs	r1, #3
 8018eae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	222c      	movs	r2, #44	@ 0x2c
 8018eb4:	2100      	movs	r1, #0
 8018eb6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018eb8:	2303      	movs	r3, #3
 8018eba:	e062      	b.n	8018f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8018ebc:	4b33      	ldr	r3, [pc, #204]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018ebe:	68db      	ldr	r3, [r3, #12]
 8018ec0:	2204      	movs	r2, #4
 8018ec2:	4013      	ands	r3, r2
 8018ec4:	d1e7      	bne.n	8018e96 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8018ec6:	4b31      	ldr	r3, [pc, #196]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018ec8:	699a      	ldr	r2, [r3, #24]
 8018eca:	4b30      	ldr	r3, [pc, #192]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018ecc:	4930      	ldr	r1, [pc, #192]	@ (8018f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8018ece:	400a      	ands	r2, r1
 8018ed0:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8018ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018ed4:	2204      	movs	r2, #4
 8018ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8018ed8:	f7f8 ff2c 	bl	8011d34 <HAL_GetTick>
 8018edc:	0003      	movs	r3, r0
 8018ede:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8018ee0:	e015      	b.n	8018f0e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018ee2:	f7f8 ff27 	bl	8011d34 <HAL_GetTick>
 8018ee6:	0002      	movs	r2, r0
 8018ee8:	697b      	ldr	r3, [r7, #20]
 8018eea:	1ad2      	subs	r2, r2, r3
 8018eec:	23fa      	movs	r3, #250	@ 0xfa
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d90c      	bls.n	8018f0e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ef4:	4b25      	ldr	r3, [pc, #148]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018ef6:	22ff      	movs	r2, #255	@ 0xff
 8018ef8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	222d      	movs	r2, #45	@ 0x2d
 8018efe:	2103      	movs	r1, #3
 8018f00:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	222c      	movs	r2, #44	@ 0x2c
 8018f06:	2100      	movs	r1, #0
 8018f08:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018f0a:	2303      	movs	r3, #3
 8018f0c:	e039      	b.n	8018f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8018f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f10:	68db      	ldr	r3, [r3, #12]
 8018f12:	2204      	movs	r2, #4
 8018f14:	4013      	ands	r3, r2
 8018f16:	d0e4      	beq.n	8018ee2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8018f18:	683b      	ldr	r3, [r7, #0]
 8018f1a:	0419      	lsls	r1, r3, #16
 8018f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f1e:	68ba      	ldr	r2, [r7, #8]
 8018f20:	430a      	orrs	r2, r1
 8018f22:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8018f24:	4b19      	ldr	r3, [pc, #100]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	2207      	movs	r2, #7
 8018f2a:	4393      	bics	r3, r2
 8018f2c:	0019      	movs	r1, r3
 8018f2e:	4b17      	ldr	r3, [pc, #92]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	430a      	orrs	r2, r1
 8018f34:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8018f36:	683b      	ldr	r3, [r7, #0]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d009      	beq.n	8018f50 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8018f3c:	4a15      	ldr	r2, [pc, #84]	@ (8018f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8018f3e:	2384      	movs	r3, #132	@ 0x84
 8018f40:	58d3      	ldr	r3, [r2, r3]
 8018f42:	4914      	ldr	r1, [pc, #80]	@ (8018f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8018f44:	2280      	movs	r2, #128	@ 0x80
 8018f46:	0552      	lsls	r2, r2, #21
 8018f48:	4313      	orrs	r3, r2
 8018f4a:	2284      	movs	r2, #132	@ 0x84
 8018f4c:	508b      	str	r3, [r1, r2]
 8018f4e:	e008      	b.n	8018f62 <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8018f50:	4a10      	ldr	r2, [pc, #64]	@ (8018f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8018f52:	2380      	movs	r3, #128	@ 0x80
 8018f54:	58d3      	ldr	r3, [r2, r3]
 8018f56:	490f      	ldr	r1, [pc, #60]	@ (8018f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8018f58:	2280      	movs	r2, #128	@ 0x80
 8018f5a:	0552      	lsls	r2, r2, #21
 8018f5c:	4313      	orrs	r3, r2
 8018f5e:	2280      	movs	r2, #128	@ 0x80
 8018f60:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8018f62:	4b0a      	ldr	r3, [pc, #40]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f64:	699a      	ldr	r2, [r3, #24]
 8018f66:	4b09      	ldr	r3, [pc, #36]	@ (8018f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8018f68:	2188      	movs	r1, #136	@ 0x88
 8018f6a:	01c9      	lsls	r1, r1, #7
 8018f6c:	430a      	orrs	r2, r1
 8018f6e:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	222d      	movs	r2, #45	@ 0x2d
 8018f74:	2101      	movs	r1, #1
 8018f76:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	222c      	movs	r2, #44	@ 0x2c
 8018f7c:	2100      	movs	r1, #0
 8018f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018f80:	2300      	movs	r3, #0
}
 8018f82:	0018      	movs	r0, r3
 8018f84:	46bd      	mov	sp, r7
 8018f86:	b006      	add	sp, #24
 8018f88:	bd80      	pop	{r7, pc}
 8018f8a:	46c0      	nop			@ (mov r8, r8)
 8018f8c:	40002800 	.word	0x40002800
 8018f90:	fffffbff 	.word	0xfffffbff
 8018f94:	40021800 	.word	0x40021800

08018f98 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	222c      	movs	r2, #44	@ 0x2c
 8018fa4:	5c9b      	ldrb	r3, [r3, r2]
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	d101      	bne.n	8018fae <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8018faa:	2302      	movs	r3, #2
 8018fac:	e016      	b.n	8018fdc <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	222c      	movs	r2, #44	@ 0x2c
 8018fb2:	2101      	movs	r1, #1
 8018fb4:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	222d      	movs	r2, #45	@ 0x2d
 8018fba:	2102      	movs	r1, #2
 8018fbc:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8018fbe:	4b09      	ldr	r3, [pc, #36]	@ (8018fe4 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8018fc0:	699a      	ldr	r2, [r3, #24]
 8018fc2:	4b08      	ldr	r3, [pc, #32]	@ (8018fe4 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8018fc4:	4908      	ldr	r1, [pc, #32]	@ (8018fe8 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8018fc6:	400a      	ands	r2, r1
 8018fc8:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	222d      	movs	r2, #45	@ 0x2d
 8018fce:	2101      	movs	r1, #1
 8018fd0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	222c      	movs	r2, #44	@ 0x2c
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018fda:	2300      	movs	r3, #0
}
 8018fdc:	0018      	movs	r0, r3
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	b002      	add	sp, #8
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	40002800 	.word	0x40002800
 8018fe8:	ffffbbff 	.word	0xffffbbff

08018fec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b082      	sub	sp, #8
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8018ff4:	4b09      	ldr	r3, [pc, #36]	@ (801901c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8018ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ff8:	2204      	movs	r2, #4
 8018ffa:	4013      	ands	r3, r2
 8018ffc:	d006      	beq.n	801900c <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8018ffe:	4b07      	ldr	r3, [pc, #28]	@ (801901c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8019000:	2204      	movs	r2, #4
 8019002:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	0018      	movs	r0, r3
 8019008:	f000 f80a 	bl	8019020 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	222d      	movs	r2, #45	@ 0x2d
 8019010:	2101      	movs	r1, #1
 8019012:	5499      	strb	r1, [r3, r2]
}
 8019014:	46c0      	nop			@ (mov r8, r8)
 8019016:	46bd      	mov	sp, r7
 8019018:	b002      	add	sp, #8
 801901a:	bd80      	pop	{r7, pc}
 801901c:	40002800 	.word	0x40002800

08019020 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b082      	sub	sp, #8
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8019028:	46c0      	nop			@ (mov r8, r8)
 801902a:	46bd      	mov	sp, r7
 801902c:	b002      	add	sp, #8
 801902e:	bd80      	pop	{r7, pc}

08019030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b082      	sub	sp, #8
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d101      	bne.n	8019042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801903e:	2301      	movs	r3, #1
 8019040:	e04a      	b.n	80190d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	223d      	movs	r2, #61	@ 0x3d
 8019046:	5c9b      	ldrb	r3, [r3, r2]
 8019048:	b2db      	uxtb	r3, r3
 801904a:	2b00      	cmp	r3, #0
 801904c:	d107      	bne.n	801905e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	223c      	movs	r2, #60	@ 0x3c
 8019052:	2100      	movs	r1, #0
 8019054:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	0018      	movs	r0, r3
 801905a:	f7f3 f879 	bl	800c150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	223d      	movs	r2, #61	@ 0x3d
 8019062:	2102      	movs	r1, #2
 8019064:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681a      	ldr	r2, [r3, #0]
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	3304      	adds	r3, #4
 801906e:	0019      	movs	r1, r3
 8019070:	0010      	movs	r0, r2
 8019072:	f000 fbd9 	bl	8019828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	2248      	movs	r2, #72	@ 0x48
 801907a:	2101      	movs	r1, #1
 801907c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	223e      	movs	r2, #62	@ 0x3e
 8019082:	2101      	movs	r1, #1
 8019084:	5499      	strb	r1, [r3, r2]
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	223f      	movs	r2, #63	@ 0x3f
 801908a:	2101      	movs	r1, #1
 801908c:	5499      	strb	r1, [r3, r2]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2240      	movs	r2, #64	@ 0x40
 8019092:	2101      	movs	r1, #1
 8019094:	5499      	strb	r1, [r3, r2]
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2241      	movs	r2, #65	@ 0x41
 801909a:	2101      	movs	r1, #1
 801909c:	5499      	strb	r1, [r3, r2]
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	2242      	movs	r2, #66	@ 0x42
 80190a2:	2101      	movs	r1, #1
 80190a4:	5499      	strb	r1, [r3, r2]
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	2243      	movs	r2, #67	@ 0x43
 80190aa:	2101      	movs	r1, #1
 80190ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	2244      	movs	r2, #68	@ 0x44
 80190b2:	2101      	movs	r1, #1
 80190b4:	5499      	strb	r1, [r3, r2]
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	2245      	movs	r2, #69	@ 0x45
 80190ba:	2101      	movs	r1, #1
 80190bc:	5499      	strb	r1, [r3, r2]
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	2246      	movs	r2, #70	@ 0x46
 80190c2:	2101      	movs	r1, #1
 80190c4:	5499      	strb	r1, [r3, r2]
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2247      	movs	r2, #71	@ 0x47
 80190ca:	2101      	movs	r1, #1
 80190cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	223d      	movs	r2, #61	@ 0x3d
 80190d2:	2101      	movs	r1, #1
 80190d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80190d6:	2300      	movs	r3, #0
}
 80190d8:	0018      	movs	r0, r3
 80190da:	46bd      	mov	sp, r7
 80190dc:	b002      	add	sp, #8
 80190de:	bd80      	pop	{r7, pc}

080190e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	b082      	sub	sp, #8
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d101      	bne.n	80190f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80190ee:	2301      	movs	r3, #1
 80190f0:	e04a      	b.n	8019188 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	223d      	movs	r2, #61	@ 0x3d
 80190f6:	5c9b      	ldrb	r3, [r3, r2]
 80190f8:	b2db      	uxtb	r3, r3
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d107      	bne.n	801910e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	223c      	movs	r2, #60	@ 0x3c
 8019102:	2100      	movs	r1, #0
 8019104:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	0018      	movs	r0, r3
 801910a:	f000 f841 	bl	8019190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	223d      	movs	r2, #61	@ 0x3d
 8019112:	2102      	movs	r1, #2
 8019114:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681a      	ldr	r2, [r3, #0]
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	3304      	adds	r3, #4
 801911e:	0019      	movs	r1, r3
 8019120:	0010      	movs	r0, r2
 8019122:	f000 fb81 	bl	8019828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	2248      	movs	r2, #72	@ 0x48
 801912a:	2101      	movs	r1, #1
 801912c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	223e      	movs	r2, #62	@ 0x3e
 8019132:	2101      	movs	r1, #1
 8019134:	5499      	strb	r1, [r3, r2]
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	223f      	movs	r2, #63	@ 0x3f
 801913a:	2101      	movs	r1, #1
 801913c:	5499      	strb	r1, [r3, r2]
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	2240      	movs	r2, #64	@ 0x40
 8019142:	2101      	movs	r1, #1
 8019144:	5499      	strb	r1, [r3, r2]
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2241      	movs	r2, #65	@ 0x41
 801914a:	2101      	movs	r1, #1
 801914c:	5499      	strb	r1, [r3, r2]
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	2242      	movs	r2, #66	@ 0x42
 8019152:	2101      	movs	r1, #1
 8019154:	5499      	strb	r1, [r3, r2]
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2243      	movs	r2, #67	@ 0x43
 801915a:	2101      	movs	r1, #1
 801915c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2244      	movs	r2, #68	@ 0x44
 8019162:	2101      	movs	r1, #1
 8019164:	5499      	strb	r1, [r3, r2]
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2245      	movs	r2, #69	@ 0x45
 801916a:	2101      	movs	r1, #1
 801916c:	5499      	strb	r1, [r3, r2]
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2246      	movs	r2, #70	@ 0x46
 8019172:	2101      	movs	r1, #1
 8019174:	5499      	strb	r1, [r3, r2]
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2247      	movs	r2, #71	@ 0x47
 801917a:	2101      	movs	r1, #1
 801917c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	223d      	movs	r2, #61	@ 0x3d
 8019182:	2101      	movs	r1, #1
 8019184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019186:	2300      	movs	r3, #0
}
 8019188:	0018      	movs	r0, r3
 801918a:	46bd      	mov	sp, r7
 801918c:	b002      	add	sp, #8
 801918e:	bd80      	pop	{r7, pc}

08019190 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b082      	sub	sp, #8
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8019198:	46c0      	nop			@ (mov r8, r8)
 801919a:	46bd      	mov	sp, r7
 801919c:	b002      	add	sp, #8
 801919e:	bd80      	pop	{r7, pc}

080191a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b084      	sub	sp, #16
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80191aa:	683b      	ldr	r3, [r7, #0]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d108      	bne.n	80191c2 <HAL_TIM_PWM_Start+0x22>
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	223e      	movs	r2, #62	@ 0x3e
 80191b4:	5c9b      	ldrb	r3, [r3, r2]
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	3b01      	subs	r3, #1
 80191ba:	1e5a      	subs	r2, r3, #1
 80191bc:	4193      	sbcs	r3, r2
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	e037      	b.n	8019232 <HAL_TIM_PWM_Start+0x92>
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	2b04      	cmp	r3, #4
 80191c6:	d108      	bne.n	80191da <HAL_TIM_PWM_Start+0x3a>
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	223f      	movs	r2, #63	@ 0x3f
 80191cc:	5c9b      	ldrb	r3, [r3, r2]
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	3b01      	subs	r3, #1
 80191d2:	1e5a      	subs	r2, r3, #1
 80191d4:	4193      	sbcs	r3, r2
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	e02b      	b.n	8019232 <HAL_TIM_PWM_Start+0x92>
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	2b08      	cmp	r3, #8
 80191de:	d108      	bne.n	80191f2 <HAL_TIM_PWM_Start+0x52>
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2240      	movs	r2, #64	@ 0x40
 80191e4:	5c9b      	ldrb	r3, [r3, r2]
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	3b01      	subs	r3, #1
 80191ea:	1e5a      	subs	r2, r3, #1
 80191ec:	4193      	sbcs	r3, r2
 80191ee:	b2db      	uxtb	r3, r3
 80191f0:	e01f      	b.n	8019232 <HAL_TIM_PWM_Start+0x92>
 80191f2:	683b      	ldr	r3, [r7, #0]
 80191f4:	2b0c      	cmp	r3, #12
 80191f6:	d108      	bne.n	801920a <HAL_TIM_PWM_Start+0x6a>
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	2241      	movs	r2, #65	@ 0x41
 80191fc:	5c9b      	ldrb	r3, [r3, r2]
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	3b01      	subs	r3, #1
 8019202:	1e5a      	subs	r2, r3, #1
 8019204:	4193      	sbcs	r3, r2
 8019206:	b2db      	uxtb	r3, r3
 8019208:	e013      	b.n	8019232 <HAL_TIM_PWM_Start+0x92>
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	2b10      	cmp	r3, #16
 801920e:	d108      	bne.n	8019222 <HAL_TIM_PWM_Start+0x82>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	2242      	movs	r2, #66	@ 0x42
 8019214:	5c9b      	ldrb	r3, [r3, r2]
 8019216:	b2db      	uxtb	r3, r3
 8019218:	3b01      	subs	r3, #1
 801921a:	1e5a      	subs	r2, r3, #1
 801921c:	4193      	sbcs	r3, r2
 801921e:	b2db      	uxtb	r3, r3
 8019220:	e007      	b.n	8019232 <HAL_TIM_PWM_Start+0x92>
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	2243      	movs	r2, #67	@ 0x43
 8019226:	5c9b      	ldrb	r3, [r3, r2]
 8019228:	b2db      	uxtb	r3, r3
 801922a:	3b01      	subs	r3, #1
 801922c:	1e5a      	subs	r2, r3, #1
 801922e:	4193      	sbcs	r3, r2
 8019230:	b2db      	uxtb	r3, r3
 8019232:	2b00      	cmp	r3, #0
 8019234:	d001      	beq.n	801923a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8019236:	2301      	movs	r3, #1
 8019238:	e086      	b.n	8019348 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d104      	bne.n	801924a <HAL_TIM_PWM_Start+0xaa>
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	223e      	movs	r2, #62	@ 0x3e
 8019244:	2102      	movs	r1, #2
 8019246:	5499      	strb	r1, [r3, r2]
 8019248:	e023      	b.n	8019292 <HAL_TIM_PWM_Start+0xf2>
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	2b04      	cmp	r3, #4
 801924e:	d104      	bne.n	801925a <HAL_TIM_PWM_Start+0xba>
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	223f      	movs	r2, #63	@ 0x3f
 8019254:	2102      	movs	r1, #2
 8019256:	5499      	strb	r1, [r3, r2]
 8019258:	e01b      	b.n	8019292 <HAL_TIM_PWM_Start+0xf2>
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	2b08      	cmp	r3, #8
 801925e:	d104      	bne.n	801926a <HAL_TIM_PWM_Start+0xca>
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	2240      	movs	r2, #64	@ 0x40
 8019264:	2102      	movs	r1, #2
 8019266:	5499      	strb	r1, [r3, r2]
 8019268:	e013      	b.n	8019292 <HAL_TIM_PWM_Start+0xf2>
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	2b0c      	cmp	r3, #12
 801926e:	d104      	bne.n	801927a <HAL_TIM_PWM_Start+0xda>
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	2241      	movs	r2, #65	@ 0x41
 8019274:	2102      	movs	r1, #2
 8019276:	5499      	strb	r1, [r3, r2]
 8019278:	e00b      	b.n	8019292 <HAL_TIM_PWM_Start+0xf2>
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	2b10      	cmp	r3, #16
 801927e:	d104      	bne.n	801928a <HAL_TIM_PWM_Start+0xea>
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2242      	movs	r2, #66	@ 0x42
 8019284:	2102      	movs	r1, #2
 8019286:	5499      	strb	r1, [r3, r2]
 8019288:	e003      	b.n	8019292 <HAL_TIM_PWM_Start+0xf2>
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	2243      	movs	r2, #67	@ 0x43
 801928e:	2102      	movs	r1, #2
 8019290:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	6839      	ldr	r1, [r7, #0]
 8019298:	2201      	movs	r2, #1
 801929a:	0018      	movs	r0, r3
 801929c:	f000 fe7a 	bl	8019f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	4a2a      	ldr	r2, [pc, #168]	@ (8019350 <HAL_TIM_PWM_Start+0x1b0>)
 80192a6:	4293      	cmp	r3, r2
 80192a8:	d009      	beq.n	80192be <HAL_TIM_PWM_Start+0x11e>
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	4a29      	ldr	r2, [pc, #164]	@ (8019354 <HAL_TIM_PWM_Start+0x1b4>)
 80192b0:	4293      	cmp	r3, r2
 80192b2:	d004      	beq.n	80192be <HAL_TIM_PWM_Start+0x11e>
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	4a27      	ldr	r2, [pc, #156]	@ (8019358 <HAL_TIM_PWM_Start+0x1b8>)
 80192ba:	4293      	cmp	r3, r2
 80192bc:	d101      	bne.n	80192c2 <HAL_TIM_PWM_Start+0x122>
 80192be:	2301      	movs	r3, #1
 80192c0:	e000      	b.n	80192c4 <HAL_TIM_PWM_Start+0x124>
 80192c2:	2300      	movs	r3, #0
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d008      	beq.n	80192da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	2180      	movs	r1, #128	@ 0x80
 80192d4:	0209      	lsls	r1, r1, #8
 80192d6:	430a      	orrs	r2, r1
 80192d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	4a1c      	ldr	r2, [pc, #112]	@ (8019350 <HAL_TIM_PWM_Start+0x1b0>)
 80192e0:	4293      	cmp	r3, r2
 80192e2:	d00f      	beq.n	8019304 <HAL_TIM_PWM_Start+0x164>
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	2380      	movs	r3, #128	@ 0x80
 80192ea:	05db      	lsls	r3, r3, #23
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d009      	beq.n	8019304 <HAL_TIM_PWM_Start+0x164>
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	4a19      	ldr	r2, [pc, #100]	@ (801935c <HAL_TIM_PWM_Start+0x1bc>)
 80192f6:	4293      	cmp	r3, r2
 80192f8:	d004      	beq.n	8019304 <HAL_TIM_PWM_Start+0x164>
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	4a15      	ldr	r2, [pc, #84]	@ (8019354 <HAL_TIM_PWM_Start+0x1b4>)
 8019300:	4293      	cmp	r3, r2
 8019302:	d116      	bne.n	8019332 <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	689b      	ldr	r3, [r3, #8]
 801930a:	4a15      	ldr	r2, [pc, #84]	@ (8019360 <HAL_TIM_PWM_Start+0x1c0>)
 801930c:	4013      	ands	r3, r2
 801930e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	2b06      	cmp	r3, #6
 8019314:	d016      	beq.n	8019344 <HAL_TIM_PWM_Start+0x1a4>
 8019316:	68fa      	ldr	r2, [r7, #12]
 8019318:	2380      	movs	r3, #128	@ 0x80
 801931a:	025b      	lsls	r3, r3, #9
 801931c:	429a      	cmp	r2, r3
 801931e:	d011      	beq.n	8019344 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	681a      	ldr	r2, [r3, #0]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	2101      	movs	r1, #1
 801932c:	430a      	orrs	r2, r1
 801932e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019330:	e008      	b.n	8019344 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	681a      	ldr	r2, [r3, #0]
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	2101      	movs	r1, #1
 801933e:	430a      	orrs	r2, r1
 8019340:	601a      	str	r2, [r3, #0]
 8019342:	e000      	b.n	8019346 <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019344:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8019346:	2300      	movs	r3, #0
}
 8019348:	0018      	movs	r0, r3
 801934a:	46bd      	mov	sp, r7
 801934c:	b004      	add	sp, #16
 801934e:	bd80      	pop	{r7, pc}
 8019350:	40012c00 	.word	0x40012c00
 8019354:	40014000 	.word	0x40014000
 8019358:	40014400 	.word	0x40014400
 801935c:	40000400 	.word	0x40000400
 8019360:	00010007 	.word	0x00010007

08019364 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	6839      	ldr	r1, [r7, #0]
 8019374:	2200      	movs	r2, #0
 8019376:	0018      	movs	r0, r3
 8019378:	f000 fe0c 	bl	8019f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	4a35      	ldr	r2, [pc, #212]	@ (8019458 <HAL_TIM_PWM_Stop+0xf4>)
 8019382:	4293      	cmp	r3, r2
 8019384:	d009      	beq.n	801939a <HAL_TIM_PWM_Stop+0x36>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	4a34      	ldr	r2, [pc, #208]	@ (801945c <HAL_TIM_PWM_Stop+0xf8>)
 801938c:	4293      	cmp	r3, r2
 801938e:	d004      	beq.n	801939a <HAL_TIM_PWM_Stop+0x36>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	4a32      	ldr	r2, [pc, #200]	@ (8019460 <HAL_TIM_PWM_Stop+0xfc>)
 8019396:	4293      	cmp	r3, r2
 8019398:	d101      	bne.n	801939e <HAL_TIM_PWM_Stop+0x3a>
 801939a:	2301      	movs	r3, #1
 801939c:	e000      	b.n	80193a0 <HAL_TIM_PWM_Stop+0x3c>
 801939e:	2300      	movs	r3, #0
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d013      	beq.n	80193cc <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	6a1b      	ldr	r3, [r3, #32]
 80193aa:	4a2e      	ldr	r2, [pc, #184]	@ (8019464 <HAL_TIM_PWM_Stop+0x100>)
 80193ac:	4013      	ands	r3, r2
 80193ae:	d10d      	bne.n	80193cc <HAL_TIM_PWM_Stop+0x68>
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	6a1b      	ldr	r3, [r3, #32]
 80193b6:	4a2c      	ldr	r2, [pc, #176]	@ (8019468 <HAL_TIM_PWM_Stop+0x104>)
 80193b8:	4013      	ands	r3, r2
 80193ba:	d107      	bne.n	80193cc <HAL_TIM_PWM_Stop+0x68>
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	4929      	ldr	r1, [pc, #164]	@ (801946c <HAL_TIM_PWM_Stop+0x108>)
 80193c8:	400a      	ands	r2, r1
 80193ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	6a1b      	ldr	r3, [r3, #32]
 80193d2:	4a24      	ldr	r2, [pc, #144]	@ (8019464 <HAL_TIM_PWM_Stop+0x100>)
 80193d4:	4013      	ands	r3, r2
 80193d6:	d10d      	bne.n	80193f4 <HAL_TIM_PWM_Stop+0x90>
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	6a1b      	ldr	r3, [r3, #32]
 80193de:	4a22      	ldr	r2, [pc, #136]	@ (8019468 <HAL_TIM_PWM_Stop+0x104>)
 80193e0:	4013      	ands	r3, r2
 80193e2:	d107      	bne.n	80193f4 <HAL_TIM_PWM_Stop+0x90>
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	681a      	ldr	r2, [r3, #0]
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	2101      	movs	r1, #1
 80193f0:	438a      	bics	r2, r1
 80193f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d104      	bne.n	8019404 <HAL_TIM_PWM_Stop+0xa0>
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	223e      	movs	r2, #62	@ 0x3e
 80193fe:	2101      	movs	r1, #1
 8019400:	5499      	strb	r1, [r3, r2]
 8019402:	e023      	b.n	801944c <HAL_TIM_PWM_Stop+0xe8>
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	2b04      	cmp	r3, #4
 8019408:	d104      	bne.n	8019414 <HAL_TIM_PWM_Stop+0xb0>
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	223f      	movs	r2, #63	@ 0x3f
 801940e:	2101      	movs	r1, #1
 8019410:	5499      	strb	r1, [r3, r2]
 8019412:	e01b      	b.n	801944c <HAL_TIM_PWM_Stop+0xe8>
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	2b08      	cmp	r3, #8
 8019418:	d104      	bne.n	8019424 <HAL_TIM_PWM_Stop+0xc0>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2240      	movs	r2, #64	@ 0x40
 801941e:	2101      	movs	r1, #1
 8019420:	5499      	strb	r1, [r3, r2]
 8019422:	e013      	b.n	801944c <HAL_TIM_PWM_Stop+0xe8>
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	2b0c      	cmp	r3, #12
 8019428:	d104      	bne.n	8019434 <HAL_TIM_PWM_Stop+0xd0>
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2241      	movs	r2, #65	@ 0x41
 801942e:	2101      	movs	r1, #1
 8019430:	5499      	strb	r1, [r3, r2]
 8019432:	e00b      	b.n	801944c <HAL_TIM_PWM_Stop+0xe8>
 8019434:	683b      	ldr	r3, [r7, #0]
 8019436:	2b10      	cmp	r3, #16
 8019438:	d104      	bne.n	8019444 <HAL_TIM_PWM_Stop+0xe0>
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	2242      	movs	r2, #66	@ 0x42
 801943e:	2101      	movs	r1, #1
 8019440:	5499      	strb	r1, [r3, r2]
 8019442:	e003      	b.n	801944c <HAL_TIM_PWM_Stop+0xe8>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2243      	movs	r2, #67	@ 0x43
 8019448:	2101      	movs	r1, #1
 801944a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801944c:	2300      	movs	r3, #0
}
 801944e:	0018      	movs	r0, r3
 8019450:	46bd      	mov	sp, r7
 8019452:	b002      	add	sp, #8
 8019454:	bd80      	pop	{r7, pc}
 8019456:	46c0      	nop			@ (mov r8, r8)
 8019458:	40012c00 	.word	0x40012c00
 801945c:	40014000 	.word	0x40014000
 8019460:	40014400 	.word	0x40014400
 8019464:	00001111 	.word	0x00001111
 8019468:	00000444 	.word	0x00000444
 801946c:	ffff7fff 	.word	0xffff7fff

08019470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b086      	sub	sp, #24
 8019474:	af00      	add	r7, sp, #0
 8019476:	60f8      	str	r0, [r7, #12]
 8019478:	60b9      	str	r1, [r7, #8]
 801947a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801947c:	2317      	movs	r3, #23
 801947e:	18fb      	adds	r3, r7, r3
 8019480:	2200      	movs	r2, #0
 8019482:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	223c      	movs	r2, #60	@ 0x3c
 8019488:	5c9b      	ldrb	r3, [r3, r2]
 801948a:	2b01      	cmp	r3, #1
 801948c:	d101      	bne.n	8019492 <HAL_TIM_PWM_ConfigChannel+0x22>
 801948e:	2302      	movs	r3, #2
 8019490:	e0e5      	b.n	801965e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	223c      	movs	r2, #60	@ 0x3c
 8019496:	2101      	movs	r1, #1
 8019498:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	2b14      	cmp	r3, #20
 801949e:	d900      	bls.n	80194a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80194a0:	e0d1      	b.n	8019646 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	009a      	lsls	r2, r3, #2
 80194a6:	4b70      	ldr	r3, [pc, #448]	@ (8019668 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80194a8:	18d3      	adds	r3, r2, r3
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	68ba      	ldr	r2, [r7, #8]
 80194b4:	0011      	movs	r1, r2
 80194b6:	0018      	movs	r0, r3
 80194b8:	f000 fa34 	bl	8019924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	699a      	ldr	r2, [r3, #24]
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	2108      	movs	r1, #8
 80194c8:	430a      	orrs	r2, r1
 80194ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	699a      	ldr	r2, [r3, #24]
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	2104      	movs	r1, #4
 80194d8:	438a      	bics	r2, r1
 80194da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	6999      	ldr	r1, [r3, #24]
 80194e2:	68bb      	ldr	r3, [r7, #8]
 80194e4:	691a      	ldr	r2, [r3, #16]
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	430a      	orrs	r2, r1
 80194ec:	619a      	str	r2, [r3, #24]
      break;
 80194ee:	e0af      	b.n	8019650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	68ba      	ldr	r2, [r7, #8]
 80194f6:	0011      	movs	r1, r2
 80194f8:	0018      	movs	r0, r3
 80194fa:	f000 fa93 	bl	8019a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	699a      	ldr	r2, [r3, #24]
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	2180      	movs	r1, #128	@ 0x80
 801950a:	0109      	lsls	r1, r1, #4
 801950c:	430a      	orrs	r2, r1
 801950e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	699a      	ldr	r2, [r3, #24]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	4954      	ldr	r1, [pc, #336]	@ (801966c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 801951c:	400a      	ands	r2, r1
 801951e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	6999      	ldr	r1, [r3, #24]
 8019526:	68bb      	ldr	r3, [r7, #8]
 8019528:	691b      	ldr	r3, [r3, #16]
 801952a:	021a      	lsls	r2, r3, #8
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	430a      	orrs	r2, r1
 8019532:	619a      	str	r2, [r3, #24]
      break;
 8019534:	e08c      	b.n	8019650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	68ba      	ldr	r2, [r7, #8]
 801953c:	0011      	movs	r1, r2
 801953e:	0018      	movs	r0, r3
 8019540:	f000 faee 	bl	8019b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	69da      	ldr	r2, [r3, #28]
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	2108      	movs	r1, #8
 8019550:	430a      	orrs	r2, r1
 8019552:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	69da      	ldr	r2, [r3, #28]
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	2104      	movs	r1, #4
 8019560:	438a      	bics	r2, r1
 8019562:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	69d9      	ldr	r1, [r3, #28]
 801956a:	68bb      	ldr	r3, [r7, #8]
 801956c:	691a      	ldr	r2, [r3, #16]
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	430a      	orrs	r2, r1
 8019574:	61da      	str	r2, [r3, #28]
      break;
 8019576:	e06b      	b.n	8019650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	68ba      	ldr	r2, [r7, #8]
 801957e:	0011      	movs	r1, r2
 8019580:	0018      	movs	r0, r3
 8019582:	f000 fb4f 	bl	8019c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	69da      	ldr	r2, [r3, #28]
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	2180      	movs	r1, #128	@ 0x80
 8019592:	0109      	lsls	r1, r1, #4
 8019594:	430a      	orrs	r2, r1
 8019596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	69da      	ldr	r2, [r3, #28]
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	4932      	ldr	r1, [pc, #200]	@ (801966c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80195a4:	400a      	ands	r2, r1
 80195a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	69d9      	ldr	r1, [r3, #28]
 80195ae:	68bb      	ldr	r3, [r7, #8]
 80195b0:	691b      	ldr	r3, [r3, #16]
 80195b2:	021a      	lsls	r2, r3, #8
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	430a      	orrs	r2, r1
 80195ba:	61da      	str	r2, [r3, #28]
      break;
 80195bc:	e048      	b.n	8019650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	68ba      	ldr	r2, [r7, #8]
 80195c4:	0011      	movs	r1, r2
 80195c6:	0018      	movs	r0, r3
 80195c8:	f000 fb90 	bl	8019cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	2108      	movs	r1, #8
 80195d8:	430a      	orrs	r2, r1
 80195da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	2104      	movs	r1, #4
 80195e8:	438a      	bics	r2, r1
 80195ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80195f2:	68bb      	ldr	r3, [r7, #8]
 80195f4:	691a      	ldr	r2, [r3, #16]
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	430a      	orrs	r2, r1
 80195fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80195fe:	e027      	b.n	8019650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	68ba      	ldr	r2, [r7, #8]
 8019606:	0011      	movs	r1, r2
 8019608:	0018      	movs	r0, r3
 801960a:	f000 fbc9 	bl	8019da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2180      	movs	r1, #128	@ 0x80
 801961a:	0109      	lsls	r1, r1, #4
 801961c:	430a      	orrs	r2, r1
 801961e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	4910      	ldr	r1, [pc, #64]	@ (801966c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 801962c:	400a      	ands	r2, r1
 801962e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8019636:	68bb      	ldr	r3, [r7, #8]
 8019638:	691b      	ldr	r3, [r3, #16]
 801963a:	021a      	lsls	r2, r3, #8
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	430a      	orrs	r2, r1
 8019642:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8019644:	e004      	b.n	8019650 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8019646:	2317      	movs	r3, #23
 8019648:	18fb      	adds	r3, r7, r3
 801964a:	2201      	movs	r2, #1
 801964c:	701a      	strb	r2, [r3, #0]
      break;
 801964e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	223c      	movs	r2, #60	@ 0x3c
 8019654:	2100      	movs	r1, #0
 8019656:	5499      	strb	r1, [r3, r2]

  return status;
 8019658:	2317      	movs	r3, #23
 801965a:	18fb      	adds	r3, r7, r3
 801965c:	781b      	ldrb	r3, [r3, #0]
}
 801965e:	0018      	movs	r0, r3
 8019660:	46bd      	mov	sp, r7
 8019662:	b006      	add	sp, #24
 8019664:	bd80      	pop	{r7, pc}
 8019666:	46c0      	nop			@ (mov r8, r8)
 8019668:	0801c398 	.word	0x0801c398
 801966c:	fffffbff 	.word	0xfffffbff

08019670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b084      	sub	sp, #16
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
 8019678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801967a:	230f      	movs	r3, #15
 801967c:	18fb      	adds	r3, r7, r3
 801967e:	2200      	movs	r2, #0
 8019680:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	223c      	movs	r2, #60	@ 0x3c
 8019686:	5c9b      	ldrb	r3, [r3, r2]
 8019688:	2b01      	cmp	r3, #1
 801968a:	d101      	bne.n	8019690 <HAL_TIM_ConfigClockSource+0x20>
 801968c:	2302      	movs	r3, #2
 801968e:	e0c0      	b.n	8019812 <HAL_TIM_ConfigClockSource+0x1a2>
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	223c      	movs	r2, #60	@ 0x3c
 8019694:	2101      	movs	r1, #1
 8019696:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	223d      	movs	r2, #61	@ 0x3d
 801969c:	2102      	movs	r1, #2
 801969e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	689b      	ldr	r3, [r3, #8]
 80196a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80196a8:	68bb      	ldr	r3, [r7, #8]
 80196aa:	4a5c      	ldr	r2, [pc, #368]	@ (801981c <HAL_TIM_ConfigClockSource+0x1ac>)
 80196ac:	4013      	ands	r3, r2
 80196ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	4a5b      	ldr	r2, [pc, #364]	@ (8019820 <HAL_TIM_ConfigClockSource+0x1b0>)
 80196b4:	4013      	ands	r3, r2
 80196b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	68ba      	ldr	r2, [r7, #8]
 80196be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	4a57      	ldr	r2, [pc, #348]	@ (8019824 <HAL_TIM_ConfigClockSource+0x1b4>)
 80196c6:	4293      	cmp	r3, r2
 80196c8:	d100      	bne.n	80196cc <HAL_TIM_ConfigClockSource+0x5c>
 80196ca:	e088      	b.n	80197de <HAL_TIM_ConfigClockSource+0x16e>
 80196cc:	4a55      	ldr	r2, [pc, #340]	@ (8019824 <HAL_TIM_ConfigClockSource+0x1b4>)
 80196ce:	4293      	cmp	r3, r2
 80196d0:	d900      	bls.n	80196d4 <HAL_TIM_ConfigClockSource+0x64>
 80196d2:	e08d      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 80196d4:	2280      	movs	r2, #128	@ 0x80
 80196d6:	0192      	lsls	r2, r2, #6
 80196d8:	4293      	cmp	r3, r2
 80196da:	d03c      	beq.n	8019756 <HAL_TIM_ConfigClockSource+0xe6>
 80196dc:	2280      	movs	r2, #128	@ 0x80
 80196de:	0192      	lsls	r2, r2, #6
 80196e0:	4293      	cmp	r3, r2
 80196e2:	d900      	bls.n	80196e6 <HAL_TIM_ConfigClockSource+0x76>
 80196e4:	e084      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 80196e6:	2280      	movs	r2, #128	@ 0x80
 80196e8:	0152      	lsls	r2, r2, #5
 80196ea:	4293      	cmp	r3, r2
 80196ec:	d100      	bne.n	80196f0 <HAL_TIM_ConfigClockSource+0x80>
 80196ee:	e084      	b.n	80197fa <HAL_TIM_ConfigClockSource+0x18a>
 80196f0:	2280      	movs	r2, #128	@ 0x80
 80196f2:	0152      	lsls	r2, r2, #5
 80196f4:	4293      	cmp	r3, r2
 80196f6:	d900      	bls.n	80196fa <HAL_TIM_ConfigClockSource+0x8a>
 80196f8:	e07a      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 80196fa:	2b70      	cmp	r3, #112	@ 0x70
 80196fc:	d014      	beq.n	8019728 <HAL_TIM_ConfigClockSource+0xb8>
 80196fe:	d900      	bls.n	8019702 <HAL_TIM_ConfigClockSource+0x92>
 8019700:	e076      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 8019702:	2b60      	cmp	r3, #96	@ 0x60
 8019704:	d04b      	beq.n	801979e <HAL_TIM_ConfigClockSource+0x12e>
 8019706:	d900      	bls.n	801970a <HAL_TIM_ConfigClockSource+0x9a>
 8019708:	e072      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 801970a:	2b50      	cmp	r3, #80	@ 0x50
 801970c:	d037      	beq.n	801977e <HAL_TIM_ConfigClockSource+0x10e>
 801970e:	d900      	bls.n	8019712 <HAL_TIM_ConfigClockSource+0xa2>
 8019710:	e06e      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 8019712:	2b40      	cmp	r3, #64	@ 0x40
 8019714:	d053      	beq.n	80197be <HAL_TIM_ConfigClockSource+0x14e>
 8019716:	d86b      	bhi.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 8019718:	2b20      	cmp	r3, #32
 801971a:	d060      	beq.n	80197de <HAL_TIM_ConfigClockSource+0x16e>
 801971c:	d868      	bhi.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
 801971e:	2b00      	cmp	r3, #0
 8019720:	d05d      	beq.n	80197de <HAL_TIM_ConfigClockSource+0x16e>
 8019722:	2b10      	cmp	r3, #16
 8019724:	d05b      	beq.n	80197de <HAL_TIM_ConfigClockSource+0x16e>
 8019726:	e063      	b.n	80197f0 <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801972c:	683b      	ldr	r3, [r7, #0]
 801972e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8019734:	683b      	ldr	r3, [r7, #0]
 8019736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8019738:	f000 fc0c 	bl	8019f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	689b      	ldr	r3, [r3, #8]
 8019742:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	2277      	movs	r2, #119	@ 0x77
 8019748:	4313      	orrs	r3, r2
 801974a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	68ba      	ldr	r2, [r7, #8]
 8019752:	609a      	str	r2, [r3, #8]
      break;
 8019754:	e052      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801975a:	683b      	ldr	r3, [r7, #0]
 801975c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8019766:	f000 fbf5 	bl	8019f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	689a      	ldr	r2, [r3, #8]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	2180      	movs	r1, #128	@ 0x80
 8019776:	01c9      	lsls	r1, r1, #7
 8019778:	430a      	orrs	r2, r1
 801977a:	609a      	str	r2, [r3, #8]
      break;
 801977c:	e03e      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801978a:	001a      	movs	r2, r3
 801978c:	f000 fb66 	bl	8019e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2150      	movs	r1, #80	@ 0x50
 8019796:	0018      	movs	r0, r3
 8019798:	f000 fbc0 	bl	8019f1c <TIM_ITRx_SetConfig>
      break;
 801979c:	e02e      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80197aa:	001a      	movs	r2, r3
 80197ac:	f000 fb84 	bl	8019eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	2160      	movs	r1, #96	@ 0x60
 80197b6:	0018      	movs	r0, r3
 80197b8:	f000 fbb0 	bl	8019f1c <TIM_ITRx_SetConfig>
      break;
 80197bc:	e01e      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80197ca:	001a      	movs	r2, r3
 80197cc:	f000 fb46 	bl	8019e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	2140      	movs	r1, #64	@ 0x40
 80197d6:	0018      	movs	r0, r3
 80197d8:	f000 fba0 	bl	8019f1c <TIM_ITRx_SetConfig>
      break;
 80197dc:	e00e      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	681a      	ldr	r2, [r3, #0]
 80197e2:	683b      	ldr	r3, [r7, #0]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	0019      	movs	r1, r3
 80197e8:	0010      	movs	r0, r2
 80197ea:	f000 fb97 	bl	8019f1c <TIM_ITRx_SetConfig>
      break;
 80197ee:	e005      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 80197f0:	230f      	movs	r3, #15
 80197f2:	18fb      	adds	r3, r7, r3
 80197f4:	2201      	movs	r2, #1
 80197f6:	701a      	strb	r2, [r3, #0]
      break;
 80197f8:	e000      	b.n	80197fc <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80197fa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	223d      	movs	r2, #61	@ 0x3d
 8019800:	2101      	movs	r1, #1
 8019802:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	223c      	movs	r2, #60	@ 0x3c
 8019808:	2100      	movs	r1, #0
 801980a:	5499      	strb	r1, [r3, r2]

  return status;
 801980c:	230f      	movs	r3, #15
 801980e:	18fb      	adds	r3, r7, r3
 8019810:	781b      	ldrb	r3, [r3, #0]
}
 8019812:	0018      	movs	r0, r3
 8019814:	46bd      	mov	sp, r7
 8019816:	b004      	add	sp, #16
 8019818:	bd80      	pop	{r7, pc}
 801981a:	46c0      	nop			@ (mov r8, r8)
 801981c:	ffceff88 	.word	0xffceff88
 8019820:	ffff00ff 	.word	0xffff00ff
 8019824:	00100030 	.word	0x00100030

08019828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b084      	sub	sp, #16
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
 8019830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	4a35      	ldr	r2, [pc, #212]	@ (8019910 <TIM_Base_SetConfig+0xe8>)
 801983c:	4293      	cmp	r3, r2
 801983e:	d008      	beq.n	8019852 <TIM_Base_SetConfig+0x2a>
 8019840:	687a      	ldr	r2, [r7, #4]
 8019842:	2380      	movs	r3, #128	@ 0x80
 8019844:	05db      	lsls	r3, r3, #23
 8019846:	429a      	cmp	r2, r3
 8019848:	d003      	beq.n	8019852 <TIM_Base_SetConfig+0x2a>
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	4a31      	ldr	r2, [pc, #196]	@ (8019914 <TIM_Base_SetConfig+0xec>)
 801984e:	4293      	cmp	r3, r2
 8019850:	d108      	bne.n	8019864 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	2270      	movs	r2, #112	@ 0x70
 8019856:	4393      	bics	r3, r2
 8019858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	685b      	ldr	r3, [r3, #4]
 801985e:	68fa      	ldr	r2, [r7, #12]
 8019860:	4313      	orrs	r3, r2
 8019862:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	4a2a      	ldr	r2, [pc, #168]	@ (8019910 <TIM_Base_SetConfig+0xe8>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d010      	beq.n	801988e <TIM_Base_SetConfig+0x66>
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	2380      	movs	r3, #128	@ 0x80
 8019870:	05db      	lsls	r3, r3, #23
 8019872:	429a      	cmp	r2, r3
 8019874:	d00b      	beq.n	801988e <TIM_Base_SetConfig+0x66>
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	4a26      	ldr	r2, [pc, #152]	@ (8019914 <TIM_Base_SetConfig+0xec>)
 801987a:	4293      	cmp	r3, r2
 801987c:	d007      	beq.n	801988e <TIM_Base_SetConfig+0x66>
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	4a25      	ldr	r2, [pc, #148]	@ (8019918 <TIM_Base_SetConfig+0xf0>)
 8019882:	4293      	cmp	r3, r2
 8019884:	d003      	beq.n	801988e <TIM_Base_SetConfig+0x66>
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	4a24      	ldr	r2, [pc, #144]	@ (801991c <TIM_Base_SetConfig+0xf4>)
 801988a:	4293      	cmp	r3, r2
 801988c:	d108      	bne.n	80198a0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	4a23      	ldr	r2, [pc, #140]	@ (8019920 <TIM_Base_SetConfig+0xf8>)
 8019892:	4013      	ands	r3, r2
 8019894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019896:	683b      	ldr	r3, [r7, #0]
 8019898:	68db      	ldr	r3, [r3, #12]
 801989a:	68fa      	ldr	r2, [r7, #12]
 801989c:	4313      	orrs	r3, r2
 801989e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	2280      	movs	r2, #128	@ 0x80
 80198a4:	4393      	bics	r3, r2
 80198a6:	001a      	movs	r2, r3
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	695b      	ldr	r3, [r3, #20]
 80198ac:	4313      	orrs	r3, r2
 80198ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	68fa      	ldr	r2, [r7, #12]
 80198b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80198b6:	683b      	ldr	r3, [r7, #0]
 80198b8:	689a      	ldr	r2, [r3, #8]
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	681a      	ldr	r2, [r3, #0]
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	4a11      	ldr	r2, [pc, #68]	@ (8019910 <TIM_Base_SetConfig+0xe8>)
 80198ca:	4293      	cmp	r3, r2
 80198cc:	d007      	beq.n	80198de <TIM_Base_SetConfig+0xb6>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	4a11      	ldr	r2, [pc, #68]	@ (8019918 <TIM_Base_SetConfig+0xf0>)
 80198d2:	4293      	cmp	r3, r2
 80198d4:	d003      	beq.n	80198de <TIM_Base_SetConfig+0xb6>
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	4a10      	ldr	r2, [pc, #64]	@ (801991c <TIM_Base_SetConfig+0xf4>)
 80198da:	4293      	cmp	r3, r2
 80198dc:	d103      	bne.n	80198e6 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	691a      	ldr	r2, [r3, #16]
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2201      	movs	r2, #1
 80198ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	691b      	ldr	r3, [r3, #16]
 80198f0:	2201      	movs	r2, #1
 80198f2:	4013      	ands	r3, r2
 80198f4:	2b01      	cmp	r3, #1
 80198f6:	d106      	bne.n	8019906 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	691b      	ldr	r3, [r3, #16]
 80198fc:	2201      	movs	r2, #1
 80198fe:	4393      	bics	r3, r2
 8019900:	001a      	movs	r2, r3
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	611a      	str	r2, [r3, #16]
  }
}
 8019906:	46c0      	nop			@ (mov r8, r8)
 8019908:	46bd      	mov	sp, r7
 801990a:	b004      	add	sp, #16
 801990c:	bd80      	pop	{r7, pc}
 801990e:	46c0      	nop			@ (mov r8, r8)
 8019910:	40012c00 	.word	0x40012c00
 8019914:	40000400 	.word	0x40000400
 8019918:	40014000 	.word	0x40014000
 801991c:	40014400 	.word	0x40014400
 8019920:	fffffcff 	.word	0xfffffcff

08019924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b086      	sub	sp, #24
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	6a1b      	ldr	r3, [r3, #32]
 8019932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	6a1b      	ldr	r3, [r3, #32]
 8019938:	2201      	movs	r2, #1
 801993a:	4393      	bics	r3, r2
 801993c:	001a      	movs	r2, r3
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	685b      	ldr	r3, [r3, #4]
 8019946:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	699b      	ldr	r3, [r3, #24]
 801994c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	4a2e      	ldr	r2, [pc, #184]	@ (8019a0c <TIM_OC1_SetConfig+0xe8>)
 8019952:	4013      	ands	r3, r2
 8019954:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	2203      	movs	r2, #3
 801995a:	4393      	bics	r3, r2
 801995c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	4313      	orrs	r3, r2
 8019966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019968:	697b      	ldr	r3, [r7, #20]
 801996a:	2202      	movs	r2, #2
 801996c:	4393      	bics	r3, r2
 801996e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	689b      	ldr	r3, [r3, #8]
 8019974:	697a      	ldr	r2, [r7, #20]
 8019976:	4313      	orrs	r3, r2
 8019978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4a24      	ldr	r2, [pc, #144]	@ (8019a10 <TIM_OC1_SetConfig+0xec>)
 801997e:	4293      	cmp	r3, r2
 8019980:	d007      	beq.n	8019992 <TIM_OC1_SetConfig+0x6e>
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	4a23      	ldr	r2, [pc, #140]	@ (8019a14 <TIM_OC1_SetConfig+0xf0>)
 8019986:	4293      	cmp	r3, r2
 8019988:	d003      	beq.n	8019992 <TIM_OC1_SetConfig+0x6e>
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	4a22      	ldr	r2, [pc, #136]	@ (8019a18 <TIM_OC1_SetConfig+0xf4>)
 801998e:	4293      	cmp	r3, r2
 8019990:	d10c      	bne.n	80199ac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	2208      	movs	r2, #8
 8019996:	4393      	bics	r3, r2
 8019998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	68db      	ldr	r3, [r3, #12]
 801999e:	697a      	ldr	r2, [r7, #20]
 80199a0:	4313      	orrs	r3, r2
 80199a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	2204      	movs	r2, #4
 80199a8:	4393      	bics	r3, r2
 80199aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	4a18      	ldr	r2, [pc, #96]	@ (8019a10 <TIM_OC1_SetConfig+0xec>)
 80199b0:	4293      	cmp	r3, r2
 80199b2:	d007      	beq.n	80199c4 <TIM_OC1_SetConfig+0xa0>
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	4a17      	ldr	r2, [pc, #92]	@ (8019a14 <TIM_OC1_SetConfig+0xf0>)
 80199b8:	4293      	cmp	r3, r2
 80199ba:	d003      	beq.n	80199c4 <TIM_OC1_SetConfig+0xa0>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	4a16      	ldr	r2, [pc, #88]	@ (8019a18 <TIM_OC1_SetConfig+0xf4>)
 80199c0:	4293      	cmp	r3, r2
 80199c2:	d111      	bne.n	80199e8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80199c4:	693b      	ldr	r3, [r7, #16]
 80199c6:	4a15      	ldr	r2, [pc, #84]	@ (8019a1c <TIM_OC1_SetConfig+0xf8>)
 80199c8:	4013      	ands	r3, r2
 80199ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80199cc:	693b      	ldr	r3, [r7, #16]
 80199ce:	4a14      	ldr	r2, [pc, #80]	@ (8019a20 <TIM_OC1_SetConfig+0xfc>)
 80199d0:	4013      	ands	r3, r2
 80199d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	695b      	ldr	r3, [r3, #20]
 80199d8:	693a      	ldr	r2, [r7, #16]
 80199da:	4313      	orrs	r3, r2
 80199dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	699b      	ldr	r3, [r3, #24]
 80199e2:	693a      	ldr	r2, [r7, #16]
 80199e4:	4313      	orrs	r3, r2
 80199e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	693a      	ldr	r2, [r7, #16]
 80199ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	68fa      	ldr	r2, [r7, #12]
 80199f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	685a      	ldr	r2, [r3, #4]
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	697a      	ldr	r2, [r7, #20]
 8019a00:	621a      	str	r2, [r3, #32]
}
 8019a02:	46c0      	nop			@ (mov r8, r8)
 8019a04:	46bd      	mov	sp, r7
 8019a06:	b006      	add	sp, #24
 8019a08:	bd80      	pop	{r7, pc}
 8019a0a:	46c0      	nop			@ (mov r8, r8)
 8019a0c:	fffeff8f 	.word	0xfffeff8f
 8019a10:	40012c00 	.word	0x40012c00
 8019a14:	40014000 	.word	0x40014000
 8019a18:	40014400 	.word	0x40014400
 8019a1c:	fffffeff 	.word	0xfffffeff
 8019a20:	fffffdff 	.word	0xfffffdff

08019a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b086      	sub	sp, #24
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
 8019a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	6a1b      	ldr	r3, [r3, #32]
 8019a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	6a1b      	ldr	r3, [r3, #32]
 8019a38:	2210      	movs	r2, #16
 8019a3a:	4393      	bics	r3, r2
 8019a3c:	001a      	movs	r2, r3
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	685b      	ldr	r3, [r3, #4]
 8019a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	699b      	ldr	r3, [r3, #24]
 8019a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	4a2c      	ldr	r2, [pc, #176]	@ (8019b04 <TIM_OC2_SetConfig+0xe0>)
 8019a52:	4013      	ands	r3, r2
 8019a54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	4a2b      	ldr	r2, [pc, #172]	@ (8019b08 <TIM_OC2_SetConfig+0xe4>)
 8019a5a:	4013      	ands	r3, r2
 8019a5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	021b      	lsls	r3, r3, #8
 8019a64:	68fa      	ldr	r2, [r7, #12]
 8019a66:	4313      	orrs	r3, r2
 8019a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	2220      	movs	r2, #32
 8019a6e:	4393      	bics	r3, r2
 8019a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8019a72:	683b      	ldr	r3, [r7, #0]
 8019a74:	689b      	ldr	r3, [r3, #8]
 8019a76:	011b      	lsls	r3, r3, #4
 8019a78:	697a      	ldr	r2, [r7, #20]
 8019a7a:	4313      	orrs	r3, r2
 8019a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	4a22      	ldr	r2, [pc, #136]	@ (8019b0c <TIM_OC2_SetConfig+0xe8>)
 8019a82:	4293      	cmp	r3, r2
 8019a84:	d10d      	bne.n	8019aa2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8019a86:	697b      	ldr	r3, [r7, #20]
 8019a88:	2280      	movs	r2, #128	@ 0x80
 8019a8a:	4393      	bics	r3, r2
 8019a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	68db      	ldr	r3, [r3, #12]
 8019a92:	011b      	lsls	r3, r3, #4
 8019a94:	697a      	ldr	r2, [r7, #20]
 8019a96:	4313      	orrs	r3, r2
 8019a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8019a9a:	697b      	ldr	r3, [r7, #20]
 8019a9c:	2240      	movs	r2, #64	@ 0x40
 8019a9e:	4393      	bics	r3, r2
 8019aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	4a19      	ldr	r2, [pc, #100]	@ (8019b0c <TIM_OC2_SetConfig+0xe8>)
 8019aa6:	4293      	cmp	r3, r2
 8019aa8:	d007      	beq.n	8019aba <TIM_OC2_SetConfig+0x96>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	4a18      	ldr	r2, [pc, #96]	@ (8019b10 <TIM_OC2_SetConfig+0xec>)
 8019aae:	4293      	cmp	r3, r2
 8019ab0:	d003      	beq.n	8019aba <TIM_OC2_SetConfig+0x96>
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	4a17      	ldr	r2, [pc, #92]	@ (8019b14 <TIM_OC2_SetConfig+0xf0>)
 8019ab6:	4293      	cmp	r3, r2
 8019ab8:	d113      	bne.n	8019ae2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8019aba:	693b      	ldr	r3, [r7, #16]
 8019abc:	4a16      	ldr	r2, [pc, #88]	@ (8019b18 <TIM_OC2_SetConfig+0xf4>)
 8019abe:	4013      	ands	r3, r2
 8019ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	4a15      	ldr	r2, [pc, #84]	@ (8019b1c <TIM_OC2_SetConfig+0xf8>)
 8019ac6:	4013      	ands	r3, r2
 8019ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	695b      	ldr	r3, [r3, #20]
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	693a      	ldr	r2, [r7, #16]
 8019ad2:	4313      	orrs	r3, r2
 8019ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	699b      	ldr	r3, [r3, #24]
 8019ada:	009b      	lsls	r3, r3, #2
 8019adc:	693a      	ldr	r2, [r7, #16]
 8019ade:	4313      	orrs	r3, r2
 8019ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	693a      	ldr	r2, [r7, #16]
 8019ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	68fa      	ldr	r2, [r7, #12]
 8019aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019aee:	683b      	ldr	r3, [r7, #0]
 8019af0:	685a      	ldr	r2, [r3, #4]
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	697a      	ldr	r2, [r7, #20]
 8019afa:	621a      	str	r2, [r3, #32]
}
 8019afc:	46c0      	nop			@ (mov r8, r8)
 8019afe:	46bd      	mov	sp, r7
 8019b00:	b006      	add	sp, #24
 8019b02:	bd80      	pop	{r7, pc}
 8019b04:	feff8fff 	.word	0xfeff8fff
 8019b08:	fffffcff 	.word	0xfffffcff
 8019b0c:	40012c00 	.word	0x40012c00
 8019b10:	40014000 	.word	0x40014000
 8019b14:	40014400 	.word	0x40014400
 8019b18:	fffffbff 	.word	0xfffffbff
 8019b1c:	fffff7ff 	.word	0xfffff7ff

08019b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b086      	sub	sp, #24
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
 8019b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6a1b      	ldr	r3, [r3, #32]
 8019b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	6a1b      	ldr	r3, [r3, #32]
 8019b34:	4a31      	ldr	r2, [pc, #196]	@ (8019bfc <TIM_OC3_SetConfig+0xdc>)
 8019b36:	401a      	ands	r2, r3
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	685b      	ldr	r3, [r3, #4]
 8019b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	69db      	ldr	r3, [r3, #28]
 8019b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8019c00 <TIM_OC3_SetConfig+0xe0>)
 8019b4c:	4013      	ands	r3, r2
 8019b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	2203      	movs	r2, #3
 8019b54:	4393      	bics	r3, r2
 8019b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	68fa      	ldr	r2, [r7, #12]
 8019b5e:	4313      	orrs	r3, r2
 8019b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019b62:	697b      	ldr	r3, [r7, #20]
 8019b64:	4a27      	ldr	r2, [pc, #156]	@ (8019c04 <TIM_OC3_SetConfig+0xe4>)
 8019b66:	4013      	ands	r3, r2
 8019b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	689b      	ldr	r3, [r3, #8]
 8019b6e:	021b      	lsls	r3, r3, #8
 8019b70:	697a      	ldr	r2, [r7, #20]
 8019b72:	4313      	orrs	r3, r2
 8019b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	4a23      	ldr	r2, [pc, #140]	@ (8019c08 <TIM_OC3_SetConfig+0xe8>)
 8019b7a:	4293      	cmp	r3, r2
 8019b7c:	d10d      	bne.n	8019b9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8019b7e:	697b      	ldr	r3, [r7, #20]
 8019b80:	4a22      	ldr	r2, [pc, #136]	@ (8019c0c <TIM_OC3_SetConfig+0xec>)
 8019b82:	4013      	ands	r3, r2
 8019b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	68db      	ldr	r3, [r3, #12]
 8019b8a:	021b      	lsls	r3, r3, #8
 8019b8c:	697a      	ldr	r2, [r7, #20]
 8019b8e:	4313      	orrs	r3, r2
 8019b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8019b92:	697b      	ldr	r3, [r7, #20]
 8019b94:	4a1e      	ldr	r2, [pc, #120]	@ (8019c10 <TIM_OC3_SetConfig+0xf0>)
 8019b96:	4013      	ands	r3, r2
 8019b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8019c08 <TIM_OC3_SetConfig+0xe8>)
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	d007      	beq.n	8019bb2 <TIM_OC3_SetConfig+0x92>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8019c14 <TIM_OC3_SetConfig+0xf4>)
 8019ba6:	4293      	cmp	r3, r2
 8019ba8:	d003      	beq.n	8019bb2 <TIM_OC3_SetConfig+0x92>
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	4a1a      	ldr	r2, [pc, #104]	@ (8019c18 <TIM_OC3_SetConfig+0xf8>)
 8019bae:	4293      	cmp	r3, r2
 8019bb0:	d113      	bne.n	8019bda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8019bb2:	693b      	ldr	r3, [r7, #16]
 8019bb4:	4a19      	ldr	r2, [pc, #100]	@ (8019c1c <TIM_OC3_SetConfig+0xfc>)
 8019bb6:	4013      	ands	r3, r2
 8019bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8019bba:	693b      	ldr	r3, [r7, #16]
 8019bbc:	4a18      	ldr	r2, [pc, #96]	@ (8019c20 <TIM_OC3_SetConfig+0x100>)
 8019bbe:	4013      	ands	r3, r2
 8019bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	695b      	ldr	r3, [r3, #20]
 8019bc6:	011b      	lsls	r3, r3, #4
 8019bc8:	693a      	ldr	r2, [r7, #16]
 8019bca:	4313      	orrs	r3, r2
 8019bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	699b      	ldr	r3, [r3, #24]
 8019bd2:	011b      	lsls	r3, r3, #4
 8019bd4:	693a      	ldr	r2, [r7, #16]
 8019bd6:	4313      	orrs	r3, r2
 8019bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	693a      	ldr	r2, [r7, #16]
 8019bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	68fa      	ldr	r2, [r7, #12]
 8019be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	685a      	ldr	r2, [r3, #4]
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	697a      	ldr	r2, [r7, #20]
 8019bf2:	621a      	str	r2, [r3, #32]
}
 8019bf4:	46c0      	nop			@ (mov r8, r8)
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	b006      	add	sp, #24
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	fffffeff 	.word	0xfffffeff
 8019c00:	fffeff8f 	.word	0xfffeff8f
 8019c04:	fffffdff 	.word	0xfffffdff
 8019c08:	40012c00 	.word	0x40012c00
 8019c0c:	fffff7ff 	.word	0xfffff7ff
 8019c10:	fffffbff 	.word	0xfffffbff
 8019c14:	40014000 	.word	0x40014000
 8019c18:	40014400 	.word	0x40014400
 8019c1c:	ffffefff 	.word	0xffffefff
 8019c20:	ffffdfff 	.word	0xffffdfff

08019c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b086      	sub	sp, #24
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
 8019c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6a1b      	ldr	r3, [r3, #32]
 8019c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	6a1b      	ldr	r3, [r3, #32]
 8019c38:	4a24      	ldr	r2, [pc, #144]	@ (8019ccc <TIM_OC4_SetConfig+0xa8>)
 8019c3a:	401a      	ands	r2, r3
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	69db      	ldr	r3, [r3, #28]
 8019c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	4a20      	ldr	r2, [pc, #128]	@ (8019cd0 <TIM_OC4_SetConfig+0xac>)
 8019c50:	4013      	ands	r3, r2
 8019c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	4a1f      	ldr	r2, [pc, #124]	@ (8019cd4 <TIM_OC4_SetConfig+0xb0>)
 8019c58:	4013      	ands	r3, r2
 8019c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	021b      	lsls	r3, r3, #8
 8019c62:	68fa      	ldr	r2, [r7, #12]
 8019c64:	4313      	orrs	r3, r2
 8019c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8019cd8 <TIM_OC4_SetConfig+0xb4>)
 8019c6c:	4013      	ands	r3, r2
 8019c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	689b      	ldr	r3, [r3, #8]
 8019c74:	031b      	lsls	r3, r3, #12
 8019c76:	693a      	ldr	r2, [r7, #16]
 8019c78:	4313      	orrs	r3, r2
 8019c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	4a17      	ldr	r2, [pc, #92]	@ (8019cdc <TIM_OC4_SetConfig+0xb8>)
 8019c80:	4293      	cmp	r3, r2
 8019c82:	d007      	beq.n	8019c94 <TIM_OC4_SetConfig+0x70>
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	4a16      	ldr	r2, [pc, #88]	@ (8019ce0 <TIM_OC4_SetConfig+0xbc>)
 8019c88:	4293      	cmp	r3, r2
 8019c8a:	d003      	beq.n	8019c94 <TIM_OC4_SetConfig+0x70>
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	4a15      	ldr	r2, [pc, #84]	@ (8019ce4 <TIM_OC4_SetConfig+0xc0>)
 8019c90:	4293      	cmp	r3, r2
 8019c92:	d109      	bne.n	8019ca8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	4a14      	ldr	r2, [pc, #80]	@ (8019ce8 <TIM_OC4_SetConfig+0xc4>)
 8019c98:	4013      	ands	r3, r2
 8019c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	695b      	ldr	r3, [r3, #20]
 8019ca0:	019b      	lsls	r3, r3, #6
 8019ca2:	697a      	ldr	r2, [r7, #20]
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	697a      	ldr	r2, [r7, #20]
 8019cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	68fa      	ldr	r2, [r7, #12]
 8019cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	685a      	ldr	r2, [r3, #4]
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	693a      	ldr	r2, [r7, #16]
 8019cc0:	621a      	str	r2, [r3, #32]
}
 8019cc2:	46c0      	nop			@ (mov r8, r8)
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	b006      	add	sp, #24
 8019cc8:	bd80      	pop	{r7, pc}
 8019cca:	46c0      	nop			@ (mov r8, r8)
 8019ccc:	ffffefff 	.word	0xffffefff
 8019cd0:	feff8fff 	.word	0xfeff8fff
 8019cd4:	fffffcff 	.word	0xfffffcff
 8019cd8:	ffffdfff 	.word	0xffffdfff
 8019cdc:	40012c00 	.word	0x40012c00
 8019ce0:	40014000 	.word	0x40014000
 8019ce4:	40014400 	.word	0x40014400
 8019ce8:	ffffbfff 	.word	0xffffbfff

08019cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b086      	sub	sp, #24
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
 8019cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	6a1b      	ldr	r3, [r3, #32]
 8019cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6a1b      	ldr	r3, [r3, #32]
 8019d00:	4a21      	ldr	r2, [pc, #132]	@ (8019d88 <TIM_OC5_SetConfig+0x9c>)
 8019d02:	401a      	ands	r2, r3
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	685b      	ldr	r3, [r3, #4]
 8019d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	4a1d      	ldr	r2, [pc, #116]	@ (8019d8c <TIM_OC5_SetConfig+0xa0>)
 8019d18:	4013      	ands	r3, r2
 8019d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	4313      	orrs	r3, r2
 8019d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8019d26:	693b      	ldr	r3, [r7, #16]
 8019d28:	4a19      	ldr	r2, [pc, #100]	@ (8019d90 <TIM_OC5_SetConfig+0xa4>)
 8019d2a:	4013      	ands	r3, r2
 8019d2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	689b      	ldr	r3, [r3, #8]
 8019d32:	041b      	lsls	r3, r3, #16
 8019d34:	693a      	ldr	r2, [r7, #16]
 8019d36:	4313      	orrs	r3, r2
 8019d38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	4a15      	ldr	r2, [pc, #84]	@ (8019d94 <TIM_OC5_SetConfig+0xa8>)
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	d007      	beq.n	8019d52 <TIM_OC5_SetConfig+0x66>
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	4a14      	ldr	r2, [pc, #80]	@ (8019d98 <TIM_OC5_SetConfig+0xac>)
 8019d46:	4293      	cmp	r3, r2
 8019d48:	d003      	beq.n	8019d52 <TIM_OC5_SetConfig+0x66>
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	4a13      	ldr	r2, [pc, #76]	@ (8019d9c <TIM_OC5_SetConfig+0xb0>)
 8019d4e:	4293      	cmp	r3, r2
 8019d50:	d109      	bne.n	8019d66 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	4a0c      	ldr	r2, [pc, #48]	@ (8019d88 <TIM_OC5_SetConfig+0x9c>)
 8019d56:	4013      	ands	r3, r2
 8019d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8019d5a:	683b      	ldr	r3, [r7, #0]
 8019d5c:	695b      	ldr	r3, [r3, #20]
 8019d5e:	021b      	lsls	r3, r3, #8
 8019d60:	697a      	ldr	r2, [r7, #20]
 8019d62:	4313      	orrs	r3, r2
 8019d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	697a      	ldr	r2, [r7, #20]
 8019d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	68fa      	ldr	r2, [r7, #12]
 8019d70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	685a      	ldr	r2, [r3, #4]
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	693a      	ldr	r2, [r7, #16]
 8019d7e:	621a      	str	r2, [r3, #32]
}
 8019d80:	46c0      	nop			@ (mov r8, r8)
 8019d82:	46bd      	mov	sp, r7
 8019d84:	b006      	add	sp, #24
 8019d86:	bd80      	pop	{r7, pc}
 8019d88:	fffeffff 	.word	0xfffeffff
 8019d8c:	fffeff8f 	.word	0xfffeff8f
 8019d90:	fffdffff 	.word	0xfffdffff
 8019d94:	40012c00 	.word	0x40012c00
 8019d98:	40014000 	.word	0x40014000
 8019d9c:	40014400 	.word	0x40014400

08019da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b086      	sub	sp, #24
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
 8019da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	6a1b      	ldr	r3, [r3, #32]
 8019dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	6a1b      	ldr	r3, [r3, #32]
 8019db4:	4a22      	ldr	r2, [pc, #136]	@ (8019e40 <TIM_OC6_SetConfig+0xa0>)
 8019db6:	401a      	ands	r2, r3
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	685b      	ldr	r3, [r3, #4]
 8019dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	4a1e      	ldr	r2, [pc, #120]	@ (8019e44 <TIM_OC6_SetConfig+0xa4>)
 8019dcc:	4013      	ands	r3, r2
 8019dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	021b      	lsls	r3, r3, #8
 8019dd6:	68fa      	ldr	r2, [r7, #12]
 8019dd8:	4313      	orrs	r3, r2
 8019dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8019ddc:	693b      	ldr	r3, [r7, #16]
 8019dde:	4a1a      	ldr	r2, [pc, #104]	@ (8019e48 <TIM_OC6_SetConfig+0xa8>)
 8019de0:	4013      	ands	r3, r2
 8019de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	689b      	ldr	r3, [r3, #8]
 8019de8:	051b      	lsls	r3, r3, #20
 8019dea:	693a      	ldr	r2, [r7, #16]
 8019dec:	4313      	orrs	r3, r2
 8019dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	4a16      	ldr	r2, [pc, #88]	@ (8019e4c <TIM_OC6_SetConfig+0xac>)
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d007      	beq.n	8019e08 <TIM_OC6_SetConfig+0x68>
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	4a15      	ldr	r2, [pc, #84]	@ (8019e50 <TIM_OC6_SetConfig+0xb0>)
 8019dfc:	4293      	cmp	r3, r2
 8019dfe:	d003      	beq.n	8019e08 <TIM_OC6_SetConfig+0x68>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	4a14      	ldr	r2, [pc, #80]	@ (8019e54 <TIM_OC6_SetConfig+0xb4>)
 8019e04:	4293      	cmp	r3, r2
 8019e06:	d109      	bne.n	8019e1c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8019e08:	697b      	ldr	r3, [r7, #20]
 8019e0a:	4a13      	ldr	r2, [pc, #76]	@ (8019e58 <TIM_OC6_SetConfig+0xb8>)
 8019e0c:	4013      	ands	r3, r2
 8019e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8019e10:	683b      	ldr	r3, [r7, #0]
 8019e12:	695b      	ldr	r3, [r3, #20]
 8019e14:	029b      	lsls	r3, r3, #10
 8019e16:	697a      	ldr	r2, [r7, #20]
 8019e18:	4313      	orrs	r3, r2
 8019e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	697a      	ldr	r2, [r7, #20]
 8019e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	68fa      	ldr	r2, [r7, #12]
 8019e26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8019e28:	683b      	ldr	r3, [r7, #0]
 8019e2a:	685a      	ldr	r2, [r3, #4]
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	693a      	ldr	r2, [r7, #16]
 8019e34:	621a      	str	r2, [r3, #32]
}
 8019e36:	46c0      	nop			@ (mov r8, r8)
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	b006      	add	sp, #24
 8019e3c:	bd80      	pop	{r7, pc}
 8019e3e:	46c0      	nop			@ (mov r8, r8)
 8019e40:	ffefffff 	.word	0xffefffff
 8019e44:	feff8fff 	.word	0xfeff8fff
 8019e48:	ffdfffff 	.word	0xffdfffff
 8019e4c:	40012c00 	.word	0x40012c00
 8019e50:	40014000 	.word	0x40014000
 8019e54:	40014400 	.word	0x40014400
 8019e58:	fffbffff 	.word	0xfffbffff

08019e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b086      	sub	sp, #24
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	60f8      	str	r0, [r7, #12]
 8019e64:	60b9      	str	r1, [r7, #8]
 8019e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	6a1b      	ldr	r3, [r3, #32]
 8019e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	6a1b      	ldr	r3, [r3, #32]
 8019e72:	2201      	movs	r2, #1
 8019e74:	4393      	bics	r3, r2
 8019e76:	001a      	movs	r2, r3
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	699b      	ldr	r3, [r3, #24]
 8019e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019e82:	693b      	ldr	r3, [r7, #16]
 8019e84:	22f0      	movs	r2, #240	@ 0xf0
 8019e86:	4393      	bics	r3, r2
 8019e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	011b      	lsls	r3, r3, #4
 8019e8e:	693a      	ldr	r2, [r7, #16]
 8019e90:	4313      	orrs	r3, r2
 8019e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019e94:	697b      	ldr	r3, [r7, #20]
 8019e96:	220a      	movs	r2, #10
 8019e98:	4393      	bics	r3, r2
 8019e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8019e9c:	697a      	ldr	r2, [r7, #20]
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	4313      	orrs	r3, r2
 8019ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	693a      	ldr	r2, [r7, #16]
 8019ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	697a      	ldr	r2, [r7, #20]
 8019eae:	621a      	str	r2, [r3, #32]
}
 8019eb0:	46c0      	nop			@ (mov r8, r8)
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	b006      	add	sp, #24
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b086      	sub	sp, #24
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	60f8      	str	r0, [r7, #12]
 8019ec0:	60b9      	str	r1, [r7, #8]
 8019ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	6a1b      	ldr	r3, [r3, #32]
 8019ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	6a1b      	ldr	r3, [r3, #32]
 8019ece:	2210      	movs	r2, #16
 8019ed0:	4393      	bics	r3, r2
 8019ed2:	001a      	movs	r2, r3
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	699b      	ldr	r3, [r3, #24]
 8019edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019ede:	693b      	ldr	r3, [r7, #16]
 8019ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8019f18 <TIM_TI2_ConfigInputStage+0x60>)
 8019ee2:	4013      	ands	r3, r2
 8019ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	031b      	lsls	r3, r3, #12
 8019eea:	693a      	ldr	r2, [r7, #16]
 8019eec:	4313      	orrs	r3, r2
 8019eee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	22a0      	movs	r2, #160	@ 0xa0
 8019ef4:	4393      	bics	r3, r2
 8019ef6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	011b      	lsls	r3, r3, #4
 8019efc:	697a      	ldr	r2, [r7, #20]
 8019efe:	4313      	orrs	r3, r2
 8019f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	693a      	ldr	r2, [r7, #16]
 8019f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	697a      	ldr	r2, [r7, #20]
 8019f0c:	621a      	str	r2, [r3, #32]
}
 8019f0e:	46c0      	nop			@ (mov r8, r8)
 8019f10:	46bd      	mov	sp, r7
 8019f12:	b006      	add	sp, #24
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	46c0      	nop			@ (mov r8, r8)
 8019f18:	ffff0fff 	.word	0xffff0fff

08019f1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b084      	sub	sp, #16
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
 8019f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	689b      	ldr	r3, [r3, #8]
 8019f2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	4a08      	ldr	r2, [pc, #32]	@ (8019f50 <TIM_ITRx_SetConfig+0x34>)
 8019f30:	4013      	ands	r3, r2
 8019f32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8019f34:	683a      	ldr	r2, [r7, #0]
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	4313      	orrs	r3, r2
 8019f3a:	2207      	movs	r2, #7
 8019f3c:	4313      	orrs	r3, r2
 8019f3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	68fa      	ldr	r2, [r7, #12]
 8019f44:	609a      	str	r2, [r3, #8]
}
 8019f46:	46c0      	nop			@ (mov r8, r8)
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	b004      	add	sp, #16
 8019f4c:	bd80      	pop	{r7, pc}
 8019f4e:	46c0      	nop			@ (mov r8, r8)
 8019f50:	ffcfff8f 	.word	0xffcfff8f

08019f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b086      	sub	sp, #24
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	60f8      	str	r0, [r7, #12]
 8019f5c:	60b9      	str	r1, [r7, #8]
 8019f5e:	607a      	str	r2, [r7, #4]
 8019f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	689b      	ldr	r3, [r3, #8]
 8019f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	4a09      	ldr	r2, [pc, #36]	@ (8019f90 <TIM_ETR_SetConfig+0x3c>)
 8019f6c:	4013      	ands	r3, r2
 8019f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	021a      	lsls	r2, r3, #8
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	431a      	orrs	r2, r3
 8019f78:	68bb      	ldr	r3, [r7, #8]
 8019f7a:	4313      	orrs	r3, r2
 8019f7c:	697a      	ldr	r2, [r7, #20]
 8019f7e:	4313      	orrs	r3, r2
 8019f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	697a      	ldr	r2, [r7, #20]
 8019f86:	609a      	str	r2, [r3, #8]
}
 8019f88:	46c0      	nop			@ (mov r8, r8)
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	b006      	add	sp, #24
 8019f8e:	bd80      	pop	{r7, pc}
 8019f90:	ffff00ff 	.word	0xffff00ff

08019f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b086      	sub	sp, #24
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	60b9      	str	r1, [r7, #8]
 8019f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	221f      	movs	r2, #31
 8019fa4:	4013      	ands	r3, r2
 8019fa6:	2201      	movs	r2, #1
 8019fa8:	409a      	lsls	r2, r3
 8019faa:	0013      	movs	r3, r2
 8019fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	6a1b      	ldr	r3, [r3, #32]
 8019fb2:	697a      	ldr	r2, [r7, #20]
 8019fb4:	43d2      	mvns	r2, r2
 8019fb6:	401a      	ands	r2, r3
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	6a1a      	ldr	r2, [r3, #32]
 8019fc0:	68bb      	ldr	r3, [r7, #8]
 8019fc2:	211f      	movs	r1, #31
 8019fc4:	400b      	ands	r3, r1
 8019fc6:	6879      	ldr	r1, [r7, #4]
 8019fc8:	4099      	lsls	r1, r3
 8019fca:	000b      	movs	r3, r1
 8019fcc:	431a      	orrs	r2, r3
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	621a      	str	r2, [r3, #32]
}
 8019fd2:	46c0      	nop			@ (mov r8, r8)
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	b006      	add	sp, #24
 8019fd8:	bd80      	pop	{r7, pc}
	...

08019fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b084      	sub	sp, #16
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
 8019fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	223c      	movs	r2, #60	@ 0x3c
 8019fea:	5c9b      	ldrb	r3, [r3, r2]
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d101      	bne.n	8019ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019ff0:	2302      	movs	r3, #2
 8019ff2:	e055      	b.n	801a0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	223c      	movs	r2, #60	@ 0x3c
 8019ff8:	2101      	movs	r1, #1
 8019ffa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	223d      	movs	r2, #61	@ 0x3d
 801a000:	2102      	movs	r1, #2
 801a002:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	685b      	ldr	r3, [r3, #4]
 801a00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	689b      	ldr	r3, [r3, #8]
 801a012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	4a23      	ldr	r2, [pc, #140]	@ (801a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a01a:	4293      	cmp	r3, r2
 801a01c:	d108      	bne.n	801a030 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	4a22      	ldr	r2, [pc, #136]	@ (801a0ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801a022:	4013      	ands	r3, r2
 801a024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	685b      	ldr	r3, [r3, #4]
 801a02a:	68fa      	ldr	r2, [r7, #12]
 801a02c:	4313      	orrs	r3, r2
 801a02e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	2270      	movs	r2, #112	@ 0x70
 801a034:	4393      	bics	r3, r2
 801a036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	68fa      	ldr	r2, [r7, #12]
 801a03e:	4313      	orrs	r3, r2
 801a040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	68fa      	ldr	r2, [r7, #12]
 801a048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	4a16      	ldr	r2, [pc, #88]	@ (801a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a050:	4293      	cmp	r3, r2
 801a052:	d00f      	beq.n	801a074 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	681a      	ldr	r2, [r3, #0]
 801a058:	2380      	movs	r3, #128	@ 0x80
 801a05a:	05db      	lsls	r3, r3, #23
 801a05c:	429a      	cmp	r2, r3
 801a05e:	d009      	beq.n	801a074 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	4a12      	ldr	r2, [pc, #72]	@ (801a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801a066:	4293      	cmp	r3, r2
 801a068:	d004      	beq.n	801a074 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	4a11      	ldr	r2, [pc, #68]	@ (801a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801a070:	4293      	cmp	r3, r2
 801a072:	d10c      	bne.n	801a08e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	2280      	movs	r2, #128	@ 0x80
 801a078:	4393      	bics	r3, r2
 801a07a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	689b      	ldr	r3, [r3, #8]
 801a080:	68ba      	ldr	r2, [r7, #8]
 801a082:	4313      	orrs	r3, r2
 801a084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	68ba      	ldr	r2, [r7, #8]
 801a08c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	223d      	movs	r2, #61	@ 0x3d
 801a092:	2101      	movs	r1, #1
 801a094:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	223c      	movs	r2, #60	@ 0x3c
 801a09a:	2100      	movs	r1, #0
 801a09c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a09e:	2300      	movs	r3, #0
}
 801a0a0:	0018      	movs	r0, r3
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	b004      	add	sp, #16
 801a0a6:	bd80      	pop	{r7, pc}
 801a0a8:	40012c00 	.word	0x40012c00
 801a0ac:	ff0fffff 	.word	0xff0fffff
 801a0b0:	40000400 	.word	0x40000400
 801a0b4:	40014000 	.word	0x40014000

0801a0b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b082      	sub	sp, #8
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d101      	bne.n	801a0ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	e046      	b.n	801a158 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2288      	movs	r2, #136	@ 0x88
 801a0ce:	589b      	ldr	r3, [r3, r2]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d107      	bne.n	801a0e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	2284      	movs	r2, #132	@ 0x84
 801a0d8:	2100      	movs	r1, #0
 801a0da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	0018      	movs	r0, r3
 801a0e0:	f7f2 f8a6 	bl	800c230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2288      	movs	r2, #136	@ 0x88
 801a0e8:	2124      	movs	r1, #36	@ 0x24
 801a0ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	681a      	ldr	r2, [r3, #0]
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	2101      	movs	r1, #1
 801a0f8:	438a      	bics	r2, r1
 801a0fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a100:	2b00      	cmp	r3, #0
 801a102:	d003      	beq.n	801a10c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	0018      	movs	r0, r3
 801a108:	f000 ff6a 	bl	801afe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	0018      	movs	r0, r3
 801a110:	f000 fd94 	bl	801ac3c <UART_SetConfig>
 801a114:	0003      	movs	r3, r0
 801a116:	2b01      	cmp	r3, #1
 801a118:	d101      	bne.n	801a11e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 801a11a:	2301      	movs	r3, #1
 801a11c:	e01c      	b.n	801a158 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	685a      	ldr	r2, [r3, #4]
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	490d      	ldr	r1, [pc, #52]	@ (801a160 <HAL_UART_Init+0xa8>)
 801a12a:	400a      	ands	r2, r1
 801a12c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	689a      	ldr	r2, [r3, #8]
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	212a      	movs	r1, #42	@ 0x2a
 801a13a:	438a      	bics	r2, r1
 801a13c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	681a      	ldr	r2, [r3, #0]
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	2101      	movs	r1, #1
 801a14a:	430a      	orrs	r2, r1
 801a14c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	0018      	movs	r0, r3
 801a152:	f000 fff9 	bl	801b148 <UART_CheckIdleState>
 801a156:	0003      	movs	r3, r0
}
 801a158:	0018      	movs	r0, r3
 801a15a:	46bd      	mov	sp, r7
 801a15c:	b002      	add	sp, #8
 801a15e:	bd80      	pop	{r7, pc}
 801a160:	ffffb7ff 	.word	0xffffb7ff

0801a164 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 801a164:	b580      	push	{r7, lr}
 801a166:	b082      	sub	sp, #8
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d101      	bne.n	801a176 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801a172:	2301      	movs	r3, #1
 801a174:	e032      	b.n	801a1dc <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2288      	movs	r2, #136	@ 0x88
 801a17a:	2124      	movs	r1, #36	@ 0x24
 801a17c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	681a      	ldr	r2, [r3, #0]
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	2101      	movs	r1, #1
 801a18a:	438a      	bics	r2, r1
 801a18c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	2200      	movs	r2, #0
 801a194:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	2200      	movs	r2, #0
 801a19c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	0018      	movs	r0, r3
 801a1aa:	f7f2 f9af 	bl	800c50c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2290      	movs	r2, #144	@ 0x90
 801a1b2:	2100      	movs	r1, #0
 801a1b4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	2288      	movs	r2, #136	@ 0x88
 801a1ba:	2100      	movs	r1, #0
 801a1bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	228c      	movs	r2, #140	@ 0x8c
 801a1c2:	2100      	movs	r1, #0
 801a1c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2284      	movs	r2, #132	@ 0x84
 801a1d6:	2100      	movs	r1, #0
 801a1d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a1da:	2300      	movs	r3, #0
}
 801a1dc:	0018      	movs	r0, r3
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	b002      	add	sp, #8
 801a1e2:	bd80      	pop	{r7, pc}

0801a1e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801a1e4:	b580      	push	{r7, lr}
 801a1e6:	b088      	sub	sp, #32
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	60f8      	str	r0, [r7, #12]
 801a1ec:	60b9      	str	r1, [r7, #8]
 801a1ee:	1dbb      	adds	r3, r7, #6
 801a1f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	2288      	movs	r2, #136	@ 0x88
 801a1f6:	589b      	ldr	r3, [r3, r2]
 801a1f8:	2b20      	cmp	r3, #32
 801a1fa:	d000      	beq.n	801a1fe <HAL_UART_Transmit_DMA+0x1a>
 801a1fc:	e079      	b.n	801a2f2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 801a1fe:	68bb      	ldr	r3, [r7, #8]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d003      	beq.n	801a20c <HAL_UART_Transmit_DMA+0x28>
 801a204:	1dbb      	adds	r3, r7, #6
 801a206:	881b      	ldrh	r3, [r3, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d101      	bne.n	801a210 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 801a20c:	2301      	movs	r3, #1
 801a20e:	e071      	b.n	801a2f4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	689a      	ldr	r2, [r3, #8]
 801a214:	2380      	movs	r3, #128	@ 0x80
 801a216:	015b      	lsls	r3, r3, #5
 801a218:	429a      	cmp	r2, r3
 801a21a:	d109      	bne.n	801a230 <HAL_UART_Transmit_DMA+0x4c>
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	691b      	ldr	r3, [r3, #16]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d105      	bne.n	801a230 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801a224:	68bb      	ldr	r3, [r7, #8]
 801a226:	2201      	movs	r2, #1
 801a228:	4013      	ands	r3, r2
 801a22a:	d001      	beq.n	801a230 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 801a22c:	2301      	movs	r3, #1
 801a22e:	e061      	b.n	801a2f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	68ba      	ldr	r2, [r7, #8]
 801a234:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	1dba      	adds	r2, r7, #6
 801a23a:	2154      	movs	r1, #84	@ 0x54
 801a23c:	8812      	ldrh	r2, [r2, #0]
 801a23e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	1dba      	adds	r2, r7, #6
 801a244:	2156      	movs	r1, #86	@ 0x56
 801a246:	8812      	ldrh	r2, [r2, #0]
 801a248:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	2290      	movs	r2, #144	@ 0x90
 801a24e:	2100      	movs	r1, #0
 801a250:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	2288      	movs	r2, #136	@ 0x88
 801a256:	2121      	movs	r1, #33	@ 0x21
 801a258:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d028      	beq.n	801a2b4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a266:	4a25      	ldr	r2, [pc, #148]	@ (801a2fc <HAL_UART_Transmit_DMA+0x118>)
 801a268:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a26e:	4a24      	ldr	r2, [pc, #144]	@ (801a300 <HAL_UART_Transmit_DMA+0x11c>)
 801a270:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a276:	4a23      	ldr	r2, [pc, #140]	@ (801a304 <HAL_UART_Transmit_DMA+0x120>)
 801a278:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a27e:	2200      	movs	r2, #0
 801a280:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a28a:	0019      	movs	r1, r3
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	3328      	adds	r3, #40	@ 0x28
 801a292:	001a      	movs	r2, r3
 801a294:	1dbb      	adds	r3, r7, #6
 801a296:	881b      	ldrh	r3, [r3, #0]
 801a298:	f7f9 fa34 	bl	8013704 <HAL_DMA_Start_IT>
 801a29c:	1e03      	subs	r3, r0, #0
 801a29e:	d009      	beq.n	801a2b4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	2290      	movs	r2, #144	@ 0x90
 801a2a4:	2110      	movs	r1, #16
 801a2a6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	2288      	movs	r2, #136	@ 0x88
 801a2ac:	2120      	movs	r1, #32
 801a2ae:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 801a2b0:	2301      	movs	r3, #1
 801a2b2:	e01f      	b.n	801a2f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	2240      	movs	r2, #64	@ 0x40
 801a2ba:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a2bc:	f3ef 8310 	mrs	r3, PRIMASK
 801a2c0:	613b      	str	r3, [r7, #16]
  return(result);
 801a2c2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a2c4:	61fb      	str	r3, [r7, #28]
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2ca:	697b      	ldr	r3, [r7, #20]
 801a2cc:	f383 8810 	msr	PRIMASK, r3
}
 801a2d0:	46c0      	nop			@ (mov r8, r8)
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	689a      	ldr	r2, [r3, #8]
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2180      	movs	r1, #128	@ 0x80
 801a2de:	430a      	orrs	r2, r1
 801a2e0:	609a      	str	r2, [r3, #8]
 801a2e2:	69fb      	ldr	r3, [r7, #28]
 801a2e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2e6:	69bb      	ldr	r3, [r7, #24]
 801a2e8:	f383 8810 	msr	PRIMASK, r3
}
 801a2ec:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	e000      	b.n	801a2f4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 801a2f2:	2302      	movs	r3, #2
  }
}
 801a2f4:	0018      	movs	r0, r3
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	b008      	add	sp, #32
 801a2fa:	bd80      	pop	{r7, pc}
 801a2fc:	0801b615 	.word	0x0801b615
 801a300:	0801b6ad 	.word	0x0801b6ad
 801a304:	0801b83f 	.word	0x0801b83f

0801a308 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b088      	sub	sp, #32
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	60f8      	str	r0, [r7, #12]
 801a310:	60b9      	str	r1, [r7, #8]
 801a312:	1dbb      	adds	r3, r7, #6
 801a314:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	228c      	movs	r2, #140	@ 0x8c
 801a31a:	589b      	ldr	r3, [r3, r2]
 801a31c:	2b20      	cmp	r3, #32
 801a31e:	d154      	bne.n	801a3ca <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 801a320:	68bb      	ldr	r3, [r7, #8]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d003      	beq.n	801a32e <HAL_UART_Receive_DMA+0x26>
 801a326:	1dbb      	adds	r3, r7, #6
 801a328:	881b      	ldrh	r3, [r3, #0]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d101      	bne.n	801a332 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801a32e:	2301      	movs	r3, #1
 801a330:	e04c      	b.n	801a3cc <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	689a      	ldr	r2, [r3, #8]
 801a336:	2380      	movs	r3, #128	@ 0x80
 801a338:	015b      	lsls	r3, r3, #5
 801a33a:	429a      	cmp	r2, r3
 801a33c:	d109      	bne.n	801a352 <HAL_UART_Receive_DMA+0x4a>
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	691b      	ldr	r3, [r3, #16]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d105      	bne.n	801a352 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	2201      	movs	r2, #1
 801a34a:	4013      	ands	r3, r2
 801a34c:	d001      	beq.n	801a352 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801a34e:	2301      	movs	r3, #1
 801a350:	e03c      	b.n	801a3cc <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	2200      	movs	r2, #0
 801a356:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	4a1d      	ldr	r2, [pc, #116]	@ (801a3d4 <HAL_UART_Receive_DMA+0xcc>)
 801a35e:	4293      	cmp	r3, r2
 801a360:	d02a      	beq.n	801a3b8 <HAL_UART_Receive_DMA+0xb0>
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	4a1c      	ldr	r2, [pc, #112]	@ (801a3d8 <HAL_UART_Receive_DMA+0xd0>)
 801a368:	4293      	cmp	r3, r2
 801a36a:	d025      	beq.n	801a3b8 <HAL_UART_Receive_DMA+0xb0>
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	4a1a      	ldr	r2, [pc, #104]	@ (801a3dc <HAL_UART_Receive_DMA+0xd4>)
 801a372:	4293      	cmp	r3, r2
 801a374:	d020      	beq.n	801a3b8 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	685a      	ldr	r2, [r3, #4]
 801a37c:	2380      	movs	r3, #128	@ 0x80
 801a37e:	041b      	lsls	r3, r3, #16
 801a380:	4013      	ands	r3, r2
 801a382:	d019      	beq.n	801a3b8 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a384:	f3ef 8310 	mrs	r3, PRIMASK
 801a388:	613b      	str	r3, [r7, #16]
  return(result);
 801a38a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a38c:	61fb      	str	r3, [r7, #28]
 801a38e:	2301      	movs	r3, #1
 801a390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a392:	697b      	ldr	r3, [r7, #20]
 801a394:	f383 8810 	msr	PRIMASK, r3
}
 801a398:	46c0      	nop			@ (mov r8, r8)
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	681a      	ldr	r2, [r3, #0]
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2180      	movs	r1, #128	@ 0x80
 801a3a6:	04c9      	lsls	r1, r1, #19
 801a3a8:	430a      	orrs	r2, r1
 801a3aa:	601a      	str	r2, [r3, #0]
 801a3ac:	69fb      	ldr	r3, [r7, #28]
 801a3ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3b0:	69bb      	ldr	r3, [r7, #24]
 801a3b2:	f383 8810 	msr	PRIMASK, r3
}
 801a3b6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801a3b8:	1dbb      	adds	r3, r7, #6
 801a3ba:	881a      	ldrh	r2, [r3, #0]
 801a3bc:	68b9      	ldr	r1, [r7, #8]
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	0018      	movs	r0, r3
 801a3c2:	f000 ffdb 	bl	801b37c <UART_Start_Receive_DMA>
 801a3c6:	0003      	movs	r3, r0
 801a3c8:	e000      	b.n	801a3cc <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 801a3ca:	2302      	movs	r3, #2
  }
}
 801a3cc:	0018      	movs	r0, r3
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	b008      	add	sp, #32
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	40008000 	.word	0x40008000
 801a3d8:	40008400 	.word	0x40008400
 801a3dc:	40008c00 	.word	0x40008c00

0801a3e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b092      	sub	sp, #72	@ 0x48
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a3e8:	f3ef 8310 	mrs	r3, PRIMASK
 801a3ec:	623b      	str	r3, [r7, #32]
  return(result);
 801a3ee:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801a3f0:	647b      	str	r3, [r7, #68]	@ 0x44
 801a3f2:	2301      	movs	r3, #1
 801a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3f8:	f383 8810 	msr	PRIMASK, r3
}
 801a3fc:	46c0      	nop			@ (mov r8, r8)
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	681a      	ldr	r2, [r3, #0]
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	494d      	ldr	r1, [pc, #308]	@ (801a540 <HAL_UART_AbortReceive+0x160>)
 801a40a:	400a      	ands	r2, r1
 801a40c:	601a      	str	r2, [r3, #0]
 801a40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a410:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a414:	f383 8810 	msr	PRIMASK, r3
}
 801a418:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a41a:	f3ef 8310 	mrs	r3, PRIMASK
 801a41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801a422:	643b      	str	r3, [r7, #64]	@ 0x40
 801a424:	2301      	movs	r3, #1
 801a426:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a42a:	f383 8810 	msr	PRIMASK, r3
}
 801a42e:	46c0      	nop			@ (mov r8, r8)
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	689a      	ldr	r2, [r3, #8]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4942      	ldr	r1, [pc, #264]	@ (801a544 <HAL_UART_AbortReceive+0x164>)
 801a43c:	400a      	ands	r2, r1
 801a43e:	609a      	str	r2, [r3, #8]
 801a440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a442:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a446:	f383 8810 	msr	PRIMASK, r3
}
 801a44a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a450:	2b01      	cmp	r3, #1
 801a452:	d118      	bne.n	801a486 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a454:	f3ef 8310 	mrs	r3, PRIMASK
 801a458:	617b      	str	r3, [r7, #20]
  return(result);
 801a45a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a45e:	2301      	movs	r3, #1
 801a460:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a462:	69bb      	ldr	r3, [r7, #24]
 801a464:	f383 8810 	msr	PRIMASK, r3
}
 801a468:	46c0      	nop			@ (mov r8, r8)
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	681a      	ldr	r2, [r3, #0]
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	2110      	movs	r1, #16
 801a476:	438a      	bics	r2, r1
 801a478:	601a      	str	r2, [r3, #0]
 801a47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a47c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a47e:	69fb      	ldr	r3, [r7, #28]
 801a480:	f383 8810 	msr	PRIMASK, r3
}
 801a484:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	689b      	ldr	r3, [r3, #8]
 801a48c:	2240      	movs	r2, #64	@ 0x40
 801a48e:	4013      	ands	r3, r2
 801a490:	2b40      	cmp	r3, #64	@ 0x40
 801a492:	d139      	bne.n	801a508 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a494:	f3ef 8310 	mrs	r3, PRIMASK
 801a498:	60bb      	str	r3, [r7, #8]
  return(result);
 801a49a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a49c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a49e:	2301      	movs	r3, #1
 801a4a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	f383 8810 	msr	PRIMASK, r3
}
 801a4a8:	46c0      	nop			@ (mov r8, r8)
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	689a      	ldr	r2, [r3, #8]
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	2140      	movs	r1, #64	@ 0x40
 801a4b6:	438a      	bics	r2, r1
 801a4b8:	609a      	str	r2, [r3, #8]
 801a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4be:	693b      	ldr	r3, [r7, #16]
 801a4c0:	f383 8810 	msr	PRIMASK, r3
}
 801a4c4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	2280      	movs	r2, #128	@ 0x80
 801a4ca:	589b      	ldr	r3, [r3, r2]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d01b      	beq.n	801a508 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	2280      	movs	r2, #128	@ 0x80
 801a4d4:	589b      	ldr	r3, [r3, r2]
 801a4d6:	2200      	movs	r2, #0
 801a4d8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	2280      	movs	r2, #128	@ 0x80
 801a4de:	589b      	ldr	r3, [r3, r2]
 801a4e0:	0018      	movs	r0, r3
 801a4e2:	f7f9 f995 	bl	8013810 <HAL_DMA_Abort>
 801a4e6:	1e03      	subs	r3, r0, #0
 801a4e8:	d00e      	beq.n	801a508 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	2280      	movs	r2, #128	@ 0x80
 801a4ee:	589b      	ldr	r3, [r3, r2]
 801a4f0:	0018      	movs	r0, r3
 801a4f2:	f7f9 fb25 	bl	8013b40 <HAL_DMA_GetError>
 801a4f6:	0003      	movs	r3, r0
 801a4f8:	2b20      	cmp	r3, #32
 801a4fa:	d105      	bne.n	801a508 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	2290      	movs	r2, #144	@ 0x90
 801a500:	2110      	movs	r1, #16
 801a502:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801a504:	2303      	movs	r3, #3
 801a506:	e017      	b.n	801a538 <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	225e      	movs	r2, #94	@ 0x5e
 801a50c:	2100      	movs	r1, #0
 801a50e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	220f      	movs	r2, #15
 801a516:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	699a      	ldr	r2, [r3, #24]
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2108      	movs	r1, #8
 801a524:	430a      	orrs	r2, r1
 801a526:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	228c      	movs	r2, #140	@ 0x8c
 801a52c:	2120      	movs	r1, #32
 801a52e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2200      	movs	r2, #0
 801a534:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 801a536:	2300      	movs	r3, #0
}
 801a538:	0018      	movs	r0, r3
 801a53a:	46bd      	mov	sp, r7
 801a53c:	b012      	add	sp, #72	@ 0x48
 801a53e:	bd80      	pop	{r7, pc}
 801a540:	fffffedf 	.word	0xfffffedf
 801a544:	effffffe 	.word	0xeffffffe

0801a548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a548:	b5b0      	push	{r4, r5, r7, lr}
 801a54a:	b0aa      	sub	sp, #168	@ 0xa8
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	69db      	ldr	r3, [r3, #28]
 801a556:	22a4      	movs	r2, #164	@ 0xa4
 801a558:	18b9      	adds	r1, r7, r2
 801a55a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	20a0      	movs	r0, #160	@ 0xa0
 801a564:	1839      	adds	r1, r7, r0
 801a566:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	689b      	ldr	r3, [r3, #8]
 801a56e:	249c      	movs	r4, #156	@ 0x9c
 801a570:	1939      	adds	r1, r7, r4
 801a572:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801a574:	0011      	movs	r1, r2
 801a576:	18bb      	adds	r3, r7, r2
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4aa2      	ldr	r2, [pc, #648]	@ (801a804 <HAL_UART_IRQHandler+0x2bc>)
 801a57c:	4013      	ands	r3, r2
 801a57e:	2298      	movs	r2, #152	@ 0x98
 801a580:	18bd      	adds	r5, r7, r2
 801a582:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 801a584:	18bb      	adds	r3, r7, r2
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d11a      	bne.n	801a5c2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a58c:	187b      	adds	r3, r7, r1
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	2220      	movs	r2, #32
 801a592:	4013      	ands	r3, r2
 801a594:	d015      	beq.n	801a5c2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a596:	183b      	adds	r3, r7, r0
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	2220      	movs	r2, #32
 801a59c:	4013      	ands	r3, r2
 801a59e:	d105      	bne.n	801a5ac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a5a0:	193b      	adds	r3, r7, r4
 801a5a2:	681a      	ldr	r2, [r3, #0]
 801a5a4:	2380      	movs	r3, #128	@ 0x80
 801a5a6:	055b      	lsls	r3, r3, #21
 801a5a8:	4013      	ands	r3, r2
 801a5aa:	d00a      	beq.n	801a5c2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d100      	bne.n	801a5b6 <HAL_UART_IRQHandler+0x6e>
 801a5b4:	e2fb      	b.n	801abae <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a5ba:	687a      	ldr	r2, [r7, #4]
 801a5bc:	0010      	movs	r0, r2
 801a5be:	4798      	blx	r3
      }
      return;
 801a5c0:	e2f5      	b.n	801abae <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801a5c2:	2398      	movs	r3, #152	@ 0x98
 801a5c4:	18fb      	adds	r3, r7, r3
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d100      	bne.n	801a5ce <HAL_UART_IRQHandler+0x86>
 801a5cc:	e122      	b.n	801a814 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801a5ce:	239c      	movs	r3, #156	@ 0x9c
 801a5d0:	18fb      	adds	r3, r7, r3
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	4a8c      	ldr	r2, [pc, #560]	@ (801a808 <HAL_UART_IRQHandler+0x2c0>)
 801a5d6:	4013      	ands	r3, r2
 801a5d8:	d106      	bne.n	801a5e8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801a5da:	23a0      	movs	r3, #160	@ 0xa0
 801a5dc:	18fb      	adds	r3, r7, r3
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	4a8a      	ldr	r2, [pc, #552]	@ (801a80c <HAL_UART_IRQHandler+0x2c4>)
 801a5e2:	4013      	ands	r3, r2
 801a5e4:	d100      	bne.n	801a5e8 <HAL_UART_IRQHandler+0xa0>
 801a5e6:	e115      	b.n	801a814 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a5e8:	23a4      	movs	r3, #164	@ 0xa4
 801a5ea:	18fb      	adds	r3, r7, r3
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	2201      	movs	r2, #1
 801a5f0:	4013      	ands	r3, r2
 801a5f2:	d012      	beq.n	801a61a <HAL_UART_IRQHandler+0xd2>
 801a5f4:	23a0      	movs	r3, #160	@ 0xa0
 801a5f6:	18fb      	adds	r3, r7, r3
 801a5f8:	681a      	ldr	r2, [r3, #0]
 801a5fa:	2380      	movs	r3, #128	@ 0x80
 801a5fc:	005b      	lsls	r3, r3, #1
 801a5fe:	4013      	ands	r3, r2
 801a600:	d00b      	beq.n	801a61a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	2201      	movs	r2, #1
 801a608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	2290      	movs	r2, #144	@ 0x90
 801a60e:	589b      	ldr	r3, [r3, r2]
 801a610:	2201      	movs	r2, #1
 801a612:	431a      	orrs	r2, r3
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	2190      	movs	r1, #144	@ 0x90
 801a618:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a61a:	23a4      	movs	r3, #164	@ 0xa4
 801a61c:	18fb      	adds	r3, r7, r3
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	2202      	movs	r2, #2
 801a622:	4013      	ands	r3, r2
 801a624:	d011      	beq.n	801a64a <HAL_UART_IRQHandler+0x102>
 801a626:	239c      	movs	r3, #156	@ 0x9c
 801a628:	18fb      	adds	r3, r7, r3
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	2201      	movs	r2, #1
 801a62e:	4013      	ands	r3, r2
 801a630:	d00b      	beq.n	801a64a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2202      	movs	r2, #2
 801a638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	2290      	movs	r2, #144	@ 0x90
 801a63e:	589b      	ldr	r3, [r3, r2]
 801a640:	2204      	movs	r2, #4
 801a642:	431a      	orrs	r2, r3
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	2190      	movs	r1, #144	@ 0x90
 801a648:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a64a:	23a4      	movs	r3, #164	@ 0xa4
 801a64c:	18fb      	adds	r3, r7, r3
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	2204      	movs	r2, #4
 801a652:	4013      	ands	r3, r2
 801a654:	d011      	beq.n	801a67a <HAL_UART_IRQHandler+0x132>
 801a656:	239c      	movs	r3, #156	@ 0x9c
 801a658:	18fb      	adds	r3, r7, r3
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	2201      	movs	r2, #1
 801a65e:	4013      	ands	r3, r2
 801a660:	d00b      	beq.n	801a67a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	2204      	movs	r2, #4
 801a668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	2290      	movs	r2, #144	@ 0x90
 801a66e:	589b      	ldr	r3, [r3, r2]
 801a670:	2202      	movs	r2, #2
 801a672:	431a      	orrs	r2, r3
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	2190      	movs	r1, #144	@ 0x90
 801a678:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801a67a:	23a4      	movs	r3, #164	@ 0xa4
 801a67c:	18fb      	adds	r3, r7, r3
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	2208      	movs	r2, #8
 801a682:	4013      	ands	r3, r2
 801a684:	d017      	beq.n	801a6b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a686:	23a0      	movs	r3, #160	@ 0xa0
 801a688:	18fb      	adds	r3, r7, r3
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	2220      	movs	r2, #32
 801a68e:	4013      	ands	r3, r2
 801a690:	d105      	bne.n	801a69e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801a692:	239c      	movs	r3, #156	@ 0x9c
 801a694:	18fb      	adds	r3, r7, r3
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	4a5b      	ldr	r2, [pc, #364]	@ (801a808 <HAL_UART_IRQHandler+0x2c0>)
 801a69a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a69c:	d00b      	beq.n	801a6b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	2208      	movs	r2, #8
 801a6a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	2290      	movs	r2, #144	@ 0x90
 801a6aa:	589b      	ldr	r3, [r3, r2]
 801a6ac:	2208      	movs	r2, #8
 801a6ae:	431a      	orrs	r2, r3
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	2190      	movs	r1, #144	@ 0x90
 801a6b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801a6b6:	23a4      	movs	r3, #164	@ 0xa4
 801a6b8:	18fb      	adds	r3, r7, r3
 801a6ba:	681a      	ldr	r2, [r3, #0]
 801a6bc:	2380      	movs	r3, #128	@ 0x80
 801a6be:	011b      	lsls	r3, r3, #4
 801a6c0:	4013      	ands	r3, r2
 801a6c2:	d013      	beq.n	801a6ec <HAL_UART_IRQHandler+0x1a4>
 801a6c4:	23a0      	movs	r3, #160	@ 0xa0
 801a6c6:	18fb      	adds	r3, r7, r3
 801a6c8:	681a      	ldr	r2, [r3, #0]
 801a6ca:	2380      	movs	r3, #128	@ 0x80
 801a6cc:	04db      	lsls	r3, r3, #19
 801a6ce:	4013      	ands	r3, r2
 801a6d0:	d00c      	beq.n	801a6ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2280      	movs	r2, #128	@ 0x80
 801a6d8:	0112      	lsls	r2, r2, #4
 801a6da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2290      	movs	r2, #144	@ 0x90
 801a6e0:	589b      	ldr	r3, [r3, r2]
 801a6e2:	2220      	movs	r2, #32
 801a6e4:	431a      	orrs	r2, r3
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2190      	movs	r1, #144	@ 0x90
 801a6ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	2290      	movs	r2, #144	@ 0x90
 801a6f0:	589b      	ldr	r3, [r3, r2]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d100      	bne.n	801a6f8 <HAL_UART_IRQHandler+0x1b0>
 801a6f6:	e25c      	b.n	801abb2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a6f8:	23a4      	movs	r3, #164	@ 0xa4
 801a6fa:	18fb      	adds	r3, r7, r3
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	2220      	movs	r2, #32
 801a700:	4013      	ands	r3, r2
 801a702:	d015      	beq.n	801a730 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a704:	23a0      	movs	r3, #160	@ 0xa0
 801a706:	18fb      	adds	r3, r7, r3
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	2220      	movs	r2, #32
 801a70c:	4013      	ands	r3, r2
 801a70e:	d106      	bne.n	801a71e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a710:	239c      	movs	r3, #156	@ 0x9c
 801a712:	18fb      	adds	r3, r7, r3
 801a714:	681a      	ldr	r2, [r3, #0]
 801a716:	2380      	movs	r3, #128	@ 0x80
 801a718:	055b      	lsls	r3, r3, #21
 801a71a:	4013      	ands	r3, r2
 801a71c:	d008      	beq.n	801a730 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a722:	2b00      	cmp	r3, #0
 801a724:	d004      	beq.n	801a730 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a72a:	687a      	ldr	r2, [r7, #4]
 801a72c:	0010      	movs	r0, r2
 801a72e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	2290      	movs	r2, #144	@ 0x90
 801a734:	589b      	ldr	r3, [r3, r2]
 801a736:	2194      	movs	r1, #148	@ 0x94
 801a738:	187a      	adds	r2, r7, r1
 801a73a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	689b      	ldr	r3, [r3, #8]
 801a742:	2240      	movs	r2, #64	@ 0x40
 801a744:	4013      	ands	r3, r2
 801a746:	2b40      	cmp	r3, #64	@ 0x40
 801a748:	d004      	beq.n	801a754 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801a74a:	187b      	adds	r3, r7, r1
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	2228      	movs	r2, #40	@ 0x28
 801a750:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a752:	d04c      	beq.n	801a7ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	0018      	movs	r0, r3
 801a758:	f000 fef6 	bl	801b548 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	689b      	ldr	r3, [r3, #8]
 801a762:	2240      	movs	r2, #64	@ 0x40
 801a764:	4013      	ands	r3, r2
 801a766:	2b40      	cmp	r3, #64	@ 0x40
 801a768:	d13c      	bne.n	801a7e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a76a:	f3ef 8310 	mrs	r3, PRIMASK
 801a76e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801a770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a772:	2090      	movs	r0, #144	@ 0x90
 801a774:	183a      	adds	r2, r7, r0
 801a776:	6013      	str	r3, [r2, #0]
 801a778:	2301      	movs	r3, #1
 801a77a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a77c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a77e:	f383 8810 	msr	PRIMASK, r3
}
 801a782:	46c0      	nop			@ (mov r8, r8)
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	689a      	ldr	r2, [r3, #8]
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	2140      	movs	r1, #64	@ 0x40
 801a790:	438a      	bics	r2, r1
 801a792:	609a      	str	r2, [r3, #8]
 801a794:	183b      	adds	r3, r7, r0
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a79a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a79c:	f383 8810 	msr	PRIMASK, r3
}
 801a7a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	2280      	movs	r2, #128	@ 0x80
 801a7a6:	589b      	ldr	r3, [r3, r2]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d016      	beq.n	801a7da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2280      	movs	r2, #128	@ 0x80
 801a7b0:	589b      	ldr	r3, [r3, r2]
 801a7b2:	4a17      	ldr	r2, [pc, #92]	@ (801a810 <HAL_UART_IRQHandler+0x2c8>)
 801a7b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2280      	movs	r2, #128	@ 0x80
 801a7ba:	589b      	ldr	r3, [r3, r2]
 801a7bc:	0018      	movs	r0, r3
 801a7be:	f7f9 f887 	bl	80138d0 <HAL_DMA_Abort_IT>
 801a7c2:	1e03      	subs	r3, r0, #0
 801a7c4:	d01c      	beq.n	801a800 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	2280      	movs	r2, #128	@ 0x80
 801a7ca:	589b      	ldr	r3, [r3, r2]
 801a7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a7ce:	687a      	ldr	r2, [r7, #4]
 801a7d0:	2180      	movs	r1, #128	@ 0x80
 801a7d2:	5852      	ldr	r2, [r2, r1]
 801a7d4:	0010      	movs	r0, r2
 801a7d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a7d8:	e012      	b.n	801a800 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	0018      	movs	r0, r3
 801a7de:	f000 fa19 	bl	801ac14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a7e2:	e00d      	b.n	801a800 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	0018      	movs	r0, r3
 801a7e8:	f000 fa14 	bl	801ac14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a7ec:	e008      	b.n	801a800 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	0018      	movs	r0, r3
 801a7f2:	f000 fa0f 	bl	801ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	2290      	movs	r2, #144	@ 0x90
 801a7fa:	2100      	movs	r1, #0
 801a7fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801a7fe:	e1d8      	b.n	801abb2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a800:	46c0      	nop			@ (mov r8, r8)
    return;
 801a802:	e1d6      	b.n	801abb2 <HAL_UART_IRQHandler+0x66a>
 801a804:	0000080f 	.word	0x0000080f
 801a808:	10000001 	.word	0x10000001
 801a80c:	04000120 	.word	0x04000120
 801a810:	0801b8c5 	.word	0x0801b8c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a818:	2b01      	cmp	r3, #1
 801a81a:	d000      	beq.n	801a81e <HAL_UART_IRQHandler+0x2d6>
 801a81c:	e15d      	b.n	801aada <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801a81e:	23a4      	movs	r3, #164	@ 0xa4
 801a820:	18fb      	adds	r3, r7, r3
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	2210      	movs	r2, #16
 801a826:	4013      	ands	r3, r2
 801a828:	d100      	bne.n	801a82c <HAL_UART_IRQHandler+0x2e4>
 801a82a:	e156      	b.n	801aada <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801a82c:	23a0      	movs	r3, #160	@ 0xa0
 801a82e:	18fb      	adds	r3, r7, r3
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	2210      	movs	r2, #16
 801a834:	4013      	ands	r3, r2
 801a836:	d100      	bne.n	801a83a <HAL_UART_IRQHandler+0x2f2>
 801a838:	e14f      	b.n	801aada <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	2210      	movs	r2, #16
 801a840:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	689b      	ldr	r3, [r3, #8]
 801a848:	2240      	movs	r2, #64	@ 0x40
 801a84a:	4013      	ands	r3, r2
 801a84c:	2b40      	cmp	r3, #64	@ 0x40
 801a84e:	d000      	beq.n	801a852 <HAL_UART_IRQHandler+0x30a>
 801a850:	e0c3      	b.n	801a9da <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2280      	movs	r2, #128	@ 0x80
 801a856:	589b      	ldr	r3, [r3, r2]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	685a      	ldr	r2, [r3, #4]
 801a85c:	217e      	movs	r1, #126	@ 0x7e
 801a85e:	187b      	adds	r3, r7, r1
 801a860:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801a862:	187b      	adds	r3, r7, r1
 801a864:	881b      	ldrh	r3, [r3, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d100      	bne.n	801a86c <HAL_UART_IRQHandler+0x324>
 801a86a:	e097      	b.n	801a99c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	225c      	movs	r2, #92	@ 0x5c
 801a870:	5a9b      	ldrh	r3, [r3, r2]
 801a872:	187a      	adds	r2, r7, r1
 801a874:	8812      	ldrh	r2, [r2, #0]
 801a876:	429a      	cmp	r2, r3
 801a878:	d300      	bcc.n	801a87c <HAL_UART_IRQHandler+0x334>
 801a87a:	e08f      	b.n	801a99c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	187a      	adds	r2, r7, r1
 801a880:	215e      	movs	r1, #94	@ 0x5e
 801a882:	8812      	ldrh	r2, [r2, #0]
 801a884:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	2280      	movs	r2, #128	@ 0x80
 801a88a:	589b      	ldr	r3, [r3, r2]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	2220      	movs	r2, #32
 801a892:	4013      	ands	r3, r2
 801a894:	d170      	bne.n	801a978 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a896:	f3ef 8310 	mrs	r3, PRIMASK
 801a89a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a89e:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a8a0:	2301      	movs	r3, #1
 801a8a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8a6:	f383 8810 	msr	PRIMASK, r3
}
 801a8aa:	46c0      	nop			@ (mov r8, r8)
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	681a      	ldr	r2, [r3, #0]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	49c4      	ldr	r1, [pc, #784]	@ (801abc8 <HAL_UART_IRQHandler+0x680>)
 801a8b8:	400a      	ands	r2, r1
 801a8ba:	601a      	str	r2, [r3, #0]
 801a8bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8c2:	f383 8810 	msr	PRIMASK, r3
}
 801a8c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a8c8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801a8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a8d0:	677b      	str	r3, [r7, #116]	@ 0x74
 801a8d2:	2301      	movs	r3, #1
 801a8d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8d8:	f383 8810 	msr	PRIMASK, r3
}
 801a8dc:	46c0      	nop			@ (mov r8, r8)
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	689a      	ldr	r2, [r3, #8]
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	2101      	movs	r1, #1
 801a8ea:	438a      	bics	r2, r1
 801a8ec:	609a      	str	r2, [r3, #8]
 801a8ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a8f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a8f4:	f383 8810 	msr	PRIMASK, r3
}
 801a8f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a8fa:	f3ef 8310 	mrs	r3, PRIMASK
 801a8fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801a900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a902:	673b      	str	r3, [r7, #112]	@ 0x70
 801a904:	2301      	movs	r3, #1
 801a906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a90a:	f383 8810 	msr	PRIMASK, r3
}
 801a90e:	46c0      	nop			@ (mov r8, r8)
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	689a      	ldr	r2, [r3, #8]
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	2140      	movs	r1, #64	@ 0x40
 801a91c:	438a      	bics	r2, r1
 801a91e:	609a      	str	r2, [r3, #8]
 801a920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a922:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a926:	f383 8810 	msr	PRIMASK, r3
}
 801a92a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	228c      	movs	r2, #140	@ 0x8c
 801a930:	2120      	movs	r1, #32
 801a932:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	2200      	movs	r2, #0
 801a938:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a93a:	f3ef 8310 	mrs	r3, PRIMASK
 801a93e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801a940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a942:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a944:	2301      	movs	r3, #1
 801a946:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a94a:	f383 8810 	msr	PRIMASK, r3
}
 801a94e:	46c0      	nop			@ (mov r8, r8)
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	681a      	ldr	r2, [r3, #0]
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	2110      	movs	r1, #16
 801a95c:	438a      	bics	r2, r1
 801a95e:	601a      	str	r2, [r3, #0]
 801a960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a966:	f383 8810 	msr	PRIMASK, r3
}
 801a96a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	2280      	movs	r2, #128	@ 0x80
 801a970:	589b      	ldr	r3, [r3, r2]
 801a972:	0018      	movs	r0, r3
 801a974:	f7f8 ff4c 	bl	8013810 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	2202      	movs	r2, #2
 801a97c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	225c      	movs	r2, #92	@ 0x5c
 801a982:	5a9a      	ldrh	r2, [r3, r2]
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	215e      	movs	r1, #94	@ 0x5e
 801a988:	5a5b      	ldrh	r3, [r3, r1]
 801a98a:	b29b      	uxth	r3, r3
 801a98c:	1ad3      	subs	r3, r2, r3
 801a98e:	b29a      	uxth	r2, r3
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	0011      	movs	r1, r2
 801a994:	0018      	movs	r0, r3
 801a996:	f000 f945 	bl	801ac24 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801a99a:	e10c      	b.n	801abb6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	225c      	movs	r2, #92	@ 0x5c
 801a9a0:	5a9b      	ldrh	r3, [r3, r2]
 801a9a2:	227e      	movs	r2, #126	@ 0x7e
 801a9a4:	18ba      	adds	r2, r7, r2
 801a9a6:	8812      	ldrh	r2, [r2, #0]
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	d000      	beq.n	801a9ae <HAL_UART_IRQHandler+0x466>
 801a9ac:	e103      	b.n	801abb6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	2280      	movs	r2, #128	@ 0x80
 801a9b2:	589b      	ldr	r3, [r3, r2]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	2220      	movs	r2, #32
 801a9ba:	4013      	ands	r3, r2
 801a9bc:	2b20      	cmp	r3, #32
 801a9be:	d000      	beq.n	801a9c2 <HAL_UART_IRQHandler+0x47a>
 801a9c0:	e0f9      	b.n	801abb6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2202      	movs	r2, #2
 801a9c6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	225c      	movs	r2, #92	@ 0x5c
 801a9cc:	5a9a      	ldrh	r2, [r3, r2]
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	0011      	movs	r1, r2
 801a9d2:	0018      	movs	r0, r3
 801a9d4:	f000 f926 	bl	801ac24 <HAL_UARTEx_RxEventCallback>
      return;
 801a9d8:	e0ed      	b.n	801abb6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	225c      	movs	r2, #92	@ 0x5c
 801a9de:	5a99      	ldrh	r1, [r3, r2]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	225e      	movs	r2, #94	@ 0x5e
 801a9e4:	5a9b      	ldrh	r3, [r3, r2]
 801a9e6:	b29a      	uxth	r2, r3
 801a9e8:	208e      	movs	r0, #142	@ 0x8e
 801a9ea:	183b      	adds	r3, r7, r0
 801a9ec:	1a8a      	subs	r2, r1, r2
 801a9ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	225e      	movs	r2, #94	@ 0x5e
 801a9f4:	5a9b      	ldrh	r3, [r3, r2]
 801a9f6:	b29b      	uxth	r3, r3
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d100      	bne.n	801a9fe <HAL_UART_IRQHandler+0x4b6>
 801a9fc:	e0dd      	b.n	801abba <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 801a9fe:	183b      	adds	r3, r7, r0
 801aa00:	881b      	ldrh	r3, [r3, #0]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d100      	bne.n	801aa08 <HAL_UART_IRQHandler+0x4c0>
 801aa06:	e0d8      	b.n	801abba <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aa08:	f3ef 8310 	mrs	r3, PRIMASK
 801aa0c:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa0e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801aa10:	2488      	movs	r4, #136	@ 0x88
 801aa12:	193a      	adds	r2, r7, r4
 801aa14:	6013      	str	r3, [r2, #0]
 801aa16:	2301      	movs	r3, #1
 801aa18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	f383 8810 	msr	PRIMASK, r3
}
 801aa20:	46c0      	nop			@ (mov r8, r8)
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	681a      	ldr	r2, [r3, #0]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4967      	ldr	r1, [pc, #412]	@ (801abcc <HAL_UART_IRQHandler+0x684>)
 801aa2e:	400a      	ands	r2, r1
 801aa30:	601a      	str	r2, [r3, #0]
 801aa32:	193b      	adds	r3, r7, r4
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa38:	697b      	ldr	r3, [r7, #20]
 801aa3a:	f383 8810 	msr	PRIMASK, r3
}
 801aa3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aa40:	f3ef 8310 	mrs	r3, PRIMASK
 801aa44:	61bb      	str	r3, [r7, #24]
  return(result);
 801aa46:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801aa48:	2484      	movs	r4, #132	@ 0x84
 801aa4a:	193a      	adds	r2, r7, r4
 801aa4c:	6013      	str	r3, [r2, #0]
 801aa4e:	2301      	movs	r3, #1
 801aa50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa52:	69fb      	ldr	r3, [r7, #28]
 801aa54:	f383 8810 	msr	PRIMASK, r3
}
 801aa58:	46c0      	nop			@ (mov r8, r8)
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	689a      	ldr	r2, [r3, #8]
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	495a      	ldr	r1, [pc, #360]	@ (801abd0 <HAL_UART_IRQHandler+0x688>)
 801aa66:	400a      	ands	r2, r1
 801aa68:	609a      	str	r2, [r3, #8]
 801aa6a:	193b      	adds	r3, r7, r4
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa70:	6a3b      	ldr	r3, [r7, #32]
 801aa72:	f383 8810 	msr	PRIMASK, r3
}
 801aa76:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	228c      	movs	r2, #140	@ 0x8c
 801aa7c:	2120      	movs	r1, #32
 801aa7e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	2200      	movs	r2, #0
 801aa84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	2200      	movs	r2, #0
 801aa8a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aa8c:	f3ef 8310 	mrs	r3, PRIMASK
 801aa90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa94:	2480      	movs	r4, #128	@ 0x80
 801aa96:	193a      	adds	r2, r7, r4
 801aa98:	6013      	str	r3, [r2, #0]
 801aa9a:	2301      	movs	r3, #1
 801aa9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aaa0:	f383 8810 	msr	PRIMASK, r3
}
 801aaa4:	46c0      	nop			@ (mov r8, r8)
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	2110      	movs	r1, #16
 801aab2:	438a      	bics	r2, r1
 801aab4:	601a      	str	r2, [r3, #0]
 801aab6:	193b      	adds	r3, r7, r4
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aabe:	f383 8810 	msr	PRIMASK, r3
}
 801aac2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	2202      	movs	r2, #2
 801aac8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801aaca:	183b      	adds	r3, r7, r0
 801aacc:	881a      	ldrh	r2, [r3, #0]
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	0011      	movs	r1, r2
 801aad2:	0018      	movs	r0, r3
 801aad4:	f000 f8a6 	bl	801ac24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801aad8:	e06f      	b.n	801abba <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801aada:	23a4      	movs	r3, #164	@ 0xa4
 801aadc:	18fb      	adds	r3, r7, r3
 801aade:	681a      	ldr	r2, [r3, #0]
 801aae0:	2380      	movs	r3, #128	@ 0x80
 801aae2:	035b      	lsls	r3, r3, #13
 801aae4:	4013      	ands	r3, r2
 801aae6:	d010      	beq.n	801ab0a <HAL_UART_IRQHandler+0x5c2>
 801aae8:	239c      	movs	r3, #156	@ 0x9c
 801aaea:	18fb      	adds	r3, r7, r3
 801aaec:	681a      	ldr	r2, [r3, #0]
 801aaee:	2380      	movs	r3, #128	@ 0x80
 801aaf0:	03db      	lsls	r3, r3, #15
 801aaf2:	4013      	ands	r3, r2
 801aaf4:	d009      	beq.n	801ab0a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	2280      	movs	r2, #128	@ 0x80
 801aafc:	0352      	lsls	r2, r2, #13
 801aafe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	0018      	movs	r0, r3
 801ab04:	f000 ff1d 	bl	801b942 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ab08:	e05a      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801ab0a:	23a4      	movs	r3, #164	@ 0xa4
 801ab0c:	18fb      	adds	r3, r7, r3
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	2280      	movs	r2, #128	@ 0x80
 801ab12:	4013      	ands	r3, r2
 801ab14:	d016      	beq.n	801ab44 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801ab16:	23a0      	movs	r3, #160	@ 0xa0
 801ab18:	18fb      	adds	r3, r7, r3
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	2280      	movs	r2, #128	@ 0x80
 801ab1e:	4013      	ands	r3, r2
 801ab20:	d106      	bne.n	801ab30 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801ab22:	239c      	movs	r3, #156	@ 0x9c
 801ab24:	18fb      	adds	r3, r7, r3
 801ab26:	681a      	ldr	r2, [r3, #0]
 801ab28:	2380      	movs	r3, #128	@ 0x80
 801ab2a:	041b      	lsls	r3, r3, #16
 801ab2c:	4013      	ands	r3, r2
 801ab2e:	d009      	beq.n	801ab44 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d042      	beq.n	801abbe <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ab3c:	687a      	ldr	r2, [r7, #4]
 801ab3e:	0010      	movs	r0, r2
 801ab40:	4798      	blx	r3
    }
    return;
 801ab42:	e03c      	b.n	801abbe <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801ab44:	23a4      	movs	r3, #164	@ 0xa4
 801ab46:	18fb      	adds	r3, r7, r3
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2240      	movs	r2, #64	@ 0x40
 801ab4c:	4013      	ands	r3, r2
 801ab4e:	d00a      	beq.n	801ab66 <HAL_UART_IRQHandler+0x61e>
 801ab50:	23a0      	movs	r3, #160	@ 0xa0
 801ab52:	18fb      	adds	r3, r7, r3
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	2240      	movs	r2, #64	@ 0x40
 801ab58:	4013      	ands	r3, r2
 801ab5a:	d004      	beq.n	801ab66 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	0018      	movs	r0, r3
 801ab60:	f000 fec3 	bl	801b8ea <UART_EndTransmit_IT>
    return;
 801ab64:	e02c      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801ab66:	23a4      	movs	r3, #164	@ 0xa4
 801ab68:	18fb      	adds	r3, r7, r3
 801ab6a:	681a      	ldr	r2, [r3, #0]
 801ab6c:	2380      	movs	r3, #128	@ 0x80
 801ab6e:	041b      	lsls	r3, r3, #16
 801ab70:	4013      	ands	r3, r2
 801ab72:	d00b      	beq.n	801ab8c <HAL_UART_IRQHandler+0x644>
 801ab74:	23a0      	movs	r3, #160	@ 0xa0
 801ab76:	18fb      	adds	r3, r7, r3
 801ab78:	681a      	ldr	r2, [r3, #0]
 801ab7a:	2380      	movs	r3, #128	@ 0x80
 801ab7c:	05db      	lsls	r3, r3, #23
 801ab7e:	4013      	ands	r3, r2
 801ab80:	d004      	beq.n	801ab8c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	0018      	movs	r0, r3
 801ab86:	f000 feec 	bl	801b962 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ab8a:	e019      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801ab8c:	23a4      	movs	r3, #164	@ 0xa4
 801ab8e:	18fb      	adds	r3, r7, r3
 801ab90:	681a      	ldr	r2, [r3, #0]
 801ab92:	2380      	movs	r3, #128	@ 0x80
 801ab94:	045b      	lsls	r3, r3, #17
 801ab96:	4013      	ands	r3, r2
 801ab98:	d012      	beq.n	801abc0 <HAL_UART_IRQHandler+0x678>
 801ab9a:	23a0      	movs	r3, #160	@ 0xa0
 801ab9c:	18fb      	adds	r3, r7, r3
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	da0d      	bge.n	801abc0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	0018      	movs	r0, r3
 801aba8:	f000 fed3 	bl	801b952 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801abac:	e008      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
      return;
 801abae:	46c0      	nop			@ (mov r8, r8)
 801abb0:	e006      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
    return;
 801abb2:	46c0      	nop			@ (mov r8, r8)
 801abb4:	e004      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
      return;
 801abb6:	46c0      	nop			@ (mov r8, r8)
 801abb8:	e002      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
      return;
 801abba:	46c0      	nop			@ (mov r8, r8)
 801abbc:	e000      	b.n	801abc0 <HAL_UART_IRQHandler+0x678>
    return;
 801abbe:	46c0      	nop			@ (mov r8, r8)
  }
}
 801abc0:	46bd      	mov	sp, r7
 801abc2:	b02a      	add	sp, #168	@ 0xa8
 801abc4:	bdb0      	pop	{r4, r5, r7, pc}
 801abc6:	46c0      	nop			@ (mov r8, r8)
 801abc8:	fffffeff 	.word	0xfffffeff
 801abcc:	fffffedf 	.word	0xfffffedf
 801abd0:	effffffe 	.word	0xeffffffe

0801abd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b082      	sub	sp, #8
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801abdc:	46c0      	nop			@ (mov r8, r8)
 801abde:	46bd      	mov	sp, r7
 801abe0:	b002      	add	sp, #8
 801abe2:	bd80      	pop	{r7, pc}

0801abe4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b082      	sub	sp, #8
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801abec:	46c0      	nop			@ (mov r8, r8)
 801abee:	46bd      	mov	sp, r7
 801abf0:	b002      	add	sp, #8
 801abf2:	bd80      	pop	{r7, pc}

0801abf4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b082      	sub	sp, #8
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801abfc:	46c0      	nop			@ (mov r8, r8)
 801abfe:	46bd      	mov	sp, r7
 801ac00:	b002      	add	sp, #8
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b082      	sub	sp, #8
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ac0c:	46c0      	nop			@ (mov r8, r8)
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	b002      	add	sp, #8
 801ac12:	bd80      	pop	{r7, pc}

0801ac14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b082      	sub	sp, #8
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801ac1c:	46c0      	nop			@ (mov r8, r8)
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	b002      	add	sp, #8
 801ac22:	bd80      	pop	{r7, pc}

0801ac24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b082      	sub	sp, #8
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
 801ac2c:	000a      	movs	r2, r1
 801ac2e:	1cbb      	adds	r3, r7, #2
 801ac30:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801ac32:	46c0      	nop			@ (mov r8, r8)
 801ac34:	46bd      	mov	sp, r7
 801ac36:	b002      	add	sp, #8
 801ac38:	bd80      	pop	{r7, pc}
	...

0801ac3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ac3c:	b5b0      	push	{r4, r5, r7, lr}
 801ac3e:	b092      	sub	sp, #72	@ 0x48
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ac44:	231f      	movs	r3, #31
 801ac46:	2220      	movs	r2, #32
 801ac48:	189b      	adds	r3, r3, r2
 801ac4a:	19db      	adds	r3, r3, r7
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4ac8      	ldr	r2, [pc, #800]	@ (801af78 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac58:	689a      	ldr	r2, [r3, #8]
 801ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac5c:	691b      	ldr	r3, [r3, #16]
 801ac5e:	431a      	orrs	r2, r3
 801ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac62:	695b      	ldr	r3, [r3, #20]
 801ac64:	431a      	orrs	r2, r3
 801ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac68:	69db      	ldr	r3, [r3, #28]
 801ac6a:	4313      	orrs	r3, r2
 801ac6c:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801ac6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	4ac1      	ldr	r2, [pc, #772]	@ (801af7c <UART_SetConfig+0x340>)
 801ac76:	4013      	ands	r3, r2
 801ac78:	0019      	movs	r1, r3
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7c:	681a      	ldr	r2, [r3, #0]
 801ac7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac80:	430b      	orrs	r3, r1
 801ac82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	685b      	ldr	r3, [r3, #4]
 801ac8a:	4abd      	ldr	r2, [pc, #756]	@ (801af80 <UART_SetConfig+0x344>)
 801ac8c:	4013      	ands	r3, r2
 801ac8e:	0018      	movs	r0, r3
 801ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac92:	68d9      	ldr	r1, [r3, #12]
 801ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac96:	681a      	ldr	r2, [r3, #0]
 801ac98:	0003      	movs	r3, r0
 801ac9a:	430b      	orrs	r3, r1
 801ac9c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca0:	699b      	ldr	r3, [r3, #24]
 801aca2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	4ab3      	ldr	r2, [pc, #716]	@ (801af78 <UART_SetConfig+0x33c>)
 801acaa:	4293      	cmp	r3, r2
 801acac:	d00e      	beq.n	801accc <UART_SetConfig+0x90>
 801acae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	4ab4      	ldr	r2, [pc, #720]	@ (801af84 <UART_SetConfig+0x348>)
 801acb4:	4293      	cmp	r3, r2
 801acb6:	d009      	beq.n	801accc <UART_SetConfig+0x90>
 801acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	4ab2      	ldr	r2, [pc, #712]	@ (801af88 <UART_SetConfig+0x34c>)
 801acbe:	4293      	cmp	r3, r2
 801acc0:	d004      	beq.n	801accc <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acc4:	6a1b      	ldr	r3, [r3, #32]
 801acc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801acc8:	4313      	orrs	r3, r2
 801acca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	689b      	ldr	r3, [r3, #8]
 801acd2:	4aae      	ldr	r2, [pc, #696]	@ (801af8c <UART_SetConfig+0x350>)
 801acd4:	4013      	ands	r3, r2
 801acd6:	0019      	movs	r1, r3
 801acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801acde:	430b      	orrs	r3, r1
 801ace0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ace8:	220f      	movs	r2, #15
 801acea:	4393      	bics	r3, r2
 801acec:	0018      	movs	r0, r3
 801acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acf0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acf4:	681a      	ldr	r2, [r3, #0]
 801acf6:	0003      	movs	r3, r0
 801acf8:	430b      	orrs	r3, r1
 801acfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	4aa3      	ldr	r2, [pc, #652]	@ (801af90 <UART_SetConfig+0x354>)
 801ad02:	4293      	cmp	r3, r2
 801ad04:	d102      	bne.n	801ad0c <UART_SetConfig+0xd0>
 801ad06:	2301      	movs	r3, #1
 801ad08:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad0a:	e033      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	4aa0      	ldr	r2, [pc, #640]	@ (801af94 <UART_SetConfig+0x358>)
 801ad12:	4293      	cmp	r3, r2
 801ad14:	d102      	bne.n	801ad1c <UART_SetConfig+0xe0>
 801ad16:	2302      	movs	r3, #2
 801ad18:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad1a:	e02b      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	4a9d      	ldr	r2, [pc, #628]	@ (801af98 <UART_SetConfig+0x35c>)
 801ad22:	4293      	cmp	r3, r2
 801ad24:	d103      	bne.n	801ad2e <UART_SetConfig+0xf2>
 801ad26:	2380      	movs	r3, #128	@ 0x80
 801ad28:	025b      	lsls	r3, r3, #9
 801ad2a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad2c:	e022      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	4a9a      	ldr	r2, [pc, #616]	@ (801af9c <UART_SetConfig+0x360>)
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d103      	bne.n	801ad40 <UART_SetConfig+0x104>
 801ad38:	2380      	movs	r3, #128	@ 0x80
 801ad3a:	029b      	lsls	r3, r3, #10
 801ad3c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad3e:	e019      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	4a8c      	ldr	r2, [pc, #560]	@ (801af78 <UART_SetConfig+0x33c>)
 801ad46:	4293      	cmp	r3, r2
 801ad48:	d102      	bne.n	801ad50 <UART_SetConfig+0x114>
 801ad4a:	2310      	movs	r3, #16
 801ad4c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad4e:	e011      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	4a8b      	ldr	r2, [pc, #556]	@ (801af84 <UART_SetConfig+0x348>)
 801ad56:	4293      	cmp	r3, r2
 801ad58:	d102      	bne.n	801ad60 <UART_SetConfig+0x124>
 801ad5a:	2308      	movs	r3, #8
 801ad5c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad5e:	e009      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4a88      	ldr	r2, [pc, #544]	@ (801af88 <UART_SetConfig+0x34c>)
 801ad66:	4293      	cmp	r3, r2
 801ad68:	d102      	bne.n	801ad70 <UART_SetConfig+0x134>
 801ad6a:	2304      	movs	r3, #4
 801ad6c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad6e:	e001      	b.n	801ad74 <UART_SetConfig+0x138>
 801ad70:	2300      	movs	r3, #0
 801ad72:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801ad74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	4a7f      	ldr	r2, [pc, #508]	@ (801af78 <UART_SetConfig+0x33c>)
 801ad7a:	4293      	cmp	r3, r2
 801ad7c:	d00a      	beq.n	801ad94 <UART_SetConfig+0x158>
 801ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	4a80      	ldr	r2, [pc, #512]	@ (801af84 <UART_SetConfig+0x348>)
 801ad84:	4293      	cmp	r3, r2
 801ad86:	d005      	beq.n	801ad94 <UART_SetConfig+0x158>
 801ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	4a7e      	ldr	r2, [pc, #504]	@ (801af88 <UART_SetConfig+0x34c>)
 801ad8e:	4293      	cmp	r3, r2
 801ad90:	d000      	beq.n	801ad94 <UART_SetConfig+0x158>
 801ad92:	e06f      	b.n	801ae74 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801ad94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ad96:	0018      	movs	r0, r3
 801ad98:	f7fc fefc 	bl	8017b94 <HAL_RCCEx_GetPeriphCLKFreq>
 801ad9c:	0003      	movs	r3, r0
 801ad9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 801ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d100      	bne.n	801ada8 <UART_SetConfig+0x16c>
 801ada6:	e103      	b.n	801afb0 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801ada8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801adac:	4b7c      	ldr	r3, [pc, #496]	@ (801afa0 <UART_SetConfig+0x364>)
 801adae:	0052      	lsls	r2, r2, #1
 801adb0:	5ad3      	ldrh	r3, [r2, r3]
 801adb2:	0019      	movs	r1, r3
 801adb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801adb6:	f7e5 f9af 	bl	8000118 <__udivsi3>
 801adba:	0003      	movs	r3, r0
 801adbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adc0:	685a      	ldr	r2, [r3, #4]
 801adc2:	0013      	movs	r3, r2
 801adc4:	005b      	lsls	r3, r3, #1
 801adc6:	189b      	adds	r3, r3, r2
 801adc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801adca:	429a      	cmp	r2, r3
 801adcc:	d305      	bcc.n	801adda <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801add0:	685b      	ldr	r3, [r3, #4]
 801add2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801add4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801add6:	429a      	cmp	r2, r3
 801add8:	d906      	bls.n	801ade8 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 801adda:	231f      	movs	r3, #31
 801addc:	2220      	movs	r2, #32
 801adde:	189b      	adds	r3, r3, r2
 801ade0:	19db      	adds	r3, r3, r7
 801ade2:	2201      	movs	r2, #1
 801ade4:	701a      	strb	r2, [r3, #0]
 801ade6:	e044      	b.n	801ae72 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801adea:	61bb      	str	r3, [r7, #24]
 801adec:	2300      	movs	r3, #0
 801adee:	61fb      	str	r3, [r7, #28]
 801adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801adf4:	4b6a      	ldr	r3, [pc, #424]	@ (801afa0 <UART_SetConfig+0x364>)
 801adf6:	0052      	lsls	r2, r2, #1
 801adf8:	5ad3      	ldrh	r3, [r2, r3]
 801adfa:	613b      	str	r3, [r7, #16]
 801adfc:	2300      	movs	r3, #0
 801adfe:	617b      	str	r3, [r7, #20]
 801ae00:	693a      	ldr	r2, [r7, #16]
 801ae02:	697b      	ldr	r3, [r7, #20]
 801ae04:	69b8      	ldr	r0, [r7, #24]
 801ae06:	69f9      	ldr	r1, [r7, #28]
 801ae08:	f7e5 fb58 	bl	80004bc <__aeabi_uldivmod>
 801ae0c:	0002      	movs	r2, r0
 801ae0e:	000b      	movs	r3, r1
 801ae10:	0e11      	lsrs	r1, r2, #24
 801ae12:	021d      	lsls	r5, r3, #8
 801ae14:	430d      	orrs	r5, r1
 801ae16:	0214      	lsls	r4, r2, #8
 801ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae1a:	685b      	ldr	r3, [r3, #4]
 801ae1c:	085b      	lsrs	r3, r3, #1
 801ae1e:	60bb      	str	r3, [r7, #8]
 801ae20:	2300      	movs	r3, #0
 801ae22:	60fb      	str	r3, [r7, #12]
 801ae24:	68b8      	ldr	r0, [r7, #8]
 801ae26:	68f9      	ldr	r1, [r7, #12]
 801ae28:	1900      	adds	r0, r0, r4
 801ae2a:	4169      	adcs	r1, r5
 801ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae2e:	685b      	ldr	r3, [r3, #4]
 801ae30:	603b      	str	r3, [r7, #0]
 801ae32:	2300      	movs	r3, #0
 801ae34:	607b      	str	r3, [r7, #4]
 801ae36:	683a      	ldr	r2, [r7, #0]
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f7e5 fb3f 	bl	80004bc <__aeabi_uldivmod>
 801ae3e:	0002      	movs	r2, r0
 801ae40:	000b      	movs	r3, r1
 801ae42:	0013      	movs	r3, r2
 801ae44:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ae46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ae48:	23c0      	movs	r3, #192	@ 0xc0
 801ae4a:	009b      	lsls	r3, r3, #2
 801ae4c:	429a      	cmp	r2, r3
 801ae4e:	d309      	bcc.n	801ae64 <UART_SetConfig+0x228>
 801ae50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ae52:	2380      	movs	r3, #128	@ 0x80
 801ae54:	035b      	lsls	r3, r3, #13
 801ae56:	429a      	cmp	r2, r3
 801ae58:	d204      	bcs.n	801ae64 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 801ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ae60:	60da      	str	r2, [r3, #12]
 801ae62:	e006      	b.n	801ae72 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 801ae64:	231f      	movs	r3, #31
 801ae66:	2220      	movs	r2, #32
 801ae68:	189b      	adds	r3, r3, r2
 801ae6a:	19db      	adds	r3, r3, r7
 801ae6c:	2201      	movs	r2, #1
 801ae6e:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 801ae70:	e09e      	b.n	801afb0 <UART_SetConfig+0x374>
 801ae72:	e09d      	b.n	801afb0 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae76:	69da      	ldr	r2, [r3, #28]
 801ae78:	2380      	movs	r3, #128	@ 0x80
 801ae7a:	021b      	lsls	r3, r3, #8
 801ae7c:	429a      	cmp	r2, r3
 801ae7e:	d14c      	bne.n	801af1a <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801ae80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ae82:	0018      	movs	r0, r3
 801ae84:	f7fc fe86 	bl	8017b94 <HAL_RCCEx_GetPeriphCLKFreq>
 801ae88:	0003      	movs	r3, r0
 801ae8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d100      	bne.n	801ae94 <UART_SetConfig+0x258>
 801ae92:	e08d      	b.n	801afb0 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ae98:	4b41      	ldr	r3, [pc, #260]	@ (801afa0 <UART_SetConfig+0x364>)
 801ae9a:	0052      	lsls	r2, r2, #1
 801ae9c:	5ad3      	ldrh	r3, [r2, r3]
 801ae9e:	0019      	movs	r1, r3
 801aea0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801aea2:	f7e5 f939 	bl	8000118 <__udivsi3>
 801aea6:	0003      	movs	r3, r0
 801aea8:	005a      	lsls	r2, r3, #1
 801aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeac:	685b      	ldr	r3, [r3, #4]
 801aeae:	085b      	lsrs	r3, r3, #1
 801aeb0:	18d2      	adds	r2, r2, r3
 801aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeb4:	685b      	ldr	r3, [r3, #4]
 801aeb6:	0019      	movs	r1, r3
 801aeb8:	0010      	movs	r0, r2
 801aeba:	f7e5 f92d 	bl	8000118 <__udivsi3>
 801aebe:	0003      	movs	r3, r0
 801aec0:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801aec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aec4:	2b0f      	cmp	r3, #15
 801aec6:	d921      	bls.n	801af0c <UART_SetConfig+0x2d0>
 801aec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aeca:	2380      	movs	r3, #128	@ 0x80
 801aecc:	025b      	lsls	r3, r3, #9
 801aece:	429a      	cmp	r2, r3
 801aed0:	d21c      	bcs.n	801af0c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801aed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aed4:	b29a      	uxth	r2, r3
 801aed6:	2012      	movs	r0, #18
 801aed8:	2420      	movs	r4, #32
 801aeda:	1903      	adds	r3, r0, r4
 801aedc:	19db      	adds	r3, r3, r7
 801aede:	210f      	movs	r1, #15
 801aee0:	438a      	bics	r2, r1
 801aee2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801aee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aee6:	085b      	lsrs	r3, r3, #1
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	2207      	movs	r2, #7
 801aeec:	4013      	ands	r3, r2
 801aeee:	b299      	uxth	r1, r3
 801aef0:	1903      	adds	r3, r0, r4
 801aef2:	19db      	adds	r3, r3, r7
 801aef4:	1902      	adds	r2, r0, r4
 801aef6:	19d2      	adds	r2, r2, r7
 801aef8:	8812      	ldrh	r2, [r2, #0]
 801aefa:	430a      	orrs	r2, r1
 801aefc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801aefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	1902      	adds	r2, r0, r4
 801af04:	19d2      	adds	r2, r2, r7
 801af06:	8812      	ldrh	r2, [r2, #0]
 801af08:	60da      	str	r2, [r3, #12]
 801af0a:	e051      	b.n	801afb0 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 801af0c:	231f      	movs	r3, #31
 801af0e:	2220      	movs	r2, #32
 801af10:	189b      	adds	r3, r3, r2
 801af12:	19db      	adds	r3, r3, r7
 801af14:	2201      	movs	r2, #1
 801af16:	701a      	strb	r2, [r3, #0]
 801af18:	e04a      	b.n	801afb0 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801af1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801af1c:	0018      	movs	r0, r3
 801af1e:	f7fc fe39 	bl	8017b94 <HAL_RCCEx_GetPeriphCLKFreq>
 801af22:	0003      	movs	r3, r0
 801af24:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 801af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d041      	beq.n	801afb0 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801af30:	4b1b      	ldr	r3, [pc, #108]	@ (801afa0 <UART_SetConfig+0x364>)
 801af32:	0052      	lsls	r2, r2, #1
 801af34:	5ad3      	ldrh	r3, [r2, r3]
 801af36:	0019      	movs	r1, r3
 801af38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801af3a:	f7e5 f8ed 	bl	8000118 <__udivsi3>
 801af3e:	0003      	movs	r3, r0
 801af40:	001a      	movs	r2, r3
 801af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af44:	685b      	ldr	r3, [r3, #4]
 801af46:	085b      	lsrs	r3, r3, #1
 801af48:	18d2      	adds	r2, r2, r3
 801af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af4c:	685b      	ldr	r3, [r3, #4]
 801af4e:	0019      	movs	r1, r3
 801af50:	0010      	movs	r0, r2
 801af52:	f7e5 f8e1 	bl	8000118 <__udivsi3>
 801af56:	0003      	movs	r3, r0
 801af58:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801af5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af5c:	2b0f      	cmp	r3, #15
 801af5e:	d921      	bls.n	801afa4 <UART_SetConfig+0x368>
 801af60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801af62:	2380      	movs	r3, #128	@ 0x80
 801af64:	025b      	lsls	r3, r3, #9
 801af66:	429a      	cmp	r2, r3
 801af68:	d21c      	bcs.n	801afa4 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801af6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af6c:	b29a      	uxth	r2, r3
 801af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	60da      	str	r2, [r3, #12]
 801af74:	e01c      	b.n	801afb0 <UART_SetConfig+0x374>
 801af76:	46c0      	nop			@ (mov r8, r8)
 801af78:	40008000 	.word	0x40008000
 801af7c:	cfff69f3 	.word	0xcfff69f3
 801af80:	ffffcfff 	.word	0xffffcfff
 801af84:	40008400 	.word	0x40008400
 801af88:	40008c00 	.word	0x40008c00
 801af8c:	11fff4ff 	.word	0x11fff4ff
 801af90:	40013800 	.word	0x40013800
 801af94:	40004400 	.word	0x40004400
 801af98:	40004800 	.word	0x40004800
 801af9c:	40004c00 	.word	0x40004c00
 801afa0:	0801c3ec 	.word	0x0801c3ec
      }
      else
      {
        ret = HAL_ERROR;
 801afa4:	231f      	movs	r3, #31
 801afa6:	2220      	movs	r2, #32
 801afa8:	189b      	adds	r3, r3, r2
 801afaa:	19db      	adds	r3, r3, r7
 801afac:	2201      	movs	r2, #1
 801afae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afb2:	226a      	movs	r2, #106	@ 0x6a
 801afb4:	2101      	movs	r1, #1
 801afb6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 801afb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afba:	2268      	movs	r2, #104	@ 0x68
 801afbc:	2101      	movs	r1, #1
 801afbe:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afc2:	2200      	movs	r2, #0
 801afc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afc8:	2200      	movs	r2, #0
 801afca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801afcc:	231f      	movs	r3, #31
 801afce:	2220      	movs	r2, #32
 801afd0:	189b      	adds	r3, r3, r2
 801afd2:	19db      	adds	r3, r3, r7
 801afd4:	781b      	ldrb	r3, [r3, #0]
}
 801afd6:	0018      	movs	r0, r3
 801afd8:	46bd      	mov	sp, r7
 801afda:	b012      	add	sp, #72	@ 0x48
 801afdc:	bdb0      	pop	{r4, r5, r7, pc}
 801afde:	46c0      	nop			@ (mov r8, r8)

0801afe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b082      	sub	sp, #8
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afec:	2208      	movs	r2, #8
 801afee:	4013      	ands	r3, r2
 801aff0:	d00b      	beq.n	801b00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	685b      	ldr	r3, [r3, #4]
 801aff8:	4a4a      	ldr	r2, [pc, #296]	@ (801b124 <UART_AdvFeatureConfig+0x144>)
 801affa:	4013      	ands	r3, r2
 801affc:	0019      	movs	r1, r3
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	430a      	orrs	r2, r1
 801b008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b00e:	2201      	movs	r2, #1
 801b010:	4013      	ands	r3, r2
 801b012:	d00b      	beq.n	801b02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	685b      	ldr	r3, [r3, #4]
 801b01a:	4a43      	ldr	r2, [pc, #268]	@ (801b128 <UART_AdvFeatureConfig+0x148>)
 801b01c:	4013      	ands	r3, r2
 801b01e:	0019      	movs	r1, r3
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	430a      	orrs	r2, r1
 801b02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b030:	2202      	movs	r2, #2
 801b032:	4013      	ands	r3, r2
 801b034:	d00b      	beq.n	801b04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	685b      	ldr	r3, [r3, #4]
 801b03c:	4a3b      	ldr	r2, [pc, #236]	@ (801b12c <UART_AdvFeatureConfig+0x14c>)
 801b03e:	4013      	ands	r3, r2
 801b040:	0019      	movs	r1, r3
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	430a      	orrs	r2, r1
 801b04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b052:	2204      	movs	r2, #4
 801b054:	4013      	ands	r3, r2
 801b056:	d00b      	beq.n	801b070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	685b      	ldr	r3, [r3, #4]
 801b05e:	4a34      	ldr	r2, [pc, #208]	@ (801b130 <UART_AdvFeatureConfig+0x150>)
 801b060:	4013      	ands	r3, r2
 801b062:	0019      	movs	r1, r3
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	430a      	orrs	r2, r1
 801b06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b074:	2210      	movs	r2, #16
 801b076:	4013      	ands	r3, r2
 801b078:	d00b      	beq.n	801b092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	689b      	ldr	r3, [r3, #8]
 801b080:	4a2c      	ldr	r2, [pc, #176]	@ (801b134 <UART_AdvFeatureConfig+0x154>)
 801b082:	4013      	ands	r3, r2
 801b084:	0019      	movs	r1, r3
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	430a      	orrs	r2, r1
 801b090:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b096:	2220      	movs	r2, #32
 801b098:	4013      	ands	r3, r2
 801b09a:	d00b      	beq.n	801b0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	689b      	ldr	r3, [r3, #8]
 801b0a2:	4a25      	ldr	r2, [pc, #148]	@ (801b138 <UART_AdvFeatureConfig+0x158>)
 801b0a4:	4013      	ands	r3, r2
 801b0a6:	0019      	movs	r1, r3
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	430a      	orrs	r2, r1
 801b0b2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0b8:	2240      	movs	r2, #64	@ 0x40
 801b0ba:	4013      	ands	r3, r2
 801b0bc:	d01d      	beq.n	801b0fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	685b      	ldr	r3, [r3, #4]
 801b0c4:	4a1d      	ldr	r2, [pc, #116]	@ (801b13c <UART_AdvFeatureConfig+0x15c>)
 801b0c6:	4013      	ands	r3, r2
 801b0c8:	0019      	movs	r1, r3
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	430a      	orrs	r2, r1
 801b0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b0da:	2380      	movs	r3, #128	@ 0x80
 801b0dc:	035b      	lsls	r3, r3, #13
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d10b      	bne.n	801b0fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	685b      	ldr	r3, [r3, #4]
 801b0e8:	4a15      	ldr	r2, [pc, #84]	@ (801b140 <UART_AdvFeatureConfig+0x160>)
 801b0ea:	4013      	ands	r3, r2
 801b0ec:	0019      	movs	r1, r3
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	430a      	orrs	r2, r1
 801b0f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0fe:	2280      	movs	r2, #128	@ 0x80
 801b100:	4013      	ands	r3, r2
 801b102:	d00b      	beq.n	801b11c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	685b      	ldr	r3, [r3, #4]
 801b10a:	4a0e      	ldr	r2, [pc, #56]	@ (801b144 <UART_AdvFeatureConfig+0x164>)
 801b10c:	4013      	ands	r3, r2
 801b10e:	0019      	movs	r1, r3
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	430a      	orrs	r2, r1
 801b11a:	605a      	str	r2, [r3, #4]
  }
}
 801b11c:	46c0      	nop			@ (mov r8, r8)
 801b11e:	46bd      	mov	sp, r7
 801b120:	b002      	add	sp, #8
 801b122:	bd80      	pop	{r7, pc}
 801b124:	ffff7fff 	.word	0xffff7fff
 801b128:	fffdffff 	.word	0xfffdffff
 801b12c:	fffeffff 	.word	0xfffeffff
 801b130:	fffbffff 	.word	0xfffbffff
 801b134:	ffffefff 	.word	0xffffefff
 801b138:	ffffdfff 	.word	0xffffdfff
 801b13c:	ffefffff 	.word	0xffefffff
 801b140:	ff9fffff 	.word	0xff9fffff
 801b144:	fff7ffff 	.word	0xfff7ffff

0801b148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b092      	sub	sp, #72	@ 0x48
 801b14c:	af02      	add	r7, sp, #8
 801b14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2290      	movs	r2, #144	@ 0x90
 801b154:	2100      	movs	r1, #0
 801b156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801b158:	f7f6 fdec 	bl	8011d34 <HAL_GetTick>
 801b15c:	0003      	movs	r3, r0
 801b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	2208      	movs	r2, #8
 801b168:	4013      	ands	r3, r2
 801b16a:	2b08      	cmp	r3, #8
 801b16c:	d12d      	bne.n	801b1ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b170:	2280      	movs	r2, #128	@ 0x80
 801b172:	0391      	lsls	r1, r2, #14
 801b174:	6878      	ldr	r0, [r7, #4]
 801b176:	4a47      	ldr	r2, [pc, #284]	@ (801b294 <UART_CheckIdleState+0x14c>)
 801b178:	9200      	str	r2, [sp, #0]
 801b17a:	2200      	movs	r2, #0
 801b17c:	f000 f88e 	bl	801b29c <UART_WaitOnFlagUntilTimeout>
 801b180:	1e03      	subs	r3, r0, #0
 801b182:	d022      	beq.n	801b1ca <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b184:	f3ef 8310 	mrs	r3, PRIMASK
 801b188:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801b18c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b18e:	2301      	movs	r3, #1
 801b190:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b194:	f383 8810 	msr	PRIMASK, r3
}
 801b198:	46c0      	nop			@ (mov r8, r8)
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	681a      	ldr	r2, [r3, #0]
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	2180      	movs	r1, #128	@ 0x80
 801b1a6:	438a      	bics	r2, r1
 801b1a8:	601a      	str	r2, [r3, #0]
 801b1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1b0:	f383 8810 	msr	PRIMASK, r3
}
 801b1b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	2288      	movs	r2, #136	@ 0x88
 801b1ba:	2120      	movs	r1, #32
 801b1bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	2284      	movs	r2, #132	@ 0x84
 801b1c2:	2100      	movs	r1, #0
 801b1c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b1c6:	2303      	movs	r3, #3
 801b1c8:	e060      	b.n	801b28c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	2204      	movs	r2, #4
 801b1d2:	4013      	ands	r3, r2
 801b1d4:	2b04      	cmp	r3, #4
 801b1d6:	d146      	bne.n	801b266 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b1d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b1da:	2280      	movs	r2, #128	@ 0x80
 801b1dc:	03d1      	lsls	r1, r2, #15
 801b1de:	6878      	ldr	r0, [r7, #4]
 801b1e0:	4a2c      	ldr	r2, [pc, #176]	@ (801b294 <UART_CheckIdleState+0x14c>)
 801b1e2:	9200      	str	r2, [sp, #0]
 801b1e4:	2200      	movs	r2, #0
 801b1e6:	f000 f859 	bl	801b29c <UART_WaitOnFlagUntilTimeout>
 801b1ea:	1e03      	subs	r3, r0, #0
 801b1ec:	d03b      	beq.n	801b266 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b1ee:	f3ef 8310 	mrs	r3, PRIMASK
 801b1f2:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 801b1f8:	2301      	movs	r3, #1
 801b1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1fc:	693b      	ldr	r3, [r7, #16]
 801b1fe:	f383 8810 	msr	PRIMASK, r3
}
 801b202:	46c0      	nop			@ (mov r8, r8)
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	681a      	ldr	r2, [r3, #0]
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	4922      	ldr	r1, [pc, #136]	@ (801b298 <UART_CheckIdleState+0x150>)
 801b210:	400a      	ands	r2, r1
 801b212:	601a      	str	r2, [r3, #0]
 801b214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	f383 8810 	msr	PRIMASK, r3
}
 801b21e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b220:	f3ef 8310 	mrs	r3, PRIMASK
 801b224:	61bb      	str	r3, [r7, #24]
  return(result);
 801b226:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b228:	633b      	str	r3, [r7, #48]	@ 0x30
 801b22a:	2301      	movs	r3, #1
 801b22c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b22e:	69fb      	ldr	r3, [r7, #28]
 801b230:	f383 8810 	msr	PRIMASK, r3
}
 801b234:	46c0      	nop			@ (mov r8, r8)
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	689a      	ldr	r2, [r3, #8]
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	2101      	movs	r1, #1
 801b242:	438a      	bics	r2, r1
 801b244:	609a      	str	r2, [r3, #8]
 801b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b24a:	6a3b      	ldr	r3, [r7, #32]
 801b24c:	f383 8810 	msr	PRIMASK, r3
}
 801b250:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	228c      	movs	r2, #140	@ 0x8c
 801b256:	2120      	movs	r1, #32
 801b258:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	2284      	movs	r2, #132	@ 0x84
 801b25e:	2100      	movs	r1, #0
 801b260:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b262:	2303      	movs	r3, #3
 801b264:	e012      	b.n	801b28c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2288      	movs	r2, #136	@ 0x88
 801b26a:	2120      	movs	r1, #32
 801b26c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	228c      	movs	r2, #140	@ 0x8c
 801b272:	2120      	movs	r1, #32
 801b274:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2200      	movs	r2, #0
 801b27a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	2200      	movs	r2, #0
 801b280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	2284      	movs	r2, #132	@ 0x84
 801b286:	2100      	movs	r1, #0
 801b288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b28a:	2300      	movs	r3, #0
}
 801b28c:	0018      	movs	r0, r3
 801b28e:	46bd      	mov	sp, r7
 801b290:	b010      	add	sp, #64	@ 0x40
 801b292:	bd80      	pop	{r7, pc}
 801b294:	01ffffff 	.word	0x01ffffff
 801b298:	fffffedf 	.word	0xfffffedf

0801b29c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b084      	sub	sp, #16
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	60f8      	str	r0, [r7, #12]
 801b2a4:	60b9      	str	r1, [r7, #8]
 801b2a6:	603b      	str	r3, [r7, #0]
 801b2a8:	1dfb      	adds	r3, r7, #7
 801b2aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b2ac:	e051      	b.n	801b352 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b2ae:	69bb      	ldr	r3, [r7, #24]
 801b2b0:	3301      	adds	r3, #1
 801b2b2:	d04e      	beq.n	801b352 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b2b4:	f7f6 fd3e 	bl	8011d34 <HAL_GetTick>
 801b2b8:	0002      	movs	r2, r0
 801b2ba:	683b      	ldr	r3, [r7, #0]
 801b2bc:	1ad3      	subs	r3, r2, r3
 801b2be:	69ba      	ldr	r2, [r7, #24]
 801b2c0:	429a      	cmp	r2, r3
 801b2c2:	d302      	bcc.n	801b2ca <UART_WaitOnFlagUntilTimeout+0x2e>
 801b2c4:	69bb      	ldr	r3, [r7, #24]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d101      	bne.n	801b2ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801b2ca:	2303      	movs	r3, #3
 801b2cc:	e051      	b.n	801b372 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	2204      	movs	r2, #4
 801b2d6:	4013      	ands	r3, r2
 801b2d8:	d03b      	beq.n	801b352 <UART_WaitOnFlagUntilTimeout+0xb6>
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	2b80      	cmp	r3, #128	@ 0x80
 801b2de:	d038      	beq.n	801b352 <UART_WaitOnFlagUntilTimeout+0xb6>
 801b2e0:	68bb      	ldr	r3, [r7, #8]
 801b2e2:	2b40      	cmp	r3, #64	@ 0x40
 801b2e4:	d035      	beq.n	801b352 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	69db      	ldr	r3, [r3, #28]
 801b2ec:	2208      	movs	r2, #8
 801b2ee:	4013      	ands	r3, r2
 801b2f0:	2b08      	cmp	r3, #8
 801b2f2:	d111      	bne.n	801b318 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	2208      	movs	r2, #8
 801b2fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	0018      	movs	r0, r3
 801b300:	f000 f922 	bl	801b548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	2290      	movs	r2, #144	@ 0x90
 801b308:	2108      	movs	r1, #8
 801b30a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2284      	movs	r2, #132	@ 0x84
 801b310:	2100      	movs	r1, #0
 801b312:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801b314:	2301      	movs	r3, #1
 801b316:	e02c      	b.n	801b372 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	69da      	ldr	r2, [r3, #28]
 801b31e:	2380      	movs	r3, #128	@ 0x80
 801b320:	011b      	lsls	r3, r3, #4
 801b322:	401a      	ands	r2, r3
 801b324:	2380      	movs	r3, #128	@ 0x80
 801b326:	011b      	lsls	r3, r3, #4
 801b328:	429a      	cmp	r2, r3
 801b32a:	d112      	bne.n	801b352 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2280      	movs	r2, #128	@ 0x80
 801b332:	0112      	lsls	r2, r2, #4
 801b334:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	0018      	movs	r0, r3
 801b33a:	f000 f905 	bl	801b548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	2290      	movs	r2, #144	@ 0x90
 801b342:	2120      	movs	r1, #32
 801b344:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	2284      	movs	r2, #132	@ 0x84
 801b34a:	2100      	movs	r1, #0
 801b34c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801b34e:	2303      	movs	r3, #3
 801b350:	e00f      	b.n	801b372 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	69db      	ldr	r3, [r3, #28]
 801b358:	68ba      	ldr	r2, [r7, #8]
 801b35a:	4013      	ands	r3, r2
 801b35c:	68ba      	ldr	r2, [r7, #8]
 801b35e:	1ad3      	subs	r3, r2, r3
 801b360:	425a      	negs	r2, r3
 801b362:	4153      	adcs	r3, r2
 801b364:	b2db      	uxtb	r3, r3
 801b366:	001a      	movs	r2, r3
 801b368:	1dfb      	adds	r3, r7, #7
 801b36a:	781b      	ldrb	r3, [r3, #0]
 801b36c:	429a      	cmp	r2, r3
 801b36e:	d09e      	beq.n	801b2ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b370:	2300      	movs	r3, #0
}
 801b372:	0018      	movs	r0, r3
 801b374:	46bd      	mov	sp, r7
 801b376:	b004      	add	sp, #16
 801b378:	bd80      	pop	{r7, pc}
	...

0801b37c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b090      	sub	sp, #64	@ 0x40
 801b380:	af00      	add	r7, sp, #0
 801b382:	60f8      	str	r0, [r7, #12]
 801b384:	60b9      	str	r1, [r7, #8]
 801b386:	1dbb      	adds	r3, r7, #6
 801b388:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	68ba      	ldr	r2, [r7, #8]
 801b38e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	1dba      	adds	r2, r7, #6
 801b394:	215c      	movs	r1, #92	@ 0x5c
 801b396:	8812      	ldrh	r2, [r2, #0]
 801b398:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	2290      	movs	r2, #144	@ 0x90
 801b39e:	2100      	movs	r1, #0
 801b3a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	228c      	movs	r2, #140	@ 0x8c
 801b3a6:	2122      	movs	r1, #34	@ 0x22
 801b3a8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	2280      	movs	r2, #128	@ 0x80
 801b3ae:	589b      	ldr	r3, [r3, r2]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d02d      	beq.n	801b410 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	2280      	movs	r2, #128	@ 0x80
 801b3b8:	589b      	ldr	r3, [r3, r2]
 801b3ba:	4a40      	ldr	r2, [pc, #256]	@ (801b4bc <UART_Start_Receive_DMA+0x140>)
 801b3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	2280      	movs	r2, #128	@ 0x80
 801b3c2:	589b      	ldr	r3, [r3, r2]
 801b3c4:	4a3e      	ldr	r2, [pc, #248]	@ (801b4c0 <UART_Start_Receive_DMA+0x144>)
 801b3c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	2280      	movs	r2, #128	@ 0x80
 801b3cc:	589b      	ldr	r3, [r3, r2]
 801b3ce:	4a3d      	ldr	r2, [pc, #244]	@ (801b4c4 <UART_Start_Receive_DMA+0x148>)
 801b3d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801b3d2:	68fb      	ldr	r3, [r7, #12]
 801b3d4:	2280      	movs	r2, #128	@ 0x80
 801b3d6:	589b      	ldr	r3, [r3, r2]
 801b3d8:	2200      	movs	r2, #0
 801b3da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	2280      	movs	r2, #128	@ 0x80
 801b3e0:	5898      	ldr	r0, [r3, r2]
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	3324      	adds	r3, #36	@ 0x24
 801b3e8:	0019      	movs	r1, r3
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b3ee:	001a      	movs	r2, r3
 801b3f0:	1dbb      	adds	r3, r7, #6
 801b3f2:	881b      	ldrh	r3, [r3, #0]
 801b3f4:	f7f8 f986 	bl	8013704 <HAL_DMA_Start_IT>
 801b3f8:	1e03      	subs	r3, r0, #0
 801b3fa:	d009      	beq.n	801b410 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	2290      	movs	r2, #144	@ 0x90
 801b400:	2110      	movs	r1, #16
 801b402:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	228c      	movs	r2, #140	@ 0x8c
 801b408:	2120      	movs	r1, #32
 801b40a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801b40c:	2301      	movs	r3, #1
 801b40e:	e050      	b.n	801b4b2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	691b      	ldr	r3, [r3, #16]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d019      	beq.n	801b44c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b418:	f3ef 8310 	mrs	r3, PRIMASK
 801b41c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b422:	2301      	movs	r3, #1
 801b424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b428:	f383 8810 	msr	PRIMASK, r3
}
 801b42c:	46c0      	nop			@ (mov r8, r8)
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	681a      	ldr	r2, [r3, #0]
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	2180      	movs	r1, #128	@ 0x80
 801b43a:	0049      	lsls	r1, r1, #1
 801b43c:	430a      	orrs	r2, r1
 801b43e:	601a      	str	r2, [r3, #0]
 801b440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b442:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b446:	f383 8810 	msr	PRIMASK, r3
}
 801b44a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b44c:	f3ef 8310 	mrs	r3, PRIMASK
 801b450:	613b      	str	r3, [r7, #16]
  return(result);
 801b452:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b454:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b456:	2301      	movs	r3, #1
 801b458:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b45a:	697b      	ldr	r3, [r7, #20]
 801b45c:	f383 8810 	msr	PRIMASK, r3
}
 801b460:	46c0      	nop			@ (mov r8, r8)
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	689a      	ldr	r2, [r3, #8]
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	2101      	movs	r1, #1
 801b46e:	430a      	orrs	r2, r1
 801b470:	609a      	str	r2, [r3, #8]
 801b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b476:	69bb      	ldr	r3, [r7, #24]
 801b478:	f383 8810 	msr	PRIMASK, r3
}
 801b47c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b47e:	f3ef 8310 	mrs	r3, PRIMASK
 801b482:	61fb      	str	r3, [r7, #28]
  return(result);
 801b484:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b486:	637b      	str	r3, [r7, #52]	@ 0x34
 801b488:	2301      	movs	r3, #1
 801b48a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b48c:	6a3b      	ldr	r3, [r7, #32]
 801b48e:	f383 8810 	msr	PRIMASK, r3
}
 801b492:	46c0      	nop			@ (mov r8, r8)
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	689a      	ldr	r2, [r3, #8]
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	2140      	movs	r1, #64	@ 0x40
 801b4a0:	430a      	orrs	r2, r1
 801b4a2:	609a      	str	r2, [r3, #8]
 801b4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4aa:	f383 8810 	msr	PRIMASK, r3
}
 801b4ae:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801b4b0:	2300      	movs	r3, #0
}
 801b4b2:	0018      	movs	r0, r3
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	b010      	add	sp, #64	@ 0x40
 801b4b8:	bd80      	pop	{r7, pc}
 801b4ba:	46c0      	nop			@ (mov r8, r8)
 801b4bc:	0801b6cd 	.word	0x0801b6cd
 801b4c0:	0801b7fd 	.word	0x0801b7fd
 801b4c4:	0801b83f 	.word	0x0801b83f

0801b4c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b08a      	sub	sp, #40	@ 0x28
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b4d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b4d4:	60bb      	str	r3, [r7, #8]
  return(result);
 801b4d6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801b4d8:	627b      	str	r3, [r7, #36]	@ 0x24
 801b4da:	2301      	movs	r3, #1
 801b4dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	f383 8810 	msr	PRIMASK, r3
}
 801b4e4:	46c0      	nop			@ (mov r8, r8)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	21c0      	movs	r1, #192	@ 0xc0
 801b4f2:	438a      	bics	r2, r1
 801b4f4:	601a      	str	r2, [r3, #0]
 801b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4fa:	693b      	ldr	r3, [r7, #16]
 801b4fc:	f383 8810 	msr	PRIMASK, r3
}
 801b500:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b502:	f3ef 8310 	mrs	r3, PRIMASK
 801b506:	617b      	str	r3, [r7, #20]
  return(result);
 801b508:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801b50a:	623b      	str	r3, [r7, #32]
 801b50c:	2301      	movs	r3, #1
 801b50e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b510:	69bb      	ldr	r3, [r7, #24]
 801b512:	f383 8810 	msr	PRIMASK, r3
}
 801b516:	46c0      	nop			@ (mov r8, r8)
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	689a      	ldr	r2, [r3, #8]
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	4908      	ldr	r1, [pc, #32]	@ (801b544 <UART_EndTxTransfer+0x7c>)
 801b524:	400a      	ands	r2, r1
 801b526:	609a      	str	r2, [r3, #8]
 801b528:	6a3b      	ldr	r3, [r7, #32]
 801b52a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b52c:	69fb      	ldr	r3, [r7, #28]
 801b52e:	f383 8810 	msr	PRIMASK, r3
}
 801b532:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	2288      	movs	r2, #136	@ 0x88
 801b538:	2120      	movs	r1, #32
 801b53a:	5099      	str	r1, [r3, r2]
}
 801b53c:	46c0      	nop			@ (mov r8, r8)
 801b53e:	46bd      	mov	sp, r7
 801b540:	b00a      	add	sp, #40	@ 0x28
 801b542:	bd80      	pop	{r7, pc}
 801b544:	ff7fffff 	.word	0xff7fffff

0801b548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b08e      	sub	sp, #56	@ 0x38
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b550:	f3ef 8310 	mrs	r3, PRIMASK
 801b554:	617b      	str	r3, [r7, #20]
  return(result);
 801b556:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b558:	637b      	str	r3, [r7, #52]	@ 0x34
 801b55a:	2301      	movs	r3, #1
 801b55c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b55e:	69bb      	ldr	r3, [r7, #24]
 801b560:	f383 8810 	msr	PRIMASK, r3
}
 801b564:	46c0      	nop			@ (mov r8, r8)
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	681a      	ldr	r2, [r3, #0]
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	4926      	ldr	r1, [pc, #152]	@ (801b60c <UART_EndRxTransfer+0xc4>)
 801b572:	400a      	ands	r2, r1
 801b574:	601a      	str	r2, [r3, #0]
 801b576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b57a:	69fb      	ldr	r3, [r7, #28]
 801b57c:	f383 8810 	msr	PRIMASK, r3
}
 801b580:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b582:	f3ef 8310 	mrs	r3, PRIMASK
 801b586:	623b      	str	r3, [r7, #32]
  return(result);
 801b588:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b58a:	633b      	str	r3, [r7, #48]	@ 0x30
 801b58c:	2301      	movs	r3, #1
 801b58e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b592:	f383 8810 	msr	PRIMASK, r3
}
 801b596:	46c0      	nop			@ (mov r8, r8)
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	689a      	ldr	r2, [r3, #8]
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	491b      	ldr	r1, [pc, #108]	@ (801b610 <UART_EndRxTransfer+0xc8>)
 801b5a4:	400a      	ands	r2, r1
 801b5a6:	609a      	str	r2, [r3, #8]
 801b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5ae:	f383 8810 	msr	PRIMASK, r3
}
 801b5b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5b8:	2b01      	cmp	r3, #1
 801b5ba:	d118      	bne.n	801b5ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b5bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b5c0:	60bb      	str	r3, [r7, #8]
  return(result);
 801b5c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b5c6:	2301      	movs	r3, #1
 801b5c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	f383 8810 	msr	PRIMASK, r3
}
 801b5d0:	46c0      	nop			@ (mov r8, r8)
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	681a      	ldr	r2, [r3, #0]
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2110      	movs	r1, #16
 801b5de:	438a      	bics	r2, r1
 801b5e0:	601a      	str	r2, [r3, #0]
 801b5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5e6:	693b      	ldr	r3, [r7, #16]
 801b5e8:	f383 8810 	msr	PRIMASK, r3
}
 801b5ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	228c      	movs	r2, #140	@ 0x8c
 801b5f2:	2120      	movs	r1, #32
 801b5f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	2200      	movs	r2, #0
 801b600:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801b602:	46c0      	nop			@ (mov r8, r8)
 801b604:	46bd      	mov	sp, r7
 801b606:	b00e      	add	sp, #56	@ 0x38
 801b608:	bd80      	pop	{r7, pc}
 801b60a:	46c0      	nop			@ (mov r8, r8)
 801b60c:	fffffedf 	.word	0xfffffedf
 801b610:	effffffe 	.word	0xeffffffe

0801b614 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b08c      	sub	sp, #48	@ 0x30
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b620:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	2220      	movs	r2, #32
 801b62a:	4013      	ands	r3, r2
 801b62c:	d135      	bne.n	801b69a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801b62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b630:	2256      	movs	r2, #86	@ 0x56
 801b632:	2100      	movs	r1, #0
 801b634:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b636:	f3ef 8310 	mrs	r3, PRIMASK
 801b63a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b63c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b63e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b640:	2301      	movs	r3, #1
 801b642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b644:	693b      	ldr	r3, [r7, #16]
 801b646:	f383 8810 	msr	PRIMASK, r3
}
 801b64a:	46c0      	nop			@ (mov r8, r8)
 801b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	689a      	ldr	r2, [r3, #8]
 801b652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	2180      	movs	r1, #128	@ 0x80
 801b658:	438a      	bics	r2, r1
 801b65a:	609a      	str	r2, [r3, #8]
 801b65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b65e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b660:	697b      	ldr	r3, [r7, #20]
 801b662:	f383 8810 	msr	PRIMASK, r3
}
 801b666:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b668:	f3ef 8310 	mrs	r3, PRIMASK
 801b66c:	61bb      	str	r3, [r7, #24]
  return(result);
 801b66e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b670:	627b      	str	r3, [r7, #36]	@ 0x24
 801b672:	2301      	movs	r3, #1
 801b674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b676:	69fb      	ldr	r3, [r7, #28]
 801b678:	f383 8810 	msr	PRIMASK, r3
}
 801b67c:	46c0      	nop			@ (mov r8, r8)
 801b67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	2140      	movs	r1, #64	@ 0x40
 801b68a:	430a      	orrs	r2, r1
 801b68c:	601a      	str	r2, [r3, #0]
 801b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b690:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b692:	6a3b      	ldr	r3, [r7, #32]
 801b694:	f383 8810 	msr	PRIMASK, r3
}
 801b698:	e004      	b.n	801b6a4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801b69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b69c:	0018      	movs	r0, r3
 801b69e:	f7ff fa99 	bl	801abd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b6a2:	46c0      	nop			@ (mov r8, r8)
 801b6a4:	46c0      	nop			@ (mov r8, r8)
 801b6a6:	46bd      	mov	sp, r7
 801b6a8:	b00c      	add	sp, #48	@ 0x30
 801b6aa:	bd80      	pop	{r7, pc}

0801b6ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b084      	sub	sp, #16
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	0018      	movs	r0, r3
 801b6be:	f7ff fa91 	bl	801abe4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b6c2:	46c0      	nop			@ (mov r8, r8)
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	b004      	add	sp, #16
 801b6c8:	bd80      	pop	{r7, pc}
	...

0801b6cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b6cc:	b580      	push	{r7, lr}
 801b6ce:	b094      	sub	sp, #80	@ 0x50
 801b6d0:	af00      	add	r7, sp, #0
 801b6d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	2220      	movs	r2, #32
 801b6e2:	4013      	ands	r3, r2
 801b6e4:	d16f      	bne.n	801b7c6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801b6e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b6e8:	225e      	movs	r2, #94	@ 0x5e
 801b6ea:	2100      	movs	r1, #0
 801b6ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b6ee:	f3ef 8310 	mrs	r3, PRIMASK
 801b6f2:	61bb      	str	r3, [r7, #24]
  return(result);
 801b6f4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b6f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b6f8:	2301      	movs	r3, #1
 801b6fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6fc:	69fb      	ldr	r3, [r7, #28]
 801b6fe:	f383 8810 	msr	PRIMASK, r3
}
 801b702:	46c0      	nop			@ (mov r8, r8)
 801b704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	681a      	ldr	r2, [r3, #0]
 801b70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	493a      	ldr	r1, [pc, #232]	@ (801b7f8 <UART_DMAReceiveCplt+0x12c>)
 801b710:	400a      	ands	r2, r1
 801b712:	601a      	str	r2, [r3, #0]
 801b714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b716:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b718:	6a3b      	ldr	r3, [r7, #32]
 801b71a:	f383 8810 	msr	PRIMASK, r3
}
 801b71e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b720:	f3ef 8310 	mrs	r3, PRIMASK
 801b724:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b728:	647b      	str	r3, [r7, #68]	@ 0x44
 801b72a:	2301      	movs	r3, #1
 801b72c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b730:	f383 8810 	msr	PRIMASK, r3
}
 801b734:	46c0      	nop			@ (mov r8, r8)
 801b736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	689a      	ldr	r2, [r3, #8]
 801b73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	2101      	movs	r1, #1
 801b742:	438a      	bics	r2, r1
 801b744:	609a      	str	r2, [r3, #8]
 801b746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b74c:	f383 8810 	msr	PRIMASK, r3
}
 801b750:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b752:	f3ef 8310 	mrs	r3, PRIMASK
 801b756:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b75a:	643b      	str	r3, [r7, #64]	@ 0x40
 801b75c:	2301      	movs	r3, #1
 801b75e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b762:	f383 8810 	msr	PRIMASK, r3
}
 801b766:	46c0      	nop			@ (mov r8, r8)
 801b768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	689a      	ldr	r2, [r3, #8]
 801b76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	2140      	movs	r1, #64	@ 0x40
 801b774:	438a      	bics	r2, r1
 801b776:	609a      	str	r2, [r3, #8]
 801b778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b77a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b77e:	f383 8810 	msr	PRIMASK, r3
}
 801b782:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b786:	228c      	movs	r2, #140	@ 0x8c
 801b788:	2120      	movs	r1, #32
 801b78a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b78c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b790:	2b01      	cmp	r3, #1
 801b792:	d118      	bne.n	801b7c6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b794:	f3ef 8310 	mrs	r3, PRIMASK
 801b798:	60fb      	str	r3, [r7, #12]
  return(result);
 801b79a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b79e:	2301      	movs	r3, #1
 801b7a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7a2:	693b      	ldr	r3, [r7, #16]
 801b7a4:	f383 8810 	msr	PRIMASK, r3
}
 801b7a8:	46c0      	nop			@ (mov r8, r8)
 801b7aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	2110      	movs	r1, #16
 801b7b6:	438a      	bics	r2, r1
 801b7b8:	601a      	str	r2, [r3, #0]
 801b7ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7be:	697b      	ldr	r3, [r7, #20]
 801b7c0:	f383 8810 	msr	PRIMASK, r3
}
 801b7c4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b7d0:	2b01      	cmp	r3, #1
 801b7d2:	d108      	bne.n	801b7e6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7d6:	225c      	movs	r2, #92	@ 0x5c
 801b7d8:	5a9a      	ldrh	r2, [r3, r2]
 801b7da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7dc:	0011      	movs	r1, r2
 801b7de:	0018      	movs	r0, r3
 801b7e0:	f7ff fa20 	bl	801ac24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b7e4:	e003      	b.n	801b7ee <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 801b7e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7e8:	0018      	movs	r0, r3
 801b7ea:	f7ff fa03 	bl	801abf4 <HAL_UART_RxCpltCallback>
}
 801b7ee:	46c0      	nop			@ (mov r8, r8)
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	b014      	add	sp, #80	@ 0x50
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	46c0      	nop			@ (mov r8, r8)
 801b7f8:	fffffeff 	.word	0xfffffeff

0801b7fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b084      	sub	sp, #16
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b808:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	2201      	movs	r2, #1
 801b80e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b814:	2b01      	cmp	r3, #1
 801b816:	d10a      	bne.n	801b82e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	225c      	movs	r2, #92	@ 0x5c
 801b81c:	5a9b      	ldrh	r3, [r3, r2]
 801b81e:	085b      	lsrs	r3, r3, #1
 801b820:	b29a      	uxth	r2, r3
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	0011      	movs	r1, r2
 801b826:	0018      	movs	r0, r3
 801b828:	f7ff f9fc 	bl	801ac24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b82c:	e003      	b.n	801b836 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	0018      	movs	r0, r3
 801b832:	f7ff f9e7 	bl	801ac04 <HAL_UART_RxHalfCpltCallback>
}
 801b836:	46c0      	nop			@ (mov r8, r8)
 801b838:	46bd      	mov	sp, r7
 801b83a:	b004      	add	sp, #16
 801b83c:	bd80      	pop	{r7, pc}

0801b83e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b83e:	b580      	push	{r7, lr}
 801b840:	b086      	sub	sp, #24
 801b842:	af00      	add	r7, sp, #0
 801b844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b84a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	2288      	movs	r2, #136	@ 0x88
 801b850:	589b      	ldr	r3, [r3, r2]
 801b852:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	228c      	movs	r2, #140	@ 0x8c
 801b858:	589b      	ldr	r3, [r3, r2]
 801b85a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801b85c:	697b      	ldr	r3, [r7, #20]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	689b      	ldr	r3, [r3, #8]
 801b862:	2280      	movs	r2, #128	@ 0x80
 801b864:	4013      	ands	r3, r2
 801b866:	2b80      	cmp	r3, #128	@ 0x80
 801b868:	d10a      	bne.n	801b880 <UART_DMAError+0x42>
 801b86a:	693b      	ldr	r3, [r7, #16]
 801b86c:	2b21      	cmp	r3, #33	@ 0x21
 801b86e:	d107      	bne.n	801b880 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801b870:	697b      	ldr	r3, [r7, #20]
 801b872:	2256      	movs	r2, #86	@ 0x56
 801b874:	2100      	movs	r1, #0
 801b876:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	0018      	movs	r0, r3
 801b87c:	f7ff fe24 	bl	801b4c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	689b      	ldr	r3, [r3, #8]
 801b886:	2240      	movs	r2, #64	@ 0x40
 801b888:	4013      	ands	r3, r2
 801b88a:	2b40      	cmp	r3, #64	@ 0x40
 801b88c:	d10a      	bne.n	801b8a4 <UART_DMAError+0x66>
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	2b22      	cmp	r3, #34	@ 0x22
 801b892:	d107      	bne.n	801b8a4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	225e      	movs	r2, #94	@ 0x5e
 801b898:	2100      	movs	r1, #0
 801b89a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	0018      	movs	r0, r3
 801b8a0:	f7ff fe52 	bl	801b548 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	2290      	movs	r2, #144	@ 0x90
 801b8a8:	589b      	ldr	r3, [r3, r2]
 801b8aa:	2210      	movs	r2, #16
 801b8ac:	431a      	orrs	r2, r3
 801b8ae:	697b      	ldr	r3, [r7, #20]
 801b8b0:	2190      	movs	r1, #144	@ 0x90
 801b8b2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b8b4:	697b      	ldr	r3, [r7, #20]
 801b8b6:	0018      	movs	r0, r3
 801b8b8:	f7ff f9ac 	bl	801ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b8bc:	46c0      	nop			@ (mov r8, r8)
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	b006      	add	sp, #24
 801b8c2:	bd80      	pop	{r7, pc}

0801b8c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b084      	sub	sp, #16
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	225e      	movs	r2, #94	@ 0x5e
 801b8d6:	2100      	movs	r1, #0
 801b8d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	0018      	movs	r0, r3
 801b8de:	f7ff f999 	bl	801ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b8e2:	46c0      	nop			@ (mov r8, r8)
 801b8e4:	46bd      	mov	sp, r7
 801b8e6:	b004      	add	sp, #16
 801b8e8:	bd80      	pop	{r7, pc}

0801b8ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b8ea:	b580      	push	{r7, lr}
 801b8ec:	b086      	sub	sp, #24
 801b8ee:	af00      	add	r7, sp, #0
 801b8f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 801b8f6:	60bb      	str	r3, [r7, #8]
  return(result);
 801b8f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b8fa:	617b      	str	r3, [r7, #20]
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	f383 8810 	msr	PRIMASK, r3
}
 801b906:	46c0      	nop			@ (mov r8, r8)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	681a      	ldr	r2, [r3, #0]
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	2140      	movs	r1, #64	@ 0x40
 801b914:	438a      	bics	r2, r1
 801b916:	601a      	str	r2, [r3, #0]
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b91c:	693b      	ldr	r3, [r7, #16]
 801b91e:	f383 8810 	msr	PRIMASK, r3
}
 801b922:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	2288      	movs	r2, #136	@ 0x88
 801b928:	2120      	movs	r1, #32
 801b92a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	2200      	movs	r2, #0
 801b930:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	0018      	movs	r0, r3
 801b936:	f7ff f94d 	bl	801abd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b93a:	46c0      	nop			@ (mov r8, r8)
 801b93c:	46bd      	mov	sp, r7
 801b93e:	b006      	add	sp, #24
 801b940:	bd80      	pop	{r7, pc}

0801b942 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b942:	b580      	push	{r7, lr}
 801b944:	b082      	sub	sp, #8
 801b946:	af00      	add	r7, sp, #0
 801b948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b94a:	46c0      	nop			@ (mov r8, r8)
 801b94c:	46bd      	mov	sp, r7
 801b94e:	b002      	add	sp, #8
 801b950:	bd80      	pop	{r7, pc}

0801b952 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801b952:	b580      	push	{r7, lr}
 801b954:	b082      	sub	sp, #8
 801b956:	af00      	add	r7, sp, #0
 801b958:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801b95a:	46c0      	nop			@ (mov r8, r8)
 801b95c:	46bd      	mov	sp, r7
 801b95e:	b002      	add	sp, #8
 801b960:	bd80      	pop	{r7, pc}

0801b962 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801b962:	b580      	push	{r7, lr}
 801b964:	b082      	sub	sp, #8
 801b966:	af00      	add	r7, sp, #0
 801b968:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801b96a:	46c0      	nop			@ (mov r8, r8)
 801b96c:	46bd      	mov	sp, r7
 801b96e:	b002      	add	sp, #8
 801b970:	bd80      	pop	{r7, pc}
	...

0801b974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b084      	sub	sp, #16
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2284      	movs	r2, #132	@ 0x84
 801b980:	5c9b      	ldrb	r3, [r3, r2]
 801b982:	2b01      	cmp	r3, #1
 801b984:	d101      	bne.n	801b98a <HAL_UARTEx_DisableFifoMode+0x16>
 801b986:	2302      	movs	r3, #2
 801b988:	e027      	b.n	801b9da <HAL_UARTEx_DisableFifoMode+0x66>
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	2284      	movs	r2, #132	@ 0x84
 801b98e:	2101      	movs	r1, #1
 801b990:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	2288      	movs	r2, #136	@ 0x88
 801b996:	2124      	movs	r1, #36	@ 0x24
 801b998:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	681a      	ldr	r2, [r3, #0]
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	2101      	movs	r1, #1
 801b9ae:	438a      	bics	r2, r1
 801b9b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	4a0b      	ldr	r2, [pc, #44]	@ (801b9e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 801b9b6:	4013      	ands	r3, r2
 801b9b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	2200      	movs	r2, #0
 801b9be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	68fa      	ldr	r2, [r7, #12]
 801b9c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	2288      	movs	r2, #136	@ 0x88
 801b9cc:	2120      	movs	r1, #32
 801b9ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	2284      	movs	r2, #132	@ 0x84
 801b9d4:	2100      	movs	r1, #0
 801b9d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b9d8:	2300      	movs	r3, #0
}
 801b9da:	0018      	movs	r0, r3
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	b004      	add	sp, #16
 801b9e0:	bd80      	pop	{r7, pc}
 801b9e2:	46c0      	nop			@ (mov r8, r8)
 801b9e4:	dfffffff 	.word	0xdfffffff

0801b9e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b084      	sub	sp, #16
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	2284      	movs	r2, #132	@ 0x84
 801b9f6:	5c9b      	ldrb	r3, [r3, r2]
 801b9f8:	2b01      	cmp	r3, #1
 801b9fa:	d101      	bne.n	801ba00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801b9fc:	2302      	movs	r3, #2
 801b9fe:	e02e      	b.n	801ba5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	2284      	movs	r2, #132	@ 0x84
 801ba04:	2101      	movs	r1, #1
 801ba06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	2288      	movs	r2, #136	@ 0x88
 801ba0c:	2124      	movs	r1, #36	@ 0x24
 801ba0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	681a      	ldr	r2, [r3, #0]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	2101      	movs	r1, #1
 801ba24:	438a      	bics	r2, r1
 801ba26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	689b      	ldr	r3, [r3, #8]
 801ba2e:	00db      	lsls	r3, r3, #3
 801ba30:	08d9      	lsrs	r1, r3, #3
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	683a      	ldr	r2, [r7, #0]
 801ba38:	430a      	orrs	r2, r1
 801ba3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	0018      	movs	r0, r3
 801ba40:	f000 f854 	bl	801baec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	68fa      	ldr	r2, [r7, #12]
 801ba4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	2288      	movs	r2, #136	@ 0x88
 801ba50:	2120      	movs	r1, #32
 801ba52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	2284      	movs	r2, #132	@ 0x84
 801ba58:	2100      	movs	r1, #0
 801ba5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ba5c:	2300      	movs	r3, #0
}
 801ba5e:	0018      	movs	r0, r3
 801ba60:	46bd      	mov	sp, r7
 801ba62:	b004      	add	sp, #16
 801ba64:	bd80      	pop	{r7, pc}
	...

0801ba68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ba68:	b580      	push	{r7, lr}
 801ba6a:	b084      	sub	sp, #16
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	6078      	str	r0, [r7, #4]
 801ba70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	2284      	movs	r2, #132	@ 0x84
 801ba76:	5c9b      	ldrb	r3, [r3, r2]
 801ba78:	2b01      	cmp	r3, #1
 801ba7a:	d101      	bne.n	801ba80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ba7c:	2302      	movs	r3, #2
 801ba7e:	e02f      	b.n	801bae0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	2284      	movs	r2, #132	@ 0x84
 801ba84:	2101      	movs	r1, #1
 801ba86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	2288      	movs	r2, #136	@ 0x88
 801ba8c:	2124      	movs	r1, #36	@ 0x24
 801ba8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	681a      	ldr	r2, [r3, #0]
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	2101      	movs	r1, #1
 801baa4:	438a      	bics	r2, r1
 801baa6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	689b      	ldr	r3, [r3, #8]
 801baae:	4a0e      	ldr	r2, [pc, #56]	@ (801bae8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801bab0:	4013      	ands	r3, r2
 801bab2:	0019      	movs	r1, r3
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	683a      	ldr	r2, [r7, #0]
 801baba:	430a      	orrs	r2, r1
 801babc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	0018      	movs	r0, r3
 801bac2:	f000 f813 	bl	801baec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	68fa      	ldr	r2, [r7, #12]
 801bacc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	2288      	movs	r2, #136	@ 0x88
 801bad2:	2120      	movs	r1, #32
 801bad4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	2284      	movs	r2, #132	@ 0x84
 801bada:	2100      	movs	r1, #0
 801badc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bade:	2300      	movs	r3, #0
}
 801bae0:	0018      	movs	r0, r3
 801bae2:	46bd      	mov	sp, r7
 801bae4:	b004      	add	sp, #16
 801bae6:	bd80      	pop	{r7, pc}
 801bae8:	f1ffffff 	.word	0xf1ffffff

0801baec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801baec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baee:	b085      	sub	sp, #20
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d108      	bne.n	801bb0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	226a      	movs	r2, #106	@ 0x6a
 801bb00:	2101      	movs	r1, #1
 801bb02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	2268      	movs	r2, #104	@ 0x68
 801bb08:	2101      	movs	r1, #1
 801bb0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801bb0c:	e043      	b.n	801bb96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801bb0e:	260f      	movs	r6, #15
 801bb10:	19bb      	adds	r3, r7, r6
 801bb12:	2208      	movs	r2, #8
 801bb14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801bb16:	200e      	movs	r0, #14
 801bb18:	183b      	adds	r3, r7, r0
 801bb1a:	2208      	movs	r2, #8
 801bb1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	689b      	ldr	r3, [r3, #8]
 801bb24:	0e5b      	lsrs	r3, r3, #25
 801bb26:	b2da      	uxtb	r2, r3
 801bb28:	240d      	movs	r4, #13
 801bb2a:	193b      	adds	r3, r7, r4
 801bb2c:	2107      	movs	r1, #7
 801bb2e:	400a      	ands	r2, r1
 801bb30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	689b      	ldr	r3, [r3, #8]
 801bb38:	0f5b      	lsrs	r3, r3, #29
 801bb3a:	b2da      	uxtb	r2, r3
 801bb3c:	250c      	movs	r5, #12
 801bb3e:	197b      	adds	r3, r7, r5
 801bb40:	2107      	movs	r1, #7
 801bb42:	400a      	ands	r2, r1
 801bb44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bb46:	183b      	adds	r3, r7, r0
 801bb48:	781b      	ldrb	r3, [r3, #0]
 801bb4a:	197a      	adds	r2, r7, r5
 801bb4c:	7812      	ldrb	r2, [r2, #0]
 801bb4e:	4914      	ldr	r1, [pc, #80]	@ (801bba0 <UARTEx_SetNbDataToProcess+0xb4>)
 801bb50:	5c8a      	ldrb	r2, [r1, r2]
 801bb52:	435a      	muls	r2, r3
 801bb54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801bb56:	197b      	adds	r3, r7, r5
 801bb58:	781b      	ldrb	r3, [r3, #0]
 801bb5a:	4a12      	ldr	r2, [pc, #72]	@ (801bba4 <UARTEx_SetNbDataToProcess+0xb8>)
 801bb5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bb5e:	0019      	movs	r1, r3
 801bb60:	f7e4 fb64 	bl	800022c <__divsi3>
 801bb64:	0003      	movs	r3, r0
 801bb66:	b299      	uxth	r1, r3
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	226a      	movs	r2, #106	@ 0x6a
 801bb6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bb6e:	19bb      	adds	r3, r7, r6
 801bb70:	781b      	ldrb	r3, [r3, #0]
 801bb72:	193a      	adds	r2, r7, r4
 801bb74:	7812      	ldrb	r2, [r2, #0]
 801bb76:	490a      	ldr	r1, [pc, #40]	@ (801bba0 <UARTEx_SetNbDataToProcess+0xb4>)
 801bb78:	5c8a      	ldrb	r2, [r1, r2]
 801bb7a:	435a      	muls	r2, r3
 801bb7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801bb7e:	193b      	adds	r3, r7, r4
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	4a08      	ldr	r2, [pc, #32]	@ (801bba4 <UARTEx_SetNbDataToProcess+0xb8>)
 801bb84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bb86:	0019      	movs	r1, r3
 801bb88:	f7e4 fb50 	bl	800022c <__divsi3>
 801bb8c:	0003      	movs	r3, r0
 801bb8e:	b299      	uxth	r1, r3
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	2268      	movs	r2, #104	@ 0x68
 801bb94:	5299      	strh	r1, [r3, r2]
}
 801bb96:	46c0      	nop			@ (mov r8, r8)
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	b005      	add	sp, #20
 801bb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb9e:	46c0      	nop			@ (mov r8, r8)
 801bba0:	0801c404 	.word	0x0801c404
 801bba4:	0801c40c 	.word	0x0801c40c

0801bba8 <malloc>:
 801bba8:	b510      	push	{r4, lr}
 801bbaa:	4b03      	ldr	r3, [pc, #12]	@ (801bbb8 <malloc+0x10>)
 801bbac:	0001      	movs	r1, r0
 801bbae:	6818      	ldr	r0, [r3, #0]
 801bbb0:	f000 f830 	bl	801bc14 <_malloc_r>
 801bbb4:	bd10      	pop	{r4, pc}
 801bbb6:	46c0      	nop			@ (mov r8, r8)
 801bbb8:	20000284 	.word	0x20000284

0801bbbc <free>:
 801bbbc:	b510      	push	{r4, lr}
 801bbbe:	4b03      	ldr	r3, [pc, #12]	@ (801bbcc <free+0x10>)
 801bbc0:	0001      	movs	r1, r0
 801bbc2:	6818      	ldr	r0, [r3, #0]
 801bbc4:	f000 f938 	bl	801be38 <_free_r>
 801bbc8:	bd10      	pop	{r4, pc}
 801bbca:	46c0      	nop			@ (mov r8, r8)
 801bbcc:	20000284 	.word	0x20000284

0801bbd0 <sbrk_aligned>:
 801bbd0:	b570      	push	{r4, r5, r6, lr}
 801bbd2:	4e0f      	ldr	r6, [pc, #60]	@ (801bc10 <sbrk_aligned+0x40>)
 801bbd4:	000d      	movs	r5, r1
 801bbd6:	6831      	ldr	r1, [r6, #0]
 801bbd8:	0004      	movs	r4, r0
 801bbda:	2900      	cmp	r1, #0
 801bbdc:	d102      	bne.n	801bbe4 <sbrk_aligned+0x14>
 801bbde:	f000 f8e3 	bl	801bda8 <_sbrk_r>
 801bbe2:	6030      	str	r0, [r6, #0]
 801bbe4:	0029      	movs	r1, r5
 801bbe6:	0020      	movs	r0, r4
 801bbe8:	f000 f8de 	bl	801bda8 <_sbrk_r>
 801bbec:	1c43      	adds	r3, r0, #1
 801bbee:	d103      	bne.n	801bbf8 <sbrk_aligned+0x28>
 801bbf0:	2501      	movs	r5, #1
 801bbf2:	426d      	negs	r5, r5
 801bbf4:	0028      	movs	r0, r5
 801bbf6:	bd70      	pop	{r4, r5, r6, pc}
 801bbf8:	2303      	movs	r3, #3
 801bbfa:	1cc5      	adds	r5, r0, #3
 801bbfc:	439d      	bics	r5, r3
 801bbfe:	42a8      	cmp	r0, r5
 801bc00:	d0f8      	beq.n	801bbf4 <sbrk_aligned+0x24>
 801bc02:	1a29      	subs	r1, r5, r0
 801bc04:	0020      	movs	r0, r4
 801bc06:	f000 f8cf 	bl	801bda8 <_sbrk_r>
 801bc0a:	3001      	adds	r0, #1
 801bc0c:	d1f2      	bne.n	801bbf4 <sbrk_aligned+0x24>
 801bc0e:	e7ef      	b.n	801bbf0 <sbrk_aligned+0x20>
 801bc10:	2000123c 	.word	0x2000123c

0801bc14 <_malloc_r>:
 801bc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc16:	2203      	movs	r2, #3
 801bc18:	1ccb      	adds	r3, r1, #3
 801bc1a:	4393      	bics	r3, r2
 801bc1c:	3308      	adds	r3, #8
 801bc1e:	0005      	movs	r5, r0
 801bc20:	001f      	movs	r7, r3
 801bc22:	2b0c      	cmp	r3, #12
 801bc24:	d234      	bcs.n	801bc90 <_malloc_r+0x7c>
 801bc26:	270c      	movs	r7, #12
 801bc28:	42b9      	cmp	r1, r7
 801bc2a:	d833      	bhi.n	801bc94 <_malloc_r+0x80>
 801bc2c:	0028      	movs	r0, r5
 801bc2e:	f000 f871 	bl	801bd14 <__malloc_lock>
 801bc32:	4e37      	ldr	r6, [pc, #220]	@ (801bd10 <_malloc_r+0xfc>)
 801bc34:	6833      	ldr	r3, [r6, #0]
 801bc36:	001c      	movs	r4, r3
 801bc38:	2c00      	cmp	r4, #0
 801bc3a:	d12f      	bne.n	801bc9c <_malloc_r+0x88>
 801bc3c:	0039      	movs	r1, r7
 801bc3e:	0028      	movs	r0, r5
 801bc40:	f7ff ffc6 	bl	801bbd0 <sbrk_aligned>
 801bc44:	0004      	movs	r4, r0
 801bc46:	1c43      	adds	r3, r0, #1
 801bc48:	d15f      	bne.n	801bd0a <_malloc_r+0xf6>
 801bc4a:	6834      	ldr	r4, [r6, #0]
 801bc4c:	9400      	str	r4, [sp, #0]
 801bc4e:	9b00      	ldr	r3, [sp, #0]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d14a      	bne.n	801bcea <_malloc_r+0xd6>
 801bc54:	2c00      	cmp	r4, #0
 801bc56:	d052      	beq.n	801bcfe <_malloc_r+0xea>
 801bc58:	6823      	ldr	r3, [r4, #0]
 801bc5a:	0028      	movs	r0, r5
 801bc5c:	18e3      	adds	r3, r4, r3
 801bc5e:	9900      	ldr	r1, [sp, #0]
 801bc60:	9301      	str	r3, [sp, #4]
 801bc62:	f000 f8a1 	bl	801bda8 <_sbrk_r>
 801bc66:	9b01      	ldr	r3, [sp, #4]
 801bc68:	4283      	cmp	r3, r0
 801bc6a:	d148      	bne.n	801bcfe <_malloc_r+0xea>
 801bc6c:	6823      	ldr	r3, [r4, #0]
 801bc6e:	0028      	movs	r0, r5
 801bc70:	1aff      	subs	r7, r7, r3
 801bc72:	0039      	movs	r1, r7
 801bc74:	f7ff ffac 	bl	801bbd0 <sbrk_aligned>
 801bc78:	3001      	adds	r0, #1
 801bc7a:	d040      	beq.n	801bcfe <_malloc_r+0xea>
 801bc7c:	6823      	ldr	r3, [r4, #0]
 801bc7e:	19db      	adds	r3, r3, r7
 801bc80:	6023      	str	r3, [r4, #0]
 801bc82:	6833      	ldr	r3, [r6, #0]
 801bc84:	685a      	ldr	r2, [r3, #4]
 801bc86:	2a00      	cmp	r2, #0
 801bc88:	d133      	bne.n	801bcf2 <_malloc_r+0xde>
 801bc8a:	9b00      	ldr	r3, [sp, #0]
 801bc8c:	6033      	str	r3, [r6, #0]
 801bc8e:	e019      	b.n	801bcc4 <_malloc_r+0xb0>
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	dac9      	bge.n	801bc28 <_malloc_r+0x14>
 801bc94:	230c      	movs	r3, #12
 801bc96:	602b      	str	r3, [r5, #0]
 801bc98:	2000      	movs	r0, #0
 801bc9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bc9c:	6821      	ldr	r1, [r4, #0]
 801bc9e:	1bc9      	subs	r1, r1, r7
 801bca0:	d420      	bmi.n	801bce4 <_malloc_r+0xd0>
 801bca2:	290b      	cmp	r1, #11
 801bca4:	d90a      	bls.n	801bcbc <_malloc_r+0xa8>
 801bca6:	19e2      	adds	r2, r4, r7
 801bca8:	6027      	str	r7, [r4, #0]
 801bcaa:	42a3      	cmp	r3, r4
 801bcac:	d104      	bne.n	801bcb8 <_malloc_r+0xa4>
 801bcae:	6032      	str	r2, [r6, #0]
 801bcb0:	6863      	ldr	r3, [r4, #4]
 801bcb2:	6011      	str	r1, [r2, #0]
 801bcb4:	6053      	str	r3, [r2, #4]
 801bcb6:	e005      	b.n	801bcc4 <_malloc_r+0xb0>
 801bcb8:	605a      	str	r2, [r3, #4]
 801bcba:	e7f9      	b.n	801bcb0 <_malloc_r+0x9c>
 801bcbc:	6862      	ldr	r2, [r4, #4]
 801bcbe:	42a3      	cmp	r3, r4
 801bcc0:	d10e      	bne.n	801bce0 <_malloc_r+0xcc>
 801bcc2:	6032      	str	r2, [r6, #0]
 801bcc4:	0028      	movs	r0, r5
 801bcc6:	f000 f82d 	bl	801bd24 <__malloc_unlock>
 801bcca:	0020      	movs	r0, r4
 801bccc:	2207      	movs	r2, #7
 801bcce:	300b      	adds	r0, #11
 801bcd0:	1d23      	adds	r3, r4, #4
 801bcd2:	4390      	bics	r0, r2
 801bcd4:	1ac2      	subs	r2, r0, r3
 801bcd6:	4298      	cmp	r0, r3
 801bcd8:	d0df      	beq.n	801bc9a <_malloc_r+0x86>
 801bcda:	1a1b      	subs	r3, r3, r0
 801bcdc:	50a3      	str	r3, [r4, r2]
 801bcde:	e7dc      	b.n	801bc9a <_malloc_r+0x86>
 801bce0:	605a      	str	r2, [r3, #4]
 801bce2:	e7ef      	b.n	801bcc4 <_malloc_r+0xb0>
 801bce4:	0023      	movs	r3, r4
 801bce6:	6864      	ldr	r4, [r4, #4]
 801bce8:	e7a6      	b.n	801bc38 <_malloc_r+0x24>
 801bcea:	9c00      	ldr	r4, [sp, #0]
 801bcec:	6863      	ldr	r3, [r4, #4]
 801bcee:	9300      	str	r3, [sp, #0]
 801bcf0:	e7ad      	b.n	801bc4e <_malloc_r+0x3a>
 801bcf2:	001a      	movs	r2, r3
 801bcf4:	685b      	ldr	r3, [r3, #4]
 801bcf6:	42a3      	cmp	r3, r4
 801bcf8:	d1fb      	bne.n	801bcf2 <_malloc_r+0xde>
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	e7da      	b.n	801bcb4 <_malloc_r+0xa0>
 801bcfe:	230c      	movs	r3, #12
 801bd00:	0028      	movs	r0, r5
 801bd02:	602b      	str	r3, [r5, #0]
 801bd04:	f000 f80e 	bl	801bd24 <__malloc_unlock>
 801bd08:	e7c6      	b.n	801bc98 <_malloc_r+0x84>
 801bd0a:	6007      	str	r7, [r0, #0]
 801bd0c:	e7da      	b.n	801bcc4 <_malloc_r+0xb0>
 801bd0e:	46c0      	nop			@ (mov r8, r8)
 801bd10:	20001240 	.word	0x20001240

0801bd14 <__malloc_lock>:
 801bd14:	b510      	push	{r4, lr}
 801bd16:	4802      	ldr	r0, [pc, #8]	@ (801bd20 <__malloc_lock+0xc>)
 801bd18:	f000 f882 	bl	801be20 <__retarget_lock_acquire_recursive>
 801bd1c:	bd10      	pop	{r4, pc}
 801bd1e:	46c0      	nop			@ (mov r8, r8)
 801bd20:	20001380 	.word	0x20001380

0801bd24 <__malloc_unlock>:
 801bd24:	b510      	push	{r4, lr}
 801bd26:	4802      	ldr	r0, [pc, #8]	@ (801bd30 <__malloc_unlock+0xc>)
 801bd28:	f000 f87b 	bl	801be22 <__retarget_lock_release_recursive>
 801bd2c:	bd10      	pop	{r4, pc}
 801bd2e:	46c0      	nop			@ (mov r8, r8)
 801bd30:	20001380 	.word	0x20001380

0801bd34 <memcmp>:
 801bd34:	b530      	push	{r4, r5, lr}
 801bd36:	2400      	movs	r4, #0
 801bd38:	3901      	subs	r1, #1
 801bd3a:	42a2      	cmp	r2, r4
 801bd3c:	d101      	bne.n	801bd42 <memcmp+0xe>
 801bd3e:	2000      	movs	r0, #0
 801bd40:	e005      	b.n	801bd4e <memcmp+0x1a>
 801bd42:	5d03      	ldrb	r3, [r0, r4]
 801bd44:	3401      	adds	r4, #1
 801bd46:	5d0d      	ldrb	r5, [r1, r4]
 801bd48:	42ab      	cmp	r3, r5
 801bd4a:	d0f6      	beq.n	801bd3a <memcmp+0x6>
 801bd4c:	1b58      	subs	r0, r3, r5
 801bd4e:	bd30      	pop	{r4, r5, pc}

0801bd50 <memset>:
 801bd50:	0003      	movs	r3, r0
 801bd52:	1882      	adds	r2, r0, r2
 801bd54:	4293      	cmp	r3, r2
 801bd56:	d100      	bne.n	801bd5a <memset+0xa>
 801bd58:	4770      	bx	lr
 801bd5a:	7019      	strb	r1, [r3, #0]
 801bd5c:	3301      	adds	r3, #1
 801bd5e:	e7f9      	b.n	801bd54 <memset+0x4>

0801bd60 <strchr>:
 801bd60:	b2c9      	uxtb	r1, r1
 801bd62:	7803      	ldrb	r3, [r0, #0]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d004      	beq.n	801bd72 <strchr+0x12>
 801bd68:	428b      	cmp	r3, r1
 801bd6a:	d100      	bne.n	801bd6e <strchr+0xe>
 801bd6c:	4770      	bx	lr
 801bd6e:	3001      	adds	r0, #1
 801bd70:	e7f7      	b.n	801bd62 <strchr+0x2>
 801bd72:	424b      	negs	r3, r1
 801bd74:	4159      	adcs	r1, r3
 801bd76:	4249      	negs	r1, r1
 801bd78:	4008      	ands	r0, r1
 801bd7a:	e7f7      	b.n	801bd6c <strchr+0xc>

0801bd7c <strstr>:
 801bd7c:	780a      	ldrb	r2, [r1, #0]
 801bd7e:	b530      	push	{r4, r5, lr}
 801bd80:	2a00      	cmp	r2, #0
 801bd82:	d10c      	bne.n	801bd9e <strstr+0x22>
 801bd84:	bd30      	pop	{r4, r5, pc}
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d108      	bne.n	801bd9c <strstr+0x20>
 801bd8a:	2301      	movs	r3, #1
 801bd8c:	5ccc      	ldrb	r4, [r1, r3]
 801bd8e:	2c00      	cmp	r4, #0
 801bd90:	d0f8      	beq.n	801bd84 <strstr+0x8>
 801bd92:	5cc5      	ldrb	r5, [r0, r3]
 801bd94:	42a5      	cmp	r5, r4
 801bd96:	d101      	bne.n	801bd9c <strstr+0x20>
 801bd98:	3301      	adds	r3, #1
 801bd9a:	e7f7      	b.n	801bd8c <strstr+0x10>
 801bd9c:	3001      	adds	r0, #1
 801bd9e:	7803      	ldrb	r3, [r0, #0]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d1f0      	bne.n	801bd86 <strstr+0xa>
 801bda4:	0018      	movs	r0, r3
 801bda6:	e7ed      	b.n	801bd84 <strstr+0x8>

0801bda8 <_sbrk_r>:
 801bda8:	2300      	movs	r3, #0
 801bdaa:	b570      	push	{r4, r5, r6, lr}
 801bdac:	4d06      	ldr	r5, [pc, #24]	@ (801bdc8 <_sbrk_r+0x20>)
 801bdae:	0004      	movs	r4, r0
 801bdb0:	0008      	movs	r0, r1
 801bdb2:	602b      	str	r3, [r5, #0]
 801bdb4:	f7f0 fc8c 	bl	800c6d0 <_sbrk>
 801bdb8:	1c43      	adds	r3, r0, #1
 801bdba:	d103      	bne.n	801bdc4 <_sbrk_r+0x1c>
 801bdbc:	682b      	ldr	r3, [r5, #0]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d000      	beq.n	801bdc4 <_sbrk_r+0x1c>
 801bdc2:	6023      	str	r3, [r4, #0]
 801bdc4:	bd70      	pop	{r4, r5, r6, pc}
 801bdc6:	46c0      	nop			@ (mov r8, r8)
 801bdc8:	2000137c 	.word	0x2000137c

0801bdcc <__errno>:
 801bdcc:	4b01      	ldr	r3, [pc, #4]	@ (801bdd4 <__errno+0x8>)
 801bdce:	6818      	ldr	r0, [r3, #0]
 801bdd0:	4770      	bx	lr
 801bdd2:	46c0      	nop			@ (mov r8, r8)
 801bdd4:	20000284 	.word	0x20000284

0801bdd8 <__libc_init_array>:
 801bdd8:	b570      	push	{r4, r5, r6, lr}
 801bdda:	2600      	movs	r6, #0
 801bddc:	4c0c      	ldr	r4, [pc, #48]	@ (801be10 <__libc_init_array+0x38>)
 801bdde:	4d0d      	ldr	r5, [pc, #52]	@ (801be14 <__libc_init_array+0x3c>)
 801bde0:	1b64      	subs	r4, r4, r5
 801bde2:	10a4      	asrs	r4, r4, #2
 801bde4:	42a6      	cmp	r6, r4
 801bde6:	d109      	bne.n	801bdfc <__libc_init_array+0x24>
 801bde8:	2600      	movs	r6, #0
 801bdea:	f000 f979 	bl	801c0e0 <_init>
 801bdee:	4c0a      	ldr	r4, [pc, #40]	@ (801be18 <__libc_init_array+0x40>)
 801bdf0:	4d0a      	ldr	r5, [pc, #40]	@ (801be1c <__libc_init_array+0x44>)
 801bdf2:	1b64      	subs	r4, r4, r5
 801bdf4:	10a4      	asrs	r4, r4, #2
 801bdf6:	42a6      	cmp	r6, r4
 801bdf8:	d105      	bne.n	801be06 <__libc_init_array+0x2e>
 801bdfa:	bd70      	pop	{r4, r5, r6, pc}
 801bdfc:	00b3      	lsls	r3, r6, #2
 801bdfe:	58eb      	ldr	r3, [r5, r3]
 801be00:	4798      	blx	r3
 801be02:	3601      	adds	r6, #1
 801be04:	e7ee      	b.n	801bde4 <__libc_init_array+0xc>
 801be06:	00b3      	lsls	r3, r6, #2
 801be08:	58eb      	ldr	r3, [r5, r3]
 801be0a:	4798      	blx	r3
 801be0c:	3601      	adds	r6, #1
 801be0e:	e7f2      	b.n	801bdf6 <__libc_init_array+0x1e>
 801be10:	0801c430 	.word	0x0801c430
 801be14:	0801c430 	.word	0x0801c430
 801be18:	0801c434 	.word	0x0801c434
 801be1c:	0801c430 	.word	0x0801c430

0801be20 <__retarget_lock_acquire_recursive>:
 801be20:	4770      	bx	lr

0801be22 <__retarget_lock_release_recursive>:
 801be22:	4770      	bx	lr

0801be24 <memcpy>:
 801be24:	2300      	movs	r3, #0
 801be26:	b510      	push	{r4, lr}
 801be28:	429a      	cmp	r2, r3
 801be2a:	d100      	bne.n	801be2e <memcpy+0xa>
 801be2c:	bd10      	pop	{r4, pc}
 801be2e:	5ccc      	ldrb	r4, [r1, r3]
 801be30:	54c4      	strb	r4, [r0, r3]
 801be32:	3301      	adds	r3, #1
 801be34:	e7f8      	b.n	801be28 <memcpy+0x4>
	...

0801be38 <_free_r>:
 801be38:	b570      	push	{r4, r5, r6, lr}
 801be3a:	0005      	movs	r5, r0
 801be3c:	1e0c      	subs	r4, r1, #0
 801be3e:	d010      	beq.n	801be62 <_free_r+0x2a>
 801be40:	3c04      	subs	r4, #4
 801be42:	6823      	ldr	r3, [r4, #0]
 801be44:	2b00      	cmp	r3, #0
 801be46:	da00      	bge.n	801be4a <_free_r+0x12>
 801be48:	18e4      	adds	r4, r4, r3
 801be4a:	0028      	movs	r0, r5
 801be4c:	f7ff ff62 	bl	801bd14 <__malloc_lock>
 801be50:	4a1d      	ldr	r2, [pc, #116]	@ (801bec8 <_free_r+0x90>)
 801be52:	6813      	ldr	r3, [r2, #0]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d105      	bne.n	801be64 <_free_r+0x2c>
 801be58:	6063      	str	r3, [r4, #4]
 801be5a:	6014      	str	r4, [r2, #0]
 801be5c:	0028      	movs	r0, r5
 801be5e:	f7ff ff61 	bl	801bd24 <__malloc_unlock>
 801be62:	bd70      	pop	{r4, r5, r6, pc}
 801be64:	42a3      	cmp	r3, r4
 801be66:	d908      	bls.n	801be7a <_free_r+0x42>
 801be68:	6820      	ldr	r0, [r4, #0]
 801be6a:	1821      	adds	r1, r4, r0
 801be6c:	428b      	cmp	r3, r1
 801be6e:	d1f3      	bne.n	801be58 <_free_r+0x20>
 801be70:	6819      	ldr	r1, [r3, #0]
 801be72:	685b      	ldr	r3, [r3, #4]
 801be74:	1809      	adds	r1, r1, r0
 801be76:	6021      	str	r1, [r4, #0]
 801be78:	e7ee      	b.n	801be58 <_free_r+0x20>
 801be7a:	001a      	movs	r2, r3
 801be7c:	685b      	ldr	r3, [r3, #4]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d001      	beq.n	801be86 <_free_r+0x4e>
 801be82:	42a3      	cmp	r3, r4
 801be84:	d9f9      	bls.n	801be7a <_free_r+0x42>
 801be86:	6811      	ldr	r1, [r2, #0]
 801be88:	1850      	adds	r0, r2, r1
 801be8a:	42a0      	cmp	r0, r4
 801be8c:	d10b      	bne.n	801bea6 <_free_r+0x6e>
 801be8e:	6820      	ldr	r0, [r4, #0]
 801be90:	1809      	adds	r1, r1, r0
 801be92:	1850      	adds	r0, r2, r1
 801be94:	6011      	str	r1, [r2, #0]
 801be96:	4283      	cmp	r3, r0
 801be98:	d1e0      	bne.n	801be5c <_free_r+0x24>
 801be9a:	6818      	ldr	r0, [r3, #0]
 801be9c:	685b      	ldr	r3, [r3, #4]
 801be9e:	1841      	adds	r1, r0, r1
 801bea0:	6011      	str	r1, [r2, #0]
 801bea2:	6053      	str	r3, [r2, #4]
 801bea4:	e7da      	b.n	801be5c <_free_r+0x24>
 801bea6:	42a0      	cmp	r0, r4
 801bea8:	d902      	bls.n	801beb0 <_free_r+0x78>
 801beaa:	230c      	movs	r3, #12
 801beac:	602b      	str	r3, [r5, #0]
 801beae:	e7d5      	b.n	801be5c <_free_r+0x24>
 801beb0:	6820      	ldr	r0, [r4, #0]
 801beb2:	1821      	adds	r1, r4, r0
 801beb4:	428b      	cmp	r3, r1
 801beb6:	d103      	bne.n	801bec0 <_free_r+0x88>
 801beb8:	6819      	ldr	r1, [r3, #0]
 801beba:	685b      	ldr	r3, [r3, #4]
 801bebc:	1809      	adds	r1, r1, r0
 801bebe:	6021      	str	r1, [r4, #0]
 801bec0:	6063      	str	r3, [r4, #4]
 801bec2:	6054      	str	r4, [r2, #4]
 801bec4:	e7ca      	b.n	801be5c <_free_r+0x24>
 801bec6:	46c0      	nop			@ (mov r8, r8)
 801bec8:	20001240 	.word	0x20001240

0801becc <sqrt>:
 801becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bece:	0004      	movs	r4, r0
 801bed0:	000d      	movs	r5, r1
 801bed2:	f000 f821 	bl	801bf18 <__ieee754_sqrt>
 801bed6:	0022      	movs	r2, r4
 801bed8:	0006      	movs	r6, r0
 801beda:	000f      	movs	r7, r1
 801bedc:	002b      	movs	r3, r5
 801bede:	0020      	movs	r0, r4
 801bee0:	0029      	movs	r1, r5
 801bee2:	f7e6 fae5 	bl	80024b0 <__aeabi_dcmpun>
 801bee6:	2800      	cmp	r0, #0
 801bee8:	d113      	bne.n	801bf12 <sqrt+0x46>
 801beea:	2200      	movs	r2, #0
 801beec:	2300      	movs	r3, #0
 801beee:	0020      	movs	r0, r4
 801bef0:	0029      	movs	r1, r5
 801bef2:	f7e4 fa9d 	bl	8000430 <__aeabi_dcmplt>
 801bef6:	2800      	cmp	r0, #0
 801bef8:	d00b      	beq.n	801bf12 <sqrt+0x46>
 801befa:	f7ff ff67 	bl	801bdcc <__errno>
 801befe:	2321      	movs	r3, #33	@ 0x21
 801bf00:	2200      	movs	r2, #0
 801bf02:	6003      	str	r3, [r0, #0]
 801bf04:	2300      	movs	r3, #0
 801bf06:	0010      	movs	r0, r2
 801bf08:	0019      	movs	r1, r3
 801bf0a:	f7e4 ffa7 	bl	8000e5c <__aeabi_ddiv>
 801bf0e:	0006      	movs	r6, r0
 801bf10:	000f      	movs	r7, r1
 801bf12:	0030      	movs	r0, r6
 801bf14:	0039      	movs	r1, r7
 801bf16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bf18 <__ieee754_sqrt>:
 801bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf1a:	000a      	movs	r2, r1
 801bf1c:	000d      	movs	r5, r1
 801bf1e:	496b      	ldr	r1, [pc, #428]	@ (801c0cc <__ieee754_sqrt+0x1b4>)
 801bf20:	0004      	movs	r4, r0
 801bf22:	0003      	movs	r3, r0
 801bf24:	0008      	movs	r0, r1
 801bf26:	b087      	sub	sp, #28
 801bf28:	4028      	ands	r0, r5
 801bf2a:	4288      	cmp	r0, r1
 801bf2c:	d111      	bne.n	801bf52 <__ieee754_sqrt+0x3a>
 801bf2e:	0022      	movs	r2, r4
 801bf30:	002b      	movs	r3, r5
 801bf32:	0020      	movs	r0, r4
 801bf34:	0029      	movs	r1, r5
 801bf36:	f7e5 fbcb 	bl	80016d0 <__aeabi_dmul>
 801bf3a:	0002      	movs	r2, r0
 801bf3c:	000b      	movs	r3, r1
 801bf3e:	0020      	movs	r0, r4
 801bf40:	0029      	movs	r1, r5
 801bf42:	f7e4 fbc5 	bl	80006d0 <__aeabi_dadd>
 801bf46:	0004      	movs	r4, r0
 801bf48:	000d      	movs	r5, r1
 801bf4a:	0020      	movs	r0, r4
 801bf4c:	0029      	movs	r1, r5
 801bf4e:	b007      	add	sp, #28
 801bf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf52:	2d00      	cmp	r5, #0
 801bf54:	dc11      	bgt.n	801bf7a <__ieee754_sqrt+0x62>
 801bf56:	0069      	lsls	r1, r5, #1
 801bf58:	0849      	lsrs	r1, r1, #1
 801bf5a:	4321      	orrs	r1, r4
 801bf5c:	d0f5      	beq.n	801bf4a <__ieee754_sqrt+0x32>
 801bf5e:	2000      	movs	r0, #0
 801bf60:	4285      	cmp	r5, r0
 801bf62:	d010      	beq.n	801bf86 <__ieee754_sqrt+0x6e>
 801bf64:	0022      	movs	r2, r4
 801bf66:	002b      	movs	r3, r5
 801bf68:	0020      	movs	r0, r4
 801bf6a:	0029      	movs	r1, r5
 801bf6c:	f7e5 fe96 	bl	8001c9c <__aeabi_dsub>
 801bf70:	0002      	movs	r2, r0
 801bf72:	000b      	movs	r3, r1
 801bf74:	f7e4 ff72 	bl	8000e5c <__aeabi_ddiv>
 801bf78:	e7e5      	b.n	801bf46 <__ieee754_sqrt+0x2e>
 801bf7a:	1528      	asrs	r0, r5, #20
 801bf7c:	d115      	bne.n	801bfaa <__ieee754_sqrt+0x92>
 801bf7e:	2480      	movs	r4, #128	@ 0x80
 801bf80:	2100      	movs	r1, #0
 801bf82:	0364      	lsls	r4, r4, #13
 801bf84:	e007      	b.n	801bf96 <__ieee754_sqrt+0x7e>
 801bf86:	0ada      	lsrs	r2, r3, #11
 801bf88:	3815      	subs	r0, #21
 801bf8a:	055b      	lsls	r3, r3, #21
 801bf8c:	2a00      	cmp	r2, #0
 801bf8e:	d0fa      	beq.n	801bf86 <__ieee754_sqrt+0x6e>
 801bf90:	e7f5      	b.n	801bf7e <__ieee754_sqrt+0x66>
 801bf92:	0052      	lsls	r2, r2, #1
 801bf94:	3101      	adds	r1, #1
 801bf96:	4222      	tst	r2, r4
 801bf98:	d0fb      	beq.n	801bf92 <__ieee754_sqrt+0x7a>
 801bf9a:	1e4c      	subs	r4, r1, #1
 801bf9c:	1b00      	subs	r0, r0, r4
 801bf9e:	2420      	movs	r4, #32
 801bfa0:	001d      	movs	r5, r3
 801bfa2:	1a64      	subs	r4, r4, r1
 801bfa4:	40e5      	lsrs	r5, r4
 801bfa6:	408b      	lsls	r3, r1
 801bfa8:	432a      	orrs	r2, r5
 801bfaa:	4949      	ldr	r1, [pc, #292]	@ (801c0d0 <__ieee754_sqrt+0x1b8>)
 801bfac:	0312      	lsls	r2, r2, #12
 801bfae:	1844      	adds	r4, r0, r1
 801bfb0:	2180      	movs	r1, #128	@ 0x80
 801bfb2:	0b12      	lsrs	r2, r2, #12
 801bfb4:	0349      	lsls	r1, r1, #13
 801bfb6:	4311      	orrs	r1, r2
 801bfb8:	07c0      	lsls	r0, r0, #31
 801bfba:	d403      	bmi.n	801bfc4 <__ieee754_sqrt+0xac>
 801bfbc:	0fda      	lsrs	r2, r3, #31
 801bfbe:	0049      	lsls	r1, r1, #1
 801bfc0:	1851      	adds	r1, r2, r1
 801bfc2:	005b      	lsls	r3, r3, #1
 801bfc4:	2500      	movs	r5, #0
 801bfc6:	1062      	asrs	r2, r4, #1
 801bfc8:	0049      	lsls	r1, r1, #1
 801bfca:	2480      	movs	r4, #128	@ 0x80
 801bfcc:	9205      	str	r2, [sp, #20]
 801bfce:	0fda      	lsrs	r2, r3, #31
 801bfd0:	1852      	adds	r2, r2, r1
 801bfd2:	2016      	movs	r0, #22
 801bfd4:	0029      	movs	r1, r5
 801bfd6:	005b      	lsls	r3, r3, #1
 801bfd8:	03a4      	lsls	r4, r4, #14
 801bfda:	190e      	adds	r6, r1, r4
 801bfdc:	4296      	cmp	r6, r2
 801bfde:	dc02      	bgt.n	801bfe6 <__ieee754_sqrt+0xce>
 801bfe0:	1931      	adds	r1, r6, r4
 801bfe2:	1b92      	subs	r2, r2, r6
 801bfe4:	192d      	adds	r5, r5, r4
 801bfe6:	0fde      	lsrs	r6, r3, #31
 801bfe8:	0052      	lsls	r2, r2, #1
 801bfea:	3801      	subs	r0, #1
 801bfec:	1992      	adds	r2, r2, r6
 801bfee:	005b      	lsls	r3, r3, #1
 801bff0:	0864      	lsrs	r4, r4, #1
 801bff2:	2800      	cmp	r0, #0
 801bff4:	d1f1      	bne.n	801bfda <__ieee754_sqrt+0xc2>
 801bff6:	2620      	movs	r6, #32
 801bff8:	2780      	movs	r7, #128	@ 0x80
 801bffa:	0004      	movs	r4, r0
 801bffc:	9604      	str	r6, [sp, #16]
 801bffe:	063f      	lsls	r7, r7, #24
 801c000:	183e      	adds	r6, r7, r0
 801c002:	46b4      	mov	ip, r6
 801c004:	428a      	cmp	r2, r1
 801c006:	dc02      	bgt.n	801c00e <__ieee754_sqrt+0xf6>
 801c008:	d114      	bne.n	801c034 <__ieee754_sqrt+0x11c>
 801c00a:	429e      	cmp	r6, r3
 801c00c:	d812      	bhi.n	801c034 <__ieee754_sqrt+0x11c>
 801c00e:	4660      	mov	r0, ip
 801c010:	4666      	mov	r6, ip
 801c012:	19c0      	adds	r0, r0, r7
 801c014:	9100      	str	r1, [sp, #0]
 801c016:	2e00      	cmp	r6, #0
 801c018:	da03      	bge.n	801c022 <__ieee754_sqrt+0x10a>
 801c01a:	43c6      	mvns	r6, r0
 801c01c:	0ff6      	lsrs	r6, r6, #31
 801c01e:	198e      	adds	r6, r1, r6
 801c020:	9600      	str	r6, [sp, #0]
 801c022:	1a52      	subs	r2, r2, r1
 801c024:	4563      	cmp	r3, ip
 801c026:	4189      	sbcs	r1, r1
 801c028:	4249      	negs	r1, r1
 801c02a:	1a52      	subs	r2, r2, r1
 801c02c:	4661      	mov	r1, ip
 801c02e:	1a5b      	subs	r3, r3, r1
 801c030:	9900      	ldr	r1, [sp, #0]
 801c032:	19e4      	adds	r4, r4, r7
 801c034:	0fde      	lsrs	r6, r3, #31
 801c036:	0052      	lsls	r2, r2, #1
 801c038:	1992      	adds	r2, r2, r6
 801c03a:	9e04      	ldr	r6, [sp, #16]
 801c03c:	005b      	lsls	r3, r3, #1
 801c03e:	3e01      	subs	r6, #1
 801c040:	087f      	lsrs	r7, r7, #1
 801c042:	9604      	str	r6, [sp, #16]
 801c044:	2e00      	cmp	r6, #0
 801c046:	d1db      	bne.n	801c000 <__ieee754_sqrt+0xe8>
 801c048:	431a      	orrs	r2, r3
 801c04a:	d01f      	beq.n	801c08c <__ieee754_sqrt+0x174>
 801c04c:	4e21      	ldr	r6, [pc, #132]	@ (801c0d4 <__ieee754_sqrt+0x1bc>)
 801c04e:	4f22      	ldr	r7, [pc, #136]	@ (801c0d8 <__ieee754_sqrt+0x1c0>)
 801c050:	6830      	ldr	r0, [r6, #0]
 801c052:	6871      	ldr	r1, [r6, #4]
 801c054:	683a      	ldr	r2, [r7, #0]
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	9200      	str	r2, [sp, #0]
 801c05a:	9301      	str	r3, [sp, #4]
 801c05c:	6832      	ldr	r2, [r6, #0]
 801c05e:	6873      	ldr	r3, [r6, #4]
 801c060:	9202      	str	r2, [sp, #8]
 801c062:	9303      	str	r3, [sp, #12]
 801c064:	9a00      	ldr	r2, [sp, #0]
 801c066:	9b01      	ldr	r3, [sp, #4]
 801c068:	f7e5 fe18 	bl	8001c9c <__aeabi_dsub>
 801c06c:	0002      	movs	r2, r0
 801c06e:	000b      	movs	r3, r1
 801c070:	9802      	ldr	r0, [sp, #8]
 801c072:	9903      	ldr	r1, [sp, #12]
 801c074:	f7e4 f9e6 	bl	8000444 <__aeabi_dcmple>
 801c078:	2800      	cmp	r0, #0
 801c07a:	d007      	beq.n	801c08c <__ieee754_sqrt+0x174>
 801c07c:	6830      	ldr	r0, [r6, #0]
 801c07e:	6871      	ldr	r1, [r6, #4]
 801c080:	683a      	ldr	r2, [r7, #0]
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	1c67      	adds	r7, r4, #1
 801c086:	d10c      	bne.n	801c0a2 <__ieee754_sqrt+0x18a>
 801c088:	9c04      	ldr	r4, [sp, #16]
 801c08a:	3501      	adds	r5, #1
 801c08c:	4a13      	ldr	r2, [pc, #76]	@ (801c0dc <__ieee754_sqrt+0x1c4>)
 801c08e:	106b      	asrs	r3, r5, #1
 801c090:	189b      	adds	r3, r3, r2
 801c092:	9a05      	ldr	r2, [sp, #20]
 801c094:	07ed      	lsls	r5, r5, #31
 801c096:	0864      	lsrs	r4, r4, #1
 801c098:	0512      	lsls	r2, r2, #20
 801c09a:	4325      	orrs	r5, r4
 801c09c:	0028      	movs	r0, r5
 801c09e:	18d1      	adds	r1, r2, r3
 801c0a0:	e751      	b.n	801bf46 <__ieee754_sqrt+0x2e>
 801c0a2:	f7e4 fb15 	bl	80006d0 <__aeabi_dadd>
 801c0a6:	6877      	ldr	r7, [r6, #4]
 801c0a8:	6836      	ldr	r6, [r6, #0]
 801c0aa:	0002      	movs	r2, r0
 801c0ac:	000b      	movs	r3, r1
 801c0ae:	0030      	movs	r0, r6
 801c0b0:	0039      	movs	r1, r7
 801c0b2:	f7e4 f9bd 	bl	8000430 <__aeabi_dcmplt>
 801c0b6:	2800      	cmp	r0, #0
 801c0b8:	d004      	beq.n	801c0c4 <__ieee754_sqrt+0x1ac>
 801c0ba:	3402      	adds	r4, #2
 801c0bc:	4263      	negs	r3, r4
 801c0be:	4163      	adcs	r3, r4
 801c0c0:	18ed      	adds	r5, r5, r3
 801c0c2:	e7e3      	b.n	801c08c <__ieee754_sqrt+0x174>
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	3401      	adds	r4, #1
 801c0c8:	439c      	bics	r4, r3
 801c0ca:	e7df      	b.n	801c08c <__ieee754_sqrt+0x174>
 801c0cc:	7ff00000 	.word	0x7ff00000
 801c0d0:	fffffc01 	.word	0xfffffc01
 801c0d4:	0801c420 	.word	0x0801c420
 801c0d8:	0801c418 	.word	0x0801c418
 801c0dc:	3fe00000 	.word	0x3fe00000

0801c0e0 <_init>:
 801c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0e2:	46c0      	nop			@ (mov r8, r8)
 801c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0e6:	bc08      	pop	{r3}
 801c0e8:	469e      	mov	lr, r3
 801c0ea:	4770      	bx	lr

0801c0ec <_fini>:
 801c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0ee:	46c0      	nop			@ (mov r8, r8)
 801c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0f2:	bc08      	pop	{r3}
 801c0f4:	469e      	mov	lr, r3
 801c0f6:	4770      	bx	lr

0801c0f8 <__FLASH_Program_Fast_veneer>:
 801c0f8:	b401      	push	{r0}
 801c0fa:	4802      	ldr	r0, [pc, #8]	@ (801c104 <__FLASH_Program_Fast_veneer+0xc>)
 801c0fc:	4684      	mov	ip, r0
 801c0fe:	bc01      	pop	{r0}
 801c100:	4760      	bx	ip
 801c102:	bf00      	nop
 801c104:	200002d5 	.word	0x200002d5

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <aTxBuffer>:
20000004:	ff000007 00080000                       ........

2000000c <dpytab>:
2000000c:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
2000001c:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
2000002c:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
2000003c:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

2000004c <BluetoothState>:
2000004c:	00000001                                ....

20000050 <Eventos>:
20000050:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

2000006c <Mediciones>:
2000006c:	12222111 00001333                       .!".3...

20000074 <Alarmas>:
20000074:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000084:	00000000                                ....

20000088 <DatosMAC>:
20000088:	56781234 00009999                       4.xV....

20000090 <DatosFirmware>:
20000090:	                                         ..

20000092 <PNU_0x3000>:
20000092:	                                         ..

20000094 <PNU_0x3004>:
20000094:	                                         (.

20000096 <PNU_0x3006>:
20000096:	                                         ..

20000098 <PNU_0x3008>:
20000098:	                                         ..

2000009a <PNU_0x300C>:
2000009a:	                                         ..

2000009c <PNU_0x3010>:
2000009c:	                                         ..

2000009e <PNU_0x3012>:
2000009e:	                                         (.

200000a0 <PNU_0x3014>:
200000a0:	                                         ..

200000a2 <PNU_0x3016>:
200000a2:	                                         ..

200000a4 <PNU_0x3018>:
200000a4:	                                         ..

200000a6 <PNU_0x301A>:
200000a6:	                                         2.

200000a8 <PNU_0x301C>:
200000a8:	                                         Z.

200000aa <PNU_0x301E>:
200000aa:	                                         ..

200000ac <PNU_0x3104>:
200000ac:	                                         ..

200000ae <PNU_0x3106>:
200000ae:	                                         ..

200000b0 <PNU_0x3108>:
200000b0:	                                         ..

200000b2 <PNU_0x310A>:
200000b2:	                                         ..

200000b4 <PNU_0x310C>:
200000b4:	                                         _.

200000b6 <PNU_0x310E>:
200000b6:	                                         d.

200000b8 <Plantilla>:
	...
20000100:	00000001 00000000 00000000 00000000     ................
	...

20000138 <copiaPlantilla>:
	...
20000180:	00000100 00000000 00000000 00000000     ................
	...

200001b8 <reevolt_div>:
200001b8:	                                         .

200001b9 <reevolt_mul>:
200001b9:	                                         .

200001ba <reeEstado1>:
200001ba:	                                         .

200001bb <reeLat1>:
200001bb:	                                         .

200001bc <reeLat2>:
200001bc:	                                         .

200001bd <reeLat3>:
200001bd:	                                         .

200001be <reeLat4>:
200001be:	                                         .

200001bf <reeLong1>:
200001bf:	                                         .

200001c0 <reeLong2>:
200001c0:	                                         .

200001c1 <reeLong3>:
200001c1:	                                         .

200001c2 <reeLong4>:
200001c2:	                                         ..

200001c4 <daysToMonth>:
200001c4:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001d4:	00000078 00000097 000000b6 000000d5     x...............
200001e4:	000000f3 00000111 00000130 0000014e     ........0...N...

200001f4 <PFULLDEF_Px_PORT>:
200001f4:	50000400 50000400 50000400 50000400     ...P...P...P...P
20000204:	50000400                                ...P

20000208 <PFULLDEF_Px_PIN>:
20000208:	40101010 00000010                       ...@....

20000210 <PFULLDEF_MPx_PORT>:
20000210:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000220 <PFULLDEF_MPx_PIN>:
20000220:	08080808                                ....

20000224 <firstFlagPuerta1>:
20000224:	00000001                                ....

20000228 <difName>:
20000228:	5f454c42 4e2b5441 49454d41 5245424d     BLE_AT+NAMEIMBER
20000238:	54432d41 462d464f 00000a0d 00000000     A-CTOF-F........
	...

2000025c <SystemCoreClock>:
2000025c:	003d0900                                ..=.

20000260 <tRTP1000>:
20000260:	00000008 00000000 00000000 00000000     ................

20000270 <pagina_borrado>:
20000270:	00000040                                @...

20000274 <direccion_fw>:
20000274:	08020000                                ....

20000278 <contador_bloques_fw>:
20000278:	00000010                                ....

2000027c <uwTickPrio>:
2000027c:	00000004                                ....

20000280 <uwTickFreq>:
20000280:	00000001                                ....

20000284 <_impure_ptr>:
20000284:	20000288                                ... 

20000288 <_impure_data>:
20000288:	00000000 20001244 200012ac 20001314     ....D.. ... ... 
	...

200002d4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b088      	sub	sp, #32
200002d8:	af00      	add	r7, sp, #0
200002da:	6078      	str	r0, [r7, #4]
200002dc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200002de:	231f      	movs	r3, #31
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	2200      	movs	r2, #0
200002e4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200002e6:	687b      	ldr	r3, [r7, #4]
200002e8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200002ea:	683b      	ldr	r3, [r7, #0]
200002ec:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200002ee:	4b1a      	ldr	r3, [pc, #104]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f0:	695a      	ldr	r2, [r3, #20]
200002f2:	4b19      	ldr	r3, [pc, #100]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f4:	2180      	movs	r1, #128	@ 0x80
200002f6:	02c9      	lsls	r1, r1, #11
200002f8:	430a      	orrs	r2, r1
200002fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002fc:	f3ef 8310 	mrs	r3, PRIMASK
20000300:	60fb      	str	r3, [r7, #12]
  return(result);
20000302:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000306:	b672      	cpsid	i
}
20000308:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000030a:	e00f      	b.n	2000032c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000030c:	697a      	ldr	r2, [r7, #20]
2000030e:	69bb      	ldr	r3, [r7, #24]
20000310:	6812      	ldr	r2, [r2, #0]
20000312:	601a      	str	r2, [r3, #0]
    src += 4U;
20000314:	697b      	ldr	r3, [r7, #20]
20000316:	3304      	adds	r3, #4
20000318:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000031a:	69bb      	ldr	r3, [r7, #24]
2000031c:	3304      	adds	r3, #4
2000031e:	61bb      	str	r3, [r7, #24]
    index++;
20000320:	211f      	movs	r1, #31
20000322:	187b      	adds	r3, r7, r1
20000324:	781a      	ldrb	r2, [r3, #0]
20000326:	187b      	adds	r3, r7, r1
20000328:	3201      	adds	r2, #1
2000032a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000032c:	231f      	movs	r3, #31
2000032e:	18fb      	adds	r3, r7, r3
20000330:	781b      	ldrb	r3, [r3, #0]
20000332:	2b3f      	cmp	r3, #63	@ 0x3f
20000334:	d9ea      	bls.n	2000030c <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000336:	46c0      	nop			@ (mov r8, r8)
20000338:	4b07      	ldr	r3, [pc, #28]	@ (20000358 <FLASH_Program_Fast+0x84>)
2000033a:	691a      	ldr	r2, [r3, #16]
2000033c:	2380      	movs	r3, #128	@ 0x80
2000033e:	025b      	lsls	r3, r3, #9
20000340:	4013      	ands	r3, r2
20000342:	d1f9      	bne.n	20000338 <FLASH_Program_Fast+0x64>
20000344:	693b      	ldr	r3, [r7, #16]
20000346:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000348:	68bb      	ldr	r3, [r7, #8]
2000034a:	f383 8810 	msr	PRIMASK, r3
}
2000034e:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000350:	46c0      	nop			@ (mov r8, r8)
20000352:	46bd      	mov	sp, r7
20000354:	b008      	add	sp, #32
20000356:	bd80      	pop	{r7, pc}
20000358:	40022000 	.word	0x40022000
