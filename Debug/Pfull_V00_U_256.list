
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801eff0  0801eff0  0001eff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM_P 00000080  0803f000  0803f000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .myBufSectionEEPROM_V 00000014  0803f800  0803f800  00028800  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .BOOTLOADER   00001000  0801f000  0801f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .text         0001c440  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .rodata       00000320  0801c500  0801c500  0001d500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .ARM.extab    00000000  0801c820  0801c820  00028814  2**0
                  CONTENTS, READONLY
 10 .ARM          00000008  0801c820  0801c820  0001d820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .preinit_array 00000000  0801c828  0801c828  00028814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 12 .init_array   00000004  0801c828  0801c828  0001d828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .fini_array   00000004  0801c82c  0801c82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .data         0000035c  20000000  0801c830  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 15 .bss          00001074  2000035c  0801cb8c  0001e35c  2**2
                  ALLOC
 16 ._user_heap_stack 00000600  200013d0  0801cb8c  0001e3d0  2**0
                  ALLOC
 17 .ARM.attributes 00000028  00000000  00000000  00028814  2**0
                  CONTENTS, READONLY
 18 .debug_info   00031a4b  00000000  00000000  0002883c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000066c2  00000000  00000000  0005a287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002088  00000000  00000000  00060950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000019cc  00000000  00000000  000629d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000222f2  00000000  00000000  000643a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0000da10  00000000  00000000  00086696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  000940a6  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000793c  00000000  00000000  000940ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  0009ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000035c 	.word	0x2000035c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c4d4 	.word	0x0801c4d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000360 	.word	0x20000360
 8000104:	0801c4d4 	.word	0x0801c4d4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f8ed 	bl	80015f4 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f831 	bl	800148c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f8df 	bl	80015f4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8d5 	bl	80015f4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f85b 	bl	8001514 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f851 	bl	8001514 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	@ (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	ffffff21 	.word	0xffffff21
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f824 	bl	8000538 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ffef 	bl	80024f4 <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fbbc 	bl	8001c9c <__aeabi_dsub>
 8000524:	f001 ffe6 	bl	80024f4 <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 f82c 	bl	80025b4 <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 f827 	bl	80025b4 <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d434      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 800056e:	469b      	mov	fp, r3
 8000570:	4653      	mov	r3, sl
 8000572:	465a      	mov	r2, fp
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83b      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e079      	b.n	800067e <__udivmoddi4+0x146>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e076      	b.n	8000684 <__udivmoddi4+0x14c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e029      	b.n	8000604 <__udivmoddi4+0xcc>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4652      	mov	r2, sl
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0013      	movs	r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	431f      	orrs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d9c3      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d8      	beq.n	80005bc <__udivmoddi4+0x84>
 800060a:	07fb      	lsls	r3, r7, #31
 800060c:	0872      	lsrs	r2, r6, #1
 800060e:	431a      	orrs	r2, r3
 8000610:	4646      	mov	r6, r8
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	e00e      	b.n	8000634 <__udivmoddi4+0xfc>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d101      	bne.n	800061e <__udivmoddi4+0xe6>
 800061a:	42a2      	cmp	r2, r4
 800061c:	d80c      	bhi.n	8000638 <__udivmoddi4+0x100>
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	419d      	sbcs	r5, r3
 8000622:	2001      	movs	r0, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2100      	movs	r1, #0
 800062a:	3e01      	subs	r6, #1
 800062c:	1824      	adds	r4, r4, r0
 800062e:	414d      	adcs	r5, r1
 8000630:	2e00      	cmp	r6, #0
 8000632:	d006      	beq.n	8000642 <__udivmoddi4+0x10a>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d9ee      	bls.n	8000616 <__udivmoddi4+0xde>
 8000638:	3e01      	subs	r6, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2e00      	cmp	r6, #0
 8000640:	d1f8      	bne.n	8000634 <__udivmoddi4+0xfc>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	465b      	mov	r3, fp
 8000648:	1900      	adds	r0, r0, r4
 800064a:	4169      	adcs	r1, r5
 800064c:	2b00      	cmp	r3, #0
 800064e:	db24      	blt.n	800069a <__udivmoddi4+0x162>
 8000650:	002b      	movs	r3, r5
 8000652:	465a      	mov	r2, fp
 8000654:	4644      	mov	r4, r8
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	db2a      	blt.n	80006bc <__udivmoddi4+0x184>
 8000666:	0026      	movs	r6, r4
 8000668:	409e      	lsls	r6, r3
 800066a:	0033      	movs	r3, r6
 800066c:	0026      	movs	r6, r4
 800066e:	4647      	mov	r7, r8
 8000670:	40be      	lsls	r6, r7
 8000672:	0032      	movs	r2, r6
 8000674:	1a80      	subs	r0, r0, r2
 8000676:	4199      	sbcs	r1, r3
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	9101      	str	r1, [sp, #4]
 800067c:	e79e      	b.n	80005bc <__udivmoddi4+0x84>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d8bc      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000682:	e782      	b.n	800058a <__udivmoddi4+0x52>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e785      	b.n	80005a6 <__udivmoddi4+0x6e>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4646      	mov	r6, r8
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4644      	mov	r4, r8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dad4      	bge.n	8000666 <__udivmoddi4+0x12e>
 80006bc:	4642      	mov	r2, r8
 80006be:	002f      	movs	r7, r5
 80006c0:	2320      	movs	r3, #32
 80006c2:	0026      	movs	r6, r4
 80006c4:	4097      	lsls	r7, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	40de      	lsrs	r6, r3
 80006ca:	003b      	movs	r3, r7
 80006cc:	4333      	orrs	r3, r6
 80006ce:	e7cd      	b.n	800066c <__udivmoddi4+0x134>

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	b5c0      	push	{r6, r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	030e      	lsls	r6, r1, #12
 80006e2:	004c      	lsls	r4, r1, #1
 80006e4:	0fcd      	lsrs	r5, r1, #31
 80006e6:	0a71      	lsrs	r1, r6, #9
 80006e8:	9e00      	ldr	r6, [sp, #0]
 80006ea:	005f      	lsls	r7, r3, #1
 80006ec:	0f76      	lsrs	r6, r6, #29
 80006ee:	430e      	orrs	r6, r1
 80006f0:	9900      	ldr	r1, [sp, #0]
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	00c9      	lsls	r1, r1, #3
 80006f8:	4689      	mov	r9, r1
 80006fa:	0319      	lsls	r1, r3, #12
 80006fc:	0d7b      	lsrs	r3, r7, #21
 80006fe:	4698      	mov	r8, r3
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	0a49      	lsrs	r1, r1, #9
 8000704:	0fdb      	lsrs	r3, r3, #31
 8000706:	469c      	mov	ip, r3
 8000708:	9b00      	ldr	r3, [sp, #0]
 800070a:	9a00      	ldr	r2, [sp, #0]
 800070c:	0f5b      	lsrs	r3, r3, #29
 800070e:	430b      	orrs	r3, r1
 8000710:	4641      	mov	r1, r8
 8000712:	0d64      	lsrs	r4, r4, #21
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	1a61      	subs	r1, r4, r1
 8000718:	4565      	cmp	r5, ip
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x4e>
 800071c:	e0a6      	b.n	800086c <__aeabi_dadd+0x19c>
 800071e:	2900      	cmp	r1, #0
 8000720:	dd72      	ble.n	8000808 <__aeabi_dadd+0x138>
 8000722:	4647      	mov	r7, r8
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x5a>
 8000728:	e0dd      	b.n	80008e6 <__aeabi_dadd+0x216>
 800072a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800072c:	42bc      	cmp	r4, r7
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x62>
 8000730:	e19a      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000732:	2701      	movs	r7, #1
 8000734:	2938      	cmp	r1, #56	@ 0x38
 8000736:	dc17      	bgt.n	8000768 <__aeabi_dadd+0x98>
 8000738:	2780      	movs	r7, #128	@ 0x80
 800073a:	043f      	lsls	r7, r7, #16
 800073c:	433b      	orrs	r3, r7
 800073e:	291f      	cmp	r1, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0x74>
 8000742:	e1dd      	b.n	8000b00 <__aeabi_dadd+0x430>
 8000744:	2720      	movs	r7, #32
 8000746:	1a78      	subs	r0, r7, r1
 8000748:	001f      	movs	r7, r3
 800074a:	4087      	lsls	r7, r0
 800074c:	46ba      	mov	sl, r7
 800074e:	0017      	movs	r7, r2
 8000750:	40cf      	lsrs	r7, r1
 8000752:	4684      	mov	ip, r0
 8000754:	0038      	movs	r0, r7
 8000756:	4657      	mov	r7, sl
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	1af6      	subs	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	464b      	mov	r3, r9
 800076a:	1bdf      	subs	r7, r3, r7
 800076c:	45b9      	cmp	r9, r7
 800076e:	4180      	sbcs	r0, r0
 8000770:	4240      	negs	r0, r0
 8000772:	1a36      	subs	r6, r6, r0
 8000774:	0233      	lsls	r3, r6, #8
 8000776:	d400      	bmi.n	800077a <__aeabi_dadd+0xaa>
 8000778:	e0ff      	b.n	800097a <__aeabi_dadd+0x2aa>
 800077a:	0276      	lsls	r6, r6, #9
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0xb4>
 8000782:	e13c      	b.n	80009fe <__aeabi_dadd+0x32e>
 8000784:	0030      	movs	r0, r6
 8000786:	f7ff fe7b 	bl	8000480 <__clzsi2>
 800078a:	0003      	movs	r3, r0
 800078c:	3b08      	subs	r3, #8
 800078e:	2120      	movs	r1, #32
 8000790:	0038      	movs	r0, r7
 8000792:	1aca      	subs	r2, r1, r3
 8000794:	40d0      	lsrs	r0, r2
 8000796:	409e      	lsls	r6, r3
 8000798:	0002      	movs	r2, r0
 800079a:	409f      	lsls	r7, r3
 800079c:	4332      	orrs	r2, r6
 800079e:	429c      	cmp	r4, r3
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0xd4>
 80007a2:	e1a6      	b.n	8000af2 <__aeabi_dadd+0x422>
 80007a4:	1b18      	subs	r0, r3, r4
 80007a6:	3001      	adds	r0, #1
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	003e      	movs	r6, r7
 80007ac:	408f      	lsls	r7, r1
 80007ae:	40c6      	lsrs	r6, r0
 80007b0:	1e7b      	subs	r3, r7, #1
 80007b2:	419f      	sbcs	r7, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	408b      	lsls	r3, r1
 80007b8:	4337      	orrs	r7, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	40c2      	lsrs	r2, r0
 80007be:	003b      	movs	r3, r7
 80007c0:	0016      	movs	r6, r2
 80007c2:	2400      	movs	r4, #0
 80007c4:	4313      	orrs	r3, r2
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0xfa>
 80007c8:	e1df      	b.n	8000b8a <__aeabi_dadd+0x4ba>
 80007ca:	077b      	lsls	r3, r7, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x100>
 80007ce:	e332      	b.n	8000e36 <__aeabi_dadd+0x766>
 80007d0:	230f      	movs	r3, #15
 80007d2:	003a      	movs	r2, r7
 80007d4:	403b      	ands	r3, r7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d004      	beq.n	80007e4 <__aeabi_dadd+0x114>
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	42ba      	cmp	r2, r7
 80007de:	41bf      	sbcs	r7, r7
 80007e0:	427f      	negs	r7, r7
 80007e2:	19f6      	adds	r6, r6, r7
 80007e4:	0233      	lsls	r3, r6, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x11a>
 80007e8:	e323      	b.n	8000e32 <__aeabi_dadd+0x762>
 80007ea:	4b9c      	ldr	r3, [pc, #624]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80007ec:	3401      	adds	r4, #1
 80007ee:	429c      	cmp	r4, r3
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x124>
 80007f2:	e0b4      	b.n	800095e <__aeabi_dadd+0x28e>
 80007f4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a60 <__aeabi_dadd+0x390>)
 80007f6:	0564      	lsls	r4, r4, #21
 80007f8:	401e      	ands	r6, r3
 80007fa:	0d64      	lsrs	r4, r4, #21
 80007fc:	0777      	lsls	r7, r6, #29
 80007fe:	08d2      	lsrs	r2, r2, #3
 8000800:	0276      	lsls	r6, r6, #9
 8000802:	4317      	orrs	r7, r2
 8000804:	0b36      	lsrs	r6, r6, #12
 8000806:	e0ac      	b.n	8000962 <__aeabi_dadd+0x292>
 8000808:	2900      	cmp	r1, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x13e>
 800080c:	e07e      	b.n	800090c <__aeabi_dadd+0x23c>
 800080e:	4641      	mov	r1, r8
 8000810:	1b09      	subs	r1, r1, r4
 8000812:	2c00      	cmp	r4, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x148>
 8000816:	e160      	b.n	8000ada <__aeabi_dadd+0x40a>
 8000818:	0034      	movs	r4, r6
 800081a:	4648      	mov	r0, r9
 800081c:	4304      	orrs	r4, r0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x152>
 8000820:	e1c9      	b.n	8000bb6 <__aeabi_dadd+0x4e6>
 8000822:	1e4c      	subs	r4, r1, #1
 8000824:	2901      	cmp	r1, #1
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x15a>
 8000828:	e22e      	b.n	8000c88 <__aeabi_dadd+0x5b8>
 800082a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800082c:	42a9      	cmp	r1, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x162>
 8000830:	e224      	b.n	8000c7c <__aeabi_dadd+0x5ac>
 8000832:	2701      	movs	r7, #1
 8000834:	2c38      	cmp	r4, #56	@ 0x38
 8000836:	dc11      	bgt.n	800085c <__aeabi_dadd+0x18c>
 8000838:	0021      	movs	r1, r4
 800083a:	291f      	cmp	r1, #31
 800083c:	dd00      	ble.n	8000840 <__aeabi_dadd+0x170>
 800083e:	e20b      	b.n	8000c58 <__aeabi_dadd+0x588>
 8000840:	2420      	movs	r4, #32
 8000842:	0037      	movs	r7, r6
 8000844:	4648      	mov	r0, r9
 8000846:	1a64      	subs	r4, r4, r1
 8000848:	40a7      	lsls	r7, r4
 800084a:	40c8      	lsrs	r0, r1
 800084c:	4307      	orrs	r7, r0
 800084e:	4648      	mov	r0, r9
 8000850:	40a0      	lsls	r0, r4
 8000852:	40ce      	lsrs	r6, r1
 8000854:	1e44      	subs	r4, r0, #1
 8000856:	41a0      	sbcs	r0, r4
 8000858:	1b9b      	subs	r3, r3, r6
 800085a:	4307      	orrs	r7, r0
 800085c:	1bd7      	subs	r7, r2, r7
 800085e:	42ba      	cmp	r2, r7
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4665      	mov	r5, ip
 8000866:	4644      	mov	r4, r8
 8000868:	1a9e      	subs	r6, r3, r2
 800086a:	e783      	b.n	8000774 <__aeabi_dadd+0xa4>
 800086c:	2900      	cmp	r1, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x1a2>
 8000870:	e09c      	b.n	80009ac <__aeabi_dadd+0x2dc>
 8000872:	4647      	mov	r7, r8
 8000874:	2f00      	cmp	r7, #0
 8000876:	d167      	bne.n	8000948 <__aeabi_dadd+0x278>
 8000878:	001f      	movs	r7, r3
 800087a:	4317      	orrs	r7, r2
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1b0>
 800087e:	e0e4      	b.n	8000a4a <__aeabi_dadd+0x37a>
 8000880:	1e48      	subs	r0, r1, #1
 8000882:	2901      	cmp	r1, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x1b8>
 8000886:	e19b      	b.n	8000bc0 <__aeabi_dadd+0x4f0>
 8000888:	4f74      	ldr	r7, [pc, #464]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800088a:	42b9      	cmp	r1, r7
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x1c0>
 800088e:	e0eb      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000890:	2701      	movs	r7, #1
 8000892:	0001      	movs	r1, r0
 8000894:	2838      	cmp	r0, #56	@ 0x38
 8000896:	dc11      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000898:	291f      	cmp	r1, #31
 800089a:	dd00      	ble.n	800089e <__aeabi_dadd+0x1ce>
 800089c:	e1c7      	b.n	8000c2e <__aeabi_dadd+0x55e>
 800089e:	2720      	movs	r7, #32
 80008a0:	1a78      	subs	r0, r7, r1
 80008a2:	001f      	movs	r7, r3
 80008a4:	4684      	mov	ip, r0
 80008a6:	4087      	lsls	r7, r0
 80008a8:	0010      	movs	r0, r2
 80008aa:	40c8      	lsrs	r0, r1
 80008ac:	4307      	orrs	r7, r0
 80008ae:	4660      	mov	r0, ip
 80008b0:	4082      	lsls	r2, r0
 80008b2:	40cb      	lsrs	r3, r1
 80008b4:	1e50      	subs	r0, r2, #1
 80008b6:	4182      	sbcs	r2, r0
 80008b8:	18f6      	adds	r6, r6, r3
 80008ba:	4317      	orrs	r7, r2
 80008bc:	444f      	add	r7, r9
 80008be:	454f      	cmp	r7, r9
 80008c0:	4180      	sbcs	r0, r0
 80008c2:	4240      	negs	r0, r0
 80008c4:	1836      	adds	r6, r6, r0
 80008c6:	0233      	lsls	r3, r6, #8
 80008c8:	d557      	bpl.n	800097a <__aeabi_dadd+0x2aa>
 80008ca:	4b64      	ldr	r3, [pc, #400]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008cc:	3401      	adds	r4, #1
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d045      	beq.n	800095e <__aeabi_dadd+0x28e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	4b62      	ldr	r3, [pc, #392]	@ (8000a60 <__aeabi_dadd+0x390>)
 80008d6:	087a      	lsrs	r2, r7, #1
 80008d8:	401e      	ands	r6, r3
 80008da:	4039      	ands	r1, r7
 80008dc:	430a      	orrs	r2, r1
 80008de:	07f7      	lsls	r7, r6, #31
 80008e0:	4317      	orrs	r7, r2
 80008e2:	0876      	lsrs	r6, r6, #1
 80008e4:	e771      	b.n	80007ca <__aeabi_dadd+0xfa>
 80008e6:	001f      	movs	r7, r3
 80008e8:	4317      	orrs	r7, r2
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x21e>
 80008ec:	e0ad      	b.n	8000a4a <__aeabi_dadd+0x37a>
 80008ee:	1e4f      	subs	r7, r1, #1
 80008f0:	46bc      	mov	ip, r7
 80008f2:	2901      	cmp	r1, #1
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x228>
 80008f6:	e182      	b.n	8000bfe <__aeabi_dadd+0x52e>
 80008f8:	4f58      	ldr	r7, [pc, #352]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008fa:	42b9      	cmp	r1, r7
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x230>
 80008fe:	e190      	b.n	8000c22 <__aeabi_dadd+0x552>
 8000900:	4661      	mov	r1, ip
 8000902:	2701      	movs	r7, #1
 8000904:	2938      	cmp	r1, #56	@ 0x38
 8000906:	dd00      	ble.n	800090a <__aeabi_dadd+0x23a>
 8000908:	e72e      	b.n	8000768 <__aeabi_dadd+0x98>
 800090a:	e718      	b.n	800073e <__aeabi_dadd+0x6e>
 800090c:	4f55      	ldr	r7, [pc, #340]	@ (8000a64 <__aeabi_dadd+0x394>)
 800090e:	1c61      	adds	r1, r4, #1
 8000910:	4239      	tst	r1, r7
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x246>
 8000914:	e0d0      	b.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000916:	0031      	movs	r1, r6
 8000918:	4648      	mov	r0, r9
 800091a:	001f      	movs	r7, r3
 800091c:	4301      	orrs	r1, r0
 800091e:	4317      	orrs	r7, r2
 8000920:	2c00      	cmp	r4, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x256>
 8000924:	e13d      	b.n	8000ba2 <__aeabi_dadd+0x4d2>
 8000926:	2900      	cmp	r1, #0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x25c>
 800092a:	e1bc      	b.n	8000ca6 <__aeabi_dadd+0x5d6>
 800092c:	2f00      	cmp	r7, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x262>
 8000930:	e1bf      	b.n	8000cb2 <__aeabi_dadd+0x5e2>
 8000932:	464b      	mov	r3, r9
 8000934:	2100      	movs	r1, #0
 8000936:	08d8      	lsrs	r0, r3, #3
 8000938:	0777      	lsls	r7, r6, #29
 800093a:	4307      	orrs	r7, r0
 800093c:	08f0      	lsrs	r0, r6, #3
 800093e:	0306      	lsls	r6, r0, #12
 8000940:	054c      	lsls	r4, r1, #21
 8000942:	0b36      	lsrs	r6, r6, #12
 8000944:	0d64      	lsrs	r4, r4, #21
 8000946:	e00c      	b.n	8000962 <__aeabi_dadd+0x292>
 8000948:	4f44      	ldr	r7, [pc, #272]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800094a:	42bc      	cmp	r4, r7
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x280>
 800094e:	e08b      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000950:	2701      	movs	r7, #1
 8000952:	2938      	cmp	r1, #56	@ 0x38
 8000954:	dcb2      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000956:	2780      	movs	r7, #128	@ 0x80
 8000958:	043f      	lsls	r7, r7, #16
 800095a:	433b      	orrs	r3, r7
 800095c:	e79c      	b.n	8000898 <__aeabi_dadd+0x1c8>
 800095e:	2600      	movs	r6, #0
 8000960:	2700      	movs	r7, #0
 8000962:	0524      	lsls	r4, r4, #20
 8000964:	4334      	orrs	r4, r6
 8000966:	07ed      	lsls	r5, r5, #31
 8000968:	432c      	orrs	r4, r5
 800096a:	0038      	movs	r0, r7
 800096c:	0021      	movs	r1, r4
 800096e:	b002      	add	sp, #8
 8000970:	bce0      	pop	{r5, r6, r7}
 8000972:	46ba      	mov	sl, r7
 8000974:	46b1      	mov	r9, r6
 8000976:	46a8      	mov	r8, r5
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	077b      	lsls	r3, r7, #29
 800097c:	d004      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 800097e:	230f      	movs	r3, #15
 8000980:	403b      	ands	r3, r7
 8000982:	2b04      	cmp	r3, #4
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 8000986:	e728      	b.n	80007da <__aeabi_dadd+0x10a>
 8000988:	08f8      	lsrs	r0, r7, #3
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800098c:	0777      	lsls	r7, r6, #29
 800098e:	4307      	orrs	r7, r0
 8000990:	08f0      	lsrs	r0, r6, #3
 8000992:	429c      	cmp	r4, r3
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x2c8>
 8000996:	e24a      	b.n	8000e2e <__aeabi_dadd+0x75e>
 8000998:	003b      	movs	r3, r7
 800099a:	4303      	orrs	r3, r0
 800099c:	d059      	beq.n	8000a52 <__aeabi_dadd+0x382>
 800099e:	2680      	movs	r6, #128	@ 0x80
 80009a0:	0336      	lsls	r6, r6, #12
 80009a2:	4306      	orrs	r6, r0
 80009a4:	0336      	lsls	r6, r6, #12
 80009a6:	4c2d      	ldr	r4, [pc, #180]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009a8:	0b36      	lsrs	r6, r6, #12
 80009aa:	e7da      	b.n	8000962 <__aeabi_dadd+0x292>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d061      	beq.n	8000a74 <__aeabi_dadd+0x3a4>
 80009b0:	4641      	mov	r1, r8
 80009b2:	1b09      	subs	r1, r1, r4
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x2ea>
 80009b8:	e0b9      	b.n	8000b2e <__aeabi_dadd+0x45e>
 80009ba:	4c28      	ldr	r4, [pc, #160]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009bc:	45a0      	cmp	r8, r4
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2f2>
 80009c0:	e1a5      	b.n	8000d0e <__aeabi_dadd+0x63e>
 80009c2:	2701      	movs	r7, #1
 80009c4:	2938      	cmp	r1, #56	@ 0x38
 80009c6:	dc13      	bgt.n	80009f0 <__aeabi_dadd+0x320>
 80009c8:	2480      	movs	r4, #128	@ 0x80
 80009ca:	0424      	lsls	r4, r4, #16
 80009cc:	4326      	orrs	r6, r4
 80009ce:	291f      	cmp	r1, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dadd+0x304>
 80009d2:	e1c8      	b.n	8000d66 <__aeabi_dadd+0x696>
 80009d4:	2420      	movs	r4, #32
 80009d6:	0037      	movs	r7, r6
 80009d8:	4648      	mov	r0, r9
 80009da:	1a64      	subs	r4, r4, r1
 80009dc:	40a7      	lsls	r7, r4
 80009de:	40c8      	lsrs	r0, r1
 80009e0:	4307      	orrs	r7, r0
 80009e2:	4648      	mov	r0, r9
 80009e4:	40a0      	lsls	r0, r4
 80009e6:	40ce      	lsrs	r6, r1
 80009e8:	1e44      	subs	r4, r0, #1
 80009ea:	41a0      	sbcs	r0, r4
 80009ec:	199b      	adds	r3, r3, r6
 80009ee:	4307      	orrs	r7, r0
 80009f0:	18bf      	adds	r7, r7, r2
 80009f2:	4297      	cmp	r7, r2
 80009f4:	4192      	sbcs	r2, r2
 80009f6:	4252      	negs	r2, r2
 80009f8:	4644      	mov	r4, r8
 80009fa:	18d6      	adds	r6, r2, r3
 80009fc:	e763      	b.n	80008c6 <__aeabi_dadd+0x1f6>
 80009fe:	0038      	movs	r0, r7
 8000a00:	f7ff fd3e 	bl	8000480 <__clzsi2>
 8000a04:	0003      	movs	r3, r0
 8000a06:	3318      	adds	r3, #24
 8000a08:	2b1f      	cmp	r3, #31
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x33e>
 8000a0c:	e6bf      	b.n	800078e <__aeabi_dadd+0xbe>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	3808      	subs	r0, #8
 8000a12:	4082      	lsls	r2, r0
 8000a14:	429c      	cmp	r4, r3
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x34a>
 8000a18:	e083      	b.n	8000b22 <__aeabi_dadd+0x452>
 8000a1a:	1b1b      	subs	r3, r3, r4
 8000a1c:	1c58      	adds	r0, r3, #1
 8000a1e:	281f      	cmp	r0, #31
 8000a20:	dc00      	bgt.n	8000a24 <__aeabi_dadd+0x354>
 8000a22:	e1b4      	b.n	8000d8e <__aeabi_dadd+0x6be>
 8000a24:	0017      	movs	r7, r2
 8000a26:	3b1f      	subs	r3, #31
 8000a28:	40df      	lsrs	r7, r3
 8000a2a:	2820      	cmp	r0, #32
 8000a2c:	d005      	beq.n	8000a3a <__aeabi_dadd+0x36a>
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	409a      	lsls	r2, r3
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	419a      	sbcs	r2, r3
 8000a38:	4317      	orrs	r7, r2
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2f00      	cmp	r7, #0
 8000a3e:	d00a      	beq.n	8000a56 <__aeabi_dadd+0x386>
 8000a40:	077b      	lsls	r3, r7, #29
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x376>
 8000a44:	e6c4      	b.n	80007d0 <__aeabi_dadd+0x100>
 8000a46:	0026      	movs	r6, r4
 8000a48:	e79e      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	08d8      	lsrs	r0, r3, #3
 8000a50:	e79b      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000a52:	2700      	movs	r7, #0
 8000a54:	4c01      	ldr	r4, [pc, #4]	@ (8000a5c <__aeabi_dadd+0x38c>)
 8000a56:	2600      	movs	r6, #0
 8000a58:	e783      	b.n	8000962 <__aeabi_dadd+0x292>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	000007ff 	.word	0x000007ff
 8000a60:	ff7fffff 	.word	0xff7fffff
 8000a64:	000007fe 	.word	0x000007fe
 8000a68:	464b      	mov	r3, r9
 8000a6a:	0777      	lsls	r7, r6, #29
 8000a6c:	08d8      	lsrs	r0, r3, #3
 8000a6e:	4307      	orrs	r7, r0
 8000a70:	08f0      	lsrs	r0, r6, #3
 8000a72:	e791      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000a74:	4fcd      	ldr	r7, [pc, #820]	@ (8000dac <__aeabi_dadd+0x6dc>)
 8000a76:	1c61      	adds	r1, r4, #1
 8000a78:	4239      	tst	r1, r7
 8000a7a:	d16b      	bne.n	8000b54 <__aeabi_dadd+0x484>
 8000a7c:	0031      	movs	r1, r6
 8000a7e:	4648      	mov	r0, r9
 8000a80:	4301      	orrs	r1, r0
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_dadd+0x3b8>
 8000a86:	e14b      	b.n	8000d20 <__aeabi_dadd+0x650>
 8000a88:	001f      	movs	r7, r3
 8000a8a:	4317      	orrs	r7, r2
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x3c2>
 8000a90:	e181      	b.n	8000d96 <__aeabi_dadd+0x6c6>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x3c8>
 8000a96:	e74c      	b.n	8000932 <__aeabi_dadd+0x262>
 8000a98:	444a      	add	r2, r9
 8000a9a:	454a      	cmp	r2, r9
 8000a9c:	4180      	sbcs	r0, r0
 8000a9e:	18f6      	adds	r6, r6, r3
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	1836      	adds	r6, r6, r0
 8000aa4:	0233      	lsls	r3, r6, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x3da>
 8000aa8:	e1b0      	b.n	8000e0c <__aeabi_dadd+0x73c>
 8000aaa:	0017      	movs	r7, r2
 8000aac:	4691      	mov	r9, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x3e4>
 8000ab2:	e73e      	b.n	8000932 <__aeabi_dadd+0x262>
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e754      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ab8:	4649      	mov	r1, r9
 8000aba:	1a89      	subs	r1, r1, r2
 8000abc:	4688      	mov	r8, r1
 8000abe:	45c1      	cmp	r9, r8
 8000ac0:	41bf      	sbcs	r7, r7
 8000ac2:	1af1      	subs	r1, r6, r3
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	1bc9      	subs	r1, r1, r7
 8000ac8:	020f      	lsls	r7, r1, #8
 8000aca:	d461      	bmi.n	8000b90 <__aeabi_dadd+0x4c0>
 8000acc:	4647      	mov	r7, r8
 8000ace:	430f      	orrs	r7, r1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x404>
 8000ad2:	e0bd      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	e651      	b.n	800077e <__aeabi_dadd+0xae>
 8000ada:	4cb5      	ldr	r4, [pc, #724]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x412>
 8000ae0:	e100      	b.n	8000ce4 <__aeabi_dadd+0x614>
 8000ae2:	2701      	movs	r7, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x41a>
 8000ae8:	e6b8      	b.n	800085c <__aeabi_dadd+0x18c>
 8000aea:	2480      	movs	r4, #128	@ 0x80
 8000aec:	0424      	lsls	r4, r4, #16
 8000aee:	4326      	orrs	r6, r4
 8000af0:	e6a3      	b.n	800083a <__aeabi_dadd+0x16a>
 8000af2:	4eb0      	ldr	r6, [pc, #704]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000af4:	1ae4      	subs	r4, r4, r3
 8000af6:	4016      	ands	r6, r2
 8000af8:	077b      	lsls	r3, r7, #29
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x42e>
 8000afc:	e73f      	b.n	800097e <__aeabi_dadd+0x2ae>
 8000afe:	e743      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000b00:	000f      	movs	r7, r1
 8000b02:	0018      	movs	r0, r3
 8000b04:	3f20      	subs	r7, #32
 8000b06:	40f8      	lsrs	r0, r7
 8000b08:	4684      	mov	ip, r0
 8000b0a:	2920      	cmp	r1, #32
 8000b0c:	d003      	beq.n	8000b16 <__aeabi_dadd+0x446>
 8000b0e:	2740      	movs	r7, #64	@ 0x40
 8000b10:	1a79      	subs	r1, r7, r1
 8000b12:	408b      	lsls	r3, r1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	1e53      	subs	r3, r2, #1
 8000b18:	419a      	sbcs	r2, r3
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0017      	movs	r7, r2
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	e622      	b.n	8000768 <__aeabi_dadd+0x98>
 8000b22:	48a4      	ldr	r0, [pc, #656]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000b24:	1ae1      	subs	r1, r4, r3
 8000b26:	4010      	ands	r0, r2
 8000b28:	0747      	lsls	r7, r0, #29
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	e707      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b2e:	0034      	movs	r4, r6
 8000b30:	4648      	mov	r0, r9
 8000b32:	4304      	orrs	r4, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x468>
 8000b36:	e0fa      	b.n	8000d2e <__aeabi_dadd+0x65e>
 8000b38:	1e4c      	subs	r4, r1, #1
 8000b3a:	2901      	cmp	r1, #1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x470>
 8000b3e:	e0d7      	b.n	8000cf0 <__aeabi_dadd+0x620>
 8000b40:	4f9b      	ldr	r7, [pc, #620]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b42:	42b9      	cmp	r1, r7
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x478>
 8000b46:	e0e2      	b.n	8000d0e <__aeabi_dadd+0x63e>
 8000b48:	2701      	movs	r7, #1
 8000b4a:	2c38      	cmp	r4, #56	@ 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x480>
 8000b4e:	e74f      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000b50:	0021      	movs	r1, r4
 8000b52:	e73c      	b.n	80009ce <__aeabi_dadd+0x2fe>
 8000b54:	4c96      	ldr	r4, [pc, #600]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b56:	42a1      	cmp	r1, r4
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x48c>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_dadd+0x648>
 8000b5c:	444a      	add	r2, r9
 8000b5e:	454a      	cmp	r2, r9
 8000b60:	4180      	sbcs	r0, r0
 8000b62:	18f3      	adds	r3, r6, r3
 8000b64:	4240      	negs	r0, r0
 8000b66:	1818      	adds	r0, r3, r0
 8000b68:	07c7      	lsls	r7, r0, #31
 8000b6a:	0852      	lsrs	r2, r2, #1
 8000b6c:	4317      	orrs	r7, r2
 8000b6e:	0846      	lsrs	r6, r0, #1
 8000b70:	0752      	lsls	r2, r2, #29
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b74:	220f      	movs	r2, #15
 8000b76:	000c      	movs	r4, r1
 8000b78:	403a      	ands	r2, r7
 8000b7a:	2a04      	cmp	r2, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b7e:	e62c      	b.n	80007da <__aeabi_dadd+0x10a>
 8000b80:	0776      	lsls	r6, r6, #29
 8000b82:	08ff      	lsrs	r7, r7, #3
 8000b84:	4337      	orrs	r7, r6
 8000b86:	0900      	lsrs	r0, r0, #4
 8000b88:	e6d9      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e6e8      	b.n	8000962 <__aeabi_dadd+0x292>
 8000b90:	4649      	mov	r1, r9
 8000b92:	1a57      	subs	r7, r2, r1
 8000b94:	42ba      	cmp	r2, r7
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	1b9e      	subs	r6, r3, r6
 8000b9a:	4252      	negs	r2, r2
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	1ab6      	subs	r6, r6, r2
 8000ba0:	e5ed      	b.n	800077e <__aeabi_dadd+0xae>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_dadd+0x4d8>
 8000ba6:	e0c6      	b.n	8000d36 <__aeabi_dadd+0x666>
 8000ba8:	2f00      	cmp	r7, #0
 8000baa:	d167      	bne.n	8000c7c <__aeabi_dadd+0x5ac>
 8000bac:	2680      	movs	r6, #128	@ 0x80
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4c7f      	ldr	r4, [pc, #508]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000bb2:	0336      	lsls	r6, r6, #12
 8000bb4:	e6d5      	b.n	8000962 <__aeabi_dadd+0x292>
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	000c      	movs	r4, r1
 8000bba:	001e      	movs	r6, r3
 8000bbc:	08d0      	lsrs	r0, r2, #3
 8000bbe:	e6e4      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000bc0:	444a      	add	r2, r9
 8000bc2:	454a      	cmp	r2, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	18f3      	adds	r3, r6, r3
 8000bc8:	4240      	negs	r0, r0
 8000bca:	1818      	adds	r0, r3, r0
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0203      	lsls	r3, r0, #8
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_dadd+0x504>
 8000bd2:	e096      	b.n	8000d02 <__aeabi_dadd+0x632>
 8000bd4:	4b77      	ldr	r3, [pc, #476]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000bd6:	0849      	lsrs	r1, r1, #1
 8000bd8:	4018      	ands	r0, r3
 8000bda:	07c3      	lsls	r3, r0, #31
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	0844      	lsrs	r4, r0, #1
 8000be0:	0749      	lsls	r1, r1, #29
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x516>
 8000be4:	e129      	b.n	8000e3a <__aeabi_dadd+0x76a>
 8000be6:	220f      	movs	r2, #15
 8000be8:	401a      	ands	r2, r3
 8000bea:	2a04      	cmp	r2, #4
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x520>
 8000bee:	e0ea      	b.n	8000dc6 <__aeabi_dadd+0x6f6>
 8000bf0:	1d1f      	adds	r7, r3, #4
 8000bf2:	429f      	cmp	r7, r3
 8000bf4:	41b6      	sbcs	r6, r6
 8000bf6:	4276      	negs	r6, r6
 8000bf8:	1936      	adds	r6, r6, r4
 8000bfa:	2402      	movs	r4, #2
 8000bfc:	e6c4      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	1a8f      	subs	r7, r1, r2
 8000c02:	45b9      	cmp	r9, r7
 8000c04:	4180      	sbcs	r0, r0
 8000c06:	1af6      	subs	r6, r6, r3
 8000c08:	4240      	negs	r0, r0
 8000c0a:	1a36      	subs	r6, r6, r0
 8000c0c:	0233      	lsls	r3, r6, #8
 8000c0e:	d406      	bmi.n	8000c1e <__aeabi_dadd+0x54e>
 8000c10:	0773      	lsls	r3, r6, #29
 8000c12:	08ff      	lsrs	r7, r7, #3
 8000c14:	2101      	movs	r1, #1
 8000c16:	431f      	orrs	r7, r3
 8000c18:	08f0      	lsrs	r0, r6, #3
 8000c1a:	e690      	b.n	800093e <__aeabi_dadd+0x26e>
 8000c1c:	4665      	mov	r5, ip
 8000c1e:	2401      	movs	r4, #1
 8000c20:	e5ab      	b.n	800077a <__aeabi_dadd+0xaa>
 8000c22:	464b      	mov	r3, r9
 8000c24:	0777      	lsls	r7, r6, #29
 8000c26:	08d8      	lsrs	r0, r3, #3
 8000c28:	4307      	orrs	r7, r0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e6b4      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c2e:	000f      	movs	r7, r1
 8000c30:	0018      	movs	r0, r3
 8000c32:	3f20      	subs	r7, #32
 8000c34:	40f8      	lsrs	r0, r7
 8000c36:	4684      	mov	ip, r0
 8000c38:	2920      	cmp	r1, #32
 8000c3a:	d003      	beq.n	8000c44 <__aeabi_dadd+0x574>
 8000c3c:	2740      	movs	r7, #64	@ 0x40
 8000c3e:	1a79      	subs	r1, r7, r1
 8000c40:	408b      	lsls	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	1e53      	subs	r3, r2, #1
 8000c46:	419a      	sbcs	r2, r3
 8000c48:	4663      	mov	r3, ip
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	e635      	b.n	80008bc <__aeabi_dadd+0x1ec>
 8000c50:	2500      	movs	r5, #0
 8000c52:	2400      	movs	r4, #0
 8000c54:	2600      	movs	r6, #0
 8000c56:	e684      	b.n	8000962 <__aeabi_dadd+0x292>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0035      	movs	r5, r6
 8000c5c:	3c20      	subs	r4, #32
 8000c5e:	40e5      	lsrs	r5, r4
 8000c60:	2920      	cmp	r1, #32
 8000c62:	d005      	beq.n	8000c70 <__aeabi_dadd+0x5a0>
 8000c64:	2440      	movs	r4, #64	@ 0x40
 8000c66:	1a61      	subs	r1, r4, r1
 8000c68:	408e      	lsls	r6, r1
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	4331      	orrs	r1, r6
 8000c6e:	4689      	mov	r9, r1
 8000c70:	4648      	mov	r0, r9
 8000c72:	1e41      	subs	r1, r0, #1
 8000c74:	4188      	sbcs	r0, r1
 8000c76:	0007      	movs	r7, r0
 8000c78:	432f      	orrs	r7, r5
 8000c7a:	e5ef      	b.n	800085c <__aeabi_dadd+0x18c>
 8000c7c:	08d2      	lsrs	r2, r2, #3
 8000c7e:	075f      	lsls	r7, r3, #29
 8000c80:	4665      	mov	r5, ip
 8000c82:	4317      	orrs	r7, r2
 8000c84:	08d8      	lsrs	r0, r3, #3
 8000c86:	e687      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c88:	1a17      	subs	r7, r2, r0
 8000c8a:	42ba      	cmp	r2, r7
 8000c8c:	4192      	sbcs	r2, r2
 8000c8e:	1b9e      	subs	r6, r3, r6
 8000c90:	4252      	negs	r2, r2
 8000c92:	1ab6      	subs	r6, r6, r2
 8000c94:	0233      	lsls	r3, r6, #8
 8000c96:	d4c1      	bmi.n	8000c1c <__aeabi_dadd+0x54c>
 8000c98:	0773      	lsls	r3, r6, #29
 8000c9a:	08ff      	lsrs	r7, r7, #3
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	08f0      	lsrs	r0, r6, #3
 8000ca4:	e64b      	b.n	800093e <__aeabi_dadd+0x26e>
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d07b      	beq.n	8000da2 <__aeabi_dadd+0x6d2>
 8000caa:	4665      	mov	r5, ip
 8000cac:	001e      	movs	r6, r3
 8000cae:	4691      	mov	r9, r2
 8000cb0:	e63f      	b.n	8000932 <__aeabi_dadd+0x262>
 8000cb2:	1a81      	subs	r1, r0, r2
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	45c1      	cmp	r9, r8
 8000cb8:	41a4      	sbcs	r4, r4
 8000cba:	1af1      	subs	r1, r6, r3
 8000cbc:	4264      	negs	r4, r4
 8000cbe:	1b09      	subs	r1, r1, r4
 8000cc0:	2480      	movs	r4, #128	@ 0x80
 8000cc2:	0424      	lsls	r4, r4, #16
 8000cc4:	4221      	tst	r1, r4
 8000cc6:	d077      	beq.n	8000db8 <__aeabi_dadd+0x6e8>
 8000cc8:	1a10      	subs	r0, r2, r0
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	4192      	sbcs	r2, r2
 8000cce:	0007      	movs	r7, r0
 8000cd0:	1b9e      	subs	r6, r3, r6
 8000cd2:	4252      	negs	r2, r2
 8000cd4:	1ab6      	subs	r6, r6, r2
 8000cd6:	4337      	orrs	r7, r6
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dadd+0x60c>
 8000cda:	e0a0      	b.n	8000e1e <__aeabi_dadd+0x74e>
 8000cdc:	4665      	mov	r5, ip
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e63e      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	08d2      	lsrs	r2, r2, #3
 8000ce8:	4665      	mov	r5, ip
 8000cea:	4317      	orrs	r7, r2
 8000cec:	08d8      	lsrs	r0, r3, #3
 8000cee:	e653      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000cf0:	1881      	adds	r1, r0, r2
 8000cf2:	4291      	cmp	r1, r2
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	18f0      	adds	r0, r6, r3
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	1880      	adds	r0, r0, r2
 8000cfc:	0203      	lsls	r3, r0, #8
 8000cfe:	d500      	bpl.n	8000d02 <__aeabi_dadd+0x632>
 8000d00:	e768      	b.n	8000bd4 <__aeabi_dadd+0x504>
 8000d02:	0747      	lsls	r7, r0, #29
 8000d04:	08c9      	lsrs	r1, r1, #3
 8000d06:	430f      	orrs	r7, r1
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	e617      	b.n	800093e <__aeabi_dadd+0x26e>
 8000d0e:	08d2      	lsrs	r2, r2, #3
 8000d10:	075f      	lsls	r7, r3, #29
 8000d12:	4317      	orrs	r7, r2
 8000d14:	08d8      	lsrs	r0, r3, #3
 8000d16:	e63f      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e620      	b.n	8000962 <__aeabi_dadd+0x292>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d156      	bne.n	8000dd2 <__aeabi_dadd+0x702>
 8000d24:	075f      	lsls	r7, r3, #29
 8000d26:	08d2      	lsrs	r2, r2, #3
 8000d28:	4317      	orrs	r7, r2
 8000d2a:	08d8      	lsrs	r0, r3, #3
 8000d2c:	e634      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d2e:	000c      	movs	r4, r1
 8000d30:	001e      	movs	r6, r3
 8000d32:	08d0      	lsrs	r0, r2, #3
 8000d34:	e629      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000d36:	08c1      	lsrs	r1, r0, #3
 8000d38:	0770      	lsls	r0, r6, #29
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	08f0      	lsrs	r0, r6, #3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d062      	beq.n	8000e08 <__aeabi_dadd+0x738>
 8000d42:	2480      	movs	r4, #128	@ 0x80
 8000d44:	0324      	lsls	r4, r4, #12
 8000d46:	4220      	tst	r0, r4
 8000d48:	d007      	beq.n	8000d5a <__aeabi_dadd+0x68a>
 8000d4a:	08de      	lsrs	r6, r3, #3
 8000d4c:	4226      	tst	r6, r4
 8000d4e:	d104      	bne.n	8000d5a <__aeabi_dadd+0x68a>
 8000d50:	4665      	mov	r5, ip
 8000d52:	0030      	movs	r0, r6
 8000d54:	08d1      	lsrs	r1, r2, #3
 8000d56:	075b      	lsls	r3, r3, #29
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	0f4f      	lsrs	r7, r1, #29
 8000d5c:	00c9      	lsls	r1, r1, #3
 8000d5e:	08c9      	lsrs	r1, r1, #3
 8000d60:	077f      	lsls	r7, r7, #29
 8000d62:	430f      	orrs	r7, r1
 8000d64:	e618      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d66:	000c      	movs	r4, r1
 8000d68:	0030      	movs	r0, r6
 8000d6a:	3c20      	subs	r4, #32
 8000d6c:	40e0      	lsrs	r0, r4
 8000d6e:	4684      	mov	ip, r0
 8000d70:	2920      	cmp	r1, #32
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dadd+0x6b0>
 8000d74:	2440      	movs	r4, #64	@ 0x40
 8000d76:	1a61      	subs	r1, r4, r1
 8000d78:	408e      	lsls	r6, r1
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	4331      	orrs	r1, r6
 8000d7e:	4689      	mov	r9, r1
 8000d80:	4648      	mov	r0, r9
 8000d82:	1e41      	subs	r1, r0, #1
 8000d84:	4188      	sbcs	r0, r1
 8000d86:	4661      	mov	r1, ip
 8000d88:	0007      	movs	r7, r0
 8000d8a:	430f      	orrs	r7, r1
 8000d8c:	e630      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000d8e:	2120      	movs	r1, #32
 8000d90:	2700      	movs	r7, #0
 8000d92:	1a09      	subs	r1, r1, r0
 8000d94:	e50e      	b.n	80007b4 <__aeabi_dadd+0xe4>
 8000d96:	001e      	movs	r6, r3
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dadd+0x6ce>
 8000d9c:	e522      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000d9e:	2400      	movs	r4, #0
 8000da0:	e758      	b.n	8000c54 <__aeabi_dadd+0x584>
 8000da2:	2500      	movs	r5, #0
 8000da4:	2400      	movs	r4, #0
 8000da6:	2600      	movs	r6, #0
 8000da8:	e5db      	b.n	8000962 <__aeabi_dadd+0x292>
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	000007ff 	.word	0x000007ff
 8000db4:	ff7fffff 	.word	0xff7fffff
 8000db8:	4647      	mov	r7, r8
 8000dba:	430f      	orrs	r7, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x6f0>
 8000dbe:	e747      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000dc0:	000e      	movs	r6, r1
 8000dc2:	46c1      	mov	r9, r8
 8000dc4:	e5b5      	b.n	8000932 <__aeabi_dadd+0x262>
 8000dc6:	08df      	lsrs	r7, r3, #3
 8000dc8:	0764      	lsls	r4, r4, #29
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4327      	orrs	r7, r4
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	e5b5      	b.n	800093e <__aeabi_dadd+0x26e>
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	08c0      	lsrs	r0, r0, #3
 8000dd6:	0777      	lsls	r7, r6, #29
 8000dd8:	4307      	orrs	r7, r0
 8000dda:	4311      	orrs	r1, r2
 8000ddc:	08f0      	lsrs	r0, r6, #3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x714>
 8000de2:	e5d9      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0309      	lsls	r1, r1, #12
 8000de8:	4208      	tst	r0, r1
 8000dea:	d007      	beq.n	8000dfc <__aeabi_dadd+0x72c>
 8000dec:	08dc      	lsrs	r4, r3, #3
 8000dee:	420c      	tst	r4, r1
 8000df0:	d104      	bne.n	8000dfc <__aeabi_dadd+0x72c>
 8000df2:	08d2      	lsrs	r2, r2, #3
 8000df4:	075b      	lsls	r3, r3, #29
 8000df6:	431a      	orrs	r2, r3
 8000df8:	0017      	movs	r7, r2
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	0f7b      	lsrs	r3, r7, #29
 8000dfe:	00ff      	lsls	r7, r7, #3
 8000e00:	08ff      	lsrs	r7, r7, #3
 8000e02:	075b      	lsls	r3, r3, #29
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e5c7      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e08:	000f      	movs	r7, r1
 8000e0a:	e5c5      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	4033      	ands	r3, r6
 8000e12:	075f      	lsls	r7, r3, #29
 8000e14:	025b      	lsls	r3, r3, #9
 8000e16:	2401      	movs	r4, #1
 8000e18:	4317      	orrs	r7, r2
 8000e1a:	0b1e      	lsrs	r6, r3, #12
 8000e1c:	e5a1      	b.n	8000962 <__aeabi_dadd+0x292>
 8000e1e:	4226      	tst	r6, r4
 8000e20:	d012      	beq.n	8000e48 <__aeabi_dadd+0x778>
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e24:	4665      	mov	r5, ip
 8000e26:	0002      	movs	r2, r0
 8000e28:	2401      	movs	r4, #1
 8000e2a:	401e      	ands	r6, r3
 8000e2c:	e4e6      	b.n	80007fc <__aeabi_dadd+0x12c>
 8000e2e:	0021      	movs	r1, r4
 8000e30:	e585      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e32:	0017      	movs	r7, r2
 8000e34:	e5a8      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000e36:	003a      	movs	r2, r7
 8000e38:	e4d4      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	0764      	lsls	r4, r4, #29
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	0027      	movs	r7, r4
 8000e42:	2102      	movs	r1, #2
 8000e44:	0900      	lsrs	r0, r0, #4
 8000e46:	e57a      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0777      	lsls	r7, r6, #29
 8000e4c:	4307      	orrs	r7, r0
 8000e4e:	4665      	mov	r5, ip
 8000e50:	2100      	movs	r1, #0
 8000e52:	08f0      	lsrs	r0, r6, #3
 8000e54:	e573      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	ff7fffff 	.word	0xff7fffff

08000e5c <__aeabi_ddiv>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	46de      	mov	lr, fp
 8000e60:	4645      	mov	r5, r8
 8000e62:	4657      	mov	r7, sl
 8000e64:	464e      	mov	r6, r9
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	b087      	sub	sp, #28
 8000e6a:	9200      	str	r2, [sp, #0]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	030b      	lsls	r3, r1, #12
 8000e70:	0b1b      	lsrs	r3, r3, #12
 8000e72:	469b      	mov	fp, r3
 8000e74:	0fca      	lsrs	r2, r1, #31
 8000e76:	004b      	lsls	r3, r1, #1
 8000e78:	0004      	movs	r4, r0
 8000e7a:	4680      	mov	r8, r0
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	9202      	str	r2, [sp, #8]
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x28>
 8000e82:	e098      	b.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000e84:	4a7c      	ldr	r2, [pc, #496]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d037      	beq.n	8000efa <__aeabi_ddiv+0x9e>
 8000e8a:	4659      	mov	r1, fp
 8000e8c:	0f42      	lsrs	r2, r0, #29
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	430a      	orrs	r2, r1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0409      	lsls	r1, r1, #16
 8000e96:	4311      	orrs	r1, r2
 8000e98:	00c2      	lsls	r2, r0, #3
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4a77      	ldr	r2, [pc, #476]	@ (800107c <__aeabi_ddiv+0x220>)
 8000e9e:	4689      	mov	r9, r1
 8000ea0:	4692      	mov	sl, r2
 8000ea2:	449a      	add	sl, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	9e00      	ldr	r6, [sp, #0]
 8000eac:	9f01      	ldr	r7, [sp, #4]
 8000eae:	033b      	lsls	r3, r7, #12
 8000eb0:	0b1b      	lsrs	r3, r3, #12
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	007b      	lsls	r3, r7, #1
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	0ffd      	lsrs	r5, r7, #31
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d059      	beq.n	8000f74 <__aeabi_ddiv+0x118>
 8000ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d048      	beq.n	8000f58 <__aeabi_ddiv+0xfc>
 8000ec6:	4659      	mov	r1, fp
 8000ec8:	0f72      	lsrs	r2, r6, #29
 8000eca:	00c9      	lsls	r1, r1, #3
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0409      	lsls	r1, r1, #16
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	468b      	mov	fp, r1
 8000ed6:	4969      	ldr	r1, [pc, #420]	@ (800107c <__aeabi_ddiv+0x220>)
 8000ed8:	00f2      	lsls	r2, r6, #3
 8000eda:	468c      	mov	ip, r1
 8000edc:	4651      	mov	r1, sl
 8000ede:	4463      	add	r3, ip
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	9e02      	ldr	r6, [sp, #8]
 8000ee8:	406e      	eors	r6, r5
 8000eea:	b2f6      	uxtb	r6, r6
 8000eec:	2c0f      	cmp	r4, #15
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x96>
 8000ef0:	e0ce      	b.n	8001090 <__aeabi_ddiv+0x234>
 8000ef2:	4b63      	ldr	r3, [pc, #396]	@ (8001080 <__aeabi_ddiv+0x224>)
 8000ef4:	00a4      	lsls	r4, r4, #2
 8000ef6:	591b      	ldr	r3, [r3, r4]
 8000ef8:	469f      	mov	pc, r3
 8000efa:	465a      	mov	r2, fp
 8000efc:	4302      	orrs	r2, r0
 8000efe:	4691      	mov	r9, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_ddiv+0xa8>
 8000f02:	e090      	b.n	8001026 <__aeabi_ddiv+0x1ca>
 8000f04:	469a      	mov	sl, r3
 8000f06:	2302      	movs	r3, #2
 8000f08:	4690      	mov	r8, r2
 8000f0a:	2408      	movs	r4, #8
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	e7cc      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8000f10:	46cb      	mov	fp, r9
 8000f12:	4642      	mov	r2, r8
 8000f14:	9d02      	ldr	r5, [sp, #8]
 8000f16:	9903      	ldr	r1, [sp, #12]
 8000f18:	2902      	cmp	r1, #2
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xc2>
 8000f1c:	e1de      	b.n	80012dc <__aeabi_ddiv+0x480>
 8000f1e:	2903      	cmp	r1, #3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0xc8>
 8000f22:	e08d      	b.n	8001040 <__aeabi_ddiv+0x1e4>
 8000f24:	2901      	cmp	r1, #1
 8000f26:	d000      	beq.n	8000f2a <__aeabi_ddiv+0xce>
 8000f28:	e179      	b.n	800121e <__aeabi_ddiv+0x3c2>
 8000f2a:	002e      	movs	r6, r5
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2400      	movs	r4, #0
 8000f32:	4690      	mov	r8, r2
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	4323      	orrs	r3, r4
 8000f38:	07f6      	lsls	r6, r6, #31
 8000f3a:	4333      	orrs	r3, r6
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	0019      	movs	r1, r3
 8000f40:	b007      	add	sp, #28
 8000f42:	bcf0      	pop	{r4, r5, r6, r7}
 8000f44:	46bb      	mov	fp, r7
 8000f46:	46b2      	mov	sl, r6
 8000f48:	46a9      	mov	r9, r5
 8000f4a:	46a0      	mov	r8, r4
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2400      	movs	r4, #0
 8000f52:	4690      	mov	r8, r2
 8000f54:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000f56:	e7ed      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8000f58:	465a      	mov	r2, fp
 8000f5a:	9b00      	ldr	r3, [sp, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <__aeabi_ddiv+0x228>)
 8000f60:	469c      	mov	ip, r3
 8000f62:	44e2      	add	sl, ip
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d159      	bne.n	800101c <__aeabi_ddiv+0x1c0>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	469b      	mov	fp, r3
 8000f72:	e7b8      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000f74:	465a      	mov	r2, fp
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	d049      	beq.n	8001010 <__aeabi_ddiv+0x1b4>
 8000f7c:	465b      	mov	r3, fp
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x128>
 8000f82:	e19c      	b.n	80012be <__aeabi_ddiv+0x462>
 8000f84:	4658      	mov	r0, fp
 8000f86:	f7ff fa7b 	bl	8000480 <__clzsi2>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3a0b      	subs	r2, #11
 8000f90:	271d      	movs	r7, #29
 8000f92:	9e00      	ldr	r6, [sp, #0]
 8000f94:	1aba      	subs	r2, r7, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	4658      	mov	r0, fp
 8000f9a:	40d6      	lsrs	r6, r2
 8000f9c:	3908      	subs	r1, #8
 8000f9e:	4088      	lsls	r0, r1
 8000fa0:	0032      	movs	r2, r6
 8000fa2:	4302      	orrs	r2, r0
 8000fa4:	4693      	mov	fp, r2
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	408a      	lsls	r2, r1
 8000faa:	4937      	ldr	r1, [pc, #220]	@ (8001088 <__aeabi_ddiv+0x22c>)
 8000fac:	4453      	add	r3, sl
 8000fae:	468a      	mov	sl, r1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	449a      	add	sl, r3
 8000fb4:	e797      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	d021      	beq.n	8001002 <__aeabi_ddiv+0x1a6>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x16a>
 8000fc4:	e169      	b.n	800129a <__aeabi_ddiv+0x43e>
 8000fc6:	4658      	mov	r0, fp
 8000fc8:	f7ff fa5a 	bl	8000480 <__clzsi2>
 8000fcc:	230b      	movs	r3, #11
 8000fce:	425b      	negs	r3, r3
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	4484      	add	ip, r0
 8000fd6:	4666      	mov	r6, ip
 8000fd8:	231d      	movs	r3, #29
 8000fda:	1b9b      	subs	r3, r3, r6
 8000fdc:	0026      	movs	r6, r4
 8000fde:	0011      	movs	r1, r2
 8000fe0:	4658      	mov	r0, fp
 8000fe2:	40de      	lsrs	r6, r3
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	4088      	lsls	r0, r1
 8000fe8:	0033      	movs	r3, r6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	4699      	mov	r9, r3
 8000fee:	0023      	movs	r3, r4
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <__aeabi_ddiv+0x230>)
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	e753      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001002:	2300      	movs	r3, #0
 8001004:	4698      	mov	r8, r3
 8001006:	469a      	mov	sl, r3
 8001008:	3301      	adds	r3, #1
 800100a:	2404      	movs	r4, #4
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	e74c      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001010:	2301      	movs	r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	2300      	movs	r3, #0
 8001016:	2101      	movs	r1, #1
 8001018:	469b      	mov	fp, r3
 800101a:	e764      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 800101c:	2303      	movs	r3, #3
 800101e:	0032      	movs	r2, r6
 8001020:	2103      	movs	r1, #3
 8001022:	431c      	orrs	r4, r3
 8001024:	e75f      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8001026:	469a      	mov	sl, r3
 8001028:	2303      	movs	r3, #3
 800102a:	46d9      	mov	r9, fp
 800102c:	240c      	movs	r4, #12
 800102e:	9303      	str	r3, [sp, #12]
 8001030:	e73b      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001032:	2300      	movs	r3, #0
 8001034:	2480      	movs	r4, #128	@ 0x80
 8001036:	4698      	mov	r8, r3
 8001038:	2600      	movs	r6, #0
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <__aeabi_ddiv+0x21c>)
 800103c:	0324      	lsls	r4, r4, #12
 800103e:	e779      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001040:	2480      	movs	r4, #128	@ 0x80
 8001042:	465b      	mov	r3, fp
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	431c      	orrs	r4, r3
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	002e      	movs	r6, r5
 800104c:	4690      	mov	r8, r2
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001050:	0b24      	lsrs	r4, r4, #12
 8001052:	e76f      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	4223      	tst	r3, r4
 800105c:	d002      	beq.n	8001064 <__aeabi_ddiv+0x208>
 800105e:	465b      	mov	r3, fp
 8001060:	4223      	tst	r3, r4
 8001062:	d0f0      	beq.n	8001046 <__aeabi_ddiv+0x1ea>
 8001064:	2480      	movs	r4, #128	@ 0x80
 8001066:	464b      	mov	r3, r9
 8001068:	0324      	lsls	r4, r4, #12
 800106a:	431c      	orrs	r4, r3
 800106c:	0324      	lsls	r4, r4, #12
 800106e:	9e02      	ldr	r6, [sp, #8]
 8001070:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001072:	0b24      	lsrs	r4, r4, #12
 8001074:	e75e      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	000007ff 	.word	0x000007ff
 800107c:	fffffc01 	.word	0xfffffc01
 8001080:	0801c5b8 	.word	0x0801c5b8
 8001084:	fffff801 	.word	0xfffff801
 8001088:	000003f3 	.word	0x000003f3
 800108c:	fffffc0d 	.word	0xfffffc0d
 8001090:	45cb      	cmp	fp, r9
 8001092:	d200      	bcs.n	8001096 <__aeabi_ddiv+0x23a>
 8001094:	e0f8      	b.n	8001288 <__aeabi_ddiv+0x42c>
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x23e>
 8001098:	e0f3      	b.n	8001282 <__aeabi_ddiv+0x426>
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	469c      	mov	ip, r3
 80010a0:	4644      	mov	r4, r8
 80010a2:	4648      	mov	r0, r9
 80010a4:	2500      	movs	r5, #0
 80010a6:	44e2      	add	sl, ip
 80010a8:	465b      	mov	r3, fp
 80010aa:	0e17      	lsrs	r7, r2, #24
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	431f      	orrs	r7, r3
 80010b0:	0c19      	lsrs	r1, r3, #16
 80010b2:	043b      	lsls	r3, r7, #16
 80010b4:	0212      	lsls	r2, r2, #8
 80010b6:	9700      	str	r7, [sp, #0]
 80010b8:	0c1f      	lsrs	r7, r3, #16
 80010ba:	4691      	mov	r9, r2
 80010bc:	9102      	str	r1, [sp, #8]
 80010be:	9703      	str	r7, [sp, #12]
 80010c0:	f7ff f8b0 	bl	8000224 <__aeabi_uidivmod>
 80010c4:	0002      	movs	r2, r0
 80010c6:	437a      	muls	r2, r7
 80010c8:	040b      	lsls	r3, r1, #16
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	4680      	mov	r8, r0
 80010ce:	4319      	orrs	r1, r3
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d909      	bls.n	80010e8 <__aeabi_ddiv+0x28c>
 80010d4:	9f00      	ldr	r7, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	46bc      	mov	ip, r7
 80010da:	425b      	negs	r3, r3
 80010dc:	4461      	add	r1, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	44e0      	add	r8, ip
 80010e2:	428f      	cmp	r7, r1
 80010e4:	d800      	bhi.n	80010e8 <__aeabi_ddiv+0x28c>
 80010e6:	e15c      	b.n	80013a2 <__aeabi_ddiv+0x546>
 80010e8:	1a88      	subs	r0, r1, r2
 80010ea:	9902      	ldr	r1, [sp, #8]
 80010ec:	f7ff f89a 	bl	8000224 <__aeabi_uidivmod>
 80010f0:	9a03      	ldr	r2, [sp, #12]
 80010f2:	0424      	lsls	r4, r4, #16
 80010f4:	4342      	muls	r2, r0
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	0c24      	lsrs	r4, r4, #16
 80010fa:	0003      	movs	r3, r0
 80010fc:	430c      	orrs	r4, r1
 80010fe:	42a2      	cmp	r2, r4
 8001100:	d906      	bls.n	8001110 <__aeabi_ddiv+0x2b4>
 8001102:	9900      	ldr	r1, [sp, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	468c      	mov	ip, r1
 8001108:	4464      	add	r4, ip
 800110a:	42a1      	cmp	r1, r4
 800110c:	d800      	bhi.n	8001110 <__aeabi_ddiv+0x2b4>
 800110e:	e142      	b.n	8001396 <__aeabi_ddiv+0x53a>
 8001110:	1aa0      	subs	r0, r4, r2
 8001112:	4642      	mov	r2, r8
 8001114:	0412      	lsls	r2, r2, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	4693      	mov	fp, r2
 800111a:	464b      	mov	r3, r9
 800111c:	4659      	mov	r1, fp
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	001f      	movs	r7, r3
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	040b      	lsls	r3, r1, #16
 8001126:	4649      	mov	r1, r9
 8001128:	0409      	lsls	r1, r1, #16
 800112a:	0c09      	lsrs	r1, r1, #16
 800112c:	000c      	movs	r4, r1
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	435c      	muls	r4, r3
 8001132:	0c12      	lsrs	r2, r2, #16
 8001134:	437b      	muls	r3, r7
 8001136:	4688      	mov	r8, r1
 8001138:	4351      	muls	r1, r2
 800113a:	437a      	muls	r2, r7
 800113c:	0c27      	lsrs	r7, r4, #16
 800113e:	46bc      	mov	ip, r7
 8001140:	185b      	adds	r3, r3, r1
 8001142:	4463      	add	r3, ip
 8001144:	4299      	cmp	r1, r3
 8001146:	d903      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	468c      	mov	ip, r1
 800114e:	4462      	add	r2, ip
 8001150:	0c19      	lsrs	r1, r3, #16
 8001152:	0424      	lsls	r4, r4, #16
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	0c24      	lsrs	r4, r4, #16
 8001158:	188a      	adds	r2, r1, r2
 800115a:	191c      	adds	r4, r3, r4
 800115c:	4290      	cmp	r0, r2
 800115e:	d302      	bcc.n	8001166 <__aeabi_ddiv+0x30a>
 8001160:	d116      	bne.n	8001190 <__aeabi_ddiv+0x334>
 8001162:	42a5      	cmp	r5, r4
 8001164:	d214      	bcs.n	8001190 <__aeabi_ddiv+0x334>
 8001166:	465b      	mov	r3, fp
 8001168:	9f00      	ldr	r7, [sp, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	444d      	add	r5, r9
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	454d      	cmp	r5, r9
 8001172:	419b      	sbcs	r3, r3
 8001174:	46bc      	mov	ip, r7
 8001176:	425b      	negs	r3, r3
 8001178:	4463      	add	r3, ip
 800117a:	18c0      	adds	r0, r0, r3
 800117c:	4287      	cmp	r7, r0
 800117e:	d300      	bcc.n	8001182 <__aeabi_ddiv+0x326>
 8001180:	e102      	b.n	8001388 <__aeabi_ddiv+0x52c>
 8001182:	4282      	cmp	r2, r0
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x32c>
 8001186:	e129      	b.n	80013dc <__aeabi_ddiv+0x580>
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x330>
 800118a:	e124      	b.n	80013d6 <__aeabi_ddiv+0x57a>
 800118c:	9b05      	ldr	r3, [sp, #20]
 800118e:	469b      	mov	fp, r3
 8001190:	1b2c      	subs	r4, r5, r4
 8001192:	42a5      	cmp	r5, r4
 8001194:	41ad      	sbcs	r5, r5
 8001196:	9b00      	ldr	r3, [sp, #0]
 8001198:	1a80      	subs	r0, r0, r2
 800119a:	426d      	negs	r5, r5
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	4283      	cmp	r3, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x348>
 80011a2:	e10f      	b.n	80013c4 <__aeabi_ddiv+0x568>
 80011a4:	9902      	ldr	r1, [sp, #8]
 80011a6:	f7ff f83d 	bl	8000224 <__aeabi_uidivmod>
 80011aa:	9a03      	ldr	r2, [sp, #12]
 80011ac:	040b      	lsls	r3, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0c21      	lsrs	r1, r4, #16
 80011b2:	0005      	movs	r5, r0
 80011b4:	4319      	orrs	r1, r3
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x360>
 80011ba:	e0cb      	b.n	8001354 <__aeabi_ddiv+0x4f8>
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	9902      	ldr	r1, [sp, #8]
 80011c0:	f7ff f830 	bl	8000224 <__aeabi_uidivmod>
 80011c4:	9a03      	ldr	r2, [sp, #12]
 80011c6:	0424      	lsls	r4, r4, #16
 80011c8:	4342      	muls	r2, r0
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	0c24      	lsrs	r4, r4, #16
 80011ce:	0003      	movs	r3, r0
 80011d0:	430c      	orrs	r4, r1
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x37c>
 80011d6:	e0ca      	b.n	800136e <__aeabi_ddiv+0x512>
 80011d8:	4641      	mov	r1, r8
 80011da:	1aa4      	subs	r4, r4, r2
 80011dc:	042a      	lsls	r2, r5, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	9f04      	ldr	r7, [sp, #16]
 80011e2:	0413      	lsls	r3, r2, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	4359      	muls	r1, r3
 80011e8:	4640      	mov	r0, r8
 80011ea:	437b      	muls	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	0c15      	lsrs	r5, r2, #16
 80011f0:	4368      	muls	r0, r5
 80011f2:	0c0b      	lsrs	r3, r1, #16
 80011f4:	4484      	add	ip, r0
 80011f6:	4463      	add	r3, ip
 80011f8:	437d      	muls	r5, r7
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d903      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 80011fe:	2080      	movs	r0, #128	@ 0x80
 8001200:	0240      	lsls	r0, r0, #9
 8001202:	4684      	mov	ip, r0
 8001204:	4465      	add	r5, ip
 8001206:	0c18      	lsrs	r0, r3, #16
 8001208:	0409      	lsls	r1, r1, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	1940      	adds	r0, r0, r5
 8001210:	185b      	adds	r3, r3, r1
 8001212:	4284      	cmp	r4, r0
 8001214:	d327      	bcc.n	8001266 <__aeabi_ddiv+0x40a>
 8001216:	d023      	beq.n	8001260 <__aeabi_ddiv+0x404>
 8001218:	2301      	movs	r3, #1
 800121a:	0035      	movs	r5, r6
 800121c:	431a      	orrs	r2, r3
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <__aeabi_ddiv+0x614>)
 8001220:	4453      	add	r3, sl
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd60      	ble.n	80012e8 <__aeabi_ddiv+0x48c>
 8001226:	0751      	lsls	r1, r2, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x3d0>
 800122a:	e086      	b.n	800133a <__aeabi_ddiv+0x4de>
 800122c:	002e      	movs	r6, r5
 800122e:	08d1      	lsrs	r1, r2, #3
 8001230:	465a      	mov	r2, fp
 8001232:	01d2      	lsls	r2, r2, #7
 8001234:	d506      	bpl.n	8001244 <__aeabi_ddiv+0x3e8>
 8001236:	465a      	mov	r2, fp
 8001238:	4b8e      	ldr	r3, [pc, #568]	@ (8001474 <__aeabi_ddiv+0x618>)
 800123a:	401a      	ands	r2, r3
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	4693      	mov	fp, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4453      	add	r3, sl
 8001244:	4a8c      	ldr	r2, [pc, #560]	@ (8001478 <__aeabi_ddiv+0x61c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	dd00      	ble.n	800124c <__aeabi_ddiv+0x3f0>
 800124a:	e680      	b.n	8000f4e <__aeabi_ddiv+0xf2>
 800124c:	465a      	mov	r2, fp
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	430a      	orrs	r2, r1
 8001252:	4690      	mov	r8, r2
 8001254:	465a      	mov	r2, fp
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	0254      	lsls	r4, r2, #9
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	0d5b      	lsrs	r3, r3, #21
 800125e:	e669      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001260:	0035      	movs	r5, r6
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0db      	beq.n	800121e <__aeabi_ddiv+0x3c2>
 8001266:	9d00      	ldr	r5, [sp, #0]
 8001268:	1e51      	subs	r1, r2, #1
 800126a:	46ac      	mov	ip, r5
 800126c:	4464      	add	r4, ip
 800126e:	42ac      	cmp	r4, r5
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x418>
 8001272:	e09e      	b.n	80013b2 <__aeabi_ddiv+0x556>
 8001274:	4284      	cmp	r4, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x41e>
 8001278:	e0e1      	b.n	800143e <__aeabi_ddiv+0x5e2>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x422>
 800127c:	e0ee      	b.n	800145c <__aeabi_ddiv+0x600>
 800127e:	000a      	movs	r2, r1
 8001280:	e7ca      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 8001282:	4542      	cmp	r2, r8
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x42c>
 8001286:	e708      	b.n	800109a <__aeabi_ddiv+0x23e>
 8001288:	464b      	mov	r3, r9
 800128a:	07dc      	lsls	r4, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	4643      	mov	r3, r8
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	431c      	orrs	r4, r3
 8001294:	4643      	mov	r3, r8
 8001296:	07dd      	lsls	r5, r3, #31
 8001298:	e706      	b.n	80010a8 <__aeabi_ddiv+0x24c>
 800129a:	f7ff f8f1 	bl	8000480 <__clzsi2>
 800129e:	2315      	movs	r3, #21
 80012a0:	469c      	mov	ip, r3
 80012a2:	4484      	add	ip, r0
 80012a4:	0002      	movs	r2, r0
 80012a6:	4663      	mov	r3, ip
 80012a8:	3220      	adds	r2, #32
 80012aa:	2b1c      	cmp	r3, #28
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x454>
 80012ae:	e692      	b.n	8000fd6 <__aeabi_ddiv+0x17a>
 80012b0:	0023      	movs	r3, r4
 80012b2:	3808      	subs	r0, #8
 80012b4:	4083      	lsls	r3, r0
 80012b6:	4699      	mov	r9, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	4698      	mov	r8, r3
 80012bc:	e69a      	b.n	8000ff4 <__aeabi_ddiv+0x198>
 80012be:	f7ff f8df 	bl	8000480 <__clzsi2>
 80012c2:	0002      	movs	r2, r0
 80012c4:	0003      	movs	r3, r0
 80012c6:	3215      	adds	r2, #21
 80012c8:	3320      	adds	r3, #32
 80012ca:	2a1c      	cmp	r2, #28
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_ddiv+0x474>
 80012ce:	e65f      	b.n	8000f90 <__aeabi_ddiv+0x134>
 80012d0:	9900      	ldr	r1, [sp, #0]
 80012d2:	3808      	subs	r0, #8
 80012d4:	4081      	lsls	r1, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	468b      	mov	fp, r1
 80012da:	e666      	b.n	8000faa <__aeabi_ddiv+0x14e>
 80012dc:	2200      	movs	r2, #0
 80012de:	002e      	movs	r6, r5
 80012e0:	2400      	movs	r4, #0
 80012e2:	4690      	mov	r8, r2
 80012e4:	4b65      	ldr	r3, [pc, #404]	@ (800147c <__aeabi_ddiv+0x620>)
 80012e6:	e625      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 80012e8:	002e      	movs	r6, r5
 80012ea:	2101      	movs	r1, #1
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	2938      	cmp	r1, #56	@ 0x38
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_ddiv+0x498>
 80012f2:	e61b      	b.n	8000f2c <__aeabi_ddiv+0xd0>
 80012f4:	291f      	cmp	r1, #31
 80012f6:	dc7e      	bgt.n	80013f6 <__aeabi_ddiv+0x59a>
 80012f8:	4861      	ldr	r0, [pc, #388]	@ (8001480 <__aeabi_ddiv+0x624>)
 80012fa:	0014      	movs	r4, r2
 80012fc:	4450      	add	r0, sl
 80012fe:	465b      	mov	r3, fp
 8001300:	4082      	lsls	r2, r0
 8001302:	4083      	lsls	r3, r0
 8001304:	40cc      	lsrs	r4, r1
 8001306:	1e50      	subs	r0, r2, #1
 8001308:	4182      	sbcs	r2, r0
 800130a:	4323      	orrs	r3, r4
 800130c:	431a      	orrs	r2, r3
 800130e:	465b      	mov	r3, fp
 8001310:	40cb      	lsrs	r3, r1
 8001312:	0751      	lsls	r1, r2, #29
 8001314:	d009      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 8001316:	210f      	movs	r1, #15
 8001318:	4011      	ands	r1, r2
 800131a:	2904      	cmp	r1, #4
 800131c:	d005      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 800131e:	1d11      	adds	r1, r2, #4
 8001320:	4291      	cmp	r1, r2
 8001322:	4192      	sbcs	r2, r2
 8001324:	4252      	negs	r2, r2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	000a      	movs	r2, r1
 800132a:	0219      	lsls	r1, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_ddiv+0x4d4>
 800132e:	e09b      	b.n	8001468 <__aeabi_ddiv+0x60c>
 8001330:	2200      	movs	r2, #0
 8001332:	2301      	movs	r3, #1
 8001334:	2400      	movs	r4, #0
 8001336:	4690      	mov	r8, r2
 8001338:	e5fc      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800133a:	210f      	movs	r1, #15
 800133c:	4011      	ands	r1, r2
 800133e:	2904      	cmp	r1, #4
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x4e8>
 8001342:	e773      	b.n	800122c <__aeabi_ddiv+0x3d0>
 8001344:	1d11      	adds	r1, r2, #4
 8001346:	4291      	cmp	r1, r2
 8001348:	4192      	sbcs	r2, r2
 800134a:	4252      	negs	r2, r2
 800134c:	002e      	movs	r6, r5
 800134e:	08c9      	lsrs	r1, r1, #3
 8001350:	4493      	add	fp, r2
 8001352:	e76d      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 8001354:	9b00      	ldr	r3, [sp, #0]
 8001356:	3d01      	subs	r5, #1
 8001358:	469c      	mov	ip, r3
 800135a:	4461      	add	r1, ip
 800135c:	428b      	cmp	r3, r1
 800135e:	d900      	bls.n	8001362 <__aeabi_ddiv+0x506>
 8001360:	e72c      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001362:	428a      	cmp	r2, r1
 8001364:	d800      	bhi.n	8001368 <__aeabi_ddiv+0x50c>
 8001366:	e729      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001368:	1e85      	subs	r5, r0, #2
 800136a:	4461      	add	r1, ip
 800136c:	e726      	b.n	80011bc <__aeabi_ddiv+0x360>
 800136e:	9900      	ldr	r1, [sp, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	468c      	mov	ip, r1
 8001374:	4464      	add	r4, ip
 8001376:	42a1      	cmp	r1, r4
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x520>
 800137a:	e72d      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 800137c:	42a2      	cmp	r2, r4
 800137e:	d800      	bhi.n	8001382 <__aeabi_ddiv+0x526>
 8001380:	e72a      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001382:	1e83      	subs	r3, r0, #2
 8001384:	4464      	add	r4, ip
 8001386:	e727      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001388:	4287      	cmp	r7, r0
 800138a:	d000      	beq.n	800138e <__aeabi_ddiv+0x532>
 800138c:	e6fe      	b.n	800118c <__aeabi_ddiv+0x330>
 800138e:	45a9      	cmp	r9, r5
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x538>
 8001392:	e6fb      	b.n	800118c <__aeabi_ddiv+0x330>
 8001394:	e6f5      	b.n	8001182 <__aeabi_ddiv+0x326>
 8001396:	42a2      	cmp	r2, r4
 8001398:	d800      	bhi.n	800139c <__aeabi_ddiv+0x540>
 800139a:	e6b9      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 800139c:	1e83      	subs	r3, r0, #2
 800139e:	4464      	add	r4, ip
 80013a0:	e6b6      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x54c>
 80013a6:	e69f      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1e83      	subs	r3, r0, #2
 80013ac:	4698      	mov	r8, r3
 80013ae:	4461      	add	r1, ip
 80013b0:	e69a      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013b2:	000a      	movs	r2, r1
 80013b4:	4284      	cmp	r4, r0
 80013b6:	d000      	beq.n	80013ba <__aeabi_ddiv+0x55e>
 80013b8:	e72e      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013ba:	454b      	cmp	r3, r9
 80013bc:	d000      	beq.n	80013c0 <__aeabi_ddiv+0x564>
 80013be:	e72b      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013c0:	0035      	movs	r5, r6
 80013c2:	e72c      	b.n	800121e <__aeabi_ddiv+0x3c2>
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <__aeabi_ddiv+0x614>)
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <__aeabi_ddiv+0x628>)
 80013c8:	4453      	add	r3, sl
 80013ca:	4592      	cmp	sl, r2
 80013cc:	db43      	blt.n	8001456 <__aeabi_ddiv+0x5fa>
 80013ce:	2201      	movs	r2, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	4493      	add	fp, r2
 80013d4:	e72c      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	d800      	bhi.n	80013dc <__aeabi_ddiv+0x580>
 80013da:	e6d7      	b.n	800118c <__aeabi_ddiv+0x330>
 80013dc:	2302      	movs	r3, #2
 80013de:	425b      	negs	r3, r3
 80013e0:	469c      	mov	ip, r3
 80013e2:	9900      	ldr	r1, [sp, #0]
 80013e4:	444d      	add	r5, r9
 80013e6:	454d      	cmp	r5, r9
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	44e3      	add	fp, ip
 80013ec:	468c      	mov	ip, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	4463      	add	r3, ip
 80013f2:	18c0      	adds	r0, r0, r3
 80013f4:	e6cc      	b.n	8001190 <__aeabi_ddiv+0x334>
 80013f6:	201f      	movs	r0, #31
 80013f8:	4240      	negs	r0, r0
 80013fa:	1ac3      	subs	r3, r0, r3
 80013fc:	4658      	mov	r0, fp
 80013fe:	40d8      	lsrs	r0, r3
 8001400:	2920      	cmp	r1, #32
 8001402:	d004      	beq.n	800140e <__aeabi_ddiv+0x5b2>
 8001404:	4659      	mov	r1, fp
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <__aeabi_ddiv+0x62c>)
 8001408:	4453      	add	r3, sl
 800140a:	4099      	lsls	r1, r3
 800140c:	430a      	orrs	r2, r1
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	2307      	movs	r3, #7
 8001414:	0019      	movs	r1, r3
 8001416:	4302      	orrs	r2, r0
 8001418:	2400      	movs	r4, #0
 800141a:	4011      	ands	r1, r2
 800141c:	4213      	tst	r3, r2
 800141e:	d009      	beq.n	8001434 <__aeabi_ddiv+0x5d8>
 8001420:	3308      	adds	r3, #8
 8001422:	4013      	ands	r3, r2
 8001424:	2b04      	cmp	r3, #4
 8001426:	d01d      	beq.n	8001464 <__aeabi_ddiv+0x608>
 8001428:	1d13      	adds	r3, r2, #4
 800142a:	4293      	cmp	r3, r2
 800142c:	4189      	sbcs	r1, r1
 800142e:	001a      	movs	r2, r3
 8001430:	4249      	negs	r1, r1
 8001432:	0749      	lsls	r1, r1, #29
 8001434:	08d2      	lsrs	r2, r2, #3
 8001436:	430a      	orrs	r2, r1
 8001438:	4690      	mov	r8, r2
 800143a:	2300      	movs	r3, #0
 800143c:	e57a      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800143e:	4649      	mov	r1, r9
 8001440:	9f00      	ldr	r7, [sp, #0]
 8001442:	004d      	lsls	r5, r1, #1
 8001444:	454d      	cmp	r5, r9
 8001446:	4189      	sbcs	r1, r1
 8001448:	46bc      	mov	ip, r7
 800144a:	4249      	negs	r1, r1
 800144c:	4461      	add	r1, ip
 800144e:	46a9      	mov	r9, r5
 8001450:	3a02      	subs	r2, #2
 8001452:	1864      	adds	r4, r4, r1
 8001454:	e7ae      	b.n	80013b4 <__aeabi_ddiv+0x558>
 8001456:	2201      	movs	r2, #1
 8001458:	4252      	negs	r2, r2
 800145a:	e746      	b.n	80012ea <__aeabi_ddiv+0x48e>
 800145c:	4599      	cmp	r9, r3
 800145e:	d3ee      	bcc.n	800143e <__aeabi_ddiv+0x5e2>
 8001460:	000a      	movs	r2, r1
 8001462:	e7aa      	b.n	80013ba <__aeabi_ddiv+0x55e>
 8001464:	2100      	movs	r1, #0
 8001466:	e7e5      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001468:	0759      	lsls	r1, r3, #29
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	0b1c      	lsrs	r4, r3, #12
 800146e:	e7e1      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001470:	000003ff 	.word	0x000003ff
 8001474:	feffffff 	.word	0xfeffffff
 8001478:	000007fe 	.word	0x000007fe
 800147c:	000007ff 	.word	0x000007ff
 8001480:	0000041e 	.word	0x0000041e
 8001484:	fffffc02 	.word	0xfffffc02
 8001488:	0000043e 	.word	0x0000043e

0800148c <__eqdf2>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	46de      	mov	lr, fp
 8001492:	464e      	mov	r6, r9
 8001494:	4645      	mov	r5, r8
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	000d      	movs	r5, r1
 800149a:	0004      	movs	r4, r0
 800149c:	0fe8      	lsrs	r0, r5, #31
 800149e:	4683      	mov	fp, r0
 80014a0:	0309      	lsls	r1, r1, #12
 80014a2:	0fd8      	lsrs	r0, r3, #31
 80014a4:	0b09      	lsrs	r1, r1, #12
 80014a6:	4682      	mov	sl, r0
 80014a8:	4819      	ldr	r0, [pc, #100]	@ (8001510 <__eqdf2+0x84>)
 80014aa:	468c      	mov	ip, r1
 80014ac:	031f      	lsls	r7, r3, #12
 80014ae:	0069      	lsls	r1, r5, #1
 80014b0:	005e      	lsls	r6, r3, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	0b3f      	lsrs	r7, r7, #12
 80014b6:	0d76      	lsrs	r6, r6, #21
 80014b8:	4281      	cmp	r1, r0
 80014ba:	d018      	beq.n	80014ee <__eqdf2+0x62>
 80014bc:	4286      	cmp	r6, r0
 80014be:	d00f      	beq.n	80014e0 <__eqdf2+0x54>
 80014c0:	2001      	movs	r0, #1
 80014c2:	42b1      	cmp	r1, r6
 80014c4:	d10d      	bne.n	80014e2 <__eqdf2+0x56>
 80014c6:	45bc      	cmp	ip, r7
 80014c8:	d10b      	bne.n	80014e2 <__eqdf2+0x56>
 80014ca:	4294      	cmp	r4, r2
 80014cc:	d109      	bne.n	80014e2 <__eqdf2+0x56>
 80014ce:	45d3      	cmp	fp, sl
 80014d0:	d01c      	beq.n	800150c <__eqdf2+0x80>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d105      	bne.n	80014e2 <__eqdf2+0x56>
 80014d6:	4660      	mov	r0, ip
 80014d8:	4320      	orrs	r0, r4
 80014da:	1e43      	subs	r3, r0, #1
 80014dc:	4198      	sbcs	r0, r3
 80014de:	e000      	b.n	80014e2 <__eqdf2+0x56>
 80014e0:	2001      	movs	r0, #1
 80014e2:	bcf0      	pop	{r4, r5, r6, r7}
 80014e4:	46bb      	mov	fp, r7
 80014e6:	46b2      	mov	sl, r6
 80014e8:	46a9      	mov	r9, r5
 80014ea:	46a0      	mov	r8, r4
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	2001      	movs	r0, #1
 80014f0:	428e      	cmp	r6, r1
 80014f2:	d1f6      	bne.n	80014e2 <__eqdf2+0x56>
 80014f4:	4661      	mov	r1, ip
 80014f6:	4339      	orrs	r1, r7
 80014f8:	000f      	movs	r7, r1
 80014fa:	4317      	orrs	r7, r2
 80014fc:	4327      	orrs	r7, r4
 80014fe:	d1f0      	bne.n	80014e2 <__eqdf2+0x56>
 8001500:	465b      	mov	r3, fp
 8001502:	4652      	mov	r2, sl
 8001504:	1a98      	subs	r0, r3, r2
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	4198      	sbcs	r0, r3
 800150a:	e7ea      	b.n	80014e2 <__eqdf2+0x56>
 800150c:	2000      	movs	r0, #0
 800150e:	e7e8      	b.n	80014e2 <__eqdf2+0x56>
 8001510:	000007ff 	.word	0x000007ff

08001514 <__gedf2>:
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	4657      	mov	r7, sl
 8001518:	464e      	mov	r6, r9
 800151a:	4645      	mov	r5, r8
 800151c:	46de      	mov	lr, fp
 800151e:	b5e0      	push	{r5, r6, r7, lr}
 8001520:	000d      	movs	r5, r1
 8001522:	030e      	lsls	r6, r1, #12
 8001524:	0049      	lsls	r1, r1, #1
 8001526:	0d49      	lsrs	r1, r1, #21
 8001528:	468a      	mov	sl, r1
 800152a:	0fdf      	lsrs	r7, r3, #31
 800152c:	0fe9      	lsrs	r1, r5, #31
 800152e:	46bc      	mov	ip, r7
 8001530:	b083      	sub	sp, #12
 8001532:	4f2f      	ldr	r7, [pc, #188]	@ (80015f0 <__gedf2+0xdc>)
 8001534:	0004      	movs	r4, r0
 8001536:	4680      	mov	r8, r0
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	0058      	lsls	r0, r3, #1
 800153c:	0319      	lsls	r1, r3, #12
 800153e:	4691      	mov	r9, r2
 8001540:	0b36      	lsrs	r6, r6, #12
 8001542:	0b09      	lsrs	r1, r1, #12
 8001544:	0d40      	lsrs	r0, r0, #21
 8001546:	45ba      	cmp	sl, r7
 8001548:	d01d      	beq.n	8001586 <__gedf2+0x72>
 800154a:	42b8      	cmp	r0, r7
 800154c:	d00d      	beq.n	800156a <__gedf2+0x56>
 800154e:	4657      	mov	r7, sl
 8001550:	2f00      	cmp	r7, #0
 8001552:	d12a      	bne.n	80015aa <__gedf2+0x96>
 8001554:	4334      	orrs	r4, r6
 8001556:	2800      	cmp	r0, #0
 8001558:	d124      	bne.n	80015a4 <__gedf2+0x90>
 800155a:	430a      	orrs	r2, r1
 800155c:	d036      	beq.n	80015cc <__gedf2+0xb8>
 800155e:	2c00      	cmp	r4, #0
 8001560:	d141      	bne.n	80015e6 <__gedf2+0xd2>
 8001562:	4663      	mov	r3, ip
 8001564:	0058      	lsls	r0, r3, #1
 8001566:	3801      	subs	r0, #1
 8001568:	e015      	b.n	8001596 <__gedf2+0x82>
 800156a:	4311      	orrs	r1, r2
 800156c:	d138      	bne.n	80015e0 <__gedf2+0xcc>
 800156e:	4653      	mov	r3, sl
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <__gedf2+0x64>
 8001574:	4326      	orrs	r6, r4
 8001576:	d0f4      	beq.n	8001562 <__gedf2+0x4e>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	4563      	cmp	r3, ip
 800157c:	d107      	bne.n	800158e <__gedf2+0x7a>
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	3801      	subs	r0, #1
 8001584:	e007      	b.n	8001596 <__gedf2+0x82>
 8001586:	4326      	orrs	r6, r4
 8001588:	d12a      	bne.n	80015e0 <__gedf2+0xcc>
 800158a:	4550      	cmp	r0, sl
 800158c:	d021      	beq.n	80015d2 <__gedf2+0xbe>
 800158e:	2001      	movs	r0, #1
 8001590:	9b01      	ldr	r3, [sp, #4]
 8001592:	425f      	negs	r7, r3
 8001594:	4338      	orrs	r0, r7
 8001596:	b003      	add	sp, #12
 8001598:	bcf0      	pop	{r4, r5, r6, r7}
 800159a:	46bb      	mov	fp, r7
 800159c:	46b2      	mov	sl, r6
 800159e:	46a9      	mov	r9, r5
 80015a0:	46a0      	mov	r8, r4
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a4:	2c00      	cmp	r4, #0
 80015a6:	d0dc      	beq.n	8001562 <__gedf2+0x4e>
 80015a8:	e7e6      	b.n	8001578 <__gedf2+0x64>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d0ef      	beq.n	800158e <__gedf2+0x7a>
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	4563      	cmp	r3, ip
 80015b2:	d1ec      	bne.n	800158e <__gedf2+0x7a>
 80015b4:	4582      	cmp	sl, r0
 80015b6:	dcea      	bgt.n	800158e <__gedf2+0x7a>
 80015b8:	dbe1      	blt.n	800157e <__gedf2+0x6a>
 80015ba:	428e      	cmp	r6, r1
 80015bc:	d8e7      	bhi.n	800158e <__gedf2+0x7a>
 80015be:	d1de      	bne.n	800157e <__gedf2+0x6a>
 80015c0:	45c8      	cmp	r8, r9
 80015c2:	d8e4      	bhi.n	800158e <__gedf2+0x7a>
 80015c4:	2000      	movs	r0, #0
 80015c6:	45c8      	cmp	r8, r9
 80015c8:	d2e5      	bcs.n	8001596 <__gedf2+0x82>
 80015ca:	e7d8      	b.n	800157e <__gedf2+0x6a>
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0e2      	beq.n	8001596 <__gedf2+0x82>
 80015d0:	e7dd      	b.n	800158e <__gedf2+0x7a>
 80015d2:	4311      	orrs	r1, r2
 80015d4:	d104      	bne.n	80015e0 <__gedf2+0xcc>
 80015d6:	9b01      	ldr	r3, [sp, #4]
 80015d8:	4563      	cmp	r3, ip
 80015da:	d1d8      	bne.n	800158e <__gedf2+0x7a>
 80015dc:	2000      	movs	r0, #0
 80015de:	e7da      	b.n	8001596 <__gedf2+0x82>
 80015e0:	2002      	movs	r0, #2
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7d7      	b.n	8001596 <__gedf2+0x82>
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	4563      	cmp	r3, ip
 80015ea:	d0e6      	beq.n	80015ba <__gedf2+0xa6>
 80015ec:	e7cf      	b.n	800158e <__gedf2+0x7a>
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff

080015f4 <__ledf2>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4657      	mov	r7, sl
 80015f8:	464e      	mov	r6, r9
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	b5e0      	push	{r5, r6, r7, lr}
 8001600:	000d      	movs	r5, r1
 8001602:	030e      	lsls	r6, r1, #12
 8001604:	0049      	lsls	r1, r1, #1
 8001606:	0d49      	lsrs	r1, r1, #21
 8001608:	468a      	mov	sl, r1
 800160a:	0fdf      	lsrs	r7, r3, #31
 800160c:	0fe9      	lsrs	r1, r5, #31
 800160e:	46bc      	mov	ip, r7
 8001610:	b083      	sub	sp, #12
 8001612:	4f2e      	ldr	r7, [pc, #184]	@ (80016cc <__ledf2+0xd8>)
 8001614:	0004      	movs	r4, r0
 8001616:	4680      	mov	r8, r0
 8001618:	9101      	str	r1, [sp, #4]
 800161a:	0058      	lsls	r0, r3, #1
 800161c:	0319      	lsls	r1, r3, #12
 800161e:	4691      	mov	r9, r2
 8001620:	0b36      	lsrs	r6, r6, #12
 8001622:	0b09      	lsrs	r1, r1, #12
 8001624:	0d40      	lsrs	r0, r0, #21
 8001626:	45ba      	cmp	sl, r7
 8001628:	d01e      	beq.n	8001668 <__ledf2+0x74>
 800162a:	42b8      	cmp	r0, r7
 800162c:	d00d      	beq.n	800164a <__ledf2+0x56>
 800162e:	4657      	mov	r7, sl
 8001630:	2f00      	cmp	r7, #0
 8001632:	d127      	bne.n	8001684 <__ledf2+0x90>
 8001634:	4334      	orrs	r4, r6
 8001636:	2800      	cmp	r0, #0
 8001638:	d133      	bne.n	80016a2 <__ledf2+0xae>
 800163a:	430a      	orrs	r2, r1
 800163c:	d034      	beq.n	80016a8 <__ledf2+0xb4>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d140      	bne.n	80016c4 <__ledf2+0xd0>
 8001642:	4663      	mov	r3, ip
 8001644:	0058      	lsls	r0, r3, #1
 8001646:	3801      	subs	r0, #1
 8001648:	e015      	b.n	8001676 <__ledf2+0x82>
 800164a:	4311      	orrs	r1, r2
 800164c:	d112      	bne.n	8001674 <__ledf2+0x80>
 800164e:	4653      	mov	r3, sl
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <__ledf2+0x64>
 8001654:	4326      	orrs	r6, r4
 8001656:	d0f4      	beq.n	8001642 <__ledf2+0x4e>
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	4563      	cmp	r3, ip
 800165c:	d01d      	beq.n	800169a <__ledf2+0xa6>
 800165e:	2001      	movs	r0, #1
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	425f      	negs	r7, r3
 8001664:	4338      	orrs	r0, r7
 8001666:	e006      	b.n	8001676 <__ledf2+0x82>
 8001668:	4326      	orrs	r6, r4
 800166a:	d103      	bne.n	8001674 <__ledf2+0x80>
 800166c:	4550      	cmp	r0, sl
 800166e:	d1f6      	bne.n	800165e <__ledf2+0x6a>
 8001670:	4311      	orrs	r1, r2
 8001672:	d01c      	beq.n	80016ae <__ledf2+0xba>
 8001674:	2002      	movs	r0, #2
 8001676:	b003      	add	sp, #12
 8001678:	bcf0      	pop	{r4, r5, r6, r7}
 800167a:	46bb      	mov	fp, r7
 800167c:	46b2      	mov	sl, r6
 800167e:	46a9      	mov	r9, r5
 8001680:	46a0      	mov	r8, r4
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2800      	cmp	r0, #0
 8001686:	d0ea      	beq.n	800165e <__ledf2+0x6a>
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	4563      	cmp	r3, ip
 800168c:	d1e7      	bne.n	800165e <__ledf2+0x6a>
 800168e:	4582      	cmp	sl, r0
 8001690:	dce5      	bgt.n	800165e <__ledf2+0x6a>
 8001692:	db02      	blt.n	800169a <__ledf2+0xa6>
 8001694:	428e      	cmp	r6, r1
 8001696:	d8e2      	bhi.n	800165e <__ledf2+0x6a>
 8001698:	d00e      	beq.n	80016b8 <__ledf2+0xc4>
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0058      	lsls	r0, r3, #1
 800169e:	3801      	subs	r0, #1
 80016a0:	e7e9      	b.n	8001676 <__ledf2+0x82>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d0cd      	beq.n	8001642 <__ledf2+0x4e>
 80016a6:	e7d7      	b.n	8001658 <__ledf2+0x64>
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d0e4      	beq.n	8001676 <__ledf2+0x82>
 80016ac:	e7d7      	b.n	800165e <__ledf2+0x6a>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	2000      	movs	r0, #0
 80016b2:	4563      	cmp	r3, ip
 80016b4:	d0df      	beq.n	8001676 <__ledf2+0x82>
 80016b6:	e7d2      	b.n	800165e <__ledf2+0x6a>
 80016b8:	45c8      	cmp	r8, r9
 80016ba:	d8d0      	bhi.n	800165e <__ledf2+0x6a>
 80016bc:	2000      	movs	r0, #0
 80016be:	45c8      	cmp	r8, r9
 80016c0:	d2d9      	bcs.n	8001676 <__ledf2+0x82>
 80016c2:	e7ea      	b.n	800169a <__ledf2+0xa6>
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	4563      	cmp	r3, ip
 80016c8:	d0e4      	beq.n	8001694 <__ledf2+0xa0>
 80016ca:	e7c8      	b.n	800165e <__ledf2+0x6a>
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__aeabi_dmul>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4657      	mov	r7, sl
 80016d4:	464e      	mov	r6, r9
 80016d6:	46de      	mov	lr, fp
 80016d8:	4645      	mov	r5, r8
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	001f      	movs	r7, r3
 80016de:	030b      	lsls	r3, r1, #12
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	0016      	movs	r6, r2
 80016e4:	469a      	mov	sl, r3
 80016e6:	0fca      	lsrs	r2, r1, #31
 80016e8:	004b      	lsls	r3, r1, #1
 80016ea:	0004      	movs	r4, r0
 80016ec:	4691      	mov	r9, r2
 80016ee:	b085      	sub	sp, #20
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0x26>
 80016f4:	e1cf      	b.n	8001a96 <__aeabi_dmul+0x3c6>
 80016f6:	4acd      	ldr	r2, [pc, #820]	@ (8001a2c <__aeabi_dmul+0x35c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d055      	beq.n	80017a8 <__aeabi_dmul+0xd8>
 80016fc:	4651      	mov	r1, sl
 80016fe:	0f42      	lsrs	r2, r0, #29
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0409      	lsls	r1, r1, #16
 8001708:	4311      	orrs	r1, r2
 800170a:	00c2      	lsls	r2, r0, #3
 800170c:	4690      	mov	r8, r2
 800170e:	4ac8      	ldr	r2, [pc, #800]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001710:	468a      	mov	sl, r1
 8001712:	4693      	mov	fp, r2
 8001714:	449b      	add	fp, r3
 8001716:	2300      	movs	r3, #0
 8001718:	2500      	movs	r5, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	033c      	lsls	r4, r7, #12
 800171e:	007b      	lsls	r3, r7, #1
 8001720:	0ffa      	lsrs	r2, r7, #31
 8001722:	9601      	str	r6, [sp, #4]
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x5e>
 800172c:	e188      	b.n	8001a40 <__aeabi_dmul+0x370>
 800172e:	4abf      	ldr	r2, [pc, #764]	@ (8001a2c <__aeabi_dmul+0x35c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x66>
 8001734:	e092      	b.n	800185c <__aeabi_dmul+0x18c>
 8001736:	4abe      	ldr	r2, [pc, #760]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001738:	4694      	mov	ip, r2
 800173a:	4463      	add	r3, ip
 800173c:	449b      	add	fp, r3
 800173e:	2d0a      	cmp	r5, #10
 8001740:	dc42      	bgt.n	80017c8 <__aeabi_dmul+0xf8>
 8001742:	00e4      	lsls	r4, r4, #3
 8001744:	0f73      	lsrs	r3, r6, #29
 8001746:	4323      	orrs	r3, r4
 8001748:	2480      	movs	r4, #128	@ 0x80
 800174a:	4649      	mov	r1, r9
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	431c      	orrs	r4, r3
 8001750:	00f3      	lsls	r3, r6, #3
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b00      	ldr	r3, [sp, #0]
 8001756:	2000      	movs	r0, #0
 8001758:	4059      	eors	r1, r3
 800175a:	b2cb      	uxtb	r3, r1
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2d02      	cmp	r5, #2
 8001760:	dc00      	bgt.n	8001764 <__aeabi_dmul+0x94>
 8001762:	e094      	b.n	800188e <__aeabi_dmul+0x1be>
 8001764:	2301      	movs	r3, #1
 8001766:	40ab      	lsls	r3, r5
 8001768:	001d      	movs	r5, r3
 800176a:	23a6      	movs	r3, #166	@ 0xa6
 800176c:	002a      	movs	r2, r5
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	401a      	ands	r2, r3
 8001772:	421d      	tst	r5, r3
 8001774:	d000      	beq.n	8001778 <__aeabi_dmul+0xa8>
 8001776:	e229      	b.n	8001bcc <__aeabi_dmul+0x4fc>
 8001778:	2390      	movs	r3, #144	@ 0x90
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	421d      	tst	r5, r3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0xb2>
 8001780:	e24d      	b.n	8001c1e <__aeabi_dmul+0x54e>
 8001782:	2300      	movs	r3, #0
 8001784:	2480      	movs	r4, #128	@ 0x80
 8001786:	4699      	mov	r9, r3
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800178c:	0010      	movs	r0, r2
 800178e:	464a      	mov	r2, r9
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4323      	orrs	r3, r4
 8001794:	07d2      	lsls	r2, r2, #31
 8001796:	4313      	orrs	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	b005      	add	sp, #20
 800179c:	bcf0      	pop	{r4, r5, r6, r7}
 800179e:	46bb      	mov	fp, r7
 80017a0:	46b2      	mov	sl, r6
 80017a2:	46a9      	mov	r9, r5
 80017a4:	46a0      	mov	r8, r4
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	4652      	mov	r2, sl
 80017aa:	4302      	orrs	r2, r0
 80017ac:	4690      	mov	r8, r2
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dmul+0xe2>
 80017b0:	e1ac      	b.n	8001b0c <__aeabi_dmul+0x43c>
 80017b2:	469b      	mov	fp, r3
 80017b4:	2302      	movs	r3, #2
 80017b6:	4692      	mov	sl, r2
 80017b8:	2508      	movs	r5, #8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	e7ae      	b.n	800171c <__aeabi_dmul+0x4c>
 80017be:	9b00      	ldr	r3, [sp, #0]
 80017c0:	46a2      	mov	sl, r4
 80017c2:	4699      	mov	r9, r3
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	4698      	mov	r8, r3
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dmul+0x100>
 80017ce:	e1ca      	b.n	8001b66 <__aeabi_dmul+0x496>
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dmul+0x106>
 80017d4:	e192      	b.n	8001afc <__aeabi_dmul+0x42c>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d110      	bne.n	80017fc <__aeabi_dmul+0x12c>
 80017da:	2300      	movs	r3, #0
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	e7d4      	b.n	800178c <__aeabi_dmul+0xbc>
 80017e2:	2201      	movs	r2, #1
 80017e4:	087b      	lsrs	r3, r7, #1
 80017e6:	403a      	ands	r2, r7
 80017e8:	4313      	orrs	r3, r2
 80017ea:	4652      	mov	r2, sl
 80017ec:	07d2      	lsls	r2, r2, #31
 80017ee:	4313      	orrs	r3, r2
 80017f0:	4698      	mov	r8, r3
 80017f2:	4653      	mov	r3, sl
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	469a      	mov	sl, r3
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	4699      	mov	r9, r3
 80017fc:	465b      	mov	r3, fp
 80017fe:	1c58      	adds	r0, r3, #1
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	445b      	add	r3, fp
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc00      	bgt.n	800180c <__aeabi_dmul+0x13c>
 800180a:	e1b1      	b.n	8001b70 <__aeabi_dmul+0x4a0>
 800180c:	4642      	mov	r2, r8
 800180e:	0752      	lsls	r2, r2, #29
 8001810:	d00b      	beq.n	800182a <__aeabi_dmul+0x15a>
 8001812:	220f      	movs	r2, #15
 8001814:	4641      	mov	r1, r8
 8001816:	400a      	ands	r2, r1
 8001818:	2a04      	cmp	r2, #4
 800181a:	d006      	beq.n	800182a <__aeabi_dmul+0x15a>
 800181c:	4642      	mov	r2, r8
 800181e:	1d11      	adds	r1, r2, #4
 8001820:	4541      	cmp	r1, r8
 8001822:	4192      	sbcs	r2, r2
 8001824:	4688      	mov	r8, r1
 8001826:	4252      	negs	r2, r2
 8001828:	4492      	add	sl, r2
 800182a:	4652      	mov	r2, sl
 800182c:	01d2      	lsls	r2, r2, #7
 800182e:	d506      	bpl.n	800183e <__aeabi_dmul+0x16e>
 8001830:	4652      	mov	r2, sl
 8001832:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <__aeabi_dmul+0x364>)
 8001834:	401a      	ands	r2, r3
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	4692      	mov	sl, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	18c3      	adds	r3, r0, r3
 800183e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a38 <__aeabi_dmul+0x368>)
 8001840:	4293      	cmp	r3, r2
 8001842:	dd00      	ble.n	8001846 <__aeabi_dmul+0x176>
 8001844:	e18f      	b.n	8001b66 <__aeabi_dmul+0x496>
 8001846:	4642      	mov	r2, r8
 8001848:	08d1      	lsrs	r1, r2, #3
 800184a:	4652      	mov	r2, sl
 800184c:	0752      	lsls	r2, r2, #29
 800184e:	430a      	orrs	r2, r1
 8001850:	4651      	mov	r1, sl
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	024c      	lsls	r4, r1, #9
 8001856:	0b24      	lsrs	r4, r4, #12
 8001858:	0d5b      	lsrs	r3, r3, #21
 800185a:	e797      	b.n	800178c <__aeabi_dmul+0xbc>
 800185c:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800185e:	4326      	orrs	r6, r4
 8001860:	469c      	mov	ip, r3
 8001862:	44e3      	add	fp, ip
 8001864:	2e00      	cmp	r6, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x19a>
 8001868:	e16f      	b.n	8001b4a <__aeabi_dmul+0x47a>
 800186a:	2303      	movs	r3, #3
 800186c:	4649      	mov	r1, r9
 800186e:	431d      	orrs	r5, r3
 8001870:	9b00      	ldr	r3, [sp, #0]
 8001872:	4059      	eors	r1, r3
 8001874:	b2cb      	uxtb	r3, r1
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	2d0a      	cmp	r5, #10
 800187a:	dd00      	ble.n	800187e <__aeabi_dmul+0x1ae>
 800187c:	e133      	b.n	8001ae6 <__aeabi_dmul+0x416>
 800187e:	2301      	movs	r3, #1
 8001880:	40ab      	lsls	r3, r5
 8001882:	001d      	movs	r5, r3
 8001884:	2303      	movs	r3, #3
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2288      	movs	r2, #136	@ 0x88
 800188a:	422a      	tst	r2, r5
 800188c:	d197      	bne.n	80017be <__aeabi_dmul+0xee>
 800188e:	4642      	mov	r2, r8
 8001890:	4643      	mov	r3, r8
 8001892:	0412      	lsls	r2, r2, #16
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	0016      	movs	r6, r2
 8001898:	9801      	ldr	r0, [sp, #4]
 800189a:	0c1d      	lsrs	r5, r3, #16
 800189c:	0c03      	lsrs	r3, r0, #16
 800189e:	0400      	lsls	r0, r0, #16
 80018a0:	0c00      	lsrs	r0, r0, #16
 80018a2:	4346      	muls	r6, r0
 80018a4:	46b4      	mov	ip, r6
 80018a6:	001e      	movs	r6, r3
 80018a8:	436e      	muls	r6, r5
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	0016      	movs	r6, r2
 80018ae:	0007      	movs	r7, r0
 80018b0:	435e      	muls	r6, r3
 80018b2:	4661      	mov	r1, ip
 80018b4:	46b0      	mov	r8, r6
 80018b6:	436f      	muls	r7, r5
 80018b8:	0c0e      	lsrs	r6, r1, #16
 80018ba:	44b8      	add	r8, r7
 80018bc:	4446      	add	r6, r8
 80018be:	42b7      	cmp	r7, r6
 80018c0:	d905      	bls.n	80018ce <__aeabi_dmul+0x1fe>
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	4688      	mov	r8, r1
 80018c8:	9f00      	ldr	r7, [sp, #0]
 80018ca:	4447      	add	r7, r8
 80018cc:	9700      	str	r7, [sp, #0]
 80018ce:	4661      	mov	r1, ip
 80018d0:	0409      	lsls	r1, r1, #16
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	0c37      	lsrs	r7, r6, #16
 80018d6:	0436      	lsls	r6, r6, #16
 80018d8:	468c      	mov	ip, r1
 80018da:	0031      	movs	r1, r6
 80018dc:	4461      	add	r1, ip
 80018de:	9101      	str	r1, [sp, #4]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0c26      	lsrs	r6, r4, #16
 80018e4:	0424      	lsls	r4, r4, #16
 80018e6:	0c24      	lsrs	r4, r4, #16
 80018e8:	4361      	muls	r1, r4
 80018ea:	468c      	mov	ip, r1
 80018ec:	0021      	movs	r1, r4
 80018ee:	4369      	muls	r1, r5
 80018f0:	4689      	mov	r9, r1
 80018f2:	4661      	mov	r1, ip
 80018f4:	0c09      	lsrs	r1, r1, #16
 80018f6:	4688      	mov	r8, r1
 80018f8:	4372      	muls	r2, r6
 80018fa:	444a      	add	r2, r9
 80018fc:	4442      	add	r2, r8
 80018fe:	4375      	muls	r5, r6
 8001900:	4591      	cmp	r9, r2
 8001902:	d903      	bls.n	800190c <__aeabi_dmul+0x23c>
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	4688      	mov	r8, r1
 800190a:	4445      	add	r5, r8
 800190c:	0c11      	lsrs	r1, r2, #16
 800190e:	4688      	mov	r8, r1
 8001910:	4661      	mov	r1, ip
 8001912:	0409      	lsls	r1, r1, #16
 8001914:	0c09      	lsrs	r1, r1, #16
 8001916:	468c      	mov	ip, r1
 8001918:	0412      	lsls	r2, r2, #16
 800191a:	4462      	add	r2, ip
 800191c:	18b9      	adds	r1, r7, r2
 800191e:	9102      	str	r1, [sp, #8]
 8001920:	4651      	mov	r1, sl
 8001922:	0c09      	lsrs	r1, r1, #16
 8001924:	468c      	mov	ip, r1
 8001926:	4651      	mov	r1, sl
 8001928:	040f      	lsls	r7, r1, #16
 800192a:	0c3f      	lsrs	r7, r7, #16
 800192c:	0039      	movs	r1, r7
 800192e:	4341      	muls	r1, r0
 8001930:	4445      	add	r5, r8
 8001932:	4688      	mov	r8, r1
 8001934:	4661      	mov	r1, ip
 8001936:	4341      	muls	r1, r0
 8001938:	468a      	mov	sl, r1
 800193a:	4641      	mov	r1, r8
 800193c:	4660      	mov	r0, ip
 800193e:	0c09      	lsrs	r1, r1, #16
 8001940:	4689      	mov	r9, r1
 8001942:	4358      	muls	r0, r3
 8001944:	437b      	muls	r3, r7
 8001946:	4453      	add	r3, sl
 8001948:	444b      	add	r3, r9
 800194a:	459a      	cmp	sl, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_dmul+0x286>
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	4689      	mov	r9, r1
 8001954:	4448      	add	r0, r9
 8001956:	0c19      	lsrs	r1, r3, #16
 8001958:	4689      	mov	r9, r1
 800195a:	4641      	mov	r1, r8
 800195c:	0409      	lsls	r1, r1, #16
 800195e:	0c09      	lsrs	r1, r1, #16
 8001960:	4688      	mov	r8, r1
 8001962:	0039      	movs	r1, r7
 8001964:	4361      	muls	r1, r4
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4443      	add	r3, r8
 800196a:	4688      	mov	r8, r1
 800196c:	4661      	mov	r1, ip
 800196e:	434c      	muls	r4, r1
 8001970:	4371      	muls	r1, r6
 8001972:	468c      	mov	ip, r1
 8001974:	4641      	mov	r1, r8
 8001976:	4377      	muls	r7, r6
 8001978:	0c0e      	lsrs	r6, r1, #16
 800197a:	193f      	adds	r7, r7, r4
 800197c:	19f6      	adds	r6, r6, r7
 800197e:	4448      	add	r0, r9
 8001980:	42b4      	cmp	r4, r6
 8001982:	d903      	bls.n	800198c <__aeabi_dmul+0x2bc>
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	4689      	mov	r9, r1
 800198a:	44cc      	add	ip, r9
 800198c:	9902      	ldr	r1, [sp, #8]
 800198e:	9f00      	ldr	r7, [sp, #0]
 8001990:	4689      	mov	r9, r1
 8001992:	0431      	lsls	r1, r6, #16
 8001994:	444f      	add	r7, r9
 8001996:	4689      	mov	r9, r1
 8001998:	4641      	mov	r1, r8
 800199a:	4297      	cmp	r7, r2
 800199c:	4192      	sbcs	r2, r2
 800199e:	040c      	lsls	r4, r1, #16
 80019a0:	0c24      	lsrs	r4, r4, #16
 80019a2:	444c      	add	r4, r9
 80019a4:	18ff      	adds	r7, r7, r3
 80019a6:	4252      	negs	r2, r2
 80019a8:	1964      	adds	r4, r4, r5
 80019aa:	18a1      	adds	r1, r4, r2
 80019ac:	429f      	cmp	r7, r3
 80019ae:	419b      	sbcs	r3, r3
 80019b0:	4688      	mov	r8, r1
 80019b2:	4682      	mov	sl, r0
 80019b4:	425b      	negs	r3, r3
 80019b6:	4699      	mov	r9, r3
 80019b8:	4590      	cmp	r8, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	42ac      	cmp	r4, r5
 80019be:	41a4      	sbcs	r4, r4
 80019c0:	44c2      	add	sl, r8
 80019c2:	44d1      	add	r9, sl
 80019c4:	4252      	negs	r2, r2
 80019c6:	4264      	negs	r4, r4
 80019c8:	4314      	orrs	r4, r2
 80019ca:	4599      	cmp	r9, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	4582      	cmp	sl, r0
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	425b      	negs	r3, r3
 80019d4:	4252      	negs	r2, r2
 80019d6:	4313      	orrs	r3, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	0c36      	lsrs	r6, r6, #16
 80019dc:	19a4      	adds	r4, r4, r6
 80019de:	18e3      	adds	r3, r4, r3
 80019e0:	4463      	add	r3, ip
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	0dd2      	lsrs	r2, r2, #23
 80019e6:	431a      	orrs	r2, r3
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	4692      	mov	sl, r2
 80019ec:	027a      	lsls	r2, r7, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	1e50      	subs	r0, r2, #1
 80019f2:	4182      	sbcs	r2, r0
 80019f4:	0dff      	lsrs	r7, r7, #23
 80019f6:	4317      	orrs	r7, r2
 80019f8:	464a      	mov	r2, r9
 80019fa:	0252      	lsls	r2, r2, #9
 80019fc:	4317      	orrs	r7, r2
 80019fe:	46b8      	mov	r8, r7
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	d500      	bpl.n	8001a06 <__aeabi_dmul+0x336>
 8001a04:	e6ed      	b.n	80017e2 <__aeabi_dmul+0x112>
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <__aeabi_dmul+0x36c>)
 8001a08:	9a03      	ldr	r2, [sp, #12]
 8001a0a:	445b      	add	r3, fp
 8001a0c:	4691      	mov	r9, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dc00      	bgt.n	8001a14 <__aeabi_dmul+0x344>
 8001a12:	e0ac      	b.n	8001b6e <__aeabi_dmul+0x49e>
 8001a14:	003a      	movs	r2, r7
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dmul+0x34c>
 8001a1a:	e710      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	4658      	mov	r0, fp
 8001a20:	403a      	ands	r2, r7
 8001a22:	2a04      	cmp	r2, #4
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dmul+0x358>
 8001a26:	e6f9      	b.n	800181c <__aeabi_dmul+0x14c>
 8001a28:	e709      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	fffffc01 	.word	0xfffffc01
 8001a34:	feffffff 	.word	0xfeffffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	0022      	movs	r2, r4
 8001a42:	4332      	orrs	r2, r6
 8001a44:	d06f      	beq.n	8001b26 <__aeabi_dmul+0x456>
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x37c>
 8001a4a:	e0c2      	b.n	8001bd2 <__aeabi_dmul+0x502>
 8001a4c:	0020      	movs	r0, r4
 8001a4e:	f7fe fd17 	bl	8000480 <__clzsi2>
 8001a52:	0002      	movs	r2, r0
 8001a54:	0003      	movs	r3, r0
 8001a56:	3a0b      	subs	r2, #11
 8001a58:	201d      	movs	r0, #29
 8001a5a:	1a82      	subs	r2, r0, r2
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	0019      	movs	r1, r3
 8001a60:	40d0      	lsrs	r0, r2
 8001a62:	3908      	subs	r1, #8
 8001a64:	408c      	lsls	r4, r1
 8001a66:	0002      	movs	r2, r0
 8001a68:	4322      	orrs	r2, r4
 8001a6a:	0034      	movs	r4, r6
 8001a6c:	408c      	lsls	r4, r1
 8001a6e:	4659      	mov	r1, fp
 8001a70:	1acb      	subs	r3, r1, r3
 8001a72:	4986      	ldr	r1, [pc, #536]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001a74:	468b      	mov	fp, r1
 8001a76:	449b      	add	fp, r3
 8001a78:	2d0a      	cmp	r5, #10
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dmul+0x3ae>
 8001a7c:	e6a4      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001a7e:	4649      	mov	r1, r9
 8001a80:	9b00      	ldr	r3, [sp, #0]
 8001a82:	9401      	str	r4, [sp, #4]
 8001a84:	4059      	eors	r1, r3
 8001a86:	b2cb      	uxtb	r3, r1
 8001a88:	0014      	movs	r4, r2
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	9303      	str	r3, [sp, #12]
 8001a8e:	2d02      	cmp	r5, #2
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dmul+0x3c4>
 8001a92:	e667      	b.n	8001764 <__aeabi_dmul+0x94>
 8001a94:	e6fb      	b.n	800188e <__aeabi_dmul+0x1be>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	d03c      	beq.n	8001b18 <__aeabi_dmul+0x448>
 8001a9e:	4653      	mov	r3, sl
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dmul+0x3d6>
 8001aa4:	e0a3      	b.n	8001bee <__aeabi_dmul+0x51e>
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	f7fe fcea 	bl	8000480 <__clzsi2>
 8001aac:	230b      	movs	r3, #11
 8001aae:	425b      	negs	r3, r3
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	4484      	add	ip, r0
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	4650      	mov	r0, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	4088      	lsls	r0, r1
 8001abe:	231d      	movs	r3, #29
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4660      	mov	r0, ip
 8001ac4:	1a1b      	subs	r3, r3, r0
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	40d8      	lsrs	r0, r3
 8001aca:	0003      	movs	r3, r0
 8001acc:	4640      	mov	r0, r8
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	0023      	movs	r3, r4
 8001ad4:	408b      	lsls	r3, r1
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001ada:	2500      	movs	r5, #0
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	469b      	mov	fp, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	e61a      	b.n	800171c <__aeabi_dmul+0x4c>
 8001ae6:	2d0f      	cmp	r5, #15
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dmul+0x41c>
 8001aea:	e0c9      	b.n	8001c80 <__aeabi_dmul+0x5b0>
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	4652      	mov	r2, sl
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	421a      	tst	r2, r3
 8001af4:	d002      	beq.n	8001afc <__aeabi_dmul+0x42c>
 8001af6:	421c      	tst	r4, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_dmul+0x42c>
 8001afa:	e092      	b.n	8001c22 <__aeabi_dmul+0x552>
 8001afc:	2480      	movs	r4, #128	@ 0x80
 8001afe:	4653      	mov	r3, sl
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	431c      	orrs	r4, r3
 8001b04:	0324      	lsls	r4, r4, #12
 8001b06:	4642      	mov	r2, r8
 8001b08:	0b24      	lsrs	r4, r4, #12
 8001b0a:	e63e      	b.n	800178a <__aeabi_dmul+0xba>
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4680      	mov	r8, r0
 8001b12:	250c      	movs	r5, #12
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	e601      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	469a      	mov	sl, r3
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2504      	movs	r5, #4
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	e5fa      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b26:	2101      	movs	r1, #1
 8001b28:	430d      	orrs	r5, r1
 8001b2a:	2d0a      	cmp	r5, #10
 8001b2c:	dd00      	ble.n	8001b30 <__aeabi_dmul+0x460>
 8001b2e:	e64b      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b30:	4649      	mov	r1, r9
 8001b32:	9800      	ldr	r0, [sp, #0]
 8001b34:	4041      	eors	r1, r0
 8001b36:	b2c9      	uxtb	r1, r1
 8001b38:	9103      	str	r1, [sp, #12]
 8001b3a:	2d02      	cmp	r5, #2
 8001b3c:	dc00      	bgt.n	8001b40 <__aeabi_dmul+0x470>
 8001b3e:	e096      	b.n	8001c6e <__aeabi_dmul+0x59e>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2400      	movs	r4, #0
 8001b44:	2001      	movs	r0, #1
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	e60c      	b.n	8001764 <__aeabi_dmul+0x94>
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9a00      	ldr	r2, [sp, #0]
 8001b50:	432b      	orrs	r3, r5
 8001b52:	4051      	eors	r1, r2
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	9203      	str	r2, [sp, #12]
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dmul+0x48e>
 8001b5c:	e634      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d157      	bne.n	8001c12 <__aeabi_dmul+0x542>
 8001b62:	9b03      	ldr	r3, [sp, #12]
 8001b64:	4699      	mov	r9, r3
 8001b66:	2400      	movs	r4, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4b49      	ldr	r3, [pc, #292]	@ (8001c90 <__aeabi_dmul+0x5c0>)
 8001b6c:	e60e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001b6e:	4658      	mov	r0, fp
 8001b70:	2101      	movs	r1, #1
 8001b72:	1ac9      	subs	r1, r1, r3
 8001b74:	2938      	cmp	r1, #56	@ 0x38
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_dmul+0x4aa>
 8001b78:	e62f      	b.n	80017da <__aeabi_dmul+0x10a>
 8001b7a:	291f      	cmp	r1, #31
 8001b7c:	dd56      	ble.n	8001c2c <__aeabi_dmul+0x55c>
 8001b7e:	221f      	movs	r2, #31
 8001b80:	4654      	mov	r4, sl
 8001b82:	4252      	negs	r2, r2
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	40dc      	lsrs	r4, r3
 8001b88:	2920      	cmp	r1, #32
 8001b8a:	d007      	beq.n	8001b9c <__aeabi_dmul+0x4cc>
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <__aeabi_dmul+0x5c4>)
 8001b8e:	4642      	mov	r2, r8
 8001b90:	469c      	mov	ip, r3
 8001b92:	4653      	mov	r3, sl
 8001b94:	4460      	add	r0, ip
 8001b96:	4083      	lsls	r3, r0
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	1e53      	subs	r3, r2, #1
 8001ba2:	419a      	sbcs	r2, r3
 8001ba4:	000b      	movs	r3, r1
 8001ba6:	4322      	orrs	r2, r4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2400      	movs	r4, #0
 8001bac:	4211      	tst	r1, r2
 8001bae:	d009      	beq.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d05d      	beq.n	8001c74 <__aeabi_dmul+0x5a4>
 8001bb8:	1d11      	adds	r1, r2, #4
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	419b      	sbcs	r3, r3
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	075b      	lsls	r3, r3, #29
 8001bc4:	08d2      	lsrs	r2, r2, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e5df      	b.n	800178c <__aeabi_dmul+0xbc>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	4699      	mov	r9, r3
 8001bd0:	e5fa      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001bd2:	9801      	ldr	r0, [sp, #4]
 8001bd4:	f7fe fc54 	bl	8000480 <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	0003      	movs	r3, r0
 8001bdc:	3215      	adds	r2, #21
 8001bde:	3320      	adds	r3, #32
 8001be0:	2a1c      	cmp	r2, #28
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x516>
 8001be4:	e738      	b.n	8001a58 <__aeabi_dmul+0x388>
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	3808      	subs	r0, #8
 8001bea:	4082      	lsls	r2, r0
 8001bec:	e73f      	b.n	8001a6e <__aeabi_dmul+0x39e>
 8001bee:	f7fe fc47 	bl	8000480 <__clzsi2>
 8001bf2:	2315      	movs	r3, #21
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4484      	add	ip, r0
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	4663      	mov	r3, ip
 8001bfc:	3220      	adds	r2, #32
 8001bfe:	2b1c      	cmp	r3, #28
 8001c00:	dc00      	bgt.n	8001c04 <__aeabi_dmul+0x534>
 8001c02:	e758      	b.n	8001ab6 <__aeabi_dmul+0x3e6>
 8001c04:	2300      	movs	r3, #0
 8001c06:	4698      	mov	r8, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	3808      	subs	r0, #8
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	e762      	b.n	8001ad8 <__aeabi_dmul+0x408>
 8001c12:	001d      	movs	r5, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	2400      	movs	r4, #0
 8001c18:	2002      	movs	r0, #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	e5a2      	b.n	8001764 <__aeabi_dmul+0x94>
 8001c1e:	9002      	str	r0, [sp, #8]
 8001c20:	e632      	b.n	8001888 <__aeabi_dmul+0x1b8>
 8001c22:	431c      	orrs	r4, r3
 8001c24:	9b00      	ldr	r3, [sp, #0]
 8001c26:	9a01      	ldr	r2, [sp, #4]
 8001c28:	4699      	mov	r9, r3
 8001c2a:	e5ae      	b.n	800178a <__aeabi_dmul+0xba>
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <__aeabi_dmul+0x5c8>)
 8001c2e:	4652      	mov	r2, sl
 8001c30:	18c3      	adds	r3, r0, r3
 8001c32:	4640      	mov	r0, r8
 8001c34:	409a      	lsls	r2, r3
 8001c36:	40c8      	lsrs	r0, r1
 8001c38:	4302      	orrs	r2, r0
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4098      	lsls	r0, r3
 8001c3e:	0003      	movs	r3, r0
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	4183      	sbcs	r3, r0
 8001c44:	4654      	mov	r4, sl
 8001c46:	431a      	orrs	r2, r3
 8001c48:	40cc      	lsrs	r4, r1
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	d009      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c4e:	230f      	movs	r3, #15
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d005      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c56:	1d13      	adds	r3, r2, #4
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	18a4      	adds	r4, r4, r2
 8001c60:	001a      	movs	r2, r3
 8001c62:	0223      	lsls	r3, r4, #8
 8001c64:	d508      	bpl.n	8001c78 <__aeabi_dmul+0x5a8>
 8001c66:	2301      	movs	r3, #1
 8001c68:	2400      	movs	r4, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e58e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c6e:	4689      	mov	r9, r1
 8001c70:	2400      	movs	r4, #0
 8001c72:	e58b      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c74:	2300      	movs	r3, #0
 8001c76:	e7a5      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c78:	0763      	lsls	r3, r4, #29
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	e7a1      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	46a2      	mov	sl, r4
 8001c84:	4699      	mov	r9, r3
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	4698      	mov	r8, r3
 8001c8a:	e737      	b.n	8001afc <__aeabi_dmul+0x42c>
 8001c8c:	fffffc0d 	.word	0xfffffc0d
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e

08001c9c <__aeabi_dsub>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	9000      	str	r0, [sp, #0]
 8001cac:	9101      	str	r1, [sp, #4]
 8001cae:	030c      	lsls	r4, r1, #12
 8001cb0:	004d      	lsls	r5, r1, #1
 8001cb2:	0fce      	lsrs	r6, r1, #31
 8001cb4:	0a61      	lsrs	r1, r4, #9
 8001cb6:	9c00      	ldr	r4, [sp, #0]
 8001cb8:	005f      	lsls	r7, r3, #1
 8001cba:	0f64      	lsrs	r4, r4, #29
 8001cbc:	430c      	orrs	r4, r1
 8001cbe:	9900      	ldr	r1, [sp, #0]
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	00c8      	lsls	r0, r1, #3
 8001cc6:	0319      	lsls	r1, r3, #12
 8001cc8:	0d7b      	lsrs	r3, r7, #21
 8001cca:	4699      	mov	r9, r3
 8001ccc:	9b01      	ldr	r3, [sp, #4]
 8001cce:	4fcc      	ldr	r7, [pc, #816]	@ (8002000 <__aeabi_dsub+0x364>)
 8001cd0:	0fdb      	lsrs	r3, r3, #31
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	0a4b      	lsrs	r3, r1, #9
 8001cd6:	9900      	ldr	r1, [sp, #0]
 8001cd8:	4680      	mov	r8, r0
 8001cda:	0f49      	lsrs	r1, r1, #29
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	468b      	mov	fp, r1
 8001ce2:	00da      	lsls	r2, r3, #3
 8001ce4:	4692      	mov	sl, r2
 8001ce6:	0d6d      	lsrs	r5, r5, #21
 8001ce8:	45b9      	cmp	r9, r7
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x52>
 8001cec:	e0bf      	b.n	8001e6e <__aeabi_dsub+0x1d2>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4661      	mov	r1, ip
 8001cf2:	4059      	eors	r1, r3
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	468c      	mov	ip, r1
 8001cf8:	1aeb      	subs	r3, r5, r3
 8001cfa:	428e      	cmp	r6, r1
 8001cfc:	d075      	beq.n	8001dea <__aeabi_dsub+0x14e>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_dsub+0x68>
 8001d02:	e2a3      	b.n	800224c <__aeabi_dsub+0x5b0>
 8001d04:	4649      	mov	r1, r9
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x70>
 8001d0a:	e0ce      	b.n	8001eaa <__aeabi_dsub+0x20e>
 8001d0c:	42bd      	cmp	r5, r7
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x76>
 8001d10:	e200      	b.n	8002114 <__aeabi_dsub+0x478>
 8001d12:	2701      	movs	r7, #1
 8001d14:	2b38      	cmp	r3, #56	@ 0x38
 8001d16:	dc19      	bgt.n	8001d4c <__aeabi_dsub+0xb0>
 8001d18:	2780      	movs	r7, #128	@ 0x80
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	043f      	lsls	r7, r7, #16
 8001d1e:	4339      	orrs	r1, r7
 8001d20:	468b      	mov	fp, r1
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x8c>
 8001d26:	e1fa      	b.n	800211e <__aeabi_dsub+0x482>
 8001d28:	2720      	movs	r7, #32
 8001d2a:	1af9      	subs	r1, r7, r3
 8001d2c:	468c      	mov	ip, r1
 8001d2e:	4659      	mov	r1, fp
 8001d30:	4667      	mov	r7, ip
 8001d32:	40b9      	lsls	r1, r7
 8001d34:	000f      	movs	r7, r1
 8001d36:	0011      	movs	r1, r2
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	430f      	orrs	r7, r1
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	408a      	lsls	r2, r1
 8001d40:	1e51      	subs	r1, r2, #1
 8001d42:	418a      	sbcs	r2, r1
 8001d44:	4659      	mov	r1, fp
 8001d46:	40d9      	lsrs	r1, r3
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	1a64      	subs	r4, r4, r1
 8001d4c:	1bc7      	subs	r7, r0, r7
 8001d4e:	42b8      	cmp	r0, r7
 8001d50:	4180      	sbcs	r0, r0
 8001d52:	4240      	negs	r0, r0
 8001d54:	1a24      	subs	r4, r4, r0
 8001d56:	0223      	lsls	r3, r4, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dsub+0xc0>
 8001d5a:	e140      	b.n	8001fde <__aeabi_dsub+0x342>
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	0a64      	lsrs	r4, r4, #9
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0xca>
 8001d64:	e154      	b.n	8002010 <__aeabi_dsub+0x374>
 8001d66:	0020      	movs	r0, r4
 8001d68:	f7fe fb8a 	bl	8000480 <__clzsi2>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	3b08      	subs	r3, #8
 8001d70:	2120      	movs	r1, #32
 8001d72:	0038      	movs	r0, r7
 8001d74:	1aca      	subs	r2, r1, r3
 8001d76:	40d0      	lsrs	r0, r2
 8001d78:	409c      	lsls	r4, r3
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	409f      	lsls	r7, r3
 8001d7e:	4322      	orrs	r2, r4
 8001d80:	429d      	cmp	r5, r3
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0xea>
 8001d84:	e1a6      	b.n	80020d4 <__aeabi_dsub+0x438>
 8001d86:	1b58      	subs	r0, r3, r5
 8001d88:	3001      	adds	r0, #1
 8001d8a:	1a09      	subs	r1, r1, r0
 8001d8c:	003c      	movs	r4, r7
 8001d8e:	408f      	lsls	r7, r1
 8001d90:	40c4      	lsrs	r4, r0
 8001d92:	1e7b      	subs	r3, r7, #1
 8001d94:	419f      	sbcs	r7, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	4327      	orrs	r7, r4
 8001d9c:	431f      	orrs	r7, r3
 8001d9e:	40c2      	lsrs	r2, r0
 8001da0:	003b      	movs	r3, r7
 8001da2:	0014      	movs	r4, r2
 8001da4:	2500      	movs	r5, #0
 8001da6:	4313      	orrs	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x110>
 8001daa:	e1f7      	b.n	800219c <__aeabi_dsub+0x500>
 8001dac:	077b      	lsls	r3, r7, #29
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x116>
 8001db0:	e377      	b.n	80024a2 <__aeabi_dsub+0x806>
 8001db2:	230f      	movs	r3, #15
 8001db4:	0038      	movs	r0, r7
 8001db6:	403b      	ands	r3, r7
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d004      	beq.n	8001dc6 <__aeabi_dsub+0x12a>
 8001dbc:	1d38      	adds	r0, r7, #4
 8001dbe:	42b8      	cmp	r0, r7
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	427f      	negs	r7, r7
 8001dc4:	19e4      	adds	r4, r4, r7
 8001dc6:	0223      	lsls	r3, r4, #8
 8001dc8:	d400      	bmi.n	8001dcc <__aeabi_dsub+0x130>
 8001dca:	e368      	b.n	800249e <__aeabi_dsub+0x802>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002000 <__aeabi_dsub+0x364>)
 8001dce:	3501      	adds	r5, #1
 8001dd0:	429d      	cmp	r5, r3
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x13a>
 8001dd4:	e0f4      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <__aeabi_dsub+0x368>)
 8001dd8:	056d      	lsls	r5, r5, #21
 8001dda:	401c      	ands	r4, r3
 8001ddc:	0d6d      	lsrs	r5, r5, #21
 8001dde:	0767      	lsls	r7, r4, #29
 8001de0:	08c0      	lsrs	r0, r0, #3
 8001de2:	0264      	lsls	r4, r4, #9
 8001de4:	4307      	orrs	r7, r0
 8001de6:	0b24      	lsrs	r4, r4, #12
 8001de8:	e0ec      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_dsub+0x154>
 8001dee:	e329      	b.n	8002444 <__aeabi_dsub+0x7a8>
 8001df0:	4649      	mov	r1, r9
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x15c>
 8001df6:	e0d6      	b.n	8001fa6 <__aeabi_dsub+0x30a>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x164>
 8001dfe:	e12e      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x16c>
 8001e06:	e1e6      	b.n	80021d6 <__aeabi_dsub+0x53a>
 8001e08:	42bb      	cmp	r3, r7
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x172>
 8001e0c:	e182      	b.n	8002114 <__aeabi_dsub+0x478>
 8001e0e:	2701      	movs	r7, #1
 8001e10:	000b      	movs	r3, r1
 8001e12:	2938      	cmp	r1, #56	@ 0x38
 8001e14:	dc14      	bgt.n	8001e40 <__aeabi_dsub+0x1a4>
 8001e16:	2b1f      	cmp	r3, #31
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dsub+0x180>
 8001e1a:	e23c      	b.n	8002296 <__aeabi_dsub+0x5fa>
 8001e1c:	2720      	movs	r7, #32
 8001e1e:	1af9      	subs	r1, r7, r3
 8001e20:	468c      	mov	ip, r1
 8001e22:	4659      	mov	r1, fp
 8001e24:	4667      	mov	r7, ip
 8001e26:	40b9      	lsls	r1, r7
 8001e28:	000f      	movs	r7, r1
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	430f      	orrs	r7, r1
 8001e30:	4661      	mov	r1, ip
 8001e32:	408a      	lsls	r2, r1
 8001e34:	1e51      	subs	r1, r2, #1
 8001e36:	418a      	sbcs	r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	40d9      	lsrs	r1, r3
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	1864      	adds	r4, r4, r1
 8001e40:	183f      	adds	r7, r7, r0
 8001e42:	4287      	cmp	r7, r0
 8001e44:	4180      	sbcs	r0, r0
 8001e46:	4240      	negs	r0, r0
 8001e48:	1824      	adds	r4, r4, r0
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x1b4>
 8001e4e:	e0c6      	b.n	8001fde <__aeabi_dsub+0x342>
 8001e50:	4b6b      	ldr	r3, [pc, #428]	@ (8002000 <__aeabi_dsub+0x364>)
 8001e52:	3501      	adds	r5, #1
 8001e54:	429d      	cmp	r5, r3
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x1be>
 8001e58:	e0b2      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4b69      	ldr	r3, [pc, #420]	@ (8002004 <__aeabi_dsub+0x368>)
 8001e5e:	087a      	lsrs	r2, r7, #1
 8001e60:	401c      	ands	r4, r3
 8001e62:	4039      	ands	r1, r7
 8001e64:	430a      	orrs	r2, r1
 8001e66:	07e7      	lsls	r7, r4, #31
 8001e68:	4317      	orrs	r7, r2
 8001e6a:	0864      	lsrs	r4, r4, #1
 8001e6c:	e79e      	b.n	8001dac <__aeabi_dsub+0x110>
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <__aeabi_dsub+0x36c>)
 8001e70:	4311      	orrs	r1, r2
 8001e72:	468a      	mov	sl, r1
 8001e74:	18eb      	adds	r3, r5, r3
 8001e76:	2900      	cmp	r1, #0
 8001e78:	d028      	beq.n	8001ecc <__aeabi_dsub+0x230>
 8001e7a:	4566      	cmp	r6, ip
 8001e7c:	d02c      	beq.n	8001ed8 <__aeabi_dsub+0x23c>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d05b      	beq.n	8001f3a <__aeabi_dsub+0x29e>
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x1ec>
 8001e86:	e12c      	b.n	80020e2 <__aeabi_dsub+0x446>
 8001e88:	465b      	mov	r3, fp
 8001e8a:	4666      	mov	r6, ip
 8001e8c:	075f      	lsls	r7, r3, #29
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	4317      	orrs	r7, r2
 8001e92:	08dd      	lsrs	r5, r3, #3
 8001e94:	003b      	movs	r3, r7
 8001e96:	432b      	orrs	r3, r5
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x200>
 8001e9a:	e0e2      	b.n	8002062 <__aeabi_dsub+0x3c6>
 8001e9c:	2480      	movs	r4, #128	@ 0x80
 8001e9e:	0324      	lsls	r4, r4, #12
 8001ea0:	432c      	orrs	r4, r5
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	4d56      	ldr	r5, [pc, #344]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	e08c      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001eaa:	4659      	mov	r1, fp
 8001eac:	4311      	orrs	r1, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x216>
 8001eb0:	e0d5      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x21e>
 8001eb8:	e1b9      	b.n	800222e <__aeabi_dsub+0x592>
 8001eba:	42bb      	cmp	r3, r7
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x224>
 8001ebe:	e1b1      	b.n	8002224 <__aeabi_dsub+0x588>
 8001ec0:	2701      	movs	r7, #1
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	2938      	cmp	r1, #56	@ 0x38
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dsub+0x22e>
 8001ec8:	e740      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8001eca:	e72a      	b.n	8001d22 <__aeabi_dsub+0x86>
 8001ecc:	4661      	mov	r1, ip
 8001ece:	2701      	movs	r7, #1
 8001ed0:	4079      	eors	r1, r7
 8001ed2:	468c      	mov	ip, r1
 8001ed4:	4566      	cmp	r6, ip
 8001ed6:	d1d2      	bne.n	8001e7e <__aeabi_dsub+0x1e2>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x242>
 8001edc:	e0c5      	b.n	800206a <__aeabi_dsub+0x3ce>
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x248>
 8001ee2:	e155      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	0025      	movs	r5, r4
 8001ee8:	4305      	orrs	r5, r0
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x252>
 8001eec:	e212      	b.n	8002314 <__aeabi_dsub+0x678>
 8001eee:	1e59      	subs	r1, r3, #1
 8001ef0:	468c      	mov	ip, r1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x25c>
 8001ef6:	e249      	b.n	800238c <__aeabi_dsub+0x6f0>
 8001ef8:	4d41      	ldr	r5, [pc, #260]	@ (8002000 <__aeabi_dsub+0x364>)
 8001efa:	42ab      	cmp	r3, r5
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x264>
 8001efe:	e28f      	b.n	8002420 <__aeabi_dsub+0x784>
 8001f00:	2701      	movs	r7, #1
 8001f02:	2938      	cmp	r1, #56	@ 0x38
 8001f04:	dc11      	bgt.n	8001f2a <__aeabi_dsub+0x28e>
 8001f06:	4663      	mov	r3, ip
 8001f08:	2b1f      	cmp	r3, #31
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dsub+0x272>
 8001f0c:	e25b      	b.n	80023c6 <__aeabi_dsub+0x72a>
 8001f0e:	4661      	mov	r1, ip
 8001f10:	2320      	movs	r3, #32
 8001f12:	0027      	movs	r7, r4
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	0005      	movs	r5, r0
 8001f18:	4098      	lsls	r0, r3
 8001f1a:	409f      	lsls	r7, r3
 8001f1c:	40cd      	lsrs	r5, r1
 8001f1e:	1e43      	subs	r3, r0, #1
 8001f20:	4198      	sbcs	r0, r3
 8001f22:	40cc      	lsrs	r4, r1
 8001f24:	432f      	orrs	r7, r5
 8001f26:	4307      	orrs	r7, r0
 8001f28:	44a3      	add	fp, r4
 8001f2a:	18bf      	adds	r7, r7, r2
 8001f2c:	4297      	cmp	r7, r2
 8001f2e:	4192      	sbcs	r2, r2
 8001f30:	4252      	negs	r2, r2
 8001f32:	445a      	add	r2, fp
 8001f34:	0014      	movs	r4, r2
 8001f36:	464d      	mov	r5, r9
 8001f38:	e787      	b.n	8001e4a <__aeabi_dsub+0x1ae>
 8001f3a:	4f34      	ldr	r7, [pc, #208]	@ (800200c <__aeabi_dsub+0x370>)
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	423b      	tst	r3, r7
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x2a8>
 8001f42:	e0b6      	b.n	80020b2 <__aeabi_dsub+0x416>
 8001f44:	4659      	mov	r1, fp
 8001f46:	0023      	movs	r3, r4
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	000f      	movs	r7, r1
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dsub+0x2b8>
 8001f52:	e126      	b.n	80021a2 <__aeabi_dsub+0x506>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x2be>
 8001f58:	e1c0      	b.n	80022dc <__aeabi_dsub+0x640>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x2c4>
 8001f5e:	e0a1      	b.n	80020a4 <__aeabi_dsub+0x408>
 8001f60:	1a83      	subs	r3, r0, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	465b      	mov	r3, fp
 8001f66:	4540      	cmp	r0, r8
 8001f68:	41ad      	sbcs	r5, r5
 8001f6a:	1ae3      	subs	r3, r4, r3
 8001f6c:	426d      	negs	r5, r5
 8001f6e:	1b5b      	subs	r3, r3, r5
 8001f70:	2580      	movs	r5, #128	@ 0x80
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	422b      	tst	r3, r5
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x2de>
 8001f78:	e14b      	b.n	8002212 <__aeabi_dsub+0x576>
 8001f7a:	465b      	mov	r3, fp
 8001f7c:	1a10      	subs	r0, r2, r0
 8001f7e:	4282      	cmp	r2, r0
 8001f80:	4192      	sbcs	r2, r2
 8001f82:	1b1c      	subs	r4, r3, r4
 8001f84:	0007      	movs	r7, r0
 8001f86:	2601      	movs	r6, #1
 8001f88:	4663      	mov	r3, ip
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	1aa4      	subs	r4, r4, r2
 8001f8e:	4327      	orrs	r7, r4
 8001f90:	401e      	ands	r6, r3
 8001f92:	2f00      	cmp	r7, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x2fc>
 8001f96:	e142      	b.n	800221e <__aeabi_dsub+0x582>
 8001f98:	422c      	tst	r4, r5
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x302>
 8001f9c:	e26d      	b.n	800247a <__aeabi_dsub+0x7de>
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <__aeabi_dsub+0x368>)
 8001fa0:	2501      	movs	r5, #1
 8001fa2:	401c      	ands	r4, r3
 8001fa4:	e71b      	b.n	8001dde <__aeabi_dsub+0x142>
 8001fa6:	42bd      	cmp	r5, r7
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x310>
 8001faa:	e13b      	b.n	8002224 <__aeabi_dsub+0x588>
 8001fac:	2701      	movs	r7, #1
 8001fae:	2b38      	cmp	r3, #56	@ 0x38
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dsub+0x318>
 8001fb2:	e745      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 8001fb4:	2780      	movs	r7, #128	@ 0x80
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	043f      	lsls	r7, r7, #16
 8001fba:	4339      	orrs	r1, r7
 8001fbc:	468b      	mov	fp, r1
 8001fbe:	e72a      	b.n	8001e16 <__aeabi_dsub+0x17a>
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2700      	movs	r7, #0
 8001fc4:	052d      	lsls	r5, r5, #20
 8001fc6:	4325      	orrs	r5, r4
 8001fc8:	07f6      	lsls	r6, r6, #31
 8001fca:	4335      	orrs	r5, r6
 8001fcc:	0038      	movs	r0, r7
 8001fce:	0029      	movs	r1, r5
 8001fd0:	b003      	add	sp, #12
 8001fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd4:	46bb      	mov	fp, r7
 8001fd6:	46b2      	mov	sl, r6
 8001fd8:	46a9      	mov	r9, r5
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	077b      	lsls	r3, r7, #29
 8001fe0:	d004      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	403b      	ands	r3, r7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fea:	e6e7      	b.n	8001dbc <__aeabi_dsub+0x120>
 8001fec:	002b      	movs	r3, r5
 8001fee:	08f8      	lsrs	r0, r7, #3
 8001ff0:	4a03      	ldr	r2, [pc, #12]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ff2:	0767      	lsls	r7, r4, #29
 8001ff4:	4307      	orrs	r7, r0
 8001ff6:	08e5      	lsrs	r5, r4, #3
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x362>
 8001ffc:	e74a      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8001ffe:	e0a5      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002000:	000007ff 	.word	0x000007ff
 8002004:	ff7fffff 	.word	0xff7fffff
 8002008:	fffff801 	.word	0xfffff801
 800200c:	000007fe 	.word	0x000007fe
 8002010:	0038      	movs	r0, r7
 8002012:	f7fe fa35 	bl	8000480 <__clzsi2>
 8002016:	0003      	movs	r3, r0
 8002018:	3318      	adds	r3, #24
 800201a:	2b1f      	cmp	r3, #31
 800201c:	dc00      	bgt.n	8002020 <__aeabi_dsub+0x384>
 800201e:	e6a7      	b.n	8001d70 <__aeabi_dsub+0xd4>
 8002020:	003a      	movs	r2, r7
 8002022:	3808      	subs	r0, #8
 8002024:	4082      	lsls	r2, r0
 8002026:	429d      	cmp	r5, r3
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x390>
 800202a:	e08a      	b.n	8002142 <__aeabi_dsub+0x4a6>
 800202c:	1b5b      	subs	r3, r3, r5
 800202e:	1c58      	adds	r0, r3, #1
 8002030:	281f      	cmp	r0, #31
 8002032:	dc00      	bgt.n	8002036 <__aeabi_dsub+0x39a>
 8002034:	e1d8      	b.n	80023e8 <__aeabi_dsub+0x74c>
 8002036:	0017      	movs	r7, r2
 8002038:	3b1f      	subs	r3, #31
 800203a:	40df      	lsrs	r7, r3
 800203c:	2820      	cmp	r0, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dsub+0x3b0>
 8002040:	2340      	movs	r3, #64	@ 0x40
 8002042:	1a1b      	subs	r3, r3, r0
 8002044:	409a      	lsls	r2, r3
 8002046:	1e53      	subs	r3, r2, #1
 8002048:	419a      	sbcs	r2, r3
 800204a:	4317      	orrs	r7, r2
 800204c:	2500      	movs	r5, #0
 800204e:	2f00      	cmp	r7, #0
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x3b8>
 8002052:	e0e5      	b.n	8002220 <__aeabi_dsub+0x584>
 8002054:	077b      	lsls	r3, r7, #29
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x3be>
 8002058:	e6ab      	b.n	8001db2 <__aeabi_dsub+0x116>
 800205a:	002c      	movs	r4, r5
 800205c:	e7c6      	b.n	8001fec <__aeabi_dsub+0x350>
 800205e:	08c0      	lsrs	r0, r0, #3
 8002060:	e7c6      	b.n	8001ff0 <__aeabi_dsub+0x354>
 8002062:	2700      	movs	r7, #0
 8002064:	2400      	movs	r4, #0
 8002066:	4dd1      	ldr	r5, [pc, #836]	@ (80023ac <__aeabi_dsub+0x710>)
 8002068:	e7ac      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800206a:	4fd1      	ldr	r7, [pc, #836]	@ (80023b0 <__aeabi_dsub+0x714>)
 800206c:	1c6b      	adds	r3, r5, #1
 800206e:	423b      	tst	r3, r7
 8002070:	d171      	bne.n	8002156 <__aeabi_dsub+0x4ba>
 8002072:	0023      	movs	r3, r4
 8002074:	4303      	orrs	r3, r0
 8002076:	2d00      	cmp	r5, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x3e0>
 800207a:	e14e      	b.n	800231a <__aeabi_dsub+0x67e>
 800207c:	4657      	mov	r7, sl
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x3e8>
 8002082:	e1b5      	b.n	80023f0 <__aeabi_dsub+0x754>
 8002084:	2f00      	cmp	r7, #0
 8002086:	d00d      	beq.n	80020a4 <__aeabi_dsub+0x408>
 8002088:	1883      	adds	r3, r0, r2
 800208a:	4283      	cmp	r3, r0
 800208c:	4180      	sbcs	r0, r0
 800208e:	445c      	add	r4, fp
 8002090:	4240      	negs	r0, r0
 8002092:	1824      	adds	r4, r4, r0
 8002094:	0222      	lsls	r2, r4, #8
 8002096:	d500      	bpl.n	800209a <__aeabi_dsub+0x3fe>
 8002098:	e1c8      	b.n	800242c <__aeabi_dsub+0x790>
 800209a:	001f      	movs	r7, r3
 800209c:	4698      	mov	r8, r3
 800209e:	4327      	orrs	r7, r4
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x408>
 80020a2:	e0bc      	b.n	800221e <__aeabi_dsub+0x582>
 80020a4:	4643      	mov	r3, r8
 80020a6:	0767      	lsls	r7, r4, #29
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	431f      	orrs	r7, r3
 80020ac:	08e5      	lsrs	r5, r4, #3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e04c      	b.n	800214c <__aeabi_dsub+0x4b0>
 80020b2:	1a83      	subs	r3, r0, r2
 80020b4:	4698      	mov	r8, r3
 80020b6:	465b      	mov	r3, fp
 80020b8:	4540      	cmp	r0, r8
 80020ba:	41bf      	sbcs	r7, r7
 80020bc:	1ae3      	subs	r3, r4, r3
 80020be:	427f      	negs	r7, r7
 80020c0:	1bdb      	subs	r3, r3, r7
 80020c2:	021f      	lsls	r7, r3, #8
 80020c4:	d47c      	bmi.n	80021c0 <__aeabi_dsub+0x524>
 80020c6:	4647      	mov	r7, r8
 80020c8:	431f      	orrs	r7, r3
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x432>
 80020cc:	e0a6      	b.n	800221c <__aeabi_dsub+0x580>
 80020ce:	001c      	movs	r4, r3
 80020d0:	4647      	mov	r7, r8
 80020d2:	e645      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80020d4:	4cb7      	ldr	r4, [pc, #732]	@ (80023b4 <__aeabi_dsub+0x718>)
 80020d6:	1aed      	subs	r5, r5, r3
 80020d8:	4014      	ands	r4, r2
 80020da:	077b      	lsls	r3, r7, #29
 80020dc:	d000      	beq.n	80020e0 <__aeabi_dsub+0x444>
 80020de:	e780      	b.n	8001fe2 <__aeabi_dsub+0x346>
 80020e0:	e784      	b.n	8001fec <__aeabi_dsub+0x350>
 80020e2:	464b      	mov	r3, r9
 80020e4:	0025      	movs	r5, r4
 80020e6:	4305      	orrs	r5, r0
 80020e8:	d066      	beq.n	80021b8 <__aeabi_dsub+0x51c>
 80020ea:	1e5f      	subs	r7, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x456>
 80020f0:	e0fc      	b.n	80022ec <__aeabi_dsub+0x650>
 80020f2:	4dae      	ldr	r5, [pc, #696]	@ (80023ac <__aeabi_dsub+0x710>)
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0x45e>
 80020f8:	e15e      	b.n	80023b8 <__aeabi_dsub+0x71c>
 80020fa:	4666      	mov	r6, ip
 80020fc:	2f38      	cmp	r7, #56	@ 0x38
 80020fe:	dc00      	bgt.n	8002102 <__aeabi_dsub+0x466>
 8002100:	e0b4      	b.n	800226c <__aeabi_dsub+0x5d0>
 8002102:	2001      	movs	r0, #1
 8002104:	1a17      	subs	r7, r2, r0
 8002106:	42ba      	cmp	r2, r7
 8002108:	4192      	sbcs	r2, r2
 800210a:	465b      	mov	r3, fp
 800210c:	4252      	negs	r2, r2
 800210e:	464d      	mov	r5, r9
 8002110:	1a9c      	subs	r4, r3, r2
 8002112:	e620      	b.n	8001d56 <__aeabi_dsub+0xba>
 8002114:	0767      	lsls	r7, r4, #29
 8002116:	08c0      	lsrs	r0, r0, #3
 8002118:	4307      	orrs	r7, r0
 800211a:	08e5      	lsrs	r5, r4, #3
 800211c:	e6ba      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800211e:	001f      	movs	r7, r3
 8002120:	4659      	mov	r1, fp
 8002122:	3f20      	subs	r7, #32
 8002124:	40f9      	lsrs	r1, r7
 8002126:	000f      	movs	r7, r1
 8002128:	2b20      	cmp	r3, #32
 800212a:	d005      	beq.n	8002138 <__aeabi_dsub+0x49c>
 800212c:	2140      	movs	r1, #64	@ 0x40
 800212e:	1acb      	subs	r3, r1, r3
 8002130:	4659      	mov	r1, fp
 8002132:	4099      	lsls	r1, r3
 8002134:	430a      	orrs	r2, r1
 8002136:	4692      	mov	sl, r2
 8002138:	4653      	mov	r3, sl
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4193      	sbcs	r3, r2
 800213e:	431f      	orrs	r7, r3
 8002140:	e604      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8002142:	1aeb      	subs	r3, r5, r3
 8002144:	4d9b      	ldr	r5, [pc, #620]	@ (80023b4 <__aeabi_dsub+0x718>)
 8002146:	4015      	ands	r5, r2
 8002148:	076f      	lsls	r7, r5, #29
 800214a:	08ed      	lsrs	r5, r5, #3
 800214c:	032c      	lsls	r4, r5, #12
 800214e:	055d      	lsls	r5, r3, #21
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	0d6d      	lsrs	r5, r5, #21
 8002154:	e736      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002156:	4d95      	ldr	r5, [pc, #596]	@ (80023ac <__aeabi_dsub+0x710>)
 8002158:	42ab      	cmp	r3, r5
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x4c2>
 800215c:	e0d6      	b.n	800230c <__aeabi_dsub+0x670>
 800215e:	1882      	adds	r2, r0, r2
 8002160:	0021      	movs	r1, r4
 8002162:	4282      	cmp	r2, r0
 8002164:	4180      	sbcs	r0, r0
 8002166:	4459      	add	r1, fp
 8002168:	4240      	negs	r0, r0
 800216a:	1808      	adds	r0, r1, r0
 800216c:	07c7      	lsls	r7, r0, #31
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	4317      	orrs	r7, r2
 8002172:	0844      	lsrs	r4, r0, #1
 8002174:	0752      	lsls	r2, r2, #29
 8002176:	d400      	bmi.n	800217a <__aeabi_dsub+0x4de>
 8002178:	e185      	b.n	8002486 <__aeabi_dsub+0x7ea>
 800217a:	220f      	movs	r2, #15
 800217c:	001d      	movs	r5, r3
 800217e:	403a      	ands	r2, r7
 8002180:	2a04      	cmp	r2, #4
 8002182:	d000      	beq.n	8002186 <__aeabi_dsub+0x4ea>
 8002184:	e61a      	b.n	8001dbc <__aeabi_dsub+0x120>
 8002186:	08ff      	lsrs	r7, r7, #3
 8002188:	0764      	lsls	r4, r4, #29
 800218a:	4327      	orrs	r7, r4
 800218c:	0905      	lsrs	r5, r0, #4
 800218e:	e7dd      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4317      	orrs	r7, r2
 8002198:	08dd      	lsrs	r5, r3, #3
 800219a:	e67b      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800219c:	2700      	movs	r7, #0
 800219e:	2400      	movs	r4, #0
 80021a0:	e710      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dsub+0x50c>
 80021a6:	e0d6      	b.n	8002356 <__aeabi_dsub+0x6ba>
 80021a8:	2900      	cmp	r1, #0
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x512>
 80021ac:	e12f      	b.n	800240e <__aeabi_dsub+0x772>
 80021ae:	2480      	movs	r4, #128	@ 0x80
 80021b0:	2600      	movs	r6, #0
 80021b2:	4d7e      	ldr	r5, [pc, #504]	@ (80023ac <__aeabi_dsub+0x710>)
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	e705      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021b8:	4666      	mov	r6, ip
 80021ba:	465c      	mov	r4, fp
 80021bc:	08d0      	lsrs	r0, r2, #3
 80021be:	e717      	b.n	8001ff0 <__aeabi_dsub+0x354>
 80021c0:	465b      	mov	r3, fp
 80021c2:	1a17      	subs	r7, r2, r0
 80021c4:	42ba      	cmp	r2, r7
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	1b1c      	subs	r4, r3, r4
 80021ca:	2601      	movs	r6, #1
 80021cc:	4663      	mov	r3, ip
 80021ce:	4252      	negs	r2, r2
 80021d0:	1aa4      	subs	r4, r4, r2
 80021d2:	401e      	ands	r6, r3
 80021d4:	e5c4      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80021d6:	1883      	adds	r3, r0, r2
 80021d8:	4283      	cmp	r3, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	445c      	add	r4, fp
 80021de:	4240      	negs	r0, r0
 80021e0:	1825      	adds	r5, r4, r0
 80021e2:	022a      	lsls	r2, r5, #8
 80021e4:	d400      	bmi.n	80021e8 <__aeabi_dsub+0x54c>
 80021e6:	e0da      	b.n	800239e <__aeabi_dsub+0x702>
 80021e8:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <__aeabi_dsub+0x718>)
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4015      	ands	r5, r2
 80021ee:	07ea      	lsls	r2, r5, #31
 80021f0:	431a      	orrs	r2, r3
 80021f2:	0869      	lsrs	r1, r5, #1
 80021f4:	075b      	lsls	r3, r3, #29
 80021f6:	d400      	bmi.n	80021fa <__aeabi_dsub+0x55e>
 80021f8:	e14a      	b.n	8002490 <__aeabi_dsub+0x7f4>
 80021fa:	230f      	movs	r3, #15
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x568>
 8002202:	e0fc      	b.n	80023fe <__aeabi_dsub+0x762>
 8002204:	1d17      	adds	r7, r2, #4
 8002206:	4297      	cmp	r7, r2
 8002208:	41a4      	sbcs	r4, r4
 800220a:	4264      	negs	r4, r4
 800220c:	2502      	movs	r5, #2
 800220e:	1864      	adds	r4, r4, r1
 8002210:	e6ec      	b.n	8001fec <__aeabi_dsub+0x350>
 8002212:	4647      	mov	r7, r8
 8002214:	001c      	movs	r4, r3
 8002216:	431f      	orrs	r7, r3
 8002218:	d000      	beq.n	800221c <__aeabi_dsub+0x580>
 800221a:	e743      	b.n	80020a4 <__aeabi_dsub+0x408>
 800221c:	2600      	movs	r6, #0
 800221e:	2500      	movs	r5, #0
 8002220:	2400      	movs	r4, #0
 8002222:	e6cf      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	0767      	lsls	r7, r4, #29
 8002228:	4307      	orrs	r7, r0
 800222a:	08e5      	lsrs	r5, r4, #3
 800222c:	e632      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800222e:	1a87      	subs	r7, r0, r2
 8002230:	465b      	mov	r3, fp
 8002232:	42b8      	cmp	r0, r7
 8002234:	4180      	sbcs	r0, r0
 8002236:	1ae4      	subs	r4, r4, r3
 8002238:	4240      	negs	r0, r0
 800223a:	1a24      	subs	r4, r4, r0
 800223c:	0223      	lsls	r3, r4, #8
 800223e:	d428      	bmi.n	8002292 <__aeabi_dsub+0x5f6>
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	08ff      	lsrs	r7, r7, #3
 8002244:	431f      	orrs	r7, r3
 8002246:	08e5      	lsrs	r5, r4, #3
 8002248:	2301      	movs	r3, #1
 800224a:	e77f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x5b6>
 8002250:	e673      	b.n	8001f3a <__aeabi_dsub+0x29e>
 8002252:	464b      	mov	r3, r9
 8002254:	1b5f      	subs	r7, r3, r5
 8002256:	003b      	movs	r3, r7
 8002258:	2d00      	cmp	r5, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x5c2>
 800225c:	e742      	b.n	80020e4 <__aeabi_dsub+0x448>
 800225e:	2f38      	cmp	r7, #56	@ 0x38
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x5c8>
 8002262:	e0ec      	b.n	800243e <__aeabi_dsub+0x7a2>
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	000e      	movs	r6, r1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431c      	orrs	r4, r3
 800226c:	2f1f      	cmp	r7, #31
 800226e:	dc25      	bgt.n	80022bc <__aeabi_dsub+0x620>
 8002270:	2520      	movs	r5, #32
 8002272:	0023      	movs	r3, r4
 8002274:	1bed      	subs	r5, r5, r7
 8002276:	0001      	movs	r1, r0
 8002278:	40a8      	lsls	r0, r5
 800227a:	40ab      	lsls	r3, r5
 800227c:	40f9      	lsrs	r1, r7
 800227e:	1e45      	subs	r5, r0, #1
 8002280:	41a8      	sbcs	r0, r5
 8002282:	430b      	orrs	r3, r1
 8002284:	40fc      	lsrs	r4, r7
 8002286:	4318      	orrs	r0, r3
 8002288:	465b      	mov	r3, fp
 800228a:	1b1b      	subs	r3, r3, r4
 800228c:	469b      	mov	fp, r3
 800228e:	e739      	b.n	8002104 <__aeabi_dsub+0x468>
 8002290:	4666      	mov	r6, ip
 8002292:	2501      	movs	r5, #1
 8002294:	e562      	b.n	8001d5c <__aeabi_dsub+0xc0>
 8002296:	001f      	movs	r7, r3
 8002298:	4659      	mov	r1, fp
 800229a:	3f20      	subs	r7, #32
 800229c:	40f9      	lsrs	r1, r7
 800229e:	468c      	mov	ip, r1
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x614>
 80022a4:	2740      	movs	r7, #64	@ 0x40
 80022a6:	4659      	mov	r1, fp
 80022a8:	1afb      	subs	r3, r7, r3
 80022aa:	4099      	lsls	r1, r3
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4692      	mov	sl, r2
 80022b0:	4657      	mov	r7, sl
 80022b2:	1e7b      	subs	r3, r7, #1
 80022b4:	419f      	sbcs	r7, r3
 80022b6:	4663      	mov	r3, ip
 80022b8:	431f      	orrs	r7, r3
 80022ba:	e5c1      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 80022bc:	003b      	movs	r3, r7
 80022be:	0025      	movs	r5, r4
 80022c0:	3b20      	subs	r3, #32
 80022c2:	40dd      	lsrs	r5, r3
 80022c4:	2f20      	cmp	r7, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_dsub+0x636>
 80022c8:	2340      	movs	r3, #64	@ 0x40
 80022ca:	1bdb      	subs	r3, r3, r7
 80022cc:	409c      	lsls	r4, r3
 80022ce:	4320      	orrs	r0, r4
 80022d0:	4680      	mov	r8, r0
 80022d2:	4640      	mov	r0, r8
 80022d4:	1e43      	subs	r3, r0, #1
 80022d6:	4198      	sbcs	r0, r3
 80022d8:	4328      	orrs	r0, r5
 80022da:	e713      	b.n	8002104 <__aeabi_dsub+0x468>
 80022dc:	2900      	cmp	r1, #0
 80022de:	d09d      	beq.n	800221c <__aeabi_dsub+0x580>
 80022e0:	2601      	movs	r6, #1
 80022e2:	4663      	mov	r3, ip
 80022e4:	465c      	mov	r4, fp
 80022e6:	4690      	mov	r8, r2
 80022e8:	401e      	ands	r6, r3
 80022ea:	e6db      	b.n	80020a4 <__aeabi_dsub+0x408>
 80022ec:	1a17      	subs	r7, r2, r0
 80022ee:	465b      	mov	r3, fp
 80022f0:	42ba      	cmp	r2, r7
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	1b1c      	subs	r4, r3, r4
 80022f6:	4252      	negs	r2, r2
 80022f8:	1aa4      	subs	r4, r4, r2
 80022fa:	0223      	lsls	r3, r4, #8
 80022fc:	d4c8      	bmi.n	8002290 <__aeabi_dsub+0x5f4>
 80022fe:	0763      	lsls	r3, r4, #29
 8002300:	08ff      	lsrs	r7, r7, #3
 8002302:	431f      	orrs	r7, r3
 8002304:	4666      	mov	r6, ip
 8002306:	2301      	movs	r3, #1
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	e71f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800230c:	001d      	movs	r5, r3
 800230e:	2400      	movs	r4, #0
 8002310:	2700      	movs	r7, #0
 8002312:	e657      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002314:	465c      	mov	r4, fp
 8002316:	08d0      	lsrs	r0, r2, #3
 8002318:	e66a      	b.n	8001ff0 <__aeabi_dsub+0x354>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x684>
 800231e:	e737      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8002320:	4653      	mov	r3, sl
 8002322:	08c0      	lsrs	r0, r0, #3
 8002324:	0767      	lsls	r7, r4, #29
 8002326:	4307      	orrs	r7, r0
 8002328:	08e5      	lsrs	r5, r4, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x694>
 800232e:	e5b1      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	421d      	tst	r5, r3
 8002336:	d008      	beq.n	800234a <__aeabi_dsub+0x6ae>
 8002338:	4659      	mov	r1, fp
 800233a:	08c8      	lsrs	r0, r1, #3
 800233c:	4218      	tst	r0, r3
 800233e:	d104      	bne.n	800234a <__aeabi_dsub+0x6ae>
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	0749      	lsls	r1, r1, #29
 8002344:	430a      	orrs	r2, r1
 8002346:	0017      	movs	r7, r2
 8002348:	0005      	movs	r5, r0
 800234a:	0f7b      	lsrs	r3, r7, #29
 800234c:	00ff      	lsls	r7, r7, #3
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	075b      	lsls	r3, r3, #29
 8002352:	431f      	orrs	r7, r3
 8002354:	e59e      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002356:	08c0      	lsrs	r0, r0, #3
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	4318      	orrs	r0, r3
 800235c:	08e5      	lsrs	r5, r4, #3
 800235e:	2900      	cmp	r1, #0
 8002360:	d053      	beq.n	800240a <__aeabi_dsub+0x76e>
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	031b      	lsls	r3, r3, #12
 8002366:	421d      	tst	r5, r3
 8002368:	d00a      	beq.n	8002380 <__aeabi_dsub+0x6e4>
 800236a:	4659      	mov	r1, fp
 800236c:	08cc      	lsrs	r4, r1, #3
 800236e:	421c      	tst	r4, r3
 8002370:	d106      	bne.n	8002380 <__aeabi_dsub+0x6e4>
 8002372:	2601      	movs	r6, #1
 8002374:	4663      	mov	r3, ip
 8002376:	0025      	movs	r5, r4
 8002378:	08d0      	lsrs	r0, r2, #3
 800237a:	0749      	lsls	r1, r1, #29
 800237c:	4308      	orrs	r0, r1
 800237e:	401e      	ands	r6, r3
 8002380:	0f47      	lsrs	r7, r0, #29
 8002382:	00c0      	lsls	r0, r0, #3
 8002384:	08c0      	lsrs	r0, r0, #3
 8002386:	077f      	lsls	r7, r7, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	e583      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4293      	cmp	r3, r2
 8002390:	4192      	sbcs	r2, r2
 8002392:	445c      	add	r4, fp
 8002394:	4252      	negs	r2, r2
 8002396:	18a5      	adds	r5, r4, r2
 8002398:	022a      	lsls	r2, r5, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x702>
 800239c:	e724      	b.n	80021e8 <__aeabi_dsub+0x54c>
 800239e:	076f      	lsls	r7, r5, #29
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	431f      	orrs	r7, r3
 80023a4:	08ed      	lsrs	r5, r5, #3
 80023a6:	2301      	movs	r3, #1
 80023a8:	e6d0      	b.n	800214c <__aeabi_dsub+0x4b0>
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	000007ff 	.word	0x000007ff
 80023b0:	000007fe 	.word	0x000007fe
 80023b4:	ff7fffff 	.word	0xff7fffff
 80023b8:	465b      	mov	r3, fp
 80023ba:	08d2      	lsrs	r2, r2, #3
 80023bc:	075f      	lsls	r7, r3, #29
 80023be:	4666      	mov	r6, ip
 80023c0:	4317      	orrs	r7, r2
 80023c2:	08dd      	lsrs	r5, r3, #3
 80023c4:	e566      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 80023c6:	0025      	movs	r5, r4
 80023c8:	3b20      	subs	r3, #32
 80023ca:	40dd      	lsrs	r5, r3
 80023cc:	4663      	mov	r3, ip
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d005      	beq.n	80023de <__aeabi_dsub+0x742>
 80023d2:	2340      	movs	r3, #64	@ 0x40
 80023d4:	4661      	mov	r1, ip
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	409c      	lsls	r4, r3
 80023da:	4320      	orrs	r0, r4
 80023dc:	4680      	mov	r8, r0
 80023de:	4647      	mov	r7, r8
 80023e0:	1e7b      	subs	r3, r7, #1
 80023e2:	419f      	sbcs	r7, r3
 80023e4:	432f      	orrs	r7, r5
 80023e6:	e5a0      	b.n	8001f2a <__aeabi_dsub+0x28e>
 80023e8:	2120      	movs	r1, #32
 80023ea:	2700      	movs	r7, #0
 80023ec:	1a09      	subs	r1, r1, r0
 80023ee:	e4d2      	b.n	8001d96 <__aeabi_dsub+0xfa>
 80023f0:	2f00      	cmp	r7, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x75a>
 80023f4:	e713      	b.n	800221e <__aeabi_dsub+0x582>
 80023f6:	465c      	mov	r4, fp
 80023f8:	0017      	movs	r7, r2
 80023fa:	2500      	movs	r5, #0
 80023fc:	e5f6      	b.n	8001fec <__aeabi_dsub+0x350>
 80023fe:	08d7      	lsrs	r7, r2, #3
 8002400:	0749      	lsls	r1, r1, #29
 8002402:	2302      	movs	r3, #2
 8002404:	430f      	orrs	r7, r1
 8002406:	092d      	lsrs	r5, r5, #4
 8002408:	e6a0      	b.n	800214c <__aeabi_dsub+0x4b0>
 800240a:	0007      	movs	r7, r0
 800240c:	e542      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800240e:	465b      	mov	r3, fp
 8002410:	2601      	movs	r6, #1
 8002412:	075f      	lsls	r7, r3, #29
 8002414:	08dd      	lsrs	r5, r3, #3
 8002416:	4663      	mov	r3, ip
 8002418:	08d2      	lsrs	r2, r2, #3
 800241a:	4317      	orrs	r7, r2
 800241c:	401e      	ands	r6, r3
 800241e:	e539      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002420:	465b      	mov	r3, fp
 8002422:	08d2      	lsrs	r2, r2, #3
 8002424:	075f      	lsls	r7, r3, #29
 8002426:	4317      	orrs	r7, r2
 8002428:	08dd      	lsrs	r5, r3, #3
 800242a:	e533      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800242c:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <__aeabi_dsub+0x80c>)
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	4022      	ands	r2, r4
 8002432:	0757      	lsls	r7, r2, #29
 8002434:	0252      	lsls	r2, r2, #9
 8002436:	2501      	movs	r5, #1
 8002438:	431f      	orrs	r7, r3
 800243a:	0b14      	lsrs	r4, r2, #12
 800243c:	e5c2      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800243e:	000e      	movs	r6, r1
 8002440:	2001      	movs	r0, #1
 8002442:	e65f      	b.n	8002104 <__aeabi_dsub+0x468>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <__aeabi_dsub+0x7c8>
 8002448:	464b      	mov	r3, r9
 800244a:	1b5b      	subs	r3, r3, r5
 800244c:	469c      	mov	ip, r3
 800244e:	2d00      	cmp	r5, #0
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x7b8>
 8002452:	e548      	b.n	8001ee6 <__aeabi_dsub+0x24a>
 8002454:	2701      	movs	r7, #1
 8002456:	2b38      	cmp	r3, #56	@ 0x38
 8002458:	dd00      	ble.n	800245c <__aeabi_dsub+0x7c0>
 800245a:	e566      	b.n	8001f2a <__aeabi_dsub+0x28e>
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	431c      	orrs	r4, r3
 8002462:	e550      	b.n	8001f06 <__aeabi_dsub+0x26a>
 8002464:	1c6b      	adds	r3, r5, #1
 8002466:	4d11      	ldr	r5, [pc, #68]	@ (80024ac <__aeabi_dsub+0x810>)
 8002468:	422b      	tst	r3, r5
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x7d2>
 800246c:	e673      	b.n	8002156 <__aeabi_dsub+0x4ba>
 800246e:	4659      	mov	r1, fp
 8002470:	0023      	movs	r3, r4
 8002472:	4311      	orrs	r1, r2
 8002474:	468a      	mov	sl, r1
 8002476:	4303      	orrs	r3, r0
 8002478:	e600      	b.n	800207c <__aeabi_dsub+0x3e0>
 800247a:	0767      	lsls	r7, r4, #29
 800247c:	08c0      	lsrs	r0, r0, #3
 800247e:	2300      	movs	r3, #0
 8002480:	4307      	orrs	r7, r0
 8002482:	08e5      	lsrs	r5, r4, #3
 8002484:	e662      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002486:	0764      	lsls	r4, r4, #29
 8002488:	08ff      	lsrs	r7, r7, #3
 800248a:	4327      	orrs	r7, r4
 800248c:	0905      	lsrs	r5, r0, #4
 800248e:	e65d      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002490:	08d2      	lsrs	r2, r2, #3
 8002492:	0749      	lsls	r1, r1, #29
 8002494:	4311      	orrs	r1, r2
 8002496:	000f      	movs	r7, r1
 8002498:	2302      	movs	r3, #2
 800249a:	092d      	lsrs	r5, r5, #4
 800249c:	e656      	b.n	800214c <__aeabi_dsub+0x4b0>
 800249e:	0007      	movs	r7, r0
 80024a0:	e5a4      	b.n	8001fec <__aeabi_dsub+0x350>
 80024a2:	0038      	movs	r0, r7
 80024a4:	e48f      	b.n	8001dc6 <__aeabi_dsub+0x12a>
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	ff7fffff 	.word	0xff7fffff
 80024ac:	000007fe 	.word	0x000007fe

080024b0 <__aeabi_dcmpun>:
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	46c6      	mov	lr, r8
 80024b4:	031e      	lsls	r6, r3, #12
 80024b6:	0b36      	lsrs	r6, r6, #12
 80024b8:	46b0      	mov	r8, r6
 80024ba:	4e0d      	ldr	r6, [pc, #52]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024bc:	030c      	lsls	r4, r1, #12
 80024be:	004d      	lsls	r5, r1, #1
 80024c0:	005f      	lsls	r7, r3, #1
 80024c2:	b500      	push	{lr}
 80024c4:	0b24      	lsrs	r4, r4, #12
 80024c6:	0d6d      	lsrs	r5, r5, #21
 80024c8:	0d7f      	lsrs	r7, r7, #21
 80024ca:	42b5      	cmp	r5, r6
 80024cc:	d00b      	beq.n	80024e6 <__aeabi_dcmpun+0x36>
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	428f      	cmp	r7, r1
 80024d4:	d104      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024d6:	4646      	mov	r6, r8
 80024d8:	4316      	orrs	r6, r2
 80024da:	0030      	movs	r0, r6
 80024dc:	1e43      	subs	r3, r0, #1
 80024de:	4198      	sbcs	r0, r3
 80024e0:	bc80      	pop	{r7}
 80024e2:	46b8      	mov	r8, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e6:	4304      	orrs	r4, r0
 80024e8:	2001      	movs	r0, #1
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d1f8      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024ee:	e7ee      	b.n	80024ce <__aeabi_dcmpun+0x1e>
 80024f0:	000007ff 	.word	0x000007ff

080024f4 <__aeabi_d2iz>:
 80024f4:	000b      	movs	r3, r1
 80024f6:	0002      	movs	r2, r0
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4d16      	ldr	r5, [pc, #88]	@ (8002554 <__aeabi_d2iz+0x60>)
 80024fc:	030c      	lsls	r4, r1, #12
 80024fe:	b082      	sub	sp, #8
 8002500:	0049      	lsls	r1, r1, #1
 8002502:	2000      	movs	r0, #0
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	0b24      	lsrs	r4, r4, #12
 800250a:	0d49      	lsrs	r1, r1, #21
 800250c:	0fde      	lsrs	r6, r3, #31
 800250e:	42a9      	cmp	r1, r5
 8002510:	dd04      	ble.n	800251c <__aeabi_d2iz+0x28>
 8002512:	4811      	ldr	r0, [pc, #68]	@ (8002558 <__aeabi_d2iz+0x64>)
 8002514:	4281      	cmp	r1, r0
 8002516:	dd03      	ble.n	8002520 <__aeabi_d2iz+0x2c>
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <__aeabi_d2iz+0x68>)
 800251a:	18f0      	adds	r0, r6, r3
 800251c:	b002      	add	sp, #8
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	2080      	movs	r0, #128	@ 0x80
 8002522:	0340      	lsls	r0, r0, #13
 8002524:	4320      	orrs	r0, r4
 8002526:	4c0e      	ldr	r4, [pc, #56]	@ (8002560 <__aeabi_d2iz+0x6c>)
 8002528:	1a64      	subs	r4, r4, r1
 800252a:	2c1f      	cmp	r4, #31
 800252c:	dd08      	ble.n	8002540 <__aeabi_d2iz+0x4c>
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <__aeabi_d2iz+0x70>)
 8002530:	1a5b      	subs	r3, r3, r1
 8002532:	40d8      	lsrs	r0, r3
 8002534:	0003      	movs	r3, r0
 8002536:	4258      	negs	r0, r3
 8002538:	2e00      	cmp	r6, #0
 800253a:	d1ef      	bne.n	800251c <__aeabi_d2iz+0x28>
 800253c:	0018      	movs	r0, r3
 800253e:	e7ed      	b.n	800251c <__aeabi_d2iz+0x28>
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <__aeabi_d2iz+0x74>)
 8002542:	9a00      	ldr	r2, [sp, #0]
 8002544:	469c      	mov	ip, r3
 8002546:	0003      	movs	r3, r0
 8002548:	4461      	add	r1, ip
 800254a:	408b      	lsls	r3, r1
 800254c:	40e2      	lsrs	r2, r4
 800254e:	4313      	orrs	r3, r2
 8002550:	e7f1      	b.n	8002536 <__aeabi_d2iz+0x42>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000003fe 	.word	0x000003fe
 8002558:	0000041d 	.word	0x0000041d
 800255c:	7fffffff 	.word	0x7fffffff
 8002560:	00000433 	.word	0x00000433
 8002564:	00000413 	.word	0x00000413
 8002568:	fffffbed 	.word	0xfffffbed

0800256c <__aeabi_ui2d>:
 800256c:	b510      	push	{r4, lr}
 800256e:	1e04      	subs	r4, r0, #0
 8002570:	d010      	beq.n	8002594 <__aeabi_ui2d+0x28>
 8002572:	f7fd ff85 	bl	8000480 <__clzsi2>
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <__aeabi_ui2d+0x44>)
 8002578:	1a1b      	subs	r3, r3, r0
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	280a      	cmp	r0, #10
 8002580:	dc0f      	bgt.n	80025a2 <__aeabi_ui2d+0x36>
 8002582:	220b      	movs	r2, #11
 8002584:	0021      	movs	r1, r4
 8002586:	1a12      	subs	r2, r2, r0
 8002588:	40d1      	lsrs	r1, r2
 800258a:	3015      	adds	r0, #21
 800258c:	030a      	lsls	r2, r1, #12
 800258e:	4084      	lsls	r4, r0
 8002590:	0b12      	lsrs	r2, r2, #12
 8002592:	e001      	b.n	8002598 <__aeabi_ui2d+0x2c>
 8002594:	2300      	movs	r3, #0
 8002596:	2200      	movs	r2, #0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	4313      	orrs	r3, r2
 800259c:	0020      	movs	r0, r4
 800259e:	0019      	movs	r1, r3
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	0022      	movs	r2, r4
 80025a4:	380b      	subs	r0, #11
 80025a6:	4082      	lsls	r2, r0
 80025a8:	0312      	lsls	r2, r2, #12
 80025aa:	2400      	movs	r4, #0
 80025ac:	0b12      	lsrs	r2, r2, #12
 80025ae:	e7f3      	b.n	8002598 <__aeabi_ui2d+0x2c>
 80025b0:	0000041e 	.word	0x0000041e

080025b4 <__clzdi2>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d103      	bne.n	80025c2 <__clzdi2+0xe>
 80025ba:	f7fd ff61 	bl	8000480 <__clzsi2>
 80025be:	3020      	adds	r0, #32
 80025c0:	e002      	b.n	80025c8 <__clzdi2+0x14>
 80025c2:	0008      	movs	r0, r1
 80025c4:	f7fd ff5c 	bl	8000480 <__clzsi2>
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)

080025cc <getNumberPage>:
/**
  * @brief  Get Number Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint8_t getNumberPage(uint32_t Address_){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint8_t number_ = (uint8_t)((Address_ & 0x3F800)>>11);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0adb      	lsrs	r3, r3, #11
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	200f      	movs	r0, #15
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	217f      	movs	r1, #127	@ 0x7f
 80025e0:	400a      	ands	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
	return number_;
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <getAddressPage>:
/**
  * @brief  Get Address Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint64_t getAddressPage(uint32_t Address_){
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	return ( (uint64_t) (Address_ & 0xFFFFF800) );
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	000a      	movs	r2, r1
 80025fc:	2100      	movs	r1, #0
 80025fe:	000b      	movs	r3, r1
 8002600:	0ad1      	lsrs	r1, r2, #11
 8002602:	02cc      	lsls	r4, r1, #11
 8002604:	2100      	movs	r1, #0
 8002606:	400b      	ands	r3, r1
 8002608:	001d      	movs	r5, r3
 800260a:	0022      	movs	r2, r4
 800260c:	002b      	movs	r3, r5
}
 800260e:	0010      	movs	r0, r2
 8002610:	0019      	movs	r1, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bdb0      	pop	{r4, r5, r7, pc}

08002618 <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	f011 fced 	bl	8014000 <HAL_FLASH_Unlock>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d1fb      	bne.n	8002622 <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 800262a:	2410      	movs	r4, #16
 800262c:	193b      	adds	r3, r7, r4
 800262e:	0018      	movs	r0, r3
 8002630:	2310      	movs	r3, #16
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f019 fd85 	bl	801c144 <memset>
	pEraseInit.NbPages = 1;
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2201      	movs	r2, #1
 8002640:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8002652:	230c      	movs	r3, #12
 8002654:	18fa      	adds	r2, r7, r3
 8002656:	187b      	adds	r3, r7, r1
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f011 fd7e 	bl	801415c <HAL_FLASHEx_Erase>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	f011 fcf1 	bl	8014048 <HAL_FLASH_Lock>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d1fb      	bne.n	8002662 <erasePage+0x4a>
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b009      	add	sp, #36	@ 0x24
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Address_, uint64_t * arrayData_,uint8_t size_){
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	f011 fcbc 	bl	8014000 <HAL_FLASH_Unlock>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d1fb      	bne.n	8002684 <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 800268c:	2317      	movs	r3, #23
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e013      	b.n	80026be <writeFLASH+0x4a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Address_, arrayData_[i]);
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	2417      	movs	r4, #23
 800269a:	193b      	adds	r3, r7, r4
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2001      	movs	r0, #1
 80026aa:	f011 fc5b 	bl	8013f64 <HAL_FLASH_Program>
		Address_++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3308      	adds	r3, #8
 80026b2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i =0; i<size_; i++){
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	3201      	adds	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	2317      	movs	r3, #23
 80026c0:	18fa      	adds	r2, r7, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3e4      	bcc.n	8002696 <writeFLASH+0x22>
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	f011 fcbb 	bl	8014048 <HAL_FLASH_Lock>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d1fb      	bne.n	80026ce <writeFLASH+0x5a>
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b007      	add	sp, #28
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	46c6      	mov	lr, r8
 80026e4:	b500      	push	{lr}
 80026e6:	4cec      	ldr	r4, [pc, #944]	@ (8002a98 <initEEPROMEmulated+0x3b8>)
 80026e8:	44a5      	add	sp, r4
 80026ea:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 80026ec:	4beb      	ldr	r3, [pc, #940]	@ (8002a9c <initEEPROMEmulated+0x3bc>)
 80026ee:	4aec      	ldr	r2, [pc, #944]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80026f0:	2430      	movs	r4, #48	@ 0x30
 80026f2:	1912      	adds	r2, r2, r4
 80026f4:	2108      	movs	r1, #8
 80026f6:	468c      	mov	ip, r1
 80026f8:	44bc      	add	ip, r7
 80026fa:	4462      	add	r2, ip
 80026fc:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 80026fe:	4be9      	ldr	r3, [pc, #932]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 8002700:	191b      	adds	r3, r3, r4
 8002702:	2208      	movs	r2, #8
 8002704:	18ba      	adds	r2, r7, r2
 8002706:	189a      	adds	r2, r3, r2
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 800270c:	49e6      	ldr	r1, [pc, #920]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 800270e:	190b      	adds	r3, r1, r4
 8002710:	2208      	movs	r2, #8
 8002712:	18ba      	adds	r2, r7, r2
 8002714:	189a      	adds	r2, r3, r2
 8002716:	2301      	movs	r3, #1
 8002718:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 800271a:	4be4      	ldr	r3, [pc, #912]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 800271c:	191b      	adds	r3, r3, r4
 800271e:	2208      	movs	r2, #8
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	189a      	adds	r2, r3, r2
 8002724:	237e      	movs	r3, #126	@ 0x7e
 8002726:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ; //
 8002728:	4be1      	ldr	r3, [pc, #900]	@ (8002ab0 <initEEPROMEmulated+0x3d0>)
 800272a:	4ae2      	ldr	r2, [pc, #904]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 800272c:	1910      	adds	r0, r2, r4
 800272e:	2508      	movs	r5, #8
 8002730:	46ac      	mov	ip, r5
 8002732:	44bc      	add	ip, r7
 8002734:	4460      	add	r0, ip
 8002736:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){	// Verify Format Flash is correct
 8002738:	1913      	adds	r3, r2, r4
 800273a:	2208      	movs	r2, #8
 800273c:	4694      	mov	ip, r2
 800273e:	44bc      	add	ip, r7
 8002740:	4463      	add	r3, ip
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4bd5      	ldr	r3, [pc, #852]	@ (8002a9c <initEEPROMEmulated+0x3bc>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d025      	beq.n	8002798 <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 800274c:	190b      	adds	r3, r1, r4
 800274e:	2208      	movs	r2, #8
 8002750:	18ba      	adds	r2, r7, r2
 8002752:	189a      	adds	r2, r3, r2
 8002754:	2300      	movs	r3, #0
 8002756:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002758:	4bd7      	ldr	r3, [pc, #860]	@ (8002ab8 <initEEPROMEmulated+0x3d8>)
 800275a:	2295      	movs	r2, #149	@ 0x95
 800275c:	00d2      	lsls	r2, r2, #3
 800275e:	189b      	adds	r3, r3, r2
 8002760:	2230      	movs	r2, #48	@ 0x30
 8002762:	4694      	mov	ip, r2
 8002764:	2208      	movs	r2, #8
 8002766:	4690      	mov	r8, r2
 8002768:	44b8      	add	r8, r7
 800276a:	44c4      	add	ip, r8
 800276c:	4463      	add	r3, ip
 800276e:	0018      	movs	r0, r3
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	001a      	movs	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	f019 fce4 	bl	801c144 <memset>
	pointArray_ = arrayDataP_;
 800277c:	2390      	movs	r3, #144	@ 0x90
 800277e:	191b      	adds	r3, r3, r4
 8002780:	2208      	movs	r2, #8
 8002782:	4694      	mov	ip, r2
 8002784:	44bc      	add	ip, r7
 8002786:	4463      	add	r3, ip
 8002788:	4acc      	ldr	r2, [pc, #816]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800278a:	1912      	adds	r2, r2, r4
 800278c:	2108      	movs	r1, #8
 800278e:	468c      	mov	ip, r1
 8002790:	44bc      	add	ip, r7
 8002792:	4462      	add	r2, ip
 8002794:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 8002796:	e045      	b.n	8002824 <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 8002798:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 800279a:	4bc9      	ldr	r3, [pc, #804]	@ (8002ac0 <initEEPROMEmulated+0x3e0>)
 800279c:	4ac5      	ldr	r2, [pc, #788]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 800279e:	2430      	movs	r4, #48	@ 0x30
 80027a0:	1911      	adds	r1, r2, r4
 80027a2:	2008      	movs	r0, #8
 80027a4:	4684      	mov	ip, r0
 80027a6:	44bc      	add	ip, r7
 80027a8:	4461      	add	r1, ip
 80027aa:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){ // Verify Format Flash is correct
 80027ac:	1913      	adds	r3, r2, r4
 80027ae:	2208      	movs	r2, #8
 80027b0:	4694      	mov	ip, r2
 80027b2:	44bc      	add	ip, r7
 80027b4:	4463      	add	r3, ip
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4bc2      	ldr	r3, [pc, #776]	@ (8002ac4 <initEEPROMEmulated+0x3e4>)
 80027bc:	429a      	cmp	r2, r3
 80027be:	d100      	bne.n	80027c2 <initEEPROMEmulated+0xe2>
 80027c0:	e15d      	b.n	8002a7e <initEEPROMEmulated+0x39e>
		goto saveDataEEPROM_RAM;
	}
	varInit = (uint8_t *) Page_127;
 80027c2:	4bc0      	ldr	r3, [pc, #768]	@ (8002ac4 <initEEPROMEmulated+0x3e4>)
 80027c4:	4ab6      	ldr	r2, [pc, #728]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80027c6:	1912      	adds	r2, r2, r4
 80027c8:	2108      	movs	r1, #8
 80027ca:	468c      	mov	ip, r1
 80027cc:	44bc      	add	ip, r7
 80027ce:	4462      	add	r2, ip
 80027d0:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80027d2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ac8 <initEEPROMEmulated+0x3e8>)
 80027d4:	2295      	movs	r2, #149	@ 0x95
 80027d6:	00d2      	lsls	r2, r2, #3
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	2230      	movs	r2, #48	@ 0x30
 80027dc:	4694      	mov	ip, r2
 80027de:	2208      	movs	r2, #8
 80027e0:	4690      	mov	r8, r2
 80027e2:	44b8      	add	r8, r7
 80027e4:	44c4      	add	ip, r8
 80027e6:	4463      	add	r3, ip
 80027e8:	0018      	movs	r0, r3
 80027ea:	2390      	movs	r3, #144	@ 0x90
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f019 fca8 	bl	801c144 <memset>
	size_ = sizeEEPROM_V;
 80027f4:	4bab      	ldr	r3, [pc, #684]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 80027f6:	191b      	adds	r3, r3, r4
 80027f8:	2208      	movs	r2, #8
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	189a      	adds	r2, r3, r2
 80027fe:	2312      	movs	r3, #18
 8002800:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 8002802:	2308      	movs	r3, #8
 8002804:	18e3      	adds	r3, r4, r3
 8002806:	19db      	adds	r3, r3, r7
 8002808:	4aac      	ldr	r2, [pc, #688]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800280a:	1912      	adds	r2, r2, r4
 800280c:	2108      	movs	r1, #8
 800280e:	468c      	mov	ip, r1
 8002810:	44bc      	add	ip, r7
 8002812:	4462      	add	r2, ip
 8002814:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 8002816:	4ba5      	ldr	r3, [pc, #660]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 8002818:	191b      	adds	r3, r3, r4
 800281a:	2208      	movs	r2, #8
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	189a      	adds	r2, r3, r2
 8002820:	237f      	movs	r3, #127	@ 0x7f
 8002822:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 8002824:	4ba9      	ldr	r3, [pc, #676]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002826:	2230      	movs	r2, #48	@ 0x30
 8002828:	189b      	adds	r3, r3, r2
 800282a:	2208      	movs	r2, #8
 800282c:	18ba      	adds	r2, r7, r2
 800282e:	189a      	adds	r2, r3, r2
 8002830:	2300      	movs	r3, #0
 8002832:	7013      	strb	r3, [r2, #0]
 8002834:	e0d9      	b.n	80029ea <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 8002836:	4e9a      	ldr	r6, [pc, #616]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 8002838:	2230      	movs	r2, #48	@ 0x30
 800283a:	18b3      	adds	r3, r6, r2
 800283c:	2108      	movs	r1, #8
 800283e:	468c      	mov	ip, r1
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	7819      	ldrb	r1, [r3, #0]
 8002848:	48a0      	ldr	r0, [pc, #640]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 800284a:	0014      	movs	r4, r2
 800284c:	1883      	adds	r3, r0, r2
 800284e:	2208      	movs	r2, #8
 8002850:	4694      	mov	ip, r2
 8002852:	44bc      	add	ip, r7
 8002854:	4463      	add	r3, ip
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00da      	lsls	r2, r3, #3
 800285a:	4b98      	ldr	r3, [pc, #608]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800285c:	191b      	adds	r3, r3, r4
 800285e:	2508      	movs	r5, #8
 8002860:	46ac      	mov	ip, r5
 8002862:	44bc      	add	ip, r7
 8002864:	4463      	add	r3, ip
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	189b      	adds	r3, r3, r2
 800286a:	6239      	str	r1, [r7, #32]
 800286c:	2200      	movs	r2, #0
 800286e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	6019      	str	r1, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 8002878:	1903      	adds	r3, r0, r4
 800287a:	2208      	movs	r2, #8
 800287c:	4694      	mov	ip, r2
 800287e:	44bc      	add	ip, r7
 8002880:	4463      	add	r3, ip
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	00da      	lsls	r2, r3, #3
 8002886:	498d      	ldr	r1, [pc, #564]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002888:	190b      	adds	r3, r1, r4
 800288a:	2108      	movs	r1, #8
 800288c:	1879      	adds	r1, r7, r1
 800288e:	1859      	adds	r1, r3, r1
 8002890:	680b      	ldr	r3, [r1, #0]
 8002892:	189b      	adds	r3, r3, r2
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	1933      	adds	r3, r6, r4
 800289a:	2208      	movs	r2, #8
 800289c:	18ba      	adds	r2, r7, r2
 800289e:	189a      	adds	r2, r3, r2
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	17db      	asrs	r3, r3, #31
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	0012      	movs	r2, r2
 80028ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ae:	2300      	movs	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b2:	4b86      	ldr	r3, [pc, #536]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80028b4:	191b      	adds	r3, r3, r4
 80028b6:	2208      	movs	r2, #8
 80028b8:	4694      	mov	ip, r2
 80028ba:	44bc      	add	ip, r7
 80028bc:	4463      	add	r3, ip
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 80028c4:	191b      	adds	r3, r3, r4
 80028c6:	2508      	movs	r5, #8
 80028c8:	46ac      	mov	ip, r5
 80028ca:	44bc      	add	ip, r7
 80028cc:	4463      	add	r3, ip
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d4:	4302      	orrs	r2, r0
 80028d6:	613a      	str	r2, [r7, #16]
 80028d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028da:	430a      	orrs	r2, r1
 80028dc:	617a      	str	r2, [r7, #20]
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	6019      	str	r1, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80028e6:	0021      	movs	r1, r4
 80028e8:	1873      	adds	r3, r6, r1
 80028ea:	2208      	movs	r2, #8
 80028ec:	18ba      	adds	r2, r7, r2
 80028ee:	189a      	adds	r2, r3, r2
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4b77      	ldr	r3, [pc, #476]	@ (8002ad0 <initEEPROMEmulated+0x3f0>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d35b      	bcc.n	80029b0 <initEEPROMEmulated+0x2d0>
 80028f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 80028fa:	1853      	adds	r3, r2, r1
 80028fc:	2208      	movs	r2, #8
 80028fe:	4694      	mov	ip, r2
 8002900:	44bc      	add	ip, r7
 8002902:	4463      	add	r3, ip
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d052      	beq.n	80029b0 <initEEPROMEmulated+0x2d0>
			varInit++;
 800290a:	1873      	adds	r3, r6, r1
 800290c:	2208      	movs	r2, #8
 800290e:	18ba      	adds	r2, r7, r2
 8002910:	189a      	adds	r2, r3, r2
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	1872      	adds	r2, r6, r1
 8002918:	2008      	movs	r0, #8
 800291a:	4684      	mov	ip, r0
 800291c:	44bc      	add	ip, r7
 800291e:	4462      	add	r2, ip
 8002920:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 8002922:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002924:	0008      	movs	r0, r1
 8002926:	185b      	adds	r3, r3, r1
 8002928:	2208      	movs	r2, #8
 800292a:	4694      	mov	ip, r2
 800292c:	44bc      	add	ip, r7
 800292e:	4463      	add	r3, ip
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00da      	lsls	r2, r3, #3
 8002934:	4961      	ldr	r1, [pc, #388]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002936:	0004      	movs	r4, r0
 8002938:	1809      	adds	r1, r1, r0
 800293a:	2308      	movs	r3, #8
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	18c8      	adds	r0, r1, r3
 8002940:	6803      	ldr	r3, [r0, #0]
 8002942:	189b      	adds	r3, r3, r2
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	0023      	movs	r3, r4
 800294a:	001c      	movs	r4, r3
 800294c:	18f2      	adds	r2, r6, r3
 800294e:	2308      	movs	r3, #8
 8002950:	469c      	mov	ip, r3
 8002952:	44bc      	add	ip, r7
 8002954:	4462      	add	r2, ip
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002962:	0e13      	lsrs	r3, r2, #24
 8002964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002966:	0212      	lsls	r2, r2, #8
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002972:	0213      	lsls	r3, r2, #8
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b55      	ldr	r3, [pc, #340]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 8002978:	0026      	movs	r6, r4
 800297a:	199b      	adds	r3, r3, r6
 800297c:	2208      	movs	r2, #8
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	00da      	lsls	r2, r3, #3
 8002988:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 800298a:	199b      	adds	r3, r3, r6
 800298c:	2408      	movs	r4, #8
 800298e:	46a4      	mov	ip, r4
 8002990:	44bc      	add	ip, r7
 8002992:	4463      	add	r3, ip
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	189b      	adds	r3, r3, r2
 8002998:	0002      	movs	r2, r0
 800299a:	683c      	ldr	r4, [r7, #0]
 800299c:	4322      	orrs	r2, r4
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	000a      	movs	r2, r1
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6019      	str	r1, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80029b0:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <initEEPROMEmulated+0x3c0>)
 80029b2:	2130      	movs	r1, #48	@ 0x30
 80029b4:	1853      	adds	r3, r2, r1
 80029b6:	2008      	movs	r0, #8
 80029b8:	4684      	mov	ip, r0
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	1852      	adds	r2, r2, r1
 80029c4:	2008      	movs	r0, #8
 80029c6:	4684      	mov	ip, r0
 80029c8:	44bc      	add	ip, r7
 80029ca:	4462      	add	r2, ip
 80029cc:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80029ce:	4a3f      	ldr	r2, [pc, #252]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80029d0:	1853      	adds	r3, r2, r1
 80029d2:	2008      	movs	r0, #8
 80029d4:	4684      	mov	ip, r0
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	1852      	adds	r2, r2, r1
 80029de:	2108      	movs	r1, #8
 80029e0:	468c      	mov	ip, r1
 80029e2:	44bc      	add	ip, r7
 80029e4:	4462      	add	r2, ip
 80029e6:	3301      	adds	r3, #1
 80029e8:	7013      	strb	r3, [r2, #0]
 80029ea:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <initEEPROMEmulated+0x3ec>)
 80029ec:	2130      	movs	r1, #48	@ 0x30
 80029ee:	185b      	adds	r3, r3, r1
 80029f0:	2208      	movs	r2, #8
 80029f2:	18ba      	adds	r2, r7, r2
 80029f4:	189a      	adds	r2, r3, r2
 80029f6:	4e2b      	ldr	r6, [pc, #172]	@ (8002aa4 <initEEPROMEmulated+0x3c4>)
 80029f8:	1873      	adds	r3, r6, r1
 80029fa:	2008      	movs	r0, #8
 80029fc:	4684      	mov	ip, r0
 80029fe:	44bc      	add	ip, r7
 8002a00:	4463      	add	r3, ip
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d200      	bcs.n	8002a0c <initEEPROMEmulated+0x32c>
 8002a0a:	e714      	b.n	8002836 <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <initEEPROMEmulated+0x3cc>)
 8002a0e:	000c      	movs	r4, r1
 8002a10:	185b      	adds	r3, r3, r1
 8002a12:	2208      	movs	r2, #8
 8002a14:	4694      	mov	ip, r2
 8002a16:	44bc      	add	ip, r7
 8002a18:	4463      	add	r3, ip
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fdfb 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8002a22:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <initEEPROMEmulated+0x3d4>)
 8002a24:	0022      	movs	r2, r4
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	2108      	movs	r1, #8
 8002a2a:	468c      	mov	ip, r1
 8002a2c:	44bc      	add	ip, r7
 8002a2e:	4463      	add	r3, ip
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1f18      	subs	r0, r3, #4
 8002a34:	0014      	movs	r4, r2
 8002a36:	1933      	adds	r3, r6, r4
 8002a38:	2208      	movs	r2, #8
 8002a3a:	4694      	mov	ip, r2
 8002a3c:	44bc      	add	ip, r7
 8002a3e:	4463      	add	r3, ip
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <initEEPROMEmulated+0x3dc>)
 8002a44:	191b      	adds	r3, r3, r4
 8002a46:	2108      	movs	r1, #8
 8002a48:	468c      	mov	ip, r1
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0019      	movs	r1, r3
 8002a52:	f7ff fe0f 	bl	8002674 <writeFLASH>
	if(!flagVar_){
 8002a56:	4914      	ldr	r1, [pc, #80]	@ (8002aa8 <initEEPROMEmulated+0x3c8>)
 8002a58:	0020      	movs	r0, r4
 8002a5a:	180b      	adds	r3, r1, r0
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4694      	mov	ip, r2
 8002a60:	44bc      	add	ip, r7
 8002a62:	4463      	add	r3, ip
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	4053      	eors	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <initEEPROMEmulated+0x3a2>
		flagVar_ = 1;
 8002a70:	180b      	adds	r3, r1, r0
 8002a72:	2208      	movs	r2, #8
 8002a74:	18ba      	adds	r2, r7, r2
 8002a76:	189a      	adds	r2, r3, r2
 8002a78:	2301      	movs	r3, #1
 8002a7a:	7013      	strb	r3, [r2, #0]
		goto initEEPROM_V;
 8002a7c:	e68d      	b.n	800279a <initEEPROMEmulated+0xba>
		goto saveDataEEPROM_RAM;
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	e000      	b.n	8002a84 <initEEPROMEmulated+0x3a4>
	}

	// Save the Data in RAM
saveDataEEPROM_RAM:
 8002a82:	46c0      	nop			@ (mov r8, r8)

	for (uint8_t i = 0; i<128; i++)
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <initEEPROMEmulated+0x3f4>)
 8002a86:	2230      	movs	r2, #48	@ 0x30
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e043      	b.n	8002b20 <initEEPROMEmulated+0x440>
 8002a98:	fffffb20 	.word	0xfffffb20
 8002a9c:	0803f000 	.word	0x0803f000
 8002aa0:	000004a4 	.word	0x000004a4
 8002aa4:	000004a3 	.word	0x000004a3
 8002aa8:	0000049b 	.word	0x0000049b
 8002aac:	0000049a 	.word	0x0000049a
 8002ab0:	0803f004 	.word	0x0803f004
 8002ab4:	00000494 	.word	0x00000494
 8002ab8:	fffffbe8 	.word	0xfffffbe8
 8002abc:	0000049c 	.word	0x0000049c
 8002ac0:	0803f804 	.word	0x0803f804
 8002ac4:	0803f800 	.word	0x0803f800
 8002ac8:	fffffb58 	.word	0xfffffb58
 8002acc:	00000493 	.word	0x00000493
 8002ad0:	0803f810 	.word	0x0803f810
 8002ad4:	00000492 	.word	0x00000492
		reePlantilla[i] = (uint8_t) findLastValue((uint32_t) &eePlantilla[i]);
 8002ad8:	4c63      	ldr	r4, [pc, #396]	@ (8002c68 <initEEPROMEmulated+0x588>)
 8002ada:	2530      	movs	r5, #48	@ 0x30
 8002adc:	1963      	adds	r3, r4, r5
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	44bc      	add	ip, r7
 8002ae4:	4463      	add	r3, ip
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	4b60      	ldr	r3, [pc, #384]	@ (8002c6c <initEEPROMEmulated+0x58c>)
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 faa9 	bl	8003044 <findLastValue>
 8002af2:	0002      	movs	r2, r0
 8002af4:	1963      	adds	r3, r4, r5
 8002af6:	2108      	movs	r1, #8
 8002af8:	468c      	mov	ip, r1
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2d1      	uxtb	r1, r2
 8002b02:	4a5b      	ldr	r2, [pc, #364]	@ (8002c70 <initEEPROMEmulated+0x590>)
 8002b04:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<128; i++)
 8002b06:	1963      	adds	r3, r4, r5
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1963      	adds	r3, r4, r5
 8002b14:	2108      	movs	r1, #8
 8002b16:	468c      	mov	ip, r1
 8002b18:	44bc      	add	ip, r7
 8002b1a:	4463      	add	r3, ip
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <initEEPROMEmulated+0x588>)
 8002b22:	2230      	movs	r2, #48	@ 0x30
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	2208      	movs	r2, #8
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dad0      	bge.n	8002ad8 <initEEPROMEmulated+0x3f8>

	reevolt_div 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_div);
 8002b36:	4b4f      	ldr	r3, [pc, #316]	@ (8002c74 <initEEPROMEmulated+0x594>)
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fa83 	bl	8003044 <findLastValue>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <initEEPROMEmulated+0x598>)
 8002b44:	701a      	strb	r2, [r3, #0]
	reevolt_mul 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_mul);
 8002b46:	4b4d      	ldr	r3, [pc, #308]	@ (8002c7c <initEEPROMEmulated+0x59c>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fa7b 	bl	8003044 <findLastValue>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <initEEPROMEmulated+0x5a0>)
 8002b54:	701a      	strb	r2, [r3, #0]
	reef_voltaje 	= 	(uint8_t) findLastValue((uint32_t) &eef_voltaje);
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <initEEPROMEmulated+0x5a4>)
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 fa73 	bl	8003044 <findLastValue>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b49      	ldr	r3, [pc, #292]	@ (8002c88 <initEEPROMEmulated+0x5a8>)
 8002b64:	701a      	strb	r2, [r3, #0]
	reeEstado1 		= 	(uint8_t) findLastValue((uint32_t) &eeEstado1);
 8002b66:	4b49      	ldr	r3, [pc, #292]	@ (8002c8c <initEEPROMEmulated+0x5ac>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fa6b 	bl	8003044 <findLastValue>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <initEEPROMEmulated+0x5b0>)
 8002b74:	701a      	strb	r2, [r3, #0]
	reeTimeUnix1 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix1);
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <initEEPROMEmulated+0x5b4>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fa63 	bl	8003044 <findLastValue>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <initEEPROMEmulated+0x5b8>)
 8002b84:	701a      	strb	r2, [r3, #0]
	reeTimeUnix2 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix2);
 8002b86:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <initEEPROMEmulated+0x5bc>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fa5b 	bl	8003044 <findLastValue>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <initEEPROMEmulated+0x5c0>)
 8002b94:	701a      	strb	r2, [r3, #0]
	reeTimeUnix3 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix3);
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <initEEPROMEmulated+0x5c4>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fa53 	bl	8003044 <findLastValue>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <initEEPROMEmulated+0x5c8>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	reeTimeUnix4 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix4);
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <initEEPROMEmulated+0x5cc>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa4b 	bl	8003044 <findLastValue>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <initEEPROMEmulated+0x5d0>)
 8002bb4:	701a      	strb	r2, [r3, #0]
	reeLat1 		= 	(uint8_t) findLastValue((uint32_t) &eeLat1);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <initEEPROMEmulated+0x5d4>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa43 	bl	8003044 <findLastValue>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb8 <initEEPROMEmulated+0x5d8>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	reeLat2 		= 	(uint8_t) findLastValue((uint32_t) &eeLat2);
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <initEEPROMEmulated+0x5dc>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa3b 	bl	8003044 <findLastValue>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc0 <initEEPROMEmulated+0x5e0>)
 8002bd4:	701a      	strb	r2, [r3, #0]
	reeLat3 		= 	(uint8_t) findLastValue((uint32_t) &eeLat3);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <initEEPROMEmulated+0x5e4>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fa33 	bl	8003044 <findLastValue>
 8002bde:	0003      	movs	r3, r0
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <initEEPROMEmulated+0x5e8>)
 8002be4:	701a      	strb	r2, [r3, #0]
	reeLat4 		= 	(uint8_t) findLastValue((uint32_t) &eeLat4);
 8002be6:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <initEEPROMEmulated+0x5ec>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fa2b 	bl	8003044 <findLastValue>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <initEEPROMEmulated+0x5f0>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	reeLong1 		= 	(uint8_t) findLastValue((uint32_t) &eeLong1);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <initEEPROMEmulated+0x5f4>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fa23 	bl	8003044 <findLastValue>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <initEEPROMEmulated+0x5f8>)
 8002c04:	701a      	strb	r2, [r3, #0]
	reeLong2 		=	(uint8_t) findLastValue((uint32_t) &eeLong2);
 8002c06:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <initEEPROMEmulated+0x5fc>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 fa1b 	bl	8003044 <findLastValue>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <initEEPROMEmulated+0x600>)
 8002c14:	701a      	strb	r2, [r3, #0]
	reeLong3 		= 	(uint8_t) findLastValue((uint32_t) &eeLong3);
 8002c16:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <initEEPROMEmulated+0x604>)
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fa13 	bl	8003044 <findLastValue>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <initEEPROMEmulated+0x608>)
 8002c24:	701a      	strb	r2, [r3, #0]
	reeLong4 		= 	(uint8_t) findLastValue((uint32_t) &eeLong4);
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <initEEPROMEmulated+0x60c>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fa0b 	bl	8003044 <findLastValue>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <initEEPROMEmulated+0x610>)
 8002c34:	701a      	strb	r2, [r3, #0]
	reeCntRegDATA 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegDATA);
 8002c36:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <initEEPROMEmulated+0x614>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fa03 	bl	8003044 <findLastValue>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <initEEPROMEmulated+0x618>)
 8002c44:	801a      	strh	r2, [r3, #0]
	reeCntRegEVENT 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegEVENT);
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <initEEPROMEmulated+0x61c>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f9fb 	bl	8003044 <findLastValue>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b2b      	ldr	r3, [pc, #172]	@ (8002d00 <initEEPROMEmulated+0x620>)
 8002c54:	801a      	strh	r2, [r3, #0]

}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	239c      	movs	r3, #156	@ 0x9c
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	449d      	add	sp, r3
 8002c60:	bc80      	pop	{r7}
 8002c62:	46b8      	mov	r8, r7
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	00000492 	.word	0x00000492
 8002c6c:	0803f000 	.word	0x0803f000
 8002c70:	20000ce8 	.word	0x20000ce8
 8002c74:	0803f800 	.word	0x0803f800
 8002c78:	200001b8 	.word	0x200001b8
 8002c7c:	0803f801 	.word	0x0803f801
 8002c80:	200001b9 	.word	0x200001b9
 8002c84:	0803f802 	.word	0x0803f802
 8002c88:	20000d68 	.word	0x20000d68
 8002c8c:	0803f803 	.word	0x0803f803
 8002c90:	200001ba 	.word	0x200001ba
 8002c94:	0803f804 	.word	0x0803f804
 8002c98:	20000d69 	.word	0x20000d69
 8002c9c:	0803f805 	.word	0x0803f805
 8002ca0:	20000d6a 	.word	0x20000d6a
 8002ca4:	0803f806 	.word	0x0803f806
 8002ca8:	20000d6b 	.word	0x20000d6b
 8002cac:	0803f807 	.word	0x0803f807
 8002cb0:	20000d6c 	.word	0x20000d6c
 8002cb4:	0803f808 	.word	0x0803f808
 8002cb8:	200001bb 	.word	0x200001bb
 8002cbc:	0803f809 	.word	0x0803f809
 8002cc0:	200001bc 	.word	0x200001bc
 8002cc4:	0803f80a 	.word	0x0803f80a
 8002cc8:	200001bd 	.word	0x200001bd
 8002ccc:	0803f80b 	.word	0x0803f80b
 8002cd0:	200001be 	.word	0x200001be
 8002cd4:	0803f80c 	.word	0x0803f80c
 8002cd8:	200001bf 	.word	0x200001bf
 8002cdc:	0803f80d 	.word	0x0803f80d
 8002ce0:	200001c0 	.word	0x200001c0
 8002ce4:	0803f80e 	.word	0x0803f80e
 8002ce8:	200001c1 	.word	0x200001c1
 8002cec:	0803f80f 	.word	0x0803f80f
 8002cf0:	200001c2 	.word	0x200001c2
 8002cf4:	0803f810 	.word	0x0803f810
 8002cf8:	20000d6e 	.word	0x20000d6e
 8002cfc:	0803f812 	.word	0x0803f812
 8002d00:	20000d70 	.word	0x20000d70

08002d04 <restartFlashMemory>:
/**
  * @brief  Restart Flash Memory
  * @param
  * @retval
  */
void restartFlashMemory(void){
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	4cc3      	ldr	r4, [pc, #780]	@ (8003014 <restartFlashMemory+0x310>)
 8002d08:	44a5      	add	sp, r4
 8002d0a:	af00      	add	r7, sp, #0
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002d0c:	4bc2      	ldr	r3, [pc, #776]	@ (8003018 <restartFlashMemory+0x314>)
 8002d0e:	2693      	movs	r6, #147	@ 0x93
 8002d10:	00f6      	lsls	r6, r6, #3
 8002d12:	199b      	adds	r3, r3, r6
 8002d14:	2258      	movs	r2, #88	@ 0x58
 8002d16:	4694      	mov	ip, r2
 8002d18:	44bc      	add	ip, r7
 8002d1a:	4463      	add	r3, ip
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	001a      	movs	r2, r3
 8002d24:	2100      	movs	r1, #0
 8002d26:	f019 fa0d 	bl	801c144 <memset>
	uint64_t arrayDataV_[sizeEEPROM_V] = {0};
 8002d2a:	4bbc      	ldr	r3, [pc, #752]	@ (800301c <restartFlashMemory+0x318>)
 8002d2c:	199b      	adds	r3, r3, r6
 8002d2e:	2258      	movs	r2, #88	@ 0x58
 8002d30:	4694      	mov	ip, r2
 8002d32:	44bc      	add	ip, r7
 8002d34:	4463      	add	r3, ip
 8002d36:	0018      	movs	r0, r3
 8002d38:	2390      	movs	r3, #144	@ 0x90
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f019 fa01 	bl	801c144 <memset>

	uint8_t * varInit = (uint8_t *) Page_126;
 8002d42:	4bb7      	ldr	r3, [pc, #732]	@ (8003020 <restartFlashMemory+0x31c>)
 8002d44:	4ab7      	ldr	r2, [pc, #732]	@ (8003024 <restartFlashMemory+0x320>)
 8002d46:	2158      	movs	r1, #88	@ 0x58
 8002d48:	1852      	adds	r2, r2, r1
 8002d4a:	19d2      	adds	r2, r2, r7
 8002d4c:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002d4e:	4bb6      	ldr	r3, [pc, #728]	@ (8003028 <restartFlashMemory+0x324>)
 8002d50:	2258      	movs	r2, #88	@ 0x58
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	19da      	adds	r2, r3, r7
 8002d56:	2300      	movs	r3, #0
 8002d58:	7013      	strb	r3, [r2, #0]
 8002d5a:	e030      	b.n	8002dbe <restartFlashMemory+0xba>
		arrayDataP_[i] = ((uint64_t )(varInit) << 32);
 8002d5c:	48b1      	ldr	r0, [pc, #708]	@ (8003024 <restartFlashMemory+0x320>)
 8002d5e:	2358      	movs	r3, #88	@ 0x58
 8002d60:	18c3      	adds	r3, r0, r3
 8002d62:	19db      	adds	r3, r3, r7
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d68:	17db      	asrs	r3, r3, #31
 8002d6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d6c:	4eae      	ldr	r6, [pc, #696]	@ (8003028 <restartFlashMemory+0x324>)
 8002d6e:	2358      	movs	r3, #88	@ 0x58
 8002d70:	18f3      	adds	r3, r6, r3
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	7819      	ldrb	r1, [r3, #0]
 8002d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d78:	001b      	movs	r3, r3
 8002d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d80:	4ba5      	ldr	r3, [pc, #660]	@ (8003018 <restartFlashMemory+0x314>)
 8002d82:	2293      	movs	r2, #147	@ 0x93
 8002d84:	00d2      	lsls	r2, r2, #3
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	2258      	movs	r2, #88	@ 0x58
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	189a      	adds	r2, r3, r2
 8002d8e:	00cb      	lsls	r3, r1, #3
 8002d90:	18d3      	adds	r3, r2, r3
 8002d92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d96:	6019      	str	r1, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
		varInit ++;
 8002d9a:	2358      	movs	r3, #88	@ 0x58
 8002d9c:	18c3      	adds	r3, r0, r3
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	2258      	movs	r2, #88	@ 0x58
 8002da6:	1882      	adds	r2, r0, r2
 8002da8:	19d2      	adds	r2, r2, r7
 8002daa:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002dac:	2358      	movs	r3, #88	@ 0x58
 8002dae:	18f3      	adds	r3, r6, r3
 8002db0:	19db      	adds	r3, r3, r7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2258      	movs	r2, #88	@ 0x58
 8002db6:	18b2      	adds	r2, r6, r2
 8002db8:	19d2      	adds	r2, r2, r7
 8002dba:	3301      	adds	r3, #1
 8002dbc:	7013      	strb	r3, [r2, #0]
 8002dbe:	4b9a      	ldr	r3, [pc, #616]	@ (8003028 <restartFlashMemory+0x324>)
 8002dc0:	2258      	movs	r2, #88	@ 0x58
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	19db      	adds	r3, r3, r7
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dac6      	bge.n	8002d5c <restartFlashMemory+0x58>
	}

	arrayDataP_[eedato_seg1] |= 0xAA;
 8002dce:	4b92      	ldr	r3, [pc, #584]	@ (8003018 <restartFlashMemory+0x314>)
 8002dd0:	2093      	movs	r0, #147	@ 0x93
 8002dd2:	00c0      	lsls	r0, r0, #3
 8002dd4:	181b      	adds	r3, r3, r0
 8002dd6:	2258      	movs	r2, #88	@ 0x58
 8002dd8:	4694      	mov	ip, r2
 8002dda:	44bc      	add	ip, r7
 8002ddc:	4463      	add	r3, ip
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	21aa      	movs	r1, #170	@ 0xaa
 8002de4:	4311      	orrs	r1, r2
 8002de6:	000c      	movs	r4, r1
 8002de8:	2100      	movs	r1, #0
 8002dea:	4319      	orrs	r1, r3
 8002dec:	000d      	movs	r5, r1
 8002dee:	4b8a      	ldr	r3, [pc, #552]	@ (8003018 <restartFlashMemory+0x314>)
 8002df0:	181b      	adds	r3, r3, r0
 8002df2:	2258      	movs	r2, #88	@ 0x58
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	601c      	str	r4, [r3, #0]
 8002dfc:	605d      	str	r5, [r3, #4]
	arrayDataP_[eedato_seg2] |= 0x66;
 8002dfe:	4b86      	ldr	r3, [pc, #536]	@ (8003018 <restartFlashMemory+0x314>)
 8002e00:	0005      	movs	r5, r0
 8002e02:	181b      	adds	r3, r3, r0
 8002e04:	2258      	movs	r2, #88	@ 0x58
 8002e06:	18ba      	adds	r2, r7, r2
 8002e08:	189a      	adds	r2, r3, r2
 8002e0a:	2382      	movs	r3, #130	@ 0x82
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2166      	movs	r1, #102	@ 0x66
 8002e16:	4311      	orrs	r1, r2
 8002e18:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4319      	orrs	r1, r3
 8002e1e:	6479      	str	r1, [r7, #68]	@ 0x44
 8002e20:	4b7d      	ldr	r3, [pc, #500]	@ (8003018 <restartFlashMemory+0x314>)
 8002e22:	195b      	adds	r3, r3, r5
 8002e24:	2258      	movs	r2, #88	@ 0x58
 8002e26:	18ba      	adds	r2, r7, r2
 8002e28:	189a      	adds	r2, r3, r2
 8002e2a:	2382      	movs	r3, #130	@ 0x82
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e34:	6019      	str	r1, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
	arrayDataP_[eedato_seg3] |= 0xCC;
 8002e38:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <restartFlashMemory+0x314>)
 8002e3a:	195b      	adds	r3, r3, r5
 8002e3c:	2258      	movs	r2, #88	@ 0x58
 8002e3e:	18ba      	adds	r2, r7, r2
 8002e40:	189a      	adds	r2, r3, r2
 8002e42:	23fe      	movs	r3, #254	@ 0xfe
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	18d3      	adds	r3, r2, r3
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	21cc      	movs	r1, #204	@ 0xcc
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e52:	2100      	movs	r1, #0
 8002e54:	4319      	orrs	r1, r3
 8002e56:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <restartFlashMemory+0x314>)
 8002e5a:	195b      	adds	r3, r3, r5
 8002e5c:	2258      	movs	r2, #88	@ 0x58
 8002e5e:	18ba      	adds	r2, r7, r2
 8002e60:	189a      	adds	r2, r3, r2
 8002e62:	23fe      	movs	r3, #254	@ 0xfe
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e6c:	6019      	str	r1, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion1] |= (uint32_t) versionFirm1;
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <restartFlashMemory+0x314>)
 8002e72:	195b      	adds	r3, r3, r5
 8002e74:	2258      	movs	r2, #88	@ 0x58
 8002e76:	18ba      	adds	r2, r7, r2
 8002e78:	189a      	adds	r2, r3, r2
 8002e7a:	23f6      	movs	r3, #246	@ 0xf6
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	18d3      	adds	r3, r2, r3
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	4b69      	ldr	r3, [pc, #420]	@ (800302c <restartFlashMemory+0x328>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002e92:	001a      	movs	r2, r3
 8002e94:	4302      	orrs	r2, r0
 8002e96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e98:	0023      	movs	r3, r4
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003018 <restartFlashMemory+0x314>)
 8002ea0:	002c      	movs	r4, r5
 8002ea2:	191b      	adds	r3, r3, r4
 8002ea4:	2258      	movs	r2, #88	@ 0x58
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	189a      	adds	r2, r3, r2
 8002eaa:	23f6      	movs	r3, #246	@ 0xf6
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion2] |= (uint32_t) versionFirm2;
 8002eb8:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <restartFlashMemory+0x314>)
 8002eba:	191b      	adds	r3, r3, r4
 8002ebc:	2258      	movs	r2, #88	@ 0x58
 8002ebe:	18ba      	adds	r2, r7, r2
 8002ec0:	189a      	adds	r2, r3, r2
 8002ec2:	23f8      	movs	r3, #248	@ 0xf8
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	18d3      	adds	r3, r2, r3
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4958      	ldr	r1, [pc, #352]	@ (8003030 <restartFlashMemory+0x32c>)
 8002ece:	7809      	ldrb	r1, [r1, #0]
 8002ed0:	6239      	str	r1, [r7, #32]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ed6:	6a38      	ldr	r0, [r7, #32]
 8002ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eda:	0005      	movs	r5, r0
 8002edc:	4315      	orrs	r5, r2
 8002ede:	61bd      	str	r5, [r7, #24]
 8002ee0:	4319      	orrs	r1, r3
 8002ee2:	61f9      	str	r1, [r7, #28]
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <restartFlashMemory+0x314>)
 8002ee6:	191b      	adds	r3, r3, r4
 8002ee8:	2258      	movs	r2, #88	@ 0x58
 8002eea:	18ba      	adds	r2, r7, r2
 8002eec:	189a      	adds	r2, r3, r2
 8002eee:	23f8      	movs	r3, #248	@ 0xf8
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	6019      	str	r1, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]

	varInit = (uint8_t *) Page_127;
 8002efc:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <restartFlashMemory+0x330>)
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <restartFlashMemory+0x320>)
 8002f00:	2158      	movs	r1, #88	@ 0x58
 8002f02:	1852      	adds	r2, r2, r1
 8002f04:	19d2      	adds	r2, r2, r7
 8002f06:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <restartFlashMemory+0x334>)
 8002f0a:	2258      	movs	r2, #88	@ 0x58
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e05a      	b.n	8002fcc <restartFlashMemory+0x2c8>
		arrayDataV_[i] |= ((uint64_t )(varInit) << 32);
 8002f16:	4c48      	ldr	r4, [pc, #288]	@ (8003038 <restartFlashMemory+0x334>)
 8002f18:	2358      	movs	r3, #88	@ 0x58
 8002f1a:	18e3      	adds	r3, r4, r3
 8002f1c:	19db      	adds	r3, r3, r7
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <restartFlashMemory+0x318>)
 8002f22:	2693      	movs	r6, #147	@ 0x93
 8002f24:	00f6      	lsls	r6, r6, #3
 8002f26:	1992      	adds	r2, r2, r6
 8002f28:	2158      	movs	r1, #88	@ 0x58
 8002f2a:	468c      	mov	ip, r1
 8002f2c:	44bc      	add	ip, r7
 8002f2e:	4462      	add	r2, ip
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	483a      	ldr	r0, [pc, #232]	@ (8003024 <restartFlashMemory+0x320>)
 8002f3a:	2158      	movs	r1, #88	@ 0x58
 8002f3c:	1841      	adds	r1, r0, r1
 8002f3e:	19c9      	adds	r1, r1, r7
 8002f40:	6809      	ldr	r1, [r1, #0]
 8002f42:	6139      	str	r1, [r7, #16]
 8002f44:	17c9      	asrs	r1, r1, #31
 8002f46:	6179      	str	r1, [r7, #20]
 8002f48:	6939      	ldr	r1, [r7, #16]
 8002f4a:	0009      	movs	r1, r1
 8002f4c:	60f9      	str	r1, [r7, #12]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	2158      	movs	r1, #88	@ 0x58
 8002f54:	1861      	adds	r1, r4, r1
 8002f56:	19c9      	adds	r1, r1, r7
 8002f58:	7809      	ldrb	r1, [r1, #0]
 8002f5a:	468c      	mov	ip, r1
 8002f5c:	68bc      	ldr	r4, [r7, #8]
 8002f5e:	68fd      	ldr	r5, [r7, #12]
 8002f60:	0021      	movs	r1, r4
 8002f62:	4311      	orrs	r1, r2
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	0029      	movs	r1, r5
 8002f68:	4319      	orrs	r1, r3
 8002f6a:	6079      	str	r1, [r7, #4]
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800301c <restartFlashMemory+0x318>)
 8002f6e:	199b      	adds	r3, r3, r6
 8002f70:	2258      	movs	r2, #88	@ 0x58
 8002f72:	18ba      	adds	r2, r7, r2
 8002f74:	189a      	adds	r2, r3, r2
 8002f76:	4663      	mov	r3, ip
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	18d3      	adds	r3, r2, r3
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA))){
 8002f84:	2358      	movs	r3, #88	@ 0x58
 8002f86:	18c3      	adds	r3, r0, r3
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <restartFlashMemory+0x338>)
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d308      	bcc.n	8002fa4 <restartFlashMemory+0x2a0>
			varInit++;
 8002f92:	2358      	movs	r3, #88	@ 0x58
 8002f94:	18c3      	adds	r3, r0, r3
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	2258      	movs	r2, #88	@ 0x58
 8002f9e:	1882      	adds	r2, r0, r2
 8002fa0:	19d2      	adds	r2, r2, r7
 8002fa2:	6013      	str	r3, [r2, #0]
		}
		varInit++;
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <restartFlashMemory+0x320>)
 8002fa6:	2358      	movs	r3, #88	@ 0x58
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	2158      	movs	r1, #88	@ 0x58
 8002fb2:	1852      	adds	r2, r2, r1
 8002fb4:	19d2      	adds	r2, r2, r7
 8002fb6:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002fb8:	491f      	ldr	r1, [pc, #124]	@ (8003038 <restartFlashMemory+0x334>)
 8002fba:	2358      	movs	r3, #88	@ 0x58
 8002fbc:	18cb      	adds	r3, r1, r3
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	2358      	movs	r3, #88	@ 0x58
 8002fc4:	18cb      	adds	r3, r1, r3
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	3201      	adds	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <restartFlashMemory+0x334>)
 8002fce:	2258      	movs	r2, #88	@ 0x58
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b11      	cmp	r3, #17
 8002fd8:	d99d      	bls.n	8002f16 <restartFlashMemory+0x212>
	}
	erasePage(126);
 8002fda:	207e      	movs	r0, #126	@ 0x7e
 8002fdc:	f7ff fb1c 	bl	8002618 <erasePage>
	erasePage(127);
 8002fe0:	207f      	movs	r0, #127	@ 0x7f
 8002fe2:	f7ff fb19 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Page_126),&arrayDataP_[0],sizeEEPROM_P);
 8002fe6:	2390      	movs	r3, #144	@ 0x90
 8002fe8:	2258      	movs	r2, #88	@ 0x58
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	480c      	ldr	r0, [pc, #48]	@ (8003020 <restartFlashMemory+0x31c>)
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	f7ff fb3e 	bl	8002674 <writeFLASH>
	writeFLASH((uint64_t *) (Page_127),&arrayDataV_[0],sizeEEPROM_V);
 8002ff8:	2358      	movs	r3, #88	@ 0x58
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	480d      	ldr	r0, [pc, #52]	@ (8003034 <restartFlashMemory+0x330>)
 8002ffe:	2212      	movs	r2, #18
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff fb37 	bl	8002674 <writeFLASH>
	initEEPROMEmulated();
 8003006:	f7ff fb6b 	bl	80026e0 <initEEPROMEmulated>
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <restartFlashMemory+0x33c>)
 8003010:	449d      	add	sp, r3
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003014:	fffffb0c 	.word	0xfffffb0c
 8003018:	fffffbf8 	.word	0xfffffbf8
 800301c:	fffffb68 	.word	0xfffffb68
 8003020:	0803f000 	.word	0x0803f000
 8003024:	00000494 	.word	0x00000494
 8003028:	00000493 	.word	0x00000493
 800302c:	0801eff0 	.word	0x0801eff0
 8003030:	0801eff1 	.word	0x0801eff1
 8003034:	0803f800 	.word	0x0803f800
 8003038:	00000492 	.word	0x00000492
 800303c:	0803f810 	.word	0x0803f810
 8003040:	000004f4 	.word	0x000004f4

08003044 <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t AddressValue_){
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	uint32_t * AddressPage_ = (uint32_t *) getAddressPage(AddressValue_);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff face 	bl	80025f0 <getAddressPage>
 8003054:	0002      	movs	r2, r0
 8003056:	000b      	movs	r3, r1
 8003058:	0013      	movs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <findLastValue+0x68>)
 8003060:	4694      	mov	ip, r2
 8003062:	4463      	add	r3, ip
 8003064:	60fb      	str	r3, [r7, #12]
	if(AddressPage_ < ((uint32_t *) 0x803F000) || AddressPage_ >= ((uint32_t *) 0x8040000)){ // Invalid Direction
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a11      	ldr	r2, [pc, #68]	@ (80030b0 <findLastValue+0x6c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d903      	bls.n	8003076 <findLastValue+0x32>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <findLastValue+0x70>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d90e      	bls.n	8003094 <findLastValue+0x50>
		return 0xFFFFFFFF;
 8003076:	2301      	movs	r3, #1
 8003078:	425b      	negs	r3, r3
 800307a:	e013      	b.n	80030a4 <findLastValue+0x60>
	}
	while(*pointValuex != AddressValue_){
		pointValuex -= 2;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b08      	subs	r3, #8
 8003080:	60fb      	str	r3, [r7, #12]
		if(pointValuex < AddressPage_){
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d204      	bcs.n	8003094 <findLastValue+0x50>
			restartFlashMemory();
 800308a:	f7ff fe3b 	bl	8002d04 <restartFlashMemory>
			return 0xFFFFFFFF;
 800308e:	2301      	movs	r3, #1
 8003090:	425b      	negs	r3, r3
 8003092:	e007      	b.n	80030a4 <findLastValue+0x60>
	while(*pointValuex != AddressValue_){
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d1ee      	bne.n	800307c <findLastValue+0x38>
		}
	}
	return *(pointValuex-1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b04      	subs	r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	000007fc 	.word	0x000007fc
 80030b0:	0803efff 	.word	0x0803efff
 80030b4:	0803ffff 	.word	0x0803ffff

080030b8 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	b08d      	sub	sp, #52	@ 0x34
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6278      	str	r0, [r7, #36]	@ 0x24
 80030c0:	6239      	str	r1, [r7, #32]
 80030c2:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 80030c4:	2200      	movs	r2, #0
 80030c6:	2300      	movs	r3, #0
 80030c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	001b      	movs	r3, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	0006      	movs	r6, r0
 80030f8:	4316      	orrs	r6, r2
 80030fa:	0034      	movs	r4, r6
 80030fc:	4319      	orrs	r1, r3
 80030fe:	000d      	movs	r5, r1
 8003100:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003102:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8003104:	2310      	movs	r3, #16
 8003106:	2218      	movs	r2, #24
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19d9      	adds	r1, r3, r7
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	2201      	movs	r2, #1
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff faaf 	bl	8002674 <writeFLASH>
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b00d      	add	sp, #52	@ 0x34
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800311e <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 800311e:	b5b0      	push	{r4, r5, r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	22ff      	movs	r2, #255	@ 0xff
 800312a:	00d2      	lsls	r2, r2, #3
 800312c:	4694      	mov	ip, r2
 800312e:	4463      	add	r3, ip
 8003130:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8003132:	e002      	b.n	800313a <currentlyPoint+0x1c>
		Pointx --;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b08      	subs	r3, #8
 8003138:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	1c51      	adds	r1, r2, #1
 8003142:	d101      	bne.n	8003148 <currentlyPoint+0x2a>
 8003144:	3301      	adds	r3, #1
 8003146:	d0f5      	beq.n	8003134 <currentlyPoint+0x16>
	}
	Pointx++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3308      	adds	r3, #8
 800314c:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	001c      	movs	r4, r3
 8003152:	17db      	asrs	r3, r3, #31
 8003154:	001d      	movs	r5, r3
 8003156:	0022      	movs	r2, r4
 8003158:	002b      	movs	r3, r5
}
 800315a:	0010      	movs	r0, r2
 800315c:	0019      	movs	r1, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bdb0      	pop	{r4, r5, r7, pc}

08003164 <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint32_t AddressValue_, uint32_t Value_){
 8003164:	b5b0      	push	{r4, r5, r7, lr}
 8003166:	b08c      	sub	sp, #48	@ 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	_Bool flag_Page127 = 1;
 800316e:	242f      	movs	r4, #47	@ 0x2f
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8003176:	252e      	movs	r5, #46	@ 0x2e
 8003178:	197b      	adds	r3, r7, r5
 800317a:	2212      	movs	r2, #18
 800317c:	701a      	strb	r2, [r3, #0]
	uint64_t * AddressPage_ = (uint64_t *) getAddressPage(AddressValue_);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff fa35 	bl	80025f0 <getAddressPage>
 8003186:	0002      	movs	r2, r0
 8003188:	000b      	movs	r3, r1
 800318a:	0013      	movs	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]
	if(AddressPage_ == (uint64_t *) (Page_126)){	// Is here Page 126?
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4a55      	ldr	r2, [pc, #340]	@ (80032e8 <FlashManager+0x184>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d105      	bne.n	80031a2 <FlashManager+0x3e>
		flag_Page127 = 0;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 800319c:	197b      	adds	r3, r7, r5
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;									// Start Page
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	61bb      	str	r3, [r7, #24]
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);		// Current Point
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff ffb8 	bl	800311e <currentlyPoint>
 80031ae:	0002      	movs	r2, r0
 80031b0:	000b      	movs	r3, r1
 80031b2:	0013      	movs	r3, r2
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;			// End Page
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	22ff      	movs	r2, #255	@ 0xff
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	4694      	mov	ip, r2
 80031be:	4463      	add	r3, ip
 80031c0:	617b      	str	r3, [r7, #20]

	if((managerPoint - 1)== managerPointEnd){	// Is here the End Page?
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	3b08      	subs	r3, #8
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d000      	beq.n	80031ce <FlashManager+0x6a>
 80031cc:	e082      	b.n	80032d4 <FlashManager+0x170>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 80031ce:	232e      	movs	r3, #46	@ 0x2e
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f018 fee1 	bl	801bf9c <malloc>
 80031da:	0003      	movs	r3, r0
 80031dc:	613b      	str	r3, [r7, #16]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 80031e2:	2323      	movs	r3, #35	@ 0x23
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e023      	b.n	8003234 <FlashManager+0xd0>
			arrayTemp[i] = findLastValue((uint32_t) varInit);
 80031ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ee:	2323      	movs	r3, #35	@ 0x23
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	18d4      	adds	r4, r2, r3
 80031fa:	0008      	movs	r0, r1
 80031fc:	f7ff ff22 	bl	8003044 <findLastValue>
 8003200:	0003      	movs	r3, r0
 8003202:	6023      	str	r3, [r4, #0]
			varInit++;
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <FlashManager+0x188>)
 800320e:	429a      	cmp	r2, r3
 8003210:	419b      	sbcs	r3, r3
 8003212:	425b      	negs	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	001a      	movs	r2, r3
 8003218:	232f      	movs	r3, #47	@ 0x2f
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	4013      	ands	r3, r2
 8003220:	d002      	beq.n	8003228 <FlashManager+0xc4>
				varInit++;
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	3301      	adds	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8003228:	2123      	movs	r1, #35	@ 0x23
 800322a:	187b      	adds	r3, r7, r1
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	187b      	adds	r3, r7, r1
 8003230:	3201      	adds	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	2323      	movs	r3, #35	@ 0x23
 8003236:	18fa      	adds	r2, r7, r3
 8003238:	232e      	movs	r3, #46	@ 0x2e
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d3d3      	bcc.n	80031ec <FlashManager+0x88>
			}
		}
		// Erase the Page
		//uint32_t VarAux_= (((uint32_t) ) - 0x8000000);
		uint8_t numberPage = getNumberPage((uint32_t)AddressPage_); 		// Number the Page
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	250f      	movs	r5, #15
 8003248:	197c      	adds	r4, r7, r5
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff f9be 	bl	80025cc <getNumberPage>
 8003250:	0003      	movs	r3, r0
 8003252:	7023      	strb	r3, [r4, #0]

		erasePage(numberPage);
 8003254:	197b      	adds	r3, r7, r5
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff f9dd 	bl	8002618 <erasePage>

		// Return the begin Page in current Point

		managerPoint = AddressPage_;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
		varInit =  (uint8_t *) AddressPage_;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

		// Write the new Values and its Addresses
		for(uint8_t i=0; i<size_; i++){
 8003266:	2322      	movs	r3, #34	@ 0x22
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e01e      	b.n	80032ae <FlashManager+0x14a>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8003270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003272:	2322      	movs	r3, #34	@ 0x22
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff ff18 	bl	80030b8 <pushAddressData>
			varInit++;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	3301      	adds	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 800328e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <FlashManager+0x188>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d902      	bls.n	800329c <FlashManager+0x138>
				varInit++;
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	3301      	adds	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			managerPoint ++;
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	3308      	adds	r3, #8
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(uint8_t i=0; i<size_; i++){
 80032a2:	2122      	movs	r1, #34	@ 0x22
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	3201      	adds	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	2322      	movs	r3, #34	@ 0x22
 80032b0:	18fa      	adds	r2, r7, r3
 80032b2:	232e      	movs	r3, #46	@ 0x2e
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3d8      	bcc.n	8003270 <FlashManager+0x10c>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fef7 	bl	80030b8 <pushAddressData>
		free(arrayTemp);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f018 fe6f 	bl	801bfb0 <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 80032d2:	e005      	b.n	80032e0 <FlashManager+0x17c>
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff feec 	bl	80030b8 <pushAddressData>
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b00c      	add	sp, #48	@ 0x30
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	0803f000 	.word	0x0803f000
 80032ec:	0803f810 	.word	0x0803f810

080032f0 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 80032f6:	1cfb      	adds	r3, r7, #3
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 80032fc:	1cbb      	adds	r3, r7, #2
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8003302:	003b      	movs	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8003308:	2300      	movs	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e0d8      	b.n	80034c0 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3302      	adds	r3, #2
 8003312:	4a70      	ldr	r2, [pc, #448]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	2b30      	cmp	r3, #48	@ 0x30
 8003318:	d102      	bne.n	8003320 <MacStringtoHex+0x30>
			tempregister = 0x00;
 800331a:	1cfb      	adds	r3, r7, #3
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3302      	adds	r3, #2
 8003324:	4a6b      	ldr	r2, [pc, #428]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	2b31      	cmp	r3, #49	@ 0x31
 800332a:	d102      	bne.n	8003332 <MacStringtoHex+0x42>
			tempregister = 0x01;
 800332c:	1cfb      	adds	r3, r7, #3
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3302      	adds	r3, #2
 8003336:	4a67      	ldr	r2, [pc, #412]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	2b32      	cmp	r3, #50	@ 0x32
 800333c:	d102      	bne.n	8003344 <MacStringtoHex+0x54>
			tempregister = 0x02;
 800333e:	1cfb      	adds	r3, r7, #3
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3302      	adds	r3, #2
 8003348:	4a62      	ldr	r2, [pc, #392]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	2b33      	cmp	r3, #51	@ 0x33
 800334e:	d102      	bne.n	8003356 <MacStringtoHex+0x66>
			tempregister = 0x03;
 8003350:	1cfb      	adds	r3, r7, #3
 8003352:	2203      	movs	r2, #3
 8003354:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3302      	adds	r3, #2
 800335a:	4a5e      	ldr	r2, [pc, #376]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	2b34      	cmp	r3, #52	@ 0x34
 8003360:	d102      	bne.n	8003368 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8003362:	1cfb      	adds	r3, r7, #3
 8003364:	2204      	movs	r2, #4
 8003366:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3302      	adds	r3, #2
 800336c:	4a59      	ldr	r2, [pc, #356]	@ (80034d4 <MacStringtoHex+0x1e4>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	2b35      	cmp	r3, #53	@ 0x35
 8003372:	d102      	bne.n	800337a <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8003374:	1cfb      	adds	r3, r7, #3
 8003376:	2205      	movs	r2, #5
 8003378:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3302      	adds	r3, #2
 800337e:	4a55      	ldr	r2, [pc, #340]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	2b36      	cmp	r3, #54	@ 0x36
 8003384:	d102      	bne.n	800338c <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8003386:	1cfb      	adds	r3, r7, #3
 8003388:	2206      	movs	r2, #6
 800338a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3302      	adds	r3, #2
 8003390:	4a50      	ldr	r2, [pc, #320]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	2b37      	cmp	r3, #55	@ 0x37
 8003396:	d102      	bne.n	800339e <MacStringtoHex+0xae>
			tempregister = 0x07;
 8003398:	1cfb      	adds	r3, r7, #3
 800339a:	2207      	movs	r2, #7
 800339c:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3302      	adds	r3, #2
 80033a2:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	2b38      	cmp	r3, #56	@ 0x38
 80033a8:	d102      	bne.n	80033b0 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 80033aa:	1cfb      	adds	r3, r7, #3
 80033ac:	2208      	movs	r2, #8
 80033ae:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3302      	adds	r3, #2
 80033b4:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	2b39      	cmp	r3, #57	@ 0x39
 80033ba:	d102      	bne.n	80033c2 <MacStringtoHex+0xd2>
			tempregister = 0x09;
 80033bc:	1cfb      	adds	r3, r7, #3
 80033be:	2209      	movs	r2, #9
 80033c0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3302      	adds	r3, #2
 80033c6:	4a43      	ldr	r2, [pc, #268]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	2b41      	cmp	r3, #65	@ 0x41
 80033cc:	d102      	bne.n	80033d4 <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	220a      	movs	r2, #10
 80033d2:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3302      	adds	r3, #2
 80033d8:	4a3e      	ldr	r2, [pc, #248]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	2b42      	cmp	r3, #66	@ 0x42
 80033de:	d102      	bne.n	80033e6 <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 80033e0:	1cfb      	adds	r3, r7, #3
 80033e2:	220b      	movs	r2, #11
 80033e4:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3302      	adds	r3, #2
 80033ea:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	2b43      	cmp	r3, #67	@ 0x43
 80033f0:	d102      	bne.n	80033f8 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	220c      	movs	r2, #12
 80033f6:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3302      	adds	r3, #2
 80033fc:	4a35      	ldr	r2, [pc, #212]	@ (80034d4 <MacStringtoHex+0x1e4>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	2b44      	cmp	r3, #68	@ 0x44
 8003402:	d102      	bne.n	800340a <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8003404:	1cfb      	adds	r3, r7, #3
 8003406:	220d      	movs	r2, #13
 8003408:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3302      	adds	r3, #2
 800340e:	4a31      	ldr	r2, [pc, #196]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	2b45      	cmp	r3, #69	@ 0x45
 8003414:	d102      	bne.n	800341c <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8003416:	1cfb      	adds	r3, r7, #3
 8003418:	220e      	movs	r2, #14
 800341a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3302      	adds	r3, #2
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <MacStringtoHex+0x1e4>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	2b46      	cmp	r3, #70	@ 0x46
 8003426:	d102      	bne.n	800342e <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8003428:	1cfb      	adds	r3, r7, #3
 800342a:	220f      	movs	r2, #15
 800342c:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	d105      	bne.n	8003442 <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 8003436:	1cbb      	adds	r3, r7, #2
 8003438:	1cfa      	adds	r2, r7, #3
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e03b      	b.n	80034ba <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 8003442:	1cbb      	adds	r3, r7, #2
 8003444:	1cb9      	adds	r1, r7, #2
 8003446:	1cfa      	adds	r2, r7, #3
 8003448:	7809      	ldrb	r1, [r1, #0]
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <MacStringtoHex+0x172>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d002      	beq.n	8003462 <MacStringtoHex+0x172>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d105      	bne.n	800346e <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 8003462:	1cbb      	adds	r3, r7, #2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b29a      	uxth	r2, r3
 8003468:	003b      	movs	r3, r7
 800346a:	0212      	lsls	r2, r2, #8
 800346c:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d005      	beq.n	8003480 <MacStringtoHex+0x190>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d002      	beq.n	8003480 <MacStringtoHex+0x190>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d107      	bne.n	8003490 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8003480:	1cbb      	adds	r3, r7, #2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b299      	uxth	r1, r3
 8003486:	003b      	movs	r3, r7
 8003488:	003a      	movs	r2, r7
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d103      	bne.n	800349e <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <MacStringtoHex+0x1e8>)
 8003498:	003a      	movs	r2, r7
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b07      	cmp	r3, #7
 80034a2:	d103      	bne.n	80034ac <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <MacStringtoHex+0x1e8>)
 80034a6:	003a      	movs	r2, r7
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b0b      	cmp	r3, #11
 80034b0:	d103      	bne.n	80034ba <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <MacStringtoHex+0x1e8>)
 80034b4:	003a      	movs	r2, r7
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b0b      	cmp	r3, #11
 80034c4:	dc00      	bgt.n	80034c8 <MacStringtoHex+0x1d8>
 80034c6:	e722      	b.n	800330e <MacStringtoHex+0x1e>
		}
	}
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	20000ec8 	.word	0x20000ec8
 80034d8:	20000088 	.word	0x20000088

080034dc <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	603a      	str	r2, [r7, #0]
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	1c0a      	adds	r2, r1, #0
 80034ee:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 80034f0:	210d      	movs	r1, #13
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 80034f8:	200f      	movs	r0, #15
 80034fa:	183b      	adds	r3, r7, r0
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 8003500:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	1dba      	adds	r2, r7, #6
 8003506:	8812      	ldrh	r2, [r2, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d84b      	bhi.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
 800350c:	4b29      	ldr	r3, [pc, #164]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	1d3a      	adds	r2, r7, #4
 8003512:	8812      	ldrh	r2, [r2, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d345      	bcc.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 8003518:	183b      	adds	r3, r7, r0
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	b2da      	uxtb	r2, r3
 800352e:	187b      	adds	r3, r7, r1
 8003530:	3201      	adds	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 8003534:	187b      	adds	r3, r7, r1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d32d      	bcc.n	800359e <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 8003542:	210e      	movs	r1, #14
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e017      	b.n	8003582 <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 8003552:	240e      	movs	r4, #14
 8003554:	193b      	adds	r3, r7, r4
 8003556:	7818      	ldrb	r0, [r3, #0]
 8003558:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	001a      	movs	r2, r3
 800355e:	1dbb      	adds	r3, r7, #6
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	193b      	adds	r3, r7, r4
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	18d3      	adds	r3, r2, r3
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	18d3      	adds	r3, r2, r3
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	0019      	movs	r1, r3
 8003574:	f001 f87a 	bl	800466c <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8003578:	193b      	adds	r3, r7, r4
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	193b      	adds	r3, r7, r4
 800357e:	3201      	adds	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	230e      	movs	r3, #14
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3df      	bcc.n	8003552 <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <ReadHoldingRegistersFunctionRev+0xe0>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	0018      	movs	r0, r3
 8003598:	f001 f886 	bl	80046a8 <ModbusSlaveTransaction>
 800359c:	e002      	b.n	80035a4 <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 800359e:	2003      	movs	r0, #3
 80035a0:	f001 f9ac 	bl	80048fc <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 80035a4:	230f      	movs	r3, #15
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b005      	add	sp, #20
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	2000037a 	.word	0x2000037a
 80035b8:	2000037c 	.word	0x2000037c
 80035bc:	200003c8 	.word	0x200003c8

080035c0 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 80035cc:	4b75      	ldr	r3, [pc, #468]	@ (80037a4 <ModbusMap+0x1e4>)
 80035ce:	78da      	ldrb	r2, [r3, #3]
 80035d0:	4b75      	ldr	r3, [pc, #468]	@ (80037a8 <ModbusMap+0x1e8>)
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <ModbusMap+0x1e8>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	4313      	orrs	r3, r2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2201      	movs	r2, #1
 80035e2:	4053      	eors	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 80035ea:	4b70      	ldr	r3, [pc, #448]	@ (80037ac <ModbusMap+0x1ec>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	e016      	b.n	8003620 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 80035f2:	4b6d      	ldr	r3, [pc, #436]	@ (80037a8 <ModbusMap+0x1e8>)
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 80035fa:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <ModbusMap+0x1ec>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e00e      	b.n	8003620 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 8003602:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <ModbusMap+0x1e8>)
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 800360a:	4b68      	ldr	r3, [pc, #416]	@ (80037ac <ModbusMap+0x1ec>)
 800360c:	2202      	movs	r2, #2
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e006      	b.n	8003620 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 8003612:	4b64      	ldr	r3, [pc, #400]	@ (80037a4 <ModbusMap+0x1e4>)
 8003614:	78db      	ldrb	r3, [r3, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 800361a:	4b64      	ldr	r3, [pc, #400]	@ (80037ac <ModbusMap+0x1ec>)
 800361c:	2206      	movs	r2, #6
 800361e:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 8003620:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <ModbusMap+0x1f0>)
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	001a      	movs	r2, r3
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <ModbusMap+0x1ec>)
 8003628:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 800362a:	4b62      	ldr	r3, [pc, #392]	@ (80037b4 <ModbusMap+0x1f4>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	001a      	movs	r2, r3
 8003630:	4b5e      	ldr	r3, [pc, #376]	@ (80037ac <ModbusMap+0x1ec>)
 8003632:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <ModbusMap+0x1f0>)
 8003636:	789b      	ldrb	r3, [r3, #2]
 8003638:	001a      	movs	r2, r3
 800363a:	4b5c      	ldr	r3, [pc, #368]	@ (80037ac <ModbusMap+0x1ec>)
 800363c:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 800363e:	4b5c      	ldr	r3, [pc, #368]	@ (80037b0 <ModbusMap+0x1f0>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	001a      	movs	r2, r3
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <ModbusMap+0x1ec>)
 8003646:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8003648:	4b57      	ldr	r3, [pc, #348]	@ (80037a8 <ModbusMap+0x1e8>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	001a      	movs	r2, r3
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <ModbusMap+0x1ec>)
 8003650:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 8003652:	4b56      	ldr	r3, [pc, #344]	@ (80037ac <ModbusMap+0x1ec>)
 8003654:	2200      	movs	r2, #0
 8003656:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8003658:	4b54      	ldr	r3, [pc, #336]	@ (80037ac <ModbusMap+0x1ec>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8003660:	4b52      	ldr	r3, [pc, #328]	@ (80037ac <ModbusMap+0x1ec>)
 8003662:	2201      	movs	r2, #1
 8003664:	81da      	strh	r2, [r3, #14]
 8003666:	e002      	b.n	800366e <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <ModbusMap+0x1ec>)
 800366a:	2200      	movs	r2, #0
 800366c:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 800366e:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <ModbusMap+0x1e8>)
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	001a      	movs	r2, r3
 8003674:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <ModbusMap+0x1ec>)
 8003676:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <ModbusMap+0x1e8>)
 800367a:	789b      	ldrb	r3, [r3, #2]
 800367c:	001a      	movs	r2, r3
 800367e:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <ModbusMap+0x1ec>)
 8003680:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <ModbusMap+0x1ec>)
 8003684:	2200      	movs	r2, #0
 8003686:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 8003688:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <ModbusMap+0x1ec>)
 800368a:	2200      	movs	r2, #0
 800368c:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 800368e:	4b45      	ldr	r3, [pc, #276]	@ (80037a4 <ModbusMap+0x1e4>)
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	001a      	movs	r2, r3
 8003694:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <ModbusMap+0x1ec>)
 8003696:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 8003698:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <ModbusMap+0x1ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 800369e:	4b46      	ldr	r3, [pc, #280]	@ (80037b8 <ModbusMap+0x1f8>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4a45      	ldr	r2, [pc, #276]	@ (80037bc <ModbusMap+0x1fc>)
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <ModbusMap+0x200>)
 80036b0:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 80036b2:	4b44      	ldr	r3, [pc, #272]	@ (80037c4 <ModbusMap+0x204>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <ModbusMap+0x208>)
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <ModbusMap+0x200>)
 80036c4:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 80036c6:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <ModbusMap+0x20c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	1c1a      	adds	r2, r3, #0
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	18d3      	adds	r3, r2, r3
 80036d0:	18db      	adds	r3, r3, r3
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <ModbusMap+0x200>)
 80036d6:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <ModbusMap+0x200>)
 80036da:	22dc      	movs	r2, #220	@ 0xdc
 80036dc:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 80036de:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <ModbusMap+0x210>)
 80036e0:	79db      	ldrb	r3, [r3, #7]
 80036e2:	001a      	movs	r2, r3
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <ModbusMap+0x214>)
 80036e6:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <ModbusMap+0x210>)
 80036ea:	799b      	ldrb	r3, [r3, #6]
 80036ec:	001a      	movs	r2, r3
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <ModbusMap+0x214>)
 80036f0:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 80036f2:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <ModbusMap+0x210>)
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	001a      	movs	r2, r3
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <ModbusMap+0x214>)
 80036fa:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 80036fc:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <ModbusMap+0x210>)
 80036fe:	789a      	ldrb	r2, [r3, #2]
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <ModbusMap+0x210>)
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	4313      	orrs	r3, r2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	001a      	movs	r2, r3
 800370a:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <ModbusMap+0x214>)
 800370c:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 800370e:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <ModbusMap+0x214>)
 8003710:	2200      	movs	r2, #0
 8003712:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 8003714:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <ModbusMap+0x210>)
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	4b2d      	ldr	r3, [pc, #180]	@ (80037d0 <ModbusMap+0x210>)
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	4313      	orrs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	001a      	movs	r2, r3
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <ModbusMap+0x214>)
 8003724:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 8003726:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <ModbusMap+0x218>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	001a      	movs	r2, r3
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <ModbusMap+0x214>)
 800372e:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8003730:	4b29      	ldr	r3, [pc, #164]	@ (80037d8 <ModbusMap+0x218>)
 8003732:	799b      	ldrb	r3, [r3, #6]
 8003734:	001a      	movs	r2, r3
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <ModbusMap+0x214>)
 8003738:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 800373a:	4b25      	ldr	r3, [pc, #148]	@ (80037d0 <ModbusMap+0x210>)
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <ModbusMap+0x210>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	4313      	orrs	r3, r2
 8003744:	b2db      	uxtb	r3, r3
 8003746:	001a      	movs	r2, r3
 8003748:	4b22      	ldr	r3, [pc, #136]	@ (80037d4 <ModbusMap+0x214>)
 800374a:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <ModbusMap+0x21c>)
 800374e:	4a24      	ldr	r2, [pc, #144]	@ (80037e0 <ModbusMap+0x220>)
 8003750:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <ModbusMap+0x21c>)
 8003754:	4a23      	ldr	r2, [pc, #140]	@ (80037e4 <ModbusMap+0x224>)
 8003756:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8003758:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <ModbusMap+0x21c>)
 800375a:	22ff      	movs	r2, #255	@ 0xff
 800375c:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 800375e:	f7ff fdc7 	bl	80032f0 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = reePlantilla[eeversion1]*256 + reePlantilla[eeversion2];
 8003762:	4b21      	ldr	r3, [pc, #132]	@ (80037e8 <ModbusMap+0x228>)
 8003764:	227b      	movs	r2, #123	@ 0x7b
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	b29b      	uxth	r3, r3
 800376c:	4a1e      	ldr	r2, [pc, #120]	@ (80037e8 <ModbusMap+0x228>)
 800376e:	217c      	movs	r1, #124	@ 0x7c
 8003770:	5c52      	ldrb	r2, [r2, r1]
 8003772:	189b      	adds	r3, r3, r2
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <ModbusMap+0x22c>)
 8003778:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 800377a:	f001 f973 	bl	8004a64 <ModbusSlavePool>
 800377e:	0002      	movs	r2, r0
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <ModbusMap+0x1d0>
 800378c:	f000 fe7d 	bl	800448a <ModbusMap+0xeca>
	    asm ("nop");
 8003790:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 8003792:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <ModbusMap+0x230>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d02c      	beq.n	80037f4 <ModbusMap+0x234>
 800379a:	2b06      	cmp	r3, #6
 800379c:	d100      	bne.n	80037a0 <ModbusMap+0x1e0>
 800379e:	e185      	b.n	8003aac <ModbusMap+0x4ec>
 80037a0:	f000 fe36 	bl	8004410 <ModbusMap+0xe50>
 80037a4:	20000bd4 	.word	0x20000bd4
 80037a8:	20000c98 	.word	0x20000c98
 80037ac:	20000050 	.word	0x20000050
 80037b0:	20000c00 	.word	0x20000c00
 80037b4:	20000c3c 	.word	0x20000c3c
 80037b8:	20000c0c 	.word	0x20000c0c
 80037bc:	20000c0d 	.word	0x20000c0d
 80037c0:	2000006c 	.word	0x2000006c
 80037c4:	20000c0e 	.word	0x20000c0e
 80037c8:	20000c0f 	.word	0x20000c0f
 80037cc:	20000c2a 	.word	0x20000c2a
 80037d0:	20000be4 	.word	0x20000be4
 80037d4:	20000074 	.word	0x20000074
 80037d8:	20000bdc 	.word	0x20000bdc
 80037dc:	20000088 	.word	0x20000088
 80037e0:	ffffb4a2 	.word	0xffffb4a2
 80037e4:	ffffeb4f 	.word	0xffffeb4f
 80037e8:	20000ce8 	.word	0x20000ce8
 80037ec:	20000090 	.word	0x20000090
 80037f0:	200003c8 	.word	0x200003c8
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 80037f4:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 80037f6:	4bdf      	ldr	r3, [pc, #892]	@ (8003b74 <ModbusMap+0x5b4>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(reePlantilla[eeescala] == 32)
 80037fc:	4bde      	ldr	r3, [pc, #888]	@ (8003b78 <ModbusMap+0x5b8>)
 80037fe:	2252      	movs	r2, #82	@ 0x52
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	2b20      	cmp	r3, #32
 8003804:	d102      	bne.n	800380c <ModbusMap+0x24c>
					PNU_0x3002 = 1;
 8003806:	4bdb      	ldr	r3, [pc, #876]	@ (8003b74 <ModbusMap+0x5b4>)
 8003808:	2201      	movs	r2, #1
 800380a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eespdiur_L]);
 800380c:	4bdb      	ldr	r3, [pc, #876]	@ (8003b7c <ModbusMap+0x5bc>)
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff fc18 	bl	8003044 <findLastValue>
 8003814:	0003      	movs	r3, r0
 8003816:	b29b      	uxth	r3, r3
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b29c      	uxth	r4, r3
 800381c:	4bd8      	ldr	r3, [pc, #864]	@ (8003b80 <ModbusMap+0x5c0>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7ff fc10 	bl	8003044 <findLastValue>
 8003824:	0003      	movs	r3, r0
 8003826:	b29b      	uxth	r3, r3
 8003828:	18e3      	adds	r3, r4, r3
 800382a:	b29a      	uxth	r2, r3
 800382c:	4bd5      	ldr	r3, [pc, #852]	@ (8003b84 <ModbusMap+0x5c4>)
 800382e:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = reePlantilla[eedifdiur_H] * 256 + reePlantilla[eedifdiur_L];
 8003830:	4bd1      	ldr	r3, [pc, #836]	@ (8003b78 <ModbusMap+0x5b8>)
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	b29b      	uxth	r3, r3
 8003838:	4acf      	ldr	r2, [pc, #828]	@ (8003b78 <ModbusMap+0x5b8>)
 800383a:	7912      	ldrb	r2, [r2, #4]
 800383c:	189b      	adds	r3, r3, r2
 800383e:	b29a      	uxth	r2, r3
 8003840:	4bd1      	ldr	r3, [pc, #836]	@ (8003b88 <ModbusMap+0x5c8>)
 8003842:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = reePlantilla[eeAddModBus];
 8003844:	4bcc      	ldr	r3, [pc, #816]	@ (8003b78 <ModbusMap+0x5b8>)
 8003846:	2272      	movs	r2, #114	@ 0x72
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	001a      	movs	r2, r3
 800384c:	4bcf      	ldr	r3, [pc, #828]	@ (8003b8c <ModbusMap+0x5cc>)
 800384e:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = reePlantilla[eetimepa];
 8003850:	4bc9      	ldr	r3, [pc, #804]	@ (8003b78 <ModbusMap+0x5b8>)
 8003852:	2249      	movs	r2, #73	@ 0x49
 8003854:	5c9b      	ldrb	r3, [r3, r2]
 8003856:	001a      	movs	r2, r3
 8003858:	4bcd      	ldr	r3, [pc, #820]	@ (8003b90 <ModbusMap+0x5d0>)
 800385a:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 800385c:	4acd      	ldr	r2, [pc, #820]	@ (8003b94 <ModbusMap+0x5d4>)
 800385e:	230e      	movs	r3, #14
 8003860:	33ff      	adds	r3, #255	@ 0xff
 8003862:	0019      	movs	r1, r3
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fe37 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <ModbusMap+0x2b6>
 8003872:	f000 fdd1 	bl	8004418 <ModbusMap+0xe58>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 8003876:	4ac8      	ldr	r2, [pc, #800]	@ (8003b98 <ModbusMap+0x5d8>)
 8003878:	49c8      	ldr	r1, [pc, #800]	@ (8003b9c <ModbusMap+0x5dc>)
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fe2c 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <ModbusMap+0x2cc>
 8003888:	f000 fdc8 	bl	800441c <ModbusMap+0xe5c>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 800388c:	4ac4      	ldr	r2, [pc, #784]	@ (8003ba0 <ModbusMap+0x5e0>)
 800388e:	2382      	movs	r3, #130	@ 0x82
 8003890:	0099      	lsls	r1, r3, #2
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fe20 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d001      	beq.n	80038a4 <ModbusMap+0x2e4>
 80038a0:	f000 fdbe 	bl	8004420 <ModbusMap+0xe60>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 80038a4:	4abf      	ldr	r2, [pc, #764]	@ (8003ba4 <ModbusMap+0x5e4>)
 80038a6:	49c0      	ldr	r1, [pc, #768]	@ (8003ba8 <ModbusMap+0x5e8>)
 80038a8:	23c0      	movs	r3, #192	@ 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fe15 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <ModbusMap+0x2fa>
 80038b6:	f000 fdb5 	bl	8004424 <ModbusMap+0xe64>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 80038ba:	4abc      	ldr	r2, [pc, #752]	@ (8003bac <ModbusMap+0x5ec>)
 80038bc:	23c4      	movs	r3, #196	@ 0xc4
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	23c4      	movs	r3, #196	@ 0xc4
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fe09 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <ModbusMap+0x312>
 80038ce:	f000 fdab 	bl	8004428 <ModbusMap+0xe68>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 80038d2:	4bb7      	ldr	r3, [pc, #732]	@ (8003bb0 <ModbusMap+0x5f0>)
 80038d4:	001a      	movs	r2, r3
 80038d6:	2110      	movs	r1, #16
 80038d8:	2010      	movs	r0, #16
 80038da:	f7ff fdff 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <ModbusMap+0x326>
 80038e2:	f000 fda3 	bl	800442c <ModbusMap+0xe6c>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 80038e6:	4ab3      	ldr	r2, [pc, #716]	@ (8003bb4 <ModbusMap+0x5f4>)
 80038e8:	23c0      	movs	r3, #192	@ 0xc0
 80038ea:	0199      	lsls	r1, r3, #6
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff fdf3 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <ModbusMap+0x33e>
 80038fa:	f000 fd99 	bl	8004430 <ModbusMap+0xe70>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 80038fe:	4b9d      	ldr	r3, [pc, #628]	@ (8003b74 <ModbusMap+0x5b4>)
 8003900:	49ad      	ldr	r1, [pc, #692]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003902:	48ad      	ldr	r0, [pc, #692]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003904:	001a      	movs	r2, r3
 8003906:	f7ff fde9 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d001      	beq.n	8003912 <ModbusMap+0x352>
 800390e:	f000 fd91 	bl	8004434 <ModbusMap+0xe74>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8003912:	4b9c      	ldr	r3, [pc, #624]	@ (8003b84 <ModbusMap+0x5c4>)
 8003914:	49a9      	ldr	r1, [pc, #676]	@ (8003bbc <ModbusMap+0x5fc>)
 8003916:	48a9      	ldr	r0, [pc, #676]	@ (8003bbc <ModbusMap+0x5fc>)
 8003918:	001a      	movs	r2, r3
 800391a:	f7ff fddf 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <ModbusMap+0x366>
 8003922:	f000 fd89 	bl	8004438 <ModbusMap+0xe78>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 8003926:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <ModbusMap+0x5c8>)
 8003928:	49a5      	ldr	r1, [pc, #660]	@ (8003bc0 <ModbusMap+0x600>)
 800392a:	48a5      	ldr	r0, [pc, #660]	@ (8003bc0 <ModbusMap+0x600>)
 800392c:	001a      	movs	r2, r3
 800392e:	f7ff fdd5 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d001      	beq.n	800393a <ModbusMap+0x37a>
 8003936:	f000 fd81 	bl	800443c <ModbusMap+0xe7c>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 800393a:	4ba2      	ldr	r3, [pc, #648]	@ (8003bc4 <ModbusMap+0x604>)
 800393c:	49a2      	ldr	r1, [pc, #648]	@ (8003bc8 <ModbusMap+0x608>)
 800393e:	48a2      	ldr	r0, [pc, #648]	@ (8003bc8 <ModbusMap+0x608>)
 8003940:	001a      	movs	r2, r3
 8003942:	f7ff fdcb 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d001      	beq.n	800394e <ModbusMap+0x38e>
 800394a:	f000 fd79 	bl	8004440 <ModbusMap+0xe80>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 800394e:	4b9f      	ldr	r3, [pc, #636]	@ (8003bcc <ModbusMap+0x60c>)
 8003950:	499f      	ldr	r1, [pc, #636]	@ (8003bd0 <ModbusMap+0x610>)
 8003952:	489f      	ldr	r0, [pc, #636]	@ (8003bd0 <ModbusMap+0x610>)
 8003954:	001a      	movs	r2, r3
 8003956:	f7ff fdc1 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <ModbusMap+0x3a2>
 800395e:	f000 fd71 	bl	8004444 <ModbusMap+0xe84>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8003962:	4b9c      	ldr	r3, [pc, #624]	@ (8003bd4 <ModbusMap+0x614>)
 8003964:	499c      	ldr	r1, [pc, #624]	@ (8003bd8 <ModbusMap+0x618>)
 8003966:	489c      	ldr	r0, [pc, #624]	@ (8003bd8 <ModbusMap+0x618>)
 8003968:	001a      	movs	r2, r3
 800396a:	f7ff fdb7 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <ModbusMap+0x3b6>
 8003972:	f000 fd69 	bl	8004448 <ModbusMap+0xe88>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 8003976:	4b99      	ldr	r3, [pc, #612]	@ (8003bdc <ModbusMap+0x61c>)
 8003978:	4999      	ldr	r1, [pc, #612]	@ (8003be0 <ModbusMap+0x620>)
 800397a:	4899      	ldr	r0, [pc, #612]	@ (8003be0 <ModbusMap+0x620>)
 800397c:	001a      	movs	r2, r3
 800397e:	f7ff fdad 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <ModbusMap+0x3ca>
 8003986:	f000 fd61 	bl	800444c <ModbusMap+0xe8c>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800398a:	4b96      	ldr	r3, [pc, #600]	@ (8003be4 <ModbusMap+0x624>)
 800398c:	4996      	ldr	r1, [pc, #600]	@ (8003be8 <ModbusMap+0x628>)
 800398e:	4896      	ldr	r0, [pc, #600]	@ (8003be8 <ModbusMap+0x628>)
 8003990:	001a      	movs	r2, r3
 8003992:	f7ff fda3 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <ModbusMap+0x3de>
 800399a:	f000 fd59 	bl	8004450 <ModbusMap+0xe90>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 800399e:	4b93      	ldr	r3, [pc, #588]	@ (8003bec <ModbusMap+0x62c>)
 80039a0:	4993      	ldr	r1, [pc, #588]	@ (8003bf0 <ModbusMap+0x630>)
 80039a2:	4893      	ldr	r0, [pc, #588]	@ (8003bf0 <ModbusMap+0x630>)
 80039a4:	001a      	movs	r2, r3
 80039a6:	f7ff fd99 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <ModbusMap+0x3f2>
 80039ae:	f000 fd51 	bl	8004454 <ModbusMap+0xe94>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 80039b2:	4b90      	ldr	r3, [pc, #576]	@ (8003bf4 <ModbusMap+0x634>)
 80039b4:	4990      	ldr	r1, [pc, #576]	@ (8003bf8 <ModbusMap+0x638>)
 80039b6:	4890      	ldr	r0, [pc, #576]	@ (8003bf8 <ModbusMap+0x638>)
 80039b8:	001a      	movs	r2, r3
 80039ba:	f7ff fd8f 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d001      	beq.n	80039c6 <ModbusMap+0x406>
 80039c2:	f000 fd49 	bl	8004458 <ModbusMap+0xe98>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 80039c6:	4b8d      	ldr	r3, [pc, #564]	@ (8003bfc <ModbusMap+0x63c>)
 80039c8:	498d      	ldr	r1, [pc, #564]	@ (8003c00 <ModbusMap+0x640>)
 80039ca:	488d      	ldr	r0, [pc, #564]	@ (8003c00 <ModbusMap+0x640>)
 80039cc:	001a      	movs	r2, r3
 80039ce:	f7ff fd85 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d001      	beq.n	80039da <ModbusMap+0x41a>
 80039d6:	f000 fd41 	bl	800445c <ModbusMap+0xe9c>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 80039da:	4b8a      	ldr	r3, [pc, #552]	@ (8003c04 <ModbusMap+0x644>)
 80039dc:	498a      	ldr	r1, [pc, #552]	@ (8003c08 <ModbusMap+0x648>)
 80039de:	488a      	ldr	r0, [pc, #552]	@ (8003c08 <ModbusMap+0x648>)
 80039e0:	001a      	movs	r2, r3
 80039e2:	f7ff fd7b 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d001      	beq.n	80039ee <ModbusMap+0x42e>
 80039ea:	f000 fd39 	bl	8004460 <ModbusMap+0xea0>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 80039ee:	4b87      	ldr	r3, [pc, #540]	@ (8003c0c <ModbusMap+0x64c>)
 80039f0:	4987      	ldr	r1, [pc, #540]	@ (8003c10 <ModbusMap+0x650>)
 80039f2:	4887      	ldr	r0, [pc, #540]	@ (8003c10 <ModbusMap+0x650>)
 80039f4:	001a      	movs	r2, r3
 80039f6:	f7ff fd71 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <ModbusMap+0x442>
 80039fe:	f000 fd31 	bl	8004464 <ModbusMap+0xea4>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8003a02:	4b84      	ldr	r3, [pc, #528]	@ (8003c14 <ModbusMap+0x654>)
 8003a04:	4984      	ldr	r1, [pc, #528]	@ (8003c18 <ModbusMap+0x658>)
 8003a06:	4884      	ldr	r0, [pc, #528]	@ (8003c18 <ModbusMap+0x658>)
 8003a08:	001a      	movs	r2, r3
 8003a0a:	f7ff fd67 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <ModbusMap+0x456>
 8003a12:	f000 fd29 	bl	8004468 <ModbusMap+0xea8>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 8003a16:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <ModbusMap+0x5cc>)
 8003a18:	4980      	ldr	r1, [pc, #512]	@ (8003c1c <ModbusMap+0x65c>)
 8003a1a:	4880      	ldr	r0, [pc, #512]	@ (8003c1c <ModbusMap+0x65c>)
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	f7ff fd5d 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <ModbusMap+0x46a>
 8003a26:	f000 fd21 	bl	800446c <ModbusMap+0xeac>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 8003a2a:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <ModbusMap+0x5d0>)
 8003a2c:	497c      	ldr	r1, [pc, #496]	@ (8003c20 <ModbusMap+0x660>)
 8003a2e:	487c      	ldr	r0, [pc, #496]	@ (8003c20 <ModbusMap+0x660>)
 8003a30:	001a      	movs	r2, r3
 8003a32:	f7ff fd53 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <ModbusMap+0x47e>
 8003a3a:	f000 fd19 	bl	8004470 <ModbusMap+0xeb0>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8003a3e:	4b79      	ldr	r3, [pc, #484]	@ (8003c24 <ModbusMap+0x664>)
 8003a40:	4979      	ldr	r1, [pc, #484]	@ (8003c28 <ModbusMap+0x668>)
 8003a42:	4879      	ldr	r0, [pc, #484]	@ (8003c28 <ModbusMap+0x668>)
 8003a44:	001a      	movs	r2, r3
 8003a46:	f7ff fd49 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <ModbusMap+0x492>
 8003a4e:	f000 fd11 	bl	8004474 <ModbusMap+0xeb4>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8003a52:	4b76      	ldr	r3, [pc, #472]	@ (8003c2c <ModbusMap+0x66c>)
 8003a54:	4976      	ldr	r1, [pc, #472]	@ (8003c30 <ModbusMap+0x670>)
 8003a56:	4876      	ldr	r0, [pc, #472]	@ (8003c30 <ModbusMap+0x670>)
 8003a58:	001a      	movs	r2, r3
 8003a5a:	f7ff fd3f 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <ModbusMap+0x4a6>
 8003a62:	f000 fd09 	bl	8004478 <ModbusMap+0xeb8>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 8003a66:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <ModbusMap+0x674>)
 8003a68:	4973      	ldr	r1, [pc, #460]	@ (8003c38 <ModbusMap+0x678>)
 8003a6a:	4873      	ldr	r0, [pc, #460]	@ (8003c38 <ModbusMap+0x678>)
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	f7ff fd35 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <ModbusMap+0x4ba>
 8003a76:	f000 fd01 	bl	800447c <ModbusMap+0xebc>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 8003a7a:	4b70      	ldr	r3, [pc, #448]	@ (8003c3c <ModbusMap+0x67c>)
 8003a7c:	4970      	ldr	r1, [pc, #448]	@ (8003c40 <ModbusMap+0x680>)
 8003a7e:	4870      	ldr	r0, [pc, #448]	@ (8003c40 <ModbusMap+0x680>)
 8003a80:	001a      	movs	r2, r3
 8003a82:	f7ff fd2b 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a86:	1e03      	subs	r3, r0, #0
 8003a88:	d001      	beq.n	8003a8e <ModbusMap+0x4ce>
 8003a8a:	f000 fcf9 	bl	8004480 <ModbusMap+0xec0>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c44 <ModbusMap+0x684>)
 8003a90:	496d      	ldr	r1, [pc, #436]	@ (8003c48 <ModbusMap+0x688>)
 8003a92:	486d      	ldr	r0, [pc, #436]	@ (8003c48 <ModbusMap+0x688>)
 8003a94:	001a      	movs	r2, r3
 8003a96:	f7ff fd21 	bl	80034dc <ReadHoldingRegistersFunctionRev>
 8003a9a:	1e03      	subs	r3, r0, #0
 8003a9c:	d001      	beq.n	8003aa2 <ModbusMap+0x4e2>
 8003a9e:	f000 fcf1 	bl	8004484 <ModbusMap+0xec4>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f000 ff2a 	bl	80048fc <ModbusSlaveExceptionTransaction>
				}
				break;
 8003aa8:	f000 fcef 	bl	800448a <ModbusMap+0xeca>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 8003aac:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <ModbusMap+0x68c>)
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	23c0      	movs	r3, #192	@ 0xc0
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d310      	bcc.n	8003ada <ModbusMap+0x51a>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	@ (8003c4c <ModbusMap+0x68c>)
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	23c0      	movs	r3, #192	@ 0xc0
 8003abe:	019b      	lsls	r3, r3, #6
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d80a      	bhi.n	8003ada <ModbusMap+0x51a>
					PNU_0x3000 = lowByte(_u16WriteVal);
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <ModbusMap+0x690>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	4b39      	ldr	r3, [pc, #228]	@ (8003bb4 <ModbusMap+0x5f4>)
 8003ace:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ad0:	4b60      	ldr	r3, [pc, #384]	@ (8003c54 <ModbusMap+0x694>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fde7 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 8003ada:	4b5c      	ldr	r3, [pc, #368]	@ (8003c4c <ModbusMap+0x68c>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	4a5e      	ldr	r2, [pc, #376]	@ (8003c58 <ModbusMap+0x698>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d800      	bhi.n	8003ae6 <ModbusMap+0x526>
 8003ae4:	e0c4      	b.n	8003c70 <ModbusMap+0x6b0>
 8003ae6:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <ModbusMap+0x68c>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	@ (8003bb8 <ModbusMap+0x5f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d900      	bls.n	8003af2 <ModbusMap+0x532>
 8003af0:	e0be      	b.n	8003c70 <ModbusMap+0x6b0>
					PNU_0x3002 = lowByte(_u16WriteVal);
 8003af2:	4b57      	ldr	r3, [pc, #348]	@ (8003c50 <ModbusMap+0x690>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	001a      	movs	r2, r3
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <ModbusMap+0x5b4>)
 8003afc:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <ModbusMap+0x5b4>)
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d118      	bne.n	8003b38 <ModbusMap+0x578>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala] == 32){
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b08:	2252      	movs	r2, #82	@ 0x52
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d101      	bne.n	8003b14 <ModbusMap+0x554>
							asm ("nop");
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	e011      	b.n	8003b38 <ModbusMap+0x578>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 8003b14:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <ModbusMap+0x69c>)
 8003b16:	2220      	movs	r2, #32
 8003b18:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8003b1a:	4b50      	ldr	r3, [pc, #320]	@ (8003c5c <ModbusMap+0x69c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	001a      	movs	r2, r3
 8003b20:	4b4f      	ldr	r3, [pc, #316]	@ (8003c60 <ModbusMap+0x6a0>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f003 fd55 	bl	80075d4 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c5c <ModbusMap+0x69c>)
 8003b2c:	7819      	ldrb	r1, [r3, #0]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b30:	2252      	movs	r2, #82	@ 0x52
 8003b32:	5499      	strb	r1, [r3, r2]
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	e7fd      	b.n	8003b34 <ModbusMap+0x574>
						}
					}
					if (PNU_0x3002 == 0){
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <ModbusMap+0x5b4>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d000      	beq.n	8003b42 <ModbusMap+0x582>
 8003b40:	e091      	b.n	8003c66 <ModbusMap+0x6a6>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala]== 32){
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b44:	2252      	movs	r2, #82	@ 0x52
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d000      	beq.n	8003b4e <ModbusMap+0x58e>
 8003b4c:	e08a      	b.n	8003c64 <ModbusMap+0x6a4>
							waux = 0;//mov			waux,#0;	/ Carga
 8003b4e:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <ModbusMap+0x69c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 8003b54:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <ModbusMap+0x69c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <ModbusMap+0x6a0>)
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	0010      	movs	r0, r2
 8003b60:	f003 fd38 	bl	80075d4 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b64:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <ModbusMap+0x69c>)
 8003b66:	7819      	ldrb	r1, [r3, #0]
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <ModbusMap+0x5b8>)
 8003b6a:	2252      	movs	r2, #82	@ 0x52
 8003b6c:	5499      	strb	r1, [r3, r2]
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	e7fd      	b.n	8003b6e <ModbusMap+0x5ae>
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	20000b64 	.word	0x20000b64
 8003b78:	20000ce8 	.word	0x20000ce8
 8003b7c:	0803f001 	.word	0x0803f001
 8003b80:	0803f002 	.word	0x0803f002
 8003b84:	20000094 	.word	0x20000094
 8003b88:	20000096 	.word	0x20000096
 8003b8c:	200000aa 	.word	0x200000aa
 8003b90:	200000ac 	.word	0x200000ac
 8003b94:	20000050 	.word	0x20000050
 8003b98:	2000006c 	.word	0x2000006c
 8003b9c:	00002003 	.word	0x00002003
 8003ba0:	20000074 	.word	0x20000074
 8003ba4:	20000088 	.word	0x20000088
 8003ba8:	00000302 	.word	0x00000302
 8003bac:	20000090 	.word	0x20000090
 8003bb0:	20000b62 	.word	0x20000b62
 8003bb4:	20000092 	.word	0x20000092
 8003bb8:	00003002 	.word	0x00003002
 8003bbc:	00003004 	.word	0x00003004
 8003bc0:	00003006 	.word	0x00003006
 8003bc4:	20000098 	.word	0x20000098
 8003bc8:	00003008 	.word	0x00003008
 8003bcc:	20000b66 	.word	0x20000b66
 8003bd0:	0000300a 	.word	0x0000300a
 8003bd4:	2000009a 	.word	0x2000009a
 8003bd8:	0000300c 	.word	0x0000300c
 8003bdc:	20000b68 	.word	0x20000b68
 8003be0:	0000300e 	.word	0x0000300e
 8003be4:	2000009c 	.word	0x2000009c
 8003be8:	00003010 	.word	0x00003010
 8003bec:	2000009e 	.word	0x2000009e
 8003bf0:	00003012 	.word	0x00003012
 8003bf4:	200000a0 	.word	0x200000a0
 8003bf8:	00003014 	.word	0x00003014
 8003bfc:	200000a2 	.word	0x200000a2
 8003c00:	00003016 	.word	0x00003016
 8003c04:	200000a4 	.word	0x200000a4
 8003c08:	00003018 	.word	0x00003018
 8003c0c:	200000a6 	.word	0x200000a6
 8003c10:	0000301a 	.word	0x0000301a
 8003c14:	200000a8 	.word	0x200000a8
 8003c18:	0000301c 	.word	0x0000301c
 8003c1c:	0000301e 	.word	0x0000301e
 8003c20:	00003104 	.word	0x00003104
 8003c24:	200000ae 	.word	0x200000ae
 8003c28:	00003106 	.word	0x00003106
 8003c2c:	200000b0 	.word	0x200000b0
 8003c30:	00003108 	.word	0x00003108
 8003c34:	200000b2 	.word	0x200000b2
 8003c38:	0000310a 	.word	0x0000310a
 8003c3c:	200000b4 	.word	0x200000b4
 8003c40:	0000310c 	.word	0x0000310c
 8003c44:	200000b6 	.word	0x200000b6
 8003c48:	0000310e 	.word	0x0000310e
 8003c4c:	2000037e 	.word	0x2000037e
 8003c50:	20000380 	.word	0x20000380
 8003c54:	200003c8 	.word	0x200003c8
 8003c58:	00003001 	.word	0x00003001
 8003c5c:	20000bb2 	.word	0x20000bb2
 8003c60:	0803f052 	.word	0x0803f052
						}
						else{
							asm ("nop");
 8003c64:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c66:	4bbd      	ldr	r3, [pc, #756]	@ (8003f5c <ModbusMap+0x99c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fd1c 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 8003c70:	4bbb      	ldr	r3, [pc, #748]	@ (8003f60 <ModbusMap+0x9a0>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4abb      	ldr	r2, [pc, #748]	@ (8003f64 <ModbusMap+0x9a4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d92e      	bls.n	8003cd8 <ModbusMap+0x718>
 8003c7a:	4bb9      	ldr	r3, [pc, #740]	@ (8003f60 <ModbusMap+0x9a0>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	4aba      	ldr	r2, [pc, #744]	@ (8003f68 <ModbusMap+0x9a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d829      	bhi.n	8003cd8 <ModbusMap+0x718>
					PNU_0x3004 = _u16WriteVal;
 8003c84:	4bb9      	ldr	r3, [pc, #740]	@ (8003f6c <ModbusMap+0x9ac>)
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	4bb9      	ldr	r3, [pc, #740]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c8a:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8003c8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4bb7      	ldr	r3, [pc, #732]	@ (8003f74 <ModbusMap+0x9b4>)
 8003c98:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 8003c9a:	4bb5      	ldr	r3, [pc, #724]	@ (8003f70 <ModbusMap+0x9b0>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4bb5      	ldr	r3, [pc, #724]	@ (8003f78 <ModbusMap+0x9b8>)
 8003ca2:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 8003ca4:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <ModbusMap+0x9b4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	001a      	movs	r2, r3
 8003caa:	4bb4      	ldr	r3, [pc, #720]	@ (8003f7c <ModbusMap+0x9bc>)
 8003cac:	0019      	movs	r1, r3
 8003cae:	0010      	movs	r0, r2
 8003cb0:	f003 fc90 	bl	80075d4 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f78 <ModbusMap+0x9b8>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	001a      	movs	r2, r3
 8003cba:	4bb1      	ldr	r3, [pc, #708]	@ (8003f80 <ModbusMap+0x9c0>)
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	f003 fc88 	bl	80075d4 <wreeprom>

					reePlantilla[eespdiur_H] = waux;
 8003cc4:	4bab      	ldr	r3, [pc, #684]	@ (8003f74 <ModbusMap+0x9b4>)
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4bae      	ldr	r3, [pc, #696]	@ (8003f84 <ModbusMap+0x9c4>)
 8003cca:	705a      	strb	r2, [r3, #1]
					reePlantilla[eespdiur_L] = wreg;
 8003ccc:	4baa      	ldr	r3, [pc, #680]	@ (8003f78 <ModbusMap+0x9b8>)
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	4bac      	ldr	r3, [pc, #688]	@ (8003f84 <ModbusMap+0x9c4>)
 8003cd2:	709a      	strb	r2, [r3, #2]

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	e7fd      	b.n	8003cd4 <ModbusMap+0x714>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 8003cd8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f60 <ModbusMap+0x9a0>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4aaa      	ldr	r2, [pc, #680]	@ (8003f88 <ModbusMap+0x9c8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d92e      	bls.n	8003d40 <ModbusMap+0x780>
 8003ce2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	4aa9      	ldr	r2, [pc, #676]	@ (8003f8c <ModbusMap+0x9cc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d829      	bhi.n	8003d40 <ModbusMap+0x780>
					PNU_0x3006 = _u16WriteVal;
 8003cec:	4b9f      	ldr	r3, [pc, #636]	@ (8003f6c <ModbusMap+0x9ac>)
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	@ (8003f90 <ModbusMap+0x9d0>)
 8003cf2:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 8003cf4:	4ba6      	ldr	r3, [pc, #664]	@ (8003f90 <ModbusMap+0x9d0>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4b9d      	ldr	r3, [pc, #628]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d00:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 8003d02:	4ba3      	ldr	r3, [pc, #652]	@ (8003f90 <ModbusMap+0x9d0>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b9b      	ldr	r3, [pc, #620]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d0a:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8003d0c:	4b99      	ldr	r3, [pc, #612]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	001a      	movs	r2, r3
 8003d12:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <ModbusMap+0x9d4>)
 8003d14:	0019      	movs	r1, r3
 8003d16:	0010      	movs	r0, r2
 8003d18:	f003 fc5c 	bl	80075d4 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8003d1c:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	001a      	movs	r2, r3
 8003d22:	4b9d      	ldr	r3, [pc, #628]	@ (8003f98 <ModbusMap+0x9d8>)
 8003d24:	0019      	movs	r1, r3
 8003d26:	0010      	movs	r0, r2
 8003d28:	f003 fc54 	bl	80075d4 <wreeprom>

					reePlantilla[eedifdiur_H] = waux;
 8003d2c:	4b91      	ldr	r3, [pc, #580]	@ (8003f74 <ModbusMap+0x9b4>)
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	4b94      	ldr	r3, [pc, #592]	@ (8003f84 <ModbusMap+0x9c4>)
 8003d32:	70da      	strb	r2, [r3, #3]
					reePlantilla[eedifdiur_L] = wreg;
 8003d34:	4b90      	ldr	r3, [pc, #576]	@ (8003f78 <ModbusMap+0x9b8>)
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	4b92      	ldr	r3, [pc, #584]	@ (8003f84 <ModbusMap+0x9c4>)
 8003d3a:	711a      	strb	r2, [r3, #4]

			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	e7fd      	b.n	8003d3c <ModbusMap+0x77c>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 8003d40:	4b87      	ldr	r3, [pc, #540]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	4a95      	ldr	r2, [pc, #596]	@ (8003f9c <ModbusMap+0x9dc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d90f      	bls.n	8003d6a <ModbusMap+0x7aa>
 8003d4a:	4b85      	ldr	r3, [pc, #532]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	4a94      	ldr	r2, [pc, #592]	@ (8003fa0 <ModbusMap+0x9e0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d80a      	bhi.n	8003d6a <ModbusMap+0x7aa>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8003d54:	4b85      	ldr	r3, [pc, #532]	@ (8003f6c <ModbusMap+0x9ac>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	4b91      	ldr	r3, [pc, #580]	@ (8003fa4 <ModbusMap+0x9e4>)
 8003d5e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d60:	4b7e      	ldr	r3, [pc, #504]	@ (8003f5c <ModbusMap+0x99c>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 fc9f 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	4a8e      	ldr	r2, [pc, #568]	@ (8003fa8 <ModbusMap+0x9e8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d90f      	bls.n	8003d94 <ModbusMap+0x7d4>
 8003d74:	4b7a      	ldr	r3, [pc, #488]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	4a8c      	ldr	r2, [pc, #560]	@ (8003fac <ModbusMap+0x9ec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d80a      	bhi.n	8003d94 <ModbusMap+0x7d4>
					PNU_0x300A = lowByte(_u16WriteVal);
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f6c <ModbusMap+0x9ac>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	001a      	movs	r2, r3
 8003d86:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb0 <ModbusMap+0x9f0>)
 8003d88:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d8a:	4b74      	ldr	r3, [pc, #464]	@ (8003f5c <ModbusMap+0x99c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fc8a 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8003d94:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <ModbusMap+0x9a0>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	4a86      	ldr	r2, [pc, #536]	@ (8003fb4 <ModbusMap+0x9f4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d90f      	bls.n	8003dbe <ModbusMap+0x7fe>
 8003d9e:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <ModbusMap+0x9a0>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	4a85      	ldr	r2, [pc, #532]	@ (8003fb8 <ModbusMap+0x9f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d80a      	bhi.n	8003dbe <ModbusMap+0x7fe>
					PNU_0x300C = lowByte(_u16WriteVal);
 8003da8:	4b70      	ldr	r3, [pc, #448]	@ (8003f6c <ModbusMap+0x9ac>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	001a      	movs	r2, r3
 8003db0:	4b82      	ldr	r3, [pc, #520]	@ (8003fbc <ModbusMap+0x9fc>)
 8003db2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003db4:	4b69      	ldr	r3, [pc, #420]	@ (8003f5c <ModbusMap+0x99c>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fc75 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 8003dbe:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc0 <ModbusMap+0xa00>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d90f      	bls.n	8003de8 <ModbusMap+0x828>
 8003dc8:	4b65      	ldr	r3, [pc, #404]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <ModbusMap+0xa04>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d80a      	bhi.n	8003de8 <ModbusMap+0x828>
					PNU_0x300E = lowByte(_u16WriteVal);
 8003dd2:	4b66      	ldr	r3, [pc, #408]	@ (8003f6c <ModbusMap+0x9ac>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	001a      	movs	r2, r3
 8003dda:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc8 <ModbusMap+0xa08>)
 8003ddc:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dde:	4b5f      	ldr	r3, [pc, #380]	@ (8003f5c <ModbusMap+0x99c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fc60 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 8003de8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f60 <ModbusMap+0x9a0>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	4a77      	ldr	r2, [pc, #476]	@ (8003fcc <ModbusMap+0xa0c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d90f      	bls.n	8003e12 <ModbusMap+0x852>
 8003df2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f60 <ModbusMap+0x9a0>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	4a76      	ldr	r2, [pc, #472]	@ (8003fd0 <ModbusMap+0xa10>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d80a      	bhi.n	8003e12 <ModbusMap+0x852>
					PNU_0x3010 = lowByte(_u16WriteVal);
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <ModbusMap+0x9ac>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	001a      	movs	r2, r3
 8003e04:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <ModbusMap+0xa14>)
 8003e06:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e08:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <ModbusMap+0x99c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fc4b 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	4a70      	ldr	r2, [pc, #448]	@ (8003fd8 <ModbusMap+0xa18>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d90f      	bls.n	8003e3c <ModbusMap+0x87c>
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <ModbusMap+0xa1c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d80a      	bhi.n	8003e3c <ModbusMap+0x87c>
					PNU_0x3012 = lowByte(_u16WriteVal);
 8003e26:	4b51      	ldr	r3, [pc, #324]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe0 <ModbusMap+0xa20>)
 8003e30:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e32:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <ModbusMap+0x99c>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 fc36 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8003e3c:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	4a68      	ldr	r2, [pc, #416]	@ (8003fe4 <ModbusMap+0xa24>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90f      	bls.n	8003e66 <ModbusMap+0x8a6>
 8003e46:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	4a67      	ldr	r2, [pc, #412]	@ (8003fe8 <ModbusMap+0xa28>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d80a      	bhi.n	8003e66 <ModbusMap+0x8a6>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8003e50:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	001a      	movs	r2, r3
 8003e58:	4b64      	ldr	r3, [pc, #400]	@ (8003fec <ModbusMap+0xa2c>)
 8003e5a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f5c <ModbusMap+0x99c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 fc21 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	4a61      	ldr	r2, [pc, #388]	@ (8003ff0 <ModbusMap+0xa30>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d90f      	bls.n	8003e90 <ModbusMap+0x8d0>
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff4 <ModbusMap+0xa34>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d80a      	bhi.n	8003e90 <ModbusMap+0x8d0>
					PNU_0x3016 = lowByte(_u16WriteVal);
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f6c <ModbusMap+0x9ac>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	001a      	movs	r2, r3
 8003e82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <ModbusMap+0xa38>)
 8003e84:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e86:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <ModbusMap+0x99c>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fc0c 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8003e90:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	4a59      	ldr	r2, [pc, #356]	@ (8003ffc <ModbusMap+0xa3c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90f      	bls.n	8003eba <ModbusMap+0x8fa>
 8003e9a:	4b31      	ldr	r3, [pc, #196]	@ (8003f60 <ModbusMap+0x9a0>)
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <ModbusMap+0xa40>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d80a      	bhi.n	8003eba <ModbusMap+0x8fa>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8003ea4:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <ModbusMap+0x9ac>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	001a      	movs	r2, r3
 8003eac:	4b55      	ldr	r3, [pc, #340]	@ (8004004 <ModbusMap+0xa44>)
 8003eae:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <ModbusMap+0x99c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fbf7 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <ModbusMap+0xa48>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d90f      	bls.n	8003ee4 <ModbusMap+0x924>
 8003ec4:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	@ (800400c <ModbusMap+0xa4c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d80a      	bhi.n	8003ee4 <ModbusMap+0x924>
					PNU_0x301A = lowByte(_u16WriteVal);
 8003ece:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <ModbusMap+0x9ac>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8004010 <ModbusMap+0xa50>)
 8003ed8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <ModbusMap+0x99c>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 fbe2 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8004014 <ModbusMap+0xa54>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90f      	bls.n	8003f0e <ModbusMap+0x94e>
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <ModbusMap+0x9a0>)
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	4a49      	ldr	r2, [pc, #292]	@ (8004018 <ModbusMap+0xa58>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d80a      	bhi.n	8003f0e <ModbusMap+0x94e>
					PNU_0x301C = lowByte(_u16WriteVal);
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <ModbusMap+0x9ac>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	001a      	movs	r2, r3
 8003f00:	4b46      	ldr	r3, [pc, #280]	@ (800401c <ModbusMap+0xa5c>)
 8003f02:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003f04:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <ModbusMap+0x99c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fbcd 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <ModbusMap+0x9a0>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	4a43      	ldr	r2, [pc, #268]	@ (8004020 <ModbusMap+0xa60>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d800      	bhi.n	8003f1a <ModbusMap+0x95a>
 8003f18:	e08a      	b.n	8004030 <ModbusMap+0xa70>
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <ModbusMap+0x9a0>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	@ (8004024 <ModbusMap+0xa64>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d900      	bls.n	8003f26 <ModbusMap+0x966>
 8003f24:	e084      	b.n	8004030 <ModbusMap+0xa70>
					PNU_0x301E = lowByte(_u16WriteVal);
 8003f26:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <ModbusMap+0x9ac>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <ModbusMap+0xa68>)
 8003f30:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <ModbusMap+0xa68>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f3a:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	001a      	movs	r2, r3
 8003f42:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <ModbusMap+0xa6c>)
 8003f44:	0019      	movs	r1, r3
 8003f46:	0010      	movs	r0, r2
 8003f48:	f003 fb44 	bl	80075d4 <wreeprom>
					reePlantilla[eeAddModBus] = waux;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <ModbusMap+0x9b4>)
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <ModbusMap+0x9c4>)
 8003f52:	2272      	movs	r2, #114	@ 0x72
 8003f54:	5499      	strb	r1, [r3, r2]

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	e7fd      	b.n	8003f56 <ModbusMap+0x996>
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	200003c8 	.word	0x200003c8
 8003f60:	2000037e 	.word	0x2000037e
 8003f64:	00003003 	.word	0x00003003
 8003f68:	00003004 	.word	0x00003004
 8003f6c:	20000380 	.word	0x20000380
 8003f70:	20000094 	.word	0x20000094
 8003f74:	20000bb2 	.word	0x20000bb2
 8003f78:	20000bb3 	.word	0x20000bb3
 8003f7c:	0803f001 	.word	0x0803f001
 8003f80:	0803f002 	.word	0x0803f002
 8003f84:	20000ce8 	.word	0x20000ce8
 8003f88:	00003005 	.word	0x00003005
 8003f8c:	00003006 	.word	0x00003006
 8003f90:	20000096 	.word	0x20000096
 8003f94:	0803f003 	.word	0x0803f003
 8003f98:	0803f004 	.word	0x0803f004
 8003f9c:	00003007 	.word	0x00003007
 8003fa0:	00003008 	.word	0x00003008
 8003fa4:	20000098 	.word	0x20000098
 8003fa8:	00003009 	.word	0x00003009
 8003fac:	0000300a 	.word	0x0000300a
 8003fb0:	20000b66 	.word	0x20000b66
 8003fb4:	0000300b 	.word	0x0000300b
 8003fb8:	0000300c 	.word	0x0000300c
 8003fbc:	2000009a 	.word	0x2000009a
 8003fc0:	0000300d 	.word	0x0000300d
 8003fc4:	0000300e 	.word	0x0000300e
 8003fc8:	20000b68 	.word	0x20000b68
 8003fcc:	0000300f 	.word	0x0000300f
 8003fd0:	00003010 	.word	0x00003010
 8003fd4:	2000009c 	.word	0x2000009c
 8003fd8:	00003011 	.word	0x00003011
 8003fdc:	00003012 	.word	0x00003012
 8003fe0:	2000009e 	.word	0x2000009e
 8003fe4:	00003013 	.word	0x00003013
 8003fe8:	00003014 	.word	0x00003014
 8003fec:	200000a0 	.word	0x200000a0
 8003ff0:	00003015 	.word	0x00003015
 8003ff4:	00003016 	.word	0x00003016
 8003ff8:	200000a2 	.word	0x200000a2
 8003ffc:	00003017 	.word	0x00003017
 8004000:	00003018 	.word	0x00003018
 8004004:	200000a4 	.word	0x200000a4
 8004008:	00003019 	.word	0x00003019
 800400c:	0000301a 	.word	0x0000301a
 8004010:	200000a6 	.word	0x200000a6
 8004014:	0000301b 	.word	0x0000301b
 8004018:	0000301c 	.word	0x0000301c
 800401c:	200000a8 	.word	0x200000a8
 8004020:	0000301d 	.word	0x0000301d
 8004024:	0000301e 	.word	0x0000301e
 8004028:	200000aa 	.word	0x200000aa
 800402c:	0803f072 	.word	0x0803f072
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8004030:	4baa      	ldr	r3, [pc, #680]	@ (80042dc <ModbusMap+0xd1c>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	4aaa      	ldr	r2, [pc, #680]	@ (80042e0 <ModbusMap+0xd20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d91e      	bls.n	8004078 <ModbusMap+0xab8>
 800403a:	4ba8      	ldr	r3, [pc, #672]	@ (80042dc <ModbusMap+0xd1c>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	4aa9      	ldr	r2, [pc, #676]	@ (80042e4 <ModbusMap+0xd24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d819      	bhi.n	8004078 <ModbusMap+0xab8>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8004044:	4ba8      	ldr	r3, [pc, #672]	@ (80042e8 <ModbusMap+0xd28>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	001a      	movs	r2, r3
 800404c:	4ba7      	ldr	r3, [pc, #668]	@ (80042ec <ModbusMap+0xd2c>)
 800404e:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8004050:	4ba6      	ldr	r3, [pc, #664]	@ (80042ec <ModbusMap+0xd2c>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4ba6      	ldr	r3, [pc, #664]	@ (80042f0 <ModbusMap+0xd30>)
 8004058:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 800405a:	4ba5      	ldr	r3, [pc, #660]	@ (80042f0 <ModbusMap+0xd30>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	001a      	movs	r2, r3
 8004060:	4ba4      	ldr	r3, [pc, #656]	@ (80042f4 <ModbusMap+0xd34>)
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f003 fab5 	bl	80075d4 <wreeprom>
					reePlantilla[eetimepa] = waux;
 800406a:	4ba1      	ldr	r3, [pc, #644]	@ (80042f0 <ModbusMap+0xd30>)
 800406c:	7819      	ldrb	r1, [r3, #0]
 800406e:	4ba2      	ldr	r3, [pc, #648]	@ (80042f8 <ModbusMap+0xd38>)
 8004070:	2249      	movs	r2, #73	@ 0x49
 8004072:	5499      	strb	r1, [r3, r2]
			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	e7fd      	b.n	8004074 <ModbusMap+0xab4>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8004078:	4b98      	ldr	r3, [pc, #608]	@ (80042dc <ModbusMap+0xd1c>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	4a9f      	ldr	r2, [pc, #636]	@ (80042fc <ModbusMap+0xd3c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d90f      	bls.n	80040a2 <ModbusMap+0xae2>
 8004082:	4b96      	ldr	r3, [pc, #600]	@ (80042dc <ModbusMap+0xd1c>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	4a9e      	ldr	r2, [pc, #632]	@ (8004300 <ModbusMap+0xd40>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d80a      	bhi.n	80040a2 <ModbusMap+0xae2>
					PNU_0x3106 = lowByte(_u16WriteVal);
 800408c:	4b96      	ldr	r3, [pc, #600]	@ (80042e8 <ModbusMap+0xd28>)
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	001a      	movs	r2, r3
 8004094:	4b9b      	ldr	r3, [pc, #620]	@ (8004304 <ModbusMap+0xd44>)
 8004096:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004098:	4b9b      	ldr	r3, [pc, #620]	@ (8004308 <ModbusMap+0xd48>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fb03 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 80040a2:	4b8e      	ldr	r3, [pc, #568]	@ (80042dc <ModbusMap+0xd1c>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	4a99      	ldr	r2, [pc, #612]	@ (800430c <ModbusMap+0xd4c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d90f      	bls.n	80040cc <ModbusMap+0xb0c>
 80040ac:	4b8b      	ldr	r3, [pc, #556]	@ (80042dc <ModbusMap+0xd1c>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	4a97      	ldr	r2, [pc, #604]	@ (8004310 <ModbusMap+0xd50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d80a      	bhi.n	80040cc <ModbusMap+0xb0c>
					PNU_0x3108 = lowByte(_u16WriteVal);
 80040b6:	4b8c      	ldr	r3, [pc, #560]	@ (80042e8 <ModbusMap+0xd28>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	001a      	movs	r2, r3
 80040be:	4b95      	ldr	r3, [pc, #596]	@ (8004314 <ModbusMap+0xd54>)
 80040c0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040c2:	4b91      	ldr	r3, [pc, #580]	@ (8004308 <ModbusMap+0xd48>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 faee 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 80040cc:	4b83      	ldr	r3, [pc, #524]	@ (80042dc <ModbusMap+0xd1c>)
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	4a91      	ldr	r2, [pc, #580]	@ (8004318 <ModbusMap+0xd58>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d90f      	bls.n	80040f6 <ModbusMap+0xb36>
 80040d6:	4b81      	ldr	r3, [pc, #516]	@ (80042dc <ModbusMap+0xd1c>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	4a90      	ldr	r2, [pc, #576]	@ (800431c <ModbusMap+0xd5c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d80a      	bhi.n	80040f6 <ModbusMap+0xb36>
					PNU_0x310A = lowByte(_u16WriteVal);
 80040e0:	4b81      	ldr	r3, [pc, #516]	@ (80042e8 <ModbusMap+0xd28>)
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	001a      	movs	r2, r3
 80040e8:	4b8d      	ldr	r3, [pc, #564]	@ (8004320 <ModbusMap+0xd60>)
 80040ea:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040ec:	4b86      	ldr	r3, [pc, #536]	@ (8004308 <ModbusMap+0xd48>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fad9 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 80040f6:	4b79      	ldr	r3, [pc, #484]	@ (80042dc <ModbusMap+0xd1c>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	4a8a      	ldr	r2, [pc, #552]	@ (8004324 <ModbusMap+0xd64>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d90f      	bls.n	8004120 <ModbusMap+0xb60>
 8004100:	4b76      	ldr	r3, [pc, #472]	@ (80042dc <ModbusMap+0xd1c>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	4a88      	ldr	r2, [pc, #544]	@ (8004328 <ModbusMap+0xd68>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d80a      	bhi.n	8004120 <ModbusMap+0xb60>
					PNU_0x310C = lowByte(_u16WriteVal);
 800410a:	4b77      	ldr	r3, [pc, #476]	@ (80042e8 <ModbusMap+0xd28>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	001a      	movs	r2, r3
 8004112:	4b86      	ldr	r3, [pc, #536]	@ (800432c <ModbusMap+0xd6c>)
 8004114:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <ModbusMap+0xd48>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fac4 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8004120:	4b6e      	ldr	r3, [pc, #440]	@ (80042dc <ModbusMap+0xd1c>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	4a82      	ldr	r2, [pc, #520]	@ (8004330 <ModbusMap+0xd70>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90f      	bls.n	800414a <ModbusMap+0xb8a>
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <ModbusMap+0xd1c>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	4a81      	ldr	r2, [pc, #516]	@ (8004334 <ModbusMap+0xd74>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d80a      	bhi.n	800414a <ModbusMap+0xb8a>
					PNU_0x310E = lowByte(_u16WriteVal);
 8004134:	4b6c      	ldr	r3, [pc, #432]	@ (80042e8 <ModbusMap+0xd28>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	001a      	movs	r2, r3
 800413c:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <ModbusMap+0xd78>)
 800413e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004140:	4b71      	ldr	r3, [pc, #452]	@ (8004308 <ModbusMap+0xd48>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 faaf 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 800414a:	4b64      	ldr	r3, [pc, #400]	@ (80042dc <ModbusMap+0xd1c>)
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	23c8      	movs	r3, #200	@ 0xc8
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	429a      	cmp	r2, r3
 8004154:	d310      	bcc.n	8004178 <ModbusMap+0xbb8>
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <ModbusMap+0xd1c>)
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	23c8      	movs	r3, #200	@ 0xc8
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	429a      	cmp	r2, r3
 8004160:	d80a      	bhi.n	8004178 <ModbusMap+0xbb8>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <ModbusMap+0xd28>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	001a      	movs	r2, r3
 800416a:	4b74      	ldr	r3, [pc, #464]	@ (800433c <ModbusMap+0xd7c>)
 800416c:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800416e:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <ModbusMap+0xd48>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0018      	movs	r0, r3
 8004174:	f000 fa98 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8004178:	4b58      	ldr	r3, [pc, #352]	@ (80042dc <ModbusMap+0xd1c>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	4a70      	ldr	r2, [pc, #448]	@ (8004340 <ModbusMap+0xd80>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90f      	bls.n	80041a2 <ModbusMap+0xbe2>
 8004182:	4b56      	ldr	r3, [pc, #344]	@ (80042dc <ModbusMap+0xd1c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	4a6f      	ldr	r2, [pc, #444]	@ (8004344 <ModbusMap+0xd84>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d80a      	bhi.n	80041a2 <ModbusMap+0xbe2>
					PNU_0x3202 = lowByte(_u16WriteVal);
 800418c:	4b56      	ldr	r3, [pc, #344]	@ (80042e8 <ModbusMap+0xd28>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	001a      	movs	r2, r3
 8004194:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <ModbusMap+0xd88>)
 8004196:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004198:	4b5b      	ldr	r3, [pc, #364]	@ (8004308 <ModbusMap+0xd48>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fa83 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 80041a2:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <ModbusMap+0xd1c>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4a69      	ldr	r2, [pc, #420]	@ (800434c <ModbusMap+0xd8c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d90f      	bls.n	80041cc <ModbusMap+0xc0c>
 80041ac:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <ModbusMap+0xd1c>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	4a67      	ldr	r2, [pc, #412]	@ (8004350 <ModbusMap+0xd90>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d80a      	bhi.n	80041cc <ModbusMap+0xc0c>
					PNU_0x3204 = lowByte(_u16WriteVal);
 80041b6:	4b4c      	ldr	r3, [pc, #304]	@ (80042e8 <ModbusMap+0xd28>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	001a      	movs	r2, r3
 80041be:	4b65      	ldr	r3, [pc, #404]	@ (8004354 <ModbusMap+0xd94>)
 80041c0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041c2:	4b51      	ldr	r3, [pc, #324]	@ (8004308 <ModbusMap+0xd48>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 fa6e 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 80041cc:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <ModbusMap+0xd1c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	4a61      	ldr	r2, [pc, #388]	@ (8004358 <ModbusMap+0xd98>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d90f      	bls.n	80041f6 <ModbusMap+0xc36>
 80041d6:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <ModbusMap+0xd1c>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4a60      	ldr	r2, [pc, #384]	@ (800435c <ModbusMap+0xd9c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d80a      	bhi.n	80041f6 <ModbusMap+0xc36>
					PNU_0x3206 = lowByte(_u16WriteVal);
 80041e0:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <ModbusMap+0xd28>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	001a      	movs	r2, r3
 80041e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004360 <ModbusMap+0xda0>)
 80041ea:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041ec:	4b46      	ldr	r3, [pc, #280]	@ (8004308 <ModbusMap+0xd48>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fa59 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <ModbusMap+0xd1c>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004364 <ModbusMap+0xda4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d90f      	bls.n	8004220 <ModbusMap+0xc60>
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <ModbusMap+0xd1c>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	4a58      	ldr	r2, [pc, #352]	@ (8004368 <ModbusMap+0xda8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d80a      	bhi.n	8004220 <ModbusMap+0xc60>
					PNU_0x3208 = lowByte(_u16WriteVal);
 800420a:	4b37      	ldr	r3, [pc, #220]	@ (80042e8 <ModbusMap+0xd28>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	001a      	movs	r2, r3
 8004212:	4b56      	ldr	r3, [pc, #344]	@ (800436c <ModbusMap+0xdac>)
 8004214:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004216:	4b3c      	ldr	r3, [pc, #240]	@ (8004308 <ModbusMap+0xd48>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fa44 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8004220:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <ModbusMap+0xd1c>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <ModbusMap+0xdb0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d90f      	bls.n	800424a <ModbusMap+0xc8a>
 800422a:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <ModbusMap+0xd1c>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	4a51      	ldr	r2, [pc, #324]	@ (8004374 <ModbusMap+0xdb4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d80a      	bhi.n	800424a <ModbusMap+0xc8a>
					PNU_0x320A = lowByte(_u16WriteVal);
 8004234:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <ModbusMap+0xd28>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	001a      	movs	r2, r3
 800423c:	4b4e      	ldr	r3, [pc, #312]	@ (8004378 <ModbusMap+0xdb8>)
 800423e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <ModbusMap+0xd48>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fa2f 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <ModbusMap+0xd1c>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	4a4b      	ldr	r2, [pc, #300]	@ (800437c <ModbusMap+0xdbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d90f      	bls.n	8004274 <ModbusMap+0xcb4>
 8004254:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <ModbusMap+0xd1c>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	4a49      	ldr	r2, [pc, #292]	@ (8004380 <ModbusMap+0xdc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d80a      	bhi.n	8004274 <ModbusMap+0xcb4>
					PNU_0x320C = lowByte(_u16WriteVal);
 800425e:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <ModbusMap+0xd28>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	001a      	movs	r2, r3
 8004266:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <ModbusMap+0xdc4>)
 8004268:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <ModbusMap+0xd48>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fa1a 	bl	80046a8 <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <ModbusMap+0xd1c>)
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	2b2f      	cmp	r3, #47	@ 0x2f
 800427a:	d91a      	bls.n	80042b2 <ModbusMap+0xcf2>
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <ModbusMap+0xd1c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	2b30      	cmp	r3, #48	@ 0x30
 8004282:	d816      	bhi.n	80042b2 <ModbusMap+0xcf2>

					if (_u16WriteVal == 1){
 8004284:	4b18      	ldr	r3, [pc, #96]	@ (80042e8 <ModbusMap+0xd28>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d104      	bne.n	8004296 <ModbusMap+0xcd6>
						if(flagsa[3]){
 800428c:	4b3e      	ldr	r3, [pc, #248]	@ (8004388 <ModbusMap+0xdc8>)
 800428e:	78db      	ldrb	r3, [r3, #3]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d000      	beq.n	8004296 <ModbusMap+0xcd6>
							asm ("nop");
 8004294:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <ModbusMap+0xd28>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <ModbusMap+0xce8>
						if(flagsa[3]){
 800429e:	4b3a      	ldr	r3, [pc, #232]	@ (8004388 <ModbusMap+0xdc8>)
 80042a0:	78db      	ldrb	r3, [r3, #3]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d100      	bne.n	80042a8 <ModbusMap+0xce8>

						}
						else{
							asm ("nop");
 80042a6:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80042a8:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <ModbusMap+0xd48>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 f9fb 	bl	80046a8 <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <ModbusMap+0xd1c>)
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d800      	bhi.n	80042bc <ModbusMap+0xcfc>
 80042ba:	e07e      	b.n	80043ba <ModbusMap+0xdfa>
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <ModbusMap+0xd1c>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	2b31      	cmp	r3, #49	@ 0x31
 80042c2:	d900      	bls.n	80042c6 <ModbusMap+0xd06>
 80042c4:	e079      	b.n	80043ba <ModbusMap+0xdfa>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <ModbusMap+0xd28>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d167      	bne.n	800439e <ModbusMap+0xdde>
						if(GPIOR0[1]){
 80042ce:	4b2f      	ldr	r3, [pc, #188]	@ (800438c <ModbusMap+0xdcc>)
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d05c      	beq.n	8004390 <ModbusMap+0xdd0>
							asm ("nop");
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	e061      	b.n	800439e <ModbusMap+0xdde>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	2000037e 	.word	0x2000037e
 80042e0:	00003103 	.word	0x00003103
 80042e4:	00003104 	.word	0x00003104
 80042e8:	20000380 	.word	0x20000380
 80042ec:	200000ac 	.word	0x200000ac
 80042f0:	20000bb2 	.word	0x20000bb2
 80042f4:	0803f049 	.word	0x0803f049
 80042f8:	20000ce8 	.word	0x20000ce8
 80042fc:	00003105 	.word	0x00003105
 8004300:	00003106 	.word	0x00003106
 8004304:	200000ae 	.word	0x200000ae
 8004308:	200003c8 	.word	0x200003c8
 800430c:	00003107 	.word	0x00003107
 8004310:	00003108 	.word	0x00003108
 8004314:	200000b0 	.word	0x200000b0
 8004318:	00003109 	.word	0x00003109
 800431c:	0000310a 	.word	0x0000310a
 8004320:	200000b2 	.word	0x200000b2
 8004324:	0000310b 	.word	0x0000310b
 8004328:	0000310c 	.word	0x0000310c
 800432c:	200000b4 	.word	0x200000b4
 8004330:	0000310d 	.word	0x0000310d
 8004334:	0000310e 	.word	0x0000310e
 8004338:	200000b6 	.word	0x200000b6
 800433c:	20000b6a 	.word	0x20000b6a
 8004340:	00003201 	.word	0x00003201
 8004344:	00003202 	.word	0x00003202
 8004348:	20000b6c 	.word	0x20000b6c
 800434c:	00003203 	.word	0x00003203
 8004350:	00003204 	.word	0x00003204
 8004354:	20000b6e 	.word	0x20000b6e
 8004358:	00003205 	.word	0x00003205
 800435c:	00003206 	.word	0x00003206
 8004360:	20000b70 	.word	0x20000b70
 8004364:	00003207 	.word	0x00003207
 8004368:	00003208 	.word	0x00003208
 800436c:	20000b72 	.word	0x20000b72
 8004370:	00003209 	.word	0x00003209
 8004374:	0000320a 	.word	0x0000320a
 8004378:	20000b74 	.word	0x20000b74
 800437c:	0000320b 	.word	0x0000320b
 8004380:	0000320c 	.word	0x0000320c
 8004384:	20000b76 	.word	0x20000b76
 8004388:	20000bd4 	.word	0x20000bd4
 800438c:	20000c00 	.word	0x20000c00
						}
						else{
							flags_accMenu |=0x01;
 8004390:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <ModbusMap+0xed4>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4313      	orrs	r3, r2
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <ModbusMap+0xed4>)
 800439c:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 800439e:	4b3e      	ldr	r3, [pc, #248]	@ (8004498 <ModbusMap+0xed8>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <ModbusMap+0xdf0>
						if(GPIOR0[1]){
 80043a6:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <ModbusMap+0xedc>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d100      	bne.n	80043b0 <ModbusMap+0xdf0>
						}
						else{
							asm ("nop");
 80043ae:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80043b0:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <ModbusMap+0xee0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f977 	bl	80046a8 <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 80043ba:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <ModbusMap+0xee4>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	2b31      	cmp	r3, #49	@ 0x31
 80043c0:	d800      	bhi.n	80043c4 <ModbusMap+0xe04>
 80043c2:	e061      	b.n	8004488 <ModbusMap+0xec8>
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <ModbusMap+0xee4>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	2b32      	cmp	r3, #50	@ 0x32
 80043ca:	d900      	bls.n	80043ce <ModbusMap+0xe0e>
 80043cc:	e05c      	b.n	8004488 <ModbusMap+0xec8>

					if (_u16WriteVal == 1){
 80043ce:	4b32      	ldr	r3, [pc, #200]	@ (8004498 <ModbusMap+0xed8>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d108      	bne.n	80043e8 <ModbusMap+0xe28>
						if(GPIOR0[2]){
 80043d6:	4b31      	ldr	r3, [pc, #196]	@ (800449c <ModbusMap+0xedc>)
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <ModbusMap+0xe22>
							asm ("nop");
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	e002      	b.n	80043e8 <ModbusMap+0xe28>
						}
						else{
							flagsb[0] = 1;
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <ModbusMap+0xee8>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 80043e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <ModbusMap+0xed8>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <ModbusMap+0xe44>
						if(GPIOR0[2]){
 80043f0:	4b2a      	ldr	r3, [pc, #168]	@ (800449c <ModbusMap+0xedc>)
 80043f2:	789b      	ldrb	r3, [r3, #2]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <ModbusMap+0xe42>
							asm ("nop");
 80043f8:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 80043fa:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <ModbusMap+0xee8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e000      	b.n	8004404 <ModbusMap+0xe44>

						}
						else{
							asm ("nop");
 8004402:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004404:	4b26      	ldr	r3, [pc, #152]	@ (80044a0 <ModbusMap+0xee0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f94d 	bl	80046a8 <ModbusSlaveTransaction>
				}
			break;
 800440e:	e03b      	b.n	8004488 <ModbusMap+0xec8>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8004410:	2001      	movs	r0, #1
 8004412:	f000 fa73 	bl	80048fc <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8004416:	e038      	b.n	800448a <ModbusMap+0xeca>
				  break;
 8004418:	46c0      	nop			@ (mov r8, r8)
 800441a:	e036      	b.n	800448a <ModbusMap+0xeca>
					break;
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	e034      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	e032      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	e030      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	e02e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	e02c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	e02a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	e028      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004438:	46c0      	nop			@ (mov r8, r8)
 800443a:	e026      	b.n	800448a <ModbusMap+0xeca>
					break;
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	e024      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	e022      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	e020      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	e01e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	e01c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	e01a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	e018      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	e016      	b.n	800448a <ModbusMap+0xeca>
					break;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e014      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e012      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	e010      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	e00e      	b.n	800448a <ModbusMap+0xeca>
					break;
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	e00c      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	e00a      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	e008      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	e006      	b.n	800448a <ModbusMap+0xeca>
					break;
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	e004      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	e002      	b.n	800448a <ModbusMap+0xeca>
					break;
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e000      	b.n	800448a <ModbusMap+0xeca>
			break;
 8004488:	46c0      	nop			@ (mov r8, r8)
}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b003      	add	sp, #12
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	20000cac 	.word	0x20000cac
 8004498:	20000380 	.word	0x20000380
 800449c:	20000c00 	.word	0x20000c00
 80044a0:	200003c8 	.word	0x200003c8
 80044a4:	2000037e 	.word	0x2000037e
 80044a8:	20000c44 	.word	0x20000c44

080044ac <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	221e      	movs	r2, #30
 80044bc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	4929      	ldr	r1, [pc, #164]	@ (8004568 <serialEvent_RS485+0xbc>)
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <serialEvent_RS485+0xc0>)
 80044c6:	0018      	movs	r0, r3
 80044c8:	f016 f918 	bl	801a6fc <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <serialEvent_RS485+0xc4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	1cbb      	adds	r3, r7, #2
 80044d4:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80044d6:	1cba      	adds	r2, r7, #2
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	8812      	ldrh	r2, [r2, #0]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d23c      	bcs.n	800455c <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <serialEvent_RS485+0xc8>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4013      	ands	r3, r2
 80044ea:	d037      	beq.n	800455c <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80044ec:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80044ee:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <serialEvent_RS485+0xc0>)
 80044f0:	0018      	movs	r0, r3
 80044f2:	f016 f96f 	bl	801a7d4 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 80044f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <serialEvent_RS485+0xc8>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2210      	movs	r2, #16
 80044fc:	4013      	ands	r3, r2
 80044fe:	d003      	beq.n	8004508 <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8004500:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <serialEvent_RS485+0xc0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004508:	1dbb      	adds	r3, r7, #6
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e00c      	b.n	800452a <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	1dbb      	adds	r3, r7, #6
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4913      	ldr	r1, [pc, #76]	@ (8004568 <serialEvent_RS485+0xbc>)
 800451a:	5c89      	ldrb	r1, [r1, r2]
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <serialEvent_RS485+0xcc>)
 800451e:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004520:	1dbb      	adds	r3, r7, #6
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	3201      	adds	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	1dbb      	adds	r3, r7, #6
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	1cbb      	adds	r3, r7, #2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	211e      	movs	r1, #30
 8004534:	1acb      	subs	r3, r1, r3
 8004536:	429a      	cmp	r2, r3
 8004538:	d3ea      	bcc.n	8004510 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <serialEvent_RS485+0xcc>)
 8004540:	2100      	movs	r1, #0
 8004542:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	1cbb      	adds	r3, r7, #2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	1a8a      	subs	r2, r1, r2
 8004554:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <serialEvent_RS485+0xd0>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000b24 	.word	0x20000b24
 800456c:	2000071c 	.word	0x2000071c
 8004570:	20000870 	.word	0x20000870
 8004574:	40004c00 	.word	0x40004c00
 8004578:	20000b44 	.word	0x20000b44
 800457c:	20000378 	.word	0x20000378

08004580 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	000a      	movs	r2, r1
 800458a:	1cfb      	adds	r3, r7, #3
 800458c:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 800458e:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8004590:	1cfb      	adds	r3, r7, #3
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <SerializeDMAArray_RS485+0x38>)
 8004598:	0018      	movs	r0, r3
 800459a:	f017 fe3d 	bl	801c218 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 800459e:	1cfb      	adds	r3, r7, #3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4904      	ldr	r1, [pc, #16]	@ (80045b8 <SerializeDMAArray_RS485+0x38>)
 80045a6:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <SerializeDMAArray_RS485+0x3c>)
 80045a8:	0018      	movs	r0, r3
 80045aa:	f016 f815 	bl	801a5d8 <HAL_UART_Transmit_DMA>

}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	20000b04 	.word	0x20000b04
 80045bc:	2000071c 	.word	0x2000071c

080045c0 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	1d7b      	adds	r3, r7, #5
 80045ce:	1c0a      	adds	r2, r1, #0
 80045d0:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 80045d2:	1d7b      	adds	r3, r7, #5
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b299      	uxth	r1, r3
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	1dba      	adds	r2, r7, #6
 80045dc:	8812      	ldrh	r2, [r2, #0]
 80045de:	404a      	eors	r2, r1
 80045e0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e015      	b.n	8004614 <crc16_update+0x54>
{
if (crc & 1)
 80045e8:	1dbb      	adds	r3, r7, #6
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d008      	beq.n	8004604 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 80045f2:	1dbb      	adds	r3, r7, #6
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	1dbb      	adds	r3, r7, #6
 80045fc:	490a      	ldr	r1, [pc, #40]	@ (8004628 <crc16_update+0x68>)
 80045fe:	404a      	eors	r2, r1
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e004      	b.n	800460e <crc16_update+0x4e>
else
  crc = (crc >> 1);
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	1dba      	adds	r2, r7, #6
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b07      	cmp	r3, #7
 8004618:	dde6      	ble.n	80045e8 <crc16_update+0x28>
}

return crc;
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	881b      	ldrh	r3, [r3, #0]
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	ffffa001 	.word	0xffffa001

0800462c <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	0002      	movs	r2, r0
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <ModbusMaster_begin+0x28>)
 8004646:	1dfa      	adds	r2, r7, #7
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <ModbusMaster_begin+0x2c>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8004652:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <ModbusMaster_begin+0x30>)
 8004654:	2200      	movs	r2, #0
 8004656:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000379 	.word	0x20000379
 8004664:	200003c4 	.word	0x200003c4
 8004668:	200003c6 	.word	0x200003c6

0800466c <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	0002      	movs	r2, r0
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	1c0a      	adds	r2, r1, #0
 800467c:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b1f      	cmp	r3, #31
 8004684:	d808      	bhi.n	8004698 <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 8004686:	1dfb      	adds	r3, r7, #7
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <ModbusSlave_setTransmitBuffer+0x38>)
 800468c:	0052      	lsls	r2, r2, #1
 800468e:	1d39      	adds	r1, r7, #4
 8004690:	8809      	ldrh	r1, [r1, #0]
 8004692:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	20000384 	.word	0x20000384

080046a8 <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	b0c5      	sub	sp, #276	@ 0x114
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	0002      	movs	r2, r0
 80046b0:	4b89      	ldr	r3, [pc, #548]	@ (80048d8 <ModbusSlaveTransaction+0x230>)
 80046b2:	2588      	movs	r5, #136	@ 0x88
 80046b4:	006d      	lsls	r5, r5, #1
 80046b6:	195b      	adds	r3, r3, r5
 80046b8:	19db      	adds	r3, r3, r7
 80046ba:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 80046bc:	2410      	movs	r4, #16
 80046be:	34ff      	adds	r4, #255	@ 0xff
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <ModbusSlaveTransaction+0x234>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	2104      	movs	r1, #4
 80046cc:	0018      	movs	r0, r3
 80046ce:	f010 f850 	bl	8014772 <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046d2:	0020      	movs	r0, r4
 80046d4:	183b      	adds	r3, r7, r0
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	183a      	adds	r2, r7, r0
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	7011      	strb	r1, [r2, #0]
 80046de:	001a      	movs	r2, r3
 80046e0:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <ModbusSlaveTransaction+0x238>)
 80046e2:	7819      	ldrb	r1, [r3, #0]
 80046e4:	4b7f      	ldr	r3, [pc, #508]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80046e6:	195b      	adds	r3, r3, r5
 80046e8:	19db      	adds	r3, r3, r7
 80046ea:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046ec:	183b      	adds	r3, r7, r0
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	183a      	adds	r2, r7, r0
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	7011      	strb	r1, [r2, #0]
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b7b      	ldr	r3, [pc, #492]	@ (80048e8 <ModbusSlaveTransaction+0x240>)
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	4b79      	ldr	r3, [pc, #484]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80046fe:	195b      	adds	r3, r3, r5
 8004700:	19db      	adds	r3, r3, r7
 8004702:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 8004704:	4b74      	ldr	r3, [pc, #464]	@ (80048d8 <ModbusSlaveTransaction+0x230>)
 8004706:	195b      	adds	r3, r3, r5
 8004708:	19db      	adds	r3, r3, r7
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	dc02      	bgt.n	8004716 <ModbusSlaveTransaction+0x6e>
 8004710:	2b03      	cmp	r3, #3
 8004712:	da03      	bge.n	800471c <ModbusSlaveTransaction+0x74>
 8004714:	e079      	b.n	800480a <ModbusSlaveTransaction+0x162>
 8004716:	2b06      	cmp	r3, #6
 8004718:	d051      	beq.n	80047be <ModbusSlaveTransaction+0x116>
 800471a:	e076      	b.n	800480a <ModbusSlaveTransaction+0x162>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 800471c:	4b73      	ldr	r3, [pc, #460]	@ (80048ec <ModbusSlaveTransaction+0x244>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b2d9      	uxtb	r1, r3
 8004722:	2210      	movs	r2, #16
 8004724:	32ff      	adds	r2, #255	@ 0xff
 8004726:	18bb      	adds	r3, r7, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	18ba      	adds	r2, r7, r2
 800472c:	1c58      	adds	r0, r3, #1
 800472e:	7010      	strb	r0, [r2, #0]
 8004730:	001a      	movs	r2, r3
 8004732:	1c0b      	adds	r3, r1, #0
 8004734:	18db      	adds	r3, r3, r3
 8004736:	b2d9      	uxtb	r1, r3
 8004738:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800473a:	2088      	movs	r0, #136	@ 0x88
 800473c:	0040      	lsls	r0, r0, #1
 800473e:	181b      	adds	r3, r3, r0
 8004740:	19db      	adds	r3, r3, r7
 8004742:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004744:	2387      	movs	r3, #135	@ 0x87
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e02c      	b.n	80047aa <ModbusSlaveTransaction+0x102>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8004750:	2487      	movs	r4, #135	@ 0x87
 8004752:	0064      	lsls	r4, r4, #1
 8004754:	193b      	adds	r3, r7, r4
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	4b65      	ldr	r3, [pc, #404]	@ (80048f0 <ModbusSlaveTransaction+0x248>)
 800475a:	0052      	lsls	r2, r2, #1
 800475c:	5ad3      	ldrh	r3, [r2, r3]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b299      	uxth	r1, r3
 8004762:	2510      	movs	r5, #16
 8004764:	35ff      	adds	r5, #255	@ 0xff
 8004766:	197b      	adds	r3, r7, r5
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	197a      	adds	r2, r7, r5
 800476c:	1c58      	adds	r0, r3, #1
 800476e:	7010      	strb	r0, [r2, #0]
 8004770:	001a      	movs	r2, r3
 8004772:	b2c9      	uxtb	r1, r1
 8004774:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 8004776:	2688      	movs	r6, #136	@ 0x88
 8004778:	0076      	lsls	r6, r6, #1
 800477a:	199b      	adds	r3, r3, r6
 800477c:	19db      	adds	r3, r3, r7
 800477e:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8004780:	193b      	adds	r3, r7, r4
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	4b5a      	ldr	r3, [pc, #360]	@ (80048f0 <ModbusSlaveTransaction+0x248>)
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	5ad1      	ldrh	r1, [r2, r3]
 800478a:	197b      	adds	r3, r7, r5
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	197a      	adds	r2, r7, r5
 8004790:	1c58      	adds	r0, r3, #1
 8004792:	7010      	strb	r0, [r2, #0]
 8004794:	001a      	movs	r2, r3
 8004796:	b2c9      	uxtb	r1, r1
 8004798:	4b52      	ldr	r3, [pc, #328]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800479a:	199b      	adds	r3, r3, r6
 800479c:	19db      	adds	r3, r3, r7
 800479e:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	3201      	adds	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	4b50      	ldr	r3, [pc, #320]	@ (80048ec <ModbusSlaveTransaction+0x244>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2287      	movs	r2, #135	@ 0x87
 80047b2:	0052      	lsls	r2, r2, #1
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d3c9      	bcc.n	8004750 <ModbusSlaveTransaction+0xa8>
      }
		break;
 80047bc:	e025      	b.n	800480a <ModbusSlaveTransaction+0x162>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 80047be:	2387      	movs	r3, #135	@ 0x87
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e018      	b.n	80047fc <ModbusSlaveTransaction+0x154>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 80047ca:	2487      	movs	r4, #135	@ 0x87
 80047cc:	0064      	lsls	r4, r4, #1
 80047ce:	193b      	adds	r3, r7, r4
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	2110      	movs	r1, #16
 80047d4:	31ff      	adds	r1, #255	@ 0xff
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	1879      	adds	r1, r7, r1
 80047dc:	1c58      	adds	r0, r3, #1
 80047de:	7008      	strb	r0, [r1, #0]
 80047e0:	0019      	movs	r1, r3
 80047e2:	4b44      	ldr	r3, [pc, #272]	@ (80048f4 <ModbusSlaveTransaction+0x24c>)
 80047e4:	5c9a      	ldrb	r2, [r3, r2]
 80047e6:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80047e8:	2088      	movs	r0, #136	@ 0x88
 80047ea:	0040      	lsls	r0, r0, #1
 80047ec:	181b      	adds	r3, r3, r0
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 80047f2:	193b      	adds	r3, r7, r4
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	3201      	adds	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	2387      	movs	r3, #135	@ 0x87
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d9e0      	bls.n	80047ca <ModbusSlaveTransaction+0x122>
			}
		break;
 8004808:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 800480a:	2386      	movs	r3, #134	@ 0x86
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2201      	movs	r2, #1
 8004812:	4252      	negs	r2, r2
 8004814:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8004816:	2387      	movs	r3, #135	@ 0x87
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e019      	b.n	8004856 <ModbusSlaveTransaction+0x1ae>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8004822:	2587      	movs	r5, #135	@ 0x87
 8004824:	006d      	lsls	r5, r5, #1
 8004826:	197b      	adds	r3, r7, r5
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 800482c:	2188      	movs	r1, #136	@ 0x88
 800482e:	0049      	lsls	r1, r1, #1
 8004830:	1852      	adds	r2, r2, r1
 8004832:	19d2      	adds	r2, r2, r7
 8004834:	5cd2      	ldrb	r2, [r2, r3]
 8004836:	2386      	movs	r3, #134	@ 0x86
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	18fc      	adds	r4, r7, r3
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	0011      	movs	r1, r2
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff febc 	bl	80045c0 <crc16_update>
 8004848:	0003      	movs	r3, r0
 800484a:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800484c:	197b      	adds	r3, r7, r5
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	197b      	adds	r3, r7, r5
 8004852:	3201      	adds	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	2387      	movs	r3, #135	@ 0x87
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	18fa      	adds	r2, r7, r3
 800485c:	2010      	movs	r0, #16
 800485e:	30ff      	adds	r0, #255	@ 0xff
 8004860:	183b      	adds	r3, r7, r0
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d3db      	bcc.n	8004822 <ModbusSlaveTransaction+0x17a>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 800486a:	183b      	adds	r3, r7, r0
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	183a      	adds	r2, r7, r0
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	7011      	strb	r1, [r2, #0]
 8004874:	001a      	movs	r2, r3
 8004876:	2486      	movs	r4, #134	@ 0x86
 8004878:	0064      	lsls	r4, r4, #1
 800487a:	193b      	adds	r3, r7, r4
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b2d9      	uxtb	r1, r3
 8004880:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 8004882:	2588      	movs	r5, #136	@ 0x88
 8004884:	006d      	lsls	r5, r5, #1
 8004886:	195b      	adds	r3, r3, r5
 8004888:	19db      	adds	r3, r3, r7
 800488a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 800488c:	193b      	adds	r3, r7, r4
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b299      	uxth	r1, r3
 8004894:	183b      	adds	r3, r7, r0
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	0004      	movs	r4, r0
 800489a:	183a      	adds	r2, r7, r0
 800489c:	1c58      	adds	r0, r3, #1
 800489e:	7010      	strb	r0, [r2, #0]
 80048a0:	001a      	movs	r2, r3
 80048a2:	b2c9      	uxtb	r1, r1
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80048a6:	195b      	adds	r3, r3, r5
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4a0c      	ldr	r2, [pc, #48]	@ (80048e4 <ModbusSlaveTransaction+0x23c>)
 80048b2:	1952      	adds	r2, r2, r5
 80048b4:	19d2      	adds	r2, r2, r7
 80048b6:	2100      	movs	r1, #0
 80048b8:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 80048ba:	193b      	adds	r3, r7, r4
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	230c      	movs	r3, #12
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff fe5b 	bl	8004580 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <ModbusSlaveTransaction+0x250>)
 80048cc:	2246      	movs	r2, #70	@ 0x46
 80048ce:	801a      	strh	r2, [r3, #0]


}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b045      	add	sp, #276	@ 0x114
 80048d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d8:	fffffef7 	.word	0xfffffef7
 80048dc:	50000800 	.word	0x50000800
 80048e0:	20000379 	.word	0x20000379
 80048e4:	fffffefc 	.word	0xfffffefc
 80048e8:	200003c8 	.word	0x200003c8
 80048ec:	2000037c 	.word	0x2000037c
 80048f0:	20000384 	.word	0x20000384
 80048f4:	20000b44 	.word	0x20000b44
 80048f8:	2000119a 	.word	0x2000119a

080048fc <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 80048fc:	b5b0      	push	{r4, r5, r7, lr}
 80048fe:	b0c4      	sub	sp, #272	@ 0x110
 8004900:	af00      	add	r7, sp, #0
 8004902:	0002      	movs	r2, r0
 8004904:	4b51      	ldr	r3, [pc, #324]	@ (8004a4c <ModbusSlaveExceptionTransaction+0x150>)
 8004906:	2588      	movs	r5, #136	@ 0x88
 8004908:	006d      	lsls	r5, r5, #1
 800490a:	195b      	adds	r3, r3, r5
 800490c:	19db      	adds	r3, r3, r7
 800490e:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8004910:	240c      	movs	r4, #12
 8004912:	34ff      	adds	r4, #255	@ 0xff
 8004914:	193b      	adds	r3, r7, r4
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 800491a:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 800491c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a50 <ModbusSlaveExceptionTransaction+0x154>)
 800491e:	2214      	movs	r2, #20
 8004920:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8004922:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <ModbusSlaveExceptionTransaction+0x158>)
 8004924:	2201      	movs	r2, #1
 8004926:	2104      	movs	r1, #4
 8004928:	0018      	movs	r0, r3
 800492a:	f00f ff22 	bl	8014772 <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 800492e:	193b      	adds	r3, r7, r4
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	193a      	adds	r2, r7, r4
 8004934:	1c59      	adds	r1, r3, #1
 8004936:	7011      	strb	r1, [r2, #0]
 8004938:	001a      	movs	r2, r3
 800493a:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <ModbusSlaveExceptionTransaction+0x15c>)
 800493c:	7819      	ldrb	r1, [r3, #0]
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004940:	195b      	adds	r3, r3, r5
 8004942:	19db      	adds	r3, r3, r7
 8004944:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004946:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <ModbusSlaveExceptionTransaction+0x164>)
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	193b      	adds	r3, r7, r4
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	1939      	adds	r1, r7, r4
 8004950:	1c58      	adds	r0, r3, #1
 8004952:	7008      	strb	r0, [r1, #0]
 8004954:	0019      	movs	r1, r3
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	425b      	negs	r3, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004960:	195b      	adds	r3, r3, r5
 8004962:	19db      	adds	r3, r3, r7
 8004964:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004966:	193b      	adds	r3, r7, r4
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	193a      	adds	r2, r7, r4
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	7011      	strb	r1, [r2, #0]
 8004970:	0019      	movs	r1, r3
 8004972:	4b3a      	ldr	r3, [pc, #232]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004974:	195b      	adds	r3, r3, r5
 8004976:	19db      	adds	r3, r3, r7
 8004978:	4a34      	ldr	r2, [pc, #208]	@ (8004a4c <ModbusSlaveExceptionTransaction+0x150>)
 800497a:	1952      	adds	r2, r2, r5
 800497c:	19d2      	adds	r2, r2, r7
 800497e:	7812      	ldrb	r2, [r2, #0]
 8004980:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8004982:	2386      	movs	r3, #134	@ 0x86
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2201      	movs	r2, #1
 800498a:	4252      	negs	r2, r2
 800498c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800498e:	2310      	movs	r3, #16
 8004990:	33ff      	adds	r3, #255	@ 0xff
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e019      	b.n	80049ce <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 800499a:	2510      	movs	r5, #16
 800499c:	35ff      	adds	r5, #255	@ 0xff
 800499e:	197b      	adds	r3, r7, r5
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 80049a4:	2188      	movs	r1, #136	@ 0x88
 80049a6:	0049      	lsls	r1, r1, #1
 80049a8:	1852      	adds	r2, r2, r1
 80049aa:	19d2      	adds	r2, r2, r7
 80049ac:	5cd2      	ldrb	r2, [r2, r3]
 80049ae:	2386      	movs	r3, #134	@ 0x86
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	18fc      	adds	r4, r7, r3
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fe00 	bl	80045c0 <crc16_update>
 80049c0:	0003      	movs	r3, r0
 80049c2:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80049c4:	197b      	adds	r3, r7, r5
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	197b      	adds	r3, r7, r5
 80049ca:	3201      	adds	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	2310      	movs	r3, #16
 80049d0:	33ff      	adds	r3, #255	@ 0xff
 80049d2:	18fa      	adds	r2, r7, r3
 80049d4:	200c      	movs	r0, #12
 80049d6:	30ff      	adds	r0, #255	@ 0xff
 80049d8:	183b      	adds	r3, r7, r0
 80049da:	7812      	ldrb	r2, [r2, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3db      	bcc.n	800499a <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80049e2:	183b      	adds	r3, r7, r0
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	183a      	adds	r2, r7, r0
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	7011      	strb	r1, [r2, #0]
 80049ec:	001a      	movs	r2, r3
 80049ee:	2486      	movs	r4, #134	@ 0x86
 80049f0:	0064      	lsls	r4, r4, #1
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b2d9      	uxtb	r1, r3
 80049f8:	4b18      	ldr	r3, [pc, #96]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 80049fa:	2588      	movs	r5, #136	@ 0x88
 80049fc:	006d      	lsls	r5, r5, #1
 80049fe:	195b      	adds	r3, r3, r5
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8004a04:	193b      	adds	r3, r7, r4
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	183b      	adds	r3, r7, r0
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	0004      	movs	r4, r0
 8004a12:	183a      	adds	r2, r7, r0
 8004a14:	1c58      	adds	r0, r3, #1
 8004a16:	7010      	strb	r0, [r2, #0]
 8004a18:	001a      	movs	r2, r3
 8004a1a:	b2c9      	uxtb	r1, r1
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004a1e:	195b      	adds	r3, r3, r5
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x160>)
 8004a2a:	1952      	adds	r2, r2, r5
 8004a2c:	19d2      	adds	r2, r2, r7
 8004a2e:	2100      	movs	r1, #0
 8004a30:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8004a32:	193b      	adds	r3, r7, r4
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	2308      	movs	r3, #8
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7ff fd9f 	bl	8004580 <SerializeDMAArray_RS485>

}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b044      	add	sp, #272	@ 0x110
 8004a48:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	fffffef7 	.word	0xfffffef7
 8004a50:	2000119c 	.word	0x2000119c
 8004a54:	50000800 	.word	0x50000800
 8004a58:	20000379 	.word	0x20000379
 8004a5c:	fffffef8 	.word	0xfffffef8
 8004a60:	200003c8 	.word	0x200003c8

08004a64 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	b0c2      	sub	sp, #264	@ 0x108
 8004a68:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 8004a6a:	1cfb      	adds	r3, r7, #3
 8004a6c:	33ff      	adds	r3, #255	@ 0xff
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	33ff      	adds	r3, #255	@ 0xff
 8004a76:	22ff      	movs	r2, #255	@ 0xff
 8004a78:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 8004a7a:	1cfc      	adds	r4, r7, #3
 8004a7c:	34ff      	adds	r4, #255	@ 0xff
 8004a7e:	f7ff fd15 	bl	80044ac <serialEvent_RS485>
 8004a82:	0003      	movs	r3, r0
 8004a84:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8004a86:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8004a88:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <ModbusSlavePool+0x190>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <ModbusSlavePool+0x30>
 8004a92:	e0a8      	b.n	8004be6 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8004a94:	4b57      	ldr	r3, [pc, #348]	@ (8004bf4 <ModbusSlavePool+0x190>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	33ff      	adds	r3, #255	@ 0xff
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8004aa2:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	4b55      	ldr	r3, [pc, #340]	@ (8004bfc <ModbusSlavePool+0x198>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d000      	beq.n	8004ab0 <ModbusSlavePool+0x4c>
 8004aae:	e091      	b.n	8004bd4 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8004ab0:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004ab2:	785a      	ldrb	r2, [r3, #1]
 8004ab4:	4b52      	ldr	r3, [pc, #328]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004ab6:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8004ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	001a      	movs	r2, r3
 8004abe:	237f      	movs	r3, #127	@ 0x7f
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	33ff      	adds	r3, #255	@ 0xff
 8004ace:	22e1      	movs	r2, #225	@ 0xe1
 8004ad0:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 8004ad2:	1d7b      	adds	r3, r7, #5
 8004ad4:	33ff      	adds	r3, #255	@ 0xff
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4252      	negs	r2, r2
 8004ada:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004adc:	2308      	movs	r3, #8
 8004ade:	33ff      	adds	r3, #255	@ 0xff
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e015      	b.n	8004b14 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 8004ae8:	2508      	movs	r5, #8
 8004aea:	35ff      	adds	r5, #255	@ 0xff
 8004aec:	197b      	adds	r3, r7, r5
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4a41      	ldr	r2, [pc, #260]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004af2:	5cd2      	ldrb	r2, [r2, r3]
 8004af4:	1d7c      	adds	r4, r7, #5
 8004af6:	34ff      	adds	r4, #255	@ 0xff
 8004af8:	1d7b      	adds	r3, r7, #5
 8004afa:	33ff      	adds	r3, #255	@ 0xff
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	0011      	movs	r1, r2
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fd5d 	bl	80045c0 <crc16_update>
 8004b06:	0003      	movs	r3, r0
 8004b08:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004b0a:	197b      	adds	r3, r7, r5
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	197b      	adds	r3, r7, r5
 8004b10:	3201      	adds	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	2308      	movs	r3, #8
 8004b16:	33ff      	adds	r3, #255	@ 0xff
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	1cfb      	adds	r3, r7, #3
 8004b1e:	33ff      	adds	r3, #255	@ 0xff
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3b02      	subs	r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	dbdf      	blt.n	8004ae8 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	33ff      	adds	r3, #255	@ 0xff
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <ModbusSlavePool+0x10a>
 8004b32:	1d7b      	adds	r3, r7, #5
 8004b34:	33ff      	adds	r3, #255	@ 0xff
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	1cfb      	adds	r3, r7, #3
 8004b3c:	33ff      	adds	r3, #255	@ 0xff
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3b02      	subs	r3, #2
 8004b42:	492d      	ldr	r1, [pc, #180]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d10d      	bne.n	8004b66 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 8004b4a:	1d7b      	adds	r3, r7, #5
 8004b4c:	33ff      	adds	r3, #255	@ 0xff
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	1cfb      	adds	r3, r7, #3
 8004b58:	33ff      	adds	r3, #255	@ 0xff
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	4926      	ldr	r1, [pc, #152]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d003      	beq.n	8004b6e <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	33ff      	adds	r3, #255	@ 0xff
 8004b6a:	22e3      	movs	r2, #227	@ 0xe3
 8004b6c:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 8004b6e:	4b24      	ldr	r3, [pc, #144]	@ (8004c00 <ModbusSlavePool+0x19c>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d019      	beq.n	8004baa <ModbusSlavePool+0x146>
 8004b76:	dc36      	bgt.n	8004be6 <ModbusSlavePool+0x182>
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	dc34      	bgt.n	8004be6 <ModbusSlavePool+0x182>
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	db31      	blt.n	8004be4 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004b80:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b8a:	78d2      	ldrb	r2, [r2, #3]
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <ModbusSlavePool+0x1a0>)
 8004b92:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8004b94:	4b18      	ldr	r3, [pc, #96]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004b9e:	7952      	ldrb	r2, [r2, #5]
 8004ba0:	189b      	adds	r3, r3, r2
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <ModbusSlavePool+0x1a4>)
 8004ba6:	801a      	strh	r2, [r3, #0]
				break;
 8004ba8:	e01d      	b.n	8004be6 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bac:	789b      	ldrb	r3, [r3, #2]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bb4:	78d2      	ldrb	r2, [r2, #3]
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <ModbusSlavePool+0x1a8>)
 8004bbc:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bc0:	791b      	ldrb	r3, [r3, #4]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf8 <ModbusSlavePool+0x194>)
 8004bc8:	7952      	ldrb	r2, [r2, #5]
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <ModbusSlavePool+0x1ac>)
 8004bd0:	801a      	strh	r2, [r3, #0]
				break;
 8004bd2:	e008      	b.n	8004be6 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	33ff      	adds	r3, #255	@ 0xff
 8004bd8:	22e0      	movs	r2, #224	@ 0xe0
 8004bda:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <ModbusSlavePool+0x1b0>)
 8004bde:	2214      	movs	r2, #20
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	e000      	b.n	8004be6 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 8004be4:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	33ff      	adds	r3, #255	@ 0xff
 8004bea:	781b      	ldrb	r3, [r3, #0]
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b042      	add	sp, #264	@ 0x108
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf4:	20000378 	.word	0x20000378
 8004bf8:	20000b44 	.word	0x20000b44
 8004bfc:	20000379 	.word	0x20000379
 8004c00:	200003c8 	.word	0x200003c8
 8004c04:	2000037a 	.word	0x2000037a
 8004c08:	2000037c 	.word	0x2000037c
 8004c0c:	2000037e 	.word	0x2000037e
 8004c10:	20000380 	.word	0x20000380
 8004c14:	2000119c 	.word	0x2000119c

08004c18 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 8004c28:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <AtParsing_Ble+0x3c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8004c30:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <AtParsing_Ble+0x3c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <AtParsing_Ble+0x40>)
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f017 fa97 	bl	801c170 <strstr>
 8004c42:	1e03      	subs	r3, r0, #0
 8004c44:	d001      	beq.n	8004c4a <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 8004c4a:	697b      	ldr	r3, [r7, #20]
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	200003ca 	.word	0x200003ca
 8004c58:	20000a74 	.word	0x20000a74

08004c5c <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8004c64:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fb fa4d 	bl	8000108 <strlen>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	240e      	movs	r4, #14
 8004c72:	193b      	adds	r3, r7, r4
 8004c74:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <SerializeString_Ble+0x40>)
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f017 faca 	bl	801c218 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004c84:	193b      	adds	r3, r7, r4
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <SerializeString_Ble+0x40>)
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SerializeString_Ble+0x44>)
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f015 fca3 	bl	801a5d8 <HAL_UART_Transmit_DMA>
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b005      	add	sp, #20
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	20000954 	.word	0x20000954
 8004ca0:	20000688 	.word	0x20000688

08004ca4 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	000a      	movs	r2, r1
 8004cae:	1cfb      	adds	r3, r7, #3
 8004cb0:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8004cb2:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8004cb4:	210e      	movs	r1, #14
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	1cfa      	adds	r2, r7, #3
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <SerializeString2+0x4c>)
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f017 faa6 	bl	801c218 <memcpy>
    while(huart2.gState == HAL_UART_STATE_BUSY_TX);
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <SerializeString2+0x50>)
 8004cd0:	2288      	movs	r2, #136	@ 0x88
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2b21      	cmp	r3, #33	@ 0x21
 8004cd6:	d0fa      	beq.n	8004cce <SerializeString2+0x2a>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004cd8:	230e      	movs	r3, #14
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	4904      	ldr	r1, [pc, #16]	@ (8004cf0 <SerializeString2+0x4c>)
 8004ce0:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SerializeString2+0x50>)
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f015 fc78 	bl	801a5d8 <HAL_UART_Transmit_DMA>
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b004      	add	sp, #16
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000954 	.word	0x20000954
 8004cf4:	20000688 	.word	0x20000688

08004cf8 <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	2290      	movs	r2, #144	@ 0x90
 8004d02:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	4929      	ldr	r1, [pc, #164]	@ (8004db0 <serialEvent_Ble+0xb8>)
 8004d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f015 fcf5 	bl	801a6fc <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d12:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <serialEvent_Ble+0xc0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	1cbb      	adds	r3, r7, #2
 8004d1a:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8004d1c:	1cba      	adds	r2, r7, #2
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d23f      	bcs.n	8004da8 <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 8004d28:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <serialEvent_Ble+0xc4>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d03a      	beq.n	8004da8 <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 8004d32:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d34:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <serialEvent_Ble+0xc0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	1cbb      	adds	r3, r7, #2
 8004d3c:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8004d3e:	003b      	movs	r3, r7
 8004d40:	1d39      	adds	r1, r7, #4
 8004d42:	1cba      	adds	r2, r7, #2
 8004d44:	8809      	ldrh	r1, [r1, #0]
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	1a8a      	subs	r2, r1, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f015 fd40 	bl	801a7d4 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <serialEvent_Ble+0xc4>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <serialEvent_Ble+0xbc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2210      	movs	r2, #16
 8004d64:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	e00c      	b.n	8004d88 <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	490e      	ldr	r1, [pc, #56]	@ (8004db0 <serialEvent_Ble+0xb8>)
 8004d78:	5c89      	ldrb	r1, [r1, r2]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <serialEvent_Ble+0xc8>)
 8004d7c:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d7e:	1dfb      	adds	r3, r7, #7
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	3201      	adds	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	1cbb      	adds	r3, r7, #2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	2190      	movs	r1, #144	@ 0x90
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3ea      	bcc.n	8004d6e <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	@ (8004dc0 <serialEvent_Ble+0xc8>)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <serialEvent_Ble+0xcc>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
			}

		}
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	200009e4 	.word	0x200009e4
 8004db4:	20000688 	.word	0x20000688
 8004db8:	200007b0 	.word	0x200007b0
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	20000a74 	.word	0x20000a74
 8004dc4:	200003ca 	.word	0x200003ca

08004dc8 <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 8004dda:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	4053      	eors	r3, r2
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 8004de8:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 8004dee:	f004 fcbd 	bl	800976c <millis>
 8004df2:	0003      	movs	r3, r0
 8004df4:	001a      	movs	r2, r3
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <SendATreply_Ble+0x78>)
 8004df8:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff ff2d 	bl	8004c5c <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 8004e02:	f7ff ff79 	bl	8004cf8 <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ff03 	bl	8004c18 <AtParsing_Ble>
 8004e12:	0003      	movs	r3, r0
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 8004e16:	f004 fca9 	bl	800976c <millis>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <SendATreply_Ble+0x78>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d802      	bhi.n	8004e30 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 8004e2a:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <SendATreply_Ble+0x74>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b00a      	add	sp, #40	@ 0x28
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	200003c9 	.word	0x200003c9
 8004e40:	200003cc 	.word	0x200003cc

08004e44 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	//if (findLastValue((uint32_t)&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
		ConfigBLE_Ble ();
 8004e48:	f000 f80c 	bl	8004e64 <ConfigBLE_Ble>
	//}
	//else{
	//	if (tick_1s == 1){
			//BluetoothState = 2;
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004e4c:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <SetUpBluetooth_Ble+0x1c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	0018      	movs	r0, r3
 8004e54:	f00f fc8d 	bl	8014772 <HAL_GPIO_WritePin>
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
	//	}
	//}
}
 8004e58:	46c0      	nop			@ (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	50000800 	.word	0x50000800

08004e64 <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 8004e6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ef8 <ConfigBLE_Ble+0x94>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8004e72:	4b22      	ldr	r3, [pc, #136]	@ (8004efc <ConfigBLE_Ble+0x98>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	2140      	movs	r1, #64	@ 0x40
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f00f fc7a 	bl	8014772 <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8004e7e:	4b20      	ldr	r3, [pc, #128]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d002      	beq.n	8004e8c <ConfigBLE_Ble+0x28>
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d014      	beq.n	8004eb4 <ConfigBLE_Ble+0x50>
 8004e8a:	e027      	b.n	8004edc <ConfigBLE_Ble+0x78>
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	001a      	movs	r2, r3
 8004e92:	491c      	ldr	r1, [pc, #112]	@ (8004f04 <ConfigBLE_Ble+0xa0>)
 8004e94:	481c      	ldr	r0, [pc, #112]	@ (8004f08 <ConfigBLE_Ble+0xa4>)
 8004e96:	23fa      	movs	r3, #250	@ 0xfa
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f7ff ff93 	bl	8004dc8 <SendATreply_Ble>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	4b16      	ldr	r3, [pc, #88]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d11f      	bne.n	8004eec <ConfigBLE_Ble+0x88>
				WaitSerAnsw_Ble_func(5);
 8004eac:	2005      	movs	r0, #5
 8004eae:	f000 fb33 	bl	8005518 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8004eb2:	e01b      	b.n	8004eec <ConfigBLE_Ble+0x88>
				ParamItem = 1;
			}
			break;
*/
	  case 5:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004eb4:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	001a      	movs	r2, r3
 8004eba:	4912      	ldr	r1, [pc, #72]	@ (8004f04 <ConfigBLE_Ble+0xa0>)
 8004ebc:	4813      	ldr	r0, [pc, #76]	@ (8004f0c <ConfigBLE_Ble+0xa8>)
 8004ebe:	23fa      	movs	r3, #250	@ 0xfa
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f7ff ff7f 	bl	8004dc8 <SendATreply_Ble>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <ConfigBLE_Ble+0x9c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10d      	bne.n	8004ef0 <ConfigBLE_Ble+0x8c>
				WaitSerAnsw_Ble_func(6);
 8004ed4:	2006      	movs	r0, #6
 8004ed6:	f000 fb1f 	bl	8005518 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8004eda:	e009      	b.n	8004ef0 <ConfigBLE_Ble+0x8c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <ConfigBLE_Ble+0xac>)
 8004ede:	2202      	movs	r2, #2
 8004ee0:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f000 fb18 	bl	8005518 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8004ee8:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8004eea:	e002      	b.n	8004ef2 <ConfigBLE_Ble+0x8e>
			break;
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	e000      	b.n	8004ef2 <ConfigBLE_Ble+0x8e>
			break;
 8004ef0:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000937 	.word	0x20000937
 8004efc:	50000800 	.word	0x50000800
 8004f00:	20000000 	.word	0x20000000
 8004f04:	0801c500 	.word	0x0801c500
 8004f08:	0801c50c 	.word	0x0801c50c
 8004f0c:	0801c518 	.word	0x0801c518
 8004f10:	2000004c 	.word	0x2000004c

08004f14 <GetParamBluetooth_Ble>:
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004f20:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <GetParamBluetooth_Ble+0xa4>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	2140      	movs	r1, #64	@ 0x40
 8004f26:	0018      	movs	r0, r3
 8004f28:	f00f fc23 	bl	8014772 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8004f2c:	4b23      	ldr	r3, [pc, #140]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d002      	beq.n	8004f3a <GetParamBluetooth_Ble+0x26>
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d033      	beq.n	8004fa0 <GetParamBluetooth_Ble+0x8c>
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
		 ParamItem = 1;
	 break;
	}
}
 8004f38:	e03a      	b.n	8004fb0 <GetParamBluetooth_Ble+0x9c>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004f3a:	4b20      	ldr	r3, [pc, #128]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	001a      	movs	r2, r3
 8004f40:	491f      	ldr	r1, [pc, #124]	@ (8004fc0 <GetParamBluetooth_Ble+0xac>)
 8004f42:	4820      	ldr	r0, [pc, #128]	@ (8004fc4 <GetParamBluetooth_Ble+0xb0>)
 8004f44:	23fa      	movs	r3, #250	@ 0xfa
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f7ff ff3c 	bl	8004dc8 <SendATreply_Ble>
 8004f50:	0002      	movs	r2, r0
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d129      	bne.n	8004fae <GetParamBluetooth_Ble+0x9a>
			 foo = strchr(SerialAnswBLE,'=');
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <GetParamBluetooth_Ble+0xb4>)
 8004f5c:	213d      	movs	r1, #61	@ 0x3d
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f017 f8f8 	bl	801c154 <strchr>
 8004f64:	0003      	movs	r3, r0
 8004f66:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e00f      	b.n	8004f90 <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	18d2      	adds	r2, r2, r3
 8004f7a:	1dfb      	adds	r3, r7, #7
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	3302      	adds	r3, #2
 8004f80:	7811      	ldrb	r1, [r2, #0]
 8004f82:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <GetParamBluetooth_Ble+0xb8>)
 8004f84:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	1dfb      	adds	r3, r7, #7
 8004f8c:	3201      	adds	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b0b      	cmp	r3, #11
 8004f96:	d9eb      	bls.n	8004f70 <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8004f98:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	601a      	str	r2, [r3, #0]
		 break;
 8004f9e:	e006      	b.n	8004fae <GetParamBluetooth_Ble+0x9a>
		 BluetoothState = 3;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <GetParamBluetooth_Ble+0xbc>)
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	701a      	strb	r2, [r3, #0]
		 ParamItem = 1;
 8004fa6:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <GetParamBluetooth_Ble+0xa8>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
	 break;
 8004fac:	e000      	b.n	8004fb0 <GetParamBluetooth_Ble+0x9c>
		 break;
 8004fae:	46c0      	nop			@ (mov r8, r8)
}
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	50000800 	.word	0x50000800
 8004fbc:	20000000 	.word	0x20000000
 8004fc0:	0801c534 	.word	0x0801c534
 8004fc4:	0801c540 	.word	0x0801c540
 8004fc8:	20000a74 	.word	0x20000a74
 8004fcc:	20000ec8 	.word	0x20000ec8
 8004fd0:	2000004c 	.word	0x2000004c

08004fd4 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
//uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
    asm ("nop");
 8004fda:	46c0      	nop			@ (mov r8, r8)

    uint8_t i_ = 0;
 8004fdc:	1dbb      	adds	r3, r7, #6
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8005150 <TransmitReceive_Ble+0x17c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2140      	movs	r1, #64	@ 0x40
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f00f fbc2 	bl	8014772 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8004fee:	f7ff fe83 	bl	8004cf8 <serialEvent_Ble>
	if (receivecomplete_Ble){
 8004ff2:	4b58      	ldr	r3, [pc, #352]	@ (8005154 <TransmitReceive_Ble+0x180>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d100      	bne.n	8004ffc <TransmitReceive_Ble+0x28>
 8004ffa:	e1da      	b.n	80053b2 <TransmitReceive_Ble+0x3de>
		 receivecomplete_Ble = 0;
 8004ffc:	4b55      	ldr	r3, [pc, #340]	@ (8005154 <TransmitReceive_Ble+0x180>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 8005002:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <TransmitReceive_Ble+0x184>)
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <TransmitReceive_Ble+0x3c>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 800500a:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <TransmitReceive_Ble+0x184>)
 800500c:	2201      	movs	r2, #1
 800500e:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",(size_t) 2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8005010:	4952      	ldr	r1, [pc, #328]	@ (800515c <TransmitReceive_Ble+0x188>)
 8005012:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005014:	2202      	movs	r2, #2
 8005016:	0018      	movs	r0, r3
 8005018:	f017 f886 	bl	801c128 <memcmp>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d102      	bne.n	8005026 <TransmitReceive_Ble+0x52>
			 codeTX = 0x21;
 8005020:	4b50      	ldr	r3, [pc, #320]	@ (8005164 <TransmitReceive_Ble+0x190>)
 8005022:	2221      	movs	r2, #33	@ 0x21
 8005024:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8005026:	4950      	ldr	r1, [pc, #320]	@ (8005168 <TransmitReceive_Ble+0x194>)
 8005028:	4b4d      	ldr	r3, [pc, #308]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 800502a:	2202      	movs	r2, #2
 800502c:	0018      	movs	r0, r3
 800502e:	f017 f87b 	bl	801c128 <memcmp>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d102      	bne.n	800503c <TransmitReceive_Ble+0x68>
			 codeTX = 0x5C;
 8005036:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <TransmitReceive_Ble+0x190>)
 8005038:	225c      	movs	r2, #92	@ 0x5c
 800503a:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 800503c:	494b      	ldr	r1, [pc, #300]	@ (800516c <TransmitReceive_Ble+0x198>)
 800503e:	4b48      	ldr	r3, [pc, #288]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005040:	2202      	movs	r2, #2
 8005042:	0018      	movs	r0, r3
 8005044:	f017 f870 	bl	801c128 <memcmp>
 8005048:	1e03      	subs	r3, r0, #0
 800504a:	d102      	bne.n	8005052 <TransmitReceive_Ble+0x7e>
			 codeTX = 0x80;
 800504c:	4b45      	ldr	r3, [pc, #276]	@ (8005164 <TransmitReceive_Ble+0x190>)
 800504e:	2280      	movs	r2, #128	@ 0x80
 8005050:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x81",2) == 0){
 8005052:	4947      	ldr	r1, [pc, #284]	@ (8005170 <TransmitReceive_Ble+0x19c>)
 8005054:	4b42      	ldr	r3, [pc, #264]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005056:	2202      	movs	r2, #2
 8005058:	0018      	movs	r0, r3
 800505a:	f017 f865 	bl	801c128 <memcmp>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d102      	bne.n	8005068 <TransmitReceive_Ble+0x94>
			 codeTX = 0x81;
 8005062:	4b40      	ldr	r3, [pc, #256]	@ (8005164 <TransmitReceive_Ble+0x190>)
 8005064:	2281      	movs	r2, #129	@ 0x81
 8005066:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8005068:	4942      	ldr	r1, [pc, #264]	@ (8005174 <TransmitReceive_Ble+0x1a0>)
 800506a:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 800506c:	2202      	movs	r2, #2
 800506e:	0018      	movs	r0, r3
 8005070:	f017 f85a 	bl	801c128 <memcmp>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d102      	bne.n	800507e <TransmitReceive_Ble+0xaa>
			 codeTX = 0x3D;
 8005078:	4b3a      	ldr	r3, [pc, #232]	@ (8005164 <TransmitReceive_Ble+0x190>)
 800507a:	223d      	movs	r2, #61	@ 0x3d
 800507c:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 800507e:	493e      	ldr	r1, [pc, #248]	@ (8005178 <TransmitReceive_Ble+0x1a4>)
 8005080:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 8005082:	2202      	movs	r2, #2
 8005084:	0018      	movs	r0, r3
 8005086:	f017 f84f 	bl	801c128 <memcmp>
 800508a:	1e03      	subs	r3, r0, #0
 800508c:	d106      	bne.n	800509c <TransmitReceive_Ble+0xc8>
			 //timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
			 DevLock = 0x72;
 800508e:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <TransmitReceive_Ble+0x1a8>)
 8005090:	2272      	movs	r2, #114	@ 0x72
 8005092:	701a      	strb	r2, [r3, #0]
			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 8005094:	f000 fa56 	bl	8005544 <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 8005098:	f000 fa62 	bl	8005560 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 800509c:	4938      	ldr	r1, [pc, #224]	@ (8005180 <TransmitReceive_Ble+0x1ac>)
 800509e:	4b30      	ldr	r3, [pc, #192]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 80050a0:	2202      	movs	r2, #2
 80050a2:	0018      	movs	r0, r3
 80050a4:	f017 f840 	bl	801c128 <memcmp>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d112      	bne.n	80050d2 <TransmitReceive_Ble+0xfe>
		    asm ("nop");
 80050ac:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 80050ae:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <TransmitReceive_Ble+0x1b0>)
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	4b35      	ldr	r3, [pc, #212]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050b4:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 80050b6:	4b34      	ldr	r3, [pc, #208]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	4b34      	ldr	r3, [pc, #208]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 80050bc:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 80050be:	4b34      	ldr	r3, [pc, #208]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80050c4:	4b32      	ldr	r3, [pc, #200]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	4b30      	ldr	r3, [pc, #192]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 80050ca:	0011      	movs	r1, r2
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7ff fde9 	bl	8004ca4 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 80050d2:	4930      	ldr	r1, [pc, #192]	@ (8005194 <TransmitReceive_Ble+0x1c0>)
 80050d4:	4b22      	ldr	r3, [pc, #136]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 80050d6:	2202      	movs	r2, #2
 80050d8:	0018      	movs	r0, r3
 80050da:	f017 f825 	bl	801c128 <memcmp>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d16c      	bne.n	80051bc <TransmitReceive_Ble+0x1e8>
			uint8_t foo,foo2;
		    asm ("nop");
 80050e2:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 80050e4:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050e6:	781a      	ldrb	r2, [r3, #0]
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	210f      	movs	r1, #15
 80050ec:	400a      	ands	r2, r1
 80050ee:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b0b      	cmp	r3, #11
 80050f6:	d905      	bls.n	8005104 <TransmitReceive_Ble+0x130>
			  foo = PasswordALG & (~0xF8);
 80050f8:	4b23      	ldr	r3, [pc, #140]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	1dfb      	adds	r3, r7, #7
 80050fe:	2107      	movs	r1, #7
 8005100:	400a      	ands	r2, r1
 8005102:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	3302      	adds	r3, #2
 800510a:	4a23      	ldr	r2, [pc, #140]	@ (8005198 <TransmitReceive_Ble+0x1c4>)
 800510c:	5cd2      	ldrb	r2, [r2, r3]
 800510e:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <TransmitReceive_Ble+0x1b4>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b2da      	uxtb	r2, r3
 8005116:	1d7b      	adds	r3, r7, #5
 8005118:	3a01      	subs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 800511c:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <TransmitReceive_Ble+0x18c>)
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	1d7a      	adds	r2, r7, #5
 8005122:	7812      	ldrb	r2, [r2, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d139      	bne.n	800519c <TransmitReceive_Ble+0x1c8>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8005128:	4b14      	ldr	r3, [pc, #80]	@ (800517c <TransmitReceive_Ble+0x1a8>)
 800512a:	2272      	movs	r2, #114	@ 0x72
 800512c:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 800512e:	4b17      	ldr	r3, [pc, #92]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 8005130:	22f1      	movs	r2, #241	@ 0xf1
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	4b15      	ldr	r3, [pc, #84]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 8005136:	223d      	movs	r2, #61	@ 0x3d
 8005138:	705a      	strb	r2, [r3, #1]
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 800513c:	2202      	movs	r2, #2
 800513e:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8005140:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <TransmitReceive_Ble+0x1bc>)
 8005142:	781a      	ldrb	r2, [r3, #0]
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <TransmitReceive_Ble+0x1b8>)
 8005146:	0011      	movs	r1, r2
 8005148:	0018      	movs	r0, r3
 800514a:	f7ff fdab 	bl	8004ca4 <SerializeString2>
 800514e:	e035      	b.n	80051bc <TransmitReceive_Ble+0x1e8>
 8005150:	50000800 	.word	0x50000800
 8005154:	200003ca 	.word	0x200003ca
 8005158:	20000fc4 	.word	0x20000fc4
 800515c:	0801c54c 	.word	0x0801c54c
 8005160:	20000a74 	.word	0x20000a74
 8005164:	20000f0c 	.word	0x20000f0c
 8005168:	0801c550 	.word	0x0801c550
 800516c:	0801c554 	.word	0x0801c554
 8005170:	0801c558 	.word	0x0801c558
 8005174:	0801c55c 	.word	0x0801c55c
 8005178:	0801c560 	.word	0x0801c560
 800517c:	200011dd 	.word	0x200011dd
 8005180:	0801c564 	.word	0x0801c564
 8005184:	200003d9 	.word	0x200003d9
 8005188:	200003d8 	.word	0x200003d8
 800518c:	20000f20 	.word	0x20000f20
 8005190:	20000f1a 	.word	0x20000f1a
 8005194:	0801c568 	.word	0x0801c568
 8005198:	20000ec8 	.word	0x20000ec8
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 800519c:	4b9a      	ldr	r3, [pc, #616]	@ (8005408 <TransmitReceive_Ble+0x434>)
 800519e:	22f1      	movs	r2, #241	@ 0xf1
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	4b99      	ldr	r3, [pc, #612]	@ (8005408 <TransmitReceive_Ble+0x434>)
 80051a4:	223e      	movs	r2, #62	@ 0x3e
 80051a6:	705a      	strb	r2, [r3, #1]
 80051a8:	4b98      	ldr	r3, [pc, #608]	@ (800540c <TransmitReceive_Ble+0x438>)
 80051aa:	2202      	movs	r2, #2
 80051ac:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 80051ae:	4b97      	ldr	r3, [pc, #604]	@ (800540c <TransmitReceive_Ble+0x438>)
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	4b95      	ldr	r3, [pc, #596]	@ (8005408 <TransmitReceive_Ble+0x434>)
 80051b4:	0011      	movs	r1, r2
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7ff fd74 	bl	8004ca4 <SerializeString2>
			}
		}

		//if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
		if ( (DevLock == 0x72) || (statComWIFIFlag) ){
 80051bc:	4b94      	ldr	r3, [pc, #592]	@ (8005410 <TransmitReceive_Ble+0x43c>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b72      	cmp	r3, #114	@ 0x72
 80051c2:	d004      	beq.n	80051ce <TransmitReceive_Ble+0x1fa>
 80051c4:	4b93      	ldr	r3, [pc, #588]	@ (8005414 <TransmitReceive_Ble+0x440>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d100      	bne.n	80051ce <TransmitReceive_Ble+0x1fa>
 80051cc:	e0f1      	b.n	80053b2 <TransmitReceive_Ble+0x3de>
		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 80051ce:	4992      	ldr	r1, [pc, #584]	@ (8005418 <TransmitReceive_Ble+0x444>)
 80051d0:	4b92      	ldr	r3, [pc, #584]	@ (800541c <TransmitReceive_Ble+0x448>)
 80051d2:	2202      	movs	r2, #2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f016 ffa7 	bl	801c128 <memcmp>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d102      	bne.n	80051e4 <TransmitReceive_Ble+0x210>
			 codeTX = 0x60;
 80051de:	4b90      	ldr	r3, [pc, #576]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80051e0:	2260      	movs	r2, #96	@ 0x60
 80051e2:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 80051e4:	498f      	ldr	r1, [pc, #572]	@ (8005424 <TransmitReceive_Ble+0x450>)
 80051e6:	4b8d      	ldr	r3, [pc, #564]	@ (800541c <TransmitReceive_Ble+0x448>)
 80051e8:	2202      	movs	r2, #2
 80051ea:	0018      	movs	r0, r3
 80051ec:	f016 ff9c 	bl	801c128 <memcmp>
 80051f0:	1e03      	subs	r3, r0, #0
 80051f2:	d102      	bne.n	80051fa <TransmitReceive_Ble+0x226>
			 codeTX = 0x61;
 80051f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80051f6:	2261      	movs	r2, #97	@ 0x61
 80051f8:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 80051fa:	498b      	ldr	r1, [pc, #556]	@ (8005428 <TransmitReceive_Ble+0x454>)
 80051fc:	4b87      	ldr	r3, [pc, #540]	@ (800541c <TransmitReceive_Ble+0x448>)
 80051fe:	2202      	movs	r2, #2
 8005200:	0018      	movs	r0, r3
 8005202:	f016 ff91 	bl	801c128 <memcmp>
 8005206:	1e03      	subs	r3, r0, #0
 8005208:	d102      	bne.n	8005210 <TransmitReceive_Ble+0x23c>
			 codeTX = 0x53;
 800520a:	4b85      	ldr	r3, [pc, #532]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800520c:	2253      	movs	r2, #83	@ 0x53
 800520e:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8005210:	4986      	ldr	r1, [pc, #536]	@ (800542c <TransmitReceive_Ble+0x458>)
 8005212:	4b82      	ldr	r3, [pc, #520]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005214:	2202      	movs	r2, #2
 8005216:	0018      	movs	r0, r3
 8005218:	f016 ff86 	bl	801c128 <memcmp>
 800521c:	1e03      	subs	r3, r0, #0
 800521e:	d102      	bne.n	8005226 <TransmitReceive_Ble+0x252>
			 codeTX = 0x50;
 8005220:	4b7f      	ldr	r3, [pc, #508]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005222:	2250      	movs	r2, #80	@ 0x50
 8005224:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 8005226:	4982      	ldr	r1, [pc, #520]	@ (8005430 <TransmitReceive_Ble+0x45c>)
 8005228:	4b7c      	ldr	r3, [pc, #496]	@ (800541c <TransmitReceive_Ble+0x448>)
 800522a:	2202      	movs	r2, #2
 800522c:	0018      	movs	r0, r3
 800522e:	f016 ff7b 	bl	801c128 <memcmp>
 8005232:	1e03      	subs	r3, r0, #0
 8005234:	d102      	bne.n	800523c <TransmitReceive_Ble+0x268>
			 codeTX = 0x51;
 8005236:	4b7a      	ldr	r3, [pc, #488]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005238:	2251      	movs	r2, #81	@ 0x51
 800523a:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 800523c:	497d      	ldr	r1, [pc, #500]	@ (8005434 <TransmitReceive_Ble+0x460>)
 800523e:	4b77      	ldr	r3, [pc, #476]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005240:	2202      	movs	r2, #2
 8005242:	0018      	movs	r0, r3
 8005244:	f016 ff70 	bl	801c128 <memcmp>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d102      	bne.n	8005252 <TransmitReceive_Ble+0x27e>
			 codeTX = 0x46;
 800524c:	4b74      	ldr	r3, [pc, #464]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800524e:	2246      	movs	r2, #70	@ 0x46
 8005250:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005252:	4979      	ldr	r1, [pc, #484]	@ (8005438 <TransmitReceive_Ble+0x464>)
 8005254:	4b71      	ldr	r3, [pc, #452]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005256:	2202      	movs	r2, #2
 8005258:	0018      	movs	r0, r3
 800525a:	f016 ff65 	bl	801c128 <memcmp>
 800525e:	1e03      	subs	r3, r0, #0
 8005260:	d102      	bne.n	8005268 <TransmitReceive_Ble+0x294>
			 codeTX = 0x49;
 8005262:	4b6f      	ldr	r3, [pc, #444]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005264:	2249      	movs	r2, #73	@ 0x49
 8005266:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005268:	4974      	ldr	r1, [pc, #464]	@ (800543c <TransmitReceive_Ble+0x468>)
 800526a:	4b6c      	ldr	r3, [pc, #432]	@ (800541c <TransmitReceive_Ble+0x448>)
 800526c:	2202      	movs	r2, #2
 800526e:	0018      	movs	r0, r3
 8005270:	f016 ff5a 	bl	801c128 <memcmp>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d102      	bne.n	800527e <TransmitReceive_Ble+0x2aa>
			 codeTX = 0x4A;
 8005278:	4b69      	ldr	r3, [pc, #420]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800527a:	224a      	movs	r2, #74	@ 0x4a
 800527c:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 800527e:	4970      	ldr	r1, [pc, #448]	@ (8005440 <TransmitReceive_Ble+0x46c>)
 8005280:	4b66      	ldr	r3, [pc, #408]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005282:	2202      	movs	r2, #2
 8005284:	0018      	movs	r0, r3
 8005286:	f016 ff4f 	bl	801c128 <memcmp>
 800528a:	1e03      	subs	r3, r0, #0
 800528c:	d102      	bne.n	8005294 <TransmitReceive_Ble+0x2c0>
			 codeTX = 0x54;
 800528e:	4b64      	ldr	r3, [pc, #400]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005290:	2254      	movs	r2, #84	@ 0x54
 8005292:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005294:	496b      	ldr	r1, [pc, #428]	@ (8005444 <TransmitReceive_Ble+0x470>)
 8005296:	4b61      	ldr	r3, [pc, #388]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005298:	2202      	movs	r2, #2
 800529a:	0018      	movs	r0, r3
 800529c:	f016 ff44 	bl	801c128 <memcmp>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d102      	bne.n	80052aa <TransmitReceive_Ble+0x2d6>
	   		 codeTX = 0x80;
 80052a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052a6:	2280      	movs	r2, #128	@ 0x80
 80052a8:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 80052aa:	4967      	ldr	r1, [pc, #412]	@ (8005448 <TransmitReceive_Ble+0x474>)
 80052ac:	4b5b      	ldr	r3, [pc, #364]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052ae:	2202      	movs	r2, #2
 80052b0:	0018      	movs	r0, r3
 80052b2:	f016 ff39 	bl	801c128 <memcmp>
 80052b6:	1e03      	subs	r3, r0, #0
 80052b8:	d102      	bne.n	80052c0 <TransmitReceive_Ble+0x2ec>
	   		 codeTX = 0x3D;
 80052ba:	4b59      	ldr	r3, [pc, #356]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052bc:	223d      	movs	r2, #61	@ 0x3d
 80052be:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 80052c0:	4962      	ldr	r1, [pc, #392]	@ (800544c <TransmitReceive_Ble+0x478>)
 80052c2:	4b56      	ldr	r3, [pc, #344]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052c4:	2202      	movs	r2, #2
 80052c6:	0018      	movs	r0, r3
 80052c8:	f016 ff2e 	bl	801c128 <memcmp>
 80052cc:	1e03      	subs	r3, r0, #0
 80052ce:	d102      	bne.n	80052d6 <TransmitReceive_Ble+0x302>
			 codeTX = 0x55;
 80052d0:	4b53      	ldr	r3, [pc, #332]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052d2:	2255      	movs	r2, #85	@ 0x55
 80052d4:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 80052d6:	495e      	ldr	r1, [pc, #376]	@ (8005450 <TransmitReceive_Ble+0x47c>)
 80052d8:	4b50      	ldr	r3, [pc, #320]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052da:	2202      	movs	r2, #2
 80052dc:	0018      	movs	r0, r3
 80052de:	f016 ff23 	bl	801c128 <memcmp>
 80052e2:	1e03      	subs	r3, r0, #0
 80052e4:	d102      	bne.n	80052ec <TransmitReceive_Ble+0x318>
	   		 codeTX = 0x56;
 80052e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052e8:	2256      	movs	r2, #86	@ 0x56
 80052ea:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 80052ec:	4959      	ldr	r1, [pc, #356]	@ (8005454 <TransmitReceive_Ble+0x480>)
 80052ee:	4b4b      	ldr	r3, [pc, #300]	@ (800541c <TransmitReceive_Ble+0x448>)
 80052f0:	2202      	movs	r2, #2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f016 ff18 	bl	801c128 <memcmp>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d102      	bne.n	8005302 <TransmitReceive_Ble+0x32e>
	   		 codeTX = 0x57;
 80052fc:	4b48      	ldr	r3, [pc, #288]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80052fe:	2257      	movs	r2, #87	@ 0x57
 8005300:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 8005302:	4955      	ldr	r1, [pc, #340]	@ (8005458 <TransmitReceive_Ble+0x484>)
 8005304:	4b45      	ldr	r3, [pc, #276]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005306:	2202      	movs	r2, #2
 8005308:	0018      	movs	r0, r3
 800530a:	f016 ff0d 	bl	801c128 <memcmp>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d102      	bne.n	8005318 <TransmitReceive_Ble+0x344>
	   		 codeTX = 0x58;
 8005312:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005314:	2258      	movs	r2, #88	@ 0x58
 8005316:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8005318:	4950      	ldr	r1, [pc, #320]	@ (800545c <TransmitReceive_Ble+0x488>)
 800531a:	4b40      	ldr	r3, [pc, #256]	@ (800541c <TransmitReceive_Ble+0x448>)
 800531c:	2202      	movs	r2, #2
 800531e:	0018      	movs	r0, r3
 8005320:	f016 ff02 	bl	801c128 <memcmp>
 8005324:	1e03      	subs	r3, r0, #0
 8005326:	d102      	bne.n	800532e <TransmitReceive_Ble+0x35a>
	   		 codeTX = 0x59;
 8005328:	4b3d      	ldr	r3, [pc, #244]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800532a:	2259      	movs	r2, #89	@ 0x59
 800532c:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 800532e:	494c      	ldr	r1, [pc, #304]	@ (8005460 <TransmitReceive_Ble+0x48c>)
 8005330:	4b3a      	ldr	r3, [pc, #232]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005332:	2202      	movs	r2, #2
 8005334:	0018      	movs	r0, r3
 8005336:	f016 fef7 	bl	801c128 <memcmp>
 800533a:	1e03      	subs	r3, r0, #0
 800533c:	d102      	bne.n	8005344 <TransmitReceive_Ble+0x370>
	    	 codeTX = 0x5A;
 800533e:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005340:	225a      	movs	r2, #90	@ 0x5a
 8005342:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8005344:	4947      	ldr	r1, [pc, #284]	@ (8005464 <TransmitReceive_Ble+0x490>)
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005348:	2202      	movs	r2, #2
 800534a:	0018      	movs	r0, r3
 800534c:	f016 feec 	bl	801c128 <memcmp>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d102      	bne.n	800535a <TransmitReceive_Ble+0x386>
	   		 codeTX = 0x5B;
 8005354:	4b32      	ldr	r3, [pc, #200]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005356:	225b      	movs	r2, #91	@ 0x5b
 8005358:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 800535a:	4943      	ldr	r1, [pc, #268]	@ (8005468 <TransmitReceive_Ble+0x494>)
 800535c:	4b2f      	ldr	r3, [pc, #188]	@ (800541c <TransmitReceive_Ble+0x448>)
 800535e:	2202      	movs	r2, #2
 8005360:	0018      	movs	r0, r3
 8005362:	f016 fee1 	bl	801c128 <memcmp>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d102      	bne.n	8005370 <TransmitReceive_Ble+0x39c>
		 	 codeTX = 0x5C;
 800536a:	4b2d      	ldr	r3, [pc, #180]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 800536c:	225c      	movs	r2, #92	@ 0x5c
 800536e:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8005370:	493e      	ldr	r1, [pc, #248]	@ (800546c <TransmitReceive_Ble+0x498>)
 8005372:	4b2a      	ldr	r3, [pc, #168]	@ (800541c <TransmitReceive_Ble+0x448>)
 8005374:	2202      	movs	r2, #2
 8005376:	0018      	movs	r0, r3
 8005378:	f016 fed6 	bl	801c128 <memcmp>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d102      	bne.n	8005386 <TransmitReceive_Ble+0x3b2>
			  codeTX = 0x5F;
 8005380:	4b27      	ldr	r3, [pc, #156]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005382:	225f      	movs	r2, #95	@ 0x5f
 8005384:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x62",2) == 0)	 		// CÓDIGO DE logger tiempo wifi
 8005386:	493a      	ldr	r1, [pc, #232]	@ (8005470 <TransmitReceive_Ble+0x49c>)
 8005388:	4b24      	ldr	r3, [pc, #144]	@ (800541c <TransmitReceive_Ble+0x448>)
 800538a:	2202      	movs	r2, #2
 800538c:	0018      	movs	r0, r3
 800538e:	f016 fecb 	bl	801c128 <memcmp>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d102      	bne.n	800539c <TransmitReceive_Ble+0x3c8>
	   		  codeTX = 0x62;
 8005396:	4b22      	ldr	r3, [pc, #136]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 8005398:	2262      	movs	r2, #98	@ 0x62
 800539a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x63",2) == 0)		 	// CÓDIGO DE logger eventos wifi
 800539c:	4935      	ldr	r1, [pc, #212]	@ (8005474 <TransmitReceive_Ble+0x4a0>)
 800539e:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <TransmitReceive_Ble+0x448>)
 80053a0:	2202      	movs	r2, #2
 80053a2:	0018      	movs	r0, r3
 80053a4:	f016 fec0 	bl	801c128 <memcmp>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d102      	bne.n	80053b2 <TransmitReceive_Ble+0x3de>
	   		  codeTX = 0x63;
 80053ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <TransmitReceive_Ble+0x44c>)
 80053ae:	2263      	movs	r2, #99	@ 0x63
 80053b0:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 80053b2:	f004 f9db 	bl	800976c <millis>
 80053b6:	0003      	movs	r3, r0
 80053b8:	001a      	movs	r2, r3
 80053ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005478 <TransmitReceive_Ble+0x4a4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d91d      	bls.n	8005400 <TransmitReceive_Ble+0x42c>
		TestMessMilis = millis();
 80053c4:	f004 f9d2 	bl	800976c <millis>
 80053c8:	0003      	movs	r3, r0
 80053ca:	001a      	movs	r2, r3
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <TransmitReceive_Ble+0x4a4>)
 80053ce:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 80053d0:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <TransmitReceive_Ble+0x4a8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b55      	cmp	r3, #85	@ 0x55
 80053d6:	d102      	bne.n	80053de <TransmitReceive_Ble+0x40a>
		    asm ("nop");
 80053d8:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 80053da:	f008 fd83 	bl	800dee4 <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 80053de:	4b27      	ldr	r3, [pc, #156]	@ (800547c <TransmitReceive_Ble+0x4a8>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b55      	cmp	r3, #85	@ 0x55
 80053e4:	d10c      	bne.n	8005400 <TransmitReceive_Ble+0x42c>
		    asm ("nop");
 80053e6:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80053e8:	4b08      	ldr	r3, [pc, #32]	@ (800540c <TransmitReceive_Ble+0x438>)
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <TransmitReceive_Ble+0x434>)
 80053ee:	0011      	movs	r1, r2
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7ff fc57 	bl	8004ca4 <SerializeString2>
			i_++;
 80053f6:	1dbb      	adds	r3, r7, #6
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	3201      	adds	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000f20 	.word	0x20000f20
 800540c:	20000f1a 	.word	0x20000f1a
 8005410:	200011dd 	.word	0x200011dd
 8005414:	200011df 	.word	0x200011df
 8005418:	0801c56c 	.word	0x0801c56c
 800541c:	20000a74 	.word	0x20000a74
 8005420:	20000f0c 	.word	0x20000f0c
 8005424:	0801c570 	.word	0x0801c570
 8005428:	0801c574 	.word	0x0801c574
 800542c:	0801c578 	.word	0x0801c578
 8005430:	0801c57c 	.word	0x0801c57c
 8005434:	0801c580 	.word	0x0801c580
 8005438:	0801c584 	.word	0x0801c584
 800543c:	0801c588 	.word	0x0801c588
 8005440:	0801c58c 	.word	0x0801c58c
 8005444:	0801c554 	.word	0x0801c554
 8005448:	0801c55c 	.word	0x0801c55c
 800544c:	0801c590 	.word	0x0801c590
 8005450:	0801c594 	.word	0x0801c594
 8005454:	0801c598 	.word	0x0801c598
 8005458:	0801c59c 	.word	0x0801c59c
 800545c:	0801c5a0 	.word	0x0801c5a0
 8005460:	0801c5a4 	.word	0x0801c5a4
 8005464:	0801c5a8 	.word	0x0801c5a8
 8005468:	0801c550 	.word	0x0801c550
 800546c:	0801c5ac 	.word	0x0801c5ac
 8005470:	0801c5b0 	.word	0x0801c5b0
 8005474:	0801c5b4 	.word	0x0801c5b4
 8005478:	200003d4 	.word	0x200003d4
 800547c:	20000f01 	.word	0x20000f01

08005480 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 8005484:	4b1f      	ldr	r3, [pc, #124]	@ (8005504 <Read_Inpunts_ble+0x84>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d037      	beq.n	80054fc <Read_Inpunts_ble+0x7c>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <Read_Inpunts_ble+0x88>)
 8005492:	0019      	movs	r1, r3
 8005494:	0010      	movs	r0, r2
 8005496:	f00f f94f 	bl	8014738 <HAL_GPIO_ReadPin>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d017      	beq.n	80054ce <Read_Inpunts_ble+0x4e>
				{
					if (CntDebInp1 <= 50)
 800549e:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b32      	cmp	r3, #50	@ 0x32
 80054a4:	d805      	bhi.n	80054b2 <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 80054a6:	4b19      	ldr	r3, [pc, #100]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b17      	ldr	r3, [pc, #92]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054b0:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b32      	cmp	r3, #50	@ 0x32
 80054b8:	d120      	bne.n	80054fc <Read_Inpunts_ble+0x7c>
						{
							device_conected = 1;
 80054ba:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <Read_Inpunts_ble+0x90>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054c2:	2233      	movs	r2, #51	@ 0x33
 80054c4:	701a      	strb	r2, [r3, #0]
							statComFlag = 255;
 80054c6:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <Read_Inpunts_ble+0x94>)
 80054c8:	22ff      	movs	r2, #255	@ 0xff
 80054ca:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
					statComFlag = 0;
				}
			}
		}
}
 80054cc:	e016      	b.n	80054fc <Read_Inpunts_ble+0x7c>
				if (CntDebInp1 >= 1)
 80054ce:	4b0f      	ldr	r3, [pc, #60]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <Read_Inpunts_ble+0x62>
					CntDebInp1--;
 80054d6:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	3b01      	subs	r3, #1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054e0:	701a      	strb	r2, [r3, #0]
				if (CntDebInp1==1)
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d108      	bne.n	80054fc <Read_Inpunts_ble+0x7c>
					device_conected = 0;
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <Read_Inpunts_ble+0x90>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <Read_Inpunts_ble+0x8c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
					statComFlag = 0;
 80054f6:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <Read_Inpunts_ble+0x94>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
}
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	20000934 	.word	0x20000934
 8005508:	50000400 	.word	0x50000400
 800550c:	200003d0 	.word	0x200003d0
 8005510:	20000938 	.word	0x20000938
 8005514:	200011de 	.word	0x200011de

08005518 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	0002      	movs	r2, r0
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 8005524:	4b05      	ldr	r3, [pc, #20]	@ (800553c <WaitSerAnsw_Ble_func+0x24>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 800552a:	1dfb      	adds	r3, r7, #7
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <WaitSerAnsw_Ble_func+0x28>)
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	200003c9 	.word	0x200003c9
 8005540:	20000000 	.word	0x20000000

08005544 <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <grabacion_exitosa_handshake+0x18>)
 800554a:	22f1      	movs	r2, #241	@ 0xf1
 800554c:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800554e:	4b03      	ldr	r3, [pc, #12]	@ (800555c <grabacion_exitosa_handshake+0x18>)
 8005550:	223d      	movs	r2, #61	@ 0x3d
 8005552:	705a      	strb	r2, [r3, #1]
}
 8005554:	46c0      	nop			@ (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	20000ec8 	.word	0x20000ec8

08005560 <manda_transmision>:

void manda_transmision (void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <manda_transmision+0x34>)
 8005566:	4a0c      	ldr	r2, [pc, #48]	@ (8005598 <manda_transmision+0x38>)
 8005568:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <manda_transmision+0x3c>)
 800556c:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <manda_transmision+0x38>)
 800556e:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8005570:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <manda_transmision+0x40>)
 8005572:	4a0c      	ldr	r2, [pc, #48]	@ (80055a4 <manda_transmision+0x44>)
 8005574:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 8005576:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <manda_transmision+0x48>)
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 800557c:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <manda_transmision+0x4c>)
 800557e:	2201      	movs	r2, #1
 8005580:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <manda_transmision+0x50>)
 8005584:	2255      	movs	r2, #85	@ 0x55
 8005586:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <manda_transmision+0x54>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]

}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000efc 	.word	0x20000efc
 8005598:	20000ec8 	.word	0x20000ec8
 800559c:	20000ef4 	.word	0x20000ef4
 80055a0:	20000ef8 	.word	0x20000ef8
 80055a4:	20000ec9 	.word	0x20000ec9
 80055a8:	20000f18 	.word	0x20000f18
 80055ac:	20000f04 	.word	0x20000f04
 80055b0:	20000f01 	.word	0x20000f01
 80055b4:	20000f0c 	.word	0x20000f0c

080055b8 <bootloader>:
#include "main.h"
#include "customMain.h"



void bootloader (void){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055be:	b672      	cpsid	i
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
//	//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
//	while(HAL_FLASH_Lock()!=  HAL_OK );

    // Desbloquea el controlador FLASH

	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x0801F000 + 4));
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <bootloader+0x1c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	607b      	str	r3, [r7, #4]
    //__set_MSP((*(volatile uint32_t *)(0x0801E800)) );0x801E800
	app_reset_handler();
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4798      	blx	r3
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	0801f004 	.word	0x0801f004

080055d8 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 80055dc:	4b3a      	ldr	r3, [pc, #232]	@ (80056c8 <main10+0xf0>)
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d006      	beq.n	80055f2 <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 80055e4:	4b39      	ldr	r3, [pc, #228]	@ (80056cc <main10+0xf4>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	2108      	movs	r1, #8
 80055ea:	0018      	movs	r0, r3
 80055ec:	f00f f8c1 	bl	8014772 <HAL_GPIO_WritePin>
 80055f0:	e005      	b.n	80055fe <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 80055f2:	4b36      	ldr	r3, [pc, #216]	@ (80056cc <main10+0xf4>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	2108      	movs	r1, #8
 80055f8:	0018      	movs	r0, r3
 80055fa:	f00f f8ba 	bl	8014772 <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 80055fe:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <main10+0xf0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	0099      	lsls	r1, r3, #2
 800560a:	23a0      	movs	r3, #160	@ 0xa0
 800560c:	05db      	lsls	r3, r3, #23
 800560e:	2201      	movs	r2, #1
 8005610:	0018      	movs	r0, r3
 8005612:	f00f f8ae 	bl	8014772 <HAL_GPIO_WritePin>
 8005616:	e007      	b.n	8005628 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 8005618:	2380      	movs	r3, #128	@ 0x80
 800561a:	0099      	lsls	r1, r3, #2
 800561c:	23a0      	movs	r3, #160	@ 0xa0
 800561e:	05db      	lsls	r3, r3, #23
 8005620:	2200      	movs	r2, #0
 8005622:	0018      	movs	r0, r3
 8005624:	f00f f8a5 	bl	8014772 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 8005628:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <main10+0xf0>)
 800562a:	789b      	ldrb	r3, [r3, #2]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4825      	ldr	r0, [pc, #148]	@ (80056cc <main10+0xf4>)
 8005636:	2201      	movs	r2, #1
 8005638:	0019      	movs	r1, r3
 800563a:	f00f f89a 	bl	8014772 <HAL_GPIO_WritePin>
 800563e:	e006      	b.n	800564e <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4821      	ldr	r0, [pc, #132]	@ (80056cc <main10+0xf4>)
 8005646:	2200      	movs	r2, #0
 8005648:	0019      	movs	r1, r3
 800564a:	f00f f892 	bl	8014772 <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 800564e:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <main10+0xf0>)
 8005650:	791b      	ldrb	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	0059      	lsls	r1, r3, #1
 800565a:	23a0      	movs	r3, #160	@ 0xa0
 800565c:	05db      	lsls	r3, r3, #23
 800565e:	2201      	movs	r2, #1
 8005660:	0018      	movs	r0, r3
 8005662:	f00f f886 	bl	8014772 <HAL_GPIO_WritePin>
 8005666:	e007      	b.n	8005678 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8005668:	2380      	movs	r3, #128	@ 0x80
 800566a:	0059      	lsls	r1, r3, #1
 800566c:	23a0      	movs	r3, #160	@ 0xa0
 800566e:	05db      	lsls	r3, r3, #23
 8005670:	2200      	movs	r2, #0
 8005672:	0018      	movs	r0, r3
 8005674:	f00f f87d 	bl	8014772 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8005678:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <main10+0xf8>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b13      	ldr	r3, [pc, #76]	@ (80056d0 <main10+0xf8>)
 8005682:	701a      	strb	r2, [r3, #0]
		//if(portX[rel_fn] && (cntproc & 0x01))
		//	HAL_TIM_PWM_Start (&htim1,TIM_CHANNEL_3);
		if(portX[rel_fn]){
 8005684:	4b10      	ldr	r3, [pc, #64]	@ (80056c8 <main10+0xf0>)
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <main10+0xc0>
			HAL_TIM_PWM_Start (&htim1,TIM_CHANNEL_3);
 800568c:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <main10+0xfc>)
 800568e:	2108      	movs	r1, #8
 8005690:	0018      	movs	r0, r3
 8005692:	f013 fee3 	bl	801945c <HAL_TIM_PWM_Start>
 8005696:	e004      	b.n	80056a2 <main10+0xca>
		}
			//HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else{
			HAL_TIM_PWM_Stop (&htim1,TIM_CHANNEL_3);
 8005698:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <main10+0xfc>)
 800569a:	2108      	movs	r1, #8
 800569c:	0018      	movs	r0, r3
 800569e:	f013 ffbf 	bl	8019620 <HAL_TIM_PWM_Stop>
		}
			//HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <main10+0x100>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <main10+0x100>)
 80056ac:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <main10+0x100>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b27      	cmp	r3, #39	@ 0x27
 80056b4:	d904      	bls.n	80056c0 <main10+0xe8>
        asm ("nop");
 80056b6:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 80056b8:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <main10+0x100>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	20000bb4 	.word	0x20000bb4
 80056cc:	50000800 	.word	0x50000800
 80056d0:	20000ba9 	.word	0x20000ba9
 80056d4:	200005a4 	.word	0x200005a4
 80056d8:	20000c1a 	.word	0x20000c1a

080056dc <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 80056e0:	4b46      	ldr	r3, [pc, #280]	@ (80057fc <retardoDeActuadores+0x120>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	4053      	eors	r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d114      	bne.n	8005718 <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80056ee:	4b44      	ldr	r3, [pc, #272]	@ (8005800 <retardoDeActuadores+0x124>)
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 80056f6:	4b42      	ldr	r3, [pc, #264]	@ (8005800 <retardoDeActuadores+0x124>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4053      	eors	r3, r2
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10e      	bne.n	8005722 <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005704:	4b3e      	ldr	r3, [pc, #248]	@ (8005800 <retardoDeActuadores+0x124>)
 8005706:	2201      	movs	r2, #1
 8005708:	705a      	strb	r2, [r3, #1]
 800570a:	e000      	b.n	800570e <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 800570c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 800570e:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <retardoDeActuadores+0x128>)
 8005710:	0018      	movs	r0, r3
 8005712:	f001 fe58 	bl	80073c6 <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 8005716:	e005      	b.n	8005724 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 8005718:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[1] = 0;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 800571a:	4b39      	ldr	r3, [pc, #228]	@ (8005800 <retardoDeActuadores+0x124>)
 800571c:	2200      	movs	r2, #0
 800571e:	705a      	strb	r2, [r3, #1]
 8005720:	e000      	b.n	8005724 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 8005722:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 8005724:	4b35      	ldr	r3, [pc, #212]	@ (80057fc <retardoDeActuadores+0x120>)
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2201      	movs	r2, #1
 800572a:	4053      	eors	r3, r2
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d114      	bne.n	800575c <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 8005732:	4b33      	ldr	r3, [pc, #204]	@ (8005800 <retardoDeActuadores+0x124>)
 8005734:	789b      	ldrb	r3, [r3, #2]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 800573a:	4b31      	ldr	r3, [pc, #196]	@ (8005800 <retardoDeActuadores+0x124>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	4053      	eors	r3, r2
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005748:	4b2d      	ldr	r3, [pc, #180]	@ (8005800 <retardoDeActuadores+0x124>)
 800574a:	2201      	movs	r2, #1
 800574c:	709a      	strb	r2, [r3, #2]
 800574e:	e000      	b.n	8005752 <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 8005750:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 8005752:	4b2d      	ldr	r3, [pc, #180]	@ (8005808 <retardoDeActuadores+0x12c>)
 8005754:	0018      	movs	r0, r3
 8005756:	f001 fe36 	bl	80073c6 <decwreg>
			goto	revisa_ret_ventilador;		//
 800575a:	e005      	b.n	8005768 <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 800575c:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 800575e:	4b28      	ldr	r3, [pc, #160]	@ (8005800 <retardoDeActuadores+0x124>)
 8005760:	2200      	movs	r2, #0
 8005762:	709a      	strb	r2, [r3, #2]
 8005764:	e000      	b.n	8005768 <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 8005766:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 8005768:	4b28      	ldr	r3, [pc, #160]	@ (800580c <retardoDeActuadores+0x130>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	4053      	eors	r3, r2
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d114      	bne.n	80057a0 <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 8005776:	4b22      	ldr	r3, [pc, #136]	@ (8005800 <retardoDeActuadores+0x124>)
 8005778:	78db      	ldrb	r3, [r3, #3]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 800577e:	4b20      	ldr	r3, [pc, #128]	@ (8005800 <retardoDeActuadores+0x124>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	4053      	eors	r3, r2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10e      	bne.n	80057aa <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 800578c:	4b1c      	ldr	r3, [pc, #112]	@ (8005800 <retardoDeActuadores+0x124>)
 800578e:	2201      	movs	r2, #1
 8005790:	70da      	strb	r2, [r3, #3]
 8005792:	e000      	b.n	8005796 <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 8005794:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 8005796:	4b1e      	ldr	r3, [pc, #120]	@ (8005810 <retardoDeActuadores+0x134>)
 8005798:	0018      	movs	r0, r3
 800579a:	f001 fe14 	bl	80073c6 <decwreg>
			goto	revisa_ret_lampara;		//
 800579e:	e005      	b.n	80057ac <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 80057a0:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 80057a2:	4b17      	ldr	r3, [pc, #92]	@ (8005800 <retardoDeActuadores+0x124>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	70da      	strb	r2, [r3, #3]
 80057a8:	e000      	b.n	80057ac <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 80057aa:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 80057ac:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <retardoDeActuadores+0x120>)
 80057ae:	789b      	ldrb	r3, [r3, #2]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4053      	eors	r3, r2
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d114      	bne.n	80057e4 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 80057ba:	4b11      	ldr	r3, [pc, #68]	@ (8005800 <retardoDeActuadores+0x124>)
 80057bc:	791b      	ldrb	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 80057c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <retardoDeActuadores+0x124>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4053      	eors	r3, r2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10e      	bne.n	80057ee <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <retardoDeActuadores+0x124>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	711a      	strb	r2, [r3, #4]
 80057d6:	e000      	b.n	80057da <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 80057d8:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 80057da:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <retardoDeActuadores+0x138>)
 80057dc:	0018      	movs	r0, r3
 80057de:	f001 fdf2 	bl	80073c6 <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 80057e2:	e005      	b.n	80057f0 <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 80057e4:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <retardoDeActuadores+0x124>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	711a      	strb	r2, [r3, #4]
 80057ec:	e000      	b.n	80057f0 <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80057ee:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 80057f0:	4b03      	ldr	r3, [pc, #12]	@ (8005800 <retardoDeActuadores+0x124>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000c00 	.word	0x20000c00
 8005800:	20000cb8 	.word	0x20000cb8
 8005804:	20000cb2 	.word	0x20000cb2
 8005808:	20000cb3 	.word	0x20000cb3
 800580c:	20000c3c 	.word	0x20000c3c
 8005810:	20000cb4 	.word	0x20000cb4
 8005814:	20000cb5 	.word	0x20000cb5

08005818 <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
    asm ("nop");
 800581c:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 800581e:	4b4b      	ldr	r3, [pc, #300]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 8005824:	4b4a      	ldr	r3, [pc, #296]	@ (8005950 <calculando_tiempo_UNIX+0x138>)
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	2203      	movs	r2, #3
 800582a:	4013      	ands	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <calculando_tiempo_UNIX+0x2e>
 8005832:	4b48      	ldr	r3, [pc, #288]	@ (8005954 <calculando_tiempo_UNIX+0x13c>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d905      	bls.n	8005846 <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 800583a:	4b44      	ldr	r3, [pc, #272]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <calculando_tiempo_UNIX+0x140>)
 8005840:	189a      	adds	r2, r3, r2
 8005842:	4b42      	ldr	r3, [pc, #264]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005844:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 8005846:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <calculando_tiempo_UNIX+0x13c>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 800584e:	4b41      	ldr	r3, [pc, #260]	@ (8005954 <calculando_tiempo_UNIX+0x13c>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	4b41      	ldr	r3, [pc, #260]	@ (800595c <calculando_tiempo_UNIX+0x144>)
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	58d2      	ldr	r2, [r2, r3]
 800585a:	0013      	movs	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	189b      	adds	r3, r3, r2
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	0113      	lsls	r3, r2, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	01db      	lsls	r3, r3, #7
 800586a:	001a      	movs	r2, r3
 800586c:	4b37      	ldr	r3, [pc, #220]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	18d2      	adds	r2, r2, r3
 8005872:	4b36      	ldr	r3, [pc, #216]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005874:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 8005876:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <calculando_tiempo_UNIX+0x138>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	4a39      	ldr	r2, [pc, #228]	@ (8005960 <calculando_tiempo_UNIX+0x148>)
 800587c:	189a      	adds	r2, r3, r2
 800587e:	0013      	movs	r3, r2
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	189b      	adds	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	189b      	adds	r3, r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	189b      	adds	r3, r3, r2
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	01d3      	lsls	r3, r2, #7
 8005892:	001a      	movs	r2, r3
 8005894:	0013      	movs	r3, r2
 8005896:	001a      	movs	r2, r3
 8005898:	4b2c      	ldr	r3, [pc, #176]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	18d2      	adds	r2, r2, r3
 800589e:	4b2b      	ldr	r3, [pc, #172]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058a0:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 80058a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005950 <calculando_tiempo_UNIX+0x138>)
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <calculando_tiempo_UNIX+0x14c>)
 80058a8:	4694      	mov	ip, r2
 80058aa:	4463      	add	r3, ip
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da00      	bge.n	80058b2 <calculando_tiempo_UNIX+0x9a>
 80058b0:	3303      	adds	r3, #3
 80058b2:	109b      	asrs	r3, r3, #2
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005968 <calculando_tiempo_UNIX+0x150>)
 80058b8:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 80058ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005968 <calculando_tiempo_UNIX+0x150>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	001a      	movs	r2, r3
 80058c0:	0013      	movs	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	0113      	lsls	r3, r2, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	01db      	lsls	r3, r3, #7
 80058d0:	001a      	movs	r2, r3
 80058d2:	4b1e      	ldr	r3, [pc, #120]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	18d2      	adds	r2, r2, r3
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058da:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 80058dc:	4b23      	ldr	r3, [pc, #140]	@ (800596c <calculando_tiempo_UNIX+0x154>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	0013      	movs	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	011a      	lsls	r2, r3, #4
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	0113      	lsls	r3, r2, #4
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	01db      	lsls	r3, r3, #7
 80058f2:	001a      	movs	r2, r3
 80058f4:	4b15      	ldr	r3, [pc, #84]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	18d2      	adds	r2, r2, r3
 80058fa:	4b14      	ldr	r3, [pc, #80]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 80058fc:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 80058fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005970 <calculando_tiempo_UNIX+0x158>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	001a      	movs	r2, r3
 8005904:	0013      	movs	r3, r2
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	1ad2      	subs	r2, r2, r3
 800590e:	0113      	lsls	r3, r2, #4
 8005910:	001a      	movs	r2, r3
 8005912:	4b0e      	ldr	r3, [pc, #56]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	18d2      	adds	r2, r2, r3
 8005918:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800591a:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 800591c:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <calculando_tiempo_UNIX+0x15c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	001a      	movs	r2, r3
 8005922:	0013      	movs	r3, r2
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	001a      	movs	r2, r3
 800592c:	4b07      	ldr	r3, [pc, #28]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	18d2      	adds	r2, r2, r3
 8005932:	4b06      	ldr	r3, [pc, #24]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005934:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <calculando_tiempo_UNIX+0x160>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	001a      	movs	r2, r3
 800593c:	4b03      	ldr	r3, [pc, #12]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	18d2      	adds	r2, r2, r3
 8005942:	4b02      	ldr	r3, [pc, #8]	@ (800594c <calculando_tiempo_UNIX+0x134>)
 8005944:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20001180 	.word	0x20001180
 8005950:	20001178 	.word	0x20001178
 8005954:	2000117a 	.word	0x2000117a
 8005958:	00015180 	.word	0x00015180
 800595c:	200001c4 	.word	0x200001c4
 8005960:	fffff84e 	.word	0xfffff84e
 8005964:	fffff84f 	.word	0xfffff84f
 8005968:	20001184 	.word	0x20001184
 800596c:	2000117b 	.word	0x2000117b
 8005970:	2000117c 	.word	0x2000117c
 8005974:	2000117d 	.word	0x2000117d
 8005978:	2000117e 	.word	0x2000117e

0800597c <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;
extern uint16_t temperatureRTP;

//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	000a      	movs	r2, r1
 8005986:	1cfb      	adds	r3, r7, #3
 8005988:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 800598a:	230e      	movs	r3, #14
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 8005992:	230d      	movs	r3, #13
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e011      	b.n	80059c0 <prom8m1b+0x44>
		foo += array[i];
 800599c:	200d      	movs	r0, #13
 800599e:	183b      	adds	r3, r7, r0
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	18d3      	adds	r3, r2, r3
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	0019      	movs	r1, r3
 80059aa:	220e      	movs	r2, #14
 80059ac:	18bb      	adds	r3, r7, r2
 80059ae:	18ba      	adds	r2, r7, r2
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	188a      	adds	r2, r1, r2
 80059b4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 80059b6:	183b      	adds	r3, r7, r0
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	183b      	adds	r3, r7, r0
 80059bc:	3201      	adds	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	230d      	movs	r3, #13
 80059c2:	18fa      	adds	r2, r7, r3
 80059c4:	1cfb      	adds	r3, r7, #3
 80059c6:	7812      	ldrb	r2, [r2, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d3e6      	bcc.n	800599c <prom8m1b+0x20>
	}
	foo /=  prom;
 80059ce:	240e      	movs	r4, #14
 80059d0:	193b      	adds	r3, r7, r4
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	1cfb      	adds	r3, r7, #3
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	0019      	movs	r1, r3
 80059da:	0010      	movs	r0, r2
 80059dc:	f7fa fc26 	bl	800022c <__divsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	001a      	movs	r2, r3
 80059e4:	193b      	adds	r3, r7, r4
 80059e6:	801a      	strh	r2, [r3, #0]
	return foo;
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	881b      	ldrh	r3, [r3, #0]
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b005      	add	sp, #20
 80059f2:	bd90      	pop	{r4, r7, pc}

080059f4 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 80059fa:	4be3      	ldr	r3, [pc, #908]	@ (8005d88 <prog_param+0x394>)
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4053      	eors	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d140      	bne.n	8005a8a <prog_param+0x96>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 8005a08:	4be0      	ldr	r3, [pc, #896]	@ (8005d8c <prog_param+0x398>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 8005a0e:	4be0      	ldr	r3, [pc, #896]	@ (8005d90 <prog_param+0x39c>)
 8005a10:	2214      	movs	r2, #20
 8005a12:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 8005a14:	4bdf      	ldr	r3, [pc, #892]	@ (8005d94 <prog_param+0x3a0>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 8005a1a:	4bdf      	ldr	r3, [pc, #892]	@ (8005d98 <prog_param+0x3a4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8005a20:	2317      	movs	r3, #23
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e00a      	b.n	8005a40 <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 8005a2a:	2017      	movs	r0, #23
 8005a2c:	183b      	adds	r3, r7, r0
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4ada      	ldr	r2, [pc, #872]	@ (8005d9c <prog_param+0x3a8>)
 8005a32:	2100      	movs	r1, #0
 8005a34:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	183b      	adds	r3, r7, r0
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	2317      	movs	r3, #23
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b07      	cmp	r3, #7
 8005a48:	d9ef      	bls.n	8005a2a <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		//uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
		uint8_t *X = &eePlantilla[eedato_seg1];
 8005a4a:	4bd5      	ldr	r3, [pc, #852]	@ (8005da0 <prog_param+0x3ac>)
 8005a4c:	613b      	str	r3, [r7, #16]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8005a4e:	4bd5      	ldr	r3, [pc, #852]	@ (8005da4 <prog_param+0x3b0>)
 8005a50:	60fb      	str	r3, [r7, #12]
		uint8_t *Z = &reePlantilla[eedato_seg1];
 8005a52:	4bd5      	ldr	r3, [pc, #852]	@ (8005da8 <prog_param+0x3b4>)
 8005a54:	60bb      	str	r3, [r7, #8]
		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t)X);	//ld (Y), A
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7fd faf3 	bl	8003044 <findLastValue>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
		*Z = *Y;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	701a      	strb	r2, [r3, #0]
		//*Y = *X;
		X++;//incw X
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
		Y++;//incw Y
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
		Z++;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60bb      	str	r3, [r7, #8]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4bca      	ldr	r3, [pc, #808]	@ (8005dac <prog_param+0x3b8>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d802      	bhi.n	8005a8e <prog_param+0x9a>
			goto copy_eeprom;//jrule copy_eeprom
 8005a88:	e7e5      	b.n	8005a56 <prog_param+0x62>
			goto no_set_prog;
 8005a8a:	46c0      	nop			@ (mov r8, r8)
 8005a8c:	e000      	b.n	8005a90 <prog_param+0x9c>
		}

no_set_prog:
 8005a8e:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8005a90:	4bbe      	ldr	r3, [pc, #760]	@ (8005d8c <prog_param+0x398>)
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <prog_param+0xa8>
 8005a98:	f000 fc28 	bl	80062ec <prog_param+0x8f8>
			goto ask_btn_prsd;
 8005a9c:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8005a9e:	1dfb      	adds	r3, r7, #7
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e00d      	b.n	8005ac2 <prog_param+0xce>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8005aa6:	1dfb      	adds	r3, r7, #7
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8005db0 <prog_param+0x3bc>)
 8005aac:	5cd3      	ldrb	r3, [r2, r3]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4053      	eors	r3, r2
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10c      	bne.n	8005ad2 <prog_param+0xde>
	for(uint8_t k=0; k<8; k++){
 8005ab8:	1dfb      	adds	r3, r7, #7
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	1dfb      	adds	r3, r7, #7
 8005abe:	3201      	adds	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	1dfb      	adds	r3, r7, #7
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b07      	cmp	r3, #7
 8005ac8:	d9ed      	bls.n	8005aa6 <prog_param+0xb2>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 8005aca:	4bb1      	ldr	r3, [pc, #708]	@ (8005d90 <prog_param+0x39c>)
 8005acc:	2214      	movs	r2, #20
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e000      	b.n	8005ad4 <prog_param+0xe0>
			goto no_btn_pres; //jreq no_btn_pres
 8005ad2:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8005ad4:	4bae      	ldr	r3, [pc, #696]	@ (8005d90 <prog_param+0x39c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <prog_param+0xec>
 8005adc:	f000 fbf1 	bl	80062c2 <prog_param+0x8ce>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8005ae0:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8005ae2:	4baa      	ldr	r3, [pc, #680]	@ (8005d8c <prog_param+0x398>)
 8005ae4:	789b      	ldrb	r3, [r3, #2]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4053      	eors	r3, r2
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d114      	bne.n	8005b1a <prog_param+0x126>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8005af0:	4ba6      	ldr	r3, [pc, #664]	@ (8005d8c <prog_param+0x398>)
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d100      	bne.n	8005afa <prog_param+0x106>
 8005af8:	e268      	b.n	8005fcc <prog_param+0x5d8>
			goto jmp_nv2Menu2;
 8005afa:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 8005afc:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005afe:	4bad      	ldr	r3, [pc, #692]	@ (8005db4 <prog_param+0x3c0>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2207      	movs	r2, #7
 8005b04:	4013      	ands	r3, r2
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4bab      	ldr	r3, [pc, #684]	@ (8005db8 <prog_param+0x3c4>)
 8005b0a:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 8005b0c:	4baa      	ldr	r3, [pc, #680]	@ (8005db8 <prog_param+0x3c4>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d901      	bls.n	8005b18 <prog_param+0x124>
 8005b14:	f000 fbc3 	bl	800629e <prog_param+0x8aa>
 8005b18:	e305      	b.n	8006126 <prog_param+0x732>
			goto noMenu2;
 8005b1a:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 8005b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8005d8c <prog_param+0x398>)
 8005b1e:	78db      	ldrb	r3, [r3, #3]
 8005b20:	2201      	movs	r2, #1
 8005b22:	4053      	eors	r3, r2
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d100      	bne.n	8005b2c <prog_param+0x138>
 8005b2a:	e0cc      	b.n	8005cc6 <prog_param+0x2d2>
			goto sel_param;
 8005b2c:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 8005b2e:	4ba0      	ldr	r3, [pc, #640]	@ (8005db0 <prog_param+0x3bc>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 8005b34:	4b9e      	ldr	r3, [pc, #632]	@ (8005db0 <prog_param+0x3bc>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 8005b3a:	4b97      	ldr	r3, [pc, #604]	@ (8005d98 <prog_param+0x3a4>)
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8005db8 <prog_param+0x3c4>)
 8005b40:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 8005b42:	4b9e      	ldr	r3, [pc, #632]	@ (8005dbc <prog_param+0x3c8>)
 8005b44:	2209      	movs	r2, #9
 8005b46:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 8005b48:	4b9d      	ldr	r3, [pc, #628]	@ (8005dc0 <prog_param+0x3cc>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 8005b4e:	f000 fbd9 	bl	8006304 <md_dif_math>
		param = wreg;		//mov param,wreg
 8005b52:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc4 <prog_param+0x3d0>)
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	4b90      	ldr	r3, [pc, #576]	@ (8005d98 <prog_param+0x3a4>)
 8005b58:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 8005b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d98 <prog_param+0x3a4>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	220f      	movs	r2, #15
 8005b60:	4013      	ands	r3, r2
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b94      	ldr	r3, [pc, #592]	@ (8005db8 <prog_param+0x3c4>)
 8005b66:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005b68:	4b93      	ldr	r3, [pc, #588]	@ (8005db8 <prog_param+0x3c4>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d840      	bhi.n	8005bf2 <prog_param+0x1fe>
 8005b70:	009a      	lsls	r2, r3, #2
 8005b72:	4b95      	ldr	r3, [pc, #596]	@ (8005dc8 <prog_param+0x3d4>)
 8005b74:	18d3      	adds	r3, r2, r3
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 8005b7a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 8005b7c:	2125      	movs	r1, #37	@ 0x25
 8005b7e:	2005      	movs	r0, #5
 8005b80:	f001 fd3c 	bl	80075fc <op_menu>
		goto ask_enter;//jra ask_enter
 8005b84:	e03a      	b.n	8005bfc <prog_param+0x208>
			case 1: goto opc01m01;
 8005b86:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 8005b88:	210f      	movs	r1, #15
 8005b8a:	200d      	movs	r0, #13
 8005b8c:	f001 fd36 	bl	80075fc <op_menu>
		goto ask_enter; // jra ask_enter
 8005b90:	e034      	b.n	8005bfc <prog_param+0x208>
			case 2: goto opc02m01;
 8005b92:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8005b94:	210a      	movs	r1, #10
 8005b96:	2020      	movs	r0, #32
 8005b98:	f001 fd30 	bl	80075fc <op_menu>
		goto ask_enter;//jra ask_enter
 8005b9c:	e02e      	b.n	8005bfc <prog_param+0x208>
			case 3: goto opc03m01;
 8005b9e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8005ba0:	210b      	movs	r1, #11
 8005ba2:	2020      	movs	r0, #32
 8005ba4:	f001 fd2a 	bl	80075fc <op_menu>
		goto ask_enter;//jra ask_enter
 8005ba8:	e028      	b.n	8005bfc <prog_param+0x208>
			case 4: goto opc04m01;
 8005baa:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8005bac:	210f      	movs	r1, #15
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f001 fd24 	bl	80075fc <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bb4:	e022      	b.n	8005bfc <prog_param+0x208>
			case 5: goto opc05m01;
 8005bb6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 8005bb8:	2105      	movs	r1, #5
 8005bba:	2025      	movs	r0, #37	@ 0x25
 8005bbc:	f001 fd1e 	bl	80075fc <op_menu>
		goto ask_enter;//jra ask_enter
 8005bc0:	e01c      	b.n	8005bfc <prog_param+0x208>
			case 6: goto opc06m01;
 8005bc2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8005bc4:	2127      	movs	r1, #39	@ 0x27
 8005bc6:	200f      	movs	r0, #15
 8005bc8:	f001 fd18 	bl	80075fc <op_menu>
		goto ask_enter;//jra ask_enter
 8005bcc:	e016      	b.n	8005bfc <prog_param+0x208>
			case 7: goto opc07m01;
 8005bce:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8005bd0:	210a      	movs	r1, #10
 8005bd2:	200f      	movs	r0, #15
 8005bd4:	f001 fd12 	bl	80075fc <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bd8:	e010      	b.n	8005bfc <prog_param+0x208>
			case 8: goto opc08m01;
 8005bda:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8005bdc:	210e      	movs	r1, #14
 8005bde:	2005      	movs	r0, #5
 8005be0:	f001 fd0c 	bl	80075fc <op_menu>
		goto ask_enter;//jra ask_enter
 8005be4:	e00a      	b.n	8005bfc <prog_param+0x208>
			case 9: goto opc09m01;
 8005be6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 8005be8:	210e      	movs	r1, #14
 8005bea:	201f      	movs	r0, #31
 8005bec:	f001 fd06 	bl	80075fc <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bf0:	e004      	b.n	8005bfc <prog_param+0x208>
			default: goto opcNA;
 8005bf2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005bf4:	2126      	movs	r1, #38	@ 0x26
 8005bf6:	2026      	movs	r0, #38	@ 0x26
 8005bf8:	f001 fd00 	bl	80075fc <op_menu>
		datled_clear();
 8005bfc:	f001 fd18 	bl	8007630 <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 8005c00:	4b6b      	ldr	r3, [pc, #428]	@ (8005db0 <prog_param+0x3bc>)
 8005c02:	789b      	ldrb	r3, [r3, #2]
 8005c04:	2201      	movs	r2, #1
 8005c06:	4053      	eors	r3, r2
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d157      	bne.n	8005cbe <prog_param+0x2ca>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d8c <prog_param+0x398>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 8005c14:	4b60      	ldr	r3, [pc, #384]	@ (8005d98 <prog_param+0x3a4>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b09      	cmp	r3, #9
 8005c1a:	d100      	bne.n	8005c1e <prog_param+0x22a>
 8005c1c:	e353      	b.n	80062c6 <prog_param+0x8d2>
			goto ask_set_prog;//jrne ask_set_prog
 8005c1e:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 8005c20:	4b5d      	ldr	r3, [pc, #372]	@ (8005d98 <prog_param+0x3a4>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d14c      	bne.n	8005cc2 <prog_param+0x2ce>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 8005c28:	4b5c      	ldr	r3, [pc, #368]	@ (8005d9c <prog_param+0x3a8>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	4053      	eors	r3, r2
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <prog_param+0x24a>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 8005c36:	4b65      	ldr	r3, [pc, #404]	@ (8005dcc <prog_param+0x3d8>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <prog_param+0x24c>
			goto no_desh_forz;
 8005c3e:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 8005c40:	4b56      	ldr	r3, [pc, #344]	@ (8005d9c <prog_param+0x3a8>)
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2201      	movs	r2, #1
 8005c46:	4053      	eors	r3, r2
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d12f      	bne.n	8005cae <prog_param+0x2ba>
		flags_menu[1] = 0; //bres flags_menu,#1
 8005c4e:	4b53      	ldr	r3, [pc, #332]	@ (8005d9c <prog_param+0x3a8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 8005c54:	4b53      	ldr	r3, [pc, #332]	@ (8005da4 <prog_param+0x3b0>)
 8005c56:	2239      	movs	r2, #57	@ 0x39
 8005c58:	5c9a      	ldrb	r2, [r3, r2]
 8005c5a:	4b52      	ldr	r3, [pc, #328]	@ (8005da4 <prog_param+0x3b0>)
 8005c5c:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8005c5e:	4b51      	ldr	r3, [pc, #324]	@ (8005da4 <prog_param+0x3b0>)
 8005c60:	223a      	movs	r2, #58	@ 0x3a
 8005c62:	5c9a      	ldrb	r2, [r3, r2]
 8005c64:	4b4f      	ldr	r3, [pc, #316]	@ (8005da4 <prog_param+0x3b0>)
 8005c66:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 8005c68:	4b4e      	ldr	r3, [pc, #312]	@ (8005da4 <prog_param+0x3b0>)
 8005c6a:	223b      	movs	r2, #59	@ 0x3b
 8005c6c:	5c9a      	ldrb	r2, [r3, r2]
 8005c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8005da4 <prog_param+0x3b0>)
 8005c70:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8005c72:	4b4c      	ldr	r3, [pc, #304]	@ (8005da4 <prog_param+0x3b0>)
 8005c74:	223c      	movs	r2, #60	@ 0x3c
 8005c76:	5c9a      	ldrb	r2, [r3, r2]
 8005c78:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <prog_param+0x3b0>)
 8005c7a:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 8005c7c:	4b49      	ldr	r3, [pc, #292]	@ (8005da4 <prog_param+0x3b0>)
 8005c7e:	223d      	movs	r2, #61	@ 0x3d
 8005c80:	5c99      	ldrb	r1, [r3, r2]
 8005c82:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <prog_param+0x3b0>)
 8005c84:	222d      	movs	r2, #45	@ 0x2d
 8005c86:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 8005c88:	4b46      	ldr	r3, [pc, #280]	@ (8005da4 <prog_param+0x3b0>)
 8005c8a:	223e      	movs	r2, #62	@ 0x3e
 8005c8c:	5c99      	ldrb	r1, [r3, r2]
 8005c8e:	4b45      	ldr	r3, [pc, #276]	@ (8005da4 <prog_param+0x3b0>)
 8005c90:	222e      	movs	r2, #46	@ 0x2e
 8005c92:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8005c94:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <prog_param+0x3b0>)
 8005c96:	223f      	movs	r2, #63	@ 0x3f
 8005c98:	5c99      	ldrb	r1, [r3, r2]
 8005c9a:	4b42      	ldr	r3, [pc, #264]	@ (8005da4 <prog_param+0x3b0>)
 8005c9c:	222f      	movs	r2, #47	@ 0x2f
 8005c9e:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8005ca0:	4b40      	ldr	r3, [pc, #256]	@ (8005da4 <prog_param+0x3b0>)
 8005ca2:	2240      	movs	r2, #64	@ 0x40
 8005ca4:	5c99      	ldrb	r1, [r3, r2]
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <prog_param+0x3b0>)
 8005ca8:	2230      	movs	r2, #48	@ 0x30
 8005caa:	5499      	strb	r1, [r3, r2]
 8005cac:	e000      	b.n	8005cb0 <prog_param+0x2bc>
			goto no_def_param;
 8005cae:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8005cb0:	4b47      	ldr	r3, [pc, #284]	@ (8005dd0 <prog_param+0x3dc>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <prog_param+0x3e0>)
 8005cb8:	22aa      	movs	r2, #170	@ 0xaa
 8005cba:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 8005cbc:	e306      	b.n	80062cc <prog_param+0x8d8>
			goto fin_sel_param;
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	e315      	b.n	80062ee <prog_param+0x8fa>
			goto fin_sel_param; //jrne fin_sel_param
 8005cc2:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8005cc4:	e313      	b.n	80062ee <prog_param+0x8fa>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8005cc6:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 8005cc8:	4b33      	ldr	r3, [pc, #204]	@ (8005d98 <prog_param+0x3a4>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	220f      	movs	r2, #15
 8005cce:	4013      	ands	r3, r2
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4b39      	ldr	r3, [pc, #228]	@ (8005db8 <prog_param+0x3c4>)
 8005cd4:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005cd6:	4b38      	ldr	r3, [pc, #224]	@ (8005db8 <prog_param+0x3c4>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d900      	bls.n	8005ce0 <prog_param+0x2ec>
 8005cde:	e132      	b.n	8005f46 <prog_param+0x552>
 8005ce0:	009a      	lsls	r2, r3, #2
 8005ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8005dd8 <prog_param+0x3e4>)
 8005ce4:	18d3      	adds	r3, r2, r3
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 8005cea:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 8005cec:	4b3b      	ldr	r3, [pc, #236]	@ (8005ddc <prog_param+0x3e8>)
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 fbe2 	bl	80064b8 <TwoByteInArrayToWord>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	001c      	movs	r4, r3
 8005cf8:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <prog_param+0x3ec>)
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 fbdc 	bl	80064b8 <TwoByteInArrayToWord>
 8005d00:	0003      	movs	r3, r0
 8005d02:	001d      	movs	r5, r3
 8005d04:	4b37      	ldr	r3, [pc, #220]	@ (8005de4 <prog_param+0x3f0>)
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 fbd6 	bl	80064b8 <TwoByteInArrayToWord>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	001a      	movs	r2, r3
 8005d10:	2302      	movs	r3, #2
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2301      	movs	r3, #1
 8005d16:	0029      	movs	r1, r5
 8005d18:	0020      	movs	r0, r4
 8005d1a:	f001 fcc3 	bl	80076a4 <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 8005d1e:	e117      	b.n	8005f50 <prog_param+0x55c>
			case 1: goto opc01m01nv2;
 8005d20:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 8005d22:	4b31      	ldr	r3, [pc, #196]	@ (8005de8 <prog_param+0x3f4>)
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 fbc7 	bl	80064b8 <TwoByteInArrayToWord>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	2304      	movs	r3, #4
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2303      	movs	r3, #3
 8005d34:	2100      	movs	r1, #0
 8005d36:	2063      	movs	r0, #99	@ 0x63
 8005d38:	f001 fcb4 	bl	80076a4 <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005d3c:	e108      	b.n	8005f50 <prog_param+0x55c>
			case 2: goto opc02m01nv2;
 8005d3e:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 8005d40:	4b26      	ldr	r3, [pc, #152]	@ (8005ddc <prog_param+0x3e8>)
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 fbb8 	bl	80064b8 <TwoByteInArrayToWord>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	3396      	adds	r3, #150	@ 0x96
 8005d4c:	001c      	movs	r4, r3
 8005d4e:	4b25      	ldr	r3, [pc, #148]	@ (8005de4 <prog_param+0x3f0>)
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 fbb1 	bl	80064b8 <TwoByteInArrayToWord>
 8005d56:	0003      	movs	r3, r0
 8005d58:	001d      	movs	r5, r3
 8005d5a:	4b23      	ldr	r3, [pc, #140]	@ (8005de8 <prog_param+0x3f4>)
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 fbab 	bl	80064b8 <TwoByteInArrayToWord>
 8005d62:	0003      	movs	r3, r0
 8005d64:	18eb      	adds	r3, r5, r3
 8005d66:	330a      	adds	r3, #10
 8005d68:	001d      	movs	r5, r3
 8005d6a:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <prog_param+0x3f8>)
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 fba3 	bl	80064b8 <TwoByteInArrayToWord>
 8005d72:	0003      	movs	r3, r0
 8005d74:	001a      	movs	r2, r3
 8005d76:	232e      	movs	r3, #46	@ 0x2e
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	232d      	movs	r3, #45	@ 0x2d
 8005d7c:	0029      	movs	r1, r5
 8005d7e:	0020      	movs	r0, r4
 8005d80:	f001 fc90 	bl	80076a4 <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005d84:	e0e4      	b.n	8005f50 <prog_param+0x55c>
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	20000c74 	.word	0x20000c74
 8005d8c:	20000c44 	.word	0x20000c44
 8005d90:	20000bce 	.word	0x20000bce
 8005d94:	20000c5c 	.word	0x20000c5c
 8005d98:	20000c5b 	.word	0x20000c5b
 8005d9c:	20000ca4 	.word	0x20000ca4
 8005da0:	0803f000 	.word	0x0803f000
 8005da4:	20000138 	.word	0x20000138
 8005da8:	20000ce8 	.word	0x20000ce8
 8005dac:	200001b7 	.word	0x200001b7
 8005db0:	20000c4c 	.word	0x20000c4c
 8005db4:	20000c5a 	.word	0x20000c5a
 8005db8:	20000930 	.word	0x20000930
 8005dbc:	20000c5e 	.word	0x20000c5e
 8005dc0:	20000c60 	.word	0x20000c60
 8005dc4:	20000bb3 	.word	0x20000bb3
 8005dc8:	0801c5f8 	.word	0x0801c5f8
 8005dcc:	20000cac 	.word	0x20000cac
 8005dd0:	20000cc0 	.word	0x20000cc0
 8005dd4:	20000cbf 	.word	0x20000cbf
 8005dd8:	0801c620 	.word	0x0801c620
 8005ddc:	20000147 	.word	0x20000147
 8005de0:	20000145 	.word	0x20000145
 8005de4:	20000139 	.word	0x20000139
 8005de8:	2000013b 	.word	0x2000013b
 8005dec:	20000165 	.word	0x20000165
			case 3: goto opc03m01nv2;
 8005df0:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 8005df2:	4bd4      	ldr	r3, [pc, #848]	@ (8006144 <prog_param+0x750>)
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 fb5f 	bl	80064b8 <TwoByteInArrayToWord>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	3b0a      	subs	r3, #10
 8005dfe:	001c      	movs	r4, r3
 8005e00:	4bd1      	ldr	r3, [pc, #836]	@ (8006148 <prog_param+0x754>)
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 fb58 	bl	80064b8 <TwoByteInArrayToWord>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	3b96      	subs	r3, #150	@ 0x96
 8005e0c:	001d      	movs	r5, r3
 8005e0e:	4bcf      	ldr	r3, [pc, #828]	@ (800614c <prog_param+0x758>)
 8005e10:	0018      	movs	r0, r3
 8005e12:	f000 fb51 	bl	80064b8 <TwoByteInArrayToWord>
 8005e16:	0003      	movs	r3, r0
 8005e18:	001a      	movs	r2, r3
 8005e1a:	2330      	movs	r3, #48	@ 0x30
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	232f      	movs	r3, #47	@ 0x2f
 8005e20:	0029      	movs	r1, r5
 8005e22:	0020      	movs	r0, r4
 8005e24:	f001 fc3e 	bl	80076a4 <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 8005e28:	e092      	b.n	8005f50 <prog_param+0x55c>
			case 4: goto opc04m01nv2;
 8005e2a:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 8005e2c:	4bc8      	ldr	r3, [pc, #800]	@ (8006150 <prog_param+0x75c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <prog_param+0x44a>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 8005e34:	4bc6      	ldr	r3, [pc, #792]	@ (8006150 <prog_param+0x75c>)
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <prog_param+0x462>
				goto toggle_opc04m01nv2;
 8005e3c:	e000      	b.n	8005e40 <prog_param+0x44c>
				goto toggle_opc04m01nv2;
 8005e3e:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 8005e40:	4bc4      	ldr	r3, [pc, #784]	@ (8006154 <prog_param+0x760>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2201      	movs	r2, #1
 8005e46:	4053      	eors	r3, r2
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	4193      	sbcs	r3, r2
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4bc0      	ldr	r3, [pc, #768]	@ (8006154 <prog_param+0x760>)
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e000      	b.n	8005e58 <prog_param+0x464>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 8005e56:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005e58:	2101      	movs	r1, #1
 8005e5a:	2028      	movs	r0, #40	@ 0x28
 8005e5c:	f001 fbce 	bl	80075fc <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 8005e60:	4bbc      	ldr	r3, [pc, #752]	@ (8006154 <prog_param+0x760>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	4053      	eors	r3, r2
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <prog_param+0x484>
			op_menu (0x00, 0x1D);
 8005e6e:	211d      	movs	r1, #29
 8005e70:	2000      	movs	r0, #0
 8005e72:	f001 fbc3 	bl	80075fc <op_menu>
 8005e76:	e000      	b.n	8005e7a <prog_param+0x486>
				goto dpy2_opc04m01nv2;
 8005e78:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005e7a:	f001 fbd9 	bl	8007630 <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005e7e:	e067      	b.n	8005f50 <prog_param+0x55c>
			case 5: goto opc05m01nv2;
 8005e80:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 8005e82:	2105      	movs	r1, #5
 8005e84:	2025      	movs	r0, #37	@ 0x25
 8005e86:	f001 fbb9 	bl	80075fc <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8005e8a:	4bb3      	ldr	r3, [pc, #716]	@ (8006158 <prog_param+0x764>)
 8005e8c:	2263      	movs	r2, #99	@ 0x63
 8005e8e:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 8005e90:	4bb2      	ldr	r3, [pc, #712]	@ (800615c <prog_param+0x768>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8005e96:	4bb2      	ldr	r3, [pc, #712]	@ (8006160 <prog_param+0x76c>)
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	4bb2      	ldr	r3, [pc, #712]	@ (8006164 <prog_param+0x770>)
 8005e9c:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 8005e9e:	f000 fa31 	bl	8006304 <md_dif_math>
			key = wreg;//	mov	key,wreg
 8005ea2:	4bb1      	ldr	r3, [pc, #708]	@ (8006168 <prog_param+0x774>)
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	4bae      	ldr	r3, [pc, #696]	@ (8006160 <prog_param+0x76c>)
 8005ea8:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 8005eaa:	f000 fd3b 	bl	8006924 <soloent1>
			datled_clear();
 8005eae:	f001 fbbf 	bl	8007630 <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 8005eb2:	e04d      	b.n	8005f50 <prog_param+0x55c>
			case 6: goto opc06m01nv2;
 8005eb4:	46c0      	nop			@ (mov r8, r8)
			op_menu  (reePlantilla[eeversion1], reePlantilla[eeversion2]/10);
 8005eb6:	4bad      	ldr	r3, [pc, #692]	@ (800616c <prog_param+0x778>)
 8005eb8:	227b      	movs	r2, #123	@ 0x7b
 8005eba:	5c9c      	ldrb	r4, [r3, r2]
 8005ebc:	4bab      	ldr	r3, [pc, #684]	@ (800616c <prog_param+0x778>)
 8005ebe:	227c      	movs	r2, #124	@ 0x7c
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	210a      	movs	r1, #10
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7fa f927 	bl	8000118 <__udivsi3>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	0019      	movs	r1, r3
 8005ed0:	0020      	movs	r0, r4
 8005ed2:	f001 fb93 	bl	80075fc <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005ed6:	e03b      	b.n	8005f50 <prog_param+0x55c>
			case 7: goto opc07m01nv2;
 8005ed8:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8005eda:	4b9d      	ldr	r3, [pc, #628]	@ (8006150 <prog_param+0x75c>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <prog_param+0x4f8>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 8005ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8006150 <prog_param+0x75c>)
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <prog_param+0x510>
			   goto toggle_opc07m01nv2;
 8005eea:	e000      	b.n	8005eee <prog_param+0x4fa>
			   goto toggle_opc07m01nv2;
 8005eec:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8005eee:	4b99      	ldr	r3, [pc, #612]	@ (8006154 <prog_param+0x760>)
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4053      	eors	r3, r2
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	1e5a      	subs	r2, r3, #1
 8005efa:	4193      	sbcs	r3, r2
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	4b95      	ldr	r3, [pc, #596]	@ (8006154 <prog_param+0x760>)
 8005f00:	705a      	strb	r2, [r3, #1]
 8005f02:	e000      	b.n	8005f06 <prog_param+0x512>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8005f04:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005f06:	2101      	movs	r1, #1
 8005f08:	2028      	movs	r0, #40	@ 0x28
 8005f0a:	f001 fb77 	bl	80075fc <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8005f0e:	4b91      	ldr	r3, [pc, #580]	@ (8006154 <prog_param+0x760>)
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4053      	eors	r3, r2
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <prog_param+0x532>
			op_menu (0x00, 0x1D);
 8005f1c:	211d      	movs	r1, #29
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f001 fb6c 	bl	80075fc <op_menu>
 8005f24:	e000      	b.n	8005f28 <prog_param+0x534>
				goto dpy2_opc07m01nv2;
 8005f26:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005f28:	f001 fb82 	bl	8007630 <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005f2c:	e010      	b.n	8005f50 <prog_param+0x55c>
			case 8: goto opc08m01nv2;
 8005f2e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8005f30:	210e      	movs	r1, #14
 8005f32:	2005      	movs	r0, #5
 8005f34:	f001 fb62 	bl	80075fc <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8005f38:	e00a      	b.n	8005f50 <prog_param+0x55c>
			case 9: goto opc09m01nv2;
 8005f3a:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8005f3c:	210e      	movs	r1, #14
 8005f3e:	201f      	movs	r0, #31
 8005f40:	f001 fb5c 	bl	80075fc <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8005f44:	e004      	b.n	8005f50 <prog_param+0x55c>
			default: goto opcNAnv2;
 8005f46:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8005f48:	2126      	movs	r1, #38	@ 0x26
 8005f4a:	2026      	movs	r0, #38	@ 0x26
 8005f4c:	f001 fb56 	bl	80075fc <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8005f50:	4b7f      	ldr	r3, [pc, #508]	@ (8006150 <prog_param+0x75c>)
 8005f52:	789b      	ldrb	r3, [r3, #2]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4053      	eors	r3, r2
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d12e      	bne.n	8005fbc <prog_param+0x5c8>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8005f5e:	4b84      	ldr	r3, [pc, #528]	@ (8006170 <prog_param+0x77c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8005f64:	4b83      	ldr	r3, [pc, #524]	@ (8006174 <prog_param+0x780>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b05      	cmp	r3, #5
 8005f6a:	d129      	bne.n	8005fc0 <prog_param+0x5cc>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8005f6c:	4b82      	ldr	r3, [pc, #520]	@ (8006178 <prog_param+0x784>)
 8005f6e:	2273      	movs	r2, #115	@ 0x73
 8005f70:	5c9a      	ldrb	r2, [r3, r2]
 8005f72:	4b7b      	ldr	r3, [pc, #492]	@ (8006160 <prog_param+0x76c>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d124      	bne.n	8005fc4 <prog_param+0x5d0>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8005f7a:	4976      	ldr	r1, [pc, #472]	@ (8006154 <prog_param+0x760>)
 8005f7c:	487c      	ldr	r0, [pc, #496]	@ (8006170 <prog_param+0x77c>)
 8005f7e:	2303      	movs	r3, #3
 8005f80:	2202      	movs	r2, #2
 8005f82:	f007 fcf5 	bl	800d970 <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8005f86:	4b7d      	ldr	r3, [pc, #500]	@ (800617c <prog_param+0x788>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8005f8c:	4b78      	ldr	r3, [pc, #480]	@ (8006170 <prog_param+0x77c>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2201      	movs	r2, #1
 8005f92:	4053      	eors	r3, r2
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <prog_param+0x5ae>
			flags_menu[3] = 1;//bset flags_menu,#3
 8005f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8006154 <prog_param+0x760>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	70da      	strb	r2, [r3, #3]
 8005fa0:	e000      	b.n	8005fa4 <prog_param+0x5b0>
				goto noSetFlagLU;
 8005fa2:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8005fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8006154 <prog_param+0x760>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8005faa:	4b73      	ldr	r3, [pc, #460]	@ (8006178 <prog_param+0x784>)
 8005fac:	2252      	movs	r2, #82	@ 0x52
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d109      	bne.n	8005fc8 <prog_param+0x5d4>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8005fb4:	4b67      	ldr	r3, [pc, #412]	@ (8006154 <prog_param+0x760>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8005fba:	e198      	b.n	80062ee <prog_param+0x8fa>
				goto no_enter_nv2;
 8005fbc:	46c0      	nop			@ (mov r8, r8)
 8005fbe:	e196      	b.n	80062ee <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8005fc0:	46c0      	nop			@ (mov r8, r8)
 8005fc2:	e194      	b.n	80062ee <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2
 8005fc4:	46c0      	nop			@ (mov r8, r8)
 8005fc6:	e192      	b.n	80062ee <prog_param+0x8fa>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8005fc8:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8005fca:	e190      	b.n	80062ee <prog_param+0x8fa>
		goto menu2; //jp menu2
 8005fcc:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8005fce:	4960      	ldr	r1, [pc, #384]	@ (8006150 <prog_param+0x75c>)
 8005fd0:	485f      	ldr	r0, [pc, #380]	@ (8006150 <prog_param+0x75c>)
 8005fd2:	2305      	movs	r3, #5
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f007 fce6 	bl	800d9a6 <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8005fda:	4b68      	ldr	r3, [pc, #416]	@ (800617c <prog_param+0x788>)
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	4b61      	ldr	r3, [pc, #388]	@ (8006164 <prog_param+0x770>)
 8005fe0:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8005fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8006158 <prog_param+0x764>)
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8005fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800615c <prog_param+0x768>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8005fee:	f000 f989 	bl	8006304 <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8005ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8006168 <prog_param+0x774>)
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	4b61      	ldr	r3, [pc, #388]	@ (800617c <prog_param+0x788>)
 8005ff8:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005ffa:	4b60      	ldr	r3, [pc, #384]	@ (800617c <prog_param+0x788>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2207      	movs	r2, #7
 8006000:	4013      	ands	r3, r2
 8006002:	b2da      	uxtb	r2, r3
 8006004:	4b57      	ldr	r3, [pc, #348]	@ (8006164 <prog_param+0x770>)
 8006006:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8006008:	4b56      	ldr	r3, [pc, #344]	@ (8006164 <prog_param+0x770>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b04      	cmp	r3, #4
 800600e:	d822      	bhi.n	8006056 <prog_param+0x662>
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	4b5b      	ldr	r3, [pc, #364]	@ (8006180 <prog_param+0x78c>)
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 800601a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 800601c:	210f      	movs	r1, #15
 800601e:	2000      	movs	r0, #0
 8006020:	f001 faec 	bl	80075fc <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006024:	e01c      	b.n	8006060 <prog_param+0x66c>
			case 1: goto opc01m02;
 8006026:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8006028:	2127      	movs	r1, #39	@ 0x27
 800602a:	2011      	movs	r0, #17
 800602c:	f001 fae6 	bl	80075fc <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006030:	e016      	b.n	8006060 <prog_param+0x66c>
			case 2: goto opc02m02;
 8006032:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8006034:	211d      	movs	r1, #29
 8006036:	2027      	movs	r0, #39	@ 0x27
 8006038:	f001 fae0 	bl	80075fc <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 800603c:	e010      	b.n	8006060 <prog_param+0x66c>
			case 3: goto opc03m02;
 800603e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8006040:	210e      	movs	r1, #14
 8006042:	2005      	movs	r0, #5
 8006044:	f001 fada 	bl	80075fc <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8006048:	e00a      	b.n	8006060 <prog_param+0x66c>
			case 4: goto opc04m02;
 800604a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 800604c:	210e      	movs	r1, #14
 800604e:	201f      	movs	r0, #31
 8006050:	f001 fad4 	bl	80075fc <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8006054:	e004      	b.n	8006060 <prog_param+0x66c>
			default: goto opcNA_m02;
 8006056:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8006058:	2126      	movs	r1, #38	@ 0x26
 800605a:	2026      	movs	r0, #38	@ 0x26
 800605c:	f001 face 	bl	80075fc <op_menu>
		datled_clear();
 8006060:	f001 fae6 	bl	8007630 <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8006064:	4b3a      	ldr	r3, [pc, #232]	@ (8006150 <prog_param+0x75c>)
 8006066:	789b      	ldrb	r3, [r3, #2]
 8006068:	2201      	movs	r2, #1
 800606a:	4053      	eors	r3, r2
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d155      	bne.n	800611e <prog_param+0x72a>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 8006072:	4b3f      	ldr	r3, [pc, #252]	@ (8006170 <prog_param+0x77c>)
 8006074:	2201      	movs	r2, #1
 8006076:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8006078:	4b40      	ldr	r3, [pc, #256]	@ (800617c <prog_param+0x788>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b04      	cmp	r3, #4
 800607e:	d100      	bne.n	8006082 <prog_param+0x68e>
 8006080:	e123      	b.n	80062ca <prog_param+0x8d6>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 8006082:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8006084:	4b3d      	ldr	r3, [pc, #244]	@ (800617c <prog_param+0x788>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d14a      	bne.n	8006122 <prog_param+0x72e>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 800608c:	4b38      	ldr	r3, [pc, #224]	@ (8006170 <prog_param+0x77c>)
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 8006092:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <prog_param+0x760>)
 8006094:	78db      	ldrb	r3, [r3, #3]
 8006096:	2201      	movs	r2, #1
 8006098:	4053      	eors	r3, r2
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <prog_param+0x6b4>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 80060a0:	4b33      	ldr	r3, [pc, #204]	@ (8006170 <prog_param+0x77c>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e000      	b.n	80060aa <prog_param+0x6b6>
			goto noOnLuz;
 80060a8:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <prog_param+0x760>)
 80060ac:	789b      	ldrb	r3, [r3, #2]
 80060ae:	2201      	movs	r2, #1
 80060b0:	4053      	eors	r3, r2
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <prog_param+0x6cc>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 80060b8:	4b32      	ldr	r3, [pc, #200]	@ (8006184 <prog_param+0x790>)
 80060ba:	2278      	movs	r2, #120	@ 0x78
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e000      	b.n	80060c2 <prog_param+0x6ce>
			goto noOffManto;
 80060c0:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <prog_param+0x794>)
 80060c4:	2252      	movs	r2, #82	@ 0x52
 80060c6:	2100      	movs	r1, #0
 80060c8:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 80060ca:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <prog_param+0x760>)
 80060cc:	791b      	ldrb	r3, [r3, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	4053      	eors	r3, r2
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <prog_param+0x6ee>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 80060d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <prog_param+0x794>)
 80060da:	2252      	movs	r2, #82	@ 0x52
 80060dc:	2120      	movs	r1, #32
 80060de:	5499      	strb	r1, [r3, r2]
 80060e0:	e000      	b.n	80060e4 <prog_param+0x6f0>
			goto noFahrenheitFlagDpy;
 80060e2:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == reePlantilla[eeescala]){
 80060e4:	4b28      	ldr	r3, [pc, #160]	@ (8006188 <prog_param+0x794>)
 80060e6:	2252      	movs	r2, #82	@ 0x52
 80060e8:	5c9a      	ldrb	r2, [r3, r2]
 80060ea:	4b20      	ldr	r3, [pc, #128]	@ (800616c <prog_param+0x778>)
 80060ec:	2152      	movs	r1, #82	@ 0x52
 80060ee:	5c5b      	ldrb	r3, [r3, r1]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d012      	beq.n	800611a <prog_param+0x726>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 80060f4:	4b24      	ldr	r3, [pc, #144]	@ (8006188 <prog_param+0x794>)
 80060f6:	2252      	movs	r2, #82	@ 0x52
 80060f8:	5c9a      	ldrb	r2, [r3, r2]
 80060fa:	4b24      	ldr	r3, [pc, #144]	@ (800618c <prog_param+0x798>)
 80060fc:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 80060fe:	4b23      	ldr	r3, [pc, #140]	@ (800618c <prog_param+0x798>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	001a      	movs	r2, r3
 8006104:	4b22      	ldr	r3, [pc, #136]	@ (8006190 <prog_param+0x79c>)
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f001 fa63 	bl	80075d4 <wreeprom>
		reePlantilla[eeescala] = waux;
 800610e:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <prog_param+0x798>)
 8006110:	7819      	ldrb	r1, [r3, #0]
 8006112:	4b16      	ldr	r3, [pc, #88]	@ (800616c <prog_param+0x778>)
 8006114:	2252      	movs	r2, #82	@ 0x52
 8006116:	5499      	strb	r1, [r3, r2]
		 goto cancel_prog; //jp cancel_prog
 8006118:	e0d8      	b.n	80062cc <prog_param+0x8d8>
			goto noCambiaEscala;//	jreq noCambiaEscala
 800611a:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 800611c:	e0d6      	b.n	80062cc <prog_param+0x8d8>
			goto fin_menu2;
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	e0e5      	b.n	80062ee <prog_param+0x8fa>
			goto fin_menu2;//	jrne fin_menu2;
 8006122:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8006124:	e0e3      	b.n	80062ee <prog_param+0x8fa>
			switch(STM8_A)
 8006126:	009a      	lsls	r2, r3, #2
 8006128:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <prog_param+0x7a0>)
 800612a:	18d3      	adds	r3, r2, r3
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 8006130:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8006132:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <prog_param+0x75c>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d12e      	bne.n	8006198 <prog_param+0x7a4>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 800613a:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <prog_param+0x75c>)
 800613c:	791b      	ldrb	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d036      	beq.n	80061b0 <prog_param+0x7bc>
				goto toggle_opc00m02nv2;
 8006142:	e02a      	b.n	800619a <prog_param+0x7a6>
 8006144:	20000139 	.word	0x20000139
 8006148:	20000145 	.word	0x20000145
 800614c:	20000167 	.word	0x20000167
 8006150:	20000c4c 	.word	0x20000c4c
 8006154:	20000ca4 	.word	0x20000ca4
 8006158:	20000c5e 	.word	0x20000c5e
 800615c:	20000c60 	.word	0x20000c60
 8006160:	20000c5c 	.word	0x20000c5c
 8006164:	20000930 	.word	0x20000930
 8006168:	20000bb3 	.word	0x20000bb3
 800616c:	20000ce8 	.word	0x20000ce8
 8006170:	20000c44 	.word	0x20000c44
 8006174:	20000c5b 	.word	0x20000c5b
 8006178:	200000b8 	.word	0x200000b8
 800617c:	20000c5a 	.word	0x20000c5a
 8006180:	0801c648 	.word	0x0801c648
 8006184:	20000cad 	.word	0x20000cad
 8006188:	20000138 	.word	0x20000138
 800618c:	20000bb2 	.word	0x20000bb2
 8006190:	0803f052 	.word	0x0803f052
 8006194:	0801c65c 	.word	0x0801c65c
				goto toggle_opc00m02nv2;
 8006198:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 800619a:	4b57      	ldr	r3, [pc, #348]	@ (80062f8 <prog_param+0x904>)
 800619c:	789b      	ldrb	r3, [r3, #2]
 800619e:	001a      	movs	r2, r3
 80061a0:	2302      	movs	r3, #2
 80061a2:	4053      	eors	r3, r2
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	4193      	sbcs	r3, r2
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	4b53      	ldr	r3, [pc, #332]	@ (80062f8 <prog_param+0x904>)
 80061ac:	709a      	strb	r2, [r3, #2]
 80061ae:	e000      	b.n	80061b2 <prog_param+0x7be>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 80061b0:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 80061b2:	2101      	movs	r1, #1
 80061b4:	2028      	movs	r0, #40	@ 0x28
 80061b6:	f001 fa21 	bl	80075fc <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 80061ba:	4b4f      	ldr	r3, [pc, #316]	@ (80062f8 <prog_param+0x904>)
 80061bc:	789b      	ldrb	r3, [r3, #2]
 80061be:	2201      	movs	r2, #1
 80061c0:	4053      	eors	r3, r2
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <prog_param+0x7de>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 80061c8:	211d      	movs	r1, #29
 80061ca:	2000      	movs	r0, #0
 80061cc:	f001 fa16 	bl	80075fc <op_menu>
 80061d0:	e000      	b.n	80061d4 <prog_param+0x7e0>
				goto dpy2_opc00m02nv2;
 80061d2:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 80061d4:	f001 fa2c 	bl	8007630 <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 80061d8:	e066      	b.n	80062a8 <prog_param+0x8b4>
				case 1:  goto opc01m02nv2;
 80061da:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 80061dc:	4b47      	ldr	r3, [pc, #284]	@ (80062fc <prog_param+0x908>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <prog_param+0x7fa>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 80061e4:	4b45      	ldr	r3, [pc, #276]	@ (80062fc <prog_param+0x908>)
 80061e6:	791b      	ldrb	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00c      	beq.n	8006206 <prog_param+0x812>
				goto toggle_opc01m02nv2;
 80061ec:	e000      	b.n	80061f0 <prog_param+0x7fc>
				goto toggle_opc01m02nv2;
 80061ee:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 80061f0:	4b41      	ldr	r3, [pc, #260]	@ (80062f8 <prog_param+0x904>)
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	2201      	movs	r2, #1
 80061f6:	4053      	eors	r3, r2
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	1e5a      	subs	r2, r3, #1
 80061fc:	4193      	sbcs	r3, r2
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	4b3d      	ldr	r3, [pc, #244]	@ (80062f8 <prog_param+0x904>)
 8006202:	70da      	strb	r2, [r3, #3]
 8006204:	e000      	b.n	8006208 <prog_param+0x814>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8006206:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8006208:	210f      	movs	r1, #15
 800620a:	2000      	movs	r0, #0
 800620c:	f001 f9f6 	bl	80075fc <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8006210:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <prog_param+0x904>)
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	2201      	movs	r2, #1
 8006216:	4053      	eors	r3, r2
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <prog_param+0x834>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 800621e:	211d      	movs	r1, #29
 8006220:	2000      	movs	r0, #0
 8006222:	f001 f9eb 	bl	80075fc <op_menu>
 8006226:	e000      	b.n	800622a <prog_param+0x836>
				goto dpy2_opc01m02nv2;
 8006228:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 800622a:	f001 fa01 	bl	8007630 <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 800622e:	e03b      	b.n	80062a8 <prog_param+0x8b4>
				case 2:  goto opc02m02nv2;
 8006230:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8006232:	4b32      	ldr	r3, [pc, #200]	@ (80062fc <prog_param+0x908>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <prog_param+0x850>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 800623a:	4b30      	ldr	r3, [pc, #192]	@ (80062fc <prog_param+0x908>)
 800623c:	791b      	ldrb	r3, [r3, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <prog_param+0x868>
			   goto toggle_opc02m02nv2;
 8006242:	e000      	b.n	8006246 <prog_param+0x852>
			   goto toggle_opc02m02nv2;
 8006244:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8006246:	4b2c      	ldr	r3, [pc, #176]	@ (80062f8 <prog_param+0x904>)
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	4053      	eors	r3, r2
 800624e:	b2db      	uxtb	r3, r3
 8006250:	1e5a      	subs	r2, r3, #1
 8006252:	4193      	sbcs	r3, r2
 8006254:	b2da      	uxtb	r2, r3
 8006256:	4b28      	ldr	r3, [pc, #160]	@ (80062f8 <prog_param+0x904>)
 8006258:	711a      	strb	r2, [r3, #4]
 800625a:	e000      	b.n	800625e <prog_param+0x86a>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 800625c:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 800625e:	210c      	movs	r1, #12
 8006260:	2029      	movs	r0, #41	@ 0x29
 8006262:	f001 f9cb 	bl	80075fc <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <prog_param+0x904>)
 8006268:	791b      	ldrb	r3, [r3, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	4053      	eors	r3, r2
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <prog_param+0x88a>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8006274:	210f      	movs	r1, #15
 8006276:	2029      	movs	r0, #41	@ 0x29
 8006278:	f001 f9c0 	bl	80075fc <op_menu>
 800627c:	e000      	b.n	8006280 <prog_param+0x88c>
				  goto dpy2_opc02m02nv2;
 800627e:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 8006280:	f001 f9d6 	bl	8007630 <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8006284:	e010      	b.n	80062a8 <prog_param+0x8b4>
				case 3:  goto opc03m02nv2;
 8006286:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8006288:	210e      	movs	r1, #14
 800628a:	2005      	movs	r0, #5
 800628c:	f001 f9b6 	bl	80075fc <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8006290:	e00a      	b.n	80062a8 <prog_param+0x8b4>
				case 4:  goto opc04m02nv2;
 8006292:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 8006294:	210e      	movs	r1, #14
 8006296:	201f      	movs	r0, #31
 8006298:	f001 f9b0 	bl	80075fc <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 800629c:	e004      	b.n	80062a8 <prog_param+0x8b4>
				default: goto opcNAm02nv2;
 800629e:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 80062a0:	2126      	movs	r1, #38	@ 0x26
 80062a2:	2026      	movs	r0, #38	@ 0x26
 80062a4:	f001 f9aa 	bl	80075fc <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <prog_param+0x908>)
 80062aa:	789b      	ldrb	r3, [r3, #2]
 80062ac:	2201      	movs	r2, #1
 80062ae:	4053      	eors	r3, r2
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <prog_param+0x8ca>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 80062b6:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <prog_param+0x90c>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 80062bc:	e017      	b.n	80062ee <prog_param+0x8fa>
			goto no_enter_m02nv2;
 80062be:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 80062c0:	e015      	b.n	80062ee <prog_param+0x8fa>
		goto cancel_prog;
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	e002      	b.n	80062cc <prog_param+0x8d8>
		goto cancel_prog;//jp cancel_prog;
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	e000      	b.n	80062cc <prog_param+0x8d8>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 80062ca:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 80062cc:	490c      	ldr	r1, [pc, #48]	@ (8006300 <prog_param+0x90c>)
 80062ce:	480c      	ldr	r0, [pc, #48]	@ (8006300 <prog_param+0x90c>)
 80062d0:	2303      	movs	r3, #3
 80062d2:	2201      	movs	r2, #1
 80062d4:	f007 fb67 	bl	800d9a6 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 80062d8:	4909      	ldr	r1, [pc, #36]	@ (8006300 <prog_param+0x90c>)
 80062da:	4809      	ldr	r0, [pc, #36]	@ (8006300 <prog_param+0x90c>)
 80062dc:	2302      	movs	r3, #2
 80062de:	2205      	movs	r2, #5
 80062e0:	f007 fb61 	bl	800d9a6 <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <prog_param+0x90c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 80062ea:	e000      	b.n	80062ee <prog_param+0x8fa>
		goto fin_prog_param; //jp fin_prog_param
 80062ec:	46c0      	nop			@ (mov r8, r8)
}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b006      	add	sp, #24
 80062f4:	bdb0      	pop	{r4, r5, r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	20000ca4 	.word	0x20000ca4
 80062fc:	20000c4c 	.word	0x20000c4c
 8006300:	20000c44 	.word	0x20000c44

08006304 <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8006308:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <md_dif_math+0x20>)
 800630a:	2201      	movs	r2, #1
 800630c:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 800630e:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <md_dif_math+0x24>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	001a      	movs	r2, r3
 8006314:	4b05      	ldr	r3, [pc, #20]	@ (800632c <md_dif_math+0x28>)
 8006316:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8006318:	f000 f80a 	bl	8006330 <md_signfrac_math>
}
 800631c:	46c0      	nop			@ (mov r8, r8)
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	20000c44 	.word	0x20000c44
 8006328:	20000930 	.word	0x20000930
 800632c:	20000932 	.word	0x20000932

08006330 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8006334:	4b4b      	ldr	r3, [pc, #300]	@ (8006464 <md_signfrac_math+0x134>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d121      	bne.n	8006380 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 800633c:	4b49      	ldr	r3, [pc, #292]	@ (8006464 <md_signfrac_math+0x134>)
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d14f      	bne.n	80063e4 <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8006344:	4b48      	ldr	r3, [pc, #288]	@ (8006468 <md_signfrac_math+0x138>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d117      	bne.n	800637c <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 800634c:	4b46      	ldr	r3, [pc, #280]	@ (8006468 <md_signfrac_math+0x138>)
 800634e:	2219      	movs	r2, #25
 8006350:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8006352:	4b46      	ldr	r3, [pc, #280]	@ (800646c <md_signfrac_math+0x13c>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 800635a:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <md_signfrac_math+0x138>)
 800635c:	220a      	movs	r2, #10
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e000      	b.n	8006364 <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8006362:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8006364:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <md_signfrac_math+0x134>)
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 800636c:	4b3d      	ldr	r3, [pc, #244]	@ (8006464 <md_signfrac_math+0x134>)
 800636e:	795b      	ldrb	r3, [r3, #5]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d139      	bne.n	80063e8 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8006374:	4b3d      	ldr	r3, [pc, #244]	@ (800646c <md_signfrac_math+0x13c>)
 8006376:	2205      	movs	r2, #5
 8006378:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 800637a:	e067      	b.n	800644c <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 800637c:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 800637e:	e065      	b.n	800644c <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 8006380:	46c0      	nop			@ (mov r8, r8)
 8006382:	e000      	b.n	8006386 <md_signfrac_math+0x56>
				goto inc_sf;
 8006384:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8006386:	4b3a      	ldr	r3, [pc, #232]	@ (8006470 <md_signfrac_math+0x140>)
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b21a      	sxth	r2, r3
 800638c:	4b39      	ldr	r3, [pc, #228]	@ (8006474 <md_signfrac_math+0x144>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b21b      	sxth	r3, r3
 8006392:	429a      	cmp	r2, r3
 8006394:	db04      	blt.n	80063a0 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 8006396:	4b38      	ldr	r3, [pc, #224]	@ (8006478 <md_signfrac_math+0x148>)
 8006398:	881a      	ldrh	r2, [r3, #0]
 800639a:	4b35      	ldr	r3, [pc, #212]	@ (8006470 <md_signfrac_math+0x140>)
 800639c:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 800639e:	e052      	b.n	8006446 <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 80063a0:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 80063a2:	4b36      	ldr	r3, [pc, #216]	@ (800647c <md_signfrac_math+0x14c>)
 80063a4:	799b      	ldrb	r3, [r3, #6]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 80063aa:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <md_signfrac_math+0x140>)
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	2b63      	cmp	r3, #99	@ 0x63
 80063b2:	dc0d      	bgt.n	80063d0 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 80063b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006470 <md_signfrac_math+0x140>)
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	3364      	adds	r3, #100	@ 0x64
 80063bc:	db0a      	blt.n	80063d4 <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 80063be:	e000      	b.n	80063c2 <md_signfrac_math+0x92>
				goto inc_simple_ent;
 80063c0:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 80063c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006470 <md_signfrac_math+0x140>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	4b29      	ldr	r3, [pc, #164]	@ (8006470 <md_signfrac_math+0x140>)
 80063cc:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063ce:	e03a      	b.n	8006446 <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 80063d0:	46c0      	nop			@ (mov r8, r8)
 80063d2:	e000      	b.n	80063d6 <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 80063d4:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 80063d6:	4b26      	ldr	r3, [pc, #152]	@ (8006470 <md_signfrac_math+0x140>)
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	330a      	adds	r3, #10
 80063dc:	b29a      	uxth	r2, r3
 80063de:	4b24      	ldr	r3, [pc, #144]	@ (8006470 <md_signfrac_math+0x140>)
 80063e0:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063e2:	e030      	b.n	8006446 <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 80063e4:	46c0      	nop			@ (mov r8, r8)
 80063e6:	e000      	b.n	80063ea <md_signfrac_math+0xba>
				goto dec_sf;
 80063e8:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 80063ea:	4b21      	ldr	r3, [pc, #132]	@ (8006470 <md_signfrac_math+0x140>)
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b21a      	sxth	r2, r3
 80063f0:	4b21      	ldr	r3, [pc, #132]	@ (8006478 <md_signfrac_math+0x148>)
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b21b      	sxth	r3, r3
 80063f6:	429a      	cmp	r2, r3
 80063f8:	dc04      	bgt.n	8006404 <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 80063fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006474 <md_signfrac_math+0x144>)
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006470 <md_signfrac_math+0x140>)
 8006400:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8006402:	e020      	b.n	8006446 <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8006404:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8006406:	4b1d      	ldr	r3, [pc, #116]	@ (800647c <md_signfrac_math+0x14c>)
 8006408:	799b      	ldrb	r3, [r3, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 800640e:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <md_signfrac_math+0x140>)
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b21b      	sxth	r3, r3
 8006414:	2b64      	cmp	r3, #100	@ 0x64
 8006416:	dc0d      	bgt.n	8006434 <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8006418:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <md_signfrac_math+0x140>)
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b21b      	sxth	r3, r3
 800641e:	3363      	adds	r3, #99	@ 0x63
 8006420:	db0a      	blt.n	8006438 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8006422:	e000      	b.n	8006426 <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8006424:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8006426:	4b12      	ldr	r3, [pc, #72]	@ (8006470 <md_signfrac_math+0x140>)
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <md_signfrac_math+0x140>)
 8006430:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8006432:	e008      	b.n	8006446 <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8006434:	46c0      	nop			@ (mov r8, r8)
 8006436:	e000      	b.n	800643a <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8006438:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <md_signfrac_math+0x140>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	3b0a      	subs	r3, #10
 8006440:	b29a      	uxth	r2, r3
 8006442:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <md_signfrac_math+0x140>)
 8006444:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8006446:	4b0e      	ldr	r3, [pc, #56]	@ (8006480 <md_signfrac_math+0x150>)
 8006448:	221e      	movs	r2, #30
 800644a:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 800644c:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <md_signfrac_math+0x14c>)
 800644e:	2200      	movs	r2, #0
 8006450:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8006452:	4b07      	ldr	r3, [pc, #28]	@ (8006470 <md_signfrac_math+0x140>)
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <md_signfrac_math+0x154>)
 800645a:	701a      	strb	r2, [r3, #0]
			//ret
}
 800645c:	46c0      	nop			@ (mov r8, r8)
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	20000c4c 	.word	0x20000c4c
 8006468:	20000c7e 	.word	0x20000c7e
 800646c:	20000bcf 	.word	0x20000bcf
 8006470:	20000932 	.word	0x20000932
 8006474:	20000c5e 	.word	0x20000c5e
 8006478:	20000c60 	.word	0x20000c60
 800647c:	20000c44 	.word	0x20000c44
 8006480:	20000bce 	.word	0x20000bce
 8006484:	20000bb3 	.word	0x20000bb3

08006488 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800648e:	4b08      	ldr	r3, [pc, #32]	@ (80064b0 <tdev_to_Word+0x28>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	b29a      	uxth	r2, r3
 8006496:	4b07      	ldr	r3, [pc, #28]	@ (80064b4 <tdev_to_Word+0x2c>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	0019      	movs	r1, r3
 800649c:	1dbb      	adds	r3, r7, #6
 800649e:	1852      	adds	r2, r2, r1
 80064a0:	801a      	strh	r2, [r3, #0]
	return	foo;
 80064a2:	1dbb      	adds	r3, r7, #6
 80064a4:	881b      	ldrh	r3, [r3, #0]
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b002      	add	sp, #8
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	20000c0c 	.word	0x20000c0c
 80064b4:	20000c0d 	.word	0x20000c0d

080064b8 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3301      	adds	r3, #1
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	0019      	movs	r1, r3
 80064d0:	200e      	movs	r0, #14
 80064d2:	183b      	adds	r3, r7, r0
 80064d4:	1852      	adds	r2, r2, r1
 80064d6:	801a      	strh	r2, [r3, #0]
	return	 foo;
 80064d8:	183b      	adds	r3, r7, r0
 80064da:	881b      	ldrh	r3, [r3, #0]
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b004      	add	sp, #16
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
    asm ("nop");
 80064e8:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 80064ea:	46c0      	nop			@ (mov r8, r8)

}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <Load_ret2+0x1c>)
 80064fa:	2249      	movs	r2, #73	@ 0x49
 80064fc:	5c9b      	ldrb	r3, [r3, r2]
 80064fe:	001a      	movs	r2, r3
 8006500:	233c      	movs	r3, #60	@ 0x3c
 8006502:	4353      	muls	r3, r2
 8006504:	b29a      	uxth	r2, r3
 8006506:	4b03      	ldr	r3, [pc, #12]	@ (8006514 <Load_ret2+0x20>)
 8006508:	801a      	strh	r2, [r3, #0]
}
 800650a:	46c0      	nop			@ (mov r8, r8)
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200000b8 	.word	0x200000b8
 8006514:	20000bc2 	.word	0x20000bc2

08006518 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 800651c:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <ldadaptivo+0x38>)
 800651e:	2246      	movs	r2, #70	@ 0x46
 8006520:	5c9b      	ldrb	r3, [r3, r2]
 8006522:	001a      	movs	r2, r3
 8006524:	23e1      	movs	r3, #225	@ 0xe1
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4353      	muls	r3, r2
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <ldadaptivo+0x3c>)
 800652e:	801a      	strh	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <ldadaptivo+0x38>)
 8006532:	2256      	movs	r2, #86	@ 0x56
 8006534:	5c9b      	ldrb	r3, [r3, r2]
 8006536:	001a      	movs	r2, r3
 8006538:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <ldadaptivo+0x3c>)
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	b29b      	uxth	r3, r3
 8006540:	4353      	muls	r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <ldadaptivo+0x40>)
 8006546:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 8006548:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200000b8 	.word	0x200000b8
 8006554:	20000c12 	.word	0x20000c12
 8006558:	20000c18 	.word	0x20000c18

0800655c <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8006562:	1dbb      	adds	r3, r7, #6
 8006564:	2200      	movs	r2, #0
 8006566:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 8006568:	1dbb      	adds	r3, r7, #6
 800656a:	4a0e      	ldr	r2, [pc, #56]	@ (80065a4 <blink_640+0x48>)
 800656c:	8812      	ldrh	r2, [r2, #0]
 800656e:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 8006570:	1dba      	adds	r2, r7, #6
 8006572:	1dbb      	adds	r3, r7, #6
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	18db      	adds	r3, r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 800657a:	1dba      	adds	r2, r7, #6
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	18db      	adds	r3, r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 8006584:	1dbb      	adds	r3, r7, #6
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b07      	ldr	r3, [pc, #28]	@ (80065a8 <blink_640+0x4c>)
 800658c:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 800658e:	1dbb      	adds	r3, r7, #6
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	b29b      	uxth	r3, r3
 8006596:	b2da      	uxtb	r2, r3
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <blink_640+0x50>)
 800659a:	701a      	strb	r2, [r3, #0]
}
 800659c:	46c0      	nop			@ (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000bac 	.word	0x20000bac
 80065a8:	20000bb2 	.word	0x20000bb2
 80065ac:	20000bb3 	.word	0x20000bb3

080065b0 <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 80065b4:	4b03      	ldr	r3, [pc, #12]	@ (80065c4 <sp_dpy+0x14>)
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 f8af 	bl	800671c <convadec_math>
								//			//ret	;
}
 80065be:	46c0      	nop			@ (mov r8, r8)
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000c08 	.word	0x20000c08

080065c8 <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 80065ce:	1dbb      	adds	r3, r7, #6
 80065d0:	2200      	movs	r2, #0
 80065d2:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 80065d4:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <dif_dpy+0x2c>)
 80065d6:	8819      	ldrh	r1, [r3, #0]
 80065d8:	4b07      	ldr	r3, [pc, #28]	@ (80065f8 <dif_dpy+0x30>)
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	1dbb      	adds	r3, r7, #6
 80065de:	1a8a      	subs	r2, r1, r2
 80065e0:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 80065e2:	1dbb      	adds	r3, r7, #6
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 f898 	bl	800671c <convadec_math>
									// ret ;
}
 80065ec:	46c0      	nop			@ (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b002      	add	sp, #8
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000c0a 	.word	0x20000c0a
 80065f8:	20000c08 	.word	0x20000c08

080065fc <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 8006600:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <minbrake_load+0x2c>)
 8006602:	2265      	movs	r2, #101	@ 0x65
 8006604:	5c9a      	ldrb	r2, [r3, r2]
 8006606:	4b09      	ldr	r3, [pc, #36]	@ (800662c <minbrake_load+0x30>)
 8006608:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 800660a:	f000 f99f 	bl	800694c <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 800660e:	4b08      	ldr	r3, [pc, #32]	@ (8006630 <minbrake_load+0x34>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	b29b      	uxth	r3, r3
 8006616:	4a07      	ldr	r2, [pc, #28]	@ (8006634 <minbrake_load+0x38>)
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	189b      	adds	r3, r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <minbrake_load+0x3c>)
 8006620:	801a      	strh	r2, [r3, #0]
}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200000b8 	.word	0x200000b8
 800662c:	20000bb3 	.word	0x20000bb3
 8006630:	20000ba7 	.word	0x20000ba7
 8006634:	20000ba8 	.word	0x20000ba8
 8006638:	20000bbe 	.word	0x20000bbe

0800663c <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 8006642:	1dbb      	adds	r3, r7, #6
 8006644:	2200      	movs	r2, #0
 8006646:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 8006648:	1dbb      	adds	r3, r7, #6
 800664a:	4a31      	ldr	r2, [pc, #196]	@ (8006710 <desptdv_math+0xd4>)
 800664c:	8812      	ldrh	r2, [r2, #0]
 800664e:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 8006650:	4b30      	ldr	r3, [pc, #192]	@ (8006714 <desptdv_math+0xd8>)
 8006652:	0018      	movs	r0, r3
 8006654:	f7ff ff30 	bl	80064b8 <TwoByteInArrayToWord>
 8006658:	0003      	movs	r3, r0
 800665a:	0019      	movs	r1, r3
 800665c:	1dbb      	adds	r3, r7, #6
 800665e:	1dba      	adds	r2, r7, #6
 8006660:	8812      	ldrh	r2, [r2, #0]
 8006662:	188a      	adds	r2, r1, r2
 8006664:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 8006666:	4b2c      	ldr	r3, [pc, #176]	@ (8006718 <desptdv_math+0xdc>)
 8006668:	2252      	movs	r2, #82	@ 0x52
 800666a:	5c9b      	ldrb	r3, [r3, r2]
 800666c:	2b20      	cmp	r3, #32
 800666e:	d145      	bne.n	80066fc <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 8006670:	1dbb      	adds	r3, r7, #6
 8006672:	2200      	movs	r2, #0
 8006674:	5e9b      	ldrsh	r3, [r3, r2]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da22      	bge.n	80066c0 <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 800667a:	1dbb      	adds	r3, r7, #6
 800667c:	1dba      	adds	r2, r7, #6
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	4252      	negs	r2, r2
 8006682:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 8006684:	1dbb      	adds	r3, r7, #6
 8006686:	1dba      	adds	r2, r7, #6
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	0852      	lsrs	r2, r2, #1
 800668c:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 800668e:	1dba      	adds	r2, r7, #6
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	1c19      	adds	r1, r3, #0
 8006696:	00c9      	lsls	r1, r1, #3
 8006698:	18cb      	adds	r3, r1, r3
 800669a:	18db      	adds	r3, r3, r3
 800669c:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 800669e:	1dbc      	adds	r4, r7, #6
 80066a0:	1dbb      	adds	r3, r7, #6
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	2105      	movs	r1, #5
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7f9 fd36 	bl	8000118 <__udivsi3>
 80066ac:	0003      	movs	r3, r0
 80066ae:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 80066b0:	1dbb      	adds	r3, r7, #6
 80066b2:	1dba      	adds	r2, r7, #6
 80066b4:	8812      	ldrh	r2, [r2, #0]
 80066b6:	21a0      	movs	r1, #160	@ 0xa0
 80066b8:	0049      	lsls	r1, r1, #1
 80066ba:	1a8a      	subs	r2, r1, r2
 80066bc:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 80066be:	e01e      	b.n	80066fe <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 80066c0:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 80066c2:	1dbb      	adds	r3, r7, #6
 80066c4:	1dba      	adds	r2, r7, #6
 80066c6:	8812      	ldrh	r2, [r2, #0]
 80066c8:	0852      	lsrs	r2, r2, #1
 80066ca:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80066cc:	1dba      	adds	r2, r7, #6
 80066ce:	1dbb      	adds	r3, r7, #6
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	1c19      	adds	r1, r3, #0
 80066d4:	00c9      	lsls	r1, r1, #3
 80066d6:	18cb      	adds	r3, r1, r3
 80066d8:	18db      	adds	r3, r3, r3
 80066da:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80066dc:	1dbc      	adds	r4, r7, #6
 80066de:	1dbb      	adds	r3, r7, #6
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	2105      	movs	r1, #5
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7f9 fd17 	bl	8000118 <__udivsi3>
 80066ea:	0003      	movs	r3, r0
 80066ec:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 80066ee:	1dbb      	adds	r3, r7, #6
 80066f0:	1dba      	adds	r2, r7, #6
 80066f2:	8812      	ldrh	r2, [r2, #0]
 80066f4:	3241      	adds	r2, #65	@ 0x41
 80066f6:	32ff      	adds	r2, #255	@ 0xff
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e000      	b.n	80066fe <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 80066fc:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 80066fe:	1dbb      	adds	r3, r7, #6
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	0018      	movs	r0, r3
 8006704:	f000 f80a 	bl	800671c <convadec_math>

}
 8006708:	46c0      	nop			@ (mov r8, r8)
 800670a:	46bd      	mov	sp, r7
 800670c:	b003      	add	sp, #12
 800670e:	bd90      	pop	{r4, r7, pc}
 8006710:	20000c10 	.word	0x20000c10
 8006714:	200000bd 	.word	0x200000bd
 8006718:	200000b8 	.word	0x200000b8

0800671c <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	0002      	movs	r2, r0
 8006724:	1dbb      	adds	r3, r7, #6
 8006726:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 8006728:	f000 face 	bl	8006cc8 <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 800672c:	230f      	movs	r3, #15
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 8006734:	230e      	movs	r3, #14
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 800673c:	1dbb      	adds	r3, r7, #6
 800673e:	2200      	movs	r2, #0
 8006740:	5e9b      	ldrsh	r3, [r3, r2]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da08      	bge.n	8006758 <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 8006746:	1dbb      	adds	r3, r7, #6
 8006748:	1dba      	adds	r2, r7, #6
 800674a:	8812      	ldrh	r2, [r2, #0]
 800674c:	4252      	negs	r2, r2
 800674e:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 8006750:	4b45      	ldr	r3, [pc, #276]	@ (8006868 <convadec_math+0x14c>)
 8006752:	2201      	movs	r2, #1
 8006754:	705a      	strb	r2, [r3, #1]
 8006756:	e000      	b.n	800675a <convadec_math+0x3e>
			goto conv_temper_positiva;
 8006758:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 800675a:	1dbb      	adds	r3, r7, #6
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	210a      	movs	r1, #10
 8006760:	0018      	movs	r0, r3
 8006762:	f7f9 fd5f 	bl	8000224 <__aeabi_uidivmod>
 8006766:	000b      	movs	r3, r1
 8006768:	b29a      	uxth	r2, r3
 800676a:	230e      	movs	r3, #14
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8006770:	1dbb      	adds	r3, r7, #6
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	210a      	movs	r1, #10
 8006776:	0018      	movs	r0, r3
 8006778:	f7f9 fcce 	bl	8000118 <__udivsi3>
 800677c:	0003      	movs	r3, r0
 800677e:	b29a      	uxth	r2, r3
 8006780:	230f      	movs	r3, #15
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 8006786:	4b38      	ldr	r3, [pc, #224]	@ (8006868 <convadec_math+0x14c>)
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2201      	movs	r2, #1
 800678c:	4053      	eors	r3, r2
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d116      	bne.n	80067c2 <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 8006794:	4b35      	ldr	r3, [pc, #212]	@ (800686c <convadec_math+0x150>)
 8006796:	2223      	movs	r2, #35	@ 0x23
 8006798:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 800679a:	4b35      	ldr	r3, [pc, #212]	@ (8006870 <convadec_math+0x154>)
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2201      	movs	r2, #1
 80067a0:	4053      	eors	r3, r2
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 80067a8:	4b30      	ldr	r3, [pc, #192]	@ (800686c <convadec_math+0x150>)
 80067aa:	2264      	movs	r2, #100	@ 0x64
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e000      	b.n	80067b2 <convadec_math+0x96>
			goto cp_25;
 80067b0:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067b2:	4b2e      	ldr	r3, [pc, #184]	@ (800686c <convadec_math+0x150>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	220f      	movs	r2, #15
 80067b8:	18ba      	adds	r2, r7, r2
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d318      	bcc.n	80067f2 <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 80067c0:	e03d      	b.n	800683e <convadec_math+0x122>
			goto conv_signo_positivo;
 80067c2:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 80067c4:	4b29      	ldr	r3, [pc, #164]	@ (800686c <convadec_math+0x150>)
 80067c6:	2263      	movs	r2, #99	@ 0x63
 80067c8:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80067ca:	4b29      	ldr	r3, [pc, #164]	@ (8006870 <convadec_math+0x154>)
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4053      	eors	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 80067d8:	4b24      	ldr	r3, [pc, #144]	@ (800686c <convadec_math+0x150>)
 80067da:	2264      	movs	r2, #100	@ 0x64
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e000      	b.n	80067e2 <convadec_math+0xc6>
			goto cp_99;
 80067e0:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067e2:	4b22      	ldr	r3, [pc, #136]	@ (800686c <convadec_math+0x150>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	220f      	movs	r2, #15
 80067e8:	18ba      	adds	r2, r7, r2
 80067ea:	7812      	ldrb	r2, [r2, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d225      	bcs.n	800683c <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 80067f0:	e000      	b.n	80067f4 <convadec_math+0xd8>
		goto     convad10;
 80067f2:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 80067f4:	210f      	movs	r1, #15
 80067f6:	187b      	adds	r3, r7, r1
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b09      	cmp	r3, #9
 80067fc:	d80d      	bhi.n	800681a <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 80067fe:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 8006800:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <convadec_math+0x14c>)
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 8006806:	230e      	movs	r3, #14
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	187b      	adds	r3, r7, r1
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f000 fef2 	bl	80075fc <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 8006818:	e021      	b.n	800685e <convadec_math+0x142>
			goto soloent;
 800681a:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 800681c:	4b13      	ldr	r3, [pc, #76]	@ (800686c <convadec_math+0x150>)
 800681e:	220f      	movs	r2, #15
 8006820:	18ba      	adds	r2, r7, r2
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8006826:	f000 f891 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 800682a:	4b12      	ldr	r3, [pc, #72]	@ (8006874 <convadec_math+0x158>)
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	4b0f      	ldr	r3, [pc, #60]	@ (800686c <convadec_math+0x150>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	0019      	movs	r1, r3
 8006834:	0010      	movs	r0, r2
 8006836:	f000 fee1 	bl	80075fc <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800683a:	e010      	b.n	800685e <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 800683c:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 800683e:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <convadec_math+0x15c>)
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	001a      	movs	r2, r3
 8006846:	2320      	movs	r3, #32
 8006848:	4013      	ands	r3, r2
 800684a:	d102      	bne.n	8006852 <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 800684c:	f000 fa3c 	bl	8006cc8 <offdpy>
		goto	finconvad;
 8006850:	e005      	b.n	800685e <convadec_math+0x142>
			goto convadec_j02;
 8006852:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 8006854:	2111      	movs	r1, #17
 8006856:	2010      	movs	r0, #16
 8006858:	f000 fed0 	bl	80075fc <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800685c:	46c0      	nop			@ (mov r8, r8)
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	b004      	add	sp, #16
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	20000bec 	.word	0x20000bec
 800686c:	20000bb3 	.word	0x20000bb3
 8006870:	20000c44 	.word	0x20000c44
 8006874:	20000bb2 	.word	0x20000bb2
 8006878:	20000bac 	.word	0x20000bac

0800687c <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	0002      	movs	r2, r0
 8006884:	1dfb      	adds	r3, r7, #7
 8006886:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 8006888:	210f      	movs	r1, #15
 800688a:	187b      	adds	r3, r7, r1
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8006890:	1dfb      	adds	r3, r7, #7
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b09      	cmp	r3, #9
 8006896:	d80c      	bhi.n	80068b2 <convad10+0x36>
			goto soloent;
		}
fraccion:
 8006898:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 800689a:	4b10      	ldr	r3, [pc, #64]	@ (80068dc <convad10+0x60>)
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	1dfb      	adds	r3, r7, #7
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fea6 	bl	80075fc <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 80068b0:	e00f      	b.n	80068d2 <convad10+0x56>
			goto soloent;
 80068b2:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80068b4:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <convad10+0x64>)
 80068b6:	1dfa      	adds	r2, r7, #7
 80068b8:	7812      	ldrb	r2, [r2, #0]
 80068ba:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068bc:	f000 f846 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 80068c0:	4b08      	ldr	r3, [pc, #32]	@ (80068e4 <convad10+0x68>)
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <convad10+0x64>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	0019      	movs	r1, r3
 80068ca:	0010      	movs	r0, r2
 80068cc:	f000 fe96 	bl	80075fc <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80068d0:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	46bd      	mov	sp, r7
 80068d6:	b004      	add	sp, #16
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	20000bec 	.word	0x20000bec
 80068e0:	20000bb3 	.word	0x20000bb3
 80068e4:	20000bb2 	.word	0x20000bb2

080068e8 <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	0002      	movs	r2, r0
 80068f0:	1dfb      	adds	r3, r7, #7
 80068f2:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 80068f4:	4b09      	ldr	r3, [pc, #36]	@ (800691c <soloent+0x34>)
 80068f6:	1dfa      	adds	r2, r7, #7
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068fc:	f000 f826 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <soloent+0x38>)
 8006902:	781a      	ldrb	r2, [r3, #0]
 8006904:	4b05      	ldr	r3, [pc, #20]	@ (800691c <soloent+0x34>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	0019      	movs	r1, r3
 800690a:	0010      	movs	r0, r2
 800690c:	f000 fe76 	bl	80075fc <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006910:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	20000bb3 	.word	0x20000bb3
 8006920:	20000bb2 	.word	0x20000bb2

08006924 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 8006928:	f000 f810 	bl	800694c <BaBentre10_math>
		op_menu (waux,wreg);
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <soloent1+0x20>)
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <soloent1+0x24>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	0019      	movs	r1, r3
 8006936:	0010      	movs	r0, r2
 8006938:	f000 fe60 	bl	80075fc <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800693c:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000bb2 	.word	0x20000bb2
 8006948:	20000bb3 	.word	0x20000bb3

0800694c <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(void){
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 8006950:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <BaBentre10_math+0x4c>)
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 8006956:	4b11      	ldr	r3, [pc, #68]	@ (800699c <BaBentre10_math+0x50>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	001a      	movs	r2, r3
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <BaBentre10_math+0x54>)
 800695e:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8006960:	4b0f      	ldr	r3, [pc, #60]	@ (80069a0 <BaBentre10_math+0x54>)
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	210a      	movs	r1, #10
 8006968:	0018      	movs	r0, r3
 800696a:	f7f9 fc5b 	bl	8000224 <__aeabi_uidivmod>
 800696e:	000b      	movs	r3, r1
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <BaBentre10_math+0x50>)
 8006974:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 8006976:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <BaBentre10_math+0x54>)
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	210a      	movs	r1, #10
 800697e:	0018      	movs	r0, r3
 8006980:	f7f9 fbca 	bl	8000118 <__udivsi3>
 8006984:	0003      	movs	r3, r0
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b03      	ldr	r3, [pc, #12]	@ (8006998 <BaBentre10_math+0x4c>)
 800698a:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 800698c:	f000 f80a 	bl	80069a4 <conv60_6_math>
}
 8006990:	46c0      	nop			@ (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	20000bb2 	.word	0x20000bb2
 800699c:	20000bb3 	.word	0x20000bb3
 80069a0:	20000932 	.word	0x20000932

080069a4 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math (void) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 80069aa:	1dbb      	adds	r3, r7, #6
 80069ac:	2200      	movs	r2, #0
 80069ae:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 80069b0:	4b11      	ldr	r3, [pc, #68]	@ (80069f8 <conv60_6_math+0x54>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	1dba      	adds	r2, r7, #6
 80069b6:	1c19      	adds	r1, r3, #0
 80069b8:	1c0b      	adds	r3, r1, #0
 80069ba:	18db      	adds	r3, r3, r3
 80069bc:	185b      	adds	r3, r3, r1
 80069be:	18db      	adds	r3, r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 80069c2:	4b0e      	ldr	r3, [pc, #56]	@ (80069fc <conv60_6_math+0x58>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	001a      	movs	r2, r3
 80069c8:	233c      	movs	r3, #60	@ 0x3c
 80069ca:	4353      	muls	r3, r2
 80069cc:	b299      	uxth	r1, r3
 80069ce:	1dbb      	adds	r3, r7, #6
 80069d0:	1dba      	adds	r2, r7, #6
 80069d2:	8812      	ldrh	r2, [r2, #0]
 80069d4:	188a      	adds	r2, r1, r2
 80069d6:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 80069d8:	1dbb      	adds	r3, r7, #6
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	b29b      	uxth	r3, r3
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <conv60_6_math+0x5c>)
 80069e4:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 80069e6:	1dbb      	adds	r3, r7, #6
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <conv60_6_math+0x60>)
 80069ee:	701a      	strb	r2, [r3, #0]
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b002      	add	sp, #8
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000bb3 	.word	0x20000bb3
 80069fc:	20000bb2 	.word	0x20000bb2
 8006a00:	20000ba7 	.word	0x20000ba7
 8006a04:	20000ba8 	.word	0x20000ba8

08006a08 <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 8006a0e:	4ba3      	ldr	r3, [pc, #652]	@ (8006c9c <fallas+0x294>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 8006a14:	4ba2      	ldr	r3, [pc, #648]	@ (8006ca0 <fallas+0x298>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 8006a1c:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 8006a1e:	e138      	b.n	8006c92 <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 8006a20:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 8006a22:	4b9f      	ldr	r3, [pc, #636]	@ (8006ca0 <fallas+0x298>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d003      	beq.n	8006a32 <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 8006a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ca4 <fallas+0x29c>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	715a      	strb	r2, [r3, #5]
 8006a30:	e000      	b.n	8006a34 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 8006a32:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 8006a34:	2300      	movs	r3, #0
 8006a36:	607b      	str	r3, [r7, #4]
 8006a38:	e014      	b.n	8006a64 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 8006a3a:	4a9b      	ldr	r2, [pc, #620]	@ (8006ca8 <fallas+0x2a0>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	18d3      	adds	r3, r2, r3
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	499a      	ldr	r1, [pc, #616]	@ (8006cac <fallas+0x2a4>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	18cb      	adds	r3, r1, r3
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	4998      	ldr	r1, [pc, #608]	@ (8006cb0 <fallas+0x2a8>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	18cb      	adds	r3, r1, r3
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <fallas+0x66>
		for(int k=0; k<8;k++){
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3301      	adds	r3, #1
 8006a62:	607b      	str	r3, [r7, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b07      	cmp	r3, #7
 8006a68:	dde7      	ble.n	8006a3a <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 8006a6a:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8006a6c:	e7d7      	b.n	8006a1e <fallas+0x16>
				goto fallas12;//jrne fallas12
 8006a6e:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8006a70:	4b90      	ldr	r3, [pc, #576]	@ (8006cb4 <fallas+0x2ac>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d12c      	bne.n	8006ad2 <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 8006a78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ca4 <fallas+0x29c>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;		//bset flagsBuzzer,#0
 8006a7e:	4b87      	ldr	r3, [pc, #540]	@ (8006c9c <fallas+0x294>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
	    //waux = 0x1F;			//mov waux,#$1F;
	    waux = 0x13;			//mov waux,#$13;
 8006a84:	4b8c      	ldr	r3, [pc, #560]	@ (8006cb8 <fallas+0x2b0>)
 8006a86:	2213      	movs	r2, #19
 8006a88:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 8006a8a:	4b87      	ldr	r3, [pc, #540]	@ (8006ca8 <fallas+0x2a0>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4053      	eors	r3, r2
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <fallas+0xa4>
	       	goto fallas_j00;
 8006a98:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 8006a9a:	4b83      	ldr	r3, [pc, #524]	@ (8006ca8 <fallas+0x2a0>)
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d019      	beq.n	8006ad6 <fallas+0xce>
	       	goto fallas_j01;
 8006aa2:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    //waux = 0x1F;//mov waux,#$1F
		waux = 0x13;			//mov waux,#$13;
 8006aa4:	4b84      	ldr	r3, [pc, #528]	@ (8006cb8 <fallas+0x2b0>)
 8006aa6:	2213      	movs	r2, #19
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e000      	b.n	8006aae <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8006aac:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8006aae:	f000 fad9 	bl	8007064 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 8006ab2:	f000 faf3 	bl	800709c <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 8006ab6:	f000 fdbb 	bl	8007630 <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		//wreg = 0x13;//mov wreg,#$13;
		wreg = 0x01;//mov wreg,#$01;
 8006aba:	4b80      	ldr	r3, [pc, #512]	@ (8006cbc <fallas+0x2b4>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8006ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb8 <fallas+0x2b0>)
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	4b7d      	ldr	r3, [pc, #500]	@ (8006cbc <fallas+0x2b4>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	0019      	movs	r1, r3
 8006aca:	0010      	movs	r0, r2
 8006acc:	f000 fd96 	bl	80075fc <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8006ad0:	e0df      	b.n	8006c92 <fallas+0x28a>
	       	goto fallas16;//
 8006ad2:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 8006ad4:	e0dd      	b.n	8006c92 <fallas+0x28a>
	    goto fallas20;//jra fallas20
 8006ad6:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 8006ad8:	4b73      	ldr	r3, [pc, #460]	@ (8006ca8 <fallas+0x2a0>)
 8006ada:	79db      	ldrb	r3, [r3, #7]
 8006adc:	2201      	movs	r2, #1
 8006ade:	4053      	eors	r3, r2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	2127      	movs	r1, #39	@ 0x27
 8006aea:	201f      	movs	r0, #31
 8006aec:	f000 fdae 	bl	800764c <wreg_waux_conf>
 8006af0:	e000      	b.n	8006af4 <fallas+0xec>
			goto fallas_j07;
 8006af2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8006af4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca8 <fallas+0x2a0>)
 8006af6:	799b      	ldrb	r3, [r3, #6]
 8006af8:	2201      	movs	r2, #1
 8006afa:	4053      	eors	r3, r2
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 8006b02:	2201      	movs	r2, #1
 8006b04:	2127      	movs	r1, #39	@ 0x27
 8006b06:	2026      	movs	r0, #38	@ 0x26
 8006b08:	f000 fda0 	bl	800764c <wreg_waux_conf>
 8006b0c:	e000      	b.n	8006b10 <fallas+0x108>
			goto fallas_j08;
 8006b0e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 8006b10:	4b66      	ldr	r3, [pc, #408]	@ (8006cac <fallas+0x2a4>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	4053      	eors	r3, r2
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d105      	bne.n	8006b2a <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 8006b1e:	2200      	movs	r2, #0
 8006b20:	212f      	movs	r1, #47	@ 0x2f
 8006b22:	200e      	movs	r0, #14
 8006b24:	f000 fd92 	bl	800764c <wreg_waux_conf>
 8006b28:	e000      	b.n	8006b2c <fallas+0x124>
			goto fallas_j08b;
 8006b2a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 8006b2c:	4b60      	ldr	r3, [pc, #384]	@ (8006cb0 <fallas+0x2a8>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2201      	movs	r2, #1
 8006b32:	4053      	eors	r3, r2
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	210a      	movs	r1, #10
 8006b3e:	200b      	movs	r0, #11
 8006b40:	f000 fd84 	bl	800764c <wreg_waux_conf>
 8006b44:	e000      	b.n	8006b48 <fallas+0x140>
			goto fallas_j08c;
 8006b46:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 8006b48:	4b57      	ldr	r3, [pc, #348]	@ (8006ca8 <fallas+0x2a0>)
 8006b4a:	795b      	ldrb	r3, [r3, #5]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d107      	bne.n	8006b60 <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 8006b50:	4b56      	ldr	r3, [pc, #344]	@ (8006cac <fallas+0x2a4>)
 8006b52:	79db      	ldrb	r3, [r3, #7]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4053      	eors	r3, r2
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8006b5e:	e000      	b.n	8006b62 <fallas+0x15a>
			goto fallas_j01c;
 8006b60:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x04, 1);
 8006b62:	2201      	movs	r2, #1
 8006b64:	2104      	movs	r1, #4
 8006b66:	2013      	movs	r0, #19
 8006b68:	f000 fd70 	bl	800764c <wreg_waux_conf>
 8006b6c:	e000      	b.n	8006b70 <fallas+0x168>
			goto fallas_j02c;
 8006b6e:	46c0      	nop			@ (mov r8, r8)
//		mov			wreg,#$13;					"H"
//		mov			waux,#$04;
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8006b70:	4b4e      	ldr	r3, [pc, #312]	@ (8006cac <fallas+0x2a4>)
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 8006b78:	4b4c      	ldr	r3, [pc, #304]	@ (8006cac <fallas+0x2a4>)
 8006b7a:	795b      	ldrb	r3, [r3, #5]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	4053      	eors	r3, r2
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 8006b86:	e000      	b.n	8006b8a <fallas+0x182>
	       	  goto fallas_j01b;
 8006b88:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x2, 1);
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	2013      	movs	r0, #19
 8006b90:	f000 fd5c 	bl	800764c <wreg_waux_conf>
 8006b94:	e000      	b.n	8006b98 <fallas+0x190>
	       	  goto fallas_j02b;
 8006b96:	46c0      	nop			@ (mov r8, r8)
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 8006b98:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <fallas+0x2a0>)
 8006b9a:	789b      	ldrb	r3, [r3, #2]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d107      	bne.n	8006bb0 <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8006ba0:	4b41      	ldr	r3, [pc, #260]	@ (8006ca8 <fallas+0x2a0>)
 8006ba2:	78db      	ldrb	r3, [r3, #3]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	4053      	eors	r3, r2
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d107      	bne.n	8006bbe <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8006bae:	e000      	b.n	8006bb2 <fallas+0x1aa>
			goto fallas_j03;
 8006bb0:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	2113      	movs	r1, #19
 8006bb6:	201f      	movs	r0, #31
 8006bb8:	f000 fd48 	bl	800764c <wreg_waux_conf>
 8006bbc:	e000      	b.n	8006bc0 <fallas+0x1b8>
			goto fallas_j04;
 8006bbe:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8006bc0:	4b39      	ldr	r3, [pc, #228]	@ (8006ca8 <fallas+0x2a0>)
 8006bc2:	791b      	ldrb	r3, [r3, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4053      	eors	r3, r2
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8006bce:	2201      	movs	r2, #1
 8006bd0:	211e      	movs	r1, #30
 8006bd2:	201f      	movs	r0, #31
 8006bd4:	f000 fd3a 	bl	800764c <wreg_waux_conf>
 8006bd8:	e000      	b.n	8006bdc <fallas+0x1d4>
			goto fallas_j06;
 8006bda:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8006bdc:	4b33      	ldr	r3, [pc, #204]	@ (8006cac <fallas+0x2a4>)
 8006bde:	799b      	ldrb	r3, [r3, #6]
 8006be0:	2201      	movs	r2, #1
 8006be2:	4053      	eors	r3, r2
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 8006bea:	2201      	movs	r2, #1
 8006bec:	210a      	movs	r1, #10
 8006bee:	201f      	movs	r0, #31
 8006bf0:	f000 fd2c 	bl	800764c <wreg_waux_conf>
 8006bf4:	e000      	b.n	8006bf8 <fallas+0x1f0>
			goto fallas_j06a;
 8006bf6:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8006cac <fallas+0x2a4>)
 8006bfa:	789b      	ldrb	r3, [r3, #2]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4053      	eors	r3, r2
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 8006c06:	2201      	movs	r2, #1
 8006c08:	210c      	movs	r1, #12
 8006c0a:	2020      	movs	r0, #32
 8006c0c:	f000 fd1e 	bl	800764c <wreg_waux_conf>
 8006c10:	e000      	b.n	8006c14 <fallas+0x20c>
			goto fallas_j04b;
 8006c12:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 8006c14:	4b25      	ldr	r3, [pc, #148]	@ (8006cac <fallas+0x2a4>)
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4053      	eors	r3, r2
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 8006c22:	2201      	movs	r2, #1
 8006c24:	210b      	movs	r1, #11
 8006c26:	2020      	movs	r0, #32
 8006c28:	f000 fd10 	bl	800764c <wreg_waux_conf>
 8006c2c:	e000      	b.n	8006c30 <fallas+0x228>
			goto fallas_j04c;
 8006c2e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 8006c30:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <fallas+0x2a4>)
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2201      	movs	r2, #1
 8006c36:	4053      	eors	r3, r2
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 8006c3e:	2201      	movs	r2, #1
 8006c40:	210c      	movs	r1, #12
 8006c42:	201f      	movs	r0, #31
 8006c44:	f000 fd02 	bl	800764c <wreg_waux_conf>
 8006c48:	e000      	b.n	8006c4c <fallas+0x244>
			goto fallas_j06b;
 8006c4a:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 8006c4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ca0 <fallas+0x298>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d00c      	beq.n	8006c6e <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 8006c54:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <fallas+0x2b8>)
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4a19      	ldr	r2, [pc, #100]	@ (8006cc4 <fallas+0x2bc>)
 8006c60:	215a      	movs	r1, #90	@ 0x5a
 8006c62:	5c52      	ldrb	r2, [r2, r1]
 8006c64:	4013      	ands	r3, r2
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d111      	bne.n	8006c90 <fallas+0x288>
			goto parpadeo2a;
 8006c6c:	e000      	b.n	8006c70 <fallas+0x268>
			goto parpadeo2a;
 8006c6e:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8006c70:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8006c72:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <fallas+0x2b4>)
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <fallas+0x2b0>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	0010      	movs	r0, r2
 8006c7e:	f000 fcbd 	bl	80075fc <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8006c82:	4b08      	ldr	r3, [pc, #32]	@ (8006ca4 <fallas+0x29c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 8006c88:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <fallas+0x29c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	705a      	strb	r2, [r3, #1]
 8006c8e:	e000      	b.n	8006c92 <fallas+0x28a>
		goto finfallas;
 8006c90:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	0018      	movs	r0, r3
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20001080 	.word	0x20001080
 8006ca0:	20000bf4 	.word	0x20000bf4
 8006ca4:	20000bec 	.word	0x20000bec
 8006ca8:	20000be4 	.word	0x20000be4
 8006cac:	20000bdc 	.word	0x20000bdc
 8006cb0:	20001190 	.word	0x20001190
 8006cb4:	20000c34 	.word	0x20000c34
 8006cb8:	20000bb2 	.word	0x20000bb2
 8006cbc:	20000bb3 	.word	0x20000bb3
 8006cc0:	20000bac 	.word	0x20000bac
 8006cc4:	200000b8 	.word	0x200000b8

08006cc8 <offdpy>:
void offdpy (){				//	offdpy:
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8006ccc:	211f      	movs	r1, #31
 8006cce:	201f      	movs	r0, #31
 8006cd0:	f000 fc94 	bl	80075fc <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 8006cd4:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <offdpy+0x20>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 8006cda:	4b03      	ldr	r3, [pc, #12]	@ (8006ce8 <offdpy+0x20>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	705a      	strb	r2, [r3, #1]
}
 8006ce0:	46c0      	nop			@ (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	20000bec 	.word	0x20000bec

08006cec <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8006cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cee:	b0a7      	sub	sp, #156	@ 0x9c
 8006cf0:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 8006cf2:	4bd7      	ldr	r3, [pc, #860]	@ (8007050 <ram_reserved+0x364>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2baa      	cmp	r3, #170	@ 0xaa
 8006cf8:	d000      	beq.n	8006cfc <ram_reserved+0x10>
 8006cfa:	e15f      	b.n	8006fbc <ram_reserved+0x2d0>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 8006cfc:	46c0      	nop			@ (mov r8, r8)

			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8006cfe:	4bd5      	ldr	r3, [pc, #852]	@ (8007054 <ram_reserved+0x368>)
 8006d00:	0018      	movs	r0, r3
 8006d02:	f00f ff81 	bl	8016c08 <HAL_IWDG_Refresh>
			// Para realizar una sobreescritura en la Flash, es necesario borrar la pagina antes
			// CGM 04/12/2024

			uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
 8006d06:	4bd4      	ldr	r3, [pc, #848]	@ (8007058 <ram_reserved+0x36c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	22f8      	movs	r2, #248	@ 0xf8
 8006d0c:	0612      	lsls	r2, r2, #24
 8006d0e:	4694      	mov	ip, r2
 8006d10:	4463      	add	r3, ip
 8006d12:	228c      	movs	r2, #140	@ 0x8c
 8006d14:	18b9      	adds	r1, r7, r2
 8006d16:	600b      	str	r3, [r1, #0]
			if(VarAux_ % 2048 == 0){
 8006d18:	18bb      	adds	r3, r7, r2
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	055b      	lsls	r3, r3, #21
 8006d1e:	0d5b      	lsrs	r3, r3, #21
 8006d20:	d132      	bne.n	8006d88 <ram_reserved+0x9c>
				uint32_t numberPage = getNumberPage(VarAux_); 		// Number the Page
 8006d22:	18bb      	adds	r3, r7, r2
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fb fc50 	bl	80025cc <getNumberPage>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	2288      	movs	r2, #136	@ 0x88
 8006d30:	18b9      	adds	r1, r7, r2
 8006d32:	600b      	str	r3, [r1, #0]
				uint32_t Error_ = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
				FLASH_EraseInitTypeDef pEraseInit = {0};
 8006d38:	266c      	movs	r6, #108	@ 0x6c
 8006d3a:	19bb      	adds	r3, r7, r6
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	2310      	movs	r3, #16
 8006d40:	001a      	movs	r2, r3
 8006d42:	2100      	movs	r1, #0
 8006d44:	f015 f9fe 	bl	801c144 <memset>
				pEraseInit.NbPages = 1;
 8006d48:	0031      	movs	r1, r6
 8006d4a:	187a      	adds	r2, r7, r1
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	60d3      	str	r3, [r2, #12]
				pEraseInit.Page = numberPage;
 8006d50:	187a      	adds	r2, r7, r1
 8006d52:	2388      	movs	r3, #136	@ 0x88
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6093      	str	r3, [r2, #8]
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8006d5a:	187a      	adds	r2, r7, r1
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	6013      	str	r3, [r2, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006d60:	46c0      	nop			@ (mov r8, r8)
 8006d62:	f00d f94d 	bl	8014000 <HAL_FLASH_Unlock>
 8006d66:	1e03      	subs	r3, r0, #0
 8006d68:	d1fb      	bne.n	8006d62 <ram_reserved+0x76>
				HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8006d6a:	2314      	movs	r3, #20
 8006d6c:	2268      	movs	r2, #104	@ 0x68
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	19da      	adds	r2, r3, r7
 8006d72:	236c      	movs	r3, #108	@ 0x6c
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	0011      	movs	r1, r2
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f00d f9ef 	bl	801415c <HAL_FLASHEx_Erase>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006d7e:	46c0      	nop			@ (mov r8, r8)
 8006d80:	f00d f962 	bl	8014048 <HAL_FLASH_Lock>
 8006d84:	1e03      	subs	r3, r0, #0
 8006d86:	d1fb      	bne.n	8006d80 <ram_reserved+0x94>
			}
			AddressDestination = (uint64_t *) dirPointer;
 8006d88:	4bb3      	ldr	r3, [pc, #716]	@ (8007058 <ram_reserved+0x36c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2294      	movs	r2, #148	@ 0x94
 8006d8e:	18ba      	adds	r2, r7, r2
 8006d90:	6013      	str	r3, [r2, #0]
			//while( HAL_FLASH_Unlock() !=  HAL_OK );
			// Graba 128 Bytes de FLASH
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006d92:	232b      	movs	r3, #43	@ 0x2b
 8006d94:	2268      	movs	r2, #104	@ 0x68
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	19da      	adds	r2, r3, r7
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	7013      	strb	r3, [r2, #0]
 8006d9e:	e103      	b.n	8006fa8 <ram_reserved+0x2bc>
			   	// Data = (uint32_t)(*dataPointer);

				Data  	 =  (uint64_t)(*dataPointer);						dataPointer++;
 8006da0:	4bae      	ldr	r3, [pc, #696]	@ (800705c <ram_reserved+0x370>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2680      	movs	r6, #128	@ 0x80
 8006da8:	19ba      	adds	r2, r7, r6
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	2300      	movs	r3, #0
 8006dae:	2284      	movs	r2, #132	@ 0x84
 8006db0:	18ba      	adds	r2, r7, r2
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	4ba9      	ldr	r3, [pc, #676]	@ (800705c <ram_reserved+0x370>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	4ba8      	ldr	r3, [pc, #672]	@ (800705c <ram_reserved+0x370>)
 8006dbc:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer))	<<8;				dataPointer++;
 8006dbe:	4ba7      	ldr	r3, [pc, #668]	@ (800705c <ram_reserved+0x370>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006dcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dce:	000b      	movs	r3, r1
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	0010      	movs	r0, r2
 8006dd4:	0200      	lsls	r0, r0, #8
 8006dd6:	6678      	str	r0, [r7, #100]	@ 0x64
 8006dd8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8006dda:	4318      	orrs	r0, r3
 8006ddc:	6678      	str	r0, [r7, #100]	@ 0x64
 8006dde:	000b      	movs	r3, r1
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de4:	19bb      	adds	r3, r7, r6
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006dec:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006dee:	1812      	adds	r2, r2, r0
 8006df0:	414b      	adcs	r3, r1
 8006df2:	19b9      	adds	r1, r7, r6
 8006df4:	600a      	str	r2, [r1, #0]
 8006df6:	604b      	str	r3, [r1, #4]
 8006df8:	4b98      	ldr	r3, [pc, #608]	@ (800705c <ram_reserved+0x370>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	4b97      	ldr	r3, [pc, #604]	@ (800705c <ram_reserved+0x370>)
 8006e00:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer)) 	<<16;				dataPointer++;
 8006e02:	4b96      	ldr	r3, [pc, #600]	@ (800705c <ram_reserved+0x370>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e12:	000b      	movs	r3, r1
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	0010      	movs	r0, r2
 8006e18:	0405      	lsls	r5, r0, #16
 8006e1a:	431d      	orrs	r5, r3
 8006e1c:	000b      	movs	r3, r1
 8006e1e:	041c      	lsls	r4, r3, #16
 8006e20:	19bb      	adds	r3, r7, r6
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	1912      	adds	r2, r2, r4
 8006e28:	416b      	adcs	r3, r5
 8006e2a:	0030      	movs	r0, r6
 8006e2c:	19b9      	adds	r1, r7, r6
 8006e2e:	600a      	str	r2, [r1, #0]
 8006e30:	604b      	str	r3, [r1, #4]
 8006e32:	4b8a      	ldr	r3, [pc, #552]	@ (800705c <ram_reserved+0x370>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	4b88      	ldr	r3, [pc, #544]	@ (800705c <ram_reserved+0x370>)
 8006e3a:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<24;			   	dataPointer++;
 8006e3c:	4b87      	ldr	r3, [pc, #540]	@ (800705c <ram_reserved+0x370>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e44:	2300      	movs	r3, #0
 8006e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e4c:	0011      	movs	r1, r2
 8006e4e:	0a09      	lsrs	r1, r1, #8
 8006e50:	6479      	str	r1, [r7, #68]	@ 0x44
 8006e52:	0013      	movs	r3, r2
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e58:	0006      	movs	r6, r0
 8006e5a:	183b      	adds	r3, r7, r0
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e64:	1812      	adds	r2, r2, r0
 8006e66:	414b      	adcs	r3, r1
 8006e68:	0031      	movs	r1, r6
 8006e6a:	1878      	adds	r0, r7, r1
 8006e6c:	6002      	str	r2, [r0, #0]
 8006e6e:	6043      	str	r3, [r0, #4]
 8006e70:	4b7a      	ldr	r3, [pc, #488]	@ (800705c <ram_reserved+0x370>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	4b79      	ldr	r3, [pc, #484]	@ (800705c <ram_reserved+0x370>)
 8006e78:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<32;			   	dataPointer++;
 8006e7a:	4b78      	ldr	r3, [pc, #480]	@ (800705c <ram_reserved+0x370>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e82:	2300      	movs	r3, #0
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	001b      	movs	r3, r3
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e90:	000e      	movs	r6, r1
 8006e92:	187b      	adds	r3, r7, r1
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e9c:	1812      	adds	r2, r2, r0
 8006e9e:	414b      	adcs	r3, r1
 8006ea0:	0031      	movs	r1, r6
 8006ea2:	1878      	adds	r0, r7, r1
 8006ea4:	6002      	str	r2, [r0, #0]
 8006ea6:	6043      	str	r3, [r0, #4]
 8006ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800705c <ram_reserved+0x370>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	4b6b      	ldr	r3, [pc, #428]	@ (800705c <ram_reserved+0x370>)
 8006eb0:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<40;			   	dataPointer++;
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800705c <ram_reserved+0x370>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eba:	2300      	movs	r3, #0
 8006ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	623b      	str	r3, [r7, #32]
 8006ec8:	000e      	movs	r6, r1
 8006eca:	187b      	adds	r3, r7, r1
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	6a38      	ldr	r0, [r7, #32]
 8006ed2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ed4:	1812      	adds	r2, r2, r0
 8006ed6:	414b      	adcs	r3, r1
 8006ed8:	0031      	movs	r1, r6
 8006eda:	1878      	adds	r0, r7, r1
 8006edc:	6002      	str	r2, [r0, #0]
 8006ede:	6043      	str	r3, [r0, #4]
 8006ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800705c <ram_reserved+0x370>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800705c <ram_reserved+0x370>)
 8006ee8:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<48;			   	dataPointer++;
 8006eea:	4b5c      	ldr	r3, [pc, #368]	@ (800705c <ram_reserved+0x370>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	000e      	movs	r6, r1
 8006f02:	187b      	adds	r3, r7, r1
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	6938      	ldr	r0, [r7, #16]
 8006f0a:	6979      	ldr	r1, [r7, #20]
 8006f0c:	1812      	adds	r2, r2, r0
 8006f0e:	414b      	adcs	r3, r1
 8006f10:	0031      	movs	r1, r6
 8006f12:	1878      	adds	r0, r7, r1
 8006f14:	6002      	str	r2, [r0, #0]
 8006f16:	6043      	str	r3, [r0, #4]
 8006f18:	4b50      	ldr	r3, [pc, #320]	@ (800705c <ram_reserved+0x370>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800705c <ram_reserved+0x370>)
 8006f20:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<56;			   	dataPointer++;
 8006f22:	4b4e      	ldr	r3, [pc, #312]	@ (800705c <ram_reserved+0x370>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	2300      	movs	r3, #0
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	000e      	movs	r6, r1
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	6838      	ldr	r0, [r7, #0]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	1812      	adds	r2, r2, r0
 8006f46:	414b      	adcs	r3, r1
 8006f48:	19b9      	adds	r1, r7, r6
 8006f4a:	600a      	str	r2, [r1, #0]
 8006f4c:	604b      	str	r3, [r1, #4]
 8006f4e:	4b43      	ldr	r3, [pc, #268]	@ (800705c <ram_reserved+0x370>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	4b41      	ldr	r3, [pc, #260]	@ (800705c <ram_reserved+0x370>)
 8006f56:	601a      	str	r2, [r3, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006f58:	46c0      	nop			@ (mov r8, r8)
 8006f5a:	f00d f851 	bl	8014000 <HAL_FLASH_Unlock>
 8006f5e:	1e03      	subs	r3, r0, #0
 8006f60:	d1fb      	bne.n	8006f5a <ram_reserved+0x26e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) AddressDestination, Data);
 8006f62:	2394      	movs	r3, #148	@ 0x94
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	6819      	ldr	r1, [r3, #0]
 8006f68:	2380      	movs	r3, #128	@ 0x80
 8006f6a:	18fb      	adds	r3, r7, r3
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2001      	movs	r0, #1
 8006f72:	f00c fff7 	bl	8013f64 <HAL_FLASH_Program>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	f00d f866 	bl	8014048 <HAL_FLASH_Lock>
 8006f7c:	1e03      	subs	r3, r0, #0
 8006f7e:	d1fb      	bne.n	8006f78 <ram_reserved+0x28c>
				AddressDestination++;
 8006f80:	2294      	movs	r2, #148	@ 0x94
 8006f82:	18bb      	adds	r3, r7, r2
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	18ba      	adds	r2, r7, r2
 8006f8a:	6013      	str	r3, [r2, #0]
				//if(AddressDestination>=0x801d000)
				//	break;
//				while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	//dirPointer +=4;
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 8006f8c:	4b31      	ldr	r3, [pc, #196]	@ (8007054 <ram_reserved+0x368>)
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f00f fe3a 	bl	8016c08 <HAL_IWDG_Refresh>


				asm ("nop");
 8006f94:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006f96:	222b      	movs	r2, #43	@ 0x2b
 8006f98:	2168      	movs	r1, #104	@ 0x68
 8006f9a:	1853      	adds	r3, r2, r1
 8006f9c:	19db      	adds	r3, r3, r7
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	1852      	adds	r2, r2, r1
 8006fa2:	19d2      	adds	r2, r2, r7
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	7013      	strb	r3, [r2, #0]
 8006fa8:	232b      	movs	r3, #43	@ 0x2b
 8006faa:	2268      	movs	r2, #104	@ 0x68
 8006fac:	189b      	adds	r3, r3, r2
 8006fae:	19db      	adds	r3, r3, r7
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d800      	bhi.n	8006fb8 <ram_reserved+0x2cc>
 8006fb6:	e6f3      	b.n	8006da0 <ram_reserved+0xb4>
//			LD				A,cntByteLoaded											;	Si el contador apuntador ya es 63 entonces espera a que la grabacion se ejecute
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			asm ("nop");
 8006fb8:	46c0      	nop			@ (mov r8, r8)
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8006fba:	e041      	b.n	8007040 <ram_reserved+0x354>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8006fbc:	46c0      	nop			@ (mov r8, r8)
//check_bit_enable:																											;	Si la EEPROM no esta desbloqueada entonces repite la llave
//												BTJF			FLASH_IAPSR,#3,PROG_eepr_mode
//MEM_UNLOCKED1:

GRABA_SIG:
			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8006fbe:	4b25      	ldr	r3, [pc, #148]	@ (8007054 <ram_reserved+0x368>)
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f00f fe21 	bl	8016c08 <HAL_IWDG_Refresh>
//
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			HAL_IWDG_Refresh( &hiwdg );
 8006fc6:	4b23      	ldr	r3, [pc, #140]	@ (8007054 <ram_reserved+0x368>)
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f00f fe1d 	bl	8016c08 <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8006fce:	232a      	movs	r3, #42	@ 0x2a
 8006fd0:	2268      	movs	r2, #104	@ 0x68
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	19db      	adds	r3, r3, r7
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e028      	b.n	800702e <ram_reserved+0x342>
				FlashManager((uint32_t)dirPointer, (uint32_t)*dataPointer);
 8006fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8007058 <ram_reserved+0x36c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	001a      	movs	r2, r3
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800705c <ram_reserved+0x370>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	0019      	movs	r1, r3
 8006fea:	0010      	movs	r0, r2
 8006fec:	f7fc f8ba 	bl	8003164 <FlashManager>
				reePlantilla[i] = *dataPointer;		// Guardando el respaldo en RAM
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800705c <ram_reserved+0x370>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	242a      	movs	r4, #42	@ 0x2a
 8006ff6:	2568      	movs	r5, #104	@ 0x68
 8006ff8:	1963      	adds	r3, r4, r5
 8006ffa:	19db      	adds	r3, r3, r7
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	7811      	ldrb	r1, [r2, #0]
 8007000:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <ram_reserved+0x374>)
 8007002:	54d1      	strb	r1, [r2, r3]
				dataPointer++;
 8007004:	4b15      	ldr	r3, [pc, #84]	@ (800705c <ram_reserved+0x370>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	4b14      	ldr	r3, [pc, #80]	@ (800705c <ram_reserved+0x370>)
 800700c:	601a      	str	r2, [r3, #0]
				dirPointer++;
 800700e:	4b12      	ldr	r3, [pc, #72]	@ (8007058 <ram_reserved+0x36c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	4b10      	ldr	r3, [pc, #64]	@ (8007058 <ram_reserved+0x36c>)
 8007016:	601a      	str	r2, [r3, #0]
				HAL_IWDG_Refresh( &hiwdg );
 8007018:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <ram_reserved+0x368>)
 800701a:	0018      	movs	r0, r3
 800701c:	f00f fdf4 	bl	8016c08 <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8007020:	1963      	adds	r3, r4, r5
 8007022:	19db      	adds	r3, r3, r7
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	1963      	adds	r3, r4, r5
 8007028:	19db      	adds	r3, r3, r7
 800702a:	3201      	adds	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	232a      	movs	r3, #42	@ 0x2a
 8007030:	2268      	movs	r2, #104	@ 0x68
 8007032:	189b      	adds	r3, r3, r2
 8007034:	19db      	adds	r3, r3, r7
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	b25b      	sxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	dace      	bge.n	8006fdc <ram_reserved+0x2f0>
			}



WAIT_FOR_GRAB_0:
 800703e:	46c0      	nop			@ (mov r8, r8)

WAIT_FOR_GRAB:
			HAL_IWDG_Refresh( &hiwdg );		//MOV				IWDG_KR,#$AA
 8007040:	4b04      	ldr	r3, [pc, #16]	@ (8007054 <ram_reserved+0x368>)
 8007042:	0018      	movs	r0, r3
 8007044:	f00f fde0 	bl	8016c08 <HAL_IWDG_Refresh>
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8007048:	46c0      	nop			@ (mov r8, r8)
 800704a:	46bd      	mov	sp, r7
 800704c:	b027      	add	sp, #156	@ 0x9c
 800704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007050:	20000e74 	.word	0x20000e74
 8007054:	20000560 	.word	0x20000560
 8007058:	20000e78 	.word	0x20000e78
 800705c:	20000e7c 	.word	0x20000e7c
 8007060:	20000ce8 	.word	0x20000ce8

08007064 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 800706a:	1dbb      	adds	r3, r7, #6
 800706c:	2200      	movs	r2, #0
 800706e:	801a      	strh	r2, [r3, #0]
	foo= reePlantilla[eetiempoAhorro1]*360;
 8007070:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <load_tiempoAhorro1+0x30>)
 8007072:	226f      	movs	r2, #111	@ 0x6f
 8007074:	5c9b      	ldrb	r3, [r3, r2]
 8007076:	0019      	movs	r1, r3
 8007078:	1dbb      	adds	r3, r7, #6
 800707a:	22b4      	movs	r2, #180	@ 0xb4
 800707c:	0052      	lsls	r2, r2, #1
 800707e:	434a      	muls	r2, r1
 8007080:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8007082:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <load_tiempoAhorro1+0x34>)
 8007084:	1dba      	adds	r2, r7, #6
 8007086:	8812      	ldrh	r2, [r2, #0]
 8007088:	801a      	strh	r2, [r3, #0]
}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b002      	add	sp, #8
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	20000ce8 	.word	0x20000ce8
 8007098:	20000c8c 	.word	0x20000c8c

0800709c <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 80070a2:	1dbb      	adds	r3, r7, #6
 80070a4:	2200      	movs	r2, #0
 80070a6:	801a      	strh	r2, [r3, #0]
		foo= reePlantilla[eetiempoAhorro2]*360;
 80070a8:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <load_tiempoAhorro2+0x30>)
 80070aa:	2270      	movs	r2, #112	@ 0x70
 80070ac:	5c9b      	ldrb	r3, [r3, r2]
 80070ae:	0019      	movs	r1, r3
 80070b0:	1dbb      	adds	r3, r7, #6
 80070b2:	22b4      	movs	r2, #180	@ 0xb4
 80070b4:	0052      	lsls	r2, r2, #1
 80070b6:	434a      	muls	r2, r1
 80070b8:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 80070ba:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <load_tiempoAhorro2+0x34>)
 80070bc:	1dba      	adds	r2, r7, #6
 80070be:	8812      	ldrh	r2, [r2, #0]
 80070c0:	801a      	strh	r2, [r3, #0]
}
 80070c2:	46c0      	nop			@ (mov r8, r8)
 80070c4:	46bd      	mov	sp, r7
 80070c6:	b002      	add	sp, #8
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	20000ce8 	.word	0x20000ce8
 80070d0:	20000c8e 	.word	0x20000c8e

080070d4 <load_timeNoct>:

void load_timeNoct(){
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = reePlantilla[eetimeNoct]*60;
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <load_timeNoct+0x1c>)
 80070da:	224b      	movs	r2, #75	@ 0x4b
 80070dc:	5c9b      	ldrb	r3, [r3, r2]
 80070de:	001a      	movs	r2, r3
 80070e0:	233c      	movs	r3, #60	@ 0x3c
 80070e2:	4353      	muls	r3, r2
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	4b03      	ldr	r3, [pc, #12]	@ (80070f4 <load_timeNoct+0x20>)
 80070e8:	801a      	strh	r2, [r3, #0]
}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000ce8 	.word	0x20000ce8
 80070f4:	20000ca0 	.word	0x20000ca0

080070f8 <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 80070fe:	4b16      	ldr	r3, [pc, #88]	@ (8007158 <load_next_buffer+0x60>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8007104:	4b15      	ldr	r3, [pc, #84]	@ (800715c <load_next_buffer+0x64>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	01db      	lsls	r3, r3, #7
 800710a:	b29a      	uxth	r2, r3
 800710c:	4b14      	ldr	r3, [pc, #80]	@ (8007160 <load_next_buffer+0x68>)
 800710e:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8007110:	4b14      	ldr	r3, [pc, #80]	@ (8007164 <load_next_buffer+0x6c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a12      	ldr	r2, [pc, #72]	@ (8007160 <load_next_buffer+0x68>)
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	189b      	adds	r3, r3, r2
 800711a:	607b      	str	r3, [r7, #4]
	wreg = 0;
 800711c:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <load_next_buffer+0x70>)
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	781a      	ldrb	r2, [r3, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	701a      	strb	r2, [r3, #0]
	point_X++;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3301      	adds	r3, #1
 800712e:	607b      	str	r3, [r7, #4]
	point_Y++;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	603b      	str	r3, [r7, #0]
	wreg++;
 8007136:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <load_next_buffer+0x70>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <load_next_buffer+0x70>)
 8007140:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 8007142:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <load_next_buffer+0x70>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	db00      	blt.n	800714e <load_next_buffer+0x56>
		goto load_next_buffer_01;
 800714c:	e7e9      	b.n	8007122 <load_next_buffer+0x2a>
	}
    asm ("nop");
 800714e:	46c0      	nop			@ (mov r8, r8)
}
 8007150:	46c0      	nop			@ (mov r8, r8)
 8007152:	46bd      	mov	sp, r7
 8007154:	b002      	add	sp, #8
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000e8c 	.word	0x20000e8c
 800715c:	20000e82 	.word	0x20000e82
 8007160:	20000932 	.word	0x20000932
 8007164:	20000e88 	.word	0x20000e88
 8007168:	20000bb3 	.word	0x20000bb3

0800716c <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
		//
		//waux = lowByte(cntReg);		// 		mov		waux,resull;
		//point_X++;  // cntRegPNT++;						//		incw	X
		//wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado

		FlashManager(cntRegPNT, cntReg);
 8007170:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <save_cntReg+0x24>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	001a      	movs	r2, r3
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <save_cntReg+0x28>)
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	0019      	movs	r1, r3
 800717c:	0010      	movs	r0, r2
 800717e:	f7fb fff1 	bl	8003164 <FlashManager>


		HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8007182:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <save_cntReg+0x2c>)
 8007184:	0018      	movs	r0, r3
 8007186:	f00f fd3f 	bl	8016c08 <HAL_IWDG_Refresh>
		//
//		ret
}
 800718a:	46c0      	nop			@ (mov r8, r8)
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20001128 	.word	0x20001128
 8007194:	20001126 	.word	0x20001126
 8007198:	20000560 	.word	0x20000560

0800719c <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 80071a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007258 <save_timeUNIX+0xbc>)
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	0a1b      	lsrs	r3, r3, #8
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b2c      	ldr	r3, [pc, #176]	@ (800725c <save_timeUNIX+0xc0>)
 80071ac:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 80071ae:	4b2b      	ldr	r3, [pc, #172]	@ (800725c <save_timeUNIX+0xc0>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	001a      	movs	r2, r3
 80071b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007260 <save_timeUNIX+0xc4>)
 80071b6:	0019      	movs	r1, r3
 80071b8:	0010      	movs	r0, r2
 80071ba:	f000 fa0b 	bl	80075d4 <wreeprom>
	reeTimeUnix1 = waux;
 80071be:	4b27      	ldr	r3, [pc, #156]	@ (800725c <save_timeUNIX+0xc0>)
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	4b28      	ldr	r3, [pc, #160]	@ (8007264 <save_timeUNIX+0xc8>)
 80071c4:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80071c6:	4b28      	ldr	r3, [pc, #160]	@ (8007268 <save_timeUNIX+0xcc>)
 80071c8:	0018      	movs	r0, r3
 80071ca:	f00f fd1d 	bl	8016c08 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 80071ce:	4b22      	ldr	r3, [pc, #136]	@ (8007258 <save_timeUNIX+0xbc>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	4b21      	ldr	r3, [pc, #132]	@ (800725c <save_timeUNIX+0xc0>)
 80071d6:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 80071d8:	4b20      	ldr	r3, [pc, #128]	@ (800725c <save_timeUNIX+0xc0>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	001a      	movs	r2, r3
 80071de:	4b23      	ldr	r3, [pc, #140]	@ (800726c <save_timeUNIX+0xd0>)
 80071e0:	0019      	movs	r1, r3
 80071e2:	0010      	movs	r0, r2
 80071e4:	f000 f9f6 	bl	80075d4 <wreeprom>
	reeTimeUnix2 = waux;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	@ (800725c <save_timeUNIX+0xc0>)
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	4b20      	ldr	r3, [pc, #128]	@ (8007270 <save_timeUNIX+0xd4>)
 80071ee:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80071f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007268 <save_timeUNIX+0xcc>)
 80071f2:	0018      	movs	r0, r3
 80071f4:	f00f fd08 	bl	8016c08 <HAL_IWDG_Refresh>


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 80071f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007274 <save_timeUNIX+0xd8>)
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	b29b      	uxth	r3, r3
 8007200:	b2da      	uxtb	r2, r3
 8007202:	4b16      	ldr	r3, [pc, #88]	@ (800725c <save_timeUNIX+0xc0>)
 8007204:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8007206:	4b15      	ldr	r3, [pc, #84]	@ (800725c <save_timeUNIX+0xc0>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	001a      	movs	r2, r3
 800720c:	4b1a      	ldr	r3, [pc, #104]	@ (8007278 <save_timeUNIX+0xdc>)
 800720e:	0019      	movs	r1, r3
 8007210:	0010      	movs	r0, r2
 8007212:	f000 f9df 	bl	80075d4 <wreeprom>
	reeTimeUnix3 = waux;
 8007216:	4b11      	ldr	r3, [pc, #68]	@ (800725c <save_timeUNIX+0xc0>)
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	4b18      	ldr	r3, [pc, #96]	@ (800727c <save_timeUNIX+0xe0>)
 800721c:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800721e:	4b12      	ldr	r3, [pc, #72]	@ (8007268 <save_timeUNIX+0xcc>)
 8007220:	0018      	movs	r0, r3
 8007222:	f00f fcf1 	bl	8016c08 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8007226:	4b13      	ldr	r3, [pc, #76]	@ (8007274 <save_timeUNIX+0xd8>)
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	4b0b      	ldr	r3, [pc, #44]	@ (800725c <save_timeUNIX+0xc0>)
 800722e:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8007230:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <save_timeUNIX+0xc0>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	001a      	movs	r2, r3
 8007236:	4b12      	ldr	r3, [pc, #72]	@ (8007280 <save_timeUNIX+0xe4>)
 8007238:	0019      	movs	r1, r3
 800723a:	0010      	movs	r0, r2
 800723c:	f000 f9ca 	bl	80075d4 <wreeprom>
	reeTimeUnix4 = waux;
 8007240:	4b06      	ldr	r3, [pc, #24]	@ (800725c <save_timeUNIX+0xc0>)
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <save_timeUNIX+0xe8>)
 8007246:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8007248:	4b07      	ldr	r3, [pc, #28]	@ (8007268 <save_timeUNIX+0xcc>)
 800724a:	0018      	movs	r0, r3
 800724c:	f00f fcdc 	bl	8016c08 <HAL_IWDG_Refresh>

}
 8007250:	46c0      	nop			@ (mov r8, r8)
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	20000e98 	.word	0x20000e98
 800725c:	20000bb2 	.word	0x20000bb2
 8007260:	0803f804 	.word	0x0803f804
 8007264:	20000d69 	.word	0x20000d69
 8007268:	20000560 	.word	0x20000560
 800726c:	0803f805 	.word	0x0803f805
 8007270:	20000d6a 	.word	0x20000d6a
 8007274:	20000e9a 	.word	0x20000e9a
 8007278:	0803f806 	.word	0x0803f806
 800727c:	20000d6b 	.word	0x20000d6b
 8007280:	0803f807 	.word	0x0803f807
 8007284:	20000d6c 	.word	0x20000d6c

08007288 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	000a      	movs	r2, r1
 8007292:	1cfb      	adds	r3, r7, #3
 8007294:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8007296:	e011      	b.n	80072bc <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8007298:	210f      	movs	r1, #15
 800729a:	187b      	adds	r3, r7, r1
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 80072a2:	187b      	adds	r3, r7, r1
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f860 	bl	800736c <build_chksum>
		*point_X++;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3301      	adds	r3, #1
 80072b0:	607b      	str	r3, [r7, #4]
		waux--;
 80072b2:	1cfb      	adds	r3, r7, #3
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	1cfb      	adds	r3, r7, #3
 80072b8:	3a01      	subs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]
	while (waux){
 80072bc:	1cfb      	adds	r3, r7, #3
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e9      	bne.n	8007298 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 80072c4:	46c0      	nop			@ (mov r8, r8)
 80072c6:	46c0      	nop			@ (mov r8, r8)
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b004      	add	sp, #16
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 80072d4:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <ld_alarmDelay+0x1c>)
 80072d6:	224e      	movs	r2, #78	@ 0x4e
 80072d8:	5c9b      	ldrb	r3, [r3, r2]
 80072da:	001a      	movs	r2, r3
 80072dc:	233c      	movs	r3, #60	@ 0x3c
 80072de:	4353      	muls	r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	4b03      	ldr	r3, [pc, #12]	@ (80072f0 <ld_alarmDelay+0x20>)
 80072e4:	801a      	strh	r2, [r3, #0]
}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200000b8 	.word	0x200000b8
 80072f0:	20001088 	.word	0x20001088

080072f4 <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	e007      	b.n	8007310 <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 8007300:	4a07      	ldr	r2, [pc, #28]	@ (8007320 <clean_buffer+0x2c>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	18d3      	adds	r3, r2, r3
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3301      	adds	r3, #1
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b7f      	cmp	r3, #127	@ 0x7f
 8007314:	ddf4      	ble.n	8007300 <clean_buffer+0xc>
	}
}
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	46c0      	nop			@ (mov r8, r8)
 800731a:	46bd      	mov	sp, r7
 800731c:	b002      	add	sp, #8
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20000d74 	.word	0x20000d74

08007324 <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e00c      	b.n	800734e <copyVector+0x2a>
		*dstY = *srcX;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	701a      	strb	r2, [r3, #0]
		srcX++;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3301      	adds	r3, #1
 8007340:	607b      	str	r3, [r7, #4]
		dstY++;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <copyVector+0x44>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	001a      	movs	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4293      	cmp	r3, r2
 8007358:	dbec      	blt.n	8007334 <copyVector+0x10>
	}
	wreg = 0;
 800735a:	4b03      	ldr	r3, [pc, #12]	@ (8007368 <copyVector+0x44>)
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
}
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b004      	add	sp, #16
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000bb3 	.word	0x20000bb3

0800736c <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	0002      	movs	r2, r0
 8007374:	1dfb      	adds	r3, r7, #7
 8007376:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8007378:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 800737a:	1dfb      	adds	r3, r7, #7
 800737c:	781a      	ldrb	r2, [r3, #0]
 800737e:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <build_chksum+0x24>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	18d2      	adds	r2, r2, r3
 8007384:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <build_chksum+0x24>)
 8007386:	601a      	str	r2, [r3, #0]
}
 8007388:	46c0      	nop			@ (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	b002      	add	sp, #8
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000f1c 	.word	0x20000f1c

08007394 <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 8007398:	f7ff fca8 	bl	8006cec <ram_reserved>
Return_RAM:

}
 800739c:	46c0      	nop			@ (mov r8, r8)
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <decword+0x1c>
		(*decwreg_Reg)--;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	801a      	strh	r2, [r3, #0]
}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b002      	add	sp, #8
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <decwreg+0x1c>
		(*decwreg_Reg)--;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	3b01      	subs	r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	701a      	strb	r2, [r3, #0]
}
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b002      	add	sp, #8
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 80073f2:	4b40      	ldr	r3, [pc, #256]	@ (80074f4 <buildmode+0x108>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 80073f8:	4b3f      	ldr	r3, [pc, #252]	@ (80074f8 <buildmode+0x10c>)
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 8007400:	4b3c      	ldr	r3, [pc, #240]	@ (80074f4 <buildmode+0x108>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2201      	movs	r2, #1
 8007406:	4313      	orrs	r3, r2
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b3a      	ldr	r3, [pc, #232]	@ (80074f4 <buildmode+0x108>)
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e000      	b.n	8007412 <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 8007410:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 8007412:	1dbb      	adds	r3, r7, #6
 8007414:	2200      	movs	r2, #0
 8007416:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8007418:	4b38      	ldr	r3, [pc, #224]	@ (80074fc <buildmode+0x110>)
 800741a:	2223      	movs	r2, #35	@ 0x23
 800741c:	5c9b      	ldrb	r3, [r3, r2]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	4a36      	ldr	r2, [pc, #216]	@ (80074fc <buildmode+0x110>)
 8007424:	2124      	movs	r1, #36	@ 0x24
 8007426:	5c52      	ldrb	r2, [r2, r1]
 8007428:	189b      	adds	r3, r3, r2
 800742a:	b29a      	uxth	r2, r3
 800742c:	1dbb      	adds	r3, r7, #6
 800742e:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 8007430:	4b33      	ldr	r3, [pc, #204]	@ (8007500 <buildmode+0x114>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	b29b      	uxth	r3, r3
 8007438:	4a32      	ldr	r2, [pc, #200]	@ (8007504 <buildmode+0x118>)
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	189b      	adds	r3, r3, r2
 800743e:	b29a      	uxth	r2, r3
 8007440:	4b31      	ldr	r3, [pc, #196]	@ (8007508 <buildmode+0x11c>)
 8007442:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8007444:	4b30      	ldr	r3, [pc, #192]	@ (8007508 <buildmode+0x11c>)
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b21b      	sxth	r3, r3
 800744a:	1dba      	adds	r2, r7, #6
 800744c:	2100      	movs	r1, #0
 800744e:	5e52      	ldrsh	r2, [r2, r1]
 8007450:	429a      	cmp	r2, r3
 8007452:	dc07      	bgt.n	8007464 <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8007454:	4b27      	ldr	r3, [pc, #156]	@ (80074f4 <buildmode+0x108>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2202      	movs	r2, #2
 800745a:	4313      	orrs	r3, r2
 800745c:	b2da      	uxtb	r2, r3
 800745e:	4b25      	ldr	r3, [pc, #148]	@ (80074f4 <buildmode+0x108>)
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	e000      	b.n	8007466 <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8007464:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8007466:	4b25      	ldr	r3, [pc, #148]	@ (80074fc <buildmode+0x110>)
 8007468:	2259      	movs	r2, #89	@ 0x59
 800746a:	5c9b      	ldrb	r3, [r3, r2]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d025      	beq.n	80074bc <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 8007470:	4b26      	ldr	r3, [pc, #152]	@ (800750c <buildmode+0x120>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	b29b      	uxth	r3, r3
 8007478:	4a25      	ldr	r2, [pc, #148]	@ (8007510 <buildmode+0x124>)
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	189b      	adds	r3, r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	4b21      	ldr	r3, [pc, #132]	@ (8007508 <buildmode+0x11c>)
 8007482:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 8007484:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <buildmode+0x110>)
 8007486:	2221      	movs	r2, #33	@ 0x21
 8007488:	5c9b      	ldrb	r3, [r3, r2]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	b29b      	uxth	r3, r3
 800748e:	4a1b      	ldr	r2, [pc, #108]	@ (80074fc <buildmode+0x110>)
 8007490:	2122      	movs	r1, #34	@ 0x22
 8007492:	5c52      	ldrb	r2, [r2, r1]
 8007494:	189b      	adds	r3, r3, r2
 8007496:	b29a      	uxth	r2, r3
 8007498:	1dbb      	adds	r3, r7, #6
 800749a:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 800749c:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <buildmode+0x11c>)
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	1dba      	adds	r2, r7, #6
 80074a4:	2100      	movs	r1, #0
 80074a6:	5e52      	ldrsh	r2, [r2, r1]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	dc09      	bgt.n	80074c0 <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 80074ac:	4b11      	ldr	r3, [pc, #68]	@ (80074f4 <buildmode+0x108>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2210      	movs	r2, #16
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <buildmode+0x108>)
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 80074bc:	46c0      	nop			@ (mov r8, r8)
 80074be:	e000      	b.n	80074c2 <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 80074c0:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 80074c2:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <buildmode+0x128>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2201      	movs	r2, #1
 80074c8:	4053      	eors	r3, r2
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d108      	bne.n	80074e2 <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 80074d0:	4b08      	ldr	r3, [pc, #32]	@ (80074f4 <buildmode+0x108>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	4252      	negs	r2, r2
 80074d8:	4313      	orrs	r3, r2
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <buildmode+0x108>)
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e000      	b.n	80074e4 <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 80074e2:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 80074e4:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <buildmode+0x108>)
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <buildmode+0x12c>)
 80074ea:	701a      	strb	r2, [r3, #0]

}
 80074ec:	46c0      	nop			@ (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000bb2 	.word	0x20000bb2
 80074f8:	20000c16 	.word	0x20000c16
 80074fc:	200000b8 	.word	0x200000b8
 8007500:	20000c0c 	.word	0x20000c0c
 8007504:	20000c0d 	.word	0x20000c0d
 8007508:	20000932 	.word	0x20000932
 800750c:	20000c0e 	.word	0x20000c0e
 8007510:	20000c0f 	.word	0x20000c0f
 8007514:	20000bd4 	.word	0x20000bd4
 8007518:	20000bb0 	.word	0x20000bb0

0800751c <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 8007522:	4b26      	ldr	r3, [pc, #152]	@ (80075bc <memodriver+0xa0>)
 8007524:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 8007526:	4b26      	ldr	r3, [pc, #152]	@ (80075c0 <memodriver+0xa4>)
 8007528:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 800752a:	4b26      	ldr	r3, [pc, #152]	@ (80075c4 <memodriver+0xa8>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2baa      	cmp	r3, #170	@ 0xaa
 8007530:	d11f      	bne.n	8007572 <memodriver+0x56>
				goto  loaddat;
			}
grabmemo:
 8007532:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 8007534:	4b21      	ldr	r3, [pc, #132]	@ (80075bc <memodriver+0xa0>)
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	4b23      	ldr	r3, [pc, #140]	@ (80075c8 <memodriver+0xac>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d025      	beq.n	800758c <memodriver+0x70>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 8007540:	4b21      	ldr	r3, [pc, #132]	@ (80075c8 <memodriver+0xac>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	001a      	movs	r2, r3
 8007546:	4b21      	ldr	r3, [pc, #132]	@ (80075cc <memodriver+0xb0>)
 8007548:	5c9b      	ldrb	r3, [r3, r2]
 800754a:	0018      	movs	r0, r3
 800754c:	4b1e      	ldr	r3, [pc, #120]	@ (80075c8 <memodriver+0xac>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	001a      	movs	r2, r3
 8007552:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <memodriver+0xa4>)
 8007554:	18d3      	adds	r3, r2, r3
 8007556:	0019      	movs	r1, r3
 8007558:	f000 f83c 	bl	80075d4 <wreeprom>
			reePlantilla[cntmemo] = copiaPlantilla[cntmemo];
 800755c:	4b1a      	ldr	r3, [pc, #104]	@ (80075c8 <memodriver+0xac>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	0019      	movs	r1, r3
 8007562:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <memodriver+0xac>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	001a      	movs	r2, r3
 8007568:	4b18      	ldr	r3, [pc, #96]	@ (80075cc <memodriver+0xb0>)
 800756a:	5c59      	ldrb	r1, [r3, r1]
 800756c:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <memodriver+0xb4>)
 800756e:	5499      	strb	r1, [r3, r2]
			goto nextdat;
 8007570:	e00d      	b.n	800758e <memodriver+0x72>
				goto  loaddat;
 8007572:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = reePlantilla[cntmemo];
 8007574:	4b14      	ldr	r3, [pc, #80]	@ (80075c8 <memodriver+0xac>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	0019      	movs	r1, r3
 800757a:	4b13      	ldr	r3, [pc, #76]	@ (80075c8 <memodriver+0xac>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	001a      	movs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	189b      	adds	r3, r3, r2
 8007584:	4a12      	ldr	r2, [pc, #72]	@ (80075d0 <memodriver+0xb4>)
 8007586:	5c52      	ldrb	r2, [r2, r1]
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e000      	b.n	800758e <memodriver+0x72>
				goto nextdat;
 800758c:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 800758e:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <memodriver+0xac>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <memodriver+0xac>)
 8007598:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 800759a:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <memodriver+0xac>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da06      	bge.n	80075b2 <memodriver+0x96>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 80075a4:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <memodriver+0xa8>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 80075aa:	4b07      	ldr	r3, [pc, #28]	@ (80075c8 <memodriver+0xac>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 80075b0:	e000      	b.n	80075b4 <memodriver+0x98>
				goto finmemodr;
 80075b2:	46c0      	nop			@ (mov r8, r8)
}
 80075b4:	46c0      	nop			@ (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b002      	add	sp, #8
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	200000b8 	.word	0x200000b8
 80075c0:	0803f000 	.word	0x0803f000
 80075c4:	20000cbf 	.word	0x20000cbf
 80075c8:	20000cc0 	.word	0x20000cc0
 80075cc:	20000138 	.word	0x20000138
 80075d0:	20000ce8 	.word	0x20000ce8

080075d4 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	0002      	movs	r2, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 80075e2:	1dfb      	adds	r3, r7, #7
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	FlashManager((uint32_t)AddressDestination, (uint32_t)Data);
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	0011      	movs	r1, r2
 80075ee:	0018      	movs	r0, r3
 80075f0:	f7fb fdb8 	bl	8003164 <FlashManager>
}
 80075f4:	46c0      	nop			@ (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b004      	add	sp, #16
 80075fa:	bd80      	pop	{r7, pc}

080075fc <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	0002      	movs	r2, r0
 8007604:	1dfb      	adds	r3, r7, #7
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	1dbb      	adds	r3, r7, #6
 800760a:	1c0a      	adds	r2, r1, #0
 800760c:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 800760e:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <op_menu+0x2c>)
 8007610:	1dfa      	adds	r2, r7, #7
 8007612:	7812      	ldrb	r2, [r2, #0]
 8007614:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 8007616:	4b05      	ldr	r3, [pc, #20]	@ (800762c <op_menu+0x30>)
 8007618:	1dba      	adds	r2, r7, #6
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	701a      	strb	r2, [r3, #0]
}
 800761e:	46c0      	nop			@ (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b002      	add	sp, #8
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	20000baf 	.word	0x20000baf
 800762c:	20000bae 	.word	0x20000bae

08007630 <datled_clear>:

void datled_clear()
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 8007634:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <datled_clear+0x18>)
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 800763a:	4b03      	ldr	r3, [pc, #12]	@ (8007648 <datled_clear+0x18>)
 800763c:	2200      	movs	r2, #0
 800763e:	705a      	strb	r2, [r3, #1]
}
 8007640:	46c0      	nop			@ (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	20000bec 	.word	0x20000bec

0800764c <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	0004      	movs	r4, r0
 8007654:	0008      	movs	r0, r1
 8007656:	0011      	movs	r1, r2
 8007658:	1dfb      	adds	r3, r7, #7
 800765a:	1c22      	adds	r2, r4, #0
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	1dbb      	adds	r3, r7, #6
 8007660:	1c02      	adds	r2, r0, #0
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	1d7b      	adds	r3, r7, #5
 8007666:	1c0a      	adds	r2, r1, #0
 8007668:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 800766a:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <wreg_waux_conf+0x4c>)
 800766c:	1dfa      	adds	r2, r7, #7
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 8007672:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <wreg_waux_conf+0x50>)
 8007674:	1dba      	adds	r2, r7, #6
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 800767a:	1d7b      	adds	r3, r7, #5
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 8007682:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <wreg_waux_conf+0x54>)
 8007684:	2201      	movs	r2, #1
 8007686:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 8007688:	e002      	b.n	8007690 <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 800768a:	4b05      	ldr	r3, [pc, #20]	@ (80076a0 <wreg_waux_conf+0x54>)
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
}
 8007690:	46c0      	nop			@ (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	b003      	add	sp, #12
 8007696:	bd90      	pop	{r4, r7, pc}
 8007698:	20000bb3 	.word	0x20000bb3
 800769c:	20000bb2 	.word	0x20000bb2
 80076a0:	20001080 	.word	0x20001080

080076a4 <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 80076a4:	b5b0      	push	{r4, r5, r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	0005      	movs	r5, r0
 80076ac:	000c      	movs	r4, r1
 80076ae:	0010      	movs	r0, r2
 80076b0:	0019      	movs	r1, r3
 80076b2:	1dbb      	adds	r3, r7, #6
 80076b4:	1c2a      	adds	r2, r5, #0
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	1c22      	adds	r2, r4, #0
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	1cbb      	adds	r3, r7, #2
 80076c0:	1c02      	adds	r2, r0, #0
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	1c7b      	adds	r3, r7, #1
 80076c6:	1c0a      	adds	r2, r1, #0
 80076c8:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 80076ca:	4b14      	ldr	r3, [pc, #80]	@ (800771c <opc_nv+0x78>)
 80076cc:	1dba      	adds	r2, r7, #6
 80076ce:	8812      	ldrh	r2, [r2, #0]
 80076d0:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 80076d2:	4b13      	ldr	r3, [pc, #76]	@ (8007720 <opc_nv+0x7c>)
 80076d4:	1d3a      	adds	r2, r7, #4
 80076d6:	8812      	ldrh	r2, [r2, #0]
 80076d8:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 80076da:	4b12      	ldr	r3, [pc, #72]	@ (8007724 <opc_nv+0x80>)
 80076dc:	1cba      	adds	r2, r7, #2
 80076de:	8812      	ldrh	r2, [r2, #0]
 80076e0:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 80076e2:	f7fe fe25 	bl	8006330 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 80076e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <opc_nv+0x80>)
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	1c7b      	adds	r3, r7, #1
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b2d1      	uxtb	r1, r2
 80076f4:	4a0c      	ldr	r2, [pc, #48]	@ (8007728 <opc_nv+0x84>)
 80076f6:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 80076f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <opc_nv+0x80>)
 80076fa:	881a      	ldrh	r2, [r3, #0]
 80076fc:	2318      	movs	r3, #24
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b2d1      	uxtb	r1, r2
 8007704:	4a08      	ldr	r2, [pc, #32]	@ (8007728 <opc_nv+0x84>)
 8007706:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 8007708:	4b06      	ldr	r3, [pc, #24]	@ (8007724 <opc_nv+0x80>)
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	0018      	movs	r0, r3
 800770e:	f7ff f805 	bl	800671c <convadec_math>

}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	46bd      	mov	sp, r7
 8007716:	b002      	add	sp, #8
 8007718:	bdb0      	pop	{r4, r5, r7, pc}
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	20000c5e 	.word	0x20000c5e
 8007720:	20000c60 	.word	0x20000c60
 8007724:	20000932 	.word	0x20000932
 8007728:	20000138 	.word	0x20000138

0800772c <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 8007732:	4b79      	ldr	r3, [pc, #484]	@ (8007918 <comunicacion+0x1ec>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	3b01      	subs	r3, #1
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b77      	ldr	r3, [pc, #476]	@ (8007918 <comunicacion+0x1ec>)
 800773c:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 800773e:	4b76      	ldr	r3, [pc, #472]	@ (8007918 <comunicacion+0x1ec>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2bff      	cmp	r3, #255	@ 0xff
 8007744:	d103      	bne.n	800774e <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 8007746:	4b75      	ldr	r3, [pc, #468]	@ (800791c <comunicacion+0x1f0>)
 8007748:	2200      	movs	r2, #0
 800774a:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 800774c:	e0dd      	b.n	800790a <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 800774e:	4b72      	ldr	r3, [pc, #456]	@ (8007918 <comunicacion+0x1ec>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2bfe      	cmp	r3, #254	@ 0xfe
 8007754:	d103      	bne.n	800775e <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 8007756:	4b71      	ldr	r3, [pc, #452]	@ (800791c <comunicacion+0x1f0>)
 8007758:	2201      	movs	r2, #1
 800775a:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 800775c:	e0d5      	b.n	800790a <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 800775e:	4b6e      	ldr	r3, [pc, #440]	@ (8007918 <comunicacion+0x1ec>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d000      	beq.n	8007768 <comunicacion+0x3c>
 8007766:	e0cd      	b.n	8007904 <comunicacion+0x1d8>
			goto comu_01;
 8007768:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 800776a:	4b6b      	ldr	r3, [pc, #428]	@ (8007918 <comunicacion+0x1ec>)
 800776c:	2205      	movs	r2, #5
 800776e:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8007770:	4b6b      	ldr	r3, [pc, #428]	@ (8007920 <comunicacion+0x1f4>)
 8007772:	0018      	movs	r0, r3
 8007774:	f00d fc2a 	bl	8014fcc <HAL_I2C_GetState>
 8007778:	0003      	movs	r3, r0
 800777a:	2b20      	cmp	r3, #32
 800777c:	d000      	beq.n	8007780 <comunicacion+0x54>
 800777e:	e0ae      	b.n	80078de <comunicacion+0x1b2>
				countResetI2C = 0;
 8007780:	4b68      	ldr	r3, [pc, #416]	@ (8007924 <comunicacion+0x1f8>)
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 8007786:	4b68      	ldr	r3, [pc, #416]	@ (8007928 <comunicacion+0x1fc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 800778c:	4b66      	ldr	r3, [pc, #408]	@ (8007928 <comunicacion+0x1fc>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8007792:	230f      	movs	r3, #15
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	e00a      	b.n	80077b2 <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 800779c:	200f      	movs	r0, #15
 800779e:	183b      	adds	r3, r7, r0
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4a62      	ldr	r2, [pc, #392]	@ (800792c <comunicacion+0x200>)
 80077a4:	2100      	movs	r1, #0
 80077a6:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 80077a8:	183b      	adds	r3, r7, r0
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	183b      	adds	r3, r7, r0
 80077ae:	3201      	adds	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	230f      	movs	r3, #15
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b06      	cmp	r3, #6
 80077ba:	d9ef      	bls.n	800779c <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 80077bc:	4b5b      	ldr	r3, [pc, #364]	@ (800792c <comunicacion+0x200>)
 80077be:	2207      	movs	r2, #7
 80077c0:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 80077c2:	4b5a      	ldr	r3, [pc, #360]	@ (800792c <comunicacion+0x200>)
 80077c4:	2209      	movs	r2, #9
 80077c6:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 80077c8:	4b59      	ldr	r3, [pc, #356]	@ (8007930 <comunicacion+0x204>)
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	4b57      	ldr	r3, [pc, #348]	@ (800792c <comunicacion+0x200>)
 80077ce:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 80077d0:	4b58      	ldr	r3, [pc, #352]	@ (8007934 <comunicacion+0x208>)
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	4b55      	ldr	r3, [pc, #340]	@ (800792c <comunicacion+0x200>)
 80077d6:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 80077d8:	4b54      	ldr	r3, [pc, #336]	@ (800792c <comunicacion+0x200>)
 80077da:	2200      	movs	r2, #0
 80077dc:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 80077de:	230e      	movs	r3, #14
 80077e0:	18fb      	adds	r3, r7, r3
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e015      	b.n	8007814 <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 80077e8:	4b50      	ldr	r3, [pc, #320]	@ (800792c <comunicacion+0x200>)
 80077ea:	791a      	ldrb	r2, [r3, #4]
 80077ec:	200e      	movs	r0, #14
 80077ee:	183b      	adds	r3, r7, r0
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	4951      	ldr	r1, [pc, #324]	@ (8007938 <comunicacion+0x20c>)
 80077f4:	5ccb      	ldrb	r3, [r1, r3]
 80077f6:	0019      	movs	r1, r3
 80077f8:	183b      	adds	r3, r7, r0
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	4099      	lsls	r1, r3
 80077fe:	000b      	movs	r3, r1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	b2da      	uxtb	r2, r3
 8007806:	4b49      	ldr	r3, [pc, #292]	@ (800792c <comunicacion+0x200>)
 8007808:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 800780a:	183b      	adds	r3, r7, r0
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	183b      	adds	r3, r7, r0
 8007810:	3201      	adds	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	230e      	movs	r3, #14
 8007816:	18fb      	adds	r3, r7, r3
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b07      	cmp	r3, #7
 800781c:	d9e4      	bls.n	80077e8 <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 800781e:	4b43      	ldr	r3, [pc, #268]	@ (800792c <comunicacion+0x200>)
 8007820:	2200      	movs	r2, #0
 8007822:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 8007824:	4b41      	ldr	r3, [pc, #260]	@ (800792c <comunicacion+0x200>)
 8007826:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2106      	movs	r1, #6
 800782c:	0018      	movs	r0, r3
 800782e:	f7ff fd2b 	bl	8007288 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 8007832:	4b3d      	ldr	r3, [pc, #244]	@ (8007928 <comunicacion+0x1fc>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	4b3c      	ldr	r3, [pc, #240]	@ (800792c <comunicacion+0x200>)
 800783a:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 800783c:	4b3a      	ldr	r3, [pc, #232]	@ (8007928 <comunicacion+0x1fc>)
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 8007842:	4b3e      	ldr	r3, [pc, #248]	@ (800793c <comunicacion+0x210>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d034      	beq.n	80078b4 <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 800784a:	4a3d      	ldr	r2, [pc, #244]	@ (8007940 <comunicacion+0x214>)
 800784c:	4834      	ldr	r0, [pc, #208]	@ (8007920 <comunicacion+0x1f4>)
 800784e:	2309      	movs	r3, #9
 8007850:	2154      	movs	r1, #84	@ 0x54
 8007852:	f00d f9e1 	bl	8014c18 <HAL_I2C_Master_Receive_DMA>
 8007856:	1e03      	subs	r3, r0, #0
 8007858:	d123      	bne.n	80078a2 <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 800785a:	230d      	movs	r3, #13
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e015      	b.n	8007890 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8007864:	4b36      	ldr	r3, [pc, #216]	@ (8007940 <comunicacion+0x214>)
 8007866:	799b      	ldrb	r3, [r3, #6]
 8007868:	001a      	movs	r2, r3
 800786a:	200d      	movs	r0, #13
 800786c:	183b      	adds	r3, r7, r0
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	411a      	asrs	r2, r3
 8007872:	0013      	movs	r3, r2
 8007874:	2201      	movs	r2, #1
 8007876:	401a      	ands	r2, r3
 8007878:	183b      	adds	r3, r7, r0
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	1e51      	subs	r1, r2, #1
 800787e:	418a      	sbcs	r2, r1
 8007880:	b2d1      	uxtb	r1, r2
 8007882:	4a30      	ldr	r2, [pc, #192]	@ (8007944 <comunicacion+0x218>)
 8007884:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 8007886:	183b      	adds	r3, r7, r0
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	183b      	adds	r3, r7, r0
 800788c:	3201      	adds	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	230d      	movs	r3, #13
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b07      	cmp	r3, #7
 8007898:	d9e4      	bls.n	8007864 <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 800789a:	4b28      	ldr	r3, [pc, #160]	@ (800793c <comunicacion+0x210>)
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e033      	b.n	800790a <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 80078a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007920 <comunicacion+0x1f4>)
 80078a4:	0018      	movs	r0, r3
 80078a6:	f00d f881 	bl	80149ac <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 80078aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007920 <comunicacion+0x1f4>)
 80078ac:	0018      	movs	r0, r3
 80078ae:	f00c ffd7 	bl	8014860 <HAL_I2C_Init>
 80078b2:	e02a      	b.n	800790a <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 80078b4:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <comunicacion+0x200>)
 80078b6:	481a      	ldr	r0, [pc, #104]	@ (8007920 <comunicacion+0x1f4>)
 80078b8:	2307      	movs	r3, #7
 80078ba:	2154      	movs	r1, #84	@ 0x54
 80078bc:	f00d f8a6 	bl	8014a0c <HAL_I2C_Master_Transmit_DMA>
 80078c0:	1e03      	subs	r3, r0, #0
 80078c2:	d103      	bne.n	80078cc <comunicacion+0x1a0>
					  FlagTx= 1;
 80078c4:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <comunicacion+0x210>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	e01e      	b.n	800790a <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 80078cc:	4b14      	ldr	r3, [pc, #80]	@ (8007920 <comunicacion+0x1f4>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f00d f86c 	bl	80149ac <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 80078d4:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <comunicacion+0x1f4>)
 80078d6:	0018      	movs	r0, r3
 80078d8:	f00c ffc2 	bl	8014860 <HAL_I2C_Init>
 80078dc:	e015      	b.n	800790a <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 80078de:	4b11      	ldr	r3, [pc, #68]	@ (8007924 <comunicacion+0x1f8>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007924 <comunicacion+0x1f8>)
 80078e8:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 80078ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <comunicacion+0x1f8>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 80078f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <comunicacion+0x1f4>)
 80078f4:	0018      	movs	r0, r3
 80078f6:	f00d f859 	bl	80149ac <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <comunicacion+0x1f4>)
 80078fc:	0018      	movs	r0, r3
 80078fe:	f00c ffaf 	bl	8014860 <HAL_I2C_Init>
 8007902:	e002      	b.n	800790a <comunicacion+0x1de>
		goto fin_comu;
 8007904:	46c0      	nop			@ (mov r8, r8)
 8007906:	e000      	b.n	800790a <comunicacion+0x1de>
				}
			}
fin_comu:
 8007908:	46c0      	nop			@ (mov r8, r8)
	detecta();
 800790a:	f000 f81d 	bl	8007948 <detecta>


}
 800790e:	46c0      	nop			@ (mov r8, r8)
 8007910:	46bd      	mov	sp, r7
 8007912:	b004      	add	sp, #16
 8007914:	bd80      	pop	{r7, pc}
 8007916:	46c0      	nop			@ (mov r8, r8)
 8007918:	20000cd4 	.word	0x20000cd4
 800791c:	20000bb4 	.word	0x20000bb4
 8007920:	2000044c 	.word	0x2000044c
 8007924:	2000119e 	.word	0x2000119e
 8007928:	20000f1c 	.word	0x20000f1c
 800792c:	20000004 	.word	0x20000004
 8007930:	20000cd5 	.word	0x20000cd5
 8007934:	20000cd6 	.word	0x20000cd6
 8007938:	20000cd8 	.word	0x20000cd8
 800793c:	200003da 	.word	0x200003da
 8007940:	200003dc 	.word	0x200003dc
 8007944:	20000ce0 	.word	0x20000ce0

08007948 <detecta>:

void detecta(void){
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 800794e:	4bb0      	ldr	r3, [pc, #704]	@ (8007c10 <detecta+0x2c8>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <detecta+0x12>
 8007956:	f000 fc2f 	bl	80081b8 <detecta+0x870>
		goto dete03;
 800795a:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 800795c:	4bad      	ldr	r3, [pc, #692]	@ (8007c14 <detecta+0x2cc>)
 800795e:	225b      	movs	r2, #91	@ 0x5b
 8007960:	5c9b      	ldrb	r3, [r3, r2]
 8007962:	001a      	movs	r2, r3
 8007964:	2301      	movs	r3, #1
 8007966:	4013      	ands	r3, r2
 8007968:	d004      	beq.n	8007974 <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 800796a:	f7ff fb7b 	bl	8007064 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 800796e:	f7ff fb95 	bl	800709c <load_tiempoAhorro2>
	goto closedoor_b;
 8007972:	e1cc      	b.n	8007d0e <detecta+0x3c6>
		goto detectaPuerta;
 8007974:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 8007976:	4ba7      	ldr	r3, [pc, #668]	@ (8007c14 <detecta+0x2cc>)
 8007978:	2253      	movs	r2, #83	@ 0x53
 800797a:	5c9b      	ldrb	r3, [r3, r2]
 800797c:	001a      	movs	r2, r3
 800797e:	2308      	movs	r3, #8
 8007980:	4013      	ands	r3, r2
 8007982:	d045      	beq.n	8007a10 <detecta+0xc8>
		goto detecta_j01;
 8007984:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 8007986:	1dfb      	adds	r3, r7, #7
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e03a      	b.n	8007a04 <detecta+0xbc>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 800798e:	1dfb      	adds	r3, r7, #7
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	4ba1      	ldr	r3, [pc, #644]	@ (8007c18 <detecta+0x2d0>)
 8007994:	0092      	lsls	r2, r2, #2
 8007996:	58d0      	ldr	r0, [r2, r3]
 8007998:	1dfb      	adds	r3, r7, #7
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	4a9f      	ldr	r2, [pc, #636]	@ (8007c1c <detecta+0x2d4>)
 800799e:	5cd3      	ldrb	r3, [r2, r3]
 80079a0:	2201      	movs	r2, #1
 80079a2:	0019      	movs	r1, r3
 80079a4:	f00c fee5 	bl	8014772 <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 80079a8:	1dbb      	adds	r3, r7, #6
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e013      	b.n	80079d8 <detecta+0x90>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 80079b0:	1dbb      	adds	r3, r7, #6
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	4b98      	ldr	r3, [pc, #608]	@ (8007c18 <detecta+0x2d0>)
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	58d0      	ldr	r0, [r2, r3]
 80079ba:	1dbb      	adds	r3, r7, #6
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4a97      	ldr	r2, [pc, #604]	@ (8007c1c <detecta+0x2d4>)
 80079c0:	5cd3      	ldrb	r3, [r2, r3]
 80079c2:	0019      	movs	r1, r3
 80079c4:	f00c feb8 	bl	8014738 <HAL_GPIO_ReadPin>
 80079c8:	1e03      	subs	r3, r0, #0
 80079ca:	d100      	bne.n	80079ce <detecta+0x86>
 80079cc:	e1cb      	b.n	8007d66 <detecta+0x41e>
		for(uint8_t Px = 0; Px < 5; Px++){
 80079ce:	1dbb      	adds	r3, r7, #6
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	1dbb      	adds	r3, r7, #6
 80079d4:	3201      	adds	r2, #1
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	1dbb      	adds	r3, r7, #6
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d9e7      	bls.n	80079b0 <detecta+0x68>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 80079e0:	1dfb      	adds	r3, r7, #7
 80079e2:	781a      	ldrb	r2, [r3, #0]
 80079e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007c18 <detecta+0x2d0>)
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	58d0      	ldr	r0, [r2, r3]
 80079ea:	1dfb      	adds	r3, r7, #7
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	4a8b      	ldr	r2, [pc, #556]	@ (8007c1c <detecta+0x2d4>)
 80079f0:	5cd3      	ldrb	r3, [r2, r3]
 80079f2:	2200      	movs	r2, #0
 80079f4:	0019      	movs	r1, r3
 80079f6:	f00c febc 	bl	8014772 <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	1dfb      	adds	r3, r7, #7
 8007a00:	3201      	adds	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d9c0      	bls.n	800798e <detecta+0x46>
	}
	goto detecta_j02;
 8007a0c:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 8007a0e:	e174      	b.n	8007cfa <detecta+0x3b2>
	goto switch_no;
 8007a10:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 8007a12:	4b83      	ldr	r3, [pc, #524]	@ (8007c20 <detecta+0x2d8>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	425a      	negs	r2, r3
 8007a18:	4153      	adcs	r3, r2
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	001a      	movs	r2, r3
 8007a1e:	4b81      	ldr	r3, [pc, #516]	@ (8007c24 <detecta+0x2dc>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	4013      	ands	r3, r2
 8007a24:	d022      	beq.n	8007a6c <detecta+0x124>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8007a26:	4b80      	ldr	r3, [pc, #512]	@ (8007c28 <detecta+0x2e0>)
 8007a28:	6858      	ldr	r0, [r3, #4]
 8007a2a:	4b80      	ldr	r3, [pc, #512]	@ (8007c2c <detecta+0x2e4>)
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	0019      	movs	r1, r3
 8007a32:	f00c fe9e 	bl	8014772 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8007a36:	200a      	movs	r0, #10
 8007a38:	f00a fae4 	bl	8012004 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 8007a3c:	4b76      	ldr	r3, [pc, #472]	@ (8007c18 <detecta+0x2d0>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	4b76      	ldr	r3, [pc, #472]	@ (8007c1c <detecta+0x2d4>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	0019      	movs	r1, r3
 8007a46:	0010      	movs	r0, r2
 8007a48:	f00c fe76 	bl	8014738 <HAL_GPIO_ReadPin>
 8007a4c:	1e03      	subs	r3, r0, #0
 8007a4e:	d002      	beq.n	8007a56 <detecta+0x10e>
			FlagPuertaX[4] = 1;// Puerta Abierta
 8007a50:	4b77      	ldr	r3, [pc, #476]	@ (8007c30 <detecta+0x2e8>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8007a56:	4b74      	ldr	r3, [pc, #464]	@ (8007c28 <detecta+0x2e0>)
 8007a58:	6858      	ldr	r0, [r3, #4]
 8007a5a:	4b74      	ldr	r3, [pc, #464]	@ (8007c2c <detecta+0x2e4>)
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	0019      	movs	r1, r3
 8007a62:	f00c fe86 	bl	8014772 <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 8007a66:	4b6f      	ldr	r3, [pc, #444]	@ (8007c24 <detecta+0x2dc>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 8007a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8007c20 <detecta+0x2d8>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b0a      	cmp	r3, #10
 8007a72:	d000      	beq.n	8007a76 <detecta+0x12e>
 8007a74:	e083      	b.n	8007b7e <detecta+0x236>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007a76:	1d7b      	adds	r3, r7, #5
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e048      	b.n	8007b10 <detecta+0x1c8>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007a7e:	1d7b      	adds	r3, r7, #5
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	4b65      	ldr	r3, [pc, #404]	@ (8007c18 <detecta+0x2d0>)
 8007a84:	0092      	lsls	r2, r2, #2
 8007a86:	58d0      	ldr	r0, [r2, r3]
 8007a88:	1d7b      	adds	r3, r7, #5
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4a63      	ldr	r2, [pc, #396]	@ (8007c1c <detecta+0x2d4>)
 8007a8e:	5cd3      	ldrb	r3, [r2, r3]
 8007a90:	0019      	movs	r1, r3
 8007a92:	f00c fe51 	bl	8014738 <HAL_GPIO_ReadPin>
 8007a96:	1e03      	subs	r3, r0, #0
 8007a98:	d00f      	beq.n	8007aba <detecta+0x172>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 8007a9a:	4b66      	ldr	r3, [pc, #408]	@ (8007c34 <detecta+0x2ec>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	0013      	movs	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	189a      	adds	r2, r3, r2
 8007aa6:	1d7b      	adds	r3, r7, #5
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	18d3      	adds	r3, r2, r3
 8007aac:	4a62      	ldr	r2, [pc, #392]	@ (8007c38 <detecta+0x2f0>)
 8007aae:	5cd2      	ldrb	r2, [r2, r3]
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	b2d1      	uxtb	r1, r2
 8007ab4:	4a60      	ldr	r2, [pc, #384]	@ (8007c38 <detecta+0x2f0>)
 8007ab6:	54d1      	strb	r1, [r2, r3]
 8007ab8:	e025      	b.n	8007b06 <detecta+0x1be>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007aba:	1d7b      	adds	r3, r7, #5
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	4b56      	ldr	r3, [pc, #344]	@ (8007c18 <detecta+0x2d0>)
 8007ac0:	0092      	lsls	r2, r2, #2
 8007ac2:	58d0      	ldr	r0, [r2, r3]
 8007ac4:	1d7b      	adds	r3, r7, #5
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	4a54      	ldr	r2, [pc, #336]	@ (8007c1c <detecta+0x2d4>)
 8007aca:	5cd3      	ldrb	r3, [r2, r3]
 8007acc:	0019      	movs	r1, r3
 8007ace:	f00c fe33 	bl	8014738 <HAL_GPIO_ReadPin>
 8007ad2:	1e03      	subs	r3, r0, #0
 8007ad4:	d117      	bne.n	8007b06 <detecta+0x1be>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 8007ad6:	4b57      	ldr	r3, [pc, #348]	@ (8007c34 <detecta+0x2ec>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	001a      	movs	r2, r3
 8007adc:	0013      	movs	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	189a      	adds	r2, r3, r2
 8007ae2:	1d7b      	adds	r3, r7, #5
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	18d3      	adds	r3, r2, r3
 8007ae8:	4a51      	ldr	r2, [pc, #324]	@ (8007c30 <detecta+0x2e8>)
 8007aea:	2100      	movs	r1, #0
 8007aec:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 8007aee:	4b51      	ldr	r3, [pc, #324]	@ (8007c34 <detecta+0x2ec>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	0013      	movs	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	189a      	adds	r2, r3, r2
 8007afa:	1d7b      	adds	r3, r7, #5
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	18d3      	adds	r3, r2, r3
 8007b00:	4a4d      	ldr	r2, [pc, #308]	@ (8007c38 <detecta+0x2f0>)
 8007b02:	2100      	movs	r1, #0
 8007b04:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 8007b06:	1d7b      	adds	r3, r7, #5
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	1d7b      	adds	r3, r7, #5
 8007b0c:	3201      	adds	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	1d7b      	adds	r3, r7, #5
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d9b2      	bls.n	8007a7e <detecta+0x136>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 8007b18:	4b46      	ldr	r3, [pc, #280]	@ (8007c34 <detecta+0x2ec>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	001a      	movs	r2, r3
 8007b1e:	4b42      	ldr	r3, [pc, #264]	@ (8007c28 <detecta+0x2e0>)
 8007b20:	0092      	lsls	r2, r2, #2
 8007b22:	58d0      	ldr	r0, [r2, r3]
 8007b24:	4b43      	ldr	r3, [pc, #268]	@ (8007c34 <detecta+0x2ec>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	001a      	movs	r2, r3
 8007b2a:	4b40      	ldr	r3, [pc, #256]	@ (8007c2c <detecta+0x2e4>)
 8007b2c:	5c9b      	ldrb	r3, [r3, r2]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	0019      	movs	r1, r3
 8007b32:	f00c fe1e 	bl	8014772 <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 8007b36:	4b3f      	ldr	r3, [pc, #252]	@ (8007c34 <detecta+0x2ec>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d805      	bhi.n	8007b4a <detecta+0x202>
			countMPx++;
 8007b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c34 <detecta+0x2ec>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	4b3b      	ldr	r3, [pc, #236]	@ (8007c34 <detecta+0x2ec>)
 8007b48:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 8007b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c34 <detecta+0x2ec>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d102      	bne.n	8007b58 <detecta+0x210>
			countMPx = 0;
 8007b52:	4b38      	ldr	r3, [pc, #224]	@ (8007c34 <detecta+0x2ec>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 8007b58:	4b36      	ldr	r3, [pc, #216]	@ (8007c34 <detecta+0x2ec>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	001a      	movs	r2, r3
 8007b5e:	4b32      	ldr	r3, [pc, #200]	@ (8007c28 <detecta+0x2e0>)
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	58d0      	ldr	r0, [r2, r3]
 8007b64:	4b33      	ldr	r3, [pc, #204]	@ (8007c34 <detecta+0x2ec>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	001a      	movs	r2, r3
 8007b6a:	4b30      	ldr	r3, [pc, #192]	@ (8007c2c <detecta+0x2e4>)
 8007b6c:	5c9b      	ldrb	r3, [r3, r2]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	0019      	movs	r1, r3
 8007b72:	f00c fdfe 	bl	8014772 <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 8007b76:	4b2a      	ldr	r3, [pc, #168]	@ (8007c20 <detecta+0x2d8>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e009      	b.n	8007b92 <detecta+0x24a>
	}else if(countWaitPuerta < 10){
 8007b7e:	4b28      	ldr	r3, [pc, #160]	@ (8007c20 <detecta+0x2d8>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d805      	bhi.n	8007b92 <detecta+0x24a>
		countWaitPuerta++;
 8007b86:	4b26      	ldr	r3, [pc, #152]	@ (8007c20 <detecta+0x2d8>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	4b24      	ldr	r3, [pc, #144]	@ (8007c20 <detecta+0x2d8>)
 8007b90:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e0a5      	b.n	8007ce6 <detecta+0x39e>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007b9a:	1cfb      	adds	r3, r7, #3
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e097      	b.n	8007cd2 <detecta+0x38a>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	0013      	movs	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	189a      	adds	r2, r3, r2
 8007bac:	1cfb      	adds	r3, r7, #3
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	4a21      	ldr	r2, [pc, #132]	@ (8007c38 <detecta+0x2f0>)
 8007bb4:	5cd3      	ldrb	r3, [r2, r3]
 8007bb6:	1e5a      	subs	r2, r3, #1
 8007bb8:	4193      	sbcs	r3, r2
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	4b18      	ldr	r3, [pc, #96]	@ (8007c20 <detecta+0x2d8>)
 8007bbe:	7819      	ldrb	r1, [r3, #0]
 8007bc0:	2009      	movs	r0, #9
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	415b      	adcs	r3, r3
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	4013      	ands	r3, r2
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d100      	bne.n	8007bd4 <detecta+0x28c>
 8007bd2:	e079      	b.n	8007cc8 <detecta+0x380>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007bd4:	1cfb      	adds	r3, r7, #3
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <detecta+0x2d0>)
 8007bda:	0092      	lsls	r2, r2, #2
 8007bdc:	58d0      	ldr	r0, [r2, r3]
 8007bde:	1cfb      	adds	r3, r7, #3
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	4a0e      	ldr	r2, [pc, #56]	@ (8007c1c <detecta+0x2d4>)
 8007be4:	5cd3      	ldrb	r3, [r2, r3]
 8007be6:	0019      	movs	r1, r3
 8007be8:	f00c fda6 	bl	8014738 <HAL_GPIO_ReadPin>
 8007bec:	1e03      	subs	r3, r0, #0
 8007bee:	d025      	beq.n	8007c3c <detecta+0x2f4>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 8007bf0:	1d3b      	adds	r3, r7, #4
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	0013      	movs	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	189a      	adds	r2, r3, r2
 8007bfa:	1cfb      	adds	r3, r7, #3
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	18d3      	adds	r3, r2, r3
 8007c00:	4a0d      	ldr	r2, [pc, #52]	@ (8007c38 <detecta+0x2f0>)
 8007c02:	5cd2      	ldrb	r2, [r2, r3]
 8007c04:	3201      	adds	r2, #1
 8007c06:	b2d1      	uxtb	r1, r2
 8007c08:	4a0b      	ldr	r2, [pc, #44]	@ (8007c38 <detecta+0x2f0>)
 8007c0a:	54d1      	strb	r1, [r2, r3]
 8007c0c:	e03a      	b.n	8007c84 <detecta+0x33c>
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	20000bf4 	.word	0x20000bf4
 8007c14:	200000b8 	.word	0x200000b8
 8007c18:	200001f4 	.word	0x200001f4
 8007c1c:	20000208 	.word	0x20000208
 8007c20:	200011c8 	.word	0x200011c8
 8007c24:	20000224 	.word	0x20000224
 8007c28:	20000210 	.word	0x20000210
 8007c2c:	20000220 	.word	0x20000220
 8007c30:	200011a0 	.word	0x200011a0
 8007c34:	200011c9 	.word	0x200011c9
 8007c38:	200011b4 	.word	0x200011b4
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007c3c:	1cfb      	adds	r3, r7, #3
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	4bcc      	ldr	r3, [pc, #816]	@ (8007f74 <detecta+0x62c>)
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	58d0      	ldr	r0, [r2, r3]
 8007c46:	1cfb      	adds	r3, r7, #3
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	4acb      	ldr	r2, [pc, #812]	@ (8007f78 <detecta+0x630>)
 8007c4c:	5cd3      	ldrb	r3, [r2, r3]
 8007c4e:	0019      	movs	r1, r3
 8007c50:	f00c fd72 	bl	8014738 <HAL_GPIO_ReadPin>
 8007c54:	1e03      	subs	r3, r0, #0
 8007c56:	d115      	bne.n	8007c84 <detecta+0x33c>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	0013      	movs	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	189a      	adds	r2, r3, r2
 8007c62:	1cfb      	adds	r3, r7, #3
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	18d3      	adds	r3, r2, r3
 8007c68:	4ac4      	ldr	r2, [pc, #784]	@ (8007f7c <detecta+0x634>)
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007c6e:	1d3b      	adds	r3, r7, #4
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	0013      	movs	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	189a      	adds	r2, r3, r2
 8007c78:	1cfb      	adds	r3, r7, #3
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	18d3      	adds	r3, r2, r3
 8007c7e:	4ac0      	ldr	r2, [pc, #768]	@ (8007f80 <detecta+0x638>)
 8007c80:	2100      	movs	r1, #0
 8007c82:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 8007c84:	1d3b      	adds	r3, r7, #4
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	0013      	movs	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	189a      	adds	r2, r3, r2
 8007c8e:	1cfb      	adds	r3, r7, #3
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	18d3      	adds	r3, r2, r3
 8007c94:	4aba      	ldr	r2, [pc, #744]	@ (8007f80 <detecta+0x638>)
 8007c96:	5cd3      	ldrb	r3, [r2, r3]
 8007c98:	2b0a      	cmp	r3, #10
 8007c9a:	d115      	bne.n	8007cc8 <detecta+0x380>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8007c9c:	1d3b      	adds	r3, r7, #4
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	0013      	movs	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	189a      	adds	r2, r3, r2
 8007ca6:	1cfb      	adds	r3, r7, #3
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	18d3      	adds	r3, r2, r3
 8007cac:	4ab3      	ldr	r2, [pc, #716]	@ (8007f7c <detecta+0x634>)
 8007cae:	2101      	movs	r1, #1
 8007cb0:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007cb2:	1d3b      	adds	r3, r7, #4
 8007cb4:	781a      	ldrb	r2, [r3, #0]
 8007cb6:	0013      	movs	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	189a      	adds	r2, r3, r2
 8007cbc:	1cfb      	adds	r3, r7, #3
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	18d3      	adds	r3, r2, r3
 8007cc2:	4aaf      	ldr	r2, [pc, #700]	@ (8007f80 <detecta+0x638>)
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007cc8:	1cfb      	adds	r3, r7, #3
 8007cca:	781a      	ldrb	r2, [r3, #0]
 8007ccc:	1cfb      	adds	r3, r7, #3
 8007cce:	3201      	adds	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	1cfb      	adds	r3, r7, #3
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d800      	bhi.n	8007cdc <detecta+0x394>
 8007cda:	e762      	b.n	8007ba2 <detecta+0x25a>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007cdc:	1d3b      	adds	r3, r7, #4
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	1d3b      	adds	r3, r7, #4
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	1d3b      	adds	r3, r7, #4
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d800      	bhi.n	8007cf0 <detecta+0x3a8>
 8007cee:	e754      	b.n	8007b9a <detecta+0x252>
			}
		}
	}


	if(FlagPuertaX[4]){
 8007cf0:	4ba2      	ldr	r3, [pc, #648]	@ (8007f7c <detecta+0x634>)
 8007cf2:	791b      	ldrb	r3, [r3, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d138      	bne.n	8007d6a <detecta+0x422>
		goto opendoor;
	}
	goto detecta_j03;
 8007cf8:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 8007cfa:	4ba2      	ldr	r3, [pc, #648]	@ (8007f84 <detecta+0x63c>)
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7ff fb62 	bl	80073c6 <decwreg>
	if(debdoor == 0){
 8007d02:	4ba0      	ldr	r3, [pc, #640]	@ (8007f84 <detecta+0x63c>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d000      	beq.n	8007d0c <detecta+0x3c4>
 8007d0a:	e0a2      	b.n	8007e52 <detecta+0x50a>
		goto closedoor_b;
 8007d0c:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 8007d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8007f88 <detecta+0x640>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 8007d14:	4b9d      	ldr	r3, [pc, #628]	@ (8007f8c <detecta+0x644>)
 8007d16:	2248      	movs	r2, #72	@ 0x48
 8007d18:	5c9a      	ldrb	r2, [r3, r2]
 8007d1a:	4b9d      	ldr	r3, [pc, #628]	@ (8007f90 <detecta+0x648>)
 8007d1c:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 8007d1e:	4b9d      	ldr	r3, [pc, #628]	@ (8007f94 <detecta+0x64c>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 8007d24:	f7fe fbe6 	bl	80064f4 <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 8007d28:	4b9b      	ldr	r3, [pc, #620]	@ (8007f98 <detecta+0x650>)
 8007d2a:	785b      	ldrb	r3, [r3, #1]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d100      	bne.n	8007d32 <detecta+0x3ea>
 8007d30:	e091      	b.n	8007e56 <detecta+0x50e>
		goto detecta_j04;
 8007d32:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 8007d34:	4b98      	ldr	r3, [pc, #608]	@ (8007f98 <detecta+0x650>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 8007d3a:	4b97      	ldr	r3, [pc, #604]	@ (8007f98 <detecta+0x650>)
 8007d3c:	78db      	ldrb	r3, [r3, #3]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	4053      	eors	r3, r2
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d100      	bne.n	8007d4a <detecta+0x402>
 8007d48:	e087      	b.n	8007e5a <detecta+0x512>
		goto det_j04;
 8007d4a:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 8007d4c:	f7ff f9c2 	bl	80070d4 <load_timeNoct>
	durdhh=0;
 8007d50:	4b92      	ldr	r3, [pc, #584]	@ (8007f9c <detecta+0x654>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	801a      	strh	r2, [r3, #0]
	//durdhl=0;
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 8007d56:	4b90      	ldr	r3, [pc, #576]	@ (8007f98 <detecta+0x650>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 8007d5c:	4b90      	ldr	r3, [pc, #576]	@ (8007fa0 <detecta+0x658>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8007d62:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 8007d64:	e05e      	b.n	8007e24 <detecta+0x4dc>
				goto opendoor;
 8007d66:	46c0      	nop			@ (mov r8, r8)
 8007d68:	e000      	b.n	8007d6c <detecta+0x424>
		goto opendoor;
 8007d6a:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 8007d6c:	4b85      	ldr	r3, [pc, #532]	@ (8007f84 <detecta+0x63c>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b25b      	sxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db06      	blt.n	8007d84 <detecta+0x43c>
	debdoor++;
 8007d76:	4b83      	ldr	r3, [pc, #524]	@ (8007f84 <detecta+0x63c>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b81      	ldr	r3, [pc, #516]	@ (8007f84 <detecta+0x63c>)
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e000      	b.n	8007d86 <detecta+0x43e>
		goto noinc;
 8007d84:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 8007d86:	4b7f      	ldr	r3, [pc, #508]	@ (8007f84 <detecta+0x63c>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da29      	bge.n	8007de4 <detecta+0x49c>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 8007d90:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <detecta+0x640>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 8007d96:	4b83      	ldr	r3, [pc, #524]	@ (8007fa4 <detecta+0x65c>)
 8007d98:	2205      	movs	r2, #5
 8007d9a:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 8007d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f8c <detecta+0x644>)
 8007d9e:	224f      	movs	r2, #79	@ 0x4f
 8007da0:	5c9a      	ldrb	r2, [r3, r2]
 8007da2:	4b81      	ldr	r3, [pc, #516]	@ (8007fa8 <detecta+0x660>)
 8007da4:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 8007da6:	4b81      	ldr	r3, [pc, #516]	@ (8007fac <detecta+0x664>)
 8007da8:	2205      	movs	r2, #5
 8007daa:	701a      	strb	r2, [r3, #0]
	if(reePlantilla[eetimepaf]!= 0){
 8007dac:	4b80      	ldr	r3, [pc, #512]	@ (8007fb0 <detecta+0x668>)
 8007dae:	2248      	movs	r2, #72	@ 0x48
 8007db0:	5c9b      	ldrb	r3, [r3, r2]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <detecta+0x476>
	cnt_pta_fan=99;
 8007db6:	4b76      	ldr	r3, [pc, #472]	@ (8007f90 <detecta+0x648>)
 8007db8:	2263      	movs	r2, #99	@ 0x63
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	e000      	b.n	8007dc0 <detecta+0x478>
		goto no_ld_timepaf;
 8007dbe:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8007dc0:	4b75      	ldr	r3, [pc, #468]	@ (8007f98 <detecta+0x650>)
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00f      	beq.n	8007de8 <detecta+0x4a0>
		goto detecta_j05;
 8007dc8:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 8007dca:	4b7a      	ldr	r3, [pc, #488]	@ (8007fb4 <detecta+0x66c>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 8007dd0:	4b71      	ldr	r3, [pc, #452]	@ (8007f98 <detecta+0x650>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 8007dd6:	4b72      	ldr	r3, [pc, #456]	@ (8007fa0 <detecta+0x658>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 8007ddc:	4b76      	ldr	r3, [pc, #472]	@ (8007fb8 <detecta+0x670>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 8007de2:	e01f      	b.n	8007e24 <detecta+0x4dc>
		goto revnocman;
 8007de4:	46c0      	nop			@ (mov r8, r8)
 8007de6:	e000      	b.n	8007dea <detecta+0x4a2>
	goto revnocman;
 8007de8:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 8007dea:	4b74      	ldr	r3, [pc, #464]	@ (8007fbc <detecta+0x674>)
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d113      	bne.n	8007e1a <detecta+0x4d2>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 8007df2:	4b67      	ldr	r3, [pc, #412]	@ (8007f90 <detecta+0x648>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <detecta+0x4c4>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 8007dfa:	4b64      	ldr	r3, [pc, #400]	@ (8007f8c <detecta+0x644>)
 8007dfc:	2249      	movs	r2, #73	@ 0x49
 8007dfe:	5c9b      	ldrb	r3, [r3, r2]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <detecta+0x4c8>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 8007e04:	4b63      	ldr	r3, [pc, #396]	@ (8007f94 <detecta+0x64c>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 8007e0a:	e00b      	b.n	8007e24 <detecta+0x4dc>
		goto cancelAlarmPA;
 8007e0c:	46c0      	nop			@ (mov r8, r8)
 8007e0e:	e000      	b.n	8007e12 <detecta+0x4ca>
		goto cancelAlarmPA;
 8007e10:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 8007e12:	4b60      	ldr	r3, [pc, #384]	@ (8007f94 <detecta+0x64c>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	711a      	strb	r2, [r3, #4]
 8007e18:	e004      	b.n	8007e24 <detecta+0x4dc>
		goto ahorro_off;
 8007e1a:	46c0      	nop			@ (mov r8, r8)
 8007e1c:	e002      	b.n	8007e24 <detecta+0x4dc>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	e000      	b.n	8007e24 <detecta+0x4dc>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 8007e22:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 8007e24:	4b58      	ldr	r3, [pc, #352]	@ (8007f88 <detecta+0x640>)
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4053      	eors	r3, r2
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d103      	bne.n	8007e3a <detecta+0x4f2>
	cntdpysp=0xF0;
 8007e32:	4b63      	ldr	r3, [pc, #396]	@ (8007fc0 <detecta+0x678>)
 8007e34:	22f0      	movs	r2, #240	@ 0xf0
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	e000      	b.n	8007e3c <detecta+0x4f4>
		goto ahorro_off_00;
 8007e3a:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 8007e3c:	4b52      	ldr	r3, [pc, #328]	@ (8007f88 <detecta+0x640>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 8007e42:	4b51      	ldr	r3, [pc, #324]	@ (8007f88 <detecta+0x640>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 8007e48:	f7ff f90c 	bl	8007064 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007e4c:	f7ff f926 	bl	800709c <load_tiempoAhorro2>
	goto fin_detecta;
 8007e50:	e047      	b.n	8007ee2 <detecta+0x59a>
		goto revbotones;
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	e002      	b.n	8007e5c <detecta+0x514>
	goto revbotones;
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	e000      	b.n	8007e5c <detecta+0x514>
	goto revbotones;
 8007e5a:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 8007e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f88 <detecta+0x640>)
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10c      	bne.n	8007e7e <detecta+0x536>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8007e64:	f7fe fb10 	bl	8006488 <tdev_to_Word>
 8007e68:	0003      	movs	r3, r0
 8007e6a:	b21c      	sxth	r4, r3
 8007e6c:	4b55      	ldr	r3, [pc, #340]	@ (8007fc4 <detecta+0x67c>)
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f7fe fb22 	bl	80064b8 <TwoByteInArrayToWord>
 8007e74:	0003      	movs	r3, r0
 8007e76:	b21b      	sxth	r3, r3
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	dad0      	bge.n	8007e1e <detecta+0x4d6>
ask_ahorro:
 8007e7c:	e000      	b.n	8007e80 <detecta+0x538>
		goto ask_ahorro;
 8007e7e:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 8007e80:	4b41      	ldr	r3, [pc, #260]	@ (8007f88 <detecta+0x640>)
 8007e82:	79db      	ldrb	r3, [r3, #7]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0cc      	beq.n	8007e22 <detecta+0x4da>
		goto ask_time_ahorro;
 8007e88:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8007e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8007fc8 <detecta+0x680>)
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <detecta+0x55c>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8007e92:	f7ff f903 	bl	800709c <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8007e96:	4b3c      	ldr	r3, [pc, #240]	@ (8007f88 <detecta+0x640>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8007e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f88 <detecta+0x640>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8007ea2:	e01e      	b.n	8007ee2 <detecta+0x59a>
		goto modoAhorro1_ON;
 8007ea4:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8007ea6:	4b38      	ldr	r3, [pc, #224]	@ (8007f88 <detecta+0x640>)
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <detecta+0x56e>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8007eae:	4b44      	ldr	r3, [pc, #272]	@ (8007fc0 <detecta+0x678>)
 8007eb0:	22f0      	movs	r2, #240	@ 0xf0
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	e000      	b.n	8007eb8 <detecta+0x570>
		goto modoAhorro1_ON_2;
 8007eb6:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8007eb8:	4b33      	ldr	r3, [pc, #204]	@ (8007f88 <detecta+0x640>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8007ebe:	4b43      	ldr	r3, [pc, #268]	@ (8007fcc <detecta+0x684>)
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10c      	bne.n	8007ee0 <detecta+0x598>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8007ec6:	4b30      	ldr	r3, [pc, #192]	@ (8007f88 <detecta+0x640>)
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <detecta+0x58e>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8007ece:	4b3c      	ldr	r3, [pc, #240]	@ (8007fc0 <detecta+0x678>)
 8007ed0:	22f0      	movs	r2, #240	@ 0xf0
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e000      	b.n	8007ed8 <detecta+0x590>
		goto modoAhorro1_ON_3;
 8007ed6:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8007ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8007f88 <detecta+0x640>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	709a      	strb	r2, [r3, #2]
 8007ede:	e000      	b.n	8007ee2 <detecta+0x59a>
		goto fin_detecta;
 8007ee0:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8007ee2:	1cbb      	adds	r3, r7, #2
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e013      	b.n	8007f12 <detecta+0x5ca>
		btn_pr[k] = 0;
 8007eea:	1cbb      	adds	r3, r7, #2
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	4a38      	ldr	r2, [pc, #224]	@ (8007fd0 <detecta+0x688>)
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007ef4:	1cbb      	adds	r3, r7, #2
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4a36      	ldr	r2, [pc, #216]	@ (8007fd4 <detecta+0x68c>)
 8007efa:	2100      	movs	r1, #0
 8007efc:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8007efe:	1cbb      	adds	r3, r7, #2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	4a35      	ldr	r2, [pc, #212]	@ (8007fd8 <detecta+0x690>)
 8007f04:	2100      	movs	r1, #0
 8007f06:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007f08:	1cbb      	adds	r3, r7, #2
 8007f0a:	781a      	ldrb	r2, [r3, #0]
 8007f0c:	1cbb      	adds	r3, r7, #2
 8007f0e:	3201      	adds	r2, #1
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	1cbb      	adds	r3, r7, #2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b07      	cmp	r3, #7
 8007f18:	d9e7      	bls.n	8007eea <detecta+0x5a2>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8007f1a:	4b26      	ldr	r3, [pc, #152]	@ (8007fb4 <detecta+0x66c>)
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d117      	bne.n	8007f52 <detecta+0x60a>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8007f22:	4b2e      	ldr	r3, [pc, #184]	@ (8007fdc <detecta+0x694>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2201      	movs	r2, #1
 8007f28:	4053      	eors	r3, r2
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d112      	bne.n	8007f56 <detecta+0x60e>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8007f30:	4b2a      	ldr	r3, [pc, #168]	@ (8007fdc <detecta+0x694>)
 8007f32:	789b      	ldrb	r3, [r3, #2]
 8007f34:	2201      	movs	r2, #1
 8007f36:	4053      	eors	r3, r2
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10d      	bne.n	8007f5a <detecta+0x612>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8007f3e:	4b28      	ldr	r3, [pc, #160]	@ (8007fe0 <detecta+0x698>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <detecta+0x606>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8007f46:	4b24      	ldr	r3, [pc, #144]	@ (8007fd8 <detecta+0x690>)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8007f4c:	e13d      	b.n	80081ca <detecta+0x882>
		goto findet_jp;
 8007f4e:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8007f50:	e13b      	b.n	80081ca <detecta+0x882>
		goto no2btn;
 8007f52:	46c0      	nop			@ (mov r8, r8)
 8007f54:	e002      	b.n	8007f5c <detecta+0x614>
		goto no2btn;
 8007f56:	46c0      	nop			@ (mov r8, r8)
 8007f58:	e000      	b.n	8007f5c <detecta+0x614>
		goto no2btn;
 8007f5a:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8007f5c:	4b20      	ldr	r3, [pc, #128]	@ (8007fe0 <detecta+0x698>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b95      	cmp	r3, #149	@ 0x95
 8007f62:	d83f      	bhi.n	8007fe4 <detecta+0x69c>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8007f64:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe0 <detecta+0x698>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	3303      	adds	r3, #3
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe0 <detecta+0x698>)
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e039      	b.n	8007fe6 <detecta+0x69e>
 8007f72:	46c0      	nop			@ (mov r8, r8)
 8007f74:	200001f4 	.word	0x200001f4
 8007f78:	20000208 	.word	0x20000208
 8007f7c:	200011a0 	.word	0x200011a0
 8007f80:	200011b4 	.word	0x200011b4
 8007f84:	20000c1d 	.word	0x20000c1d
 8007f88:	20000c98 	.word	0x20000c98
 8007f8c:	200000b8 	.word	0x200000b8
 8007f90:	20000c83 	.word	0x20000c83
 8007f94:	20000be4 	.word	0x20000be4
 8007f98:	20000bd4 	.word	0x20000bd4
 8007f9c:	20000c14 	.word	0x20000c14
 8007fa0:	20000bec 	.word	0x20000bec
 8007fa4:	2000114e 	.word	0x2000114e
 8007fa8:	20001198 	.word	0x20001198
 8007fac:	20000bc6 	.word	0x20000bc6
 8007fb0:	20000ce8 	.word	0x20000ce8
 8007fb4:	20000c44 	.word	0x20000c44
 8007fb8:	20000ca0 	.word	0x20000ca0
 8007fbc:	20000bc2 	.word	0x20000bc2
 8007fc0:	20000c1e 	.word	0x20000c1e
 8007fc4:	200000e1 	.word	0x200000e1
 8007fc8:	20000c8c 	.word	0x20000c8c
 8007fcc:	20000c8e 	.word	0x20000c8e
 8007fd0:	20000c4c 	.word	0x20000c4c
 8007fd4:	20000bf8 	.word	0x20000bf8
 8007fd8:	20000c74 	.word	0x20000c74
 8007fdc:	20000ce0 	.word	0x20000ce0
 8007fe0:	20000c72 	.word	0x20000c72
		goto ask_btn2_f3;
 8007fe4:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8007fe6:	4b9e      	ldr	r3, [pc, #632]	@ (8008260 <detecta+0x918>)
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d114      	bne.n	8008018 <detecta+0x6d0>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8007fee:	4b9d      	ldr	r3, [pc, #628]	@ (8008264 <detecta+0x91c>)
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4053      	eors	r3, r2
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10f      	bne.n	800801c <detecta+0x6d4>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8007ffc:	4b9a      	ldr	r3, [pc, #616]	@ (8008268 <detecta+0x920>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d117      	bne.n	8008034 <detecta+0x6ec>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8008004:	4b99      	ldr	r3, [pc, #612]	@ (800826c <detecta+0x924>)
 8008006:	2201      	movs	r2, #1
 8008008:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 800800a:	4b99      	ldr	r3, [pc, #612]	@ (8008270 <detecta+0x928>)
 800800c:	2200      	movs	r2, #0
 800800e:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 8008010:	4b95      	ldr	r3, [pc, #596]	@ (8008268 <detecta+0x920>)
 8008012:	221e      	movs	r2, #30
 8008014:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8008016:	e79b      	b.n	8007f50 <detecta+0x608>
		goto noBtn2F3;
 8008018:	46c0      	nop			@ (mov r8, r8)
 800801a:	e000      	b.n	800801e <detecta+0x6d6>
		goto noBtn2F3;
 800801c:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 800801e:	4b92      	ldr	r3, [pc, #584]	@ (8008268 <detecta+0x920>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b1d      	cmp	r3, #29
 8008024:	d808      	bhi.n	8008038 <detecta+0x6f0>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8008026:	4b90      	ldr	r3, [pc, #576]	@ (8008268 <detecta+0x920>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	3301      	adds	r3, #1
 800802c:	b2da      	uxtb	r2, r3
 800802e:	4b8e      	ldr	r3, [pc, #568]	@ (8008268 <detecta+0x920>)
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	e002      	b.n	800803a <detecta+0x6f2>
		goto ask_btn1;
 8008034:	46c0      	nop			@ (mov r8, r8)
 8008036:	e000      	b.n	800803a <detecta+0x6f2>
		goto ask_btn1;
 8008038:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 800803a:	4b8a      	ldr	r3, [pc, #552]	@ (8008264 <detecta+0x91c>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2201      	movs	r2, #1
 8008040:	4053      	eors	r3, r2
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d12a      	bne.n	800809e <detecta+0x756>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8008048:	4b8a      	ldr	r3, [pc, #552]	@ (8008274 <detecta+0x92c>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <detecta+0x716>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8008050:	4b89      	ldr	r3, [pc, #548]	@ (8008278 <detecta+0x930>)
 8008052:	2201      	movs	r2, #1
 8008054:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8008056:	4b89      	ldr	r3, [pc, #548]	@ (800827c <detecta+0x934>)
 8008058:	2214      	movs	r2, #20
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	e000      	b.n	8008060 <detecta+0x718>
		goto ask_btn1_sec;
 800805e:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8008060:	4b7f      	ldr	r3, [pc, #508]	@ (8008260 <detecta+0x918>)
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2201      	movs	r2, #1
 8008066:	4053      	eors	r3, r2
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d107      	bne.n	800807e <detecta+0x736>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 800806e:	4b84      	ldr	r3, [pc, #528]	@ (8008280 <detecta+0x938>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b6e      	cmp	r3, #110	@ 0x6e
 8008074:	d822      	bhi.n	80080bc <detecta+0x774>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8008076:	4b80      	ldr	r3, [pc, #512]	@ (8008278 <detecta+0x930>)
 8008078:	2201      	movs	r2, #1
 800807a:	705a      	strb	r2, [r3, #1]
	goto findet;
 800807c:	e0a5      	b.n	80081ca <detecta+0x882>
		goto func_sec_norm_btn1;
 800807e:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8008080:	4b80      	ldr	r3, [pc, #512]	@ (8008284 <detecta+0x93c>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11b      	bne.n	80080c0 <detecta+0x778>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8008088:	4b7d      	ldr	r3, [pc, #500]	@ (8008280 <detecta+0x938>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d119      	bne.n	80080c4 <detecta+0x77c>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8008090:	4b79      	ldr	r3, [pc, #484]	@ (8008278 <detecta+0x930>)
 8008092:	2201      	movs	r2, #1
 8008094:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8008096:	4b7b      	ldr	r3, [pc, #492]	@ (8008284 <detecta+0x93c>)
 8008098:	2201      	movs	r2, #1
 800809a:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 800809c:	e095      	b.n	80081ca <detecta+0x882>
		goto no_btn1;
 800809e:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 80080a0:	4b78      	ldr	r3, [pc, #480]	@ (8008284 <detecta+0x93c>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 80080a6:	4b76      	ldr	r3, [pc, #472]	@ (8008280 <detecta+0x938>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b95      	cmp	r3, #149	@ 0x95
 80080ac:	d80c      	bhi.n	80080c8 <detecta+0x780>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 80080ae:	4b74      	ldr	r3, [pc, #464]	@ (8008280 <detecta+0x938>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	3303      	adds	r3, #3
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	4b72      	ldr	r3, [pc, #456]	@ (8008280 <detecta+0x938>)
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e006      	b.n	80080ca <detecta+0x782>
		goto ask_btn2;
 80080bc:	46c0      	nop			@ (mov r8, r8)
 80080be:	e004      	b.n	80080ca <detecta+0x782>
		goto ask_btn2;
 80080c0:	46c0      	nop			@ (mov r8, r8)
 80080c2:	e002      	b.n	80080ca <detecta+0x782>
		goto ask_btn2;
 80080c4:	46c0      	nop			@ (mov r8, r8)
 80080c6:	e000      	b.n	80080ca <detecta+0x782>
		goto ask_btn2;
 80080c8:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 80080ca:	4b66      	ldr	r3, [pc, #408]	@ (8008264 <detecta+0x91c>)
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2201      	movs	r2, #1
 80080d0:	4053      	eors	r3, r2
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11a      	bne.n	800810e <detecta+0x7c6>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 80080d8:	4b66      	ldr	r3, [pc, #408]	@ (8008274 <detecta+0x92c>)
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <detecta+0x7a6>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 80080e0:	4b65      	ldr	r3, [pc, #404]	@ (8008278 <detecta+0x930>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 80080e6:	4b65      	ldr	r3, [pc, #404]	@ (800827c <detecta+0x934>)
 80080e8:	2214      	movs	r2, #20
 80080ea:	701a      	strb	r2, [r3, #0]
 80080ec:	e000      	b.n	80080f0 <detecta+0x7a8>
		goto ask_btn2_sec;
 80080ee:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 80080f0:	4b64      	ldr	r3, [pc, #400]	@ (8008284 <detecta+0x93c>)
 80080f2:	789b      	ldrb	r3, [r3, #2]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d119      	bne.n	800812c <detecta+0x7e4>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 80080f8:	4b63      	ldr	r3, [pc, #396]	@ (8008288 <detecta+0x940>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d117      	bne.n	8008130 <detecta+0x7e8>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 8008100:	4b5d      	ldr	r3, [pc, #372]	@ (8008278 <detecta+0x930>)
 8008102:	2201      	movs	r2, #1
 8008104:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8008106:	4b5f      	ldr	r3, [pc, #380]	@ (8008284 <detecta+0x93c>)
 8008108:	2201      	movs	r2, #1
 800810a:	709a      	strb	r2, [r3, #2]
	goto findet;
 800810c:	e05d      	b.n	80081ca <detecta+0x882>
		goto no_btn2;
 800810e:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 8008110:	4b5c      	ldr	r3, [pc, #368]	@ (8008284 <detecta+0x93c>)
 8008112:	2200      	movs	r2, #0
 8008114:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8008116:	4b5c      	ldr	r3, [pc, #368]	@ (8008288 <detecta+0x940>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b95      	cmp	r3, #149	@ 0x95
 800811c:	d80a      	bhi.n	8008134 <detecta+0x7ec>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 800811e:	4b5a      	ldr	r3, [pc, #360]	@ (8008288 <detecta+0x940>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	3303      	adds	r3, #3
 8008124:	b2da      	uxtb	r2, r3
 8008126:	4b58      	ldr	r3, [pc, #352]	@ (8008288 <detecta+0x940>)
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	e004      	b.n	8008136 <detecta+0x7ee>
		goto ask_btn3;
 800812c:	46c0      	nop			@ (mov r8, r8)
 800812e:	e002      	b.n	8008136 <detecta+0x7ee>
		goto ask_btn3;
 8008130:	46c0      	nop			@ (mov r8, r8)
 8008132:	e000      	b.n	8008136 <detecta+0x7ee>
		goto ask_btn3;
 8008134:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8008136:	4b4b      	ldr	r3, [pc, #300]	@ (8008264 <detecta+0x91c>)
 8008138:	789b      	ldrb	r3, [r3, #2]
 800813a:	2201      	movs	r2, #1
 800813c:	4053      	eors	r3, r2
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d12a      	bne.n	800819a <detecta+0x852>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8008144:	4b4b      	ldr	r3, [pc, #300]	@ (8008274 <detecta+0x92c>)
 8008146:	789b      	ldrb	r3, [r3, #2]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <detecta+0x812>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 800814c:	4b4a      	ldr	r3, [pc, #296]	@ (8008278 <detecta+0x930>)
 800814e:	2201      	movs	r2, #1
 8008150:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8008152:	4b4a      	ldr	r3, [pc, #296]	@ (800827c <detecta+0x934>)
 8008154:	2214      	movs	r2, #20
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e000      	b.n	800815c <detecta+0x814>
		goto ask_btn3_sec;
 800815a:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 800815c:	4b40      	ldr	r3, [pc, #256]	@ (8008260 <detecta+0x918>)
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2201      	movs	r2, #1
 8008162:	4053      	eors	r3, r2
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d107      	bne.n	800817a <detecta+0x832>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 800816a:	4b48      	ldr	r3, [pc, #288]	@ (800828c <detecta+0x944>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b6e      	cmp	r3, #110	@ 0x6e
 8008170:	d824      	bhi.n	80081bc <detecta+0x874>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8008172:	4b41      	ldr	r3, [pc, #260]	@ (8008278 <detecta+0x930>)
 8008174:	2201      	movs	r2, #1
 8008176:	715a      	strb	r2, [r3, #5]
	goto findet;
 8008178:	e027      	b.n	80081ca <detecta+0x882>
		goto func_sec_norm_btn3;
 800817a:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 800817c:	4b41      	ldr	r3, [pc, #260]	@ (8008284 <detecta+0x93c>)
 800817e:	791b      	ldrb	r3, [r3, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11d      	bne.n	80081c0 <detecta+0x878>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8008184:	4b41      	ldr	r3, [pc, #260]	@ (800828c <detecta+0x944>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11b      	bne.n	80081c4 <detecta+0x87c>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 800818c:	4b3a      	ldr	r3, [pc, #232]	@ (8008278 <detecta+0x930>)
 800818e:	2201      	movs	r2, #1
 8008190:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8008192:	4b3c      	ldr	r3, [pc, #240]	@ (8008284 <detecta+0x93c>)
 8008194:	2201      	movs	r2, #1
 8008196:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8008198:	e017      	b.n	80081ca <detecta+0x882>
		goto no_btn3;
 800819a:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 800819c:	4b39      	ldr	r3, [pc, #228]	@ (8008284 <detecta+0x93c>)
 800819e:	2200      	movs	r2, #0
 80081a0:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 80081a2:	4b3a      	ldr	r3, [pc, #232]	@ (800828c <detecta+0x944>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b95      	cmp	r3, #149	@ 0x95
 80081a8:	d80e      	bhi.n	80081c8 <detecta+0x880>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 80081aa:	4b38      	ldr	r3, [pc, #224]	@ (800828c <detecta+0x944>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	3303      	adds	r3, #3
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4b36      	ldr	r3, [pc, #216]	@ (800828c <detecta+0x944>)
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	e008      	b.n	80081ca <detecta+0x882>
	goto findet;
 80081b8:	46c0      	nop			@ (mov r8, r8)
 80081ba:	e006      	b.n	80081ca <detecta+0x882>
		goto ask_btn4;
 80081bc:	46c0      	nop			@ (mov r8, r8)
 80081be:	e004      	b.n	80081ca <detecta+0x882>
		goto ask_btn4;
 80081c0:	46c0      	nop			@ (mov r8, r8)
 80081c2:	e002      	b.n	80081ca <detecta+0x882>
		goto ask_btn4;
 80081c4:	46c0      	nop			@ (mov r8, r8)
 80081c6:	e000      	b.n	80081ca <detecta+0x882>
		goto ask_btn4;
 80081c8:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 80081ca:	1c7b      	adds	r3, r7, #1
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e00c      	b.n	80081ec <detecta+0x8a4>
		Botones_COPY[k] = Botones_T[k];
 80081d2:	1c7b      	adds	r3, r7, #1
 80081d4:	781a      	ldrb	r2, [r3, #0]
 80081d6:	1c7b      	adds	r3, r7, #1
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	4922      	ldr	r1, [pc, #136]	@ (8008264 <detecta+0x91c>)
 80081dc:	5c89      	ldrb	r1, [r1, r2]
 80081de:	4a25      	ldr	r2, [pc, #148]	@ (8008274 <detecta+0x92c>)
 80081e0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 80081e2:	1c7b      	adds	r3, r7, #1
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	1c7b      	adds	r3, r7, #1
 80081e8:	3201      	adds	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	1c7b      	adds	r3, r7, #1
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b07      	cmp	r3, #7
 80081f2:	d9ee      	bls.n	80081d2 <detecta+0x88a>
	if(!flagsb[f_prog]){
 80081f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008260 <detecta+0x918>)
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2201      	movs	r2, #1
 80081fa:	4053      	eors	r3, r2
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d11a      	bne.n	8008238 <detecta+0x8f0>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 8008202:	003b      	movs	r3, r7
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	e011      	b.n	800822e <detecta+0x8e6>
		btn_pr[k] = botonst[k];
 800820a:	003b      	movs	r3, r7
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	003b      	movs	r3, r7
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	4919      	ldr	r1, [pc, #100]	@ (8008278 <detecta+0x930>)
 8008214:	5c89      	ldrb	r1, [r1, r2]
 8008216:	4a1e      	ldr	r2, [pc, #120]	@ (8008290 <detecta+0x948>)
 8008218:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 800821a:	003b      	movs	r3, r7
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	4a16      	ldr	r2, [pc, #88]	@ (8008278 <detecta+0x930>)
 8008220:	2100      	movs	r1, #0
 8008222:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8008224:	003b      	movs	r3, r7
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	003b      	movs	r3, r7
 800822a:	3201      	adds	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	003b      	movs	r3, r7
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b07      	cmp	r3, #7
 8008234:	d9e9      	bls.n	800820a <detecta+0x8c2>
	}

det_j18:
 8008236:	e000      	b.n	800823a <detecta+0x8f2>
		goto det_j18;
 8008238:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 800823a:	4b16      	ldr	r3, [pc, #88]	@ (8008294 <detecta+0x94c>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	4053      	eors	r3, r2
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <detecta+0x90e>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8008248:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <detecta+0x930>)
 800824a:	2200      	movs	r2, #0
 800824c:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 800824e:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <detecta+0x930>)
 8008250:	2200      	movs	r2, #0
 8008252:	711a      	strb	r2, [r3, #4]

det_j19:

}
 8008254:	e000      	b.n	8008258 <detecta+0x910>
		goto det_j19;
 8008256:	46c0      	nop			@ (mov r8, r8)
}
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	b003      	add	sp, #12
 800825e:	bd90      	pop	{r4, r7, pc}
 8008260:	20000c44 	.word	0x20000c44
 8008264:	20000ce0 	.word	0x20000ce0
 8008268:	2000118c 	.word	0x2000118c
 800826c:	20000c74 	.word	0x20000c74
 8008270:	20000c98 	.word	0x20000c98
 8008274:	20000c64 	.word	0x20000c64
 8008278:	20000bf8 	.word	0x20000bf8
 800827c:	20001185 	.word	0x20001185
 8008280:	20000c6c 	.word	0x20000c6c
 8008284:	20000c2c 	.word	0x20000c2c
 8008288:	20000c6d 	.word	0x20000c6d
 800828c:	20000c6e 	.word	0x20000c6e
 8008290:	20000c4c 	.word	0x20000c4c
 8008294:	20001190 	.word	0x20001190

08008298 <display>:





void display (void){
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
	uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 800829e:	1dbb      	adds	r3, r7, #6
 80082a0:	4abb      	ldr	r2, [pc, #748]	@ (8008590 <display+0x2f8>)
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 80082a6:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 80082a8:	4bba      	ldr	r3, [pc, #744]	@ (8008594 <display+0x2fc>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d100      	bne.n	80082b2 <display+0x1a>
 80082b0:	e092      	b.n	80083d8 <display+0x140>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 80082b2:	4bb9      	ldr	r3, [pc, #740]	@ (8008598 <display+0x300>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d114      	bne.n	80082e4 <display+0x4c>
	//	goto display_00;
	//}

	//btjf    flagsTxControl,#f_statBLE,display_00   ;¿Esta conectado un dispositivo BLE?
	//btjf		flagsTX2,#2,display_00; Se ha respondido el token BLE alguna vez ?
	if((!flagsTxControl[f_statBLE]) || (!flagsTX2[2]))
 80082ba:	4bb8      	ldr	r3, [pc, #736]	@ (800859c <display+0x304>)
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2201      	movs	r2, #1
 80082c0:	4053      	eors	r3, r2
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10f      	bne.n	80082e8 <display+0x50>
 80082c8:	4bb5      	ldr	r3, [pc, #724]	@ (80085a0 <display+0x308>)
 80082ca:	789b      	ldrb	r3, [r3, #2]
 80082cc:	2201      	movs	r2, #1
 80082ce:	4053      	eors	r3, r2
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d108      	bne.n	80082e8 <display+0x50>
		goto display_00;


	op_menu (0x0B, 0x11);
 80082d6:	2111      	movs	r1, #17
 80082d8:	200b      	movs	r0, #11
 80082da:	f7ff f98f 	bl	80075fc <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 80082de:	f7ff f9a7 	bl	8007630 <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 80082e2:	e01e      	b.n	8008322 <display+0x8a>
		goto display_00;
 80082e4:	46c0      	nop			@ (mov r8, r8)
 80082e6:	e000      	b.n	80082ea <display+0x52>
		goto display_00;
 80082e8:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(estado1_Aux, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 80082ea:	1dbb      	adds	r3, r7, #6
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2201      	movs	r2, #1
 80082f0:	4013      	ands	r3, r2
 80082f2:	d106      	bne.n	8008302 <display+0x6a>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 80082f4:	2110      	movs	r1, #16
 80082f6:	2011      	movs	r0, #17
 80082f8:	f7ff f980 	bl	80075fc <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 80082fc:	f7ff f998 	bl	8007630 <datled_clear>
 8008300:	e000      	b.n	8008304 <display+0x6c>
		goto display_00b;
 8008302:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 8008304:	4ba7      	ldr	r3, [pc, #668]	@ (80085a4 <display+0x30c>)
 8008306:	78db      	ldrb	r3, [r3, #3]
 8008308:	2201      	movs	r2, #1
 800830a:	4053      	eors	r3, r2
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d106      	bne.n	8008320 <display+0x88>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 8008312:	211d      	movs	r1, #29
 8008314:	201f      	movs	r0, #31
 8008316:	f7ff f971 	bl	80075fc <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 800831a:	f7ff f989 	bl	8007630 <datled_clear>
 800831e:	e000      	b.n	8008322 <display+0x8a>
		goto display_01;
 8008320:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 8008322:	4ba1      	ldr	r3, [pc, #644]	@ (80085a8 <display+0x310>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d058      	beq.n	80083dc <display+0x144>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 800832a:	4b9f      	ldr	r3, [pc, #636]	@ (80085a8 <display+0x310>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008330:	d900      	bls.n	8008334 <display+0x9c>
 8008332:	e09e      	b.n	8008472 <display+0x1da>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 8008334:	4b9c      	ldr	r3, [pc, #624]	@ (80085a8 <display+0x310>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b31      	cmp	r3, #49	@ 0x31
 800833a:	d800      	bhi.n	800833e <display+0xa6>
 800833c:	e09b      	b.n	8008476 <display+0x1de>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 800833e:	f7ff f977 	bl	8007630 <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 8008342:	4b9a      	ldr	r3, [pc, #616]	@ (80085ac <display+0x314>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d10f      	bne.n	800836a <display+0xd2>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 800834a:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 800834c:	2110      	movs	r1, #16
 800834e:	2011      	movs	r0, #17
 8008350:	f7ff f954 	bl	80075fc <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(estado1_Aux, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 8008354:	1dbb      	adds	r3, r7, #6
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2201      	movs	r2, #1
 800835a:	4013      	ands	r3, r2
 800835c:	d003      	beq.n	8008366 <display+0xce>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 800835e:	4b94      	ldr	r3, [pc, #592]	@ (80085b0 <display+0x318>)
 8008360:	2201      	movs	r2, #1
 8008362:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8008364:	e0a0      	b.n	80084a8 <display+0x210>
		goto msg1_01;
 8008366:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 8008368:	e09e      	b.n	80084a8 <display+0x210>
		goto askMsg2; //jrne		askMsg2
 800836a:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 800836c:	4b8f      	ldr	r3, [pc, #572]	@ (80085ac <display+0x314>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d10f      	bne.n	8008394 <display+0xfc>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8008374:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 8008376:	2101      	movs	r1, #1
 8008378:	2011      	movs	r0, #17
 800837a:	f7ff f93f 	bl	80075fc <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(estado1_Aux, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 800837e:	1dbb      	adds	r3, r7, #6
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2204      	movs	r2, #4
 8008384:	4013      	ands	r3, r2
 8008386:	d003      	beq.n	8008390 <display+0xf8>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 8008388:	4b8a      	ldr	r3, [pc, #552]	@ (80085b4 <display+0x31c>)
 800838a:	2202      	movs	r2, #2
 800838c:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 800838e:	e08b      	b.n	80084a8 <display+0x210>
		goto	msg2_01;
 8008390:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8008392:	e089      	b.n	80084a8 <display+0x210>
		goto askMsg3; //jrne		askMsg3
 8008394:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 8008396:	4b85      	ldr	r3, [pc, #532]	@ (80085ac <display+0x314>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b03      	cmp	r3, #3
 800839c:	d10f      	bne.n	80083be <display+0x126>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 800839e:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 80083a0:	2100      	movs	r1, #0
 80083a2:	2011      	movs	r0, #17
 80083a4:	f7ff f92a 	bl	80075fc <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(estado1_Aux, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 80083a8:	1dbb      	adds	r3, r7, #6
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2240      	movs	r2, #64	@ 0x40
 80083ae:	4013      	ands	r3, r2
 80083b0:	d103      	bne.n	80083ba <display+0x122>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 80083b2:	4b7f      	ldr	r3, [pc, #508]	@ (80085b0 <display+0x318>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 80083b8:	e076      	b.n	80084a8 <display+0x210>
		goto msg3_01;
 80083ba:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 80083bc:	e074      	b.n	80084a8 <display+0x210>
		goto askMsg4;  //jrne askMsg4
 80083be:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 80083c0:	4b7a      	ldr	r3, [pc, #488]	@ (80085ac <display+0x314>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d105      	bne.n	80083d4 <display+0x13c>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 80083c8:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 80083ca:	211d      	movs	r1, #29
 80083cc:	201f      	movs	r0, #31
 80083ce:	f7ff f915 	bl	80075fc <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 80083d2:	e069      	b.n	80084a8 <display+0x210>
		goto askMsg5;  //jrne		askMsg5
 80083d4:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 80083d6:	e067      	b.n	80084a8 <display+0x210>
		goto display_02;
 80083d8:	46c0      	nop			@ (mov r8, r8)
 80083da:	e000      	b.n	80083de <display+0x146>
		goto display_02;//jreq		display_02;
 80083dc:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 80083de:	f7fd fb09 	bl	80059f4 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 80083e2:	4b6c      	ldr	r3, [pc, #432]	@ (8008594 <display+0x2fc>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d018      	beq.n	800841c <display+0x184>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 80083ea:	4b73      	ldr	r3, [pc, #460]	@ (80085b8 <display+0x320>)
 80083ec:	79db      	ldrb	r3, [r3, #7]
 80083ee:	2201      	movs	r2, #1
 80083f0:	4053      	eors	r3, r2
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d113      	bne.n	8008420 <display+0x188>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 80083f8:	210a      	movs	r1, #10
 80083fa:	200a      	movs	r0, #10
 80083fc:	f7ff f8fe 	bl	80075fc <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 8008400:	4b6e      	ldr	r3, [pc, #440]	@ (80085bc <display+0x324>)
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	001a      	movs	r2, r3
 8008408:	2340      	movs	r3, #64	@ 0x40
 800840a:	4013      	ands	r3, r2
 800840c:	d104      	bne.n	8008418 <display+0x180>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 800840e:	211f      	movs	r1, #31
 8008410:	201f      	movs	r0, #31
 8008412:	f7ff f8f3 	bl	80075fc <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 8008416:	e047      	b.n	80084a8 <display+0x210>
    	goto blk_aa;
 8008418:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 800841a:	e045      	b.n	80084a8 <display+0x210>
    	goto display_norm3; //jreq		display_norm3;
 800841c:	46c0      	nop			@ (mov r8, r8)
 800841e:	e000      	b.n	8008422 <display+0x18a>
    	goto display_norm3;
 8008420:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 8008422:	4b60      	ldr	r3, [pc, #384]	@ (80085a4 <display+0x30c>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2201      	movs	r2, #1
 8008428:	4053      	eors	r3, r2
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d02c      	beq.n	800848a <display+0x1f2>
    	  goto display_j00;
 8008430:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 8008432:	4b63      	ldr	r3, [pc, #396]	@ (80085c0 <display+0x328>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d019      	beq.n	800846e <display+0x1d6>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 800843a:	4b61      	ldr	r3, [pc, #388]	@ (80085c0 <display+0x328>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008440:	d81b      	bhi.n	800847a <display+0x1e2>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 8008442:	4b5f      	ldr	r3, [pc, #380]	@ (80085c0 <display+0x328>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b95      	cmp	r3, #149	@ 0x95
 8008448:	d902      	bls.n	8008450 <display+0x1b8>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 800844a:	f7fe f8b1 	bl	80065b0 <sp_dpy>
      	  goto dpy07;
 800844e:	e02b      	b.n	80084a8 <display+0x210>
    	  goto dpydif;//jrult dpydif
 8008450:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 8008452:	4b5b      	ldr	r3, [pc, #364]	@ (80085c0 <display+0x328>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b63      	cmp	r3, #99	@ 0x63
 8008458:	d811      	bhi.n	800847e <display+0x1e6>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 800845a:	4b59      	ldr	r3, [pc, #356]	@ (80085c0 <display+0x328>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b31      	cmp	r3, #49	@ 0x31
 8008460:	d90f      	bls.n	8008482 <display+0x1ea>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 8008462:	f7fe f8b1 	bl	80065c8 <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 8008466:	4b52      	ldr	r3, [pc, #328]	@ (80085b0 <display+0x318>)
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 800846c:	e01c      	b.n	80084a8 <display+0x210>
    	  goto dpy02;//jreq		dpy02;
 800846e:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 8008470:	e00c      	b.n	800848c <display+0x1f4>
		goto dpy03; //************** ?
 8008472:	46c0      	nop			@ (mov r8, r8)
 8008474:	e006      	b.n	8008484 <display+0x1ec>
		goto dpy03;
 8008476:	46c0      	nop			@ (mov r8, r8)
 8008478:	e004      	b.n	8008484 <display+0x1ec>
    	  goto dpy03;//jruge		dpy03;
 800847a:	46c0      	nop			@ (mov r8, r8)
 800847c:	e002      	b.n	8008484 <display+0x1ec>
    	 goto dpy03;//jruge		dpy03;
 800847e:	46c0      	nop			@ (mov r8, r8)
 8008480:	e000      	b.n	8008484 <display+0x1ec>
    	 goto dpy03;//jrult		dpy03;
 8008482:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8008484:	f7fe fc20 	bl	8006cc8 <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 8008488:	e00e      	b.n	80084a8 <display+0x210>
      goto dpy06;//jra dpy06;
 800848a:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 800848c:	4b4a      	ldr	r3, [pc, #296]	@ (80085b8 <display+0x320>)
 800848e:	78db      	ldrb	r3, [r3, #3]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <display+0x20a>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8008494:	4b4b      	ldr	r3, [pc, #300]	@ (80085c4 <display+0x32c>)
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <display+0x20e>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 800849c:	f7fe fab4 	bl	8006a08 <fallas>
 80084a0:	e002      	b.n	80084a8 <display+0x210>
	   goto dpy07;
 80084a2:	46c0      	nop			@ (mov r8, r8)
 80084a4:	e000      	b.n	80084a8 <display+0x210>
	   goto dpy07;
 80084a6:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 80084a8:	4b47      	ldr	r3, [pc, #284]	@ (80085c8 <display+0x330>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	001a      	movs	r2, r3
 80084ae:	4b47      	ldr	r3, [pc, #284]	@ (80085cc <display+0x334>)
 80084b0:	5c9a      	ldrb	r2, [r3, r2]
 80084b2:	4b47      	ldr	r3, [pc, #284]	@ (80085d0 <display+0x338>)
 80084b4:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 80084b6:	4b3f      	ldr	r3, [pc, #252]	@ (80085b4 <display+0x31c>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	001a      	movs	r2, r3
 80084bc:	4b43      	ldr	r3, [pc, #268]	@ (80085cc <display+0x334>)
 80084be:	5c9a      	ldrb	r2, [r3, r2]
 80084c0:	4b44      	ldr	r3, [pc, #272]	@ (80085d4 <display+0x33c>)
 80084c2:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 80084c4:	230f      	movs	r3, #15
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
 80084cc:	e011      	b.n	80084f2 <display+0x25a>
			if(trefst[k] ){ //tnz  trefst ***************??
 80084ce:	210f      	movs	r1, #15
 80084d0:	187b      	adds	r3, r7, r1
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	4a40      	ldr	r2, [pc, #256]	@ (80085d8 <display+0x340>)
 80084d6:	5cd3      	ldrb	r3, [r2, r3]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d113      	bne.n	8008504 <display+0x26c>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	4a3e      	ldr	r2, [pc, #248]	@ (80085dc <display+0x344>)
 80084e2:	5cd3      	ldrb	r3, [r2, r3]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10f      	bne.n	8008508 <display+0x270>
		for(uint8_t k=0; k<8; k++){
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	187b      	adds	r3, r7, r1
 80084ee:	3201      	adds	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	230f      	movs	r3, #15
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b07      	cmp	r3, #7
 80084fa:	d9e8      	bls.n	80084ce <display+0x236>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 80084fc:	4b38      	ldr	r3, [pc, #224]	@ (80085e0 <display+0x348>)
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 8008502:	e00d      	b.n	8008520 <display+0x288>
				goto ask_snooze; //jrne	ask_snooze
 8008504:	46c0      	nop			@ (mov r8, r8)
 8008506:	e000      	b.n	800850a <display+0x272>
				goto ask_snooze;  //jrne	ask_snooze
 8008508:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 800850a:	4b36      	ldr	r3, [pc, #216]	@ (80085e4 <display+0x34c>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2201      	movs	r2, #1
 8008510:	4053      	eors	r3, r2
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <display+0x286>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 8008518:	f7fe feda 	bl	80072d0 <ld_alarmDelay>
 800851c:	e000      	b.n	8008520 <display+0x288>
			goto noLoadSnooze;
 800851e:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 8008520:	4b2f      	ldr	r3, [pc, #188]	@ (80085e0 <display+0x348>)
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <display+0x298>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 8008528:	4b2f      	ldr	r3, [pc, #188]	@ (80085e8 <display+0x350>)
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e000      	b.n	8008532 <display+0x29a>
			goto no_snooze;//jreq no_snooze
 8008530:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 8008532:	4b2e      	ldr	r3, [pc, #184]	@ (80085ec <display+0x354>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00e      	beq.n	8008558 <display+0x2c0>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 800853a:	4b2b      	ldr	r3, [pc, #172]	@ (80085e8 <display+0x350>)
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d108      	bne.n	8008554 <display+0x2bc>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 8008542:	4b2b      	ldr	r3, [pc, #172]	@ (80085f0 <display+0x358>)
 8008544:	2104      	movs	r1, #4
 8008546:	0018      	movs	r0, r3
 8008548:	f010 ff88 	bl	801945c <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 800854c:	4b26      	ldr	r3, [pc, #152]	@ (80085e8 <display+0x350>)
 800854e:	2201      	movs	r2, #1
 8008550:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 8008552:	e185      	b.n	8008860 <display+0x5c8>
			goto jp_termina_buzzer;
 8008554:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 8008556:	e183      	b.n	8008860 <display+0x5c8>
			goto noBtnBuzz; //jreq noBtnBuzz
 8008558:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 800855a:	4b23      	ldr	r3, [pc, #140]	@ (80085e8 <display+0x350>)
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2201      	movs	r2, #1
 8008560:	4053      	eors	r3, r2
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d14f      	bne.n	8008608 <display+0x370>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 8008568:	4b22      	ldr	r3, [pc, #136]	@ (80085f4 <display+0x35c>)
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800856e:	4b22      	ldr	r3, [pc, #136]	@ (80085f8 <display+0x360>)
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008574:	4b1e      	ldr	r3, [pc, #120]	@ (80085f0 <display+0x358>)
 8008576:	2104      	movs	r1, #4
 8008578:	0018      	movs	r0, r3
 800857a:	f011 f851 	bl	8019620 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 800857e:	4b1f      	ldr	r3, [pc, #124]	@ (80085fc <display+0x364>)
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	4a1f      	ldr	r2, [pc, #124]	@ (8008600 <display+0x368>)
 8008584:	4694      	mov	ip, r2
 8008586:	4463      	add	r3, ip
 8008588:	b29a      	uxth	r2, r3
 800858a:	4b1e      	ldr	r3, [pc, #120]	@ (8008604 <display+0x36c>)
 800858c:	801a      	strh	r2, [r3, #0]
 800858e:	e03c      	b.n	800860a <display+0x372>
 8008590:	200001ba 	.word	0x200001ba
 8008594:	20000bf4 	.word	0x20000bf4
 8008598:	20001190 	.word	0x20001190
 800859c:	200011d4 	.word	0x200011d4
 80085a0:	2000102c 	.word	0x2000102c
 80085a4:	20000bd4 	.word	0x20000bd4
 80085a8:	2000114c 	.word	0x2000114c
 80085ac:	2000114d 	.word	0x2000114d
 80085b0:	20000bec 	.word	0x20000bec
 80085b4:	20000bae 	.word	0x20000bae
 80085b8:	20000c34 	.word	0x20000c34
 80085bc:	20000bac 	.word	0x20000bac
 80085c0:	20000c1e 	.word	0x20000c1e
 80085c4:	20000c44 	.word	0x20000c44
 80085c8:	20000baf 	.word	0x20000baf
 80085cc:	2000000c 	.word	0x2000000c
 80085d0:	20000cd5 	.word	0x20000cd5
 80085d4:	20000cd6 	.word	0x20000cd6
 80085d8:	20000be4 	.word	0x20000be4
 80085dc:	20000bdc 	.word	0x20000bdc
 80085e0:	20001088 	.word	0x20001088
 80085e4:	20000bf8 	.word	0x20000bf8
 80085e8:	20001080 	.word	0x20001080
 80085ec:	20001185 	.word	0x20001185
 80085f0:	200005f0 	.word	0x200005f0
 80085f4:	20001078 	.word	0x20001078
 80085f8:	20001070 	.word	0x20001070
 80085fc:	2000106c 	.word	0x2000106c
 8008600:	00001388 	.word	0x00001388
 8008604:	2000106e 	.word	0x2000106e
			goto noBtnBuzz_01;
 8008608:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 800860a:	4bd0      	ldr	r3, [pc, #832]	@ (800894c <display+0x6b4>)
 800860c:	2200      	movs	r2, #0
 800860e:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 8008610:	4bce      	ldr	r3, [pc, #824]	@ (800894c <display+0x6b4>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d111      	bne.n	800863c <display+0x3a4>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 8008618:	4bcd      	ldr	r3, [pc, #820]	@ (8008950 <display+0x6b8>)
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800861e:	4bcd      	ldr	r3, [pc, #820]	@ (8008954 <display+0x6bc>)
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008624:	4bcc      	ldr	r3, [pc, #816]	@ (8008958 <display+0x6c0>)
 8008626:	2104      	movs	r1, #4
 8008628:	0018      	movs	r0, r3
 800862a:	f010 fff9 	bl	8019620 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 800862e:	4bcb      	ldr	r3, [pc, #812]	@ (800895c <display+0x6c4>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	3364      	adds	r3, #100	@ 0x64
 8008634:	b29a      	uxth	r2, r3
 8008636:	4bca      	ldr	r3, [pc, #808]	@ (8008960 <display+0x6c8>)
 8008638:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 800863a:	e111      	b.n	8008860 <display+0x5c8>
			goto buzzer_0;
 800863c:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 800863e:	4bc5      	ldr	r3, [pc, #788]	@ (8008954 <display+0x6bc>)
 8008640:	2201      	movs	r2, #1
 8008642:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 8008644:	4bc7      	ldr	r3, [pc, #796]	@ (8008964 <display+0x6cc>)
 8008646:	79db      	ldrb	r3, [r3, #7]
 8008648:	2201      	movs	r2, #1
 800864a:	4053      	eors	r3, r2
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <display+0x3c2>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008652:	4bc0      	ldr	r3, [pc, #768]	@ (8008954 <display+0x6bc>)
 8008654:	2202      	movs	r2, #2
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	e000      	b.n	800865c <display+0x3c4>
			goto buzzer_activado_04;
 800865a:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 800865c:	4bc1      	ldr	r3, [pc, #772]	@ (8008964 <display+0x6cc>)
 800865e:	799b      	ldrb	r3, [r3, #6]
 8008660:	2201      	movs	r2, #1
 8008662:	4053      	eors	r3, r2
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d103      	bne.n	8008672 <display+0x3da>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800866a:	4bba      	ldr	r3, [pc, #744]	@ (8008954 <display+0x6bc>)
 800866c:	2202      	movs	r2, #2
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	e000      	b.n	8008674 <display+0x3dc>
			goto buzzer_activado_05;
 8008672:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8008674:	4bbc      	ldr	r3, [pc, #752]	@ (8008968 <display+0x6d0>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2201      	movs	r2, #1
 800867a:	4053      	eors	r3, r2
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <display+0x3f2>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008682:	4bb4      	ldr	r3, [pc, #720]	@ (8008954 <display+0x6bc>)
 8008684:	2202      	movs	r2, #2
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e000      	b.n	800868c <display+0x3f4>
			goto buzzer_activado_08;
 800868a:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 800868c:	4bb7      	ldr	r3, [pc, #732]	@ (800896c <display+0x6d4>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2201      	movs	r2, #1
 8008692:	4053      	eors	r3, r2
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <display+0x40a>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800869a:	4bae      	ldr	r3, [pc, #696]	@ (8008954 <display+0x6bc>)
 800869c:	2202      	movs	r2, #2
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e000      	b.n	80086a4 <display+0x40c>
			goto buzzer_activado_01;
 80086a2:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 80086a4:	4bb1      	ldr	r3, [pc, #708]	@ (800896c <display+0x6d4>)
 80086a6:	785b      	ldrb	r3, [r3, #1]
 80086a8:	2201      	movs	r2, #1
 80086aa:	4053      	eors	r3, r2
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d103      	bne.n	80086ba <display+0x422>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 80086b2:	4ba8      	ldr	r3, [pc, #672]	@ (8008954 <display+0x6bc>)
 80086b4:	2203      	movs	r2, #3
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e000      	b.n	80086bc <display+0x424>
			goto buzzer_activado_02;
 80086ba:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 80086bc:	4bab      	ldr	r3, [pc, #684]	@ (800896c <display+0x6d4>)
 80086be:	789b      	ldrb	r3, [r3, #2]
 80086c0:	2201      	movs	r2, #1
 80086c2:	4053      	eors	r3, r2
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <display+0x43a>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80086ca:	4ba2      	ldr	r3, [pc, #648]	@ (8008954 <display+0x6bc>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	e000      	b.n	80086d4 <display+0x43c>
			goto buzzer_activado_03;
 80086d2:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 80086d4:	4ba4      	ldr	r3, [pc, #656]	@ (8008968 <display+0x6d0>)
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	2201      	movs	r2, #1
 80086da:	4053      	eors	r3, r2
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d103      	bne.n	80086ea <display+0x452>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80086e2:	4b9c      	ldr	r3, [pc, #624]	@ (8008954 <display+0x6bc>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e000      	b.n	80086ec <display+0x454>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 80086ea:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 80086ec:	230e      	movs	r3, #14
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80086f4:	230d      	movs	r3, #13
 80086f6:	18fb      	adds	r3, r7, r3
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e015      	b.n	800872a <display+0x492>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 80086fe:	200d      	movs	r0, #13
 8008700:	183b      	adds	r3, r7, r0
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	4a97      	ldr	r2, [pc, #604]	@ (8008964 <display+0x6cc>)
 8008706:	5cd3      	ldrb	r3, [r2, r3]
 8008708:	001a      	movs	r2, r3
 800870a:	183b      	adds	r3, r7, r0
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	409a      	lsls	r2, r3
 8008710:	0013      	movs	r3, r2
 8008712:	b2d9      	uxtb	r1, r3
 8008714:	220e      	movs	r2, #14
 8008716:	18bb      	adds	r3, r7, r2
 8008718:	18ba      	adds	r2, r7, r2
 800871a:	7812      	ldrb	r2, [r2, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8008720:	183b      	adds	r3, r7, r0
 8008722:	781a      	ldrb	r2, [r3, #0]
 8008724:	183b      	adds	r3, r7, r0
 8008726:	3201      	adds	r2, #1
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	230d      	movs	r3, #13
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b07      	cmp	r3, #7
 8008732:	d9e4      	bls.n	80086fe <display+0x466>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 8008734:	230e      	movs	r3, #14
 8008736:	18fb      	adds	r3, r7, r3
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	223f      	movs	r2, #63	@ 0x3f
 800873c:	4013      	ands	r3, r2
 800873e:	d003      	beq.n	8008748 <display+0x4b0>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008740:	4b84      	ldr	r3, [pc, #528]	@ (8008954 <display+0x6bc>)
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
 8008746:	e000      	b.n	800874a <display+0x4b2>
			goto buzzer_activado_06;
 8008748:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 800874a:	230e      	movs	r3, #14
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]
 8008756:	e013      	b.n	8008780 <display+0x4e8>
			trefst_aux_ |= trefst2[k]<<k;
 8008758:	4a85      	ldr	r2, [pc, #532]	@ (8008970 <display+0x6d8>)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	18d3      	adds	r3, r2, r3
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	001a      	movs	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	409a      	lsls	r2, r3
 8008766:	0013      	movs	r3, r2
 8008768:	b25a      	sxtb	r2, r3
 800876a:	210e      	movs	r1, #14
 800876c:	187b      	adds	r3, r7, r1
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	b25b      	sxtb	r3, r3
 8008772:	4313      	orrs	r3, r2
 8008774:	b25a      	sxtb	r2, r3
 8008776:	187b      	adds	r3, r7, r1
 8008778:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3301      	adds	r3, #1
 800877e:	60bb      	str	r3, [r7, #8]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b07      	cmp	r3, #7
 8008784:	dde8      	ble.n	8008758 <display+0x4c0>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 8008786:	230e      	movs	r3, #14
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <display+0x500>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008790:	4b70      	ldr	r3, [pc, #448]	@ (8008954 <display+0x6bc>)
 8008792:	2201      	movs	r2, #1
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e000      	b.n	800879a <display+0x502>
			goto buzzer_activado_07;
 8008798:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 800879a:	4b6e      	ldr	r3, [pc, #440]	@ (8008954 <display+0x6bc>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d85b      	bhi.n	800885a <display+0x5c2>
 80087a2:	009a      	lsls	r2, r3, #2
 80087a4:	4b73      	ldr	r3, [pc, #460]	@ (8008974 <display+0x6dc>)
 80087a6:	18d3      	adds	r3, r2, r3
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 80087ac:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 80087ae:	4b6b      	ldr	r3, [pc, #428]	@ (800895c <display+0x6c4>)
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	3364      	adds	r3, #100	@ 0x64
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008960 <display+0x6c8>)
 80087b8:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 80087ba:	e051      	b.n	8008860 <display+0x5c8>
			case 1: goto buzzer_etapa_1;
 80087bc:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 80087be:	4b6e      	ldr	r3, [pc, #440]	@ (8008978 <display+0x6e0>)
 80087c0:	22fa      	movs	r2, #250	@ 0xfa
 80087c2:	0052      	lsls	r2, r2, #1
 80087c4:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 80087c6:	4b6d      	ldr	r3, [pc, #436]	@ (800897c <display+0x6e4>)
 80087c8:	22fa      	movs	r2, #250	@ 0xfa
 80087ca:	0052      	lsls	r2, r2, #1
 80087cc:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80087ce:	e012      	b.n	80087f6 <display+0x55e>
			case 2: goto buzzer_etapa_2;
 80087d0:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80087d2:	4b69      	ldr	r3, [pc, #420]	@ (8008978 <display+0x6e0>)
 80087d4:	22fa      	movs	r2, #250	@ 0xfa
 80087d6:	0052      	lsls	r2, r2, #1
 80087d8:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 80087da:	4b68      	ldr	r3, [pc, #416]	@ (800897c <display+0x6e4>)
 80087dc:	4a68      	ldr	r2, [pc, #416]	@ (8008980 <display+0x6e8>)
 80087de:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80087e0:	e009      	b.n	80087f6 <display+0x55e>
			case 3: goto buzzer_etapa_3;
 80087e2:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80087e4:	4b64      	ldr	r3, [pc, #400]	@ (8008978 <display+0x6e0>)
 80087e6:	22fa      	movs	r2, #250	@ 0xfa
 80087e8:	0052      	lsls	r2, r2, #1
 80087ea:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 80087ec:	4b63      	ldr	r3, [pc, #396]	@ (800897c <display+0x6e4>)
 80087ee:	4a65      	ldr	r2, [pc, #404]	@ (8008984 <display+0x6ec>)
 80087f0:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80087f2:	e000      	b.n	80087f6 <display+0x55e>
			case 4: goto buzzer_etapa_4;
 80087f4:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 80087f6:	4b59      	ldr	r3, [pc, #356]	@ (800895c <display+0x6c4>)
 80087f8:	881a      	ldrh	r2, [r3, #0]
 80087fa:	4b59      	ldr	r3, [pc, #356]	@ (8008960 <display+0x6c8>)
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d12d      	bne.n	800885e <display+0x5c6>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 8008802:	4b53      	ldr	r3, [pc, #332]	@ (8008950 <display+0x6b8>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2201      	movs	r2, #1
 8008808:	4053      	eors	r3, r2
 800880a:	b2db      	uxtb	r3, r3
 800880c:	1e5a      	subs	r2, r3, #1
 800880e:	4193      	sbcs	r3, r2
 8008810:	b2da      	uxtb	r2, r3
 8008812:	4b4f      	ldr	r3, [pc, #316]	@ (8008950 <display+0x6b8>)
 8008814:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 8008816:	4b4e      	ldr	r3, [pc, #312]	@ (8008950 <display+0x6b8>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10e      	bne.n	800883c <display+0x5a4>
			goto buzzer_on;
		}
buzzer_off:
 800881e:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008820:	4b4d      	ldr	r3, [pc, #308]	@ (8008958 <display+0x6c0>)
 8008822:	2104      	movs	r1, #4
 8008824:	0018      	movs	r0, r3
 8008826:	f010 fefb 	bl	8019620 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 800882a:	4b4c      	ldr	r3, [pc, #304]	@ (800895c <display+0x6c4>)
 800882c:	881a      	ldrh	r2, [r3, #0]
 800882e:	4b53      	ldr	r3, [pc, #332]	@ (800897c <display+0x6e4>)
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	18d3      	adds	r3, r2, r3
 8008834:	b29a      	uxth	r2, r3
 8008836:	4b4a      	ldr	r3, [pc, #296]	@ (8008960 <display+0x6c8>)
 8008838:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 800883a:	e011      	b.n	8008860 <display+0x5c8>
			goto buzzer_on;
 800883c:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800883e:	4b46      	ldr	r3, [pc, #280]	@ (8008958 <display+0x6c0>)
 8008840:	2104      	movs	r1, #4
 8008842:	0018      	movs	r0, r3
 8008844:	f010 fe0a 	bl	801945c <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 8008848:	4b44      	ldr	r3, [pc, #272]	@ (800895c <display+0x6c4>)
 800884a:	881a      	ldrh	r2, [r3, #0]
 800884c:	4b4a      	ldr	r3, [pc, #296]	@ (8008978 <display+0x6e0>)
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	18d3      	adds	r3, r2, r3
 8008852:	b29a      	uxth	r2, r3
 8008854:	4b42      	ldr	r3, [pc, #264]	@ (8008960 <display+0x6c8>)
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	e002      	b.n	8008860 <display+0x5c8>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 800885a:	46c0      	nop			@ (mov r8, r8)
 800885c:	e000      	b.n	8008860 <display+0x5c8>
			goto termina_buzzer;//jrne    termina_buzzer
 800885e:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 8008860:	1dfb      	adds	r3, r7, #7
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e009      	b.n	800887c <display+0x5e4>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 8008868:	1dfb      	adds	r3, r7, #7
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	4a46      	ldr	r2, [pc, #280]	@ (8008988 <display+0x6f0>)
 800886e:	2101      	movs	r1, #1
 8008870:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 8008872:	1dfb      	adds	r3, r7, #7
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	1dfb      	adds	r3, r7, #7
 8008878:	3201      	adds	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	1dfb      	adds	r3, r7, #7
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b07      	cmp	r3, #7
 8008882:	d9f1      	bls.n	8008868 <display+0x5d0>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8008884:	4b41      	ldr	r3, [pc, #260]	@ (800898c <display+0x6f4>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2201      	movs	r2, #1
 800888a:	4053      	eors	r3, r2
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <display+0x600>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 8008892:	4b3d      	ldr	r3, [pc, #244]	@ (8008988 <display+0x6f0>)
 8008894:	2200      	movs	r2, #0
 8008896:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 8008898:	4b3c      	ldr	r3, [pc, #240]	@ (800898c <display+0x6f4>)
 800889a:	785b      	ldrb	r3, [r3, #1]
 800889c:	2201      	movs	r2, #1
 800889e:	4053      	eors	r3, r2
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <display+0x614>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 80088a6:	4b38      	ldr	r3, [pc, #224]	@ (8008988 <display+0x6f0>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 80088ac:	4b37      	ldr	r3, [pc, #220]	@ (800898c <display+0x6f4>)
 80088ae:	789b      	ldrb	r3, [r3, #2]
 80088b0:	2201      	movs	r2, #1
 80088b2:	4053      	eors	r3, r2
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <display+0x628>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 80088ba:	4b33      	ldr	r3, [pc, #204]	@ (8008988 <display+0x6f0>)
 80088bc:	2200      	movs	r2, #0
 80088be:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 80088c0:	4b32      	ldr	r3, [pc, #200]	@ (800898c <display+0x6f4>)
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2201      	movs	r2, #1
 80088c6:	4053      	eors	r3, r2
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <display+0x63c>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 80088ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008988 <display+0x6f0>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 80088d4:	4b2d      	ldr	r3, [pc, #180]	@ (800898c <display+0x6f4>)
 80088d6:	79db      	ldrb	r3, [r3, #7]
 80088d8:	2201      	movs	r2, #1
 80088da:	4053      	eors	r3, r2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <display+0x650>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 80088e2:	4b29      	ldr	r3, [pc, #164]	@ (8008988 <display+0x6f0>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 80088e8:	4b28      	ldr	r3, [pc, #160]	@ (800898c <display+0x6f4>)
 80088ea:	791b      	ldrb	r3, [r3, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	4053      	eors	r3, r2
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <display+0x664>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 80088f6:	4b24      	ldr	r3, [pc, #144]	@ (8008988 <display+0x6f0>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 80088fc:	4b24      	ldr	r3, [pc, #144]	@ (8008990 <display+0x6f8>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d803      	bhi.n	800890c <display+0x674>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 8008904:	4b20      	ldr	r3, [pc, #128]	@ (8008988 <display+0x6f0>)
 8008906:	2200      	movs	r2, #0
 8008908:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 800890a:	e058      	b.n	80089be <display+0x726>
		goto	clt_ledInd;
 800890c:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 800890e:	4b1e      	ldr	r3, [pc, #120]	@ (8008988 <display+0x6f0>)
 8008910:	2201      	movs	r2, #1
 8008912:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 8008914:	4b1d      	ldr	r3, [pc, #116]	@ (800898c <display+0x6f4>)
 8008916:	78db      	ldrb	r3, [r3, #3]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d141      	bne.n	80089a0 <display+0x708>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 800891c:	4b1d      	ldr	r3, [pc, #116]	@ (8008994 <display+0x6fc>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d047      	beq.n	80089b4 <display+0x71c>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 8008924:	4b1c      	ldr	r3, [pc, #112]	@ (8008998 <display+0x700>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2201      	movs	r2, #1
 800892a:	4053      	eors	r3, r2
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d142      	bne.n	80089b8 <display+0x720>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 8008932:	4b1a      	ldr	r3, [pc, #104]	@ (800899c <display+0x704>)
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	001a      	movs	r2, r3
 800893a:	2320      	movs	r3, #32
 800893c:	4013      	ands	r3, r2
 800893e:	d001      	beq.n	8008944 <display+0x6ac>
	    asm ("nop");
 8008940:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 8008942:	e03c      	b.n	80089be <display+0x726>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 8008944:	4b10      	ldr	r3, [pc, #64]	@ (8008988 <display+0x6f0>)
 8008946:	2200      	movs	r2, #0
 8008948:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 800894a:	e038      	b.n	80089be <display+0x726>
 800894c:	20001080 	.word	0x20001080
 8008950:	20001078 	.word	0x20001078
 8008954:	20001070 	.word	0x20001070
 8008958:	200005f0 	.word	0x200005f0
 800895c:	2000106c 	.word	0x2000106c
 8008960:	2000106e 	.word	0x2000106e
 8008964:	20000be4 	.word	0x20000be4
 8008968:	20001190 	.word	0x20001190
 800896c:	2000108c 	.word	0x2000108c
 8008970:	20000bdc 	.word	0x20000bdc
 8008974:	0801c670 	.word	0x0801c670
 8008978:	20001072 	.word	0x20001072
 800897c:	20001074 	.word	0x20001074
 8008980:	00007530 	.word	0x00007530
 8008984:	00003a98 	.word	0x00003a98
 8008988:	20000cd8 	.word	0x20000cd8
 800898c:	20000bec 	.word	0x20000bec
 8008990:	20000bf4 	.word	0x20000bf4
 8008994:	20000c83 	.word	0x20000c83
 8008998:	20000c98 	.word	0x20000c98
 800899c:	20000bac 	.word	0x20000bac
		goto	blink_dia;
 80089a0:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 80089a2:	4b0f      	ldr	r3, [pc, #60]	@ (80089e0 <display+0x748>)
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b25b      	sxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	db07      	blt.n	80089bc <display+0x724>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 80089ac:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <display+0x74c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	709a      	strb	r2, [r3, #2]
 80089b2:	e004      	b.n	80089be <display+0x726>
		goto	no_blk;
 80089b4:	46c0      	nop			@ (mov r8, r8)
 80089b6:	e002      	b.n	80089be <display+0x726>
		goto	no_blk;
 80089b8:	46c0      	nop			@ (mov r8, r8)
 80089ba:	e000      	b.n	80089be <display+0x726>
		goto	display_j11;
 80089bc:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 80089be:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (estado1_Aux & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 80089c0:	1dbb      	adds	r3, r7, #6
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2201      	movs	r2, #1
 80089c6:	4013      	ands	r3, r2
 80089c8:	d104      	bne.n	80089d4 <display+0x73c>
		goto	refriON;
	}
refriOFF_2:
 80089ca:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 80089cc:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <display+0x74c>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80089d2:	e000      	b.n	80089d6 <display+0x73e>
		goto	refriON;
 80089d4:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80089d6:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	b004      	add	sp, #16
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20000bac 	.word	0x20000bac
 80089e4:	20000cd8 	.word	0x20000cd8

080089e8 <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 80089ee:	4ba6      	ldr	r3, [pc, #664]	@ (8008c88 <inicio+0x2a0>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 80089f4:	4ba4      	ldr	r3, [pc, #656]	@ (8008c88 <inicio+0x2a0>)
 80089f6:	2201      	movs	r2, #1
 80089f8:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 80089fa:	4ba4      	ldr	r3, [pc, #656]	@ (8008c8c <inicio+0x2a4>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 8008a00:	4ba3      	ldr	r3, [pc, #652]	@ (8008c90 <inicio+0x2a8>)
 8008a02:	2281      	movs	r2, #129	@ 0x81
 8008a04:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 8008a06:	4ba3      	ldr	r3, [pc, #652]	@ (8008c94 <inicio+0x2ac>)
 8008a08:	2278      	movs	r2, #120	@ 0x78
 8008a0a:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8008a0c:	4ba2      	ldr	r3, [pc, #648]	@ (8008c98 <inicio+0x2b0>)
 8008a0e:	2204      	movs	r2, #4
 8008a10:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8008a12:	4ba2      	ldr	r3, [pc, #648]	@ (8008c9c <inicio+0x2b4>)
 8008a14:	22c5      	movs	r2, #197	@ 0xc5
 8008a16:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8008a18:	4ba1      	ldr	r3, [pc, #644]	@ (8008ca0 <inicio+0x2b8>)
 8008a1a:	22a4      	movs	r2, #164	@ 0xa4
 8008a1c:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8008a1e:	4ba1      	ldr	r3, [pc, #644]	@ (8008ca4 <inicio+0x2bc>)
 8008a20:	220f      	movs	r2, #15
 8008a22:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008a24:	1cfb      	adds	r3, r7, #3
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	e009      	b.n	8008a40 <inicio+0x58>
		cruze_por_cero[k] = 0;
 8008a2c:	1cfb      	adds	r3, r7, #3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4a9d      	ldr	r2, [pc, #628]	@ (8008ca8 <inicio+0x2c0>)
 8008a32:	2100      	movs	r1, #0
 8008a34:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008a36:	1cfb      	adds	r3, r7, #3
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	1cfb      	adds	r3, r7, #3
 8008a3c:	3201      	adds	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	1cfb      	adds	r3, r7, #3
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d9f1      	bls.n	8008a2c <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008a48:	4b98      	ldr	r3, [pc, #608]	@ (8008cac <inicio+0x2c4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008a4e:	4b98      	ldr	r3, [pc, #608]	@ (8008cb0 <inicio+0x2c8>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = reePlantilla[eeprotype];
 8008a54:	4b97      	ldr	r3, [pc, #604]	@ (8008cb4 <inicio+0x2cc>)
 8008a56:	2257      	movs	r2, #87	@ 0x57
 8008a58:	5c99      	ldrb	r1, [r3, r2]
 8008a5a:	4b97      	ldr	r3, [pc, #604]	@ (8008cb8 <inicio+0x2d0>)
 8008a5c:	2257      	movs	r2, #87	@ 0x57
 8008a5e:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 8008a60:	4b96      	ldr	r3, [pc, #600]	@ (8008cbc <inicio+0x2d4>)
 8008a62:	226e      	movs	r2, #110	@ 0x6e
 8008a64:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 8008a66:	4b94      	ldr	r3, [pc, #592]	@ (8008cb8 <inicio+0x2d0>)
 8008a68:	2257      	movs	r2, #87	@ 0x57
 8008a6a:	5c9b      	ldrb	r3, [r3, r2]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d103      	bne.n	8008a78 <inicio+0x90>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8008a70:	4b92      	ldr	r3, [pc, #584]	@ (8008cbc <inicio+0x2d4>)
 8008a72:	22d2      	movs	r2, #210	@ 0xd2
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e000      	b.n	8008a7a <inicio+0x92>
		goto no_ini_210;
 8008a78:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 8008a7a:	4b91      	ldr	r3, [pc, #580]	@ (8008cc0 <inicio+0x2d8>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8008a80:	4b8f      	ldr	r3, [pc, #572]	@ (8008cc0 <inicio+0x2d8>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 8008a86:	4b8e      	ldr	r3, [pc, #568]	@ (8008cc0 <inicio+0x2d8>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 8008a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8008cc4 <inicio+0x2dc>)
 8008a8e:	2296      	movs	r2, #150	@ 0x96
 8008a90:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8008a92:	4b8d      	ldr	r3, [pc, #564]	@ (8008cc8 <inicio+0x2e0>)
 8008a94:	2296      	movs	r2, #150	@ 0x96
 8008a96:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 8008a98:	4b8c      	ldr	r3, [pc, #560]	@ (8008ccc <inicio+0x2e4>)
 8008a9a:	2296      	movs	r2, #150	@ 0x96
 8008a9c:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 8008a9e:	4b8c      	ldr	r3, [pc, #560]	@ (8008cd0 <inicio+0x2e8>)
 8008aa0:	2296      	movs	r2, #150	@ 0x96
 8008aa2:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 8008aa4:	4b84      	ldr	r3, [pc, #528]	@ (8008cb8 <inicio+0x2d0>)
 8008aa6:	22aa      	movs	r2, #170	@ 0xaa
 8008aa8:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 8008aaa:	4b83      	ldr	r3, [pc, #524]	@ (8008cb8 <inicio+0x2d0>)
 8008aac:	2241      	movs	r2, #65	@ 0x41
 8008aae:	2166      	movs	r1, #102	@ 0x66
 8008ab0:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 8008ab2:	4b81      	ldr	r3, [pc, #516]	@ (8008cb8 <inicio+0x2d0>)
 8008ab4:	227f      	movs	r2, #127	@ 0x7f
 8008ab6:	21cc      	movs	r1, #204	@ 0xcc
 8008ab8:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = reePlantilla[eetimepaf];
 8008aba:	4b7e      	ldr	r3, [pc, #504]	@ (8008cb4 <inicio+0x2cc>)
 8008abc:	2248      	movs	r2, #72	@ 0x48
 8008abe:	5c9a      	ldrb	r2, [r3, r2]
 8008ac0:	4b84      	ldr	r3, [pc, #528]	@ (8008cd4 <inicio+0x2ec>)
 8008ac2:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 8008ac4:	f7fe face 	bl	8007064 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 8008ac8:	f7fe fae8 	bl	800709c <load_tiempoAhorro2>
	//timeSeconds_HW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix1) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix2));		//	ldw		X,eeTimeUnix1
																									//	ldw		timeSeconds_HW,X
	//timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
	//timeSeconds_LW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix3) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix4));		//	ldw		X,eeTimeUnix3
																										//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 8008acc:	4b82      	ldr	r3, [pc, #520]	@ (8008cd8 <inicio+0x2f0>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 8008ad2:	4b82      	ldr	r3, [pc, #520]	@ (8008cdc <inicio+0x2f4>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 8008ad8:	4b81      	ldr	r3, [pc, #516]	@ (8008ce0 <inicio+0x2f8>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 8008ade:	4b81      	ldr	r3, [pc, #516]	@ (8008ce4 <inicio+0x2fc>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 8008ae4:	4b80      	ldr	r3, [pc, #512]	@ (8008ce8 <inicio+0x300>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	70da      	strb	r2, [r3, #3]


	//timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
							//	ldw		X,#300;
	timeTxTWF = 20;
 8008aea:	4b80      	ldr	r3, [pc, #512]	@ (8008cec <inicio+0x304>)
 8008aec:	2214      	movs	r2, #20
 8008aee:	701a      	strb	r2, [r3, #0]
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 8008af0:	4b7f      	ldr	r3, [pc, #508]	@ (8008cf0 <inicio+0x308>)
 8008af2:	2296      	movs	r2, #150	@ 0x96
 8008af4:	0052      	lsls	r2, r2, #1
 8008af6:	801a      	strh	r2, [r3, #0]
	// carga tiempo de envio de token BLE
	//	mov		timeTxTBLE,#10;
	//	ldw		X,#300;
	//	ldw		timeoutTBLE,X
	timeTxTBLE = 10;
 8008af8:	4b7e      	ldr	r3, [pc, #504]	@ (8008cf4 <inicio+0x30c>)
 8008afa:	220a      	movs	r2, #10
 8008afc:	701a      	strb	r2, [r3, #0]
	timeoutTBLE = 300;
 8008afe:	4b7e      	ldr	r3, [pc, #504]	@ (8008cf8 <inicio+0x310>)
 8008b00:	2296      	movs	r2, #150	@ 0x96
 8008b02:	0052      	lsls	r2, r2, #1
 8008b04:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 8008b06:	4b7d      	ldr	r3, [pc, #500]	@ (8008cfc <inicio+0x314>)
 8008b08:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8008d00 <inicio+0x318>)
 8008b10:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 8008b12:	4b7b      	ldr	r3, [pc, #492]	@ (8008d00 <inicio+0x318>)
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	4b7b      	ldr	r3, [pc, #492]	@ (8008d04 <inicio+0x31c>)
 8008b18:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d08 <inicio+0x320>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	4b7a      	ldr	r3, [pc, #488]	@ (8008d0c <inicio+0x324>)
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d103      	bne.n	8008b30 <inicio+0x148>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8008b28:	4b77      	ldr	r3, [pc, #476]	@ (8008d08 <inicio+0x320>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 8008b2e:	e015      	b.n	8008b5c <inicio+0x174>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 8008b30:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 8008b32:	4b75      	ldr	r3, [pc, #468]	@ (8008d08 <inicio+0x320>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	3301      	adds	r3, #1
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	4b73      	ldr	r3, [pc, #460]	@ (8008d08 <inicio+0x320>)
 8008b3c:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3380      	adds	r3, #128	@ 0x80
 8008b42:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	4b6d      	ldr	r3, [pc, #436]	@ (8008d00 <inicio+0x318>)
 8008b4a:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 8008b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8008d00 <inicio+0x318>)
 8008b4e:	781a      	ldrb	r2, [r3, #0]
 8008b50:	4b6c      	ldr	r3, [pc, #432]	@ (8008d04 <inicio+0x31c>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d100      	bne.n	8008b5a <inicio+0x172>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 8008b58:	e7e2      	b.n	8008b20 <inicio+0x138>
	}
lastDataBlockFound:
 8008b5a:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 8008b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8008d08 <inicio+0x320>)
 8008b5e:	781a      	ldrb	r2, [r3, #0]
 8008b60:	4b6b      	ldr	r3, [pc, #428]	@ (8008d10 <inicio+0x328>)
 8008b62:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 8008b64:	4b6a      	ldr	r3, [pc, #424]	@ (8008d10 <inicio+0x328>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	01db      	lsls	r3, r3, #7
 8008b6a:	001a      	movs	r2, r3
 8008b6c:	4b69      	ldr	r3, [pc, #420]	@ (8008d14 <inicio+0x32c>)
 8008b6e:	18d3      	adds	r3, r2, r3
 8008b70:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	337e      	adds	r3, #126	@ 0x7e
 8008b76:	607b      	str	r3, [r7, #4]

	//cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
	cntByteBlockDATA = 0;
 8008b78:	4b67      	ldr	r3, [pc, #412]	@ (8008d18 <inicio+0x330>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	701a      	strb	r2, [r3, #0]
	dirBuffer = &data_buffer[0];
 8008b7e:	4b67      	ldr	r3, [pc, #412]	@ (8008d1c <inicio+0x334>)
 8008b80:	4a67      	ldr	r2, [pc, #412]	@ (8008d20 <inicio+0x338>)
 8008b82:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 8008b84:	4b67      	ldr	r3, [pc, #412]	@ (8008d24 <inicio+0x33c>)
 8008b86:	4a63      	ldr	r2, [pc, #396]	@ (8008d14 <inicio+0x32c>)
 8008b88:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8008b8a:	4b61      	ldr	r3, [pc, #388]	@ (8008d10 <inicio+0x328>)
 8008b8c:	781a      	ldrb	r2, [r3, #0]
 8008b8e:	4b53      	ldr	r3, [pc, #332]	@ (8008cdc <inicio+0x2f4>)
 8008b90:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 8008b92:	f7fe fab1 	bl	80070f8 <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 8008b96:	4b64      	ldr	r3, [pc, #400]	@ (8008d28 <inicio+0x340>)
 8008b98:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	4b58      	ldr	r3, [pc, #352]	@ (8008d00 <inicio+0x318>)
 8008ba0:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 8008ba2:	4b57      	ldr	r3, [pc, #348]	@ (8008d00 <inicio+0x318>)
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	4b57      	ldr	r3, [pc, #348]	@ (8008d04 <inicio+0x31c>)
 8008ba8:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008baa:	4b57      	ldr	r3, [pc, #348]	@ (8008d08 <inicio+0x320>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8008d2c <inicio+0x344>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d103      	bne.n	8008bc0 <inicio+0x1d8>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8008bb8:	4b53      	ldr	r3, [pc, #332]	@ (8008d08 <inicio+0x320>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 8008bbe:	e015      	b.n	8008bec <inicio+0x204>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 8008bc0:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 8008bc2:	4b51      	ldr	r3, [pc, #324]	@ (8008d08 <inicio+0x320>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	4b4f      	ldr	r3, [pc, #316]	@ (8008d08 <inicio+0x320>)
 8008bcc:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3380      	adds	r3, #128	@ 0x80
 8008bd2:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	781a      	ldrb	r2, [r3, #0]
 8008bd8:	4b49      	ldr	r3, [pc, #292]	@ (8008d00 <inicio+0x318>)
 8008bda:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 8008bdc:	4b48      	ldr	r3, [pc, #288]	@ (8008d00 <inicio+0x318>)
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	4b48      	ldr	r3, [pc, #288]	@ (8008d04 <inicio+0x31c>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d100      	bne.n	8008bea <inicio+0x202>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 8008be8:	e7e2      	b.n	8008bb0 <inicio+0x1c8>
		}
lastEventBlockFound:
 8008bea:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 8008bec:	4b46      	ldr	r3, [pc, #280]	@ (8008d08 <inicio+0x320>)
 8008bee:	781a      	ldrb	r2, [r3, #0]
 8008bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8008d30 <inicio+0x348>)
 8008bf2:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8008bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8008d30 <inicio+0x348>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	01db      	lsls	r3, r3, #7
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8008d34 <inicio+0x34c>)
 8008bfe:	18d3      	adds	r3, r2, r3
 8008c00:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	337e      	adds	r3, #126	@ 0x7e
 8008c06:	607b      	str	r3, [r7, #4]

		//cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
		cntByteBlockEVENT = 0;
 8008c08:	4b4b      	ldr	r3, [pc, #300]	@ (8008d38 <inicio+0x350>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 8008c0e:	4b43      	ldr	r3, [pc, #268]	@ (8008d1c <inicio+0x334>)
 8008c10:	4a4a      	ldr	r2, [pc, #296]	@ (8008d3c <inicio+0x354>)
 8008c12:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 8008c14:	4b43      	ldr	r3, [pc, #268]	@ (8008d24 <inicio+0x33c>)
 8008c16:	4a47      	ldr	r2, [pc, #284]	@ (8008d34 <inicio+0x34c>)
 8008c18:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 8008c1a:	4b45      	ldr	r3, [pc, #276]	@ (8008d30 <inicio+0x348>)
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008cdc <inicio+0x2f4>)
 8008c20:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 8008c22:	f7fe fa69 	bl	80070f8 <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 8008c26:	4b46      	ldr	r3, [pc, #280]	@ (8008d40 <inicio+0x358>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 8008c2c:	4b44      	ldr	r3, [pc, #272]	@ (8008d40 <inicio+0x358>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	719a      	strb	r2, [r3, #6]
		uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8008c32:	1cbb      	adds	r3, r7, #2
 8008c34:	4a43      	ldr	r2, [pc, #268]	@ (8008d44 <inicio+0x35c>)
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	701a      	strb	r2, [r3, #0]
		if(!GetRegFlagState(estado1_Aux, est1Lamp)){
 8008c3a:	1cbb      	adds	r3, r7, #2
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2204      	movs	r2, #4
 8008c40:	4013      	ands	r3, r2
 8008c42:	d003      	beq.n	8008c4c <inicio+0x264>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 8008c44:	4b3e      	ldr	r3, [pc, #248]	@ (8008d40 <inicio+0x358>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	719a      	strb	r2, [r3, #6]
 8008c4a:	e000      	b.n	8008c4e <inicio+0x266>
			goto initLampOFF;
 8008c4c:	46c0      	nop			@ (mov r8, r8)
initLampOFF:
		if(GetRegFlagState(Plantilla[logicos2], funReleDesh))//btjt		logicos2,#funReleDesh,deshTypeAct_02; omite estado Lock sí se eligio función deshielo para relevador
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <inicio+0x2d0>)
 8008c50:	225b      	movs	r2, #91	@ 0x5b
 8008c52:	5c9b      	ldrb	r3, [r3, r2]
 8008c54:	001a      	movs	r2, r3
 8008c56:	2308      	movs	r3, #8
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d10b      	bne.n	8008c74 <inicio+0x28c>
			goto deshTypeAct_02;
		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 8008c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8008d48 <inicio+0x360>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(estado1_Aux, est1LockDr)){
 8008c62:	1cbb      	adds	r3, r7, #2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2240      	movs	r2, #64	@ 0x40
 8008c68:	4013      	ands	r3, r2
 8008c6a:	d005      	beq.n	8008c78 <inicio+0x290>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 8008c6c:	4b36      	ldr	r3, [pc, #216]	@ (8008d48 <inicio+0x360>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	705a      	strb	r2, [r3, #1]
 8008c72:	e002      	b.n	8008c7a <inicio+0x292>
			goto deshTypeAct_02;
 8008c74:	46c0      	nop			@ (mov r8, r8)
 8008c76:	e000      	b.n	8008c7a <inicio+0x292>
			goto initLockDrOFF;
 8008c78:	46c0      	nop			@ (mov r8, r8)
initLockDrOFF:
deshTypeAct_02:
//		ldw			X,#90
//		ldw			cntSetName,X
		cntSetName = 90;
 8008c7a:	4b34      	ldr	r3, [pc, #208]	@ (8008d4c <inicio+0x364>)
 8008c7c:	225a      	movs	r2, #90	@ 0x5a
 8008c7e:	801a      	strh	r2, [r3, #0]
	//jp	end_init
}
 8008c80:	46c0      	nop			@ (mov r8, r8)
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b002      	add	sp, #8
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000bd4 	.word	0x20000bd4
 8008c8c:	20000bab 	.word	0x20000bab
 8008c90:	20000c26 	.word	0x20000c26
 8008c94:	20000c27 	.word	0x20000c27
 8008c98:	20000cb3 	.word	0x20000cb3
 8008c9c:	20000cb4 	.word	0x20000cb4
 8008ca0:	20000cb2 	.word	0x20000cb2
 8008ca4:	20000cb5 	.word	0x20000cb5
 8008ca8:	20000cb8 	.word	0x20000cb8
 8008cac:	20000cbd 	.word	0x20000cbd
 8008cb0:	20000cbe 	.word	0x20000cbe
 8008cb4:	20000ce8 	.word	0x20000ce8
 8008cb8:	200000b8 	.word	0x200000b8
 8008cbc:	20000c2a 	.word	0x20000c2a
 8008cc0:	20000c44 	.word	0x20000c44
 8008cc4:	20000c6c 	.word	0x20000c6c
 8008cc8:	20000c6d 	.word	0x20000c6d
 8008ccc:	20000c6e 	.word	0x20000c6e
 8008cd0:	20000c6f 	.word	0x20000c6f
 8008cd4:	20000c83 	.word	0x20000c83
 8008cd8:	20000e80 	.word	0x20000e80
 8008cdc:	20000e82 	.word	0x20000e82
 8008ce0:	20000e83 	.word	0x20000e83
 8008ce4:	20000e84 	.word	0x20000e84
 8008ce8:	20000fb0 	.word	0x20000fb0
 8008cec:	20001022 	.word	0x20001022
 8008cf0:	20001034 	.word	0x20001034
 8008cf4:	200011e2 	.word	0x200011e2
 8008cf8:	200011e4 	.word	0x200011e4
 8008cfc:	0803c07f 	.word	0x0803c07f
 8008d00:	20000930 	.word	0x20000930
 8008d04:	20000bb3 	.word	0x20000bb3
 8008d08:	20000bb2 	.word	0x20000bb2
 8008d0c:	0803efff 	.word	0x0803efff
 8008d10:	20000e95 	.word	0x20000e95
 8008d14:	0803c000 	.word	0x0803c000
 8008d18:	20000e94 	.word	0x20000e94
 8008d1c:	20000e8c 	.word	0x20000e8c
 8008d20:	20000d74 	.word	0x20000d74
 8008d24:	20000e88 	.word	0x20000e88
 8008d28:	0803707f 	.word	0x0803707f
 8008d2c:	0803bfff 	.word	0x0803bfff
 8008d30:	20000e97 	.word	0x20000e97
 8008d34:	08037000 	.word	0x08037000
 8008d38:	20000e96 	.word	0x20000e96
 8008d3c:	20000df4 	.word	0x20000df4
 8008d40:	20000c98 	.word	0x20000c98
 8008d44:	200001ba 	.word	0x200001ba
 8008d48:	20000c00 	.word	0x20000c00
 8008d4c:	200011e0 	.word	0x200011e0

08008d50 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 8008d54:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd4 <timeBCD_to_UNIX+0x84>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 f853 	bl	8008e04 <BCDtoByte>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	22fa      	movs	r2, #250	@ 0xfa
 8008d62:	00d2      	lsls	r2, r2, #3
 8008d64:	4694      	mov	ip, r2
 8008d66:	4463      	add	r3, ip
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd8 <timeBCD_to_UNIX+0x88>)
 8008d6c:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 8008d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ddc <timeBCD_to_UNIX+0x8c>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	221f      	movs	r2, #31
 8008d74:	4013      	ands	r3, r2
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f000 f843 	bl	8008e04 <BCDtoByte>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	001a      	movs	r2, r3
 8008d82:	4b17      	ldr	r3, [pc, #92]	@ (8008de0 <timeBCD_to_UNIX+0x90>)
 8008d84:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 8008d86:	4b17      	ldr	r3, [pc, #92]	@ (8008de4 <timeBCD_to_UNIX+0x94>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 f83a 	bl	8008e04 <BCDtoByte>
 8008d90:	0003      	movs	r3, r0
 8008d92:	001a      	movs	r2, r3
 8008d94:	4b14      	ldr	r3, [pc, #80]	@ (8008de8 <timeBCD_to_UNIX+0x98>)
 8008d96:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 8008d98:	4b14      	ldr	r3, [pc, #80]	@ (8008dec <timeBCD_to_UNIX+0x9c>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f000 f831 	bl	8008e04 <BCDtoByte>
 8008da2:	0003      	movs	r3, r0
 8008da4:	001a      	movs	r2, r3
 8008da6:	4b12      	ldr	r3, [pc, #72]	@ (8008df0 <timeBCD_to_UNIX+0xa0>)
 8008da8:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 8008daa:	4b12      	ldr	r3, [pc, #72]	@ (8008df4 <timeBCD_to_UNIX+0xa4>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	0018      	movs	r0, r3
 8008db0:	f000 f828 	bl	8008e04 <BCDtoByte>
 8008db4:	0003      	movs	r3, r0
 8008db6:	001a      	movs	r2, r3
 8008db8:	4b0f      	ldr	r3, [pc, #60]	@ (8008df8 <timeBCD_to_UNIX+0xa8>)
 8008dba:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <timeBCD_to_UNIX+0xac>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f000 f81f 	bl	8008e04 <BCDtoByte>
 8008dc6:	0003      	movs	r3, r0
 8008dc8:	001a      	movs	r2, r3
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <timeBCD_to_UNIX+0xb0>)
 8008dcc:	701a      	strb	r2, [r3, #0]
}
 8008dce:	46c0      	nop			@ (mov r8, r8)
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20001158 	.word	0x20001158
 8008dd8:	20001178 	.word	0x20001178
 8008ddc:	20001159 	.word	0x20001159
 8008de0:	2000117a 	.word	0x2000117a
 8008de4:	2000115a 	.word	0x2000115a
 8008de8:	2000117b 	.word	0x2000117b
 8008dec:	2000115b 	.word	0x2000115b
 8008df0:	2000117c 	.word	0x2000117c
 8008df4:	2000115c 	.word	0x2000115c
 8008df8:	2000117d 	.word	0x2000117d
 8008dfc:	2000115d 	.word	0x2000115d
 8008e00:	2000117e 	.word	0x2000117e

08008e04 <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	0002      	movs	r2, r0
 8008e0c:	1dfb      	adds	r3, r7, #7
 8008e0e:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8008e10:	1dfb      	adds	r3, r7, #7
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	220f      	movs	r2, #15
 8008e16:	4013      	ands	r3, r2
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	1dfb      	adds	r3, r7, #7
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	091b      	lsrs	r3, r3, #4
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	1c19      	adds	r1, r3, #0
 8008e24:	0089      	lsls	r1, r1, #2
 8008e26:	18cb      	adds	r3, r1, r3
 8008e28:	18db      	adds	r3, r3, r3
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	18d3      	adds	r3, r2, r3
 8008e2e:	b2db      	uxtb	r3, r3

}
 8008e30:	0018      	movs	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b002      	add	sp, #8
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <logger>:





void logger (void){
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 8008e3c:	4bb9      	ldr	r3, [pc, #740]	@ (8009124 <logger+0x2ec>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d800      	bhi.n	8008e46 <logger+0xe>
 8008e44:	e303      	b.n	800944e <logger+0x616>
			goto logger_01;//jruge	logger_01;
 8008e46:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 8008e48:	4bb7      	ldr	r3, [pc, #732]	@ (8009128 <logger+0x2f0>)
 8008e4a:	79db      	ldrb	r3, [r3, #7]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d118      	bne.n	8008e82 <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8008e50:	4bb6      	ldr	r3, [pc, #728]	@ (800912c <logger+0x2f4>)
 8008e52:	2257      	movs	r2, #87	@ 0x57
 8008e54:	5c9b      	ldrb	r3, [r3, r2]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d005      	beq.n	8008e66 <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 8008e5a:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 8008e5c:	4bb4      	ldr	r3, [pc, #720]	@ (8009130 <logger+0x2f8>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b45      	cmp	r3, #69	@ 0x45
 8008e62:	d90a      	bls.n	8008e7a <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8008e64:	e005      	b.n	8008e72 <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8008e66:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8008e68:	4bb1      	ldr	r3, [pc, #708]	@ (8009130 <logger+0x2f8>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2ba9      	cmp	r3, #169	@ 0xa9
 8008e6e:	d906      	bls.n	8008e7e <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8008e70:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8008e72:	4bad      	ldr	r3, [pc, #692]	@ (8009128 <logger+0x2f0>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8008e78:	e2ea      	b.n	8009450 <logger+0x618>
		goto voltArranFAIL;//jra	voltArranFAIL
 8008e7a:	46c0      	nop			@ (mov r8, r8)
 8008e7c:	e2e8      	b.n	8009450 <logger+0x618>
		goto voltArranFAIL;//jra voltArranFAIL
 8008e7e:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008e80:	e2e6      	b.n	8009450 <logger+0x618>
			goto voltFlagOK;
 8008e82:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(flagsWIFI[f_eventLoggerSend])	//btjt		flagsWIFI,#f_eventLoggerSend,event_logg_01; No loggear hasta terminar Tx
 8008e84:	4bab      	ldr	r3, [pc, #684]	@ (8009134 <logger+0x2fc>)
 8008e86:	789b      	ldrb	r3, [r3, #2]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d107      	bne.n	8008e9c <logger+0x64>
			goto event_logg_01;
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8008e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8009128 <logger+0x2f0>)
 8008e8e:	791b      	ldrb	r3, [r3, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	4053      	eors	r3, r2
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <logger+0x68>
			goto door_event;
		}
event_logg_01:
 8008e9a:	e000      	b.n	8008e9e <logger+0x66>
			goto event_logg_01;
 8008e9c:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; // jp fin_logger
 8008e9e:	e2d7      	b.n	8009450 <logger+0x618>
			goto door_event;
 8008ea0:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8008ea2:	4ba5      	ldr	r3, [pc, #660]	@ (8009138 <logger+0x300>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d136      	bne.n	8008f18 <logger+0xe0>
			goto ask_DE_end;
		}
ask_DE_start:
 8008eaa:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8008eac:	4ba3      	ldr	r3, [pc, #652]	@ (800913c <logger+0x304>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d068      	beq.n	8008f86 <logger+0x14e>
			goto ask_DE_start_01;
 8008eb4:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8008eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8009140 <logger+0x308>)
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	4ba0      	ldr	r3, [pc, #640]	@ (8009144 <logger+0x30c>)
 8008ec2:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8008ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8009140 <logger+0x308>)
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	4b9e      	ldr	r3, [pc, #632]	@ (8009144 <logger+0x30c>)
 8008ecc:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8008ece:	4b9e      	ldr	r3, [pc, #632]	@ (8009148 <logger+0x310>)
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8009144 <logger+0x30c>)
 8008eda:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008edc:	4b9a      	ldr	r3, [pc, #616]	@ (8009148 <logger+0x310>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	4b98      	ldr	r3, [pc, #608]	@ (8009144 <logger+0x30c>)
 8008ee4:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8008ee6:	4b97      	ldr	r3, [pc, #604]	@ (8009144 <logger+0x30c>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8008eec:	4b97      	ldr	r3, [pc, #604]	@ (800914c <logger+0x314>)
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	4b94      	ldr	r3, [pc, #592]	@ (8009144 <logger+0x30c>)
 8008ef2:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8008ef4:	4b96      	ldr	r3, [pc, #600]	@ (8009150 <logger+0x318>)
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	4b92      	ldr	r3, [pc, #584]	@ (8009144 <logger+0x30c>)
 8008efa:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8008efc:	4b8c      	ldr	r3, [pc, #560]	@ (8009130 <logger+0x2f8>)
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4b90      	ldr	r3, [pc, #576]	@ (8009144 <logger+0x30c>)
 8008f02:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8008f04:	4b8c      	ldr	r3, [pc, #560]	@ (8009138 <logger+0x300>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8008f0a:	4b88      	ldr	r3, [pc, #544]	@ (800912c <logger+0x2f4>)
 8008f0c:	2250      	movs	r2, #80	@ 0x50
 8008f0e:	5c9b      	ldrb	r3, [r3, r2]
 8008f10:	001a      	movs	r2, r3
 8008f12:	4b90      	ldr	r3, [pc, #576]	@ (8009154 <logger+0x31c>)
 8008f14:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8008f16:	e039      	b.n	8008f8c <logger+0x154>
			goto ask_DE_end;
 8008f18:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8008f1a:	4b88      	ldr	r3, [pc, #544]	@ (800913c <logger+0x304>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d133      	bne.n	8008f8a <logger+0x152>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8008f22:	4b8c      	ldr	r3, [pc, #560]	@ (8009154 <logger+0x31c>)
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <logger+0xfa>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8008f2a:	4b83      	ldr	r3, [pc, #524]	@ (8009138 <logger+0x300>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8008f30:	e02c      	b.n	8008f8c <logger+0x154>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8008f32:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8008f34:	4b82      	ldr	r3, [pc, #520]	@ (8009140 <logger+0x308>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	0a1b      	lsrs	r3, r3, #8
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	4b81      	ldr	r3, [pc, #516]	@ (8009144 <logger+0x30c>)
 8008f40:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8008f42:	4b7f      	ldr	r3, [pc, #508]	@ (8009140 <logger+0x308>)
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	4b7e      	ldr	r3, [pc, #504]	@ (8009144 <logger+0x30c>)
 8008f4a:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8009148 <logger+0x310>)
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4b7b      	ldr	r3, [pc, #492]	@ (8009144 <logger+0x30c>)
 8008f58:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8009148 <logger+0x310>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	4b78      	ldr	r3, [pc, #480]	@ (8009144 <logger+0x30c>)
 8008f62:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8008f64:	4b7c      	ldr	r3, [pc, #496]	@ (8009158 <logger+0x320>)
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	4b76      	ldr	r3, [pc, #472]	@ (8009144 <logger+0x30c>)
 8008f6a:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800915c <logger+0x324>)
 8008f6e:	781a      	ldrb	r2, [r3, #0]
 8008f70:	4b74      	ldr	r3, [pc, #464]	@ (8009144 <logger+0x30c>)
 8008f72:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8008f74:	4b7a      	ldr	r3, [pc, #488]	@ (8009160 <logger+0x328>)
 8008f76:	4a7b      	ldr	r2, [pc, #492]	@ (8009164 <logger+0x32c>)
 8008f78:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8008f7a:	f000 fac3 	bl	8009504 <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8008f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8009138 <logger+0x300>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8008f84:	e002      	b.n	8008f8c <logger+0x154>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8008f86:	46c0      	nop			@ (mov r8, r8)
 8008f88:	e000      	b.n	8008f8c <logger+0x154>
			goto comp_event;
 8008f8a:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8008f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8009138 <logger+0x300>)
 8008f8e:	785b      	ldrb	r3, [r3, #1]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d130      	bne.n	8008ff6 <logger+0x1be>
			goto ask_CE_end;
		}
ask_CE_start:
 8008f94:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8008f96:	4b74      	ldr	r3, [pc, #464]	@ (8009168 <logger+0x330>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d05a      	beq.n	8009054 <logger+0x21c>
			goto ask_CE_start_01;
 8008f9e:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8008fa0:	4b67      	ldr	r3, [pc, #412]	@ (8009140 <logger+0x308>)
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	4b70      	ldr	r3, [pc, #448]	@ (800916c <logger+0x334>)
 8008fac:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8008fae:	4b64      	ldr	r3, [pc, #400]	@ (8009140 <logger+0x308>)
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800916c <logger+0x334>)
 8008fb6:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8008fb8:	4b63      	ldr	r3, [pc, #396]	@ (8009148 <logger+0x310>)
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800916c <logger+0x334>)
 8008fc4:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008fc6:	4b60      	ldr	r3, [pc, #384]	@ (8009148 <logger+0x310>)
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	4b67      	ldr	r3, [pc, #412]	@ (800916c <logger+0x334>)
 8008fce:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8008fd0:	4b66      	ldr	r3, [pc, #408]	@ (800916c <logger+0x334>)
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8008fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800914c <logger+0x314>)
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	4b64      	ldr	r3, [pc, #400]	@ (800916c <logger+0x334>)
 8008fdc:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8008fde:	4b5c      	ldr	r3, [pc, #368]	@ (8009150 <logger+0x318>)
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	4b62      	ldr	r3, [pc, #392]	@ (800916c <logger+0x334>)
 8008fe4:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8008fe6:	4b52      	ldr	r3, [pc, #328]	@ (8009130 <logger+0x2f8>)
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	4b60      	ldr	r3, [pc, #384]	@ (800916c <logger+0x334>)
 8008fec:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8008fee:	4b52      	ldr	r3, [pc, #328]	@ (8009138 <logger+0x300>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8008ff4:	e031      	b.n	800905a <logger+0x222>
			goto ask_CE_end;
 8008ff6:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8008ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8009168 <logger+0x330>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d12b      	bne.n	8009058 <logger+0x220>
			goto desh_event;
		}
comp_event_end:
 8009000:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8009002:	4b4f      	ldr	r3, [pc, #316]	@ (8009140 <logger+0x308>)
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	b29b      	uxth	r3, r3
 800900a:	b2da      	uxtb	r2, r3
 800900c:	4b57      	ldr	r3, [pc, #348]	@ (800916c <logger+0x334>)
 800900e:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8009010:	4b4b      	ldr	r3, [pc, #300]	@ (8009140 <logger+0x308>)
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b55      	ldr	r3, [pc, #340]	@ (800916c <logger+0x334>)
 8009018:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 800901a:	4b4b      	ldr	r3, [pc, #300]	@ (8009148 <logger+0x310>)
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	b29b      	uxth	r3, r3
 8009022:	b2da      	uxtb	r2, r3
 8009024:	4b51      	ldr	r3, [pc, #324]	@ (800916c <logger+0x334>)
 8009026:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8009028:	4b47      	ldr	r3, [pc, #284]	@ (8009148 <logger+0x310>)
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	4b4f      	ldr	r3, [pc, #316]	@ (800916c <logger+0x334>)
 8009030:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8009032:	4b49      	ldr	r3, [pc, #292]	@ (8009158 <logger+0x320>)
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	4b4d      	ldr	r3, [pc, #308]	@ (800916c <logger+0x334>)
 8009038:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 800903a:	4b48      	ldr	r3, [pc, #288]	@ (800915c <logger+0x324>)
 800903c:	781a      	ldrb	r2, [r3, #0]
 800903e:	4b4b      	ldr	r3, [pc, #300]	@ (800916c <logger+0x334>)
 8009040:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8009042:	4b47      	ldr	r3, [pc, #284]	@ (8009160 <logger+0x328>)
 8009044:	4a4a      	ldr	r2, [pc, #296]	@ (8009170 <logger+0x338>)
 8009046:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8009048:	f000 fa5c 	bl	8009504 <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 800904c:	4b3a      	ldr	r3, [pc, #232]	@ (8009138 <logger+0x300>)
 800904e:	2200      	movs	r2, #0
 8009050:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8009052:	e002      	b.n	800905a <logger+0x222>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8009054:	46c0      	nop			@ (mov r8, r8)
 8009056:	e000      	b.n	800905a <logger+0x222>
			goto desh_event;
 8009058:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 800905a:	4b37      	ldr	r3, [pc, #220]	@ (8009138 <logger+0x300>)
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d12f      	bne.n	80090c2 <logger+0x28a>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8009062:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8009064:	4b2f      	ldr	r3, [pc, #188]	@ (8009124 <logger+0x2ec>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b03      	cmp	r3, #3
 800906a:	d159      	bne.n	8009120 <logger+0x2e8>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 800906c:	4b34      	ldr	r3, [pc, #208]	@ (8009140 <logger+0x308>)
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	0a1b      	lsrs	r3, r3, #8
 8009072:	b29b      	uxth	r3, r3
 8009074:	b2da      	uxtb	r2, r3
 8009076:	4b3f      	ldr	r3, [pc, #252]	@ (8009174 <logger+0x33c>)
 8009078:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 800907a:	4b31      	ldr	r3, [pc, #196]	@ (8009140 <logger+0x308>)
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b2da      	uxtb	r2, r3
 8009080:	4b3c      	ldr	r3, [pc, #240]	@ (8009174 <logger+0x33c>)
 8009082:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8009084:	4b30      	ldr	r3, [pc, #192]	@ (8009148 <logger+0x310>)
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	b29b      	uxth	r3, r3
 800908c:	b2da      	uxtb	r2, r3
 800908e:	4b39      	ldr	r3, [pc, #228]	@ (8009174 <logger+0x33c>)
 8009090:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8009092:	4b2d      	ldr	r3, [pc, #180]	@ (8009148 <logger+0x310>)
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	4b36      	ldr	r3, [pc, #216]	@ (8009174 <logger+0x33c>)
 800909a:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 800909c:	4b35      	ldr	r3, [pc, #212]	@ (8009174 <logger+0x33c>)
 800909e:	2203      	movs	r2, #3
 80090a0:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 80090a2:	4b2a      	ldr	r3, [pc, #168]	@ (800914c <logger+0x314>)
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	4b33      	ldr	r3, [pc, #204]	@ (8009174 <logger+0x33c>)
 80090a8:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 80090aa:	4b29      	ldr	r3, [pc, #164]	@ (8009150 <logger+0x318>)
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	4b31      	ldr	r3, [pc, #196]	@ (8009174 <logger+0x33c>)
 80090b0:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 80090b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009130 <logger+0x2f8>)
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009174 <logger+0x33c>)
 80090b8:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 80090ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009138 <logger+0x300>)
 80090bc:	2201      	movs	r2, #1
 80090be:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 80090c0:	e05d      	b.n	800917e <logger+0x346>
			goto ask_DhE_end;
 80090c2:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 80090c4:	4b17      	ldr	r3, [pc, #92]	@ (8009124 <logger+0x2ec>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d057      	beq.n	800917c <logger+0x344>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 80090cc:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 80090ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009140 <logger+0x308>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	4b26      	ldr	r3, [pc, #152]	@ (8009174 <logger+0x33c>)
 80090da:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 80090dc:	4b18      	ldr	r3, [pc, #96]	@ (8009140 <logger+0x308>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b24      	ldr	r3, [pc, #144]	@ (8009174 <logger+0x33c>)
 80090e4:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 80090e6:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <logger+0x310>)
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	0a1b      	lsrs	r3, r3, #8
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	4b20      	ldr	r3, [pc, #128]	@ (8009174 <logger+0x33c>)
 80090f2:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 80090f4:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <logger+0x310>)
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009174 <logger+0x33c>)
 80090fc:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 80090fe:	4b16      	ldr	r3, [pc, #88]	@ (8009158 <logger+0x320>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4b1c      	ldr	r3, [pc, #112]	@ (8009174 <logger+0x33c>)
 8009104:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8009106:	4b15      	ldr	r3, [pc, #84]	@ (800915c <logger+0x324>)
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	4b1a      	ldr	r3, [pc, #104]	@ (8009174 <logger+0x33c>)
 800910c:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 800910e:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <logger+0x328>)
 8009110:	4a19      	ldr	r2, [pc, #100]	@ (8009178 <logger+0x340>)
 8009112:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8009114:	f000 f9f6 	bl	8009504 <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8009118:	4b07      	ldr	r3, [pc, #28]	@ (8009138 <logger+0x300>)
 800911a:	2200      	movs	r2, #0
 800911c:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 800911e:	e02e      	b.n	800917e <logger+0x346>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8009120:	46c0      	nop			@ (mov r8, r8)
 8009122:	e02c      	b.n	800917e <logger+0x346>
 8009124:	20000bf4 	.word	0x20000bf4
 8009128:	20000eec 	.word	0x20000eec
 800912c:	200000b8 	.word	0x200000b8
 8009130:	20000c2a 	.word	0x20000c2a
 8009134:	20001038 	.word	0x20001038
 8009138:	20000fb0 	.word	0x20000fb0
 800913c:	20000c98 	.word	0x20000c98
 8009140:	20000e98 	.word	0x20000e98
 8009144:	20000fd4 	.word	0x20000fd4
 8009148:	20000e9a 	.word	0x20000e9a
 800914c:	20000c0c 	.word	0x20000c0c
 8009150:	20000c0d 	.word	0x20000c0d
 8009154:	20000fc0 	.word	0x20000fc0
 8009158:	20000c0e 	.word	0x20000c0e
 800915c:	20000c0f 	.word	0x20000c0f
 8009160:	20000e90 	.word	0x20000e90
 8009164:	20000fd8 	.word	0x20000fd8
 8009168:	20000c00 	.word	0x20000c00
 800916c:	20000fe8 	.word	0x20000fe8
 8009170:	20000fec 	.word	0x20000fec
 8009174:	20000ffc 	.word	0x20000ffc
 8009178:	20001000 	.word	0x20001000
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 800917c:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 800917e:	4bb6      	ldr	r3, [pc, #728]	@ (8009458 <logger+0x620>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d14c      	bne.n	8009220 <logger+0x3e8>
			//goto alarm_event;//	jrne	alarm_event
			goto wifi_event;
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8009186:	4bb5      	ldr	r3, [pc, #724]	@ (800945c <logger+0x624>)
 8009188:	78db      	ldrb	r3, [r3, #3]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d04a      	beq.n	8009224 <logger+0x3ec>
			goto power_event_end;
 800918e:	46c0      	nop			@ (mov r8, r8)
//		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
//		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
//		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
//		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio

		BloqEventPwrOn[EPo_timeInit_4] = reeTimeUnix1;		//ldw	X,eeTimeUnix1
 8009190:	4bb3      	ldr	r3, [pc, #716]	@ (8009460 <logger+0x628>)
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	4bb3      	ldr	r3, [pc, #716]	@ (8009464 <logger+0x62c>)
 8009196:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = reeTimeUnix2;		//ldw	EPo_timeInit_HW,X
 8009198:	4bb3      	ldr	r3, [pc, #716]	@ (8009468 <logger+0x630>)
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	4bb1      	ldr	r3, [pc, #708]	@ (8009464 <logger+0x62c>)
 800919e:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = reeTimeUnix3;		//ldw	X,eeTimeUnix3
 80091a0:	4bb2      	ldr	r3, [pc, #712]	@ (800946c <logger+0x634>)
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	4baf      	ldr	r3, [pc, #700]	@ (8009464 <logger+0x62c>)
 80091a6:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = reeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 80091a8:	4bb1      	ldr	r3, [pc, #708]	@ (8009470 <logger+0x638>)
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	4bad      	ldr	r3, [pc, #692]	@ (8009464 <logger+0x62c>)
 80091ae:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 80091b0:	4bac      	ldr	r3, [pc, #688]	@ (8009464 <logger+0x62c>)
 80091b2:	2204      	movs	r2, #4
 80091b4:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 80091b6:	4baf      	ldr	r3, [pc, #700]	@ (8009474 <logger+0x63c>)
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	4baa      	ldr	r3, [pc, #680]	@ (8009464 <logger+0x62c>)
 80091bc:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 80091be:	4bae      	ldr	r3, [pc, #696]	@ (8009478 <logger+0x640>)
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	4ba8      	ldr	r3, [pc, #672]	@ (8009464 <logger+0x62c>)
 80091c4:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 80091c6:	4bad      	ldr	r3, [pc, #692]	@ (800947c <logger+0x644>)
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	4ba6      	ldr	r3, [pc, #664]	@ (8009464 <logger+0x62c>)
 80091cc:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 80091ce:	4bac      	ldr	r3, [pc, #688]	@ (8009480 <logger+0x648>)
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	0a1b      	lsrs	r3, r3, #8
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	4ba2      	ldr	r3, [pc, #648]	@ (8009464 <logger+0x62c>)
 80091da:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 80091dc:	4ba8      	ldr	r3, [pc, #672]	@ (8009480 <logger+0x648>)
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	4ba0      	ldr	r3, [pc, #640]	@ (8009464 <logger+0x62c>)
 80091e4:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 80091e6:	4ba7      	ldr	r3, [pc, #668]	@ (8009484 <logger+0x64c>)
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	4b9c      	ldr	r3, [pc, #624]	@ (8009464 <logger+0x62c>)
 80091f2:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 80091f4:	4ba3      	ldr	r3, [pc, #652]	@ (8009484 <logger+0x64c>)
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	4b9a      	ldr	r3, [pc, #616]	@ (8009464 <logger+0x62c>)
 80091fc:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 80091fe:	4ba2      	ldr	r3, [pc, #648]	@ (8009488 <logger+0x650>)
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	4b98      	ldr	r3, [pc, #608]	@ (8009464 <logger+0x62c>)
 8009204:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8009206:	4ba1      	ldr	r3, [pc, #644]	@ (800948c <logger+0x654>)
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	4b96      	ldr	r3, [pc, #600]	@ (8009464 <logger+0x62c>)
 800920c:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 800920e:	4ba0      	ldr	r3, [pc, #640]	@ (8009490 <logger+0x658>)
 8009210:	4aa0      	ldr	r2, [pc, #640]	@ (8009494 <logger+0x65c>)
 8009212:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8009214:	f000 f976 	bl	8009504 <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8009218:	4b90      	ldr	r3, [pc, #576]	@ (800945c <logger+0x624>)
 800921a:	2200      	movs	r2, #0
 800921c:	70da      	strb	r2, [r3, #3]
		goto wifi_event;		//jra		wifi_event;
 800921e:	e002      	b.n	8009226 <logger+0x3ee>
			goto wifi_event;
 8009220:	46c0      	nop			@ (mov r8, r8)
 8009222:	e000      	b.n	8009226 <logger+0x3ee>
		goto wifi_event;
 8009224:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
//;										Evento de wifi
//;----------------------------------------------------------
wifi_event:
		if(flagsEvent[4])		// btjt	flagsEvent,#4,ask_wfE_end;	/ ya había iniciado evento wifi? Sí, checa si ya se termina evento
 8009226:	4b8d      	ldr	r3, [pc, #564]	@ (800945c <logger+0x624>)
 8009228:	791b      	ldrb	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d133      	bne.n	8009296 <logger+0x45e>
			goto ask_wfE_end;
ask_wfE_start:
 800922e:	46c0      	nop			@ (mov r8, r8)
		if(!flagsTxControl[f_statWIFI])// btjf	flagsTxControl,#f_statWIFI,wifi_event_start; Hubo desconexión con servidor Wifi ? Si, inicia evento falla wifi
 8009230:	4b99      	ldr	r3, [pc, #612]	@ (8009498 <logger+0x660>)
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	2201      	movs	r2, #1
 8009236:	4053      	eors	r3, r2
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d05a      	beq.n	80092f4 <logger+0x4bc>
			goto wifi_event_start;
 800923e:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi

wifi_event_start:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeInit_4] = highByte(timeSeconds_HW);	//ldw		WF_timeInit_HW,X
 8009240:	4b8f      	ldr	r3, [pc, #572]	@ (8009480 <logger+0x648>)
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	b29b      	uxth	r3, r3
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b94      	ldr	r3, [pc, #592]	@ (800949c <logger+0x664>)
 800924c:	711a      	strb	r2, [r3, #4]
		BloqEventWiFiEx[WF_timeInit_3] = lowByte(timeSeconds_HW);
 800924e:	4b8c      	ldr	r3, [pc, #560]	@ (8009480 <logger+0x648>)
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b2da      	uxtb	r2, r3
 8009254:	4b91      	ldr	r3, [pc, #580]	@ (800949c <logger+0x664>)
 8009256:	715a      	strb	r2, [r3, #5]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeInit_2] = highByte(timeSeconds_LW);//ldw		WF_timeInit_LW,X;				/ guarda el tiempo de inicio
 8009258:	4b8a      	ldr	r3, [pc, #552]	@ (8009484 <logger+0x64c>)
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	b29b      	uxth	r3, r3
 8009260:	b2da      	uxtb	r2, r3
 8009262:	4b8e      	ldr	r3, [pc, #568]	@ (800949c <logger+0x664>)
 8009264:	719a      	strb	r2, [r3, #6]
		BloqEventWiFiEx[WF_timeInit_1] = lowByte(timeSeconds_LW);
 8009266:	4b87      	ldr	r3, [pc, #540]	@ (8009484 <logger+0x64c>)
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b8b      	ldr	r3, [pc, #556]	@ (800949c <logger+0x664>)
 800926e:	71da      	strb	r2, [r3, #7]

		BloqEventWiFiEx[WF_eventType] = 5;//mov		WF_eventType,#5;				/ carga el tipo de evento (5 para wifi)
 8009270:	4b8a      	ldr	r3, [pc, #552]	@ (800949c <logger+0x664>)
 8009272:	2205      	movs	r2, #5
 8009274:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventWiFiEx[WF_tempAmbInit_H] = tdevl;		//ldw		WF_tempAmbInit,x;				/ carga temperatura ambiente
 8009276:	4b7f      	ldr	r3, [pc, #508]	@ (8009474 <logger+0x63c>)
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	4b88      	ldr	r3, [pc, #544]	@ (800949c <logger+0x664>)
 800927c:	735a      	strb	r2, [r3, #13]
		BloqEventWiFiEx[WF_tempAmbInit_L] = tdevf;
 800927e:	4b7e      	ldr	r3, [pc, #504]	@ (8009478 <logger+0x640>)
 8009280:	781a      	ldrb	r2, [r3, #0]
 8009282:	4b86      	ldr	r3, [pc, #536]	@ (800949c <logger+0x664>)
 8009284:	739a      	strb	r2, [r3, #14]
		BloqEventWiFiEx[WF_voltInit] = voltl;		//mov		WF_voltInit,voltl; /carga voltaje
 8009286:	4b7d      	ldr	r3, [pc, #500]	@ (800947c <logger+0x644>)
 8009288:	781a      	ldrb	r2, [r3, #0]
 800928a:	4b84      	ldr	r3, [pc, #528]	@ (800949c <logger+0x664>)
 800928c:	745a      	strb	r2, [r3, #17]
		flagsEvent[4] = 1;			//bset	flagsEvent,#4;					/ indica que el evento wifi ya inició
 800928e:	4b73      	ldr	r3, [pc, #460]	@ (800945c <logger+0x624>)
 8009290:	2201      	movs	r2, #1
 8009292:	711a      	strb	r2, [r3, #4]
		goto alarm_event;			//jp		alarm_event;						/ continúa
 8009294:	e031      	b.n	80092fa <logger+0x4c2>
			goto ask_wfE_end;
 8009296:	46c0      	nop			@ (mov r8, r8)
ask_wfE_end:
		if(flagsTxControl[f_statWIFI])	//btjt	flagsTxControl,#f_statWIFI,wifi_event_end; Volvió la conexión wifi ? Sí, termina evento falla de wifi
 8009298:	4b7f      	ldr	r3, [pc, #508]	@ (8009498 <logger+0x660>)
 800929a:	789b      	ldrb	r3, [r3, #2]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02b      	beq.n	80092f8 <logger+0x4c0>
			goto wifi_event_end;
 80092a0:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
wifi_event_end:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		WF_timeEnd_HW,X
 80092a2:	4b77      	ldr	r3, [pc, #476]	@ (8009480 <logger+0x648>)
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	4b7b      	ldr	r3, [pc, #492]	@ (800949c <logger+0x664>)
 80092ae:	721a      	strb	r2, [r3, #8]
		BloqEventWiFiEx[WF_timeEnd_3] = lowByte(timeSeconds_HW);
 80092b0:	4b73      	ldr	r3, [pc, #460]	@ (8009480 <logger+0x648>)
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4b79      	ldr	r3, [pc, #484]	@ (800949c <logger+0x664>)
 80092b8:	725a      	strb	r2, [r3, #9]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeEnd_2] = highByte(timeSeconds_LW);//ldw		WF_timeEnd_LW,X;				/ guarda el tiempo final
 80092ba:	4b72      	ldr	r3, [pc, #456]	@ (8009484 <logger+0x64c>)
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	4b75      	ldr	r3, [pc, #468]	@ (800949c <logger+0x664>)
 80092c6:	729a      	strb	r2, [r3, #10]
		BloqEventWiFiEx[WF_timeEnd_1] = lowByte(timeSeconds_LW);
 80092c8:	4b6e      	ldr	r3, [pc, #440]	@ (8009484 <logger+0x64c>)
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	4b73      	ldr	r3, [pc, #460]	@ (800949c <logger+0x664>)
 80092d0:	72da      	strb	r2, [r3, #11]
		//ldw		X,teval
		BloqEventWiFiEx[WF_tempEvaEnd_H] = teval;//ldw		WF_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 80092d2:	4b6d      	ldr	r3, [pc, #436]	@ (8009488 <logger+0x650>)
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	4b71      	ldr	r3, [pc, #452]	@ (800949c <logger+0x664>)
 80092d8:	73da      	strb	r2, [r3, #15]
		BloqEventWiFiEx[WF_tempEvaEnd_L] = tevaf;
 80092da:	4b6c      	ldr	r3, [pc, #432]	@ (800948c <logger+0x654>)
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	4b6f      	ldr	r3, [pc, #444]	@ (800949c <logger+0x664>)
 80092e0:	741a      	strb	r2, [r3, #16]
		//ldw		X,#WF_timeInit_HW
		dirDataLoad = &BloqEventWiFiEx[WF_timeInit_4];//ldw		dirDataLoad,X;					/ indica el inicio del bloque de datos a cargar (evento wifi)
 80092e2:	4b6b      	ldr	r3, [pc, #428]	@ (8009490 <logger+0x658>)
 80092e4:	4a6e      	ldr	r2, [pc, #440]	@ (80094a0 <logger+0x668>)
 80092e6:	601a      	str	r2, [r3, #0]
		load_event();//call	load_event
 80092e8:	f000 f90c 	bl	8009504 <load_event>

		flagsEvent[4] = 0;//bres	flagsEvent,#4;
 80092ec:	4b5b      	ldr	r3, [pc, #364]	@ (800945c <logger+0x624>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	711a      	strb	r2, [r3, #4]

		goto alarm_event;//jra alarm_event;	/continúa
 80092f2:	e002      	b.n	80092fa <logger+0x4c2>
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi
 80092f4:	46c0      	nop			@ (mov r8, r8)
 80092f6:	e000      	b.n	80092fa <logger+0x4c2>
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
 80092f8:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 80092fa:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsWIFI[f_timeLoggerSend])//btjt		flagsWIFI,#f_timeLoggerSend,jmp_fin_logger; No loggear hasta terminar Tx
 80092fc:	4b69      	ldr	r3, [pc, #420]	@ (80094a4 <logger+0x66c>)
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d108      	bne.n	8009316 <logger+0x4de>
			goto jmp_fin_logger;
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 8009304:	4b68      	ldr	r3, [pc, #416]	@ (80094a8 <logger+0x670>)
 8009306:	795b      	ldrb	r3, [r3, #5]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <logger+0x4e2>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 800930c:	4b67      	ldr	r3, [pc, #412]	@ (80094ac <logger+0x674>)
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <logger+0x4e6>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 8009314:	e002      	b.n	800931c <logger+0x4e4>
			goto jmp_fin_logger;
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	e09a      	b.n	8009450 <logger+0x618>
			goto jmp_fin_logger;
 800931a:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 800931c:	e098      	b.n	8009450 <logger+0x618>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 800931e:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 8009320:	4b63      	ldr	r3, [pc, #396]	@ (80094b0 <logger+0x678>)
 8009322:	2251      	movs	r2, #81	@ 0x51
 8009324:	5c9b      	ldrb	r3, [r3, r2]
 8009326:	001a      	movs	r2, r3
 8009328:	233c      	movs	r3, #60	@ 0x3c
 800932a:	4353      	muls	r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	4b5f      	ldr	r3, [pc, #380]	@ (80094ac <logger+0x674>)
 8009330:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG
        //cntLogger_H = 2;  // valor de prueba a cada 10 segundos tomar muestras
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 8009332:	4b53      	ldr	r3, [pc, #332]	@ (8009480 <logger+0x648>)
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	b29b      	uxth	r3, r3
 800933a:	b2da      	uxtb	r2, r3
 800933c:	4b5d      	ldr	r3, [pc, #372]	@ (80094b4 <logger+0x67c>)
 800933e:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 8009340:	4b4f      	ldr	r3, [pc, #316]	@ (8009480 <logger+0x648>)
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b2da      	uxtb	r2, r3
 8009346:	4b5b      	ldr	r3, [pc, #364]	@ (80094b4 <logger+0x67c>)
 8009348:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 800934a:	4b4e      	ldr	r3, [pc, #312]	@ (8009484 <logger+0x64c>)
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	b29b      	uxth	r3, r3
 8009352:	b2da      	uxtb	r2, r3
 8009354:	4b57      	ldr	r3, [pc, #348]	@ (80094b4 <logger+0x67c>)
 8009356:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 8009358:	4b4a      	ldr	r3, [pc, #296]	@ (8009484 <logger+0x64c>)
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b55      	ldr	r3, [pc, #340]	@ (80094b4 <logger+0x67c>)
 8009360:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 8009362:	4b44      	ldr	r3, [pc, #272]	@ (8009474 <logger+0x63c>)
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	4b53      	ldr	r3, [pc, #332]	@ (80094b4 <logger+0x67c>)
 8009368:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 800936a:	4b43      	ldr	r3, [pc, #268]	@ (8009478 <logger+0x640>)
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	4b51      	ldr	r3, [pc, #324]	@ (80094b4 <logger+0x67c>)
 8009370:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 8009372:	4b45      	ldr	r3, [pc, #276]	@ (8009488 <logger+0x650>)
 8009374:	781a      	ldrb	r2, [r3, #0]
 8009376:	4b4f      	ldr	r3, [pc, #316]	@ (80094b4 <logger+0x67c>)
 8009378:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 800937a:	4b44      	ldr	r3, [pc, #272]	@ (800948c <logger+0x654>)
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	4b4d      	ldr	r3, [pc, #308]	@ (80094b4 <logger+0x67c>)
 8009380:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8009382:	4b3e      	ldr	r3, [pc, #248]	@ (800947c <logger+0x644>)
 8009384:	781a      	ldrb	r2, [r3, #0]
 8009386:	4b4b      	ldr	r3, [pc, #300]	@ (80094b4 <logger+0x67c>)
 8009388:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 800938a:	4b4b      	ldr	r3, [pc, #300]	@ (80094b8 <logger+0x680>)
 800938c:	4a4b      	ldr	r2, [pc, #300]	@ (80094bc <logger+0x684>)
 800938e:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8009390:	4b3f      	ldr	r3, [pc, #252]	@ (8009490 <logger+0x658>)
 8009392:	4a48      	ldr	r2, [pc, #288]	@ (80094b4 <logger+0x67c>)
 8009394:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 8009396:	4b4a      	ldr	r3, [pc, #296]	@ (80094c0 <logger+0x688>)
 8009398:	4a4a      	ldr	r2, [pc, #296]	@ (80094c4 <logger+0x68c>)
 800939a:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 800939c:	4b4a      	ldr	r3, [pc, #296]	@ (80094c8 <logger+0x690>)
 800939e:	2260      	movs	r2, #96	@ 0x60
 80093a0:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 80093a2:	4b4a      	ldr	r3, [pc, #296]	@ (80094cc <logger+0x694>)
 80093a4:	2209      	movs	r2, #9
 80093a6:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 80093a8:	4b49      	ldr	r3, [pc, #292]	@ (80094d0 <logger+0x698>)
 80093aa:	781a      	ldrb	r2, [r3, #0]
 80093ac:	4b49      	ldr	r3, [pc, #292]	@ (80094d4 <logger+0x69c>)
 80093ae:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 80093b0:	4b49      	ldr	r3, [pc, #292]	@ (80094d8 <logger+0x6a0>)
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	4b49      	ldr	r3, [pc, #292]	@ (80094dc <logger+0x6a4>)
 80093b6:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 80093b8:	4b44      	ldr	r3, [pc, #272]	@ (80094cc <logger+0x694>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	0019      	movs	r1, r3
 80093be:	2080      	movs	r0, #128	@ 0x80
 80093c0:	f7f6 ff34 	bl	800022c <__divsi3>
 80093c4:	0003      	movs	r3, r0
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	4b45      	ldr	r3, [pc, #276]	@ (80094e0 <logger+0x6a8>)
 80093ca:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 80093cc:	4b44      	ldr	r3, [pc, #272]	@ (80094e0 <logger+0x6a8>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	4a3e      	ldr	r2, [pc, #248]	@ (80094cc <logger+0x694>)
 80093d2:	7812      	ldrb	r2, [r2, #0]
 80093d4:	4353      	muls	r3, r2
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	4b42      	ldr	r3, [pc, #264]	@ (80094e4 <logger+0x6ac>)
 80093da:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         if(cntRegDATA>0)
 80093dc:	4b42      	ldr	r3, [pc, #264]	@ (80094e8 <logger+0x6b0>)
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <logger+0x5b8>
        	 cntRegDATA++;	//incw	X
 80093e4:	4b40      	ldr	r3, [pc, #256]	@ (80094e8 <logger+0x6b0>)
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	4b3e      	ldr	r3, [pc, #248]	@ (80094e8 <logger+0x6b0>)
 80093ee:	801a      	strh	r2, [r3, #0]

		//;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
		//cpw		X,#1343
		if(cntRegDATA<1343)//jrult	no_clrREG_01
 80093f0:	4b3d      	ldr	r3, [pc, #244]	@ (80094e8 <logger+0x6b0>)
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	4a3d      	ldr	r2, [pc, #244]	@ (80094ec <logger+0x6b4>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d903      	bls.n	8009402 <logger+0x5ca>
			goto no_clrREG_01;
		cntRegDATA = 1343;// ldw		X,#1343
 80093fa:	4b3b      	ldr	r3, [pc, #236]	@ (80094e8 <logger+0x6b0>)
 80093fc:	4a3c      	ldr	r2, [pc, #240]	@ (80094f0 <logger+0x6b8>)
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	e000      	b.n	8009404 <logger+0x5cc>
			goto no_clrREG_01;
 8009402:	46c0      	nop			@ (mov r8, r8)
no_clrREG_01:


         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 8009404:	4b38      	ldr	r3, [pc, #224]	@ (80094e8 <logger+0x6b0>)
 8009406:	881a      	ldrh	r2, [r3, #0]
 8009408:	4b3a      	ldr	r3, [pc, #232]	@ (80094f4 <logger+0x6bc>)
 800940a:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 800940c:	4b3a      	ldr	r3, [pc, #232]	@ (80094f8 <logger+0x6c0>)
 800940e:	4a3b      	ldr	r2, [pc, #236]	@ (80094fc <logger+0x6c4>)
 8009410:	601a      	str	r2, [r3, #0]
 		 reeCntRegDATA = cntReg;
 8009412:	4b38      	ldr	r3, [pc, #224]	@ (80094f4 <logger+0x6bc>)
 8009414:	881a      	ldrh	r2, [r3, #0]
 8009416:	4b3a      	ldr	r3, [pc, #232]	@ (8009500 <logger+0x6c8>)
 8009418:	801a      	strh	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 800941a:	f000 f8fb 	bl	8009614 <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 800941e:	4b2d      	ldr	r3, [pc, #180]	@ (80094d4 <logger+0x69c>)
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	4b2b      	ldr	r3, [pc, #172]	@ (80094d0 <logger+0x698>)
 8009424:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 8009426:	4b2d      	ldr	r3, [pc, #180]	@ (80094dc <logger+0x6a4>)
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	4b2b      	ldr	r3, [pc, #172]	@ (80094d8 <logger+0x6a0>)
 800942c:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 800942e:	4b1e      	ldr	r3, [pc, #120]	@ (80094a8 <logger+0x670>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2201      	movs	r2, #1
 8009434:	4053      	eors	r3, r2
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <logger+0x612>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 800943c:	4b1a      	ldr	r3, [pc, #104]	@ (80094a8 <logger+0x670>)
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 8009442:	4b19      	ldr	r3, [pc, #100]	@ (80094a8 <logger+0x670>)
 8009444:	2201      	movs	r2, #1
 8009446:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 8009448:	e002      	b.n	8009450 <logger+0x618>
        	 	 goto noFullLoggerDATA;
 800944a:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 800944c:	e000      	b.n	8009450 <logger+0x618>
		goto fin_logger; //jp fin_logger
 800944e:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 8009450:	46c0      	nop			@ (mov r8, r8)
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	46c0      	nop			@ (mov r8, r8)
 8009458:	20001186 	.word	0x20001186
 800945c:	20000fb0 	.word	0x20000fb0
 8009460:	20000d69 	.word	0x20000d69
 8009464:	20001010 	.word	0x20001010
 8009468:	20000d6a 	.word	0x20000d6a
 800946c:	20000d6b 	.word	0x20000d6b
 8009470:	20000d6c 	.word	0x20000d6c
 8009474:	20000c0c 	.word	0x20000c0c
 8009478:	20000c0d 	.word	0x20000c0d
 800947c:	20000c2a 	.word	0x20000c2a
 8009480:	20000e98 	.word	0x20000e98
 8009484:	20000e9a 	.word	0x20000e9a
 8009488:	20000c0e 	.word	0x20000c0e
 800948c:	20000c0f 	.word	0x20000c0f
 8009490:	20000e90 	.word	0x20000e90
 8009494:	20001014 	.word	0x20001014
 8009498:	200011d4 	.word	0x200011d4
 800949c:	200011e8 	.word	0x200011e8
 80094a0:	200011ec 	.word	0x200011ec
 80094a4:	20001038 	.word	0x20001038
 80094a8:	20000eec 	.word	0x20000eec
 80094ac:	20000e80 	.word	0x20000e80
 80094b0:	200000b8 	.word	0x200000b8
 80094b4:	20000e9c 	.word	0x20000e9c
 80094b8:	20000e8c 	.word	0x20000e8c
 80094bc:	20000d74 	.word	0x20000d74
 80094c0:	20000e88 	.word	0x20000e88
 80094c4:	0803c000 	.word	0x0803c000
 80094c8:	20000e85 	.word	0x20000e85
 80094cc:	20000e86 	.word	0x20000e86
 80094d0:	20000e95 	.word	0x20000e95
 80094d4:	20000e82 	.word	0x20000e82
 80094d8:	20000e94 	.word	0x20000e94
 80094dc:	20000e83 	.word	0x20000e83
 80094e0:	20000930 	.word	0x20000930
 80094e4:	20000bb3 	.word	0x20000bb3
 80094e8:	20001122 	.word	0x20001122
 80094ec:	0000053e 	.word	0x0000053e
 80094f0:	0000053f 	.word	0x0000053f
 80094f4:	20001126 	.word	0x20001126
 80094f8:	20001128 	.word	0x20001128
 80094fc:	0803f810 	.word	0x0803f810
 8009500:	20000d6e 	.word	0x20000d6e

08009504 <load_event>:
void load_event(){
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 8009508:	4b2e      	ldr	r3, [pc, #184]	@ (80095c4 <load_event+0xc0>)
 800950a:	4a2f      	ldr	r2, [pc, #188]	@ (80095c8 <load_event+0xc4>)
 800950c:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 800950e:	4b2f      	ldr	r3, [pc, #188]	@ (80095cc <load_event+0xc8>)
 8009510:	4a2f      	ldr	r2, [pc, #188]	@ (80095d0 <load_event+0xcc>)
 8009512:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 8009514:	4b2f      	ldr	r3, [pc, #188]	@ (80095d4 <load_event+0xd0>)
 8009516:	22a0      	movs	r2, #160	@ 0xa0
 8009518:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 800951a:	4b2f      	ldr	r3, [pc, #188]	@ (80095d8 <load_event+0xd4>)
 800951c:	220e      	movs	r2, #14
 800951e:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 8009520:	4b2e      	ldr	r3, [pc, #184]	@ (80095dc <load_event+0xd8>)
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	4b2e      	ldr	r3, [pc, #184]	@ (80095e0 <load_event+0xdc>)
 8009526:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 8009528:	4b2e      	ldr	r3, [pc, #184]	@ (80095e4 <load_event+0xe0>)
 800952a:	781a      	ldrb	r2, [r3, #0]
 800952c:	4b2e      	ldr	r3, [pc, #184]	@ (80095e8 <load_event+0xe4>)
 800952e:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 8009530:	4b29      	ldr	r3, [pc, #164]	@ (80095d8 <load_event+0xd4>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	0019      	movs	r1, r3
 8009536:	2080      	movs	r0, #128	@ 0x80
 8009538:	f7f6 fe78 	bl	800022c <__divsi3>
 800953c:	0003      	movs	r3, r0
 800953e:	b2da      	uxtb	r2, r3
 8009540:	4b2a      	ldr	r3, [pc, #168]	@ (80095ec <load_event+0xe8>)
 8009542:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 8009544:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <load_event+0xe8>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	4a23      	ldr	r2, [pc, #140]	@ (80095d8 <load_event+0xd4>)
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	4353      	muls	r3, r2
 800954e:	b2da      	uxtb	r2, r3
 8009550:	4b27      	ldr	r3, [pc, #156]	@ (80095f0 <load_event+0xec>)
 8009552:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 8009554:	4b27      	ldr	r3, [pc, #156]	@ (80095f4 <load_event+0xf0>)
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	3301      	adds	r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	4b25      	ldr	r3, [pc, #148]	@ (80095f4 <load_event+0xf0>)
 800955e:	801a      	strh	r2, [r3, #0]
//		;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
//		cpw		X,#1439
//		jrult	no_clrREG_02
//		;clrw	X
//		ldw		X,#1439
		if(cntRegEVENT<1439)
 8009560:	4b24      	ldr	r3, [pc, #144]	@ (80095f4 <load_event+0xf0>)
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	4a24      	ldr	r2, [pc, #144]	@ (80095f8 <load_event+0xf4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d903      	bls.n	8009572 <load_event+0x6e>
			goto no_clrREG_02;
		cntRegEVENT = 1439;
 800956a:	4b22      	ldr	r3, [pc, #136]	@ (80095f4 <load_event+0xf0>)
 800956c:	4a23      	ldr	r2, [pc, #140]	@ (80095fc <load_event+0xf8>)
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e000      	b.n	8009574 <load_event+0x70>
			goto no_clrREG_02;
 8009572:	46c0      	nop			@ (mov r8, r8)
no_clrREG_02:

		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 8009574:	4b1f      	ldr	r3, [pc, #124]	@ (80095f4 <load_event+0xf0>)
 8009576:	881a      	ldrh	r2, [r3, #0]
 8009578:	4b21      	ldr	r3, [pc, #132]	@ (8009600 <load_event+0xfc>)
 800957a:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800957c:	4b21      	ldr	r3, [pc, #132]	@ (8009604 <load_event+0x100>)
 800957e:	4a22      	ldr	r2, [pc, #136]	@ (8009608 <load_event+0x104>)
 8009580:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 8009582:	4b1f      	ldr	r3, [pc, #124]	@ (8009600 <load_event+0xfc>)
 8009584:	881a      	ldrh	r2, [r3, #0]
 8009586:	4b21      	ldr	r3, [pc, #132]	@ (800960c <load_event+0x108>)
 8009588:	801a      	strh	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 800958a:	f000 f843 	bl	8009614 <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 800958e:	4b14      	ldr	r3, [pc, #80]	@ (80095e0 <load_event+0xdc>)
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <load_event+0xd8>)
 8009594:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 8009596:	4b14      	ldr	r3, [pc, #80]	@ (80095e8 <load_event+0xe4>)
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	4b12      	ldr	r3, [pc, #72]	@ (80095e4 <load_event+0xe0>)
 800959c:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 800959e:	4b1c      	ldr	r3, [pc, #112]	@ (8009610 <load_event+0x10c>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2201      	movs	r2, #1
 80095a4:	4053      	eors	r3, r2
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <load_event+0xb6>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 80095ac:	4b18      	ldr	r3, [pc, #96]	@ (8009610 <load_event+0x10c>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 80095b2:	4b17      	ldr	r3, [pc, #92]	@ (8009610 <load_event+0x10c>)
 80095b4:	2201      	movs	r2, #1
 80095b6:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 80095b8:	e000      	b.n	80095bc <load_event+0xb8>
			goto noFullLoggerEVENT;
 80095ba:	46c0      	nop			@ (mov r8, r8)
}
 80095bc:	46c0      	nop			@ (mov r8, r8)
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	46c0      	nop			@ (mov r8, r8)
 80095c4:	20000e8c 	.word	0x20000e8c
 80095c8:	20000df4 	.word	0x20000df4
 80095cc:	20000e88 	.word	0x20000e88
 80095d0:	08037000 	.word	0x08037000
 80095d4:	20000e85 	.word	0x20000e85
 80095d8:	20000e86 	.word	0x20000e86
 80095dc:	20000e97 	.word	0x20000e97
 80095e0:	20000e82 	.word	0x20000e82
 80095e4:	20000e96 	.word	0x20000e96
 80095e8:	20000e83 	.word	0x20000e83
 80095ec:	20000930 	.word	0x20000930
 80095f0:	20000bb3 	.word	0x20000bb3
 80095f4:	20001124 	.word	0x20001124
 80095f8:	0000059e 	.word	0x0000059e
 80095fc:	0000059f 	.word	0x0000059f
 8009600:	20001126 	.word	0x20001126
 8009604:	20001128 	.word	0x20001128
 8009608:	0803f812 	.word	0x0803f812
 800960c:	20000d70 	.word	0x20000d70
 8009610:	20000eec 	.word	0x20000eec

08009614 <load_buffer_logger>:

void load_buffer_logger(){
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 800961a:	4b45      	ldr	r3, [pc, #276]	@ (8009730 <load_buffer_logger+0x11c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 8009620:	4b44      	ldr	r3, [pc, #272]	@ (8009734 <load_buffer_logger+0x120>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 8009626:	4b44      	ldr	r3, [pc, #272]	@ (8009738 <load_buffer_logger+0x124>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	001a      	movs	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	189b      	adds	r3, r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 8009632:	4b42      	ldr	r3, [pc, #264]	@ (800973c <load_buffer_logger+0x128>)
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	781a      	ldrb	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	3301      	adds	r3, #1
 800964a:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 800964c:	4b3b      	ldr	r3, [pc, #236]	@ (800973c <load_buffer_logger+0x128>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	4b39      	ldr	r3, [pc, #228]	@ (800973c <load_buffer_logger+0x128>)
 8009656:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 8009658:	4b37      	ldr	r3, [pc, #220]	@ (8009738 <load_buffer_logger+0x124>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	4b35      	ldr	r3, [pc, #212]	@ (8009738 <load_buffer_logger+0x124>)
 8009662:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 8009664:	4b34      	ldr	r3, [pc, #208]	@ (8009738 <load_buffer_logger+0x124>)
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	4b35      	ldr	r3, [pc, #212]	@ (8009740 <load_buffer_logger+0x12c>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d351      	bcc.n	8009714 <load_buffer_logger+0x100>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 8009670:	4b30      	ldr	r3, [pc, #192]	@ (8009734 <load_buffer_logger+0x120>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	337f      	adds	r3, #127	@ 0x7f
 8009676:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	781a      	ldrb	r2, [r3, #0]
 800967c:	4b31      	ldr	r3, [pc, #196]	@ (8009744 <load_buffer_logger+0x130>)
 800967e:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 8009680:	4b30      	ldr	r3, [pc, #192]	@ (8009744 <load_buffer_logger+0x130>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	3301      	adds	r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	4b2e      	ldr	r3, [pc, #184]	@ (8009744 <load_buffer_logger+0x130>)
 800968a:	701a      	strb	r2, [r3, #0]
		//*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
		*point_X = 1;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2201      	movs	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3b01      	subs	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 800969e:	4b2a      	ldr	r3, [pc, #168]	@ (8009748 <load_buffer_logger+0x134>)
 80096a0:	22aa      	movs	r2, #170	@ 0xaa
 80096a2:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 80096a4:	4b29      	ldr	r3, [pc, #164]	@ (800974c <load_buffer_logger+0x138>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	01db      	lsls	r3, r3, #7
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	4b28      	ldr	r3, [pc, #160]	@ (8009750 <load_buffer_logger+0x13c>)
 80096ae:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 80096b0:	4b28      	ldr	r3, [pc, #160]	@ (8009754 <load_buffer_logger+0x140>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a26      	ldr	r2, [pc, #152]	@ (8009750 <load_buffer_logger+0x13c>)
 80096b6:	8812      	ldrh	r2, [r2, #0]
 80096b8:	189a      	adds	r2, r3, r2
 80096ba:	4b27      	ldr	r3, [pc, #156]	@ (8009758 <load_buffer_logger+0x144>)
 80096bc:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 80096be:	4b1d      	ldr	r3, [pc, #116]	@ (8009734 <load_buffer_logger+0x120>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b26      	ldr	r3, [pc, #152]	@ (800975c <load_buffer_logger+0x148>)
 80096c4:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	607b      	str	r3, [r7, #4]

		GRABA_BLOCK();		//call	GRABA_BLOCK
 80096ca:	f7fd fe63 	bl	8007394 <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 80096ce:	f7fd fd65 	bl	800719c <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 80096d2:	f7fd fd4b 	bl	800716c <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 80096d6:	4b1d      	ldr	r3, [pc, #116]	@ (800974c <load_buffer_logger+0x138>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	4b1b      	ldr	r3, [pc, #108]	@ (800974c <load_buffer_logger+0x138>)
 80096e0:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 80096e2:	4b1a      	ldr	r3, [pc, #104]	@ (800974c <load_buffer_logger+0x138>)
 80096e4:	781a      	ldrb	r2, [r3, #0]
 80096e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009760 <load_buffer_logger+0x14c>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d306      	bcc.n	80096fc <load_buffer_logger+0xe8>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 80096ee:	4b17      	ldr	r3, [pc, #92]	@ (800974c <load_buffer_logger+0x138>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 80096f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009764 <load_buffer_logger+0x150>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	e000      	b.n	80096fe <load_buffer_logger+0xea>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 80096fc:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 80096fe:	f7fd fcfb 	bl	80070f8 <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 8009706:	4b0b      	ldr	r3, [pc, #44]	@ (8009734 <load_buffer_logger+0x120>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 800970c:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <load_buffer_logger+0x124>)
 800970e:	2200      	movs	r2, #0
 8009710:	701a      	strb	r2, [r3, #0]
 8009712:	e000      	b.n	8009716 <load_buffer_logger+0x102>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 8009714:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 8009716:	4b09      	ldr	r3, [pc, #36]	@ (800973c <load_buffer_logger+0x128>)
 8009718:	781a      	ldrb	r2, [r3, #0]
 800971a:	4b13      	ldr	r3, [pc, #76]	@ (8009768 <load_buffer_logger+0x154>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d200      	bcs.n	8009724 <load_buffer_logger+0x110>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 8009722:	e789      	b.n	8009638 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 8009724:	46c0      	nop			@ (mov r8, r8)

}
 8009726:	46c0      	nop			@ (mov r8, r8)
 8009728:	46bd      	mov	sp, r7
 800972a:	b004      	add	sp, #16
 800972c:	bd80      	pop	{r7, pc}
 800972e:	46c0      	nop			@ (mov r8, r8)
 8009730:	20000e90 	.word	0x20000e90
 8009734:	20000e8c 	.word	0x20000e8c
 8009738:	20000e83 	.word	0x20000e83
 800973c:	20000e84 	.word	0x20000e84
 8009740:	20000bb3 	.word	0x20000bb3
 8009744:	20000930 	.word	0x20000930
 8009748:	20000e74 	.word	0x20000e74
 800974c:	20000e82 	.word	0x20000e82
 8009750:	20000932 	.word	0x20000932
 8009754:	20000e88 	.word	0x20000e88
 8009758:	20000e78 	.word	0x20000e78
 800975c:	20000e7c 	.word	0x20000e7c
 8009760:	20000e85 	.word	0x20000e85
 8009764:	20000eec 	.word	0x20000eec
 8009768:	20000e86 	.word	0x20000e86

0800976c <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0

    return timemilis;
 8009770:	4b02      	ldr	r3, [pc, #8]	@ (800977c <millis+0x10>)
 8009772:	681b      	ldr	r3, [r3, #0]
}
 8009774:	0018      	movs	r0, r3
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	46c0      	nop			@ (mov r8, r8)
 800977c:	2000093c 	.word	0x2000093c

08009780 <reconfigura_perif>:

void reconfigura_perif(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
//	HAL_IWDG_Refresh(&hiwdg);
	initEEPROMEmulated(); // Init EEPROM Emulated
 8009784:	f7f8 ffac 	bl	80026e0 <initEEPROMEmulated>

	HAL_Init();
 8009788:	f008 fbc1 	bl	8011f0e <HAL_Init>
	SystemClock_Config();
 800978c:	f000 fa5e 	bl	8009c4c <SystemClock_Config>

	configura_perif_2();
 8009790:	f000 f80c 	bl	80097ac <configura_perif_2>

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8009794:	2007      	movs	r0, #7
 8009796:	f009 ffb2 	bl	80136fe <HAL_NVIC_DisableIRQ>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800979a:	4b03      	ldr	r3, [pc, #12]	@ (80097a8 <reconfigura_perif+0x28>)
 800979c:	0018      	movs	r0, r3
 800979e:	f00f fd59 	bl	8019254 <HAL_RTCEx_DeactivateWakeUpTimer>

}
 80097a2:	46c0      	nop			@ (mov r8, r8)
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20000574 	.word	0x20000574

080097ac <configura_perif_2>:

void configura_perif_2(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 80097b0:	f000 ff40 	bl	800a634 <MX_GPIO_Init>
	  MX_DMA_Init();
 80097b4:	f000 ff18 	bl	800a5e8 <MX_DMA_Init>
	  MX_ADC1_Init();
 80097b8:	f000 fab2 	bl	8009d20 <MX_ADC1_Init>
	  MX_I2C1_Init();
 80097bc:	f000 fc0c 	bl	8009fd8 <MX_I2C1_Init>
	  MX_IWDG_Init();
 80097c0:	f000 fc4c 	bl	800a05c <MX_IWDG_Init>
	  MX_TIM3_Init();
 80097c4:	f000 fdb0 	bl	800a328 <MX_TIM3_Init>
	  MX_TIM6_Init();
 80097c8:	f000 fe30 	bl	800a42c <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80097cc:	f000 fe6e 	bl	800a4ac <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80097d0:	f000 feba 	bl	800a548 <MX_USART4_UART_Init>


}
 80097d4:	46c0      	nop			@ (mov r8, r8)
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 80097e0:	4b21      	ldr	r3, [pc, #132]	@ (8009868 <check_Tick_1ms+0x8c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	4b20      	ldr	r3, [pc, #128]	@ (8009868 <check_Tick_1ms+0x8c>)
 80097e8:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)							// contador prescala 1ms =
 80097ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009868 <check_Tick_1ms+0x8c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	dd0f      	ble.n	8009812 <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 80097f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009868 <check_Tick_1ms+0x8c>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;							// Manuel, levanta flag 1ms
 80097f8:	4b1c      	ldr	r3, [pc, #112]	@ (800986c <check_Tick_1ms+0x90>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 80097fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009870 <check_Tick_1ms+0x94>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <check_Tick_1ms+0x94>)
 8009806:	601a      	str	r2, [r3, #0]
						timemilis++;							// variable contadora de milisegundos
 8009808:	4b1a      	ldr	r3, [pc, #104]	@ (8009874 <check_Tick_1ms+0x98>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	4b19      	ldr	r3, [pc, #100]	@ (8009874 <check_Tick_1ms+0x98>)
 8009810:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)						// contador prescala 10ms
 8009812:	4b17      	ldr	r3, [pc, #92]	@ (8009870 <check_Tick_1ms+0x94>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b09      	cmp	r3, #9
 8009818:	dd0a      	ble.n	8009830 <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 800981a:	4b15      	ldr	r3, [pc, #84]	@ (8009870 <check_Tick_1ms+0x94>)
 800981c:	2200      	movs	r2, #0
 800981e:	601a      	str	r2, [r3, #0]
						tick_10ms =1;							// flag base de tiempo 10ms
 8009820:	4b15      	ldr	r3, [pc, #84]	@ (8009878 <check_Tick_1ms+0x9c>)
 8009822:	2201      	movs	r2, #1
 8009824:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 8009826:	4b15      	ldr	r3, [pc, #84]	@ (800987c <check_Tick_1ms+0xa0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	4b13      	ldr	r3, [pc, #76]	@ (800987c <check_Tick_1ms+0xa0>)
 800982e:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)						// contador prescala 100ms
 8009830:	4b12      	ldr	r3, [pc, #72]	@ (800987c <check_Tick_1ms+0xa0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b09      	cmp	r3, #9
 8009836:	dd0a      	ble.n	800984e <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 8009838:	4b10      	ldr	r3, [pc, #64]	@ (800987c <check_Tick_1ms+0xa0>)
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
						tick_100ms =1;							// flag base de tiempo 100ms
 800983e:	4b10      	ldr	r3, [pc, #64]	@ (8009880 <check_Tick_1ms+0xa4>)
 8009840:	2201      	movs	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 8009844:	4b0f      	ldr	r3, [pc, #60]	@ (8009884 <check_Tick_1ms+0xa8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <check_Tick_1ms+0xa8>)
 800984c:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)							// contador prescala 1s
 800984e:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <check_Tick_1ms+0xa8>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b09      	cmp	r3, #9
 8009854:	dd05      	ble.n	8009862 <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 8009856:	4b0b      	ldr	r3, [pc, #44]	@ (8009884 <check_Tick_1ms+0xa8>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 800985c:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <check_Tick_1ms+0xac>)
 800985e:	2201      	movs	r2, #1
 8009860:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 8009862:	46c0      	nop			@ (mov r8, r8)
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000940 	.word	0x20000940
 800986c:	20000934 	.word	0x20000934
 8009870:	20000944 	.word	0x20000944
 8009874:	2000093c 	.word	0x2000093c
 8009878:	20000935 	.word	0x20000935
 800987c:	20000948 	.word	0x20000948
 8009880:	20000936 	.word	0x20000936
 8009884:	2000094c 	.word	0x2000094c
 8009888:	20000937 	.word	0x20000937

0800988c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initEEPROMEmulated(); // Init EEPROM Emulated
 8009892:	f7f8 ff25 	bl	80026e0 <initEEPROMEmulated>
	timeRstBLE = 1;
 8009896:	4bc6      	ldr	r3, [pc, #792]	@ (8009bb0 <main+0x324>)
 8009898:	2201      	movs	r2, #1
 800989a:	701a      	strb	r2, [r3, #0]
	inicio ();
 800989c:	f7ff f8a4 	bl	80089e8 <inicio>

	ProcesosC = 6;
 80098a0:	4bc4      	ldr	r3, [pc, #784]	@ (8009bb4 <main+0x328>)
 80098a2:	2206      	movs	r2, #6
 80098a4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80098a6:	f008 fb32 	bl	8011f0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80098aa:	f000 f9cf 	bl	8009c4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  configura_perif_2();
 80098ae:	f7ff ff7d 	bl	80097ac <configura_perif_2>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80098b2:	f000 febf 	bl	800a634 <MX_GPIO_Init>
  MX_DMA_Init();
 80098b6:	f000 fe97 	bl	800a5e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80098ba:	f000 fa31 	bl	8009d20 <MX_ADC1_Init>
  MX_I2C1_Init();
 80098be:	f000 fb8b 	bl	8009fd8 <MX_I2C1_Init>
  MX_IWDG_Init();
 80098c2:	f000 fbcb 	bl	800a05c <MX_IWDG_Init>
  MX_RTC_Init();
 80098c6:	f000 fbeb 	bl	800a0a0 <MX_RTC_Init>
  MX_TIM3_Init();
 80098ca:	f000 fd2d 	bl	800a328 <MX_TIM3_Init>
  MX_TIM6_Init();
 80098ce:	f000 fdad 	bl	800a42c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80098d2:	f000 fdeb 	bl	800a4ac <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80098d6:	f000 fe37 	bl	800a548 <MX_USART4_UART_Init>
  MX_TIM1_Init();
 80098da:	f000 fc57 	bl	800a18c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 80098de:	f7fa fea5 	bl	800462c <Modbus_ModbusSalave>
  //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin(reePlantilla[eeAddModBus]);
 80098e2:	4bb5      	ldr	r3, [pc, #724]	@ (8009bb8 <main+0x32c>)
 80098e4:	2272      	movs	r2, #114	@ 0x72
 80098e6:	5c9b      	ldrb	r3, [r3, r2]
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7fa fea5 	bl	8004638 <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 80098ee:	4bb3      	ldr	r3, [pc, #716]	@ (8009bbc <main+0x330>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80098f4:	4bb2      	ldr	r3, [pc, #712]	@ (8009bc0 <main+0x334>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	2104      	movs	r1, #4
 80098fa:	0018      	movs	r0, r3
 80098fc:	f00a ff39 	bl	8014772 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 8009900:	4bb0      	ldr	r3, [pc, #704]	@ (8009bc4 <main+0x338>)
 8009902:	2203      	movs	r2, #3
 8009904:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 8009906:	4baa      	ldr	r3, [pc, #680]	@ (8009bb0 <main+0x324>)
 8009908:	2208      	movs	r2, #8
 800990a:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 800990c:	4bad      	ldr	r3, [pc, #692]	@ (8009bc4 <main+0x338>)
 800990e:	2201      	movs	r2, #1
 8009910:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 8009912:	4bad      	ldr	r3, [pc, #692]	@ (8009bc8 <main+0x33c>)
 8009914:	2201      	movs	r2, #1
 8009916:	2120      	movs	r1, #32
 8009918:	0018      	movs	r0, r3
 800991a:	f00a ff2a 	bl	8014772 <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800991e:	2007      	movs	r0, #7
 8009920:	f009 feed 	bl	80136fe <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8009924:	4ba9      	ldr	r3, [pc, #676]	@ (8009bcc <main+0x340>)
 8009926:	0018      	movs	r0, r3
 8009928:	f00f fc94 	bl	8019254 <HAL_RTCEx_DeactivateWakeUpTimer>

  //HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
  while(Count_Test2 < 130000)
 800992c:	e012      	b.n	8009954 <main+0xc8>
  {
		Count_Test2++;//  eliminar JTA buzzer
 800992e:	4ba8      	ldr	r3, [pc, #672]	@ (8009bd0 <main+0x344>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	4ba6      	ldr	r3, [pc, #664]	@ (8009bd0 <main+0x344>)
 8009936:	601a      	str	r2, [r3, #0]
		if(Count_Test2 == 129999 ) //eliminar JTA buzzer
 8009938:	4ba5      	ldr	r3, [pc, #660]	@ (8009bd0 <main+0x344>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4aa5      	ldr	r2, [pc, #660]	@ (8009bd4 <main+0x348>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d104      	bne.n	800994c <main+0xc0>
		{
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 8009942:	4ba5      	ldr	r3, [pc, #660]	@ (8009bd8 <main+0x34c>)
 8009944:	2104      	movs	r1, #4
 8009946:	0018      	movs	r0, r3
 8009948:	f00f fe6a 	bl	8019620 <HAL_TIM_PWM_Stop>
			//Count_Test2 = 255;//eliminar JTA buzzer
		}
		HAL_IWDG_Refresh(&hiwdg); // Se agrega porque el Wathcdog provoca un reinicio
 800994c:	4ba3      	ldr	r3, [pc, #652]	@ (8009bdc <main+0x350>)
 800994e:	0018      	movs	r0, r3
 8009950:	f00d f95a 	bl	8016c08 <HAL_IWDG_Refresh>
  while(Count_Test2 < 130000)
 8009954:	4b9e      	ldr	r3, [pc, #632]	@ (8009bd0 <main+0x344>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a9e      	ldr	r2, [pc, #632]	@ (8009bd4 <main+0x348>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d9e7      	bls.n	800992e <main+0xa2>
  }
  Count_Test2 = 0;
 800995e:	4b9c      	ldr	r3, [pc, #624]	@ (8009bd0 <main+0x344>)
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]

  asm ("nop");
 8009964:	46c0      	nop			@ (mov r8, r8)

  for (int i = 0; i < 1000; i++)
 8009966:	2300      	movs	r3, #0
 8009968:	607b      	str	r3, [r7, #4]
 800996a:	e009      	b.n	8009980 <main+0xf4>
  {
	  HAL_Delay (1);
 800996c:	2001      	movs	r0, #1
 800996e:	f008 fb49 	bl	8012004 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8009972:	4b9a      	ldr	r3, [pc, #616]	@ (8009bdc <main+0x350>)
 8009974:	0018      	movs	r0, r3
 8009976:	f00d f947 	bl	8016c08 <HAL_IWDG_Refresh>
  for (int i = 0; i < 1000; i++)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3301      	adds	r3, #1
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	23fa      	movs	r3, #250	@ 0xfa
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	429a      	cmp	r2, r3
 8009988:	dbf0      	blt.n	800996c <main+0xe0>


  while (1)
  {

testTimmingProcess:
 800998a:	46c0      	nop			@ (mov r8, r8)
	ProcesosC++;
 800998c:	4b89      	ldr	r3, [pc, #548]	@ (8009bb4 <main+0x328>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	3301      	adds	r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	4b87      	ldr	r3, [pc, #540]	@ (8009bb4 <main+0x328>)
 8009996:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 8009998:	e000      	b.n	800999c <main+0x110>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 800999a:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 800999c:	4b90      	ldr	r3, [pc, #576]	@ (8009be0 <main+0x354>)
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2201      	movs	r2, #1
 80099a2:	4013      	ands	r3, r2
 80099a4:	d0f9      	beq.n	800999a <main+0x10e>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 80099a6:	4b8e      	ldr	r3, [pc, #568]	@ (8009be0 <main+0x354>)
 80099a8:	691a      	ldr	r2, [r3, #16]
 80099aa:	4b8d      	ldr	r3, [pc, #564]	@ (8009be0 <main+0x354>)
 80099ac:	2101      	movs	r1, #1
 80099ae:	438a      	bics	r2, r1
 80099b0:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 80099b2:	4b8a      	ldr	r3, [pc, #552]	@ (8009bdc <main+0x350>)
 80099b4:	0018      	movs	r0, r3
 80099b6:	f00d f927 	bl	8016c08 <HAL_IWDG_Refresh>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO6 toogle test
 80099ba:	2380      	movs	r3, #128	@ 0x80
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	4a82      	ldr	r2, [pc, #520]	@ (8009bc8 <main+0x33c>)
 80099c0:	0019      	movs	r1, r3
 80099c2:	0010      	movs	r0, r2
 80099c4:	f00a fef2 	bl	80147ac <HAL_GPIO_TogglePin>
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 80099c8:	4b86      	ldr	r3, [pc, #536]	@ (8009be4 <main+0x358>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	4b84      	ldr	r3, [pc, #528]	@ (8009be4 <main+0x358>)
 80099d2:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 80099d4:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80099d6:	f7fb fdff 	bl	80055d8 <main10>

    muestreo();
 80099da:	f000 fef5 	bl	800a7c8 <muestreo>

  	if(StateSleep == 0x55){
 80099de:	4b82      	ldr	r3, [pc, #520]	@ (8009be8 <main+0x35c>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b55      	cmp	r3, #85	@ 0x55
 80099e4:	d101      	bne.n	80099ea <main+0x15e>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 80099e6:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 80099e8:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80099ea:	f7fb fe77 	bl	80056dc <retardoDeActuadores>

  	asm ("nop");
 80099ee:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 80099f0:	f7ff fef4 	bl	80097dc <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 80099f4:	4b6e      	ldr	r3, [pc, #440]	@ (8009bb0 <main+0x324>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <main+0x184>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 80099fc:	4b70      	ldr	r3, [pc, #448]	@ (8009bc0 <main+0x334>)
 80099fe:	2201      	movs	r2, #1
 8009a00:	2140      	movs	r1, #64	@ 0x40
 8009a02:	0018      	movs	r0, r3
 8009a04:	f00a feb5 	bl	8014772 <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 8009a08:	4b6e      	ldr	r3, [pc, #440]	@ (8009bc4 <main+0x338>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	e018      	b.n	8009a42 <main+0x1b6>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 8009a10:	4b6b      	ldr	r3, [pc, #428]	@ (8009bc0 <main+0x334>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	2140      	movs	r1, #64	@ 0x40
 8009a16:	0018      	movs	r0, r3
 8009a18:	f00a feab 	bl	8014772 <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 8009a1c:	4b69      	ldr	r3, [pc, #420]	@ (8009bc4 <main+0x338>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d00b      	beq.n	8009a3c <main+0x1b0>
 8009a24:	dc0d      	bgt.n	8009a42 <main+0x1b6>
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d002      	beq.n	8009a30 <main+0x1a4>
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d003      	beq.n	8009a36 <main+0x1aa>
 8009a2e:	e008      	b.n	8009a42 <main+0x1b6>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8009a30:	f7fb fa08 	bl	8004e44 <SetUpBluetooth_Ble>
 8009a34:	e005      	b.n	8009a42 <main+0x1b6>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 8009a36:	f7fb fa6d 	bl	8004f14 <GetParamBluetooth_Ble>
 8009a3a:	e002      	b.n	8009a42 <main+0x1b6>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 8009a3c:	f7fb faca 	bl	8004fd4 <TransmitReceive_Ble>
 8009a40:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 8009a42:	f7fb fd1d 	bl	8005480 <Read_Inpunts_ble>
//  			flagsLogger [5] = 0;				// permite loggeo de datos
//  		}
//  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
//  	}

  	if(tick_1s){
 8009a46:	4b69      	ldr	r3, [pc, #420]	@ (8009bec <main+0x360>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d006      	beq.n	8009a5c <main+0x1d0>
  	  asm ("nop");
 8009a4e:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 8009a50:	4b67      	ldr	r3, [pc, #412]	@ (8009bf0 <main+0x364>)
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	4b65      	ldr	r3, [pc, #404]	@ (8009bf0 <main+0x364>)
 8009a5a:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 8009a5c:	4b65      	ldr	r3, [pc, #404]	@ (8009bf4 <main+0x368>)
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <main+0x1e4>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 8009a64:	4b64      	ldr	r3, [pc, #400]	@ (8009bf8 <main+0x36c>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	4b62      	ldr	r3, [pc, #392]	@ (8009bf8 <main+0x36c>)
 8009a6e:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  		  		HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 8009a70:	4962      	ldr	r1, [pc, #392]	@ (8009bfc <main+0x370>)
 8009a72:	4b56      	ldr	r3, [pc, #344]	@ (8009bcc <main+0x340>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	0018      	movs	r0, r3
 8009a78:	f00f f95a 	bl	8018d30 <HAL_RTC_GetTime>
  		  		HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 8009a7c:	4960      	ldr	r1, [pc, #384]	@ (8009c00 <main+0x374>)
 8009a7e:	4b53      	ldr	r3, [pc, #332]	@ (8009bcc <main+0x340>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	0018      	movs	r0, r3
 8009a84:	f00f fa5e 	bl	8018f44 <HAL_RTC_GetDate>
  		  		timeBCD_year = hRtcDate.Year;
 8009a88:	4b5d      	ldr	r3, [pc, #372]	@ (8009c00 <main+0x374>)
 8009a8a:	78da      	ldrb	r2, [r3, #3]
 8009a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8009c04 <main+0x378>)
 8009a8e:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_month = hRtcDate.Month;
 8009a90:	4b5b      	ldr	r3, [pc, #364]	@ (8009c00 <main+0x374>)
 8009a92:	785a      	ldrb	r2, [r3, #1]
 8009a94:	4b5c      	ldr	r3, [pc, #368]	@ (8009c08 <main+0x37c>)
 8009a96:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_day = hRtcDate.Date;
 8009a98:	4b59      	ldr	r3, [pc, #356]	@ (8009c00 <main+0x374>)
 8009a9a:	789a      	ldrb	r2, [r3, #2]
 8009a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8009c0c <main+0x380>)
 8009a9e:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_hour = hRtcTime.Hours;
 8009aa0:	4b56      	ldr	r3, [pc, #344]	@ (8009bfc <main+0x370>)
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8009c10 <main+0x384>)
 8009aa6:	701a      	strb	r2, [r3, #0]
    	  		timeBCD_min = hRtcTime.Minutes;
 8009aa8:	4b54      	ldr	r3, [pc, #336]	@ (8009bfc <main+0x370>)
 8009aaa:	785a      	ldrb	r2, [r3, #1]
 8009aac:	4b59      	ldr	r3, [pc, #356]	@ (8009c14 <main+0x388>)
 8009aae:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_sec = hRtcTime.Seconds;
 8009ab0:	4b52      	ldr	r3, [pc, #328]	@ (8009bfc <main+0x370>)
 8009ab2:	789a      	ldrb	r2, [r3, #2]
 8009ab4:	4b58      	ldr	r3, [pc, #352]	@ (8009c18 <main+0x38c>)
 8009ab6:	701a      	strb	r2, [r3, #0]


  		  		timeBCD_to_UNIX();
 8009ab8:	f7ff f94a 	bl	8008d50 <timeBCD_to_UNIX>
  		  		//------------------------------------------------------------------------------------------
  		  		calculando_tiempo_UNIX ();
 8009abc:	f7fb feac 	bl	8005818 <calculando_tiempo_UNIX>
//------------------------------------------------------------------------------------------
  		  		if(!flagsTime[f_timeConfigRTC]){
 8009ac0:	4b56      	ldr	r3, [pc, #344]	@ (8009c1c <main+0x390>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	4053      	eors	r3, r2
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d119      	bne.n	8009b02 <main+0x276>
  		  			goto noActTime;
  		  		}

  		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 8009ace:	4b54      	ldr	r3, [pc, #336]	@ (8009c20 <main+0x394>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	4b53      	ldr	r3, [pc, #332]	@ (8009c24 <main+0x398>)
 8009ad8:	801a      	strh	r2, [r3, #0]
  		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 8009ada:	4b51      	ldr	r3, [pc, #324]	@ (8009c20 <main+0x394>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	4b51      	ldr	r3, [pc, #324]	@ (8009c28 <main+0x39c>)
 8009ae2:	801a      	strh	r2, [r3, #0]

  		  		if(timeBCD_sec_ANT == timeBCD_sec){
 8009ae4:	4b51      	ldr	r3, [pc, #324]	@ (8009c2c <main+0x3a0>)
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8009c18 <main+0x38c>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d00a      	beq.n	8009b06 <main+0x27a>
  		  			goto no_inc_cnt_sec;
  		  		}
  		  		timeBCD_sec_ANT = timeBCD_sec;
 8009af0:	4b49      	ldr	r3, [pc, #292]	@ (8009c18 <main+0x38c>)
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	4b4d      	ldr	r3, [pc, #308]	@ (8009c2c <main+0x3a0>)
 8009af6:	701a      	strb	r2, [r3, #0]
  		  		// Se comenta el decremento en tiempo de logger y se coloca aqui por cuestiones de presición de Reloj
  		  		// CGM 14/04/2025
  		  		decword(&cntLogger_H);
 8009af8:	4b4d      	ldr	r3, [pc, #308]	@ (8009c30 <main+0x3a4>)
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7fd fc51 	bl	80073a2 <decword>
 8009b00:	e002      	b.n	8009b08 <main+0x27c>
  		  			goto noActTime;
 8009b02:	46c0      	nop			@ (mov r8, r8)
 8009b04:	e000      	b.n	8009b08 <main+0x27c>
  		  			goto no_inc_cnt_sec;
 8009b06:	46c0      	nop			@ (mov r8, r8)
  		  no_inc_cnt_sec:
  		  noActTime:
		  asm ("nop");
 8009b08:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 8009b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bb4 <main+0x328>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b07      	cmp	r3, #7
 8009b10:	d83c      	bhi.n	8009b8c <main+0x300>
 8009b12:	009a      	lsls	r2, r3, #2
 8009b14:	4b47      	ldr	r3, [pc, #284]	@ (8009c34 <main+0x3a8>)
 8009b16:	18d3      	adds	r3, r2, r3
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 8009b1c:	f7fd fe06 	bl	800772c <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 8009b20:	e038      	b.n	8009b94 <main+0x308>
  	  		case 1:
  	  			voltmetro();
 8009b22:	f007 ff7b 	bl	8011a1c <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 8009b26:	e035      	b.n	8009b94 <main+0x308>
  	  		case 2:
  	  			temper();
 8009b28:	f002 ff5a 	bl	800c9e0 <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 8009b2c:	e032      	b.n	8009b94 <main+0x308>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 8009b2e:	4b42      	ldr	r3, [pc, #264]	@ (8009c38 <main+0x3ac>)
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	2240      	movs	r2, #64	@ 0x40
 8009b34:	4013      	ands	r3, r2
 8009b36:	d005      	beq.n	8009b44 <main+0x2b8>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 8009b38:	4b21      	ldr	r3, [pc, #132]	@ (8009bc0 <main+0x334>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2104      	movs	r1, #4
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f00a fe17 	bl	8014772 <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 8009b44:	f7f9 fd3c 	bl	80035c0 <ModbusMap>
  	  			noctar ();
 8009b48:	f001 f894 	bl	800ac74 <noctar>
  	  			break;		// ASM: Pendiente a traducir
 8009b4c:	e022      	b.n	8009b94 <main+0x308>
  	  		case 4:
  	  			refrigera();
 8009b4e:	f001 f897 	bl	800ac80 <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 8009b52:	e01f      	b.n	8009b94 <main+0x308>
  	  		case 5:
  	  			display();
 8009b54:	f7fe fba0 	bl	8008298 <display>
  	  			break;		// ASM: Pendiente a traducir
 8009b58:	e01c      	b.n	8009b94 <main+0x308>
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 8009b5a:	f003 ff3f 	bl	800d9dc <tiempo>
  	  			//if(bandera_act_fw_j == 0)    //Parche
  	  			//{
  	  				logger ();				// ASM: Pendiente a traducir
 8009b5e:	f7ff f96b 	bl	8008e38 <logger>
  	  			//}
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 8009b62:	f004 fad3 	bl	800e10c <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 8009b66:	4b35      	ldr	r3, [pc, #212]	@ (8009c3c <main+0x3b0>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2baa      	cmp	r3, #170	@ 0xaa
 8009b6c:	d111      	bne.n	8009b92 <main+0x306>
  	  			    asm ("nop");
 8009b6e:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 8009b70:	4b33      	ldr	r3, [pc, #204]	@ (8009c40 <main+0x3b4>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10c      	bne.n	8009b92 <main+0x306>
  	  				    asm ("nop");
 8009b78:	46c0      	nop			@ (mov r8, r8)
 	  					bootloader();
 8009b7a:	f7fb fd1d 	bl	80055b8 <bootloader>
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 8009b7e:	e008      	b.n	8009b92 <main+0x306>
  	  		case 7:
  	  			watch();
 8009b80:	f008 f894 	bl	8011cac <watch>
  	  			ProcesosC = 255;
 8009b84:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <main+0x328>)
 8009b86:	22ff      	movs	r2, #255	@ 0xff
 8009b88:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 8009b8a:	e003      	b.n	8009b94 <main+0x308>
  	  		default:
  	  		    asm ("nop");
 8009b8c:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 8009b8e:	46c0      	nop			@ (mov r8, r8)
 8009b90:	e7fd      	b.n	8009b8e <main+0x302>
  	  			break;		// ASM: Pendiente a traducir
 8009b92:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8009b94:	4b17      	ldr	r3, [pc, #92]	@ (8009bf4 <main+0x368>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 8009b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8009c44 <main+0x3b8>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 8009ba0:	4b29      	ldr	r3, [pc, #164]	@ (8009c48 <main+0x3bc>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8009ba6:	4b11      	ldr	r3, [pc, #68]	@ (8009bec <main+0x360>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	701a      	strb	r2, [r3, #0]
  {
 8009bac:	e6ee      	b.n	800998c <main+0x100>
 8009bae:	46c0      	nop			@ (mov r8, r8)
 8009bb0:	20000fd0 	.word	0x20000fd0
 8009bb4:	20000950 	.word	0x20000950
 8009bb8:	20000ce8 	.word	0x20000ce8
 8009bbc:	20000939 	.word	0x20000939
 8009bc0:	50000800 	.word	0x50000800
 8009bc4:	2000004c 	.word	0x2000004c
 8009bc8:	50000400 	.word	0x50000400
 8009bcc:	20000574 	.word	0x20000574
 8009bd0:	200011cc 	.word	0x200011cc
 8009bd4:	0001fbcf 	.word	0x0001fbcf
 8009bd8:	200005f0 	.word	0x200005f0
 8009bdc:	20000560 	.word	0x20000560
 8009be0:	40001000 	.word	0x40001000
 8009be4:	200003d9 	.word	0x200003d9
 8009be8:	20000951 	.word	0x20000951
 8009bec:	20000937 	.word	0x20000937
 8009bf0:	20000b62 	.word	0x20000b62
 8009bf4:	20000934 	.word	0x20000934
 8009bf8:	2000106c 	.word	0x2000106c
 8009bfc:	20001160 	.word	0x20001160
 8009c00:	20001174 	.word	0x20001174
 8009c04:	20001158 	.word	0x20001158
 8009c08:	20001159 	.word	0x20001159
 8009c0c:	2000115a 	.word	0x2000115a
 8009c10:	2000115b 	.word	0x2000115b
 8009c14:	2000115c 	.word	0x2000115c
 8009c18:	2000115d 	.word	0x2000115d
 8009c1c:	20001150 	.word	0x20001150
 8009c20:	20001180 	.word	0x20001180
 8009c24:	20000e98 	.word	0x20000e98
 8009c28:	20000e9a 	.word	0x20000e9a
 8009c2c:	200011d1 	.word	0x200011d1
 8009c30:	20000e80 	.word	0x20000e80
 8009c34:	0801c684 	.word	0x0801c684
 8009c38:	40004c00 	.word	0x40004c00
 8009c3c:	20000fcc 	.word	0x20000fcc
 8009c40:	20000f01 	.word	0x20000f01
 8009c44:	20000935 	.word	0x20000935
 8009c48:	20000936 	.word	0x20000936

08009c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c4c:	b590      	push	{r4, r7, lr}
 8009c4e:	b099      	sub	sp, #100	@ 0x64
 8009c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c52:	2414      	movs	r4, #20
 8009c54:	193b      	adds	r3, r7, r4
 8009c56:	0018      	movs	r0, r3
 8009c58:	234c      	movs	r3, #76	@ 0x4c
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	f012 fa71 	bl	801c144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c62:	1d3b      	adds	r3, r7, #4
 8009c64:	0018      	movs	r0, r3
 8009c66:	2310      	movs	r3, #16
 8009c68:	001a      	movs	r2, r3
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	f012 fa6a 	bl	801c144 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c70:	2380      	movs	r3, #128	@ 0x80
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	0018      	movs	r0, r3
 8009c76:	f00c ffe5 	bl	8016c44 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009c7a:	f00c ffd5 	bl	8016c28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009c7e:	4a27      	ldr	r2, [pc, #156]	@ (8009d1c <SystemClock_Config+0xd0>)
 8009c80:	2390      	movs	r3, #144	@ 0x90
 8009c82:	58d3      	ldr	r3, [r2, r3]
 8009c84:	4925      	ldr	r1, [pc, #148]	@ (8009d1c <SystemClock_Config+0xd0>)
 8009c86:	2218      	movs	r2, #24
 8009c88:	4393      	bics	r3, r2
 8009c8a:	2290      	movs	r2, #144	@ 0x90
 8009c8c:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8009c8e:	193b      	adds	r3, r7, r4
 8009c90:	2206      	movs	r2, #6
 8009c92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009c94:	193b      	adds	r3, r7, r4
 8009c96:	2281      	movs	r2, #129	@ 0x81
 8009c98:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009c9a:	193b      	adds	r3, r7, r4
 8009c9c:	2280      	movs	r2, #128	@ 0x80
 8009c9e:	0052      	lsls	r2, r2, #1
 8009ca0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009ca2:	0021      	movs	r1, r4
 8009ca4:	187b      	adds	r3, r7, r1
 8009ca6:	2240      	movs	r2, #64	@ 0x40
 8009ca8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009caa:	187b      	adds	r3, r7, r1
 8009cac:	2202      	movs	r2, #2
 8009cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009cb6:	187b      	adds	r3, r7, r1
 8009cb8:	2200      	movs	r2, #0
 8009cba:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 7;
 8009cbc:	187b      	adds	r3, r7, r1
 8009cbe:	2207      	movs	r2, #7
 8009cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009cc2:	187b      	adds	r3, r7, r1
 8009cc4:	2280      	movs	r2, #128	@ 0x80
 8009cc6:	0292      	lsls	r2, r2, #10
 8009cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009cca:	187b      	adds	r3, r7, r1
 8009ccc:	2280      	movs	r2, #128	@ 0x80
 8009cce:	0492      	lsls	r2, r2, #18
 8009cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009cd2:	187b      	adds	r3, r7, r1
 8009cd4:	2280      	movs	r2, #128	@ 0x80
 8009cd6:	0592      	lsls	r2, r2, #22
 8009cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009cda:	187b      	adds	r3, r7, r1
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f00d f851 	bl	8016d84 <HAL_RCC_OscConfig>
 8009ce2:	1e03      	subs	r3, r0, #0
 8009ce4:	d001      	beq.n	8009cea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8009ce6:	f000 fd69 	bl	800a7bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009cea:	1d3b      	adds	r3, r7, #4
 8009cec:	2207      	movs	r2, #7
 8009cee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009cf0:	1d3b      	adds	r3, r7, #4
 8009cf2:	2203      	movs	r2, #3
 8009cf4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009cf6:	1d3b      	adds	r3, r7, #4
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009cfc:	1d3b      	adds	r3, r7, #4
 8009cfe:	2200      	movs	r2, #0
 8009d00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009d02:	1d3b      	adds	r3, r7, #4
 8009d04:	2102      	movs	r1, #2
 8009d06:	0018      	movs	r0, r3
 8009d08:	f00d fc66 	bl	80175d8 <HAL_RCC_ClockConfig>
 8009d0c:	1e03      	subs	r3, r0, #0
 8009d0e:	d001      	beq.n	8009d14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8009d10:	f000 fd54 	bl	800a7bc <Error_Handler>
  }
}
 8009d14:	46c0      	nop			@ (mov r8, r8)
 8009d16:	46bd      	mov	sp, r7
 8009d18:	b019      	add	sp, #100	@ 0x64
 8009d1a:	bd90      	pop	{r4, r7, pc}
 8009d1c:	40021000 	.word	0x40021000

08009d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	@ 0x28
 8009d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 8009d26:	4b9c      	ldr	r3, [pc, #624]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009d28:	4a9c      	ldr	r2, [pc, #624]	@ (8009f9c <MX_ADC1_Init+0x27c>)
 8009d2a:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 8009d2c:	4b9a      	ldr	r3, [pc, #616]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8009f9c <MX_ADC1_Init+0x27c>)
 8009d30:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 8009d32:	4b9b      	ldr	r3, [pc, #620]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d36:	4b9a      	ldr	r3, [pc, #616]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d38:	2180      	movs	r1, #128	@ 0x80
 8009d3a:	0349      	lsls	r1, r1, #13
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8009d40:	4b97      	ldr	r3, [pc, #604]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d44:	4b96      	ldr	r3, [pc, #600]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d46:	2104      	movs	r1, #4
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8009d4c:	4b94      	ldr	r3, [pc, #592]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d50:	4b93      	ldr	r3, [pc, #588]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d52:	2101      	movs	r1, #1
 8009d54:	430a      	orrs	r2, r1
 8009d56:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 8009d58:	4b91      	ldr	r3, [pc, #580]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d5c:	4b90      	ldr	r3, [pc, #576]	@ (8009fa0 <MX_ADC1_Init+0x280>)
 8009d5e:	2110      	movs	r1, #16
 8009d60:	430a      	orrs	r2, r1
 8009d62:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 8009d64:	4b8f      	ldr	r3, [pc, #572]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4b8e      	ldr	r3, [pc, #568]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d6a:	210f      	movs	r1, #15
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8009d70:	4b8c      	ldr	r3, [pc, #560]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	4b8b      	ldr	r3, [pc, #556]	@ (8009fa4 <MX_ADC1_Init+0x284>)
 8009d76:	210f      	movs	r1, #15
 8009d78:	438a      	bics	r2, r1
 8009d7a:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8009d7c:	23a0      	movs	r3, #160	@ 0xa0
 8009d7e:	05db      	lsls	r3, r3, #23
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	23a0      	movs	r3, #160	@ 0xa0
 8009d84:	05db      	lsls	r3, r3, #23
 8009d86:	21fc      	movs	r1, #252	@ 0xfc
 8009d88:	0209      	lsls	r1, r1, #8
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8009d8e:	23a0      	movs	r3, #160	@ 0xa0
 8009d90:	05db      	lsls	r3, r3, #23
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	23a0      	movs	r3, #160	@ 0xa0
 8009d96:	05db      	lsls	r3, r3, #23
 8009d98:	4983      	ldr	r1, [pc, #524]	@ (8009fa8 <MX_ADC1_Init+0x288>)
 8009d9a:	400a      	ands	r2, r1
 8009d9c:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 8009d9e:	4b83      	ldr	r3, [pc, #524]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b82      	ldr	r3, [pc, #520]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009da4:	210c      	movs	r1, #12
 8009da6:	430a      	orrs	r2, r1
 8009da8:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8009daa:	4b80      	ldr	r3, [pc, #512]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	4b7f      	ldr	r3, [pc, #508]	@ (8009fac <MX_ADC1_Init+0x28c>)
 8009db0:	210c      	movs	r1, #12
 8009db2:	438a      	bics	r2, r1
 8009db4:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 8009db6:	4b78      	ldr	r3, [pc, #480]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009db8:	22c0      	movs	r2, #192	@ 0xc0
 8009dba:	0612      	lsls	r2, r2, #24
 8009dbc:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 8009dbe:	4b76      	ldr	r3, [pc, #472]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 8009dc4:	4b74      	ldr	r3, [pc, #464]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009dc6:	2280      	movs	r2, #128	@ 0x80
 8009dc8:	0552      	lsls	r2, r2, #21
 8009dca:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 8009dcc:	4b72      	ldr	r3, [pc, #456]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009dce:	4a78      	ldr	r2, [pc, #480]	@ (8009fb0 <MX_ADC1_Init+0x290>)
 8009dd0:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009dd2:	231c      	movs	r3, #28
 8009dd4:	18fb      	adds	r3, r7, r3
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	230c      	movs	r3, #12
 8009dda:	001a      	movs	r2, r3
 8009ddc:	2100      	movs	r1, #0
 8009dde:	f012 f9b1 	bl	801c144 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8009de2:	1d3b      	adds	r3, r7, #4
 8009de4:	0018      	movs	r0, r3
 8009de6:	2318      	movs	r3, #24
 8009de8:	001a      	movs	r2, r3
 8009dea:	2100      	movs	r1, #0
 8009dec:	f012 f9aa 	bl	801c144 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009df0:	4b70      	ldr	r3, [pc, #448]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009df2:	4a69      	ldr	r2, [pc, #420]	@ (8009f98 <MX_ADC1_Init+0x278>)
 8009df4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009df6:	4b6f      	ldr	r3, [pc, #444]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009df8:	22c0      	movs	r2, #192	@ 0xc0
 8009dfa:	0612      	lsls	r2, r2, #24
 8009dfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8009dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e00:	2208      	movs	r2, #8
 8009e02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009e04:	4b6b      	ldr	r3, [pc, #428]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8009e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e0c:	2280      	movs	r2, #128	@ 0x80
 8009e0e:	0612      	lsls	r2, r2, #24
 8009e10:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009e12:	4b68      	ldr	r3, [pc, #416]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e14:	2204      	movs	r2, #4
 8009e16:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009e18:	4b66      	ldr	r3, [pc, #408]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8009e1e:	4b65      	ldr	r3, [pc, #404]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009e24:	4b63      	ldr	r3, [pc, #396]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8009e2a:	4b62      	ldr	r3, [pc, #392]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009e30:	4b60      	ldr	r3, [pc, #384]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e32:	2220      	movs	r2, #32
 8009e34:	2100      	movs	r1, #0
 8009e36:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009e38:	4b5e      	ldr	r3, [pc, #376]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009e44:	4b5b      	ldr	r3, [pc, #364]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e46:	222c      	movs	r2, #44	@ 0x2c
 8009e48:	2100      	movs	r1, #0
 8009e4a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009e4c:	4b59      	ldr	r3, [pc, #356]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009e52:	4b58      	ldr	r3, [pc, #352]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009e58:	4b56      	ldr	r3, [pc, #344]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e5a:	223c      	movs	r2, #60	@ 0x3c
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8009e60:	4b54      	ldr	r3, [pc, #336]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e62:	2280      	movs	r2, #128	@ 0x80
 8009e64:	0592      	lsls	r2, r2, #22
 8009e66:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009e68:	4b52      	ldr	r3, [pc, #328]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f008 fb32 	bl	80124d4 <HAL_ADC_Init>
 8009e70:	1e03      	subs	r3, r0, #0
 8009e72:	d001      	beq.n	8009e78 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8009e74:	f000 fca2 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009e78:	211c      	movs	r1, #28
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009e80:	187b      	adds	r3, r7, r1
 8009e82:	2201      	movs	r2, #1
 8009e84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009e86:	187a      	adds	r2, r7, r1
 8009e88:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009e8a:	0011      	movs	r1, r2
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f008 fd65 	bl	801295c <HAL_ADC_ConfigChannel>
 8009e92:	1e03      	subs	r3, r0, #0
 8009e94:	d001      	beq.n	8009e9a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8009e96:	f000 fc91 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009e9a:	211c      	movs	r1, #28
 8009e9c:	187b      	adds	r3, r7, r1
 8009e9e:	4a46      	ldr	r2, [pc, #280]	@ (8009fb8 <MX_ADC1_Init+0x298>)
 8009ea0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ea2:	187a      	adds	r2, r7, r1
 8009ea4:	4b43      	ldr	r3, [pc, #268]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009ea6:	0011      	movs	r1, r2
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f008 fd57 	bl	801295c <HAL_ADC_ConfigChannel>
 8009eae:	1e03      	subs	r3, r0, #0
 8009eb0:	d001      	beq.n	8009eb6 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8009eb2:	f000 fc83 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009eb6:	211c      	movs	r1, #28
 8009eb8:	187b      	adds	r3, r7, r1
 8009eba:	4a40      	ldr	r2, [pc, #256]	@ (8009fbc <MX_ADC1_Init+0x29c>)
 8009ebc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ebe:	187a      	adds	r2, r7, r1
 8009ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009ec2:	0011      	movs	r1, r2
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f008 fd49 	bl	801295c <HAL_ADC_ConfigChannel>
 8009eca:	1e03      	subs	r3, r0, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8009ece:	f000 fc75 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009ed2:	211c      	movs	r1, #28
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8009fc0 <MX_ADC1_Init+0x2a0>)
 8009ed8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009eda:	187a      	adds	r2, r7, r1
 8009edc:	4b35      	ldr	r3, [pc, #212]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009ede:	0011      	movs	r1, r2
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f008 fd3b 	bl	801295c <HAL_ADC_ConfigChannel>
 8009ee6:	1e03      	subs	r3, r0, #0
 8009ee8:	d001      	beq.n	8009eee <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8009eea:	f000 fc67 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009eee:	211c      	movs	r1, #28
 8009ef0:	187b      	adds	r3, r7, r1
 8009ef2:	4a34      	ldr	r2, [pc, #208]	@ (8009fc4 <MX_ADC1_Init+0x2a4>)
 8009ef4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ef6:	187a      	adds	r2, r7, r1
 8009ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009efa:	0011      	movs	r1, r2
 8009efc:	0018      	movs	r0, r3
 8009efe:	f008 fd2d 	bl	801295c <HAL_ADC_ConfigChannel>
 8009f02:	1e03      	subs	r3, r0, #0
 8009f04:	d001      	beq.n	8009f0a <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8009f06:	f000 fc59 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009f0a:	211c      	movs	r1, #28
 8009f0c:	187b      	adds	r3, r7, r1
 8009f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8009fc8 <MX_ADC1_Init+0x2a8>)
 8009f10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f12:	187a      	adds	r2, r7, r1
 8009f14:	4b27      	ldr	r3, [pc, #156]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f16:	0011      	movs	r1, r2
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f008 fd1f 	bl	801295c <HAL_ADC_ConfigChannel>
 8009f1e:	1e03      	subs	r3, r0, #0
 8009f20:	d001      	beq.n	8009f26 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8009f22:	f000 fc4b 	bl	800a7bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8009f26:	211c      	movs	r1, #28
 8009f28:	187b      	adds	r3, r7, r1
 8009f2a:	4a28      	ldr	r2, [pc, #160]	@ (8009fcc <MX_ADC1_Init+0x2ac>)
 8009f2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f2e:	187a      	adds	r2, r7, r1
 8009f30:	4b20      	ldr	r3, [pc, #128]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f32:	0011      	movs	r1, r2
 8009f34:	0018      	movs	r0, r3
 8009f36:	f008 fd11 	bl	801295c <HAL_ADC_ConfigChannel>
 8009f3a:	1e03      	subs	r3, r0, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8009f3e:	f000 fc3d 	bl	800a7bc <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8009f42:	1d3b      	adds	r3, r7, #4
 8009f44:	4a22      	ldr	r2, [pc, #136]	@ (8009fd0 <MX_ADC1_Init+0x2b0>)
 8009f46:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8009f48:	1d3b      	adds	r3, r7, #4
 8009f4a:	22c0      	movs	r2, #192	@ 0xc0
 8009f4c:	0412      	lsls	r2, r2, #16
 8009f4e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009f50:	1d3a      	adds	r2, r7, #4
 8009f52:	4b18      	ldr	r3, [pc, #96]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f54:	0011      	movs	r1, r2
 8009f56:	0018      	movs	r0, r3
 8009f58:	f008 fe6c 	bl	8012c34 <HAL_ADC_AnalogWDGConfig>
 8009f5c:	1e03      	subs	r3, r0, #0
 8009f5e:	d001      	beq.n	8009f64 <MX_ADC1_Init+0x244>
  {
    Error_Handler();
 8009f60:	f000 fc2c 	bl	800a7bc <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8009f64:	1d3b      	adds	r3, r7, #4
 8009f66:	4a1b      	ldr	r2, [pc, #108]	@ (8009fd4 <MX_ADC1_Init+0x2b4>)
 8009f68:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009f6a:	1d3a      	adds	r2, r7, #4
 8009f6c:	4b11      	ldr	r3, [pc, #68]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f6e:	0011      	movs	r1, r2
 8009f70:	0018      	movs	r0, r3
 8009f72:	f008 fe5f 	bl	8012c34 <HAL_ADC_AnalogWDGConfig>
 8009f76:	1e03      	subs	r3, r0, #0
 8009f78:	d001      	beq.n	8009f7e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8009f7a:	f000 fc1f 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8009f7e:	46c0      	nop			@ (mov r8, r8)
 8009f80:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb4 <MX_ADC1_Init+0x294>)
 8009f82:	0018      	movs	r0, r3
 8009f84:	f009 f9ce 	bl	8013324 <HAL_ADCEx_Calibration_Start>
 8009f88:	1e03      	subs	r3, r0, #0
 8009f8a:	d1f9      	bne.n	8009f80 <MX_ADC1_Init+0x260>

  /* USER CODE END ADC1_Init 2 */

}
 8009f8c:	46c0      	nop			@ (mov r8, r8)
 8009f8e:	46c0      	nop			@ (mov r8, r8)
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b00a      	add	sp, #40	@ 0x28
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	40012400 	.word	0x40012400
 8009f9c:	0fff0000 	.word	0x0fff0000
 8009fa0:	40021000 	.word	0x40021000
 8009fa4:	50000800 	.word	0x50000800
 8009fa8:	ffff03ff 	.word	0xffff03ff
 8009fac:	50000400 	.word	0x50000400
 8009fb0:	00044603 	.word	0x00044603
 8009fb4:	200003e8 	.word	0x200003e8
 8009fb8:	04000002 	.word	0x04000002
 8009fbc:	24000200 	.word	0x24000200
 8009fc0:	28000400 	.word	0x28000400
 8009fc4:	38004000 	.word	0x38004000
 8009fc8:	3c008000 	.word	0x3c008000
 8009fcc:	48040000 	.word	0x48040000
 8009fd0:	0017ffff 	.word	0x0017ffff
 8009fd4:	0027ffff 	.word	0x0027ffff

08009fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009fdc:	4b1c      	ldr	r3, [pc, #112]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009fde:	4a1d      	ldr	r2, [pc, #116]	@ (800a054 <MX_I2C1_Init+0x7c>)
 8009fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8009fe2:	4b1b      	ldr	r3, [pc, #108]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009fe4:	4a1c      	ldr	r2, [pc, #112]	@ (800a058 <MX_I2C1_Init+0x80>)
 8009fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009fe8:	4b19      	ldr	r3, [pc, #100]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009fee:	4b18      	ldr	r3, [pc, #96]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009ff4:	4b16      	ldr	r3, [pc, #88]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009ffa:	4b15      	ldr	r3, [pc, #84]	@ (800a050 <MX_I2C1_Init+0x78>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a000:	4b13      	ldr	r3, [pc, #76]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a002:	2200      	movs	r2, #0
 800a004:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a006:	4b12      	ldr	r3, [pc, #72]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a008:	2200      	movs	r2, #0
 800a00a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a00c:	4b10      	ldr	r3, [pc, #64]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a00e:	2200      	movs	r2, #0
 800a010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a012:	4b0f      	ldr	r3, [pc, #60]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a014:	0018      	movs	r0, r3
 800a016:	f00a fc23 	bl	8014860 <HAL_I2C_Init>
 800a01a:	1e03      	subs	r3, r0, #0
 800a01c:	d001      	beq.n	800a022 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a01e:	f000 fbcd 	bl	800a7bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800a022:	2380      	movs	r3, #128	@ 0x80
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	4b0a      	ldr	r3, [pc, #40]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a028:	0011      	movs	r1, r2
 800a02a:	0018      	movs	r0, r3
 800a02c:	f00c fcca 	bl	80169c4 <HAL_I2CEx_ConfigAnalogFilter>
 800a030:	1e03      	subs	r3, r0, #0
 800a032:	d001      	beq.n	800a038 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800a034:	f000 fbc2 	bl	800a7bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a038:	4b05      	ldr	r3, [pc, #20]	@ (800a050 <MX_I2C1_Init+0x78>)
 800a03a:	2100      	movs	r1, #0
 800a03c:	0018      	movs	r0, r3
 800a03e:	f00c fd0d 	bl	8016a5c <HAL_I2CEx_ConfigDigitalFilter>
 800a042:	1e03      	subs	r3, r0, #0
 800a044:	d001      	beq.n	800a04a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800a046:	f000 fbb9 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a04a:	46c0      	nop			@ (mov r8, r8)
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	2000044c 	.word	0x2000044c
 800a054:	40005400 	.word	0x40005400
 800a058:	201060ff 	.word	0x201060ff

0800a05c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a060:	4b0d      	ldr	r3, [pc, #52]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a062:	4a0e      	ldr	r2, [pc, #56]	@ (800a09c <MX_IWDG_Init+0x40>)
 800a064:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800a066:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a068:	2200      	movs	r2, #0
 800a06a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 800;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a06e:	22c8      	movs	r2, #200	@ 0xc8
 800a070:	0092      	lsls	r2, r2, #2
 800a072:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 800;
 800a074:	4b08      	ldr	r3, [pc, #32]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a076:	22c8      	movs	r2, #200	@ 0xc8
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 800a07c:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a07e:	2200      	movs	r2, #0
 800a080:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a082:	4b05      	ldr	r3, [pc, #20]	@ (800a098 <MX_IWDG_Init+0x3c>)
 800a084:	0018      	movs	r0, r3
 800a086:	f00c fd35 	bl	8016af4 <HAL_IWDG_Init>
 800a08a:	1e03      	subs	r3, r0, #0
 800a08c:	d001      	beq.n	800a092 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 800a08e:	f000 fb95 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a092:	46c0      	nop			@ (mov r8, r8)
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20000560 	.word	0x20000560
 800a09c:	40003000 	.word	0x40003000

0800a0a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	2314      	movs	r3, #20
 800a0ac:	001a      	movs	r2, r3
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f012 f848 	bl	801c144 <memset>
  RTC_DateTypeDef sDate = {0};
 800a0b4:	003b      	movs	r3, r7
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a0ba:	4b32      	ldr	r3, [pc, #200]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0bc:	4a32      	ldr	r2, [pc, #200]	@ (800a188 <MX_RTC_Init+0xe8>)
 800a0be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a0c0:	4b30      	ldr	r3, [pc, #192]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a0c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0c8:	227f      	movs	r2, #127	@ 0x7f
 800a0ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0ce:	22ff      	movs	r2, #255	@ 0xff
 800a0d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a0d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a0d8:	4b2a      	ldr	r3, [pc, #168]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a0de:	4b29      	ldr	r3, [pc, #164]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a0e4:	4b27      	ldr	r3, [pc, #156]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0e6:	2280      	movs	r2, #128	@ 0x80
 800a0e8:	05d2      	lsls	r2, r2, #23
 800a0ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a0ec:	4b25      	ldr	r3, [pc, #148]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800a0f2:	4b24      	ldr	r3, [pc, #144]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a0f8:	4b22      	ldr	r3, [pc, #136]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f00e fcb2 	bl	8018a64 <HAL_RTC_Init>
 800a100:	1e03      	subs	r3, r0, #0
 800a102:	d001      	beq.n	800a108 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 800a104:	f000 fb5a 	bl	800a7bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800a108:	1d3b      	adds	r3, r7, #4
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800a10e:	1d3b      	adds	r3, r7, #4
 800a110:	2200      	movs	r2, #0
 800a112:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	2200      	movs	r2, #0
 800a118:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a11a:	1d3b      	adds	r3, r7, #4
 800a11c:	2200      	movs	r2, #0
 800a11e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a120:	1d3b      	adds	r3, r7, #4
 800a122:	2200      	movs	r2, #0
 800a124:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a126:	1d39      	adds	r1, r7, #4
 800a128:	4b16      	ldr	r3, [pc, #88]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	0018      	movs	r0, r3
 800a12e:	f00e fd3f 	bl	8018bb0 <HAL_RTC_SetTime>
 800a132:	1e03      	subs	r3, r0, #0
 800a134:	d001      	beq.n	800a13a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800a136:	f000 fb41 	bl	800a7bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a13a:	003b      	movs	r3, r7
 800a13c:	2201      	movs	r2, #1
 800a13e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800a140:	003b      	movs	r3, r7
 800a142:	2201      	movs	r2, #1
 800a144:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800a146:	003b      	movs	r3, r7
 800a148:	2201      	movs	r2, #1
 800a14a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800a14c:	003b      	movs	r3, r7
 800a14e:	2200      	movs	r2, #0
 800a150:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a152:	0039      	movs	r1, r7
 800a154:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a156:	2201      	movs	r2, #1
 800a158:	0018      	movs	r0, r3
 800a15a:	f00e fe4d 	bl	8018df8 <HAL_RTC_SetDate>
 800a15e:	1e03      	subs	r3, r0, #0
 800a160:	d001      	beq.n	800a166 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800a162:	f000 fb2b 	bl	800a7bc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800a166:	2380      	movs	r3, #128	@ 0x80
 800a168:	0199      	lsls	r1, r3, #6
 800a16a:	4806      	ldr	r0, [pc, #24]	@ (800a184 <MX_RTC_Init+0xe4>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	2200      	movs	r2, #0
 800a170:	f00e ffce 	bl	8019110 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a174:	1e03      	subs	r3, r0, #0
 800a176:	d001      	beq.n	800a17c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800a178:	f000 fb20 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a17c:	46c0      	nop			@ (mov r8, r8)
 800a17e:	46bd      	mov	sp, r7
 800a180:	b006      	add	sp, #24
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000574 	.word	0x20000574
 800a188:	40002800 	.word	0x40002800

0800a18c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b09c      	sub	sp, #112	@ 0x70
 800a190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a192:	2360      	movs	r3, #96	@ 0x60
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	0018      	movs	r0, r3
 800a198:	2310      	movs	r3, #16
 800a19a:	001a      	movs	r2, r3
 800a19c:	2100      	movs	r1, #0
 800a19e:	f011 ffd1 	bl	801c144 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1a2:	2354      	movs	r3, #84	@ 0x54
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	001a      	movs	r2, r3
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	f011 ffc9 	bl	801c144 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1b2:	2338      	movs	r3, #56	@ 0x38
 800a1b4:	18fb      	adds	r3, r7, r3
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	231c      	movs	r3, #28
 800a1ba:	001a      	movs	r2, r3
 800a1bc:	2100      	movs	r1, #0
 800a1be:	f011 ffc1 	bl	801c144 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a1c2:	1d3b      	adds	r3, r7, #4
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	2334      	movs	r3, #52	@ 0x34
 800a1c8:	001a      	movs	r2, r3
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	f011 ffba 	bl	801c144 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a1d0:	4b51      	ldr	r3, [pc, #324]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1d2:	4a52      	ldr	r2, [pc, #328]	@ (800a31c <MX_TIM1_Init+0x190>)
 800a1d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a1d6:	4b50      	ldr	r3, [pc, #320]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1dc:	4b4e      	ldr	r3, [pc, #312]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14000;
 800a1e2:	4b4d      	ldr	r3, [pc, #308]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1e4:	4a4e      	ldr	r2, [pc, #312]	@ (800a320 <MX_TIM1_Init+0x194>)
 800a1e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1e8:	4b4b      	ldr	r3, [pc, #300]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a1ee:	4b4a      	ldr	r3, [pc, #296]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1f4:	4b48      	ldr	r3, [pc, #288]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a1fa:	4b47      	ldr	r3, [pc, #284]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f00f f875 	bl	80192ec <HAL_TIM_Base_Init>
 800a202:	1e03      	subs	r3, r0, #0
 800a204:	d001      	beq.n	800a20a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800a206:	f000 fad9 	bl	800a7bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a20a:	2160      	movs	r1, #96	@ 0x60
 800a20c:	187b      	adds	r3, r7, r1
 800a20e:	2280      	movs	r2, #128	@ 0x80
 800a210:	0152      	lsls	r2, r2, #5
 800a212:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a214:	187a      	adds	r2, r7, r1
 800a216:	4b40      	ldr	r3, [pc, #256]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a218:	0011      	movs	r1, r2
 800a21a:	0018      	movs	r0, r3
 800a21c:	f00f fb86 	bl	801992c <HAL_TIM_ConfigClockSource>
 800a220:	1e03      	subs	r3, r0, #0
 800a222:	d001      	beq.n	800a228 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800a224:	f000 faca 	bl	800a7bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a228:	4b3b      	ldr	r3, [pc, #236]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a22a:	0018      	movs	r0, r3
 800a22c:	f00f f8b6 	bl	801939c <HAL_TIM_PWM_Init>
 800a230:	1e03      	subs	r3, r0, #0
 800a232:	d001      	beq.n	800a238 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800a234:	f000 fac2 	bl	800a7bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a238:	2154      	movs	r1, #84	@ 0x54
 800a23a:	187b      	adds	r3, r7, r1
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a240:	187b      	adds	r3, r7, r1
 800a242:	2200      	movs	r2, #0
 800a244:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a246:	187b      	adds	r3, r7, r1
 800a248:	2200      	movs	r2, #0
 800a24a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a24c:	187a      	adds	r2, r7, r1
 800a24e:	4b32      	ldr	r3, [pc, #200]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a250:	0011      	movs	r1, r2
 800a252:	0018      	movs	r0, r3
 800a254:	f010 f820 	bl	801a298 <HAL_TIMEx_MasterConfigSynchronization>
 800a258:	1e03      	subs	r3, r0, #0
 800a25a:	d001      	beq.n	800a260 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800a25c:	f000 faae 	bl	800a7bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a260:	2138      	movs	r1, #56	@ 0x38
 800a262:	187b      	adds	r3, r7, r1
 800a264:	2260      	movs	r2, #96	@ 0x60
 800a266:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7000;
 800a268:	187b      	adds	r3, r7, r1
 800a26a:	4a2e      	ldr	r2, [pc, #184]	@ (800a324 <MX_TIM1_Init+0x198>)
 800a26c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a26e:	187b      	adds	r3, r7, r1
 800a270:	2200      	movs	r2, #0
 800a272:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a274:	187b      	adds	r3, r7, r1
 800a276:	2200      	movs	r2, #0
 800a278:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a27a:	187b      	adds	r3, r7, r1
 800a27c:	2200      	movs	r2, #0
 800a27e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a280:	187b      	adds	r3, r7, r1
 800a282:	2200      	movs	r2, #0
 800a284:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a286:	187b      	adds	r3, r7, r1
 800a288:	2200      	movs	r2, #0
 800a28a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a28c:	1879      	adds	r1, r7, r1
 800a28e:	4b22      	ldr	r3, [pc, #136]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a290:	2208      	movs	r2, #8
 800a292:	0018      	movs	r0, r3
 800a294:	f00f fa4a 	bl	801972c <HAL_TIM_PWM_ConfigChannel>
 800a298:	1e03      	subs	r3, r0, #0
 800a29a:	d001      	beq.n	800a2a0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800a29c:	f000 fa8e 	bl	800a7bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a2a0:	1d3b      	adds	r3, r7, #4
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a2a6:	1d3b      	adds	r3, r7, #4
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a2ac:	1d3b      	adds	r3, r7, #4
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a2b2:	1d3b      	adds	r3, r7, #4
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a2b8:	1d3b      	adds	r3, r7, #4
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a2be:	1d3b      	adds	r3, r7, #4
 800a2c0:	2280      	movs	r2, #128	@ 0x80
 800a2c2:	0192      	lsls	r2, r2, #6
 800a2c4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a2c6:	1d3b      	adds	r3, r7, #4
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a2d2:	1d3b      	adds	r3, r7, #4
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a2d8:	1d3b      	adds	r3, r7, #4
 800a2da:	2280      	movs	r2, #128	@ 0x80
 800a2dc:	0492      	lsls	r2, r2, #18
 800a2de:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a2e0:	1d3b      	adds	r3, r7, #4
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a2ec:	1d3b      	adds	r3, r7, #4
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a2f2:	1d3a      	adds	r2, r7, #4
 800a2f4:	4b08      	ldr	r3, [pc, #32]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a2f6:	0011      	movs	r1, r2
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f010 f83b 	bl	801a374 <HAL_TIMEx_ConfigBreakDeadTime>
 800a2fe:	1e03      	subs	r3, r0, #0
 800a300:	d001      	beq.n	800a306 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800a302:	f000 fa5b 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a306:	4b04      	ldr	r3, [pc, #16]	@ (800a318 <MX_TIM1_Init+0x18c>)
 800a308:	0018      	movs	r0, r3
 800a30a:	f002 f84d 	bl	800c3a8 <HAL_TIM_MspPostInit>

}
 800a30e:	46c0      	nop			@ (mov r8, r8)
 800a310:	46bd      	mov	sp, r7
 800a312:	b01c      	add	sp, #112	@ 0x70
 800a314:	bd80      	pop	{r7, pc}
 800a316:	46c0      	nop			@ (mov r8, r8)
 800a318:	200005a4 	.word	0x200005a4
 800a31c:	40012c00 	.word	0x40012c00
 800a320:	000036b0 	.word	0x000036b0
 800a324:	00001b58 	.word	0x00001b58

0800a328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08e      	sub	sp, #56	@ 0x38
 800a32c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a32e:	2328      	movs	r3, #40	@ 0x28
 800a330:	18fb      	adds	r3, r7, r3
 800a332:	0018      	movs	r0, r3
 800a334:	2310      	movs	r3, #16
 800a336:	001a      	movs	r2, r3
 800a338:	2100      	movs	r1, #0
 800a33a:	f011 ff03 	bl	801c144 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a33e:	231c      	movs	r3, #28
 800a340:	18fb      	adds	r3, r7, r3
 800a342:	0018      	movs	r0, r3
 800a344:	230c      	movs	r3, #12
 800a346:	001a      	movs	r2, r3
 800a348:	2100      	movs	r1, #0
 800a34a:	f011 fefb 	bl	801c144 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a34e:	003b      	movs	r3, r7
 800a350:	0018      	movs	r0, r3
 800a352:	231c      	movs	r3, #28
 800a354:	001a      	movs	r2, r3
 800a356:	2100      	movs	r1, #0
 800a358:	f011 fef4 	bl	801c144 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a35c:	4b2f      	ldr	r3, [pc, #188]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a35e:	4a30      	ldr	r2, [pc, #192]	@ (800a420 <MX_TIM3_Init+0xf8>)
 800a360:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a362:	4b2e      	ldr	r3, [pc, #184]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a364:	2200      	movs	r2, #0
 800a366:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a368:	4b2c      	ldr	r3, [pc, #176]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14000;
 800a36e:	4b2b      	ldr	r3, [pc, #172]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a370:	4a2c      	ldr	r2, [pc, #176]	@ (800a424 <MX_TIM3_Init+0xfc>)
 800a372:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a374:	4b29      	ldr	r3, [pc, #164]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a376:	2200      	movs	r2, #0
 800a378:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a37a:	4b28      	ldr	r3, [pc, #160]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a380:	4b26      	ldr	r3, [pc, #152]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a382:	0018      	movs	r0, r3
 800a384:	f00e ffb2 	bl	80192ec <HAL_TIM_Base_Init>
 800a388:	1e03      	subs	r3, r0, #0
 800a38a:	d001      	beq.n	800a390 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800a38c:	f000 fa16 	bl	800a7bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a390:	2128      	movs	r1, #40	@ 0x28
 800a392:	187b      	adds	r3, r7, r1
 800a394:	2280      	movs	r2, #128	@ 0x80
 800a396:	0152      	lsls	r2, r2, #5
 800a398:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a39a:	187a      	adds	r2, r7, r1
 800a39c:	4b1f      	ldr	r3, [pc, #124]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a39e:	0011      	movs	r1, r2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f00f fac3 	bl	801992c <HAL_TIM_ConfigClockSource>
 800a3a6:	1e03      	subs	r3, r0, #0
 800a3a8:	d001      	beq.n	800a3ae <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800a3aa:	f000 fa07 	bl	800a7bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f00e fff3 	bl	801939c <HAL_TIM_PWM_Init>
 800a3b6:	1e03      	subs	r3, r0, #0
 800a3b8:	d001      	beq.n	800a3be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800a3ba:	f000 f9ff 	bl	800a7bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3be:	211c      	movs	r1, #28
 800a3c0:	187b      	adds	r3, r7, r1
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3c6:	187b      	adds	r3, r7, r1
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a3cc:	187a      	adds	r2, r7, r1
 800a3ce:	4b13      	ldr	r3, [pc, #76]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a3d0:	0011      	movs	r1, r2
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f00f ff60 	bl	801a298 <HAL_TIMEx_MasterConfigSynchronization>
 800a3d8:	1e03      	subs	r3, r0, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800a3dc:	f000 f9ee 	bl	800a7bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a3e0:	003b      	movs	r3, r7
 800a3e2:	2260      	movs	r2, #96	@ 0x60
 800a3e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7000;
 800a3e6:	003b      	movs	r3, r7
 800a3e8:	4a0f      	ldr	r2, [pc, #60]	@ (800a428 <MX_TIM3_Init+0x100>)
 800a3ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3ec:	003b      	movs	r3, r7
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3f2:	003b      	movs	r3, r7
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a3f8:	0039      	movs	r1, r7
 800a3fa:	4b08      	ldr	r3, [pc, #32]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	0018      	movs	r0, r3
 800a400:	f00f f994 	bl	801972c <HAL_TIM_PWM_ConfigChannel>
 800a404:	1e03      	subs	r3, r0, #0
 800a406:	d001      	beq.n	800a40c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800a408:	f000 f9d8 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a40c:	4b03      	ldr	r3, [pc, #12]	@ (800a41c <MX_TIM3_Init+0xf4>)
 800a40e:	0018      	movs	r0, r3
 800a410:	f001 ffca 	bl	800c3a8 <HAL_TIM_MspPostInit>

}
 800a414:	46c0      	nop			@ (mov r8, r8)
 800a416:	46bd      	mov	sp, r7
 800a418:	b00e      	add	sp, #56	@ 0x38
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200005f0 	.word	0x200005f0
 800a420:	40000400 	.word	0x40000400
 800a424:	000036b0 	.word	0x000036b0
 800a428:	00001b58 	.word	0x00001b58

0800a42c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	0018      	movs	r0, r3
 800a436:	230c      	movs	r3, #12
 800a438:	001a      	movs	r2, r3
 800a43a:	2100      	movs	r1, #0
 800a43c:	f011 fe82 	bl	801c144 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a440:	4b18      	ldr	r3, [pc, #96]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a442:	4a19      	ldr	r2, [pc, #100]	@ (800a4a8 <MX_TIM6_Init+0x7c>)
 800a444:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 800a446:	4b17      	ldr	r3, [pc, #92]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a448:	221f      	movs	r2, #31
 800a44a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a44c:	4b15      	ldr	r3, [pc, #84]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a44e:	2200      	movs	r2, #0
 800a450:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 438;
 800a452:	4b14      	ldr	r3, [pc, #80]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a454:	22db      	movs	r2, #219	@ 0xdb
 800a456:	0052      	lsls	r2, r2, #1
 800a458:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a45a:	4b12      	ldr	r3, [pc, #72]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a460:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a462:	0018      	movs	r0, r3
 800a464:	f00e ff42 	bl	80192ec <HAL_TIM_Base_Init>
 800a468:	1e03      	subs	r3, r0, #0
 800a46a:	d001      	beq.n	800a470 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800a46c:	f000 f9a6 	bl	800a7bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a470:	1d3b      	adds	r3, r7, #4
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a476:	1d3b      	adds	r3, r7, #4
 800a478:	2200      	movs	r2, #0
 800a47a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a47c:	1d3a      	adds	r2, r7, #4
 800a47e:	4b09      	ldr	r3, [pc, #36]	@ (800a4a4 <MX_TIM6_Init+0x78>)
 800a480:	0011      	movs	r1, r2
 800a482:	0018      	movs	r0, r3
 800a484:	f00f ff08 	bl	801a298 <HAL_TIMEx_MasterConfigSynchronization>
 800a488:	1e03      	subs	r3, r0, #0
 800a48a:	d001      	beq.n	800a490 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800a48c:	f000 f996 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 800a490:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <MX_TIM6_Init+0x7c>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	4b04      	ldr	r3, [pc, #16]	@ (800a4a8 <MX_TIM6_Init+0x7c>)
 800a496:	2101      	movs	r1, #1
 800a498:	430a      	orrs	r2, r1
 800a49a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 800a49c:	46c0      	nop			@ (mov r8, r8)
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	b004      	add	sp, #16
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	2000063c 	.word	0x2000063c
 800a4a8:	40001000 	.word	0x40001000

0800a4ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a4b0:	4b23      	ldr	r3, [pc, #140]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4b2:	4a24      	ldr	r2, [pc, #144]	@ (800a544 <MX_USART2_UART_Init+0x98>)
 800a4b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a4b6:	4b22      	ldr	r3, [pc, #136]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4b8:	22e1      	movs	r2, #225	@ 0xe1
 800a4ba:	0252      	lsls	r2, r2, #9
 800a4bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a4be:	4b20      	ldr	r3, [pc, #128]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4d2:	220c      	movs	r2, #12
 800a4d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4dc:	4b18      	ldr	r3, [pc, #96]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a4e2:	4b17      	ldr	r3, [pc, #92]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a4e8:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a4ee:	4b14      	ldr	r3, [pc, #80]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a4f4:	4b12      	ldr	r3, [pc, #72]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f00f ffd8 	bl	801a4ac <HAL_UART_Init>
 800a4fc:	1e03      	subs	r3, r0, #0
 800a4fe:	d001      	beq.n	800a504 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a500:	f000 f95c 	bl	800a7bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a504:	4b0e      	ldr	r3, [pc, #56]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a506:	2100      	movs	r1, #0
 800a508:	0018      	movs	r0, r3
 800a50a:	f011 fc67 	bl	801bddc <HAL_UARTEx_SetTxFifoThreshold>
 800a50e:	1e03      	subs	r3, r0, #0
 800a510:	d001      	beq.n	800a516 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a512:	f000 f953 	bl	800a7bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a516:	4b0a      	ldr	r3, [pc, #40]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a518:	2100      	movs	r1, #0
 800a51a:	0018      	movs	r0, r3
 800a51c:	f011 fc9e 	bl	801be5c <HAL_UARTEx_SetRxFifoThreshold>
 800a520:	1e03      	subs	r3, r0, #0
 800a522:	d001      	beq.n	800a528 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a524:	f000 f94a 	bl	800a7bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a528:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <MX_USART2_UART_Init+0x94>)
 800a52a:	0018      	movs	r0, r3
 800a52c:	f011 fc1c 	bl	801bd68 <HAL_UARTEx_DisableFifoMode>
 800a530:	1e03      	subs	r3, r0, #0
 800a532:	d001      	beq.n	800a538 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a534:	f000 f942 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a538:	46c0      	nop			@ (mov r8, r8)
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	46c0      	nop			@ (mov r8, r8)
 800a540:	20000688 	.word	0x20000688
 800a544:	40004400 	.word	0x40004400

0800a548 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a54c:	4b24      	ldr	r3, [pc, #144]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a54e:	4a25      	ldr	r2, [pc, #148]	@ (800a5e4 <MX_USART4_UART_Init+0x9c>)
 800a550:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800a552:	4b23      	ldr	r3, [pc, #140]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a554:	2296      	movs	r2, #150	@ 0x96
 800a556:	0212      	lsls	r2, r2, #8
 800a558:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800a55a:	4b21      	ldr	r3, [pc, #132]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a55c:	2280      	movs	r2, #128	@ 0x80
 800a55e:	0152      	lsls	r2, r2, #5
 800a560:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a562:	4b1f      	ldr	r3, [pc, #124]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a564:	2200      	movs	r2, #0
 800a566:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800a568:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a56a:	2280      	movs	r2, #128	@ 0x80
 800a56c:	00d2      	lsls	r2, r2, #3
 800a56e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a570:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a572:	220c      	movs	r2, #12
 800a574:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a576:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a578:	2200      	movs	r2, #0
 800a57a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a57c:	4b18      	ldr	r3, [pc, #96]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a57e:	2200      	movs	r2, #0
 800a580:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a582:	4b17      	ldr	r3, [pc, #92]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a584:	2200      	movs	r2, #0
 800a586:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a588:	4b15      	ldr	r3, [pc, #84]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a58e:	4b14      	ldr	r3, [pc, #80]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a590:	2200      	movs	r2, #0
 800a592:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a594:	4b12      	ldr	r3, [pc, #72]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a596:	0018      	movs	r0, r3
 800a598:	f00f ff88 	bl	801a4ac <HAL_UART_Init>
 800a59c:	1e03      	subs	r3, r0, #0
 800a59e:	d001      	beq.n	800a5a4 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 800a5a0:	f000 f90c 	bl	800a7bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f011 fc17 	bl	801bddc <HAL_UARTEx_SetTxFifoThreshold>
 800a5ae:	1e03      	subs	r3, r0, #0
 800a5b0:	d001      	beq.n	800a5b6 <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 800a5b2:	f000 f903 	bl	800a7bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	f011 fc4e 	bl	801be5c <HAL_UARTEx_SetRxFifoThreshold>
 800a5c0:	1e03      	subs	r3, r0, #0
 800a5c2:	d001      	beq.n	800a5c8 <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 800a5c4:	f000 f8fa 	bl	800a7bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a5c8:	4b05      	ldr	r3, [pc, #20]	@ (800a5e0 <MX_USART4_UART_Init+0x98>)
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f011 fbcc 	bl	801bd68 <HAL_UARTEx_DisableFifoMode>
 800a5d0:	1e03      	subs	r3, r0, #0
 800a5d2:	d001      	beq.n	800a5d8 <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 800a5d4:	f000 f8f2 	bl	800a7bc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a5d8:	46c0      	nop			@ (mov r8, r8)
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	46c0      	nop			@ (mov r8, r8)
 800a5e0:	2000071c 	.word	0x2000071c
 800a5e4:	40004c00 	.word	0x40004c00

0800a5e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a5ee:	4b10      	ldr	r3, [pc, #64]	@ (800a630 <MX_DMA_Init+0x48>)
 800a5f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a630 <MX_DMA_Init+0x48>)
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	649a      	str	r2, [r3, #72]	@ 0x48
 800a5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a630 <MX_DMA_Init+0x48>)
 800a5fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5fe:	2201      	movs	r2, #1
 800a600:	4013      	ands	r3, r2
 800a602:	607b      	str	r3, [r7, #4]
 800a604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a606:	2200      	movs	r2, #0
 800a608:	2100      	movs	r1, #0
 800a60a:	200a      	movs	r0, #10
 800a60c:	f009 f852 	bl	80136b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a610:	200a      	movs	r0, #10
 800a612:	f009 f864 	bl	80136de <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 800a616:	2200      	movs	r2, #0
 800a618:	2100      	movs	r1, #0
 800a61a:	200b      	movs	r0, #11
 800a61c:	f009 f84a 	bl	80136b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a620:	200b      	movs	r0, #11
 800a622:	f009 f85c 	bl	80136de <HAL_NVIC_EnableIRQ>

}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	46bd      	mov	sp, r7
 800a62a:	b002      	add	sp, #8
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	46c0      	nop			@ (mov r8, r8)
 800a630:	40021000 	.word	0x40021000

0800a634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b089      	sub	sp, #36	@ 0x24
 800a638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a63a:	240c      	movs	r4, #12
 800a63c:	193b      	adds	r3, r7, r4
 800a63e:	0018      	movs	r0, r3
 800a640:	2314      	movs	r3, #20
 800a642:	001a      	movs	r2, r3
 800a644:	2100      	movs	r1, #0
 800a646:	f011 fd7d 	bl	801c144 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a64a:	4b56      	ldr	r3, [pc, #344]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a64c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a64e:	4b55      	ldr	r3, [pc, #340]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a650:	2104      	movs	r1, #4
 800a652:	430a      	orrs	r2, r1
 800a654:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a656:	4b53      	ldr	r3, [pc, #332]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65a:	2204      	movs	r2, #4
 800a65c:	4013      	ands	r3, r2
 800a65e:	60bb      	str	r3, [r7, #8]
 800a660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a662:	4b50      	ldr	r3, [pc, #320]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a664:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a666:	4b4f      	ldr	r3, [pc, #316]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a668:	2101      	movs	r1, #1
 800a66a:	430a      	orrs	r2, r1
 800a66c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a66e:	4b4d      	ldr	r3, [pc, #308]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a672:	2201      	movs	r2, #1
 800a674:	4013      	ands	r3, r2
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a67a:	4b4a      	ldr	r3, [pc, #296]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a67c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a67e:	4b49      	ldr	r3, [pc, #292]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a680:	2102      	movs	r1, #2
 800a682:	430a      	orrs	r2, r1
 800a684:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a686:	4b47      	ldr	r3, [pc, #284]	@ (800a7a4 <MX_GPIO_Init+0x170>)
 800a688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68a:	2202      	movs	r2, #2
 800a68c:	4013      	ands	r3, r2
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a692:	4945      	ldr	r1, [pc, #276]	@ (800a7a8 <MX_GPIO_Init+0x174>)
 800a694:	4b45      	ldr	r3, [pc, #276]	@ (800a7ac <MX_GPIO_Init+0x178>)
 800a696:	2200      	movs	r2, #0
 800a698:	0018      	movs	r0, r3
 800a69a:	f00a f86a 	bl	8014772 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a69e:	4944      	ldr	r1, [pc, #272]	@ (800a7b0 <MX_GPIO_Init+0x17c>)
 800a6a0:	4b44      	ldr	r3, [pc, #272]	@ (800a7b4 <MX_GPIO_Init+0x180>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f00a f864 	bl	8014772 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800a6aa:	23b0      	movs	r3, #176	@ 0xb0
 800a6ac:	0119      	lsls	r1, r3, #4
 800a6ae:	23a0      	movs	r3, #160	@ 0xa0
 800a6b0:	05db      	lsls	r3, r3, #23
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f00a f85c 	bl	8014772 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a6ba:	193b      	adds	r3, r7, r4
 800a6bc:	4a3a      	ldr	r2, [pc, #232]	@ (800a7a8 <MX_GPIO_Init+0x174>)
 800a6be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6c0:	193b      	adds	r3, r7, r4
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c6:	193b      	adds	r3, r7, r4
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6cc:	193b      	adds	r3, r7, r4
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6d2:	193b      	adds	r3, r7, r4
 800a6d4:	4a35      	ldr	r2, [pc, #212]	@ (800a7ac <MX_GPIO_Init+0x178>)
 800a6d6:	0019      	movs	r1, r3
 800a6d8:	0010      	movs	r0, r2
 800a6da:	f009 fdd9 	bl	8014290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a6de:	193b      	adds	r3, r7, r4
 800a6e0:	4a33      	ldr	r2, [pc, #204]	@ (800a7b0 <MX_GPIO_Init+0x17c>)
 800a6e2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6e4:	193b      	adds	r3, r7, r4
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ea:	193b      	adds	r3, r7, r4
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6f0:	193b      	adds	r3, r7, r4
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6f6:	193b      	adds	r3, r7, r4
 800a6f8:	4a2e      	ldr	r2, [pc, #184]	@ (800a7b4 <MX_GPIO_Init+0x180>)
 800a6fa:	0019      	movs	r1, r3
 800a6fc:	0010      	movs	r0, r2
 800a6fe:	f009 fdc7 	bl	8014290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_4;
 800a702:	193b      	adds	r3, r7, r4
 800a704:	4a2c      	ldr	r2, [pc, #176]	@ (800a7b8 <MX_GPIO_Init+0x184>)
 800a706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a708:	193b      	adds	r3, r7, r4
 800a70a:	2200      	movs	r2, #0
 800a70c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70e:	193b      	adds	r3, r7, r4
 800a710:	2200      	movs	r2, #0
 800a712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a714:	193b      	adds	r3, r7, r4
 800a716:	4a27      	ldr	r2, [pc, #156]	@ (800a7b4 <MX_GPIO_Init+0x180>)
 800a718:	0019      	movs	r1, r3
 800a71a:	0010      	movs	r0, r2
 800a71c:	f009 fdb8 	bl	8014290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800a720:	0021      	movs	r1, r4
 800a722:	187b      	adds	r3, r7, r1
 800a724:	22b0      	movs	r2, #176	@ 0xb0
 800a726:	0112      	lsls	r2, r2, #4
 800a728:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a72a:	000c      	movs	r4, r1
 800a72c:	193b      	adds	r3, r7, r4
 800a72e:	2201      	movs	r2, #1
 800a730:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a732:	193b      	adds	r3, r7, r4
 800a734:	2200      	movs	r2, #0
 800a736:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a738:	193b      	adds	r3, r7, r4
 800a73a:	2200      	movs	r2, #0
 800a73c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a73e:	193a      	adds	r2, r7, r4
 800a740:	23a0      	movs	r3, #160	@ 0xa0
 800a742:	05db      	lsls	r3, r3, #23
 800a744:	0011      	movs	r1, r2
 800a746:	0018      	movs	r0, r3
 800a748:	f009 fda2 	bl	8014290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a74c:	0021      	movs	r1, r4
 800a74e:	187b      	adds	r3, r7, r1
 800a750:	2280      	movs	r2, #128	@ 0x80
 800a752:	0212      	lsls	r2, r2, #8
 800a754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a756:	187b      	adds	r3, r7, r1
 800a758:	2288      	movs	r2, #136	@ 0x88
 800a75a:	0352      	lsls	r2, r2, #13
 800a75c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a75e:	187b      	adds	r3, r7, r1
 800a760:	2200      	movs	r2, #0
 800a762:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a764:	187a      	adds	r2, r7, r1
 800a766:	23a0      	movs	r3, #160	@ 0xa0
 800a768:	05db      	lsls	r3, r3, #23
 800a76a:	0011      	movs	r1, r2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f009 fd8f 	bl	8014290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a772:	2200      	movs	r2, #0
 800a774:	2100      	movs	r1, #0
 800a776:	2007      	movs	r0, #7
 800a778:	f008 ff9c 	bl	80136b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a77c:	2007      	movs	r0, #7
 800a77e:	f008 ffae 	bl	80136de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800a782:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b4 <MX_GPIO_Init+0x180>)
 800a784:	2201      	movs	r2, #1
 800a786:	2108      	movs	r1, #8
 800a788:	0018      	movs	r0, r3
 800a78a:	f009 fff2 	bl	8014772 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 800a78e:	2380      	movs	r3, #128	@ 0x80
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	4a06      	ldr	r2, [pc, #24]	@ (800a7ac <MX_GPIO_Init+0x178>)
 800a794:	0019      	movs	r1, r3
 800a796:	0010      	movs	r0, r2
 800a798:	f00a f808 	bl	80147ac <HAL_GPIO_TogglePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800a79c:	46c0      	nop			@ (mov r8, r8)
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	b009      	add	sp, #36	@ 0x24
 800a7a2:	bd90      	pop	{r4, r7, pc}
 800a7a4:	40021000 	.word	0x40021000
 800a7a8:	0000074c 	.word	0x0000074c
 800a7ac:	50000800 	.word	0x50000800
 800a7b0:	0000142c 	.word	0x0000142c
 800a7b4:	50000400 	.word	0x50000400
 800a7b8:	00004810 	.word	0x00004810

0800a7bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a7c0:	b672      	cpsid	i
}
 800a7c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a7c4:	46c0      	nop			@ (mov r8, r8)
 800a7c6:	e7fd      	b.n	800a7c4 <Error_Handler+0x8>

0800a7c8 <muestreo>:
#include "stm32u0xx_hal_pwr_ex.h"

uint32_t cnt_veces_muestreo_2 = 0;
//*************************************************************************************************

void muestreo(void){
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0


	     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);  PIn TEST


		cnt_veces_muestreo++; //inc cnt_veces_muestreo/// A,cnt_veces_muestreo
 800a7ce:	4be0      	ldr	r3, [pc, #896]	@ (800ab50 <muestreo+0x388>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	4bde      	ldr	r3, [pc, #888]	@ (800ab50 <muestreo+0x388>)
 800a7d8:	701a      	strb	r2, [r3, #0]


		if(cnt_veces_muestreo <= 200){ // 200){ //cp  A,#200
 800a7da:	4bdd      	ldr	r3, [pc, #884]	@ (800ab50 <muestreo+0x388>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2bc8      	cmp	r3, #200	@ 0xc8
 800a7e0:	d800      	bhi.n	800a7e4 <muestreo+0x1c>
 800a7e2:	e0c3      	b.n	800a96c <muestreo+0x1a4>
//			cnt_veces_muestreo_2 = 0;
//
//		if(cnt_veces_muestreo_2 < 200)
//			goto detecta_flanco;

	    cnt_veces_muestreo = 0;  //clr cnt_veces_muestreo
 800a7e4:	4bda      	ldr	r3, [pc, #872]	@ (800ab50 <muestreo+0x388>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
	    cruze_por_cero[0] = 1;		//bset    cruze_por_cero,#0
 800a7ea:	4bda      	ldr	r3, [pc, #872]	@ (800ab54 <muestreo+0x38c>)
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	701a      	strb	r2, [r3, #0]
//        }
//	  	flagsLogger2 [2] = 1;//bset	flagsLogger2,#2
//	  	goto error_muestreo; //jp error_muestreo

//batOFF_OK:
	    flagsLogger2 [0] = 1; //bset flagsLogger2,#0
 800a7f0:	4bd9      	ldr	r3, [pc, #868]	@ (800ab58 <muestreo+0x390>)
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	701a      	strb	r2, [r3, #0]
	    //cntRegPNT = &eeCntRegEVENT;
	    //call	save_cntReg
	    //call	save_timeUNIX

grabadoEmergenciaFin:
	save_timeUNIX();
 800a7f6:	f7fc fcd1 	bl	800719c <save_timeUNIX>
	GPIOA->MODER |= 0x3FFFFFFF;
 800a7fa:	23a0      	movs	r3, #160	@ 0xa0
 800a7fc:	05db      	lsls	r3, r3, #23
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	23a0      	movs	r3, #160	@ 0xa0
 800a802:	05db      	lsls	r3, r3, #23
 800a804:	49d5      	ldr	r1, [pc, #852]	@ (800ab5c <muestreo+0x394>)
 800a806:	430a      	orrs	r2, r1
 800a808:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 0xFFFFFFFF;
 800a80a:	4bd5      	ldr	r3, [pc, #852]	@ (800ab60 <muestreo+0x398>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4bd4      	ldr	r3, [pc, #848]	@ (800ab60 <muestreo+0x398>)
 800a810:	2201      	movs	r2, #1
 800a812:	4252      	negs	r2, r2
 800a814:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= 0xFFFDFFFF;
 800a816:	4bd3      	ldr	r3, [pc, #844]	@ (800ab64 <muestreo+0x39c>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4bd2      	ldr	r3, [pc, #840]	@ (800ab64 <muestreo+0x39c>)
 800a81c:	49d2      	ldr	r1, [pc, #840]	@ (800ab68 <muestreo+0x3a0>)
 800a81e:	430a      	orrs	r2, r1
 800a820:	601a      	str	r2, [r3, #0]
	GPIOD->MODER |= 0xFFFFFFFF;
 800a822:	4bd2      	ldr	r3, [pc, #840]	@ (800ab6c <muestreo+0x3a4>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4bd1      	ldr	r3, [pc, #836]	@ (800ab6c <muestreo+0x3a4>)
 800a828:	2201      	movs	r2, #1
 800a82a:	4252      	negs	r2, r2
 800a82c:	601a      	str	r2, [r3, #0]
	GPIOE->MODER |= 0xFFFFFFFF;
 800a82e:	4bd0      	ldr	r3, [pc, #832]	@ (800ab70 <muestreo+0x3a8>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4bcf      	ldr	r3, [pc, #828]	@ (800ab70 <muestreo+0x3a8>)
 800a834:	2201      	movs	r2, #1
 800a836:	4252      	negs	r2, r2
 800a838:	601a      	str	r2, [r3, #0]
	GPIOF->MODER |= 0xFFFFFFFF;
 800a83a:	4bce      	ldr	r3, [pc, #824]	@ (800ab74 <muestreo+0x3ac>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4bcd      	ldr	r3, [pc, #820]	@ (800ab74 <muestreo+0x3ac>)
 800a840:	2201      	movs	r2, #1
 800a842:	4252      	negs	r2, r2
 800a844:	601a      	str	r2, [r3, #0]

	__HAL_RCC_GPIOB_CLK_DISABLE();
 800a846:	4bcc      	ldr	r3, [pc, #816]	@ (800ab78 <muestreo+0x3b0>)
 800a848:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a84a:	4bcb      	ldr	r3, [pc, #812]	@ (800ab78 <muestreo+0x3b0>)
 800a84c:	2102      	movs	r1, #2
 800a84e:	438a      	bics	r2, r1
 800a850:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800a852:	4bc9      	ldr	r3, [pc, #804]	@ (800ab78 <muestreo+0x3b0>)
 800a854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a856:	4bc8      	ldr	r3, [pc, #800]	@ (800ab78 <muestreo+0x3b0>)
 800a858:	2108      	movs	r1, #8
 800a85a:	438a      	bics	r2, r1
 800a85c:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 800a85e:	4bc6      	ldr	r3, [pc, #792]	@ (800ab78 <muestreo+0x3b0>)
 800a860:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a862:	4bc5      	ldr	r3, [pc, #788]	@ (800ab78 <muestreo+0x3b0>)
 800a864:	2110      	movs	r1, #16
 800a866:	438a      	bics	r2, r1
 800a868:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOF_CLK_DISABLE();
 800a86a:	4bc3      	ldr	r3, [pc, #780]	@ (800ab78 <muestreo+0x3b0>)
 800a86c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a86e:	4bc2      	ldr	r3, [pc, #776]	@ (800ab78 <muestreo+0x3b0>)
 800a870:	2120      	movs	r1, #32
 800a872:	438a      	bics	r2, r1
 800a874:	64da      	str	r2, [r3, #76]	@ 0x4c

	while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 800a876:	46c0      	nop			@ (mov r8, r8)
 800a878:	4bc0      	ldr	r3, [pc, #768]	@ (800ab7c <muestreo+0x3b4>)
 800a87a:	0018      	movs	r0, r3
 800a87c:	f00a f896 	bl	80149ac <HAL_I2C_DeInit>
 800a880:	1e03      	subs	r3, r0, #0
 800a882:	d1f9      	bne.n	800a878 <muestreo+0xb0>
	while(HAL_UART_DeInit(&huart2) != HAL_OK);
 800a884:	46c0      	nop			@ (mov r8, r8)
 800a886:	4bbe      	ldr	r3, [pc, #760]	@ (800ab80 <muestreo+0x3b8>)
 800a888:	0018      	movs	r0, r3
 800a88a:	f00f fe65 	bl	801a558 <HAL_UART_DeInit>
 800a88e:	1e03      	subs	r3, r0, #0
 800a890:	d1f9      	bne.n	800a886 <muestreo+0xbe>
	while(HAL_UART_DeInit(&huart4) != HAL_OK);
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	4bbb      	ldr	r3, [pc, #748]	@ (800ab84 <muestreo+0x3bc>)
 800a896:	0018      	movs	r0, r3
 800a898:	f00f fe5e 	bl	801a558 <HAL_UART_DeInit>
 800a89c:	1e03      	subs	r3, r0, #0
 800a89e:	d1f9      	bne.n	800a894 <muestreo+0xcc>
	//ADC_Deinit_Func();
	while(HAL_ADC_DeInit(&hadc1) != HAL_OK);
 800a8a0:	46c0      	nop			@ (mov r8, r8)
 800a8a2:	4bb9      	ldr	r3, [pc, #740]	@ (800ab88 <muestreo+0x3c0>)
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f007 ffbd 	bl	8012824 <HAL_ADC_DeInit>
 800a8aa:	1e03      	subs	r3, r0, #0
 800a8ac:	d1f9      	bne.n	800a8a2 <muestreo+0xda>
	__HAL_RCC_DMA1_CLK_DISABLE();
 800a8ae:	4bb2      	ldr	r3, [pc, #712]	@ (800ab78 <muestreo+0x3b0>)
 800a8b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8b2:	4bb1      	ldr	r3, [pc, #708]	@ (800ab78 <muestreo+0x3b0>)
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	438a      	bics	r2, r1
 800a8b8:	649a      	str	r2, [r3, #72]	@ 0x48

	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a8ba:	4bb4      	ldr	r3, [pc, #720]	@ (800ab8c <muestreo+0x3c4>)
 800a8bc:	2204      	movs	r2, #4
 800a8be:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800a8c0:	2380      	movs	r3, #128	@ 0x80
 800a8c2:	0199      	lsls	r1, r3, #6
 800a8c4:	48b2      	ldr	r0, [pc, #712]	@ (800ab90 <muestreo+0x3c8>)
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f00e fc21 	bl	8019110 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a8ce:	1e03      	subs	r3, r0, #0
 800a8d0:	d001      	beq.n	800a8d6 <muestreo+0x10e>
	{
		Error_Handler();
 800a8d2:	f7ff ff73 	bl	800a7bc <Error_Handler>
	}

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a8d6:	2007      	movs	r0, #7
 800a8d8:	f008 ff01 	bl	80136de <HAL_NVIC_EnableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 800a8dc:	200a      	movs	r0, #10
 800a8de:	f008 ff0e 	bl	80136fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a8e2:	200b      	movs	r0, #11
 800a8e4:	f008 ff0b 	bl	80136fe <HAL_NVIC_DisableIRQ>



sleep_rt:

	HAL_SuspendTick();
 800a8e8:	f007 fbae 	bl	8012048 <HAL_SuspendTick>

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	f00c fa15 	bl	8016d1c <HAL_PWREx_EnterSTOP2Mode>

	HAL_ResumeTick();
 800a8f2:	f007 fbb7 	bl	8012064 <HAL_ResumeTick>
	if(bandera_RTC)
 800a8f6:	4ba7      	ldr	r3, [pc, #668]	@ (800ab94 <muestreo+0x3cc>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <muestreo+0x13e>
	{
		bandera_RTC = 0;
 800a8fe:	4ba5      	ldr	r3, [pc, #660]	@ (800ab94 <muestreo+0x3cc>)
 800a900:	2200      	movs	r2, #0
 800a902:	701a      	strb	r2, [r3, #0]
		goto sleep_rt;
 800a904:	e7f0      	b.n	800a8e8 <muestreo+0x120>
	}

	HAL_IWDG_Refresh(&hiwdg);
 800a906:	4ba4      	ldr	r3, [pc, #656]	@ (800ab98 <muestreo+0x3d0>)
 800a908:	0018      	movs	r0, r3
 800a90a:	f00c f97d 	bl	8016c08 <HAL_IWDG_Refresh>
	reconfigura_perif();
 800a90e:	f7fe ff37 	bl	8009780 <reconfigura_perif>
	//{
	//	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
	//	HAL_Delay (15);
	//	HAL_IWDG_Refresh(&hiwdg);
	//}
	HAL_IWDG_Refresh(&hiwdg);
 800a912:	4ba1      	ldr	r3, [pc, #644]	@ (800ab98 <muestreo+0x3d0>)
 800a914:	0018      	movs	r0, r3
 800a916:	f00c f977 	bl	8016c08 <HAL_IWDG_Refresh>

	flagsEvent[3] = 1;
 800a91a:	4ba0      	ldr	r3, [pc, #640]	@ (800ab9c <muestreo+0x3d4>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	70da      	strb	r2, [r3, #3]
	retPowerOn = 10;
 800a920:	4b9f      	ldr	r3, [pc, #636]	@ (800aba0 <muestreo+0x3d8>)
 800a922:	220a      	movs	r2, #10
 800a924:	701a      	strb	r2, [r3, #0]
	edorefri = 0;
 800a926:	4b9f      	ldr	r3, [pc, #636]	@ (800aba4 <muestreo+0x3dc>)
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
	cntblkh = 0;
 800a92c:	4b9e      	ldr	r3, [pc, #632]	@ (800aba8 <muestreo+0x3e0>)
 800a92e:	2200      	movs	r2, #0
 800a930:	801a      	strh	r2, [r3, #0]
	flagsa[7] = 1;// flagsa = 0x81;
 800a932:	4b9e      	ldr	r3, [pc, #632]	@ (800abac <muestreo+0x3e4>)
 800a934:	2201      	movs	r2, #1
 800a936:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 800a938:	4b9c      	ldr	r3, [pc, #624]	@ (800abac <muestreo+0x3e4>)
 800a93a:	2201      	movs	r2, #1
 800a93c:	701a      	strb	r2, [r3, #0]
	cntseg = 0;
 800a93e:	4b9c      	ldr	r3, [pc, #624]	@ (800abb0 <muestreo+0x3e8>)
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0; k<8; k++)
 800a944:	1dfb      	adds	r3, r7, #7
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	e009      	b.n	800a960 <muestreo+0x198>
		flagsBattery[k] = 0;
 800a94c:	1dfb      	adds	r3, r7, #7
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	4a98      	ldr	r2, [pc, #608]	@ (800abb4 <muestreo+0x3ec>)
 800a952:	2100      	movs	r1, #0
 800a954:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++)
 800a956:	1dfb      	adds	r3, r7, #7
 800a958:	781a      	ldrb	r2, [r3, #0]
 800a95a:	1dfb      	adds	r3, r7, #7
 800a95c:	3201      	adds	r2, #1
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	1dfb      	adds	r3, r7, #7
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b07      	cmp	r3, #7
 800a966:	d9f1      	bls.n	800a94c <muestreo+0x184>

		//;Apaga Perifericos RGM_07-AGO-2023


ibus_ocupado_halt:
 800a968:	46c0      	nop			@ (mov r8, r8)


DoSleep:
goto error_muestreo;//jp error_muestreo
 800a96a:	e168      	b.n	800ac3e <muestreo+0x476>
			goto detecta_flanco;//jrule detecta_flanco
 800a96c:	46c0      	nop			@ (mov r8, r8)

//;=========================================  Rutina DETECCIÓN DE FLANCO DE SUBIDA
//;La detección de cruce por cero se realiza por umbral en el pin de MUESTREO.

detecta_flanco:						 //;Más de 50ms sin cruces por cero
		s_reloj[2] = 0;//bres s_reloj,#2
 800a96e:	4b92      	ldr	r3, [pc, #584]	@ (800abb8 <muestreo+0x3f0>)
 800a970:	2200      	movs	r2, #0
 800a972:	709a      	strb	r2, [r3, #2]

up_anterior:

		if(s_reloj[0]){	//btjt s_reloj,#0,alto   [actual]	   ;¿El valor de la bandera "actual" es 1?
 800a974:	4b90      	ldr	r3, [pc, #576]	@ (800abb8 <muestreo+0x3f0>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <muestreo+0x1bc>
			goto alto;
		}
		s_reloj[1] = 0;   				//bres s_reloj,#1    ;[anterior]  ;NO: Anterior <- 0
 800a97c:	4b8e      	ldr	r3, [pc, #568]	@ (800abb8 <muestreo+0x3f0>)
 800a97e:	2200      	movs	r2, #0
 800a980:	705a      	strb	r2, [r3, #1]
		goto end_up_anterior;//jra end_up_anterior
 800a982:	e003      	b.n	800a98c <muestreo+0x1c4>
			goto alto;
 800a984:	46c0      	nop			@ (mov r8, r8)

alto:
		s_reloj[1] = 1; 	//bset s_reloj,#1		;[anterior]   ;SI: Anterior <- 1
 800a986:	4b8c      	ldr	r3, [pc, #560]	@ (800abb8 <muestreo+0x3f0>)
 800a988:	2201      	movs	r2, #1
 800a98a:	705a      	strb	r2, [r3, #1]
			// 19-AGO-2024		HAL_ADC_Stop(&hadc);
		// ----------------------Codigo Julio Torres
//---Toogle  GPIOA->BSRR = GPIO_BSRR_BS_11;
		//ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
//		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
		ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800a98c:	4b8b      	ldr	r3, [pc, #556]	@ (800abbc <muestreo+0x3f4>)
 800a98e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a990:	4b8a      	ldr	r3, [pc, #552]	@ (800abbc <muestreo+0x3f4>)
 800a992:	2280      	movs	r2, #128	@ 0x80
 800a994:	00d2      	lsls	r2, r2, #3
 800a996:	400a      	ands	r2, r1
 800a998:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800a99a:	4b88      	ldr	r3, [pc, #544]	@ (800abbc <muestreo+0x3f4>)
 800a99c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a99e:	4b87      	ldr	r3, [pc, #540]	@ (800abbc <muestreo+0x3f4>)
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	400a      	ands	r2, r1
 800a9a4:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800a9a6:	4b85      	ldr	r3, [pc, #532]	@ (800abbc <muestreo+0x3f4>)
 800a9a8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a9aa:	4b84      	ldr	r3, [pc, #528]	@ (800abbc <muestreo+0x3f4>)
 800a9ac:	2280      	movs	r2, #128	@ 0x80
 800a9ae:	02d2      	lsls	r2, r2, #11
 800a9b0:	400a      	ands	r2, r1
 800a9b2:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL14;  // Canal 0
 800a9b4:	4b81      	ldr	r3, [pc, #516]	@ (800abbc <muestreo+0x3f4>)
 800a9b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a9b8:	4b80      	ldr	r3, [pc, #512]	@ (800abbc <muestreo+0x3f4>)
 800a9ba:	2280      	movs	r2, #128	@ 0x80
 800a9bc:	01d2      	lsls	r2, r2, #7
 800a9be:	400a      	ands	r2, r1
 800a9c0:	629a      	str	r2, [r3, #40]	@ 0x28

		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800a9c2:	4b7e      	ldr	r3, [pc, #504]	@ (800abbc <muestreo+0x3f4>)
 800a9c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9c6:	4b7d      	ldr	r3, [pc, #500]	@ (800abbc <muestreo+0x3f4>)
 800a9c8:	2180      	movs	r1, #128	@ 0x80
 800a9ca:	0089      	lsls	r1, r1, #2
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	629a      	str	r2, [r3, #40]	@ 0x28
		//ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
		//ADC->CCR |= ADC_CCR_VREFEN;
		capturaAD();
 800a9d0:	f002 ff48 	bl	800d864 <capturaAD>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		//---Toogle  GPIOA->BSRR = GPIO_BSRR_BR_11;
		// ----------------------Codigo Julio Torres

		asm ("nop");
 800a9d4:	46c0      	nop			@ (mov r8, r8)
		//if(adcramh >= 10){//cpw     Y,#10
		//if(adcramh >= 20){//cpw     Y,#10
		//if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
		if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
 800a9d6:	4b7a      	ldr	r3, [pc, #488]	@ (800abc0 <muestreo+0x3f8>)
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	2b22      	cmp	r3, #34	@ 0x22
 800a9dc:	d803      	bhi.n	800a9e6 <muestreo+0x21e>

			goto pin_cruce_alto;//jruge   pin_cruce_alto
		}
		s_reloj[0] = 0;		// bres    s_reloj,#0;
 800a9de:	4b76      	ldr	r3, [pc, #472]	@ (800abb8 <muestreo+0x3f0>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
		goto end_up_actual;//jra     end_up_actual;
 800a9e4:	e003      	b.n	800a9ee <muestreo+0x226>
			goto pin_cruce_alto;//jruge   pin_cruce_alto
 800a9e6:	46c0      	nop			@ (mov r8, r8)
pin_cruce_alto:
		s_reloj[0] = 1;	 		//bset    s_reloj,#0;
 800a9e8:	4b73      	ldr	r3, [pc, #460]	@ (800abb8 <muestreo+0x3f0>)
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	701a      	strb	r2, [r3, #0]

determina_flanco: //---------------------------------------------------------?
		//ld A,s_reloj
		//and A,#$03
		//-----if(!(s_reloj[0] | s_reloj[1])){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
        if((!s_reloj[1]) & (s_reloj[0]) ){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
 800a9ee:	4b72      	ldr	r3, [pc, #456]	@ (800abb8 <muestreo+0x3f0>)
 800a9f0:	785b      	ldrb	r3, [r3, #1]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	4053      	eors	r3, r2
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	001a      	movs	r2, r3
 800a9fa:	4b6f      	ldr	r3, [pc, #444]	@ (800abb8 <muestreo+0x3f0>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	d007      	beq.n	800aa12 <muestreo+0x24a>

			goto flanco_subida;			//jreq flanco_subida/ salta si z=1
 800aa02:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_detecta_flanco;//jra fin_detecta_flanco


flanco_subida:
		s_reloj[2] = 1;	//bset    s_reloj,#2								;[b_flancos]	;Activar bandera de flanco de subida
 800aa04:	4b6c      	ldr	r3, [pc, #432]	@ (800abb8 <muestreo+0x3f0>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	709a      	strb	r2, [r3, #2]
		//bcpl    PA_ODR,#0					// Test por, prueba
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
		cruze_por_cero[0] = 1;			//bset    cruze_por_cero,#0			;Activa bandera de cruce por cero
 800aa0a:	4b52      	ldr	r3, [pc, #328]	@ (800ab54 <muestreo+0x38c>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e000      	b.n	800aa14 <muestreo+0x24c>
		goto fin_detecta_flanco;//jra fin_detecta_flanco
 800aa12:	46c0      	nop			@ (mov r8, r8)

fin_detecta_flanco:

//;=====================================  FIN Rutina DETECCIÓN DE FLANCO DE BAJADA

		if(s_reloj[2]){			//btjt    s_reloj,#2,pregunta_edo_muestreo
 800aa14:	4b68      	ldr	r3, [pc, #416]	@ (800abb8 <muestreo+0x3f0>)
 800aa16:	789b      	ldrb	r3, [r3, #2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d105      	bne.n	800aa28 <muestreo+0x260>
			goto pregunta_edo_muestreo;
		}
		//ld    A,edo_muestreo
		if(edo_muestreo == 1){//cp    A,#1 ***************???
 800aa1c:	4b69      	ldr	r3, [pc, #420]	@ (800abc4 <muestreo+0x3fc>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d000      	beq.n	800aa26 <muestreo+0x25e>
 800aa24:	e115      	b.n	800ac52 <muestreo+0x48a>
			goto muestrea; //jreq  muestrea
 800aa26:	e009      	b.n	800aa3c <muestreo+0x274>
			goto pregunta_edo_muestreo;
 800aa28:	46c0      	nop			@ (mov r8, r8)


pregunta_edo_muestreo:

		//ld A,cnt_mues
		if(cnt_mues == 0){//cp A,#0
 800aa2a:	4b67      	ldr	r3, [pc, #412]	@ (800abc8 <muestreo+0x400>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d000      	beq.n	800aa34 <muestreo+0x26c>
 800aa32:	e103      	b.n	800ac3c <muestreo+0x474>
			goto no_error_muestreo;//jreq no_error_muestreo
 800aa34:	46c0      	nop			@ (mov r8, r8)
		}
		goto error_muestreo;//jp error_muestreo


no_error_muestreo:
		edo_muestreo = 1; //mov edo_muestreo,#1
 800aa36:	4b63      	ldr	r3, [pc, #396]	@ (800abc4 <muestreo+0x3fc>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	701a      	strb	r2, [r3, #0]


muestrea:
	    //ld A,cnt_mues
		if(cnt_mues != 32 ){ //cp A,#32 ****************
 800aa3c:	4b62      	ldr	r3, [pc, #392]	@ (800abc8 <muestreo+0x400>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	d10a      	bne.n	800aa5a <muestreo+0x292>
			goto adq_muesn; //jrne    adq_muesn
		}
		cnt_mues = 0;//clr     cnt_mues         ;SI, limpia el contador de muestras
 800aa44:	4b60      	ldr	r3, [pc, #384]	@ (800abc8 <muestreo+0x400>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	701a      	strb	r2, [r3, #0]
		edo_muestreo = 0;//mov     edo_muestreo,#0
 800aa4a:	4b5e      	ldr	r3, [pc, #376]	@ (800abc4 <muestreo+0x3fc>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	 //28-May-2024: Salida IO7 toogle test
		goto voltaje_rms;//jp      voltaje_rms
 800aa50:	46c0      	nop			@ (mov r8, r8)
voltaje_rms:
		//sigma_cuad_sampl_1 = 0;			//clr     sigma_cuad_sampl_1
		//sigma_cuad_sampl_2 = 0;			//clr     sigma_cuad_sampl_2
		//sigma_cuad_sampl_3 = 0;			//clr     sigma_cuad_sampl_3
		//sigma_cuad_sampl_4 = 0;			//clr     sigma_cuad_sampl_4
		sigma_cuad_sampl = 0;
 800aa52:	4b5e      	ldr	r3, [pc, #376]	@ (800abcc <muestreo+0x404>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	e040      	b.n	800aadc <muestreo+0x314>
			goto adq_muesn; //jrne    adq_muesn
 800aa5a:	46c0      	nop			@ (mov r8, r8)
		ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800aa5c:	4b57      	ldr	r3, [pc, #348]	@ (800abbc <muestreo+0x3f4>)
 800aa5e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800aa60:	4b56      	ldr	r3, [pc, #344]	@ (800abbc <muestreo+0x3f4>)
 800aa62:	2280      	movs	r2, #128	@ 0x80
 800aa64:	00d2      	lsls	r2, r2, #3
 800aa66:	400a      	ands	r2, r1
 800aa68:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800aa6a:	4b54      	ldr	r3, [pc, #336]	@ (800abbc <muestreo+0x3f4>)
 800aa6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa6e:	4b53      	ldr	r3, [pc, #332]	@ (800abbc <muestreo+0x3f4>)
 800aa70:	2101      	movs	r1, #1
 800aa72:	400a      	ands	r2, r1
 800aa74:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800aa76:	4b51      	ldr	r3, [pc, #324]	@ (800abbc <muestreo+0x3f4>)
 800aa78:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800aa7a:	4b50      	ldr	r3, [pc, #320]	@ (800abbc <muestreo+0x3f4>)
 800aa7c:	2280      	movs	r2, #128	@ 0x80
 800aa7e:	02d2      	lsls	r2, r2, #11
 800aa80:	400a      	ands	r2, r1
 800aa82:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR &= ADC_CHSELR_CHSEL14;  // Canal 0
 800aa84:	4b4d      	ldr	r3, [pc, #308]	@ (800abbc <muestreo+0x3f4>)
 800aa86:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800aa88:	4b4c      	ldr	r3, [pc, #304]	@ (800abbc <muestreo+0x3f4>)
 800aa8a:	2280      	movs	r2, #128	@ 0x80
 800aa8c:	01d2      	lsls	r2, r2, #7
 800aa8e:	400a      	ands	r2, r1
 800aa90:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800aa92:	4b4a      	ldr	r3, [pc, #296]	@ (800abbc <muestreo+0x3f4>)
 800aa94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa96:	4b49      	ldr	r3, [pc, #292]	@ (800abbc <muestreo+0x3f4>)
 800aa98:	2180      	movs	r1, #128	@ 0x80
 800aa9a:	0089      	lsls	r1, r1, #2
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD();
 800aaa0:	f002 fee0 	bl	800d864 <capturaAD>
		asm ("nop");
 800aaa4:	46c0      	nop			@ (mov r8, r8)
		adcramh >>= 1;    			//srlw    Y             ;Convierte la muestra de 10 bits en 9 bits ****************?????
 800aaa6:	4b46      	ldr	r3, [pc, #280]	@ (800abc0 <muestreo+0x3f8>)
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	085b      	lsrs	r3, r3, #1
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	4b44      	ldr	r3, [pc, #272]	@ (800abc0 <muestreo+0x3f8>)
 800aab0:	801a      	strh	r2, [r3, #0]
		adcramh >>= 1; 				//srlw    Y             ;Convierte la muestra de  9 bits en 8 bits ****************???
 800aab2:	4b43      	ldr	r3, [pc, #268]	@ (800abc0 <muestreo+0x3f8>)
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	085b      	lsrs	r3, r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	4b41      	ldr	r3, [pc, #260]	@ (800abc0 <muestreo+0x3f8>)
 800aabc:	801a      	strh	r2, [r3, #0]
		vl_ram [cnt_mues] = (uint8_t) adcramh;
 800aabe:	4b40      	ldr	r3, [pc, #256]	@ (800abc0 <muestreo+0x3f8>)
 800aac0:	8819      	ldrh	r1, [r3, #0]
 800aac2:	4b41      	ldr	r3, [pc, #260]	@ (800abc8 <muestreo+0x400>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	001a      	movs	r2, r3
 800aac8:	b2c9      	uxtb	r1, r1
 800aaca:	4b41      	ldr	r3, [pc, #260]	@ (800abd0 <muestreo+0x408>)
 800aacc:	5499      	strb	r1, [r3, r2]
		cnt_mues++;			//inc     cnt_mues			;Una muestra más
 800aace:	4b3e      	ldr	r3, [pc, #248]	@ (800abc8 <muestreo+0x400>)
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	4b3c      	ldr	r3, [pc, #240]	@ (800abc8 <muestreo+0x400>)
 800aad8:	701a      	strb	r2, [r3, #0]
		goto fin_voltrms;//jp      fin_voltrms
 800aada:	e0bb      	b.n	800ac54 <muestreo+0x48c>
				// ldw X,#vl_ram
				// ld A,XL
				// add A,cnt_mues
				// ld  XL,A
				// ld A,(X)  ////////////?????
				wreg= vl_ram[cnt_mues]; //ld wreg,A
 800aadc:	4b3a      	ldr	r3, [pc, #232]	@ (800abc8 <muestreo+0x400>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	001a      	movs	r2, r3
 800aae2:	4b3b      	ldr	r3, [pc, #236]	@ (800abd0 <muestreo+0x408>)
 800aae4:	5c9a      	ldrb	r2, [r3, r2]
 800aae6:	4b3b      	ldr	r3, [pc, #236]	@ (800abd4 <muestreo+0x40c>)
 800aae8:	701a      	strb	r2, [r3, #0]
take_sampling:
//----------------------- Factor
					//ldw     X,waux
					//ld      A,eevolt_mul
	                //eevolt_mul = waux * eevolt_mul;//mul     X,A ***************************????
					uint16_t	foo = 0;
 800aaea:	1d3b      	adds	r3, r7, #4
 800aaec:	2200      	movs	r2, #0
 800aaee:	801a      	strh	r2, [r3, #0]
					//foo = (uint16_t)(wreg * eevolt_mul);
					foo = (uint16_t)(wreg * reevolt_mul);
 800aaf0:	4b38      	ldr	r3, [pc, #224]	@ (800abd4 <muestreo+0x40c>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	001a      	movs	r2, r3
 800aaf6:	4b38      	ldr	r3, [pc, #224]	@ (800abd8 <muestreo+0x410>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	0019      	movs	r1, r3
 800aafc:	1d3b      	adds	r3, r7, #4
 800aafe:	434a      	muls	r2, r1
 800ab00:	801a      	strh	r2, [r3, #0]
					//resul = (uint16_t)(wreg * 100);
					//ld      A,eevolt_div
					//div     X,A
	                //eevolt_div = waux / eevolt_div; //************************************?????
					//foo = foo / eevolt_div;
					foo = foo / reevolt_div;
 800ab02:	1d3b      	adds	r3, r7, #4
 800ab04:	881a      	ldrh	r2, [r3, #0]
 800ab06:	4b35      	ldr	r3, [pc, #212]	@ (800abdc <muestreo+0x414>)
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	0019      	movs	r1, r3
 800ab0c:	0010      	movs	r0, r2
 800ab0e:	f7f5 fb8d 	bl	800022c <__divsi3>
 800ab12:	0003      	movs	r3, r0
 800ab14:	001a      	movs	r2, r3
 800ab16:	1d3b      	adds	r3, r7, #4
 800ab18:	801a      	strh	r2, [r3, #0]
					//ld      XL,A
					//ld      A,resulh //----------------------------------------------?
					//mul     X,A
	                //resulh = waux*resulh;
	                //level_4st_mult_H = resulh;//ldw level_4st_mult_H,X
					level_4st_mult = (uint32_t)(foo * foo);
 800ab1a:	1d3b      	adds	r3, r7, #4
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	1d3a      	adds	r2, r7, #4
 800ab20:	8812      	ldrh	r2, [r2, #0]
 800ab22:	4353      	muls	r3, r2
 800ab24:	001a      	movs	r2, r3
 800ab26:	4b2e      	ldr	r3, [pc, #184]	@ (800abe0 <muestreo+0x418>)
 800ab28:	601a      	str	r2, [r3, #0]
			//addw X,level_2st_result_H
			//level_2st_result_H = waux + level_2st_result_H;
			//addw X,sigma_cuad_sampl_4
			//ldw sigma_cuad_sampl_4,X
			//sigma_cuad_sampl_4 = waux + sigma_cuad_sampl_4;
              sigma_cuad_sampl +=  level_4st_mult;
 800ab2a:	4b28      	ldr	r3, [pc, #160]	@ (800abcc <muestreo+0x404>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	4b2c      	ldr	r3, [pc, #176]	@ (800abe0 <muestreo+0x418>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	18d2      	adds	r2, r2, r3
 800ab34:	4b25      	ldr	r3, [pc, #148]	@ (800abcc <muestreo+0x404>)
 800ab36:	601a      	str	r2, [r3, #0]

	//================================================= FIN Rutina CALCULA SUMATORIA

			cnt_mues++;//inc cnt_mues
 800ab38:	4b23      	ldr	r3, [pc, #140]	@ (800abc8 <muestreo+0x400>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	4b21      	ldr	r3, [pc, #132]	@ (800abc8 <muestreo+0x400>)
 800ab42:	701a      	strb	r2, [r3, #0]
			//ld      A,cnt_mues
			if(cnt_mues >= 32){//cp A,#32 -------------------------?
 800ab44:	4b20      	ldr	r3, [pc, #128]	@ (800abc8 <muestreo+0x400>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b1f      	cmp	r3, #31
 800ab4a:	d84b      	bhi.n	800abe4 <muestreo+0x41c>
				goto sumatoria_completa;//jreq sumatoria_completa
			}
			goto suma_cuad;//jp suma_cuad
 800ab4c:	e7c6      	b.n	800aadc <muestreo+0x314>
 800ab4e:	46c0      	nop			@ (mov r8, r8)
 800ab50:	20000ba4 	.word	0x20000ba4
 800ab54:	20000cb8 	.word	0x20000cb8
 800ab58:	20001064 	.word	0x20001064
 800ab5c:	3fffffff 	.word	0x3fffffff
 800ab60:	50000400 	.word	0x50000400
 800ab64:	50000800 	.word	0x50000800
 800ab68:	fffdffff 	.word	0xfffdffff
 800ab6c:	50000c00 	.word	0x50000c00
 800ab70:	50001000 	.word	0x50001000
 800ab74:	50001400 	.word	0x50001400
 800ab78:	40021000 	.word	0x40021000
 800ab7c:	2000044c 	.word	0x2000044c
 800ab80:	20000688 	.word	0x20000688
 800ab84:	2000071c 	.word	0x2000071c
 800ab88:	200003e8 	.word	0x200003e8
 800ab8c:	40002800 	.word	0x40002800
 800ab90:	20000574 	.word	0x20000574
 800ab94:	200011ca 	.word	0x200011ca
 800ab98:	20000560 	.word	0x20000560
 800ab9c:	20000fb0 	.word	0x20000fb0
 800aba0:	20001186 	.word	0x20001186
 800aba4:	20000bf4 	.word	0x20000bf4
 800aba8:	20000bac 	.word	0x20000bac
 800abac:	20000bd4 	.word	0x20000bd4
 800abb0:	20000bab 	.word	0x20000bab
 800abb4:	20001190 	.word	0x20001190
 800abb8:	20000b78 	.word	0x20000b78
 800abbc:	40012400 	.word	0x40012400
 800abc0:	20000bbc 	.word	0x20000bbc
 800abc4:	20000ba6 	.word	0x20000ba6
 800abc8:	20000b7b 	.word	0x20000b7b
 800abcc:	20000b7c 	.word	0x20000b7c
 800abd0:	20000b84 	.word	0x20000b84
 800abd4:	20000bb3 	.word	0x20000bb3
 800abd8:	200001b9 	.word	0x200001b9
 800abdc:	200001b8 	.word	0x200001b8
 800abe0:	20000b80 	.word	0x20000b80
				goto sumatoria_completa;//jreq sumatoria_completa
 800abe4:	46c0      	nop			@ (mov r8, r8)

sumatoria_completa:
			cnt_mues = 0;//clr cnt_mues
 800abe6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac5c <muestreo+0x494>)
 800abe8:	2200      	movs	r2, #0
 800abea:	701a      	strb	r2, [r3, #0]
			//		   goto taking_prom;//jrne taking_prom
			//	   }
				   //ldw X,sigma_cuad_sampl_2
				   //ldw	sigma_prom_h,X
			//	   sigma_prom_h = sigma_cuad_sampl_2;
			sigma_cuad_sampl  >>= 5;
 800abec:	4b1c      	ldr	r3, [pc, #112]	@ (800ac60 <muestreo+0x498>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	095a      	lsrs	r2, r3, #5
 800abf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac60 <muestreo+0x498>)
 800abf4:	601a      	str	r2, [r3, #0]
	//				addw sp,#6

					//ld A, XL
					//ld volt_trms, A
					//volt_trms = sigma_prom_h;
					volt_trms = (uint8_t)(sqrt(sigma_cuad_sampl));
 800abf6:	4b1a      	ldr	r3, [pc, #104]	@ (800ac60 <muestreo+0x498>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	0018      	movs	r0, r3
 800abfc:	f7f7 fcb6 	bl	800256c <__aeabi_ui2d>
 800ac00:	0002      	movs	r2, r0
 800ac02:	000b      	movs	r3, r1
 800ac04:	0010      	movs	r0, r2
 800ac06:	0019      	movs	r1, r3
 800ac08:	f011 fb5a 	bl	801c2c0 <sqrt>
 800ac0c:	0002      	movs	r2, r0
 800ac0e:	000b      	movs	r3, r1
 800ac10:	0010      	movs	r0, r2
 800ac12:	0019      	movs	r1, r3
 800ac14:	f7f5 fc72 	bl	80004fc <__aeabi_d2uiz>
 800ac18:	0003      	movs	r3, r0
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	4b11      	ldr	r3, [pc, #68]	@ (800ac64 <muestreo+0x49c>)
 800ac1e:	701a      	strb	r2, [r3, #0]
					cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800ac20:	4b11      	ldr	r3, [pc, #68]	@ (800ac68 <muestreo+0x4a0>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	701a      	strb	r2, [r3, #0]

					flagsLogger2[0] = 0;//bres flagsLogger2, #0
 800ac26:	4b11      	ldr	r3, [pc, #68]	@ (800ac6c <muestreo+0x4a4>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
					flagsLogger2[1] = 0;//bres flagsLogger2, #1
 800ac2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac6c <muestreo+0x4a4>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	705a      	strb	r2, [r3, #1]
					flagsLogger2[2] = 0;//BRES flagsLogger2, #2
 800ac32:	4b0e      	ldr	r3, [pc, #56]	@ (800ac6c <muestreo+0x4a4>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	709a      	strb	r2, [r3, #2]

					// SAlto por lo mientras
					goto fin_calibra_voltaje;
 800ac38:	46c0      	nop			@ (mov r8, r8)
			asm ("nop");
			asm ("nop");
	        goto calibra_reset;//jp      calibra_reset

fin_calibra_voltaje:
	        goto fin_voltrms;// jp fin_voltrms
 800ac3a:	e00b      	b.n	800ac54 <muestreo+0x48c>
		goto error_muestreo;//jp error_muestreo
 800ac3c:	46c0      	nop			@ (mov r8, r8)
error_muestreo:
			cnt_mues = 0;//clr cnt_mues
 800ac3e:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <muestreo+0x494>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	701a      	strb	r2, [r3, #0]
			cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800ac44:	4b08      	ldr	r3, [pc, #32]	@ (800ac68 <muestreo+0x4a0>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	701a      	strb	r2, [r3, #0]
			edo_muestreo = 0;//mov edo_muestreo,#0
 800ac4a:	4b09      	ldr	r3, [pc, #36]	@ (800ac70 <muestreo+0x4a8>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
fin_voltrms:


}
 800ac50:	e000      	b.n	800ac54 <muestreo+0x48c>
		goto fin_voltrms;//jp fin_voltrms
 800ac52:	46c0      	nop			@ (mov r8, r8)
}
 800ac54:	46c0      	nop			@ (mov r8, r8)
 800ac56:	46bd      	mov	sp, r7
 800ac58:	b002      	add	sp, #8
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20000b7b 	.word	0x20000b7b
 800ac60:	20000b7c 	.word	0x20000b7c
 800ac64:	20000ba5 	.word	0x20000ba5
 800ac68:	20000ba4 	.word	0x20000ba4
 800ac6c:	20001064 	.word	0x20001064
 800ac70:	20000ba6 	.word	0x20000ba6

0800ac74 <noctar>:


void noctar (void){
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0

	asm ("nop");
 800ac78:	46c0      	nop			@ (mov r8, r8)

}
 800ac7a:	46c0      	nop			@ (mov r8, r8)
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800ac86:	2300      	movs	r3, #0
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	e00c      	b.n	800aca6 <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800ac8c:	4ad4      	ldr	r2, [pc, #848]	@ (800afe0 <refrigera+0x360>)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	18d3      	adds	r3, r2, r3
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800ac96:	4ad3      	ldr	r2, [pc, #844]	@ (800afe4 <refrigera+0x364>)
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	18d3      	adds	r3, r2, r3
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	3301      	adds	r3, #1
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b07      	cmp	r3, #7
 800acaa:	ddef      	ble.n	800ac8c <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800acac:	4bce      	ldr	r3, [pc, #824]	@ (800afe8 <refrigera+0x368>)
 800acae:	2253      	movs	r2, #83	@ 0x53
 800acb0:	5c9a      	ldrb	r2, [r3, r2]
 800acb2:	4bce      	ldr	r3, [pc, #824]	@ (800afec <refrigera+0x36c>)
 800acb4:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800acb6:	4bcd      	ldr	r3, [pc, #820]	@ (800afec <refrigera+0x36c>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	001a      	movs	r2, r3
 800acbc:	2301      	movs	r3, #1
 800acbe:	4013      	ands	r3, r2
 800acc0:	d003      	beq.n	800acca <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800acc2:	4bc7      	ldr	r3, [pc, #796]	@ (800afe0 <refrigera+0x360>)
 800acc4:	2201      	movs	r2, #1
 800acc6:	70da      	strb	r2, [r3, #3]
 800acc8:	e000      	b.n	800accc <refrigera+0x4c>
					goto refrigera_j00;
 800acca:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 800accc:	4bc7      	ldr	r3, [pc, #796]	@ (800afec <refrigera+0x36c>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	001a      	movs	r2, r3
 800acd2:	2302      	movs	r3, #2
 800acd4:	4013      	ands	r3, r2
 800acd6:	d003      	beq.n	800ace0 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 800acd8:	4bc1      	ldr	r3, [pc, #772]	@ (800afe0 <refrigera+0x360>)
 800acda:	2201      	movs	r2, #1
 800acdc:	711a      	strb	r2, [r3, #4]
 800acde:	e000      	b.n	800ace2 <refrigera+0x62>
					goto refrigera_j01;
 800ace0:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 800ace2:	4bc1      	ldr	r3, [pc, #772]	@ (800afe8 <refrigera+0x368>)
 800ace4:	2262      	movs	r2, #98	@ 0x62
 800ace6:	5c9a      	ldrb	r2, [r3, r2]
 800ace8:	4bc0      	ldr	r3, [pc, #768]	@ (800afec <refrigera+0x36c>)
 800acea:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 800acec:	f7fb fe2e 	bl	800694c <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 800acf0:	4bbd      	ldr	r3, [pc, #756]	@ (800afe8 <refrigera+0x368>)
 800acf2:	2257      	movs	r2, #87	@ 0x57
 800acf4:	5c9b      	ldrb	r3, [r3, r2]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d11e      	bne.n	800ad38 <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 800acfa:	4bbb      	ldr	r3, [pc, #748]	@ (800afe8 <refrigera+0x368>)
 800acfc:	2243      	movs	r2, #67	@ 0x43
 800acfe:	5c9b      	ldrb	r3, [r3, r2]
 800ad00:	3364      	adds	r3, #100	@ 0x64
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	4bba      	ldr	r3, [pc, #744]	@ (800aff0 <refrigera+0x370>)
 800ad06:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 800ad08:	4bb9      	ldr	r3, [pc, #740]	@ (800aff0 <refrigera+0x370>)
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	4bb9      	ldr	r3, [pc, #740]	@ (800aff4 <refrigera+0x374>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	18d3      	adds	r3, r2, r3
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	4bb8      	ldr	r3, [pc, #736]	@ (800aff8 <refrigera+0x378>)
 800ad16:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 800ad18:	4bb3      	ldr	r3, [pc, #716]	@ (800afe8 <refrigera+0x368>)
 800ad1a:	2244      	movs	r2, #68	@ 0x44
 800ad1c:	5c9b      	ldrb	r3, [r3, r2]
 800ad1e:	3b38      	subs	r3, #56	@ 0x38
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	4bb6      	ldr	r3, [pc, #728]	@ (800affc <refrigera+0x37c>)
 800ad24:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 800ad26:	4bb5      	ldr	r3, [pc, #724]	@ (800affc <refrigera+0x37c>)
 800ad28:	781a      	ldrb	r2, [r3, #0]
 800ad2a:	4bb0      	ldr	r3, [pc, #704]	@ (800afec <refrigera+0x36c>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	4bb3      	ldr	r3, [pc, #716]	@ (800b000 <refrigera+0x380>)
 800ad34:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800ad36:	e021      	b.n	800ad7c <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 800ad38:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 800ad3a:	4bab      	ldr	r3, [pc, #684]	@ (800afe8 <refrigera+0x368>)
 800ad3c:	2257      	movs	r2, #87	@ 0x57
 800ad3e:	5c9b      	ldrb	r3, [r3, r2]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d11f      	bne.n	800ad84 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800ad44:	4ba8      	ldr	r3, [pc, #672]	@ (800afe8 <refrigera+0x368>)
 800ad46:	2242      	movs	r2, #66	@ 0x42
 800ad48:	5c9a      	ldrb	r2, [r3, r2]
 800ad4a:	4ba9      	ldr	r3, [pc, #676]	@ (800aff0 <refrigera+0x370>)
 800ad4c:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 800ad4e:	4ba8      	ldr	r3, [pc, #672]	@ (800aff0 <refrigera+0x370>)
 800ad50:	781a      	ldrb	r2, [r3, #0]
 800ad52:	4ba8      	ldr	r3, [pc, #672]	@ (800aff4 <refrigera+0x374>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	18d3      	adds	r3, r2, r3
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	4ba7      	ldr	r3, [pc, #668]	@ (800aff8 <refrigera+0x378>)
 800ad5c:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 800ad5e:	4ba2      	ldr	r3, [pc, #648]	@ (800afe8 <refrigera+0x368>)
 800ad60:	2243      	movs	r2, #67	@ 0x43
 800ad62:	5c9b      	ldrb	r3, [r3, r2]
 800ad64:	3364      	adds	r3, #100	@ 0x64
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	4ba4      	ldr	r3, [pc, #656]	@ (800affc <refrigera+0x37c>)
 800ad6a:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 800ad6c:	4ba3      	ldr	r3, [pc, #652]	@ (800affc <refrigera+0x37c>)
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	4b9e      	ldr	r3, [pc, #632]	@ (800afec <refrigera+0x36c>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	4ba1      	ldr	r3, [pc, #644]	@ (800b000 <refrigera+0x380>)
 800ad7a:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 800ad7c:	4b98      	ldr	r3, [pc, #608]	@ (800afe0 <refrigera+0x360>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	719a      	strb	r2, [r3, #6]
 800ad82:	e000      	b.n	800ad86 <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800ad84:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800ad86:	4b97      	ldr	r3, [pc, #604]	@ (800afe4 <refrigera+0x364>)
 800ad88:	2201      	movs	r2, #1
 800ad8a:	705a      	strb	r2, [r3, #1]
				if(GetRegFlagState(Plantilla[logicos2],funReleDesh))	// btjt		logicos2,#funReleDesh,deshTypeAct_01
 800ad8c:	4b96      	ldr	r3, [pc, #600]	@ (800afe8 <refrigera+0x368>)
 800ad8e:	225b      	movs	r2, #91	@ 0x5b
 800ad90:	5c9b      	ldrb	r3, [r3, r2]
 800ad92:	001a      	movs	r2, r3
 800ad94:	2308      	movs	r3, #8
 800ad96:	4013      	ands	r3, r2
 800ad98:	d104      	bne.n	800ada4 <refrigera+0x124>
					goto deshTypeAct_01;
				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 800ad9a:	4b93      	ldr	r3, [pc, #588]	@ (800afe8 <refrigera+0x368>)
 800ad9c:	2255      	movs	r2, #85	@ 0x55
 800ad9e:	2100      	movs	r1, #0
 800ada0:	5499      	strb	r1, [r3, r2]
 800ada2:	e000      	b.n	800ada6 <refrigera+0x126>
					goto deshTypeAct_01;
 800ada4:	46c0      	nop			@ (mov r8, r8)
deshTypeAct_01:
              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800ada6:	4b97      	ldr	r3, [pc, #604]	@ (800b004 <refrigera+0x384>)
 800ada8:	0018      	movs	r0, r3
 800adaa:	f7fb fb85 	bl	80064b8 <TwoByteInArrayToWord>
 800adae:	0003      	movs	r3, r0
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	4b95      	ldr	r3, [pc, #596]	@ (800b008 <refrigera+0x388>)
 800adb4:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800adb6:	4b95      	ldr	r3, [pc, #596]	@ (800b00c <refrigera+0x38c>)
 800adb8:	0018      	movs	r0, r3
 800adba:	f7fb fb7d 	bl	80064b8 <TwoByteInArrayToWord>
 800adbe:	0003      	movs	r3, r0
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	4b91      	ldr	r3, [pc, #580]	@ (800b008 <refrigera+0x388>)
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	18d3      	adds	r3, r2, r3
 800adc8:	b29a      	uxth	r2, r3
 800adca:	4b91      	ldr	r3, [pc, #580]	@ (800b010 <refrigera+0x390>)
 800adcc:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 800adce:	4b91      	ldr	r3, [pc, #580]	@ (800b014 <refrigera+0x394>)
 800add0:	785b      	ldrb	r3, [r3, #1]
 800add2:	2201      	movs	r2, #1
 800add4:	4053      	eors	r3, r2
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d137      	bne.n	800ae4c <refrigera+0x1cc>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800addc:	4b8e      	ldr	r3, [pc, #568]	@ (800b018 <refrigera+0x398>)
 800adde:	0018      	movs	r0, r3
 800ade0:	f7fb fb6a 	bl	80064b8 <TwoByteInArrayToWord>
 800ade4:	0003      	movs	r3, r0
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	4b87      	ldr	r3, [pc, #540]	@ (800b008 <refrigera+0x388>)
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	18d3      	adds	r3, r2, r3
 800adee:	b29a      	uxth	r2, r3
 800adf0:	4b85      	ldr	r3, [pc, #532]	@ (800b008 <refrigera+0x388>)
 800adf2:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800adf4:	4b88      	ldr	r3, [pc, #544]	@ (800b018 <refrigera+0x398>)
 800adf6:	0018      	movs	r0, r3
 800adf8:	f7fb fb5e 	bl	80064b8 <TwoByteInArrayToWord>
 800adfc:	0003      	movs	r3, r0
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	4b83      	ldr	r3, [pc, #524]	@ (800b010 <refrigera+0x390>)
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	18d3      	adds	r3, r2, r3
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	4b81      	ldr	r3, [pc, #516]	@ (800b010 <refrigera+0x390>)
 800ae0a:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 800ae0c:	4b81      	ldr	r3, [pc, #516]	@ (800b014 <refrigera+0x394>)
 800ae0e:	789b      	ldrb	r3, [r3, #2]
 800ae10:	2201      	movs	r2, #1
 800ae12:	4053      	eors	r3, r2
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d11a      	bne.n	800ae50 <refrigera+0x1d0>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800ae1a:	4b80      	ldr	r3, [pc, #512]	@ (800b01c <refrigera+0x39c>)
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	f7fb fb4b 	bl	80064b8 <TwoByteInArrayToWord>
 800ae22:	0003      	movs	r3, r0
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	4b78      	ldr	r3, [pc, #480]	@ (800b008 <refrigera+0x388>)
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	18d3      	adds	r3, r2, r3
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	4b76      	ldr	r3, [pc, #472]	@ (800b008 <refrigera+0x388>)
 800ae30:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800ae32:	4b7a      	ldr	r3, [pc, #488]	@ (800b01c <refrigera+0x39c>)
 800ae34:	0018      	movs	r0, r3
 800ae36:	f7fb fb3f 	bl	80064b8 <TwoByteInArrayToWord>
 800ae3a:	0003      	movs	r3, r0
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	4b74      	ldr	r3, [pc, #464]	@ (800b010 <refrigera+0x390>)
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	18d3      	adds	r3, r2, r3
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	4b72      	ldr	r3, [pc, #456]	@ (800b010 <refrigera+0x390>)
 800ae48:	801a      	strh	r2, [r3, #0]
 800ae4a:	e002      	b.n	800ae52 <refrigera+0x1d2>
					goto no_ahorro1;
 800ae4c:	46c0      	nop			@ (mov r8, r8)
 800ae4e:	e000      	b.n	800ae52 <refrigera+0x1d2>
					goto no_ahorro1;
 800ae50:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 800ae52:	4b73      	ldr	r3, [pc, #460]	@ (800b020 <refrigera+0x3a0>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	001a      	movs	r2, r3
 800ae58:	2302      	movs	r3, #2
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	d138      	bne.n	800aed0 <refrigera+0x250>
					goto refrigera_j04;
 800ae5e:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 800ae60:	f7fb ff32 	bl	8006cc8 <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800ae64:	2313      	movs	r3, #19
 800ae66:	18fb      	adds	r3, r7, r3
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	e00f      	b.n	800ae8e <refrigera+0x20e>
					if(k!=4)
 800ae6e:	2213      	movs	r2, #19
 800ae70:	18bb      	adds	r3, r7, r2
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d004      	beq.n	800ae82 <refrigera+0x202>
						datled[k] = 0;
 800ae78:	18bb      	adds	r3, r7, r2
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	4a69      	ldr	r2, [pc, #420]	@ (800b024 <refrigera+0x3a4>)
 800ae7e:	2100      	movs	r1, #0
 800ae80:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 800ae82:	2113      	movs	r1, #19
 800ae84:	187b      	adds	r3, r7, r1
 800ae86:	781a      	ldrb	r2, [r3, #0]
 800ae88:	187b      	adds	r3, r7, r1
 800ae8a:	3201      	adds	r2, #1
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	2313      	movs	r3, #19
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b06      	cmp	r3, #6
 800ae96:	d9ea      	bls.n	800ae6e <refrigera+0x1ee>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 800ae98:	4b61      	ldr	r3, [pc, #388]	@ (800b020 <refrigera+0x3a0>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	001a      	movs	r2, r3
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4013      	ands	r3, r2
 800aea2:	d100      	bne.n	800aea6 <refrigera+0x226>
 800aea4:	e1fb      	b.n	800b29e <refrigera+0x61e>
					goto refrigera_j05;
 800aea6:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 800aea8:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 800aeaa:	4b5f      	ldr	r3, [pc, #380]	@ (800b028 <refrigera+0x3a8>)
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	4b4f      	ldr	r3, [pc, #316]	@ (800afec <refrigera+0x36c>)
 800aeb0:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800aeb2:	4b4e      	ldr	r3, [pc, #312]	@ (800afec <refrigera+0x36c>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	001a      	movs	r2, r3
 800aeb8:	4b5c      	ldr	r3, [pc, #368]	@ (800b02c <refrigera+0x3ac>)
 800aeba:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 800aebc:	f7fb fb4e 	bl	800655c <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800aec0:	4b4a      	ldr	r3, [pc, #296]	@ (800afec <refrigera+0x36c>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <refrigera+0x24c>
 800aec8:	f000 fb98 	bl	800b5fc <refrigera+0x97c>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 800aecc:	f000 fb9a 	bl	800b604 <refrigera+0x984>
				goto refrige10;
 800aed0:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800aed2:	f7fb fbb3 	bl	800663c <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 800aed6:	4953      	ldr	r1, [pc, #332]	@ (800b024 <refrigera+0x3a4>)
 800aed8:	4852      	ldr	r0, [pc, #328]	@ (800b024 <refrigera+0x3a4>)
 800aeda:	2303      	movs	r3, #3
 800aedc:	2202      	movs	r2, #2
 800aede:	f002 fd62 	bl	800d9a6 <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800aee2:	4b53      	ldr	r3, [pc, #332]	@ (800b030 <refrigera+0x3b0>)
 800aee4:	791b      	ldrb	r3, [r3, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	4053      	eors	r3, r2
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d137      	bne.n	800af60 <refrigera+0x2e0>
            cntMsgCmd = 250;
 800aef0:	4b50      	ldr	r3, [pc, #320]	@ (800b034 <refrigera+0x3b4>)
 800aef2:	22fa      	movs	r2, #250	@ 0xfa
 800aef4:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 800aef6:	4b50      	ldr	r3, [pc, #320]	@ (800b038 <refrigera+0x3b8>)
 800aef8:	2203      	movs	r2, #3
 800aefa:	701a      	strb	r2, [r3, #0]
            estado1[est1LockDr] ^= 0x1;
 800aefc:	4b4f      	ldr	r3, [pc, #316]	@ (800b03c <refrigera+0x3bc>)
 800aefe:	799b      	ldrb	r3, [r3, #6]
 800af00:	2201      	movs	r2, #1
 800af02:	4053      	eors	r3, r2
 800af04:	b2db      	uxtb	r3, r3
 800af06:	1e5a      	subs	r2, r3, #1
 800af08:	4193      	sbcs	r3, r2
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b4b      	ldr	r3, [pc, #300]	@ (800b03c <refrigera+0x3bc>)
 800af0e:	719a      	strb	r2, [r3, #6]
            waux = reeEstado1;
 800af10:	4b4b      	ldr	r3, [pc, #300]	@ (800b040 <refrigera+0x3c0>)
 800af12:	781a      	ldrb	r2, [r3, #0]
 800af14:	4b37      	ldr	r3, [pc, #220]	@ (800aff4 <refrigera+0x374>)
 800af16:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 800af18:	4b36      	ldr	r3, [pc, #216]	@ (800aff4 <refrigera+0x374>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	2240      	movs	r2, #64	@ 0x40
 800af1e:	4393      	bics	r3, r2
 800af20:	b2da      	uxtb	r2, r3
 800af22:	4b34      	ldr	r3, [pc, #208]	@ (800aff4 <refrigera+0x374>)
 800af24:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 800af26:	4b45      	ldr	r3, [pc, #276]	@ (800b03c <refrigera+0x3bc>)
 800af28:	799b      	ldrb	r3, [r3, #6]
 800af2a:	2201      	movs	r2, #1
 800af2c:	4053      	eors	r3, r2
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d107      	bne.n	800af44 <refrigera+0x2c4>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 800af34:	4b2f      	ldr	r3, [pc, #188]	@ (800aff4 <refrigera+0x374>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2240      	movs	r2, #64	@ 0x40
 800af3a:	4313      	orrs	r3, r2
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	4b2d      	ldr	r3, [pc, #180]	@ (800aff4 <refrigera+0x374>)
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e000      	b.n	800af46 <refrigera+0x2c6>
            	goto func_lock_01;
 800af44:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 800af46:	4b2b      	ldr	r3, [pc, #172]	@ (800aff4 <refrigera+0x374>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	001a      	movs	r2, r3
 800af4c:	4b3d      	ldr	r3, [pc, #244]	@ (800b044 <refrigera+0x3c4>)
 800af4e:	0019      	movs	r1, r3
 800af50:	0010      	movs	r0, r2
 800af52:	f7fc fb3f 	bl	80075d4 <wreeprom>
			reeEstado1 = waux;
 800af56:	4b27      	ldr	r3, [pc, #156]	@ (800aff4 <refrigera+0x374>)
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	4b39      	ldr	r3, [pc, #228]	@ (800b040 <refrigera+0x3c0>)
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	e000      	b.n	800af62 <refrigera+0x2e2>
            	goto no_Func_Lock;
 800af60:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 800af62:	4b33      	ldr	r3, [pc, #204]	@ (800b030 <refrigera+0x3b0>)
 800af64:	789b      	ldrb	r3, [r3, #2]
 800af66:	2201      	movs	r2, #1
 800af68:	4053      	eors	r3, r2
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d16b      	bne.n	800b048 <refrigera+0x3c8>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 800af70:	4b30      	ldr	r3, [pc, #192]	@ (800b034 <refrigera+0x3b4>)
 800af72:	22fa      	movs	r2, #250	@ 0xfa
 800af74:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 800af76:	4b30      	ldr	r3, [pc, #192]	@ (800b038 <refrigera+0x3b8>)
 800af78:	2202      	movs	r2, #2
 800af7a:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800af7c:	4b25      	ldr	r3, [pc, #148]	@ (800b014 <refrigera+0x394>)
 800af7e:	799b      	ldrb	r3, [r3, #6]
 800af80:	2201      	movs	r2, #1
 800af82:	4053      	eors	r3, r2
 800af84:	b2db      	uxtb	r3, r3
 800af86:	1e5a      	subs	r2, r3, #1
 800af88:	4193      	sbcs	r3, r2
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	4b21      	ldr	r3, [pc, #132]	@ (800b014 <refrigera+0x394>)
 800af8e:	719a      	strb	r2, [r3, #6]
               waux = reeEstado1;
 800af90:	4b2b      	ldr	r3, [pc, #172]	@ (800b040 <refrigera+0x3c0>)
 800af92:	781a      	ldrb	r2, [r3, #0]
 800af94:	4b17      	ldr	r3, [pc, #92]	@ (800aff4 <refrigera+0x374>)
 800af96:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 800af98:	4b16      	ldr	r3, [pc, #88]	@ (800aff4 <refrigera+0x374>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2204      	movs	r2, #4
 800af9e:	4393      	bics	r3, r2
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	4b14      	ldr	r3, [pc, #80]	@ (800aff4 <refrigera+0x374>)
 800afa4:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 800afa6:	4b1b      	ldr	r3, [pc, #108]	@ (800b014 <refrigera+0x394>)
 800afa8:	799b      	ldrb	r3, [r3, #6]
 800afaa:	2201      	movs	r2, #1
 800afac:	4053      	eors	r3, r2
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d107      	bne.n	800afc4 <refrigera+0x344>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 800afb4:	4b0f      	ldr	r3, [pc, #60]	@ (800aff4 <refrigera+0x374>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2204      	movs	r2, #4
 800afba:	4313      	orrs	r3, r2
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <refrigera+0x374>)
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	e000      	b.n	800afc6 <refrigera+0x346>
            	   goto refrigera_j06d;
 800afc4:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 800afc6:	4b0b      	ldr	r3, [pc, #44]	@ (800aff4 <refrigera+0x374>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	001a      	movs	r2, r3
 800afcc:	4b1d      	ldr	r3, [pc, #116]	@ (800b044 <refrigera+0x3c4>)
 800afce:	0019      	movs	r1, r3
 800afd0:	0010      	movs	r0, r2
 800afd2:	f7fc faff 	bl	80075d4 <wreeprom>
				reeEstado1 = waux;
 800afd6:	4b07      	ldr	r3, [pc, #28]	@ (800aff4 <refrigera+0x374>)
 800afd8:	781a      	ldrb	r2, [r3, #0]
 800afda:	4b19      	ldr	r3, [pc, #100]	@ (800b040 <refrigera+0x3c0>)
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	e034      	b.n	800b04a <refrigera+0x3ca>
 800afe0:	20000c00 	.word	0x20000c00
 800afe4:	20000c3c 	.word	0x20000c3c
 800afe8:	200000b8 	.word	0x200000b8
 800afec:	20000bb3 	.word	0x20000bb3
 800aff0:	20000c80 	.word	0x20000c80
 800aff4:	20000bb2 	.word	0x20000bb2
 800aff8:	20000c82 	.word	0x20000c82
 800affc:	20000c7f 	.word	0x20000c7f
 800b000:	20000c81 	.word	0x20000c81
 800b004:	200000b9 	.word	0x200000b9
 800b008:	20000c08 	.word	0x20000c08
 800b00c:	200000bb 	.word	0x200000bb
 800b010:	20000c0a 	.word	0x20000c0a
 800b014:	20000c98 	.word	0x20000c98
 800b018:	200000d3 	.word	0x200000d3
 800b01c:	200000d5 	.word	0x200000d5
 800b020:	20000bf4 	.word	0x20000bf4
 800b024:	20000bec 	.word	0x20000bec
 800b028:	20000bc8 	.word	0x20000bc8
 800b02c:	20000c16 	.word	0x20000c16
 800b030:	20000bf8 	.word	0x20000bf8
 800b034:	2000114c 	.word	0x2000114c
 800b038:	2000114d 	.word	0x2000114d
 800b03c:	2000112c 	.word	0x2000112c
 800b040:	200001ba 	.word	0x200001ba
 800b044:	0803f803 	.word	0x0803f803
            	   goto refrigera_j06c;
 800b048:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800b04a:	4bd0      	ldr	r3, [pc, #832]	@ (800b38c <refrigera+0x70c>)
 800b04c:	789b      	ldrb	r3, [r3, #2]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d121      	bne.n	800b096 <refrigera+0x416>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 800b052:	4bcf      	ldr	r3, [pc, #828]	@ (800b390 <refrigera+0x710>)
 800b054:	78db      	ldrb	r3, [r3, #3]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d11f      	bne.n	800b09a <refrigera+0x41a>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800b05a:	4bce      	ldr	r3, [pc, #824]	@ (800b394 <refrigera+0x714>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2201      	movs	r2, #1
 800b060:	4053      	eors	r3, r2
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d11a      	bne.n	800b09e <refrigera+0x41e>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 800b068:	4bc8      	ldr	r3, [pc, #800]	@ (800b38c <refrigera+0x70c>)
 800b06a:	799b      	ldrb	r3, [r3, #6]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10b      	bne.n	800b088 <refrigera+0x408>
                if(retLampOff != 0){ //tnz retLampOff
 800b070:	4bc9      	ldr	r3, [pc, #804]	@ (800b398 <refrigera+0x718>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d109      	bne.n	800b08c <refrigera+0x40c>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 800b078:	4bc4      	ldr	r3, [pc, #784]	@ (800b38c <refrigera+0x70c>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2201      	movs	r2, #1
 800b07e:	4053      	eors	r3, r2
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10d      	bne.n	800b0a2 <refrigera+0x422>
refrigera_j06a:
 800b086:	e002      	b.n	800b08e <refrigera+0x40e>
                	goto refrigera_j06a;
 800b088:	46c0      	nop			@ (mov r8, r8)
 800b08a:	e000      	b.n	800b08e <refrigera+0x40e>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 800b08c:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 800b08e:	4bc3      	ldr	r3, [pc, #780]	@ (800b39c <refrigera+0x71c>)
 800b090:	2201      	movs	r2, #1
 800b092:	709a      	strb	r2, [r3, #2]
 800b094:	e006      	b.n	800b0a4 <refrigera+0x424>
                	goto refrigera_j06;
 800b096:	46c0      	nop			@ (mov r8, r8)
 800b098:	e004      	b.n	800b0a4 <refrigera+0x424>
                	goto refrigera_j06;
 800b09a:	46c0      	nop			@ (mov r8, r8)
 800b09c:	e002      	b.n	800b0a4 <refrigera+0x424>
                	goto refrigera_j06;
 800b09e:	46c0      	nop			@ (mov r8, r8)
 800b0a0:	e000      	b.n	800b0a4 <refrigera+0x424>
                	goto refrigera_j06;
 800b0a2:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 800b0a4:	4bbe      	ldr	r3, [pc, #760]	@ (800b3a0 <refrigera+0x720>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	001a      	movs	r2, r3
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	d101      	bne.n	800b0b4 <refrigera+0x434>
 800b0b0:	f000 fc16 	bl	800b8e0 <refrigera+0xc60>
                	goto refrigera_j07;
 800b0b4:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 800b0b6:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800b0b8:	49ba      	ldr	r1, [pc, #744]	@ (800b3a4 <refrigera+0x724>)
 800b0ba:	48ba      	ldr	r0, [pc, #744]	@ (800b3a4 <refrigera+0x724>)
 800b0bc:	2307      	movs	r3, #7
 800b0be:	2203      	movs	r2, #3
 800b0c0:	f002 fc56 	bl	800d970 <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 800b0c4:	4bb8      	ldr	r3, [pc, #736]	@ (800b3a8 <refrigera+0x728>)
 800b0c6:	2259      	movs	r2, #89	@ 0x59
 800b0c8:	5c9b      	ldrb	r3, [r3, r2]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d001      	beq.n	800b0d2 <refrigera+0x452>
 800b0ce:	f000 fe40 	bl	800bd52 <refrigera+0x10d2>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 800b0d2:	f000 fe4e 	bl	800bd72 <refrigera+0x10f2>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 800b0d6:	4bb5      	ldr	r3, [pc, #724]	@ (800b3ac <refrigera+0x72c>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	801a      	strh	r2, [r3, #0]
				goto finref;
 800b0dc:	e061      	b.n	800b1a2 <refrigera+0x522>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 800b0de:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 800b0e0:	4bb1      	ldr	r3, [pc, #708]	@ (800b3a8 <refrigera+0x728>)
 800b0e2:	2264      	movs	r2, #100	@ 0x64
 800b0e4:	5c9a      	ldrb	r2, [r3, r2]
 800b0e6:	4bb2      	ldr	r3, [pc, #712]	@ (800b3b0 <refrigera+0x730>)
 800b0e8:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800b0ea:	f7fb fc2f 	bl	800694c <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 800b0ee:	4bb1      	ldr	r3, [pc, #708]	@ (800b3b4 <refrigera+0x734>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	001a      	movs	r2, r3
 800b0f4:	233c      	movs	r3, #60	@ 0x3c
 800b0f6:	4353      	muls	r3, r2
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	4baf      	ldr	r3, [pc, #700]	@ (800b3b8 <refrigera+0x738>)
 800b0fc:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 800b0fe:	4bac      	ldr	r3, [pc, #688]	@ (800b3b0 <refrigera+0x730>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	001a      	movs	r2, r3
 800b104:	233c      	movs	r3, #60	@ 0x3c
 800b106:	4353      	muls	r3, r2
 800b108:	b29a      	uxth	r2, r3
 800b10a:	4bac      	ldr	r3, [pc, #688]	@ (800b3bc <refrigera+0x73c>)
 800b10c:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 800b10e:	f7fb fa75 	bl	80065fc <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 800b112:	4ba3      	ldr	r3, [pc, #652]	@ (800b3a0 <refrigera+0x720>)
 800b114:	2202      	movs	r2, #2
 800b116:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 800b118:	e040      	b.n	800b19c <refrigera+0x51c>
				retvent = 20;
 800b11a:	4ba9      	ldr	r3, [pc, #676]	@ (800b3c0 <refrigera+0x740>)
 800b11c:	2214      	movs	r2, #20
 800b11e:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 800b120:	4ba8      	ldr	r3, [pc, #672]	@ (800b3c4 <refrigera+0x744>)
 800b122:	2232      	movs	r2, #50	@ 0x32
 800b124:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 800b126:	4b9e      	ldr	r3, [pc, #632]	@ (800b3a0 <refrigera+0x720>)
 800b128:	2202      	movs	r2, #2
 800b12a:	701a      	strb	r2, [r3, #0]
				goto todh20;
 800b12c:	e036      	b.n	800b19c <refrigera+0x51c>
                  goto todh; //jp todh
 800b12e:	46c0      	nop			@ (mov r8, r8)
 800b130:	e000      	b.n	800b134 <refrigera+0x4b4>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 800b132:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 800b134:	4ba4      	ldr	r3, [pc, #656]	@ (800b3c8 <refrigera+0x748>)
 800b136:	2200      	movs	r2, #0
 800b138:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 800b13a:	f7fb f9ed 	bl	8006518 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 800b13e:	4b9a      	ldr	r3, [pc, #616]	@ (800b3a8 <refrigera+0x728>)
 800b140:	2247      	movs	r2, #71	@ 0x47
 800b142:	5c9a      	ldrb	r2, [r3, r2]
 800b144:	4b9a      	ldr	r3, [pc, #616]	@ (800b3b0 <refrigera+0x730>)
 800b146:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 800b148:	4b97      	ldr	r3, [pc, #604]	@ (800b3a8 <refrigera+0x728>)
 800b14a:	2255      	movs	r2, #85	@ 0x55
 800b14c:	5c9b      	ldrb	r3, [r3, r2]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d102      	bne.n	800b158 <refrigera+0x4d8>
				BaBentre10_math();					//call BaBentre10_math
 800b152:	f7fb fbfb 	bl	800694c <BaBentre10_math>
				goto todh2;
 800b156:	e014      	b.n	800b182 <refrigera+0x502>
					goto todh1;
 800b158:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 800b15a:	4b95      	ldr	r3, [pc, #596]	@ (800b3b0 <refrigera+0x730>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	001a      	movs	r2, r3
 800b160:	233c      	movs	r3, #60	@ 0x3c
 800b162:	4353      	muls	r3, r2
 800b164:	b29a      	uxth	r2, r3
 800b166:	4b99      	ldr	r3, [pc, #612]	@ (800b3cc <refrigera+0x74c>)
 800b168:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800b16a:	4b98      	ldr	r3, [pc, #608]	@ (800b3cc <refrigera+0x74c>)
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	0a1b      	lsrs	r3, r3, #8
 800b170:	b29b      	uxth	r3, r3
 800b172:	b2da      	uxtb	r2, r3
 800b174:	4b96      	ldr	r3, [pc, #600]	@ (800b3d0 <refrigera+0x750>)
 800b176:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800b178:	4b94      	ldr	r3, [pc, #592]	@ (800b3cc <refrigera+0x74c>)
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	4b95      	ldr	r3, [pc, #596]	@ (800b3d4 <refrigera+0x754>)
 800b180:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 800b182:	4b93      	ldr	r3, [pc, #588]	@ (800b3d0 <refrigera+0x750>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	021b      	lsls	r3, r3, #8
 800b188:	b29b      	uxth	r3, r3
 800b18a:	4a92      	ldr	r2, [pc, #584]	@ (800b3d4 <refrigera+0x754>)
 800b18c:	7812      	ldrb	r2, [r2, #0]
 800b18e:	189b      	adds	r3, r3, r2
 800b190:	b29a      	uxth	r2, r3
 800b192:	4b91      	ldr	r3, [pc, #580]	@ (800b3d8 <refrigera+0x758>)
 800b194:	801a      	strh	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800b196:	4b82      	ldr	r3, [pc, #520]	@ (800b3a0 <refrigera+0x720>)
 800b198:	2203      	movs	r2, #3
 800b19a:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 800b19c:	4b8f      	ldr	r3, [pc, #572]	@ (800b3dc <refrigera+0x75c>)
 800b19e:	2204      	movs	r2, #4
 800b1a0:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 800b1a2:	4b7e      	ldr	r3, [pc, #504]	@ (800b39c <refrigera+0x71c>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d103      	bne.n	800b1b2 <refrigera+0x532>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 800b1aa:	4b7e      	ldr	r3, [pc, #504]	@ (800b3a4 <refrigera+0x724>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	709a      	strb	r2, [r3, #2]
 800b1b0:	e000      	b.n	800b1b4 <refrigera+0x534>
                	goto refrigera_j11;
 800b1b2:	46c0      	nop			@ (mov r8, r8)
				estado1_Aux = reeEstado1;
 800b1b4:	1dfb      	adds	r3, r7, #7
 800b1b6:	4a8a      	ldr	r2, [pc, #552]	@ (800b3e0 <refrigera+0x760>)
 800b1b8:	7812      	ldrb	r2, [r2, #0]
 800b1ba:	701a      	strb	r2, [r3, #0]
                if(!GetRegFlagState(estado1_Aux,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800b1bc:	1dfb      	adds	r3, r7, #7
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2240      	movs	r2, #64	@ 0x40
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	d003      	beq.n	800b1ce <refrigera+0x54e>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 800b1c6:	4b75      	ldr	r3, [pc, #468]	@ (800b39c <refrigera+0x71c>)
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	705a      	strb	r2, [r3, #1]
 800b1cc:	e000      	b.n	800b1d0 <refrigera+0x550>
                	goto refrigeraLockDrOFF;
 800b1ce:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 800b1d0:	4b84      	ldr	r3, [pc, #528]	@ (800b3e4 <refrigera+0x764>)
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00f      	beq.n	800b1f8 <refrigera+0x578>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 800b1d8:	4b70      	ldr	r3, [pc, #448]	@ (800b39c <refrigera+0x71c>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800b1de:	4b6f      	ldr	r3, [pc, #444]	@ (800b39c <refrigera+0x71c>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 800b1e4:	4b80      	ldr	r3, [pc, #512]	@ (800b3e8 <refrigera+0x768>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800b1ea:	496e      	ldr	r1, [pc, #440]	@ (800b3a4 <refrigera+0x724>)
 800b1ec:	486d      	ldr	r0, [pc, #436]	@ (800b3a4 <refrigera+0x724>)
 800b1ee:	2307      	movs	r3, #7
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	f002 fbd8 	bl	800d9a6 <Bclear_Clear_trfst>
               goto endNoct;
 800b1f6:	e01b      	b.n	800b230 <refrigera+0x5b0>
            	   goto endNocturno;
 800b1f8:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800b1fa:	4b65      	ldr	r3, [pc, #404]	@ (800b390 <refrigera+0x710>)
 800b1fc:	78db      	ldrb	r3, [r3, #3]
 800b1fe:	2201      	movs	r2, #1
 800b200:	4053      	eors	r3, r2
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b00      	cmp	r3, #0
 800b206:	d112      	bne.n	800b22e <refrigera+0x5ae>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 800b208:	4961      	ldr	r1, [pc, #388]	@ (800b390 <refrigera+0x710>)
 800b20a:	4862      	ldr	r0, [pc, #392]	@ (800b394 <refrigera+0x714>)
 800b20c:	2303      	movs	r3, #3
 800b20e:	2200      	movs	r2, #0
 800b210:	f002 fbae 	bl	800d970 <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 800b214:	4963      	ldr	r1, [pc, #396]	@ (800b3a4 <refrigera+0x724>)
 800b216:	485d      	ldr	r0, [pc, #372]	@ (800b38c <refrigera+0x70c>)
 800b218:	2304      	movs	r3, #4
 800b21a:	2201      	movs	r2, #1
 800b21c:	f002 fba8 	bl	800d970 <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 800b220:	4b72      	ldr	r3, [pc, #456]	@ (800b3ec <refrigera+0x76c>)
 800b222:	2200      	movs	r2, #0
 800b224:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 800b226:	4b72      	ldr	r3, [pc, #456]	@ (800b3f0 <refrigera+0x770>)
 800b228:	2200      	movs	r2, #0
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	e000      	b.n	800b230 <refrigera+0x5b0>
            	  goto endNoct;
 800b22e:	46c0      	nop			@ (mov r8, r8)
			estado1_Aux = reeEstado1;
 800b230:	1dfb      	adds	r3, r7, #7
 800b232:	4a6b      	ldr	r2, [pc, #428]	@ (800b3e0 <refrigera+0x760>)
 800b234:	7812      	ldrb	r2, [r2, #0]
 800b236:	701a      	strb	r2, [r3, #0]
			if(GetRegFlagState (estado1_Aux, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 800b238:	1dfb      	adds	r3, r7, #7
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2201      	movs	r2, #1
 800b23e:	4013      	ands	r3, r2
 800b240:	d118      	bne.n	800b274 <refrigera+0x5f4>
refriOFF:
 800b242:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 800b244:	f000 fe08 	bl	800be58 <st_refri>
           for(uint8_t k=0; k<8; k++){
 800b248:	2312      	movs	r3, #18
 800b24a:	18fb      	adds	r3, r7, r3
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	e00a      	b.n	800b268 <refrigera+0x5e8>
        	   datled[k] = 0;
 800b252:	2012      	movs	r0, #18
 800b254:	183b      	adds	r3, r7, r0
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	4a52      	ldr	r2, [pc, #328]	@ (800b3a4 <refrigera+0x724>)
 800b25a:	2100      	movs	r1, #0
 800b25c:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 800b25e:	183b      	adds	r3, r7, r0
 800b260:	781a      	ldrb	r2, [r3, #0]
 800b262:	183b      	adds	r3, r7, r0
 800b264:	3201      	adds	r2, #1
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	2312      	movs	r3, #18
 800b26a:	18fb      	adds	r3, r7, r3
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2b07      	cmp	r3, #7
 800b270:	d9ef      	bls.n	800b252 <refrigera+0x5d2>
refriON:
 800b272:	e000      	b.n	800b276 <refrigera+0x5f6>
            	 goto refriON;
 800b274:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 800b276:	4b5f      	ldr	r3, [pc, #380]	@ (800b3f4 <refrigera+0x774>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2201      	movs	r2, #1
 800b27c:	4053      	eors	r3, r2
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d109      	bne.n	800b298 <refrigera+0x618>
         st_refri();
 800b284:	f000 fde8 	bl	800be58 <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 800b288:	4b5b      	ldr	r3, [pc, #364]	@ (800b3f8 <refrigera+0x778>)
 800b28a:	2201      	movs	r2, #1
 800b28c:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 800b28e:	4b3f      	ldr	r3, [pc, #252]	@ (800b38c <refrigera+0x70c>)
 800b290:	2201      	movs	r2, #1
 800b292:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800b294:	f000 fda2 	bl	800bddc <refrigera+0x115c>
        	 goto ac_OK;
 800b298:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 800b29a:	f000 fd9f 	bl	800bddc <refrigera+0x115c>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 800b29e:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800b2a0:	4b56      	ldr	r3, [pc, #344]	@ (800b3fc <refrigera+0x77c>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 800b2a6:	f7fb f91d 	bl	80064e4 <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 800b2aa:	f7fb f923 	bl	80064f4 <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 800b2ae:	4954      	ldr	r1, [pc, #336]	@ (800b400 <refrigera+0x780>)
 800b2b0:	4853      	ldr	r0, [pc, #332]	@ (800b400 <refrigera+0x780>)
 800b2b2:	2307      	movs	r3, #7
 800b2b4:	2206      	movs	r2, #6
 800b2b6:	f002 fb76 	bl	800d9a6 <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 800b2ba:	4b52      	ldr	r3, [pc, #328]	@ (800b404 <refrigera+0x784>)
 800b2bc:	2202      	movs	r2, #2
 800b2be:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800b2c0:	4b3b      	ldr	r3, [pc, #236]	@ (800b3b0 <refrigera+0x730>)
 800b2c2:	2205      	movs	r2, #5
 800b2c4:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 800b2c6:	4b4d      	ldr	r3, [pc, #308]	@ (800b3fc <refrigera+0x77c>)
 800b2c8:	799b      	ldrb	r3, [r3, #6]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4053      	eors	r3, r2
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d103      	bne.n	800b2dc <refrigera+0x65c>
          wreg = 0x01;
 800b2d4:	4b36      	ldr	r3, [pc, #216]	@ (800b3b0 <refrigera+0x730>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e000      	b.n	800b2de <refrigera+0x65e>
        	  goto no_change_time;
 800b2dc:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 800b2de:	4b34      	ldr	r3, [pc, #208]	@ (800b3b0 <refrigera+0x730>)
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	4b37      	ldr	r3, [pc, #220]	@ (800b3c0 <refrigera+0x740>)
 800b2e4:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 800b2e6:	4b32      	ldr	r3, [pc, #200]	@ (800b3b0 <refrigera+0x730>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	001a      	movs	r2, r3
 800b2ec:	4b46      	ldr	r3, [pc, #280]	@ (800b408 <refrigera+0x788>)
 800b2ee:	801a      	strh	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 800b2f0:	f7fb f934 	bl	800655c <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800b2f4:	4b2d      	ldr	r3, [pc, #180]	@ (800b3ac <refrigera+0x72c>)
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	2b63      	cmp	r3, #99	@ 0x63
 800b2fa:	d929      	bls.n	800b350 <refrigera+0x6d0>
			if(cntblkh <= 250){
 800b2fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b3ac <refrigera+0x72c>)
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	2bfa      	cmp	r3, #250	@ 0xfa
 800b302:	d92d      	bls.n	800b360 <refrigera+0x6e0>
			if(cntblkh < 300){
 800b304:	4b29      	ldr	r3, [pc, #164]	@ (800b3ac <refrigera+0x72c>)
 800b306:	881a      	ldrh	r2, [r3, #0]
 800b308:	2396      	movs	r3, #150	@ 0x96
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d321      	bcc.n	800b354 <refrigera+0x6d4>
			if(cntblkh < 450){
 800b310:	4b26      	ldr	r3, [pc, #152]	@ (800b3ac <refrigera+0x72c>)
 800b312:	881a      	ldrh	r2, [r3, #0]
 800b314:	23e1      	movs	r3, #225	@ 0xe1
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	429a      	cmp	r2, r3
 800b31a:	d200      	bcs.n	800b31e <refrigera+0x69e>
 800b31c:	e08d      	b.n	800b43a <refrigera+0x7ba>
			if(cntblkh < 500){
 800b31e:	4b23      	ldr	r3, [pc, #140]	@ (800b3ac <refrigera+0x72c>)
 800b320:	881a      	ldrh	r2, [r3, #0]
 800b322:	23fa      	movs	r3, #250	@ 0xfa
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	429a      	cmp	r2, r3
 800b328:	d316      	bcc.n	800b358 <refrigera+0x6d8>
			if(cntblkh < 650){
 800b32a:	4b20      	ldr	r3, [pc, #128]	@ (800b3ac <refrigera+0x72c>)
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	4a37      	ldr	r2, [pc, #220]	@ (800b40c <refrigera+0x78c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d800      	bhi.n	800b336 <refrigera+0x6b6>
 800b334:	e0d8      	b.n	800b4e8 <refrigera+0x868>
			if(cntblkh < 700){
 800b336:	4b1d      	ldr	r3, [pc, #116]	@ (800b3ac <refrigera+0x72c>)
 800b338:	881a      	ldrh	r2, [r3, #0]
 800b33a:	23af      	movs	r3, #175	@ 0xaf
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	429a      	cmp	r2, r3
 800b340:	d30c      	bcc.n	800b35c <refrigera+0x6dc>
			if(cntblkh < 850){
 800b342:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ac <refrigera+0x72c>)
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	4a32      	ldr	r2, [pc, #200]	@ (800b410 <refrigera+0x790>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d800      	bhi.n	800b34e <refrigera+0x6ce>
 800b34c:	e0ea      	b.n	800b524 <refrigera+0x8a4>
indi_off:
 800b34e:	e006      	b.n	800b35e <refrigera+0x6de>
				goto indi_off; //jrult	indi_off
 800b350:	46c0      	nop			@ (mov r8, r8)
 800b352:	e105      	b.n	800b560 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b354:	46c0      	nop			@ (mov r8, r8)
 800b356:	e103      	b.n	800b560 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b358:	46c0      	nop			@ (mov r8, r8)
 800b35a:	e101      	b.n	800b560 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b35c:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 800b35e:	e0ff      	b.n	800b560 <refrigera+0x8e0>
				goto Indi_int; //jrule	Indi_int
 800b360:	46c0      	nop			@ (mov r8, r8)
			soloent (reePlantilla[interdh]);
 800b362:	4b2c      	ldr	r3, [pc, #176]	@ (800b414 <refrigera+0x794>)
 800b364:	2246      	movs	r2, #70	@ 0x46
 800b366:	5c9b      	ldrb	r3, [r3, r2]
 800b368:	0018      	movs	r0, r3
 800b36a:	f7fb fabd 	bl	80068e8 <soloent>
			op_menu (reePlantilla[eeD1_Msg1] , reePlantilla[eeD2_Msg1]);
 800b36e:	4b29      	ldr	r3, [pc, #164]	@ (800b414 <refrigera+0x794>)
 800b370:	225f      	movs	r2, #95	@ 0x5f
 800b372:	5c9a      	ldrb	r2, [r3, r2]
 800b374:	4b27      	ldr	r3, [pc, #156]	@ (800b414 <refrigera+0x794>)
 800b376:	2160      	movs	r1, #96	@ 0x60
 800b378:	5c5b      	ldrb	r3, [r3, r1]
 800b37a:	0019      	movs	r1, r3
 800b37c:	0010      	movs	r0, r2
 800b37e:	f7fc f93d 	bl	80075fc <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b382:	2311      	movs	r3, #17
 800b384:	18fb      	adds	r3, r7, r3
 800b386:	2200      	movs	r2, #0
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	e050      	b.n	800b42e <refrigera+0x7ae>
 800b38c:	20000c98 	.word	0x20000c98
 800b390:	20000bd4 	.word	0x20000bd4
 800b394:	20000c44 	.word	0x20000c44
 800b398:	2000114e 	.word	0x2000114e
 800b39c:	20000c00 	.word	0x20000c00
 800b3a0:	20000bf4 	.word	0x20000bf4
 800b3a4:	20000bec 	.word	0x20000bec
 800b3a8:	200000b8 	.word	0x200000b8
 800b3ac:	20000bac 	.word	0x20000bac
 800b3b0:	20000bb3 	.word	0x20000bb3
 800b3b4:	20000bb2 	.word	0x20000bb2
 800b3b8:	20000c56 	.word	0x20000c56
 800b3bc:	20000c58 	.word	0x20000c58
 800b3c0:	20000bc6 	.word	0x20000bc6
 800b3c4:	20000bbe 	.word	0x20000bbe
 800b3c8:	20000bc9 	.word	0x20000bc9
 800b3cc:	20000932 	.word	0x20000932
 800b3d0:	20000ba7 	.word	0x20000ba7
 800b3d4:	20000ba8 	.word	0x20000ba8
 800b3d8:	20000c14 	.word	0x20000c14
 800b3dc:	20000bc7 	.word	0x20000bc7
 800b3e0:	200001ba 	.word	0x200001ba
 800b3e4:	20000ca0 	.word	0x20000ca0
 800b3e8:	20000c3c 	.word	0x20000c3c
 800b3ec:	20000c8c 	.word	0x20000c8c
 800b3f0:	20000c8e 	.word	0x20000c8e
 800b3f4:	20001190 	.word	0x20001190
 800b3f8:	20000fd0 	.word	0x20000fd0
 800b3fc:	20000c34 	.word	0x20000c34
 800b400:	20000be4 	.word	0x20000be4
 800b404:	20000bca 	.word	0x20000bca
 800b408:	20000c12 	.word	0x20000c12
 800b40c:	00000289 	.word	0x00000289
 800b410:	00000351 	.word	0x00000351
 800b414:	20000ce8 	.word	0x20000ce8
            	 datled[k] = 0;
 800b418:	2011      	movs	r0, #17
 800b41a:	183b      	adds	r3, r7, r0
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	4ac0      	ldr	r2, [pc, #768]	@ (800b720 <refrigera+0xaa0>)
 800b420:	2100      	movs	r1, #0
 800b422:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b424:	183b      	adds	r3, r7, r0
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	183b      	adds	r3, r7, r0
 800b42a:	3201      	adds	r2, #1
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	2311      	movs	r3, #17
 800b430:	18fb      	adds	r3, r7, r3
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b07      	cmp	r3, #7
 800b436:	d9ef      	bls.n	800b418 <refrigera+0x798>
             goto defindi;
 800b438:	e092      	b.n	800b560 <refrigera+0x8e0>
				goto Indi_time;//rult Indi_time
 800b43a:	46c0      	nop			@ (mov r8, r8)
            if(reePlantilla[dhmode] != 1){
 800b43c:	4bb9      	ldr	r3, [pc, #740]	@ (800b724 <refrigera+0xaa4>)
 800b43e:	2255      	movs	r2, #85	@ 0x55
 800b440:	5c9b      	ldrb	r3, [r3, r2]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d109      	bne.n	800b45a <refrigera+0x7da>
            soloent( reePlantilla[timedh] );
 800b446:	4bb7      	ldr	r3, [pc, #732]	@ (800b724 <refrigera+0xaa4>)
 800b448:	2247      	movs	r2, #71	@ 0x47
 800b44a:	5c9b      	ldrb	r3, [r3, r2]
 800b44c:	0018      	movs	r0, r3
 800b44e:	f7fb fa4b 	bl	80068e8 <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 800b452:	4bb3      	ldr	r3, [pc, #716]	@ (800b720 <refrigera+0xaa0>)
 800b454:	2201      	movs	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800b458:	e082      	b.n	800b560 <refrigera+0x8e0>
				goto indica45;
 800b45a:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800b45c:	4bb2      	ldr	r3, [pc, #712]	@ (800b728 <refrigera+0xaa8>)
 800b45e:	2247      	movs	r2, #71	@ 0x47
 800b460:	5c9b      	ldrb	r3, [r3, r2]
 800b462:	0018      	movs	r0, r3
 800b464:	f7fb fa0a 	bl	800687c <convad10>
            if(reePlantilla[eeprotype]){
 800b468:	4bae      	ldr	r3, [pc, #696]	@ (800b724 <refrigera+0xaa4>)
 800b46a:	2257      	movs	r2, #87	@ 0x57
 800b46c:	5c9b      	ldrb	r3, [r3, r2]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10c      	bne.n	800b48c <refrigera+0x80c>
            if(reePlantilla[eeprotype] == 2){
 800b472:	4bac      	ldr	r3, [pc, #688]	@ (800b724 <refrigera+0xaa4>)
 800b474:	2257      	movs	r2, #87	@ 0x57
 800b476:	5c9b      	ldrb	r3, [r3, r2]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d00f      	beq.n	800b49c <refrigera+0x81c>
indica_na:
 800b47c:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800b47e:	4bab      	ldr	r3, [pc, #684]	@ (800b72c <refrigera+0xaac>)
 800b480:	2226      	movs	r2, #38	@ 0x26
 800b482:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 800b484:	4baa      	ldr	r3, [pc, #680]	@ (800b730 <refrigera+0xab0>)
 800b486:	2226      	movs	r2, #38	@ 0x26
 800b488:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800b48a:	e00f      	b.n	800b4ac <refrigera+0x82c>
            	goto indica_110v; //jreq indica_110v
 800b48c:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800b48e:	4ba7      	ldr	r3, [pc, #668]	@ (800b72c <refrigera+0xaac>)
 800b490:	221f      	movs	r2, #31
 800b492:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 800b494:	4ba6      	ldr	r3, [pc, #664]	@ (800b730 <refrigera+0xab0>)
 800b496:	220b      	movs	r2, #11
 800b498:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800b49a:	e007      	b.n	800b4ac <refrigera+0x82c>
            	goto indica_220v; //jreq indica_220v
 800b49c:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800b49e:	4ba3      	ldr	r3, [pc, #652]	@ (800b72c <refrigera+0xaac>)
 800b4a0:	221f      	movs	r2, #31
 800b4a2:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 800b4a4:	4ba2      	ldr	r3, [pc, #648]	@ (800b730 <refrigera+0xab0>)
 800b4a6:	220a      	movs	r2, #10
 800b4a8:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800b4aa:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800b4ac:	4b9f      	ldr	r3, [pc, #636]	@ (800b72c <refrigera+0xaac>)
 800b4ae:	781a      	ldrb	r2, [r3, #0]
 800b4b0:	4b9f      	ldr	r3, [pc, #636]	@ (800b730 <refrigera+0xab0>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	0019      	movs	r1, r3
 800b4b6:	0010      	movs	r0, r2
 800b4b8:	f7fc f8a0 	bl	80075fc <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b4bc:	2310      	movs	r3, #16
 800b4be:	18fb      	adds	r3, r7, r3
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	e00a      	b.n	800b4dc <refrigera+0x85c>
            	 datled[k] = 0;
 800b4c6:	2010      	movs	r0, #16
 800b4c8:	183b      	adds	r3, r7, r0
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4a94      	ldr	r2, [pc, #592]	@ (800b720 <refrigera+0xaa0>)
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b4d2:	183b      	adds	r3, r7, r0
 800b4d4:	781a      	ldrb	r2, [r3, #0]
 800b4d6:	183b      	adds	r3, r7, r0
 800b4d8:	3201      	adds	r2, #1
 800b4da:	701a      	strb	r2, [r3, #0]
 800b4dc:	2310      	movs	r3, #16
 800b4de:	18fb      	adds	r3, r7, r3
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b07      	cmp	r3, #7
 800b4e4:	d9ef      	bls.n	800b4c6 <refrigera+0x846>
             goto defindi;
 800b4e6:	e03b      	b.n	800b560 <refrigera+0x8e0>
				goto Indi_sp; //rult Indi_sp
 800b4e8:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 800b4ea:	f7fb f861 	bl	80065b0 <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800b4ee:	4b91      	ldr	r3, [pc, #580]	@ (800b734 <refrigera+0xab4>)
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f7fb f9f8 	bl	80068e8 <soloent>
			for(uint8_t k=0; k<8; k++){
 800b4f8:	230f      	movs	r3, #15
 800b4fa:	18fb      	adds	r3, r7, r3
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e00a      	b.n	800b518 <refrigera+0x898>
				datled[k] = 0;
 800b502:	200f      	movs	r0, #15
 800b504:	183b      	adds	r3, r7, r0
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	4a85      	ldr	r2, [pc, #532]	@ (800b720 <refrigera+0xaa0>)
 800b50a:	2100      	movs	r1, #0
 800b50c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 800b50e:	183b      	adds	r3, r7, r0
 800b510:	781a      	ldrb	r2, [r3, #0]
 800b512:	183b      	adds	r3, r7, r0
 800b514:	3201      	adds	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	230f      	movs	r3, #15
 800b51a:	18fb      	adds	r3, r7, r3
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b07      	cmp	r3, #7
 800b520:	d9ef      	bls.n	800b502 <refrigera+0x882>
			goto defindi;
 800b522:	e01d      	b.n	800b560 <refrigera+0x8e0>
				goto Indi_dif; //rult Indi_dif
 800b524:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 800b526:	f7fb f84f 	bl	80065c8 <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 800b52a:	4b83      	ldr	r3, [pc, #524]	@ (800b738 <refrigera+0xab8>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	0018      	movs	r0, r3
 800b530:	f7fb f9da 	bl	80068e8 <soloent>
            for(uint8_t k=0; k<8; k++){
 800b534:	230e      	movs	r3, #14
 800b536:	18fb      	adds	r3, r7, r3
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
 800b53c:	e00a      	b.n	800b554 <refrigera+0x8d4>
            	datled[k] = 0;
 800b53e:	200e      	movs	r0, #14
 800b540:	183b      	adds	r3, r7, r0
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	4a76      	ldr	r2, [pc, #472]	@ (800b720 <refrigera+0xaa0>)
 800b546:	2100      	movs	r1, #0
 800b548:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 800b54a:	183b      	adds	r3, r7, r0
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	183b      	adds	r3, r7, r0
 800b550:	3201      	adds	r2, #1
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	230e      	movs	r3, #14
 800b556:	18fb      	adds	r3, r7, r3
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b07      	cmp	r3, #7
 800b55c:	d9ef      	bls.n	800b53e <refrigera+0x8be>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 800b55e:	46c0      	nop			@ (mov r8, r8)
 800b560:	f7fb ff44 	bl	80073ec <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 800b564:	4b75      	ldr	r3, [pc, #468]	@ (800b73c <refrigera+0xabc>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b25b      	sxtb	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	db2a      	blt.n	800b5c4 <refrigera+0x944>
        	   goto indica_j00;
 800b56e:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 800b570:	4b6d      	ldr	r3, [pc, #436]	@ (800b728 <refrigera+0xaa8>)
 800b572:	2259      	movs	r2, #89	@ 0x59
 800b574:	5c9b      	ldrb	r3, [r3, r2]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d104      	bne.n	800b584 <refrigera+0x904>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b57a:	4b71      	ldr	r3, [pc, #452]	@ (800b740 <refrigera+0xac0>)
 800b57c:	791b      	ldrb	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d01c      	beq.n	800b5bc <refrigera+0x93c>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b582:	e018      	b.n	800b5b6 <refrigera+0x936>
            	goto indica_j00b;
 800b584:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 800b586:	4b6f      	ldr	r3, [pc, #444]	@ (800b744 <refrigera+0xac4>)
 800b588:	78db      	ldrb	r3, [r3, #3]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10e      	bne.n	800b5ac <refrigera+0x92c>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800b58e:	4b6d      	ldr	r3, [pc, #436]	@ (800b744 <refrigera+0xac4>)
 800b590:	789b      	ldrb	r3, [r3, #2]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10c      	bne.n	800b5b0 <refrigera+0x930>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 800b596:	4b6a      	ldr	r3, [pc, #424]	@ (800b740 <refrigera+0xac0>)
 800b598:	791b      	ldrb	r3, [r3, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10a      	bne.n	800b5b4 <refrigera+0x934>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800b59e:	4b67      	ldr	r3, [pc, #412]	@ (800b73c <refrigera+0xabc>)
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	001a      	movs	r2, r3
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	d00a      	beq.n	800b5c0 <refrigera+0x940>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b5aa:	e004      	b.n	800b5b6 <refrigera+0x936>
            	 goto indica_j01;
 800b5ac:	46c0      	nop			@ (mov r8, r8)
 800b5ae:	e002      	b.n	800b5b6 <refrigera+0x936>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 800b5b0:	46c0      	nop			@ (mov r8, r8)
 800b5b2:	e000      	b.n	800b5b6 <refrigera+0x936>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 800b5b4:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b5b6:	f7fa ffaf 	bl	8006518 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b5ba:	e5ae      	b.n	800b11a <refrigera+0x49a>
            goto indica_j02;
 800b5bc:	46c0      	nop			@ (mov r8, r8)
 800b5be:	e5ac      	b.n	800b11a <refrigera+0x49a>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 800b5c0:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b5c2:	e5aa      	b.n	800b11a <refrigera+0x49a>
           goto defind10;				/// No, pregunta por otro modo
 800b5c4:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 800b5c6:	4b60      	ldr	r3, [pc, #384]	@ (800b748 <refrigera+0xac8>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d112      	bne.n	800b5f4 <refrigera+0x974>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800b5ce:	4b5d      	ldr	r3, [pc, #372]	@ (800b744 <refrigera+0xac4>)
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d010      	beq.n	800b5f8 <refrigera+0x978>
            	 goto indica_j04;
 800b5d6:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 800b5d8:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800b5da:	4b5c      	ldr	r3, [pc, #368]	@ (800b74c <refrigera+0xacc>)
 800b5dc:	2211      	movs	r2, #17
 800b5de:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 800b5e0:	4b5b      	ldr	r3, [pc, #364]	@ (800b750 <refrigera+0xad0>)
 800b5e2:	2208      	movs	r2, #8
 800b5e4:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 800b5e6:	4b5b      	ldr	r3, [pc, #364]	@ (800b754 <refrigera+0xad4>)
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800b5ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b758 <refrigera+0xad8>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e570      	b.n	800b0d6 <refrigera+0x456>
            	 goto finindi;
 800b5f4:	46c0      	nop			@ (mov r8, r8)
 800b5f6:	e5d4      	b.n	800b1a2 <refrigera+0x522>
             goto finindi;
 800b5f8:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800b5fa:	e5d2      	b.n	800b1a2 <refrigera+0x522>
            fauto[7] = 1;						//bset		fauto,#7
 800b5fc:	4b57      	ldr	r3, [pc, #348]	@ (800b75c <refrigera+0xadc>)
 800b5fe:	2201      	movs	r2, #1
 800b600:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 800b602:	e156      	b.n	800b8b2 <refrigera+0xc32>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 800b604:	4b55      	ldr	r3, [pc, #340]	@ (800b75c <refrigera+0xadc>)
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d150      	bne.n	800b6ae <refrigera+0xa2e>
			wreg = num_ver;			//;		/ Versión del Firmware
 800b60c:	4b47      	ldr	r3, [pc, #284]	@ (800b72c <refrigera+0xaac>)
 800b60e:	2205      	movs	r2, #5
 800b610:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 800b612:	f7fb f987 	bl	8006924 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 800b616:	4b42      	ldr	r3, [pc, #264]	@ (800b720 <refrigera+0xaa0>)
 800b618:	2201      	movs	r2, #1
 800b61a:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 800b61c:	4b4f      	ldr	r3, [pc, #316]	@ (800b75c <refrigera+0xadc>)
 800b61e:	2201      	movs	r2, #1
 800b620:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 800b622:	4b4a      	ldr	r3, [pc, #296]	@ (800b74c <refrigera+0xacc>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b10      	cmp	r3, #16
 800b628:	d90c      	bls.n	800b644 <refrigera+0x9c4>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 800b62a:	4b4d      	ldr	r3, [pc, #308]	@ (800b760 <refrigera+0xae0>)
 800b62c:	2110      	movs	r1, #16
 800b62e:	0018      	movs	r0, r3
 800b630:	f009 f882 	bl	8014738 <HAL_GPIO_ReadPin>
 800b634:	1e03      	subs	r3, r0, #0
 800b636:	d003      	beq.n	800b640 <refrigera+0x9c0>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 800b638:	4b42      	ldr	r3, [pc, #264]	@ (800b744 <refrigera+0xac4>)
 800b63a:	2201      	movs	r2, #1
 800b63c:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 800b63e:	e020      	b.n	800b682 <refrigera+0xa02>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 800b640:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 800b642:	e136      	b.n	800b8b2 <refrigera+0xc32>
        	   goto door_det; //jrule door_det
 800b644:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 800b646:	4b41      	ldr	r3, [pc, #260]	@ (800b74c <refrigera+0xacc>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	2b0d      	cmp	r3, #13
 800b64c:	d915      	bls.n	800b67a <refrigera+0x9fa>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 800b64e:	4b34      	ldr	r3, [pc, #208]	@ (800b720 <refrigera+0xaa0>)
 800b650:	2200      	movs	r2, #0
 800b652:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 800b654:	4b42      	ldr	r3, [pc, #264]	@ (800b760 <refrigera+0xae0>)
 800b656:	2110      	movs	r1, #16
 800b658:	0018      	movs	r0, r3
 800b65a:	f009 f86d 	bl	8014738 <HAL_GPIO_ReadPin>
 800b65e:	1e03      	subs	r3, r0, #0
 800b660:	d009      	beq.n	800b676 <refrigera+0x9f6>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 800b662:	4b3e      	ldr	r3, [pc, #248]	@ (800b75c <refrigera+0xadc>)
 800b664:	2201      	movs	r2, #1
 800b666:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 800b668:	4b2d      	ldr	r3, [pc, #180]	@ (800b720 <refrigera+0xaa0>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 800b66e:	4b3d      	ldr	r3, [pc, #244]	@ (800b764 <refrigera+0xae4>)
 800b670:	2200      	movs	r2, #0
 800b672:	705a      	strb	r2, [r3, #1]
			goto defap;
 800b674:	e11d      	b.n	800b8b2 <refrigera+0xc32>
            	goto no_det_door;				//	¿La puerta está abierta?
 800b676:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 800b678:	e11b      	b.n	800b8b2 <refrigera+0xc32>
            	goto do_sec;
 800b67a:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800b67c:	4b37      	ldr	r3, [pc, #220]	@ (800b75c <refrigera+0xadc>)
 800b67e:	2200      	movs	r2, #0
 800b680:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 800b682:	2300      	movs	r3, #0
 800b684:	60bb      	str	r3, [r7, #8]
 800b686:	e00e      	b.n	800b6a6 <refrigera+0xa26>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 800b688:	4a2e      	ldr	r2, [pc, #184]	@ (800b744 <refrigera+0xac4>)
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	18d3      	adds	r3, r2, r3
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10e      	bne.n	800b6b2 <refrigera+0xa32>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 800b694:	4a34      	ldr	r2, [pc, #208]	@ (800b768 <refrigera+0xae8>)
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	18d3      	adds	r3, r2, r3
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <refrigera+0xa36>
			for(int k=0;k<8;k++){
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	60bb      	str	r3, [r7, #8]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2b07      	cmp	r3, #7
 800b6aa:	dded      	ble.n	800b688 <refrigera+0xa08>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800b6ac:	e085      	b.n	800b7ba <refrigera+0xb3a>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800b6ae:	46c0      	nop			@ (mov r8, r8)
 800b6b0:	e004      	b.n	800b6bc <refrigera+0xa3c>
           		   goto fail_det;//jrne fail_det
 800b6b2:	46c0      	nop			@ (mov r8, r8)
 800b6b4:	e002      	b.n	800b6bc <refrigera+0xa3c>
           		   goto fail_det; //jrne fail_det
 800b6b6:	46c0      	nop			@ (mov r8, r8)
 800b6b8:	e000      	b.n	800b6bc <refrigera+0xa3c>
				goto fail_det;
 800b6ba:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800b6bc:	210a      	movs	r1, #10
 800b6be:	200a      	movs	r0, #10
 800b6c0:	f7fb ff9c 	bl	80075fc <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 800b6c4:	4b29      	ldr	r3, [pc, #164]	@ (800b76c <refrigera+0xaec>)
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	001a      	movs	r2, r3
 800b6cc:	2340      	movs	r3, #64	@ 0x40
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	d104      	bne.n	800b6dc <refrigera+0xa5c>
			op_menu (0x1F, 0X1F);
 800b6d2:	211f      	movs	r1, #31
 800b6d4:	201f      	movs	r0, #31
 800b6d6:	f7fb ff91 	bl	80075fc <op_menu>
 800b6da:	e000      	b.n	800b6de <refrigera+0xa5e>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800b6dc:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800b6de:	4b1f      	ldr	r3, [pc, #124]	@ (800b75c <refrigera+0xadc>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 800b6e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b75c <refrigera+0xadc>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800b6ea:	4b16      	ldr	r3, [pc, #88]	@ (800b744 <refrigera+0xac4>)
 800b6ec:	79db      	ldrb	r3, [r3, #7]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d107      	bne.n	800b702 <refrigera+0xa82>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 800b6f2:	4b14      	ldr	r3, [pc, #80]	@ (800b744 <refrigera+0xac4>)
 800b6f4:	799b      	ldrb	r3, [r3, #6]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	4053      	eors	r3, r2
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d15a      	bne.n	800b7b6 <refrigera+0xb36>
dpy_volt_f:
 800b700:	e000      	b.n	800b704 <refrigera+0xa84>
        	   goto dpy_volt_f;
 800b702:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 800b704:	4b15      	ldr	r3, [pc, #84]	@ (800b75c <refrigera+0xadc>)
 800b706:	2200      	movs	r2, #0
 800b708:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800b70a:	4b11      	ldr	r3, [pc, #68]	@ (800b750 <refrigera+0xad0>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	001a      	movs	r2, r3
 800b710:	2301      	movs	r3, #1
 800b712:	4013      	ands	r3, r2
 800b714:	d12c      	bne.n	800b770 <refrigera+0xaf0>
              fauto[3] = 1;					//bset		fauto,#3
 800b716:	4b11      	ldr	r3, [pc, #68]	@ (800b75c <refrigera+0xadc>)
 800b718:	2201      	movs	r2, #1
 800b71a:	70da      	strb	r2, [r3, #3]
 800b71c:	e029      	b.n	800b772 <refrigera+0xaf2>
 800b71e:	46c0      	nop			@ (mov r8, r8)
 800b720:	20000bec 	.word	0x20000bec
 800b724:	20000ce8 	.word	0x20000ce8
 800b728:	200000b8 	.word	0x200000b8
 800b72c:	20000bb3 	.word	0x20000bb3
 800b730:	20000bb2 	.word	0x20000bb2
 800b734:	0801eff0 	.word	0x0801eff0
 800b738:	0801eff1 	.word	0x0801eff1
 800b73c:	20000bb0 	.word	0x20000bb0
 800b740:	20000c00 	.word	0x20000c00
 800b744:	20000be4 	.word	0x20000be4
 800b748:	20000bb1 	.word	0x20000bb1
 800b74c:	20000bc8 	.word	0x20000bc8
 800b750:	20000c84 	.word	0x20000c84
 800b754:	20000bf4 	.word	0x20000bf4
 800b758:	20000bab 	.word	0x20000bab
 800b75c:	20000c34 	.word	0x20000c34
 800b760:	50000400 	.word	0x50000400
 800b764:	20000c3c 	.word	0x20000c3c
 800b768:	20000bdc 	.word	0x20000bdc
 800b76c:	20000bac 	.word	0x20000bac
            	  goto no_dpy_f;
 800b770:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 800b772:	4bc0      	ldr	r3, [pc, #768]	@ (800ba74 <refrigera+0xdf4>)
 800b774:	781a      	ldrb	r2, [r3, #0]
 800b776:	4bc0      	ldr	r3, [pc, #768]	@ (800ba78 <refrigera+0xdf8>)
 800b778:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 800b77a:	4bbf      	ldr	r3, [pc, #764]	@ (800ba78 <refrigera+0xdf8>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b63      	cmp	r3, #99	@ 0x63
 800b780:	d910      	bls.n	800b7a4 <refrigera+0xb24>
				wreg = wreg - 100;
 800b782:	4bbd      	ldr	r3, [pc, #756]	@ (800ba78 <refrigera+0xdf8>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	3b64      	subs	r3, #100	@ 0x64
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	4bbb      	ldr	r3, [pc, #748]	@ (800ba78 <refrigera+0xdf8>)
 800b78c:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b78e:	4bba      	ldr	r3, [pc, #744]	@ (800ba78 <refrigera+0xdf8>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b63      	cmp	r3, #99	@ 0x63
 800b794:	d908      	bls.n	800b7a8 <refrigera+0xb28>
				wreg = wreg - 100;
 800b796:	4bb8      	ldr	r3, [pc, #736]	@ (800ba78 <refrigera+0xdf8>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	3b64      	subs	r3, #100	@ 0x64
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	4bb6      	ldr	r3, [pc, #728]	@ (800ba78 <refrigera+0xdf8>)
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	e002      	b.n	800b7aa <refrigera+0xb2a>
					goto under_100_f; //jrult under_100_f
 800b7a4:	46c0      	nop			@ (mov r8, r8)
 800b7a6:	e000      	b.n	800b7aa <refrigera+0xb2a>
					goto under_100_f;
 800b7a8:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 800b7aa:	f7fb f8bb 	bl	8006924 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 800b7ae:	4bb3      	ldr	r3, [pc, #716]	@ (800ba7c <refrigera+0xdfc>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 800b7b4:	e07d      	b.n	800b8b2 <refrigera+0xc32>
        	   goto no_dpy_volt_f;
 800b7b6:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 800b7b8:	e07b      	b.n	800b8b2 <refrigera+0xc32>
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 800b7ba:	4bb1      	ldr	r3, [pc, #708]	@ (800ba80 <refrigera+0xe00>)
 800b7bc:	789b      	ldrb	r3, [r3, #2]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d100      	bne.n	800b7c4 <refrigera+0xb44>
 800b7c2:	e77a      	b.n	800b6ba <refrigera+0xa3a>
					goto on_compres;
 800b7c4:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 800b7c6:	4baf      	ldr	r3, [pc, #700]	@ (800ba84 <refrigera+0xe04>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800b7cc:	4bab      	ldr	r3, [pc, #684]	@ (800ba7c <refrigera+0xdfc>)
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 800b7d2:	4bad      	ldr	r3, [pc, #692]	@ (800ba88 <refrigera+0xe08>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b0b      	cmp	r3, #11
 800b7d8:	d864      	bhi.n	800b8a4 <refrigera+0xc24>
            	 	 goto on_desh;
 800b7da:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800b7dc:	4ba9      	ldr	r3, [pc, #676]	@ (800ba84 <refrigera+0xe04>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 800b7e2:	49a6      	ldr	r1, [pc, #664]	@ (800ba7c <refrigera+0xdfc>)
 800b7e4:	48a5      	ldr	r0, [pc, #660]	@ (800ba7c <refrigera+0xdfc>)
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	2203      	movs	r2, #3
 800b7ea:	f002 f8c1 	bl	800d970 <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800b7ee:	4ba5      	ldr	r3, [pc, #660]	@ (800ba84 <refrigera+0xe04>)
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 800b7f4:	4ba1      	ldr	r3, [pc, #644]	@ (800ba7c <refrigera+0xdfc>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 800b7fa:	4ba3      	ldr	r3, [pc, #652]	@ (800ba88 <refrigera+0xe08>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d852      	bhi.n	800b8a8 <refrigera+0xc28>
            		goto on_vent;//jrule on_vent
 800b802:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 800b804:	4b9f      	ldr	r3, [pc, #636]	@ (800ba84 <refrigera+0xe04>)
 800b806:	2200      	movs	r2, #0
 800b808:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 800b80a:	499c      	ldr	r1, [pc, #624]	@ (800ba7c <refrigera+0xdfc>)
 800b80c:	489b      	ldr	r0, [pc, #620]	@ (800ba7c <refrigera+0xdfc>)
 800b80e:	2303      	movs	r3, #3
 800b810:	2207      	movs	r2, #7
 800b812:	f002 f8ad 	bl	800d970 <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 800b816:	4b9d      	ldr	r3, [pc, #628]	@ (800ba8c <refrigera+0xe0c>)
 800b818:	2201      	movs	r2, #1
 800b81a:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 800b81c:	4b9a      	ldr	r3, [pc, #616]	@ (800ba88 <refrigera+0xe08>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b07      	cmp	r3, #7
 800b822:	d843      	bhi.n	800b8ac <refrigera+0xc2c>
					goto on_lamp; //jrule	on_lamp
 800b824:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 800b826:	4b99      	ldr	r3, [pc, #612]	@ (800ba8c <refrigera+0xe0c>)
 800b828:	2200      	movs	r2, #0
 800b82a:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 800b82c:	4993      	ldr	r1, [pc, #588]	@ (800ba7c <refrigera+0xdfc>)
 800b82e:	4893      	ldr	r0, [pc, #588]	@ (800ba7c <refrigera+0xdfc>)
 800b830:	2307      	movs	r3, #7
 800b832:	2204      	movs	r2, #4
 800b834:	f002 f89c 	bl	800d970 <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 800b838:	4b92      	ldr	r3, [pc, #584]	@ (800ba84 <refrigera+0xe04>)
 800b83a:	2201      	movs	r2, #1
 800b83c:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 800b83e:	4b92      	ldr	r3, [pc, #584]	@ (800ba88 <refrigera+0xe08>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b05      	cmp	r3, #5
 800b844:	d834      	bhi.n	800b8b0 <refrigera+0xc30>
					goto dpy_volt; //jrule	dpy_volt
 800b846:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 800b848:	4b8e      	ldr	r3, [pc, #568]	@ (800ba84 <refrigera+0xe04>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 800b84e:	4b8b      	ldr	r3, [pc, #556]	@ (800ba7c <refrigera+0xdfc>)
 800b850:	2200      	movs	r2, #0
 800b852:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 800b854:	4b87      	ldr	r3, [pc, #540]	@ (800ba74 <refrigera+0xdf4>)
 800b856:	781a      	ldrb	r2, [r3, #0]
 800b858:	4b87      	ldr	r3, [pc, #540]	@ (800ba78 <refrigera+0xdf8>)
 800b85a:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b85c:	4b86      	ldr	r3, [pc, #536]	@ (800ba78 <refrigera+0xdf8>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2b63      	cmp	r3, #99	@ 0x63
 800b862:	d910      	bls.n	800b886 <refrigera+0xc06>
				wreg = wreg - 100;
 800b864:	4b84      	ldr	r3, [pc, #528]	@ (800ba78 <refrigera+0xdf8>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	3b64      	subs	r3, #100	@ 0x64
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	4b82      	ldr	r3, [pc, #520]	@ (800ba78 <refrigera+0xdf8>)
 800b86e:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b870:	4b81      	ldr	r3, [pc, #516]	@ (800ba78 <refrigera+0xdf8>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b63      	cmp	r3, #99	@ 0x63
 800b876:	d908      	bls.n	800b88a <refrigera+0xc0a>
				wreg = wreg - 100;
 800b878:	4b7f      	ldr	r3, [pc, #508]	@ (800ba78 <refrigera+0xdf8>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	3b64      	subs	r3, #100	@ 0x64
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	4b7d      	ldr	r3, [pc, #500]	@ (800ba78 <refrigera+0xdf8>)
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	e002      	b.n	800b88c <refrigera+0xc0c>
					goto under_100; //jrult	under_100
 800b886:	46c0      	nop			@ (mov r8, r8)
 800b888:	e000      	b.n	800b88c <refrigera+0xc0c>
					goto under_100;
 800b88a:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800b88c:	f7fb f84a 	bl	8006924 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800b890:	4b7a      	ldr	r3, [pc, #488]	@ (800ba7c <refrigera+0xdfc>)
 800b892:	2200      	movs	r2, #0
 800b894:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 800b896:	4b7a      	ldr	r3, [pc, #488]	@ (800ba80 <refrigera+0xe00>)
 800b898:	2201      	movs	r2, #1
 800b89a:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800b89c:	4b78      	ldr	r3, [pc, #480]	@ (800ba80 <refrigera+0xe00>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	71da      	strb	r2, [r3, #7]
 800b8a2:	e006      	b.n	800b8b2 <refrigera+0xc32>
             	 goto defap;
 800b8a4:	46c0      	nop			@ (mov r8, r8)
 800b8a6:	e004      	b.n	800b8b2 <refrigera+0xc32>
            	goto defap;
 800b8a8:	46c0      	nop			@ (mov r8, r8)
 800b8aa:	e002      	b.n	800b8b2 <refrigera+0xc32>
				goto defap;
 800b8ac:	46c0      	nop			@ (mov r8, r8)
 800b8ae:	e000      	b.n	800b8b2 <refrigera+0xc32>
				goto defap;
 800b8b0:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 800b8b2:	f7fb fd9b 	bl	80073ec <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 800b8b6:	4b76      	ldr	r3, [pc, #472]	@ (800ba90 <refrigera+0xe10>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	001a      	movs	r2, r3
 800b8bc:	2301      	movs	r3, #1
 800b8be:	4013      	ands	r3, r2
 800b8c0:	d00c      	beq.n	800b8dc <refrigera+0xc5c>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 800b8c2:	46c0      	nop			@ (mov r8, r8)
 800b8c4:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 800b8c6:	4b73      	ldr	r3, [pc, #460]	@ (800ba94 <refrigera+0xe14>)
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800b8cc:	4b72      	ldr	r3, [pc, #456]	@ (800ba98 <refrigera+0xe18>)
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 800b8d2:	4b72      	ldr	r3, [pc, #456]	@ (800ba9c <refrigera+0xe1c>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 800b8d8:	f7ff fbfd 	bl	800b0d6 <refrigera+0x456>
					goto finap;
 800b8dc:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800b8de:	e460      	b.n	800b1a2 <refrigera+0x522>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800b8e0:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 800b8e2:	4b66      	ldr	r3, [pc, #408]	@ (800ba7c <refrigera+0xdfc>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 800b8e8:	4b6d      	ldr	r3, [pc, #436]	@ (800baa0 <refrigera+0xe20>)
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d000      	beq.n	800b8f2 <refrigera+0xc72>
 800b8f0:	e060      	b.n	800b9b4 <refrigera+0xd34>
					goto ask_door_fan; //jreq ask_door_fan
 800b8f2:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b8f4:	4b6b      	ldr	r3, [pc, #428]	@ (800baa4 <refrigera+0xe24>)
 800b8f6:	225b      	movs	r2, #91	@ 0x5b
 800b8f8:	5c9b      	ldrb	r3, [r3, r2]
 800b8fa:	001a      	movs	r2, r3
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	4013      	ands	r3, r2
 800b900:	d108      	bne.n	800b914 <refrigera+0xc94>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 800b902:	4b69      	ldr	r3, [pc, #420]	@ (800baa8 <refrigera+0xe28>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d006      	beq.n	800b918 <refrigera+0xc98>
               if(retvent == 0){ //tnz retvent
 800b90a:	4b68      	ldr	r3, [pc, #416]	@ (800baac <refrigera+0xe2c>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d152      	bne.n	800b9b8 <refrigera+0xd38>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 800b912:	e002      	b.n	800b91a <refrigera+0xc9a>
            	   goto ask_fan_on;
 800b914:	46c0      	nop			@ (mov r8, r8)
 800b916:	e000      	b.n	800b91a <refrigera+0xc9a>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 800b918:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 800b91a:	4b65      	ldr	r3, [pc, #404]	@ (800bab0 <refrigera+0xe30>)
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2201      	movs	r2, #1
 800b920:	4053      	eors	r3, r2
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d104      	bne.n	800b932 <refrigera+0xcb2>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 800b928:	4b62      	ldr	r3, [pc, #392]	@ (800bab4 <refrigera+0xe34>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d033      	beq.n	800b998 <refrigera+0xd18>
					goto fan_off; //jrne fan_off
 800b930:	e047      	b.n	800b9c2 <refrigera+0xd42>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b932:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 800b934:	4b5b      	ldr	r3, [pc, #364]	@ (800baa4 <refrigera+0xe24>)
 800b936:	2268      	movs	r2, #104	@ 0x68
 800b938:	5c9a      	ldrb	r2, [r3, r2]
 800b93a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba78 <refrigera+0xdf8>)
 800b93c:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 800b93e:	f7fb f805 	bl	800694c <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 800b942:	4b5d      	ldr	r3, [pc, #372]	@ (800bab8 <refrigera+0xe38>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d038      	beq.n	800b9bc <refrigera+0xd3c>
					goto ciclof_00;					// No, pregunta por parte baja
 800b94a:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 800b94c:	4b4a      	ldr	r3, [pc, #296]	@ (800ba78 <refrigera+0xdf8>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d023      	beq.n	800b99c <refrigera+0xd1c>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 800b954:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b956:	4b56      	ldr	r3, [pc, #344]	@ (800bab0 <refrigera+0xe30>)
 800b958:	78db      	ldrb	r3, [r3, #3]
 800b95a:	2201      	movs	r2, #1
 800b95c:	4053      	eors	r3, r2
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00e      	beq.n	800b982 <refrigera+0xd02>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b964:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 800b966:	4b55      	ldr	r3, [pc, #340]	@ (800babc <refrigera+0xe3c>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d128      	bne.n	800b9c0 <refrigera+0xd40>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 800b96e:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 800b970:	4b53      	ldr	r3, [pc, #332]	@ (800bac0 <refrigera+0xe40>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d113      	bne.n	800b9a0 <refrigera+0xd20>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 800b978:	4b4f      	ldr	r3, [pc, #316]	@ (800bab8 <refrigera+0xe38>)
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	4b50      	ldr	r3, [pc, #320]	@ (800bac0 <refrigera+0xe40>)
 800b97e:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800b980:	e011      	b.n	800b9a6 <refrigera+0xd26>
				goto ciclo_on;					/// Si, ciclo de encendido
 800b982:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 800b984:	4b4e      	ldr	r3, [pc, #312]	@ (800bac0 <refrigera+0xe40>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10b      	bne.n	800b9a4 <refrigera+0xd24>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800b98c:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800b98e:	4b3a      	ldr	r3, [pc, #232]	@ (800ba78 <refrigera+0xdf8>)
 800b990:	781a      	ldrb	r2, [r3, #0]
 800b992:	4b4a      	ldr	r3, [pc, #296]	@ (800babc <refrigera+0xe3c>)
 800b994:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 800b996:	e014      	b.n	800b9c2 <refrigera+0xd42>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 800b998:	46c0      	nop			@ (mov r8, r8)
 800b99a:	e004      	b.n	800b9a6 <refrigera+0xd26>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800b99c:	46c0      	nop			@ (mov r8, r8)
 800b99e:	e002      	b.n	800b9a6 <refrigera+0xd26>
					goto fan_on; //jrne fan_on
 800b9a0:	46c0      	nop			@ (mov r8, r8)
 800b9a2:	e000      	b.n	800b9a6 <refrigera+0xd26>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 800b9a4:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 800b9a6:	4b39      	ldr	r3, [pc, #228]	@ (800ba8c <refrigera+0xe0c>)
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800b9ac:	4b33      	ldr	r3, [pc, #204]	@ (800ba7c <refrigera+0xdfc>)
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	71da      	strb	r2, [r3, #7]
 800b9b2:	e006      	b.n	800b9c2 <refrigera+0xd42>
				goto fan_off;
 800b9b4:	46c0      	nop			@ (mov r8, r8)
 800b9b6:	e004      	b.n	800b9c2 <refrigera+0xd42>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 800b9b8:	46c0      	nop			@ (mov r8, r8)
 800b9ba:	e002      	b.n	800b9c2 <refrigera+0xd42>
				goto fan_off;							// Si, manten apagado el ventilador
 800b9bc:	46c0      	nop			@ (mov r8, r8)
 800b9be:	e000      	b.n	800b9c2 <refrigera+0xd42>
				goto fan_off;						// No, manten apagado el ventilador
 800b9c0:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 800b9c2:	4b40      	ldr	r3, [pc, #256]	@ (800bac4 <refrigera+0xe44>)
 800b9c4:	881a      	ldrh	r2, [r3, #0]
 800b9c6:	4b40      	ldr	r3, [pc, #256]	@ (800bac8 <refrigera+0xe48>)
 800b9c8:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800b9ca:	4b40      	ldr	r3, [pc, #256]	@ (800bacc <refrigera+0xe4c>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d107      	bne.n	800b9e2 <refrigera+0xd62>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 800b9d2:	4b3e      	ldr	r3, [pc, #248]	@ (800bacc <refrigera+0xe4c>)
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	4053      	eors	r3, r2
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <refrigera+0xd68>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 800b9e0:	e000      	b.n	800b9e4 <refrigera+0xd64>
            	   goto control_j02;
 800b9e2:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 800b9e4:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 800b9e6:	e029      	b.n	800ba3c <refrigera+0xdbc>
            	   goto control_j03;
 800b9e8:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800b9ea:	4b39      	ldr	r3, [pc, #228]	@ (800bad0 <refrigera+0xe50>)
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d13a      	bne.n	800ba68 <refrigera+0xde8>
ctl13:
 800b9f2:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 800b9f4:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 800b9f6:	f7fa fd47 	bl	8006488 <tdev_to_Word>
 800b9fa:	0003      	movs	r3, r0
 800b9fc:	b21a      	sxth	r2, r3
 800b9fe:	4b35      	ldr	r3, [pc, #212]	@ (800bad4 <refrigera+0xe54>)
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	b21b      	sxth	r3, r3
 800ba04:	429a      	cmp	r2, r3
 800ba06:	db09      	blt.n	800ba1c <refrigera+0xd9c>
ctl15:			//	ld			A,tminstopl;
 800ba08:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800ba0a:	4b33      	ldr	r3, [pc, #204]	@ (800bad8 <refrigera+0xe58>)
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d12c      	bne.n	800ba6c <refrigera+0xdec>
				if(drp_comph != 0){
 800ba12:	4b32      	ldr	r3, [pc, #200]	@ (800badc <refrigera+0xe5c>)
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d01e      	beq.n	800ba58 <refrigera+0xdd8>
					goto defctl;
 800ba1a:	e066      	b.n	800baea <refrigera+0xe6a>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 800ba1c:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 800ba1e:	f7fa fd33 	bl	8006488 <tdev_to_Word>
 800ba22:	0003      	movs	r3, r0
 800ba24:	b21a      	sxth	r2, r3
 800ba26:	4b2e      	ldr	r3, [pc, #184]	@ (800bae0 <refrigera+0xe60>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b21b      	sxth	r3, r3
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	dc0d      	bgt.n	800ba4c <refrigera+0xdcc>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 800ba30:	4912      	ldr	r1, [pc, #72]	@ (800ba7c <refrigera+0xdfc>)
 800ba32:	482c      	ldr	r0, [pc, #176]	@ (800bae4 <refrigera+0xe64>)
 800ba34:	2306      	movs	r3, #6
 800ba36:	2207      	movs	r2, #7
 800ba38:	f001 ff9a 	bl	800d970 <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800ba3c:	4b1c      	ldr	r3, [pc, #112]	@ (800bab0 <refrigera+0xe30>)
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d015      	beq.n	800ba70 <refrigera+0xdf0>
					goto control_j04;
 800ba44:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 800ba46:	f7fa fdd9 	bl	80065fc <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 800ba4a:	e04e      	b.n	800baea <refrigera+0xe6a>
					goto equal;
 800ba4c:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 800ba4e:	4b18      	ldr	r3, [pc, #96]	@ (800bab0 <refrigera+0xe30>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d048      	beq.n	800bae8 <refrigera+0xe68>
					goto control_j05;
 800ba56:	e000      	b.n	800ba5a <refrigera+0xdda>
				goto on_comp;						// Enciende el compresor
 800ba58:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba84 <refrigera+0xe04>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 800ba60:	4b06      	ldr	r3, [pc, #24]	@ (800ba7c <refrigera+0xdfc>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	709a      	strb	r2, [r3, #2]
				goto defctl;
 800ba66:	e040      	b.n	800baea <refrigera+0xe6a>
             		 goto defctl;
 800ba68:	46c0      	nop			@ (mov r8, r8)
 800ba6a:	e03e      	b.n	800baea <refrigera+0xe6a>
					goto defctl;					// No, espera
 800ba6c:	46c0      	nop			@ (mov r8, r8)
 800ba6e:	e03c      	b.n	800baea <refrigera+0xe6a>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 800ba70:	46c0      	nop			@ (mov r8, r8)
 800ba72:	e03a      	b.n	800baea <refrigera+0xe6a>
 800ba74:	20000c2a 	.word	0x20000c2a
 800ba78:	20000bb3 	.word	0x20000bb3
 800ba7c:	20000bec 	.word	0x20000bec
 800ba80:	20000c34 	.word	0x20000c34
 800ba84:	20000c00 	.word	0x20000c00
 800ba88:	20000bc8 	.word	0x20000bc8
 800ba8c:	20000c3c 	.word	0x20000c3c
 800ba90:	20000bb0 	.word	0x20000bb0
 800ba94:	20000bd4 	.word	0x20000bd4
 800ba98:	20000bab 	.word	0x20000bab
 800ba9c:	20000bf4 	.word	0x20000bf4
 800baa0:	20000c58 	.word	0x20000c58
 800baa4:	200000b8 	.word	0x200000b8
 800baa8:	20000c83 	.word	0x20000c83
 800baac:	20000bc6 	.word	0x20000bc6
 800bab0:	20000bb4 	.word	0x20000bb4
 800bab4:	20000bd0 	.word	0x20000bd0
 800bab8:	20000bb2 	.word	0x20000bb2
 800babc:	20000c55 	.word	0x20000c55
 800bac0:	20000c54 	.word	0x20000c54
 800bac4:	20000c12 	.word	0x20000c12
 800bac8:	20000c16 	.word	0x20000c16
 800bacc:	20000be4 	.word	0x20000be4
 800bad0:	20000bdc 	.word	0x20000bdc
 800bad4:	20000c0a 	.word	0x20000c0a
 800bad8:	20000bbe 	.word	0x20000bbe
 800badc:	20000c56 	.word	0x20000c56
 800bae0:	20000c08 	.word	0x20000c08
 800bae4:	20000c98 	.word	0x20000c98
        		goto defctl;
 800bae8:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 800baea:	4bbe      	ldr	r3, [pc, #760]	@ (800bde4 <refrigera+0x1164>)
 800baec:	224d      	movs	r2, #77	@ 0x4d
 800baee:	2100      	movs	r1, #0
 800baf0:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800baf2:	4bbc      	ldr	r3, [pc, #752]	@ (800bde4 <refrigera+0x1164>)
 800baf4:	224d      	movs	r2, #77	@ 0x4d
 800baf6:	5c9b      	ldrb	r3, [r3, r2]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d100      	bne.n	800bafe <refrigera+0xe7e>
 800bafc:	e0a4      	b.n	800bc48 <refrigera+0xfc8>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800bafe:	4bba      	ldr	r3, [pc, #744]	@ (800bde8 <refrigera+0x1168>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d120      	bne.n	800bb48 <refrigera+0xec8>
				STM8_16_X = Plantilla[timeDefi] *60;
 800bb06:	4bb7      	ldr	r3, [pc, #732]	@ (800bde4 <refrigera+0x1164>)
 800bb08:	224d      	movs	r2, #77	@ 0x4d
 800bb0a:	5c9b      	ldrb	r3, [r3, r2]
 800bb0c:	001a      	movs	r2, r3
 800bb0e:	233c      	movs	r3, #60	@ 0x3c
 800bb10:	4353      	muls	r3, r2
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	4bb5      	ldr	r3, [pc, #724]	@ (800bdec <refrigera+0x116c>)
 800bb16:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 800bb18:	4bb4      	ldr	r3, [pc, #720]	@ (800bdec <refrigera+0x116c>)
 800bb1a:	881a      	ldrh	r2, [r3, #0]
 800bb1c:	4bb4      	ldr	r3, [pc, #720]	@ (800bdf0 <refrigera+0x1170>)
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d005      	beq.n	800bb30 <refrigera+0xeb0>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 800bb24:	4baf      	ldr	r3, [pc, #700]	@ (800bde4 <refrigera+0x1164>)
 800bb26:	2259      	movs	r2, #89	@ 0x59
 800bb28:	5c9b      	ldrb	r3, [r3, r2]
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d134      	bne.n	800bb98 <refrigera+0xf18>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800bb2e:	e05c      	b.n	800bbea <refrigera+0xf6a>
					goto loadDefiCnts;
 800bb30:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 800bb32:	4bae      	ldr	r3, [pc, #696]	@ (800bdec <refrigera+0x116c>)
 800bb34:	881a      	ldrh	r2, [r3, #0]
 800bb36:	4bae      	ldr	r3, [pc, #696]	@ (800bdf0 <refrigera+0x1170>)
 800bb38:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 800bb3a:	4bac      	ldr	r3, [pc, #688]	@ (800bdec <refrigera+0x116c>)
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	4bac      	ldr	r3, [pc, #688]	@ (800bdf4 <refrigera+0x1174>)
 800bb44:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 800bb46:	e084      	b.n	800bc52 <refrigera+0xfd2>
					goto chkTimeDefi;
 800bb48:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 800bb4a:	4ba6      	ldr	r3, [pc, #664]	@ (800bde4 <refrigera+0x1164>)
 800bb4c:	2259      	movs	r2, #89	@ 0x59
 800bb4e:	5c9b      	ldrb	r3, [r3, r2]
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d03c      	beq.n	800bbce <refrigera+0xf4e>
chkTimeDefi_1s:
 800bb54:	46c0      	nop			@ (mov r8, r8)
 800bb56:	e002      	b.n	800bb5e <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800bb58:	46c0      	nop			@ (mov r8, r8)
 800bb5a:	e000      	b.n	800bb5e <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800bb5c:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800bb5e:	4ba6      	ldr	r3, [pc, #664]	@ (800bdf8 <refrigera+0x1178>)
 800bb60:	791b      	ldrb	r3, [r3, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d000      	beq.n	800bb68 <refrigera+0xee8>
 800bb66:	e066      	b.n	800bc36 <refrigera+0xfb6>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 800bb68:	4ba3      	ldr	r3, [pc, #652]	@ (800bdf8 <refrigera+0x1178>)
 800bb6a:	795b      	ldrb	r3, [r3, #5]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d000      	beq.n	800bb72 <refrigera+0xef2>
 800bb70:	e063      	b.n	800bc3a <refrigera+0xfba>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800bb72:	4b9f      	ldr	r3, [pc, #636]	@ (800bdf0 <refrigera+0x1170>)
 800bb74:	881a      	ldrh	r2, [r3, #0]
 800bb76:	4b9f      	ldr	r3, [pc, #636]	@ (800bdf4 <refrigera+0x1174>)
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d106      	bne.n	800bb8c <refrigera+0xf0c>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800bb7e:	f7fa fc83 	bl	8006488 <tdev_to_Word>
 800bb82:	0003      	movs	r3, r0
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	4b9d      	ldr	r3, [pc, #628]	@ (800bdfc <refrigera+0x117c>)
 800bb88:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800bb8a:	e062      	b.n	800bc52 <refrigera+0xfd2>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800bb8c:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800bb8e:	4b98      	ldr	r3, [pc, #608]	@ (800bdf0 <refrigera+0x1170>)
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d15a      	bne.n	800bc4c <refrigera+0xfcc>
chkTimeDefi_1s_02:
 800bb96:	e000      	b.n	800bb9a <refrigera+0xf1a>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 800bb98:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800bb9a:	4b98      	ldr	r3, [pc, #608]	@ (800bdfc <refrigera+0x117c>)
 800bb9c:	881a      	ldrh	r2, [r3, #0]
 800bb9e:	4b93      	ldr	r3, [pc, #588]	@ (800bdec <refrigera+0x116c>)
 800bba0:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800bba2:	4b92      	ldr	r3, [pc, #584]	@ (800bdec <refrigera+0x116c>)
 800bba4:	881c      	ldrh	r4, [r3, #0]
 800bba6:	f7fa fc6f 	bl	8006488 <tdev_to_Word>
 800bbaa:	0003      	movs	r3, r0
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	1ae3      	subs	r3, r4, r3
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	4b8e      	ldr	r3, [pc, #568]	@ (800bdec <refrigera+0x116c>)
 800bbb4:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800bbb6:	4b92      	ldr	r3, [pc, #584]	@ (800be00 <refrigera+0x1180>)
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f7fa fc7d 	bl	80064b8 <TwoByteInArrayToWord>
 800bbbe:	0003      	movs	r3, r0
 800bbc0:	b21a      	sxth	r2, r3
 800bbc2:	4b8a      	ldr	r3, [pc, #552]	@ (800bdec <refrigera+0x116c>)
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	b21b      	sxth	r3, r3
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	dc28      	bgt.n	800bc1e <refrigera+0xf9e>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800bbcc:	e038      	b.n	800bc40 <refrigera+0xfc0>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800bbce:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 800bbd0:	4b89      	ldr	r3, [pc, #548]	@ (800bdf8 <refrigera+0x1178>)
 800bbd2:	791b      	ldrb	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1bf      	bne.n	800bb58 <refrigera+0xed8>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 800bbd8:	4b87      	ldr	r3, [pc, #540]	@ (800bdf8 <refrigera+0x1178>)
 800bbda:	795b      	ldrb	r3, [r3, #5]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1bd      	bne.n	800bb5c <refrigera+0xedc>
                   if(cntDefi_H != 1){ //cpw X,#1
 800bbe0:	4b83      	ldr	r3, [pc, #524]	@ (800bdf0 <refrigera+0x1170>)
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d133      	bne.n	800bc50 <refrigera+0xfd0>
chkTimeDefi_3s_01:
 800bbe8:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800bbea:	f7fa fc4d 	bl	8006488 <tdev_to_Word>
 800bbee:	0003      	movs	r3, r0
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	4b7e      	ldr	r3, [pc, #504]	@ (800bdec <refrigera+0x116c>)
 800bbf4:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 800bbf6:	4b7d      	ldr	r3, [pc, #500]	@ (800bdec <refrigera+0x116c>)
 800bbf8:	881a      	ldrh	r2, [r3, #0]
 800bbfa:	4b82      	ldr	r3, [pc, #520]	@ (800be04 <refrigera+0x1184>)
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	4b7a      	ldr	r3, [pc, #488]	@ (800bdec <refrigera+0x116c>)
 800bc04:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800bc06:	4b7e      	ldr	r3, [pc, #504]	@ (800be00 <refrigera+0x1180>)
 800bc08:	0018      	movs	r0, r3
 800bc0a:	f7fa fc55 	bl	80064b8 <TwoByteInArrayToWord>
 800bc0e:	0003      	movs	r3, r0
 800bc10:	b21a      	sxth	r2, r3
 800bc12:	4b76      	ldr	r3, [pc, #472]	@ (800bdec <refrigera+0x116c>)
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b21b      	sxth	r3, r3
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	dd10      	ble.n	800bc3e <refrigera+0xfbe>
alarmDefi:
 800bc1c:	e000      	b.n	800bc20 <refrigera+0xfa0>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 800bc1e:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 800bc20:	4b75      	ldr	r3, [pc, #468]	@ (800bdf8 <refrigera+0x1178>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 800bc26:	4b78      	ldr	r3, [pc, #480]	@ (800be08 <refrigera+0x1188>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	801a      	strh	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 800bc2c:	4b76      	ldr	r3, [pc, #472]	@ (800be08 <refrigera+0x1188>)
 800bc2e:	881a      	ldrh	r2, [r3, #0]
 800bc30:	4b76      	ldr	r3, [pc, #472]	@ (800be0c <refrigera+0x118c>)
 800bc32:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 800bc34:	e00d      	b.n	800bc52 <refrigera+0xfd2>
                	  goto noAlarmDefi;
 800bc36:	46c0      	nop			@ (mov r8, r8)
 800bc38:	e002      	b.n	800bc40 <refrigera+0xfc0>
                	  goto noAlarmDefi;
 800bc3a:	46c0      	nop			@ (mov r8, r8)
 800bc3c:	e000      	b.n	800bc40 <refrigera+0xfc0>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800bc3e:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800bc40:	4b6d      	ldr	r3, [pc, #436]	@ (800bdf8 <refrigera+0x1178>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	719a      	strb	r2, [r3, #6]
 800bc46:	e004      	b.n	800bc52 <refrigera+0xfd2>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 800bc48:	46c0      	nop			@ (mov r8, r8)
 800bc4a:	e002      	b.n	800bc52 <refrigera+0xfd2>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800bc4c:	46c0      	nop			@ (mov r8, r8)
 800bc4e:	e000      	b.n	800bc52 <refrigera+0xfd2>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800bc50:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 800bc52:	f7fa fc19 	bl	8006488 <tdev_to_Word>
 800bc56:	0003      	movs	r3, r0
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	4b64      	ldr	r3, [pc, #400]	@ (800bdec <refrigera+0x116c>)
 800bc5c:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800bc5e:	4b6c      	ldr	r3, [pc, #432]	@ (800be10 <refrigera+0x1190>)
 800bc60:	0018      	movs	r0, r3
 800bc62:	f7fa fc29 	bl	80064b8 <TwoByteInArrayToWord>
 800bc66:	0003      	movs	r3, r0
 800bc68:	b21a      	sxth	r2, r3
 800bc6a:	4b60      	ldr	r3, [pc, #384]	@ (800bdec <refrigera+0x116c>)
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	b21b      	sxth	r3, r3
 800bc70:	429a      	cmp	r2, r3
 800bc72:	dc02      	bgt.n	800bc7a <refrigera+0xffa>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 800bc74:	f7fa fc50 	bl	8006518 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800bc78:	e058      	b.n	800bd2c <refrigera+0x10ac>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800bc7a:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800bc7c:	4b59      	ldr	r3, [pc, #356]	@ (800bde4 <refrigera+0x1164>)
 800bc7e:	2259      	movs	r2, #89	@ 0x59
 800bc80:	5c9b      	ldrb	r3, [r3, r2]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d03c      	beq.n	800bd00 <refrigera+0x1080>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800bc86:	4b63      	ldr	r3, [pc, #396]	@ (800be14 <refrigera+0x1194>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4a62      	ldr	r2, [pc, #392]	@ (800be18 <refrigera+0x1198>)
 800bc90:	7812      	ldrb	r2, [r2, #0]
 800bc92:	189b      	adds	r3, r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	4b55      	ldr	r3, [pc, #340]	@ (800bdec <refrigera+0x116c>)
 800bc98:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800bc9a:	4b60      	ldr	r3, [pc, #384]	@ (800be1c <refrigera+0x119c>)
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d130      	bne.n	800bd04 <refrigera+0x1084>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 800bca2:	4b5e      	ldr	r3, [pc, #376]	@ (800be1c <refrigera+0x119c>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d12e      	bne.n	800bd08 <refrigera+0x1088>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800bcaa:	4b5d      	ldr	r3, [pc, #372]	@ (800be20 <refrigera+0x11a0>)
 800bcac:	0018      	movs	r0, r3
 800bcae:	f7fa fc03 	bl	80064b8 <TwoByteInArrayToWord>
 800bcb2:	0003      	movs	r3, r0
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	4b4d      	ldr	r3, [pc, #308]	@ (800bdec <refrigera+0x116c>)
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	b21b      	sxth	r3, r3
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	dd25      	ble.n	800bd0c <refrigera+0x108c>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800bcc0:	4b58      	ldr	r3, [pc, #352]	@ (800be24 <refrigera+0x11a4>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	021b      	lsls	r3, r3, #8
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	4a57      	ldr	r2, [pc, #348]	@ (800be28 <refrigera+0x11a8>)
 800bcca:	7812      	ldrb	r2, [r2, #0]
 800bccc:	189b      	adds	r3, r3, r2
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	4b46      	ldr	r3, [pc, #280]	@ (800bdec <refrigera+0x116c>)
 800bcd2:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 800bcd4:	4b51      	ldr	r3, [pc, #324]	@ (800be1c <refrigera+0x119c>)
 800bcd6:	78db      	ldrb	r3, [r3, #3]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d119      	bne.n	800bd10 <refrigera+0x1090>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800bcdc:	4b4f      	ldr	r3, [pc, #316]	@ (800be1c <refrigera+0x119c>)
 800bcde:	789b      	ldrb	r3, [r3, #2]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d117      	bne.n	800bd14 <refrigera+0x1094>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 800bce4:	4b51      	ldr	r3, [pc, #324]	@ (800be2c <refrigera+0x11ac>)
 800bce6:	0018      	movs	r0, r3
 800bce8:	f7fa fbe6 	bl	80064b8 <TwoByteInArrayToWord>
 800bcec:	0003      	movs	r3, r0
 800bcee:	b21a      	sxth	r2, r3
 800bcf0:	4b3e      	ldr	r3, [pc, #248]	@ (800bdec <refrigera+0x116c>)
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	b21b      	sxth	r3, r3
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	dd01      	ble.n	800bcfe <refrigera+0x107e>
 800bcfa:	f7ff fa18 	bl	800b12e <refrigera+0x4ae>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 800bcfe:	e00a      	b.n	800bd16 <refrigera+0x1096>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 800bd00:	46c0      	nop			@ (mov r8, r8)
 800bd02:	e008      	b.n	800bd16 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bd04:	46c0      	nop			@ (mov r8, r8)
 800bd06:	e006      	b.n	800bd16 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bd08:	46c0      	nop			@ (mov r8, r8)
 800bd0a:	e004      	b.n	800bd16 <refrigera+0x1096>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 800bd0c:	46c0      	nop			@ (mov r8, r8)
 800bd0e:	e002      	b.n	800bd16 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bd10:	46c0      	nop			@ (mov r8, r8)
 800bd12:	e000      	b.n	800bd16 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bd14:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 800bd16:	f7fb fb69 	bl	80073ec <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 800bd1a:	4b45      	ldr	r3, [pc, #276]	@ (800be30 <refrigera+0x11b0>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	001a      	movs	r2, r3
 800bd20:	2301      	movs	r3, #1
 800bd22:	4013      	ands	r3, r2
 800bd24:	d001      	beq.n	800bd2a <refrigera+0x10aa>
 800bd26:	f7ff fa04 	bl	800b132 <refrigera+0x4b2>
            	   goto control_j06;
 800bd2a:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800bd2c:	4b41      	ldr	r3, [pc, #260]	@ (800be34 <refrigera+0x11b4>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d108      	bne.n	800bd46 <refrigera+0x10c6>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 800bd34:	4b40      	ldr	r3, [pc, #256]	@ (800be38 <refrigera+0x11b8>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <refrigera+0x10cc>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800bd3c:	4b3e      	ldr	r3, [pc, #248]	@ (800be38 <refrigera+0x11b8>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 800bd42:	f7ff f9f7 	bl	800b134 <refrigera+0x4b4>
					goto finctl; //jrne	finctl;
 800bd46:	46c0      	nop			@ (mov r8, r8)
 800bd48:	f7ff fa2b 	bl	800b1a2 <refrigera+0x522>
            		goto control_j07;
 800bd4c:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800bd4e:	f7ff fa28 	bl	800b1a2 <refrigera+0x522>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 800bd52:	4b24      	ldr	r3, [pc, #144]	@ (800bde4 <refrigera+0x1164>)
 800bd54:	2255      	movs	r2, #85	@ 0x55
 800bd56:	5c9b      	ldrb	r3, [r3, r2]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d103      	bne.n	800bd64 <refrigera+0x10e4>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800bd5c:	4b37      	ldr	r3, [pc, #220]	@ (800be3c <refrigera+0x11bc>)
 800bd5e:	2201      	movs	r2, #1
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	e000      	b.n	800bd66 <refrigera+0x10e6>
					goto deshie20;				/// No
 800bd64:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 800bd66:	4b1f      	ldr	r3, [pc, #124]	@ (800bde4 <refrigera+0x1164>)
 800bd68:	2255      	movs	r2, #85	@ 0x55
 800bd6a:	5c9b      	ldrb	r3, [r3, r2]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d114      	bne.n	800bd9a <refrigera+0x111a>
deshXvent:
 800bd70:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800bd72:	4b1c      	ldr	r3, [pc, #112]	@ (800bde4 <refrigera+0x1164>)
 800bd74:	225b      	movs	r2, #91	@ 0x5b
 800bd76:	5c9b      	ldrb	r3, [r3, r2]
 800bd78:	001a      	movs	r2, r3
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	d104      	bne.n	800bd8a <refrigera+0x110a>
				if(retvent != 0){ //tnz retvent
 800bd80:	4b2f      	ldr	r3, [pc, #188]	@ (800be40 <refrigera+0x11c0>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10d      	bne.n	800bda4 <refrigera+0x1124>
deshie24:
 800bd88:	e000      	b.n	800bd8c <refrigera+0x110c>
					goto deshie24;
 800bd8a:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800bd8c:	4b2d      	ldr	r3, [pc, #180]	@ (800be44 <refrigera+0x11c4>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 800bd92:	4b2d      	ldr	r3, [pc, #180]	@ (800be48 <refrigera+0x11c8>)
 800bd94:	2201      	movs	r2, #1
 800bd96:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 800bd98:	e005      	b.n	800bda6 <refrigera+0x1126>
					goto deshie25;				//;		/ No, acciona el deshielo
 800bd9a:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800bd9c:	4b27      	ldr	r3, [pc, #156]	@ (800be3c <refrigera+0x11bc>)
 800bd9e:	2201      	movs	r2, #1
 800bda0:	705a      	strb	r2, [r3, #1]
 800bda2:	e000      	b.n	800bda6 <refrigera+0x1126>
					goto deshie30; //jrne		deshie30;		/ No, espera
 800bda4:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 800bda6:	4b29      	ldr	r3, [pc, #164]	@ (800be4c <refrigera+0x11cc>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800bdac:	4b0d      	ldr	r3, [pc, #52]	@ (800bde4 <refrigera+0x1164>)
 800bdae:	224c      	movs	r2, #76	@ 0x4c
 800bdb0:	5c9a      	ldrb	r2, [r3, r2]
 800bdb2:	4b27      	ldr	r3, [pc, #156]	@ (800be50 <refrigera+0x11d0>)
 800bdb4:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 800bdb6:	4b27      	ldr	r3, [pc, #156]	@ (800be54 <refrigera+0x11d4>)
 800bdb8:	881a      	ldrh	r2, [r3, #0]
 800bdba:	4b14      	ldr	r3, [pc, #80]	@ (800be0c <refrigera+0x118c>)
 800bdbc:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800bdbe:	f7fb fb15 	bl	80073ec <buildmode>
				 if((0x13 & modo ) == 0){
 800bdc2:	4b1b      	ldr	r3, [pc, #108]	@ (800be30 <refrigera+0x11b0>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2213      	movs	r2, #19
 800bdc8:	4013      	ands	r3, r2
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <refrigera+0x1154>
 800bdd0:	f7ff f985 	bl	800b0de <refrigera+0x45e>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 800bdd4:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 800bdd6:	46c0      	nop			@ (mov r8, r8)
 800bdd8:	f7ff f9e3 	bl	800b1a2 <refrigera+0x522>


main_refrigera:


}
 800bddc:	46c0      	nop			@ (mov r8, r8)
 800bdde:	46bd      	mov	sp, r7
 800bde0:	b007      	add	sp, #28
 800bde2:	bd90      	pop	{r4, r7, pc}
 800bde4:	200000b8 	.word	0x200000b8
 800bde8:	20000bb4 	.word	0x20000bb4
 800bdec:	20000932 	.word	0x20000932
 800bdf0:	20000c92 	.word	0x20000c92
 800bdf4:	20000c96 	.word	0x20000c96
 800bdf8:	20000bdc 	.word	0x20000bdc
 800bdfc:	20000c94 	.word	0x20000c94
 800be00:	200000eb 	.word	0x200000eb
 800be04:	20000cb0 	.word	0x20000cb0
 800be08:	20000c12 	.word	0x20000c12
 800be0c:	20000c16 	.word	0x20000c16
 800be10:	200000cb 	.word	0x200000cb
 800be14:	20000c0c 	.word	0x20000c0c
 800be18:	20000c0d 	.word	0x20000c0d
 800be1c:	20000be4 	.word	0x20000be4
 800be20:	200000cf 	.word	0x200000cf
 800be24:	20000c0e 	.word	0x20000c0e
 800be28:	20000c0f 	.word	0x20000c0f
 800be2c:	200000cd 	.word	0x200000cd
 800be30:	20000bb0 	.word	0x20000bb0
 800be34:	20000bc7 	.word	0x20000bc7
 800be38:	20000cac 	.word	0x20000cac
 800be3c:	20000c00 	.word	0x20000c00
 800be40:	20000bc6 	.word	0x20000bc6
 800be44:	20000c3c 	.word	0x20000c3c
 800be48:	20000bec 	.word	0x20000bec
 800be4c:	20000bb1 	.word	0x20000bb1
 800be50:	20000c23 	.word	0x20000c23
 800be54:	20000c14 	.word	0x20000c14

0800be58 <st_refri>:

void st_refri (void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 800be5c:	4b0a      	ldr	r3, [pc, #40]	@ (800be88 <st_refri+0x30>)
 800be5e:	2200      	movs	r2, #0
 800be60:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800be62:	4b09      	ldr	r3, [pc, #36]	@ (800be88 <st_refri+0x30>)
 800be64:	2200      	movs	r2, #0
 800be66:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 800be68:	4b07      	ldr	r3, [pc, #28]	@ (800be88 <st_refri+0x30>)
 800be6a:	2200      	movs	r2, #0
 800be6c:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800be6e:	4b07      	ldr	r3, [pc, #28]	@ (800be8c <st_refri+0x34>)
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 800be74:	f7fa fbc2 	bl	80065fc <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 800be78:	4b05      	ldr	r3, [pc, #20]	@ (800be90 <st_refri+0x38>)
 800be7a:	2202      	movs	r2, #2
 800be7c:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800be7e:	f7fa fb4b 	bl	8006518 <ldadaptivo>
}
 800be82:	46c0      	nop			@ (mov r8, r8)
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000c00 	.word	0x20000c00
 800be8c:	20000c3c 	.word	0x20000c3c
 800be90:	20000bf4 	.word	0x20000bf4

0800be94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800be9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <HAL_MspInit+0x44>)
 800be9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bed8 <HAL_MspInit+0x44>)
 800bea0:	2180      	movs	r1, #128	@ 0x80
 800bea2:	0549      	lsls	r1, r1, #21
 800bea4:	430a      	orrs	r2, r1
 800bea6:	659a      	str	r2, [r3, #88]	@ 0x58
 800bea8:	4b0b      	ldr	r3, [pc, #44]	@ (800bed8 <HAL_MspInit+0x44>)
 800beaa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800beac:	2380      	movs	r3, #128	@ 0x80
 800beae:	055b      	lsls	r3, r3, #21
 800beb0:	4013      	ands	r3, r2
 800beb2:	607b      	str	r3, [r7, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800beb6:	4b08      	ldr	r3, [pc, #32]	@ (800bed8 <HAL_MspInit+0x44>)
 800beb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800beba:	4b07      	ldr	r3, [pc, #28]	@ (800bed8 <HAL_MspInit+0x44>)
 800bebc:	2101      	movs	r1, #1
 800bebe:	430a      	orrs	r2, r1
 800bec0:	661a      	str	r2, [r3, #96]	@ 0x60
 800bec2:	4b05      	ldr	r3, [pc, #20]	@ (800bed8 <HAL_MspInit+0x44>)
 800bec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bec6:	2201      	movs	r2, #1
 800bec8:	4013      	ands	r3, r2
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bece:	46c0      	nop			@ (mov r8, r8)
 800bed0:	46bd      	mov	sp, r7
 800bed2:	b002      	add	sp, #8
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	46c0      	nop			@ (mov r8, r8)
 800bed8:	40021000 	.word	0x40021000

0800bedc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bedc:	b590      	push	{r4, r7, lr}
 800bede:	b09d      	sub	sp, #116	@ 0x74
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bee4:	235c      	movs	r3, #92	@ 0x5c
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	0018      	movs	r0, r3
 800beea:	2314      	movs	r3, #20
 800beec:	001a      	movs	r2, r3
 800beee:	2100      	movs	r1, #0
 800bef0:	f010 f928 	bl	801c144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bef4:	2418      	movs	r4, #24
 800bef6:	193b      	adds	r3, r7, r4
 800bef8:	0018      	movs	r0, r3
 800befa:	2344      	movs	r3, #68	@ 0x44
 800befc:	001a      	movs	r2, r3
 800befe:	2100      	movs	r1, #0
 800bf00:	f010 f920 	bl	801c144 <memset>
  if(hadc->Instance==ADC1)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a3b      	ldr	r2, [pc, #236]	@ (800bff8 <HAL_ADC_MspInit+0x11c>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d16f      	bne.n	800bfee <HAL_ADC_MspInit+0x112>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800bf0e:	193b      	adds	r3, r7, r4
 800bf10:	2280      	movs	r2, #128	@ 0x80
 800bf12:	01d2      	lsls	r2, r2, #7
 800bf14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800bf16:	193b      	adds	r3, r7, r4
 800bf18:	2200      	movs	r2, #0
 800bf1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf1c:	193b      	adds	r3, r7, r4
 800bf1e:	0018      	movs	r0, r3
 800bf20:	f00b fd70 	bl	8017a04 <HAL_RCCEx_PeriphCLKConfig>
 800bf24:	1e03      	subs	r3, r0, #0
 800bf26:	d001      	beq.n	800bf2c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800bf28:	f7fe fc48 	bl	800a7bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800bf2c:	4b33      	ldr	r3, [pc, #204]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bf30:	4b32      	ldr	r3, [pc, #200]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf32:	2180      	movs	r1, #128	@ 0x80
 800bf34:	0349      	lsls	r1, r1, #13
 800bf36:	430a      	orrs	r2, r1
 800bf38:	661a      	str	r2, [r3, #96]	@ 0x60
 800bf3a:	4b30      	ldr	r3, [pc, #192]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bf3e:	2380      	movs	r3, #128	@ 0x80
 800bf40:	035b      	lsls	r3, r3, #13
 800bf42:	4013      	ands	r3, r2
 800bf44:	617b      	str	r3, [r7, #20]
 800bf46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf48:	4b2c      	ldr	r3, [pc, #176]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf4e:	2104      	movs	r1, #4
 800bf50:	430a      	orrs	r2, r1
 800bf52:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf54:	4b29      	ldr	r3, [pc, #164]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf58:	2204      	movs	r2, #4
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	613b      	str	r3, [r7, #16]
 800bf5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf60:	4b26      	ldr	r3, [pc, #152]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf64:	4b25      	ldr	r3, [pc, #148]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf66:	2101      	movs	r1, #1
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf6c:	4b23      	ldr	r3, [pc, #140]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf70:	2201      	movs	r2, #1
 800bf72:	4013      	ands	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf78:	4b20      	ldr	r3, [pc, #128]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf7c:	4b1f      	ldr	r3, [pc, #124]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf7e:	2102      	movs	r1, #2
 800bf80:	430a      	orrs	r2, r1
 800bf82:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf84:	4b1d      	ldr	r3, [pc, #116]	@ (800bffc <HAL_ADC_MspInit+0x120>)
 800bf86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf88:	2202      	movs	r2, #2
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	60bb      	str	r3, [r7, #8]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800bf90:	245c      	movs	r4, #92	@ 0x5c
 800bf92:	193b      	adds	r3, r7, r4
 800bf94:	2213      	movs	r2, #19
 800bf96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf98:	193b      	adds	r3, r7, r4
 800bf9a:	2203      	movs	r2, #3
 800bf9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf9e:	193b      	adds	r3, r7, r4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfa4:	193b      	adds	r3, r7, r4
 800bfa6:	4a16      	ldr	r2, [pc, #88]	@ (800c000 <HAL_ADC_MspInit+0x124>)
 800bfa8:	0019      	movs	r1, r3
 800bfaa:	0010      	movs	r0, r2
 800bfac:	f008 f970 	bl	8014290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800bfb0:	193b      	adds	r3, r7, r4
 800bfb2:	22e0      	movs	r2, #224	@ 0xe0
 800bfb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bfb6:	193b      	adds	r3, r7, r4
 800bfb8:	2203      	movs	r2, #3
 800bfba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfbc:	193b      	adds	r3, r7, r4
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfc2:	193a      	adds	r2, r7, r4
 800bfc4:	23a0      	movs	r3, #160	@ 0xa0
 800bfc6:	05db      	lsls	r3, r3, #23
 800bfc8:	0011      	movs	r1, r2
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f008 f960 	bl	8014290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800bfd0:	193b      	adds	r3, r7, r4
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bfd6:	193b      	adds	r3, r7, r4
 800bfd8:	2203      	movs	r2, #3
 800bfda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfdc:	193b      	adds	r3, r7, r4
 800bfde:	2200      	movs	r2, #0
 800bfe0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfe2:	193b      	adds	r3, r7, r4
 800bfe4:	4a07      	ldr	r2, [pc, #28]	@ (800c004 <HAL_ADC_MspInit+0x128>)
 800bfe6:	0019      	movs	r1, r3
 800bfe8:	0010      	movs	r0, r2
 800bfea:	f008 f951 	bl	8014290 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	46bd      	mov	sp, r7
 800bff2:	b01d      	add	sp, #116	@ 0x74
 800bff4:	bd90      	pop	{r4, r7, pc}
 800bff6:	46c0      	nop			@ (mov r8, r8)
 800bff8:	40012400 	.word	0x40012400
 800bffc:	40021000 	.word	0x40021000
 800c000:	50000800 	.word	0x50000800
 800c004:	50000400 	.word	0x50000400

0800c008 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a0e      	ldr	r2, [pc, #56]	@ (800c050 <HAL_ADC_MspDeInit+0x48>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d115      	bne.n	800c046 <HAL_ADC_MspDeInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800c01a:	4b0e      	ldr	r3, [pc, #56]	@ (800c054 <HAL_ADC_MspDeInit+0x4c>)
 800c01c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c01e:	4b0d      	ldr	r3, [pc, #52]	@ (800c054 <HAL_ADC_MspDeInit+0x4c>)
 800c020:	490d      	ldr	r1, [pc, #52]	@ (800c058 <HAL_ADC_MspDeInit+0x50>)
 800c022:	400a      	ands	r2, r1
 800c024:	661a      	str	r2, [r3, #96]	@ 0x60
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PC4     ------> ADC1_IN15
    PB1     ------> ADC1_IN18
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 800c026:	4b0d      	ldr	r3, [pc, #52]	@ (800c05c <HAL_ADC_MspDeInit+0x54>)
 800c028:	2113      	movs	r1, #19
 800c02a:	0018      	movs	r0, r3
 800c02c:	f008 faa4 	bl	8014578 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800c030:	23a0      	movs	r3, #160	@ 0xa0
 800c032:	05db      	lsls	r3, r3, #23
 800c034:	21e0      	movs	r1, #224	@ 0xe0
 800c036:	0018      	movs	r0, r3
 800c038:	f008 fa9e 	bl	8014578 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 800c03c:	4b08      	ldr	r3, [pc, #32]	@ (800c060 <HAL_ADC_MspDeInit+0x58>)
 800c03e:	2102      	movs	r1, #2
 800c040:	0018      	movs	r0, r3
 800c042:	f008 fa99 	bl	8014578 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800c046:	46c0      	nop			@ (mov r8, r8)
 800c048:	46bd      	mov	sp, r7
 800c04a:	b002      	add	sp, #8
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	46c0      	nop			@ (mov r8, r8)
 800c050:	40012400 	.word	0x40012400
 800c054:	40021000 	.word	0x40021000
 800c058:	ffefffff 	.word	0xffefffff
 800c05c:	50000800 	.word	0x50000800
 800c060:	50000400 	.word	0x50000400

0800c064 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c064:	b590      	push	{r4, r7, lr}
 800c066:	b09b      	sub	sp, #108	@ 0x6c
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c06c:	2354      	movs	r3, #84	@ 0x54
 800c06e:	18fb      	adds	r3, r7, r3
 800c070:	0018      	movs	r0, r3
 800c072:	2314      	movs	r3, #20
 800c074:	001a      	movs	r2, r3
 800c076:	2100      	movs	r1, #0
 800c078:	f010 f864 	bl	801c144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c07c:	2410      	movs	r4, #16
 800c07e:	193b      	adds	r3, r7, r4
 800c080:	0018      	movs	r0, r3
 800c082:	2344      	movs	r3, #68	@ 0x44
 800c084:	001a      	movs	r2, r3
 800c086:	2100      	movs	r1, #0
 800c088:	f010 f85c 	bl	801c144 <memset>
  if(hi2c->Instance==I2C1)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a50      	ldr	r2, [pc, #320]	@ (800c1d4 <HAL_I2C_MspInit+0x170>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d000      	beq.n	800c098 <HAL_I2C_MspInit+0x34>
 800c096:	e099      	b.n	800c1cc <HAL_I2C_MspInit+0x168>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c098:	193b      	adds	r3, r7, r4
 800c09a:	2220      	movs	r2, #32
 800c09c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800c09e:	193b      	adds	r3, r7, r4
 800c0a0:	2280      	movs	r2, #128	@ 0x80
 800c0a2:	0192      	lsls	r2, r2, #6
 800c0a4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c0a6:	193b      	adds	r3, r7, r4
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	f00b fcab 	bl	8017a04 <HAL_RCCEx_PeriphCLKConfig>
 800c0ae:	1e03      	subs	r3, r0, #0
 800c0b0:	d001      	beq.n	800c0b6 <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800c0b2:	f7fe fb83 	bl	800a7bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0b6:	4b48      	ldr	r3, [pc, #288]	@ (800c1d8 <HAL_I2C_MspInit+0x174>)
 800c0b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0ba:	4b47      	ldr	r3, [pc, #284]	@ (800c1d8 <HAL_I2C_MspInit+0x174>)
 800c0bc:	2102      	movs	r1, #2
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c0c2:	4b45      	ldr	r3, [pc, #276]	@ (800c1d8 <HAL_I2C_MspInit+0x174>)
 800c0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c0ce:	2154      	movs	r1, #84	@ 0x54
 800c0d0:	187b      	adds	r3, r7, r1
 800c0d2:	22c0      	movs	r2, #192	@ 0xc0
 800c0d4:	0092      	lsls	r2, r2, #2
 800c0d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c0d8:	187b      	adds	r3, r7, r1
 800c0da:	2212      	movs	r2, #18
 800c0dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0de:	187b      	adds	r3, r7, r1
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0e4:	187b      	adds	r3, r7, r1
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c0ea:	187b      	adds	r3, r7, r1
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0f0:	187b      	adds	r3, r7, r1
 800c0f2:	4a3a      	ldr	r2, [pc, #232]	@ (800c1dc <HAL_I2C_MspInit+0x178>)
 800c0f4:	0019      	movs	r1, r3
 800c0f6:	0010      	movs	r0, r2
 800c0f8:	f008 f8ca 	bl	8014290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c0fc:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <HAL_I2C_MspInit+0x174>)
 800c0fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c100:	4b35      	ldr	r3, [pc, #212]	@ (800c1d8 <HAL_I2C_MspInit+0x174>)
 800c102:	2180      	movs	r1, #128	@ 0x80
 800c104:	0389      	lsls	r1, r1, #14
 800c106:	430a      	orrs	r2, r1
 800c108:	659a      	str	r2, [r3, #88]	@ 0x58
 800c10a:	4b33      	ldr	r3, [pc, #204]	@ (800c1d8 <HAL_I2C_MspInit+0x174>)
 800c10c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c10e:	2380      	movs	r3, #128	@ 0x80
 800c110:	039b      	lsls	r3, r3, #14
 800c112:	4013      	ands	r3, r2
 800c114:	60bb      	str	r3, [r7, #8]
 800c116:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800c118:	4b31      	ldr	r3, [pc, #196]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c11a:	4a32      	ldr	r2, [pc, #200]	@ (800c1e4 <HAL_I2C_MspInit+0x180>)
 800c11c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800c11e:	4b30      	ldr	r3, [pc, #192]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c120:	2209      	movs	r2, #9
 800c122:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c124:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c126:	2200      	movs	r2, #0
 800c128:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c12a:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c130:	4b2b      	ldr	r3, [pc, #172]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c132:	2280      	movs	r2, #128	@ 0x80
 800c134:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c136:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c138:	2200      	movs	r2, #0
 800c13a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c13c:	4b28      	ldr	r3, [pc, #160]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c13e:	2200      	movs	r2, #0
 800c140:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c142:	4b27      	ldr	r3, [pc, #156]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c144:	2200      	movs	r2, #0
 800c146:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c148:	4b25      	ldr	r3, [pc, #148]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c14e:	4b24      	ldr	r3, [pc, #144]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c150:	0018      	movs	r0, r3
 800c152:	f007 faf1 	bl	8013738 <HAL_DMA_Init>
 800c156:	1e03      	subs	r3, r0, #0
 800c158:	d001      	beq.n	800c15e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800c15a:	f7fe fb2f 	bl	800a7bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a1f      	ldr	r2, [pc, #124]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c162:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c164:	4b1e      	ldr	r3, [pc, #120]	@ (800c1e0 <HAL_I2C_MspInit+0x17c>)
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800c16a:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c16c:	4a1f      	ldr	r2, [pc, #124]	@ (800c1ec <HAL_I2C_MspInit+0x188>)
 800c16e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800c170:	4b1d      	ldr	r3, [pc, #116]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c172:	220a      	movs	r2, #10
 800c174:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c176:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c178:	2210      	movs	r2, #16
 800c17a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c17c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c17e:	2200      	movs	r2, #0
 800c180:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c182:	4b19      	ldr	r3, [pc, #100]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c184:	2280      	movs	r2, #128	@ 0x80
 800c186:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c188:	4b17      	ldr	r3, [pc, #92]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c18e:	4b16      	ldr	r3, [pc, #88]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c190:	2200      	movs	r2, #0
 800c192:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c194:	4b14      	ldr	r3, [pc, #80]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c196:	2200      	movs	r2, #0
 800c198:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c19a:	4b13      	ldr	r3, [pc, #76]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c1a0:	4b11      	ldr	r3, [pc, #68]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c1a2:	0018      	movs	r0, r3
 800c1a4:	f007 fac8 	bl	8013738 <HAL_DMA_Init>
 800c1a8:	1e03      	subs	r3, r0, #0
 800c1aa:	d001      	beq.n	800c1b0 <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 800c1ac:	f7fe fb06 	bl	800a7bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a0d      	ldr	r2, [pc, #52]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c1b4:	639a      	str	r2, [r3, #56]	@ 0x38
 800c1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e8 <HAL_I2C_MspInit+0x184>)
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c1bc:	2200      	movs	r2, #0
 800c1be:	2100      	movs	r1, #0
 800c1c0:	2017      	movs	r0, #23
 800c1c2:	f007 fa77 	bl	80136b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c1c6:	2017      	movs	r0, #23
 800c1c8:	f007 fa89 	bl	80136de <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800c1cc:	46c0      	nop			@ (mov r8, r8)
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	b01b      	add	sp, #108	@ 0x6c
 800c1d2:	bd90      	pop	{r4, r7, pc}
 800c1d4:	40005400 	.word	0x40005400
 800c1d8:	40021000 	.word	0x40021000
 800c1dc:	50000400 	.word	0x50000400
 800c1e0:	200004a0 	.word	0x200004a0
 800c1e4:	40020080 	.word	0x40020080
 800c1e8:	20000500 	.word	0x20000500
 800c1ec:	4002006c 	.word	0x4002006c

0800c1f0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a13      	ldr	r2, [pc, #76]	@ (800c24c <HAL_I2C_MspDeInit+0x5c>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d120      	bne.n	800c244 <HAL_I2C_MspDeInit+0x54>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800c202:	4b13      	ldr	r3, [pc, #76]	@ (800c250 <HAL_I2C_MspDeInit+0x60>)
 800c204:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c206:	4b12      	ldr	r3, [pc, #72]	@ (800c250 <HAL_I2C_MspDeInit+0x60>)
 800c208:	4912      	ldr	r1, [pc, #72]	@ (800c254 <HAL_I2C_MspDeInit+0x64>)
 800c20a:	400a      	ands	r2, r1
 800c20c:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800c20e:	2380      	movs	r3, #128	@ 0x80
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	4a11      	ldr	r2, [pc, #68]	@ (800c258 <HAL_I2C_MspDeInit+0x68>)
 800c214:	0019      	movs	r1, r3
 800c216:	0010      	movs	r0, r2
 800c218:	f008 f9ae 	bl	8014578 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800c21c:	2380      	movs	r3, #128	@ 0x80
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4a0d      	ldr	r2, [pc, #52]	@ (800c258 <HAL_I2C_MspDeInit+0x68>)
 800c222:	0019      	movs	r1, r3
 800c224:	0010      	movs	r0, r2
 800c226:	f008 f9a7 	bl	8014578 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22e:	0018      	movs	r0, r3
 800c230:	f007 fb2e 	bl	8013890 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c238:	0018      	movs	r0, r3
 800c23a:	f007 fb29 	bl	8013890 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800c23e:	2017      	movs	r0, #23
 800c240:	f007 fa5d 	bl	80136fe <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800c244:	46c0      	nop			@ (mov r8, r8)
 800c246:	46bd      	mov	sp, r7
 800c248:	b002      	add	sp, #8
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	40005400 	.word	0x40005400
 800c250:	40021000 	.word	0x40021000
 800c254:	ffdfffff 	.word	0xffdfffff
 800c258:	50000400 	.word	0x50000400

0800c25c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b095      	sub	sp, #84	@ 0x54
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c264:	240c      	movs	r4, #12
 800c266:	193b      	adds	r3, r7, r4
 800c268:	0018      	movs	r0, r3
 800c26a:	2344      	movs	r3, #68	@ 0x44
 800c26c:	001a      	movs	r2, r3
 800c26e:	2100      	movs	r1, #0
 800c270:	f00f ff68 	bl	801c144 <memset>
  if(hrtc->Instance==RTC)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a1a      	ldr	r2, [pc, #104]	@ (800c2e4 <HAL_RTC_MspInit+0x88>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d12e      	bne.n	800c2dc <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c27e:	193b      	adds	r3, r7, r4
 800c280:	2280      	movs	r2, #128	@ 0x80
 800c282:	0212      	lsls	r2, r2, #8
 800c284:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c286:	193b      	adds	r3, r7, r4
 800c288:	2280      	movs	r2, #128	@ 0x80
 800c28a:	0052      	lsls	r2, r2, #1
 800c28c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c28e:	193b      	adds	r3, r7, r4
 800c290:	0018      	movs	r0, r3
 800c292:	f00b fbb7 	bl	8017a04 <HAL_RCCEx_PeriphCLKConfig>
 800c296:	1e03      	subs	r3, r0, #0
 800c298:	d001      	beq.n	800c29e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c29a:	f7fe fa8f 	bl	800a7bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c29e:	4a12      	ldr	r2, [pc, #72]	@ (800c2e8 <HAL_RTC_MspInit+0x8c>)
 800c2a0:	2390      	movs	r3, #144	@ 0x90
 800c2a2:	58d3      	ldr	r3, [r2, r3]
 800c2a4:	4910      	ldr	r1, [pc, #64]	@ (800c2e8 <HAL_RTC_MspInit+0x8c>)
 800c2a6:	2280      	movs	r2, #128	@ 0x80
 800c2a8:	0212      	lsls	r2, r2, #8
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	2290      	movs	r2, #144	@ 0x90
 800c2ae:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c2b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e8 <HAL_RTC_MspInit+0x8c>)
 800c2b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c2b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c2e8 <HAL_RTC_MspInit+0x8c>)
 800c2b6:	2180      	movs	r1, #128	@ 0x80
 800c2b8:	00c9      	lsls	r1, r1, #3
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800c2be:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e8 <HAL_RTC_MspInit+0x8c>)
 800c2c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c2c2:	2380      	movs	r3, #128	@ 0x80
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	60bb      	str	r3, [r7, #8]
 800c2ca:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	2002      	movs	r0, #2
 800c2d2:	f007 f9ef 	bl	80136b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800c2d6:	2002      	movs	r0, #2
 800c2d8:	f007 fa01 	bl	80136de <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800c2dc:	46c0      	nop			@ (mov r8, r8)
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	b015      	add	sp, #84	@ 0x54
 800c2e2:	bd90      	pop	{r4, r7, pc}
 800c2e4:	40002800 	.word	0x40002800
 800c2e8:	40021000 	.word	0x40021000

0800c2ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b097      	sub	sp, #92	@ 0x5c
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c2f4:	2414      	movs	r4, #20
 800c2f6:	193b      	adds	r3, r7, r4
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	2344      	movs	r3, #68	@ 0x44
 800c2fc:	001a      	movs	r2, r3
 800c2fe:	2100      	movs	r1, #0
 800c300:	f00f ff20 	bl	801c144 <memset>
  if(htim_base->Instance==TIM1)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a23      	ldr	r2, [pc, #140]	@ (800c398 <HAL_TIM_Base_MspInit+0xac>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d11d      	bne.n	800c34a <HAL_TIM_Base_MspInit+0x5e>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800c30e:	193b      	adds	r3, r7, r4
 800c310:	2280      	movs	r2, #128	@ 0x80
 800c312:	00d2      	lsls	r2, r2, #3
 800c314:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800c316:	193b      	adds	r3, r7, r4
 800c318:	2200      	movs	r2, #0
 800c31a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c31c:	193b      	adds	r3, r7, r4
 800c31e:	0018      	movs	r0, r3
 800c320:	f00b fb70 	bl	8017a04 <HAL_RCCEx_PeriphCLKConfig>
 800c324:	1e03      	subs	r3, r0, #0
 800c326:	d001      	beq.n	800c32c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800c328:	f7fe fa48 	bl	800a7bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c32c:	4b1b      	ldr	r3, [pc, #108]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c32e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c330:	4b1a      	ldr	r3, [pc, #104]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c332:	2180      	movs	r1, #128	@ 0x80
 800c334:	0109      	lsls	r1, r1, #4
 800c336:	430a      	orrs	r2, r1
 800c338:	661a      	str	r2, [r3, #96]	@ 0x60
 800c33a:	4b18      	ldr	r3, [pc, #96]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c33c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c33e:	2380      	movs	r3, #128	@ 0x80
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	4013      	ands	r3, r2
 800c344:	613b      	str	r3, [r7, #16]
 800c346:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800c348:	e022      	b.n	800c390 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a14      	ldr	r2, [pc, #80]	@ (800c3a0 <HAL_TIM_Base_MspInit+0xb4>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d10c      	bne.n	800c36e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c354:	4b11      	ldr	r3, [pc, #68]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c356:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c358:	4b10      	ldr	r3, [pc, #64]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c35a:	2102      	movs	r1, #2
 800c35c:	430a      	orrs	r2, r1
 800c35e:	659a      	str	r2, [r3, #88]	@ 0x58
 800c360:	4b0e      	ldr	r3, [pc, #56]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c364:	2202      	movs	r2, #2
 800c366:	4013      	ands	r3, r2
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	68fb      	ldr	r3, [r7, #12]
}
 800c36c:	e010      	b.n	800c390 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM6)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a0c      	ldr	r2, [pc, #48]	@ (800c3a4 <HAL_TIM_Base_MspInit+0xb8>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d10b      	bne.n	800c390 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c378:	4b08      	ldr	r3, [pc, #32]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c37a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c37c:	4b07      	ldr	r3, [pc, #28]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c37e:	2110      	movs	r1, #16
 800c380:	430a      	orrs	r2, r1
 800c382:	659a      	str	r2, [r3, #88]	@ 0x58
 800c384:	4b05      	ldr	r3, [pc, #20]	@ (800c39c <HAL_TIM_Base_MspInit+0xb0>)
 800c386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c388:	2210      	movs	r2, #16
 800c38a:	4013      	ands	r3, r2
 800c38c:	60bb      	str	r3, [r7, #8]
 800c38e:	68bb      	ldr	r3, [r7, #8]
}
 800c390:	46c0      	nop			@ (mov r8, r8)
 800c392:	46bd      	mov	sp, r7
 800c394:	b017      	add	sp, #92	@ 0x5c
 800c396:	bd90      	pop	{r4, r7, pc}
 800c398:	40012c00 	.word	0x40012c00
 800c39c:	40021000 	.word	0x40021000
 800c3a0:	40000400 	.word	0x40000400
 800c3a4:	40001000 	.word	0x40001000

0800c3a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c3a8:	b590      	push	{r4, r7, lr}
 800c3aa:	b08b      	sub	sp, #44	@ 0x2c
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3b0:	2414      	movs	r4, #20
 800c3b2:	193b      	adds	r3, r7, r4
 800c3b4:	0018      	movs	r0, r3
 800c3b6:	2314      	movs	r3, #20
 800c3b8:	001a      	movs	r2, r3
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	f00f fec2 	bl	801c144 <memset>
  if(htim->Instance==TIM1)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a29      	ldr	r2, [pc, #164]	@ (800c46c <HAL_TIM_MspPostInit+0xc4>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d124      	bne.n	800c414 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3ca:	4b29      	ldr	r3, [pc, #164]	@ (800c470 <HAL_TIM_MspPostInit+0xc8>)
 800c3cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c3ce:	4b28      	ldr	r3, [pc, #160]	@ (800c470 <HAL_TIM_MspPostInit+0xc8>)
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c3d6:	4b26      	ldr	r3, [pc, #152]	@ (800c470 <HAL_TIM_MspPostInit+0xc8>)
 800c3d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4013      	ands	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
 800c3e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c3e2:	193b      	adds	r3, r7, r4
 800c3e4:	2280      	movs	r2, #128	@ 0x80
 800c3e6:	00d2      	lsls	r2, r2, #3
 800c3e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3ea:	0021      	movs	r1, r4
 800c3ec:	187b      	adds	r3, r7, r1
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3f2:	187b      	adds	r3, r7, r1
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3f8:	187b      	adds	r3, r7, r1
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c3fe:	187b      	adds	r3, r7, r1
 800c400:	2201      	movs	r2, #1
 800c402:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c404:	187a      	adds	r2, r7, r1
 800c406:	23a0      	movs	r3, #160	@ 0xa0
 800c408:	05db      	lsls	r3, r3, #23
 800c40a:	0011      	movs	r1, r2
 800c40c:	0018      	movs	r0, r3
 800c40e:	f007 ff3f 	bl	8014290 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c412:	e026      	b.n	800c462 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a16      	ldr	r2, [pc, #88]	@ (800c474 <HAL_TIM_MspPostInit+0xcc>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d121      	bne.n	800c462 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c41e:	4b14      	ldr	r3, [pc, #80]	@ (800c470 <HAL_TIM_MspPostInit+0xc8>)
 800c420:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c422:	4b13      	ldr	r3, [pc, #76]	@ (800c470 <HAL_TIM_MspPostInit+0xc8>)
 800c424:	2104      	movs	r1, #4
 800c426:	430a      	orrs	r2, r1
 800c428:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c42a:	4b11      	ldr	r3, [pc, #68]	@ (800c470 <HAL_TIM_MspPostInit+0xc8>)
 800c42c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c42e:	2204      	movs	r2, #4
 800c430:	4013      	ands	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c436:	2114      	movs	r1, #20
 800c438:	187b      	adds	r3, r7, r1
 800c43a:	2280      	movs	r2, #128	@ 0x80
 800c43c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c43e:	187b      	adds	r3, r7, r1
 800c440:	2202      	movs	r2, #2
 800c442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c444:	187b      	adds	r3, r7, r1
 800c446:	2200      	movs	r2, #0
 800c448:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c44a:	187b      	adds	r3, r7, r1
 800c44c:	2200      	movs	r2, #0
 800c44e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c450:	187b      	adds	r3, r7, r1
 800c452:	2202      	movs	r2, #2
 800c454:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c456:	187b      	adds	r3, r7, r1
 800c458:	4a07      	ldr	r2, [pc, #28]	@ (800c478 <HAL_TIM_MspPostInit+0xd0>)
 800c45a:	0019      	movs	r1, r3
 800c45c:	0010      	movs	r0, r2
 800c45e:	f007 ff17 	bl	8014290 <HAL_GPIO_Init>
}
 800c462:	46c0      	nop			@ (mov r8, r8)
 800c464:	46bd      	mov	sp, r7
 800c466:	b00b      	add	sp, #44	@ 0x2c
 800c468:	bd90      	pop	{r4, r7, pc}
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	40012c00 	.word	0x40012c00
 800c470:	40021000 	.word	0x40021000
 800c474:	40000400 	.word	0x40000400
 800c478:	50000800 	.word	0x50000800

0800c47c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c47c:	b590      	push	{r4, r7, lr}
 800c47e:	b09d      	sub	sp, #116	@ 0x74
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c484:	235c      	movs	r3, #92	@ 0x5c
 800c486:	18fb      	adds	r3, r7, r3
 800c488:	0018      	movs	r0, r3
 800c48a:	2314      	movs	r3, #20
 800c48c:	001a      	movs	r2, r3
 800c48e:	2100      	movs	r1, #0
 800c490:	f00f fe58 	bl	801c144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c494:	2418      	movs	r4, #24
 800c496:	193b      	adds	r3, r7, r4
 800c498:	0018      	movs	r0, r3
 800c49a:	2344      	movs	r3, #68	@ 0x44
 800c49c:	001a      	movs	r2, r3
 800c49e:	2100      	movs	r1, #0
 800c4a0:	f00f fe50 	bl	801c144 <memset>
  if(huart->Instance==USART2)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4aa0      	ldr	r2, [pc, #640]	@ (800c72c <HAL_UART_MspInit+0x2b0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d000      	beq.n	800c4b0 <HAL_UART_MspInit+0x34>
 800c4ae:	e09a      	b.n	800c5e6 <HAL_UART_MspInit+0x16a>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c4b0:	193b      	adds	r3, r7, r4
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c4b6:	193b      	adds	r3, r7, r4
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c4bc:	193b      	adds	r3, r7, r4
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f00b faa0 	bl	8017a04 <HAL_RCCEx_PeriphCLKConfig>
 800c4c4:	1e03      	subs	r3, r0, #0
 800c4c6:	d001      	beq.n	800c4cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800c4c8:	f7fe f978 	bl	800a7bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c4cc:	4b98      	ldr	r3, [pc, #608]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c4ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c4d0:	4b97      	ldr	r3, [pc, #604]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c4d2:	2180      	movs	r1, #128	@ 0x80
 800c4d4:	0289      	lsls	r1, r1, #10
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c4da:	4b95      	ldr	r3, [pc, #596]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c4dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c4de:	2380      	movs	r3, #128	@ 0x80
 800c4e0:	029b      	lsls	r3, r3, #10
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4e8:	4b91      	ldr	r3, [pc, #580]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c4ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4ec:	4b90      	ldr	r3, [pc, #576]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c4f4:	4b8e      	ldr	r3, [pc, #568]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c4f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	613b      	str	r3, [r7, #16]
 800c4fe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c500:	215c      	movs	r1, #92	@ 0x5c
 800c502:	187b      	adds	r3, r7, r1
 800c504:	220c      	movs	r2, #12
 800c506:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c508:	187b      	adds	r3, r7, r1
 800c50a:	2202      	movs	r2, #2
 800c50c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c50e:	187b      	adds	r3, r7, r1
 800c510:	2200      	movs	r2, #0
 800c512:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c514:	187b      	adds	r3, r7, r1
 800c516:	2200      	movs	r2, #0
 800c518:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c51a:	187b      	adds	r3, r7, r1
 800c51c:	2207      	movs	r2, #7
 800c51e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c520:	187a      	adds	r2, r7, r1
 800c522:	23a0      	movs	r3, #160	@ 0xa0
 800c524:	05db      	lsls	r3, r3, #23
 800c526:	0011      	movs	r1, r2
 800c528:	0018      	movs	r0, r3
 800c52a:	f007 feb1 	bl	8014290 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800c52e:	4b81      	ldr	r3, [pc, #516]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c530:	4a81      	ldr	r2, [pc, #516]	@ (800c738 <HAL_UART_MspInit+0x2bc>)
 800c532:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800c534:	4b7f      	ldr	r3, [pc, #508]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c536:	2247      	movs	r2, #71	@ 0x47
 800c538:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c53a:	4b7e      	ldr	r3, [pc, #504]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c540:	4b7c      	ldr	r3, [pc, #496]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c542:	2200      	movs	r2, #0
 800c544:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c546:	4b7b      	ldr	r3, [pc, #492]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c548:	2280      	movs	r2, #128	@ 0x80
 800c54a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c54c:	4b79      	ldr	r3, [pc, #484]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c54e:	2200      	movs	r2, #0
 800c550:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c552:	4b78      	ldr	r3, [pc, #480]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c554:	2200      	movs	r2, #0
 800c556:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800c558:	4b76      	ldr	r3, [pc, #472]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c55e:	4b75      	ldr	r3, [pc, #468]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c560:	2200      	movs	r2, #0
 800c562:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c564:	4b73      	ldr	r3, [pc, #460]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c566:	0018      	movs	r0, r3
 800c568:	f007 f8e6 	bl	8013738 <HAL_DMA_Init>
 800c56c:	1e03      	subs	r3, r0, #0
 800c56e:	d001      	beq.n	800c574 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800c570:	f7fe f924 	bl	800a7bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2180      	movs	r1, #128	@ 0x80
 800c578:	4a6e      	ldr	r2, [pc, #440]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c57a:	505a      	str	r2, [r3, r1]
 800c57c:	4b6d      	ldr	r3, [pc, #436]	@ (800c734 <HAL_UART_MspInit+0x2b8>)
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800c582:	4b6e      	ldr	r3, [pc, #440]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c584:	4a6e      	ldr	r2, [pc, #440]	@ (800c740 <HAL_UART_MspInit+0x2c4>)
 800c586:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800c588:	4b6c      	ldr	r3, [pc, #432]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c58a:	2248      	movs	r2, #72	@ 0x48
 800c58c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c58e:	4b6b      	ldr	r3, [pc, #428]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c590:	2210      	movs	r2, #16
 800c592:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c594:	4b69      	ldr	r3, [pc, #420]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c596:	2200      	movs	r2, #0
 800c598:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c59a:	4b68      	ldr	r3, [pc, #416]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c59c:	2280      	movs	r2, #128	@ 0x80
 800c59e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5a0:	4b66      	ldr	r3, [pc, #408]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5a6:	4b65      	ldr	r3, [pc, #404]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c5ac:	4b63      	ldr	r3, [pc, #396]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c5b2:	4b62      	ldr	r3, [pc, #392]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c5b8:	4b60      	ldr	r3, [pc, #384]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5ba:	0018      	movs	r0, r3
 800c5bc:	f007 f8bc 	bl	8013738 <HAL_DMA_Init>
 800c5c0:	1e03      	subs	r3, r0, #0
 800c5c2:	d001      	beq.n	800c5c8 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 800c5c4:	f7fe f8fa 	bl	800a7bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a5c      	ldr	r2, [pc, #368]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5cc:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c5ce:	4b5b      	ldr	r3, [pc, #364]	@ (800c73c <HAL_UART_MspInit+0x2c0>)
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	201c      	movs	r0, #28
 800c5da:	f007 f86b 	bl	80136b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800c5de:	201c      	movs	r0, #28
 800c5e0:	f007 f87d 	bl	80136de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 800c5e4:	e09e      	b.n	800c724 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a56      	ldr	r2, [pc, #344]	@ (800c744 <HAL_UART_MspInit+0x2c8>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d000      	beq.n	800c5f2 <HAL_UART_MspInit+0x176>
 800c5f0:	e098      	b.n	800c724 <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 800c5f2:	2118      	movs	r1, #24
 800c5f4:	187b      	adds	r3, r7, r1
 800c5f6:	2280      	movs	r2, #128	@ 0x80
 800c5f8:	0292      	lsls	r2, r2, #10
 800c5fa:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c5fc:	187b      	adds	r3, r7, r1
 800c5fe:	0018      	movs	r0, r3
 800c600:	f00b fa00 	bl	8017a04 <HAL_RCCEx_PeriphCLKConfig>
 800c604:	1e03      	subs	r3, r0, #0
 800c606:	d001      	beq.n	800c60c <HAL_UART_MspInit+0x190>
      Error_Handler();
 800c608:	f7fe f8d8 	bl	800a7bc <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 800c60c:	4b48      	ldr	r3, [pc, #288]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c60e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c610:	4b47      	ldr	r3, [pc, #284]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c612:	2180      	movs	r1, #128	@ 0x80
 800c614:	0309      	lsls	r1, r1, #12
 800c616:	430a      	orrs	r2, r1
 800c618:	659a      	str	r2, [r3, #88]	@ 0x58
 800c61a:	4b45      	ldr	r3, [pc, #276]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c61c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c61e:	2380      	movs	r3, #128	@ 0x80
 800c620:	031b      	lsls	r3, r3, #12
 800c622:	4013      	ands	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c628:	4b41      	ldr	r3, [pc, #260]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c62a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c62c:	4b40      	ldr	r3, [pc, #256]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c62e:	2101      	movs	r1, #1
 800c630:	430a      	orrs	r2, r1
 800c632:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c634:	4b3e      	ldr	r3, [pc, #248]	@ (800c730 <HAL_UART_MspInit+0x2b4>)
 800c636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c638:	2201      	movs	r2, #1
 800c63a:	4013      	ands	r3, r2
 800c63c:	60bb      	str	r3, [r7, #8]
 800c63e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c640:	215c      	movs	r1, #92	@ 0x5c
 800c642:	187b      	adds	r3, r7, r1
 800c644:	2203      	movs	r2, #3
 800c646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c648:	187b      	adds	r3, r7, r1
 800c64a:	2202      	movs	r2, #2
 800c64c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c64e:	187b      	adds	r3, r7, r1
 800c650:	2200      	movs	r2, #0
 800c652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c654:	187b      	adds	r3, r7, r1
 800c656:	2200      	movs	r2, #0
 800c658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 800c65a:	187b      	adds	r3, r7, r1
 800c65c:	2208      	movs	r2, #8
 800c65e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c660:	187a      	adds	r2, r7, r1
 800c662:	23a0      	movs	r3, #160	@ 0xa0
 800c664:	05db      	lsls	r3, r3, #23
 800c666:	0011      	movs	r1, r2
 800c668:	0018      	movs	r0, r3
 800c66a:	f007 fe11 	bl	8014290 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800c66e:	4b36      	ldr	r3, [pc, #216]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c670:	4a36      	ldr	r2, [pc, #216]	@ (800c74c <HAL_UART_MspInit+0x2d0>)
 800c672:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800c674:	4b34      	ldr	r3, [pc, #208]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c676:	224b      	movs	r2, #75	@ 0x4b
 800c678:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c67a:	4b33      	ldr	r3, [pc, #204]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c680:	4b31      	ldr	r3, [pc, #196]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c682:	2200      	movs	r2, #0
 800c684:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c686:	4b30      	ldr	r3, [pc, #192]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c688:	2280      	movs	r2, #128	@ 0x80
 800c68a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c68c:	4b2e      	ldr	r3, [pc, #184]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c68e:	2200      	movs	r2, #0
 800c690:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c692:	4b2d      	ldr	r3, [pc, #180]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c694:	2200      	movs	r2, #0
 800c696:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800c698:	4b2b      	ldr	r3, [pc, #172]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c69e:	4b2a      	ldr	r3, [pc, #168]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800c6a4:	4b28      	ldr	r3, [pc, #160]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c6a6:	0018      	movs	r0, r3
 800c6a8:	f007 f846 	bl	8013738 <HAL_DMA_Init>
 800c6ac:	1e03      	subs	r3, r0, #0
 800c6ae:	d001      	beq.n	800c6b4 <HAL_UART_MspInit+0x238>
      Error_Handler();
 800c6b0:	f7fe f884 	bl	800a7bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2180      	movs	r1, #128	@ 0x80
 800c6b8:	4a23      	ldr	r2, [pc, #140]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c6ba:	505a      	str	r2, [r3, r1]
 800c6bc:	4b22      	ldr	r3, [pc, #136]	@ (800c748 <HAL_UART_MspInit+0x2cc>)
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 800c6c2:	4b23      	ldr	r3, [pc, #140]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6c4:	4a23      	ldr	r2, [pc, #140]	@ (800c754 <HAL_UART_MspInit+0x2d8>)
 800c6c6:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800c6c8:	4b21      	ldr	r3, [pc, #132]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6ca:	224c      	movs	r2, #76	@ 0x4c
 800c6cc:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c6ce:	4b20      	ldr	r3, [pc, #128]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6d0:	2210      	movs	r2, #16
 800c6d2:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c6da:	4b1d      	ldr	r3, [pc, #116]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6dc:	2280      	movs	r2, #128	@ 0x80
 800c6de:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c6e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800c6ec:	4b18      	ldr	r3, [pc, #96]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c6f2:	4b17      	ldr	r3, [pc, #92]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800c6f8:	4b15      	ldr	r3, [pc, #84]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c6fa:	0018      	movs	r0, r3
 800c6fc:	f007 f81c 	bl	8013738 <HAL_DMA_Init>
 800c700:	1e03      	subs	r3, r0, #0
 800c702:	d001      	beq.n	800c708 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800c704:	f7fe f85a 	bl	800a7bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a11      	ldr	r2, [pc, #68]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c70c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c70e:	4b10      	ldr	r3, [pc, #64]	@ (800c750 <HAL_UART_MspInit+0x2d4>)
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 800c714:	2200      	movs	r2, #0
 800c716:	2100      	movs	r1, #0
 800c718:	201e      	movs	r0, #30
 800c71a:	f006 ffcb 	bl	80136b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 800c71e:	201e      	movs	r0, #30
 800c720:	f006 ffdd 	bl	80136de <HAL_NVIC_EnableIRQ>
}
 800c724:	46c0      	nop			@ (mov r8, r8)
 800c726:	46bd      	mov	sp, r7
 800c728:	b01d      	add	sp, #116	@ 0x74
 800c72a:	bd90      	pop	{r4, r7, pc}
 800c72c:	40004400 	.word	0x40004400
 800c730:	40021000 	.word	0x40021000
 800c734:	200007b0 	.word	0x200007b0
 800c738:	40020058 	.word	0x40020058
 800c73c:	20000810 	.word	0x20000810
 800c740:	40020044 	.word	0x40020044
 800c744:	40004c00 	.word	0x40004c00
 800c748:	20000870 	.word	0x20000870
 800c74c:	4002001c 	.word	0x4002001c
 800c750:	200008d0 	.word	0x200008d0
 800c754:	40020030 	.word	0x40020030

0800c758 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a20      	ldr	r2, [pc, #128]	@ (800c7e8 <HAL_UART_MspDeInit+0x90>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d11a      	bne.n	800c7a0 <HAL_UART_MspDeInit+0x48>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800c76a:	4b20      	ldr	r3, [pc, #128]	@ (800c7ec <HAL_UART_MspDeInit+0x94>)
 800c76c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c76e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7ec <HAL_UART_MspDeInit+0x94>)
 800c770:	491f      	ldr	r1, [pc, #124]	@ (800c7f0 <HAL_UART_MspDeInit+0x98>)
 800c772:	400a      	ands	r2, r1
 800c774:	659a      	str	r2, [r3, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800c776:	23a0      	movs	r3, #160	@ 0xa0
 800c778:	05db      	lsls	r3, r3, #23
 800c77a:	210c      	movs	r1, #12
 800c77c:	0018      	movs	r0, r3
 800c77e:	f007 fefb 	bl	8014578 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2280      	movs	r2, #128	@ 0x80
 800c786:	589b      	ldr	r3, [r3, r2]
 800c788:	0018      	movs	r0, r3
 800c78a:	f007 f881 	bl	8013890 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c792:	0018      	movs	r0, r3
 800c794:	f007 f87c 	bl	8013890 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_LPUART2_IRQn);
 800c798:	201c      	movs	r0, #28
 800c79a:	f006 ffb0 	bl	80136fe <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART4_MspDeInit 1 */

    /* USER CODE END USART4_MspDeInit 1 */
  }

}
 800c79e:	e01e      	b.n	800c7de <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==USART4)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a13      	ldr	r2, [pc, #76]	@ (800c7f4 <HAL_UART_MspDeInit+0x9c>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d119      	bne.n	800c7de <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_USART4_CLK_DISABLE();
 800c7aa:	4b10      	ldr	r3, [pc, #64]	@ (800c7ec <HAL_UART_MspDeInit+0x94>)
 800c7ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c7ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c7ec <HAL_UART_MspDeInit+0x94>)
 800c7b0:	4911      	ldr	r1, [pc, #68]	@ (800c7f8 <HAL_UART_MspDeInit+0xa0>)
 800c7b2:	400a      	ands	r2, r1
 800c7b4:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800c7b6:	23a0      	movs	r3, #160	@ 0xa0
 800c7b8:	05db      	lsls	r3, r3, #23
 800c7ba:	2103      	movs	r1, #3
 800c7bc:	0018      	movs	r0, r3
 800c7be:	f007 fedb 	bl	8014578 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2280      	movs	r2, #128	@ 0x80
 800c7c6:	589b      	ldr	r3, [r3, r2]
 800c7c8:	0018      	movs	r0, r3
 800c7ca:	f007 f861 	bl	8013890 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7d2:	0018      	movs	r0, r3
 800c7d4:	f007 f85c 	bl	8013890 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART4_LPUART3_IRQn);
 800c7d8:	201e      	movs	r0, #30
 800c7da:	f006 ff90 	bl	80136fe <HAL_NVIC_DisableIRQ>
}
 800c7de:	46c0      	nop			@ (mov r8, r8)
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	46c0      	nop			@ (mov r8, r8)
 800c7e8:	40004400 	.word	0x40004400
 800c7ec:	40021000 	.word	0x40021000
 800c7f0:	fffdffff 	.word	0xfffdffff
 800c7f4:	40004c00 	.word	0x40004c00
 800c7f8:	fff7ffff 	.word	0xfff7ffff

0800c7fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c800:	46c0      	nop			@ (mov r8, r8)
 800c802:	e7fd      	b.n	800c800 <NMI_Handler+0x4>

0800c804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c808:	46c0      	nop			@ (mov r8, r8)
 800c80a:	e7fd      	b.n	800c808 <HardFault_Handler+0x4>

0800c80c <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c810:	46c0      	nop			@ (mov r8, r8)
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c81a:	46c0      	nop			@ (mov r8, r8)
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c824:	f005 fbd4 	bl	8011fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c828:	46c0      	nop			@ (mov r8, r8)
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c834:	4b03      	ldr	r3, [pc, #12]	@ (800c844 <RTC_TAMP_IRQHandler+0x14>)
 800c836:	0018      	movs	r0, r3
 800c838:	f00c fd36 	bl	80192a8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800c83c:	46c0      	nop			@ (mov r8, r8)
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	46c0      	nop			@ (mov r8, r8)
 800c844:	20000574 	.word	0x20000574

0800c848 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800c84c:	2380      	movs	r3, #128	@ 0x80
 800c84e:	021b      	lsls	r3, r3, #8
 800c850:	0018      	movs	r0, r3
 800c852:	f007 ffc7 	bl	80147e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800c856:	46c0      	nop			@ (mov r8, r8)
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c860:	4b05      	ldr	r3, [pc, #20]	@ (800c878 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c862:	0018      	movs	r0, r3
 800c864:	f007 f9fa 	bl	8013c5c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c868:	4b04      	ldr	r3, [pc, #16]	@ (800c87c <DMA1_Channel2_3_IRQHandler+0x20>)
 800c86a:	0018      	movs	r0, r3
 800c86c:	f007 f9f6 	bl	8013c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c870:	46c0      	nop			@ (mov r8, r8)
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	46c0      	nop			@ (mov r8, r8)
 800c878:	20000870 	.word	0x20000870
 800c87c:	200008d0 	.word	0x200008d0

0800c880 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c884:	4b09      	ldr	r3, [pc, #36]	@ (800c8ac <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 800c886:	0018      	movs	r0, r3
 800c888:	f007 f9e8 	bl	8013c5c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c88c:	4b08      	ldr	r3, [pc, #32]	@ (800c8b0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800c88e:	0018      	movs	r0, r3
 800c890:	f007 f9e4 	bl	8013c5c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c894:	4b07      	ldr	r3, [pc, #28]	@ (800c8b4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 800c896:	0018      	movs	r0, r3
 800c898:	f007 f9e0 	bl	8013c5c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c89c:	4b06      	ldr	r3, [pc, #24]	@ (800c8b8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f007 f9dc 	bl	8013c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 800c8a4:	46c0      	nop			@ (mov r8, r8)
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	46c0      	nop			@ (mov r8, r8)
 800c8ac:	20000810 	.word	0x20000810
 800c8b0:	200007b0 	.word	0x200007b0
 800c8b4:	20000500 	.word	0x20000500
 800c8b8:	200004a0 	.word	0x200004a0

0800c8bc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c8c0:	4b09      	ldr	r3, [pc, #36]	@ (800c8e8 <I2C1_IRQHandler+0x2c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	699a      	ldr	r2, [r3, #24]
 800c8c6:	23e0      	movs	r3, #224	@ 0xe0
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	d004      	beq.n	800c8d8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c8ce:	4b06      	ldr	r3, [pc, #24]	@ (800c8e8 <I2C1_IRQHandler+0x2c>)
 800c8d0:	0018      	movs	r0, r3
 800c8d2:	f008 fac1 	bl	8014e58 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c8d6:	e003      	b.n	800c8e0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c8d8:	4b03      	ldr	r3, [pc, #12]	@ (800c8e8 <I2C1_IRQHandler+0x2c>)
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f008 faa2 	bl	8014e24 <HAL_I2C_EV_IRQHandler>
}
 800c8e0:	46c0      	nop			@ (mov r8, r8)
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	46c0      	nop			@ (mov r8, r8)
 800c8e8:	2000044c 	.word	0x2000044c

0800c8ec <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c8f0:	4b03      	ldr	r3, [pc, #12]	@ (800c900 <USART2_LPUART2_IRQHandler+0x14>)
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	f00e f822 	bl	801a93c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800c8f8:	46c0      	nop			@ (mov r8, r8)
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	46c0      	nop			@ (mov r8, r8)
 800c900:	20000688 	.word	0x20000688

0800c904 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c908:	4b03      	ldr	r3, [pc, #12]	@ (800c918 <USART4_LPUART3_IRQHandler+0x14>)
 800c90a:	0018      	movs	r0, r3
 800c90c:	f00e f816 	bl	801a93c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 800c910:	46c0      	nop			@ (mov r8, r8)
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	46c0      	nop			@ (mov r8, r8)
 800c918:	2000071c 	.word	0x2000071c

0800c91c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c924:	4a14      	ldr	r2, [pc, #80]	@ (800c978 <_sbrk+0x5c>)
 800c926:	4b15      	ldr	r3, [pc, #84]	@ (800c97c <_sbrk+0x60>)
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c930:	4b13      	ldr	r3, [pc, #76]	@ (800c980 <_sbrk+0x64>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c938:	4b11      	ldr	r3, [pc, #68]	@ (800c980 <_sbrk+0x64>)
 800c93a:	4a12      	ldr	r2, [pc, #72]	@ (800c984 <_sbrk+0x68>)
 800c93c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c93e:	4b10      	ldr	r3, [pc, #64]	@ (800c980 <_sbrk+0x64>)
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	18d3      	adds	r3, r2, r3
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d207      	bcs.n	800c95c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c94c:	f00f fc38 	bl	801c1c0 <__errno>
 800c950:	0003      	movs	r3, r0
 800c952:	220c      	movs	r2, #12
 800c954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c956:	2301      	movs	r3, #1
 800c958:	425b      	negs	r3, r3
 800c95a:	e009      	b.n	800c970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c95c:	4b08      	ldr	r3, [pc, #32]	@ (800c980 <_sbrk+0x64>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c962:	4b07      	ldr	r3, [pc, #28]	@ (800c980 <_sbrk+0x64>)
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	18d2      	adds	r2, r2, r3
 800c96a:	4b05      	ldr	r3, [pc, #20]	@ (800c980 <_sbrk+0x64>)
 800c96c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c96e:	68fb      	ldr	r3, [r7, #12]
}
 800c970:	0018      	movs	r0, r3
 800c972:	46bd      	mov	sp, r7
 800c974:	b006      	add	sp, #24
 800c976:	bd80      	pop	{r7, pc}
 800c978:	20008000 	.word	0x20008000
 800c97c:	00000400 	.word	0x00000400
 800c980:	200011fc 	.word	0x200011fc
 800c984:	200013d0 	.word	0x200013d0

0800c988 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c98e:	4b12      	ldr	r3, [pc, #72]	@ (800c9d8 <SystemInit+0x50>)
 800c990:	2280      	movs	r2, #128	@ 0x80
 800c992:	0512      	lsls	r2, r2, #20
 800c994:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800c996:	4a11      	ldr	r2, [pc, #68]	@ (800c9dc <SystemInit+0x54>)
 800c998:	2380      	movs	r3, #128	@ 0x80
 800c99a:	58d3      	ldr	r3, [r2, r3]
 800c99c:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800c99e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9dc <SystemInit+0x54>)
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	2380      	movs	r3, #128	@ 0x80
 800c9a8:	025b      	lsls	r3, r3, #9
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	d010      	beq.n	800c9d0 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	22ff      	movs	r2, #255	@ 0xff
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	2bcc      	cmp	r3, #204	@ 0xcc
 800c9b6:	d00b      	beq.n	800c9d0 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	22ff      	movs	r2, #255	@ 0xff
 800c9bc:	4013      	ands	r3, r2
 800c9be:	2baa      	cmp	r3, #170	@ 0xaa
 800c9c0:	d006      	beq.n	800c9d0 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800c9c2:	4b06      	ldr	r3, [pc, #24]	@ (800c9dc <SystemInit+0x54>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	4b05      	ldr	r3, [pc, #20]	@ (800c9dc <SystemInit+0x54>)
 800c9c8:	2180      	movs	r1, #128	@ 0x80
 800c9ca:	02c9      	lsls	r1, r1, #11
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800c9d0:	46c0      	nop			@ (mov r8, r8)
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	b002      	add	sp, #8
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed00 	.word	0xe000ed00
 800c9dc:	40022000 	.word	0x40022000

0800c9e0 <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0


	cnttemp++;
 800c9e6:	4bc5      	ldr	r3, [pc, #788]	@ (800ccfc <temper+0x31c>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	4bc3      	ldr	r3, [pc, #780]	@ (800ccfc <temper+0x31c>)
 800c9f0:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 800c9f2:	4bc2      	ldr	r3, [pc, #776]	@ (800ccfc <temper+0x31c>)
 800c9f4:	781a      	ldrb	r2, [r3, #0]
 800c9f6:	4bc2      	ldr	r3, [pc, #776]	@ (800cd00 <temper+0x320>)
 800c9f8:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800c9fa:	4bc1      	ldr	r3, [pc, #772]	@ (800cd00 <temper+0x320>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	2b31      	cmp	r3, #49	@ 0x31
 800ca00:	d801      	bhi.n	800ca06 <temper+0x26>
 800ca02:	f000 fd8b 	bl	800d51c <temper+0xb3c>
		goto tempe05;  // Sí no tomes muestras
 800ca06:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800ca08:	4bbe      	ldr	r3, [pc, #760]	@ (800cd04 <temper+0x324>)
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	f7fa fcdb 	bl	80073c6 <decwreg>
		decwreg(&retcncfe);
 800ca10:	4bbd      	ldr	r3, [pc, #756]	@ (800cd08 <temper+0x328>)
 800ca12:	0018      	movs	r0, r3
 800ca14:	f7fa fcd7 	bl	80073c6 <decwreg>
		decwreg(&retcncfr);
 800ca18:	4bbc      	ldr	r3, [pc, #752]	@ (800cd0c <temper+0x32c>)
 800ca1a:	0018      	movs	r0, r3
 800ca1c:	f7fa fcd3 	bl	80073c6 <decwreg>
		decwreg(&retcncfc);
 800ca20:	4bbb      	ldr	r3, [pc, #748]	@ (800cd10 <temper+0x330>)
 800ca22:	0018      	movs	r0, r3
 800ca24:	f7fa fccf 	bl	80073c6 <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 800ca28:	4bb4      	ldr	r3, [pc, #720]	@ (800ccfc <temper+0x31c>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	701a      	strb	r2, [r3, #0]

		/*
		 * PRUEBAS DEBUGGER // Comentar de ser necesario
		 */

		ADC1->CHSELR = 0;
 800ca2e:	4bb9      	ldr	r3, [pc, #740]	@ (800cd14 <temper+0x334>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 800ca34:	4bb7      	ldr	r3, [pc, #732]	@ (800cd14 <temper+0x334>)
 800ca36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca38:	4bb6      	ldr	r3, [pc, #728]	@ (800cd14 <temper+0x334>)
 800ca3a:	2180      	movs	r1, #128	@ 0x80
 800ca3c:	0209      	lsls	r1, r1, #8
 800ca3e:	430a      	orrs	r2, r1
 800ca40:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD ();
 800ca42:	f000 ff0f 	bl	800d864 <capturaAD>
		tRTP1000[cntmues] = adcramh;
 800ca46:	4bb4      	ldr	r3, [pc, #720]	@ (800cd18 <temper+0x338>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	001a      	movs	r2, r3
 800ca4c:	4bb3      	ldr	r3, [pc, #716]	@ (800cd1c <temper+0x33c>)
 800ca4e:	8819      	ldrh	r1, [r3, #0]
 800ca50:	4bb3      	ldr	r3, [pc, #716]	@ (800cd20 <temper+0x340>)
 800ca52:	0052      	lsls	r2, r2, #1
 800ca54:	52d1      	strh	r1, [r2, r3]
		if(cntmues == 7){
 800ca56:	4bb0      	ldr	r3, [pc, #704]	@ (800cd18 <temper+0x338>)
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b07      	cmp	r3, #7
 800ca5c:	d171      	bne.n	800cb42 <temper+0x162>
			tRTP1000_p = 0;
 800ca5e:	4bb1      	ldr	r3, [pc, #708]	@ (800cd24 <temper+0x344>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800ca64:	230f      	movs	r3, #15
 800ca66:	18fb      	adds	r3, r7, r3
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]
 800ca6c:	e010      	b.n	800ca90 <temper+0xb0>
				tRTP1000_p += tRTP1000[i];
 800ca6e:	210f      	movs	r1, #15
 800ca70:	187b      	adds	r3, r7, r1
 800ca72:	781a      	ldrb	r2, [r3, #0]
 800ca74:	4baa      	ldr	r3, [pc, #680]	@ (800cd20 <temper+0x340>)
 800ca76:	0052      	lsls	r2, r2, #1
 800ca78:	5ad2      	ldrh	r2, [r2, r3]
 800ca7a:	4baa      	ldr	r3, [pc, #680]	@ (800cd24 <temper+0x344>)
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	18d3      	adds	r3, r2, r3
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	4ba8      	ldr	r3, [pc, #672]	@ (800cd24 <temper+0x344>)
 800ca84:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800ca86:	187b      	adds	r3, r7, r1
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	187b      	adds	r3, r7, r1
 800ca8c:	3201      	adds	r2, #1
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	230f      	movs	r3, #15
 800ca92:	18fb      	adds	r3, r7, r3
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	2b07      	cmp	r3, #7
 800ca98:	d9e9      	bls.n	800ca6e <temper+0x8e>
			}

			tRTP1000_p = tRTP1000_p/8;
 800ca9a:	4ba2      	ldr	r3, [pc, #648]	@ (800cd24 <temper+0x344>)
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	08db      	lsrs	r3, r3, #3
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	4ba0      	ldr	r3, [pc, #640]	@ (800cd24 <temper+0x344>)
 800caa4:	801a      	strh	r2, [r3, #0]
			vRTP1000_p = 330*tRTP1000_p/1024;
 800caa6:	4b9f      	ldr	r3, [pc, #636]	@ (800cd24 <temper+0x344>)
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	001a      	movs	r2, r3
 800caac:	0013      	movs	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	189b      	adds	r3, r3, r2
 800cab2:	015a      	lsls	r2, r3, #5
 800cab4:	189b      	adds	r3, r3, r2
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	d502      	bpl.n	800cac0 <temper+0xe0>
 800caba:	4a9b      	ldr	r2, [pc, #620]	@ (800cd28 <temper+0x348>)
 800cabc:	4694      	mov	ip, r2
 800cabe:	4463      	add	r3, ip
 800cac0:	129b      	asrs	r3, r3, #10
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	4b99      	ldr	r3, [pc, #612]	@ (800cd2c <temper+0x34c>)
 800cac6:	801a      	strh	r2, [r3, #0]
			uint32_t mul1 = vRTP1000_p+(R169/1000)*VSEN/R170;
 800cac8:	4b98      	ldr	r3, [pc, #608]	@ (800cd2c <temper+0x34c>)
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	4a98      	ldr	r2, [pc, #608]	@ (800cd30 <temper+0x350>)
 800cace:	4694      	mov	ip, r2
 800cad0:	4463      	add	r3, ip
 800cad2:	607b      	str	r3, [r7, #4]
			uint32_t mul2 = ((2*R169/R170+1000)*VSEN)/1000;
 800cad4:	4b97      	ldr	r3, [pc, #604]	@ (800cd34 <temper+0x354>)
 800cad6:	603b      	str	r3, [r7, #0]
			constantRTP = 1000*mul1/mul2;
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	0013      	movs	r3, r2
 800cadc:	015b      	lsls	r3, r3, #5
 800cade:	1a9b      	subs	r3, r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	189b      	adds	r3, r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	0018      	movs	r0, r3
 800caea:	f7f3 fb15 	bl	8000118 <__udivsi3>
 800caee:	0003      	movs	r3, r0
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	4b91      	ldr	r3, [pc, #580]	@ (800cd38 <temper+0x358>)
 800caf4:	801a      	strh	r2, [r3, #0]
			RTP1000 = constantRTP*R157/(1000-constantRTP);
 800caf6:	4b90      	ldr	r3, [pc, #576]	@ (800cd38 <temper+0x358>)
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	001a      	movs	r2, r3
 800cafc:	0013      	movs	r3, r2
 800cafe:	015b      	lsls	r3, r3, #5
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	189b      	adds	r3, r3, r2
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	0018      	movs	r0, r3
 800cb0a:	4b8b      	ldr	r3, [pc, #556]	@ (800cd38 <temper+0x358>)
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	001a      	movs	r2, r3
 800cb10:	23fa      	movs	r3, #250	@ 0xfa
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	1a9b      	subs	r3, r3, r2
 800cb16:	0019      	movs	r1, r3
 800cb18:	f7f3 fb88 	bl	800022c <__divsi3>
 800cb1c:	0003      	movs	r3, r0
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	4b86      	ldr	r3, [pc, #536]	@ (800cd3c <temper+0x35c>)
 800cb22:	801a      	strh	r2, [r3, #0]
			temperatureRTP = pendienteRTP*RTP1000/100 + (ordenadaRTP*10) ;
 800cb24:	4b85      	ldr	r3, [pc, #532]	@ (800cd3c <temper+0x35c>)
 800cb26:	881b      	ldrh	r3, [r3, #0]
 800cb28:	021b      	lsls	r3, r3, #8
 800cb2a:	2164      	movs	r1, #100	@ 0x64
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	f7f3 fb7d 	bl	800022c <__divsi3>
 800cb32:	0003      	movs	r3, r0
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	4a82      	ldr	r2, [pc, #520]	@ (800cd40 <temper+0x360>)
 800cb38:	4694      	mov	ip, r2
 800cb3a:	4463      	add	r3, ip
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	4b81      	ldr	r3, [pc, #516]	@ (800cd44 <temper+0x364>)
 800cb40:	801a      	strh	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800cb42:	4b74      	ldr	r3, [pc, #464]	@ (800cd14 <temper+0x334>)
 800cb44:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cb46:	4b73      	ldr	r3, [pc, #460]	@ (800cd14 <temper+0x334>)
 800cb48:	2280      	movs	r2, #128	@ 0x80
 800cb4a:	01d2      	lsls	r2, r2, #7
 800cb4c:	400a      	ands	r2, r1
 800cb4e:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800cb50:	4b70      	ldr	r3, [pc, #448]	@ (800cd14 <temper+0x334>)
 800cb52:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cb54:	4b6f      	ldr	r3, [pc, #444]	@ (800cd14 <temper+0x334>)
 800cb56:	2280      	movs	r2, #128	@ 0x80
 800cb58:	00d2      	lsls	r2, r2, #3
 800cb5a:	400a      	ands	r2, r1
 800cb5c:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cb5e:	4b6d      	ldr	r3, [pc, #436]	@ (800cd14 <temper+0x334>)
 800cb60:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cb62:	4b6c      	ldr	r3, [pc, #432]	@ (800cd14 <temper+0x334>)
 800cb64:	2280      	movs	r2, #128	@ 0x80
 800cb66:	02d2      	lsls	r2, r2, #11
 800cb68:	400a      	ands	r2, r1
 800cb6a:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 800cb6c:	4b69      	ldr	r3, [pc, #420]	@ (800cd14 <temper+0x334>)
 800cb6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cb70:	4b68      	ldr	r3, [pc, #416]	@ (800cd14 <temper+0x334>)
 800cb72:	2101      	movs	r1, #1
 800cb74:	430a      	orrs	r2, r1
 800cb76:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 800cb78:	f000 fe74 	bl	800d864 <capturaAD>

//lookshort_S4:
		Y_A();
 800cb7c:	f000 fee2 	bl	800d944 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 800cb80:	4b5f      	ldr	r3, [pc, #380]	@ (800cd00 <temper+0x320>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d005      	beq.n	800cb94 <temper+0x1b4>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cb88:	4b6f      	ldr	r3, [pc, #444]	@ (800cd48 <temper+0x368>)
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	4a6f      	ldr	r2, [pc, #444]	@ (800cd4c <temper+0x36c>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d808      	bhi.n	800cba4 <temper+0x1c4>
			goto lookopen_S04;          // No, revise límite inferior
 800cb92:	e010      	b.n	800cbb6 <temper+0x1d6>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 800cb94:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cb96:	4b6c      	ldr	r3, [pc, #432]	@ (800cd48 <temper+0x368>)
 800cb98:	881a      	ldrh	r2, [r3, #0]
 800cb9a:	23e2      	movs	r3, #226	@ 0xe2
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d308      	bcc.n	800cbb4 <temper+0x1d4>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 800cba2:	e000      	b.n	800cba6 <temper+0x1c6>
		goto sens_short_S04;
 800cba4:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800cba6:	496a      	ldr	r1, [pc, #424]	@ (800cd50 <temper+0x370>)
 800cba8:	486a      	ldr	r0, [pc, #424]	@ (800cd54 <temper+0x374>)
 800cbaa:	2307      	movs	r3, #7
 800cbac:	2205      	movs	r2, #5
 800cbae:	f000 fedf 	bl	800d970 <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 800cbb2:	e01c      	b.n	800cbee <temper+0x20e>
			goto lookopen_S04;          // No, revise límite inferior
 800cbb4:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 800cbb6:	4b68      	ldr	r3, [pc, #416]	@ (800cd58 <temper+0x378>)
 800cbb8:	781a      	ldrb	r2, [r3, #0]
 800cbba:	4b51      	ldr	r3, [pc, #324]	@ (800cd00 <temper+0x320>)
 800cbbc:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cbbe:	4b50      	ldr	r3, [pc, #320]	@ (800cd00 <temper+0x320>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d004      	beq.n	800cbd0 <temper+0x1f0>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cbc6:	4b60      	ldr	r3, [pc, #384]	@ (800cd48 <temper+0x368>)
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbcc:	d908      	bls.n	800cbe0 <temper+0x200>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800cbce:	e013      	b.n	800cbf8 <temper+0x218>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 800cbd0:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 800cbd2:	4b5d      	ldr	r3, [pc, #372]	@ (800cd48 <temper+0x368>)
 800cbd4:	881a      	ldrh	r2, [r3, #0]
 800cbd6:	23d7      	movs	r3, #215	@ 0xd7
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d20b      	bcs.n	800cbf6 <temper+0x216>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800cbde:	e000      	b.n	800cbe2 <temper+0x202>
		goto sens_open_S04;
 800cbe0:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 800cbe2:	495c      	ldr	r1, [pc, #368]	@ (800cd54 <temper+0x374>)
 800cbe4:	485a      	ldr	r0, [pc, #360]	@ (800cd50 <temper+0x370>)
 800cbe6:	2305      	movs	r3, #5
 800cbe8:	2207      	movs	r2, #7
 800cbea:	f000 fec1 	bl	800d970 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800cbee:	4b48      	ldr	r3, [pc, #288]	@ (800cd10 <temper+0x330>)
 800cbf0:	220f      	movs	r2, #15
 800cbf2:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 800cbf4:	e010      	b.n	800cc18 <temper+0x238>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800cbf6:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 800cbf8:	4b45      	ldr	r3, [pc, #276]	@ (800cd10 <temper+0x330>)
 800cbfa:	781a      	ldrb	r2, [r3, #0]
 800cbfc:	4b40      	ldr	r3, [pc, #256]	@ (800cd00 <temper+0x320>)
 800cbfe:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 800cc00:	4b3f      	ldr	r3, [pc, #252]	@ (800cd00 <temper+0x320>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <temper+0x236>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800cc08:	4951      	ldr	r1, [pc, #324]	@ (800cd50 <temper+0x370>)
 800cc0a:	4852      	ldr	r0, [pc, #328]	@ (800cd54 <temper+0x374>)
 800cc0c:	2307      	movs	r3, #7
 800cc0e:	2205      	movs	r2, #5
 800cc10:	f000 fec9 	bl	800d9a6 <Bclear_Clear_trfst>
 800cc14:	e000      	b.n	800cc18 <temper+0x238>
			goto tempeLoad_s04;
 800cc16:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cc18:	4b3f      	ldr	r3, [pc, #252]	@ (800cd18 <temper+0x338>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	001a      	movs	r2, r3
 800cc1e:	4b3f      	ldr	r3, [pc, #252]	@ (800cd1c <temper+0x33c>)
 800cc20:	8819      	ldrh	r1, [r3, #0]
 800cc22:	4b4e      	ldr	r3, [pc, #312]	@ (800cd5c <temper+0x37c>)
 800cc24:	0052      	lsls	r2, r2, #1
 800cc26:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800cc28:	4b3a      	ldr	r3, [pc, #232]	@ (800cd14 <temper+0x334>)
 800cc2a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cc2c:	4b39      	ldr	r3, [pc, #228]	@ (800cd14 <temper+0x334>)
 800cc2e:	2280      	movs	r2, #128	@ 0x80
 800cc30:	00d2      	lsls	r2, r2, #3
 800cc32:	400a      	ands	r2, r1
 800cc34:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800cc36:	4b37      	ldr	r3, [pc, #220]	@ (800cd14 <temper+0x334>)
 800cc38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc3a:	4b36      	ldr	r3, [pc, #216]	@ (800cd14 <temper+0x334>)
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	400a      	ands	r2, r1
 800cc40:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cc42:	4b34      	ldr	r3, [pc, #208]	@ (800cd14 <temper+0x334>)
 800cc44:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cc46:	4b33      	ldr	r3, [pc, #204]	@ (800cd14 <temper+0x334>)
 800cc48:	2280      	movs	r2, #128	@ 0x80
 800cc4a:	02d2      	lsls	r2, r2, #11
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 800cc50:	4b30      	ldr	r3, [pc, #192]	@ (800cd14 <temper+0x334>)
 800cc52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc54:	4b2f      	ldr	r3, [pc, #188]	@ (800cd14 <temper+0x334>)
 800cc56:	2180      	movs	r1, #128	@ 0x80
 800cc58:	02c9      	lsls	r1, r1, #11
 800cc5a:	430a      	orrs	r2, r1
 800cc5c:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 800cc5e:	f000 fe01 	bl	800d864 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 800cc62:	f000 fe6f 	bl	800d944 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cc66:	4b26      	ldr	r3, [pc, #152]	@ (800cd00 <temper+0x320>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d005      	beq.n	800cc7a <temper+0x29a>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cc6e:	4b36      	ldr	r3, [pc, #216]	@ (800cd48 <temper+0x368>)
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	4a3b      	ldr	r2, [pc, #236]	@ (800cd60 <temper+0x380>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d808      	bhi.n	800cc8a <temper+0x2aa>
		goto lookopen_S03;      // No, revise límite inferior
 800cc78:	e010      	b.n	800cc9c <temper+0x2bc>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 800cc7a:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cc7c:	4b32      	ldr	r3, [pc, #200]	@ (800cd48 <temper+0x368>)
 800cc7e:	881a      	ldrh	r2, [r3, #0]
 800cc80:	23e2      	movs	r3, #226	@ 0xe2
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d308      	bcc.n	800cc9a <temper+0x2ba>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 800cc88:	e000      	b.n	800cc8c <temper+0x2ac>
	goto sens_short_S03;
 800cc8a:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800cc8c:	4930      	ldr	r1, [pc, #192]	@ (800cd50 <temper+0x370>)
 800cc8e:	4830      	ldr	r0, [pc, #192]	@ (800cd50 <temper+0x370>)
 800cc90:	2305      	movs	r3, #5
 800cc92:	2204      	movs	r2, #4
 800cc94:	f000 fe6c 	bl	800d970 <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 800cc98:	e01c      	b.n	800ccd4 <temper+0x2f4>
			goto lookopen_S03; // No, revise límite inferior
 800cc9a:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800cc9c:	4b2e      	ldr	r3, [pc, #184]	@ (800cd58 <temper+0x378>)
 800cc9e:	781a      	ldrb	r2, [r3, #0]
 800cca0:	4b17      	ldr	r3, [pc, #92]	@ (800cd00 <temper+0x320>)
 800cca2:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cca4:	4b16      	ldr	r3, [pc, #88]	@ (800cd00 <temper+0x320>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d004      	beq.n	800ccb6 <temper+0x2d6>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800ccac:	4b26      	ldr	r3, [pc, #152]	@ (800cd48 <temper+0x368>)
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccb2:	d908      	bls.n	800ccc6 <temper+0x2e6>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800ccb4:	e013      	b.n	800ccde <temper+0x2fe>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 800ccb6:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800ccb8:	4b23      	ldr	r3, [pc, #140]	@ (800cd48 <temper+0x368>)
 800ccba:	881a      	ldrh	r2, [r3, #0]
 800ccbc:	23d7      	movs	r3, #215	@ 0xd7
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d20b      	bcs.n	800ccdc <temper+0x2fc>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 800ccc4:	e000      	b.n	800ccc8 <temper+0x2e8>
		goto sens_open_S03;
 800ccc6:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 800ccc8:	4921      	ldr	r1, [pc, #132]	@ (800cd50 <temper+0x370>)
 800ccca:	4821      	ldr	r0, [pc, #132]	@ (800cd50 <temper+0x370>)
 800cccc:	2304      	movs	r3, #4
 800ccce:	2205      	movs	r2, #5
 800ccd0:	f000 fe4e 	bl	800d970 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <temper+0x32c>)
 800ccd6:	220f      	movs	r2, #15
 800ccd8:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800ccda:	e044      	b.n	800cd66 <temper+0x386>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800ccdc:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800ccde:	4b0b      	ldr	r3, [pc, #44]	@ (800cd0c <temper+0x32c>)
 800cce0:	781a      	ldrb	r2, [r3, #0]
 800cce2:	4b07      	ldr	r3, [pc, #28]	@ (800cd00 <temper+0x320>)
 800cce4:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 800cce6:	4b06      	ldr	r3, [pc, #24]	@ (800cd00 <temper+0x320>)
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d13a      	bne.n	800cd64 <temper+0x384>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800ccee:	4918      	ldr	r1, [pc, #96]	@ (800cd50 <temper+0x370>)
 800ccf0:	4817      	ldr	r0, [pc, #92]	@ (800cd50 <temper+0x370>)
 800ccf2:	2305      	movs	r3, #5
 800ccf4:	2204      	movs	r2, #4
 800ccf6:	f000 fe56 	bl	800d9a6 <Bclear_Clear_trfst>
 800ccfa:	e034      	b.n	800cd66 <temper+0x386>
 800ccfc:	20000c1b 	.word	0x20000c1b
 800cd00:	2000124e 	.word	0x2000124e
 800cd04:	20000c20 	.word	0x20000c20
 800cd08:	20000c21 	.word	0x20000c21
 800cd0c:	20000cae 	.word	0x20000cae
 800cd10:	20000caf 	.word	0x20000caf
 800cd14:	40012400 	.word	0x40012400
 800cd18:	20000c1c 	.word	0x20000c1c
 800cd1c:	20000bbc 	.word	0x20000bbc
 800cd20:	20000260 	.word	0x20000260
 800cd24:	20001200 	.word	0x20001200
 800cd28:	000003ff 	.word	0x000003ff
 800cd2c:	20001202 	.word	0x20001202
 800cd30:	000003e2 	.word	0x000003e2
 800cd34:	00000903 	.word	0x00000903
 800cd38:	20001204 	.word	0x20001204
 800cd3c:	20001206 	.word	0x20001206
 800cd40:	fffff600 	.word	0xfffff600
 800cd44:	20001208 	.word	0x20001208
 800cd48:	20001250 	.word	0x20001250
 800cd4c:	000003ad 	.word	0x000003ad
 800cd50:	20000bdc 	.word	0x20000bdc
 800cd54:	20000be4 	.word	0x20000be4
 800cd58:	20000bf4 	.word	0x20000bf4
 800cd5c:	2000120c 	.word	0x2000120c
 800cd60:	000003b5 	.word	0x000003b5
			goto tempeLoad_s03;
 800cd64:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cd66:	4bd0      	ldr	r3, [pc, #832]	@ (800d0a8 <temper+0x6c8>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	001a      	movs	r2, r3
 800cd6c:	4bcf      	ldr	r3, [pc, #828]	@ (800d0ac <temper+0x6cc>)
 800cd6e:	8819      	ldrh	r1, [r3, #0]
 800cd70:	4bcf      	ldr	r3, [pc, #828]	@ (800d0b0 <temper+0x6d0>)
 800cd72:	0052      	lsls	r2, r2, #1
 800cd74:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800cd76:	4bcf      	ldr	r3, [pc, #828]	@ (800d0b4 <temper+0x6d4>)
 800cd78:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cd7a:	4bce      	ldr	r3, [pc, #824]	@ (800d0b4 <temper+0x6d4>)
 800cd7c:	2280      	movs	r2, #128	@ 0x80
 800cd7e:	01d2      	lsls	r2, r2, #7
 800cd80:	400a      	ands	r2, r1
 800cd82:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800cd84:	4bcb      	ldr	r3, [pc, #812]	@ (800d0b4 <temper+0x6d4>)
 800cd86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd88:	4bca      	ldr	r3, [pc, #808]	@ (800d0b4 <temper+0x6d4>)
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	400a      	ands	r2, r1
 800cd8e:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800cd90:	4bc8      	ldr	r3, [pc, #800]	@ (800d0b4 <temper+0x6d4>)
 800cd92:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cd94:	4bc7      	ldr	r3, [pc, #796]	@ (800d0b4 <temper+0x6d4>)
 800cd96:	2280      	movs	r2, #128	@ 0x80
 800cd98:	02d2      	lsls	r2, r2, #11
 800cd9a:	400a      	ands	r2, r1
 800cd9c:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 800cd9e:	4bc5      	ldr	r3, [pc, #788]	@ (800d0b4 <temper+0x6d4>)
 800cda0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cda2:	4bc4      	ldr	r3, [pc, #784]	@ (800d0b4 <temper+0x6d4>)
 800cda4:	2180      	movs	r1, #128	@ 0x80
 800cda6:	00c9      	lsls	r1, r1, #3
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 800cdac:	f000 fd5a 	bl	800d864 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 800cdb0:	f000 fdc8 	bl	800d944 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 800cdb4:	4bc0      	ldr	r3, [pc, #768]	@ (800d0b8 <temper+0x6d8>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d005      	beq.n	800cdc8 <temper+0x3e8>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cdbc:	4bbf      	ldr	r3, [pc, #764]	@ (800d0bc <temper+0x6dc>)
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	4abf      	ldr	r2, [pc, #764]	@ (800d0c0 <temper+0x6e0>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d808      	bhi.n	800cdd8 <temper+0x3f8>
			goto lookopen;     // No, revise límite inferior
 800cdc6:	e010      	b.n	800cdea <temper+0x40a>
			goto cmp_man_01;   // En autoprueba deja estos límites
 800cdc8:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cdca:	4bbc      	ldr	r3, [pc, #752]	@ (800d0bc <temper+0x6dc>)
 800cdcc:	881a      	ldrh	r2, [r3, #0]
 800cdce:	23e2      	movs	r3, #226	@ 0xe2
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d308      	bcc.n	800cde8 <temper+0x408>
			goto lookopen;     // No, revise límite inferior

sens_short:
 800cdd6:	e000      	b.n	800cdda <temper+0x3fa>
		goto sens_short;
 800cdd8:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800cdda:	49ba      	ldr	r1, [pc, #744]	@ (800d0c4 <temper+0x6e4>)
 800cddc:	48b9      	ldr	r0, [pc, #740]	@ (800d0c4 <temper+0x6e4>)
 800cdde:	2301      	movs	r3, #1
 800cde0:	2200      	movs	r2, #0
 800cde2:	f000 fdc5 	bl	800d970 <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 800cde6:	e01c      	b.n	800ce22 <temper+0x442>
			goto lookopen;     // No, revise límite inferior
 800cde8:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 800cdea:	4bb7      	ldr	r3, [pc, #732]	@ (800d0c8 <temper+0x6e8>)
 800cdec:	781a      	ldrb	r2, [r3, #0]
 800cdee:	4bb2      	ldr	r3, [pc, #712]	@ (800d0b8 <temper+0x6d8>)
 800cdf0:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cdf2:	4bb1      	ldr	r3, [pc, #708]	@ (800d0b8 <temper+0x6d8>)
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d004      	beq.n	800ce04 <temper+0x424>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cdfa:	4bb0      	ldr	r3, [pc, #704]	@ (800d0bc <temper+0x6dc>)
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce00:	d908      	bls.n	800ce14 <temper+0x434>
			goto sens_ok;       // Sí, indica sensor OK
 800ce02:	e016      	b.n	800ce32 <temper+0x452>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800ce04:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800ce06:	4bad      	ldr	r3, [pc, #692]	@ (800d0bc <temper+0x6dc>)
 800ce08:	881a      	ldrh	r2, [r3, #0]
 800ce0a:	23d7      	movs	r3, #215	@ 0xd7
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d20e      	bcs.n	800ce30 <temper+0x450>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800ce12:	e000      	b.n	800ce16 <temper+0x436>
		goto sens_open;
 800ce14:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800ce16:	49ab      	ldr	r1, [pc, #684]	@ (800d0c4 <temper+0x6e4>)
 800ce18:	48aa      	ldr	r0, [pc, #680]	@ (800d0c4 <temper+0x6e4>)
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f000 fda7 	bl	800d970 <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800ce22:	4baa      	ldr	r3, [pc, #680]	@ (800d0cc <temper+0x6ec>)
 800ce24:	220f      	movs	r2, #15
 800ce26:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 800ce28:	4ba9      	ldr	r3, [pc, #676]	@ (800d0d0 <temper+0x6f0>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 800ce2e:	e010      	b.n	800ce52 <temper+0x472>
			goto sens_ok;       // Sí, indica sensor OK
 800ce30:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800ce32:	4ba6      	ldr	r3, [pc, #664]	@ (800d0cc <temper+0x6ec>)
 800ce34:	781a      	ldrb	r2, [r3, #0]
 800ce36:	4ba0      	ldr	r3, [pc, #640]	@ (800d0b8 <temper+0x6d8>)
 800ce38:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 800ce3a:	4b9f      	ldr	r3, [pc, #636]	@ (800d0b8 <temper+0x6d8>)
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <temper+0x470>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800ce42:	49a0      	ldr	r1, [pc, #640]	@ (800d0c4 <temper+0x6e4>)
 800ce44:	489f      	ldr	r0, [pc, #636]	@ (800d0c4 <temper+0x6e4>)
 800ce46:	2301      	movs	r3, #1
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f000 fdac 	bl	800d9a6 <Bclear_Clear_trfst>
 800ce4e:	e000      	b.n	800ce52 <temper+0x472>
			goto tempe13;
 800ce50:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800ce52:	4b95      	ldr	r3, [pc, #596]	@ (800d0a8 <temper+0x6c8>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	001a      	movs	r2, r3
 800ce58:	4b94      	ldr	r3, [pc, #592]	@ (800d0ac <temper+0x6cc>)
 800ce5a:	8819      	ldrh	r1, [r3, #0]
 800ce5c:	4b9d      	ldr	r3, [pc, #628]	@ (800d0d4 <temper+0x6f4>)
 800ce5e:	0052      	lsls	r2, r2, #1
 800ce60:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800ce62:	4b94      	ldr	r3, [pc, #592]	@ (800d0b4 <temper+0x6d4>)
 800ce64:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ce66:	4b93      	ldr	r3, [pc, #588]	@ (800d0b4 <temper+0x6d4>)
 800ce68:	2280      	movs	r2, #128	@ 0x80
 800ce6a:	00d2      	lsls	r2, r2, #3
 800ce6c:	400a      	ands	r2, r1
 800ce6e:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800ce70:	4b90      	ldr	r3, [pc, #576]	@ (800d0b4 <temper+0x6d4>)
 800ce72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce74:	4b8f      	ldr	r3, [pc, #572]	@ (800d0b4 <temper+0x6d4>)
 800ce76:	2101      	movs	r1, #1
 800ce78:	400a      	ands	r2, r1
 800ce7a:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800ce7c:	4b8d      	ldr	r3, [pc, #564]	@ (800d0b4 <temper+0x6d4>)
 800ce7e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ce80:	4b8c      	ldr	r3, [pc, #560]	@ (800d0b4 <temper+0x6d4>)
 800ce82:	2280      	movs	r2, #128	@ 0x80
 800ce84:	02d2      	lsls	r2, r2, #11
 800ce86:	400a      	ands	r2, r1
 800ce88:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800ce8a:	4b8a      	ldr	r3, [pc, #552]	@ (800d0b4 <temper+0x6d4>)
 800ce8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce8e:	4b89      	ldr	r3, [pc, #548]	@ (800d0b4 <temper+0x6d4>)
 800ce90:	2180      	movs	r1, #128	@ 0x80
 800ce92:	01c9      	lsls	r1, r1, #7
 800ce94:	430a      	orrs	r2, r1
 800ce96:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800ce98:	f000 fce4 	bl	800d864 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800ce9c:	f000 fd52 	bl	800d944 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cea0:	4b85      	ldr	r3, [pc, #532]	@ (800d0b8 <temper+0x6d8>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d005      	beq.n	800ceb4 <temper+0x4d4>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cea8:	4b84      	ldr	r3, [pc, #528]	@ (800d0bc <temper+0x6dc>)
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	4a84      	ldr	r2, [pc, #528]	@ (800d0c0 <temper+0x6e0>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d808      	bhi.n	800cec4 <temper+0x4e4>
		goto lookopene;    // No, revise límite inferior
 800ceb2:	e010      	b.n	800ced6 <temper+0x4f6>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800ceb4:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800ceb6:	4b81      	ldr	r3, [pc, #516]	@ (800d0bc <temper+0x6dc>)
 800ceb8:	881a      	ldrh	r2, [r3, #0]
 800ceba:	23e2      	movs	r3, #226	@ 0xe2
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d308      	bcc.n	800ced4 <temper+0x4f4>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800cec2:	e000      	b.n	800cec6 <temper+0x4e6>
	goto senshorte;
 800cec4:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cec6:	497f      	ldr	r1, [pc, #508]	@ (800d0c4 <temper+0x6e4>)
 800cec8:	487e      	ldr	r0, [pc, #504]	@ (800d0c4 <temper+0x6e4>)
 800ceca:	2303      	movs	r3, #3
 800cecc:	2202      	movs	r2, #2
 800cece:	f000 fd4f 	bl	800d970 <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800ced2:	e01c      	b.n	800cf0e <temper+0x52e>
		goto lookopene;    // No, revise límite inferior
 800ced4:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800ced6:	4b7c      	ldr	r3, [pc, #496]	@ (800d0c8 <temper+0x6e8>)
 800ced8:	781a      	ldrb	r2, [r3, #0]
 800ceda:	4b77      	ldr	r3, [pc, #476]	@ (800d0b8 <temper+0x6d8>)
 800cedc:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800cede:	4b76      	ldr	r3, [pc, #472]	@ (800d0b8 <temper+0x6d8>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d004      	beq.n	800cef0 <temper+0x510>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cee6:	4b75      	ldr	r3, [pc, #468]	@ (800d0bc <temper+0x6dc>)
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceec:	d908      	bls.n	800cf00 <temper+0x520>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800ceee:	e013      	b.n	800cf18 <temper+0x538>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800cef0:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cef2:	4b72      	ldr	r3, [pc, #456]	@ (800d0bc <temper+0x6dc>)
 800cef4:	881a      	ldrh	r2, [r3, #0]
 800cef6:	23d7      	movs	r3, #215	@ 0xd7
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d20b      	bcs.n	800cf16 <temper+0x536>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800cefe:	e000      	b.n	800cf02 <temper+0x522>
	goto sens_opene;
 800cf00:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800cf02:	4970      	ldr	r1, [pc, #448]	@ (800d0c4 <temper+0x6e4>)
 800cf04:	486f      	ldr	r0, [pc, #444]	@ (800d0c4 <temper+0x6e4>)
 800cf06:	2302      	movs	r3, #2
 800cf08:	2203      	movs	r2, #3
 800cf0a:	f000 fd31 	bl	800d970 <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800cf0e:	4b72      	ldr	r3, [pc, #456]	@ (800d0d8 <temper+0x6f8>)
 800cf10:	2214      	movs	r2, #20
 800cf12:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800cf14:	e010      	b.n	800cf38 <temper+0x558>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800cf16:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800cf18:	4b6f      	ldr	r3, [pc, #444]	@ (800d0d8 <temper+0x6f8>)
 800cf1a:	781a      	ldrb	r2, [r3, #0]
 800cf1c:	4b66      	ldr	r3, [pc, #408]	@ (800d0b8 <temper+0x6d8>)
 800cf1e:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800cf20:	4b65      	ldr	r3, [pc, #404]	@ (800d0b8 <temper+0x6d8>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <temper+0x556>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cf28:	4966      	ldr	r1, [pc, #408]	@ (800d0c4 <temper+0x6e4>)
 800cf2a:	4866      	ldr	r0, [pc, #408]	@ (800d0c4 <temper+0x6e4>)
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f000 fd39 	bl	800d9a6 <Bclear_Clear_trfst>
 800cf34:	e000      	b.n	800cf38 <temper+0x558>
		goto tempe16;
 800cf36:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800cf38:	4b62      	ldr	r3, [pc, #392]	@ (800d0c4 <temper+0x6e4>)
 800cf3a:	789b      	ldrb	r3, [r3, #2]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d004      	beq.n	800cf4a <temper+0x56a>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800cf40:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800cf42:	4b5a      	ldr	r3, [pc, #360]	@ (800d0ac <temper+0x6cc>)
 800cf44:	220a      	movs	r2, #10
 800cf46:	801a      	strh	r2, [r3, #0]
 800cf48:	e000      	b.n	800cf4c <temper+0x56c>
	goto tempe16a;                 // No, revisa temperatura alta
 800cf4a:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cf4c:	4b56      	ldr	r3, [pc, #344]	@ (800d0a8 <temper+0x6c8>)
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	001a      	movs	r2, r3
 800cf52:	4b56      	ldr	r3, [pc, #344]	@ (800d0ac <temper+0x6cc>)
 800cf54:	8819      	ldrh	r1, [r3, #0]
 800cf56:	4b61      	ldr	r3, [pc, #388]	@ (800d0dc <temper+0x6fc>)
 800cf58:	0052      	lsls	r2, r2, #1
 800cf5a:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800cf5c:	4b52      	ldr	r3, [pc, #328]	@ (800d0a8 <temper+0x6c8>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	3301      	adds	r3, #1
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	4b50      	ldr	r3, [pc, #320]	@ (800d0a8 <temper+0x6c8>)
 800cf66:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800cf68:	4b4f      	ldr	r3, [pc, #316]	@ (800d0a8 <temper+0x6c8>)
 800cf6a:	781a      	ldrb	r2, [r3, #0]
 800cf6c:	4b52      	ldr	r3, [pc, #328]	@ (800d0b8 <temper+0x6d8>)
 800cf6e:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800cf70:	4b51      	ldr	r3, [pc, #324]	@ (800d0b8 <temper+0x6d8>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b07      	cmp	r3, #7
 800cf76:	d800      	bhi.n	800cf7a <temper+0x59a>
 800cf78:	e2d2      	b.n	800d520 <temper+0xb40>
			goto tempe17;  // Si, obten el promedio
 800cf7a:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800cf7c:	4b58      	ldr	r3, [pc, #352]	@ (800d0e0 <temper+0x700>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cf82:	230e      	movs	r3, #14
 800cf84:	18fb      	adds	r3, r7, r3
 800cf86:	2200      	movs	r2, #0
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	e010      	b.n	800cfae <temper+0x5ce>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800cf8c:	210e      	movs	r1, #14
 800cf8e:	187b      	adds	r3, r7, r1
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	4b54      	ldr	r3, [pc, #336]	@ (800d0e4 <temper+0x704>)
 800cf94:	0052      	lsls	r2, r2, #1
 800cf96:	5ad2      	ldrh	r2, [r2, r3]
 800cf98:	4b51      	ldr	r3, [pc, #324]	@ (800d0e0 <temper+0x700>)
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	18d3      	adds	r3, r2, r3
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	4b4f      	ldr	r3, [pc, #316]	@ (800d0e0 <temper+0x700>)
 800cfa2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cfa4:	187b      	adds	r3, r7, r1
 800cfa6:	781a      	ldrb	r2, [r3, #0]
 800cfa8:	187b      	adds	r3, r7, r1
 800cfaa:	3201      	adds	r2, #1
 800cfac:	701a      	strb	r2, [r3, #0]
 800cfae:	230e      	movs	r3, #14
 800cfb0:	18fb      	adds	r3, r7, r3
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b07      	cmp	r3, #7
 800cfb6:	d9e9      	bls.n	800cf8c <temper+0x5ac>
	}
	resul = resul / 8;
 800cfb8:	4b49      	ldr	r3, [pc, #292]	@ (800d0e0 <temper+0x700>)
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	08db      	lsrs	r3, r3, #3
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	4b47      	ldr	r3, [pc, #284]	@ (800d0e0 <temper+0x700>)
 800cfc2:	801a      	strh	r2, [r3, #0]
	linealiza();
 800cfc4:	f000 fb16 	bl	800d5f4 <linealiza>
	X = tempo;
 800cfc8:	4b47      	ldr	r3, [pc, #284]	@ (800d0e8 <temper+0x708>)
 800cfca:	881a      	ldrh	r2, [r3, #0]
 800cfcc:	4b47      	ldr	r3, [pc, #284]	@ (800d0ec <temper+0x70c>)
 800cfce:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800cfd0:	4b46      	ldr	r3, [pc, #280]	@ (800d0ec <temper+0x70c>)
 800cfd2:	881a      	ldrh	r2, [r3, #0]
 800cfd4:	4b46      	ldr	r3, [pc, #280]	@ (800d0f0 <temper+0x710>)
 800cfd6:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800cfd8:	4b41      	ldr	r3, [pc, #260]	@ (800d0e0 <temper+0x700>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800cfde:	230d      	movs	r3, #13
 800cfe0:	18fb      	adds	r3, r7, r3
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	701a      	strb	r2, [r3, #0]
 800cfe6:	e010      	b.n	800d00a <temper+0x62a>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800cfe8:	210d      	movs	r1, #13
 800cfea:	187b      	adds	r3, r7, r1
 800cfec:	781a      	ldrb	r2, [r3, #0]
 800cfee:	4b30      	ldr	r3, [pc, #192]	@ (800d0b0 <temper+0x6d0>)
 800cff0:	0052      	lsls	r2, r2, #1
 800cff2:	5ad2      	ldrh	r2, [r2, r3]
 800cff4:	4b3a      	ldr	r3, [pc, #232]	@ (800d0e0 <temper+0x700>)
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	18d3      	adds	r3, r2, r3
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	4b38      	ldr	r3, [pc, #224]	@ (800d0e0 <temper+0x700>)
 800cffe:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d000:	187b      	adds	r3, r7, r1
 800d002:	781a      	ldrb	r2, [r3, #0]
 800d004:	187b      	adds	r3, r7, r1
 800d006:	3201      	adds	r2, #1
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	230d      	movs	r3, #13
 800d00c:	18fb      	adds	r3, r7, r3
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b07      	cmp	r3, #7
 800d012:	d9e9      	bls.n	800cfe8 <temper+0x608>
	}
	resul = resul / 8;
 800d014:	4b32      	ldr	r3, [pc, #200]	@ (800d0e0 <temper+0x700>)
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	08db      	lsrs	r3, r3, #3
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	4b30      	ldr	r3, [pc, #192]	@ (800d0e0 <temper+0x700>)
 800d01e:	801a      	strh	r2, [r3, #0]
	linealiza();
 800d020:	f000 fae8 	bl	800d5f4 <linealiza>
	X = tempo;
 800d024:	4b30      	ldr	r3, [pc, #192]	@ (800d0e8 <temper+0x708>)
 800d026:	881a      	ldrh	r2, [r3, #0]
 800d028:	4b30      	ldr	r3, [pc, #192]	@ (800d0ec <temper+0x70c>)
 800d02a:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800d02c:	4b2f      	ldr	r3, [pc, #188]	@ (800d0ec <temper+0x70c>)
 800d02e:	881a      	ldrh	r2, [r3, #0]
 800d030:	4b30      	ldr	r3, [pc, #192]	@ (800d0f4 <temper+0x714>)
 800d032:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800d034:	4b2a      	ldr	r3, [pc, #168]	@ (800d0e0 <temper+0x700>)
 800d036:	2200      	movs	r2, #0
 800d038:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d03a:	230c      	movs	r3, #12
 800d03c:	18fb      	adds	r3, r7, r3
 800d03e:	2200      	movs	r2, #0
 800d040:	701a      	strb	r2, [r3, #0]
 800d042:	e010      	b.n	800d066 <temper+0x686>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800d044:	210c      	movs	r1, #12
 800d046:	187b      	adds	r3, r7, r1
 800d048:	781a      	ldrb	r2, [r3, #0]
 800d04a:	4b24      	ldr	r3, [pc, #144]	@ (800d0dc <temper+0x6fc>)
 800d04c:	0052      	lsls	r2, r2, #1
 800d04e:	5ad2      	ldrh	r2, [r2, r3]
 800d050:	4b23      	ldr	r3, [pc, #140]	@ (800d0e0 <temper+0x700>)
 800d052:	881b      	ldrh	r3, [r3, #0]
 800d054:	18d3      	adds	r3, r2, r3
 800d056:	b29a      	uxth	r2, r3
 800d058:	4b21      	ldr	r3, [pc, #132]	@ (800d0e0 <temper+0x700>)
 800d05a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d05c:	187b      	adds	r3, r7, r1
 800d05e:	781a      	ldrb	r2, [r3, #0]
 800d060:	187b      	adds	r3, r7, r1
 800d062:	3201      	adds	r2, #1
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	230c      	movs	r3, #12
 800d068:	18fb      	adds	r3, r7, r3
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b07      	cmp	r3, #7
 800d06e:	d9e9      	bls.n	800d044 <temper+0x664>
	}
	resul = resul / 8;
 800d070:	4b1b      	ldr	r3, [pc, #108]	@ (800d0e0 <temper+0x700>)
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	08db      	lsrs	r3, r3, #3
 800d076:	b29a      	uxth	r2, r3
 800d078:	4b19      	ldr	r3, [pc, #100]	@ (800d0e0 <temper+0x700>)
 800d07a:	801a      	strh	r2, [r3, #0]
	linealiza();
 800d07c:	f000 faba 	bl	800d5f4 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800d080:	4b19      	ldr	r3, [pc, #100]	@ (800d0e8 <temper+0x708>)
 800d082:	881b      	ldrh	r3, [r3, #0]
 800d084:	b2da      	uxtb	r2, r3
 800d086:	4b1c      	ldr	r3, [pc, #112]	@ (800d0f8 <temper+0x718>)
 800d088:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800d08a:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <temper+0x708>)
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	b29b      	uxth	r3, r3
 800d092:	b2da      	uxtb	r2, r3
 800d094:	4b19      	ldr	r3, [pc, #100]	@ (800d0fc <temper+0x71c>)
 800d096:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800d098:	4b11      	ldr	r3, [pc, #68]	@ (800d0e0 <temper+0x700>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d09e:	230b      	movs	r3, #11
 800d0a0:	18fb      	adds	r3, r7, r3
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
 800d0a6:	e03c      	b.n	800d122 <temper+0x742>
 800d0a8:	20000c1c 	.word	0x20000c1c
 800d0ac:	20000bbc 	.word	0x20000bbc
 800d0b0:	2000121c 	.word	0x2000121c
 800d0b4:	40012400 	.word	0x40012400
 800d0b8:	2000124e 	.word	0x2000124e
 800d0bc:	20001250 	.word	0x20001250
 800d0c0:	000003b5 	.word	0x000003b5
 800d0c4:	20000be4 	.word	0x20000be4
 800d0c8:	20000bf4 	.word	0x20000bf4
 800d0cc:	20000c20 	.word	0x20000c20
 800d0d0:	20000c23 	.word	0x20000c23
 800d0d4:	2000122c 	.word	0x2000122c
 800d0d8:	20000c21 	.word	0x20000c21
 800d0dc:	2000123c 	.word	0x2000123c
 800d0e0:	20001254 	.word	0x20001254
 800d0e4:	2000120c 	.word	0x2000120c
 800d0e8:	20001256 	.word	0x20001256
 800d0ec:	20001252 	.word	0x20001252
 800d0f0:	20001188 	.word	0x20001188
 800d0f4:	20000cb0 	.word	0x20000cb0
 800d0f8:	20000c0f 	.word	0x20000c0f
 800d0fc:	20000c0e 	.word	0x20000c0e
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800d100:	210b      	movs	r1, #11
 800d102:	187b      	adds	r3, r7, r1
 800d104:	781a      	ldrb	r2, [r3, #0]
 800d106:	4bb4      	ldr	r3, [pc, #720]	@ (800d3d8 <temper+0x9f8>)
 800d108:	0052      	lsls	r2, r2, #1
 800d10a:	5ad2      	ldrh	r2, [r2, r3]
 800d10c:	4bb3      	ldr	r3, [pc, #716]	@ (800d3dc <temper+0x9fc>)
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	18d3      	adds	r3, r2, r3
 800d112:	b29a      	uxth	r2, r3
 800d114:	4bb1      	ldr	r3, [pc, #708]	@ (800d3dc <temper+0x9fc>)
 800d116:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d118:	187b      	adds	r3, r7, r1
 800d11a:	781a      	ldrb	r2, [r3, #0]
 800d11c:	187b      	adds	r3, r7, r1
 800d11e:	3201      	adds	r2, #1
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	230b      	movs	r3, #11
 800d124:	18fb      	adds	r3, r7, r3
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	2b07      	cmp	r3, #7
 800d12a:	d9e9      	bls.n	800d100 <temper+0x720>
	}
	resul = resul / 8;
 800d12c:	4bab      	ldr	r3, [pc, #684]	@ (800d3dc <temper+0x9fc>)
 800d12e:	881b      	ldrh	r3, [r3, #0]
 800d130:	08db      	lsrs	r3, r3, #3
 800d132:	b29a      	uxth	r2, r3
 800d134:	4ba9      	ldr	r3, [pc, #676]	@ (800d3dc <temper+0x9fc>)
 800d136:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800d138:	4ba9      	ldr	r3, [pc, #676]	@ (800d3e0 <temper+0xa00>)
 800d13a:	881a      	ldrh	r2, [r3, #0]
 800d13c:	4ba9      	ldr	r3, [pc, #676]	@ (800d3e4 <temper+0xa04>)
 800d13e:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800d140:	4ba8      	ldr	r3, [pc, #672]	@ (800d3e4 <temper+0xa04>)
 800d142:	881a      	ldrh	r2, [r3, #0]
 800d144:	4ba5      	ldr	r3, [pc, #660]	@ (800d3dc <temper+0x9fc>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	4ba5      	ldr	r3, [pc, #660]	@ (800d3e4 <temper+0xa04>)
 800d14e:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800d150:	4ba4      	ldr	r3, [pc, #656]	@ (800d3e4 <temper+0xa04>)
 800d152:	881b      	ldrh	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d100      	bne.n	800d15a <temper+0x77a>
 800d158:	e07d      	b.n	800d256 <temper+0x876>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800d15a:	4ba2      	ldr	r3, [pc, #648]	@ (800d3e4 <temper+0xa04>)
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	b21b      	sxth	r3, r3
 800d160:	2b00      	cmp	r3, #0
 800d162:	da18      	bge.n	800d196 <temper+0x7b6>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800d164:	4b9f      	ldr	r3, [pc, #636]	@ (800d3e4 <temper+0xa04>)
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	3301      	adds	r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	4b9d      	ldr	r3, [pc, #628]	@ (800d3e4 <temper+0xa04>)
 800d16e:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800d170:	4b9c      	ldr	r3, [pc, #624]	@ (800d3e4 <temper+0xa04>)
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d028      	beq.n	800d1ca <temper+0x7ea>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800d178:	4b98      	ldr	r3, [pc, #608]	@ (800d3dc <temper+0x9fc>)
 800d17a:	881a      	ldrh	r2, [r3, #0]
 800d17c:	4b99      	ldr	r3, [pc, #612]	@ (800d3e4 <temper+0xa04>)
 800d17e:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800d180:	4b98      	ldr	r3, [pc, #608]	@ (800d3e4 <temper+0xa04>)
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	3b01      	subs	r3, #1
 800d186:	b29a      	uxth	r2, r3
 800d188:	4b96      	ldr	r3, [pc, #600]	@ (800d3e4 <temper+0xa04>)
 800d18a:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800d18c:	4b95      	ldr	r3, [pc, #596]	@ (800d3e4 <temper+0xa04>)
 800d18e:	881a      	ldrh	r2, [r3, #0]
 800d190:	4b92      	ldr	r3, [pc, #584]	@ (800d3dc <temper+0x9fc>)
 800d192:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800d194:	e048      	b.n	800d228 <temper+0x848>
		goto tempe25b;            //La diferencia de promedios es positiva?
 800d196:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800d198:	4b92      	ldr	r3, [pc, #584]	@ (800d3e4 <temper+0xa04>)
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	4b90      	ldr	r3, [pc, #576]	@ (800d3e4 <temper+0xa04>)
 800d1a2:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d1a4:	4b8f      	ldr	r3, [pc, #572]	@ (800d3e4 <temper+0xa04>)
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d010      	beq.n	800d1ce <temper+0x7ee>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800d1ac:	4b8b      	ldr	r3, [pc, #556]	@ (800d3dc <temper+0x9fc>)
 800d1ae:	881a      	ldrh	r2, [r3, #0]
 800d1b0:	4b8c      	ldr	r3, [pc, #560]	@ (800d3e4 <temper+0xa04>)
 800d1b2:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800d1b4:	4b8b      	ldr	r3, [pc, #556]	@ (800d3e4 <temper+0xa04>)
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	4b89      	ldr	r3, [pc, #548]	@ (800d3e4 <temper+0xa04>)
 800d1be:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800d1c0:	4b88      	ldr	r3, [pc, #544]	@ (800d3e4 <temper+0xa04>)
 800d1c2:	881a      	ldrh	r2, [r3, #0]
 800d1c4:	4b85      	ldr	r3, [pc, #532]	@ (800d3dc <temper+0x9fc>)
 800d1c6:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800d1c8:	e02e      	b.n	800d228 <temper+0x848>
		goto vesiestab;  		  // Si, revisa estabilidad
 800d1ca:	46c0      	nop			@ (mov r8, r8)
 800d1cc:	e000      	b.n	800d1d0 <temper+0x7f0>
			goto vesiestab;       // Si, revisa estabilidad
 800d1ce:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800d1d0:	4b85      	ldr	r3, [pc, #532]	@ (800d3e8 <temper+0xa08>)
 800d1d2:	881a      	ldrh	r2, [r3, #0]
 800d1d4:	4b83      	ldr	r3, [pc, #524]	@ (800d3e4 <temper+0xa04>)
 800d1d6:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800d1d8:	4b82      	ldr	r3, [pc, #520]	@ (800d3e4 <temper+0xa04>)
 800d1da:	881a      	ldrh	r2, [r3, #0]
 800d1dc:	4b7f      	ldr	r3, [pc, #508]	@ (800d3dc <temper+0x9fc>)
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	4b7f      	ldr	r3, [pc, #508]	@ (800d3e4 <temper+0xa04>)
 800d1e6:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d1e8:	4b7e      	ldr	r3, [pc, #504]	@ (800d3e4 <temper+0xa04>)
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <temper+0x818>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800d1f0:	4b7e      	ldr	r3, [pc, #504]	@ (800d3ec <temper+0xa0c>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800d1f6:	e006      	b.n	800d206 <temper+0x826>
			goto estable;  // El nuevo dato es igual a último?
 800d1f8:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800d1fa:	4b7c      	ldr	r3, [pc, #496]	@ (800d3ec <temper+0xa0c>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	3301      	adds	r3, #1
 800d200:	b2da      	uxtb	r2, r3
 800d202:	4b7a      	ldr	r3, [pc, #488]	@ (800d3ec <temper+0xa0c>)
 800d204:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800d206:	4b75      	ldr	r3, [pc, #468]	@ (800d3dc <temper+0x9fc>)
 800d208:	881a      	ldrh	r2, [r3, #0]
 800d20a:	4b76      	ldr	r3, [pc, #472]	@ (800d3e4 <temper+0xa04>)
 800d20c:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800d20e:	4b75      	ldr	r3, [pc, #468]	@ (800d3e4 <temper+0xa04>)
 800d210:	881a      	ldrh	r2, [r3, #0]
 800d212:	4b75      	ldr	r3, [pc, #468]	@ (800d3e8 <temper+0xa08>)
 800d214:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800d216:	4b75      	ldr	r3, [pc, #468]	@ (800d3ec <temper+0xa0c>)
 800d218:	781a      	ldrb	r2, [r3, #0]
 800d21a:	4b75      	ldr	r3, [pc, #468]	@ (800d3f0 <temper+0xa10>)
 800d21c:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800d21e:	4b74      	ldr	r3, [pc, #464]	@ (800d3f0 <temper+0xa10>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b0e      	cmp	r3, #14
 800d224:	d920      	bls.n	800d268 <temper+0x888>
			goto tempe29;

tempe26:
 800d226:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800d228:	4b6c      	ldr	r3, [pc, #432]	@ (800d3dc <temper+0x9fc>)
 800d22a:	881a      	ldrh	r2, [r3, #0]
 800d22c:	4b71      	ldr	r3, [pc, #452]	@ (800d3f4 <temper+0xa14>)
 800d22e:	801a      	strh	r2, [r3, #0]
		promant = X;
 800d230:	4b70      	ldr	r3, [pc, #448]	@ (800d3f4 <temper+0xa14>)
 800d232:	881a      	ldrh	r2, [r3, #0]
 800d234:	4b6a      	ldr	r3, [pc, #424]	@ (800d3e0 <temper+0xa00>)
 800d236:	801a      	strh	r2, [r3, #0]
		linealiza();
 800d238:	f000 f9dc 	bl	800d5f4 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800d23c:	4b6e      	ldr	r3, [pc, #440]	@ (800d3f8 <temper+0xa18>)
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b2da      	uxtb	r2, r3
 800d242:	4b6e      	ldr	r3, [pc, #440]	@ (800d3fc <temper+0xa1c>)
 800d244:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800d246:	4b6c      	ldr	r3, [pc, #432]	@ (800d3f8 <temper+0xa18>)
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	0a1b      	lsrs	r3, r3, #8
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	4b6b      	ldr	r3, [pc, #428]	@ (800d400 <temper+0xa20>)
 800d252:	701a      	strb	r2, [r3, #0]
 800d254:	e000      	b.n	800d258 <temper+0x878>
		goto tempe27;                //nota1: checar comparaciones
 800d256:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800d258:	4b61      	ldr	r3, [pc, #388]	@ (800d3e0 <temper+0xa00>)
 800d25a:	881a      	ldrh	r2, [r3, #0]
 800d25c:	4b62      	ldr	r3, [pc, #392]	@ (800d3e8 <temper+0xa08>)
 800d25e:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800d260:	4b62      	ldr	r3, [pc, #392]	@ (800d3ec <temper+0xa0c>)
 800d262:	2200      	movs	r2, #0
 800d264:	701a      	strb	r2, [r3, #0]
 800d266:	e000      	b.n	800d26a <temper+0x88a>
			goto tempe29;
 800d268:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800d26a:	f7f9 f90d 	bl	8006488 <tdev_to_Word>
 800d26e:	0003      	movs	r3, r0
 800d270:	b29a      	uxth	r2, r3
 800d272:	4b60      	ldr	r3, [pc, #384]	@ (800d3f4 <temper+0xa14>)
 800d274:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d276:	4b5f      	ldr	r3, [pc, #380]	@ (800d3f4 <temper+0xa14>)
 800d278:	881a      	ldrh	r2, [r3, #0]
 800d27a:	4b62      	ldr	r3, [pc, #392]	@ (800d404 <temper+0xa24>)
 800d27c:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800d27e:	4b62      	ldr	r3, [pc, #392]	@ (800d408 <temper+0xa28>)
 800d280:	2259      	movs	r2, #89	@ 0x59
 800d282:	5c9a      	ldrb	r2, [r3, r2]
 800d284:	4b5a      	ldr	r3, [pc, #360]	@ (800d3f0 <temper+0xa10>)
 800d286:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800d288:	4b59      	ldr	r3, [pc, #356]	@ (800d3f0 <temper+0xa10>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d91d      	bls.n	800d2cc <temper+0x8ec>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800d290:	4b5d      	ldr	r3, [pc, #372]	@ (800d408 <temper+0xa28>)
 800d292:	2253      	movs	r2, #83	@ 0x53
 800d294:	5c9b      	ldrb	r3, [r3, r2]
 800d296:	b25b      	sxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	da19      	bge.n	800d2d0 <temper+0x8f0>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800d29c:	4b5b      	ldr	r3, [pc, #364]	@ (800d40c <temper+0xa2c>)
 800d29e:	791b      	ldrb	r3, [r3, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d107      	bne.n	800d2b4 <temper+0x8d4>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800d2a4:	4b59      	ldr	r3, [pc, #356]	@ (800d40c <temper+0xa2c>)
 800d2a6:	795b      	ldrb	r3, [r3, #5]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	4053      	eors	r3, r2
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d102      	bne.n	800d2b8 <temper+0x8d8>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800d2b2:	e000      	b.n	800d2b6 <temper+0x8d6>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800d2b4:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800d2b6:	e00c      	b.n	800d2d2 <temper+0x8f2>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800d2b8:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800d2ba:	4b55      	ldr	r3, [pc, #340]	@ (800d410 <temper+0xa30>)
 800d2bc:	881a      	ldrh	r2, [r3, #0]
 800d2be:	4b4d      	ldr	r3, [pc, #308]	@ (800d3f4 <temper+0xa14>)
 800d2c0:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d2c2:	4b4c      	ldr	r3, [pc, #304]	@ (800d3f4 <temper+0xa14>)
 800d2c4:	881a      	ldrh	r2, [r3, #0]
 800d2c6:	4b4f      	ldr	r3, [pc, #316]	@ (800d404 <temper+0xa24>)
 800d2c8:	801a      	strh	r2, [r3, #0]
 800d2ca:	e002      	b.n	800d2d2 <temper+0x8f2>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800d2cc:	46c0      	nop			@ (mov r8, r8)
 800d2ce:	e000      	b.n	800d2d2 <temper+0x8f2>
			goto tempe26a;
 800d2d0:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800d2d2:	4b50      	ldr	r3, [pc, #320]	@ (800d414 <temper+0xa34>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d014      	beq.n	800d304 <temper+0x924>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800d2da:	4b4e      	ldr	r3, [pc, #312]	@ (800d414 <temper+0xa34>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b08      	cmp	r3, #8
 800d2e0:	d800      	bhi.n	800d2e4 <temper+0x904>
 800d2e2:	e073      	b.n	800d3cc <temper+0x9ec>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800d2e4:	4b43      	ldr	r3, [pc, #268]	@ (800d3f4 <temper+0xa14>)
 800d2e6:	4a4c      	ldr	r2, [pc, #304]	@ (800d418 <temper+0xa38>)
 800d2e8:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800d2ea:	4b42      	ldr	r3, [pc, #264]	@ (800d3f4 <temper+0xa14>)
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	0a1b      	lsrs	r3, r3, #8
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	4b42      	ldr	r3, [pc, #264]	@ (800d400 <temper+0xa20>)
 800d2f6:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800d2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800d3f4 <temper+0xa14>)
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4b3f      	ldr	r3, [pc, #252]	@ (800d3fc <temper+0xa1c>)
 800d300:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800d302:	e0cc      	b.n	800d49e <temper+0xabe>
			goto tempe30;              // Si
 800d304:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800d306:	4b45      	ldr	r3, [pc, #276]	@ (800d41c <temper+0xa3c>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	2201      	movs	r2, #1
 800d30c:	4053      	eors	r3, r2
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d05d      	beq.n	800d3d0 <temper+0x9f0>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800d314:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800d316:	4b42      	ldr	r3, [pc, #264]	@ (800d420 <temper+0xa40>)
 800d318:	881a      	ldrh	r2, [r3, #0]
 800d31a:	4b32      	ldr	r3, [pc, #200]	@ (800d3e4 <temper+0xa04>)
 800d31c:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800d31e:	4b31      	ldr	r3, [pc, #196]	@ (800d3e4 <temper+0xa04>)
 800d320:	881a      	ldrh	r2, [r3, #0]
 800d322:	4b38      	ldr	r3, [pc, #224]	@ (800d404 <temper+0xa24>)
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	b29a      	uxth	r2, r3
 800d32a:	4b2e      	ldr	r3, [pc, #184]	@ (800d3e4 <temper+0xa04>)
 800d32c:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d32e:	4b2d      	ldr	r3, [pc, #180]	@ (800d3e4 <temper+0xa04>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d100      	bne.n	800d338 <temper+0x958>
 800d336:	e0ad      	b.n	800d494 <temper+0xab4>
			goto tempe40;
		else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800d338:	4b2a      	ldr	r3, [pc, #168]	@ (800d3e4 <temper+0xa04>)
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	b21b      	sxth	r3, r3
 800d33e:	2b00      	cmp	r3, #0
 800d340:	da48      	bge.n	800d3d4 <temper+0x9f4>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800d342:	4b31      	ldr	r3, [pc, #196]	@ (800d408 <temper+0xa28>)
 800d344:	2254      	movs	r2, #84	@ 0x54
 800d346:	5c9a      	ldrb	r2, [r3, r2]
 800d348:	4b29      	ldr	r3, [pc, #164]	@ (800d3f0 <temper+0xa10>)
 800d34a:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800d34c:	4b28      	ldr	r3, [pc, #160]	@ (800d3f0 <temper+0xa10>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d06b      	beq.n	800d42c <temper+0xa4c>
			goto tempe39;
		A = A << 1;
 800d354:	4b26      	ldr	r3, [pc, #152]	@ (800d3f0 <temper+0xa10>)
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	18db      	adds	r3, r3, r3
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	4b24      	ldr	r3, [pc, #144]	@ (800d3f0 <temper+0xa10>)
 800d35e:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800d360:	4b30      	ldr	r3, [pc, #192]	@ (800d424 <temper+0xa44>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	3301      	adds	r3, #1
 800d366:	b2da      	uxtb	r2, r3
 800d368:	4b2e      	ldr	r3, [pc, #184]	@ (800d424 <temper+0xa44>)
 800d36a:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800d36c:	4b20      	ldr	r3, [pc, #128]	@ (800d3f0 <temper+0xa10>)
 800d36e:	781a      	ldrb	r2, [r3, #0]
 800d370:	4b2c      	ldr	r3, [pc, #176]	@ (800d424 <temper+0xa44>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d900      	bls.n	800d37a <temper+0x99a>
 800d378:	e095      	b.n	800d4a6 <temper+0xac6>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800d37a:	4b1a      	ldr	r3, [pc, #104]	@ (800d3e4 <temper+0xa04>)
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	425b      	negs	r3, r3
 800d380:	b29a      	uxth	r2, r3
 800d382:	4b18      	ldr	r3, [pc, #96]	@ (800d3e4 <temper+0xa04>)
 800d384:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800d386:	4b17      	ldr	r3, [pc, #92]	@ (800d3e4 <temper+0xa04>)
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	2b0a      	cmp	r3, #10
 800d38c:	d90e      	bls.n	800d3ac <temper+0x9cc>
			goto tempe37b;

		X = tDisplay_w;
 800d38e:	4b1d      	ldr	r3, [pc, #116]	@ (800d404 <temper+0xa24>)
 800d390:	881a      	ldrh	r2, [r3, #0]
 800d392:	4b18      	ldr	r3, [pc, #96]	@ (800d3f4 <temper+0xa14>)
 800d394:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800d396:	4b17      	ldr	r3, [pc, #92]	@ (800d3f4 <temper+0xa14>)
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	3b0a      	subs	r3, #10
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	4b15      	ldr	r3, [pc, #84]	@ (800d3f4 <temper+0xa14>)
 800d3a0:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d3a2:	4b14      	ldr	r3, [pc, #80]	@ (800d3f4 <temper+0xa14>)
 800d3a4:	881a      	ldrh	r2, [r3, #0]
 800d3a6:	4b20      	ldr	r3, [pc, #128]	@ (800d428 <temper+0xa48>)
 800d3a8:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d3aa:	e04b      	b.n	800d444 <temper+0xa64>
			goto tempe37b;
 800d3ac:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800d3ae:	4b1c      	ldr	r3, [pc, #112]	@ (800d420 <temper+0xa40>)
 800d3b0:	881a      	ldrh	r2, [r3, #0]
 800d3b2:	4b10      	ldr	r3, [pc, #64]	@ (800d3f4 <temper+0xa14>)
 800d3b4:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800d3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d3f4 <temper+0xa14>)
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f4 <temper+0xa14>)
 800d3c0:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f4 <temper+0xa14>)
 800d3c4:	881a      	ldrh	r2, [r3, #0]
 800d3c6:	4b18      	ldr	r3, [pc, #96]	@ (800d428 <temper+0xa48>)
 800d3c8:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d3ca:	e03b      	b.n	800d444 <temper+0xa64>
			goto tempe39;              // Si, cargalo al display
 800d3cc:	46c0      	nop			@ (mov r8, r8)
 800d3ce:	e02e      	b.n	800d42e <temper+0xa4e>
		goto tempe39;
 800d3d0:	46c0      	nop			@ (mov r8, r8)
 800d3d2:	e02c      	b.n	800d42e <temper+0xa4e>
			goto tempe39;      // La diferencia es positiva?
 800d3d4:	46c0      	nop			@ (mov r8, r8)
 800d3d6:	e02a      	b.n	800d42e <temper+0xa4e>
 800d3d8:	2000122c 	.word	0x2000122c
 800d3dc:	20001254 	.word	0x20001254
 800d3e0:	2000125a 	.word	0x2000125a
 800d3e4:	20001250 	.word	0x20001250
 800d3e8:	2000125c 	.word	0x2000125c
 800d3ec:	20000c22 	.word	0x20000c22
 800d3f0:	2000124e 	.word	0x2000124e
 800d3f4:	20001252 	.word	0x20001252
 800d3f8:	20001256 	.word	0x20001256
 800d3fc:	20000c0d 	.word	0x20000c0d
 800d400:	20000c0c 	.word	0x20000c0c
 800d404:	2000118a 	.word	0x2000118a
 800d408:	200000b8 	.word	0x200000b8
 800d40c:	20000bdc 	.word	0x20000bdc
 800d410:	20000cb0 	.word	0x20000cb0
 800d414:	20000c20 	.word	0x20000c20
 800d418:	fffffe34 	.word	0xfffffe34
 800d41c:	20000bd4 	.word	0x20000bd4
 800d420:	20000c10 	.word	0x20000c10
 800d424:	20000c1f 	.word	0x20000c1f
 800d428:	20001258 	.word	0x20001258
			goto tempe39;
 800d42c:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800d42e:	4b5d      	ldr	r3, [pc, #372]	@ (800d5a4 <temper+0xbc4>)
 800d430:	881a      	ldrh	r2, [r3, #0]
 800d432:	4b5d      	ldr	r3, [pc, #372]	@ (800d5a8 <temper+0xbc8>)
 800d434:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d436:	4b5c      	ldr	r3, [pc, #368]	@ (800d5a8 <temper+0xbc8>)
 800d438:	881a      	ldrh	r2, [r3, #0]
 800d43a:	4b5c      	ldr	r3, [pc, #368]	@ (800d5ac <temper+0xbcc>)
 800d43c:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800d43e:	4b5c      	ldr	r3, [pc, #368]	@ (800d5b0 <temper+0xbd0>)
 800d440:	2200      	movs	r2, #0
 800d442:	701a      	strb	r2, [r3, #0]
tempe39a:
//		tnz			cntHoldP;		/ Ya terminó el tiempo de bloqueo por puerta?
//		jrne		tempe40;  / no, congela display
//		;sí, pregunta por tiemmpo de bloqueo por deshielo

		if(cntHoldP)
 800d444:	4b5b      	ldr	r3, [pc, #364]	@ (800d5b4 <temper+0xbd4>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d125      	bne.n	800d498 <temper+0xab8>
			goto tempe40;

		A = cnthold;
 800d44c:	4b58      	ldr	r3, [pc, #352]	@ (800d5b0 <temper+0xbd0>)
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	4b59      	ldr	r3, [pc, #356]	@ (800d5b8 <temper+0xbd8>)
 800d452:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800d454:	4b58      	ldr	r3, [pc, #352]	@ (800d5b8 <temper+0xbd8>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d011      	beq.n	800d480 <temper+0xaa0>
			goto tempe39b;            // Si, carga el dato a tdevdpy

		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800d45c:	4b57      	ldr	r3, [pc, #348]	@ (800d5bc <temper+0xbdc>)
 800d45e:	881a      	ldrh	r2, [r3, #0]
 800d460:	4b57      	ldr	r3, [pc, #348]	@ (800d5c0 <temper+0xbe0>)
 800d462:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800d464:	4b56      	ldr	r3, [pc, #344]	@ (800d5c0 <temper+0xbe0>)
 800d466:	881a      	ldrh	r2, [r3, #0]
 800d468:	4b50      	ldr	r3, [pc, #320]	@ (800d5ac <temper+0xbcc>)
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	b29a      	uxth	r2, r3
 800d470:	4b53      	ldr	r3, [pc, #332]	@ (800d5c0 <temper+0xbe0>)
 800d472:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800d474:	4b52      	ldr	r3, [pc, #328]	@ (800d5c0 <temper+0xbe0>)
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	b21b      	sxth	r3, r3
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	db0e      	blt.n	800d49c <temper+0xabc>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800d47e:	e000      	b.n	800d482 <temper+0xaa2>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800d480:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800d482:	4b4a      	ldr	r3, [pc, #296]	@ (800d5ac <temper+0xbcc>)
 800d484:	881a      	ldrh	r2, [r3, #0]
 800d486:	4b48      	ldr	r3, [pc, #288]	@ (800d5a8 <temper+0xbc8>)
 800d488:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800d48a:	4b47      	ldr	r3, [pc, #284]	@ (800d5a8 <temper+0xbc8>)
 800d48c:	881a      	ldrh	r2, [r3, #0]
 800d48e:	4b4d      	ldr	r3, [pc, #308]	@ (800d5c4 <temper+0xbe4>)
 800d490:	801a      	strh	r2, [r3, #0]
 800d492:	e004      	b.n	800d49e <temper+0xabe>
			goto tempe40;
 800d494:	46c0      	nop			@ (mov r8, r8)
 800d496:	e002      	b.n	800d49e <temper+0xabe>
			goto tempe40;
 800d498:	46c0      	nop			@ (mov r8, r8)
 800d49a:	e000      	b.n	800d49e <temper+0xabe>
			goto tempe40;             // Si, congela el display en limsup
 800d49c:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800d49e:	4b4a      	ldr	r3, [pc, #296]	@ (800d5c8 <temper+0xbe8>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	e000      	b.n	800d4a8 <temper+0xac8>
			goto tempe50;
 800d4a6:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800d4a8:	4b48      	ldr	r3, [pc, #288]	@ (800d5cc <temper+0xbec>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800d4ae:	4b48      	ldr	r3, [pc, #288]	@ (800d5d0 <temper+0xbf0>)
 800d4b0:	78db      	ldrb	r3, [r3, #3]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	4053      	eors	r3, r2
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10f      	bne.n	800d4dc <temper+0xafc>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800d4bc:	4b3a      	ldr	r3, [pc, #232]	@ (800d5a8 <temper+0xbc8>)
 800d4be:	4a45      	ldr	r2, [pc, #276]	@ (800d5d4 <temper+0xbf4>)
 800d4c0:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800d4c2:	4b39      	ldr	r3, [pc, #228]	@ (800d5a8 <temper+0xbc8>)
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	4b43      	ldr	r3, [pc, #268]	@ (800d5d8 <temper+0xbf8>)
 800d4ca:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800d4cc:	4b36      	ldr	r3, [pc, #216]	@ (800d5a8 <temper+0xbc8>)
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	0a1b      	lsrs	r3, r3, #8
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	4b41      	ldr	r3, [pc, #260]	@ (800d5dc <temper+0xbfc>)
 800d4d8:	701a      	strb	r2, [r3, #0]
 800d4da:	e000      	b.n	800d4de <temper+0xafe>
			goto tempe52;
 800d4dc:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800d4de:	4b40      	ldr	r3, [pc, #256]	@ (800d5e0 <temper+0xc00>)
 800d4e0:	795b      	ldrb	r3, [r3, #5]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	4053      	eors	r3, r2
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d107      	bne.n	800d4fc <temper+0xb1c>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800d4ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d5a8 <temper+0xbc8>)
 800d4ee:	4a39      	ldr	r2, [pc, #228]	@ (800d5d4 <temper+0xbf4>)
 800d4f0:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800d4f2:	4b2d      	ldr	r3, [pc, #180]	@ (800d5a8 <temper+0xbc8>)
 800d4f4:	881a      	ldrh	r2, [r3, #0]
 800d4f6:	4b3b      	ldr	r3, [pc, #236]	@ (800d5e4 <temper+0xc04>)
 800d4f8:	801a      	strh	r2, [r3, #0]
 800d4fa:	e000      	b.n	800d4fe <temper+0xb1e>
			goto tempe53;
 800d4fc:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800d4fe:	4b38      	ldr	r3, [pc, #224]	@ (800d5e0 <temper+0xc00>)
 800d500:	79db      	ldrb	r3, [r3, #7]
 800d502:	2201      	movs	r2, #1
 800d504:	4053      	eors	r3, r2
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10b      	bne.n	800d524 <temper+0xb44>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800d50c:	4b26      	ldr	r3, [pc, #152]	@ (800d5a8 <temper+0xbc8>)
 800d50e:	4a31      	ldr	r2, [pc, #196]	@ (800d5d4 <temper+0xbf4>)
 800d510:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800d512:	4b25      	ldr	r3, [pc, #148]	@ (800d5a8 <temper+0xbc8>)
 800d514:	881a      	ldrh	r2, [r3, #0]
 800d516:	4b34      	ldr	r3, [pc, #208]	@ (800d5e8 <temper+0xc08>)
 800d518:	801a      	strh	r2, [r3, #0]
 800d51a:	e004      	b.n	800d526 <temper+0xb46>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800d51c:	46c0      	nop			@ (mov r8, r8)
 800d51e:	e002      	b.n	800d526 <temper+0xb46>
			goto fintemp;
 800d520:	46c0      	nop			@ (mov r8, r8)
 800d522:	e000      	b.n	800d526 <temper+0xb46>
			goto fintemp;
 800d524:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800d526:	4b31      	ldr	r3, [pc, #196]	@ (800d5ec <temper+0xc0c>)
 800d528:	781a      	ldrb	r2, [r3, #0]
 800d52a:	4b23      	ldr	r3, [pc, #140]	@ (800d5b8 <temper+0xbd8>)
 800d52c:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800d52e:	4b22      	ldr	r3, [pc, #136]	@ (800d5b8 <temper+0xbd8>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d02c      	beq.n	800d590 <temper+0xbb0>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800d536:	4b2e      	ldr	r3, [pc, #184]	@ (800d5f0 <temper+0xc10>)
 800d538:	2259      	movs	r2, #89	@ 0x59
 800d53a:	5c9a      	ldrb	r2, [r3, r2]
 800d53c:	4b1e      	ldr	r3, [pc, #120]	@ (800d5b8 <temper+0xbd8>)
 800d53e:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800d540:	4b1d      	ldr	r3, [pc, #116]	@ (800d5b8 <temper+0xbd8>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b04      	cmp	r3, #4
 800d546:	d025      	beq.n	800d594 <temper+0xbb4>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800d548:	4b1b      	ldr	r3, [pc, #108]	@ (800d5b8 <temper+0xbd8>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b03      	cmp	r3, #3
 800d54e:	d017      	beq.n	800d580 <temper+0xba0>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800d550:	4b19      	ldr	r3, [pc, #100]	@ (800d5b8 <temper+0xbd8>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2b02      	cmp	r3, #2
 800d556:	d00b      	beq.n	800d570 <temper+0xb90>
			goto clrRetFail;
		if (A != 1)
 800d558:	4b17      	ldr	r3, [pc, #92]	@ (800d5b8 <temper+0xbd8>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d11b      	bne.n	800d598 <temper+0xbb8>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800d560:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800d562:	491b      	ldr	r1, [pc, #108]	@ (800d5d0 <temper+0xbf0>)
 800d564:	481a      	ldr	r0, [pc, #104]	@ (800d5d0 <temper+0xbf0>)
 800d566:	2303      	movs	r3, #3
 800d568:	2202      	movs	r2, #2
 800d56a:	f000 fa1c 	bl	800d9a6 <Bclear_Clear_trfst>
 800d56e:	e000      	b.n	800d572 <temper+0xb92>
			goto clrRetFail;
 800d570:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800d572:	491b      	ldr	r1, [pc, #108]	@ (800d5e0 <temper+0xc00>)
 800d574:	481a      	ldr	r0, [pc, #104]	@ (800d5e0 <temper+0xc00>)
 800d576:	2305      	movs	r3, #5
 800d578:	2204      	movs	r2, #4
 800d57a:	f000 fa14 	bl	800d9a6 <Bclear_Clear_trfst>
 800d57e:	e000      	b.n	800d582 <temper+0xba2>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800d580:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800d582:	4917      	ldr	r1, [pc, #92]	@ (800d5e0 <temper+0xc00>)
 800d584:	4812      	ldr	r0, [pc, #72]	@ (800d5d0 <temper+0xbf0>)
 800d586:	2307      	movs	r3, #7
 800d588:	2205      	movs	r2, #5
 800d58a:	f000 fa0c 	bl	800d9a6 <Bclear_Clear_trfst>
 800d58e:	e004      	b.n	800d59a <temper+0xbba>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800d590:	46c0      	nop			@ (mov r8, r8)
 800d592:	e002      	b.n	800d59a <temper+0xbba>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800d594:	46c0      	nop			@ (mov r8, r8)
 800d596:	e000      	b.n	800d59a <temper+0xbba>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800d598:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800d59a:	46c0      	nop			@ (mov r8, r8)




}
 800d59c:	46c0      	nop			@ (mov r8, r8)
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	b004      	add	sp, #16
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	2000118a 	.word	0x2000118a
 800d5a8:	20001252 	.word	0x20001252
 800d5ac:	20001258 	.word	0x20001258
 800d5b0:	20000c23 	.word	0x20000c23
 800d5b4:	20001198 	.word	0x20001198
 800d5b8:	2000124e 	.word	0x2000124e
 800d5bc:	20000c0a 	.word	0x20000c0a
 800d5c0:	20001250 	.word	0x20001250
 800d5c4:	20000c10 	.word	0x20000c10
 800d5c8:	20000c1f 	.word	0x20000c1f
 800d5cc:	20000c1c 	.word	0x20000c1c
 800d5d0:	20000be4 	.word	0x20000be4
 800d5d4:	fffffe34 	.word	0xfffffe34
 800d5d8:	20000c0f 	.word	0x20000c0f
 800d5dc:	20000c0e 	.word	0x20000c0e
 800d5e0:	20000bdc 	.word	0x20000bdc
 800d5e4:	20000cb0 	.word	0x20000cb0
 800d5e8:	20001188 	.word	0x20001188
 800d5ec:	20000bf4 	.word	0x20000bf4
 800d5f0:	200000b8 	.word	0x200000b8

0800d5f4 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
	tempo = 0;
 800d5f8:	4b57      	ldr	r3, [pc, #348]	@ (800d758 <linealiza+0x164>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800d5fe:	4b57      	ldr	r3, [pc, #348]	@ (800d75c <linealiza+0x168>)
 800d600:	881a      	ldrh	r2, [r3, #0]
 800d602:	4b57      	ldr	r3, [pc, #348]	@ (800d760 <linealiza+0x16c>)
 800d604:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800d606:	4b56      	ldr	r3, [pc, #344]	@ (800d760 <linealiza+0x16c>)
 800d608:	881a      	ldrh	r2, [r3, #0]
 800d60a:	4b56      	ldr	r3, [pc, #344]	@ (800d764 <linealiza+0x170>)
 800d60c:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800d60e:	4b55      	ldr	r3, [pc, #340]	@ (800d764 <linealiza+0x170>)
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	4a55      	ldr	r2, [pc, #340]	@ (800d768 <linealiza+0x174>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d80e      	bhi.n	800d636 <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800d618:	4b52      	ldr	r3, [pc, #328]	@ (800d764 <linealiza+0x170>)
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	4a53      	ldr	r2, [pc, #332]	@ (800d76c <linealiza+0x178>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d810      	bhi.n	800d644 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800d622:	4b50      	ldr	r3, [pc, #320]	@ (800d764 <linealiza+0x170>)
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	4a52      	ldr	r2, [pc, #328]	@ (800d770 <linealiza+0x17c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d812      	bhi.n	800d652 <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800d62c:	4b4d      	ldr	r3, [pc, #308]	@ (800d764 <linealiza+0x170>)
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	2bca      	cmp	r3, #202	@ 0xca
 800d632:	d91c      	bls.n	800d66e <linealiza+0x7a>
		goto lil_principal;
 800d634:	e015      	b.n	800d662 <linealiza+0x6e>
		goto wise_hot_3;
 800d636:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800d638:	4b4e      	ldr	r3, [pc, #312]	@ (800d774 <linealiza+0x180>)
 800d63a:	0019      	movs	r1, r3
 800d63c:	2053      	movs	r0, #83	@ 0x53
 800d63e:	f000 f94d 	bl	800d8dc <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800d642:	e01b      	b.n	800d67c <linealiza+0x88>
		goto wise_hot_2;
 800d644:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800d646:	4b4c      	ldr	r3, [pc, #304]	@ (800d778 <linealiza+0x184>)
 800d648:	0019      	movs	r1, r3
 800d64a:	2034      	movs	r0, #52	@ 0x34
 800d64c:	f000 f946 	bl	800d8dc <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800d650:	e014      	b.n	800d67c <linealiza+0x88>
		goto wise_hot_1;
 800d652:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800d654:	2393      	movs	r3, #147	@ 0x93
 800d656:	01db      	lsls	r3, r3, #7
 800d658:	0019      	movs	r1, r3
 800d65a:	201d      	movs	r0, #29
 800d65c:	f000 f93e 	bl	800d8dc <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800d660:	e00c      	b.n	800d67c <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800d662:	4b46      	ldr	r3, [pc, #280]	@ (800d77c <linealiza+0x188>)
 800d664:	0019      	movs	r1, r3
 800d666:	2013      	movs	r0, #19
 800d668:	f000 f938 	bl	800d8dc <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800d66c:	e006      	b.n	800d67c <linealiza+0x88>
		goto curva_fria;
 800d66e:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800d670:	23de      	movs	r3, #222	@ 0xde
 800d672:	019b      	lsls	r3, r3, #6
 800d674:	0019      	movs	r1, r3
 800d676:	201e      	movs	r0, #30
 800d678:	f000 f930 	bl	800d8dc <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800d67c:	4b36      	ldr	r3, [pc, #216]	@ (800d758 <linealiza+0x164>)
 800d67e:	881a      	ldrh	r2, [r3, #0]
 800d680:	4b3f      	ldr	r3, [pc, #252]	@ (800d780 <linealiza+0x18c>)
 800d682:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800d684:	4b3e      	ldr	r3, [pc, #248]	@ (800d780 <linealiza+0x18c>)
 800d686:	881a      	ldrh	r2, [r3, #0]
 800d688:	4b35      	ldr	r3, [pc, #212]	@ (800d760 <linealiza+0x16c>)
 800d68a:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800d68c:	4b34      	ldr	r3, [pc, #208]	@ (800d760 <linealiza+0x16c>)
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	b21b      	sxth	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	da05      	bge.n	800d6a2 <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800d696:	4b3a      	ldr	r3, [pc, #232]	@ (800d780 <linealiza+0x18c>)
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	425b      	negs	r3, r3
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	4b38      	ldr	r3, [pc, #224]	@ (800d780 <linealiza+0x18c>)
 800d6a0:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800d6a2:	4b37      	ldr	r3, [pc, #220]	@ (800d780 <linealiza+0x18c>)
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	0a1b      	lsrs	r3, r3, #8
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	4b35      	ldr	r3, [pc, #212]	@ (800d784 <linealiza+0x190>)
 800d6ae:	701a      	strb	r2, [r3, #0]
	waux = A;
 800d6b0:	4b34      	ldr	r3, [pc, #208]	@ (800d784 <linealiza+0x190>)
 800d6b2:	781a      	ldrb	r2, [r3, #0]
 800d6b4:	4b34      	ldr	r3, [pc, #208]	@ (800d788 <linealiza+0x194>)
 800d6b6:	701a      	strb	r2, [r3, #0]
	A = 10;
 800d6b8:	4b32      	ldr	r3, [pc, #200]	@ (800d784 <linealiza+0x190>)
 800d6ba:	220a      	movs	r2, #10
 800d6bc:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800d6be:	4b30      	ldr	r3, [pc, #192]	@ (800d780 <linealiza+0x18c>)
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	001a      	movs	r2, r3
 800d6c6:	4b2f      	ldr	r3, [pc, #188]	@ (800d784 <linealiza+0x190>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	4353      	muls	r3, r2
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800d780 <linealiza+0x18c>)
 800d6d0:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800d6d2:	4b2b      	ldr	r3, [pc, #172]	@ (800d780 <linealiza+0x18c>)
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	0a1b      	lsrs	r3, r3, #8
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	4b29      	ldr	r3, [pc, #164]	@ (800d784 <linealiza+0x190>)
 800d6de:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800d6e0:	4b27      	ldr	r3, [pc, #156]	@ (800d780 <linealiza+0x18c>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	801a      	strh	r2, [r3, #0]
	X = A;
 800d6e6:	4b27      	ldr	r3, [pc, #156]	@ (800d784 <linealiza+0x190>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	001a      	movs	r2, r3
 800d6ec:	4b24      	ldr	r3, [pc, #144]	@ (800d780 <linealiza+0x18c>)
 800d6ee:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800d6f0:	4b23      	ldr	r3, [pc, #140]	@ (800d780 <linealiza+0x18c>)
 800d6f2:	881a      	ldrh	r2, [r3, #0]
 800d6f4:	4b18      	ldr	r3, [pc, #96]	@ (800d758 <linealiza+0x164>)
 800d6f6:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800d6f8:	4b23      	ldr	r3, [pc, #140]	@ (800d788 <linealiza+0x194>)
 800d6fa:	781a      	ldrb	r2, [r3, #0]
 800d6fc:	4b21      	ldr	r3, [pc, #132]	@ (800d784 <linealiza+0x190>)
 800d6fe:	701a      	strb	r2, [r3, #0]
	X = A;
 800d700:	4b20      	ldr	r3, [pc, #128]	@ (800d784 <linealiza+0x190>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	001a      	movs	r2, r3
 800d706:	4b1e      	ldr	r3, [pc, #120]	@ (800d780 <linealiza+0x18c>)
 800d708:	801a      	strh	r2, [r3, #0]

	A = 10;
 800d70a:	4b1e      	ldr	r3, [pc, #120]	@ (800d784 <linealiza+0x190>)
 800d70c:	220a      	movs	r2, #10
 800d70e:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800d710:	4b1b      	ldr	r3, [pc, #108]	@ (800d780 <linealiza+0x18c>)
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	b2db      	uxtb	r3, r3
 800d716:	001a      	movs	r2, r3
 800d718:	4b1a      	ldr	r3, [pc, #104]	@ (800d784 <linealiza+0x190>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	4353      	muls	r3, r2
 800d71e:	b29a      	uxth	r2, r3
 800d720:	4b17      	ldr	r3, [pc, #92]	@ (800d780 <linealiza+0x18c>)
 800d722:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800d724:	4b16      	ldr	r3, [pc, #88]	@ (800d780 <linealiza+0x18c>)
 800d726:	881a      	ldrh	r2, [r3, #0]
 800d728:	4b0b      	ldr	r3, [pc, #44]	@ (800d758 <linealiza+0x164>)
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	18d3      	adds	r3, r2, r3
 800d72e:	b29a      	uxth	r2, r3
 800d730:	4b13      	ldr	r3, [pc, #76]	@ (800d780 <linealiza+0x18c>)
 800d732:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800d734:	4b0a      	ldr	r3, [pc, #40]	@ (800d760 <linealiza+0x16c>)
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	b21b      	sxth	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	da05      	bge.n	800d74a <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800d73e:	4b10      	ldr	r3, [pc, #64]	@ (800d780 <linealiza+0x18c>)
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	425b      	negs	r3, r3
 800d744:	b29a      	uxth	r2, r3
 800d746:	4b0e      	ldr	r3, [pc, #56]	@ (800d780 <linealiza+0x18c>)
 800d748:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800d74a:	4b0d      	ldr	r3, [pc, #52]	@ (800d780 <linealiza+0x18c>)
 800d74c:	881a      	ldrh	r2, [r3, #0]
 800d74e:	4b02      	ldr	r3, [pc, #8]	@ (800d758 <linealiza+0x164>)
 800d750:	801a      	strh	r2, [r3, #0]
}
 800d752:	46c0      	nop			@ (mov r8, r8)
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	20001256 	.word	0x20001256
 800d75c:	20001254 	.word	0x20001254
 800d760:	20001250 	.word	0x20001250
 800d764:	2000124c 	.word	0x2000124c
 800d768:	0000038d 	.word	0x0000038d
 800d76c:	00000339 	.word	0x00000339
 800d770:	000002aa 	.word	0x000002aa
 800d774:	0000ffff 	.word	0x0000ffff
 800d778:	000093cc 	.word	0x000093cc
 800d77c:	00002ecc 	.word	0x00002ecc
 800d780:	20001252 	.word	0x20001252
 800d784:	2000124e 	.word	0x2000124e
 800d788:	20000bb2 	.word	0x20000bb2

0800d78c <mult1x2>:

void mult1x2(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800d790:	4b2f      	ldr	r3, [pc, #188]	@ (800d850 <mult1x2+0xc4>)
 800d792:	881a      	ldrh	r2, [r3, #0]
 800d794:	4b2f      	ldr	r3, [pc, #188]	@ (800d854 <mult1x2+0xc8>)
 800d796:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800d798:	4b2e      	ldr	r3, [pc, #184]	@ (800d854 <mult1x2+0xc8>)
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	0a1b      	lsrs	r3, r3, #8
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d858 <mult1x2+0xcc>)
 800d7a4:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	@ (800d858 <mult1x2+0xcc>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	001a      	movs	r2, r3
 800d7ac:	4b28      	ldr	r3, [pc, #160]	@ (800d850 <mult1x2+0xc4>)
 800d7ae:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d7b0:	4b2a      	ldr	r3, [pc, #168]	@ (800d85c <mult1x2+0xd0>)
 800d7b2:	781a      	ldrb	r2, [r3, #0]
 800d7b4:	4b28      	ldr	r3, [pc, #160]	@ (800d858 <mult1x2+0xcc>)
 800d7b6:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800d7b8:	4b27      	ldr	r3, [pc, #156]	@ (800d858 <mult1x2+0xcc>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	001a      	movs	r2, r3
 800d7be:	4b24      	ldr	r3, [pc, #144]	@ (800d850 <mult1x2+0xc4>)
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	4353      	muls	r3, r2
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	4b22      	ldr	r3, [pc, #136]	@ (800d850 <mult1x2+0xc4>)
 800d7c8:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800d7ca:	4b21      	ldr	r3, [pc, #132]	@ (800d850 <mult1x2+0xc4>)
 800d7cc:	881a      	ldrh	r2, [r3, #0]
 800d7ce:	4b24      	ldr	r3, [pc, #144]	@ (800d860 <mult1x2+0xd4>)
 800d7d0:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800d7d2:	4b20      	ldr	r3, [pc, #128]	@ (800d854 <mult1x2+0xc8>)
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	4b1f      	ldr	r3, [pc, #124]	@ (800d858 <mult1x2+0xcc>)
 800d7da:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d7dc:	4b1e      	ldr	r3, [pc, #120]	@ (800d858 <mult1x2+0xcc>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	001a      	movs	r2, r3
 800d7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d850 <mult1x2+0xc4>)
 800d7e4:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d7e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d85c <mult1x2+0xd0>)
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d858 <mult1x2+0xcc>)
 800d7ec:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800d7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d858 <mult1x2+0xcc>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	001a      	movs	r2, r3
 800d7f4:	4b16      	ldr	r3, [pc, #88]	@ (800d850 <mult1x2+0xc4>)
 800d7f6:	881b      	ldrh	r3, [r3, #0]
 800d7f8:	4353      	muls	r3, r2
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	4b14      	ldr	r3, [pc, #80]	@ (800d850 <mult1x2+0xc4>)
 800d7fe:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800d800:	4b13      	ldr	r3, [pc, #76]	@ (800d850 <mult1x2+0xc4>)
 800d802:	881b      	ldrh	r3, [r3, #0]
 800d804:	b2da      	uxtb	r2, r3
 800d806:	4b14      	ldr	r3, [pc, #80]	@ (800d858 <mult1x2+0xcc>)
 800d808:	701a      	strb	r2, [r3, #0]
	resul = A;
 800d80a:	4b13      	ldr	r3, [pc, #76]	@ (800d858 <mult1x2+0xcc>)
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	001a      	movs	r2, r3
 800d810:	4b10      	ldr	r3, [pc, #64]	@ (800d854 <mult1x2+0xc8>)
 800d812:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800d814:	4b0e      	ldr	r3, [pc, #56]	@ (800d850 <mult1x2+0xc4>)
 800d816:	881b      	ldrh	r3, [r3, #0]
 800d818:	0a1b      	lsrs	r3, r3, #8
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	4b0e      	ldr	r3, [pc, #56]	@ (800d858 <mult1x2+0xcc>)
 800d820:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800d822:	4b0f      	ldr	r3, [pc, #60]	@ (800d860 <mult1x2+0xd4>)
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	b2da      	uxtb	r2, r3
 800d828:	4b0b      	ldr	r3, [pc, #44]	@ (800d858 <mult1x2+0xcc>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	18d3      	adds	r3, r2, r3
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	4b09      	ldr	r3, [pc, #36]	@ (800d858 <mult1x2+0xcc>)
 800d832:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800d834:	4b08      	ldr	r3, [pc, #32]	@ (800d858 <mult1x2+0xcc>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	021b      	lsls	r3, r3, #8
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	4b05      	ldr	r3, [pc, #20]	@ (800d854 <mult1x2+0xc8>)
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	18d3      	adds	r3, r2, r3
 800d842:	b29a      	uxth	r2, r3
 800d844:	4b03      	ldr	r3, [pc, #12]	@ (800d854 <mult1x2+0xc8>)
 800d846:	801a      	strh	r2, [r3, #0]
}
 800d848:	46c0      	nop			@ (mov r8, r8)
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	46c0      	nop			@ (mov r8, r8)
 800d850:	20001250 	.word	0x20001250
 800d854:	20001254 	.word	0x20001254
 800d858:	2000124e 	.word	0x2000124e
 800d85c:	20000bb3 	.word	0x20000bb3
 800d860:	20001258 	.word	0x20001258

0800d864 <capturaAD>:

void capturaAD (void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800d86a:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d4 <capturaAD+0x70>)
 800d86c:	689a      	ldr	r2, [r3, #8]
 800d86e:	4b19      	ldr	r3, [pc, #100]	@ (800d8d4 <capturaAD+0x70>)
 800d870:	2101      	movs	r1, #1
 800d872:	430a      	orrs	r2, r1
 800d874:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800d876:	4b17      	ldr	r3, [pc, #92]	@ (800d8d4 <capturaAD+0x70>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	4b16      	ldr	r3, [pc, #88]	@ (800d8d4 <capturaAD+0x70>)
 800d87c:	211c      	movs	r1, #28
 800d87e:	430a      	orrs	r2, r1
 800d880:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800d882:	4b14      	ldr	r3, [pc, #80]	@ (800d8d4 <capturaAD+0x70>)
 800d884:	689a      	ldr	r2, [r3, #8]
 800d886:	4b13      	ldr	r3, [pc, #76]	@ (800d8d4 <capturaAD+0x70>)
 800d888:	2104      	movs	r1, #4
 800d88a:	430a      	orrs	r2, r1
 800d88c:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800d88e:	46c0      	nop			@ (mov r8, r8)
 800d890:	4b10      	ldr	r3, [pc, #64]	@ (800d8d4 <capturaAD+0x70>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2204      	movs	r2, #4
 800d896:	4013      	ands	r3, r2
 800d898:	d0fa      	beq.n	800d890 <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800d89a:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d4 <capturaAD+0x70>)
 800d89c:	689a      	ldr	r2, [r3, #8]
 800d89e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d4 <capturaAD+0x70>)
 800d8a0:	210c      	movs	r1, #12
 800d8a2:	438a      	bics	r2, r1
 800d8a4:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 10; i++);
 800d8a6:	1dfb      	adds	r3, r7, #7
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	701a      	strb	r2, [r3, #0]
 800d8ac:	e004      	b.n	800d8b8 <capturaAD+0x54>
 800d8ae:	1dfb      	adds	r3, r7, #7
 800d8b0:	781a      	ldrb	r2, [r3, #0]
 800d8b2:	1dfb      	adds	r3, r7, #7
 800d8b4:	3201      	adds	r2, #1
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	1dfb      	adds	r3, r7, #7
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b09      	cmp	r3, #9
 800d8be:	d9f6      	bls.n	800d8ae <capturaAD+0x4a>

	adcramh = ADC1->DR;
 800d8c0:	4b04      	ldr	r3, [pc, #16]	@ (800d8d4 <capturaAD+0x70>)
 800d8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	4b04      	ldr	r3, [pc, #16]	@ (800d8d8 <capturaAD+0x74>)
 800d8c8:	801a      	strh	r2, [r3, #0]
}
 800d8ca:	46c0      	nop			@ (mov r8, r8)
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	b002      	add	sp, #8
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	46c0      	nop			@ (mov r8, r8)
 800d8d4:	40012400 	.word	0x40012400
 800d8d8:	20000bbc 	.word	0x20000bbc

0800d8dc <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	0002      	movs	r2, r0
 800d8e4:	1dfb      	adds	r3, r7, #7
 800d8e6:	701a      	strb	r2, [r3, #0]
 800d8e8:	1d3b      	adds	r3, r7, #4
 800d8ea:	1c0a      	adds	r2, r1, #0
 800d8ec:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800d8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d92c <wise_hot_rep+0x50>)
 800d8f0:	1dfa      	adds	r2, r7, #7
 800d8f2:	7812      	ldrb	r2, [r2, #0]
 800d8f4:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800d8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d930 <wise_hot_rep+0x54>)
 800d8f8:	881a      	ldrh	r2, [r3, #0]
 800d8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d934 <wise_hot_rep+0x58>)
 800d8fc:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800d8fe:	f7ff ff45 	bl	800d78c <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800d902:	4b0d      	ldr	r3, [pc, #52]	@ (800d938 <wise_hot_rep+0x5c>)
 800d904:	881a      	ldrh	r2, [r3, #0]
 800d906:	4b0d      	ldr	r3, [pc, #52]	@ (800d93c <wise_hot_rep+0x60>)
 800d908:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800d90a:	4b0c      	ldr	r3, [pc, #48]	@ (800d93c <wise_hot_rep+0x60>)
 800d90c:	881a      	ldrh	r2, [r3, #0]
 800d90e:	1d3b      	adds	r3, r7, #4
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	b29a      	uxth	r2, r3
 800d916:	4b09      	ldr	r3, [pc, #36]	@ (800d93c <wise_hot_rep+0x60>)
 800d918:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800d91a:	4b08      	ldr	r3, [pc, #32]	@ (800d93c <wise_hot_rep+0x60>)
 800d91c:	881a      	ldrh	r2, [r3, #0]
 800d91e:	4b08      	ldr	r3, [pc, #32]	@ (800d940 <wise_hot_rep+0x64>)
 800d920:	801a      	strh	r2, [r3, #0]
}
 800d922:	46c0      	nop			@ (mov r8, r8)
 800d924:	46bd      	mov	sp, r7
 800d926:	b002      	add	sp, #8
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	46c0      	nop			@ (mov r8, r8)
 800d92c:	20000bb3 	.word	0x20000bb3
 800d930:	2000124c 	.word	0x2000124c
 800d934:	20001250 	.word	0x20001250
 800d938:	20001254 	.word	0x20001254
 800d93c:	20001252 	.word	0x20001252
 800d940:	20001256 	.word	0x20001256

0800d944 <Y_A>:

void Y_A (void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
	Y = adcramh;
 800d948:	4b05      	ldr	r3, [pc, #20]	@ (800d960 <Y_A+0x1c>)
 800d94a:	881a      	ldrh	r2, [r3, #0]
 800d94c:	4b05      	ldr	r3, [pc, #20]	@ (800d964 <Y_A+0x20>)
 800d94e:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800d950:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <Y_A+0x24>)
 800d952:	781a      	ldrb	r2, [r3, #0]
 800d954:	4b05      	ldr	r3, [pc, #20]	@ (800d96c <Y_A+0x28>)
 800d956:	701a      	strb	r2, [r3, #0]
}
 800d958:	46c0      	nop			@ (mov r8, r8)
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	46c0      	nop			@ (mov r8, r8)
 800d960:	20000bbc 	.word	0x20000bbc
 800d964:	20001250 	.word	0x20001250
 800d968:	20000bf4 	.word	0x20000bf4
 800d96c:	2000124e 	.word	0x2000124e

0800d970 <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	0019      	movs	r1, r3
 800d97c:	1dfb      	adds	r3, r7, #7
 800d97e:	701a      	strb	r2, [r3, #0]
 800d980:	1dbb      	adds	r3, r7, #6
 800d982:	1c0a      	adds	r2, r1, #0
 800d984:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800d986:	1dfb      	adds	r3, r7, #7
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	18d3      	adds	r3, r2, r3
 800d98e:	2201      	movs	r2, #1
 800d990:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800d992:	1dbb      	adds	r3, r7, #6
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	18d3      	adds	r3, r2, r3
 800d99a:	2200      	movs	r2, #0
 800d99c:	701a      	strb	r2, [r3, #0]
}
 800d99e:	46c0      	nop			@ (mov r8, r8)
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	b004      	add	sp, #16
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b084      	sub	sp, #16
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	60f8      	str	r0, [r7, #12]
 800d9ae:	60b9      	str	r1, [r7, #8]
 800d9b0:	0019      	movs	r1, r3
 800d9b2:	1dfb      	adds	r3, r7, #7
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	1dbb      	adds	r3, r7, #6
 800d9b8:	1c0a      	adds	r2, r1, #0
 800d9ba:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800d9bc:	1dfb      	adds	r3, r7, #7
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	18d3      	adds	r3, r2, r3
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800d9c8:	1dbb      	adds	r3, r7, #6
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	18d3      	adds	r3, r2, r3
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	701a      	strb	r2, [r3, #0]
}
 800d9d4:	46c0      	nop			@ (mov r8, r8)
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	b004      	add	sp, #16
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	af00      	add	r7, sp, #0

    asm ("nop");
 800d9e0:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800d9e2:	4bcf      	ldr	r3, [pc, #828]	@ (800dd20 <tiempo+0x344>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	2b07      	cmp	r3, #7
 800d9e8:	d900      	bls.n	800d9ec <tiempo+0x10>
 800d9ea:	e25b      	b.n	800dea4 <tiempo+0x4c8>
			goto tiempo10;				//	jrult		tiempo10;
 800d9ec:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800d9ee:	4bcd      	ldr	r3, [pc, #820]	@ (800dd24 <tiempo+0x348>)
 800d9f0:	881b      	ldrh	r3, [r3, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	4bcb      	ldr	r3, [pc, #812]	@ (800dd24 <tiempo+0x348>)
 800d9f8:	801a      	strh	r2, [r3, #0]

			   decwreg(&delayComStat);
 800d9fa:	4bcb      	ldr	r3, [pc, #812]	@ (800dd28 <tiempo+0x34c>)
 800d9fc:	0018      	movs	r0, r3
 800d9fe:	f7f9 fce2 	bl	80073c6 <decwreg>
			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800da02:	4bca      	ldr	r3, [pc, #808]	@ (800dd2c <tiempo+0x350>)
 800da04:	0018      	movs	r0, r3
 800da06:	f7f9 fcde 	bl	80073c6 <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800da0a:	4bc9      	ldr	r3, [pc, #804]	@ (800dd30 <tiempo+0x354>)
 800da0c:	0018      	movs	r0, r3
 800da0e:	f7f9 fcda 	bl	80073c6 <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800da12:	4bc8      	ldr	r3, [pc, #800]	@ (800dd34 <tiempo+0x358>)
 800da14:	0018      	movs	r0, r3
 800da16:	f7f9 fcd6 	bl	80073c6 <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800da1a:	4bc7      	ldr	r3, [pc, #796]	@ (800dd38 <tiempo+0x35c>)
 800da1c:	0018      	movs	r0, r3
 800da1e:	f7f9 fcd2 	bl	80073c6 <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800da22:	4bc6      	ldr	r3, [pc, #792]	@ (800dd3c <tiempo+0x360>)
 800da24:	0018      	movs	r0, r3
 800da26:	f7f9 fcce 	bl	80073c6 <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800da2a:	4bc5      	ldr	r3, [pc, #788]	@ (800dd40 <tiempo+0x364>)
 800da2c:	0018      	movs	r0, r3
 800da2e:	f7f9 fcca 	bl	80073c6 <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800da32:	4bc4      	ldr	r3, [pc, #784]	@ (800dd44 <tiempo+0x368>)
 800da34:	0018      	movs	r0, r3
 800da36:	f7f9 fcc6 	bl	80073c6 <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800da3a:	4bc3      	ldr	r3, [pc, #780]	@ (800dd48 <tiempo+0x36c>)
 800da3c:	0018      	movs	r0, r3
 800da3e:	f7f9 fcc2 	bl	80073c6 <decwreg>

		       cntcent++;					//	Una centésima más
 800da42:	4bc2      	ldr	r3, [pc, #776]	@ (800dd4c <tiempo+0x370>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	3301      	adds	r3, #1
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	4bc0      	ldr	r3, [pc, #768]	@ (800dd4c <tiempo+0x370>)
 800da4c:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800da4e:	4bbf      	ldr	r3, [pc, #764]	@ (800dd4c <tiempo+0x370>)
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	001a      	movs	r2, r3
 800da54:	2301      	movs	r3, #1
 800da56:	4013      	ands	r3, r2
 800da58:	d01c      	beq.n	800da94 <tiempo+0xb8>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800da5a:	4bbd      	ldr	r3, [pc, #756]	@ (800dd50 <tiempo+0x374>)
 800da5c:	0018      	movs	r0, r3
 800da5e:	f7f9 fcb2 	bl	80073c6 <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800da62:	4bbc      	ldr	r3, [pc, #752]	@ (800dd54 <tiempo+0x378>)
 800da64:	0018      	movs	r0, r3
 800da66:	f7f9 fcae 	bl	80073c6 <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800da6a:	4bbb      	ldr	r3, [pc, #748]	@ (800dd58 <tiempo+0x37c>)
 800da6c:	0018      	movs	r0, r3
 800da6e:	f7f9 fcaa 	bl	80073c6 <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800da72:	4bba      	ldr	r3, [pc, #744]	@ (800dd5c <tiempo+0x380>)
 800da74:	0018      	movs	r0, r3
 800da76:	f7f9 fca6 	bl	80073c6 <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800da7a:	4bb9      	ldr	r3, [pc, #740]	@ (800dd60 <tiempo+0x384>)
 800da7c:	0018      	movs	r0, r3
 800da7e:	f7f9 fca2 	bl	80073c6 <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800da82:	4bb8      	ldr	r3, [pc, #736]	@ (800dd64 <tiempo+0x388>)
 800da84:	0018      	movs	r0, r3
 800da86:	f7f9 fc9e 	bl	80073c6 <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800da8a:	4bb7      	ldr	r3, [pc, #732]	@ (800dd68 <tiempo+0x38c>)
 800da8c:	0018      	movs	r0, r3
 800da8e:	f7f9 fc9a 	bl	80073c6 <decwreg>
 800da92:	e000      	b.n	800da96 <tiempo+0xba>
			        goto no_dec_deb;
 800da94:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800da96:	4bad      	ldr	r3, [pc, #692]	@ (800dd4c <tiempo+0x370>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b63      	cmp	r3, #99	@ 0x63
 800da9c:	d800      	bhi.n	800daa0 <tiempo+0xc4>
 800da9e:	e203      	b.n	800dea8 <tiempo+0x4cc>
		        	goto tiempo12;			//;jruge		tiempo12
 800daa0:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;				//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800daa2:	4baa      	ldr	r3, [pc, #680]	@ (800dd4c <tiempo+0x370>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
//;-----------------------------------------------------------------------------------

				//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
				//ld			A,BluetoothState
				//cp			A,#3
				if(BluetoothState!=3)//jrne		endSelect
 800daa8:	4bb0      	ldr	r3, [pc, #704]	@ (800dd6c <tiempo+0x390>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b03      	cmp	r3, #3
 800daae:	d142      	bne.n	800db36 <tiempo+0x15a>
					goto endSelect;
				//ldw			X,#cntSetName;
				decword(&cntSetName);//call		decword
 800dab0:	4baf      	ldr	r3, [pc, #700]	@ (800dd70 <tiempo+0x394>)
 800dab2:	0018      	movs	r0, r3
 800dab4:	f7f9 fc75 	bl	80073a2 <decword>
				//btjt	flagsTxControl,#f_statBLE,no_toggleCOM;  Con conexión BLE activa no cambies el canal de comunicacion
				//; no cambies de canal de comunicación si se está transmitiendo algun logger via wifi
				//btjt	flagsWIFI,#f_timeLoggerCmd,no_toggleCOM;
				//btjt	flagsWIFI,#f_eventLoggerCmd,no_toggleCOM;

				if(flagsTxControl[f_statBLE] || flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800dab8:	4bae      	ldr	r3, [pc, #696]	@ (800dd74 <tiempo+0x398>)
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d11e      	bne.n	800dafe <tiempo+0x122>
 800dac0:	4bad      	ldr	r3, [pc, #692]	@ (800dd78 <tiempo+0x39c>)
 800dac2:	78db      	ldrb	r3, [r3, #3]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d11a      	bne.n	800dafe <tiempo+0x122>
 800dac8:	4bab      	ldr	r3, [pc, #684]	@ (800dd78 <tiempo+0x39c>)
 800daca:	791b      	ldrb	r3, [r3, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d116      	bne.n	800dafe <tiempo+0x122>
					goto no_toggleCOM;

toggleCOM:
 800dad0:	46c0      	nop			@ (mov r8, r8)
				//; no cambies el canal de comunicación si hay una respuesta en transmisión en progreso
				//tnz		keyTx
				if(keyTx)//jrne	no_toggleCOM
 800dad2:	4baa      	ldr	r3, [pc, #680]	@ (800dd7c <tiempo+0x3a0>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d113      	bne.n	800db02 <tiempo+0x126>
					goto no_toggleCOM;
				flagsTxControl[f_select] = !(flagsTxControl[f_select]);// bcpl		flagsTxControl,#f_select
 800dada:	4ba6      	ldr	r3, [pc, #664]	@ (800dd74 <tiempo+0x398>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	1e5a      	subs	r2, r3, #1
 800dae0:	4193      	sbcs	r3, r2
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	2201      	movs	r2, #1
 800dae6:	4053      	eors	r3, r2
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	1c1a      	adds	r2, r3, #0
 800daec:	2301      	movs	r3, #1
 800daee:	4013      	ands	r3, r2
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	4ba0      	ldr	r3, [pc, #640]	@ (800dd74 <tiempo+0x398>)
 800daf4:	701a      	strb	r2, [r3, #0]
				delayComStat = 10;//mov			delayComStat,#10
 800daf6:	4b8c      	ldr	r3, [pc, #560]	@ (800dd28 <tiempo+0x34c>)
 800daf8:	220a      	movs	r2, #10
 800dafa:	701a      	strb	r2, [r3, #0]
 800dafc:	e002      	b.n	800db04 <tiempo+0x128>
					goto no_toggleCOM;
 800dafe:	46c0      	nop			@ (mov r8, r8)
 800db00:	e000      	b.n	800db04 <tiempo+0x128>
					goto no_toggleCOM;
 800db02:	46c0      	nop			@ (mov r8, r8)
no_toggleCOM:

				if(!flagsTxControl[f_select])//btjf		flagsTxControl,#f_select,BLEselect
 800db04:	4b9b      	ldr	r3, [pc, #620]	@ (800dd74 <tiempo+0x398>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2201      	movs	r2, #1
 800db0a:	4053      	eors	r3, r2
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d108      	bne.n	800db24 <tiempo+0x148>
					goto BLEselect;
WIFIselect:
 800db12:	46c0      	nop			@ (mov r8, r8)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);//bset		PE_ODR,#2
 800db14:	2380      	movs	r3, #128	@ 0x80
 800db16:	015b      	lsls	r3, r3, #5
 800db18:	4899      	ldr	r0, [pc, #612]	@ (800dd80 <tiempo+0x3a4>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	0019      	movs	r1, r3
 800db1e:	f006 fe28 	bl	8014772 <HAL_GPIO_WritePin>
				goto endSelect;//jra			endSelect
 800db22:	e009      	b.n	800db38 <tiempo+0x15c>
					goto BLEselect;
 800db24:	46c0      	nop			@ (mov r8, r8)
BLEselect:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);//bres		PE_ODR,#2
 800db26:	2380      	movs	r3, #128	@ 0x80
 800db28:	015b      	lsls	r3, r3, #5
 800db2a:	4895      	ldr	r0, [pc, #596]	@ (800dd80 <tiempo+0x3a4>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	0019      	movs	r1, r3
 800db30:	f006 fe1f 	bl	8014772 <HAL_GPIO_WritePin>
 800db34:	e000      	b.n	800db38 <tiempo+0x15c>
					goto endSelect;
 800db36:	46c0      	nop			@ (mov r8, r8)
//    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
//no_inc_timeH:
//
//noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800db38:	4b92      	ldr	r3, [pc, #584]	@ (800dd84 <tiempo+0x3a8>)
 800db3a:	0018      	movs	r0, r3
 800db3c:	f7f9 fc31 	bl	80073a2 <decword>
	            decwreg(&timeTxTBLE);
 800db40:	4b91      	ldr	r3, [pc, #580]	@ (800dd88 <tiempo+0x3ac>)
 800db42:	0018      	movs	r0, r3
 800db44:	f7f9 fc3f 	bl	80073c6 <decwreg>
				decword(&timeoutTBLE);
 800db48:	4b90      	ldr	r3, [pc, #576]	@ (800dd8c <tiempo+0x3b0>)
 800db4a:	0018      	movs	r0, r3
 800db4c:	f7f9 fc29 	bl	80073a2 <decword>
	            decwreg(&timeTxTWF);
 800db50:	4b8f      	ldr	r3, [pc, #572]	@ (800dd90 <tiempo+0x3b4>)
 800db52:	0018      	movs	r0, r3
 800db54:	f7f9 fc37 	bl	80073c6 <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800db58:	4b8e      	ldr	r3, [pc, #568]	@ (800dd94 <tiempo+0x3b8>)
 800db5a:	0018      	movs	r0, r3
 800db5c:	f7f9 fc21 	bl	80073a2 <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800db60:	4b8d      	ldr	r3, [pc, #564]	@ (800dd98 <tiempo+0x3bc>)
 800db62:	0018      	movs	r0, r3
 800db64:	f7f9 fc2f 	bl	80073c6 <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800db68:	4b8c      	ldr	r3, [pc, #560]	@ (800dd9c <tiempo+0x3c0>)
 800db6a:	0018      	movs	r0, r3
 800db6c:	f7f9 fc2b 	bl	80073c6 <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800db70:	4b8b      	ldr	r3, [pc, #556]	@ (800dda0 <tiempo+0x3c4>)
 800db72:	0018      	movs	r0, r3
 800db74:	f7f9 fc27 	bl	80073c6 <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800db78:	4b8a      	ldr	r3, [pc, #552]	@ (800dda4 <tiempo+0x3c8>)
 800db7a:	0018      	movs	r0, r3
 800db7c:	f7f9 fc23 	bl	80073c6 <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800db80:	4b89      	ldr	r3, [pc, #548]	@ (800dda8 <tiempo+0x3cc>)
 800db82:	0018      	movs	r0, r3
 800db84:	f7f9 fc1f 	bl	80073c6 <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800db88:	4b88      	ldr	r3, [pc, #544]	@ (800ddac <tiempo+0x3d0>)
 800db8a:	0018      	movs	r0, r3
 800db8c:	f7f9 fc1b 	bl	80073c6 <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800db90:	4b87      	ldr	r3, [pc, #540]	@ (800ddb0 <tiempo+0x3d4>)
 800db92:	0018      	movs	r0, r3
 800db94:	f7f9 fc05 	bl	80073a2 <decword>
		    	decword(&timePreDh_h);
 800db98:	4b86      	ldr	r3, [pc, #536]	@ (800ddb4 <tiempo+0x3d8>)
 800db9a:	0018      	movs	r0, r3
 800db9c:	f7f9 fc01 	bl	80073a2 <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800dba0:	4b85      	ldr	r3, [pc, #532]	@ (800ddb8 <tiempo+0x3dc>)
 800dba2:	0018      	movs	r0, r3
 800dba4:	f7f9 fc0f 	bl	80073c6 <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800dba8:	4b84      	ldr	r3, [pc, #528]	@ (800ddbc <tiempo+0x3e0>)
 800dbaa:	0018      	movs	r0, r3
 800dbac:	f7f9 fc0b 	bl	80073c6 <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800dbb0:	4b83      	ldr	r3, [pc, #524]	@ (800ddc0 <tiempo+0x3e4>)
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	f7f9 fc07 	bl	80073c6 <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800dbb8:	4b82      	ldr	r3, [pc, #520]	@ (800ddc4 <tiempo+0x3e8>)
 800dbba:	0018      	movs	r0, r3
 800dbbc:	f7f9 fc03 	bl	80073c6 <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800dbc0:	4b81      	ldr	r3, [pc, #516]	@ (800ddc8 <tiempo+0x3ec>)
 800dbc2:	0018      	movs	r0, r3
 800dbc4:	f7f9 fbff 	bl	80073c6 <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800dbc8:	4b80      	ldr	r3, [pc, #512]	@ (800ddcc <tiempo+0x3f0>)
 800dbca:	0018      	movs	r0, r3
 800dbcc:	f7f9 fbfb 	bl	80073c6 <decwreg>
		    	decwreg(&valflvl);//
 800dbd0:	4b7f      	ldr	r3, [pc, #508]	@ (800ddd0 <tiempo+0x3f4>)
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	f7f9 fbf7 	bl	80073c6 <decwreg>
		    	decwreg(&valfhvl);//
 800dbd8:	4b7e      	ldr	r3, [pc, #504]	@ (800ddd4 <tiempo+0x3f8>)
 800dbda:	0018      	movs	r0, r3
 800dbdc:	f7f9 fbf3 	bl	80073c6 <decwreg>
		    	decwreg(&cnt_prog);//
 800dbe0:	4b7d      	ldr	r3, [pc, #500]	@ (800ddd8 <tiempo+0x3fc>)
 800dbe2:	0018      	movs	r0, r3
 800dbe4:	f7f9 fbef 	bl	80073c6 <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800dbe8:	4b7c      	ldr	r3, [pc, #496]	@ (800dddc <tiempo+0x400>)
 800dbea:	0018      	movs	r0, r3
 800dbec:	f7f9 fbeb 	bl	80073c6 <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800dbf0:	4b7b      	ldr	r3, [pc, #492]	@ (800dde0 <tiempo+0x404>)
 800dbf2:	0018      	movs	r0, r3
 800dbf4:	f7f9 fbe7 	bl	80073c6 <decwreg>
		    	decwreg(&End_sec);//
 800dbf8:	4b7a      	ldr	r3, [pc, #488]	@ (800dde4 <tiempo+0x408>)
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f7f9 fbe3 	bl	80073c6 <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800dc00:	4b79      	ldr	r3, [pc, #484]	@ (800dde8 <tiempo+0x40c>)
 800dc02:	0018      	movs	r0, r3
 800dc04:	f7f9 fbcd 	bl	80073a2 <decword>

		    	decwreg(&timeOutRst);
 800dc08:	4b78      	ldr	r3, [pc, #480]	@ (800ddec <tiempo+0x410>)
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	f7f9 fbdb 	bl	80073c6 <decwreg>
		    	decwreg(&timeOutRx);
 800dc10:	4b77      	ldr	r3, [pc, #476]	@ (800ddf0 <tiempo+0x414>)
 800dc12:	0018      	movs	r0, r3
 800dc14:	f7f9 fbd7 	bl	80073c6 <decwreg>
		    	decwreg(&timeRstBLE);
 800dc18:	4b76      	ldr	r3, [pc, #472]	@ (800ddf4 <tiempo+0x418>)
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	f7f9 fbd3 	bl	80073c6 <decwreg>
		    	//decword(&cntLogger_H);			// decrementra contador de logger
		    	decwreg(&cntInitTx);
 800dc20:	4b75      	ldr	r3, [pc, #468]	@ (800ddf8 <tiempo+0x41c>)
 800dc22:	0018      	movs	r0, r3
 800dc24:	f7f9 fbcf 	bl	80073c6 <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800dc28:	4b74      	ldr	r3, [pc, #464]	@ (800ddfc <tiempo+0x420>)
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f7f9 fbb9 	bl	80073a2 <decword>

		    	decword(&t_ahorro1_H);
 800dc30:	4b73      	ldr	r3, [pc, #460]	@ (800de00 <tiempo+0x424>)
 800dc32:	0018      	movs	r0, r3
 800dc34:	f7f9 fbb5 	bl	80073a2 <decword>
		    	decword(&t_ahorro2_H);
 800dc38:	4b72      	ldr	r3, [pc, #456]	@ (800de04 <tiempo+0x428>)
 800dc3a:	0018      	movs	r0, r3
 800dc3c:	f7f9 fbb1 	bl	80073a2 <decword>
		    	decword(&cntNoct_H);
 800dc40:	4b71      	ldr	r3, [pc, #452]	@ (800de08 <tiempo+0x42c>)
 800dc42:	0018      	movs	r0, r3
 800dc44:	f7f9 fbad 	bl	80073a2 <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800dc48:	4b5d      	ldr	r3, [pc, #372]	@ (800ddc0 <tiempo+0x3e4>)
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	001a      	movs	r2, r3
 800dc4e:	2301      	movs	r3, #1
 800dc50:	4013      	ands	r3, r2
 800dc52:	d104      	bne.n	800dc5e <tiempo+0x282>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800dc54:	4b6d      	ldr	r3, [pc, #436]	@ (800de0c <tiempo+0x430>)
 800dc56:	0018      	movs	r0, r3
 800dc58:	f7f9 fbb5 	bl	80073c6 <decwreg>
 800dc5c:	e000      	b.n	800dc60 <tiempo+0x284>
		    		goto no_dec2;
 800dc5e:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800dc60:	4b6b      	ldr	r3, [pc, #428]	@ (800de10 <tiempo+0x434>)
 800dc62:	0018      	movs	r0, r3
 800dc64:	f7f9 fb9d 	bl	80073a2 <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800dc68:	4b6a      	ldr	r3, [pc, #424]	@ (800de14 <tiempo+0x438>)
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	f7f9 fb99 	bl	80073a2 <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800dc70:	4b69      	ldr	r3, [pc, #420]	@ (800de18 <tiempo+0x43c>)
 800dc72:	0018      	movs	r0, r3
 800dc74:	f7f9 fb95 	bl	80073a2 <decword>
		    	decword(&drp_fanh);
 800dc78:	4b68      	ldr	r3, [pc, #416]	@ (800de1c <tiempo+0x440>)
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	f7f9 fb91 	bl	80073a2 <decword>
		    	decword(&drp_comph);
 800dc80:	4b67      	ldr	r3, [pc, #412]	@ (800de20 <tiempo+0x444>)
 800dc82:	0018      	movs	r0, r3
 800dc84:	f7f9 fb8d 	bl	80073a2 <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800dc88:	4b66      	ldr	r3, [pc, #408]	@ (800de24 <tiempo+0x448>)
 800dc8a:	881a      	ldrh	r2, [r3, #0]
 800dc8c:	4b66      	ldr	r3, [pc, #408]	@ (800de28 <tiempo+0x44c>)
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d204      	bcs.n	800dc9e <tiempo+0x2c2>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800dc94:	4b65      	ldr	r3, [pc, #404]	@ (800de2c <tiempo+0x450>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d006      	beq.n	800dcaa <tiempo+0x2ce>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800dc9c:	e000      	b.n	800dca0 <tiempo+0x2c4>
		    		goto tiempo_17;
 800dc9e:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800dca0:	4b60      	ldr	r3, [pc, #384]	@ (800de24 <tiempo+0x448>)
 800dca2:	0018      	movs	r0, r3
 800dca4:	f7f9 fb7d 	bl	80073a2 <decword>
 800dca8:	e000      	b.n	800dcac <tiempo+0x2d0>
	        	goto tiempo20; //jra tiempo20
 800dcaa:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800dcac:	4b60      	ldr	r3, [pc, #384]	@ (800de30 <tiempo+0x454>)
 800dcae:	0018      	movs	r0, r3
 800dcb0:	f7f9 fb77 	bl	80073a2 <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800dcb4:	4b5f      	ldr	r3, [pc, #380]	@ (800de34 <tiempo+0x458>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	4b5d      	ldr	r3, [pc, #372]	@ (800de34 <tiempo+0x458>)
 800dcbe:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800dcc0:	4b5c      	ldr	r3, [pc, #368]	@ (800de34 <tiempo+0x458>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b3b      	cmp	r3, #59	@ 0x3b
 800dcc6:	d907      	bls.n	800dcd8 <tiempo+0x2fc>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800dcc8:	4b5a      	ldr	r3, [pc, #360]	@ (800de34 <tiempo+0x458>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800dcce:	4b5a      	ldr	r3, [pc, #360]	@ (800de38 <tiempo+0x45c>)
 800dcd0:	0018      	movs	r0, r3
 800dcd2:	f7f9 fb78 	bl	80073c6 <decwreg>
 800dcd6:	e000      	b.n	800dcda <tiempo+0x2fe>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800dcd8:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
				if(GetRegFlagState(cntseg, 3)){
 800dcda:	4b58      	ldr	r3, [pc, #352]	@ (800de3c <tiempo+0x460>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	001a      	movs	r2, r3
 800dce0:	2308      	movs	r3, #8
 800dce2:	4013      	ands	r3, r2
 800dce4:	d001      	beq.n	800dcea <tiempo+0x30e>
					asm ("nop");
 800dce6:	46c0      	nop			@ (mov r8, r8)
 800dce8:	e000      	b.n	800dcec <tiempo+0x310>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800dcea:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800dcec:	4b53      	ldr	r3, [pc, #332]	@ (800de3c <tiempo+0x460>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	4b51      	ldr	r3, [pc, #324]	@ (800de3c <tiempo+0x460>)
 800dcf6:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800dcf8:	4b50      	ldr	r3, [pc, #320]	@ (800de3c <tiempo+0x460>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2b08      	cmp	r3, #8
 800dcfe:	d903      	bls.n	800dd08 <tiempo+0x32c>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800dd00:	4b4f      	ldr	r3, [pc, #316]	@ (800de40 <tiempo+0x464>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	701a      	strb	r2, [r3, #0]
 800dd06:	e000      	b.n	800dd0a <tiempo+0x32e>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800dd08:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800dd0a:	4b4c      	ldr	r3, [pc, #304]	@ (800de3c <tiempo+0x460>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	001a      	movs	r2, r3
 800dd10:	2310      	movs	r3, #16
 800dd12:	4013      	ands	r3, r2
 800dd14:	d100      	bne.n	800dd18 <tiempo+0x33c>
 800dd16:	e095      	b.n	800de44 <tiempo+0x468>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800dd18:	4b49      	ldr	r3, [pc, #292]	@ (800de40 <tiempo+0x464>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	71da      	strb	r2, [r3, #7]
 800dd1e:	e092      	b.n	800de46 <tiempo+0x46a>
 800dd20:	20000c1a 	.word	0x20000c1a
 800dd24:	20000bac 	.word	0x20000bac
 800dd28:	200011dc 	.word	0x200011dc
 800dd2c:	2000114c 	.word	0x2000114c
 800dd30:	20001185 	.word	0x20001185
 800dd34:	20000c1e 	.word	0x20000c1e
 800dd38:	20000c25 	.word	0x20000c25
 800dd3c:	20000c7c 	.word	0x20000c7c
 800dd40:	20000c7d 	.word	0x20000c7d
 800dd44:	20000c7e 	.word	0x20000c7e
 800dd48:	20000c90 	.word	0x20000c90
 800dd4c:	20000baa 	.word	0x20000baa
 800dd50:	20000c6c 	.word	0x20000c6c
 800dd54:	20000c6d 	.word	0x20000c6d
 800dd58:	20000c6e 	.word	0x20000c6e
 800dd5c:	20000c6f 	.word	0x20000c6f
 800dd60:	20000c70 	.word	0x20000c70
 800dd64:	20000c71 	.word	0x20000c71
 800dd68:	20000c72 	.word	0x20000c72
 800dd6c:	2000004c 	.word	0x2000004c
 800dd70:	200011e0 	.word	0x200011e0
 800dd74:	200011d4 	.word	0x200011d4
 800dd78:	20001038 	.word	0x20001038
 800dd7c:	20000f01 	.word	0x20000f01
 800dd80:	50000400 	.word	0x50000400
 800dd84:	20000fc0 	.word	0x20000fc0
 800dd88:	200011e2 	.word	0x200011e2
 800dd8c:	200011e4 	.word	0x200011e4
 800dd90:	20001022 	.word	0x20001022
 800dd94:	20001034 	.word	0x20001034
 800dd98:	20001062 	.word	0x20001062
 800dd9c:	20001063 	.word	0x20001063
 800dda0:	2000114e 	.word	0x2000114e
 800dda4:	20001186 	.word	0x20001186
 800dda8:	20000fcf 	.word	0x20000fcf
 800ddac:	2000118c 	.word	0x2000118c
 800ddb0:	20001088 	.word	0x20001088
 800ddb4:	200011e6 	.word	0x200011e6
 800ddb8:	20000bc6 	.word	0x20000bc6
 800ddbc:	20000bc7 	.word	0x20000bc7
 800ddc0:	20000bc8 	.word	0x20000bc8
 800ddc4:	20000bc9 	.word	0x20000bc9
 800ddc8:	20000bca 	.word	0x20000bca
 800ddcc:	20000bcb 	.word	0x20000bcb
 800ddd0:	20000bcc 	.word	0x20000bcc
 800ddd4:	20000bcd 	.word	0x20000bcd
 800ddd8:	20000bce 	.word	0x20000bce
 800dddc:	20000bcf 	.word	0x20000bcf
 800dde0:	20000bd0 	.word	0x20000bd0
 800dde4:	20000bd1 	.word	0x20000bd1
 800dde8:	20000c92 	.word	0x20000c92
 800ddec:	20000fcd 	.word	0x20000fcd
 800ddf0:	20000fce 	.word	0x20000fce
 800ddf4:	20000fd0 	.word	0x20000fd0
 800ddf8:	20000f02 	.word	0x20000f02
 800ddfc:	20001036 	.word	0x20001036
 800de00:	20000c8c 	.word	0x20000c8c
 800de04:	20000c8e 	.word	0x20000c8e
 800de08:	20000ca0 	.word	0x20000ca0
 800de0c:	20000c84 	.word	0x20000c84
 800de10:	20000bc4 	.word	0x20000bc4
 800de14:	20000bbe 	.word	0x20000bbe
 800de18:	20000bc2 	.word	0x20000bc2
 800de1c:	20000c58 	.word	0x20000c58
 800de20:	20000c56 	.word	0x20000c56
 800de24:	20000c12 	.word	0x20000c12
 800de28:	20000c18 	.word	0x20000c18
 800de2c:	20000bb4 	.word	0x20000bb4
 800de30:	20000c14 	.word	0x20000c14
 800de34:	20000bb1 	.word	0x20000bb1
 800de38:	20000c23 	.word	0x20000c23
 800de3c:	20000bab 	.word	0x20000bab
 800de40:	20000bd4 	.word	0x20000bd4
					goto	tiempo_j01;		// Ya son 16 segundos?
 800de44:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800de46:	4b1c      	ldr	r3, [pc, #112]	@ (800deb8 <tiempo+0x4dc>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b3b      	cmp	r3, #59	@ 0x3b
 800de4c:	d92e      	bls.n	800deac <tiempo+0x4d0>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800de4e:	4b1a      	ldr	r3, [pc, #104]	@ (800deb8 <tiempo+0x4dc>)
 800de50:	2200      	movs	r2, #0
 800de52:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800de54:	4b19      	ldr	r3, [pc, #100]	@ (800debc <tiempo+0x4e0>)
 800de56:	2200      	movs	r2, #0
 800de58:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800de5a:	4b19      	ldr	r3, [pc, #100]	@ (800dec0 <tiempo+0x4e4>)
 800de5c:	0018      	movs	r0, r3
 800de5e:	f7f9 fab2 	bl	80073c6 <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800de62:	4b18      	ldr	r3, [pc, #96]	@ (800dec4 <tiempo+0x4e8>)
 800de64:	0018      	movs	r0, r3
 800de66:	f7f9 faae 	bl	80073c6 <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800de6a:	4b17      	ldr	r3, [pc, #92]	@ (800dec8 <tiempo+0x4ec>)
 800de6c:	0018      	movs	r0, r3
 800de6e:	f7f9 faaa 	bl	80073c6 <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800de72:	4b16      	ldr	r3, [pc, #88]	@ (800decc <tiempo+0x4f0>)
 800de74:	0018      	movs	r0, r3
 800de76:	f7f9 faa6 	bl	80073c6 <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800de7a:	4b15      	ldr	r3, [pc, #84]	@ (800ded0 <tiempo+0x4f4>)
 800de7c:	0018      	movs	r0, r3
 800de7e:	f7f9 faa2 	bl	80073c6 <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800de82:	4b14      	ldr	r3, [pc, #80]	@ (800ded4 <tiempo+0x4f8>)
 800de84:	0018      	movs	r0, r3
 800de86:	f7f9 fa8c 	bl	80073a2 <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800de8a:	4b13      	ldr	r3, [pc, #76]	@ (800ded8 <tiempo+0x4fc>)
 800de8c:	0018      	movs	r0, r3
 800de8e:	f7f9 fa88 	bl	80073a2 <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800de92:	4b12      	ldr	r3, [pc, #72]	@ (800dedc <tiempo+0x500>)
 800de94:	0018      	movs	r0, r3
 800de96:	f7f9 fa84 	bl	80073a2 <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800de9a:	4b11      	ldr	r3, [pc, #68]	@ (800dee0 <tiempo+0x504>)
 800de9c:	0018      	movs	r0, r3
 800de9e:	f7f9 fa92 	bl	80073c6 <decwreg>
	    		 goto fintiem;
 800dea2:	e004      	b.n	800deae <tiempo+0x4d2>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800dea4:	46c0      	nop			@ (mov r8, r8)
 800dea6:	e002      	b.n	800deae <tiempo+0x4d2>
		        goto fintiem;
 800dea8:	46c0      	nop			@ (mov r8, r8)
 800deaa:	e000      	b.n	800deae <tiempo+0x4d2>
					goto fintiem;				//jrult fintiem
 800deac:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800deae:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800deb0:	46c0      	nop			@ (mov r8, r8)
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	46c0      	nop			@ (mov r8, r8)
 800deb8:	20000bab 	.word	0x20000bab
 800debc:	20000c34 	.word	0x20000c34
 800dec0:	20000c83 	.word	0x20000c83
 800dec4:	20000c54 	.word	0x20000c54
 800dec8:	20000c55 	.word	0x20000c55
 800decc:	20000c24 	.word	0x20000c24
 800ded0:	20000c27 	.word	0x20000c27
 800ded4:	20000bc0 	.word	0x20000bc0
 800ded8:	20000c88 	.word	0x20000c88
 800dedc:	20000c8a 	.word	0x20000c8a
 800dee0:	20000cad 	.word	0x20000cad

0800dee4 <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800deea:	4b6f      	ldr	r3, [pc, #444]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800deec:	789b      	ldrb	r3, [r3, #2]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d023      	beq.n	800df3a <tx_buffer_prep+0x56>
			goto	tx_header;
 800def2:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800def4:	4b6d      	ldr	r3, [pc, #436]	@ (800e0ac <tx_buffer_prep+0x1c8>)
 800def6:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800def8:	4b6d      	ldr	r3, [pc, #436]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800defa:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	781a      	ldrb	r2, [r3, #0]
 800df00:	4b6c      	ldr	r3, [pc, #432]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800df02:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800df04:	4b6b      	ldr	r3, [pc, #428]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800df0c:	4b69      	ldr	r3, [pc, #420]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	0018      	movs	r0, r3
 800df12:	f7f9 fa2b 	bl	800736c <build_chksum>
	    	point_X++;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3301      	adds	r3, #1
 800df1a:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800df22:	683a      	ldr	r2, [r7, #0]
 800df24:	4b64      	ldr	r3, [pc, #400]	@ (800e0b8 <tx_buffer_prep+0x1d4>)
 800df26:	429a      	cmp	r2, r3
 800df28:	d800      	bhi.n	800df2c <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800df2a:	e7e7      	b.n	800defc <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800df2c:	4b63      	ldr	r3, [pc, #396]	@ (800e0bc <tx_buffer_prep+0x1d8>)
 800df2e:	2208      	movs	r2, #8
 800df30:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800df32:	4b5d      	ldr	r3, [pc, #372]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800df34:	2200      	movs	r2, #0
 800df36:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800df38:	e0b1      	b.n	800e09e <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800df3a:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800df3c:	4b5a      	ldr	r3, [pc, #360]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2201      	movs	r2, #1
 800df42:	4053      	eors	r3, r2
 800df44:	b2db      	uxtb	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	d107      	bne.n	800df5a <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800df4a:	4b57      	ldr	r3, [pc, #348]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800df4c:	785b      	ldrb	r3, [r3, #1]
 800df4e:	2201      	movs	r2, #1
 800df50:	4053      	eors	r3, r2
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d140      	bne.n	800dfda <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800df58:	e000      	b.n	800df5c <tx_buffer_prep+0x78>
			goto	notest;
 800df5a:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800df5c:	4b58      	ldr	r3, [pc, #352]	@ (800e0c0 <tx_buffer_prep+0x1dc>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	4b58      	ldr	r3, [pc, #352]	@ (800e0c4 <tx_buffer_prep+0x1e0>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	429a      	cmp	r2, r3
 800df66:	d33a      	bcc.n	800dfde <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800df68:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800df6a:	4b4f      	ldr	r3, [pc, #316]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800df6c:	78db      	ldrb	r3, [r3, #3]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d122      	bne.n	800dfb8 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800df72:	4b4f      	ldr	r3, [pc, #316]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800df74:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800df76:	4b54      	ldr	r3, [pc, #336]	@ (800e0c8 <tx_buffer_prep+0x1e4>)
 800df78:	2200      	movs	r2, #0
 800df7a:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800df7c:	4b53      	ldr	r3, [pc, #332]	@ (800e0cc <tx_buffer_prep+0x1e8>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	0e1b      	lsrs	r3, r3, #24
 800df82:	b2da      	uxtb	r2, r3
 800df84:	4b4a      	ldr	r3, [pc, #296]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800df86:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800df88:	4b50      	ldr	r3, [pc, #320]	@ (800e0cc <tx_buffer_prep+0x1e8>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	0c1b      	lsrs	r3, r3, #16
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	4b47      	ldr	r3, [pc, #284]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800df92:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800df94:	4b4d      	ldr	r3, [pc, #308]	@ (800e0cc <tx_buffer_prep+0x1e8>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	0a1b      	lsrs	r3, r3, #8
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	4b44      	ldr	r3, [pc, #272]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800df9e:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800dfa0:	4b4a      	ldr	r3, [pc, #296]	@ (800e0cc <tx_buffer_prep+0x1e8>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	4b42      	ldr	r3, [pc, #264]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800dfa8:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800dfaa:	4b44      	ldr	r3, [pc, #272]	@ (800e0bc <tx_buffer_prep+0x1d8>)
 800dfac:	2204      	movs	r2, #4
 800dfae:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800dfb0:	4b3d      	ldr	r3, [pc, #244]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800dfb6:	e072      	b.n	800e09e <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800dfb8:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800dfba:	4b45      	ldr	r3, [pc, #276]	@ (800e0d0 <tx_buffer_prep+0x1ec>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800dfc0:	4b39      	ldr	r3, [pc, #228]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800dfc6:	4b38      	ldr	r3, [pc, #224]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	701a      	strb	r2, [r3, #0]
		flagsLogger [4] = 0;				// permite loggeo de eventos
 800dfcc:	4b41      	ldr	r3, [pc, #260]	@ (800e0d4 <tx_buffer_prep+0x1f0>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	711a      	strb	r2, [r3, #4]
		flagsLogger [5] = 0;				// permite loggeo de datos
 800dfd2:	4b40      	ldr	r3, [pc, #256]	@ (800e0d4 <tx_buffer_prep+0x1f0>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800dfd8:	e061      	b.n	800e09e <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800dfda:	46c0      	nop			@ (mov r8, r8)
 800dfdc:	e000      	b.n	800dfe0 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800dfde:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800dfe0:	4b37      	ldr	r3, [pc, #220]	@ (800e0c0 <tx_buffer_prep+0x1dc>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800dfe6:	4b32      	ldr	r3, [pc, #200]	@ (800e0b0 <tx_buffer_prep+0x1cc>)
 800dfe8:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800dfea:	4b37      	ldr	r3, [pc, #220]	@ (800e0c8 <tx_buffer_prep+0x1e4>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	781a      	ldrb	r2, [r3, #0]
 800dff4:	4b2f      	ldr	r3, [pc, #188]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800dff6:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800dff8:	4b37      	ldr	r3, [pc, #220]	@ (800e0d8 <tx_buffer_prep+0x1f4>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d111      	bne.n	800e024 <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800e000:	4b34      	ldr	r3, [pc, #208]	@ (800e0d4 <tx_buffer_prep+0x1f0>)
 800e002:	791b      	ldrb	r3, [r3, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d107      	bne.n	800e018 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800e008:	4b32      	ldr	r3, [pc, #200]	@ (800e0d4 <tx_buffer_prep+0x1f0>)
 800e00a:	795b      	ldrb	r3, [r3, #5]
 800e00c:	2201      	movs	r2, #1
 800e00e:	4053      	eors	r3, r2
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d108      	bne.n	800e028 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800e016:	e000      	b.n	800e01a <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800e018:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781a      	ldrb	r2, [r3, #0]
 800e01e:	4b25      	ldr	r3, [pc, #148]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800e020:	701a      	strb	r2, [r3, #0]
 800e022:	e002      	b.n	800e02a <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800e024:	46c0      	nop			@ (mov r8, r8)
 800e026:	e000      	b.n	800e02a <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800e028:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800e02a:	4b22      	ldr	r3, [pc, #136]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800e02c:	781a      	ldrb	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	3301      	adds	r3, #1
 800e036:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	3301      	adds	r3, #1
 800e03c:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800e03e:	4b22      	ldr	r3, [pc, #136]	@ (800e0c8 <tx_buffer_prep+0x1e4>)
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	b2da      	uxtb	r2, r3
 800e046:	4b20      	ldr	r3, [pc, #128]	@ (800e0c8 <tx_buffer_prep+0x1e4>)
 800e048:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800e04a:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b4 <tx_buffer_prep+0x1d0>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	0018      	movs	r0, r3
 800e050:	f7f9 f98c 	bl	800736c <build_chksum>

		if(!flagsTX [0]){
 800e054:	4b14      	ldr	r3, [pc, #80]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2201      	movs	r2, #1
 800e05a:	4053      	eors	r3, r2
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10b      	bne.n	800e07a <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800e062:	4b1e      	ldr	r3, [pc, #120]	@ (800e0dc <tx_buffer_prep+0x1f8>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d108      	bne.n	800e07e <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800e06c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e0 <tx_buffer_prep+0x1fc>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800e072:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a8 <tx_buffer_prep+0x1c4>)
 800e074:	2201      	movs	r2, #1
 800e076:	705a      	strb	r2, [r3, #1]
 800e078:	e002      	b.n	800e080 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800e07a:	46c0      	nop			@ (mov r8, r8)
 800e07c:	e000      	b.n	800e080 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800e07e:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800e080:	4b11      	ldr	r3, [pc, #68]	@ (800e0c8 <tx_buffer_prep+0x1e4>)
 800e082:	781a      	ldrb	r2, [r3, #0]
 800e084:	4b17      	ldr	r3, [pc, #92]	@ (800e0e4 <tx_buffer_prep+0x200>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d200      	bcs.n	800e08e <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800e08c:	e7b0      	b.n	800dff0 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800e08e:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <tx_buffer_prep+0x1dc>)
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800e094:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <tx_buffer_prep+0x200>)
 800e096:	781a      	ldrb	r2, [r3, #0]
 800e098:	4b08      	ldr	r3, [pc, #32]	@ (800e0bc <tx_buffer_prep+0x1d8>)
 800e09a:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800e09c:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800e09e:	46c0      	nop			@ (mov r8, r8)
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	b002      	add	sp, #8
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	46c0      	nop			@ (mov r8, r8)
 800e0a8:	20000f04 	.word	0x20000f04
 800e0ac:	20000ec0 	.word	0x20000ec0
 800e0b0:	20000f20 	.word	0x20000f20
 800e0b4:	20000930 	.word	0x20000930
 800e0b8:	20000ec7 	.word	0x20000ec7
 800e0bc:	20000f1a 	.word	0x20000f1a
 800e0c0:	20000efc 	.word	0x20000efc
 800e0c4:	20000ef8 	.word	0x20000ef8
 800e0c8:	20000f00 	.word	0x20000f00
 800e0cc:	20000f1c 	.word	0x20000f1c
 800e0d0:	20000f01 	.word	0x20000f01
 800e0d4:	20000eec 	.word	0x20000eec
 800e0d8:	20000fc4 	.word	0x20000fc4
 800e0dc:	20000f14 	.word	0x20000f14
 800e0e0:	20000f10 	.word	0x20000f10
 800e0e4:	20000f18 	.word	0x20000f18

0800e0e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e0ec:	f3bf 8f4f 	dsb	sy
}
 800e0f0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e0f2:	4b04      	ldr	r3, [pc, #16]	@ (800e104 <__NVIC_SystemReset+0x1c>)
 800e0f4:	4a04      	ldr	r2, [pc, #16]	@ (800e108 <__NVIC_SystemReset+0x20>)
 800e0f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e0f8:	f3bf 8f4f 	dsb	sy
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e0fe:	46c0      	nop			@ (mov r8, r8)
 800e100:	e7fd      	b.n	800e0fe <__NVIC_SystemReset+0x16>
 800e102:	46c0      	nop			@ (mov r8, r8)
 800e104:	e000ed00 	.word	0xe000ed00
 800e108:	05fa0004 	.word	0x05fa0004

0800e10c <tx_control>:

uint32_t   chksum_to_compare = 0;
uint8_t    contador_bloques_fw = 16;


void tx_control(void){
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b092      	sub	sp, #72	@ 0x48
 800e110:	af00      	add	r7, sp, #0

	//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
	//ld			A,BluetoothState
	//cp			A,#3
	//jrne		end_tx_control_b ; directamente sal de tx_control
	if(BluetoothState != 3)
 800e112:	4bd9      	ldr	r3, [pc, #868]	@ (800e478 <tx_control+0x36c>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	2b03      	cmp	r3, #3
 800e118:	d001      	beq.n	800e11e <tx_control+0x12>
 800e11a:	f003 f94c 	bl	80113b6 <tx_control+0x32aa>
		goto end_tx_control_b;

	//; / define el estado actual de la conexion correspondiente
	//tnz			delayComStat
	//jrne		end_tx_control
	if(delayComStat)
 800e11e:	4bd7      	ldr	r3, [pc, #860]	@ (800e47c <tx_control+0x370>)
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <tx_control+0x1e>
 800e126:	f002 f897 	bl	8010258 <tx_control+0x214c>
		goto end_tx_control;
statDef:
 800e12a:	46c0      	nop			@ (mov r8, r8)
	//tnz			statComFlag
	//jreq		statDef_clr
	if(statComFlag==0)
 800e12c:	4bd4      	ldr	r3, [pc, #848]	@ (800e480 <tx_control+0x374>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d029      	beq.n	800e188 <tx_control+0x7c>
		goto statDef_clr;
	//;si el pin de estado está en 1 , pregunta por que comunicacion está activa
	if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,statDef_WIFI
 800e134:	4bd3      	ldr	r3, [pc, #844]	@ (800e484 <tx_control+0x378>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d11d      	bne.n	800e178 <tx_control+0x6c>
		goto statDef_WIFI;
statDef_BLE:
 800e13c:	46c0      	nop			@ (mov r8, r8)
	flagsTxControl[f_statBLE] = 1;	//bset		flagsTxControl,#f_statBLE
 800e13e:	4bd1      	ldr	r3, [pc, #836]	@ (800e484 <tx_control+0x378>)
 800e140:	2201      	movs	r2, #1
 800e142:	705a      	strb	r2, [r3, #1]
	//ldw		X,#300;
	timeoutTWF = 300;	//ldw		timeoutTWF,X;					/ manten carga time out de Token (5 min)
 800e144:	4bd0      	ldr	r3, [pc, #832]	@ (800e488 <tx_control+0x37c>)
 800e146:	2296      	movs	r2, #150	@ 0x96
 800e148:	0052      	lsls	r2, r2, #1
 800e14a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800e14c:	233f      	movs	r3, #63	@ 0x3f
 800e14e:	18fb      	adds	r3, r7, r3
 800e150:	2200      	movs	r2, #0
 800e152:	701a      	strb	r2, [r3, #0]
 800e154:	e00a      	b.n	800e16c <tx_control+0x60>
		flagsWIFI[i] = 0;
 800e156:	203f      	movs	r0, #63	@ 0x3f
 800e158:	183b      	adds	r3, r7, r0
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	4acb      	ldr	r2, [pc, #812]	@ (800e48c <tx_control+0x380>)
 800e15e:	2100      	movs	r1, #0
 800e160:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800e162:	183b      	adds	r3, r7, r0
 800e164:	781a      	ldrb	r2, [r3, #0]
 800e166:	183b      	adds	r3, r7, r0
 800e168:	3201      	adds	r2, #1
 800e16a:	701a      	strb	r2, [r3, #0]
 800e16c:	233f      	movs	r3, #63	@ 0x3f
 800e16e:	18fb      	adds	r3, r7, r3
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b07      	cmp	r3, #7
 800e174:	d9ef      	bls.n	800e156 <tx_control+0x4a>
	goto end_statDef;//jra			end_statDef
 800e176:	e047      	b.n	800e208 <tx_control+0xfc>
		goto statDef_WIFI;
 800e178:	46c0      	nop			@ (mov r8, r8)
statDef_WIFI:
	flagsTxControl[f_statWIFI] = 1;	//bset		flagsTxControl,#f_statWIFI
 800e17a:	4bc2      	ldr	r3, [pc, #776]	@ (800e484 <tx_control+0x378>)
 800e17c:	2201      	movs	r2, #1
 800e17e:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 255;			// mov			statComWIFIFlag,#255
 800e180:	4bc3      	ldr	r3, [pc, #780]	@ (800e490 <tx_control+0x384>)
 800e182:	22ff      	movs	r2, #255	@ 0xff
 800e184:	701a      	strb	r2, [r3, #0]
	goto end_statDef;				// jra			end_statDef
 800e186:	e03f      	b.n	800e208 <tx_control+0xfc>
		goto statDef_clr;
 800e188:	46c0      	nop			@ (mov r8, r8)
statDef_clr:
	//;pregunta por que comunicacion está inactiva
	//btjt		flagsTxControl,#f_select,statDef_clrWIFI
	if(flagsTxControl[f_select])
 800e18a:	4bbe      	ldr	r3, [pc, #760]	@ (800e484 <tx_control+0x378>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d133      	bne.n	800e1fa <tx_control+0xee>
		goto statDef_clrWIFI;
statDef_clrBLE:
 800e192:	46c0      	nop			@ (mov r8, r8)

	//btjf	flagsTxControl,#f_statBLE,noCancelTx ;// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
	if(!flagsTxControl[f_statBLE])
 800e194:	4bbb      	ldr	r3, [pc, #748]	@ (800e484 <tx_control+0x378>)
 800e196:	785b      	ldrb	r3, [r3, #1]
 800e198:	2201      	movs	r2, #1
 800e19a:	4053      	eors	r3, r2
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d123      	bne.n	800e1ea <tx_control+0xde>
		goto noCancelTx;

	keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 800e1a2:	4bbc      	ldr	r3, [pc, #752]	@ (800e494 <tx_control+0x388>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	701a      	strb	r2, [r3, #0]
	// clr		flagsTX
	//clr		flagsRxFirm
	for(uint8_t i=0 ; i<8 ; i++){
 800e1a8:	233e      	movs	r3, #62	@ 0x3e
 800e1aa:	18fb      	adds	r3, r7, r3
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	701a      	strb	r2, [r3, #0]
 800e1b0:	e00f      	b.n	800e1d2 <tx_control+0xc6>
		flagsTX[i] = 0;
 800e1b2:	203e      	movs	r0, #62	@ 0x3e
 800e1b4:	183b      	adds	r3, r7, r0
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	4ab7      	ldr	r2, [pc, #732]	@ (800e498 <tx_control+0x38c>)
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	54d1      	strb	r1, [r2, r3]
		flagsRxFirm[i] = 0;
 800e1be:	183b      	adds	r3, r7, r0
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	4ab6      	ldr	r2, [pc, #728]	@ (800e49c <tx_control+0x390>)
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0 ; i<8 ; i++){
 800e1c8:	183b      	adds	r3, r7, r0
 800e1ca:	781a      	ldrb	r2, [r3, #0]
 800e1cc:	183b      	adds	r3, r7, r0
 800e1ce:	3201      	adds	r2, #1
 800e1d0:	701a      	strb	r2, [r3, #0]
 800e1d2:	233e      	movs	r3, #62	@ 0x3e
 800e1d4:	18fb      	adds	r3, r7, r3
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b07      	cmp	r3, #7
 800e1da:	d9ea      	bls.n	800e1b2 <tx_control+0xa6>
	}

	flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 800e1dc:	4bb0      	ldr	r3, [pc, #704]	@ (800e4a0 <tx_control+0x394>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	711a      	strb	r2, [r3, #4]
	flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 800e1e2:	4baf      	ldr	r3, [pc, #700]	@ (800e4a0 <tx_control+0x394>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	715a      	strb	r2, [r3, #5]
 800e1e8:	e000      	b.n	800e1ec <tx_control+0xe0>
		goto noCancelTx;
 800e1ea:	46c0      	nop			@ (mov r8, r8)
noCancelTx:

	flagsTxControl[f_statBLE] = 0;		//bres		flagsTxControl,#f_statBLE
 800e1ec:	4ba5      	ldr	r3, [pc, #660]	@ (800e484 <tx_control+0x378>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	705a      	strb	r2, [r3, #1]
	DevLock = 0;						//clr			DevLock;			sí se pierde conexión BLE el candado vuelve a estar activo
 800e1f2:	4bac      	ldr	r3, [pc, #688]	@ (800e4a4 <tx_control+0x398>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	701a      	strb	r2, [r3, #0]
	goto end_statDef;					//jra			end_statDef
 800e1f8:	e006      	b.n	800e208 <tx_control+0xfc>
		goto statDef_clrWIFI;
 800e1fa:	46c0      	nop			@ (mov r8, r8)
statDef_clrWIFI:
	flagsTxControl[f_statWIFI] = 0;		//bres		flagsTxControl,#f_statWIFI
 800e1fc:	4ba1      	ldr	r3, [pc, #644]	@ (800e484 <tx_control+0x378>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 0;				//clr			statComWIFIFlag
 800e202:	4ba3      	ldr	r3, [pc, #652]	@ (800e490 <tx_control+0x384>)
 800e204:	2200      	movs	r2, #0
 800e206:	701a      	strb	r2, [r3, #0]
//;===========================================================
//;										TOKEN BLE
//;===========================================================
tokenBLE:
	//;Token solo se manda cuando está seleccionada la comunicación BLE
	if(!flagsTxControl[f_select])//btjf	flagsTxControl,#f_select,tokenBLE_01
 800e208:	4b9e      	ldr	r3, [pc, #632]	@ (800e484 <tx_control+0x378>)
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	2201      	movs	r2, #1
 800e20e:	4053      	eors	r3, r2
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d058      	beq.n	800e2c8 <tx_control+0x1bc>
		goto tokenBLE_01;
 800e216:	46c0      	nop			@ (mov r8, r8)
tokenBLE_01:

//	btjt	flagsRxFirm,#0,tokenBLE_02; Empezó recepción de Firmware ?
//	btjt	flagsLogger,#5,tokenBLE_02; Empezó Tx logger datos
//	btjt	flagsLogger,#4,tokenBLE_02; Empezó Tx logger eventos
	if(flagsRxFirm[0] || flagsLogger[4] || flagsLogger[5])
 800e218:	4ba0      	ldr	r3, [pc, #640]	@ (800e49c <tx_control+0x390>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d117      	bne.n	800e250 <tx_control+0x144>
 800e220:	4b9f      	ldr	r3, [pc, #636]	@ (800e4a0 <tx_control+0x394>)
 800e222:	791b      	ldrb	r3, [r3, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d113      	bne.n	800e250 <tx_control+0x144>
 800e228:	4b9d      	ldr	r3, [pc, #628]	@ (800e4a0 <tx_control+0x394>)
 800e22a:	795b      	ldrb	r3, [r3, #5]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10f      	bne.n	800e250 <tx_control+0x144>
		goto tokenBLE_02;

	//tnz		codeTX
	if(codeTX == 0)//jreq	tx_tokenBLE;			/se recibió algun comando valido? No, checa sí hay que mandar token
 800e230:	4b9d      	ldr	r3, [pc, #628]	@ (800e4a8 <tx_control+0x39c>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d019      	beq.n	800e26c <tx_control+0x160>
		goto tx_tokenBLE;
	//;Interpreta comando

	//ld		A,codeTX
	//cp		A,#$80;						/ se recibió respuesta WIFI ?
	if(codeTX == 0x80)		//jreq	finTokenBLE
 800e238:	4b9b      	ldr	r3, [pc, #620]	@ (800e4a8 <tx_control+0x39c>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b80      	cmp	r3, #128	@ 0x80
 800e23e:	d045      	beq.n	800e2cc <tx_control+0x1c0>
		goto finTokenBLE;
	//cp		A,#$81;						/ se recibió respuesta BLE ?
	if(codeTX != 0x81)		//jrne	tokenBLE_03;			/ no, es otro comando, deja correr la ejecución
 800e240:	4b99      	ldr	r3, [pc, #612]	@ (800e4a8 <tx_control+0x39c>)
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	2b81      	cmp	r3, #129	@ 0x81
 800e246:	d108      	bne.n	800e25a <tx_control+0x14e>
		goto tokenBLE_03;
	codeTX = 0;				// clr		codeTX;						/ sí, limpia código de Tx
 800e248:	4b97      	ldr	r3, [pc, #604]	@ (800e4a8 <tx_control+0x39c>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	701a      	strb	r2, [r3, #0]
 800e24e:	e000      	b.n	800e252 <tx_control+0x146>
		goto tokenBLE_02;
 800e250:	46c0      	nop			@ (mov r8, r8)
tokenBLE_02:
	flagsTX2[2] = 1;		//bset	flagsTX2,#2;			/ sí se recibió repuesta, levanta bandera de token recibido
 800e252:	4b96      	ldr	r3, [pc, #600]	@ (800e4ac <tx_control+0x3a0>)
 800e254:	2201      	movs	r2, #1
 800e256:	709a      	strb	r2, [r3, #2]
 800e258:	e000      	b.n	800e25c <tx_control+0x150>
		goto tokenBLE_03;
 800e25a:	46c0      	nop			@ (mov r8, r8)

tokenBLE_03:
	//; la recepccion de cualquier comando tomala como una respuesta de  modulo de counicación
	timeTxTBLE = 20;			//mov		timeTxTBLE,#20;		/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e25c:	4b94      	ldr	r3, [pc, #592]	@ (800e4b0 <tx_control+0x3a4>)
 800e25e:	2214      	movs	r2, #20
 800e260:	701a      	strb	r2, [r3, #0]
	//ldw		X,#300;
	timeoutTBLE = 300;			//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 800e262:	4b94      	ldr	r3, [pc, #592]	@ (800e4b4 <tx_control+0x3a8>)
 800e264:	2296      	movs	r2, #150	@ 0x96
 800e266:	0052      	lsls	r2, r2, #1
 800e268:	801a      	strh	r2, [r3, #0]
	goto finTokenBLE;			//jra		finTokenBLE
 800e26a:	e034      	b.n	800e2d6 <tx_control+0x1ca>
		goto tx_tokenBLE;
 800e26c:	46c0      	nop			@ (mov r8, r8)

tx_tokenBLE:
	//tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx)//jrne	finTokenBLE;						/ espera a que terminé
 800e26e:	4b89      	ldr	r3, [pc, #548]	@ (800e494 <tx_control+0x388>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d12c      	bne.n	800e2d0 <tx_control+0x1c4>
		goto finTokenBLE;
	//tnz		timeTxTBLE;						/ ya se cumplió tiempo para enviar Token Wifi ?
	if(timeTxTBLE)//jrne	finTokenBLE;					/ no, continua
 800e276:	4b8e      	ldr	r3, [pc, #568]	@ (800e4b0 <tx_control+0x3a4>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d12a      	bne.n	800e2d4 <tx_control+0x1c8>
		goto finTokenBLE;

	timeTxTBLE = 20;//mov		timeTxTBLE,#20;				/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e27e:	4b8c      	ldr	r3, [pc, #560]	@ (800e4b0 <tx_control+0x3a4>)
 800e280:	2214      	movs	r2, #20
 800e282:	701a      	strb	r2, [r3, #0]

	//ldw		X,#$40FA
	//ldw		bufferTxControl,X
	bufferTxControl[0] = 0x40;
 800e284:	4b8c      	ldr	r3, [pc, #560]	@ (800e4b8 <tx_control+0x3ac>)
 800e286:	2240      	movs	r2, #64	@ 0x40
 800e288:	701a      	strb	r2, [r3, #0]
	bufferTxControl[1] = 0xFA;
 800e28a:	4b8b      	ldr	r3, [pc, #556]	@ (800e4b8 <tx_control+0x3ac>)
 800e28c:	22fa      	movs	r2, #250	@ 0xfa
 800e28e:	705a      	strb	r2, [r3, #1]
	flagsTX[2] = 0;				//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e290:	4b81      	ldr	r3, [pc, #516]	@ (800e498 <tx_control+0x38c>)
 800e292:	2200      	movs	r2, #0
 800e294:	709a      	strb	r2, [r3, #2]
	//ldw		pointTx,X
	//ldw		pointInitTx,X
	//incw	X
	//ldw		pointEndTx,X
	//mov		blockSizeTX,#2
	pointTx = &bufferTxControl[0];
 800e296:	4b89      	ldr	r3, [pc, #548]	@ (800e4bc <tx_control+0x3b0>)
 800e298:	4a87      	ldr	r2, [pc, #540]	@ (800e4b8 <tx_control+0x3ac>)
 800e29a:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e29c:	4b88      	ldr	r3, [pc, #544]	@ (800e4c0 <tx_control+0x3b4>)
 800e29e:	4a86      	ldr	r2, [pc, #536]	@ (800e4b8 <tx_control+0x3ac>)
 800e2a0:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[2];
 800e2a2:	4b88      	ldr	r3, [pc, #544]	@ (800e4c4 <tx_control+0x3b8>)
 800e2a4:	4a88      	ldr	r2, [pc, #544]	@ (800e4c8 <tx_control+0x3bc>)
 800e2a6:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800e2a8:	4b88      	ldr	r3, [pc, #544]	@ (800e4cc <tx_control+0x3c0>)
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	701a      	strb	r2, [r3, #0]

	//clrw	X
	//ldw		chksum_HW,X
	//ldw		chksum_LW,X;					/ limpia registros de checksum
	chksum_32_HW_LW = 0;
 800e2ae:	4b88      	ldr	r3, [pc, #544]	@ (800e4d0 <tx_control+0x3c4>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;					// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e2b4:	4b78      	ldr	r3, [pc, #480]	@ (800e498 <tx_control+0x38c>)
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;					//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e2ba:	4b76      	ldr	r3, [pc, #472]	@ (800e494 <tx_control+0x388>)
 800e2bc:	2255      	movs	r2, #85	@ 0x55
 800e2be:	701a      	strb	r2, [r3, #0]
	codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800e2c0:	4b79      	ldr	r3, [pc, #484]	@ (800e4a8 <tx_control+0x39c>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	701a      	strb	r2, [r3, #0]

	goto finTokenBLE;//jra		finTokenBLE
 800e2c6:	e006      	b.n	800e2d6 <tx_control+0x1ca>
	goto finTokenBLE;//jra		finTokenBLE
 800e2c8:	46c0      	nop			@ (mov r8, r8)
 800e2ca:	e004      	b.n	800e2d6 <tx_control+0x1ca>
		goto finTokenBLE;
 800e2cc:	46c0      	nop			@ (mov r8, r8)
 800e2ce:	e002      	b.n	800e2d6 <tx_control+0x1ca>
		goto finTokenBLE;
 800e2d0:	46c0      	nop			@ (mov r8, r8)
 800e2d2:	e000      	b.n	800e2d6 <tx_control+0x1ca>
		goto finTokenBLE;
 800e2d4:	46c0      	nop			@ (mov r8, r8)
//;										TOKEN WiFi
//;===========================================================
tokenWiFi:

	//;Token solo se manda cuando está seleccionada la comunicación WIFI
	if(flagsTxControl[f_select])	//btjt	flagsTxControl,#f_select,tokenWiFi_01
 800e2d6:	4b6b      	ldr	r3, [pc, #428]	@ (800e484 <tx_control+0x378>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d100      	bne.n	800e2e0 <tx_control+0x1d4>
 800e2de:	e12f      	b.n	800e540 <tx_control+0x434>
		goto tokenWiFi_01;
 800e2e0:	46c0      	nop			@ (mov r8, r8)
	goto finTokenWiFi;				//jra		finTokenWiFi
tokenWiFi_01:

	//btjt	flagsWIFI,#f_timeLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	//btjt	flagsWIFI,#f_eventLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	if(flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800e2e2:	4b6a      	ldr	r3, [pc, #424]	@ (800e48c <tx_control+0x380>)
 800e2e4:	78db      	ldrb	r3, [r3, #3]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d130      	bne.n	800e34c <tx_control+0x240>
 800e2ea:	4b68      	ldr	r3, [pc, #416]	@ (800e48c <tx_control+0x380>)
 800e2ec:	791b      	ldrb	r3, [r3, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d12c      	bne.n	800e34c <tx_control+0x240>
		goto tokenWiFi_02;

	//ldw		X,cntSetName
	//tnzw	X
	if(cntSetName)//jrne	tokenWiFi_02
 800e2f2:	4b78      	ldr	r3, [pc, #480]	@ (800e4d4 <tx_control+0x3c8>)
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d12a      	bne.n	800e350 <tx_control+0x244>
		goto tokenWiFi_02;

	//ldw			X,#600
	cntSetName = 600;	//ldw			cntSetName,X
 800e2fa:	4b76      	ldr	r3, [pc, #472]	@ (800e4d4 <tx_control+0x3c8>)
 800e2fc:	2296      	movs	r2, #150	@ 0x96
 800e2fe:	0092      	lsls	r2, r2, #2
 800e300:	801a      	strh	r2, [r3, #0]

	//;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
	//;copia los datos al buffer de tx
	//ldw		X,#difName
	//ldw		Y,#bufferTxControl
	wreg = 50;//mov		wreg,#50
 800e302:	4b75      	ldr	r3, [pc, #468]	@ (800e4d8 <tx_control+0x3cc>)
 800e304:	2232      	movs	r2, #50	@ 0x32
 800e306:	701a      	strb	r2, [r3, #0]
	copyVector(&difName[0],&bufferTxControl[0]);//call	copyVector
 800e308:	4a6b      	ldr	r2, [pc, #428]	@ (800e4b8 <tx_control+0x3ac>)
 800e30a:	4b74      	ldr	r3, [pc, #464]	@ (800e4dc <tx_control+0x3d0>)
 800e30c:	0011      	movs	r1, r2
 800e30e:	0018      	movs	r0, r3
 800e310:	f7f9 f808 	bl	8007324 <copyVector>
//	ldw		pointTx,X
//	ldw		pointInitTx,X
//	ldw		X,#(bufferTxControl+50)
//	ldw		pointEndTx,X
//	mov		blockSizeTX,#50
	pointTx = &bufferTxControl[0];
 800e314:	4b69      	ldr	r3, [pc, #420]	@ (800e4bc <tx_control+0x3b0>)
 800e316:	4a68      	ldr	r2, [pc, #416]	@ (800e4b8 <tx_control+0x3ac>)
 800e318:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e31a:	4b69      	ldr	r3, [pc, #420]	@ (800e4c0 <tx_control+0x3b4>)
 800e31c:	4a66      	ldr	r2, [pc, #408]	@ (800e4b8 <tx_control+0x3ac>)
 800e31e:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[50];
 800e320:	4b68      	ldr	r3, [pc, #416]	@ (800e4c4 <tx_control+0x3b8>)
 800e322:	4a6f      	ldr	r2, [pc, #444]	@ (800e4e0 <tx_control+0x3d4>)
 800e324:	601a      	str	r2, [r3, #0]
	blockSizeTX = 50;
 800e326:	4b69      	ldr	r3, [pc, #420]	@ (800e4cc <tx_control+0x3c0>)
 800e328:	2232      	movs	r2, #50	@ 0x32
 800e32a:	701a      	strb	r2, [r3, #0]

	flagsTX[2] = 0;		//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e32c:	4b5a      	ldr	r3, [pc, #360]	@ (800e498 <tx_control+0x38c>)
 800e32e:	2200      	movs	r2, #0
 800e330:	709a      	strb	r2, [r3, #2]

	//clrw	X
	//ldw		chksum_HW,X
	chksum_32_HW_LW = 0;		//ldw		chksum_LW,X;					/ limpia registros de checksum
 800e332:	4b67      	ldr	r3, [pc, #412]	@ (800e4d0 <tx_control+0x3c4>)
 800e334:	2200      	movs	r2, #0
 800e336:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;				//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e338:	4b57      	ldr	r3, [pc, #348]	@ (800e498 <tx_control+0x38c>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;				//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e33e:	4b55      	ldr	r3, [pc, #340]	@ (800e494 <tx_control+0x388>)
 800e340:	2255      	movs	r2, #85	@ 0x55
 800e342:	701a      	strb	r2, [r3, #0]
	codeTX= 0;					//clr		codeTX;								/ limpia código de Tx
 800e344:	4b58      	ldr	r3, [pc, #352]	@ (800e4a8 <tx_control+0x39c>)
 800e346:	2200      	movs	r2, #0
 800e348:	701a      	strb	r2, [r3, #0]

	goto finTokenWiFi;//jra		finTokenWiFi
 800e34a:	e0fe      	b.n	800e54a <tx_control+0x43e>
		goto tokenWiFi_02;
 800e34c:	46c0      	nop			@ (mov r8, r8)
 800e34e:	e000      	b.n	800e352 <tx_control+0x246>
		goto tokenWiFi_02;
 800e350:	46c0      	nop			@ (mov r8, r8)
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800e352:	4b52      	ldr	r3, [pc, #328]	@ (800e49c <tx_control+0x390>)
 800e354:	781a      	ldrb	r2, [r3, #0]
 800e356:	4b52      	ldr	r3, [pc, #328]	@ (800e4a0 <tx_control+0x394>)
 800e358:	795b      	ldrb	r3, [r3, #5]
 800e35a:	4313      	orrs	r3, r2
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	4b50      	ldr	r3, [pc, #320]	@ (800e4a0 <tx_control+0x394>)
 800e360:	791b      	ldrb	r3, [r3, #4]
 800e362:	4313      	orrs	r3, r2
 800e364:	b2da      	uxtb	r2, r3
 800e366:	4b49      	ldr	r3, [pc, #292]	@ (800e48c <tx_control+0x380>)
 800e368:	78db      	ldrb	r3, [r3, #3]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	4b47      	ldr	r3, [pc, #284]	@ (800e48c <tx_control+0x380>)
 800e370:	791b      	ldrb	r3, [r3, #4]
 800e372:	4313      	orrs	r3, r2
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d000      	beq.n	800e37c <tx_control+0x270>
 800e37a:	e0d9      	b.n	800e530 <tx_control+0x424>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800e37c:	4b4a      	ldr	r3, [pc, #296]	@ (800e4a8 <tx_control+0x39c>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d000      	beq.n	800e386 <tx_control+0x27a>
 800e384:	e0ca      	b.n	800e51c <tx_control+0x410>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800e386:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800e388:	4b42      	ldr	r3, [pc, #264]	@ (800e494 <tx_control+0x388>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d000      	beq.n	800e392 <tx_control+0x286>
 800e390:	e0d8      	b.n	800e544 <tx_control+0x438>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800e392:	4b54      	ldr	r3, [pc, #336]	@ (800e4e4 <tx_control+0x3d8>)
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d152      	bne.n	800e440 <tx_control+0x334>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800e39a:	4b52      	ldr	r3, [pc, #328]	@ (800e4e4 <tx_control+0x3d8>)
 800e39c:	221e      	movs	r2, #30
 800e39e:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800e3a0:	4b45      	ldr	r3, [pc, #276]	@ (800e4b8 <tx_control+0x3ac>)
 800e3a2:	2240      	movs	r2, #64	@ 0x40
 800e3a4:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800e3a6:	4b44      	ldr	r3, [pc, #272]	@ (800e4b8 <tx_control+0x3ac>)
 800e3a8:	22f8      	movs	r2, #248	@ 0xf8
 800e3aa:	705a      	strb	r2, [r3, #1]
//		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
//		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
//		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
//		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X

		bufferTxControl[2] = reeLat1;	//ldw X,eeLat1
 800e3ac:	4b4e      	ldr	r3, [pc, #312]	@ (800e4e8 <tx_control+0x3dc>)
 800e3ae:	781a      	ldrb	r2, [r3, #0]
 800e3b0:	4b41      	ldr	r3, [pc, #260]	@ (800e4b8 <tx_control+0x3ac>)
 800e3b2:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = reeLat2;	//ldw bufferTxControl+2,X
 800e3b4:	4b4d      	ldr	r3, [pc, #308]	@ (800e4ec <tx_control+0x3e0>)
 800e3b6:	781a      	ldrb	r2, [r3, #0]
 800e3b8:	4b3f      	ldr	r3, [pc, #252]	@ (800e4b8 <tx_control+0x3ac>)
 800e3ba:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = reeLat3;	//ldw X,eeLat3
 800e3bc:	4b4c      	ldr	r3, [pc, #304]	@ (800e4f0 <tx_control+0x3e4>)
 800e3be:	781a      	ldrb	r2, [r3, #0]
 800e3c0:	4b3d      	ldr	r3, [pc, #244]	@ (800e4b8 <tx_control+0x3ac>)
 800e3c2:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = reeLat4;	//ldw bufferTxControl+4,X
 800e3c4:	4b4b      	ldr	r3, [pc, #300]	@ (800e4f4 <tx_control+0x3e8>)
 800e3c6:	781a      	ldrb	r2, [r3, #0]
 800e3c8:	4b3b      	ldr	r3, [pc, #236]	@ (800e4b8 <tx_control+0x3ac>)
 800e3ca:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = reeLong1;	//ldw X,eeLong1
 800e3cc:	4b4a      	ldr	r3, [pc, #296]	@ (800e4f8 <tx_control+0x3ec>)
 800e3ce:	781a      	ldrb	r2, [r3, #0]
 800e3d0:	4b39      	ldr	r3, [pc, #228]	@ (800e4b8 <tx_control+0x3ac>)
 800e3d2:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = reeLong2;	//ldw bufferTxControl+6,X
 800e3d4:	4b49      	ldr	r3, [pc, #292]	@ (800e4fc <tx_control+0x3f0>)
 800e3d6:	781a      	ldrb	r2, [r3, #0]
 800e3d8:	4b37      	ldr	r3, [pc, #220]	@ (800e4b8 <tx_control+0x3ac>)
 800e3da:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = reeLong3;	//ldw X,eeLong3
 800e3dc:	4b48      	ldr	r3, [pc, #288]	@ (800e500 <tx_control+0x3f4>)
 800e3de:	781a      	ldrb	r2, [r3, #0]
 800e3e0:	4b35      	ldr	r3, [pc, #212]	@ (800e4b8 <tx_control+0x3ac>)
 800e3e2:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = reeLong4;	//ldw bufferTxControl+8,X
 800e3e4:	4b47      	ldr	r3, [pc, #284]	@ (800e504 <tx_control+0x3f8>)
 800e3e6:	781a      	ldrb	r2, [r3, #0]
 800e3e8:	4b33      	ldr	r3, [pc, #204]	@ (800e4b8 <tx_control+0x3ac>)
 800e3ea:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = versionFirm1;
 800e3ec:	4b46      	ldr	r3, [pc, #280]	@ (800e508 <tx_control+0x3fc>)
 800e3ee:	781a      	ldrb	r2, [r3, #0]
 800e3f0:	4b31      	ldr	r3, [pc, #196]	@ (800e4b8 <tx_control+0x3ac>)
 800e3f2:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = versionFirm2;
 800e3f4:	4b45      	ldr	r3, [pc, #276]	@ (800e50c <tx_control+0x400>)
 800e3f6:	781a      	ldrb	r2, [r3, #0]
 800e3f8:	4b2f      	ldr	r3, [pc, #188]	@ (800e4b8 <tx_control+0x3ac>)
 800e3fa:	72da      	strb	r2, [r3, #11]
		bufferTxControl[12] = fm_hardware;
 800e3fc:	4b44      	ldr	r3, [pc, #272]	@ (800e510 <tx_control+0x404>)
 800e3fe:	781a      	ldrb	r2, [r3, #0]
 800e400:	4b2d      	ldr	r3, [pc, #180]	@ (800e4b8 <tx_control+0x3ac>)
 800e402:	731a      	strb	r2, [r3, #12]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800e404:	4b24      	ldr	r3, [pc, #144]	@ (800e498 <tx_control+0x38c>)
 800e406:	2200      	movs	r2, #0
 800e408:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800e40a:	4b2b      	ldr	r3, [pc, #172]	@ (800e4b8 <tx_control+0x3ac>)
 800e40c:	647b      	str	r3, [r7, #68]	@ 0x44
		pointTx = point_X;				// ldw		pointTx,X
 800e40e:	4b2b      	ldr	r3, [pc, #172]	@ (800e4bc <tx_control+0x3b0>)
 800e410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e412:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800e414:	4b2a      	ldr	r3, [pc, #168]	@ (800e4c0 <tx_control+0x3b4>)
 800e416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e418:	601a      	str	r2, [r3, #0]

		//pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
    										// ldw		pointEndTx,X
		pointEndTx = &bufferTxControl[13];
 800e41a:	4b2a      	ldr	r3, [pc, #168]	@ (800e4c4 <tx_control+0x3b8>)
 800e41c:	4a3d      	ldr	r2, [pc, #244]	@ (800e514 <tx_control+0x408>)
 800e41e:	601a      	str	r2, [r3, #0]
		//blockSizeTX = 10;						// mov		blockSizeTX,#10
		blockSizeTX = 13;
 800e420:	4b2a      	ldr	r3, [pc, #168]	@ (800e4cc <tx_control+0x3c0>)
 800e422:	220d      	movs	r2, #13
 800e424:	701a      	strb	r2, [r3, #0]
		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800e426:	4b2a      	ldr	r3, [pc, #168]	@ (800e4d0 <tx_control+0x3c4>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e42c:	4b1a      	ldr	r3, [pc, #104]	@ (800e498 <tx_control+0x38c>)
 800e42e:	2201      	movs	r2, #1
 800e430:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800e432:	4b18      	ldr	r3, [pc, #96]	@ (800e494 <tx_control+0x388>)
 800e434:	2255      	movs	r2, #85	@ 0x55
 800e436:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800e438:	4b1b      	ldr	r3, [pc, #108]	@ (800e4a8 <tx_control+0x39c>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800e43e:	e084      	b.n	800e54a <tx_control+0x43e>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800e440:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800e442:	4b19      	ldr	r3, [pc, #100]	@ (800e4a8 <tx_control+0x39c>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2b80      	cmp	r3, #128	@ 0x80
 800e448:	d00f      	beq.n	800e46a <tx_control+0x35e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800e44a:	4b0f      	ldr	r3, [pc, #60]	@ (800e488 <tx_control+0x37c>)
 800e44c:	881b      	ldrh	r3, [r3, #0]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d000      	beq.n	800e454 <tx_control+0x348>
 800e452:	e079      	b.n	800e548 <tx_control+0x43c>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800e454:	4b15      	ldr	r3, [pc, #84]	@ (800e4ac <tx_control+0x3a0>)
 800e456:	2200      	movs	r2, #0
 800e458:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800e45a:	4b2f      	ldr	r3, [pc, #188]	@ (800e518 <tx_control+0x40c>)
 800e45c:	2205      	movs	r2, #5
 800e45e:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800e460:	4b09      	ldr	r3, [pc, #36]	@ (800e488 <tx_control+0x37c>)
 800e462:	2296      	movs	r2, #150	@ 0x96
 800e464:	0052      	lsls	r2, r2, #1
 800e466:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800e468:	e06f      	b.n	800e54a <tx_control+0x43e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800e46a:	46c0      	nop			@ (mov r8, r8)
 800e46c:	e000      	b.n	800e470 <tx_control+0x364>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800e46e:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800e470:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a8 <tx_control+0x39c>)
 800e472:	2200      	movs	r2, #0
 800e474:	701a      	strb	r2, [r3, #0]
 800e476:	e052      	b.n	800e51e <tx_control+0x412>
 800e478:	2000004c 	.word	0x2000004c
 800e47c:	200011dc 	.word	0x200011dc
 800e480:	200011de 	.word	0x200011de
 800e484:	200011d4 	.word	0x200011d4
 800e488:	20001034 	.word	0x20001034
 800e48c:	20001038 	.word	0x20001038
 800e490:	200011df 	.word	0x200011df
 800e494:	20000f01 	.word	0x20000f01
 800e498:	20000f04 	.word	0x20000f04
 800e49c:	20000fc4 	.word	0x20000fc4
 800e4a0:	20000eec 	.word	0x20000eec
 800e4a4:	200011dd 	.word	0x200011dd
 800e4a8:	20000f0c 	.word	0x20000f0c
 800e4ac:	2000102c 	.word	0x2000102c
 800e4b0:	200011e2 	.word	0x200011e2
 800e4b4:	200011e4 	.word	0x200011e4
 800e4b8:	20001090 	.word	0x20001090
 800e4bc:	20000efc 	.word	0x20000efc
 800e4c0:	20000ef4 	.word	0x20000ef4
 800e4c4:	20000ef8 	.word	0x20000ef8
 800e4c8:	20001092 	.word	0x20001092
 800e4cc:	20000f18 	.word	0x20000f18
 800e4d0:	20000f1c 	.word	0x20000f1c
 800e4d4:	200011e0 	.word	0x200011e0
 800e4d8:	20000bb3 	.word	0x20000bb3
 800e4dc:	20000228 	.word	0x20000228
 800e4e0:	200010c2 	.word	0x200010c2
 800e4e4:	20001022 	.word	0x20001022
 800e4e8:	200001bb 	.word	0x200001bb
 800e4ec:	200001bc 	.word	0x200001bc
 800e4f0:	200001bd 	.word	0x200001bd
 800e4f4:	200001be 	.word	0x200001be
 800e4f8:	200001bf 	.word	0x200001bf
 800e4fc:	200001c0 	.word	0x200001c0
 800e500:	200001c1 	.word	0x200001c1
 800e504:	200001c2 	.word	0x200001c2
 800e508:	0801eff0 	.word	0x0801eff0
 800e50c:	0801eff1 	.word	0x0801eff1
 800e510:	0801eff2 	.word	0x0801eff2
 800e514:	2000109d 	.word	0x2000109d
 800e518:	20000fd0 	.word	0x20000fd0
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800e51c:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800e51e:	4be4      	ldr	r3, [pc, #912]	@ (800e8b0 <tx_control+0x7a4>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	2b80      	cmp	r3, #128	@ 0x80
 800e524:	d0a3      	beq.n	800e46e <tx_control+0x362>
		}
		timeoutTWF = 300;
 800e526:	4be3      	ldr	r3, [pc, #908]	@ (800e8b4 <tx_control+0x7a8>)
 800e528:	2296      	movs	r2, #150	@ 0x96
 800e52a:	0052      	lsls	r2, r2, #1
 800e52c:	801a      	strh	r2, [r3, #0]
 800e52e:	e000      	b.n	800e532 <tx_control+0x426>
			goto rx_tokenWiFi_02;
 800e530:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi_02:

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800e532:	4be1      	ldr	r3, [pc, #900]	@ (800e8b8 <tx_control+0x7ac>)
 800e534:	221e      	movs	r2, #30
 800e536:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800e538:	4be0      	ldr	r3, [pc, #896]	@ (800e8bc <tx_control+0x7b0>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		//timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800e53e:	e004      	b.n	800e54a <tx_control+0x43e>
	goto finTokenWiFi;				//jra		finTokenWiFi
 800e540:	46c0      	nop			@ (mov r8, r8)
 800e542:	e002      	b.n	800e54a <tx_control+0x43e>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800e544:	46c0      	nop			@ (mov r8, r8)
 800e546:	e000      	b.n	800e54a <tx_control+0x43e>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800e548:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800e54a:	4bdc      	ldr	r3, [pc, #880]	@ (800e8bc <tx_control+0x7b0>)
 800e54c:	785b      	ldrb	r3, [r3, #1]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <tx_control+0x44a>
 800e552:	f001 fe83 	bl	801025c <tx_control+0x2150>
			goto tokenWiFi_OK;
 800e556:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800e558:	4bd9      	ldr	r3, [pc, #868]	@ (800e8c0 <tx_control+0x7b4>)
 800e55a:	78db      	ldrb	r3, [r3, #3]
 800e55c:	2201      	movs	r2, #1
 800e55e:	4053      	eors	r3, r2
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <tx_control+0x45e>
 800e566:	f000 fcc3 	bl	800eef0 <tx_control+0xde4>
			goto tx_control_00;
 800e56a:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800e56c:	4bd4      	ldr	r3, [pc, #848]	@ (800e8c0 <tx_control+0x7b4>)
 800e56e:	791b      	ldrb	r3, [r3, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	4053      	eors	r3, r2
 800e574:	b2db      	uxtb	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d101      	bne.n	800e57e <tx_control+0x472>
 800e57a:	f000 fcbb 	bl	800eef4 <tx_control+0xde8>
			goto tx_control_00b;
 800e57e:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800e580:	4bd0      	ldr	r3, [pc, #832]	@ (800e8c4 <tx_control+0x7b8>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2201      	movs	r2, #1
 800e586:	4053      	eors	r3, r2
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d13a      	bne.n	800e604 <tx_control+0x4f8>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e58e:	4bce      	ldr	r3, [pc, #824]	@ (800e8c8 <tx_control+0x7bc>)
 800e590:	22f1      	movs	r2, #241	@ 0xf1
 800e592:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800e594:	4bc7      	ldr	r3, [pc, #796]	@ (800e8b4 <tx_control+0x7a8>)
 800e596:	2296      	movs	r2, #150	@ 0x96
 800e598:	0052      	lsls	r2, r2, #1
 800e59a:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800e59c:	4bcb      	ldr	r3, [pc, #812]	@ (800e8cc <tx_control+0x7c0>)
 800e59e:	2296      	movs	r2, #150	@ 0x96
 800e5a0:	0052      	lsls	r2, r2, #1
 800e5a2:	801a      	strh	r2, [r3, #0]
		if(timeOutRx != 0){//tnz timeOutRx
 800e5a4:	4bca      	ldr	r3, [pc, #808]	@ (800e8d0 <tx_control+0x7c4>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d118      	bne.n	800e5de <tx_control+0x4d2>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e5ac:	233d      	movs	r3, #61	@ 0x3d
 800e5ae:	18fb      	adds	r3, r7, r3
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	701a      	strb	r2, [r3, #0]
 800e5b4:	e00a      	b.n	800e5cc <tx_control+0x4c0>
			flagsRxFirm [i]= 0;
 800e5b6:	203d      	movs	r0, #61	@ 0x3d
 800e5b8:	183b      	adds	r3, r7, r0
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	4ac1      	ldr	r2, [pc, #772]	@ (800e8c4 <tx_control+0x7b8>)
 800e5be:	2100      	movs	r1, #0
 800e5c0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e5c2:	183b      	adds	r3, r7, r0
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	183b      	adds	r3, r7, r0
 800e5c8:	3201      	adds	r2, #1
 800e5ca:	701a      	strb	r2, [r3, #0]
 800e5cc:	233d      	movs	r3, #61	@ 0x3d
 800e5ce:	18fb      	adds	r3, r7, r3
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b07      	cmp	r3, #7
 800e5d4:	d9ef      	bls.n	800e5b6 <tx_control+0x4aa>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800e5d6:	4bb6      	ldr	r3, [pc, #728]	@ (800e8b0 <tx_control+0x7a4>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800e5dc:	e013      	b.n	800e606 <tx_control+0x4fa>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800e5de:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800e5e0:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800e5e2:	4bbc      	ldr	r3, [pc, #752]	@ (800e8d4 <tx_control+0x7c8>)
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800e5e8:	4bba      	ldr	r3, [pc, #744]	@ (800e8d4 <tx_control+0x7c8>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800e5ee:	4bb5      	ldr	r3, [pc, #724]	@ (800e8c4 <tx_control+0x7b8>)
 800e5f0:	78db      	ldrb	r3, [r3, #3]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	4053      	eors	r3, r2
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <tx_control+0x4f4>
 800e5fc:	f001 f925 	bl	800f84a <tx_control+0x173e>
				goto rx_firmware01;
 800e600:	f001 f81d 	bl	800f63e <tx_control+0x1532>
			goto ask_tx_control_01;
 800e604:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800e606:	4baa      	ldr	r3, [pc, #680]	@ (800e8b0 <tx_control+0x7a4>)
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	2b21      	cmp	r3, #33	@ 0x21
 800e60c:	d131      	bne.n	800e672 <tx_control+0x566>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e60e:	4bae      	ldr	r3, [pc, #696]	@ (800e8c8 <tx_control+0x7bc>)
 800e610:	22f1      	movs	r2, #241	@ 0xf1
 800e612:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800e614:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800e616:	4bb0      	ldr	r3, [pc, #704]	@ (800e8d8 <tx_control+0x7cc>)
 800e618:	22f1      	movs	r2, #241	@ 0xf1
 800e61a:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800e61c:	4bae      	ldr	r3, [pc, #696]	@ (800e8d8 <tx_control+0x7cc>)
 800e61e:	223f      	movs	r2, #63	@ 0x3f
 800e620:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800e622:	4bae      	ldr	r3, [pc, #696]	@ (800e8dc <tx_control+0x7d0>)
 800e624:	781a      	ldrb	r2, [r3, #0]
 800e626:	4bac      	ldr	r3, [pc, #688]	@ (800e8d8 <tx_control+0x7cc>)
 800e628:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800e62a:	4bad      	ldr	r3, [pc, #692]	@ (800e8e0 <tx_control+0x7d4>)
 800e62c:	781a      	ldrb	r2, [r3, #0]
 800e62e:	4baa      	ldr	r3, [pc, #680]	@ (800e8d8 <tx_control+0x7cc>)
 800e630:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800e632:	4bac      	ldr	r3, [pc, #688]	@ (800e8e4 <tx_control+0x7d8>)
 800e634:	781a      	ldrb	r2, [r3, #0]
 800e636:	4ba8      	ldr	r3, [pc, #672]	@ (800e8d8 <tx_control+0x7cc>)
 800e638:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800e63a:	4bab      	ldr	r3, [pc, #684]	@ (800e8e8 <tx_control+0x7dc>)
 800e63c:	227d      	movs	r2, #125	@ 0x7d
 800e63e:	5c9a      	ldrb	r2, [r3, r2]
 800e640:	4ba5      	ldr	r3, [pc, #660]	@ (800e8d8 <tx_control+0x7cc>)
 800e642:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800e644:	4ba8      	ldr	r3, [pc, #672]	@ (800e8e8 <tx_control+0x7dc>)
 800e646:	227e      	movs	r2, #126	@ 0x7e
 800e648:	5c9a      	ldrb	r2, [r3, r2]
 800e64a:	4ba3      	ldr	r3, [pc, #652]	@ (800e8d8 <tx_control+0x7cc>)
 800e64c:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800e64e:	4ba7      	ldr	r3, [pc, #668]	@ (800e8ec <tx_control+0x7e0>)
 800e650:	781a      	ldrb	r2, [r3, #0]
 800e652:	4ba1      	ldr	r3, [pc, #644]	@ (800e8d8 <tx_control+0x7cc>)
 800e654:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800e656:	4ba6      	ldr	r3, [pc, #664]	@ (800e8f0 <tx_control+0x7e4>)
 800e658:	781a      	ldrb	r2, [r3, #0]
 800e65a:	4b9f      	ldr	r3, [pc, #636]	@ (800e8d8 <tx_control+0x7cc>)
 800e65c:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800e65e:	4b9e      	ldr	r3, [pc, #632]	@ (800e8d8 <tx_control+0x7cc>)
 800e660:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800e662:	4ba4      	ldr	r3, [pc, #656]	@ (800e8f4 <tx_control+0x7e8>)
 800e664:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800e666:	233c      	movs	r3, #60	@ 0x3c
 800e668:	18fb      	adds	r3, r7, r3
 800e66a:	2200      	movs	r2, #0
 800e66c:	701a      	strb	r2, [r3, #0]
 800e66e:	f000 fc5d 	bl	800ef2c <tx_control+0xe20>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800e672:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800e674:	4b92      	ldr	r3, [pc, #584]	@ (800e8c0 <tx_control+0x7b4>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d148      	bne.n	800e70e <tx_control+0x602>
		if(codeTX != 0x60){//	cp	A,#$60
 800e67c:	4b8c      	ldr	r3, [pc, #560]	@ (800e8b0 <tx_control+0x7a4>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b60      	cmp	r3, #96	@ 0x60
 800e682:	d11f      	bne.n	800e6c4 <tx_control+0x5b8>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e684:	4b90      	ldr	r3, [pc, #576]	@ (800e8c8 <tx_control+0x7bc>)
 800e686:	22f1      	movs	r2, #241	@ 0xf1
 800e688:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800e68a:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800e68c:	4b9a      	ldr	r3, [pc, #616]	@ (800e8f8 <tx_control+0x7ec>)
 800e68e:	781a      	ldrb	r2, [r3, #0]
 800e690:	4b9a      	ldr	r3, [pc, #616]	@ (800e8fc <tx_control+0x7f0>)
 800e692:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800e694:	4b9a      	ldr	r3, [pc, #616]	@ (800e900 <tx_control+0x7f4>)
 800e696:	781a      	ldrb	r2, [r3, #0]
 800e698:	4b9a      	ldr	r3, [pc, #616]	@ (800e904 <tx_control+0x7f8>)
 800e69a:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e69c:	4b9a      	ldr	r3, [pc, #616]	@ (800e908 <tx_control+0x7fc>)
 800e69e:	2203      	movs	r2, #3
 800e6a0:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800e6a2:	4b9a      	ldr	r3, [pc, #616]	@ (800e90c <tx_control+0x800>)
 800e6a4:	4a9a      	ldr	r2, [pc, #616]	@ (800e910 <tx_control+0x804>)
 800e6a6:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800e6a8:	4b9a      	ldr	r3, [pc, #616]	@ (800e914 <tx_control+0x808>)
 800e6aa:	4a9b      	ldr	r2, [pc, #620]	@ (800e918 <tx_control+0x80c>)
 800e6ac:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800e6ae:	4b89      	ldr	r3, [pc, #548]	@ (800e8d4 <tx_control+0x7c8>)
 800e6b0:	785b      	ldrb	r3, [r3, #1]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	4053      	eors	r3, r2
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <tx_control+0x5b4>
 800e6bc:	f000 fc7d 	bl	800efba <tx_control+0xeae>
			goto noFullFlagTXDATA;
 800e6c0:	f000 fc7e 	bl	800efc0 <tx_control+0xeb4>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800e6c4:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800e6c6:	4b7a      	ldr	r3, [pc, #488]	@ (800e8b0 <tx_control+0x7a4>)
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b61      	cmp	r3, #97	@ 0x61
 800e6cc:	d121      	bne.n	800e712 <tx_control+0x606>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800e6ce:	4b7e      	ldr	r3, [pc, #504]	@ (800e8c8 <tx_control+0x7bc>)
 800e6d0:	22f1      	movs	r2, #241	@ 0xf1
 800e6d2:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800e6d4:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800e6d6:	4b91      	ldr	r3, [pc, #580]	@ (800e91c <tx_control+0x810>)
 800e6d8:	781a      	ldrb	r2, [r3, #0]
 800e6da:	4b88      	ldr	r3, [pc, #544]	@ (800e8fc <tx_control+0x7f0>)
 800e6dc:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800e6de:	4b90      	ldr	r3, [pc, #576]	@ (800e920 <tx_control+0x814>)
 800e6e0:	781a      	ldrb	r2, [r3, #0]
 800e6e2:	4b88      	ldr	r3, [pc, #544]	@ (800e904 <tx_control+0x7f8>)
 800e6e4:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e6e6:	4b88      	ldr	r3, [pc, #544]	@ (800e908 <tx_control+0x7fc>)
 800e6e8:	220a      	movs	r2, #10
 800e6ea:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800e6ec:	4b87      	ldr	r3, [pc, #540]	@ (800e90c <tx_control+0x800>)
 800e6ee:	4a8d      	ldr	r2, [pc, #564]	@ (800e924 <tx_control+0x818>)
 800e6f0:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800e6f2:	4b88      	ldr	r3, [pc, #544]	@ (800e914 <tx_control+0x808>)
 800e6f4:	4a8c      	ldr	r2, [pc, #560]	@ (800e928 <tx_control+0x81c>)
 800e6f6:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800e6f8:	4b76      	ldr	r3, [pc, #472]	@ (800e8d4 <tx_control+0x7c8>)
 800e6fa:	789b      	ldrb	r3, [r3, #2]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	4053      	eors	r3, r2
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d101      	bne.n	800e70a <tx_control+0x5fe>
 800e706:	f000 fca9 	bl	800f05c <tx_control+0xf50>
			goto noFullFlagTXEVENT;
 800e70a:	f000 fcaa 	bl	800f062 <tx_control+0xf56>
			goto ask_tx_control_04;
 800e70e:	46c0      	nop			@ (mov r8, r8)
 800e710:	e000      	b.n	800e714 <tx_control+0x608>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800e712:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800e714:	4b66      	ldr	r3, [pc, #408]	@ (800e8b0 <tx_control+0x7a4>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b53      	cmp	r3, #83	@ 0x53
 800e71a:	d12e      	bne.n	800e77a <tx_control+0x66e>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e71c:	4b6a      	ldr	r3, [pc, #424]	@ (800e8c8 <tx_control+0x7bc>)
 800e71e:	22f1      	movs	r2, #241	@ 0xf1
 800e720:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800e722:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800e724:	4b81      	ldr	r3, [pc, #516]	@ (800e92c <tx_control+0x820>)
 800e726:	781a      	ldrb	r2, [r3, #0]
 800e728:	4b81      	ldr	r3, [pc, #516]	@ (800e930 <tx_control+0x824>)
 800e72a:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800e72c:	4b81      	ldr	r3, [pc, #516]	@ (800e934 <tx_control+0x828>)
 800e72e:	781a      	ldrb	r2, [r3, #0]
 800e730:	4b7f      	ldr	r3, [pc, #508]	@ (800e930 <tx_control+0x824>)
 800e732:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800e734:	4b80      	ldr	r3, [pc, #512]	@ (800e938 <tx_control+0x82c>)
 800e736:	781a      	ldrb	r2, [r3, #0]
 800e738:	4b7d      	ldr	r3, [pc, #500]	@ (800e930 <tx_control+0x824>)
 800e73a:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800e73c:	4b7f      	ldr	r3, [pc, #508]	@ (800e93c <tx_control+0x830>)
 800e73e:	781a      	ldrb	r2, [r3, #0]
 800e740:	4b7b      	ldr	r3, [pc, #492]	@ (800e930 <tx_control+0x824>)
 800e742:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800e744:	4b7e      	ldr	r3, [pc, #504]	@ (800e940 <tx_control+0x834>)
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	0a1b      	lsrs	r3, r3, #8
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	4b78      	ldr	r3, [pc, #480]	@ (800e930 <tx_control+0x824>)
 800e750:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800e752:	4b7b      	ldr	r3, [pc, #492]	@ (800e940 <tx_control+0x834>)
 800e754:	881b      	ldrh	r3, [r3, #0]
 800e756:	b2da      	uxtb	r2, r3
 800e758:	4b75      	ldr	r3, [pc, #468]	@ (800e930 <tx_control+0x824>)
 800e75a:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800e75c:	4b79      	ldr	r3, [pc, #484]	@ (800e944 <tx_control+0x838>)
 800e75e:	781a      	ldrb	r2, [r3, #0]
 800e760:	4b73      	ldr	r3, [pc, #460]	@ (800e930 <tx_control+0x824>)
 800e762:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800e764:	4b72      	ldr	r3, [pc, #456]	@ (800e930 <tx_control+0x824>)
 800e766:	2200      	movs	r2, #0
 800e768:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_comp])											// compresor activo ?
 800e76a:	4b77      	ldr	r3, [pc, #476]	@ (800e948 <tx_control+0x83c>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <tx_control+0x66a>
 800e772:	f000 fd12 	bl	800f19a <tx_control+0x108e>
 800e776:	f000 fd09 	bl	800f18c <tx_control+0x1080>
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800e77a:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800e77c:	4b4c      	ldr	r3, [pc, #304]	@ (800e8b0 <tx_control+0x7a4>)
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	2b51      	cmp	r3, #81	@ 0x51
 800e782:	d125      	bne.n	800e7d0 <tx_control+0x6c4>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800e784:	4b50      	ldr	r3, [pc, #320]	@ (800e8c8 <tx_control+0x7bc>)
 800e786:	22f1      	movs	r2, #241	@ 0xf1
 800e788:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800e78a:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800e78c:	4b6f      	ldr	r3, [pc, #444]	@ (800e94c <tx_control+0x840>)
 800e78e:	227b      	movs	r2, #123	@ 0x7b
 800e790:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800e792:	4b6e      	ldr	r3, [pc, #440]	@ (800e94c <tx_control+0x840>)
 800e794:	227c      	movs	r2, #124	@ 0x7c
 800e796:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800e798:	4b6c      	ldr	r3, [pc, #432]	@ (800e94c <tx_control+0x840>)
 800e79a:	2200      	movs	r2, #0
 800e79c:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800e79e:	4b6b      	ldr	r3, [pc, #428]	@ (800e94c <tx_control+0x840>)
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800e7a4:	4b69      	ldr	r3, [pc, #420]	@ (800e94c <tx_control+0x840>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800e7aa:	4b68      	ldr	r3, [pc, #416]	@ (800e94c <tx_control+0x840>)
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800e7b0:	4b66      	ldr	r3, [pc, #408]	@ (800e94c <tx_control+0x840>)
 800e7b2:	2204      	movs	r2, #4
 800e7b4:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800e7b6:	4b65      	ldr	r3, [pc, #404]	@ (800e94c <tx_control+0x840>)
 800e7b8:	2280      	movs	r2, #128	@ 0x80
 800e7ba:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800e7bc:	4b63      	ldr	r3, [pc, #396]	@ (800e94c <tx_control+0x840>)
 800e7be:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800e7c0:	4b4c      	ldr	r3, [pc, #304]	@ (800e8f4 <tx_control+0x7e8>)
 800e7c2:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800e7c4:	2334      	movs	r3, #52	@ 0x34
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	701a      	strb	r2, [r3, #0]
 800e7cc:	f000 fe21 	bl	800f412 <tx_control+0x1306>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800e7d0:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800e7d2:	4b37      	ldr	r3, [pc, #220]	@ (800e8b0 <tx_control+0x7a4>)
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	2b50      	cmp	r3, #80	@ 0x50
 800e7d8:	d10f      	bne.n	800e7fa <tx_control+0x6ee>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800e7da:	4b3b      	ldr	r3, [pc, #236]	@ (800e8c8 <tx_control+0x7bc>)
 800e7dc:	22f1      	movs	r2, #241	@ 0xf1
 800e7de:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800e7e0:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == reePlantilla[eeversion1]){
 800e7e2:	4b5b      	ldr	r3, [pc, #364]	@ (800e950 <tx_control+0x844>)
 800e7e4:	227d      	movs	r2, #125	@ 0x7d
 800e7e6:	5c9a      	ldrb	r2, [r3, r2]
 800e7e8:	4b5a      	ldr	r3, [pc, #360]	@ (800e954 <tx_control+0x848>)
 800e7ea:	217b      	movs	r1, #123	@ 0x7b
 800e7ec:	5c5b      	ldrb	r3, [r3, r1]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d001      	beq.n	800e7f6 <tx_control+0x6ea>
 800e7f2:	f000 fefc 	bl	800f5ee <tx_control+0x14e2>
				goto 	verifica_version2;		//jreq	verifica_version2
 800e7f6:	f000 fe99 	bl	800f52c <tx_control+0x1420>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800e7fa:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800e7fc:	4b2c      	ldr	r3, [pc, #176]	@ (800e8b0 <tx_control+0x7a4>)
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2b46      	cmp	r3, #70	@ 0x46
 800e802:	d129      	bne.n	800e858 <tx_control+0x74c>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e804:	4b30      	ldr	r3, [pc, #192]	@ (800e8c8 <tx_control+0x7bc>)
 800e806:	22f1      	movs	r2, #241	@ 0xf1
 800e808:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800e80a:	46c0      	nop			@ (mov r8, r8)
			bandera_act_fw_j = 1;   //Parche para parar loggeo
 800e80c:	4b52      	ldr	r3, [pc, #328]	@ (800e958 <tx_control+0x84c>)
 800e80e:	2201      	movs	r2, #1
 800e810:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800e812:	4b31      	ldr	r3, [pc, #196]	@ (800e8d8 <tx_control+0x7cc>)
 800e814:	22f1      	movs	r2, #241	@ 0xf1
 800e816:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800e818:	4b2f      	ldr	r3, [pc, #188]	@ (800e8d8 <tx_control+0x7cc>)
 800e81a:	2203      	movs	r2, #3
 800e81c:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800e81e:	4b29      	ldr	r3, [pc, #164]	@ (800e8c4 <tx_control+0x7b8>)
 800e820:	2201      	movs	r2, #1
 800e822:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800e824:	4b4d      	ldr	r3, [pc, #308]	@ (800e95c <tx_control+0x850>)
 800e826:	4a2c      	ldr	r2, [pc, #176]	@ (800e8d8 <tx_control+0x7cc>)
 800e828:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800e82a:	4b4d      	ldr	r3, [pc, #308]	@ (800e960 <tx_control+0x854>)
 800e82c:	4a2a      	ldr	r2, [pc, #168]	@ (800e8d8 <tx_control+0x7cc>)
 800e82e:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800e830:	4b4c      	ldr	r3, [pc, #304]	@ (800e964 <tx_control+0x858>)
 800e832:	4a4d      	ldr	r2, [pc, #308]	@ (800e968 <tx_control+0x85c>)
 800e834:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800e836:	4b4d      	ldr	r3, [pc, #308]	@ (800e96c <tx_control+0x860>)
 800e838:	2202      	movs	r2, #2
 800e83a:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800e83c:	4b4c      	ldr	r3, [pc, #304]	@ (800e970 <tx_control+0x864>)
 800e83e:	2201      	movs	r2, #1
 800e840:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800e842:	4b4c      	ldr	r3, [pc, #304]	@ (800e974 <tx_control+0x868>)
 800e844:	2255      	movs	r2, #85	@ 0x55
 800e846:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800e848:	4b19      	ldr	r3, [pc, #100]	@ (800e8b0 <tx_control+0x7a4>)
 800e84a:	2200      	movs	r2, #0
 800e84c:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800e84e:	4b20      	ldr	r3, [pc, #128]	@ (800e8d0 <tx_control+0x7c4>)
 800e850:	2205      	movs	r2, #5
 800e852:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800e854:	f001 fd05 	bl	8010262 <tx_control+0x2156>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800e858:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800e85a:	4b15      	ldr	r3, [pc, #84]	@ (800e8b0 <tx_control+0x7a4>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b54      	cmp	r3, #84	@ 0x54
 800e860:	d11a      	bne.n	800e898 <tx_control+0x78c>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e862:	4b19      	ldr	r3, [pc, #100]	@ (800e8c8 <tx_control+0x7bc>)
 800e864:	22f1      	movs	r2, #241	@ 0xf1
 800e866:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800e868:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800e86a:	f7f8 fd43 	bl	80072f4 <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800e86e:	4b42      	ldr	r3, [pc, #264]	@ (800e978 <tx_control+0x86c>)
 800e870:	2200      	movs	r2, #0
 800e872:	801a      	strh	r2, [r3, #0]


tx_clean_logger_loop:
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800e874:	4b41      	ldr	r3, [pc, #260]	@ (800e97c <tx_control+0x870>)
 800e876:	22aa      	movs	r2, #170	@ 0xaa
 800e878:	701a      	strb	r2, [r3, #0]
			// ldw		X,#data_buffer
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800e87a:	4b41      	ldr	r3, [pc, #260]	@ (800e980 <tx_control+0x874>)
 800e87c:	4a24      	ldr	r2, [pc, #144]	@ (800e910 <tx_control+0x804>)
 800e87e:	601a      	str	r2, [r3, #0]

			// ld    A,cntBloqFirm;				/ Toma el número de bloques recibidos al momento
			// ldw		X,#128;								/ Carga el tamaño de los bloques (128 bytes)
			// mul		X,A;									/ Multiplicalos
			// addw	X,#eventLogger;						/	apunta al inicio de la Memoria de logger + el número de bloques grabados
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800e880:	4b3d      	ldr	r3, [pc, #244]	@ (800e978 <tx_control+0x86c>)
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	01db      	lsls	r3, r3, #7
 800e886:	001a      	movs	r2, r3
 800e888:	4b27      	ldr	r3, [pc, #156]	@ (800e928 <tx_control+0x81c>)
 800e88a:	18d2      	adds	r2, r2, r3
 800e88c:	4b3d      	ldr	r3, [pc, #244]	@ (800e984 <tx_control+0x878>)
 800e88e:	601a      	str	r2, [r3, #0]
			 * CGM 10/04/2025
			 * Borrado Total de todo el Logger, es decir de la pagina 110 a la pagina 125 serán borradas.
			 * Logger de Eventos:			110 - 119 pagina
			 * Logger de Datos o Tiempo:	120 - 125 pagina
			 */
			for(uint32_t i = 110; i<126; i++){
 800e890:	236e      	movs	r3, #110	@ 0x6e
 800e892:	627b      	str	r3, [r7, #36]	@ 0x24
 800e894:	f001 f897 	bl	800f9c6 <tx_control+0x18ba>
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800e898:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800e89a:	4b05      	ldr	r3, [pc, #20]	@ (800e8b0 <tx_control+0x7a4>)
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b55      	cmp	r3, #85	@ 0x55
 800e8a0:	d172      	bne.n	800e988 <tx_control+0x87c>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e8a2:	4b09      	ldr	r3, [pc, #36]	@ (800e8c8 <tx_control+0x7bc>)
 800e8a4:	22f0      	movs	r2, #240	@ 0xf0
 800e8a6:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800e8a8:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800e8aa:	f001 fcda 	bl	8010262 <tx_control+0x2156>
 800e8ae:	46c0      	nop			@ (mov r8, r8)
 800e8b0:	20000f0c 	.word	0x20000f0c
 800e8b4:	20001034 	.word	0x20001034
 800e8b8:	20001022 	.word	0x20001022
 800e8bc:	2000102c 	.word	0x2000102c
 800e8c0:	20001038 	.word	0x20001038
 800e8c4:	20000fc4 	.word	0x20000fc4
 800e8c8:	20000fcd 	.word	0x20000fcd
 800e8cc:	200011e4 	.word	0x200011e4
 800e8d0:	20000fce 	.word	0x20000fce
 800e8d4:	20000eec 	.word	0x20000eec
 800e8d8:	20000ec8 	.word	0x20000ec8
 800e8dc:	0801eff4 	.word	0x0801eff4
 800e8e0:	0801eff0 	.word	0x0801eff0
 800e8e4:	0801eff1 	.word	0x0801eff1
 800e8e8:	200000b8 	.word	0x200000b8
 800e8ec:	0801eff3 	.word	0x0801eff3
 800e8f0:	0801eff2 	.word	0x0801eff2
 800e8f4:	20001090 	.word	0x20001090
 800e8f8:	20000e95 	.word	0x20000e95
 800e8fc:	20000e82 	.word	0x20000e82
 800e900:	20000e94 	.word	0x20000e94
 800e904:	20000e83 	.word	0x20000e83
 800e908:	20000f19 	.word	0x20000f19
 800e90c:	20000e8c 	.word	0x20000e8c
 800e910:	20000d74 	.word	0x20000d74
 800e914:	20000e88 	.word	0x20000e88
 800e918:	0803c000 	.word	0x0803c000
 800e91c:	20000e97 	.word	0x20000e97
 800e920:	20000e96 	.word	0x20000e96
 800e924:	20000df4 	.word	0x20000df4
 800e928:	08037000 	.word	0x08037000
 800e92c:	20000c0c 	.word	0x20000c0c
 800e930:	20000ee0 	.word	0x20000ee0
 800e934:	20000c0d 	.word	0x20000c0d
 800e938:	20000c0e 	.word	0x20000c0e
 800e93c:	20000c0f 	.word	0x20000c0f
 800e940:	20000cb0 	.word	0x20000cb0
 800e944:	20000c2a 	.word	0x20000c2a
 800e948:	20000c00 	.word	0x20000c00
 800e94c:	20000ec0 	.word	0x20000ec0
 800e950:	200009e4 	.word	0x200009e4
 800e954:	20000ce8 	.word	0x20000ce8
 800e958:	200011d0 	.word	0x200011d0
 800e95c:	20000efc 	.word	0x20000efc
 800e960:	20000ef4 	.word	0x20000ef4
 800e964:	20000ef8 	.word	0x20000ef8
 800e968:	20000ec9 	.word	0x20000ec9
 800e96c:	20000f18 	.word	0x20000f18
 800e970:	20000f04 	.word	0x20000f04
 800e974:	20000f01 	.word	0x20000f01
 800e978:	20000fba 	.word	0x20000fba
 800e97c:	20000e74 	.word	0x20000e74
 800e980:	20000e7c 	.word	0x20000e7c
 800e984:	20000e78 	.word	0x20000e78
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800e988:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800e98a:	4bec      	ldr	r3, [pc, #944]	@ (800ed3c <tx_control+0xc30>)
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	2b56      	cmp	r3, #86	@ 0x56
 800e990:	d132      	bne.n	800e9f8 <tx_control+0x8ec>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e992:	4beb      	ldr	r3, [pc, #940]	@ (800ed40 <tx_control+0xc34>)
 800e994:	22f0      	movs	r2, #240	@ 0xf0
 800e996:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800e998:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e99a:	4bea      	ldr	r3, [pc, #936]	@ (800ed44 <tx_control+0xc38>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800e9a0:	4be9      	ldr	r3, [pc, #932]	@ (800ed48 <tx_control+0xc3c>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800e9a6:	4be9      	ldr	r3, [pc, #932]	@ (800ed4c <tx_control+0xc40>)
 800e9a8:	2206      	movs	r2, #6
 800e9aa:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800e9ac:	4be8      	ldr	r3, [pc, #928]	@ (800ed50 <tx_control+0xc44>)
 800e9ae:	2106      	movs	r1, #6
 800e9b0:	0018      	movs	r0, r3
 800e9b2:	f7f8 fc69 	bl	8007288 <buildChksumBloq>
			chksum_to_compare = 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e9ba:	4be5      	ldr	r3, [pc, #916]	@ (800ed50 <tx_control+0xc44>)
 800e9bc:	799b      	ldrb	r3, [r3, #6]
 800e9be:	061b      	lsls	r3, r3, #24
 800e9c0:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e9c2:	4be3      	ldr	r3, [pc, #908]	@ (800ed50 <tx_control+0xc44>)
 800e9c4:	79db      	ldrb	r3, [r3, #7]
 800e9c6:	041b      	lsls	r3, r3, #16
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	18d3      	adds	r3, r2, r3
 800e9cc:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e9ce:	4be0      	ldr	r3, [pc, #896]	@ (800ed50 <tx_control+0xc44>)
 800e9d0:	7a1b      	ldrb	r3, [r3, #8]
 800e9d2:	021b      	lsls	r3, r3, #8
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	18d3      	adds	r3, r2, r3
 800e9d8:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e9da:	4bdd      	ldr	r3, [pc, #884]	@ (800ed50 <tx_control+0xc44>)
 800e9dc:	7a5b      	ldrb	r3, [r3, #9]
 800e9de:	001a      	movs	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	189b      	adds	r3, r3, r2
 800e9e4:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e9e6:	4bd7      	ldr	r3, [pc, #860]	@ (800ed44 <tx_control+0xc38>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d101      	bne.n	800e9f4 <tx_control+0x8e8>
 800e9f0:	f001 f83c 	bl	800fa6c <tx_control+0x1960>
				goto tx_write_status_error;
 800e9f4:	f001 f8f2 	bl	800fbdc <tx_control+0x1ad0>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800e9f8:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800e9fa:	4bd0      	ldr	r3, [pc, #832]	@ (800ed3c <tx_control+0xc30>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b57      	cmp	r3, #87	@ 0x57
 800ea00:	d10b      	bne.n	800ea1a <tx_control+0x90e>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ea02:	4bcf      	ldr	r3, [pc, #828]	@ (800ed40 <tx_control+0xc34>)
 800ea04:	22f0      	movs	r2, #240	@ 0xf0
 800ea06:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800ea08:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		uint8_t estado1_Aux = reeEstado1;
 800ea0a:	1cfb      	adds	r3, r7, #3
 800ea0c:	4ad1      	ldr	r2, [pc, #836]	@ (800ed54 <tx_control+0xc48>)
 800ea0e:	7812      	ldrb	r2, [r2, #0]
 800ea10:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800ea12:	2300      	movs	r3, #0
 800ea14:	61fb      	str	r3, [r7, #28]
 800ea16:	f001 f90f 	bl	800fc38 <tx_control+0x1b2c>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800ea1a:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800ea1c:	4bc7      	ldr	r3, [pc, #796]	@ (800ed3c <tx_control+0xc30>)
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	2b58      	cmp	r3, #88	@ 0x58
 800ea22:	d132      	bne.n	800ea8a <tx_control+0x97e>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800ea24:	4bc6      	ldr	r3, [pc, #792]	@ (800ed40 <tx_control+0xc34>)
 800ea26:	22f0      	movs	r2, #240	@ 0xf0
 800ea28:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800ea2a:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800ea2c:	4bc5      	ldr	r3, [pc, #788]	@ (800ed44 <tx_control+0xc38>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800ea32:	4bc5      	ldr	r3, [pc, #788]	@ (800ed48 <tx_control+0xc3c>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800ea38:	4bc4      	ldr	r3, [pc, #784]	@ (800ed4c <tx_control+0xc40>)
 800ea3a:	2206      	movs	r2, #6
 800ea3c:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800ea3e:	4bc4      	ldr	r3, [pc, #784]	@ (800ed50 <tx_control+0xc44>)
 800ea40:	2106      	movs	r1, #6
 800ea42:	0018      	movs	r0, r3
 800ea44:	f7f8 fc20 	bl	8007288 <buildChksumBloq>
		chksum_to_compare = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	607b      	str	r3, [r7, #4]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800ea4c:	4bc0      	ldr	r3, [pc, #768]	@ (800ed50 <tx_control+0xc44>)
 800ea4e:	799b      	ldrb	r3, [r3, #6]
 800ea50:	061b      	lsls	r3, r3, #24
 800ea52:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800ea54:	4bbe      	ldr	r3, [pc, #760]	@ (800ed50 <tx_control+0xc44>)
 800ea56:	79db      	ldrb	r3, [r3, #7]
 800ea58:	041b      	lsls	r3, r3, #16
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	18d3      	adds	r3, r2, r3
 800ea5e:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800ea60:	4bbb      	ldr	r3, [pc, #748]	@ (800ed50 <tx_control+0xc44>)
 800ea62:	7a1b      	ldrb	r3, [r3, #8]
 800ea64:	021b      	lsls	r3, r3, #8
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	18d3      	adds	r3, r2, r3
 800ea6a:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800ea6c:	4bb8      	ldr	r3, [pc, #736]	@ (800ed50 <tx_control+0xc44>)
 800ea6e:	7a5b      	ldrb	r3, [r3, #9]
 800ea70:	001a      	movs	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	189b      	adds	r3, r3, r2
 800ea76:	607b      	str	r3, [r7, #4]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800ea78:	4bb2      	ldr	r3, [pc, #712]	@ (800ed44 <tx_control+0xc38>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d101      	bne.n	800ea86 <tx_control+0x97a>
 800ea82:	f001 fa3f 	bl	800ff04 <tx_control+0x1df8>
			goto tx_write_status_error;
 800ea86:	f001 f8a9 	bl	800fbdc <tx_control+0x1ad0>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800ea8a:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800ea8c:	4bab      	ldr	r3, [pc, #684]	@ (800ed3c <tx_control+0xc30>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	2b59      	cmp	r3, #89	@ 0x59
 800ea92:	d132      	bne.n	800eafa <tx_control+0x9ee>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800ea94:	4baa      	ldr	r3, [pc, #680]	@ (800ed40 <tx_control+0xc34>)
 800ea96:	22f0      	movs	r2, #240	@ 0xf0
 800ea98:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800ea9a:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ea9c:	4ba9      	ldr	r3, [pc, #676]	@ (800ed44 <tx_control+0xc38>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800eaa2:	4ba9      	ldr	r3, [pc, #676]	@ (800ed48 <tx_control+0xc3c>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800eaa8:	4ba8      	ldr	r3, [pc, #672]	@ (800ed4c <tx_control+0xc40>)
 800eaaa:	220a      	movs	r2, #10
 800eaac:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800eaae:	4ba8      	ldr	r3, [pc, #672]	@ (800ed50 <tx_control+0xc44>)
 800eab0:	210a      	movs	r1, #10
 800eab2:	0018      	movs	r0, r3
 800eab4:	f7f8 fbe8 	bl	8007288 <buildChksumBloq>
			chksum_to_compare = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800eabc:	4ba4      	ldr	r3, [pc, #656]	@ (800ed50 <tx_control+0xc44>)
 800eabe:	7a9b      	ldrb	r3, [r3, #10]
 800eac0:	061b      	lsls	r3, r3, #24
 800eac2:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800eac4:	4ba2      	ldr	r3, [pc, #648]	@ (800ed50 <tx_control+0xc44>)
 800eac6:	7adb      	ldrb	r3, [r3, #11]
 800eac8:	041b      	lsls	r3, r3, #16
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	18d3      	adds	r3, r2, r3
 800eace:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800ead0:	4b9f      	ldr	r3, [pc, #636]	@ (800ed50 <tx_control+0xc44>)
 800ead2:	7b1b      	ldrb	r3, [r3, #12]
 800ead4:	021b      	lsls	r3, r3, #8
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	18d3      	adds	r3, r2, r3
 800eada:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800eadc:	4b9c      	ldr	r3, [pc, #624]	@ (800ed50 <tx_control+0xc44>)
 800eade:	7b5b      	ldrb	r3, [r3, #13]
 800eae0:	001a      	movs	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	189b      	adds	r3, r3, r2
 800eae6:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800eae8:	4b96      	ldr	r3, [pc, #600]	@ (800ed44 <tx_control+0xc38>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d101      	bne.n	800eaf6 <tx_control+0x9ea>
 800eaf2:	f001 fa24 	bl	800ff3e <tx_control+0x1e32>
				goto tx_write_GEO_error;
 800eaf6:	f001 faa9 	bl	801004c <tx_control+0x1f40>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800eafa:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800eafc:	4b8f      	ldr	r3, [pc, #572]	@ (800ed3c <tx_control+0xc30>)
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	2b5a      	cmp	r3, #90	@ 0x5a
 800eb02:	d000      	beq.n	800eb06 <tx_control+0x9fa>
 800eb04:	e089      	b.n	800ec1a <tx_control+0xb0e>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eb06:	4b8e      	ldr	r3, [pc, #568]	@ (800ed40 <tx_control+0xc34>)
 800eb08:	22f0      	movs	r2, #240	@ 0xf0
 800eb0a:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800eb0c:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800eb0e:	4b92      	ldr	r3, [pc, #584]	@ (800ed58 <tx_control+0xc4c>)
 800eb10:	2208      	movs	r2, #8
 800eb12:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800eb14:	4b91      	ldr	r3, [pc, #580]	@ (800ed5c <tx_control+0xc50>)
 800eb16:	227c      	movs	r2, #124	@ 0x7c
 800eb18:	5c9a      	ldrb	r2, [r3, r2]
 800eb1a:	4b91      	ldr	r3, [pc, #580]	@ (800ed60 <tx_control+0xc54>)
 800eb1c:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800eb1e:	4b90      	ldr	r3, [pc, #576]	@ (800ed60 <tx_control+0xc54>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800eb24:	4b8e      	ldr	r3, [pc, #568]	@ (800ed60 <tx_control+0xc54>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800eb2a:	4b8d      	ldr	r3, [pc, #564]	@ (800ed60 <tx_control+0xc54>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800eb30:	4b8b      	ldr	r3, [pc, #556]	@ (800ed60 <tx_control+0xc54>)
 800eb32:	2201      	movs	r2, #1
 800eb34:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800eb36:	4b8a      	ldr	r3, [pc, #552]	@ (800ed60 <tx_control+0xc54>)
 800eb38:	2206      	movs	r2, #6
 800eb3a:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800eb3c:	4b86      	ldr	r3, [pc, #536]	@ (800ed58 <tx_control+0xc4c>)
 800eb3e:	781a      	ldrb	r2, [r3, #0]
 800eb40:	4b87      	ldr	r3, [pc, #540]	@ (800ed60 <tx_control+0xc54>)
 800eb42:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800eb44:	4b80      	ldr	r3, [pc, #512]	@ (800ed48 <tx_control+0xc3c>)
 800eb46:	2208      	movs	r2, #8
 800eb48:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800eb4a:	4a86      	ldr	r2, [pc, #536]	@ (800ed64 <tx_control+0xc58>)
 800eb4c:	4b84      	ldr	r3, [pc, #528]	@ (800ed60 <tx_control+0xc54>)
 800eb4e:	0011      	movs	r1, r2
 800eb50:	0018      	movs	r0, r3
 800eb52:	f7f8 fbe7 	bl	8007324 <copyVector>
//			bufferTxControl[12]	= eeLong1;
//			bufferTxControl[13]	= eeLong2;
//			bufferTxControl[14] = eeLong3;
//			bufferTxControl[15] = eeLong4;

			bufferTxControl[8] = reeLat1;
 800eb56:	4b84      	ldr	r3, [pc, #528]	@ (800ed68 <tx_control+0xc5c>)
 800eb58:	781a      	ldrb	r2, [r3, #0]
 800eb5a:	4b82      	ldr	r3, [pc, #520]	@ (800ed64 <tx_control+0xc58>)
 800eb5c:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = reeLat2;
 800eb5e:	4b83      	ldr	r3, [pc, #524]	@ (800ed6c <tx_control+0xc60>)
 800eb60:	781a      	ldrb	r2, [r3, #0]
 800eb62:	4b80      	ldr	r3, [pc, #512]	@ (800ed64 <tx_control+0xc58>)
 800eb64:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = reeLat3;
 800eb66:	4b82      	ldr	r3, [pc, #520]	@ (800ed70 <tx_control+0xc64>)
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	4b7e      	ldr	r3, [pc, #504]	@ (800ed64 <tx_control+0xc58>)
 800eb6c:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = reeLat4;
 800eb6e:	4b81      	ldr	r3, [pc, #516]	@ (800ed74 <tx_control+0xc68>)
 800eb70:	781a      	ldrb	r2, [r3, #0]
 800eb72:	4b7c      	ldr	r3, [pc, #496]	@ (800ed64 <tx_control+0xc58>)
 800eb74:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= reeLong1;
 800eb76:	4b80      	ldr	r3, [pc, #512]	@ (800ed78 <tx_control+0xc6c>)
 800eb78:	781a      	ldrb	r2, [r3, #0]
 800eb7a:	4b7a      	ldr	r3, [pc, #488]	@ (800ed64 <tx_control+0xc58>)
 800eb7c:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= reeLong2;
 800eb7e:	4b7f      	ldr	r3, [pc, #508]	@ (800ed7c <tx_control+0xc70>)
 800eb80:	781a      	ldrb	r2, [r3, #0]
 800eb82:	4b78      	ldr	r3, [pc, #480]	@ (800ed64 <tx_control+0xc58>)
 800eb84:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = reeLong3;
 800eb86:	4b7e      	ldr	r3, [pc, #504]	@ (800ed80 <tx_control+0xc74>)
 800eb88:	781a      	ldrb	r2, [r3, #0]
 800eb8a:	4b76      	ldr	r3, [pc, #472]	@ (800ed64 <tx_control+0xc58>)
 800eb8c:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = reeLong4;
 800eb8e:	4b7d      	ldr	r3, [pc, #500]	@ (800ed84 <tx_control+0xc78>)
 800eb90:	781a      	ldrb	r2, [r3, #0]
 800eb92:	4b74      	ldr	r3, [pc, #464]	@ (800ed64 <tx_control+0xc58>)
 800eb94:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800eb96:	4b6b      	ldr	r3, [pc, #428]	@ (800ed44 <tx_control+0xc38>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800eb9c:	4b6a      	ldr	r3, [pc, #424]	@ (800ed48 <tx_control+0xc3c>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800eba2:	4b6a      	ldr	r3, [pc, #424]	@ (800ed4c <tx_control+0xc40>)
 800eba4:	2210      	movs	r2, #16
 800eba6:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800eba8:	4b68      	ldr	r3, [pc, #416]	@ (800ed4c <tx_control+0xc40>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	001a      	movs	r2, r3
 800ebae:	4b6d      	ldr	r3, [pc, #436]	@ (800ed64 <tx_control+0xc58>)
 800ebb0:	0011      	movs	r1, r2
 800ebb2:	0018      	movs	r0, r3
 800ebb4:	f7f8 fb68 	bl	8007288 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ebb8:	4b62      	ldr	r3, [pc, #392]	@ (800ed44 <tx_control+0xc38>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	0e1b      	lsrs	r3, r3, #24
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	4b68      	ldr	r3, [pc, #416]	@ (800ed64 <tx_control+0xc58>)
 800ebc2:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ebc4:	4b5f      	ldr	r3, [pc, #380]	@ (800ed44 <tx_control+0xc38>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	0c1b      	lsrs	r3, r3, #16
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	4b65      	ldr	r3, [pc, #404]	@ (800ed64 <tx_control+0xc58>)
 800ebce:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ebd0:	4b5c      	ldr	r3, [pc, #368]	@ (800ed44 <tx_control+0xc38>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	0a1b      	lsrs	r3, r3, #8
 800ebd6:	b2da      	uxtb	r2, r3
 800ebd8:	4b62      	ldr	r3, [pc, #392]	@ (800ed64 <tx_control+0xc58>)
 800ebda:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800ebdc:	4b59      	ldr	r3, [pc, #356]	@ (800ed44 <tx_control+0xc38>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	4b60      	ldr	r3, [pc, #384]	@ (800ed64 <tx_control+0xc58>)
 800ebe4:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800ebe6:	4b68      	ldr	r3, [pc, #416]	@ (800ed88 <tx_control+0xc7c>)
 800ebe8:	4a5e      	ldr	r2, [pc, #376]	@ (800ed64 <tx_control+0xc58>)
 800ebea:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800ebec:	4b67      	ldr	r3, [pc, #412]	@ (800ed8c <tx_control+0xc80>)
 800ebee:	4a5d      	ldr	r2, [pc, #372]	@ (800ed64 <tx_control+0xc58>)
 800ebf0:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800ebf2:	4b67      	ldr	r3, [pc, #412]	@ (800ed90 <tx_control+0xc84>)
 800ebf4:	4a67      	ldr	r2, [pc, #412]	@ (800ed94 <tx_control+0xc88>)
 800ebf6:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800ebf8:	4b57      	ldr	r3, [pc, #348]	@ (800ed58 <tx_control+0xc4c>)
 800ebfa:	2214      	movs	r2, #20
 800ebfc:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ebfe:	4b66      	ldr	r3, [pc, #408]	@ (800ed98 <tx_control+0xc8c>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800ec04:	4b64      	ldr	r3, [pc, #400]	@ (800ed98 <tx_control+0xc8c>)
 800ec06:	2201      	movs	r2, #1
 800ec08:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ec0a:	4b64      	ldr	r3, [pc, #400]	@ (800ed9c <tx_control+0xc90>)
 800ec0c:	2255      	movs	r2, #85	@ 0x55
 800ec0e:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800ec10:	4b4a      	ldr	r3, [pc, #296]	@ (800ed3c <tx_control+0xc30>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800ec16:	f001 fb24 	bl	8010262 <tx_control+0x2156>
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800ec1a:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800ec1c:	4b47      	ldr	r3, [pc, #284]	@ (800ed3c <tx_control+0xc30>)
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	2b5b      	cmp	r3, #91	@ 0x5b
 800ec22:	d000      	beq.n	800ec26 <tx_control+0xb1a>
 800ec24:	e0c2      	b.n	800edac <tx_control+0xca0>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ec26:	4b46      	ldr	r3, [pc, #280]	@ (800ed40 <tx_control+0xc34>)
 800ec28:	22f0      	movs	r2, #240	@ 0xf0
 800ec2a:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800ec2c:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800ec2e:	4b4a      	ldr	r3, [pc, #296]	@ (800ed58 <tx_control+0xc4c>)
 800ec30:	2204      	movs	r2, #4
 800ec32:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800ec34:	4b49      	ldr	r3, [pc, #292]	@ (800ed5c <tx_control+0xc50>)
 800ec36:	227b      	movs	r2, #123	@ 0x7b
 800ec38:	5c9a      	ldrb	r2, [r3, r2]
 800ec3a:	4b49      	ldr	r3, [pc, #292]	@ (800ed60 <tx_control+0xc54>)
 800ec3c:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ec3e:	4b47      	ldr	r3, [pc, #284]	@ (800ed5c <tx_control+0xc50>)
 800ec40:	227c      	movs	r2, #124	@ 0x7c
 800ec42:	5c9a      	ldrb	r2, [r3, r2]
 800ec44:	4b46      	ldr	r3, [pc, #280]	@ (800ed60 <tx_control+0xc54>)
 800ec46:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ec48:	4b45      	ldr	r3, [pc, #276]	@ (800ed60 <tx_control+0xc54>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ec4e:	4b44      	ldr	r3, [pc, #272]	@ (800ed60 <tx_control+0xc54>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ec54:	4b42      	ldr	r3, [pc, #264]	@ (800ed60 <tx_control+0xc54>)
 800ec56:	2200      	movs	r2, #0
 800ec58:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ec5a:	4b41      	ldr	r3, [pc, #260]	@ (800ed60 <tx_control+0xc54>)
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800ec60:	4b3f      	ldr	r3, [pc, #252]	@ (800ed60 <tx_control+0xc54>)
 800ec62:	2207      	movs	r2, #7
 800ec64:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800ec66:	4b3c      	ldr	r3, [pc, #240]	@ (800ed58 <tx_control+0xc4c>)
 800ec68:	781a      	ldrb	r2, [r3, #0]
 800ec6a:	4b3d      	ldr	r3, [pc, #244]	@ (800ed60 <tx_control+0xc54>)
 800ec6c:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800ec6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ed98 <tx_control+0xc8c>)
 800ec70:	2201      	movs	r2, #1
 800ec72:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800ec74:	4b34      	ldr	r3, [pc, #208]	@ (800ed48 <tx_control+0xc3c>)
 800ec76:	2208      	movs	r2, #8
 800ec78:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800ec7a:	4a3a      	ldr	r2, [pc, #232]	@ (800ed64 <tx_control+0xc58>)
 800ec7c:	4b38      	ldr	r3, [pc, #224]	@ (800ed60 <tx_control+0xc54>)
 800ec7e:	0011      	movs	r1, r2
 800ec80:	0018      	movs	r0, r3
 800ec82:	f7f8 fb4f 	bl	8007324 <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800ec86:	4b46      	ldr	r3, [pc, #280]	@ (800eda0 <tx_control+0xc94>)
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	0a1b      	lsrs	r3, r3, #8
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	4b34      	ldr	r3, [pc, #208]	@ (800ed64 <tx_control+0xc58>)
 800ec92:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800ec94:	4b42      	ldr	r3, [pc, #264]	@ (800eda0 <tx_control+0xc94>)
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	4b32      	ldr	r3, [pc, #200]	@ (800ed64 <tx_control+0xc58>)
 800ec9c:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800ec9e:	4b41      	ldr	r3, [pc, #260]	@ (800eda4 <tx_control+0xc98>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	0a1b      	lsrs	r3, r3, #8
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	b2da      	uxtb	r2, r3
 800eca8:	4b2e      	ldr	r3, [pc, #184]	@ (800ed64 <tx_control+0xc58>)
 800ecaa:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800ecac:	4b3d      	ldr	r3, [pc, #244]	@ (800eda4 <tx_control+0xc98>)
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ed64 <tx_control+0xc58>)
 800ecb4:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ecb6:	4b23      	ldr	r3, [pc, #140]	@ (800ed44 <tx_control+0xc38>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800ecbc:	4b22      	ldr	r3, [pc, #136]	@ (800ed48 <tx_control+0xc3c>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800ecc2:	4b22      	ldr	r3, [pc, #136]	@ (800ed4c <tx_control+0xc40>)
 800ecc4:	220c      	movs	r2, #12
 800ecc6:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800ecc8:	4b20      	ldr	r3, [pc, #128]	@ (800ed4c <tx_control+0xc40>)
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	001a      	movs	r2, r3
 800ecce:	4b25      	ldr	r3, [pc, #148]	@ (800ed64 <tx_control+0xc58>)
 800ecd0:	0011      	movs	r1, r2
 800ecd2:	0018      	movs	r0, r3
 800ecd4:	f7f8 fad8 	bl	8007288 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ecd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ed44 <tx_control+0xc38>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	0e1b      	lsrs	r3, r3, #24
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	4b20      	ldr	r3, [pc, #128]	@ (800ed64 <tx_control+0xc58>)
 800ece2:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ece4:	4b17      	ldr	r3, [pc, #92]	@ (800ed44 <tx_control+0xc38>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	0c1b      	lsrs	r3, r3, #16
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	4b1d      	ldr	r3, [pc, #116]	@ (800ed64 <tx_control+0xc58>)
 800ecee:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ecf0:	4b14      	ldr	r3, [pc, #80]	@ (800ed44 <tx_control+0xc38>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	0a1b      	lsrs	r3, r3, #8
 800ecf6:	b2da      	uxtb	r2, r3
 800ecf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ed64 <tx_control+0xc58>)
 800ecfa:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800ecfc:	4b11      	ldr	r3, [pc, #68]	@ (800ed44 <tx_control+0xc38>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	4b18      	ldr	r3, [pc, #96]	@ (800ed64 <tx_control+0xc58>)
 800ed04:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800ed06:	4b20      	ldr	r3, [pc, #128]	@ (800ed88 <tx_control+0xc7c>)
 800ed08:	4a16      	ldr	r2, [pc, #88]	@ (800ed64 <tx_control+0xc58>)
 800ed0a:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800ed0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ed8c <tx_control+0xc80>)
 800ed0e:	4a15      	ldr	r2, [pc, #84]	@ (800ed64 <tx_control+0xc58>)
 800ed10:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800ed12:	4b1f      	ldr	r3, [pc, #124]	@ (800ed90 <tx_control+0xc84>)
 800ed14:	4a24      	ldr	r2, [pc, #144]	@ (800eda8 <tx_control+0xc9c>)
 800ed16:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800ed18:	4b0f      	ldr	r3, [pc, #60]	@ (800ed58 <tx_control+0xc4c>)
 800ed1a:	2210      	movs	r2, #16
 800ed1c:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ed1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ed98 <tx_control+0xc8c>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800ed24:	4b1c      	ldr	r3, [pc, #112]	@ (800ed98 <tx_control+0xc8c>)
 800ed26:	2201      	movs	r2, #1
 800ed28:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ed2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ed9c <tx_control+0xc90>)
 800ed2c:	2255      	movs	r2, #85	@ 0x55
 800ed2e:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800ed30:	4b02      	ldr	r3, [pc, #8]	@ (800ed3c <tx_control+0xc30>)
 800ed32:	2200      	movs	r2, #0
 800ed34:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800ed36:	f001 fa94 	bl	8010262 <tx_control+0x2156>
 800ed3a:	46c0      	nop			@ (mov r8, r8)
 800ed3c:	20000f0c 	.word	0x20000f0c
 800ed40:	20000fcd 	.word	0x20000fcd
 800ed44:	20000f1c 	.word	0x20000f1c
 800ed48:	20000bb3 	.word	0x20000bb3
 800ed4c:	20000bb2 	.word	0x20000bb2
 800ed50:	200009e4 	.word	0x200009e4
 800ed54:	200001ba 	.word	0x200001ba
 800ed58:	20000f18 	.word	0x20000f18
 800ed5c:	200000b8 	.word	0x200000b8
 800ed60:	20000ec0 	.word	0x20000ec0
 800ed64:	20001090 	.word	0x20001090
 800ed68:	200001bb 	.word	0x200001bb
 800ed6c:	200001bc 	.word	0x200001bc
 800ed70:	200001bd 	.word	0x200001bd
 800ed74:	200001be 	.word	0x200001be
 800ed78:	200001bf 	.word	0x200001bf
 800ed7c:	200001c0 	.word	0x200001c0
 800ed80:	200001c1 	.word	0x200001c1
 800ed84:	200001c2 	.word	0x200001c2
 800ed88:	20000efc 	.word	0x20000efc
 800ed8c:	20000ef4 	.word	0x20000ef4
 800ed90:	20000ef8 	.word	0x20000ef8
 800ed94:	200010a4 	.word	0x200010a4
 800ed98:	20000f04 	.word	0x20000f04
 800ed9c:	20000f01 	.word	0x20000f01
 800eda0:	20000e98 	.word	0x20000e98
 800eda4:	20000e9a 	.word	0x20000e9a
 800eda8:	200010a0 	.word	0x200010a0
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800edac:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800edae:	4bd4      	ldr	r3, [pc, #848]	@ (800f100 <tx_control+0xff4>)
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	2b5c      	cmp	r3, #92	@ 0x5c
 800edb4:	d132      	bne.n	800ee1c <tx_control+0xd10>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800edb6:	4bd3      	ldr	r3, [pc, #844]	@ (800f104 <tx_control+0xff8>)
 800edb8:	22f0      	movs	r2, #240	@ 0xf0
 800edba:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800edbc:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800edbe:	4bd2      	ldr	r3, [pc, #840]	@ (800f108 <tx_control+0xffc>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800edc4:	4bd1      	ldr	r3, [pc, #836]	@ (800f10c <tx_control+0x1000>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800edca:	4bd1      	ldr	r3, [pc, #836]	@ (800f110 <tx_control+0x1004>)
 800edcc:	220b      	movs	r2, #11
 800edce:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800edd0:	4bd0      	ldr	r3, [pc, #832]	@ (800f114 <tx_control+0x1008>)
 800edd2:	210b      	movs	r1, #11
 800edd4:	0018      	movs	r0, r3
 800edd6:	f7f8 fa57 	bl	8007288 <buildChksumBloq>
			chksum_to_compare = 0;
 800edda:	2300      	movs	r3, #0
 800eddc:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800edde:	4bcd      	ldr	r3, [pc, #820]	@ (800f114 <tx_control+0x1008>)
 800ede0:	7adb      	ldrb	r3, [r3, #11]
 800ede2:	061b      	lsls	r3, r3, #24
 800ede4:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800ede6:	4bcb      	ldr	r3, [pc, #812]	@ (800f114 <tx_control+0x1008>)
 800ede8:	7b1b      	ldrb	r3, [r3, #12]
 800edea:	041b      	lsls	r3, r3, #16
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	18d3      	adds	r3, r2, r3
 800edf0:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800edf2:	4bc8      	ldr	r3, [pc, #800]	@ (800f114 <tx_control+0x1008>)
 800edf4:	7b5b      	ldrb	r3, [r3, #13]
 800edf6:	021b      	lsls	r3, r3, #8
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	18d3      	adds	r3, r2, r3
 800edfc:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800edfe:	4bc5      	ldr	r3, [pc, #788]	@ (800f114 <tx_control+0x1008>)
 800ee00:	7b9b      	ldrb	r3, [r3, #14]
 800ee02:	001a      	movs	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	189b      	adds	r3, r3, r2
 800ee08:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800ee0a:	4bbf      	ldr	r3, [pc, #764]	@ (800f108 <tx_control+0xffc>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d101      	bne.n	800ee18 <tx_control+0xd0c>
 800ee14:	f001 f984 	bl	8010120 <tx_control+0x2014>
				goto tx_timeBCD_error;
 800ee18:	f001 fa02 	bl	8010220 <tx_control+0x2114>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800ee1c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800ee1e:	4bb8      	ldr	r3, [pc, #736]	@ (800f100 <tx_control+0xff4>)
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	2b5f      	cmp	r3, #95	@ 0x5f
 800ee24:	d142      	bne.n	800eeac <tx_control+0xda0>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ee26:	4bb7      	ldr	r3, [pc, #732]	@ (800f104 <tx_control+0xff8>)
 800ee28:	22f0      	movs	r2, #240	@ 0xf0
 800ee2a:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800ee2c:	46c0      	nop			@ (mov r8, r8)
			//typeClock = 0;					// mov		typeClock,#0;				Reloj interno
			// ;mov		typeClock,#1;				Reloj con señal de CA
			//if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
			//	goto noCristal;
			//}
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800ee2e:	4bba      	ldr	r3, [pc, #744]	@ (800f118 <tx_control+0x100c>)
 800ee30:	2202      	movs	r2, #2
 800ee32:	701a      	strb	r2, [r3, #0]
//noCristal:

			// ldw		X,#typeClock;				/ inicio del bloque
			pointTx = &typeClock ;				// ldw		pointTx,X
 800ee34:	4bb9      	ldr	r3, [pc, #740]	@ (800f11c <tx_control+0x1010>)
 800ee36:	4ab8      	ldr	r2, [pc, #736]	@ (800f118 <tx_control+0x100c>)
 800ee38:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800ee3a:	4bb9      	ldr	r3, [pc, #740]	@ (800f120 <tx_control+0x1014>)
 800ee3c:	4ab6      	ldr	r2, [pc, #728]	@ (800f118 <tx_control+0x100c>)
 800ee3e:	601a      	str	r2, [r3, #0]
			// ldw		X,#(typeClock + 1);				/ fin del bloque
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800ee40:	4bb7      	ldr	r3, [pc, #732]	@ (800f120 <tx_control+0x1014>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	4bb7      	ldr	r3, [pc, #732]	@ (800f124 <tx_control+0x1018>)
 800ee48:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800ee4a:	4bb7      	ldr	r3, [pc, #732]	@ (800f128 <tx_control+0x101c>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	701a      	strb	r2, [r3, #0]

			//; Carga datos de Header
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800ee50:	4bb6      	ldr	r3, [pc, #728]	@ (800f12c <tx_control+0x1020>)
 800ee52:	227b      	movs	r2, #123	@ 0x7b
 800ee54:	5c9a      	ldrb	r2, [r3, r2]
 800ee56:	4bb6      	ldr	r3, [pc, #728]	@ (800f130 <tx_control+0x1024>)
 800ee58:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ee5a:	4bb4      	ldr	r3, [pc, #720]	@ (800f12c <tx_control+0x1020>)
 800ee5c:	227c      	movs	r2, #124	@ 0x7c
 800ee5e:	5c9a      	ldrb	r2, [r3, r2]
 800ee60:	4bb3      	ldr	r3, [pc, #716]	@ (800f130 <tx_control+0x1024>)
 800ee62:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ee64:	4bb2      	ldr	r3, [pc, #712]	@ (800f130 <tx_control+0x1024>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ee6a:	4bb1      	ldr	r3, [pc, #708]	@ (800f130 <tx_control+0x1024>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ee70:	4baf      	ldr	r3, [pc, #700]	@ (800f130 <tx_control+0x1024>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ee76:	4bae      	ldr	r3, [pc, #696]	@ (800f130 <tx_control+0x1024>)
 800ee78:	2201      	movs	r2, #1
 800ee7a:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800ee7c:	4bac      	ldr	r3, [pc, #688]	@ (800f130 <tx_control+0x1024>)
 800ee7e:	2209      	movs	r2, #9
 800ee80:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800ee82:	4ba9      	ldr	r3, [pc, #676]	@ (800f128 <tx_control+0x101c>)
 800ee84:	781a      	ldrb	r2, [r3, #0]
 800ee86:	4baa      	ldr	r3, [pc, #680]	@ (800f130 <tx_control+0x1024>)
 800ee88:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800ee8a:	4baa      	ldr	r3, [pc, #680]	@ (800f134 <tx_control+0x1028>)
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	709a      	strb	r2, [r3, #2]

			//clrw	X
			//ldw		chksum_HW,X
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800ee90:	4b9d      	ldr	r3, [pc, #628]	@ (800f108 <tx_control+0xffc>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800ee96:	4ba7      	ldr	r3, [pc, #668]	@ (800f134 <tx_control+0x1028>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ee9c:	4ba6      	ldr	r3, [pc, #664]	@ (800f138 <tx_control+0x102c>)
 800ee9e:	2255      	movs	r2, #85	@ 0x55
 800eea0:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800eea2:	4b97      	ldr	r3, [pc, #604]	@ (800f100 <tx_control+0xff4>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	701a      	strb	r2, [r3, #0]

fin_tx_infoReloj:
			goto end_tx_control;		//jp		end_tx_control
 800eea8:	f001 f9db 	bl	8010262 <tx_control+0x2156>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800eeac:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x62)//jrne	ask_tx_control_19
 800eeae:	4b94      	ldr	r3, [pc, #592]	@ (800f100 <tx_control+0xff4>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	2b62      	cmp	r3, #98	@ 0x62
 800eeb4:	d10b      	bne.n	800eece <tx_control+0xdc2>
			timeOutRst = 240; //mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eeb6:	4b93      	ldr	r3, [pc, #588]	@ (800f104 <tx_control+0xff8>)
 800eeb8:	22f0      	movs	r2, #240	@ 0xf0
 800eeba:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_datalogger;//jp		tx_wifi_datalogger
 800eebc:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_wifi_datalogger:

			flagsWIFI[f_timeLoggerSend] = 1;	//bset		flagsWIFI,#f_timeLoggerSend;
 800eebe:	4b9f      	ldr	r3, [pc, #636]	@ (800f13c <tx_control+0x1030>)
 800eec0:	2201      	movs	r2, #1
 800eec2:	705a      	strb	r2, [r3, #1]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800eec4:	4b8e      	ldr	r3, [pc, #568]	@ (800f100 <tx_control+0xff4>)
 800eec6:	2200      	movs	r2, #0
 800eec8:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800eeca:	f001 f9ca 	bl	8010262 <tx_control+0x2156>
				goto ask_tx_control_19;
 800eece:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x63)//jrne	ask_tx_control_20
 800eed0:	4b8b      	ldr	r3, [pc, #556]	@ (800f100 <tx_control+0xff4>)
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	2b63      	cmp	r3, #99	@ 0x63
 800eed6:	d10f      	bne.n	800eef8 <tx_control+0xdec>
			timeOutRst = 240;		//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eed8:	4b8a      	ldr	r3, [pc, #552]	@ (800f104 <tx_control+0xff8>)
 800eeda:	22f0      	movs	r2, #240	@ 0xf0
 800eedc:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_eventlogger;//jp		tx_wifi_eventlogger
 800eede:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
tx_wifi_eventlogger:
			flagsWIFI[f_eventLoggerSend] = 1;	//bset		flagsWIFI,#f_eventLoggerSend;
 800eee0:	4b96      	ldr	r3, [pc, #600]	@ (800f13c <tx_control+0x1030>)
 800eee2:	2201      	movs	r2, #1
 800eee4:	709a      	strb	r2, [r3, #2]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800eee6:	4b86      	ldr	r3, [pc, #536]	@ (800f100 <tx_control+0xff4>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800eeec:	f001 f9b9 	bl	8010262 <tx_control+0x2156>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800eef0:	46c0      	nop			@ (mov r8, r8)
 800eef2:	e002      	b.n	800eefa <tx_control+0xdee>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800eef4:	46c0      	nop			@ (mov r8, r8)
 800eef6:	e000      	b.n	800eefa <tx_control+0xdee>
				goto ask_tx_control_20;
 800eef8:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800eefa:	46c0      	nop			@ (mov r8, r8)

		//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
		//	goto tx_wifi_OK;
		//}
		//; logger, telemetria y eventos por servidor solo están permitidos con comunicación WiFi seleccionada
		if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,tx_wifi_01
 800eefc:	4b90      	ldr	r3, [pc, #576]	@ (800f140 <tx_control+0x1034>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <tx_control+0xdfc>
 800ef04:	f002 fa45 	bl	8011392 <tx_control+0x3286>
			goto tx_wifi_01;
 800ef08:	f001 f9d1 	bl	80102ae <tx_control+0x21a2>
	     	point_Y[i] = point_X[i];
 800ef0c:	203c      	movs	r0, #60	@ 0x3c
 800ef0e:	183b      	adds	r3, r7, r0
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef14:	18d2      	adds	r2, r2, r3
 800ef16:	183b      	adds	r3, r7, r0
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef1c:	18cb      	adds	r3, r1, r3
 800ef1e:	7812      	ldrb	r2, [r2, #0]
 800ef20:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800ef22:	183b      	adds	r3, r7, r0
 800ef24:	781a      	ldrb	r2, [r3, #0]
 800ef26:	183b      	adds	r3, r7, r0
 800ef28:	3201      	adds	r2, #1
 800ef2a:	701a      	strb	r2, [r3, #0]
 800ef2c:	233c      	movs	r3, #60	@ 0x3c
 800ef2e:	18fb      	adds	r3, r7, r3
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b14      	cmp	r3, #20
 800ef34:	d9ea      	bls.n	800ef0c <tx_control+0xe00>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ef36:	4b74      	ldr	r3, [pc, #464]	@ (800f108 <tx_control+0xffc>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800ef3c:	4b81      	ldr	r3, [pc, #516]	@ (800f144 <tx_control+0x1038>)
 800ef3e:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, size_handshake);
 800ef40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef42:	2115      	movs	r1, #21
 800ef44:	0018      	movs	r0, r3
 800ef46:	f7f8 f99f 	bl	8007288 <buildChksumBloq>
		asm ("nop");
 800ef4a:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800ef4c:	4b6e      	ldr	r3, [pc, #440]	@ (800f108 <tx_control+0xffc>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	0e1b      	lsrs	r3, r3, #24
 800ef52:	b2da      	uxtb	r2, r3
 800ef54:	4b7b      	ldr	r3, [pc, #492]	@ (800f144 <tx_control+0x1038>)
 800ef56:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800ef58:	4b6b      	ldr	r3, [pc, #428]	@ (800f108 <tx_control+0xffc>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	0c1b      	lsrs	r3, r3, #16
 800ef5e:	b2da      	uxtb	r2, r3
 800ef60:	4b78      	ldr	r3, [pc, #480]	@ (800f144 <tx_control+0x1038>)
 800ef62:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800ef64:	4b68      	ldr	r3, [pc, #416]	@ (800f108 <tx_control+0xffc>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	0a1b      	lsrs	r3, r3, #8
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	4b75      	ldr	r3, [pc, #468]	@ (800f144 <tx_control+0x1038>)
 800ef6e:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800ef70:	4b65      	ldr	r3, [pc, #404]	@ (800f108 <tx_control+0xffc>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	b2da      	uxtb	r2, r3
 800ef76:	4b73      	ldr	r3, [pc, #460]	@ (800f144 <tx_control+0x1038>)
 800ef78:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800ef7a:	4b68      	ldr	r3, [pc, #416]	@ (800f11c <tx_control+0x1010>)
 800ef7c:	4a71      	ldr	r2, [pc, #452]	@ (800f144 <tx_control+0x1038>)
 800ef7e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800ef80:	4b67      	ldr	r3, [pc, #412]	@ (800f120 <tx_control+0x1014>)
 800ef82:	4a70      	ldr	r2, [pc, #448]	@ (800f144 <tx_control+0x1038>)
 800ef84:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800ef86:	4b67      	ldr	r3, [pc, #412]	@ (800f124 <tx_control+0x1018>)
 800ef88:	4a6f      	ldr	r2, [pc, #444]	@ (800f148 <tx_control+0x103c>)
 800ef8a:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800ef8c:	4b66      	ldr	r3, [pc, #408]	@ (800f128 <tx_control+0x101c>)
 800ef8e:	2219      	movs	r2, #25
 800ef90:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800ef92:	4b68      	ldr	r3, [pc, #416]	@ (800f134 <tx_control+0x1028>)
 800ef94:	2201      	movs	r2, #1
 800ef96:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800ef98:	4b66      	ldr	r3, [pc, #408]	@ (800f134 <tx_control+0x1028>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ef9e:	4b5a      	ldr	r3, [pc, #360]	@ (800f108 <tx_control+0xffc>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800efa4:	4b63      	ldr	r3, [pc, #396]	@ (800f134 <tx_control+0x1028>)
 800efa6:	2201      	movs	r2, #1
 800efa8:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800efaa:	4b63      	ldr	r3, [pc, #396]	@ (800f138 <tx_control+0x102c>)
 800efac:	2255      	movs	r2, #85	@ 0x55
 800efae:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800efb0:	4b53      	ldr	r3, [pc, #332]	@ (800f100 <tx_control+0xff4>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800efb6:	f001 f954 	bl	8010262 <tx_control+0x2156>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800efba:	4b5e      	ldr	r3, [pc, #376]	@ (800f134 <tx_control+0x1028>)
 800efbc:	2201      	movs	r2, #1
 800efbe:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800efc0:	4b59      	ldr	r3, [pc, #356]	@ (800f128 <tx_control+0x101c>)
 800efc2:	2208      	movs	r2, #8
 800efc4:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800efc6:	4b61      	ldr	r3, [pc, #388]	@ (800f14c <tx_control+0x1040>)
 800efc8:	2201      	movs	r2, #1
 800efca:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800efcc:	4b60      	ldr	r3, [pc, #384]	@ (800f150 <tx_control+0x1044>)
 800efce:	4a61      	ldr	r2, [pc, #388]	@ (800f154 <tx_control+0x1048>)
 800efd0:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800efd2:	4b61      	ldr	r3, [pc, #388]	@ (800f158 <tx_control+0x104c>)
 800efd4:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;		//incw X ******************************************
 800efd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efd8:	3301      	adds	r3, #1
 800efda:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800efdc:	4b5f      	ldr	r3, [pc, #380]	@ (800f15c <tx_control+0x1050>)
 800efde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efe0:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800efe2:	4b5f      	ldr	r3, [pc, #380]	@ (800f160 <tx_control+0x1054>)
 800efe4:	2260      	movs	r2, #96	@ 0x60
 800efe6:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800efe8:	4b5e      	ldr	r3, [pc, #376]	@ (800f164 <tx_control+0x1058>)
 800efea:	881a      	ldrh	r2, [r3, #0]
 800efec:	4b5e      	ldr	r3, [pc, #376]	@ (800f168 <tx_control+0x105c>)
 800efee:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800eff0:	4b5e      	ldr	r3, [pc, #376]	@ (800f16c <tx_control+0x1060>)
 800eff2:	4a5f      	ldr	r2, [pc, #380]	@ (800f170 <tx_control+0x1064>)
 800eff4:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 800eff6:	4b5c      	ldr	r3, [pc, #368]	@ (800f168 <tx_control+0x105c>)
 800eff8:	881a      	ldrh	r2, [r3, #0]
 800effa:	4b5e      	ldr	r3, [pc, #376]	@ (800f174 <tx_control+0x1068>)
 800effc:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800effe:	f002 fa11 	bl	8011424 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f002:	4b4a      	ldr	r3, [pc, #296]	@ (800f12c <tx_control+0x1020>)
 800f004:	227b      	movs	r2, #123	@ 0x7b
 800f006:	5c9a      	ldrb	r2, [r3, r2]
 800f008:	4b49      	ldr	r3, [pc, #292]	@ (800f130 <tx_control+0x1024>)
 800f00a:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800f00c:	4b47      	ldr	r3, [pc, #284]	@ (800f12c <tx_control+0x1020>)
 800f00e:	227c      	movs	r2, #124	@ 0x7c
 800f010:	5c9a      	ldrb	r2, [r3, r2]
 800f012:	4b47      	ldr	r3, [pc, #284]	@ (800f130 <tx_control+0x1024>)
 800f014:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800f016:	4b46      	ldr	r3, [pc, #280]	@ (800f130 <tx_control+0x1024>)
 800f018:	2200      	movs	r2, #0
 800f01a:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800f01c:	4b44      	ldr	r3, [pc, #272]	@ (800f130 <tx_control+0x1024>)
 800f01e:	2200      	movs	r2, #0
 800f020:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800f022:	4b43      	ldr	r3, [pc, #268]	@ (800f130 <tx_control+0x1024>)
 800f024:	2205      	movs	r2, #5
 800f026:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800f028:	4b41      	ldr	r3, [pc, #260]	@ (800f130 <tx_control+0x1024>)
 800f02a:	2240      	movs	r2, #64	@ 0x40
 800f02c:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800f02e:	4b40      	ldr	r3, [pc, #256]	@ (800f130 <tx_control+0x1024>)
 800f030:	2201      	movs	r2, #1
 800f032:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800f034:	4b3e      	ldr	r3, [pc, #248]	@ (800f130 <tx_control+0x1024>)
 800f036:	2209      	movs	r2, #9
 800f038:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800f03a:	4b3e      	ldr	r3, [pc, #248]	@ (800f134 <tx_control+0x1028>)
 800f03c:	2201      	movs	r2, #1
 800f03e:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800f040:	4b31      	ldr	r3, [pc, #196]	@ (800f108 <tx_control+0xffc>)
 800f042:	2200      	movs	r2, #0
 800f044:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800f046:	4b3b      	ldr	r3, [pc, #236]	@ (800f134 <tx_control+0x1028>)
 800f048:	2200      	movs	r2, #0
 800f04a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800f04c:	4b3a      	ldr	r3, [pc, #232]	@ (800f138 <tx_control+0x102c>)
 800f04e:	2255      	movs	r2, #85	@ 0x55
 800f050:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800f052:	4b2b      	ldr	r3, [pc, #172]	@ (800f100 <tx_control+0xff4>)
 800f054:	2200      	movs	r2, #0
 800f056:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800f058:	f001 f903 	bl	8010262 <tx_control+0x2156>
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800f05c:	4b35      	ldr	r3, [pc, #212]	@ (800f134 <tx_control+0x1028>)
 800f05e:	2201      	movs	r2, #1
 800f060:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800f062:	4b31      	ldr	r3, [pc, #196]	@ (800f128 <tx_control+0x101c>)
 800f064:	2208      	movs	r2, #8
 800f066:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800f068:	4b38      	ldr	r3, [pc, #224]	@ (800f14c <tx_control+0x1040>)
 800f06a:	2201      	movs	r2, #1
 800f06c:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800f06e:	4b38      	ldr	r3, [pc, #224]	@ (800f150 <tx_control+0x1044>)
 800f070:	4a41      	ldr	r2, [pc, #260]	@ (800f178 <tx_control+0x106c>)
 800f072:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800f074:	4b41      	ldr	r3, [pc, #260]	@ (800f17c <tx_control+0x1070>)
 800f076:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;						//incw	X ******************
 800f078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f07a:	3301      	adds	r3, #1
 800f07c:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800f07e:	4b37      	ldr	r3, [pc, #220]	@ (800f15c <tx_control+0x1050>)
 800f080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f082:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800f084:	4b36      	ldr	r3, [pc, #216]	@ (800f160 <tx_control+0x1054>)
 800f086:	22a0      	movs	r2, #160	@ 0xa0
 800f088:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800f08a:	4b3d      	ldr	r3, [pc, #244]	@ (800f180 <tx_control+0x1074>)
 800f08c:	881a      	ldrh	r2, [r3, #0]
 800f08e:	4b36      	ldr	r3, [pc, #216]	@ (800f168 <tx_control+0x105c>)
 800f090:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800f092:	4b36      	ldr	r3, [pc, #216]	@ (800f16c <tx_control+0x1060>)
 800f094:	4a3b      	ldr	r2, [pc, #236]	@ (800f184 <tx_control+0x1078>)
 800f096:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 800f098:	4b33      	ldr	r3, [pc, #204]	@ (800f168 <tx_control+0x105c>)
 800f09a:	881a      	ldrh	r2, [r3, #0]
 800f09c:	4b3a      	ldr	r3, [pc, #232]	@ (800f188 <tx_control+0x107c>)
 800f09e:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800f0a0:	f002 f9c0 	bl	8011424 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f0a4:	4b21      	ldr	r3, [pc, #132]	@ (800f12c <tx_control+0x1020>)
 800f0a6:	227b      	movs	r2, #123	@ 0x7b
 800f0a8:	5c9a      	ldrb	r2, [r3, r2]
 800f0aa:	4b21      	ldr	r3, [pc, #132]	@ (800f130 <tx_control+0x1024>)
 800f0ac:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800f0ae:	4b1f      	ldr	r3, [pc, #124]	@ (800f12c <tx_control+0x1020>)
 800f0b0:	227c      	movs	r2, #124	@ 0x7c
 800f0b2:	5c9a      	ldrb	r2, [r3, r2]
 800f0b4:	4b1e      	ldr	r3, [pc, #120]	@ (800f130 <tx_control+0x1024>)
 800f0b6:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800f0b8:	4b1d      	ldr	r3, [pc, #116]	@ (800f130 <tx_control+0x1024>)
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800f0be:	4b1c      	ldr	r3, [pc, #112]	@ (800f130 <tx_control+0x1024>)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800f0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800f130 <tx_control+0x1024>)
 800f0c6:	2205      	movs	r2, #5
 800f0c8:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800f0ca:	4b19      	ldr	r3, [pc, #100]	@ (800f130 <tx_control+0x1024>)
 800f0cc:	22a0      	movs	r2, #160	@ 0xa0
 800f0ce:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800f0d0:	4b17      	ldr	r3, [pc, #92]	@ (800f130 <tx_control+0x1024>)
 800f0d2:	2202      	movs	r2, #2
 800f0d4:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800f0d6:	4b16      	ldr	r3, [pc, #88]	@ (800f130 <tx_control+0x1024>)
 800f0d8:	220e      	movs	r2, #14
 800f0da:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800f0dc:	4b15      	ldr	r3, [pc, #84]	@ (800f134 <tx_control+0x1028>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800f0e2:	4b09      	ldr	r3, [pc, #36]	@ (800f108 <tx_control+0xffc>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800f0e8:	4b12      	ldr	r3, [pc, #72]	@ (800f134 <tx_control+0x1028>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800f0ee:	4b12      	ldr	r3, [pc, #72]	@ (800f138 <tx_control+0x102c>)
 800f0f0:	2255      	movs	r2, #85	@ 0x55
 800f0f2:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800f0f4:	4b02      	ldr	r3, [pc, #8]	@ (800f100 <tx_control+0xff4>)
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800f0fa:	f001 f8b2 	bl	8010262 <tx_control+0x2156>
 800f0fe:	46c0      	nop			@ (mov r8, r8)
 800f100:	20000f0c 	.word	0x20000f0c
 800f104:	20000fcd 	.word	0x20000fcd
 800f108:	20000f1c 	.word	0x20000f1c
 800f10c:	20000bb3 	.word	0x20000bb3
 800f110:	20000bb2 	.word	0x20000bb2
 800f114:	200009e4 	.word	0x200009e4
 800f118:	20001199 	.word	0x20001199
 800f11c:	20000efc 	.word	0x20000efc
 800f120:	20000ef4 	.word	0x20000ef4
 800f124:	20000ef8 	.word	0x20000ef8
 800f128:	20000f18 	.word	0x20000f18
 800f12c:	200000b8 	.word	0x200000b8
 800f130:	20000ec0 	.word	0x20000ec0
 800f134:	20000f04 	.word	0x20000f04
 800f138:	20000f01 	.word	0x20000f01
 800f13c:	20001038 	.word	0x20001038
 800f140:	200011d4 	.word	0x200011d4
 800f144:	20001090 	.word	0x20001090
 800f148:	200010a9 	.word	0x200010a9
 800f14c:	20000eec 	.word	0x20000eec
 800f150:	20000f10 	.word	0x20000f10
 800f154:	0803c000 	.word	0x0803c000
 800f158:	0803efff 	.word	0x0803efff
 800f15c:	20000f14 	.word	0x20000f14
 800f160:	20000e85 	.word	0x20000e85
 800f164:	20001122 	.word	0x20001122
 800f168:	20001126 	.word	0x20001126
 800f16c:	20001128 	.word	0x20001128
 800f170:	0803f810 	.word	0x0803f810
 800f174:	20000d6e 	.word	0x20000d6e
 800f178:	08037000 	.word	0x08037000
 800f17c:	0803bfff 	.word	0x0803bfff
 800f180:	20001124 	.word	0x20001124
 800f184:	0803f812 	.word	0x0803f812
 800f188:	20000d70 	.word	0x20000d70
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800f18c:	4bd1      	ldr	r3, [pc, #836]	@ (800f4d4 <tx_control+0x13c8>)
 800f18e:	79db      	ldrb	r3, [r3, #7]
 800f190:	2201      	movs	r2, #1
 800f192:	4313      	orrs	r3, r2
 800f194:	b2da      	uxtb	r2, r3
 800f196:	4bcf      	ldr	r3, [pc, #828]	@ (800f4d4 <tx_control+0x13c8>)
 800f198:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_dh])												// deshielo activo ?
 800f19a:	4bcf      	ldr	r3, [pc, #828]	@ (800f4d8 <tx_control+0x13cc>)
 800f19c:	785b      	ldrb	r3, [r3, #1]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d006      	beq.n	800f1b0 <tx_control+0x10a4>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800f1a2:	4bcc      	ldr	r3, [pc, #816]	@ (800f4d4 <tx_control+0x13c8>)
 800f1a4:	79db      	ldrb	r3, [r3, #7]
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	4bc9      	ldr	r3, [pc, #804]	@ (800f4d4 <tx_control+0x13c8>)
 800f1ae:	71da      	strb	r2, [r3, #7]
		if (flagsC[0])													// puerta abierta ?
 800f1b0:	4bca      	ldr	r3, [pc, #808]	@ (800f4dc <tx_control+0x13d0>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d006      	beq.n	800f1c6 <tx_control+0x10ba>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800f1b8:	4bc6      	ldr	r3, [pc, #792]	@ (800f4d4 <tx_control+0x13c8>)
 800f1ba:	79db      	ldrb	r3, [r3, #7]
 800f1bc:	2204      	movs	r2, #4
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	b2da      	uxtb	r2, r3
 800f1c2:	4bc4      	ldr	r3, [pc, #784]	@ (800f4d4 <tx_control+0x13c8>)
 800f1c4:	71da      	strb	r2, [r3, #7]
		if (flagsC[1])													// Modo ahorro 1 activo ?
 800f1c6:	4bc5      	ldr	r3, [pc, #788]	@ (800f4dc <tx_control+0x13d0>)
 800f1c8:	785b      	ldrb	r3, [r3, #1]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d006      	beq.n	800f1dc <tx_control+0x10d0>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800f1ce:	4bc1      	ldr	r3, [pc, #772]	@ (800f4d4 <tx_control+0x13c8>)
 800f1d0:	79db      	ldrb	r3, [r3, #7]
 800f1d2:	2208      	movs	r2, #8
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	4bbe      	ldr	r3, [pc, #760]	@ (800f4d4 <tx_control+0x13c8>)
 800f1da:	71da      	strb	r2, [r3, #7]
		if (flagsC[2])													// Modo ahorro 1 activo ?
 800f1dc:	4bbf      	ldr	r3, [pc, #764]	@ (800f4dc <tx_control+0x13d0>)
 800f1de:	789b      	ldrb	r3, [r3, #2]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <tx_control+0x10e6>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800f1e4:	4bbb      	ldr	r3, [pc, #748]	@ (800f4d4 <tx_control+0x13c8>)
 800f1e6:	79db      	ldrb	r3, [r3, #7]
 800f1e8:	2210      	movs	r2, #16
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	4bb9      	ldr	r3, [pc, #740]	@ (800f4d4 <tx_control+0x13c8>)
 800f1f0:	71da      	strb	r2, [r3, #7]
		if (flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800f1f2:	4bbb      	ldr	r3, [pc, #748]	@ (800f4e0 <tx_control+0x13d4>)
 800f1f4:	78db      	ldrb	r3, [r3, #3]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d006      	beq.n	800f208 <tx_control+0x10fc>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800f1fa:	4bb6      	ldr	r3, [pc, #728]	@ (800f4d4 <tx_control+0x13c8>)
 800f1fc:	79db      	ldrb	r3, [r3, #7]
 800f1fe:	2220      	movs	r2, #32
 800f200:	4313      	orrs	r3, r2
 800f202:	b2da      	uxtb	r2, r3
 800f204:	4bb3      	ldr	r3, [pc, #716]	@ (800f4d4 <tx_control+0x13c8>)
 800f206:	71da      	strb	r2, [r3, #7]
		if (GPIOR1 [f_fan])												// ventilador activo ?
 800f208:	4bb6      	ldr	r3, [pc, #728]	@ (800f4e4 <tx_control+0x13d8>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d006      	beq.n	800f21e <tx_control+0x1112>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800f210:	4bb0      	ldr	r3, [pc, #704]	@ (800f4d4 <tx_control+0x13c8>)
 800f212:	79db      	ldrb	r3, [r3, #7]
 800f214:	2240      	movs	r2, #64	@ 0x40
 800f216:	4313      	orrs	r3, r2
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	4bae      	ldr	r3, [pc, #696]	@ (800f4d4 <tx_control+0x13c8>)
 800f21c:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800f21e:	4bae      	ldr	r3, [pc, #696]	@ (800f4d8 <tx_control+0x13cc>)
 800f220:	789b      	ldrb	r3, [r3, #2]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d007      	beq.n	800f236 <tx_control+0x112a>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800f226:	4bab      	ldr	r3, [pc, #684]	@ (800f4d4 <tx_control+0x13c8>)
 800f228:	79db      	ldrb	r3, [r3, #7]
 800f22a:	2280      	movs	r2, #128	@ 0x80
 800f22c:	4252      	negs	r2, r2
 800f22e:	4313      	orrs	r3, r2
 800f230:	b2da      	uxtb	r2, r3
 800f232:	4ba8      	ldr	r3, [pc, #672]	@ (800f4d4 <tx_control+0x13c8>)
 800f234:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800f236:	4ba7      	ldr	r3, [pc, #668]	@ (800f4d4 <tx_control+0x13c8>)
 800f238:	2200      	movs	r2, #0
 800f23a:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800f23c:	2300      	movs	r3, #0
 800f23e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f240:	e011      	b.n	800f266 <tx_control+0x115a>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800f242:	4ba4      	ldr	r3, [pc, #656]	@ (800f4d4 <tx_control+0x13c8>)
 800f244:	7a1a      	ldrb	r2, [r3, #8]
 800f246:	49a8      	ldr	r1, [pc, #672]	@ (800f4e8 <tx_control+0x13dc>)
 800f248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24a:	18cb      	adds	r3, r1, r3
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	0019      	movs	r1, r3
 800f250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f252:	4099      	lsls	r1, r3
 800f254:	000b      	movs	r3, r1
 800f256:	b2db      	uxtb	r3, r3
 800f258:	4313      	orrs	r3, r2
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	4b9d      	ldr	r3, [pc, #628]	@ (800f4d4 <tx_control+0x13c8>)
 800f25e:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800f260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f262:	3301      	adds	r3, #1
 800f264:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f268:	2b07      	cmp	r3, #7
 800f26a:	ddea      	ble.n	800f242 <tx_control+0x1136>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800f26c:	4b99      	ldr	r3, [pc, #612]	@ (800f4d4 <tx_control+0x13c8>)
 800f26e:	7a1b      	ldrb	r3, [r3, #8]
 800f270:	2201      	movs	r2, #1
 800f272:	4393      	bics	r3, r2
 800f274:	b2da      	uxtb	r2, r3
 800f276:	4b97      	ldr	r3, [pc, #604]	@ (800f4d4 <tx_control+0x13c8>)
 800f278:	721a      	strb	r2, [r3, #8]
		for(uint8_t k=0; k<8; k++){
 800f27a:	2337      	movs	r3, #55	@ 0x37
 800f27c:	18fb      	adds	r3, r7, r3
 800f27e:	2200      	movs	r2, #0
 800f280:	701a      	strb	r2, [r3, #0]
 800f282:	e017      	b.n	800f2b4 <tx_control+0x11a8>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800f284:	4b93      	ldr	r3, [pc, #588]	@ (800f4d4 <tx_control+0x13c8>)
 800f286:	7a5b      	ldrb	r3, [r3, #9]
 800f288:	b25a      	sxtb	r2, r3
 800f28a:	2037      	movs	r0, #55	@ 0x37
 800f28c:	183b      	adds	r3, r7, r0
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	4996      	ldr	r1, [pc, #600]	@ (800f4ec <tx_control+0x13e0>)
 800f292:	5ccb      	ldrb	r3, [r1, r3]
 800f294:	0019      	movs	r1, r3
 800f296:	183b      	adds	r3, r7, r0
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	4099      	lsls	r1, r3
 800f29c:	000b      	movs	r3, r1
 800f29e:	b25b      	sxtb	r3, r3
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	b25b      	sxtb	r3, r3
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	4b8b      	ldr	r3, [pc, #556]	@ (800f4d4 <tx_control+0x13c8>)
 800f2a8:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800f2aa:	183b      	adds	r3, r7, r0
 800f2ac:	781a      	ldrb	r2, [r3, #0]
 800f2ae:	183b      	adds	r3, r7, r0
 800f2b0:	3201      	adds	r2, #1
 800f2b2:	701a      	strb	r2, [r3, #0]
 800f2b4:	2337      	movs	r3, #55	@ 0x37
 800f2b6:	18fb      	adds	r3, r7, r3
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	2b07      	cmp	r3, #7
 800f2bc:	d9e2      	bls.n	800f284 <tx_control+0x1178>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800f2be:	4b8c      	ldr	r3, [pc, #560]	@ (800f4f0 <tx_control+0x13e4>)
 800f2c0:	220a      	movs	r2, #10
 800f2c2:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f2c4:	4b8b      	ldr	r3, [pc, #556]	@ (800f4f4 <tx_control+0x13e8>)
 800f2c6:	227b      	movs	r2, #123	@ 0x7b
 800f2c8:	5c9a      	ldrb	r2, [r3, r2]
 800f2ca:	4b8b      	ldr	r3, [pc, #556]	@ (800f4f8 <tx_control+0x13ec>)
 800f2cc:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800f2ce:	4b89      	ldr	r3, [pc, #548]	@ (800f4f4 <tx_control+0x13e8>)
 800f2d0:	227c      	movs	r2, #124	@ 0x7c
 800f2d2:	5c9a      	ldrb	r2, [r3, r2]
 800f2d4:	4b88      	ldr	r3, [pc, #544]	@ (800f4f8 <tx_control+0x13ec>)
 800f2d6:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800f2d8:	4b87      	ldr	r3, [pc, #540]	@ (800f4f8 <tx_control+0x13ec>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800f2de:	4b86      	ldr	r3, [pc, #536]	@ (800f4f8 <tx_control+0x13ec>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800f2e4:	4b84      	ldr	r3, [pc, #528]	@ (800f4f8 <tx_control+0x13ec>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800f2ea:	4b83      	ldr	r3, [pc, #524]	@ (800f4f8 <tx_control+0x13ec>)
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800f2f0:	4b81      	ldr	r3, [pc, #516]	@ (800f4f8 <tx_control+0x13ec>)
 800f2f2:	2203      	movs	r2, #3
 800f2f4:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800f2f6:	4b7e      	ldr	r3, [pc, #504]	@ (800f4f0 <tx_control+0x13e4>)
 800f2f8:	781a      	ldrb	r2, [r3, #0]
 800f2fa:	4b7f      	ldr	r3, [pc, #508]	@ (800f4f8 <tx_control+0x13ec>)
 800f2fc:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800f2fe:	4b7f      	ldr	r3, [pc, #508]	@ (800f4fc <tx_control+0x13f0>)
 800f300:	2201      	movs	r2, #1
 800f302:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800f304:	4b7c      	ldr	r3, [pc, #496]	@ (800f4f8 <tx_control+0x13ec>)
 800f306:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800f308:	4b7d      	ldr	r3, [pc, #500]	@ (800f500 <tx_control+0x13f4>)
 800f30a:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800f30c:	2336      	movs	r3, #54	@ 0x36
 800f30e:	18fb      	adds	r3, r7, r3
 800f310:	2200      	movs	r2, #0
 800f312:	701a      	strb	r2, [r3, #0]
 800f314:	e00f      	b.n	800f336 <tx_control+0x122a>
			point_Y[i] = point_X[i];
 800f316:	2036      	movs	r0, #54	@ 0x36
 800f318:	183b      	adds	r3, r7, r0
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f31e:	18d2      	adds	r2, r2, r3
 800f320:	183b      	adds	r3, r7, r0
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f326:	18cb      	adds	r3, r1, r3
 800f328:	7812      	ldrb	r2, [r2, #0]
 800f32a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f32c:	183b      	adds	r3, r7, r0
 800f32e:	781a      	ldrb	r2, [r3, #0]
 800f330:	183b      	adds	r3, r7, r0
 800f332:	3201      	adds	r2, #1
 800f334:	701a      	strb	r2, [r3, #0]
 800f336:	2336      	movs	r3, #54	@ 0x36
 800f338:	18fb      	adds	r3, r7, r3
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	2b07      	cmp	r3, #7
 800f33e:	d9ea      	bls.n	800f316 <tx_control+0x120a>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800f340:	4b64      	ldr	r3, [pc, #400]	@ (800f4d4 <tx_control+0x13c8>)
 800f342:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[8];	 //
 800f344:	4b6f      	ldr	r3, [pc, #444]	@ (800f504 <tx_control+0x13f8>)
 800f346:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 10 ; i++ )
 800f348:	2335      	movs	r3, #53	@ 0x35
 800f34a:	18fb      	adds	r3, r7, r3
 800f34c:	2200      	movs	r2, #0
 800f34e:	701a      	strb	r2, [r3, #0]
 800f350:	e00f      	b.n	800f372 <tx_control+0x1266>
			point_Y[i] = point_X[i];
 800f352:	2035      	movs	r0, #53	@ 0x35
 800f354:	183b      	adds	r3, r7, r0
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f35a:	18d2      	adds	r2, r2, r3
 800f35c:	183b      	adds	r3, r7, r0
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f362:	18cb      	adds	r3, r1, r3
 800f364:	7812      	ldrb	r2, [r2, #0]
 800f366:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800f368:	183b      	adds	r3, r7, r0
 800f36a:	781a      	ldrb	r2, [r3, #0]
 800f36c:	183b      	adds	r3, r7, r0
 800f36e:	3201      	adds	r2, #1
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	2335      	movs	r3, #53	@ 0x35
 800f374:	18fb      	adds	r3, r7, r3
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	2b09      	cmp	r3, #9
 800f37a:	d9ea      	bls.n	800f352 <tx_control+0x1246>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f37c:	4b62      	ldr	r3, [pc, #392]	@ (800f508 <tx_control+0x13fc>)
 800f37e:	2200      	movs	r2, #0
 800f380:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f382:	4b5f      	ldr	r3, [pc, #380]	@ (800f500 <tx_control+0x13f4>)
 800f384:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800f386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f388:	2112      	movs	r1, #18
 800f38a:	0018      	movs	r0, r3
 800f38c:	f7f7 ff7c 	bl	8007288 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f390:	4b5d      	ldr	r3, [pc, #372]	@ (800f508 <tx_control+0x13fc>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	0e1b      	lsrs	r3, r3, #24
 800f396:	b2da      	uxtb	r2, r3
 800f398:	4b59      	ldr	r3, [pc, #356]	@ (800f500 <tx_control+0x13f4>)
 800f39a:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f39c:	4b5a      	ldr	r3, [pc, #360]	@ (800f508 <tx_control+0x13fc>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	0c1b      	lsrs	r3, r3, #16
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	4b56      	ldr	r3, [pc, #344]	@ (800f500 <tx_control+0x13f4>)
 800f3a6:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f3a8:	4b57      	ldr	r3, [pc, #348]	@ (800f508 <tx_control+0x13fc>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	0a1b      	lsrs	r3, r3, #8
 800f3ae:	b2da      	uxtb	r2, r3
 800f3b0:	4b53      	ldr	r3, [pc, #332]	@ (800f500 <tx_control+0x13f4>)
 800f3b2:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f3b4:	4b54      	ldr	r3, [pc, #336]	@ (800f508 <tx_control+0x13fc>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	b2da      	uxtb	r2, r3
 800f3ba:	4b51      	ldr	r3, [pc, #324]	@ (800f500 <tx_control+0x13f4>)
 800f3bc:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800f3be:	4b53      	ldr	r3, [pc, #332]	@ (800f50c <tx_control+0x1400>)
 800f3c0:	4a4f      	ldr	r2, [pc, #316]	@ (800f500 <tx_control+0x13f4>)
 800f3c2:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f3c4:	4b52      	ldr	r3, [pc, #328]	@ (800f510 <tx_control+0x1404>)
 800f3c6:	4a4e      	ldr	r2, [pc, #312]	@ (800f500 <tx_control+0x13f4>)
 800f3c8:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800f3ca:	4b52      	ldr	r3, [pc, #328]	@ (800f514 <tx_control+0x1408>)
 800f3cc:	4a52      	ldr	r2, [pc, #328]	@ (800f518 <tx_control+0x140c>)
 800f3ce:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f3d0:	4b47      	ldr	r3, [pc, #284]	@ (800f4f0 <tx_control+0x13e4>)
 800f3d2:	2216      	movs	r2, #22
 800f3d4:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800f3d6:	4b49      	ldr	r3, [pc, #292]	@ (800f4fc <tx_control+0x13f0>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800f3dc:	4b47      	ldr	r3, [pc, #284]	@ (800f4fc <tx_control+0x13f0>)
 800f3de:	2201      	movs	r2, #1
 800f3e0:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f3e2:	4b4e      	ldr	r3, [pc, #312]	@ (800f51c <tx_control+0x1410>)
 800f3e4:	2255      	movs	r2, #85	@ 0x55
 800f3e6:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f3e8:	4b4d      	ldr	r3, [pc, #308]	@ (800f520 <tx_control+0x1414>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f3ee:	f000 ff38 	bl	8010262 <tx_control+0x2156>
			point_Y[i] = point_X[i];
 800f3f2:	2034      	movs	r0, #52	@ 0x34
 800f3f4:	183b      	adds	r3, r7, r0
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3fa:	18d2      	adds	r2, r2, r3
 800f3fc:	183b      	adds	r3, r7, r0
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f402:	18cb      	adds	r3, r1, r3
 800f404:	7812      	ldrb	r2, [r2, #0]
 800f406:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f408:	183b      	adds	r3, r7, r0
 800f40a:	781a      	ldrb	r2, [r3, #0]
 800f40c:	183b      	adds	r3, r7, r0
 800f40e:	3201      	adds	r2, #1
 800f410:	701a      	strb	r2, [r3, #0]
 800f412:	2334      	movs	r3, #52	@ 0x34
 800f414:	18fb      	adds	r3, r7, r3
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2b07      	cmp	r3, #7
 800f41a:	d9ea      	bls.n	800f3f2 <tx_control+0x12e6>
		point_Y = &bufferTxControl[8];	 //
 800f41c:	4b39      	ldr	r3, [pc, #228]	@ (800f504 <tx_control+0x13f8>)
 800f41e:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 128 ; i++ )
 800f420:	2333      	movs	r3, #51	@ 0x33
 800f422:	18fb      	adds	r3, r7, r3
 800f424:	2200      	movs	r2, #0
 800f426:	701a      	strb	r2, [r3, #0]
 800f428:	e00e      	b.n	800f448 <tx_control+0x133c>
			point_Y[i] = reePlantilla[i];
 800f42a:	2033      	movs	r0, #51	@ 0x33
 800f42c:	183b      	adds	r3, r7, r0
 800f42e:	781a      	ldrb	r2, [r3, #0]
 800f430:	183b      	adds	r3, r7, r0
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f436:	18cb      	adds	r3, r1, r3
 800f438:	493a      	ldr	r1, [pc, #232]	@ (800f524 <tx_control+0x1418>)
 800f43a:	5c8a      	ldrb	r2, [r1, r2]
 800f43c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800f43e:	183b      	adds	r3, r7, r0
 800f440:	781a      	ldrb	r2, [r3, #0]
 800f442:	183b      	adds	r3, r7, r0
 800f444:	3201      	adds	r2, #1
 800f446:	701a      	strb	r2, [r3, #0]
 800f448:	2333      	movs	r3, #51	@ 0x33
 800f44a:	18fb      	adds	r3, r7, r3
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	b25b      	sxtb	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	daea      	bge.n	800f42a <tx_control+0x131e>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f454:	4b2c      	ldr	r3, [pc, #176]	@ (800f508 <tx_control+0x13fc>)
 800f456:	2200      	movs	r2, #0
 800f458:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f45a:	4b29      	ldr	r3, [pc, #164]	@ (800f500 <tx_control+0x13f4>)
 800f45c:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800f45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f460:	2188      	movs	r1, #136	@ 0x88
 800f462:	0018      	movs	r0, r3
 800f464:	f7f7 ff10 	bl	8007288 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f468:	4b27      	ldr	r3, [pc, #156]	@ (800f508 <tx_control+0x13fc>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	0e1b      	lsrs	r3, r3, #24
 800f46e:	b2d9      	uxtb	r1, r3
 800f470:	4b23      	ldr	r3, [pc, #140]	@ (800f500 <tx_control+0x13f4>)
 800f472:	2288      	movs	r2, #136	@ 0x88
 800f474:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f476:	4b24      	ldr	r3, [pc, #144]	@ (800f508 <tx_control+0x13fc>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	0c1b      	lsrs	r3, r3, #16
 800f47c:	b2d9      	uxtb	r1, r3
 800f47e:	4b20      	ldr	r3, [pc, #128]	@ (800f500 <tx_control+0x13f4>)
 800f480:	2289      	movs	r2, #137	@ 0x89
 800f482:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f484:	4b20      	ldr	r3, [pc, #128]	@ (800f508 <tx_control+0x13fc>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	0a1b      	lsrs	r3, r3, #8
 800f48a:	b2d9      	uxtb	r1, r3
 800f48c:	4b1c      	ldr	r3, [pc, #112]	@ (800f500 <tx_control+0x13f4>)
 800f48e:	228a      	movs	r2, #138	@ 0x8a
 800f490:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f492:	4b1d      	ldr	r3, [pc, #116]	@ (800f508 <tx_control+0x13fc>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	b2d9      	uxtb	r1, r3
 800f498:	4b19      	ldr	r3, [pc, #100]	@ (800f500 <tx_control+0x13f4>)
 800f49a:	228b      	movs	r2, #139	@ 0x8b
 800f49c:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800f49e:	4b1b      	ldr	r3, [pc, #108]	@ (800f50c <tx_control+0x1400>)
 800f4a0:	4a17      	ldr	r2, [pc, #92]	@ (800f500 <tx_control+0x13f4>)
 800f4a2:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f4a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f510 <tx_control+0x1404>)
 800f4a6:	4a16      	ldr	r2, [pc, #88]	@ (800f500 <tx_control+0x13f4>)
 800f4a8:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800f4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800f514 <tx_control+0x1408>)
 800f4ac:	4a1e      	ldr	r2, [pc, #120]	@ (800f528 <tx_control+0x141c>)
 800f4ae:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f0 <tx_control+0x13e4>)
 800f4b2:	228c      	movs	r2, #140	@ 0x8c
 800f4b4:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800f4b6:	4b11      	ldr	r3, [pc, #68]	@ (800f4fc <tx_control+0x13f0>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800f4bc:	4b0f      	ldr	r3, [pc, #60]	@ (800f4fc <tx_control+0x13f0>)
 800f4be:	2201      	movs	r2, #1
 800f4c0:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f4c2:	4b16      	ldr	r3, [pc, #88]	@ (800f51c <tx_control+0x1410>)
 800f4c4:	2255      	movs	r2, #85	@ 0x55
 800f4c6:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f4c8:	4b15      	ldr	r3, [pc, #84]	@ (800f520 <tx_control+0x1414>)
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f4ce:	f000 fec8 	bl	8010262 <tx_control+0x2156>
 800f4d2:	46c0      	nop			@ (mov r8, r8)
 800f4d4:	20000ee0 	.word	0x20000ee0
 800f4d8:	20000c00 	.word	0x20000c00
 800f4dc:	20000c98 	.word	0x20000c98
 800f4e0:	20000bd4 	.word	0x20000bd4
 800f4e4:	20000c3c 	.word	0x20000c3c
 800f4e8:	20000bdc 	.word	0x20000bdc
 800f4ec:	20000be4 	.word	0x20000be4
 800f4f0:	20000f18 	.word	0x20000f18
 800f4f4:	200000b8 	.word	0x200000b8
 800f4f8:	20000ec0 	.word	0x20000ec0
 800f4fc:	20000f04 	.word	0x20000f04
 800f500:	20001090 	.word	0x20001090
 800f504:	20001098 	.word	0x20001098
 800f508:	20000f1c 	.word	0x20000f1c
 800f50c:	20000efc 	.word	0x20000efc
 800f510:	20000ef4 	.word	0x20000ef4
 800f514:	20000ef8 	.word	0x20000ef8
 800f518:	200010a6 	.word	0x200010a6
 800f51c:	20000f01 	.word	0x20000f01
 800f520:	20000f0c 	.word	0x20000f0c
 800f524:	20000ce8 	.word	0x20000ce8
 800f528:	2000111c 	.word	0x2000111c
				goto 	verifica_version2;		//jreq	verifica_version2
 800f52c:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == reePlantilla[eeversion2]){
 800f52e:	4be5      	ldr	r3, [pc, #916]	@ (800f8c4 <tx_control+0x17b8>)
 800f530:	227e      	movs	r2, #126	@ 0x7e
 800f532:	5c9a      	ldrb	r2, [r3, r2]
 800f534:	4be4      	ldr	r3, [pc, #912]	@ (800f8c8 <tx_control+0x17bc>)
 800f536:	217c      	movs	r1, #124	@ 0x7c
 800f538:	5c5b      	ldrb	r3, [r3, r1]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d159      	bne.n	800f5f2 <tx_control+0x14e6>
				goto 	verifica_version3;		//jreq	verifica_version3
 800f53e:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800f540:	4be0      	ldr	r3, [pc, #896]	@ (800f8c4 <tx_control+0x17b8>)
 800f542:	789b      	ldrb	r3, [r3, #2]
 800f544:	2baa      	cmp	r3, #170	@ 0xaa
 800f546:	d156      	bne.n	800f5f6 <tx_control+0x14ea>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800f548:	4bde      	ldr	r3, [pc, #888]	@ (800f8c4 <tx_control+0x17b8>)
 800f54a:	2243      	movs	r2, #67	@ 0x43
 800f54c:	5c9b      	ldrb	r3, [r3, r2]
 800f54e:	2b66      	cmp	r3, #102	@ 0x66
 800f550:	d153      	bne.n	800f5fa <tx_control+0x14ee>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800f552:	4bdc      	ldr	r3, [pc, #880]	@ (800f8c4 <tx_control+0x17b8>)
 800f554:	2281      	movs	r2, #129	@ 0x81
 800f556:	5c9b      	ldrb	r3, [r3, r2]
 800f558:	2bcc      	cmp	r3, #204	@ 0xcc
 800f55a:	d150      	bne.n	800f5fe <tx_control+0x14f2>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f55c:	4bdb      	ldr	r3, [pc, #876]	@ (800f8cc <tx_control+0x17c0>)
 800f55e:	2200      	movs	r2, #0
 800f560:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800f562:	4bd8      	ldr	r3, [pc, #864]	@ (800f8c4 <tx_control+0x17b8>)
 800f564:	647b      	str	r3, [r7, #68]	@ 0x44
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800f566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f568:	2182      	movs	r1, #130	@ 0x82
 800f56a:	0018      	movs	r0, r3
 800f56c:	f7f7 fe8c 	bl	8007288 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800f570:	2300      	movs	r3, #0
 800f572:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800f574:	4bd3      	ldr	r3, [pc, #844]	@ (800f8c4 <tx_control+0x17b8>)
 800f576:	2282      	movs	r2, #130	@ 0x82
 800f578:	5c9b      	ldrb	r3, [r3, r2]
 800f57a:	061b      	lsls	r3, r3, #24
 800f57c:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800f57e:	4bd1      	ldr	r3, [pc, #836]	@ (800f8c4 <tx_control+0x17b8>)
 800f580:	2283      	movs	r2, #131	@ 0x83
 800f582:	5c9b      	ldrb	r3, [r3, r2]
 800f584:	041b      	lsls	r3, r3, #16
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	18d3      	adds	r3, r2, r3
 800f58a:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800f58c:	4bcd      	ldr	r3, [pc, #820]	@ (800f8c4 <tx_control+0x17b8>)
 800f58e:	2284      	movs	r2, #132	@ 0x84
 800f590:	5c9b      	ldrb	r3, [r3, r2]
 800f592:	021b      	lsls	r3, r3, #8
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	18d3      	adds	r3, r2, r3
 800f598:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800f59a:	4bca      	ldr	r3, [pc, #808]	@ (800f8c4 <tx_control+0x17b8>)
 800f59c:	2285      	movs	r2, #133	@ 0x85
 800f59e:	5c9b      	ldrb	r3, [r3, r2]
 800f5a0:	001a      	movs	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	189b      	adds	r3, r3, r2
 800f5a6:	607b      	str	r3, [r7, #4]
			if (chksum_32_HW_LW != chksum_to_compare){
 800f5a8:	4bc8      	ldr	r3, [pc, #800]	@ (800f8cc <tx_control+0x17c0>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d127      	bne.n	800f602 <tx_control+0x14f6>
write_param:
 800f5b2:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800f5b4:	4bc6      	ldr	r3, [pc, #792]	@ (800f8d0 <tx_control+0x17c4>)
 800f5b6:	2255      	movs	r2, #85	@ 0x55
 800f5b8:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800f5ba:	4bc2      	ldr	r3, [pc, #776]	@ (800f8c4 <tx_control+0x17b8>)
 800f5bc:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f5c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	647b      	str	r3, [r7, #68]	@ 0x44
			dataPointer =	point_X;	// LDW		dataPointer,X
 800f5ca:	4bc2      	ldr	r3, [pc, #776]	@ (800f8d4 <tx_control+0x17c8>)
 800f5cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5ce:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800f5d0:	4bc1      	ldr	r3, [pc, #772]	@ (800f8d8 <tx_control+0x17cc>)
 800f5d2:	4ac2      	ldr	r2, [pc, #776]	@ (800f8dc <tx_control+0x17d0>)
 800f5d4:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800f5d6:	f7f7 fedd 	bl	8007394 <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800f5da:	4bc1      	ldr	r3, [pc, #772]	@ (800f8e0 <tx_control+0x17d4>)
 800f5dc:	22f1      	movs	r2, #241	@ 0xf1
 800f5de:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f5e0:	4bbf      	ldr	r3, [pc, #764]	@ (800f8e0 <tx_control+0x17d4>)
 800f5e2:	223d      	movs	r2, #61	@ 0x3d
 800f5e4:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800f5e6:	4bbf      	ldr	r3, [pc, #764]	@ (800f8e4 <tx_control+0x17d8>)
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800f5ec:	e010      	b.n	800f610 <tx_control+0x1504>
			goto	no_writeParam;				//jp		no_writeParam
 800f5ee:	46c0      	nop			@ (mov r8, r8)
 800f5f0:	e008      	b.n	800f604 <tx_control+0x14f8>
			goto	no_writeParam;				//jp		no_writeParam
 800f5f2:	46c0      	nop			@ (mov r8, r8)
 800f5f4:	e006      	b.n	800f604 <tx_control+0x14f8>
				goto	no_writeParam;			//jrne	no_writeParam
 800f5f6:	46c0      	nop			@ (mov r8, r8)
 800f5f8:	e004      	b.n	800f604 <tx_control+0x14f8>
				goto	no_writeParam;			//jrne	no_writeParam
 800f5fa:	46c0      	nop			@ (mov r8, r8)
 800f5fc:	e002      	b.n	800f604 <tx_control+0x14f8>
				goto	no_writeParam;			//jrne	no_writeParam
 800f5fe:	46c0      	nop			@ (mov r8, r8)
 800f600:	e000      	b.n	800f604 <tx_control+0x14f8>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800f602:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800f604:	4bb6      	ldr	r3, [pc, #728]	@ (800f8e0 <tx_control+0x17d4>)
 800f606:	22f1      	movs	r2, #241	@ 0xf1
 800f608:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f60a:	4bb5      	ldr	r3, [pc, #724]	@ (800f8e0 <tx_control+0x17d4>)
 800f60c:	223e      	movs	r2, #62	@ 0x3e
 800f60e:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800f610:	4bb5      	ldr	r3, [pc, #724]	@ (800f8e8 <tx_control+0x17dc>)
 800f612:	4ab3      	ldr	r2, [pc, #716]	@ (800f8e0 <tx_control+0x17d4>)
 800f614:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800f616:	4bb5      	ldr	r3, [pc, #724]	@ (800f8ec <tx_control+0x17e0>)
 800f618:	4ab1      	ldr	r2, [pc, #708]	@ (800f8e0 <tx_control+0x17d4>)
 800f61a:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800f61c:	4bb4      	ldr	r3, [pc, #720]	@ (800f8f0 <tx_control+0x17e4>)
 800f61e:	4ab5      	ldr	r2, [pc, #724]	@ (800f8f4 <tx_control+0x17e8>)
 800f620:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f622:	4bb5      	ldr	r3, [pc, #724]	@ (800f8f8 <tx_control+0x17ec>)
 800f624:	2202      	movs	r2, #2
 800f626:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800f628:	4bae      	ldr	r3, [pc, #696]	@ (800f8e4 <tx_control+0x17d8>)
 800f62a:	2201      	movs	r2, #1
 800f62c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800f62e:	4bb3      	ldr	r3, [pc, #716]	@ (800f8fc <tx_control+0x17f0>)
 800f630:	2255      	movs	r2, #85	@ 0x55
 800f632:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800f634:	4bb2      	ldr	r3, [pc, #712]	@ (800f900 <tx_control+0x17f4>)
 800f636:	2200      	movs	r2, #0
 800f638:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f63a:	f000 fe12 	bl	8010262 <tx_control+0x2156>
				goto rx_firmware01;
 800f63e:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800f640:	4bb0      	ldr	r3, [pc, #704]	@ (800f904 <tx_control+0x17f8>)
 800f642:	785b      	ldrb	r3, [r3, #1]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d13c      	bne.n	800f6c2 <tx_control+0x15b6>
rx_numBloqFirm:
 800f648:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800f64a:	4bad      	ldr	r3, [pc, #692]	@ (800f900 <tx_control+0x17f4>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	2b49      	cmp	r3, #73	@ 0x49
 800f650:	d000      	beq.n	800f654 <tx_control+0x1548>
 800f652:	e1a8      	b.n	800f9a6 <tx_control+0x189a>
				goto rx_numBloqFirm_01;
 800f654:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = (RxBuffer_Ble[2] << 8) | RxBuffer_Ble[3] ;
 800f656:	4b9b      	ldr	r3, [pc, #620]	@ (800f8c4 <tx_control+0x17b8>)
 800f658:	789b      	ldrb	r3, [r3, #2]
 800f65a:	b21b      	sxth	r3, r3
 800f65c:	021b      	lsls	r3, r3, #8
 800f65e:	b21a      	sxth	r2, r3
 800f660:	4b98      	ldr	r3, [pc, #608]	@ (800f8c4 <tx_control+0x17b8>)
 800f662:	78db      	ldrb	r3, [r3, #3]
 800f664:	b21b      	sxth	r3, r3
 800f666:	4313      	orrs	r3, r2
 800f668:	b21b      	sxth	r3, r3
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	4ba6      	ldr	r3, [pc, #664]	@ (800f908 <tx_control+0x17fc>)
 800f66e:	801a      	strh	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800f670:	4ba6      	ldr	r3, [pc, #664]	@ (800f90c <tx_control+0x1800>)
 800f672:	2200      	movs	r2, #0
 800f674:	801a      	strh	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800f676:	4ba6      	ldr	r3, [pc, #664]	@ (800f910 <tx_control+0x1804>)
 800f678:	22f1      	movs	r2, #241	@ 0xf1
 800f67a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800f67c:	4ba4      	ldr	r3, [pc, #656]	@ (800f910 <tx_control+0x1804>)
 800f67e:	2207      	movs	r2, #7
 800f680:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800f682:	4ba0      	ldr	r3, [pc, #640]	@ (800f904 <tx_control+0x17f8>)
 800f684:	2201      	movs	r2, #1
 800f686:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800f688:	4ba2      	ldr	r3, [pc, #648]	@ (800f914 <tx_control+0x1808>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800f68e:	4b96      	ldr	r3, [pc, #600]	@ (800f8e8 <tx_control+0x17dc>)
 800f690:	4a9f      	ldr	r2, [pc, #636]	@ (800f910 <tx_control+0x1804>)
 800f692:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f694:	4b95      	ldr	r3, [pc, #596]	@ (800f8ec <tx_control+0x17e0>)
 800f696:	4a9e      	ldr	r2, [pc, #632]	@ (800f910 <tx_control+0x1804>)
 800f698:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800f69a:	4b95      	ldr	r3, [pc, #596]	@ (800f8f0 <tx_control+0x17e4>)
 800f69c:	4a9e      	ldr	r2, [pc, #632]	@ (800f918 <tx_control+0x180c>)
 800f69e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f6a0:	4b95      	ldr	r3, [pc, #596]	@ (800f8f8 <tx_control+0x17ec>)
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f6a6:	4b8f      	ldr	r3, [pc, #572]	@ (800f8e4 <tx_control+0x17d8>)
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f6ac:	4b93      	ldr	r3, [pc, #588]	@ (800f8fc <tx_control+0x17f0>)
 800f6ae:	2255      	movs	r2, #85	@ 0x55
 800f6b0:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800f6b2:	4b93      	ldr	r3, [pc, #588]	@ (800f900 <tx_control+0x17f4>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;
 800f6b8:	4b98      	ldr	r3, [pc, #608]	@ (800f91c <tx_control+0x1810>)
 800f6ba:	2205      	movs	r2, #5
 800f6bc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800f6be:	f000 fdd0 	bl	8010262 <tx_control+0x2156>
				goto rxBloqFirm;
 800f6c2:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800f6c4:	4b8f      	ldr	r3, [pc, #572]	@ (800f904 <tx_control+0x17f8>)
 800f6c6:	789b      	ldrb	r3, [r3, #2]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d101      	bne.n	800f6d0 <tx_control+0x15c4>
 800f6cc:	f000 fdc8 	bl	8010260 <tx_control+0x2154>
				goto rxBloqFirm_01;
 800f6d0:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800f6d2:	4b8c      	ldr	r3, [pc, #560]	@ (800f904 <tx_control+0x17f8>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800f6d8:	4b7c      	ldr	r3, [pc, #496]	@ (800f8cc <tx_control+0x17c0>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800f6de:	4b90      	ldr	r3, [pc, #576]	@ (800f920 <tx_control+0x1814>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	701a      	strb	r2, [r3, #0]
			cksum_aux = 0;
 800f6e4:	4b8f      	ldr	r3, [pc, #572]	@ (800f924 <tx_control+0x1818>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	601a      	str	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[wreg]); // call	build_chksum;	/ ve calculando el checksum
 800f6ea:	4b8d      	ldr	r3, [pc, #564]	@ (800f920 <tx_control+0x1814>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	001a      	movs	r2, r3
 800f6f0:	4b74      	ldr	r3, [pc, #464]	@ (800f8c4 <tx_control+0x17b8>)
 800f6f2:	5c9b      	ldrb	r3, [r3, r2]
 800f6f4:	0018      	movs	r0, r3
 800f6f6:	f7f7 fe39 	bl	800736c <build_chksum>
			wreg++;			// inc		wreg
 800f6fa:	4b89      	ldr	r3, [pc, #548]	@ (800f920 <tx_control+0x1814>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	3301      	adds	r3, #1
 800f700:	b2da      	uxtb	r2, r3
 800f702:	4b87      	ldr	r3, [pc, #540]	@ (800f920 <tx_control+0x1814>)
 800f704:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800f706:	4b86      	ldr	r3, [pc, #536]	@ (800f920 <tx_control+0x1814>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	b25b      	sxtb	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	db00      	blt.n	800f712 <tx_control+0x1606>
				goto load_bloqFirm;
 800f710:	e7eb      	b.n	800f6ea <tx_control+0x15de>
			cksum_aux = (RxBuffer_Ble[128] << 24) | (RxBuffer_Ble[129] << 16) |(RxBuffer_Ble[130] << 8) | RxBuffer_Ble[131];
 800f712:	4b6c      	ldr	r3, [pc, #432]	@ (800f8c4 <tx_control+0x17b8>)
 800f714:	2280      	movs	r2, #128	@ 0x80
 800f716:	5c9b      	ldrb	r3, [r3, r2]
 800f718:	061a      	lsls	r2, r3, #24
 800f71a:	4b6a      	ldr	r3, [pc, #424]	@ (800f8c4 <tx_control+0x17b8>)
 800f71c:	2181      	movs	r1, #129	@ 0x81
 800f71e:	5c5b      	ldrb	r3, [r3, r1]
 800f720:	041b      	lsls	r3, r3, #16
 800f722:	431a      	orrs	r2, r3
 800f724:	4b67      	ldr	r3, [pc, #412]	@ (800f8c4 <tx_control+0x17b8>)
 800f726:	2182      	movs	r1, #130	@ 0x82
 800f728:	5c5b      	ldrb	r3, [r3, r1]
 800f72a:	021b      	lsls	r3, r3, #8
 800f72c:	4313      	orrs	r3, r2
 800f72e:	4a65      	ldr	r2, [pc, #404]	@ (800f8c4 <tx_control+0x17b8>)
 800f730:	2183      	movs	r1, #131	@ 0x83
 800f732:	5c52      	ldrb	r2, [r2, r1]
 800f734:	4313      	orrs	r3, r2
 800f736:	001a      	movs	r2, r3
 800f738:	4b7a      	ldr	r3, [pc, #488]	@ (800f924 <tx_control+0x1818>)
 800f73a:	601a      	str	r2, [r3, #0]
			if(cksum_aux != chksum_32_HW_LW){
 800f73c:	4b79      	ldr	r3, [pc, #484]	@ (800f924 <tx_control+0x1818>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	4b62      	ldr	r3, [pc, #392]	@ (800f8cc <tx_control+0x17c0>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d145      	bne.n	800f7d4 <tx_control+0x16c8>
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800f748:	4b72      	ldr	r3, [pc, #456]	@ (800f914 <tx_control+0x1808>)
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	4b5f      	ldr	r3, [pc, #380]	@ (800f8cc <tx_control+0x17c0>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	18d2      	adds	r2, r2, r3
 800f752:	4b70      	ldr	r3, [pc, #448]	@ (800f914 <tx_control+0x1808>)
 800f754:	601a      	str	r2, [r3, #0]
			if(direccion_fw >= 0x803F000)
 800f756:	4b74      	ldr	r3, [pc, #464]	@ (800f928 <tx_control+0x181c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a74      	ldr	r2, [pc, #464]	@ (800f92c <tx_control+0x1820>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d901      	bls.n	800f764 <tx_control+0x1658>
				NVIC_SystemReset();
 800f760:	f7fe fcc2 	bl	800e0e8 <__NVIC_SystemReset>
			if(contador_bloques_fw == 16)
 800f764:	4b72      	ldr	r3, [pc, #456]	@ (800f930 <tx_control+0x1824>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b10      	cmp	r3, #16
 800f76a:	d107      	bne.n	800f77c <tx_control+0x1670>
				borra_pagina_logger(pagina_borrado);
 800f76c:	4b71      	ldr	r3, [pc, #452]	@ (800f934 <tx_control+0x1828>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	0018      	movs	r0, r3
 800f772:	f001 fed7 	bl	8011524 <borra_pagina_logger>
				contador_bloques_fw = 0;
 800f776:	4b6e      	ldr	r3, [pc, #440]	@ (800f930 <tx_control+0x1824>)
 800f778:	2200      	movs	r2, #0
 800f77a:	701a      	strb	r2, [r3, #0]
			contador_bloques_fw++;
 800f77c:	4b6c      	ldr	r3, [pc, #432]	@ (800f930 <tx_control+0x1824>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	b2da      	uxtb	r2, r3
 800f784:	4b6a      	ldr	r3, [pc, #424]	@ (800f930 <tx_control+0x1824>)
 800f786:	701a      	strb	r2, [r3, #0]
			graba_bloque_fw();
 800f788:	f001 fefc 	bl	8011584 <graba_bloque_fw>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800f78c:	4b5f      	ldr	r3, [pc, #380]	@ (800f90c <tx_control+0x1800>)
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	3301      	adds	r3, #1
 800f792:	b29a      	uxth	r2, r3
 800f794:	4b5d      	ldr	r3, [pc, #372]	@ (800f90c <tx_control+0x1800>)
 800f796:	801a      	strh	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800f798:	4b5c      	ldr	r3, [pc, #368]	@ (800f90c <tx_control+0x1800>)
 800f79a:	881a      	ldrh	r2, [r3, #0]
 800f79c:	4b5a      	ldr	r3, [pc, #360]	@ (800f908 <tx_control+0x17fc>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d10c      	bne.n	800f7be <tx_control+0x16b2>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800f7a4:	4b57      	ldr	r3, [pc, #348]	@ (800f904 <tx_control+0x17f8>)
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	70da      	strb	r2, [r3, #3]
			direccion_fw = 0x8020000;
 800f7aa:	4b5f      	ldr	r3, [pc, #380]	@ (800f928 <tx_control+0x181c>)
 800f7ac:	4a62      	ldr	r2, [pc, #392]	@ (800f938 <tx_control+0x182c>)
 800f7ae:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f7b0:	4b60      	ldr	r3, [pc, #384]	@ (800f934 <tx_control+0x1828>)
 800f7b2:	2240      	movs	r2, #64	@ 0x40
 800f7b4:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f7b6:	4b5e      	ldr	r3, [pc, #376]	@ (800f930 <tx_control+0x1824>)
 800f7b8:	2210      	movs	r2, #16
 800f7ba:	701a      	strb	r2, [r3, #0]
 800f7bc:	e000      	b.n	800f7c0 <tx_control+0x16b4>
				goto rxFirm_noComplete ;
 800f7be:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f7c0:	4b53      	ldr	r3, [pc, #332]	@ (800f910 <tx_control+0x1804>)
 800f7c2:	22f1      	movs	r2, #241	@ 0xf1
 800f7c4:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f7c6:	4b52      	ldr	r3, [pc, #328]	@ (800f910 <tx_control+0x1804>)
 800f7c8:	223d      	movs	r2, #61	@ 0x3d
 800f7ca:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f7cc:	4b53      	ldr	r3, [pc, #332]	@ (800f91c <tx_control+0x1810>)
 800f7ce:	2205      	movs	r2, #5
 800f7d0:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800f7d2:	e023      	b.n	800f81c <tx_control+0x1710>
				goto no_writeBloqFirm;
 800f7d4:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800f7d6:	4b4e      	ldr	r3, [pc, #312]	@ (800f910 <tx_control+0x1804>)
 800f7d8:	22f1      	movs	r2, #241	@ 0xf1
 800f7da:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f7dc:	4b4c      	ldr	r3, [pc, #304]	@ (800f910 <tx_control+0x1804>)
 800f7de:	223e      	movs	r2, #62	@ 0x3e
 800f7e0:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7e6:	e007      	b.n	800f7f8 <tx_control+0x16ec>
				flagsRxFirm[i]=0;
 800f7e8:	4a46      	ldr	r2, [pc, #280]	@ (800f904 <tx_control+0x17f8>)
 800f7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ec:	18d3      	adds	r3, r2, r3
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7fa:	2b07      	cmp	r3, #7
 800f7fc:	ddf4      	ble.n	800f7e8 <tx_control+0x16dc>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800f7fe:	4b40      	ldr	r3, [pc, #256]	@ (800f900 <tx_control+0x17f4>)
 800f800:	2200      	movs	r2, #0
 800f802:	701a      	strb	r2, [r3, #0]
			bandera_act_fw_j = 0;
 800f804:	4b4d      	ldr	r3, [pc, #308]	@ (800f93c <tx_control+0x1830>)
 800f806:	2200      	movs	r2, #0
 800f808:	701a      	strb	r2, [r3, #0]
			direccion_fw = 0x8020000;
 800f80a:	4b47      	ldr	r3, [pc, #284]	@ (800f928 <tx_control+0x181c>)
 800f80c:	4a4a      	ldr	r2, [pc, #296]	@ (800f938 <tx_control+0x182c>)
 800f80e:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f810:	4b48      	ldr	r3, [pc, #288]	@ (800f934 <tx_control+0x1828>)
 800f812:	2240      	movs	r2, #64	@ 0x40
 800f814:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f816:	4b46      	ldr	r3, [pc, #280]	@ (800f930 <tx_control+0x1824>)
 800f818:	2210      	movs	r2, #16
 800f81a:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f81c:	4b32      	ldr	r3, [pc, #200]	@ (800f8e8 <tx_control+0x17dc>)
 800f81e:	4a3c      	ldr	r2, [pc, #240]	@ (800f910 <tx_control+0x1804>)
 800f820:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f822:	4b32      	ldr	r3, [pc, #200]	@ (800f8ec <tx_control+0x17e0>)
 800f824:	4a3a      	ldr	r2, [pc, #232]	@ (800f910 <tx_control+0x1804>)
 800f826:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f828:	4b31      	ldr	r3, [pc, #196]	@ (800f8f0 <tx_control+0x17e4>)
 800f82a:	4a3b      	ldr	r2, [pc, #236]	@ (800f918 <tx_control+0x180c>)
 800f82c:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800f82e:	4b32      	ldr	r3, [pc, #200]	@ (800f8f8 <tx_control+0x17ec>)
 800f830:	2202      	movs	r2, #2
 800f832:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800f834:	4b2b      	ldr	r3, [pc, #172]	@ (800f8e4 <tx_control+0x17d8>)
 800f836:	2201      	movs	r2, #1
 800f838:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f83a:	4b30      	ldr	r3, [pc, #192]	@ (800f8fc <tx_control+0x17f0>)
 800f83c:	2255      	movs	r2, #85	@ 0x55
 800f83e:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800f840:	4b2f      	ldr	r3, [pc, #188]	@ (800f900 <tx_control+0x17f4>)
 800f842:	2200      	movs	r2, #0
 800f844:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;
 800f846:	f000 fd0c 	bl	8010262 <tx_control+0x2156>
			goto rxChkFirm;				// jp		rxChkFirm;
 800f84a:	46c0      	nop			@ (mov r8, r8)
			cksum_gral_aux = 0;
 800f84c:	4b3c      	ldr	r3, [pc, #240]	@ (800f940 <tx_control+0x1834>)
 800f84e:	2200      	movs	r2, #0
 800f850:	601a      	str	r2, [r3, #0]
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800f852:	4b2c      	ldr	r3, [pc, #176]	@ (800f904 <tx_control+0x17f8>)
 800f854:	791b      	ldrb	r3, [r3, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d000      	beq.n	800f85c <tx_control+0x1750>
 800f85a:	e0a7      	b.n	800f9ac <tx_control+0x18a0>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800f85c:	4b28      	ldr	r3, [pc, #160]	@ (800f900 <tx_control+0x17f4>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b4a      	cmp	r3, #74	@ 0x4a
 800f862:	d000      	beq.n	800f866 <tx_control+0x175a>
 800f864:	e0a5      	b.n	800f9b2 <tx_control+0x18a6>
			cksum_gral_aux = (RxBuffer_Ble[2] << 24) | (RxBuffer_Ble[3] << 16) | (RxBuffer_Ble[4] << 8) | RxBuffer_Ble[5];
 800f866:	4b17      	ldr	r3, [pc, #92]	@ (800f8c4 <tx_control+0x17b8>)
 800f868:	789b      	ldrb	r3, [r3, #2]
 800f86a:	061a      	lsls	r2, r3, #24
 800f86c:	4b15      	ldr	r3, [pc, #84]	@ (800f8c4 <tx_control+0x17b8>)
 800f86e:	78db      	ldrb	r3, [r3, #3]
 800f870:	041b      	lsls	r3, r3, #16
 800f872:	431a      	orrs	r2, r3
 800f874:	4b13      	ldr	r3, [pc, #76]	@ (800f8c4 <tx_control+0x17b8>)
 800f876:	791b      	ldrb	r3, [r3, #4]
 800f878:	021b      	lsls	r3, r3, #8
 800f87a:	4313      	orrs	r3, r2
 800f87c:	4a11      	ldr	r2, [pc, #68]	@ (800f8c4 <tx_control+0x17b8>)
 800f87e:	7952      	ldrb	r2, [r2, #5]
 800f880:	4313      	orrs	r3, r2
 800f882:	001a      	movs	r2, r3
 800f884:	4b2e      	ldr	r3, [pc, #184]	@ (800f940 <tx_control+0x1834>)
 800f886:	601a      	str	r2, [r3, #0]
			if(cksum_gral_aux != chksumFirm_HW_LW){
 800f888:	4b2d      	ldr	r3, [pc, #180]	@ (800f940 <tx_control+0x1834>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	4b21      	ldr	r3, [pc, #132]	@ (800f914 <tx_control+0x1808>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	429a      	cmp	r2, r3
 800f892:	d10c      	bne.n	800f8ae <tx_control+0x17a2>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f894:	4b1e      	ldr	r3, [pc, #120]	@ (800f910 <tx_control+0x1804>)
 800f896:	22f1      	movs	r2, #241	@ 0xf1
 800f898:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;
 800f89a:	4b1d      	ldr	r3, [pc, #116]	@ (800f910 <tx_control+0x1804>)
 800f89c:	223d      	movs	r2, #61	@ 0x3d
 800f89e:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800f8a0:	4b18      	ldr	r3, [pc, #96]	@ (800f904 <tx_control+0x17f8>)
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f8a6:	4b1d      	ldr	r3, [pc, #116]	@ (800f91c <tx_control+0x1810>)
 800f8a8:	2205      	movs	r2, #5
 800f8aa:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800f8ac:	e064      	b.n	800f978 <tx_control+0x186c>
				goto rxFirmErr;
 800f8ae:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f8b0:	4b17      	ldr	r3, [pc, #92]	@ (800f910 <tx_control+0x1804>)
 800f8b2:	22f1      	movs	r2, #241	@ 0xf1
 800f8b4:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f8b6:	4b16      	ldr	r3, [pc, #88]	@ (800f910 <tx_control+0x1804>)
 800f8b8:	223e      	movs	r2, #62	@ 0x3e
 800f8ba:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f8bc:	2300      	movs	r3, #0
 800f8be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f8c0:	e048      	b.n	800f954 <tx_control+0x1848>
 800f8c2:	46c0      	nop			@ (mov r8, r8)
 800f8c4:	200009e4 	.word	0x200009e4
 800f8c8:	20000ce8 	.word	0x20000ce8
 800f8cc:	20000f1c 	.word	0x20000f1c
 800f8d0:	20000e74 	.word	0x20000e74
 800f8d4:	20000e7c 	.word	0x20000e7c
 800f8d8:	20000e78 	.word	0x20000e78
 800f8dc:	0803f000 	.word	0x0803f000
 800f8e0:	20000ec8 	.word	0x20000ec8
 800f8e4:	20000f04 	.word	0x20000f04
 800f8e8:	20000efc 	.word	0x20000efc
 800f8ec:	20000ef4 	.word	0x20000ef4
 800f8f0:	20000ef8 	.word	0x20000ef8
 800f8f4:	20000ec9 	.word	0x20000ec9
 800f8f8:	20000f18 	.word	0x20000f18
 800f8fc:	20000f01 	.word	0x20000f01
 800f900:	20000f0c 	.word	0x20000f0c
 800f904:	20000fc4 	.word	0x20000fc4
 800f908:	20000fb8 	.word	0x20000fb8
 800f90c:	20000fba 	.word	0x20000fba
 800f910:	20000e9c 	.word	0x20000e9c
 800f914:	20000fbc 	.word	0x20000fbc
 800f918:	20000e9d 	.word	0x20000e9d
 800f91c:	20000fce 	.word	0x20000fce
 800f920:	20000bb3 	.word	0x20000bb3
 800f924:	20001260 	.word	0x20001260
 800f928:	20000274 	.word	0x20000274
 800f92c:	0803efff 	.word	0x0803efff
 800f930:	20000278 	.word	0x20000278
 800f934:	20000270 	.word	0x20000270
 800f938:	08020000 	.word	0x08020000
 800f93c:	200011d0 	.word	0x200011d0
 800f940:	20001264 	.word	0x20001264
				flagsRxFirm[i]=0;
 800f944:	4adc      	ldr	r2, [pc, #880]	@ (800fcb8 <tx_control+0x1bac>)
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	18d3      	adds	r3, r2, r3
 800f94a:	2200      	movs	r2, #0
 800f94c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f950:	3301      	adds	r3, #1
 800f952:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f956:	2b07      	cmp	r3, #7
 800f958:	ddf4      	ble.n	800f944 <tx_control+0x1838>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800f95a:	4bd8      	ldr	r3, [pc, #864]	@ (800fcbc <tx_control+0x1bb0>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	701a      	strb	r2, [r3, #0]
			bandera_act_fw_j = 0;
 800f960:	4bd7      	ldr	r3, [pc, #860]	@ (800fcc0 <tx_control+0x1bb4>)
 800f962:	2200      	movs	r2, #0
 800f964:	701a      	strb	r2, [r3, #0]
			direccion_fw = 0x8020000;
 800f966:	4bd7      	ldr	r3, [pc, #860]	@ (800fcc4 <tx_control+0x1bb8>)
 800f968:	4ad7      	ldr	r2, [pc, #860]	@ (800fcc8 <tx_control+0x1bbc>)
 800f96a:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f96c:	4bd7      	ldr	r3, [pc, #860]	@ (800fccc <tx_control+0x1bc0>)
 800f96e:	2240      	movs	r2, #64	@ 0x40
 800f970:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f972:	4bd7      	ldr	r3, [pc, #860]	@ (800fcd0 <tx_control+0x1bc4>)
 800f974:	2210      	movs	r2, #16
 800f976:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f978:	4bd6      	ldr	r3, [pc, #856]	@ (800fcd4 <tx_control+0x1bc8>)
 800f97a:	4ad7      	ldr	r2, [pc, #860]	@ (800fcd8 <tx_control+0x1bcc>)
 800f97c:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f97e:	4bd7      	ldr	r3, [pc, #860]	@ (800fcdc <tx_control+0x1bd0>)
 800f980:	4ad5      	ldr	r2, [pc, #852]	@ (800fcd8 <tx_control+0x1bcc>)
 800f982:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f984:	4bd6      	ldr	r3, [pc, #856]	@ (800fce0 <tx_control+0x1bd4>)
 800f986:	4ad7      	ldr	r2, [pc, #860]	@ (800fce4 <tx_control+0x1bd8>)
 800f988:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800f98a:	4bd7      	ldr	r3, [pc, #860]	@ (800fce8 <tx_control+0x1bdc>)
 800f98c:	2202      	movs	r2, #2
 800f98e:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f990:	4bd6      	ldr	r3, [pc, #856]	@ (800fcec <tx_control+0x1be0>)
 800f992:	2201      	movs	r2, #1
 800f994:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800f996:	4bd6      	ldr	r3, [pc, #856]	@ (800fcf0 <tx_control+0x1be4>)
 800f998:	2255      	movs	r2, #85	@ 0x55
 800f99a:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800f99c:	4bc7      	ldr	r3, [pc, #796]	@ (800fcbc <tx_control+0x1bb0>)
 800f99e:	2200      	movs	r2, #0
 800f9a0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f9a2:	f000 fc5e 	bl	8010262 <tx_control+0x2156>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800f9a6:	46c0      	nop			@ (mov r8, r8)
 800f9a8:	f000 fc5b 	bl	8010262 <tx_control+0x2156>
				goto end_rx_firmware;
 800f9ac:	46c0      	nop			@ (mov r8, r8)
 800f9ae:	f000 fc58 	bl	8010262 <tx_control+0x2156>
					goto end_rx_firmware;
 800f9b2:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800f9b4:	f000 fc55 	bl	8010262 <tx_control+0x2156>
				erasePage(i);
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	f7f2 fe2c 	bl	8002618 <erasePage>
			for(uint32_t i = 110; i<126; i++){
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c8:	2b7d      	cmp	r3, #125	@ 0x7d
 800f9ca:	d9f5      	bls.n	800f9b8 <tx_control+0x18ac>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800f9cc:	4bc2      	ldr	r3, [pc, #776]	@ (800fcd8 <tx_control+0x1bcc>)
 800f9ce:	22f1      	movs	r2, #241	@ 0xf1
 800f9d0:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f9d2:	4bc1      	ldr	r3, [pc, #772]	@ (800fcd8 <tx_control+0x1bcc>)
 800f9d4:	223d      	movs	r2, #61	@ 0x3d
 800f9d6:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800f9d8:	4bc6      	ldr	r3, [pc, #792]	@ (800fcf4 <tx_control+0x1be8>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800f9de:	4bc6      	ldr	r3, [pc, #792]	@ (800fcf8 <tx_control+0x1bec>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800f9e4:	4bc5      	ldr	r3, [pc, #788]	@ (800fcfc <tx_control+0x1bf0>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800f9ea:	4bc5      	ldr	r3, [pc, #788]	@ (800fd00 <tx_control+0x1bf4>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800f9f0:	4bc4      	ldr	r3, [pc, #784]	@ (800fd04 <tx_control+0x1bf8>)
 800f9f2:	4ac5      	ldr	r2, [pc, #788]	@ (800fd08 <tx_control+0x1bfc>)
 800f9f4:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800f9f6:	4bc5      	ldr	r3, [pc, #788]	@ (800fd0c <tx_control+0x1c00>)
 800f9f8:	4ac5      	ldr	r2, [pc, #788]	@ (800fd10 <tx_control+0x1c04>)
 800f9fa:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800f9fc:	4bbe      	ldr	r3, [pc, #760]	@ (800fcf8 <tx_control+0x1bec>)
 800f9fe:	781a      	ldrb	r2, [r3, #0]
 800fa00:	4bc4      	ldr	r3, [pc, #784]	@ (800fd14 <tx_control+0x1c08>)
 800fa02:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800fa04:	f7f7 fb78 	bl	80070f8 <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800fa08:	4bbe      	ldr	r3, [pc, #760]	@ (800fd04 <tx_control+0x1bf8>)
 800fa0a:	4ac3      	ldr	r2, [pc, #780]	@ (800fd18 <tx_control+0x1c0c>)
 800fa0c:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800fa0e:	4bbf      	ldr	r3, [pc, #764]	@ (800fd0c <tx_control+0x1c00>)
 800fa10:	4ac2      	ldr	r2, [pc, #776]	@ (800fd1c <tx_control+0x1c10>)
 800fa12:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800fa14:	4bba      	ldr	r3, [pc, #744]	@ (800fd00 <tx_control+0x1bf4>)
 800fa16:	781a      	ldrb	r2, [r3, #0]
 800fa18:	4bbe      	ldr	r3, [pc, #760]	@ (800fd14 <tx_control+0x1c08>)
 800fa1a:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800fa1c:	f7f7 fb6c 	bl	80070f8 <load_next_buffer>
			for(int i = 0; i<8; i++)
 800fa20:	2300      	movs	r3, #0
 800fa22:	623b      	str	r3, [r7, #32]
 800fa24:	e007      	b.n	800fa36 <tx_control+0x192a>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800fa26:	4abe      	ldr	r2, [pc, #760]	@ (800fd20 <tx_control+0x1c14>)
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	18d3      	adds	r3, r2, r3
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	3301      	adds	r3, #1
 800fa34:	623b      	str	r3, [r7, #32]
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	2b07      	cmp	r3, #7
 800fa3a:	ddf4      	ble.n	800fa26 <tx_control+0x191a>
			goto ok_clean_logger; //jp		ok_clean_logger
 800fa3c:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800fa3e:	4ba5      	ldr	r3, [pc, #660]	@ (800fcd4 <tx_control+0x1bc8>)
 800fa40:	4aa5      	ldr	r2, [pc, #660]	@ (800fcd8 <tx_control+0x1bcc>)
 800fa42:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800fa44:	4ba5      	ldr	r3, [pc, #660]	@ (800fcdc <tx_control+0x1bd0>)
 800fa46:	4aa4      	ldr	r2, [pc, #656]	@ (800fcd8 <tx_control+0x1bcc>)
 800fa48:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800fa4a:	4ba5      	ldr	r3, [pc, #660]	@ (800fce0 <tx_control+0x1bd4>)
 800fa4c:	4aa5      	ldr	r2, [pc, #660]	@ (800fce4 <tx_control+0x1bd8>)
 800fa4e:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800fa50:	4ba5      	ldr	r3, [pc, #660]	@ (800fce8 <tx_control+0x1bdc>)
 800fa52:	2202      	movs	r2, #2
 800fa54:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800fa56:	4ba5      	ldr	r3, [pc, #660]	@ (800fcec <tx_control+0x1be0>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fa5c:	4ba4      	ldr	r3, [pc, #656]	@ (800fcf0 <tx_control+0x1be4>)
 800fa5e:	2255      	movs	r2, #85	@ 0x55
 800fa60:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800fa62:	4b96      	ldr	r3, [pc, #600]	@ (800fcbc <tx_control+0x1bb0>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800fa68:	f000 fbfb 	bl	8010262 <tx_control+0x2156>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800fa6c:	4bad      	ldr	r3, [pc, #692]	@ (800fd24 <tx_control+0x1c18>)
 800fa6e:	789a      	ldrb	r2, [r3, #2]
 800fa70:	4bad      	ldr	r3, [pc, #692]	@ (800fd28 <tx_control+0x1c1c>)
 800fa72:	701a      	strb	r2, [r3, #0]
			waux = reeEstado1;
 800fa74:	4bad      	ldr	r3, [pc, #692]	@ (800fd2c <tx_control+0x1c20>)
 800fa76:	781a      	ldrb	r2, [r3, #0]
 800fa78:	4bad      	ldr	r3, [pc, #692]	@ (800fd30 <tx_control+0x1c24>)
 800fa7a:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800fa7c:	4baa      	ldr	r3, [pc, #680]	@ (800fd28 <tx_control+0x1c1c>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	001a      	movs	r2, r3
 800fa82:	2301      	movs	r3, #1
 800fa84:	4013      	ands	r3, r2
 800fa86:	d00d      	beq.n	800faa4 <tx_control+0x1998>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800fa88:	4ba9      	ldr	r3, [pc, #676]	@ (800fd30 <tx_control+0x1c24>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	4053      	eors	r3, r2
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	4ba7      	ldr	r3, [pc, #668]	@ (800fd30 <tx_control+0x1c24>)
 800fa94:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800fa96:	4ba7      	ldr	r3, [pc, #668]	@ (800fd34 <tx_control+0x1c28>)
 800fa98:	22fa      	movs	r2, #250	@ 0xfa
 800fa9a:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800fa9c:	4ba6      	ldr	r3, [pc, #664]	@ (800fd38 <tx_control+0x1c2c>)
 800fa9e:	2201      	movs	r2, #1
 800faa0:	701a      	strb	r2, [r3, #0]
 800faa2:	e000      	b.n	800faa6 <tx_control+0x199a>
				goto chk_est1_b1;
 800faa4:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800faa6:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800faa8:	4b9f      	ldr	r3, [pc, #636]	@ (800fd28 <tx_control+0x1c1c>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	001a      	movs	r2, r3
 800faae:	2304      	movs	r3, #4
 800fab0:	4013      	ands	r3, r2
 800fab2:	d027      	beq.n	800fb04 <tx_control+0x19f8>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800fab4:	4ba1      	ldr	r3, [pc, #644]	@ (800fd3c <tx_control+0x1c30>)
 800fab6:	799b      	ldrb	r3, [r3, #6]
 800fab8:	2201      	movs	r2, #1
 800faba:	4053      	eors	r3, r2
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	1e5a      	subs	r2, r3, #1
 800fac0:	4193      	sbcs	r3, r2
 800fac2:	b2da      	uxtb	r2, r3
 800fac4:	4b9d      	ldr	r3, [pc, #628]	@ (800fd3c <tx_control+0x1c30>)
 800fac6:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800fac8:	4b99      	ldr	r3, [pc, #612]	@ (800fd30 <tx_control+0x1c24>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2204      	movs	r2, #4
 800face:	4393      	bics	r3, r2
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	4b97      	ldr	r3, [pc, #604]	@ (800fd30 <tx_control+0x1c24>)
 800fad4:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800fad6:	4b99      	ldr	r3, [pc, #612]	@ (800fd3c <tx_control+0x1c30>)
 800fad8:	799b      	ldrb	r3, [r3, #6]
 800fada:	2201      	movs	r2, #1
 800fadc:	4053      	eors	r3, r2
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d107      	bne.n	800faf4 <tx_control+0x19e8>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800fae4:	4b92      	ldr	r3, [pc, #584]	@ (800fd30 <tx_control+0x1c24>)
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2204      	movs	r2, #4
 800faea:	4313      	orrs	r3, r2
 800faec:	b2da      	uxtb	r2, r3
 800faee:	4b90      	ldr	r3, [pc, #576]	@ (800fd30 <tx_control+0x1c24>)
 800faf0:	701a      	strb	r2, [r3, #0]
 800faf2:	e000      	b.n	800faf6 <tx_control+0x19ea>
				goto chk_est1_b2_01;
 800faf4:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800faf6:	4b8f      	ldr	r3, [pc, #572]	@ (800fd34 <tx_control+0x1c28>)
 800faf8:	22fa      	movs	r2, #250	@ 0xfa
 800fafa:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800fafc:	4b8e      	ldr	r3, [pc, #568]	@ (800fd38 <tx_control+0x1c2c>)
 800fafe:	2202      	movs	r2, #2
 800fb00:	701a      	strb	r2, [r3, #0]
 800fb02:	e000      	b.n	800fb06 <tx_control+0x19fa>
				goto chk_est1_b3;
 800fb04:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800fb06:	4b88      	ldr	r3, [pc, #544]	@ (800fd28 <tx_control+0x1c1c>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	001a      	movs	r2, r3
 800fb0c:	2308      	movs	r3, #8
 800fb0e:	4013      	ands	r3, r2
 800fb10:	d019      	beq.n	800fb46 <tx_control+0x1a3a>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800fb12:	4b8a      	ldr	r3, [pc, #552]	@ (800fd3c <tx_control+0x1c30>)
 800fb14:	789b      	ldrb	r3, [r3, #2]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d106      	bne.n	800fb28 <tx_control+0x1a1c>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800fb1a:	4b89      	ldr	r3, [pc, #548]	@ (800fd40 <tx_control+0x1c34>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800fb20:	4b88      	ldr	r3, [pc, #544]	@ (800fd44 <tx_control+0x1c38>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800fb26:	e00f      	b.n	800fb48 <tx_control+0x1a3c>
				goto chk_est1_b3_01;
 800fb28:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800fb2a:	4b87      	ldr	r3, [pc, #540]	@ (800fd48 <tx_control+0x1c3c>)
 800fb2c:	22f0      	movs	r2, #240	@ 0xf0
 800fb2e:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800fb30:	4b82      	ldr	r3, [pc, #520]	@ (800fd3c <tx_control+0x1c30>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800fb36:	4b81      	ldr	r3, [pc, #516]	@ (800fd3c <tx_control+0x1c30>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800fb3c:	f7f7 fa92 	bl	8007064 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800fb40:	f7f7 faac 	bl	800709c <load_tiempoAhorro2>
 800fb44:	e000      	b.n	800fb48 <tx_control+0x1a3c>
				goto chk_est1_b4;
 800fb46:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800fb48:	4b77      	ldr	r3, [pc, #476]	@ (800fd28 <tx_control+0x1c1c>)
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	001a      	movs	r2, r3
 800fb4e:	2310      	movs	r3, #16
 800fb50:	4013      	ands	r3, r2
 800fb52:	d003      	beq.n	800fb5c <tx_control+0x1a50>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800fb54:	4b7d      	ldr	r3, [pc, #500]	@ (800fd4c <tx_control+0x1c40>)
 800fb56:	2201      	movs	r2, #1
 800fb58:	711a      	strb	r2, [r3, #4]
 800fb5a:	e000      	b.n	800fb5e <tx_control+0x1a52>
				goto chk_est1_b5;
 800fb5c:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800fb5e:	4b72      	ldr	r3, [pc, #456]	@ (800fd28 <tx_control+0x1c1c>)
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	001a      	movs	r2, r3
 800fb64:	2320      	movs	r3, #32
 800fb66:	4013      	ands	r3, r2
 800fb68:	d002      	beq.n	800fb70 <tx_control+0x1a64>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800fb6a:	f7f7 fbb1 	bl	80072d0 <ld_alarmDelay>
 800fb6e:	e000      	b.n	800fb72 <tx_control+0x1a66>
				goto chk_est1_b6;
 800fb70:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState(Plantilla[logicos2],funReleDesh)){
 800fb72:	4b77      	ldr	r3, [pc, #476]	@ (800fd50 <tx_control+0x1c44>)
 800fb74:	225b      	movs	r2, #91	@ 0x5b
 800fb76:	5c9b      	ldrb	r3, [r3, r2]
 800fb78:	001a      	movs	r2, r3
 800fb7a:	2308      	movs	r3, #8
 800fb7c:	4013      	ands	r3, r2
 800fb7e:	d113      	bne.n	800fba8 <tx_control+0x1a9c>
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800fb80:	4b69      	ldr	r3, [pc, #420]	@ (800fd28 <tx_control+0x1c1c>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	001a      	movs	r2, r3
 800fb86:	2340      	movs	r3, #64	@ 0x40
 800fb88:	4013      	ands	r3, r2
 800fb8a:	d00f      	beq.n	800fbac <tx_control+0x1aa0>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800fb8c:	4b68      	ldr	r3, [pc, #416]	@ (800fd30 <tx_control+0x1c24>)
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2240      	movs	r2, #64	@ 0x40
 800fb92:	4053      	eors	r3, r2
 800fb94:	b2da      	uxtb	r2, r3
 800fb96:	4b66      	ldr	r3, [pc, #408]	@ (800fd30 <tx_control+0x1c24>)
 800fb98:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800fb9a:	4b66      	ldr	r3, [pc, #408]	@ (800fd34 <tx_control+0x1c28>)
 800fb9c:	22fa      	movs	r2, #250	@ 0xfa
 800fb9e:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800fba0:	4b65      	ldr	r3, [pc, #404]	@ (800fd38 <tx_control+0x1c2c>)
 800fba2:	2203      	movs	r2, #3
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	e002      	b.n	800fbae <tx_control+0x1aa2>
				goto deshTypeAct_05;
 800fba8:	46c0      	nop			@ (mov r8, r8)
 800fbaa:	e000      	b.n	800fbae <tx_control+0x1aa2>
				goto chk_est1_b7;
 800fbac:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800fbae:	4b60      	ldr	r3, [pc, #384]	@ (800fd30 <tx_control+0x1c24>)
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	001a      	movs	r2, r3
 800fbb4:	4b67      	ldr	r3, [pc, #412]	@ (800fd54 <tx_control+0x1c48>)
 800fbb6:	0019      	movs	r1, r3
 800fbb8:	0010      	movs	r0, r2
 800fbba:	f7f7 fd0b 	bl	80075d4 <wreeprom>
			reeEstado1 = waux;
 800fbbe:	4b5c      	ldr	r3, [pc, #368]	@ (800fd30 <tx_control+0x1c24>)
 800fbc0:	781a      	ldrb	r2, [r3, #0]
 800fbc2:	4b5a      	ldr	r3, [pc, #360]	@ (800fd2c <tx_control+0x1c20>)
 800fbc4:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg ); 			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800fbc6:	4b64      	ldr	r3, [pc, #400]	@ (800fd58 <tx_control+0x1c4c>)
 800fbc8:	0018      	movs	r0, r3
 800fbca:	f007 f81d 	bl	8016c08 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fbce:	4b42      	ldr	r3, [pc, #264]	@ (800fcd8 <tx_control+0x1bcc>)
 800fbd0:	22f1      	movs	r2, #241	@ 0xf1
 800fbd2:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fbd4:	4b40      	ldr	r3, [pc, #256]	@ (800fcd8 <tx_control+0x1bcc>)
 800fbd6:	223d      	movs	r2, #61	@ 0x3d
 800fbd8:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800fbda:	e005      	b.n	800fbe8 <tx_control+0x1adc>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fbdc:	4b3e      	ldr	r3, [pc, #248]	@ (800fcd8 <tx_control+0x1bcc>)
 800fbde:	22f1      	movs	r2, #241	@ 0xf1
 800fbe0:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fbe2:	4b3d      	ldr	r3, [pc, #244]	@ (800fcd8 <tx_control+0x1bcc>)
 800fbe4:	223d      	movs	r2, #61	@ 0x3d
 800fbe6:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800fbe8:	4b3a      	ldr	r3, [pc, #232]	@ (800fcd4 <tx_control+0x1bc8>)
 800fbea:	4a3b      	ldr	r2, [pc, #236]	@ (800fcd8 <tx_control+0x1bcc>)
 800fbec:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800fbee:	4b3b      	ldr	r3, [pc, #236]	@ (800fcdc <tx_control+0x1bd0>)
 800fbf0:	4a39      	ldr	r2, [pc, #228]	@ (800fcd8 <tx_control+0x1bcc>)
 800fbf2:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800fbf4:	4b3a      	ldr	r3, [pc, #232]	@ (800fce0 <tx_control+0x1bd4>)
 800fbf6:	4a3b      	ldr	r2, [pc, #236]	@ (800fce4 <tx_control+0x1bd8>)
 800fbf8:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800fbfa:	4b3b      	ldr	r3, [pc, #236]	@ (800fce8 <tx_control+0x1bdc>)
 800fbfc:	2202      	movs	r2, #2
 800fbfe:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800fc00:	4b3a      	ldr	r3, [pc, #232]	@ (800fcec <tx_control+0x1be0>)
 800fc02:	2201      	movs	r2, #1
 800fc04:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fc06:	4b3a      	ldr	r3, [pc, #232]	@ (800fcf0 <tx_control+0x1be4>)
 800fc08:	2255      	movs	r2, #85	@ 0x55
 800fc0a:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800fc0c:	4b2b      	ldr	r3, [pc, #172]	@ (800fcbc <tx_control+0x1bb0>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800fc12:	e326      	b.n	8010262 <tx_control+0x2156>
			estado1[k] = ((estado1_Aux>>k) & 0x1);
 800fc14:	1cfb      	adds	r3, r7, #3
 800fc16:	781a      	ldrb	r2, [r3, #0]
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	411a      	asrs	r2, r3
 800fc1c:	0013      	movs	r3, r2
 800fc1e:	2201      	movs	r2, #1
 800fc20:	4013      	ands	r3, r2
 800fc22:	1e5a      	subs	r2, r3, #1
 800fc24:	4193      	sbcs	r3, r2
 800fc26:	b2d9      	uxtb	r1, r3
 800fc28:	4a48      	ldr	r2, [pc, #288]	@ (800fd4c <tx_control+0x1c40>)
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	18d3      	adds	r3, r2, r3
 800fc2e:	1c0a      	adds	r2, r1, #0
 800fc30:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	3301      	adds	r3, #1
 800fc36:	61fb      	str	r3, [r7, #28]
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	2b07      	cmp	r3, #7
 800fc3c:	ddea      	ble.n	800fc14 <tx_control+0x1b08>
estado1_b1:
 800fc3e:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800fc40:	4b42      	ldr	r3, [pc, #264]	@ (800fd4c <tx_control+0x1c40>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800fc46:	4b45      	ldr	r3, [pc, #276]	@ (800fd5c <tx_control+0x1c50>)
 800fc48:	78db      	ldrb	r3, [r3, #3]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	4053      	eors	r3, r2
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d103      	bne.n	800fc5c <tx_control+0x1b50>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800fc54:	4b3d      	ldr	r3, [pc, #244]	@ (800fd4c <tx_control+0x1c40>)
 800fc56:	2201      	movs	r2, #1
 800fc58:	705a      	strb	r2, [r3, #1]
 800fc5a:	e000      	b.n	800fc5e <tx_control+0x1b52>
			goto estado1_b2;
 800fc5c:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800fc5e:	4b3b      	ldr	r3, [pc, #236]	@ (800fd4c <tx_control+0x1c40>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800fc64:	4b3e      	ldr	r3, [pc, #248]	@ (800fd60 <tx_control+0x1c54>)
 800fc66:	789b      	ldrb	r3, [r3, #2]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	4053      	eors	r3, r2
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d103      	bne.n	800fc7a <tx_control+0x1b6e>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800fc72:	4b36      	ldr	r3, [pc, #216]	@ (800fd4c <tx_control+0x1c40>)
 800fc74:	2201      	movs	r2, #1
 800fc76:	709a      	strb	r2, [r3, #2]
 800fc78:	e000      	b.n	800fc7c <tx_control+0x1b70>
			goto estado1_b3;
 800fc7a:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800fc7c:	4b33      	ldr	r3, [pc, #204]	@ (800fd4c <tx_control+0x1c40>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800fc82:	4b2e      	ldr	r3, [pc, #184]	@ (800fd3c <tx_control+0x1c30>)
 800fc84:	789b      	ldrb	r3, [r3, #2]
 800fc86:	2201      	movs	r2, #1
 800fc88:	4053      	eors	r3, r2
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d103      	bne.n	800fc98 <tx_control+0x1b8c>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800fc90:	4b2e      	ldr	r3, [pc, #184]	@ (800fd4c <tx_control+0x1c40>)
 800fc92:	2201      	movs	r2, #1
 800fc94:	70da      	strb	r2, [r3, #3]
 800fc96:	e000      	b.n	800fc9a <tx_control+0x1b8e>
			goto estado1_b4;
 800fc98:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800fc9a:	4b2c      	ldr	r3, [pc, #176]	@ (800fd4c <tx_control+0x1c40>)
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800fca0:	4b30      	ldr	r3, [pc, #192]	@ (800fd64 <tx_control+0x1c58>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	2201      	movs	r2, #1
 800fca6:	4053      	eors	r3, r2
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d15c      	bne.n	800fd68 <tx_control+0x1c5c>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800fcae:	4b27      	ldr	r3, [pc, #156]	@ (800fd4c <tx_control+0x1c40>)
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	715a      	strb	r2, [r3, #5]
 800fcb4:	e059      	b.n	800fd6a <tx_control+0x1c5e>
 800fcb6:	46c0      	nop			@ (mov r8, r8)
 800fcb8:	20000fc4 	.word	0x20000fc4
 800fcbc:	20000f0c 	.word	0x20000f0c
 800fcc0:	200011d0 	.word	0x200011d0
 800fcc4:	20000274 	.word	0x20000274
 800fcc8:	08020000 	.word	0x08020000
 800fccc:	20000270 	.word	0x20000270
 800fcd0:	20000278 	.word	0x20000278
 800fcd4:	20000efc 	.word	0x20000efc
 800fcd8:	20000e9c 	.word	0x20000e9c
 800fcdc:	20000ef4 	.word	0x20000ef4
 800fce0:	20000ef8 	.word	0x20000ef8
 800fce4:	20000e9d 	.word	0x20000e9d
 800fce8:	20000f18 	.word	0x20000f18
 800fcec:	20000f04 	.word	0x20000f04
 800fcf0:	20000f01 	.word	0x20000f01
 800fcf4:	20000e94 	.word	0x20000e94
 800fcf8:	20000e95 	.word	0x20000e95
 800fcfc:	20000e96 	.word	0x20000e96
 800fd00:	20000e97 	.word	0x20000e97
 800fd04:	20000e8c 	.word	0x20000e8c
 800fd08:	20000d74 	.word	0x20000d74
 800fd0c:	20000e88 	.word	0x20000e88
 800fd10:	0803c000 	.word	0x0803c000
 800fd14:	20000e82 	.word	0x20000e82
 800fd18:	20000df4 	.word	0x20000df4
 800fd1c:	08037000 	.word	0x08037000
 800fd20:	20000fb0 	.word	0x20000fb0
 800fd24:	200009e4 	.word	0x200009e4
 800fd28:	20000bb3 	.word	0x20000bb3
 800fd2c:	200001ba 	.word	0x200001ba
 800fd30:	20000bb2 	.word	0x20000bb2
 800fd34:	2000114c 	.word	0x2000114c
 800fd38:	2000114d 	.word	0x2000114d
 800fd3c:	20000c98 	.word	0x20000c98
 800fd40:	20000c8c 	.word	0x20000c8c
 800fd44:	20000c8e 	.word	0x20000c8e
 800fd48:	20000c1e 	.word	0x20000c1e
 800fd4c:	2000112c 	.word	0x2000112c
 800fd50:	200000b8 	.word	0x200000b8
 800fd54:	0803f803 	.word	0x0803f803
 800fd58:	20000560 	.word	0x20000560
 800fd5c:	20000bd4 	.word	0x20000bd4
 800fd60:	20000c00 	.word	0x20000c00
 800fd64:	20001080 	.word	0x20001080
			goto estado1_b6;
 800fd68:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800fd6a:	4bc6      	ldr	r3, [pc, #792]	@ (8010084 <tx_control+0x1f78>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800fd70:	4bc5      	ldr	r3, [pc, #788]	@ (8010088 <tx_control+0x1f7c>)
 800fd72:	785b      	ldrb	r3, [r3, #1]
 800fd74:	2201      	movs	r2, #1
 800fd76:	4053      	eors	r3, r2
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d103      	bne.n	800fd86 <tx_control+0x1c7a>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800fd7e:	4bc1      	ldr	r3, [pc, #772]	@ (8010084 <tx_control+0x1f78>)
 800fd80:	2201      	movs	r2, #1
 800fd82:	719a      	strb	r2, [r3, #6]
 800fd84:	e000      	b.n	800fd88 <tx_control+0x1c7c>
			goto estado1_b7;
 800fd86:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800fd88:	4bc0      	ldr	r3, [pc, #768]	@ (801008c <tx_control+0x1f80>)
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800fd8e:	4bc0      	ldr	r3, [pc, #768]	@ (8010090 <tx_control+0x1f84>)
 800fd90:	227b      	movs	r2, #123	@ 0x7b
 800fd92:	5c9a      	ldrb	r2, [r3, r2]
 800fd94:	4bbf      	ldr	r3, [pc, #764]	@ (8010094 <tx_control+0x1f88>)
 800fd96:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800fd98:	4bbd      	ldr	r3, [pc, #756]	@ (8010090 <tx_control+0x1f84>)
 800fd9a:	227c      	movs	r2, #124	@ 0x7c
 800fd9c:	5c9a      	ldrb	r2, [r3, r2]
 800fd9e:	4bbd      	ldr	r3, [pc, #756]	@ (8010094 <tx_control+0x1f88>)
 800fda0:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800fda2:	4bbc      	ldr	r3, [pc, #752]	@ (8010094 <tx_control+0x1f88>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800fda8:	4bba      	ldr	r3, [pc, #744]	@ (8010094 <tx_control+0x1f88>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800fdae:	4bb9      	ldr	r3, [pc, #740]	@ (8010094 <tx_control+0x1f88>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800fdb4:	4bb7      	ldr	r3, [pc, #732]	@ (8010094 <tx_control+0x1f88>)
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800fdba:	4bb6      	ldr	r3, [pc, #728]	@ (8010094 <tx_control+0x1f88>)
 800fdbc:	2205      	movs	r2, #5
 800fdbe:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800fdc0:	4bb2      	ldr	r3, [pc, #712]	@ (801008c <tx_control+0x1f80>)
 800fdc2:	781a      	ldrb	r2, [r3, #0]
 800fdc4:	4bb3      	ldr	r3, [pc, #716]	@ (8010094 <tx_control+0x1f88>)
 800fdc6:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800fdc8:	4bb3      	ldr	r3, [pc, #716]	@ (8010098 <tx_control+0x1f8c>)
 800fdca:	2201      	movs	r2, #1
 800fdcc:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800fdce:	4bb3      	ldr	r3, [pc, #716]	@ (801009c <tx_control+0x1f90>)
 800fdd0:	2208      	movs	r2, #8
 800fdd2:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800fdd4:	4ab2      	ldr	r2, [pc, #712]	@ (80100a0 <tx_control+0x1f94>)
 800fdd6:	4baf      	ldr	r3, [pc, #700]	@ (8010094 <tx_control+0x1f88>)
 800fdd8:	0011      	movs	r1, r2
 800fdda:	0018      	movs	r0, r3
 800fddc:	f7f7 faa2 	bl	8007324 <copyVector>
		bufferTxControl[8] = 0;
 800fde0:	4baf      	ldr	r3, [pc, #700]	@ (80100a0 <tx_control+0x1f94>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800fde6:	4bae      	ldr	r3, [pc, #696]	@ (80100a0 <tx_control+0x1f94>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800fdec:	4bac      	ldr	r3, [pc, #688]	@ (80100a0 <tx_control+0x1f94>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800fdf2:	4bab      	ldr	r3, [pc, #684]	@ (80100a0 <tx_control+0x1f94>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	61bb      	str	r3, [r7, #24]
 800fdfc:	e03e      	b.n	800fe7c <tx_control+0x1d70>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800fdfe:	4ba8      	ldr	r3, [pc, #672]	@ (80100a0 <tx_control+0x1f94>)
 800fe00:	7a1a      	ldrb	r2, [r3, #8]
 800fe02:	49a0      	ldr	r1, [pc, #640]	@ (8010084 <tx_control+0x1f78>)
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	18cb      	adds	r3, r1, r3
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	0019      	movs	r1, r3
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	4099      	lsls	r1, r3
 800fe10:	000b      	movs	r3, r1
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	4313      	orrs	r3, r2
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	4ba1      	ldr	r3, [pc, #644]	@ (80100a0 <tx_control+0x1f94>)
 800fe1a:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800fe1c:	4ba0      	ldr	r3, [pc, #640]	@ (80100a0 <tx_control+0x1f94>)
 800fe1e:	7a5a      	ldrb	r2, [r3, #9]
 800fe20:	49a0      	ldr	r1, [pc, #640]	@ (80100a4 <tx_control+0x1f98>)
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	18cb      	adds	r3, r1, r3
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	0019      	movs	r1, r3
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	4099      	lsls	r1, r3
 800fe2e:	000b      	movs	r3, r1
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	4313      	orrs	r3, r2
 800fe34:	b2da      	uxtb	r2, r3
 800fe36:	4b9a      	ldr	r3, [pc, #616]	@ (80100a0 <tx_control+0x1f94>)
 800fe38:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800fe3a:	4b99      	ldr	r3, [pc, #612]	@ (80100a0 <tx_control+0x1f94>)
 800fe3c:	7a9a      	ldrb	r2, [r3, #10]
 800fe3e:	499a      	ldr	r1, [pc, #616]	@ (80100a8 <tx_control+0x1f9c>)
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	18cb      	adds	r3, r1, r3
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	0019      	movs	r1, r3
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	4099      	lsls	r1, r3
 800fe4c:	000b      	movs	r3, r1
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	4313      	orrs	r3, r2
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	4b92      	ldr	r3, [pc, #584]	@ (80100a0 <tx_control+0x1f94>)
 800fe56:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800fe58:	4b91      	ldr	r3, [pc, #580]	@ (80100a0 <tx_control+0x1f94>)
 800fe5a:	7ada      	ldrb	r2, [r3, #11]
 800fe5c:	4993      	ldr	r1, [pc, #588]	@ (80100ac <tx_control+0x1fa0>)
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	18cb      	adds	r3, r1, r3
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	0019      	movs	r1, r3
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	4099      	lsls	r1, r3
 800fe6a:	000b      	movs	r3, r1
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	4b8b      	ldr	r3, [pc, #556]	@ (80100a0 <tx_control+0x1f94>)
 800fe74:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	61bb      	str	r3, [r7, #24]
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	2b07      	cmp	r3, #7
 800fe80:	ddbd      	ble.n	800fdfe <tx_control+0x1cf2>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fe82:	4b8b      	ldr	r3, [pc, #556]	@ (80100b0 <tx_control+0x1fa4>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800fe88:	4b84      	ldr	r3, [pc, #528]	@ (801009c <tx_control+0x1f90>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800fe8e:	4b89      	ldr	r3, [pc, #548]	@ (80100b4 <tx_control+0x1fa8>)
 800fe90:	220c      	movs	r2, #12
 800fe92:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800fe94:	4b87      	ldr	r3, [pc, #540]	@ (80100b4 <tx_control+0x1fa8>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	001a      	movs	r2, r3
 800fe9a:	4b81      	ldr	r3, [pc, #516]	@ (80100a0 <tx_control+0x1f94>)
 800fe9c:	0011      	movs	r1, r2
 800fe9e:	0018      	movs	r0, r3
 800fea0:	f7f7 f9f2 	bl	8007288 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800fea4:	4b82      	ldr	r3, [pc, #520]	@ (80100b0 <tx_control+0x1fa4>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	0e1b      	lsrs	r3, r3, #24
 800feaa:	b2da      	uxtb	r2, r3
 800feac:	4b7c      	ldr	r3, [pc, #496]	@ (80100a0 <tx_control+0x1f94>)
 800feae:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800feb0:	4b7f      	ldr	r3, [pc, #508]	@ (80100b0 <tx_control+0x1fa4>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	0c1b      	lsrs	r3, r3, #16
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	4b79      	ldr	r3, [pc, #484]	@ (80100a0 <tx_control+0x1f94>)
 800feba:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800febc:	4b7c      	ldr	r3, [pc, #496]	@ (80100b0 <tx_control+0x1fa4>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	0a1b      	lsrs	r3, r3, #8
 800fec2:	b2da      	uxtb	r2, r3
 800fec4:	4b76      	ldr	r3, [pc, #472]	@ (80100a0 <tx_control+0x1f94>)
 800fec6:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800fec8:	4b79      	ldr	r3, [pc, #484]	@ (80100b0 <tx_control+0x1fa4>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	b2da      	uxtb	r2, r3
 800fece:	4b74      	ldr	r3, [pc, #464]	@ (80100a0 <tx_control+0x1f94>)
 800fed0:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800fed2:	4b79      	ldr	r3, [pc, #484]	@ (80100b8 <tx_control+0x1fac>)
 800fed4:	4a72      	ldr	r2, [pc, #456]	@ (80100a0 <tx_control+0x1f94>)
 800fed6:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800fed8:	4b78      	ldr	r3, [pc, #480]	@ (80100bc <tx_control+0x1fb0>)
 800feda:	4a71      	ldr	r2, [pc, #452]	@ (80100a0 <tx_control+0x1f94>)
 800fedc:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800fede:	4b78      	ldr	r3, [pc, #480]	@ (80100c0 <tx_control+0x1fb4>)
 800fee0:	4a78      	ldr	r2, [pc, #480]	@ (80100c4 <tx_control+0x1fb8>)
 800fee2:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800fee4:	4b69      	ldr	r3, [pc, #420]	@ (801008c <tx_control+0x1f80>)
 800fee6:	2210      	movs	r2, #16
 800fee8:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800feea:	4b6b      	ldr	r3, [pc, #428]	@ (8010098 <tx_control+0x1f8c>)
 800feec:	2200      	movs	r2, #0
 800feee:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800fef0:	4b69      	ldr	r3, [pc, #420]	@ (8010098 <tx_control+0x1f8c>)
 800fef2:	2201      	movs	r2, #1
 800fef4:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fef6:	4b74      	ldr	r3, [pc, #464]	@ (80100c8 <tx_control+0x1fbc>)
 800fef8:	2255      	movs	r2, #85	@ 0x55
 800fefa:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800fefc:	4b73      	ldr	r3, [pc, #460]	@ (80100cc <tx_control+0x1fc0>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800ff02:	e1ae      	b.n	8010262 <tx_control+0x2156>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800ff04:	4b72      	ldr	r3, [pc, #456]	@ (80100d0 <tx_control+0x1fc4>)
 800ff06:	22f1      	movs	r2, #241	@ 0xf1
 800ff08:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ff0a:	4b71      	ldr	r3, [pc, #452]	@ (80100d0 <tx_control+0x1fc4>)
 800ff0c:	223d      	movs	r2, #61	@ 0x3d
 800ff0e:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800ff10:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800ff12:	4b69      	ldr	r3, [pc, #420]	@ (80100b8 <tx_control+0x1fac>)
 800ff14:	4a6e      	ldr	r2, [pc, #440]	@ (80100d0 <tx_control+0x1fc4>)
 800ff16:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800ff18:	4b68      	ldr	r3, [pc, #416]	@ (80100bc <tx_control+0x1fb0>)
 800ff1a:	4a6d      	ldr	r2, [pc, #436]	@ (80100d0 <tx_control+0x1fc4>)
 800ff1c:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800ff1e:	4b68      	ldr	r3, [pc, #416]	@ (80100c0 <tx_control+0x1fb4>)
 800ff20:	4a6c      	ldr	r2, [pc, #432]	@ (80100d4 <tx_control+0x1fc8>)
 800ff22:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800ff24:	4b59      	ldr	r3, [pc, #356]	@ (801008c <tx_control+0x1f80>)
 800ff26:	2202      	movs	r2, #2
 800ff28:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800ff2a:	4b5b      	ldr	r3, [pc, #364]	@ (8010098 <tx_control+0x1f8c>)
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ff30:	4b65      	ldr	r3, [pc, #404]	@ (80100c8 <tx_control+0x1fbc>)
 800ff32:	2255      	movs	r2, #85	@ 0x55
 800ff34:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800ff36:	4b65      	ldr	r3, [pc, #404]	@ (80100cc <tx_control+0x1fc0>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800ff3c:	e191      	b.n	8010262 <tx_control+0x2156>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800ff3e:	4b66      	ldr	r3, [pc, #408]	@ (80100d8 <tx_control+0x1fcc>)
 800ff40:	789b      	ldrb	r3, [r3, #2]
 800ff42:	001a      	movs	r2, r3
 800ff44:	4b65      	ldr	r3, [pc, #404]	@ (80100dc <tx_control+0x1fd0>)
 800ff46:	0019      	movs	r1, r3
 800ff48:	0010      	movs	r0, r2
 800ff4a:	f7f7 fb43 	bl	80075d4 <wreeprom>
			reeLat1 = RxBuffer_Ble[2];
 800ff4e:	4b62      	ldr	r3, [pc, #392]	@ (80100d8 <tx_control+0x1fcc>)
 800ff50:	789a      	ldrb	r2, [r3, #2]
 800ff52:	4b63      	ldr	r3, [pc, #396]	@ (80100e0 <tx_control+0x1fd4>)
 800ff54:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );  // MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800ff56:	4b63      	ldr	r3, [pc, #396]	@ (80100e4 <tx_control+0x1fd8>)
 800ff58:	0018      	movs	r0, r3
 800ff5a:	f006 fe55 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800ff5e:	4b5e      	ldr	r3, [pc, #376]	@ (80100d8 <tx_control+0x1fcc>)
 800ff60:	78db      	ldrb	r3, [r3, #3]
 800ff62:	001a      	movs	r2, r3
 800ff64:	4b60      	ldr	r3, [pc, #384]	@ (80100e8 <tx_control+0x1fdc>)
 800ff66:	0019      	movs	r1, r3
 800ff68:	0010      	movs	r0, r2
 800ff6a:	f7f7 fb33 	bl	80075d4 <wreeprom>
			reeLat2 = RxBuffer_Ble[3];
 800ff6e:	4b5a      	ldr	r3, [pc, #360]	@ (80100d8 <tx_control+0x1fcc>)
 800ff70:	78da      	ldrb	r2, [r3, #3]
 800ff72:	4b5e      	ldr	r3, [pc, #376]	@ (80100ec <tx_control+0x1fe0>)
 800ff74:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800ff76:	4b5b      	ldr	r3, [pc, #364]	@ (80100e4 <tx_control+0x1fd8>)
 800ff78:	0018      	movs	r0, r3
 800ff7a:	f006 fe45 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800ff7e:	4b56      	ldr	r3, [pc, #344]	@ (80100d8 <tx_control+0x1fcc>)
 800ff80:	791b      	ldrb	r3, [r3, #4]
 800ff82:	001a      	movs	r2, r3
 800ff84:	4b5a      	ldr	r3, [pc, #360]	@ (80100f0 <tx_control+0x1fe4>)
 800ff86:	0019      	movs	r1, r3
 800ff88:	0010      	movs	r0, r2
 800ff8a:	f7f7 fb23 	bl	80075d4 <wreeprom>
			reeLat3 = RxBuffer_Ble[4];
 800ff8e:	4b52      	ldr	r3, [pc, #328]	@ (80100d8 <tx_control+0x1fcc>)
 800ff90:	791a      	ldrb	r2, [r3, #4]
 800ff92:	4b58      	ldr	r3, [pc, #352]	@ (80100f4 <tx_control+0x1fe8>)
 800ff94:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800ff96:	4b53      	ldr	r3, [pc, #332]	@ (80100e4 <tx_control+0x1fd8>)
 800ff98:	0018      	movs	r0, r3
 800ff9a:	f006 fe35 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800ff9e:	4b4e      	ldr	r3, [pc, #312]	@ (80100d8 <tx_control+0x1fcc>)
 800ffa0:	795b      	ldrb	r3, [r3, #5]
 800ffa2:	001a      	movs	r2, r3
 800ffa4:	4b54      	ldr	r3, [pc, #336]	@ (80100f8 <tx_control+0x1fec>)
 800ffa6:	0019      	movs	r1, r3
 800ffa8:	0010      	movs	r0, r2
 800ffaa:	f7f7 fb13 	bl	80075d4 <wreeprom>
			reeLat4 = RxBuffer_Ble[5];
 800ffae:	4b4a      	ldr	r3, [pc, #296]	@ (80100d8 <tx_control+0x1fcc>)
 800ffb0:	795a      	ldrb	r2, [r3, #5]
 800ffb2:	4b52      	ldr	r3, [pc, #328]	@ (80100fc <tx_control+0x1ff0>)
 800ffb4:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800ffb6:	4b4b      	ldr	r3, [pc, #300]	@ (80100e4 <tx_control+0x1fd8>)
 800ffb8:	0018      	movs	r0, r3
 800ffba:	f006 fe25 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800ffbe:	4b46      	ldr	r3, [pc, #280]	@ (80100d8 <tx_control+0x1fcc>)
 800ffc0:	799b      	ldrb	r3, [r3, #6]
 800ffc2:	001a      	movs	r2, r3
 800ffc4:	4b4e      	ldr	r3, [pc, #312]	@ (8010100 <tx_control+0x1ff4>)
 800ffc6:	0019      	movs	r1, r3
 800ffc8:	0010      	movs	r0, r2
 800ffca:	f7f7 fb03 	bl	80075d4 <wreeprom>
			reeLong1 = RxBuffer_Ble[6];
 800ffce:	4b42      	ldr	r3, [pc, #264]	@ (80100d8 <tx_control+0x1fcc>)
 800ffd0:	799a      	ldrb	r2, [r3, #6]
 800ffd2:	4b4c      	ldr	r3, [pc, #304]	@ (8010104 <tx_control+0x1ff8>)
 800ffd4:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 800ffd6:	4b43      	ldr	r3, [pc, #268]	@ (80100e4 <tx_control+0x1fd8>)
 800ffd8:	0018      	movs	r0, r3
 800ffda:	f006 fe15 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800ffde:	4b3e      	ldr	r3, [pc, #248]	@ (80100d8 <tx_control+0x1fcc>)
 800ffe0:	79db      	ldrb	r3, [r3, #7]
 800ffe2:	001a      	movs	r2, r3
 800ffe4:	4b48      	ldr	r3, [pc, #288]	@ (8010108 <tx_control+0x1ffc>)
 800ffe6:	0019      	movs	r1, r3
 800ffe8:	0010      	movs	r0, r2
 800ffea:	f7f7 faf3 	bl	80075d4 <wreeprom>
			reeLong2 = RxBuffer_Ble[7];
 800ffee:	4b3a      	ldr	r3, [pc, #232]	@ (80100d8 <tx_control+0x1fcc>)
 800fff0:	79da      	ldrb	r2, [r3, #7]
 800fff2:	4b46      	ldr	r3, [pc, #280]	@ (801010c <tx_control+0x2000>)
 800fff4:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 800fff6:	4b3b      	ldr	r3, [pc, #236]	@ (80100e4 <tx_control+0x1fd8>)
 800fff8:	0018      	movs	r0, r3
 800fffa:	f006 fe05 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800fffe:	4b36      	ldr	r3, [pc, #216]	@ (80100d8 <tx_control+0x1fcc>)
 8010000:	7a1b      	ldrb	r3, [r3, #8]
 8010002:	001a      	movs	r2, r3
 8010004:	4b42      	ldr	r3, [pc, #264]	@ (8010110 <tx_control+0x2004>)
 8010006:	0019      	movs	r1, r3
 8010008:	0010      	movs	r0, r2
 801000a:	f7f7 fae3 	bl	80075d4 <wreeprom>
			reeLong3 = RxBuffer_Ble[8];
 801000e:	4b32      	ldr	r3, [pc, #200]	@ (80100d8 <tx_control+0x1fcc>)
 8010010:	7a1a      	ldrb	r2, [r3, #8]
 8010012:	4b40      	ldr	r3, [pc, #256]	@ (8010114 <tx_control+0x2008>)
 8010014:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 8010016:	4b33      	ldr	r3, [pc, #204]	@ (80100e4 <tx_control+0x1fd8>)
 8010018:	0018      	movs	r0, r3
 801001a:	f006 fdf5 	bl	8016c08 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 801001e:	4b2e      	ldr	r3, [pc, #184]	@ (80100d8 <tx_control+0x1fcc>)
 8010020:	7a5b      	ldrb	r3, [r3, #9]
 8010022:	001a      	movs	r2, r3
 8010024:	4b3c      	ldr	r3, [pc, #240]	@ (8010118 <tx_control+0x200c>)
 8010026:	0019      	movs	r1, r3
 8010028:	0010      	movs	r0, r2
 801002a:	f7f7 fad3 	bl	80075d4 <wreeprom>
			reeLong4 = RxBuffer_Ble[9];
 801002e:	4b2a      	ldr	r3, [pc, #168]	@ (80100d8 <tx_control+0x1fcc>)
 8010030:	7a5a      	ldrb	r2, [r3, #9]
 8010032:	4b3a      	ldr	r3, [pc, #232]	@ (801011c <tx_control+0x2010>)
 8010034:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh( &hiwdg );
 8010036:	4b2b      	ldr	r3, [pc, #172]	@ (80100e4 <tx_control+0x1fd8>)
 8010038:	0018      	movs	r0, r3
 801003a:	f006 fde5 	bl	8016c08 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 801003e:	4b24      	ldr	r3, [pc, #144]	@ (80100d0 <tx_control+0x1fc4>)
 8010040:	22f1      	movs	r2, #241	@ 0xf1
 8010042:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 8010044:	4b22      	ldr	r3, [pc, #136]	@ (80100d0 <tx_control+0x1fc4>)
 8010046:	223d      	movs	r2, #61	@ 0x3d
 8010048:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 801004a:	e005      	b.n	8010058 <tx_control+0x1f4c>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 801004c:	4b20      	ldr	r3, [pc, #128]	@ (80100d0 <tx_control+0x1fc4>)
 801004e:	22f1      	movs	r2, #241	@ 0xf1
 8010050:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 8010052:	4b1f      	ldr	r3, [pc, #124]	@ (80100d0 <tx_control+0x1fc4>)
 8010054:	223e      	movs	r2, #62	@ 0x3e
 8010056:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 8010058:	4b17      	ldr	r3, [pc, #92]	@ (80100b8 <tx_control+0x1fac>)
 801005a:	4a1d      	ldr	r2, [pc, #116]	@ (80100d0 <tx_control+0x1fc4>)
 801005c:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 801005e:	4b17      	ldr	r3, [pc, #92]	@ (80100bc <tx_control+0x1fb0>)
 8010060:	4a1b      	ldr	r2, [pc, #108]	@ (80100d0 <tx_control+0x1fc4>)
 8010062:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 8010064:	4b16      	ldr	r3, [pc, #88]	@ (80100c0 <tx_control+0x1fb4>)
 8010066:	4a1b      	ldr	r2, [pc, #108]	@ (80100d4 <tx_control+0x1fc8>)
 8010068:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 801006a:	4b08      	ldr	r3, [pc, #32]	@ (801008c <tx_control+0x1f80>)
 801006c:	2202      	movs	r2, #2
 801006e:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 8010070:	4b09      	ldr	r3, [pc, #36]	@ (8010098 <tx_control+0x1f8c>)
 8010072:	2201      	movs	r2, #1
 8010074:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010076:	4b14      	ldr	r3, [pc, #80]	@ (80100c8 <tx_control+0x1fbc>)
 8010078:	2255      	movs	r2, #85	@ 0x55
 801007a:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 801007c:	4b13      	ldr	r3, [pc, #76]	@ (80100cc <tx_control+0x1fc0>)
 801007e:	2200      	movs	r2, #0
 8010080:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 8010082:	e0ee      	b.n	8010262 <tx_control+0x2156>
 8010084:	2000112c 	.word	0x2000112c
 8010088:	20000c00 	.word	0x20000c00
 801008c:	20000f18 	.word	0x20000f18
 8010090:	200000b8 	.word	0x200000b8
 8010094:	20000ec0 	.word	0x20000ec0
 8010098:	20000f04 	.word	0x20000f04
 801009c:	20000bb3 	.word	0x20000bb3
 80100a0:	20001090 	.word	0x20001090
 80100a4:	20001134 	.word	0x20001134
 80100a8:	2000113c 	.word	0x2000113c
 80100ac:	20001144 	.word	0x20001144
 80100b0:	20000f1c 	.word	0x20000f1c
 80100b4:	20000bb2 	.word	0x20000bb2
 80100b8:	20000efc 	.word	0x20000efc
 80100bc:	20000ef4 	.word	0x20000ef4
 80100c0:	20000ef8 	.word	0x20000ef8
 80100c4:	200010a0 	.word	0x200010a0
 80100c8:	20000f01 	.word	0x20000f01
 80100cc:	20000f0c 	.word	0x20000f0c
 80100d0:	20000e9c 	.word	0x20000e9c
 80100d4:	20000e9d 	.word	0x20000e9d
 80100d8:	200009e4 	.word	0x200009e4
 80100dc:	0803f808 	.word	0x0803f808
 80100e0:	200001bb 	.word	0x200001bb
 80100e4:	20000560 	.word	0x20000560
 80100e8:	0803f809 	.word	0x0803f809
 80100ec:	200001bc 	.word	0x200001bc
 80100f0:	0803f80a 	.word	0x0803f80a
 80100f4:	200001bd 	.word	0x200001bd
 80100f8:	0803f80b 	.word	0x0803f80b
 80100fc:	200001be 	.word	0x200001be
 8010100:	0803f80c 	.word	0x0803f80c
 8010104:	200001bf 	.word	0x200001bf
 8010108:	0803f80d 	.word	0x0803f80d
 801010c:	200001c0 	.word	0x200001c0
 8010110:	0803f80e 	.word	0x0803f80e
 8010114:	200001c1 	.word	0x200001c1
 8010118:	0803f80f 	.word	0x0803f80f
 801011c:	200001c2 	.word	0x200001c2
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 8010120:	4be9      	ldr	r3, [pc, #932]	@ (80104c8 <tx_control+0x23bc>)
 8010122:	789a      	ldrb	r2, [r3, #2]
 8010124:	4be9      	ldr	r3, [pc, #932]	@ (80104cc <tx_control+0x23c0>)
 8010126:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 8010128:	4be7      	ldr	r3, [pc, #924]	@ (80104c8 <tx_control+0x23bc>)
 801012a:	78da      	ldrb	r2, [r3, #3]
 801012c:	4be8      	ldr	r3, [pc, #928]	@ (80104d0 <tx_control+0x23c4>)
 801012e:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 8010130:	4be5      	ldr	r3, [pc, #916]	@ (80104c8 <tx_control+0x23bc>)
 8010132:	791a      	ldrb	r2, [r3, #4]
 8010134:	4be7      	ldr	r3, [pc, #924]	@ (80104d4 <tx_control+0x23c8>)
 8010136:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 8010138:	4be3      	ldr	r3, [pc, #908]	@ (80104c8 <tx_control+0x23bc>)
 801013a:	795a      	ldrb	r2, [r3, #5]
 801013c:	4be6      	ldr	r3, [pc, #920]	@ (80104d8 <tx_control+0x23cc>)
 801013e:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 8010140:	4be1      	ldr	r3, [pc, #900]	@ (80104c8 <tx_control+0x23bc>)
 8010142:	799a      	ldrb	r2, [r3, #6]
 8010144:	4be5      	ldr	r3, [pc, #916]	@ (80104dc <tx_control+0x23d0>)
 8010146:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 8010148:	4bdf      	ldr	r3, [pc, #892]	@ (80104c8 <tx_control+0x23bc>)
 801014a:	79da      	ldrb	r2, [r3, #7]
 801014c:	4be4      	ldr	r3, [pc, #912]	@ (80104e0 <tx_control+0x23d4>)
 801014e:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 8010150:	4bdd      	ldr	r3, [pc, #884]	@ (80104c8 <tx_control+0x23bc>)
 8010152:	7a1a      	ldrb	r2, [r3, #8]
 8010154:	4be3      	ldr	r3, [pc, #908]	@ (80104e4 <tx_control+0x23d8>)
 8010156:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 8010158:	4be2      	ldr	r3, [pc, #904]	@ (80104e4 <tx_control+0x23d8>)
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	015b      	lsls	r3, r3, #5
 801015e:	b2da      	uxtb	r2, r3
 8010160:	4be0      	ldr	r3, [pc, #896]	@ (80104e4 <tx_control+0x23d8>)
 8010162:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 8010164:	4bdf      	ldr	r3, [pc, #892]	@ (80104e4 <tx_control+0x23d8>)
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	b25b      	sxtb	r3, r3
 801016a:	221f      	movs	r2, #31
 801016c:	4393      	bics	r3, r2
 801016e:	b25a      	sxtb	r2, r3
 8010170:	4bd7      	ldr	r3, [pc, #860]	@ (80104d0 <tx_control+0x23c4>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	b25b      	sxtb	r3, r3
 8010176:	4313      	orrs	r3, r2
 8010178:	b25b      	sxtb	r3, r3
 801017a:	b2da      	uxtb	r2, r3
 801017c:	4bd4      	ldr	r3, [pc, #848]	@ (80104d0 <tx_control+0x23c4>)
 801017e:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 8010180:	4bd1      	ldr	r3, [pc, #836]	@ (80104c8 <tx_control+0x23bc>)
 8010182:	7a5a      	ldrb	r2, [r3, #9]
 8010184:	4bd7      	ldr	r3, [pc, #860]	@ (80104e4 <tx_control+0x23d8>)
 8010186:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 8010188:	4bd3      	ldr	r3, [pc, #844]	@ (80104d8 <tx_control+0x23cc>)
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	2240      	movs	r2, #64	@ 0x40
 801018e:	4393      	bics	r3, r2
 8010190:	b2da      	uxtb	r2, r3
 8010192:	4bd1      	ldr	r3, [pc, #836]	@ (80104d8 <tx_control+0x23cc>)
 8010194:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 8010196:	4bcd      	ldr	r3, [pc, #820]	@ (80104cc <tx_control+0x23c0>)
 8010198:	781a      	ldrb	r2, [r3, #0]
 801019a:	4bd3      	ldr	r3, [pc, #844]	@ (80104e8 <tx_control+0x23dc>)
 801019c:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 801019e:	4bcc      	ldr	r3, [pc, #816]	@ (80104d0 <tx_control+0x23c4>)
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	221f      	movs	r2, #31
 80101a4:	4013      	ands	r3, r2
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	4bcf      	ldr	r3, [pc, #828]	@ (80104e8 <tx_control+0x23dc>)
 80101aa:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 80101ac:	4bc9      	ldr	r3, [pc, #804]	@ (80104d4 <tx_control+0x23c8>)
 80101ae:	781a      	ldrb	r2, [r3, #0]
 80101b0:	4bcd      	ldr	r3, [pc, #820]	@ (80104e8 <tx_control+0x23dc>)
 80101b2:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 80101b4:	4bc6      	ldr	r3, [pc, #792]	@ (80104d0 <tx_control+0x23c4>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	095b      	lsrs	r3, r3, #5
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	4bca      	ldr	r3, [pc, #808]	@ (80104e8 <tx_control+0x23dc>)
 80101be:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 80101c0:	49c9      	ldr	r1, [pc, #804]	@ (80104e8 <tx_control+0x23dc>)
 80101c2:	4bca      	ldr	r3, [pc, #808]	@ (80104ec <tx_control+0x23e0>)
 80101c4:	2201      	movs	r2, #1
 80101c6:	0018      	movs	r0, r3
 80101c8:	f008 fe16 	bl	8018df8 <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 80101cc:	4bc2      	ldr	r3, [pc, #776]	@ (80104d8 <tx_control+0x23cc>)
 80101ce:	781a      	ldrb	r2, [r3, #0]
 80101d0:	4bc7      	ldr	r3, [pc, #796]	@ (80104f0 <tx_control+0x23e4>)
 80101d2:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 80101d4:	4bc1      	ldr	r3, [pc, #772]	@ (80104dc <tx_control+0x23d0>)
 80101d6:	781a      	ldrb	r2, [r3, #0]
 80101d8:	4bc5      	ldr	r3, [pc, #788]	@ (80104f0 <tx_control+0x23e4>)
 80101da:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 80101dc:	4bc0      	ldr	r3, [pc, #768]	@ (80104e0 <tx_control+0x23d4>)
 80101de:	781a      	ldrb	r2, [r3, #0]
 80101e0:	4bc3      	ldr	r3, [pc, #780]	@ (80104f0 <tx_control+0x23e4>)
 80101e2:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 80101e4:	4bb8      	ldr	r3, [pc, #736]	@ (80104c8 <tx_control+0x23bc>)
 80101e6:	7a5a      	ldrb	r2, [r3, #9]
 80101e8:	4bc1      	ldr	r3, [pc, #772]	@ (80104f0 <tx_control+0x23e4>)
 80101ea:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80101ec:	4bc0      	ldr	r3, [pc, #768]	@ (80104f0 <tx_control+0x23e4>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80101f2:	4bbf      	ldr	r3, [pc, #764]	@ (80104f0 <tx_control+0x23e4>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 80101f8:	49bd      	ldr	r1, [pc, #756]	@ (80104f0 <tx_control+0x23e4>)
 80101fa:	4bbc      	ldr	r3, [pc, #752]	@ (80104ec <tx_control+0x23e0>)
 80101fc:	2201      	movs	r2, #1
 80101fe:	0018      	movs	r0, r3
 8010200:	f008 fcd6 	bl	8018bb0 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 8010204:	4bb6      	ldr	r3, [pc, #728]	@ (80104e0 <tx_control+0x23d4>)
 8010206:	781a      	ldrb	r2, [r3, #0]
 8010208:	4bba      	ldr	r3, [pc, #744]	@ (80104f4 <tx_control+0x23e8>)
 801020a:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 801020c:	4bba      	ldr	r3, [pc, #744]	@ (80104f8 <tx_control+0x23ec>)
 801020e:	2201      	movs	r2, #1
 8010210:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 8010212:	4bba      	ldr	r3, [pc, #744]	@ (80104fc <tx_control+0x23f0>)
 8010214:	22f1      	movs	r2, #241	@ 0xf1
 8010216:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 8010218:	4bb8      	ldr	r3, [pc, #736]	@ (80104fc <tx_control+0x23f0>)
 801021a:	223d      	movs	r2, #61	@ 0x3d
 801021c:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 801021e:	e005      	b.n	801022c <tx_control+0x2120>
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 8010220:	4bb6      	ldr	r3, [pc, #728]	@ (80104fc <tx_control+0x23f0>)
 8010222:	22f1      	movs	r2, #241	@ 0xf1
 8010224:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 8010226:	4bb5      	ldr	r3, [pc, #724]	@ (80104fc <tx_control+0x23f0>)
 8010228:	223e      	movs	r2, #62	@ 0x3e
 801022a:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 801022c:	4bb4      	ldr	r3, [pc, #720]	@ (8010500 <tx_control+0x23f4>)
 801022e:	4ab3      	ldr	r2, [pc, #716]	@ (80104fc <tx_control+0x23f0>)
 8010230:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 8010232:	4bb4      	ldr	r3, [pc, #720]	@ (8010504 <tx_control+0x23f8>)
 8010234:	4ab1      	ldr	r2, [pc, #708]	@ (80104fc <tx_control+0x23f0>)
 8010236:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 8010238:	4bb3      	ldr	r3, [pc, #716]	@ (8010508 <tx_control+0x23fc>)
 801023a:	4ab4      	ldr	r2, [pc, #720]	@ (801050c <tx_control+0x2400>)
 801023c:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 801023e:	4bb4      	ldr	r3, [pc, #720]	@ (8010510 <tx_control+0x2404>)
 8010240:	2202      	movs	r2, #2
 8010242:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 8010244:	4bb3      	ldr	r3, [pc, #716]	@ (8010514 <tx_control+0x2408>)
 8010246:	2201      	movs	r2, #1
 8010248:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 801024a:	4bb3      	ldr	r3, [pc, #716]	@ (8010518 <tx_control+0x240c>)
 801024c:	2255      	movs	r2, #85	@ 0x55
 801024e:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 8010250:	4bb2      	ldr	r3, [pc, #712]	@ (801051c <tx_control+0x2410>)
 8010252:	2200      	movs	r2, #0
 8010254:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 8010256:	e004      	b.n	8010262 <tx_control+0x2156>
		goto end_tx_control;
 8010258:	46c0      	nop			@ (mov r8, r8)
 801025a:	e002      	b.n	8010262 <tx_control+0x2156>
		goto end_tx_control;//	jp end_tx_control
 801025c:	46c0      	nop			@ (mov r8, r8)
 801025e:	e000      	b.n	8010262 <tx_control+0x2156>
			goto end_tx_control;		//jp		end_tx_control
 8010260:	46c0      	nop			@ (mov r8, r8)
		if (keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 8010262:	4bad      	ldr	r3, [pc, #692]	@ (8010518 <tx_control+0x240c>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d11b      	bne.n	80102a2 <tx_control+0x2196>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 801026a:	4bad      	ldr	r3, [pc, #692]	@ (8010520 <tx_control+0x2414>)
 801026c:	791b      	ldrb	r3, [r3, #4]
 801026e:	2201      	movs	r2, #1
 8010270:	4053      	eors	r3, r2
 8010272:	b2db      	uxtb	r3, r3
 8010274:	2b00      	cmp	r3, #0
 8010276:	d103      	bne.n	8010280 <tx_control+0x2174>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 8010278:	4baa      	ldr	r3, [pc, #680]	@ (8010524 <tx_control+0x2418>)
 801027a:	22aa      	movs	r2, #170	@ 0xaa
 801027c:	701a      	strb	r2, [r3, #0]
 801027e:	e000      	b.n	8010282 <tx_control+0x2176>
			goto ask_resetLoopTx;
 8010280:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 8010282:	4ba9      	ldr	r3, [pc, #676]	@ (8010528 <tx_control+0x241c>)
 8010284:	791b      	ldrb	r3, [r3, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d109      	bne.n	801029e <tx_control+0x2192>
resetLoopTx:
 801028a:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 801028c:	4ba1      	ldr	r3, [pc, #644]	@ (8010514 <tx_control+0x2408>)
 801028e:	795b      	ldrb	r3, [r3, #5]
 8010290:	2201      	movs	r2, #1
 8010292:	4053      	eors	r3, r2
 8010294:	b2db      	uxtb	r3, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <tx_control+0x219c>
		asm ("nop");
 801029a:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 801029c:	e7f6      	b.n	801028c <tx_control+0x2180>
		asm ("nop");
 801029e:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx_2;
 80102a0:	e7fd      	b.n	801029e <tx_control+0x2192>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 80102a2:	46c0      	nop			@ (mov r8, r8)
 80102a4:	f001 f888 	bl	80113b8 <tx_control+0x32ac>
			goto no_resetLoopTx;
 80102a8:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 80102aa:	f001 f885 	bl	80113b8 <tx_control+0x32ac>
			goto tx_wifi_01;
 80102ae:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;//jp			end_tx_wifi
tx_wifi_01:
		//;  Pregunta por el estado de la conexión a Servidor
		if(flagsTxControl[f_statWIFI])//btjt		flagsTxControl,#f_statWIFI,tx_wifi_OK
 80102b0:	4b9e      	ldr	r3, [pc, #632]	@ (801052c <tx_control+0x2420>)
 80102b2:	789b      	ldrb	r3, [r3, #2]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d119      	bne.n	80102ec <tx_control+0x21e0>
			goto tx_wifi_OK;
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 80102b8:	4b9d      	ldr	r3, [pc, #628]	@ (8010530 <tx_control+0x2424>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 80102be:	4b9c      	ldr	r3, [pc, #624]	@ (8010530 <tx_control+0x2424>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 80102c4:	4b9a      	ldr	r3, [pc, #616]	@ (8010530 <tx_control+0x2424>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 80102ca:	4b99      	ldr	r3, [pc, #612]	@ (8010530 <tx_control+0x2424>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 80102d0:	4b97      	ldr	r3, [pc, #604]	@ (8010530 <tx_control+0x2424>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	711a      	strb	r2, [r3, #4]
		cntRegTxWifi = 0;
 80102d6:	4b97      	ldr	r3, [pc, #604]	@ (8010534 <tx_control+0x2428>)
 80102d8:	2200      	movs	r2, #0
 80102da:	801a      	strh	r2, [r3, #0]
		blockLoggWifi = 0;
 80102dc:	4b96      	ldr	r3, [pc, #600]	@ (8010538 <tx_control+0x242c>)
 80102de:	2200      	movs	r2, #0
 80102e0:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;
 80102e2:	4b96      	ldr	r3, [pc, #600]	@ (801053c <tx_control+0x2430>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp			end_tx_wifi
 80102e8:	f001 f863 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_OK;
 80102ec:	46c0      	nop			@ (mov r8, r8)

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 80102ee:	4b90      	ldr	r3, [pc, #576]	@ (8010530 <tx_control+0x2424>)
 80102f0:	2201      	movs	r2, #1
 80102f2:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 80102f4:	4b8a      	ldr	r3, [pc, #552]	@ (8010520 <tx_control+0x2414>)
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2201      	movs	r2, #1
 80102fa:	4053      	eors	r3, r2
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <tx_control+0x21fa>
 8010302:	f001 f849 	bl	8011398 <tx_control+0x328c>
			goto tx_wifi_OK_01;
 8010306:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 8010308:	4b83      	ldr	r3, [pc, #524]	@ (8010518 <tx_control+0x240c>)
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <tx_control+0x2208>
 8010310:	f001 f845 	bl	801139e <tx_control+0x3292>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 8010314:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		//if(!flagsWIFI[f_timeLoggerSend]){
		if(flagsWIFI[f_timeLoggerSend]){
 8010316:	4b86      	ldr	r3, [pc, #536]	@ (8010530 <tx_control+0x2424>)
 8010318:	785b      	ldrb	r3, [r3, #1]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d100      	bne.n	8010320 <tx_control+0x2214>
 801031e:	e1fd      	b.n	801071c <tx_control+0x2610>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 8010320:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 8010322:	4b83      	ldr	r3, [pc, #524]	@ (8010530 <tx_control+0x2424>)
 8010324:	78db      	ldrb	r3, [r3, #3]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d000      	beq.n	801032c <tx_control+0x2220>
 801032a:	e0b8      	b.n	801049e <tx_control+0x2392>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 801032c:	4b80      	ldr	r3, [pc, #512]	@ (8010530 <tx_control+0x2424>)
 801032e:	2201      	movs	r2, #1
 8010330:	70da      	strb	r2, [r3, #3]
		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_cmd
		if(cntRegTxWifi)
 8010332:	4b80      	ldr	r3, [pc, #512]	@ (8010534 <tx_control+0x2428>)
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d134      	bne.n	80103a4 <tx_control+0x2298>
			goto tx_wifi_timeLogger_cmd;

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 801033a:	4b81      	ldr	r3, [pc, #516]	@ (8010540 <tx_control+0x2434>)
 801033c:	781a      	ldrb	r2, [r3, #0]
 801033e:	4b81      	ldr	r3, [pc, #516]	@ (8010544 <tx_control+0x2438>)
 8010340:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 8010342:	4b81      	ldr	r3, [pc, #516]	@ (8010548 <tx_control+0x243c>)
 8010344:	781a      	ldrb	r2, [r3, #0]
 8010346:	4b81      	ldr	r3, [pc, #516]	@ (801054c <tx_control+0x2440>)
 8010348:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 801034a:	4b81      	ldr	r3, [pc, #516]	@ (8010550 <tx_control+0x2444>)
 801034c:	4a81      	ldr	r2, [pc, #516]	@ (8010554 <tx_control+0x2448>)
 801034e:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 8010350:	4b81      	ldr	r3, [pc, #516]	@ (8010558 <tx_control+0x244c>)
 8010352:	4a82      	ldr	r2, [pc, #520]	@ (801055c <tx_control+0x2450>)
 8010354:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 8010356:	4b7e      	ldr	r3, [pc, #504]	@ (8010550 <tx_control+0x2444>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	337e      	adds	r3, #126	@ 0x7e
 801035c:	4a7b      	ldr	r2, [pc, #492]	@ (801054c <tx_control+0x2440>)
 801035e:	7812      	ldrb	r2, [r2, #0]
 8010360:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 8010362:	4b7f      	ldr	r3, [pc, #508]	@ (8010560 <tx_control+0x2454>)
 8010364:	22aa      	movs	r2, #170	@ 0xaa
 8010366:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 8010368:	4b7b      	ldr	r3, [pc, #492]	@ (8010558 <tx_control+0x244c>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a75      	ldr	r2, [pc, #468]	@ (8010544 <tx_control+0x2438>)
 801036e:	7812      	ldrb	r2, [r2, #0]
 8010370:	01d2      	lsls	r2, r2, #7
 8010372:	189a      	adds	r2, r3, r2
 8010374:	4b7b      	ldr	r3, [pc, #492]	@ (8010564 <tx_control+0x2458>)
 8010376:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 8010378:	4b75      	ldr	r3, [pc, #468]	@ (8010550 <tx_control+0x2444>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	4b7a      	ldr	r3, [pc, #488]	@ (8010568 <tx_control+0x245c>)
 801037e:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 8010380:	f7f7 f808 	bl	8007394 <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 8010384:	4b79      	ldr	r3, [pc, #484]	@ (801056c <tx_control+0x2460>)
 8010386:	881a      	ldrh	r2, [r3, #0]
 8010388:	4b79      	ldr	r3, [pc, #484]	@ (8010570 <tx_control+0x2464>)
 801038a:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 801038c:	4b79      	ldr	r3, [pc, #484]	@ (8010574 <tx_control+0x2468>)
 801038e:	4a7a      	ldr	r2, [pc, #488]	@ (8010578 <tx_control+0x246c>)
 8010390:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 8010392:	4b77      	ldr	r3, [pc, #476]	@ (8010570 <tx_control+0x2464>)
 8010394:	881a      	ldrh	r2, [r3, #0]
 8010396:	4b79      	ldr	r3, [pc, #484]	@ (801057c <tx_control+0x2470>)
 8010398:	801a      	strh	r2, [r3, #0]

		save_cntReg();// call	save_cntReg
 801039a:	f7f6 fee7 	bl	800716c <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 801039e:	f7f6 fefd 	bl	800719c <save_timeUNIX>
 80103a2:	e000      	b.n	80103a6 <tx_control+0x229a>
			goto tx_wifi_timeLogger_cmd;
 80103a4:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_cmd:
		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 80103a6:	4b76      	ldr	r3, [pc, #472]	@ (8010580 <tx_control+0x2474>)
 80103a8:	2240      	movs	r2, #64	@ 0x40
 80103aa:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 80103ac:	4b74      	ldr	r3, [pc, #464]	@ (8010580 <tx_control+0x2474>)
 80103ae:	2285      	movs	r2, #133	@ 0x85
 80103b0:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 80103b2:	4b74      	ldr	r3, [pc, #464]	@ (8010584 <tx_control+0x2478>)
 80103b4:	227b      	movs	r2, #123	@ 0x7b
 80103b6:	5c9a      	ldrb	r2, [r3, r2]
 80103b8:	4b71      	ldr	r3, [pc, #452]	@ (8010580 <tx_control+0x2474>)
 80103ba:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 80103bc:	4b71      	ldr	r3, [pc, #452]	@ (8010584 <tx_control+0x2478>)
 80103be:	227c      	movs	r2, #124	@ 0x7c
 80103c0:	5c9a      	ldrb	r2, [r3, r2]
 80103c2:	4b6f      	ldr	r3, [pc, #444]	@ (8010580 <tx_control+0x2474>)
 80103c4:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 80103c6:	4b70      	ldr	r3, [pc, #448]	@ (8010588 <tx_control+0x247c>)
 80103c8:	881b      	ldrh	r3, [r3, #0]
 80103ca:	0a1b      	lsrs	r3, r3, #8
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	b2da      	uxtb	r2, r3
 80103d0:	4b6b      	ldr	r3, [pc, #428]	@ (8010580 <tx_control+0x2474>)
 80103d2:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 80103d4:	4b6c      	ldr	r3, [pc, #432]	@ (8010588 <tx_control+0x247c>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	4b69      	ldr	r3, [pc, #420]	@ (8010580 <tx_control+0x2474>)
 80103dc:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 80103de:	4b6b      	ldr	r3, [pc, #428]	@ (801058c <tx_control+0x2480>)
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	0a1b      	lsrs	r3, r3, #8
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	4b65      	ldr	r3, [pc, #404]	@ (8010580 <tx_control+0x2474>)
 80103ea:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 80103ec:	4b67      	ldr	r3, [pc, #412]	@ (801058c <tx_control+0x2480>)
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	4b63      	ldr	r3, [pc, #396]	@ (8010580 <tx_control+0x2474>)
 80103f4:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[11] = eeLat4;
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;
		bufferWifiTx[8] = reeLat1;
 80103f6:	4b66      	ldr	r3, [pc, #408]	@ (8010590 <tx_control+0x2484>)
 80103f8:	781a      	ldrb	r2, [r3, #0]
 80103fa:	4b61      	ldr	r3, [pc, #388]	@ (8010580 <tx_control+0x2474>)
 80103fc:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 80103fe:	4b65      	ldr	r3, [pc, #404]	@ (8010594 <tx_control+0x2488>)
 8010400:	781a      	ldrb	r2, [r3, #0]
 8010402:	4b5f      	ldr	r3, [pc, #380]	@ (8010580 <tx_control+0x2474>)
 8010404:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 8010406:	4b64      	ldr	r3, [pc, #400]	@ (8010598 <tx_control+0x248c>)
 8010408:	781a      	ldrb	r2, [r3, #0]
 801040a:	4b5d      	ldr	r3, [pc, #372]	@ (8010580 <tx_control+0x2474>)
 801040c:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 801040e:	4b63      	ldr	r3, [pc, #396]	@ (801059c <tx_control+0x2490>)
 8010410:	781a      	ldrb	r2, [r3, #0]
 8010412:	4b5b      	ldr	r3, [pc, #364]	@ (8010580 <tx_control+0x2474>)
 8010414:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 8010416:	4b62      	ldr	r3, [pc, #392]	@ (80105a0 <tx_control+0x2494>)
 8010418:	781a      	ldrb	r2, [r3, #0]
 801041a:	4b59      	ldr	r3, [pc, #356]	@ (8010580 <tx_control+0x2474>)
 801041c:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 801041e:	4b61      	ldr	r3, [pc, #388]	@ (80105a4 <tx_control+0x2498>)
 8010420:	781a      	ldrb	r2, [r3, #0]
 8010422:	4b57      	ldr	r3, [pc, #348]	@ (8010580 <tx_control+0x2474>)
 8010424:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 8010426:	4b60      	ldr	r3, [pc, #384]	@ (80105a8 <tx_control+0x249c>)
 8010428:	781a      	ldrb	r2, [r3, #0]
 801042a:	4b55      	ldr	r3, [pc, #340]	@ (8010580 <tx_control+0x2474>)
 801042c:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 801042e:	4b5f      	ldr	r3, [pc, #380]	@ (80105ac <tx_control+0x24a0>)
 8010430:	781a      	ldrb	r2, [r3, #0]
 8010432:	4b53      	ldr	r3, [pc, #332]	@ (8010580 <tx_control+0x2474>)
 8010434:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010436:	4b32      	ldr	r3, [pc, #200]	@ (8010500 <tx_control+0x23f4>)
 8010438:	4a51      	ldr	r2, [pc, #324]	@ (8010580 <tx_control+0x2474>)
 801043a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 801043c:	4b31      	ldr	r3, [pc, #196]	@ (8010504 <tx_control+0x23f8>)
 801043e:	4a50      	ldr	r2, [pc, #320]	@ (8010580 <tx_control+0x2474>)
 8010440:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 8010442:	4b31      	ldr	r3, [pc, #196]	@ (8010508 <tx_control+0x23fc>)
 8010444:	4a5a      	ldr	r2, [pc, #360]	@ (80105b0 <tx_control+0x24a4>)
 8010446:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 8010448:	4b31      	ldr	r3, [pc, #196]	@ (8010510 <tx_control+0x2404>)
 801044a:	2210      	movs	r2, #16
 801044c:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 801044e:	4b31      	ldr	r3, [pc, #196]	@ (8010514 <tx_control+0x2408>)
 8010450:	2200      	movs	r2, #0
 8010452:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010454:	4b57      	ldr	r3, [pc, #348]	@ (80105b4 <tx_control+0x24a8>)
 8010456:	2200      	movs	r2, #0
 8010458:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801045a:	4b2e      	ldr	r3, [pc, #184]	@ (8010514 <tx_control+0x2408>)
 801045c:	2201      	movs	r2, #1
 801045e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010460:	4b2d      	ldr	r3, [pc, #180]	@ (8010518 <tx_control+0x240c>)
 8010462:	2255      	movs	r2, #85	@ 0x55
 8010464:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 8010466:	4b2d      	ldr	r3, [pc, #180]	@ (801051c <tx_control+0x2410>)
 8010468:	2200      	movs	r2, #0
 801046a:	701a      	strb	r2, [r3, #0]

		//;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_noInit
		if(cntRegTxWifi)
 801046c:	4b31      	ldr	r3, [pc, #196]	@ (8010534 <tx_control+0x2428>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d10b      	bne.n	801048c <tx_control+0x2380>
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 8010474:	4b32      	ldr	r3, [pc, #200]	@ (8010540 <tx_control+0x2434>)
 8010476:	781a      	ldrb	r2, [r3, #0]
 8010478:	4b2f      	ldr	r3, [pc, #188]	@ (8010538 <tx_control+0x242c>)
 801047a:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 801047c:	4b32      	ldr	r3, [pc, #200]	@ (8010548 <tx_control+0x243c>)
 801047e:	781a      	ldrb	r2, [r3, #0]
 8010480:	4b2e      	ldr	r3, [pc, #184]	@ (801053c <tx_control+0x2430>)
 8010482:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 8010484:	4b2b      	ldr	r3, [pc, #172]	@ (8010534 <tx_control+0x2428>)
 8010486:	2200      	movs	r2, #0
 8010488:	801a      	strh	r2, [r3, #0]
 801048a:	e000      	b.n	801048e <tx_control+0x2382>
			goto tx_wifi_timeLogger_noInit;
 801048c:	46c0      	nop			@ (mov r8, r8)
tx_wifi_timeLogger_noInit:
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 801048e:	4b4a      	ldr	r3, [pc, #296]	@ (80105b8 <tx_control+0x24ac>)
 8010490:	2203      	movs	r2, #3
 8010492:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegDATA) == 0){
		//	goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegDATA;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegDATA);
		numRegTx = 1343;
 8010494:	4b49      	ldr	r3, [pc, #292]	@ (80105bc <tx_control+0x24b0>)
 8010496:	4a4a      	ldr	r2, [pc, #296]	@ (80105c0 <tx_control+0x24b4>)
 8010498:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 801049a:	f000 ff8a 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_timeLogger_01;
 801049e:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 80104a0:	4b1e      	ldr	r3, [pc, #120]	@ (801051c <tx_control+0x2410>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	2b3d      	cmp	r3, #61	@ 0x3d
 80104a6:	d100      	bne.n	80104aa <tx_control+0x239e>
 80104a8:	e08c      	b.n	80105c4 <tx_control+0x24b8>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		codeTX = 0;
 80104aa:	4b1c      	ldr	r3, [pc, #112]	@ (801051c <tx_control+0x2410>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 80104b0:	4b41      	ldr	r3, [pc, #260]	@ (80105b8 <tx_control+0x24ac>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d104      	bne.n	80104c2 <tx_control+0x23b6>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 80104b8:	4b1d      	ldr	r3, [pc, #116]	@ (8010530 <tx_control+0x2424>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 80104be:	f000 ff78 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 80104c2:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 80104c4:	f000 ff75 	bl	80113b2 <tx_control+0x32a6>
 80104c8:	200009e4 	.word	0x200009e4
 80104cc:	20001158 	.word	0x20001158
 80104d0:	20001159 	.word	0x20001159
 80104d4:	2000115a 	.word	0x2000115a
 80104d8:	2000115b 	.word	0x2000115b
 80104dc:	2000115c 	.word	0x2000115c
 80104e0:	2000115d 	.word	0x2000115d
 80104e4:	20000bb2 	.word	0x20000bb2
 80104e8:	20001174 	.word	0x20001174
 80104ec:	20000574 	.word	0x20000574
 80104f0:	20001160 	.word	0x20001160
 80104f4:	200011d1 	.word	0x200011d1
 80104f8:	20001150 	.word	0x20001150
 80104fc:	20000e9c 	.word	0x20000e9c
 8010500:	20000efc 	.word	0x20000efc
 8010504:	20000ef4 	.word	0x20000ef4
 8010508:	20000ef8 	.word	0x20000ef8
 801050c:	20000e9d 	.word	0x20000e9d
 8010510:	20000f18 	.word	0x20000f18
 8010514:	20000f04 	.word	0x20000f04
 8010518:	20000f01 	.word	0x20000f01
 801051c:	20000f0c 	.word	0x20000f0c
 8010520:	20000fc4 	.word	0x20000fc4
 8010524:	20000fcc 	.word	0x20000fcc
 8010528:	2000112c 	.word	0x2000112c
 801052c:	200011d4 	.word	0x200011d4
 8010530:	20001038 	.word	0x20001038
 8010534:	20001060 	.word	0x20001060
 8010538:	2000105e 	.word	0x2000105e
 801053c:	2000105f 	.word	0x2000105f
 8010540:	20000e95 	.word	0x20000e95
 8010544:	20000e82 	.word	0x20000e82
 8010548:	20000e94 	.word	0x20000e94
 801054c:	20000e83 	.word	0x20000e83
 8010550:	20000e8c 	.word	0x20000e8c
 8010554:	20000d74 	.word	0x20000d74
 8010558:	20000e88 	.word	0x20000e88
 801055c:	0803c000 	.word	0x0803c000
 8010560:	20000e74 	.word	0x20000e74
 8010564:	20000e78 	.word	0x20000e78
 8010568:	20000e7c 	.word	0x20000e7c
 801056c:	20001122 	.word	0x20001122
 8010570:	20001126 	.word	0x20001126
 8010574:	20001128 	.word	0x20001128
 8010578:	0803f810 	.word	0x0803f810
 801057c:	20000d6e 	.word	0x20000d6e
 8010580:	20001040 	.word	0x20001040
 8010584:	20000ce8 	.word	0x20000ce8
 8010588:	20000e98 	.word	0x20000e98
 801058c:	20000e9a 	.word	0x20000e9a
 8010590:	200001bb 	.word	0x200001bb
 8010594:	200001bc 	.word	0x200001bc
 8010598:	200001bd 	.word	0x200001bd
 801059c:	200001be 	.word	0x200001be
 80105a0:	200001bf 	.word	0x200001bf
 80105a4:	200001c0 	.word	0x200001c0
 80105a8:	200001c1 	.word	0x200001c1
 80105ac:	200001c2 	.word	0x200001c2
 80105b0:	20001050 	.word	0x20001050
 80105b4:	20000f1c 	.word	0x20000f1c
 80105b8:	20001062 	.word	0x20001062
 80105bc:	20001120 	.word	0x20001120
 80105c0:	0000053f 	.word	0x0000053f
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 80105c4:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 80105c6:	4be7      	ldr	r3, [pc, #924]	@ (8010964 <tx_control+0x2858>)
 80105c8:	2296      	movs	r2, #150	@ 0x96
 80105ca:	0052      	lsls	r2, r2, #1
 80105cc:	801a      	strh	r2, [r3, #0]
		//ldw		X,#300;
		timeoutTBLE = 300;//ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
 80105ce:	4be6      	ldr	r3, [pc, #920]	@ (8010968 <tx_control+0x285c>)
 80105d0:	2296      	movs	r2, #150	@ 0x96
 80105d2:	0052      	lsls	r2, r2, #1
 80105d4:	801a      	strh	r2, [r3, #0]

		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 80105d6:	4be5      	ldr	r3, [pc, #916]	@ (801096c <tx_control+0x2860>)
 80105d8:	2203      	movs	r2, #3
 80105da:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 80105dc:	4be4      	ldr	r3, [pc, #912]	@ (8010970 <tx_control+0x2864>)
 80105de:	881a      	ldrh	r2, [r3, #0]
 80105e0:	4be4      	ldr	r3, [pc, #912]	@ (8010974 <tx_control+0x2868>)
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d314      	bcc.n	8010612 <tx_control+0x2506>
		//cntReg = 0;// ldw		cntReg,X
		// ldw		X,#eeCntRegDATA
		//cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
		//save_cntReg();// call	save_cntReg

tx_wifi_timeLogger_END:
 80105e8:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
		flagsWIFI[f_timeLoggerSend] = 0;
 80105ea:	4be3      	ldr	r3, [pc, #908]	@ (8010978 <tx_control+0x286c>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 80105f0:	4be1      	ldr	r3, [pc, #900]	@ (8010978 <tx_control+0x286c>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 80105f6:	4be1      	ldr	r3, [pc, #900]	@ (801097c <tx_control+0x2870>)
 80105f8:	220a      	movs	r2, #10
 80105fa:	701a      	strb	r2, [r3, #0]

		blockLoggWifi = 0; 		//clr	blockLoggWifi
 80105fc:	4be0      	ldr	r3, [pc, #896]	@ (8010980 <tx_control+0x2874>)
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;		//clr		byteLoggWifi
 8010602:	4be0      	ldr	r3, [pc, #896]	@ (8010984 <tx_control+0x2878>)
 8010604:	2200      	movs	r2, #0
 8010606:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 8010608:	4bda      	ldr	r3, [pc, #872]	@ (8010974 <tx_control+0x2868>)
 801060a:	2200      	movs	r2, #0
 801060c:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 801060e:	f000 fed0 	bl	80113b2 <tx_control+0x32a6>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 8010612:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 8010614:	4bdc      	ldr	r3, [pc, #880]	@ (8010988 <tx_control+0x287c>)
 8010616:	2240      	movs	r2, #64	@ 0x40
 8010618:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 801061a:	4bdb      	ldr	r3, [pc, #876]	@ (8010988 <tx_control+0x287c>)
 801061c:	2283      	movs	r2, #131	@ 0x83
 801061e:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010620:	4bd9      	ldr	r3, [pc, #868]	@ (8010988 <tx_control+0x287c>)
 8010622:	2203      	movs	r2, #3
 8010624:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 8010626:	4bd9      	ldr	r3, [pc, #868]	@ (801098c <tx_control+0x2880>)
 8010628:	227b      	movs	r2, #123	@ 0x7b
 801062a:	5c9a      	ldrb	r2, [r3, r2]
 801062c:	4bd6      	ldr	r3, [pc, #856]	@ (8010988 <tx_control+0x287c>)
 801062e:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010630:	4bd6      	ldr	r3, [pc, #856]	@ (801098c <tx_control+0x2880>)
 8010632:	227c      	movs	r2, #124	@ 0x7c
 8010634:	5c9a      	ldrb	r2, [r3, r2]
 8010636:	4bd4      	ldr	r3, [pc, #848]	@ (8010988 <tx_control+0x287c>)
 8010638:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 801063a:	4bd2      	ldr	r3, [pc, #840]	@ (8010984 <tx_control+0x2878>)
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d112      	bne.n	8010668 <tx_control+0x255c>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 8010642:	4bd0      	ldr	r3, [pc, #832]	@ (8010984 <tx_control+0x2878>)
 8010644:	227e      	movs	r2, #126	@ 0x7e
 8010646:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 8010648:	4bcd      	ldr	r3, [pc, #820]	@ (8010980 <tx_control+0x2874>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d103      	bne.n	8010658 <tx_control+0x254c>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 8010650:	4bcb      	ldr	r3, [pc, #812]	@ (8010980 <tx_control+0x2874>)
 8010652:	2260      	movs	r2, #96	@ 0x60
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	e000      	b.n	801065a <tx_control+0x254e>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 8010658:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 801065a:	4bc9      	ldr	r3, [pc, #804]	@ (8010980 <tx_control+0x2874>)
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	3b01      	subs	r3, #1
 8010660:	b2da      	uxtb	r2, r3
 8010662:	4bc7      	ldr	r3, [pc, #796]	@ (8010980 <tx_control+0x2874>)
 8010664:	701a      	strb	r2, [r3, #0]
 8010666:	e000      	b.n	801066a <tx_control+0x255e>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 8010668:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 801066a:	4bc9      	ldr	r3, [pc, #804]	@ (8010990 <tx_control+0x2884>)
 801066c:	643b      	str	r3, [r7, #64]	@ 0x40
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 801066e:	4bc4      	ldr	r3, [pc, #784]	@ (8010980 <tx_control+0x2874>)
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	01db      	lsls	r3, r3, #7
 8010674:	4ac3      	ldr	r2, [pc, #780]	@ (8010984 <tx_control+0x2878>)
 8010676:	7812      	ldrb	r2, [r2, #0]
 8010678:	189a      	adds	r2, r3, r2
 801067a:	4bc6      	ldr	r3, [pc, #792]	@ (8010994 <tx_control+0x2888>)
 801067c:	18d3      	adds	r3, r2, r3
 801067e:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 8010680:	4bc5      	ldr	r3, [pc, #788]	@ (8010998 <tx_control+0x288c>)
 8010682:	2200      	movs	r2, #0
 8010684:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 8010686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010688:	3b01      	subs	r3, #1
 801068a:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 801068c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801068e:	3b01      	subs	r3, #1
 8010690:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 8010692:	4bbc      	ldr	r3, [pc, #752]	@ (8010984 <tx_control+0x2878>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	3b01      	subs	r3, #1
 8010698:	b2da      	uxtb	r2, r3
 801069a:	4bba      	ldr	r3, [pc, #744]	@ (8010984 <tx_control+0x2878>)
 801069c:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 801069e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80106a0:	2380      	movs	r3, #128	@ 0x80
 80106a2:	025b      	lsls	r3, r3, #9
 80106a4:	5cd2      	ldrb	r2, [r2, r3]
 80106a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106a8:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 80106aa:	4bbb      	ldr	r3, [pc, #748]	@ (8010998 <tx_control+0x288c>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	3301      	adds	r3, #1
 80106b0:	b2da      	uxtb	r2, r3
 80106b2:	4bb9      	ldr	r3, [pc, #740]	@ (8010998 <tx_control+0x288c>)
 80106b4:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 80106b6:	4bb8      	ldr	r3, [pc, #736]	@ (8010998 <tx_control+0x288c>)
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	2b08      	cmp	r3, #8
 80106bc:	d800      	bhi.n	80106c0 <tx_control+0x25b4>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 80106be:	e7e2      	b.n	8010686 <tx_control+0x257a>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 80106c0:	4bb1      	ldr	r3, [pc, #708]	@ (8010988 <tx_control+0x287c>)
 80106c2:	7b5a      	ldrb	r2, [r3, #13]
 80106c4:	4bb5      	ldr	r3, [pc, #724]	@ (801099c <tx_control+0x2890>)
 80106c6:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 80106c8:	4baf      	ldr	r3, [pc, #700]	@ (8010988 <tx_control+0x287c>)
 80106ca:	2200      	movs	r2, #0
 80106cc:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 80106ce:	4bb3      	ldr	r3, [pc, #716]	@ (801099c <tx_control+0x2890>)
 80106d0:	781a      	ldrb	r2, [r3, #0]
 80106d2:	4bad      	ldr	r3, [pc, #692]	@ (8010988 <tx_control+0x287c>)
 80106d4:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80106d6:	4bb2      	ldr	r3, [pc, #712]	@ (80109a0 <tx_control+0x2894>)
 80106d8:	4aab      	ldr	r2, [pc, #684]	@ (8010988 <tx_control+0x287c>)
 80106da:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80106dc:	4bb1      	ldr	r3, [pc, #708]	@ (80109a4 <tx_control+0x2898>)
 80106de:	4aaa      	ldr	r2, [pc, #680]	@ (8010988 <tx_control+0x287c>)
 80106e0:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 80106e2:	4bb1      	ldr	r3, [pc, #708]	@ (80109a8 <tx_control+0x289c>)
 80106e4:	4ab1      	ldr	r2, [pc, #708]	@ (80109ac <tx_control+0x28a0>)
 80106e6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 80106e8:	4bb1      	ldr	r3, [pc, #708]	@ (80109b0 <tx_control+0x28a4>)
 80106ea:	220f      	movs	r2, #15
 80106ec:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80106ee:	4bb1      	ldr	r3, [pc, #708]	@ (80109b4 <tx_control+0x28a8>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80106f4:	4bb0      	ldr	r3, [pc, #704]	@ (80109b8 <tx_control+0x28ac>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80106fa:	4bae      	ldr	r3, [pc, #696]	@ (80109b4 <tx_control+0x28a8>)
 80106fc:	2201      	movs	r2, #1
 80106fe:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010700:	4bae      	ldr	r3, [pc, #696]	@ (80109bc <tx_control+0x28b0>)
 8010702:	2255      	movs	r2, #85	@ 0x55
 8010704:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 8010706:	4bae      	ldr	r3, [pc, #696]	@ (80109c0 <tx_control+0x28b4>)
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 801070c:	4b99      	ldr	r3, [pc, #612]	@ (8010974 <tx_control+0x2868>)
 801070e:	881b      	ldrh	r3, [r3, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	b29a      	uxth	r2, r3
 8010714:	4b97      	ldr	r3, [pc, #604]	@ (8010974 <tx_control+0x2868>)
 8010716:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 8010718:	f000 fe4b 	bl	80113b2 <tx_control+0x32a6>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 801071c:	46c0      	nop			@ (mov r8, r8)
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		//if(!flagsWIFI[f_eventLoggerSend]){
		if(flagsWIFI[f_eventLoggerSend]){
 801071e:	4b96      	ldr	r3, [pc, #600]	@ (8010978 <tx_control+0x286c>)
 8010720:	789b      	ldrb	r3, [r3, #2]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d100      	bne.n	8010728 <tx_control+0x261c>
 8010726:	e1e8      	b.n	8010afa <tx_control+0x29ee>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 8010728:	46c0      	nop			@ (mov r8, r8)
//tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 801072a:	4b93      	ldr	r3, [pc, #588]	@ (8010978 <tx_control+0x286c>)
 801072c:	791b      	ldrb	r3, [r3, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d000      	beq.n	8010734 <tx_control+0x2628>
 8010732:	e0b7      	b.n	80108a4 <tx_control+0x2798>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 8010734:	4b90      	ldr	r3, [pc, #576]	@ (8010978 <tx_control+0x286c>)
 8010736:	2201      	movs	r2, #1
 8010738:	711a      	strb	r2, [r3, #4]

		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_eventLogger_cmd
		if(cntRegTxWifi)
 801073a:	4b8e      	ldr	r3, [pc, #568]	@ (8010974 <tx_control+0x2868>)
 801073c:	881b      	ldrh	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d133      	bne.n	80107aa <tx_control+0x269e>
			goto tx_wifi_eventLogger_cmd;
		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 8010742:	4ba0      	ldr	r3, [pc, #640]	@ (80109c4 <tx_control+0x28b8>)
 8010744:	781a      	ldrb	r2, [r3, #0]
 8010746:	4ba0      	ldr	r3, [pc, #640]	@ (80109c8 <tx_control+0x28bc>)
 8010748:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 801074a:	4ba0      	ldr	r3, [pc, #640]	@ (80109cc <tx_control+0x28c0>)
 801074c:	781a      	ldrb	r2, [r3, #0]
 801074e:	4ba0      	ldr	r3, [pc, #640]	@ (80109d0 <tx_control+0x28c4>)
 8010750:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 8010752:	4ba0      	ldr	r3, [pc, #640]	@ (80109d4 <tx_control+0x28c8>)
 8010754:	4aa0      	ldr	r2, [pc, #640]	@ (80109d8 <tx_control+0x28cc>)
 8010756:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 8010758:	4ba0      	ldr	r3, [pc, #640]	@ (80109dc <tx_control+0x28d0>)
 801075a:	4aa1      	ldr	r2, [pc, #644]	@ (80109e0 <tx_control+0x28d4>)
 801075c:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 801075e:	4b9c      	ldr	r3, [pc, #624]	@ (80109d0 <tx_control+0x28c4>)
 8010760:	7819      	ldrb	r1, [r3, #0]
 8010762:	4b9d      	ldr	r3, [pc, #628]	@ (80109d8 <tx_control+0x28cc>)
 8010764:	227e      	movs	r2, #126	@ 0x7e
 8010766:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 8010768:	4b9e      	ldr	r3, [pc, #632]	@ (80109e4 <tx_control+0x28d8>)
 801076a:	22aa      	movs	r2, #170	@ 0xaa
 801076c:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 801076e:	4b9b      	ldr	r3, [pc, #620]	@ (80109dc <tx_control+0x28d0>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a95      	ldr	r2, [pc, #596]	@ (80109c8 <tx_control+0x28bc>)
 8010774:	7812      	ldrb	r2, [r2, #0]
 8010776:	01d2      	lsls	r2, r2, #7
 8010778:	189a      	adds	r2, r3, r2
 801077a:	4b9b      	ldr	r3, [pc, #620]	@ (80109e8 <tx_control+0x28dc>)
 801077c:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 801077e:	4b95      	ldr	r3, [pc, #596]	@ (80109d4 <tx_control+0x28c8>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	4b9a      	ldr	r3, [pc, #616]	@ (80109ec <tx_control+0x28e0>)
 8010784:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 8010786:	f7f6 fe05 	bl	8007394 <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 801078a:	4b99      	ldr	r3, [pc, #612]	@ (80109f0 <tx_control+0x28e4>)
 801078c:	881a      	ldrh	r2, [r3, #0]
 801078e:	4b99      	ldr	r3, [pc, #612]	@ (80109f4 <tx_control+0x28e8>)
 8010790:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 8010792:	4b99      	ldr	r3, [pc, #612]	@ (80109f8 <tx_control+0x28ec>)
 8010794:	4a99      	ldr	r2, [pc, #612]	@ (80109fc <tx_control+0x28f0>)
 8010796:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 8010798:	4b96      	ldr	r3, [pc, #600]	@ (80109f4 <tx_control+0x28e8>)
 801079a:	881a      	ldrh	r2, [r3, #0]
 801079c:	4b98      	ldr	r3, [pc, #608]	@ (8010a00 <tx_control+0x28f4>)
 801079e:	801a      	strh	r2, [r3, #0]

		save_cntReg();		// call	save_cntReg
 80107a0:	f7f6 fce4 	bl	800716c <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 80107a4:	f7f6 fcfa 	bl	800719c <save_timeUNIX>
 80107a8:	e000      	b.n	80107ac <tx_control+0x26a0>
			goto tx_wifi_eventLogger_cmd;
 80107aa:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_cmd:
		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 80107ac:	4b76      	ldr	r3, [pc, #472]	@ (8010988 <tx_control+0x287c>)
 80107ae:	2240      	movs	r2, #64	@ 0x40
 80107b0:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 80107b2:	4b75      	ldr	r3, [pc, #468]	@ (8010988 <tx_control+0x287c>)
 80107b4:	2286      	movs	r2, #134	@ 0x86
 80107b6:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 80107b8:	4b74      	ldr	r3, [pc, #464]	@ (801098c <tx_control+0x2880>)
 80107ba:	227b      	movs	r2, #123	@ 0x7b
 80107bc:	5c9a      	ldrb	r2, [r3, r2]
 80107be:	4b72      	ldr	r3, [pc, #456]	@ (8010988 <tx_control+0x287c>)
 80107c0:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 80107c2:	4b72      	ldr	r3, [pc, #456]	@ (801098c <tx_control+0x2880>)
 80107c4:	227c      	movs	r2, #124	@ 0x7c
 80107c6:	5c9a      	ldrb	r2, [r3, r2]
 80107c8:	4b6f      	ldr	r3, [pc, #444]	@ (8010988 <tx_control+0x287c>)
 80107ca:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 80107cc:	4b8d      	ldr	r3, [pc, #564]	@ (8010a04 <tx_control+0x28f8>)
 80107ce:	881b      	ldrh	r3, [r3, #0]
 80107d0:	0a1b      	lsrs	r3, r3, #8
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	4b6c      	ldr	r3, [pc, #432]	@ (8010988 <tx_control+0x287c>)
 80107d8:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 80107da:	4b8a      	ldr	r3, [pc, #552]	@ (8010a04 <tx_control+0x28f8>)
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	4b69      	ldr	r3, [pc, #420]	@ (8010988 <tx_control+0x287c>)
 80107e2:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 80107e4:	4b88      	ldr	r3, [pc, #544]	@ (8010a08 <tx_control+0x28fc>)
 80107e6:	881b      	ldrh	r3, [r3, #0]
 80107e8:	0a1b      	lsrs	r3, r3, #8
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	4b66      	ldr	r3, [pc, #408]	@ (8010988 <tx_control+0x287c>)
 80107f0:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 80107f2:	4b85      	ldr	r3, [pc, #532]	@ (8010a08 <tx_control+0x28fc>)
 80107f4:	881b      	ldrh	r3, [r3, #0]
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	4b63      	ldr	r3, [pc, #396]	@ (8010988 <tx_control+0x287c>)
 80107fa:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;

		bufferWifiTx[8] = reeLat1;
 80107fc:	4b83      	ldr	r3, [pc, #524]	@ (8010a0c <tx_control+0x2900>)
 80107fe:	781a      	ldrb	r2, [r3, #0]
 8010800:	4b61      	ldr	r3, [pc, #388]	@ (8010988 <tx_control+0x287c>)
 8010802:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 8010804:	4b82      	ldr	r3, [pc, #520]	@ (8010a10 <tx_control+0x2904>)
 8010806:	781a      	ldrb	r2, [r3, #0]
 8010808:	4b5f      	ldr	r3, [pc, #380]	@ (8010988 <tx_control+0x287c>)
 801080a:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 801080c:	4b81      	ldr	r3, [pc, #516]	@ (8010a14 <tx_control+0x2908>)
 801080e:	781a      	ldrb	r2, [r3, #0]
 8010810:	4b5d      	ldr	r3, [pc, #372]	@ (8010988 <tx_control+0x287c>)
 8010812:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 8010814:	4b80      	ldr	r3, [pc, #512]	@ (8010a18 <tx_control+0x290c>)
 8010816:	781a      	ldrb	r2, [r3, #0]
 8010818:	4b5b      	ldr	r3, [pc, #364]	@ (8010988 <tx_control+0x287c>)
 801081a:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 801081c:	4b7f      	ldr	r3, [pc, #508]	@ (8010a1c <tx_control+0x2910>)
 801081e:	781a      	ldrb	r2, [r3, #0]
 8010820:	4b59      	ldr	r3, [pc, #356]	@ (8010988 <tx_control+0x287c>)
 8010822:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 8010824:	4b7e      	ldr	r3, [pc, #504]	@ (8010a20 <tx_control+0x2914>)
 8010826:	781a      	ldrb	r2, [r3, #0]
 8010828:	4b57      	ldr	r3, [pc, #348]	@ (8010988 <tx_control+0x287c>)
 801082a:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 801082c:	4b7d      	ldr	r3, [pc, #500]	@ (8010a24 <tx_control+0x2918>)
 801082e:	781a      	ldrb	r2, [r3, #0]
 8010830:	4b55      	ldr	r3, [pc, #340]	@ (8010988 <tx_control+0x287c>)
 8010832:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 8010834:	4b7c      	ldr	r3, [pc, #496]	@ (8010a28 <tx_control+0x291c>)
 8010836:	781a      	ldrb	r2, [r3, #0]
 8010838:	4b53      	ldr	r3, [pc, #332]	@ (8010988 <tx_control+0x287c>)
 801083a:	73da      	strb	r2, [r3, #15]


		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801083c:	4b58      	ldr	r3, [pc, #352]	@ (80109a0 <tx_control+0x2894>)
 801083e:	4a52      	ldr	r2, [pc, #328]	@ (8010988 <tx_control+0x287c>)
 8010840:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010842:	4b58      	ldr	r3, [pc, #352]	@ (80109a4 <tx_control+0x2898>)
 8010844:	4a50      	ldr	r2, [pc, #320]	@ (8010988 <tx_control+0x287c>)
 8010846:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 8010848:	4b57      	ldr	r3, [pc, #348]	@ (80109a8 <tx_control+0x289c>)
 801084a:	4a78      	ldr	r2, [pc, #480]	@ (8010a2c <tx_control+0x2920>)
 801084c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 801084e:	4b58      	ldr	r3, [pc, #352]	@ (80109b0 <tx_control+0x28a4>)
 8010850:	2210      	movs	r2, #16
 8010852:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010854:	4b57      	ldr	r3, [pc, #348]	@ (80109b4 <tx_control+0x28a8>)
 8010856:	2200      	movs	r2, #0
 8010858:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 801085a:	4b57      	ldr	r3, [pc, #348]	@ (80109b8 <tx_control+0x28ac>)
 801085c:	2200      	movs	r2, #0
 801085e:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010860:	4b54      	ldr	r3, [pc, #336]	@ (80109b4 <tx_control+0x28a8>)
 8010862:	2201      	movs	r2, #1
 8010864:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010866:	4b55      	ldr	r3, [pc, #340]	@ (80109bc <tx_control+0x28b0>)
 8010868:	2255      	movs	r2, #85	@ 0x55
 801086a:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 801086c:	4b54      	ldr	r3, [pc, #336]	@ (80109c0 <tx_control+0x28b4>)
 801086e:	2200      	movs	r2, #0
 8010870:	701a      	strb	r2, [r3, #0]

//		;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
//		ldw		X,cntRegTxWifi
//		tnzw	X
//		jrne	tx_wifi_eventLogger_noInit
		if(cntRegTxWifi)
 8010872:	4b40      	ldr	r3, [pc, #256]	@ (8010974 <tx_control+0x2868>)
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10b      	bne.n	8010892 <tx_control+0x2786>

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 801087a:	4b52      	ldr	r3, [pc, #328]	@ (80109c4 <tx_control+0x28b8>)
 801087c:	781a      	ldrb	r2, [r3, #0]
 801087e:	4b40      	ldr	r3, [pc, #256]	@ (8010980 <tx_control+0x2874>)
 8010880:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 8010882:	4b52      	ldr	r3, [pc, #328]	@ (80109cc <tx_control+0x28c0>)
 8010884:	781a      	ldrb	r2, [r3, #0]
 8010886:	4b3f      	ldr	r3, [pc, #252]	@ (8010984 <tx_control+0x2878>)
 8010888:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 801088a:	4b3a      	ldr	r3, [pc, #232]	@ (8010974 <tx_control+0x2868>)
 801088c:	2200      	movs	r2, #0
 801088e:	801a      	strh	r2, [r3, #0]
 8010890:	e000      	b.n	8010894 <tx_control+0x2788>
			goto tx_wifi_eventLogger_noInit;
 8010892:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_noInit:
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 8010894:	4b35      	ldr	r3, [pc, #212]	@ (801096c <tx_control+0x2860>)
 8010896:	2203      	movs	r2, #3
 8010898:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegEVENT)==0){
		//	goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegEVENT);
		numRegTx = 1439;
 801089a:	4b35      	ldr	r3, [pc, #212]	@ (8010970 <tx_control+0x2864>)
 801089c:	4a64      	ldr	r2, [pc, #400]	@ (8010a30 <tx_control+0x2924>)
 801089e:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 80108a0:	f000 fd87 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 80108a4:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 80108a6:	4b46      	ldr	r3, [pc, #280]	@ (80109c0 <tx_control+0x28b4>)
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	2b3d      	cmp	r3, #61	@ 0x3d
 80108ac:	d00e      	beq.n	80108cc <tx_control+0x27c0>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		codeTX = 0;
 80108ae:	4b44      	ldr	r3, [pc, #272]	@ (80109c0 <tx_control+0x28b4>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 80108b4:	4b2d      	ldr	r3, [pc, #180]	@ (801096c <tx_control+0x2860>)
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d104      	bne.n	80108c6 <tx_control+0x27ba>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 80108bc:	4b2e      	ldr	r3, [pc, #184]	@ (8010978 <tx_control+0x286c>)
 80108be:	2200      	movs	r2, #0
 80108c0:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 80108c2:	f000 fd76 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 80108c6:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 80108c8:	f000 fd73 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 80108cc:	46c0      	nop			@ (mov r8, r8)
//		; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
//		ldw		X,#300;
//		ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
//		ldw		X,#300;
//		ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
		timeoutTWF = 300;
 80108ce:	4b25      	ldr	r3, [pc, #148]	@ (8010964 <tx_control+0x2858>)
 80108d0:	2296      	movs	r2, #150	@ 0x96
 80108d2:	0052      	lsls	r2, r2, #1
 80108d4:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 80108d6:	4b24      	ldr	r3, [pc, #144]	@ (8010968 <tx_control+0x285c>)
 80108d8:	2296      	movs	r2, #150	@ 0x96
 80108da:	0052      	lsls	r2, r2, #1
 80108dc:	801a      	strh	r2, [r3, #0]
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 80108de:	4b23      	ldr	r3, [pc, #140]	@ (801096c <tx_control+0x2860>)
 80108e0:	2203      	movs	r2, #3
 80108e2:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 80108e4:	4b22      	ldr	r3, [pc, #136]	@ (8010970 <tx_control+0x2864>)
 80108e6:	881a      	ldrh	r2, [r3, #0]
 80108e8:	4b22      	ldr	r3, [pc, #136]	@ (8010974 <tx_control+0x2868>)
 80108ea:	881b      	ldrh	r3, [r3, #0]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d314      	bcc.n	801091a <tx_control+0x280e>
//		cntReg = 0;// ldw		cntReg,X
//		// ldw		X,#eeCntRegEVENT
//		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
//		save_cntReg();// call	save_cntReg

tx_wifi_eventLogger_END:
 80108f0:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
		flagsWIFI[f_eventLoggerSend] = 0;
 80108f2:	4b21      	ldr	r3, [pc, #132]	@ (8010978 <tx_control+0x286c>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 80108f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010978 <tx_control+0x286c>)
 80108fa:	2200      	movs	r2, #0
 80108fc:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 80108fe:	4b1f      	ldr	r3, [pc, #124]	@ (801097c <tx_control+0x2870>)
 8010900:	220a      	movs	r2, #10
 8010902:	701a      	strb	r2, [r3, #0]
		blockLoggWifi = 0;//clr		blockLoggWifi
 8010904:	4b1e      	ldr	r3, [pc, #120]	@ (8010980 <tx_control+0x2874>)
 8010906:	2200      	movs	r2, #0
 8010908:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;//clr		byteLoggWifi
 801090a:	4b1e      	ldr	r3, [pc, #120]	@ (8010984 <tx_control+0x2878>)
 801090c:	2200      	movs	r2, #0
 801090e:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 8010910:	4b18      	ldr	r3, [pc, #96]	@ (8010974 <tx_control+0x2868>)
 8010912:	2200      	movs	r2, #0
 8010914:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;//jp		end_tx_wifi
 8010916:	f000 fd4c 	bl	80113b2 <tx_control+0x32a6>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 801091a:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 801091c:	4b1a      	ldr	r3, [pc, #104]	@ (8010988 <tx_control+0x287c>)
 801091e:	2240      	movs	r2, #64	@ 0x40
 8010920:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 8010922:	4b19      	ldr	r3, [pc, #100]	@ (8010988 <tx_control+0x287c>)
 8010924:	2284      	movs	r2, #132	@ 0x84
 8010926:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010928:	4b17      	ldr	r3, [pc, #92]	@ (8010988 <tx_control+0x287c>)
 801092a:	2203      	movs	r2, #3
 801092c:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 801092e:	4b17      	ldr	r3, [pc, #92]	@ (801098c <tx_control+0x2880>)
 8010930:	227b      	movs	r2, #123	@ 0x7b
 8010932:	5c9a      	ldrb	r2, [r3, r2]
 8010934:	4b14      	ldr	r3, [pc, #80]	@ (8010988 <tx_control+0x287c>)
 8010936:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010938:	4b14      	ldr	r3, [pc, #80]	@ (801098c <tx_control+0x2880>)
 801093a:	227c      	movs	r2, #124	@ 0x7c
 801093c:	5c9a      	ldrb	r2, [r3, r2]
 801093e:	4b12      	ldr	r3, [pc, #72]	@ (8010988 <tx_control+0x287c>)
 8010940:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 8010942:	4b10      	ldr	r3, [pc, #64]	@ (8010984 <tx_control+0x2878>)
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d000      	beq.n	801094c <tx_control+0x2840>
 801094a:	e07b      	b.n	8010a44 <tx_control+0x2938>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 801094c:	4b0d      	ldr	r3, [pc, #52]	@ (8010984 <tx_control+0x2878>)
 801094e:	227e      	movs	r2, #126	@ 0x7e
 8010950:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 8010952:	4b0b      	ldr	r3, [pc, #44]	@ (8010980 <tx_control+0x2874>)
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d16c      	bne.n	8010a34 <tx_control+0x2928>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 801095a:	4b09      	ldr	r3, [pc, #36]	@ (8010980 <tx_control+0x2874>)
 801095c:	22a0      	movs	r2, #160	@ 0xa0
 801095e:	701a      	strb	r2, [r3, #0]
 8010960:	e069      	b.n	8010a36 <tx_control+0x292a>
 8010962:	46c0      	nop			@ (mov r8, r8)
 8010964:	20001034 	.word	0x20001034
 8010968:	200011e4 	.word	0x200011e4
 801096c:	20001062 	.word	0x20001062
 8010970:	20001120 	.word	0x20001120
 8010974:	20001060 	.word	0x20001060
 8010978:	20001038 	.word	0x20001038
 801097c:	20001063 	.word	0x20001063
 8010980:	2000105e 	.word	0x2000105e
 8010984:	2000105f 	.word	0x2000105f
 8010988:	20001040 	.word	0x20001040
 801098c:	20000ce8 	.word	0x20000ce8
 8010990:	2000104e 	.word	0x2000104e
 8010994:	0803c000 	.word	0x0803c000
 8010998:	20000bb3 	.word	0x20000bb3
 801099c:	20000bb2 	.word	0x20000bb2
 80109a0:	20000efc 	.word	0x20000efc
 80109a4:	20000ef4 	.word	0x20000ef4
 80109a8:	20000ef8 	.word	0x20000ef8
 80109ac:	2000104f 	.word	0x2000104f
 80109b0:	20000f18 	.word	0x20000f18
 80109b4:	20000f04 	.word	0x20000f04
 80109b8:	20000f1c 	.word	0x20000f1c
 80109bc:	20000f01 	.word	0x20000f01
 80109c0:	20000f0c 	.word	0x20000f0c
 80109c4:	20000e97 	.word	0x20000e97
 80109c8:	20000e82 	.word	0x20000e82
 80109cc:	20000e96 	.word	0x20000e96
 80109d0:	20000e83 	.word	0x20000e83
 80109d4:	20000e8c 	.word	0x20000e8c
 80109d8:	20000df4 	.word	0x20000df4
 80109dc:	20000e88 	.word	0x20000e88
 80109e0:	08037000 	.word	0x08037000
 80109e4:	20000e74 	.word	0x20000e74
 80109e8:	20000e78 	.word	0x20000e78
 80109ec:	20000e7c 	.word	0x20000e7c
 80109f0:	20001124 	.word	0x20001124
 80109f4:	20001126 	.word	0x20001126
 80109f8:	20001128 	.word	0x20001128
 80109fc:	0803f812 	.word	0x0803f812
 8010a00:	20000d70 	.word	0x20000d70
 8010a04:	20000e98 	.word	0x20000e98
 8010a08:	20000e9a 	.word	0x20000e9a
 8010a0c:	200001bb 	.word	0x200001bb
 8010a10:	200001bc 	.word	0x200001bc
 8010a14:	200001bd 	.word	0x200001bd
 8010a18:	200001be 	.word	0x200001be
 8010a1c:	200001bf 	.word	0x200001bf
 8010a20:	200001c0 	.word	0x200001c0
 8010a24:	200001c1 	.word	0x200001c1
 8010a28:	200001c2 	.word	0x200001c2
 8010a2c:	20001050 	.word	0x20001050
 8010a30:	0000059f 	.word	0x0000059f
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 8010a34:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 8010a36:	4bde      	ldr	r3, [pc, #888]	@ (8010db0 <tx_control+0x2ca4>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	3b01      	subs	r3, #1
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	4bdc      	ldr	r3, [pc, #880]	@ (8010db0 <tx_control+0x2ca4>)
 8010a40:	701a      	strb	r2, [r3, #0]
 8010a42:	e000      	b.n	8010a46 <tx_control+0x293a>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 8010a44:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 8010a46:	4bdb      	ldr	r3, [pc, #876]	@ (8010db4 <tx_control+0x2ca8>)
 8010a48:	643b      	str	r3, [r7, #64]	@ 0x40
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 8010a4a:	4bdb      	ldr	r3, [pc, #876]	@ (8010db8 <tx_control+0x2cac>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	001a      	movs	r2, r3
 8010a50:	4bd7      	ldr	r3, [pc, #860]	@ (8010db0 <tx_control+0x2ca4>)
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	01db      	lsls	r3, r3, #7
 8010a56:	18d2      	adds	r2, r2, r3
 8010a58:	4bd8      	ldr	r3, [pc, #864]	@ (8010dbc <tx_control+0x2cb0>)
 8010a5a:	18d3      	adds	r3, r2, r3
 8010a5c:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 8010a5e:	4bd8      	ldr	r3, [pc, #864]	@ (8010dc0 <tx_control+0x2cb4>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 8010a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a66:	3b01      	subs	r3, #1
 8010a68:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 8010a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 8010a70:	4bd1      	ldr	r3, [pc, #836]	@ (8010db8 <tx_control+0x2cac>)
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	4bcf      	ldr	r3, [pc, #828]	@ (8010db8 <tx_control+0x2cac>)
 8010a7a:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 8010a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a7e:	2380      	movs	r3, #128	@ 0x80
 8010a80:	025b      	lsls	r3, r3, #9
 8010a82:	5cd2      	ldrb	r2, [r2, r3]
 8010a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a86:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 8010a88:	4bcd      	ldr	r3, [pc, #820]	@ (8010dc0 <tx_control+0x2cb4>)
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	4bcb      	ldr	r3, [pc, #812]	@ (8010dc0 <tx_control+0x2cb4>)
 8010a92:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 8010a94:	4bca      	ldr	r3, [pc, #808]	@ (8010dc0 <tx_control+0x2cb4>)
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b0d      	cmp	r3, #13
 8010a9a:	d800      	bhi.n	8010a9e <tx_control+0x2992>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 8010a9c:	e7e2      	b.n	8010a64 <tx_control+0x2958>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 8010a9e:	4bc9      	ldr	r3, [pc, #804]	@ (8010dc4 <tx_control+0x2cb8>)
 8010aa0:	7c9a      	ldrb	r2, [r3, #18]
 8010aa2:	4bc9      	ldr	r3, [pc, #804]	@ (8010dc8 <tx_control+0x2cbc>)
 8010aa4:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 8010aa6:	4bc7      	ldr	r3, [pc, #796]	@ (8010dc4 <tx_control+0x2cb8>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 8010aac:	4bc6      	ldr	r3, [pc, #792]	@ (8010dc8 <tx_control+0x2cbc>)
 8010aae:	781a      	ldrb	r2, [r3, #0]
 8010ab0:	4bc4      	ldr	r3, [pc, #784]	@ (8010dc4 <tx_control+0x2cb8>)
 8010ab2:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010ab4:	4bc5      	ldr	r3, [pc, #788]	@ (8010dcc <tx_control+0x2cc0>)
 8010ab6:	4ac3      	ldr	r2, [pc, #780]	@ (8010dc4 <tx_control+0x2cb8>)
 8010ab8:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010aba:	4bc5      	ldr	r3, [pc, #788]	@ (8010dd0 <tx_control+0x2cc4>)
 8010abc:	4ac1      	ldr	r2, [pc, #772]	@ (8010dc4 <tx_control+0x2cb8>)
 8010abe:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 8010ac0:	4bc4      	ldr	r3, [pc, #784]	@ (8010dd4 <tx_control+0x2cc8>)
 8010ac2:	4ac5      	ldr	r2, [pc, #788]	@ (8010dd8 <tx_control+0x2ccc>)
 8010ac4:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 8010ac6:	4bc5      	ldr	r3, [pc, #788]	@ (8010ddc <tx_control+0x2cd0>)
 8010ac8:	2214      	movs	r2, #20
 8010aca:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010acc:	4bc4      	ldr	r3, [pc, #784]	@ (8010de0 <tx_control+0x2cd4>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010ad2:	4bc4      	ldr	r3, [pc, #784]	@ (8010de4 <tx_control+0x2cd8>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010ad8:	4bc1      	ldr	r3, [pc, #772]	@ (8010de0 <tx_control+0x2cd4>)
 8010ada:	2201      	movs	r2, #1
 8010adc:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010ade:	4bc2      	ldr	r3, [pc, #776]	@ (8010de8 <tx_control+0x2cdc>)
 8010ae0:	2255      	movs	r2, #85	@ 0x55
 8010ae2:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 8010ae4:	4bc1      	ldr	r3, [pc, #772]	@ (8010dec <tx_control+0x2ce0>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 8010aea:	4bc1      	ldr	r3, [pc, #772]	@ (8010df0 <tx_control+0x2ce4>)
 8010aec:	881b      	ldrh	r3, [r3, #0]
 8010aee:	3301      	adds	r3, #1
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	4bbf      	ldr	r3, [pc, #764]	@ (8010df0 <tx_control+0x2ce4>)
 8010af4:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 8010af6:	f000 fc5c 	bl	80113b2 <tx_control+0x32a6>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 8010afa:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 8010afc:	4bbd      	ldr	r3, [pc, #756]	@ (8010df4 <tx_control+0x2ce8>)
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <tx_control+0x29fc>
 8010b04:	f000 fc4e 	bl	80113a4 <tx_control+0x3298>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 8010b08:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 8010b0a:	4bb7      	ldr	r3, [pc, #732]	@ (8010de8 <tx_control+0x2cdc>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <tx_control+0x2a0a>
 8010b12:	f000 fc4a 	bl	80113aa <tx_control+0x329e>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 8010b16:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 8010b18:	4bb7      	ldr	r3, [pc, #732]	@ (8010df8 <tx_control+0x2cec>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d147      	bne.n	8010bb0 <tx_control+0x2aa4>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 8010b20:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 8010b22:	4bb6      	ldr	r3, [pc, #728]	@ (8010dfc <tx_control+0x2cf0>)
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d100      	bne.n	8010b2c <tx_control+0x2a20>
 8010b2a:	e07f      	b.n	8010c2c <tx_control+0x2b20>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 8010b2c:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 8010b2e:	4bb4      	ldr	r3, [pc, #720]	@ (8010e00 <tx_control+0x2cf4>)
 8010b30:	2240      	movs	r2, #64	@ 0x40
 8010b32:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 8010b34:	4bb2      	ldr	r3, [pc, #712]	@ (8010e00 <tx_control+0x2cf4>)
 8010b36:	2282      	movs	r2, #130	@ 0x82
 8010b38:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = reePlantilla[eeversion1];
 8010b3a:	4bb2      	ldr	r3, [pc, #712]	@ (8010e04 <tx_control+0x2cf8>)
 8010b3c:	227b      	movs	r2, #123	@ 0x7b
 8010b3e:	5c9a      	ldrb	r2, [r3, r2]
 8010b40:	4baf      	ldr	r3, [pc, #700]	@ (8010e00 <tx_control+0x2cf4>)
 8010b42:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = reePlantilla[eeversion2];
 8010b44:	4baf      	ldr	r3, [pc, #700]	@ (8010e04 <tx_control+0x2cf8>)
 8010b46:	227c      	movs	r2, #124	@ 0x7c
 8010b48:	5c9a      	ldrb	r2, [r3, r2]
 8010b4a:	4bad      	ldr	r3, [pc, #692]	@ (8010e00 <tx_control+0x2cf4>)
 8010b4c:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 8010b4e:	4bae      	ldr	r3, [pc, #696]	@ (8010e08 <tx_control+0x2cfc>)
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	0a1b      	lsrs	r3, r3, #8
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	4ba9      	ldr	r3, [pc, #676]	@ (8010e00 <tx_control+0x2cf4>)
 8010b5a:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010b5c:	4baa      	ldr	r3, [pc, #680]	@ (8010e08 <tx_control+0x2cfc>)
 8010b5e:	881b      	ldrh	r3, [r3, #0]
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	4ba7      	ldr	r3, [pc, #668]	@ (8010e00 <tx_control+0x2cf4>)
 8010b64:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8010b66:	4ba9      	ldr	r3, [pc, #676]	@ (8010e0c <tx_control+0x2d00>)
 8010b68:	881b      	ldrh	r3, [r3, #0]
 8010b6a:	0a1b      	lsrs	r3, r3, #8
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	4ba3      	ldr	r3, [pc, #652]	@ (8010e00 <tx_control+0x2cf4>)
 8010b72:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010b74:	4ba5      	ldr	r3, [pc, #660]	@ (8010e0c <tx_control+0x2d00>)
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8010e00 <tx_control+0x2cf4>)
 8010b7c:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 8010b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8010e00 <tx_control+0x2cf4>)
 8010b80:	2201      	movs	r2, #1
 8010b82:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 8010b84:	4ba2      	ldr	r3, [pc, #648]	@ (8010e10 <tx_control+0x2d04>)
 8010b86:	781a      	ldrb	r2, [r3, #0]
 8010b88:	4b9d      	ldr	r3, [pc, #628]	@ (8010e00 <tx_control+0x2cf4>)
 8010b8a:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 8010b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8010e14 <tx_control+0x2d08>)
 8010b8e:	781a      	ldrb	r2, [r3, #0]
 8010b90:	4b9b      	ldr	r3, [pc, #620]	@ (8010e00 <tx_control+0x2cf4>)
 8010b92:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 8010b94:	4ba0      	ldr	r3, [pc, #640]	@ (8010e18 <tx_control+0x2d0c>)
 8010b96:	781a      	ldrb	r2, [r3, #0]
 8010b98:	4b99      	ldr	r3, [pc, #612]	@ (8010e00 <tx_control+0x2cf4>)
 8010b9a:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 8010b9c:	4b96      	ldr	r3, [pc, #600]	@ (8010df8 <tx_control+0x2cec>)
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 8010ba2:	4b9e      	ldr	r3, [pc, #632]	@ (8010e1c <tx_control+0x2d10>)
 8010ba4:	2250      	movs	r2, #80	@ 0x50
 8010ba6:	5c9b      	ldrb	r3, [r3, r2]
 8010ba8:	001a      	movs	r2, r3
 8010baa:	4b9d      	ldr	r3, [pc, #628]	@ (8010e20 <tx_control+0x2d14>)
 8010bac:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 8010bae:	e040      	b.n	8010c32 <tx_control+0x2b26>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8010bb0:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 8010bb2:	4b92      	ldr	r3, [pc, #584]	@ (8010dfc <tx_control+0x2cf0>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d13a      	bne.n	8010c30 <tx_control+0x2b24>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 8010bba:	4b99      	ldr	r3, [pc, #612]	@ (8010e20 <tx_control+0x2d14>)
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d003      	beq.n	8010bca <tx_control+0x2abe>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8010df8 <tx_control+0x2cec>)
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 8010bc8:	e033      	b.n	8010c32 <tx_control+0x2b26>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 8010bca:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 8010bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8010e08 <tx_control+0x2cfc>)
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	0a1b      	lsrs	r3, r3, #8
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8010e00 <tx_control+0x2cf4>)
 8010bd8:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 8010bda:	4b8b      	ldr	r3, [pc, #556]	@ (8010e08 <tx_control+0x2cfc>)
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	b2da      	uxtb	r2, r3
 8010be0:	4b87      	ldr	r3, [pc, #540]	@ (8010e00 <tx_control+0x2cf4>)
 8010be2:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 8010be4:	4b89      	ldr	r3, [pc, #548]	@ (8010e0c <tx_control+0x2d00>)
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	0a1b      	lsrs	r3, r3, #8
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	4b84      	ldr	r3, [pc, #528]	@ (8010e00 <tx_control+0x2cf4>)
 8010bf0:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8010bf2:	4b86      	ldr	r3, [pc, #536]	@ (8010e0c <tx_control+0x2d00>)
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	4b81      	ldr	r3, [pc, #516]	@ (8010e00 <tx_control+0x2cf4>)
 8010bfa:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8010bfc:	4b89      	ldr	r3, [pc, #548]	@ (8010e24 <tx_control+0x2d18>)
 8010bfe:	781a      	ldrb	r2, [r3, #0]
 8010c00:	4b7f      	ldr	r3, [pc, #508]	@ (8010e00 <tx_control+0x2cf4>)
 8010c02:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 8010c04:	4b88      	ldr	r3, [pc, #544]	@ (8010e28 <tx_control+0x2d1c>)
 8010c06:	781a      	ldrb	r2, [r3, #0]
 8010c08:	4b7d      	ldr	r3, [pc, #500]	@ (8010e00 <tx_control+0x2cf4>)
 8010c0a:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010c0c:	4b7a      	ldr	r3, [pc, #488]	@ (8010df8 <tx_control+0x2cec>)
 8010c0e:	2200      	movs	r2, #0
 8010c10:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 8010c12:	4b6e      	ldr	r3, [pc, #440]	@ (8010dcc <tx_control+0x2cc0>)
 8010c14:	4a85      	ldr	r2, [pc, #532]	@ (8010e2c <tx_control+0x2d20>)
 8010c16:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 8010c18:	4b6d      	ldr	r3, [pc, #436]	@ (8010dd0 <tx_control+0x2cc4>)
 8010c1a:	4a84      	ldr	r2, [pc, #528]	@ (8010e2c <tx_control+0x2d20>)
 8010c1c:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 8010c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8010dd4 <tx_control+0x2cc8>)
 8010c20:	4a83      	ldr	r2, [pc, #524]	@ (8010e30 <tx_control+0x2d24>)
 8010c22:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 8010c24:	4b6d      	ldr	r3, [pc, #436]	@ (8010ddc <tx_control+0x2cd0>)
 8010c26:	2212      	movs	r2, #18
 8010c28:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010c2a:	e1b9      	b.n	8010fa0 <tx_control+0x2e94>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 8010c2c:	46c0      	nop			@ (mov r8, r8)
 8010c2e:	e000      	b.n	8010c32 <tx_control+0x2b26>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 8010c30:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 8010c32:	4b71      	ldr	r3, [pc, #452]	@ (8010df8 <tx_control+0x2cec>)
 8010c34:	785b      	ldrb	r3, [r3, #1]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d140      	bne.n	8010cbc <tx_control+0x2bb0>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 8010c3a:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 8010c3c:	4b7d      	ldr	r3, [pc, #500]	@ (8010e34 <tx_control+0x2d28>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d071      	beq.n	8010d28 <tx_control+0x2c1c>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 8010c44:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 8010c46:	4b7c      	ldr	r3, [pc, #496]	@ (8010e38 <tx_control+0x2d2c>)
 8010c48:	2240      	movs	r2, #64	@ 0x40
 8010c4a:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 8010c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8010e38 <tx_control+0x2d2c>)
 8010c4e:	2282      	movs	r2, #130	@ 0x82
 8010c50:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = reePlantilla[eeversion1];
 8010c52:	4b6c      	ldr	r3, [pc, #432]	@ (8010e04 <tx_control+0x2cf8>)
 8010c54:	227b      	movs	r2, #123	@ 0x7b
 8010c56:	5c9a      	ldrb	r2, [r3, r2]
 8010c58:	4b77      	ldr	r3, [pc, #476]	@ (8010e38 <tx_control+0x2d2c>)
 8010c5a:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = reePlantilla[eeversion2];
 8010c5c:	4b69      	ldr	r3, [pc, #420]	@ (8010e04 <tx_control+0x2cf8>)
 8010c5e:	227c      	movs	r2, #124	@ 0x7c
 8010c60:	5c9a      	ldrb	r2, [r3, r2]
 8010c62:	4b75      	ldr	r3, [pc, #468]	@ (8010e38 <tx_control+0x2d2c>)
 8010c64:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010c66:	4b68      	ldr	r3, [pc, #416]	@ (8010e08 <tx_control+0x2cfc>)
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	0a1b      	lsrs	r3, r3, #8
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	4b71      	ldr	r3, [pc, #452]	@ (8010e38 <tx_control+0x2d2c>)
 8010c72:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010c74:	4b64      	ldr	r3, [pc, #400]	@ (8010e08 <tx_control+0x2cfc>)
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8010e38 <tx_control+0x2d2c>)
 8010c7c:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 8010c7e:	4b63      	ldr	r3, [pc, #396]	@ (8010e0c <tx_control+0x2d00>)
 8010c80:	881b      	ldrh	r3, [r3, #0]
 8010c82:	0a1b      	lsrs	r3, r3, #8
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	b2da      	uxtb	r2, r3
 8010c88:	4b6b      	ldr	r3, [pc, #428]	@ (8010e38 <tx_control+0x2d2c>)
 8010c8a:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010c8c:	4b5f      	ldr	r3, [pc, #380]	@ (8010e0c <tx_control+0x2d00>)
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	4b69      	ldr	r3, [pc, #420]	@ (8010e38 <tx_control+0x2d2c>)
 8010c94:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 8010c96:	4b68      	ldr	r3, [pc, #416]	@ (8010e38 <tx_control+0x2d2c>)
 8010c98:	2202      	movs	r2, #2
 8010c9a:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8010c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e10 <tx_control+0x2d04>)
 8010c9e:	781a      	ldrb	r2, [r3, #0]
 8010ca0:	4b65      	ldr	r3, [pc, #404]	@ (8010e38 <tx_control+0x2d2c>)
 8010ca2:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 8010ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8010e14 <tx_control+0x2d08>)
 8010ca6:	781a      	ldrb	r2, [r3, #0]
 8010ca8:	4b63      	ldr	r3, [pc, #396]	@ (8010e38 <tx_control+0x2d2c>)
 8010caa:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 8010cac:	4b5a      	ldr	r3, [pc, #360]	@ (8010e18 <tx_control+0x2d0c>)
 8010cae:	781a      	ldrb	r2, [r3, #0]
 8010cb0:	4b61      	ldr	r3, [pc, #388]	@ (8010e38 <tx_control+0x2d2c>)
 8010cb2:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 8010cb4:	4b50      	ldr	r3, [pc, #320]	@ (8010df8 <tx_control+0x2cec>)
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 8010cba:	e038      	b.n	8010d2e <tx_control+0x2c22>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8010cbc:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 8010cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8010e34 <tx_control+0x2d28>)
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d132      	bne.n	8010d2c <tx_control+0x2c20>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 8010cc6:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8010e08 <tx_control+0x2cfc>)
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	0a1b      	lsrs	r3, r3, #8
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	b2da      	uxtb	r2, r3
 8010cd2:	4b59      	ldr	r3, [pc, #356]	@ (8010e38 <tx_control+0x2d2c>)
 8010cd4:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8010e08 <tx_control+0x2cfc>)
 8010cd8:	881b      	ldrh	r3, [r3, #0]
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	4b56      	ldr	r3, [pc, #344]	@ (8010e38 <tx_control+0x2d2c>)
 8010cde:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8010e0c <tx_control+0x2d00>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	0a1b      	lsrs	r3, r3, #8
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	4b53      	ldr	r3, [pc, #332]	@ (8010e38 <tx_control+0x2d2c>)
 8010cec:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010cee:	4b47      	ldr	r3, [pc, #284]	@ (8010e0c <tx_control+0x2d00>)
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	4b50      	ldr	r3, [pc, #320]	@ (8010e38 <tx_control+0x2d2c>)
 8010cf6:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 8010cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8010e24 <tx_control+0x2d18>)
 8010cfa:	781a      	ldrb	r2, [r3, #0]
 8010cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8010e38 <tx_control+0x2d2c>)
 8010cfe:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 8010d00:	4b49      	ldr	r3, [pc, #292]	@ (8010e28 <tx_control+0x2d1c>)
 8010d02:	781a      	ldrb	r2, [r3, #0]
 8010d04:	4b4c      	ldr	r3, [pc, #304]	@ (8010e38 <tx_control+0x2d2c>)
 8010d06:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 8010d08:	4b3b      	ldr	r3, [pc, #236]	@ (8010df8 <tx_control+0x2cec>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 8010d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8010dcc <tx_control+0x2cc0>)
 8010d10:	4a49      	ldr	r2, [pc, #292]	@ (8010e38 <tx_control+0x2d2c>)
 8010d12:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 8010d14:	4b2e      	ldr	r3, [pc, #184]	@ (8010dd0 <tx_control+0x2cc4>)
 8010d16:	4a48      	ldr	r2, [pc, #288]	@ (8010e38 <tx_control+0x2d2c>)
 8010d18:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 8010d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8010dd4 <tx_control+0x2cc8>)
 8010d1c:	4a47      	ldr	r2, [pc, #284]	@ (8010e3c <tx_control+0x2d30>)
 8010d1e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010d20:	4b2e      	ldr	r3, [pc, #184]	@ (8010ddc <tx_control+0x2cd0>)
 8010d22:	2212      	movs	r2, #18
 8010d24:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 8010d26:	e13b      	b.n	8010fa0 <tx_control+0x2e94>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 8010d28:	46c0      	nop			@ (mov r8, r8)
 8010d2a:	e000      	b.n	8010d2e <tx_control+0x2c22>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 8010d2c:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 8010d2e:	4b32      	ldr	r3, [pc, #200]	@ (8010df8 <tx_control+0x2cec>)
 8010d30:	789b      	ldrb	r3, [r3, #2]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d000      	beq.n	8010d38 <tx_control+0x2c2c>
 8010d36:	e087      	b.n	8010e48 <tx_control+0x2d3c>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 8010d38:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 8010d3a:	4b41      	ldr	r3, [pc, #260]	@ (8010e40 <tx_control+0x2d34>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d000      	beq.n	8010d44 <tx_control+0x2c38>
 8010d42:	e0b7      	b.n	8010eb4 <tx_control+0x2da8>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = reePlantilla[eeversion1];
 8010d44:	4b2f      	ldr	r3, [pc, #188]	@ (8010e04 <tx_control+0x2cf8>)
 8010d46:	227b      	movs	r2, #123	@ 0x7b
 8010d48:	5c9a      	ldrb	r2, [r3, r2]
 8010d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8010e44 <tx_control+0x2d38>)
 8010d4c:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = reePlantilla[eeversion2];
 8010d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8010e04 <tx_control+0x2cf8>)
 8010d50:	227c      	movs	r2, #124	@ 0x7c
 8010d52:	5c9a      	ldrb	r2, [r3, r2]
 8010d54:	4b3b      	ldr	r3, [pc, #236]	@ (8010e44 <tx_control+0x2d38>)
 8010d56:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010d58:	4b2b      	ldr	r3, [pc, #172]	@ (8010e08 <tx_control+0x2cfc>)
 8010d5a:	881b      	ldrh	r3, [r3, #0]
 8010d5c:	0a1b      	lsrs	r3, r3, #8
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	4b38      	ldr	r3, [pc, #224]	@ (8010e44 <tx_control+0x2d38>)
 8010d64:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010d66:	4b28      	ldr	r3, [pc, #160]	@ (8010e08 <tx_control+0x2cfc>)
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	b2da      	uxtb	r2, r3
 8010d6c:	4b35      	ldr	r3, [pc, #212]	@ (8010e44 <tx_control+0x2d38>)
 8010d6e:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010d70:	4b26      	ldr	r3, [pc, #152]	@ (8010e0c <tx_control+0x2d00>)
 8010d72:	881b      	ldrh	r3, [r3, #0]
 8010d74:	0a1b      	lsrs	r3, r3, #8
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	b2da      	uxtb	r2, r3
 8010d7a:	4b32      	ldr	r3, [pc, #200]	@ (8010e44 <tx_control+0x2d38>)
 8010d7c:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010d7e:	4b23      	ldr	r3, [pc, #140]	@ (8010e0c <tx_control+0x2d00>)
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	4b2f      	ldr	r3, [pc, #188]	@ (8010e44 <tx_control+0x2d38>)
 8010d86:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 8010d88:	4b2e      	ldr	r3, [pc, #184]	@ (8010e44 <tx_control+0x2d38>)
 8010d8a:	2203      	movs	r2, #3
 8010d8c:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 8010d8e:	4b20      	ldr	r3, [pc, #128]	@ (8010e10 <tx_control+0x2d04>)
 8010d90:	781a      	ldrb	r2, [r3, #0]
 8010d92:	4b2c      	ldr	r3, [pc, #176]	@ (8010e44 <tx_control+0x2d38>)
 8010d94:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 8010d96:	4b1f      	ldr	r3, [pc, #124]	@ (8010e14 <tx_control+0x2d08>)
 8010d98:	781a      	ldrb	r2, [r3, #0]
 8010d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8010e44 <tx_control+0x2d38>)
 8010d9c:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 8010d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8010e18 <tx_control+0x2d0c>)
 8010da0:	781a      	ldrb	r2, [r3, #0]
 8010da2:	4b28      	ldr	r3, [pc, #160]	@ (8010e44 <tx_control+0x2d38>)
 8010da4:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 8010da6:	4b14      	ldr	r3, [pc, #80]	@ (8010df8 <tx_control+0x2cec>)
 8010da8:	2201      	movs	r2, #1
 8010daa:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 8010dac:	e085      	b.n	8010eba <tx_control+0x2dae>
 8010dae:	46c0      	nop			@ (mov r8, r8)
 8010db0:	2000105e 	.word	0x2000105e
 8010db4:	20001053 	.word	0x20001053
 8010db8:	2000105f 	.word	0x2000105f
 8010dbc:	08037000 	.word	0x08037000
 8010dc0:	20000bb3 	.word	0x20000bb3
 8010dc4:	20001040 	.word	0x20001040
 8010dc8:	20000bb2 	.word	0x20000bb2
 8010dcc:	20000efc 	.word	0x20000efc
 8010dd0:	20000ef4 	.word	0x20000ef4
 8010dd4:	20000ef8 	.word	0x20000ef8
 8010dd8:	20001054 	.word	0x20001054
 8010ddc:	20000f18 	.word	0x20000f18
 8010de0:	20000f04 	.word	0x20000f04
 8010de4:	20000f1c 	.word	0x20000f1c
 8010de8:	20000f01 	.word	0x20000f01
 8010dec:	20000f0c 	.word	0x20000f0c
 8010df0:	20001060 	.word	0x20001060
 8010df4:	20001063 	.word	0x20001063
 8010df8:	20001024 	.word	0x20001024
 8010dfc:	20000c98 	.word	0x20000c98
 8010e00:	20000fd4 	.word	0x20000fd4
 8010e04:	20000ce8 	.word	0x20000ce8
 8010e08:	20000e98 	.word	0x20000e98
 8010e0c:	20000e9a 	.word	0x20000e9a
 8010e10:	20000c0c 	.word	0x20000c0c
 8010e14:	20000c0d 	.word	0x20000c0d
 8010e18:	20000c2a 	.word	0x20000c2a
 8010e1c:	200000b8 	.word	0x200000b8
 8010e20:	20000fc0 	.word	0x20000fc0
 8010e24:	20000c0e 	.word	0x20000c0e
 8010e28:	20000c0f 	.word	0x20000c0f
 8010e2c:	20001010 	.word	0x20001010
 8010e30:	20001021 	.word	0x20001021
 8010e34:	20000c00 	.word	0x20000c00
 8010e38:	20000fe8 	.word	0x20000fe8
 8010e3c:	20000ff9 	.word	0x20000ff9
 8010e40:	20000bf4 	.word	0x20000bf4
 8010e44:	20000ffc 	.word	0x20000ffc
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8010e48:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 8010e4a:	4bc3      	ldr	r3, [pc, #780]	@ (8011158 <tx_control+0x304c>)
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b03      	cmp	r3, #3
 8010e50:	d032      	beq.n	8010eb8 <tx_control+0x2dac>
			goto power_event_WF;
		}
desh_event_end_WF:
 8010e52:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010e54:	4bc1      	ldr	r3, [pc, #772]	@ (801115c <tx_control+0x3050>)
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	0a1b      	lsrs	r3, r3, #8
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	b2da      	uxtb	r2, r3
 8010e5e:	4bc0      	ldr	r3, [pc, #768]	@ (8011160 <tx_control+0x3054>)
 8010e60:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010e62:	4bbe      	ldr	r3, [pc, #760]	@ (801115c <tx_control+0x3050>)
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	b2da      	uxtb	r2, r3
 8010e68:	4bbd      	ldr	r3, [pc, #756]	@ (8011160 <tx_control+0x3054>)
 8010e6a:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010e6c:	4bbd      	ldr	r3, [pc, #756]	@ (8011164 <tx_control+0x3058>)
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	0a1b      	lsrs	r3, r3, #8
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	4bba      	ldr	r3, [pc, #744]	@ (8011160 <tx_control+0x3054>)
 8010e78:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010e7a:	4bba      	ldr	r3, [pc, #744]	@ (8011164 <tx_control+0x3058>)
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	4bb7      	ldr	r3, [pc, #732]	@ (8011160 <tx_control+0x3054>)
 8010e82:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 8010e84:	4bb8      	ldr	r3, [pc, #736]	@ (8011168 <tx_control+0x305c>)
 8010e86:	781a      	ldrb	r2, [r3, #0]
 8010e88:	4bb5      	ldr	r3, [pc, #724]	@ (8011160 <tx_control+0x3054>)
 8010e8a:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 8010e8c:	4bb7      	ldr	r3, [pc, #732]	@ (801116c <tx_control+0x3060>)
 8010e8e:	781a      	ldrb	r2, [r3, #0]
 8010e90:	4bb3      	ldr	r3, [pc, #716]	@ (8011160 <tx_control+0x3054>)
 8010e92:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 8010e94:	4bb6      	ldr	r3, [pc, #728]	@ (8011170 <tx_control+0x3064>)
 8010e96:	2200      	movs	r2, #0
 8010e98:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 8010e9a:	4bb6      	ldr	r3, [pc, #728]	@ (8011174 <tx_control+0x3068>)
 8010e9c:	4ab0      	ldr	r2, [pc, #704]	@ (8011160 <tx_control+0x3054>)
 8010e9e:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 8010ea0:	4bb5      	ldr	r3, [pc, #724]	@ (8011178 <tx_control+0x306c>)
 8010ea2:	4aaf      	ldr	r2, [pc, #700]	@ (8011160 <tx_control+0x3054>)
 8010ea4:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 8010ea6:	4bb5      	ldr	r3, [pc, #724]	@ (801117c <tx_control+0x3070>)
 8010ea8:	4ab5      	ldr	r2, [pc, #724]	@ (8011180 <tx_control+0x3074>)
 8010eaa:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010eac:	4bb5      	ldr	r3, [pc, #724]	@ (8011184 <tx_control+0x3078>)
 8010eae:	2212      	movs	r2, #18
 8010eb0:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010eb2:	e075      	b.n	8010fa0 <tx_control+0x2e94>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 8010eb4:	46c0      	nop			@ (mov r8, r8)
 8010eb6:	e000      	b.n	8010eba <tx_control+0x2dae>
			goto power_event_WF;
 8010eb8:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 8010eba:	4bad      	ldr	r3, [pc, #692]	@ (8011170 <tx_control+0x3064>)
 8010ebc:	78db      	ldrb	r3, [r3, #3]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d067      	beq.n	8010f92 <tx_control+0x2e86>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 8010ec2:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 8010ec4:	4bb0      	ldr	r3, [pc, #704]	@ (8011188 <tx_control+0x307c>)
 8010ec6:	2240      	movs	r2, #64	@ 0x40
 8010ec8:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 8010eca:	4baf      	ldr	r3, [pc, #700]	@ (8011188 <tx_control+0x307c>)
 8010ecc:	2282      	movs	r2, #130	@ 0x82
 8010ece:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = reePlantilla[eeversion1];
 8010ed0:	4bae      	ldr	r3, [pc, #696]	@ (801118c <tx_control+0x3080>)
 8010ed2:	227b      	movs	r2, #123	@ 0x7b
 8010ed4:	5c9a      	ldrb	r2, [r3, r2]
 8010ed6:	4bac      	ldr	r3, [pc, #688]	@ (8011188 <tx_control+0x307c>)
 8010ed8:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = reePlantilla[eeversion2];
 8010eda:	4bac      	ldr	r3, [pc, #688]	@ (801118c <tx_control+0x3080>)
 8010edc:	227c      	movs	r2, #124	@ 0x7c
 8010ede:	5c9a      	ldrb	r2, [r3, r2]
 8010ee0:	4ba9      	ldr	r3, [pc, #676]	@ (8011188 <tx_control+0x307c>)
 8010ee2:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010ee4:	4b9d      	ldr	r3, [pc, #628]	@ (801115c <tx_control+0x3050>)
 8010ee6:	881b      	ldrh	r3, [r3, #0]
 8010ee8:	0a1b      	lsrs	r3, r3, #8
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	b2da      	uxtb	r2, r3
 8010eee:	4ba6      	ldr	r3, [pc, #664]	@ (8011188 <tx_control+0x307c>)
 8010ef0:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010ef2:	4b9a      	ldr	r3, [pc, #616]	@ (801115c <tx_control+0x3050>)
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	4ba3      	ldr	r3, [pc, #652]	@ (8011188 <tx_control+0x307c>)
 8010efa:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010efc:	4b99      	ldr	r3, [pc, #612]	@ (8011164 <tx_control+0x3058>)
 8010efe:	881b      	ldrh	r3, [r3, #0]
 8010f00:	0a1b      	lsrs	r3, r3, #8
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	4ba0      	ldr	r3, [pc, #640]	@ (8011188 <tx_control+0x307c>)
 8010f08:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010f0a:	4b96      	ldr	r3, [pc, #600]	@ (8011164 <tx_control+0x3058>)
 8010f0c:	881b      	ldrh	r3, [r3, #0]
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	4b9d      	ldr	r3, [pc, #628]	@ (8011188 <tx_control+0x307c>)
 8010f12:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 8010f14:	4b9c      	ldr	r3, [pc, #624]	@ (8011188 <tx_control+0x307c>)
 8010f16:	2204      	movs	r2, #4
 8010f18:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 8010f1a:	4b9d      	ldr	r3, [pc, #628]	@ (8011190 <tx_control+0x3084>)
 8010f1c:	781a      	ldrb	r2, [r3, #0]
 8010f1e:	4b9a      	ldr	r3, [pc, #616]	@ (8011188 <tx_control+0x307c>)
 8010f20:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 8010f22:	4b9c      	ldr	r3, [pc, #624]	@ (8011194 <tx_control+0x3088>)
 8010f24:	781a      	ldrb	r2, [r3, #0]
 8010f26:	4b98      	ldr	r3, [pc, #608]	@ (8011188 <tx_control+0x307c>)
 8010f28:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 8010f2a:	4b9b      	ldr	r3, [pc, #620]	@ (8011198 <tx_control+0x308c>)
 8010f2c:	781a      	ldrb	r2, [r3, #0]
 8010f2e:	4b96      	ldr	r3, [pc, #600]	@ (8011188 <tx_control+0x307c>)
 8010f30:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010f32:	4b8a      	ldr	r3, [pc, #552]	@ (801115c <tx_control+0x3050>)
 8010f34:	881b      	ldrh	r3, [r3, #0]
 8010f36:	0a1b      	lsrs	r3, r3, #8
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	4b92      	ldr	r3, [pc, #584]	@ (8011188 <tx_control+0x307c>)
 8010f3e:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010f40:	4b86      	ldr	r3, [pc, #536]	@ (801115c <tx_control+0x3050>)
 8010f42:	881b      	ldrh	r3, [r3, #0]
 8010f44:	b2da      	uxtb	r2, r3
 8010f46:	4b90      	ldr	r3, [pc, #576]	@ (8011188 <tx_control+0x307c>)
 8010f48:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010f4a:	4b86      	ldr	r3, [pc, #536]	@ (8011164 <tx_control+0x3058>)
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	0a1b      	lsrs	r3, r3, #8
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	4b8c      	ldr	r3, [pc, #560]	@ (8011188 <tx_control+0x307c>)
 8010f56:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010f58:	4b82      	ldr	r3, [pc, #520]	@ (8011164 <tx_control+0x3058>)
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	4b8a      	ldr	r3, [pc, #552]	@ (8011188 <tx_control+0x307c>)
 8010f60:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 8010f62:	4b81      	ldr	r3, [pc, #516]	@ (8011168 <tx_control+0x305c>)
 8010f64:	781a      	ldrb	r2, [r3, #0]
 8010f66:	4b88      	ldr	r3, [pc, #544]	@ (8011188 <tx_control+0x307c>)
 8010f68:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 8010f6a:	4b80      	ldr	r3, [pc, #512]	@ (801116c <tx_control+0x3060>)
 8010f6c:	781a      	ldrb	r2, [r3, #0]
 8010f6e:	4b86      	ldr	r3, [pc, #536]	@ (8011188 <tx_control+0x307c>)
 8010f70:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 8010f72:	4b7f      	ldr	r3, [pc, #508]	@ (8011170 <tx_control+0x3064>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 8010f78:	4b7e      	ldr	r3, [pc, #504]	@ (8011174 <tx_control+0x3068>)
 8010f7a:	4a83      	ldr	r2, [pc, #524]	@ (8011188 <tx_control+0x307c>)
 8010f7c:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 8010f7e:	4b7e      	ldr	r3, [pc, #504]	@ (8011178 <tx_control+0x306c>)
 8010f80:	4a81      	ldr	r2, [pc, #516]	@ (8011188 <tx_control+0x307c>)
 8010f82:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 8010f84:	4b7d      	ldr	r3, [pc, #500]	@ (801117c <tx_control+0x3070>)
 8010f86:	4a85      	ldr	r2, [pc, #532]	@ (801119c <tx_control+0x3090>)
 8010f88:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8011184 <tx_control+0x3078>)
 8010f8c:	2212      	movs	r2, #18
 8010f8e:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010f90:	e006      	b.n	8010fa0 <tx_control+0x2e94>
		goto alarm_event_WF;// jra		alarm_event_WF
 8010f92:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 8010f94:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 8010f96:	4b82      	ldr	r3, [pc, #520]	@ (80111a0 <tx_control+0x3094>)
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d045      	beq.n	801102a <tx_control+0x2f1e>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 8010f9e:	e208      	b.n	80113b2 <tx_control+0x32a6>
		bufferWifiTx[0] = 0x40;
 8010fa0:	4b80      	ldr	r3, [pc, #512]	@ (80111a4 <tx_control+0x3098>)
 8010fa2:	2240      	movs	r2, #64	@ 0x40
 8010fa4:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 8010fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80111a4 <tx_control+0x3098>)
 8010fa8:	2282      	movs	r2, #130	@ 0x82
 8010faa:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010fac:	4b7d      	ldr	r3, [pc, #500]	@ (80111a4 <tx_control+0x3098>)
 8010fae:	2203      	movs	r2, #3
 8010fb0:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 8010fb2:	4b76      	ldr	r3, [pc, #472]	@ (801118c <tx_control+0x3080>)
 8010fb4:	227b      	movs	r2, #123	@ 0x7b
 8010fb6:	5c9a      	ldrb	r2, [r3, r2]
 8010fb8:	4b7a      	ldr	r3, [pc, #488]	@ (80111a4 <tx_control+0x3098>)
 8010fba:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010fbc:	4b73      	ldr	r3, [pc, #460]	@ (801118c <tx_control+0x3080>)
 8010fbe:	227c      	movs	r2, #124	@ 0x7c
 8010fc0:	5c9a      	ldrb	r2, [r3, r2]
 8010fc2:	4b78      	ldr	r3, [pc, #480]	@ (80111a4 <tx_control+0x3098>)
 8010fc4:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 8010fc6:	4b78      	ldr	r3, [pc, #480]	@ (80111a8 <tx_control+0x309c>)
 8010fc8:	220e      	movs	r2, #14
 8010fca:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 8010fcc:	4b69      	ldr	r3, [pc, #420]	@ (8011174 <tx_control+0x3068>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3304      	adds	r3, #4
 8010fd2:	4a76      	ldr	r2, [pc, #472]	@ (80111ac <tx_control+0x30a0>)
 8010fd4:	0011      	movs	r1, r2
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	f7f6 f9a4 	bl	8007324 <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 8010fdc:	4b71      	ldr	r3, [pc, #452]	@ (80111a4 <tx_control+0x3098>)
 8010fde:	7c9a      	ldrb	r2, [r3, #18]
 8010fe0:	4b73      	ldr	r3, [pc, #460]	@ (80111b0 <tx_control+0x30a4>)
 8010fe2:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 8010fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80111a4 <tx_control+0x3098>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 8010fea:	4b71      	ldr	r3, [pc, #452]	@ (80111b0 <tx_control+0x30a4>)
 8010fec:	781a      	ldrb	r2, [r3, #0]
 8010fee:	4b6d      	ldr	r3, [pc, #436]	@ (80111a4 <tx_control+0x3098>)
 8010ff0:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 8010ff2:	4b60      	ldr	r3, [pc, #384]	@ (8011174 <tx_control+0x3068>)
 8010ff4:	4a6b      	ldr	r2, [pc, #428]	@ (80111a4 <tx_control+0x3098>)
 8010ff6:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 8010ff8:	4b5f      	ldr	r3, [pc, #380]	@ (8011178 <tx_control+0x306c>)
 8010ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80111a4 <tx_control+0x3098>)
 8010ffc:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 8010ffe:	4b5f      	ldr	r3, [pc, #380]	@ (801117c <tx_control+0x3070>)
 8011000:	4a6c      	ldr	r2, [pc, #432]	@ (80111b4 <tx_control+0x30a8>)
 8011002:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 8011004:	4b5f      	ldr	r3, [pc, #380]	@ (8011184 <tx_control+0x3078>)
 8011006:	2214      	movs	r2, #20
 8011008:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 801100a:	4b6b      	ldr	r3, [pc, #428]	@ (80111b8 <tx_control+0x30ac>)
 801100c:	2200      	movs	r2, #0
 801100e:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 8011010:	4b6a      	ldr	r3, [pc, #424]	@ (80111bc <tx_control+0x30b0>)
 8011012:	2200      	movs	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8011016:	4b68      	ldr	r3, [pc, #416]	@ (80111b8 <tx_control+0x30ac>)
 8011018:	2201      	movs	r2, #1
 801101a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 801101c:	4b60      	ldr	r3, [pc, #384]	@ (80111a0 <tx_control+0x3094>)
 801101e:	2255      	movs	r2, #85	@ 0x55
 8011020:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 8011022:	4b67      	ldr	r3, [pc, #412]	@ (80111c0 <tx_control+0x30b4>)
 8011024:	2200      	movs	r2, #0
 8011026:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 8011028:	e1c3      	b.n	80113b2 <tx_control+0x32a6>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 801102a:	4b66      	ldr	r3, [pc, #408]	@ (80111c4 <tx_control+0x30b8>)
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d000      	beq.n	8011034 <tx_control+0x2f28>
 8011032:	e1bd      	b.n	80113b0 <tx_control+0x32a4>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 8011034:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 8011036:	4b64      	ldr	r3, [pc, #400]	@ (80111c8 <tx_control+0x30bc>)
 8011038:	2251      	movs	r2, #81	@ 0x51
 801103a:	5c9a      	ldrb	r2, [r3, r2]
 801103c:	4b5a      	ldr	r3, [pc, #360]	@ (80111a8 <tx_control+0x309c>)
 801103e:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 8011040:	4b59      	ldr	r3, [pc, #356]	@ (80111a8 <tx_control+0x309c>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	001a      	movs	r2, r3
 8011046:	233c      	movs	r3, #60	@ 0x3c
 8011048:	4353      	muls	r3, r2
 801104a:	b29a      	uxth	r2, r3
 801104c:	4b5d      	ldr	r3, [pc, #372]	@ (80111c4 <tx_control+0x30b8>)
 801104e:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 8011050:	4b5e      	ldr	r3, [pc, #376]	@ (80111cc <tx_control+0x30c0>)
 8011052:	781a      	ldrb	r2, [r3, #0]
 8011054:	4b5e      	ldr	r3, [pc, #376]	@ (80111d0 <tx_control+0x30c4>)
 8011056:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 8011058:	4b5c      	ldr	r3, [pc, #368]	@ (80111cc <tx_control+0x30c0>)
 801105a:	785a      	ldrb	r2, [r3, #1]
 801105c:	4b5c      	ldr	r3, [pc, #368]	@ (80111d0 <tx_control+0x30c4>)
 801105e:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 8011060:	4b5b      	ldr	r3, [pc, #364]	@ (80111d0 <tx_control+0x30c4>)
 8011062:	2200      	movs	r2, #0
 8011064:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 8011066:	4b5a      	ldr	r3, [pc, #360]	@ (80111d0 <tx_control+0x30c4>)
 8011068:	2200      	movs	r2, #0
 801106a:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 801106c:	4b58      	ldr	r3, [pc, #352]	@ (80111d0 <tx_control+0x30c4>)
 801106e:	2200      	movs	r2, #0
 8011070:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 8011072:	4b57      	ldr	r3, [pc, #348]	@ (80111d0 <tx_control+0x30c4>)
 8011074:	2200      	movs	r2, #0
 8011076:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 8011078:	4b55      	ldr	r3, [pc, #340]	@ (80111d0 <tx_control+0x30c4>)
 801107a:	2200      	movs	r2, #0
 801107c:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 801107e:	4b54      	ldr	r3, [pc, #336]	@ (80111d0 <tx_control+0x30c4>)
 8011080:	2200      	movs	r2, #0
 8011082:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 8011084:	4b53      	ldr	r3, [pc, #332]	@ (80111d4 <tx_control+0x30c8>)
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	2201      	movs	r2, #1
 801108a:	4053      	eors	r3, r2
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d103      	bne.n	801109a <tx_control+0x2f8e>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 8011092:	4b4f      	ldr	r3, [pc, #316]	@ (80111d0 <tx_control+0x30c4>)
 8011094:	2201      	movs	r2, #1
 8011096:	709a      	strb	r2, [r3, #2]
 8011098:	e000      	b.n	801109c <tx_control+0x2f90>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 801109a:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 801109c:	4b4d      	ldr	r3, [pc, #308]	@ (80111d4 <tx_control+0x30c8>)
 801109e:	785b      	ldrb	r3, [r3, #1]
 80110a0:	2201      	movs	r2, #1
 80110a2:	4053      	eors	r3, r2
 80110a4:	b2db      	uxtb	r3, r3
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d103      	bne.n	80110b2 <tx_control+0x2fa6>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 80110aa:	4b49      	ldr	r3, [pc, #292]	@ (80111d0 <tx_control+0x30c4>)
 80110ac:	2201      	movs	r2, #1
 80110ae:	70da      	strb	r2, [r3, #3]
 80110b0:	e000      	b.n	80110b4 <tx_control+0x2fa8>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 80110b2:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 80110b4:	4b47      	ldr	r3, [pc, #284]	@ (80111d4 <tx_control+0x30c8>)
 80110b6:	789b      	ldrb	r3, [r3, #2]
 80110b8:	2201      	movs	r2, #1
 80110ba:	4053      	eors	r3, r2
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d103      	bne.n	80110ca <tx_control+0x2fbe>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 80110c2:	4b43      	ldr	r3, [pc, #268]	@ (80111d0 <tx_control+0x30c4>)
 80110c4:	2201      	movs	r2, #1
 80110c6:	711a      	strb	r2, [r3, #4]
 80110c8:	e000      	b.n	80110cc <tx_control+0x2fc0>
			goto noFlag_ahorro2_TD;
 80110ca:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 80110cc:	4b42      	ldr	r3, [pc, #264]	@ (80111d8 <tx_control+0x30cc>)
 80110ce:	78db      	ldrb	r3, [r3, #3]
 80110d0:	2201      	movs	r2, #1
 80110d2:	4053      	eors	r3, r2
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d103      	bne.n	80110e2 <tx_control+0x2fd6>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 80110da:	4b3d      	ldr	r3, [pc, #244]	@ (80111d0 <tx_control+0x30c4>)
 80110dc:	2201      	movs	r2, #1
 80110de:	715a      	strb	r2, [r3, #5]
 80110e0:	e000      	b.n	80110e4 <tx_control+0x2fd8>
			goto noFlag_nocturno_TD;
 80110e2:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 80110e4:	4b3d      	ldr	r3, [pc, #244]	@ (80111dc <tx_control+0x30d0>)
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	2201      	movs	r2, #1
 80110ea:	4053      	eors	r3, r2
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d103      	bne.n	80110fa <tx_control+0x2fee>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 80110f2:	4b37      	ldr	r3, [pc, #220]	@ (80111d0 <tx_control+0x30c4>)
 80110f4:	2201      	movs	r2, #1
 80110f6:	719a      	strb	r2, [r3, #6]
 80110f8:	e000      	b.n	80110fc <tx_control+0x2ff0>
			goto noFlag_vent_TD;
 80110fa:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 80110fc:	4b33      	ldr	r3, [pc, #204]	@ (80111cc <tx_control+0x30c0>)
 80110fe:	789b      	ldrb	r3, [r3, #2]
 8011100:	2201      	movs	r2, #1
 8011102:	4053      	eors	r3, r2
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d103      	bne.n	8011112 <tx_control+0x3006>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 801110a:	4b31      	ldr	r3, [pc, #196]	@ (80111d0 <tx_control+0x30c4>)
 801110c:	2201      	movs	r2, #1
 801110e:	71da      	strb	r2, [r3, #7]
 8011110:	e000      	b.n	8011114 <tx_control+0x3008>
			goto noFlag_Aux_TD;
 8011112:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 8011114:	2317      	movs	r3, #23
 8011116:	18fb      	adds	r3, r7, r3
 8011118:	2200      	movs	r2, #0
 801111a:	701a      	strb	r2, [r3, #0]
 801111c:	e00d      	b.n	801113a <tx_control+0x302e>
			alarmas2_TD[k] = (trefst2[k]);
 801111e:	2017      	movs	r0, #23
 8011120:	183b      	adds	r3, r7, r0
 8011122:	781a      	ldrb	r2, [r3, #0]
 8011124:	183b      	adds	r3, r7, r0
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	492d      	ldr	r1, [pc, #180]	@ (80111e0 <tx_control+0x30d4>)
 801112a:	5c89      	ldrb	r1, [r1, r2]
 801112c:	4a2d      	ldr	r2, [pc, #180]	@ (80111e4 <tx_control+0x30d8>)
 801112e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 8011130:	183b      	adds	r3, r7, r0
 8011132:	781a      	ldrb	r2, [r3, #0]
 8011134:	183b      	adds	r3, r7, r0
 8011136:	3201      	adds	r2, #1
 8011138:	701a      	strb	r2, [r3, #0]
 801113a:	2317      	movs	r3, #23
 801113c:	18fb      	adds	r3, r7, r3
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	2b07      	cmp	r3, #7
 8011142:	d9ec      	bls.n	801111e <tx_control+0x3012>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 8011144:	4b27      	ldr	r3, [pc, #156]	@ (80111e4 <tx_control+0x30d8>)
 8011146:	2200      	movs	r2, #0
 8011148:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 801114a:	4b27      	ldr	r3, [pc, #156]	@ (80111e8 <tx_control+0x30dc>)
 801114c:	2200      	movs	r2, #0
 801114e:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8011150:	2300      	movs	r3, #0
 8011152:	613b      	str	r3, [r7, #16]
 8011154:	e05e      	b.n	8011214 <tx_control+0x3108>
 8011156:	46c0      	nop			@ (mov r8, r8)
 8011158:	20000bf4 	.word	0x20000bf4
 801115c:	20000e98 	.word	0x20000e98
 8011160:	20000ffc 	.word	0x20000ffc
 8011164:	20000e9a 	.word	0x20000e9a
 8011168:	20000c0e 	.word	0x20000c0e
 801116c:	20000c0f 	.word	0x20000c0f
 8011170:	20001024 	.word	0x20001024
 8011174:	20000efc 	.word	0x20000efc
 8011178:	20000ef4 	.word	0x20000ef4
 801117c:	20000ef8 	.word	0x20000ef8
 8011180:	2000100d 	.word	0x2000100d
 8011184:	20000f18 	.word	0x20000f18
 8011188:	20001010 	.word	0x20001010
 801118c:	20000ce8 	.word	0x20000ce8
 8011190:	20000c0c 	.word	0x20000c0c
 8011194:	20000c0d 	.word	0x20000c0d
 8011198:	20000c2a 	.word	0x20000c2a
 801119c:	20001021 	.word	0x20001021
 80111a0:	20000f01 	.word	0x20000f01
 80111a4:	20001040 	.word	0x20001040
 80111a8:	20000bb3 	.word	0x20000bb3
 80111ac:	20001045 	.word	0x20001045
 80111b0:	20000bb2 	.word	0x20000bb2
 80111b4:	20001054 	.word	0x20001054
 80111b8:	20000f04 	.word	0x20000f04
 80111bc:	20000f1c 	.word	0x20000f1c
 80111c0:	20000f0c 	.word	0x20000f0c
 80111c4:	20001036 	.word	0x20001036
 80111c8:	200000b8 	.word	0x200000b8
 80111cc:	20000c00 	.word	0x20000c00
 80111d0:	20000ea8 	.word	0x20000ea8
 80111d4:	20000c98 	.word	0x20000c98
 80111d8:	20000bd4 	.word	0x20000bd4
 80111dc:	20000c3c 	.word	0x20000c3c
 80111e0:	20000bdc 	.word	0x20000bdc
 80111e4:	20000eb4 	.word	0x20000eb4
 80111e8:	20000ebc 	.word	0x20000ebc
			alarmas_TD |= (trefst[k] << k);
 80111ec:	4a75      	ldr	r2, [pc, #468]	@ (80113c4 <tx_control+0x32b8>)
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	18d3      	adds	r3, r2, r3
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	001a      	movs	r2, r3
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	409a      	lsls	r2, r3
 80111fa:	0013      	movs	r3, r2
 80111fc:	b25a      	sxtb	r2, r3
 80111fe:	4b72      	ldr	r3, [pc, #456]	@ (80113c8 <tx_control+0x32bc>)
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	b25b      	sxtb	r3, r3
 8011204:	4313      	orrs	r3, r2
 8011206:	b25b      	sxtb	r3, r3
 8011208:	b2da      	uxtb	r2, r3
 801120a:	4b6f      	ldr	r3, [pc, #444]	@ (80113c8 <tx_control+0x32bc>)
 801120c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	3301      	adds	r3, #1
 8011212:	613b      	str	r3, [r7, #16]
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	2b07      	cmp	r3, #7
 8011218:	dde8      	ble.n	80111ec <tx_control+0x30e0>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 801121a:	4b6c      	ldr	r3, [pc, #432]	@ (80113cc <tx_control+0x32c0>)
 801121c:	2240      	movs	r2, #64	@ 0x40
 801121e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 8011220:	4b6a      	ldr	r3, [pc, #424]	@ (80113cc <tx_control+0x32c0>)
 8011222:	2281      	movs	r2, #129	@ 0x81
 8011224:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 8011226:	4b69      	ldr	r3, [pc, #420]	@ (80113cc <tx_control+0x32c0>)
 8011228:	2207      	movs	r2, #7
 801122a:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeveTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
		bufferWifiTx[3] = reePlantilla[eeversion1];
 801122c:	4b68      	ldr	r3, [pc, #416]	@ (80113d0 <tx_control+0x32c4>)
 801122e:	227b      	movs	r2, #123	@ 0x7b
 8011230:	5c9a      	ldrb	r2, [r3, r2]
 8011232:	4b66      	ldr	r3, [pc, #408]	@ (80113cc <tx_control+0x32c0>)
 8011234:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8011236:	4b66      	ldr	r3, [pc, #408]	@ (80113d0 <tx_control+0x32c4>)
 8011238:	227c      	movs	r2, #124	@ 0x7c
 801123a:	5c9a      	ldrb	r2, [r3, r2]
 801123c:	4b63      	ldr	r3, [pc, #396]	@ (80113cc <tx_control+0x32c0>)
 801123e:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8011240:	4b64      	ldr	r3, [pc, #400]	@ (80113d4 <tx_control+0x32c8>)
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	0a1b      	lsrs	r3, r3, #8
 8011246:	b29b      	uxth	r3, r3
 8011248:	b2da      	uxtb	r2, r3
 801124a:	4b60      	ldr	r3, [pc, #384]	@ (80113cc <tx_control+0x32c0>)
 801124c:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 801124e:	4b61      	ldr	r3, [pc, #388]	@ (80113d4 <tx_control+0x32c8>)
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	b2da      	uxtb	r2, r3
 8011254:	4b5d      	ldr	r3, [pc, #372]	@ (80113cc <tx_control+0x32c0>)
 8011256:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8011258:	4b5f      	ldr	r3, [pc, #380]	@ (80113d8 <tx_control+0x32cc>)
 801125a:	881b      	ldrh	r3, [r3, #0]
 801125c:	0a1b      	lsrs	r3, r3, #8
 801125e:	b29b      	uxth	r3, r3
 8011260:	b2da      	uxtb	r2, r3
 8011262:	4b5a      	ldr	r3, [pc, #360]	@ (80113cc <tx_control+0x32c0>)
 8011264:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 8011266:	4b5c      	ldr	r3, [pc, #368]	@ (80113d8 <tx_control+0x32cc>)
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	b2da      	uxtb	r2, r3
 801126c:	4b57      	ldr	r3, [pc, #348]	@ (80113cc <tx_control+0x32c0>)
 801126e:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 8011270:	4b5a      	ldr	r3, [pc, #360]	@ (80113dc <tx_control+0x32d0>)
 8011272:	781a      	ldrb	r2, [r3, #0]
 8011274:	4b55      	ldr	r3, [pc, #340]	@ (80113cc <tx_control+0x32c0>)
 8011276:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 8011278:	4b59      	ldr	r3, [pc, #356]	@ (80113e0 <tx_control+0x32d4>)
 801127a:	781a      	ldrb	r2, [r3, #0]
 801127c:	4b53      	ldr	r3, [pc, #332]	@ (80113cc <tx_control+0x32c0>)
 801127e:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 8011280:	4b58      	ldr	r3, [pc, #352]	@ (80113e4 <tx_control+0x32d8>)
 8011282:	781a      	ldrb	r2, [r3, #0]
 8011284:	4b51      	ldr	r3, [pc, #324]	@ (80113cc <tx_control+0x32c0>)
 8011286:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 8011288:	4b57      	ldr	r3, [pc, #348]	@ (80113e8 <tx_control+0x32dc>)
 801128a:	781a      	ldrb	r2, [r3, #0]
 801128c:	4b4f      	ldr	r3, [pc, #316]	@ (80113cc <tx_control+0x32c0>)
 801128e:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 8011290:	4b4e      	ldr	r3, [pc, #312]	@ (80113cc <tx_control+0x32c0>)
 8011292:	2200      	movs	r2, #0
 8011294:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 8011296:	4b55      	ldr	r3, [pc, #340]	@ (80113ec <tx_control+0x32e0>)
 8011298:	781a      	ldrb	r2, [r3, #0]
 801129a:	4b4c      	ldr	r3, [pc, #304]	@ (80113cc <tx_control+0x32c0>)
 801129c:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 801129e:	4b4b      	ldr	r3, [pc, #300]	@ (80113cc <tx_control+0x32c0>)
 80112a0:	2200      	movs	r2, #0
 80112a2:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 80112a4:	2300      	movs	r3, #0
 80112a6:	60fb      	str	r3, [r7, #12]
 80112a8:	e011      	b.n	80112ce <tx_control+0x31c2>
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 80112aa:	4b48      	ldr	r3, [pc, #288]	@ (80113cc <tx_control+0x32c0>)
 80112ac:	7bda      	ldrb	r2, [r3, #15]
 80112ae:	4950      	ldr	r1, [pc, #320]	@ (80113f0 <tx_control+0x32e4>)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	18cb      	adds	r3, r1, r3
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	0019      	movs	r1, r3
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	4099      	lsls	r1, r3
 80112bc:	000b      	movs	r3, r1
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	4313      	orrs	r3, r2
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	4b41      	ldr	r3, [pc, #260]	@ (80113cc <tx_control+0x32c0>)
 80112c6:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	3301      	adds	r3, #1
 80112cc:	60fb      	str	r3, [r7, #12]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b07      	cmp	r3, #7
 80112d2:	ddea      	ble.n	80112aa <tx_control+0x319e>
		}
		bufferWifiTx[16] =estados_TD;
 80112d4:	4b47      	ldr	r3, [pc, #284]	@ (80113f4 <tx_control+0x32e8>)
 80112d6:	781a      	ldrb	r2, [r3, #0]
 80112d8:	4b3c      	ldr	r3, [pc, #240]	@ (80113cc <tx_control+0x32c0>)
 80112da:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 80112dc:	4b3b      	ldr	r3, [pc, #236]	@ (80113cc <tx_control+0x32c0>)
 80112de:	2200      	movs	r2, #0
 80112e0:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 80112e2:	230b      	movs	r3, #11
 80112e4:	18fb      	adds	r3, r7, r3
 80112e6:	2200      	movs	r2, #0
 80112e8:	701a      	strb	r2, [r3, #0]
 80112ea:	e015      	b.n	8011318 <tx_control+0x320c>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 80112ec:	4b37      	ldr	r3, [pc, #220]	@ (80113cc <tx_control+0x32c0>)
 80112ee:	7c5a      	ldrb	r2, [r3, #17]
 80112f0:	200b      	movs	r0, #11
 80112f2:	183b      	adds	r3, r7, r0
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	4940      	ldr	r1, [pc, #256]	@ (80113f8 <tx_control+0x32ec>)
 80112f8:	5ccb      	ldrb	r3, [r1, r3]
 80112fa:	0019      	movs	r1, r3
 80112fc:	183b      	adds	r3, r7, r0
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	4099      	lsls	r1, r3
 8011302:	000b      	movs	r3, r1
 8011304:	b2db      	uxtb	r3, r3
 8011306:	4313      	orrs	r3, r2
 8011308:	b2da      	uxtb	r2, r3
 801130a:	4b30      	ldr	r3, [pc, #192]	@ (80113cc <tx_control+0x32c0>)
 801130c:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 801130e:	183b      	adds	r3, r7, r0
 8011310:	781a      	ldrb	r2, [r3, #0]
 8011312:	183b      	adds	r3, r7, r0
 8011314:	3201      	adds	r2, #1
 8011316:	701a      	strb	r2, [r3, #0]
 8011318:	230b      	movs	r3, #11
 801131a:	18fb      	adds	r3, r7, r3
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	2b07      	cmp	r3, #7
 8011320:	d9e4      	bls.n	80112ec <tx_control+0x31e0>
		}

		bufferWifiTx[18] = alarmas_TD;
 8011322:	4b29      	ldr	r3, [pc, #164]	@ (80113c8 <tx_control+0x32bc>)
 8011324:	781a      	ldrb	r2, [r3, #0]
 8011326:	4b29      	ldr	r3, [pc, #164]	@ (80113cc <tx_control+0x32c0>)
 8011328:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 801132a:	4b34      	ldr	r3, [pc, #208]	@ (80113fc <tx_control+0x32f0>)
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	0a1b      	lsrs	r3, r3, #8
 8011330:	b29b      	uxth	r3, r3
 8011332:	b2da      	uxtb	r2, r3
 8011334:	4b25      	ldr	r3, [pc, #148]	@ (80113cc <tx_control+0x32c0>)
 8011336:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 8011338:	4b30      	ldr	r3, [pc, #192]	@ (80113fc <tx_control+0x32f0>)
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	b2da      	uxtb	r2, r3
 801133e:	4b23      	ldr	r3, [pc, #140]	@ (80113cc <tx_control+0x32c0>)
 8011340:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 8011342:	4b2e      	ldr	r3, [pc, #184]	@ (80113fc <tx_control+0x32f0>)
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	0a1b      	lsrs	r3, r3, #8
 8011348:	b29b      	uxth	r3, r3
 801134a:	b2da      	uxtb	r2, r3
 801134c:	4b1f      	ldr	r3, [pc, #124]	@ (80113cc <tx_control+0x32c0>)
 801134e:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 8011350:	4b2a      	ldr	r3, [pc, #168]	@ (80113fc <tx_control+0x32f0>)
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	b2da      	uxtb	r2, r3
 8011356:	4b1d      	ldr	r3, [pc, #116]	@ (80113cc <tx_control+0x32c0>)
 8011358:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801135a:	4b29      	ldr	r3, [pc, #164]	@ (8011400 <tx_control+0x32f4>)
 801135c:	4a1b      	ldr	r2, [pc, #108]	@ (80113cc <tx_control+0x32c0>)
 801135e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8011360:	4b28      	ldr	r3, [pc, #160]	@ (8011404 <tx_control+0x32f8>)
 8011362:	4a1a      	ldr	r2, [pc, #104]	@ (80113cc <tx_control+0x32c0>)
 8011364:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 8011366:	4b28      	ldr	r3, [pc, #160]	@ (8011408 <tx_control+0x32fc>)
 8011368:	4a28      	ldr	r2, [pc, #160]	@ (801140c <tx_control+0x3300>)
 801136a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 801136c:	4b28      	ldr	r3, [pc, #160]	@ (8011410 <tx_control+0x3304>)
 801136e:	2217      	movs	r2, #23
 8011370:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8011372:	4b28      	ldr	r3, [pc, #160]	@ (8011414 <tx_control+0x3308>)
 8011374:	2200      	movs	r2, #0
 8011376:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8011378:	4b27      	ldr	r3, [pc, #156]	@ (8011418 <tx_control+0x330c>)
 801137a:	2200      	movs	r2, #0
 801137c:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801137e:	4b25      	ldr	r3, [pc, #148]	@ (8011414 <tx_control+0x3308>)
 8011380:	2201      	movs	r2, #1
 8011382:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 8011384:	4b25      	ldr	r3, [pc, #148]	@ (801141c <tx_control+0x3310>)
 8011386:	2255      	movs	r2, #85	@ 0x55
 8011388:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 801138a:	4b25      	ldr	r3, [pc, #148]	@ (8011420 <tx_control+0x3314>)
 801138c:	2200      	movs	r2, #0
 801138e:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 8011390:	e00f      	b.n	80113b2 <tx_control+0x32a6>
		goto end_tx_wifi;//jp			end_tx_wifi
 8011392:	46c0      	nop			@ (mov r8, r8)
 8011394:	f7fe ff65 	bl	8010262 <tx_control+0x2156>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 8011398:	46c0      	nop			@ (mov r8, r8)
 801139a:	f7fe ff62 	bl	8010262 <tx_control+0x2156>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 801139e:	46c0      	nop			@ (mov r8, r8)
 80113a0:	f7fe ff5f 	bl	8010262 <tx_control+0x2156>
		goto end_tx_wifi;// jp		end_tx_wifi
 80113a4:	46c0      	nop			@ (mov r8, r8)
 80113a6:	f7fe ff5c 	bl	8010262 <tx_control+0x2156>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80113aa:	46c0      	nop			@ (mov r8, r8)
 80113ac:	f7fe ff59 	bl	8010262 <tx_control+0x2156>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 80113b0:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 80113b2:	f7fe ff56 	bl	8010262 <tx_control+0x2156>
		goto end_tx_control_b;
 80113b6:	46c0      	nop			@ (mov r8, r8)

end_tx_control_b:
		asm ("nop");
 80113b8:	46c0      	nop			@ (mov r8, r8)

}
 80113ba:	46c0      	nop			@ (mov r8, r8)
 80113bc:	46bd      	mov	sp, r7
 80113be:	b012      	add	sp, #72	@ 0x48
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	46c0      	nop			@ (mov r8, r8)
 80113c4:	20000be4 	.word	0x20000be4
 80113c8:	20000ebc 	.word	0x20000ebc
 80113cc:	20001040 	.word	0x20001040
 80113d0:	20000ce8 	.word	0x20000ce8
 80113d4:	20000e98 	.word	0x20000e98
 80113d8:	20000e9a 	.word	0x20000e9a
 80113dc:	20000c0c 	.word	0x20000c0c
 80113e0:	20000c0d 	.word	0x20000c0d
 80113e4:	20000c0e 	.word	0x20000c0e
 80113e8:	20000c0f 	.word	0x20000c0f
 80113ec:	20000c2a 	.word	0x20000c2a
 80113f0:	20000ea8 	.word	0x20000ea8
 80113f4:	20000eb0 	.word	0x20000eb0
 80113f8:	20000eb4 	.word	0x20000eb4
 80113fc:	20000cb0 	.word	0x20000cb0
 8011400:	20000efc 	.word	0x20000efc
 8011404:	20000ef4 	.word	0x20000ef4
 8011408:	20000ef8 	.word	0x20000ef8
 801140c:	20001057 	.word	0x20001057
 8011410:	20000f18 	.word	0x20000f18
 8011414:	20000f04 	.word	0x20000f04
 8011418:	20000f1c 	.word	0x20000f1c
 801141c:	20000f01 	.word	0x20000f01
 8011420:	20000f0c 	.word	0x20000f0c

08011424 <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 8011424:	b580      	push	{r7, lr}
 8011426:	b082      	sub	sp, #8
 8011428:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 801142a:	4b2f      	ldr	r3, [pc, #188]	@ (80114e8 <prepTXlogg_2+0xc4>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	337e      	adds	r3, #126	@ 0x7e
 8011434:	4a2d      	ldr	r2, [pc, #180]	@ (80114ec <prepTXlogg_2+0xc8>)
 8011436:	7812      	ldrb	r2, [r2, #0]
 8011438:	701a      	strb	r2, [r3, #0]


			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 801143a:	4b2d      	ldr	r3, [pc, #180]	@ (80114f0 <prepTXlogg_2+0xcc>)
 801143c:	22aa      	movs	r2, #170	@ 0xaa
 801143e:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 8011440:	4b2c      	ldr	r3, [pc, #176]	@ (80114f4 <prepTXlogg_2+0xd0>)
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	01db      	lsls	r3, r3, #7
 8011446:	b29a      	uxth	r2, r3
 8011448:	4b2b      	ldr	r3, [pc, #172]	@ (80114f8 <prepTXlogg_2+0xd4>)
 801144a:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 801144c:	4b2b      	ldr	r3, [pc, #172]	@ (80114fc <prepTXlogg_2+0xd8>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a29      	ldr	r2, [pc, #164]	@ (80114f8 <prepTXlogg_2+0xd4>)
 8011452:	8812      	ldrh	r2, [r2, #0]
 8011454:	189a      	adds	r2, r3, r2
 8011456:	4b2a      	ldr	r3, [pc, #168]	@ (8011500 <prepTXlogg_2+0xdc>)
 8011458:	601a      	str	r2, [r3, #0]
			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 801145a:	4b23      	ldr	r3, [pc, #140]	@ (80114e8 <prepTXlogg_2+0xc4>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	4b29      	ldr	r3, [pc, #164]	@ (8011504 <prepTXlogg_2+0xe0>)
 8011460:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 8011462:	f7f5 ff97 	bl	8007394 <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 8011466:	f7f5 fe99 	bl	800719c <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 801146a:	f7f5 fe7f 	bl	800716c <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 801146e:	4b21      	ldr	r3, [pc, #132]	@ (80114f4 <prepTXlogg_2+0xd0>)
 8011470:	781a      	ldrb	r2, [r3, #0]
 8011472:	4b25      	ldr	r3, [pc, #148]	@ (8011508 <prepTXlogg_2+0xe4>)
 8011474:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 8011476:	4b1d      	ldr	r3, [pc, #116]	@ (80114ec <prepTXlogg_2+0xc8>)
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d006      	beq.n	801148c <prepTXlogg_2+0x68>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 801147e:	4b22      	ldr	r3, [pc, #136]	@ (8011508 <prepTXlogg_2+0xe4>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	3301      	adds	r3, #1
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b20      	ldr	r3, [pc, #128]	@ (8011508 <prepTXlogg_2+0xe4>)
 8011488:	701a      	strb	r2, [r3, #0]
 801148a:	e000      	b.n	801148e <prepTXlogg_2+0x6a>
				goto noIncBlock;//jreq	noIncBlock
 801148c:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 801148e:	4b1e      	ldr	r3, [pc, #120]	@ (8011508 <prepTXlogg_2+0xe4>)
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	01db      	lsls	r3, r3, #7
 8011494:	b29a      	uxth	r2, r3
 8011496:	4b18      	ldr	r3, [pc, #96]	@ (80114f8 <prepTXlogg_2+0xd4>)
 8011498:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 801149a:	4b18      	ldr	r3, [pc, #96]	@ (80114fc <prepTXlogg_2+0xd8>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4a16      	ldr	r2, [pc, #88]	@ (80114f8 <prepTXlogg_2+0xd4>)
 80114a0:	8812      	ldrh	r2, [r2, #0]
 80114a2:	189b      	adds	r3, r3, r2
 80114a4:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 80114a6:	4b19      	ldr	r3, [pc, #100]	@ (801150c <prepTXlogg_2+0xe8>)
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 80114ac:	4b18      	ldr	r3, [pc, #96]	@ (8011510 <prepTXlogg_2+0xec>)
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 80114b2:	4b18      	ldr	r3, [pc, #96]	@ (8011514 <prepTXlogg_2+0xf0>)
 80114b4:	2201      	movs	r2, #1
 80114b6:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 80114b8:	4b15      	ldr	r3, [pc, #84]	@ (8011510 <prepTXlogg_2+0xec>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	4b16      	ldr	r3, [pc, #88]	@ (8011518 <prepTXlogg_2+0xf4>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d106      	bne.n	80114d2 <prepTXlogg_2+0xae>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 80114c4:	4b15      	ldr	r3, [pc, #84]	@ (801151c <prepTXlogg_2+0xf8>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 80114ca:	4b12      	ldr	r3, [pc, #72]	@ (8011514 <prepTXlogg_2+0xf0>)
 80114cc:	2200      	movs	r2, #0
 80114ce:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 80114d0:	e003      	b.n	80114da <prepTXlogg_2+0xb6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 80114d2:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	3b01      	subs	r3, #1
 80114d8:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 80114da:	4b11      	ldr	r3, [pc, #68]	@ (8011520 <prepTXlogg_2+0xfc>)
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	601a      	str	r2, [r3, #0]
			//ret
}
 80114e0:	46c0      	nop			@ (mov r8, r8)
 80114e2:	46bd      	mov	sp, r7
 80114e4:	b002      	add	sp, #8
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	20000e8c 	.word	0x20000e8c
 80114ec:	20000e83 	.word	0x20000e83
 80114f0:	20000e74 	.word	0x20000e74
 80114f4:	20000e82 	.word	0x20000e82
 80114f8:	20000932 	.word	0x20000932
 80114fc:	20000e88 	.word	0x20000e88
 8011500:	20000e78 	.word	0x20000e78
 8011504:	20000e7c 	.word	0x20000e7c
 8011508:	20000930 	.word	0x20000930
 801150c:	20000ef4 	.word	0x20000ef4
 8011510:	20000efc 	.word	0x20000efc
 8011514:	20000f04 	.word	0x20000f04
 8011518:	20000f10 	.word	0x20000f10
 801151c:	20000f14 	.word	0x20000f14
 8011520:	20000ef8 	.word	0x20000ef8

08011524 <borra_pagina_logger>:
	BloqDatalooger[comando1] =	0xF1; // mov		comando1,#$F1
	BloqDatalooger[comando2] = 	0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
}

void borra_pagina_logger(uint32_t pagina)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 801152c:	2300      	movs	r3, #0
 801152e:	60fb      	str	r3, [r7, #12]

    while (HAL_FLASH_Unlock() != HAL_OK);
 8011530:	46c0      	nop			@ (mov r8, r8)
 8011532:	f002 fd65 	bl	8014000 <HAL_FLASH_Unlock>
 8011536:	1e03      	subs	r3, r0, #0
 8011538:	d1fb      	bne.n	8011532 <borra_pagina_logger+0xe>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // Borrado por páginas
 801153a:	2110      	movs	r1, #16
 801153c:	187b      	adds	r3, r7, r1
 801153e:	2202      	movs	r2, #2
 8011540:	601a      	str	r2, [r3, #0]
    eraseInitStruct.Page = pagina;                   // Página inicial a borrar
 8011542:	187b      	adds	r3, r7, r1
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbPages = 1;
 8011548:	187b      	adds	r3, r7, r1
 801154a:	2201      	movs	r2, #1
 801154c:	60da      	str	r2, [r3, #12]

    while (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK);
 801154e:	46c0      	nop			@ (mov r8, r8)
 8011550:	230c      	movs	r3, #12
 8011552:	18fa      	adds	r2, r7, r3
 8011554:	2310      	movs	r3, #16
 8011556:	18fb      	adds	r3, r7, r3
 8011558:	0011      	movs	r1, r2
 801155a:	0018      	movs	r0, r3
 801155c:	f002 fdfe 	bl	801415c <HAL_FLASHEx_Erase>
 8011560:	1e03      	subs	r3, r0, #0
 8011562:	d1f5      	bne.n	8011550 <borra_pagina_logger+0x2c>
    while (HAL_FLASH_Lock() != HAL_OK);
 8011564:	46c0      	nop			@ (mov r8, r8)
 8011566:	f002 fd6f 	bl	8014048 <HAL_FLASH_Lock>
 801156a:	1e03      	subs	r3, r0, #0
 801156c:	d1fb      	bne.n	8011566 <borra_pagina_logger+0x42>

    pagina_borrado++;
 801156e:	4b04      	ldr	r3, [pc, #16]	@ (8011580 <borra_pagina_logger+0x5c>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	1c5a      	adds	r2, r3, #1
 8011574:	4b02      	ldr	r3, [pc, #8]	@ (8011580 <borra_pagina_logger+0x5c>)
 8011576:	601a      	str	r2, [r3, #0]
}
 8011578:	46c0      	nop			@ (mov r8, r8)
 801157a:	46bd      	mov	sp, r7
 801157c:	b008      	add	sp, #32
 801157e:	bd80      	pop	{r7, pc}
 8011580:	20000270 	.word	0x20000270

08011584 <graba_bloque_fw>:

void graba_bloque_fw (void)
{
 8011584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011586:	b0b1      	sub	sp, #196	@ 0xc4
 8011588:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 801158a:	2357      	movs	r3, #87	@ 0x57
 801158c:	2168      	movs	r1, #104	@ 0x68
 801158e:	185b      	adds	r3, r3, r1
 8011590:	19da      	adds	r2, r3, r7
 8011592:	2300      	movs	r3, #0
 8011594:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 8011596:	2356      	movs	r3, #86	@ 0x56
 8011598:	185b      	adds	r3, r3, r1
 801159a:	19da      	adds	r2, r3, r7
 801159c:	2300      	movs	r3, #0
 801159e:	7013      	strb	r3, [r2, #0]

	uint8_t a = 0;
 80115a0:	2355      	movs	r3, #85	@ 0x55
 80115a2:	185b      	adds	r3, r3, r1
 80115a4:	19da      	adds	r2, r3, r7
 80115a6:	2300      	movs	r3, #0
 80115a8:	7013      	strb	r3, [r2, #0]
	uint8_t b = 1;
 80115aa:	2354      	movs	r3, #84	@ 0x54
 80115ac:	185b      	adds	r3, r3, r1
 80115ae:	19da      	adds	r2, r3, r7
 80115b0:	2301      	movs	r3, #1
 80115b2:	7013      	strb	r3, [r2, #0]
	uint8_t c = 2;
 80115b4:	2353      	movs	r3, #83	@ 0x53
 80115b6:	185b      	adds	r3, r3, r1
 80115b8:	19da      	adds	r2, r3, r7
 80115ba:	2302      	movs	r3, #2
 80115bc:	7013      	strb	r3, [r2, #0]
	uint8_t d = 3;
 80115be:	2352      	movs	r3, #82	@ 0x52
 80115c0:	185b      	adds	r3, r3, r1
 80115c2:	19da      	adds	r2, r3, r7
 80115c4:	2303      	movs	r3, #3
 80115c6:	7013      	strb	r3, [r2, #0]
	uint8_t e = 4;
 80115c8:	2351      	movs	r3, #81	@ 0x51
 80115ca:	185b      	adds	r3, r3, r1
 80115cc:	19da      	adds	r2, r3, r7
 80115ce:	2304      	movs	r3, #4
 80115d0:	7013      	strb	r3, [r2, #0]
	uint8_t f = 5;
 80115d2:	2350      	movs	r3, #80	@ 0x50
 80115d4:	185b      	adds	r3, r3, r1
 80115d6:	19da      	adds	r2, r3, r7
 80115d8:	2305      	movs	r3, #5
 80115da:	7013      	strb	r3, [r2, #0]
	uint8_t g = 6;
 80115dc:	234f      	movs	r3, #79	@ 0x4f
 80115de:	185b      	adds	r3, r3, r1
 80115e0:	19da      	adds	r2, r3, r7
 80115e2:	2306      	movs	r3, #6
 80115e4:	7013      	strb	r3, [r2, #0]
	uint8_t h = 7;
 80115e6:	234e      	movs	r3, #78	@ 0x4e
 80115e8:	185b      	adds	r3, r3, r1
 80115ea:	19da      	adds	r2, r3, r7
 80115ec:	2307      	movs	r3, #7
 80115ee:	7013      	strb	r3, [r2, #0]

//	uint32_t buffer_recepcion = 0;

	uint64_t buffer_recepcion = 0;
 80115f0:	2200      	movs	r2, #0
 80115f2:	2300      	movs	r3, #0
 80115f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80115f6:	677b      	str	r3, [r7, #116]	@ 0x74

	uint64_t contenido1 = 0;
 80115f8:	2200      	movs	r2, #0
 80115fa:	2300      	movs	r3, #0
 80115fc:	21a8      	movs	r1, #168	@ 0xa8
 80115fe:	1879      	adds	r1, r7, r1
 8011600:	600a      	str	r2, [r1, #0]
 8011602:	604b      	str	r3, [r1, #4]
	uint64_t contenido2 = 0;
 8011604:	2200      	movs	r2, #0
 8011606:	2300      	movs	r3, #0
 8011608:	21a0      	movs	r1, #160	@ 0xa0
 801160a:	1879      	adds	r1, r7, r1
 801160c:	600a      	str	r2, [r1, #0]
 801160e:	604b      	str	r3, [r1, #4]
	uint64_t contenido3 = 0;
 8011610:	2200      	movs	r2, #0
 8011612:	2300      	movs	r3, #0
 8011614:	2198      	movs	r1, #152	@ 0x98
 8011616:	1879      	adds	r1, r7, r1
 8011618:	600a      	str	r2, [r1, #0]
 801161a:	604b      	str	r3, [r1, #4]
	uint64_t contenido4 = 0;
 801161c:	2200      	movs	r2, #0
 801161e:	2300      	movs	r3, #0
 8011620:	2190      	movs	r1, #144	@ 0x90
 8011622:	1879      	adds	r1, r7, r1
 8011624:	600a      	str	r2, [r1, #0]
 8011626:	604b      	str	r3, [r1, #4]
	uint64_t contenido5 = 0;
 8011628:	2200      	movs	r2, #0
 801162a:	2300      	movs	r3, #0
 801162c:	2188      	movs	r1, #136	@ 0x88
 801162e:	1879      	adds	r1, r7, r1
 8011630:	600a      	str	r2, [r1, #0]
 8011632:	604b      	str	r3, [r1, #4]
	uint64_t contenido6 = 0;
 8011634:	2200      	movs	r2, #0
 8011636:	2300      	movs	r3, #0
 8011638:	2180      	movs	r1, #128	@ 0x80
 801163a:	1879      	adds	r1, r7, r1
 801163c:	600a      	str	r2, [r1, #0]
 801163e:	604b      	str	r3, [r1, #4]
	uint64_t contenido7 = 0;
 8011640:	2200      	movs	r2, #0
 8011642:	2300      	movs	r3, #0
 8011644:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011646:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint64_t contenido8 = 0;
 8011648:	2200      	movs	r2, #0
 801164a:	2300      	movs	r3, #0
 801164c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801164e:	66fb      	str	r3, [r7, #108]	@ 0x6c

	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8011650:	46c0      	nop			@ (mov r8, r8)
 8011652:	f002 fcd5 	bl	8014000 <HAL_FLASH_Unlock>
 8011656:	1e03      	subs	r3, r0, #0
 8011658:	d1fb      	bne.n	8011652 <graba_bloque_fw+0xce>
	for(i = 0; i < 16; i++)
 801165a:	2357      	movs	r3, #87	@ 0x57
 801165c:	2268      	movs	r2, #104	@ 0x68
 801165e:	189b      	adds	r3, r3, r2
 8011660:	19da      	adds	r2, r3, r7
 8011662:	2300      	movs	r3, #0
 8011664:	7013      	strb	r3, [r2, #0]
 8011666:	e1c0      	b.n	80119ea <graba_bloque_fw+0x466>
	{
		switch (j)
 8011668:	2356      	movs	r3, #86	@ 0x56
 801166a:	2268      	movs	r2, #104	@ 0x68
 801166c:	189b      	adds	r3, r3, r2
 801166e:	19db      	adds	r3, r3, r7
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b07      	cmp	r3, #7
 8011674:	d900      	bls.n	8011678 <graba_bloque_fw+0xf4>
 8011676:	e1af      	b.n	80119d8 <graba_bloque_fw+0x454>
 8011678:	009a      	lsls	r2, r3, #2
 801167a:	4be5      	ldr	r3, [pc, #916]	@ (8011a10 <graba_bloque_fw+0x48c>)
 801167c:	18d3      	adds	r3, r2, r3
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	469f      	mov	pc, r3
		{
			case 0:
				contenido1 =  RxBuffer_Ble[a];
 8011682:	2355      	movs	r3, #85	@ 0x55
 8011684:	2168      	movs	r1, #104	@ 0x68
 8011686:	185b      	adds	r3, r3, r1
 8011688:	19db      	adds	r3, r3, r7
 801168a:	781a      	ldrb	r2, [r3, #0]
 801168c:	4be1      	ldr	r3, [pc, #900]	@ (8011a14 <graba_bloque_fw+0x490>)
 801168e:	5c9b      	ldrb	r3, [r3, r2]
 8011690:	22a8      	movs	r2, #168	@ 0xa8
 8011692:	18ba      	adds	r2, r7, r2
 8011694:	6013      	str	r3, [r2, #0]
 8011696:	2300      	movs	r3, #0
 8011698:	22ac      	movs	r2, #172	@ 0xac
 801169a:	18ba      	adds	r2, r7, r2
 801169c:	6013      	str	r3, [r2, #0]
				j++;
 801169e:	2256      	movs	r2, #86	@ 0x56
 80116a0:	1853      	adds	r3, r2, r1
 80116a2:	19db      	adds	r3, r3, r7
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	1852      	adds	r2, r2, r1
 80116a8:	19d2      	adds	r2, r2, r7
 80116aa:	3301      	adds	r3, #1
 80116ac:	7013      	strb	r3, [r2, #0]
			case 1:

				contenido2 =  RxBuffer_Ble[b];
 80116ae:	2354      	movs	r3, #84	@ 0x54
 80116b0:	2068      	movs	r0, #104	@ 0x68
 80116b2:	181b      	adds	r3, r3, r0
 80116b4:	19db      	adds	r3, r3, r7
 80116b6:	781a      	ldrb	r2, [r3, #0]
 80116b8:	4bd6      	ldr	r3, [pc, #856]	@ (8011a14 <graba_bloque_fw+0x490>)
 80116ba:	5c9b      	ldrb	r3, [r3, r2]
 80116bc:	21a0      	movs	r1, #160	@ 0xa0
 80116be:	187a      	adds	r2, r7, r1
 80116c0:	6013      	str	r3, [r2, #0]
 80116c2:	2300      	movs	r3, #0
 80116c4:	26a4      	movs	r6, #164	@ 0xa4
 80116c6:	19ba      	adds	r2, r7, r6
 80116c8:	6013      	str	r3, [r2, #0]
				contenido2 = contenido2 << 8;
 80116ca:	187b      	adds	r3, r7, r1
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	0e1a      	lsrs	r2, r3, #24
 80116d0:	19bb      	adds	r3, r7, r6
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	021d      	lsls	r5, r3, #8
 80116d6:	4315      	orrs	r5, r2
 80116d8:	187b      	adds	r3, r7, r1
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	021c      	lsls	r4, r3, #8
 80116de:	187b      	adds	r3, r7, r1
 80116e0:	601c      	str	r4, [r3, #0]
 80116e2:	605d      	str	r5, [r3, #4]
				j++;
 80116e4:	2256      	movs	r2, #86	@ 0x56
 80116e6:	1813      	adds	r3, r2, r0
 80116e8:	19db      	adds	r3, r3, r7
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	1812      	adds	r2, r2, r0
 80116ee:	19d2      	adds	r2, r2, r7
 80116f0:	3301      	adds	r3, #1
 80116f2:	7013      	strb	r3, [r2, #0]

			case 2:
				contenido3 =  RxBuffer_Ble[c];
 80116f4:	2353      	movs	r3, #83	@ 0x53
 80116f6:	2068      	movs	r0, #104	@ 0x68
 80116f8:	181b      	adds	r3, r3, r0
 80116fa:	19db      	adds	r3, r3, r7
 80116fc:	781a      	ldrb	r2, [r3, #0]
 80116fe:	4bc5      	ldr	r3, [pc, #788]	@ (8011a14 <graba_bloque_fw+0x490>)
 8011700:	5c9b      	ldrb	r3, [r3, r2]
 8011702:	2198      	movs	r1, #152	@ 0x98
 8011704:	187a      	adds	r2, r7, r1
 8011706:	6013      	str	r3, [r2, #0]
 8011708:	2300      	movs	r3, #0
 801170a:	269c      	movs	r6, #156	@ 0x9c
 801170c:	19ba      	adds	r2, r7, r6
 801170e:	6013      	str	r3, [r2, #0]
				contenido3 = contenido3 << 16;
 8011710:	187b      	adds	r3, r7, r1
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	0c1a      	lsrs	r2, r3, #16
 8011716:	19bb      	adds	r3, r7, r6
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	041b      	lsls	r3, r3, #16
 801171c:	667b      	str	r3, [r7, #100]	@ 0x64
 801171e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011720:	4313      	orrs	r3, r2
 8011722:	667b      	str	r3, [r7, #100]	@ 0x64
 8011724:	187b      	adds	r3, r7, r1
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	041b      	lsls	r3, r3, #16
 801172a:	663b      	str	r3, [r7, #96]	@ 0x60
 801172c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801172e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011730:	1879      	adds	r1, r7, r1
 8011732:	600a      	str	r2, [r1, #0]
 8011734:	604b      	str	r3, [r1, #4]
				j++;
 8011736:	2256      	movs	r2, #86	@ 0x56
 8011738:	1813      	adds	r3, r2, r0
 801173a:	19db      	adds	r3, r3, r7
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	1812      	adds	r2, r2, r0
 8011740:	19d2      	adds	r2, r2, r7
 8011742:	3301      	adds	r3, #1
 8011744:	7013      	strb	r3, [r2, #0]

			case 3:
				contenido4 =  RxBuffer_Ble[d];
 8011746:	2352      	movs	r3, #82	@ 0x52
 8011748:	2068      	movs	r0, #104	@ 0x68
 801174a:	181b      	adds	r3, r3, r0
 801174c:	19db      	adds	r3, r3, r7
 801174e:	781a      	ldrb	r2, [r3, #0]
 8011750:	4bb0      	ldr	r3, [pc, #704]	@ (8011a14 <graba_bloque_fw+0x490>)
 8011752:	5c9b      	ldrb	r3, [r3, r2]
 8011754:	2190      	movs	r1, #144	@ 0x90
 8011756:	187a      	adds	r2, r7, r1
 8011758:	6013      	str	r3, [r2, #0]
 801175a:	2300      	movs	r3, #0
 801175c:	2694      	movs	r6, #148	@ 0x94
 801175e:	19ba      	adds	r2, r7, r6
 8011760:	6013      	str	r3, [r2, #0]
				contenido4 = contenido4 << 24;
 8011762:	187b      	adds	r3, r7, r1
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	0a1a      	lsrs	r2, r3, #8
 8011768:	19bb      	adds	r3, r7, r6
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	061b      	lsls	r3, r3, #24
 801176e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011772:	4313      	orrs	r3, r2
 8011774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011776:	187b      	adds	r3, r7, r1
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	061b      	lsls	r3, r3, #24
 801177c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801177e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011782:	1879      	adds	r1, r7, r1
 8011784:	600a      	str	r2, [r1, #0]
 8011786:	604b      	str	r3, [r1, #4]
				j++;
 8011788:	2256      	movs	r2, #86	@ 0x56
 801178a:	1813      	adds	r3, r2, r0
 801178c:	19db      	adds	r3, r3, r7
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	1812      	adds	r2, r2, r0
 8011792:	19d2      	adds	r2, r2, r7
 8011794:	3301      	adds	r3, #1
 8011796:	7013      	strb	r3, [r2, #0]

			case 4:
				contenido5 =  RxBuffer_Ble[e];
 8011798:	2351      	movs	r3, #81	@ 0x51
 801179a:	2068      	movs	r0, #104	@ 0x68
 801179c:	181b      	adds	r3, r3, r0
 801179e:	19db      	adds	r3, r3, r7
 80117a0:	781a      	ldrb	r2, [r3, #0]
 80117a2:	4b9c      	ldr	r3, [pc, #624]	@ (8011a14 <graba_bloque_fw+0x490>)
 80117a4:	5c9b      	ldrb	r3, [r3, r2]
 80117a6:	2188      	movs	r1, #136	@ 0x88
 80117a8:	187a      	adds	r2, r7, r1
 80117aa:	6013      	str	r3, [r2, #0]
 80117ac:	2300      	movs	r3, #0
 80117ae:	228c      	movs	r2, #140	@ 0x8c
 80117b0:	18ba      	adds	r2, r7, r2
 80117b2:	6013      	str	r3, [r2, #0]
				contenido5 = contenido5 << 32;
 80117b4:	187b      	adds	r3, r7, r1
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	001b      	movs	r3, r3
 80117ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80117bc:	2300      	movs	r3, #0
 80117be:	623b      	str	r3, [r7, #32]
 80117c0:	6a3a      	ldr	r2, [r7, #32]
 80117c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c4:	1879      	adds	r1, r7, r1
 80117c6:	600a      	str	r2, [r1, #0]
 80117c8:	604b      	str	r3, [r1, #4]
				j++;
 80117ca:	2256      	movs	r2, #86	@ 0x56
 80117cc:	1813      	adds	r3, r2, r0
 80117ce:	19db      	adds	r3, r3, r7
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	1812      	adds	r2, r2, r0
 80117d4:	19d2      	adds	r2, r2, r7
 80117d6:	3301      	adds	r3, #1
 80117d8:	7013      	strb	r3, [r2, #0]

			case 5:
				contenido6 = RxBuffer_Ble[f];
 80117da:	2350      	movs	r3, #80	@ 0x50
 80117dc:	2068      	movs	r0, #104	@ 0x68
 80117de:	181b      	adds	r3, r3, r0
 80117e0:	19db      	adds	r3, r3, r7
 80117e2:	781a      	ldrb	r2, [r3, #0]
 80117e4:	4b8b      	ldr	r3, [pc, #556]	@ (8011a14 <graba_bloque_fw+0x490>)
 80117e6:	5c9b      	ldrb	r3, [r3, r2]
 80117e8:	2180      	movs	r1, #128	@ 0x80
 80117ea:	187a      	adds	r2, r7, r1
 80117ec:	6013      	str	r3, [r2, #0]
 80117ee:	2300      	movs	r3, #0
 80117f0:	2284      	movs	r2, #132	@ 0x84
 80117f2:	18ba      	adds	r2, r7, r2
 80117f4:	6013      	str	r3, [r2, #0]
				contenido6 = contenido6 << 40;
 80117f6:	187b      	adds	r3, r7, r1
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	021b      	lsls	r3, r3, #8
 80117fc:	61fb      	str	r3, [r7, #28]
 80117fe:	2300      	movs	r3, #0
 8011800:	61bb      	str	r3, [r7, #24]
 8011802:	69ba      	ldr	r2, [r7, #24]
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	1879      	adds	r1, r7, r1
 8011808:	600a      	str	r2, [r1, #0]
 801180a:	604b      	str	r3, [r1, #4]
				j++;
 801180c:	2256      	movs	r2, #86	@ 0x56
 801180e:	1813      	adds	r3, r2, r0
 8011810:	19db      	adds	r3, r3, r7
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	1812      	adds	r2, r2, r0
 8011816:	19d2      	adds	r2, r2, r7
 8011818:	3301      	adds	r3, #1
 801181a:	7013      	strb	r3, [r2, #0]

			case 6:
				contenido7 = RxBuffer_Ble[g];
 801181c:	234f      	movs	r3, #79	@ 0x4f
 801181e:	2168      	movs	r1, #104	@ 0x68
 8011820:	185b      	adds	r3, r3, r1
 8011822:	19db      	adds	r3, r3, r7
 8011824:	781a      	ldrb	r2, [r3, #0]
 8011826:	4b7b      	ldr	r3, [pc, #492]	@ (8011a14 <graba_bloque_fw+0x490>)
 8011828:	5c9b      	ldrb	r3, [r3, r2]
 801182a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801182c:	2300      	movs	r3, #0
 801182e:	67fb      	str	r3, [r7, #124]	@ 0x7c
				contenido7 = contenido7 << 48;
 8011830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011832:	041b      	lsls	r3, r3, #16
 8011834:	617b      	str	r3, [r7, #20]
 8011836:	2300      	movs	r3, #0
 8011838:	613b      	str	r3, [r7, #16]
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011840:	67fb      	str	r3, [r7, #124]	@ 0x7c
				j++;
 8011842:	2256      	movs	r2, #86	@ 0x56
 8011844:	1853      	adds	r3, r2, r1
 8011846:	19db      	adds	r3, r3, r7
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	1852      	adds	r2, r2, r1
 801184c:	19d2      	adds	r2, r2, r7
 801184e:	3301      	adds	r3, #1
 8011850:	7013      	strb	r3, [r2, #0]

			case 7:
				contenido8 = RxBuffer_Ble[h];
 8011852:	234e      	movs	r3, #78	@ 0x4e
 8011854:	2268      	movs	r2, #104	@ 0x68
 8011856:	189b      	adds	r3, r3, r2
 8011858:	19db      	adds	r3, r3, r7
 801185a:	781a      	ldrb	r2, [r3, #0]
 801185c:	4b6d      	ldr	r3, [pc, #436]	@ (8011a14 <graba_bloque_fw+0x490>)
 801185e:	5c9b      	ldrb	r3, [r3, r2]
 8011860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011862:	2300      	movs	r3, #0
 8011864:	66fb      	str	r3, [r7, #108]	@ 0x6c
				contenido8 = contenido8 << 56;
 8011866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011868:	061b      	lsls	r3, r3, #24
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	2300      	movs	r3, #0
 801186e:	60bb      	str	r3, [r7, #8]
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011876:	66fb      	str	r3, [r7, #108]	@ 0x6c

				buffer_recepcion = contenido1 | contenido2 | contenido3 | contenido4 | contenido5 |contenido6 | contenido7 |contenido8;
 8011878:	23a8      	movs	r3, #168	@ 0xa8
 801187a:	18fb      	adds	r3, r7, r3
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	23a0      	movs	r3, #160	@ 0xa0
 8011880:	18fb      	adds	r3, r7, r3
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	431a      	orrs	r2, r3
 8011886:	653a      	str	r2, [r7, #80]	@ 0x50
 8011888:	23ac      	movs	r3, #172	@ 0xac
 801188a:	18fb      	adds	r3, r7, r3
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	23a4      	movs	r3, #164	@ 0xa4
 8011890:	18fb      	adds	r3, r7, r3
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	431a      	orrs	r2, r3
 8011896:	657a      	str	r2, [r7, #84]	@ 0x54
 8011898:	2398      	movs	r3, #152	@ 0x98
 801189a:	18fb      	adds	r3, r7, r3
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80118a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80118a2:	0008      	movs	r0, r1
 80118a4:	4318      	orrs	r0, r3
 80118a6:	64b8      	str	r0, [r7, #72]	@ 0x48
 80118a8:	239c      	movs	r3, #156	@ 0x9c
 80118aa:	18fb      	adds	r3, r7, r3
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	431a      	orrs	r2, r3
 80118b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80118b2:	2390      	movs	r3, #144	@ 0x90
 80118b4:	18fb      	adds	r3, r7, r3
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80118ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118bc:	0008      	movs	r0, r1
 80118be:	4318      	orrs	r0, r3
 80118c0:	6438      	str	r0, [r7, #64]	@ 0x40
 80118c2:	2394      	movs	r3, #148	@ 0x94
 80118c4:	18fb      	adds	r3, r7, r3
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	431a      	orrs	r2, r3
 80118ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80118cc:	2388      	movs	r3, #136	@ 0x88
 80118ce:	18fb      	adds	r3, r7, r3
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80118d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80118d6:	0008      	movs	r0, r1
 80118d8:	4318      	orrs	r0, r3
 80118da:	63b8      	str	r0, [r7, #56]	@ 0x38
 80118dc:	238c      	movs	r3, #140	@ 0x8c
 80118de:	18fb      	adds	r3, r7, r3
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	431a      	orrs	r2, r3
 80118e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80118e6:	2380      	movs	r3, #128	@ 0x80
 80118e8:	18fb      	adds	r3, r7, r3
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80118f0:	0008      	movs	r0, r1
 80118f2:	4318      	orrs	r0, r3
 80118f4:	6338      	str	r0, [r7, #48]	@ 0x30
 80118f6:	2384      	movs	r3, #132	@ 0x84
 80118f8:	18fb      	adds	r3, r7, r3
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	431a      	orrs	r2, r3
 80118fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8011900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011902:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011906:	0008      	movs	r0, r1
 8011908:	4318      	orrs	r0, r3
 801190a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801190c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801190e:	431a      	orrs	r2, r3
 8011910:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011918:	0008      	movs	r0, r1
 801191a:	4318      	orrs	r0, r3
 801191c:	6038      	str	r0, [r7, #0]
 801191e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011920:	431a      	orrs	r2, r3
 8011922:	607a      	str	r2, [r7, #4]
 8011924:	683a      	ldr	r2, [r7, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	673a      	str	r2, [r7, #112]	@ 0x70
 801192a:	677b      	str	r3, [r7, #116]	@ 0x74
				while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
 801192c:	46c0      	nop			@ (mov r8, r8)
 801192e:	4b3a      	ldr	r3, [pc, #232]	@ (8011a18 <graba_bloque_fw+0x494>)
 8011930:	6819      	ldr	r1, [r3, #0]
 8011932:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011936:	2001      	movs	r0, #1
 8011938:	f002 fb14 	bl	8013f64 <HAL_FLASH_Program>
 801193c:	1e03      	subs	r3, r0, #0
 801193e:	d1f6      	bne.n	801192e <graba_bloque_fw+0x3aa>
				//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion)!=  HAL_OK);
				//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion);
				direccion_fw = direccion_fw + 8;
 8011940:	4b35      	ldr	r3, [pc, #212]	@ (8011a18 <graba_bloque_fw+0x494>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	3308      	adds	r3, #8
 8011946:	001a      	movs	r2, r3
 8011948:	4b33      	ldr	r3, [pc, #204]	@ (8011a18 <graba_bloque_fw+0x494>)
 801194a:	601a      	str	r2, [r3, #0]
				j = 0;
 801194c:	2356      	movs	r3, #86	@ 0x56
 801194e:	2168      	movs	r1, #104	@ 0x68
 8011950:	185b      	adds	r3, r3, r1
 8011952:	19da      	adds	r2, r3, r7
 8011954:	2300      	movs	r3, #0
 8011956:	7013      	strb	r3, [r2, #0]
				a = a + 8;
 8011958:	2355      	movs	r3, #85	@ 0x55
 801195a:	185a      	adds	r2, r3, r1
 801195c:	19d2      	adds	r2, r2, r7
 801195e:	185b      	adds	r3, r3, r1
 8011960:	19db      	adds	r3, r3, r7
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	3308      	adds	r3, #8
 8011966:	7013      	strb	r3, [r2, #0]
				b = b + 8;
 8011968:	2354      	movs	r3, #84	@ 0x54
 801196a:	185a      	adds	r2, r3, r1
 801196c:	19d2      	adds	r2, r2, r7
 801196e:	185b      	adds	r3, r3, r1
 8011970:	19db      	adds	r3, r3, r7
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	3308      	adds	r3, #8
 8011976:	7013      	strb	r3, [r2, #0]
				c = c + 8;
 8011978:	2353      	movs	r3, #83	@ 0x53
 801197a:	185a      	adds	r2, r3, r1
 801197c:	19d2      	adds	r2, r2, r7
 801197e:	185b      	adds	r3, r3, r1
 8011980:	19db      	adds	r3, r3, r7
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	3308      	adds	r3, #8
 8011986:	7013      	strb	r3, [r2, #0]
				d = d + 8;
 8011988:	2352      	movs	r3, #82	@ 0x52
 801198a:	185a      	adds	r2, r3, r1
 801198c:	19d2      	adds	r2, r2, r7
 801198e:	185b      	adds	r3, r3, r1
 8011990:	19db      	adds	r3, r3, r7
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	3308      	adds	r3, #8
 8011996:	7013      	strb	r3, [r2, #0]
				e = e + 8;
 8011998:	2351      	movs	r3, #81	@ 0x51
 801199a:	185a      	adds	r2, r3, r1
 801199c:	19d2      	adds	r2, r2, r7
 801199e:	185b      	adds	r3, r3, r1
 80119a0:	19db      	adds	r3, r3, r7
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	3308      	adds	r3, #8
 80119a6:	7013      	strb	r3, [r2, #0]
				f = f + 8;
 80119a8:	2350      	movs	r3, #80	@ 0x50
 80119aa:	185a      	adds	r2, r3, r1
 80119ac:	19d2      	adds	r2, r2, r7
 80119ae:	185b      	adds	r3, r3, r1
 80119b0:	19db      	adds	r3, r3, r7
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	3308      	adds	r3, #8
 80119b6:	7013      	strb	r3, [r2, #0]
				g = g + 8;
 80119b8:	234f      	movs	r3, #79	@ 0x4f
 80119ba:	185a      	adds	r2, r3, r1
 80119bc:	19d2      	adds	r2, r2, r7
 80119be:	185b      	adds	r3, r3, r1
 80119c0:	19db      	adds	r3, r3, r7
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	3308      	adds	r3, #8
 80119c6:	7013      	strb	r3, [r2, #0]
				h = h + 8;
 80119c8:	234e      	movs	r3, #78	@ 0x4e
 80119ca:	185a      	adds	r2, r3, r1
 80119cc:	19d2      	adds	r2, r2, r7
 80119ce:	185b      	adds	r3, r3, r1
 80119d0:	19db      	adds	r3, r3, r7
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	3308      	adds	r3, #8
 80119d6:	7013      	strb	r3, [r2, #0]
	for(i = 0; i < 16; i++)
 80119d8:	2257      	movs	r2, #87	@ 0x57
 80119da:	2168      	movs	r1, #104	@ 0x68
 80119dc:	1853      	adds	r3, r2, r1
 80119de:	19db      	adds	r3, r3, r7
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	1852      	adds	r2, r2, r1
 80119e4:	19d2      	adds	r2, r2, r7
 80119e6:	3301      	adds	r3, #1
 80119e8:	7013      	strb	r3, [r2, #0]
 80119ea:	2357      	movs	r3, #87	@ 0x57
 80119ec:	2268      	movs	r2, #104	@ 0x68
 80119ee:	189b      	adds	r3, r3, r2
 80119f0:	19db      	adds	r3, r3, r7
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	2b0f      	cmp	r3, #15
 80119f6:	d800      	bhi.n	80119fa <graba_bloque_fw+0x476>
 80119f8:	e636      	b.n	8011668 <graba_bloque_fw+0xe4>
		}


	}
	while(HAL_FLASH_Lock() != HAL_OK );
 80119fa:	46c0      	nop			@ (mov r8, r8)
 80119fc:	f002 fb24 	bl	8014048 <HAL_FLASH_Lock>
 8011a00:	1e03      	subs	r3, r0, #0
 8011a02:	d1fb      	bne.n	80119fc <graba_bloque_fw+0x478>
}
 8011a04:	46c0      	nop			@ (mov r8, r8)
 8011a06:	46c0      	nop			@ (mov r8, r8)
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	b031      	add	sp, #196	@ 0xc4
 8011a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0e:	46c0      	nop			@ (mov r8, r8)
 8011a10:	0801c6ec 	.word	0x0801c6ec
 8011a14:	200009e4 	.word	0x200009e4
 8011a18:	20000274 	.word	0x20000274

08011a1c <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 8011a20:	4b8b      	ldr	r3, [pc, #556]	@ (8011c50 <voltmetro+0x234>)
 8011a22:	799b      	ldrb	r3, [r3, #6]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d100      	bne.n	8011a2a <voltmetro+0xe>
 8011a28:	e0fb      	b.n	8011c22 <voltmetro+0x206>
					goto voltmetro1;
 8011a2a:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 8011a2c:	4b89      	ldr	r3, [pc, #548]	@ (8011c54 <voltmetro+0x238>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	3301      	adds	r3, #1
 8011a32:	b2da      	uxtb	r2, r3
 8011a34:	4b87      	ldr	r3, [pc, #540]	@ (8011c54 <voltmetro+0x238>)
 8011a36:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 8011a38:	4b86      	ldr	r3, [pc, #536]	@ (8011c54 <voltmetro+0x238>)
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	2b18      	cmp	r3, #24
 8011a3e:	d800      	bhi.n	8011a42 <voltmetro+0x26>
 8011a40:	e06f      	b.n	8011b22 <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 8011a42:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 8011a44:	4b83      	ldr	r3, [pc, #524]	@ (8011c54 <voltmetro+0x238>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 8011a4a:	4b83      	ldr	r3, [pc, #524]	@ (8011c58 <voltmetro+0x23c>)
 8011a4c:	781a      	ldrb	r2, [r3, #0]
 8011a4e:	4b83      	ldr	r3, [pc, #524]	@ (8011c5c <voltmetro+0x240>)
 8011a50:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 8011a52:	4b82      	ldr	r3, [pc, #520]	@ (8011c5c <voltmetro+0x240>)
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	2bff      	cmp	r3, #255	@ 0xff
 8011a58:	d10a      	bne.n	8011a70 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 8011a5a:	4b81      	ldr	r3, [pc, #516]	@ (8011c60 <voltmetro+0x244>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	d019      	beq.n	8011a96 <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 8011a62:	4b7f      	ldr	r3, [pc, #508]	@ (8011c60 <voltmetro+0x244>)
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	3301      	adds	r3, #1
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8011c60 <voltmetro+0x244>)
 8011a6c:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8011a6e:	e05b      	b.n	8011b28 <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 8011a70:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 8011a72:	4b7b      	ldr	r3, [pc, #492]	@ (8011c60 <voltmetro+0x244>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 8011a78:	4b78      	ldr	r3, [pc, #480]	@ (8011c5c <voltmetro+0x240>)
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2b32      	cmp	r3, #50	@ 0x32
 8011a7e:	d82a      	bhi.n	8011ad6 <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 8011a80:	4b78      	ldr	r3, [pc, #480]	@ (8011c64 <voltmetro+0x248>)
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	d008      	beq.n	8011a9a <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 8011a88:	4b76      	ldr	r3, [pc, #472]	@ (8011c64 <voltmetro+0x248>)
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	4b74      	ldr	r3, [pc, #464]	@ (8011c64 <voltmetro+0x248>)
 8011a92:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8011a94:	e048      	b.n	8011b28 <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 8011a96:	46c0      	nop			@ (mov r8, r8)
 8011a98:	e000      	b.n	8011a9c <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 8011a9a:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8011a9c:	4b72      	ldr	r3, [pc, #456]	@ (8011c68 <voltmetro+0x24c>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 8011aa2:	4b72      	ldr	r3, [pc, #456]	@ (8011c6c <voltmetro+0x250>)
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d103      	bne.n	8011ab2 <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 8011aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8011c68 <voltmetro+0x24c>)
 8011aac:	2201      	movs	r2, #1
 8011aae:	701a      	strb	r2, [r3, #0]
 8011ab0:	e000      	b.n	8011ab4 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 8011ab2:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 8011ab4:	4b6e      	ldr	r3, [pc, #440]	@ (8011c70 <voltmetro+0x254>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 8011aba:	4b6e      	ldr	r3, [pc, #440]	@ (8011c74 <voltmetro+0x258>)
 8011abc:	2273      	movs	r2, #115	@ 0x73
 8011abe:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 8011ac0:	4b6d      	ldr	r3, [pc, #436]	@ (8011c78 <voltmetro+0x25c>)
 8011ac2:	2257      	movs	r2, #87	@ 0x57
 8011ac4:	5c9b      	ldrb	r3, [r3, r2]
 8011ac6:	2b02      	cmp	r3, #2
 8011ac8:	d103      	bne.n	8011ad2 <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 8011aca:	4b6a      	ldr	r3, [pc, #424]	@ (8011c74 <voltmetro+0x258>)
 8011acc:	22d2      	movs	r2, #210	@ 0xd2
 8011ace:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 8011ad0:	e02a      	b.n	8011b28 <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 8011ad2:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 8011ad4:	e028      	b.n	8011b28 <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 8011ad6:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 8011ad8:	4b62      	ldr	r3, [pc, #392]	@ (8011c64 <voltmetro+0x248>)
 8011ada:	2200      	movs	r2, #0
 8011adc:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8011ade:	4b62      	ldr	r3, [pc, #392]	@ (8011c68 <voltmetro+0x24c>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 8011ae4:	4b62      	ldr	r3, [pc, #392]	@ (8011c70 <voltmetro+0x254>)
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	001a      	movs	r2, r3
 8011aea:	4b5c      	ldr	r3, [pc, #368]	@ (8011c5c <voltmetro+0x240>)
 8011aec:	7819      	ldrb	r1, [r3, #0]
 8011aee:	4b63      	ldr	r3, [pc, #396]	@ (8011c7c <voltmetro+0x260>)
 8011af0:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 8011af2:	4b5f      	ldr	r3, [pc, #380]	@ (8011c70 <voltmetro+0x254>)
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	3301      	adds	r3, #1
 8011af8:	b2da      	uxtb	r2, r3
 8011afa:	4b5d      	ldr	r3, [pc, #372]	@ (8011c70 <voltmetro+0x254>)
 8011afc:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 8011afe:	4b5c      	ldr	r3, [pc, #368]	@ (8011c70 <voltmetro+0x254>)
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	2b07      	cmp	r3, #7
 8011b04:	d90f      	bls.n	8011b26 <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 8011b06:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 8011b08:	4b59      	ldr	r3, [pc, #356]	@ (8011c70 <voltmetro+0x254>)
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 8011b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8011c7c <voltmetro+0x260>)
 8011b10:	2108      	movs	r1, #8
 8011b12:	0018      	movs	r0, r3
 8011b14:	f7f3 ff32 	bl	800597c <prom8m1b>
 8011b18:	0003      	movs	r3, r0
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	4b55      	ldr	r3, [pc, #340]	@ (8011c74 <voltmetro+0x258>)
 8011b1e:	701a      	strb	r2, [r3, #0]
 8011b20:	e002      	b.n	8011b28 <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 8011b22:	46c0      	nop			@ (mov r8, r8)
 8011b24:	e000      	b.n	8011b28 <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 8011b26:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 8011b28:	4b55      	ldr	r3, [pc, #340]	@ (8011c80 <voltmetro+0x264>)
 8011b2a:	79db      	ldrb	r3, [r3, #7]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d104      	bne.n	8011b3a <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 8011b30:	4b54      	ldr	r3, [pc, #336]	@ (8011c84 <voltmetro+0x268>)
 8011b32:	781a      	ldrb	r2, [r3, #0]
 8011b34:	4b54      	ldr	r3, [pc, #336]	@ (8011c88 <voltmetro+0x26c>)
 8011b36:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 8011b38:	e004      	b.n	8011b44 <voltmetro+0x128>
					goto hist_vla;
 8011b3a:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 8011b3c:	4b53      	ldr	r3, [pc, #332]	@ (8011c8c <voltmetro+0x270>)
 8011b3e:	781a      	ldrb	r2, [r3, #0]
 8011b40:	4b51      	ldr	r3, [pc, #324]	@ (8011c88 <voltmetro+0x26c>)
 8011b42:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 8011b44:	4b50      	ldr	r3, [pc, #320]	@ (8011c88 <voltmetro+0x26c>)
 8011b46:	781a      	ldrb	r2, [r3, #0]
 8011b48:	4b4a      	ldr	r3, [pc, #296]	@ (8011c74 <voltmetro+0x258>)
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d80c      	bhi.n	8011b6a <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 8011b50:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 8011b52:	4b4f      	ldr	r3, [pc, #316]	@ (8011c90 <voltmetro+0x274>)
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d165      	bne.n	8011c26 <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 8011b5a:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 8011b5c:	4948      	ldr	r1, [pc, #288]	@ (8011c80 <voltmetro+0x264>)
 8011b5e:	4848      	ldr	r0, [pc, #288]	@ (8011c80 <voltmetro+0x264>)
 8011b60:	2306      	movs	r3, #6
 8011b62:	2207      	movs	r2, #7
 8011b64:	f7fb ff04 	bl	800d970 <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 8011b68:	e02e      	b.n	8011bc8 <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 8011b6a:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 8011b6c:	4b42      	ldr	r3, [pc, #264]	@ (8011c78 <voltmetro+0x25c>)
 8011b6e:	2245      	movs	r2, #69	@ 0x45
 8011b70:	5c9a      	ldrb	r2, [r3, r2]
 8011b72:	4b47      	ldr	r3, [pc, #284]	@ (8011c90 <voltmetro+0x274>)
 8011b74:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 8011b76:	4b3d      	ldr	r3, [pc, #244]	@ (8011c6c <voltmetro+0x250>)
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d103      	bne.n	8011b86 <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 8011b7e:	4b44      	ldr	r3, [pc, #272]	@ (8011c90 <voltmetro+0x274>)
 8011b80:	2202      	movs	r2, #2
 8011b82:	701a      	strb	r2, [r3, #0]
 8011b84:	e000      	b.n	8011b88 <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 8011b86:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 8011b88:	4b3d      	ldr	r3, [pc, #244]	@ (8011c80 <voltmetro+0x264>)
 8011b8a:	799b      	ldrb	r3, [r3, #6]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d104      	bne.n	8011b9a <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 8011b90:	4b40      	ldr	r3, [pc, #256]	@ (8011c94 <voltmetro+0x278>)
 8011b92:	781a      	ldrb	r2, [r3, #0]
 8011b94:	4b3c      	ldr	r3, [pc, #240]	@ (8011c88 <voltmetro+0x26c>)
 8011b96:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 8011b98:	e004      	b.n	8011ba4 <voltmetro+0x188>
						goto hist_vlb; //
 8011b9a:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 8011b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8011c98 <voltmetro+0x27c>)
 8011b9e:	781a      	ldrb	r2, [r3, #0]
 8011ba0:	4b39      	ldr	r3, [pc, #228]	@ (8011c88 <voltmetro+0x26c>)
 8011ba2:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 8011ba4:	4b38      	ldr	r3, [pc, #224]	@ (8011c88 <voltmetro+0x26c>)
 8011ba6:	781a      	ldrb	r2, [r3, #0]
 8011ba8:	4b32      	ldr	r3, [pc, #200]	@ (8011c74 <voltmetro+0x258>)
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d31d      	bcc.n	8011bec <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 8011bb0:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 8011bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8011c9c <voltmetro+0x280>)
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d137      	bne.n	8011c2a <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 8011bba:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 8011bbc:	4930      	ldr	r1, [pc, #192]	@ (8011c80 <voltmetro+0x264>)
 8011bbe:	4830      	ldr	r0, [pc, #192]	@ (8011c80 <voltmetro+0x264>)
 8011bc0:	2307      	movs	r3, #7
 8011bc2:	2206      	movs	r2, #6
 8011bc4:	f7fb fed4 	bl	800d970 <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 8011bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8011c78 <voltmetro+0x25c>)
 8011bca:	2263      	movs	r2, #99	@ 0x63
 8011bcc:	5c9a      	ldrb	r2, [r3, r2]
 8011bce:	4b23      	ldr	r3, [pc, #140]	@ (8011c5c <voltmetro+0x240>)
 8011bd0:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 8011bd2:	f7f4 febb 	bl	800694c <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 8011bd6:	4b32      	ldr	r3, [pc, #200]	@ (8011ca0 <voltmetro+0x284>)
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	021b      	lsls	r3, r3, #8
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	4a31      	ldr	r2, [pc, #196]	@ (8011ca4 <voltmetro+0x288>)
 8011be0:	7812      	ldrb	r2, [r2, #0]
 8011be2:	189b      	adds	r3, r3, r2
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	4b30      	ldr	r3, [pc, #192]	@ (8011ca8 <voltmetro+0x28c>)
 8011be8:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 8011bea:	e021      	b.n	8011c30 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 8011bec:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 8011bee:	4b22      	ldr	r3, [pc, #136]	@ (8011c78 <voltmetro+0x25c>)
 8011bf0:	2245      	movs	r2, #69	@ 0x45
 8011bf2:	5c9a      	ldrb	r2, [r3, r2]
 8011bf4:	4b29      	ldr	r3, [pc, #164]	@ (8011c9c <voltmetro+0x280>)
 8011bf6:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 8011bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8011c6c <voltmetro+0x250>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	d103      	bne.n	8011c08 <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 8011c00:	4b26      	ldr	r3, [pc, #152]	@ (8011c9c <voltmetro+0x280>)
 8011c02:	2202      	movs	r2, #2
 8011c04:	701a      	strb	r2, [r3, #0]
 8011c06:	e000      	b.n	8011c0a <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 8011c08:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 8011c0a:	4b27      	ldr	r3, [pc, #156]	@ (8011ca8 <voltmetro+0x28c>)
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d10d      	bne.n	8011c2e <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 8011c12:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011c14:	491a      	ldr	r1, [pc, #104]	@ (8011c80 <voltmetro+0x264>)
 8011c16:	481a      	ldr	r0, [pc, #104]	@ (8011c80 <voltmetro+0x264>)
 8011c18:	2307      	movs	r3, #7
 8011c1a:	2206      	movs	r2, #6
 8011c1c:	f7fb fec3 	bl	800d9a6 <Bclear_Clear_trfst>
 8011c20:	e006      	b.n	8011c30 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 8011c22:	46c0      	nop			@ (mov r8, r8)
 8011c24:	e004      	b.n	8011c30 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 8011c26:	46c0      	nop			@ (mov r8, r8)
 8011c28:	e002      	b.n	8011c30 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 8011c2a:	46c0      	nop			@ (mov r8, r8)
 8011c2c:	e000      	b.n	8011c30 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 8011c2e:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 8011c30:	4b07      	ldr	r3, [pc, #28]	@ (8011c50 <voltmetro+0x234>)
 8011c32:	799b      	ldrb	r3, [r3, #6]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011c38:	4911      	ldr	r1, [pc, #68]	@ (8011c80 <voltmetro+0x264>)
 8011c3a:	4811      	ldr	r0, [pc, #68]	@ (8011c80 <voltmetro+0x264>)
 8011c3c:	2307      	movs	r3, #7
 8011c3e:	2206      	movs	r2, #6
 8011c40:	f7fb feb1 	bl	800d9a6 <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 8011c44:	e000      	b.n	8011c48 <voltmetro+0x22c>
						goto fin_voltmetro1;
 8011c46:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 8011c48:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 8011c4a:	46c0      	nop			@ (mov r8, r8)
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	20000c00 	.word	0x20000c00
 8011c54:	20000c28 	.word	0x20000c28
 8011c58:	20000ba5 	.word	0x20000ba5
 8011c5c:	20000bb3 	.word	0x20000bb3
 8011c60:	20000c86 	.word	0x20000c86
 8011c64:	20000c85 	.word	0x20000c85
 8011c68:	20000bdc 	.word	0x20000bdc
 8011c6c:	20000bf4 	.word	0x20000bf4
 8011c70:	20000c29 	.word	0x20000c29
 8011c74:	20000c2a 	.word	0x20000c2a
 8011c78:	200000b8 	.word	0x200000b8
 8011c7c:	20000cc4 	.word	0x20000cc4
 8011c80:	20000be4 	.word	0x20000be4
 8011c84:	20000c7f 	.word	0x20000c7f
 8011c88:	20000930 	.word	0x20000930
 8011c8c:	20000c81 	.word	0x20000c81
 8011c90:	20000bcd 	.word	0x20000bcd
 8011c94:	20000c80 	.word	0x20000c80
 8011c98:	20000c82 	.word	0x20000c82
 8011c9c:	20000bcc 	.word	0x20000bcc
 8011ca0:	20000ba7 	.word	0x20000ba7
 8011ca4:	20000ba8 	.word	0x20000ba8
 8011ca8:	20000bc4 	.word	0x20000bc4

08011cac <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0


			memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 8011cb2:	f7f5 fc33 	bl	800751c <memodriver>
//;------------------------------------------------------------------------------------------------------------------
//;							supervicion de timeout token wifi - ble
//;------------------------------------------------------------------------------------------------------------------
			//ldw		X,timeoutTBLE;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTBLE == 1)//jreq	resetComMod;					/
 8011cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8011e68 <watch+0x1bc>)
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d004      	beq.n	8011cc8 <watch+0x1c>
				goto resetComMod;
			//ldw		X,timeoutTWF;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTWF != 1)//jrne	fallas_temp;					/ No, continúa
 8011cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8011e6c <watch+0x1c0>)
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d143      	bne.n	8011d4e <watch+0xa2>
				goto fallas_temp;
resetComMod:
 8011cc6:	e000      	b.n	8011cca <watch+0x1e>
				goto resetComMod;
 8011cc8:	46c0      	nop			@ (mov r8, r8)
			timeTxTBLE = 20;	//mov		timeTxTBLE,#20
 8011cca:	4b69      	ldr	r3, [pc, #420]	@ (8011e70 <watch+0x1c4>)
 8011ccc:	2214      	movs	r2, #20
 8011cce:	701a      	strb	r2, [r3, #0]
			flagsTX2[2] =0;		//bres	flagsTX2,#2;					/ sí, cancela bandera de token recibido
 8011cd0:	4b68      	ldr	r3, [pc, #416]	@ (8011e74 <watch+0x1c8>)
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	709a      	strb	r2, [r3, #2]
			//ldw		X,#300;
			timeoutTBLE = 300;	//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 8011cd6:	4b64      	ldr	r3, [pc, #400]	@ (8011e68 <watch+0x1bc>)
 8011cd8:	2296      	movs	r2, #150	@ 0x96
 8011cda:	0052      	lsls	r2, r2, #1
 8011cdc:	801a      	strh	r2, [r3, #0]

			timeTxTWF = 30;			//mov		timeTxTWF,#30
 8011cde:	4b66      	ldr	r3, [pc, #408]	@ (8011e78 <watch+0x1cc>)
 8011ce0:	221e      	movs	r2, #30
 8011ce2:	701a      	strb	r2, [r3, #0]
			flagsTX2 [1] = 0; 		//bres	flagsTX2,#1;					/ sí, cancela bandera de token recibido
 8011ce4:	4b63      	ldr	r3, [pc, #396]	@ (8011e74 <watch+0x1c8>)
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	705a      	strb	r2, [r3, #1]
			timeRstBLE = 5;			//mov		timeRstBLE,#5;				/ carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 8011cea:	4b64      	ldr	r3, [pc, #400]	@ (8011e7c <watch+0x1d0>)
 8011cec:	2205      	movs	r2, #5
 8011cee:	701a      	strb	r2, [r3, #0]
			//ldw		X,#300;
			timeoutTWF = 300;		//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 8011cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8011e6c <watch+0x1c0>)
 8011cf2:	2296      	movs	r2, #150	@ 0x96
 8011cf4:	0052      	lsls	r2, r2, #1
 8011cf6:	801a      	strh	r2, [r3, #0]
			keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 8011cf8:	4b61      	ldr	r3, [pc, #388]	@ (8011e80 <watch+0x1d4>)
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<8; i++){
 8011cfe:	1dfb      	adds	r3, r7, #7
 8011d00:	2200      	movs	r2, #0
 8011d02:	701a      	strb	r2, [r3, #0]
 8011d04:	e018      	b.n	8011d38 <watch+0x8c>
				flagsTX[i] = 0;		//clr		flagsTX
 8011d06:	1dfb      	adds	r3, r7, #7
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8011e84 <watch+0x1d8>)
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	54d1      	strb	r1, [r2, r3]
				flagsRxFirm[i]= 0;	//clr		flagsRxFirm
 8011d10:	1dfb      	adds	r3, r7, #7
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	4a5c      	ldr	r2, [pc, #368]	@ (8011e88 <watch+0x1dc>)
 8011d16:	2100      	movs	r1, #0
 8011d18:	54d1      	strb	r1, [r2, r3]
				flagsTxControl[i] = 0; // clr		flagsTxControl
 8011d1a:	1dfb      	adds	r3, r7, #7
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8011e8c <watch+0x1e0>)
 8011d20:	2100      	movs	r1, #0
 8011d22:	54d1      	strb	r1, [r2, r3]
				flagsWIFI[i] = 0; 		//clr		flagsWIFI
 8011d24:	1dfb      	adds	r3, r7, #7
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	4a59      	ldr	r2, [pc, #356]	@ (8011e90 <watch+0x1e4>)
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<8; i++){
 8011d2e:	1dfb      	adds	r3, r7, #7
 8011d30:	781a      	ldrb	r2, [r3, #0]
 8011d32:	1dfb      	adds	r3, r7, #7
 8011d34:	3201      	adds	r2, #1
 8011d36:	701a      	strb	r2, [r3, #0]
 8011d38:	1dfb      	adds	r3, r7, #7
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2b07      	cmp	r3, #7
 8011d3e:	d9e2      	bls.n	8011d06 <watch+0x5a>
			}

			flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 8011d40:	4b54      	ldr	r3, [pc, #336]	@ (8011e94 <watch+0x1e8>)
 8011d42:	2200      	movs	r2, #0
 8011d44:	711a      	strb	r2, [r3, #4]
			flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 8011d46:	4b53      	ldr	r3, [pc, #332]	@ (8011e94 <watch+0x1e8>)
 8011d48:	2200      	movs	r2, #0
 8011d4a:	715a      	strb	r2, [r3, #5]
 8011d4c:	e000      	b.n	8011d50 <watch+0xa4>
				goto fallas_temp;
 8011d4e:	46c0      	nop			@ (mov r8, r8)
fallas_temp:

////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 8011d50:	4b51      	ldr	r3, [pc, #324]	@ (8011e98 <watch+0x1ec>)
 8011d52:	2200      	movs	r2, #0
 8011d54:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 8011d56:	4b50      	ldr	r3, [pc, #320]	@ (8011e98 <watch+0x1ec>)
 8011d58:	2200      	movs	r2, #0
 8011d5a:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 8011d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8011e98 <watch+0x1ec>)
 8011d5e:	2200      	movs	r2, #0
 8011d60:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 8011d62:	4b4d      	ldr	r3, [pc, #308]	@ (8011e98 <watch+0x1ec>)
 8011d64:	2200      	movs	r2, #0
 8011d66:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 8011d68:	4b4b      	ldr	r3, [pc, #300]	@ (8011e98 <watch+0x1ec>)
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 8011d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8011e9c <watch+0x1f0>)
 8011d70:	785b      	ldrb	r3, [r3, #1]
 8011d72:	2201      	movs	r2, #1
 8011d74:	4053      	eors	r3, r2
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d103      	bne.n	8011d84 <watch+0xd8>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 8011d7c:	4b46      	ldr	r3, [pc, #280]	@ (8011e98 <watch+0x1ec>)
 8011d7e:	2201      	movs	r2, #1
 8011d80:	715a      	strb	r2, [r3, #5]
 8011d82:	e000      	b.n	8011d86 <watch+0xda>
					goto	jmp_watch_02;
 8011d84:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 8011d86:	4b46      	ldr	r3, [pc, #280]	@ (8011ea0 <watch+0x1f4>)
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d000      	beq.n	8011d90 <watch+0xe4>
 8011d8e:	e064      	b.n	8011e5a <watch+0x1ae>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 8011d90:	4b44      	ldr	r3, [pc, #272]	@ (8011ea4 <watch+0x1f8>)
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	2201      	movs	r2, #1
 8011d96:	4053      	eors	r3, r2
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d107      	bne.n	8011dae <watch+0x102>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 8011d9e:	4b42      	ldr	r3, [pc, #264]	@ (8011ea8 <watch+0x1fc>)
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d108      	bne.n	8011db8 <watch+0x10c>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 8011da6:	4b3c      	ldr	r3, [pc, #240]	@ (8011e98 <watch+0x1ec>)
 8011da8:	2201      	movs	r2, #1
 8011daa:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 8011dac:	e005      	b.n	8011dba <watch+0x10e>
					goto	jmp_watch_03_00;
 8011dae:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8011db0:	4b3d      	ldr	r3, [pc, #244]	@ (8011ea8 <watch+0x1fc>)
 8011db2:	22a4      	movs	r2, #164	@ 0xa4
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	e000      	b.n	8011dba <watch+0x10e>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 8011db8:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 8011dba:	4b3a      	ldr	r3, [pc, #232]	@ (8011ea4 <watch+0x1f8>)
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10c      	bne.n	8011ddc <watch+0x130>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 8011dc2:	4b36      	ldr	r3, [pc, #216]	@ (8011e9c <watch+0x1f0>)
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d103      	bne.n	8011dd2 <watch+0x126>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 8011dca:	4b38      	ldr	r3, [pc, #224]	@ (8011eac <watch+0x200>)
 8011dcc:	220f      	movs	r2, #15
 8011dce:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 8011dd0:	e005      	b.n	8011dde <watch+0x132>
					goto	jmp_watch_04;
 8011dd2:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 8011dd4:	4b35      	ldr	r3, [pc, #212]	@ (8011eac <watch+0x200>)
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	701a      	strb	r2, [r3, #0]
 8011dda:	e000      	b.n	8011dde <watch+0x132>
					goto	jmp_watch_05;
 8011ddc:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 8011dde:	4b31      	ldr	r3, [pc, #196]	@ (8011ea4 <watch+0x1f8>)
 8011de0:	785b      	ldrb	r3, [r3, #1]
 8011de2:	2201      	movs	r2, #1
 8011de4:	4053      	eors	r3, r2
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d107      	bne.n	8011dfc <watch+0x150>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 8011dec:	4b30      	ldr	r3, [pc, #192]	@ (8011eb0 <watch+0x204>)
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d108      	bne.n	8011e06 <watch+0x15a>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 8011df4:	4b28      	ldr	r3, [pc, #160]	@ (8011e98 <watch+0x1ec>)
 8011df6:	2201      	movs	r2, #1
 8011df8:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 8011dfa:	e005      	b.n	8011e08 <watch+0x15c>
					goto	jmp_watch_07_00;
 8011dfc:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8011dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8011eb0 <watch+0x204>)
 8011e00:	2204      	movs	r2, #4
 8011e02:	701a      	strb	r2, [r3, #0]
 8011e04:	e000      	b.n	8011e08 <watch+0x15c>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 8011e06:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 8011e08:	4b26      	ldr	r3, [pc, #152]	@ (8011ea4 <watch+0x1f8>)
 8011e0a:	789b      	ldrb	r3, [r3, #2]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	4053      	eors	r3, r2
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d107      	bne.n	8011e26 <watch+0x17a>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 8011e16:	4b27      	ldr	r3, [pc, #156]	@ (8011eb4 <watch+0x208>)
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d108      	bne.n	8011e30 <watch+0x184>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 8011e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8011e98 <watch+0x1ec>)
 8011e20:	2201      	movs	r2, #1
 8011e22:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 8011e24:	e005      	b.n	8011e32 <watch+0x186>
					goto	jmp_watch_11_00;
 8011e26:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8011e28:	4b22      	ldr	r3, [pc, #136]	@ (8011eb4 <watch+0x208>)
 8011e2a:	220f      	movs	r2, #15
 8011e2c:	701a      	strb	r2, [r3, #0]
 8011e2e:	e000      	b.n	8011e32 <watch+0x186>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 8011e30:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 8011e32:	4b1a      	ldr	r3, [pc, #104]	@ (8011e9c <watch+0x1f0>)
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2201      	movs	r2, #1
 8011e38:	4053      	eors	r3, r2
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d107      	bne.n	8011e50 <watch+0x1a4>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 8011e40:	4b1d      	ldr	r3, [pc, #116]	@ (8011eb8 <watch+0x20c>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d10a      	bne.n	8011e5e <watch+0x1b2>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 8011e48:	4b13      	ldr	r3, [pc, #76]	@ (8011e98 <watch+0x1ec>)
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 8011e4e:	e007      	b.n	8011e60 <watch+0x1b4>
					goto jmp_watch_12_00;
 8011e50:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8011e52:	4b19      	ldr	r3, [pc, #100]	@ (8011eb8 <watch+0x20c>)
 8011e54:	22c5      	movs	r2, #197	@ 0xc5
 8011e56:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 8011e58:	e002      	b.n	8011e60 <watch+0x1b4>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 8011e5a:	46c0      	nop			@ (mov r8, r8)
 8011e5c:	e000      	b.n	8011e60 <watch+0x1b4>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 8011e5e:	46c0      	nop			@ (mov r8, r8)
}
 8011e60:	46c0      	nop			@ (mov r8, r8)
 8011e62:	46bd      	mov	sp, r7
 8011e64:	b002      	add	sp, #8
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	200011e4 	.word	0x200011e4
 8011e6c:	20001034 	.word	0x20001034
 8011e70:	200011e2 	.word	0x200011e2
 8011e74:	2000102c 	.word	0x2000102c
 8011e78:	20001022 	.word	0x20001022
 8011e7c:	20000fd0 	.word	0x20000fd0
 8011e80:	20000f01 	.word	0x20000f01
 8011e84:	20000f04 	.word	0x20000f04
 8011e88:	20000fc4 	.word	0x20000fc4
 8011e8c:	200011d4 	.word	0x200011d4
 8011e90:	20001038 	.word	0x20001038
 8011e94:	20000eec 	.word	0x20000eec
 8011e98:	20000bb4 	.word	0x20000bb4
 8011e9c:	20000c3c 	.word	0x20000c3c
 8011ea0:	20000cad 	.word	0x20000cad
 8011ea4:	20000c00 	.word	0x20000c00
 8011ea8:	20000cb2 	.word	0x20000cb2
 8011eac:	20000bd0 	.word	0x20000bd0
 8011eb0:	20000cb3 	.word	0x20000cb3
 8011eb4:	20000cb5 	.word	0x20000cb5
 8011eb8:	20000cb4 	.word	0x20000cb4

08011ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011ebc:	480d      	ldr	r0, [pc, #52]	@ (8011ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011ebe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011ec0:	f7fa fd62 	bl	800c988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011ec4:	480c      	ldr	r0, [pc, #48]	@ (8011ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8011ec6:	490d      	ldr	r1, [pc, #52]	@ (8011efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8011ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8011f00 <LoopForever+0xe>)
  movs r3, #0
 8011eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011ecc:	e002      	b.n	8011ed4 <LoopCopyDataInit>

08011ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011ed2:	3304      	adds	r3, #4

08011ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011ed8:	d3f9      	bcc.n	8011ece <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011eda:	4a0a      	ldr	r2, [pc, #40]	@ (8011f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011edc:	4c0a      	ldr	r4, [pc, #40]	@ (8011f08 <LoopForever+0x16>)
  movs r3, #0
 8011ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011ee0:	e001      	b.n	8011ee6 <LoopFillZerobss>

08011ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011ee4:	3204      	adds	r2, #4

08011ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011ee8:	d3fb      	bcc.n	8011ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8011eea:	f00a f96f 	bl	801c1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011eee:	f7f7 fccd 	bl	800988c <main>

08011ef2 <LoopForever>:

LoopForever:
  b LoopForever
 8011ef2:	e7fe      	b.n	8011ef2 <LoopForever>
  ldr   r0, =_estack
 8011ef4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8011ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011efc:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8011f00:	0801c830 	.word	0x0801c830
  ldr r2, =_sbss
 8011f04:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8011f08:	200013d0 	.word	0x200013d0

08011f0c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011f0c:	e7fe      	b.n	8011f0c <ADC_COMP1_2_IRQHandler>

08011f0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b082      	sub	sp, #8
 8011f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011f14:	1dfb      	adds	r3, r7, #7
 8011f16:	2200      	movs	r2, #0
 8011f18:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011f1a:	2003      	movs	r0, #3
 8011f1c:	f000 f80e 	bl	8011f3c <HAL_InitTick>
 8011f20:	1e03      	subs	r3, r0, #0
 8011f22:	d003      	beq.n	8011f2c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8011f24:	1dfb      	adds	r3, r7, #7
 8011f26:	2201      	movs	r2, #1
 8011f28:	701a      	strb	r2, [r3, #0]
 8011f2a:	e001      	b.n	8011f30 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011f2c:	f7f9 ffb2 	bl	800be94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011f30:	1dfb      	adds	r3, r7, #7
 8011f32:	781b      	ldrb	r3, [r3, #0]
}
 8011f34:	0018      	movs	r0, r3
 8011f36:	46bd      	mov	sp, r7
 8011f38:	b002      	add	sp, #8
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011f3c:	b590      	push	{r4, r7, lr}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011f44:	230f      	movs	r3, #15
 8011f46:	18fb      	adds	r3, r7, r3
 8011f48:	2200      	movs	r2, #0
 8011f4a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8011f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8011fc4 <HAL_InitTick+0x88>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d02b      	beq.n	8011fac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8011f54:	4b1c      	ldr	r3, [pc, #112]	@ (8011fc8 <HAL_InitTick+0x8c>)
 8011f56:	681c      	ldr	r4, [r3, #0]
 8011f58:	4b1a      	ldr	r3, [pc, #104]	@ (8011fc4 <HAL_InitTick+0x88>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	0019      	movs	r1, r3
 8011f5e:	23fa      	movs	r3, #250	@ 0xfa
 8011f60:	0098      	lsls	r0, r3, #2
 8011f62:	f7ee f8d9 	bl	8000118 <__udivsi3>
 8011f66:	0003      	movs	r3, r0
 8011f68:	0019      	movs	r1, r3
 8011f6a:	0020      	movs	r0, r4
 8011f6c:	f7ee f8d4 	bl	8000118 <__udivsi3>
 8011f70:	0003      	movs	r3, r0
 8011f72:	0018      	movs	r0, r3
 8011f74:	f001 fbd3 	bl	801371e <HAL_SYSTICK_Config>
 8011f78:	1e03      	subs	r3, r0, #0
 8011f7a:	d112      	bne.n	8011fa2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2b03      	cmp	r3, #3
 8011f80:	d80a      	bhi.n	8011f98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011f82:	6879      	ldr	r1, [r7, #4]
 8011f84:	2301      	movs	r3, #1
 8011f86:	425b      	negs	r3, r3
 8011f88:	2200      	movs	r2, #0
 8011f8a:	0018      	movs	r0, r3
 8011f8c:	f001 fb92 	bl	80136b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011f90:	4b0e      	ldr	r3, [pc, #56]	@ (8011fcc <HAL_InitTick+0x90>)
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	e00d      	b.n	8011fb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8011f98:	230f      	movs	r3, #15
 8011f9a:	18fb      	adds	r3, r7, r3
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	701a      	strb	r2, [r3, #0]
 8011fa0:	e008      	b.n	8011fb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011fa2:	230f      	movs	r3, #15
 8011fa4:	18fb      	adds	r3, r7, r3
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	701a      	strb	r2, [r3, #0]
 8011faa:	e003      	b.n	8011fb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011fac:	230f      	movs	r3, #15
 8011fae:	18fb      	adds	r3, r7, r3
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8011fb4:	230f      	movs	r3, #15
 8011fb6:	18fb      	adds	r3, r7, r3
 8011fb8:	781b      	ldrb	r3, [r3, #0]
}
 8011fba:	0018      	movs	r0, r3
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	b005      	add	sp, #20
 8011fc0:	bd90      	pop	{r4, r7, pc}
 8011fc2:	46c0      	nop			@ (mov r8, r8)
 8011fc4:	20000280 	.word	0x20000280
 8011fc8:	2000025c 	.word	0x2000025c
 8011fcc:	2000027c 	.word	0x2000027c

08011fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011fd4:	4b04      	ldr	r3, [pc, #16]	@ (8011fe8 <HAL_IncTick+0x18>)
 8011fd6:	681a      	ldr	r2, [r3, #0]
 8011fd8:	4b04      	ldr	r3, [pc, #16]	@ (8011fec <HAL_IncTick+0x1c>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	18d2      	adds	r2, r2, r3
 8011fde:	4b02      	ldr	r3, [pc, #8]	@ (8011fe8 <HAL_IncTick+0x18>)
 8011fe0:	601a      	str	r2, [r3, #0]
}
 8011fe2:	46c0      	nop			@ (mov r8, r8)
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	20001268 	.word	0x20001268
 8011fec:	20000280 	.word	0x20000280

08011ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8011ff4:	4b02      	ldr	r3, [pc, #8]	@ (8012000 <HAL_GetTick+0x10>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
}
 8011ff8:	0018      	movs	r0, r3
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	46c0      	nop			@ (mov r8, r8)
 8012000:	20001268 	.word	0x20001268

08012004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801200c:	f7ff fff0 	bl	8011ff0 <HAL_GetTick>
 8012010:	0003      	movs	r3, r0
 8012012:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	3301      	adds	r3, #1
 801201c:	d004      	beq.n	8012028 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801201e:	4b09      	ldr	r3, [pc, #36]	@ (8012044 <HAL_Delay+0x40>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	18d3      	adds	r3, r2, r3
 8012026:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012028:	46c0      	nop			@ (mov r8, r8)
 801202a:	f7ff ffe1 	bl	8011ff0 <HAL_GetTick>
 801202e:	0002      	movs	r2, r0
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	1ad3      	subs	r3, r2, r3
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	429a      	cmp	r2, r3
 8012038:	d8f7      	bhi.n	801202a <HAL_Delay+0x26>
  {
  }
}
 801203a:	46c0      	nop			@ (mov r8, r8)
 801203c:	46c0      	nop			@ (mov r8, r8)
 801203e:	46bd      	mov	sp, r7
 8012040:	b004      	add	sp, #16
 8012042:	bd80      	pop	{r7, pc}
 8012044:	20000280 	.word	0x20000280

08012048 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 801204c:	4b04      	ldr	r3, [pc, #16]	@ (8012060 <HAL_SuspendTick+0x18>)
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	4b03      	ldr	r3, [pc, #12]	@ (8012060 <HAL_SuspendTick+0x18>)
 8012052:	2102      	movs	r1, #2
 8012054:	438a      	bics	r2, r1
 8012056:	601a      	str	r2, [r3, #0]
}
 8012058:	46c0      	nop			@ (mov r8, r8)
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	46c0      	nop			@ (mov r8, r8)
 8012060:	e000e010 	.word	0xe000e010

08012064 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8012068:	4b04      	ldr	r3, [pc, #16]	@ (801207c <HAL_ResumeTick+0x18>)
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	4b03      	ldr	r3, [pc, #12]	@ (801207c <HAL_ResumeTick+0x18>)
 801206e:	2102      	movs	r1, #2
 8012070:	430a      	orrs	r2, r1
 8012072:	601a      	str	r2, [r3, #0]
}
 8012074:	46c0      	nop			@ (mov r8, r8)
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	46c0      	nop			@ (mov r8, r8)
 801207c:	e000e010 	.word	0xe000e010

08012080 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4a05      	ldr	r2, [pc, #20]	@ (80120a4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8012090:	401a      	ands	r2, r3
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	431a      	orrs	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	601a      	str	r2, [r3, #0]
}
 801209a:	46c0      	nop			@ (mov r8, r8)
 801209c:	46bd      	mov	sp, r7
 801209e:	b002      	add	sp, #8
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	46c0      	nop			@ (mov r8, r8)
 80120a4:	fe3fffff 	.word	0xfe3fffff

080120a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	23e0      	movs	r3, #224	@ 0xe0
 80120b6:	045b      	lsls	r3, r3, #17
 80120b8:	4013      	ands	r3, r2
}
 80120ba:	0018      	movs	r0, r3
 80120bc:	46bd      	mov	sp, r7
 80120be:	b002      	add	sp, #8
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b084      	sub	sp, #16
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	60f8      	str	r0, [r7, #12]
 80120ca:	60b9      	str	r1, [r7, #8]
 80120cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	695b      	ldr	r3, [r3, #20]
 80120d2:	68ba      	ldr	r2, [r7, #8]
 80120d4:	2104      	movs	r1, #4
 80120d6:	400a      	ands	r2, r1
 80120d8:	2107      	movs	r1, #7
 80120da:	4091      	lsls	r1, r2
 80120dc:	000a      	movs	r2, r1
 80120de:	43d2      	mvns	r2, r2
 80120e0:	401a      	ands	r2, r3
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2104      	movs	r1, #4
 80120e6:	400b      	ands	r3, r1
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	4099      	lsls	r1, r3
 80120ec:	000b      	movs	r3, r1
 80120ee:	431a      	orrs	r2, r3
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80120f4:	46c0      	nop			@ (mov r8, r8)
 80120f6:	46bd      	mov	sp, r7
 80120f8:	b004      	add	sp, #16
 80120fa:	bd80      	pop	{r7, pc}

080120fc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	695b      	ldr	r3, [r3, #20]
 801210a:	683a      	ldr	r2, [r7, #0]
 801210c:	2104      	movs	r1, #4
 801210e:	400a      	ands	r2, r1
 8012110:	2107      	movs	r1, #7
 8012112:	4091      	lsls	r1, r2
 8012114:	000a      	movs	r2, r1
 8012116:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	2104      	movs	r1, #4
 801211c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 801211e:	40da      	lsrs	r2, r3
 8012120:	0013      	movs	r3, r2
}
 8012122:	0018      	movs	r0, r3
 8012124:	46bd      	mov	sp, r7
 8012126:	b002      	add	sp, #8
 8012128:	bd80      	pop	{r7, pc}

0801212a <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b084      	sub	sp, #16
 801212e:	af00      	add	r7, sp, #0
 8012130:	60f8      	str	r0, [r7, #12]
 8012132:	60b9      	str	r1, [r7, #8]
 8012134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801213a:	68ba      	ldr	r2, [r7, #8]
 801213c:	211f      	movs	r1, #31
 801213e:	400a      	ands	r2, r1
 8012140:	210f      	movs	r1, #15
 8012142:	4091      	lsls	r1, r2
 8012144:	000a      	movs	r2, r1
 8012146:	43d2      	mvns	r2, r2
 8012148:	401a      	ands	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	0e9b      	lsrs	r3, r3, #26
 801214e:	210f      	movs	r1, #15
 8012150:	4019      	ands	r1, r3
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	201f      	movs	r0, #31
 8012156:	4003      	ands	r3, r0
 8012158:	4099      	lsls	r1, r3
 801215a:	000b      	movs	r3, r1
 801215c:	431a      	orrs	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8012162:	46c0      	nop			@ (mov r8, r8)
 8012164:	46bd      	mov	sp, r7
 8012166:	b004      	add	sp, #16
 8012168:	bd80      	pop	{r7, pc}

0801216a <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b082      	sub	sp, #8
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
 8012172:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	025b      	lsls	r3, r3, #9
 801217c:	0a5b      	lsrs	r3, r3, #9
 801217e:	431a      	orrs	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012184:	46c0      	nop			@ (mov r8, r8)
 8012186:	46bd      	mov	sp, r7
 8012188:	b002      	add	sp, #8
 801218a:	bd80      	pop	{r7, pc}

0801218c <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801219a:	683a      	ldr	r2, [r7, #0]
 801219c:	0252      	lsls	r2, r2, #9
 801219e:	0a52      	lsrs	r2, r2, #9
 80121a0:	43d2      	mvns	r2, r2
 80121a2:	401a      	ands	r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80121a8:	46c0      	nop			@ (mov r8, r8)
 80121aa:	46bd      	mov	sp, r7
 80121ac:	b002      	add	sp, #8
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	695b      	ldr	r3, [r3, #20]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	0212      	lsls	r2, r2, #8
 80121c4:	43d2      	mvns	r2, r2
 80121c6:	401a      	ands	r2, r3
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	021b      	lsls	r3, r3, #8
 80121cc:	6879      	ldr	r1, [r7, #4]
 80121ce:	400b      	ands	r3, r1
 80121d0:	4904      	ldr	r1, [pc, #16]	@ (80121e4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80121d2:	400b      	ands	r3, r1
 80121d4:	431a      	orrs	r2, r3
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80121da:	46c0      	nop			@ (mov r8, r8)
 80121dc:	46bd      	mov	sp, r7
 80121de:	b004      	add	sp, #16
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	46c0      	nop			@ (mov r8, r8)
 80121e4:	7fffff00 	.word	0x7fffff00

080121e8 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	4a11      	ldr	r2, [pc, #68]	@ (801223c <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d103      	bne.n	8012204 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	330c      	adds	r3, #12
 8012200:	617b      	str	r3, [r7, #20]
 8012202:	e009      	b.n	8012218 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	33a0      	adds	r3, #160	@ 0xa0
 8012208:	0019      	movs	r1, r3
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	0d5b      	lsrs	r3, r3, #21
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	2204      	movs	r2, #4
 8012212:	4013      	ands	r3, r2
 8012214:	18cb      	adds	r3, r1, r3
 8012216:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	4908      	ldr	r1, [pc, #32]	@ (8012240 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8012220:	400a      	ands	r2, r1
 8012222:	43d2      	mvns	r2, r2
 8012224:	401a      	ands	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	68b9      	ldr	r1, [r7, #8]
 801222a:	400b      	ands	r3, r1
 801222c:	431a      	orrs	r2, r3
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8012232:	46c0      	nop			@ (mov r8, r8)
 8012234:	46bd      	mov	sp, r7
 8012236:	b006      	add	sp, #24
 8012238:	bd80      	pop	{r7, pc}
 801223a:	46c0      	nop			@ (mov r8, r8)
 801223c:	7cc00000 	.word	0x7cc00000
 8012240:	7cc7ffff 	.word	0x7cc7ffff

08012244 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
 8012250:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	3320      	adds	r3, #32
 8012256:	0018      	movs	r0, r3
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	0d1b      	lsrs	r3, r3, #20
 801225c:	2203      	movs	r2, #3
 801225e:	401a      	ands	r2, r3
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	0d5b      	lsrs	r3, r3, #21
 8012264:	2101      	movs	r1, #1
 8012266:	400b      	ands	r3, r1
 8012268:	18d3      	adds	r3, r2, r3
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	18c3      	adds	r3, r0, r3
 801226e:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4a06      	ldr	r2, [pc, #24]	@ (8012290 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 8012276:	401a      	ands	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	0419      	lsls	r1, r3, #16
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	430b      	orrs	r3, r1
 8012280:	431a      	orrs	r2, r3
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8012286:	46c0      	nop			@ (mov r8, r8)
 8012288:	46bd      	mov	sp, r7
 801228a:	b006      	add	sp, #24
 801228c:	bd80      	pop	{r7, pc}
 801228e:	46c0      	nop			@ (mov r8, r8)
 8012290:	f000f000 	.word	0xf000f000

08012294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	689b      	ldr	r3, [r3, #8]
 80122a0:	4a05      	ldr	r2, [pc, #20]	@ (80122b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80122a2:	4013      	ands	r3, r2
 80122a4:	2280      	movs	r2, #128	@ 0x80
 80122a6:	0552      	lsls	r2, r2, #21
 80122a8:	431a      	orrs	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80122ae:	46c0      	nop			@ (mov r8, r8)
 80122b0:	46bd      	mov	sp, r7
 80122b2:	b002      	add	sp, #8
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	46c0      	nop			@ (mov r8, r8)
 80122b8:	6fffffe8 	.word	0x6fffffe8

080122bc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	4a03      	ldr	r2, [pc, #12]	@ (80122d8 <LL_ADC_DisableInternalRegulator+0x1c>)
 80122ca:	401a      	ands	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	609a      	str	r2, [r3, #8]
}
 80122d0:	46c0      	nop			@ (mov r8, r8)
 80122d2:	46bd      	mov	sp, r7
 80122d4:	b002      	add	sp, #8
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	6fffffe8 	.word	0x6fffffe8

080122dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	689a      	ldr	r2, [r3, #8]
 80122e8:	2380      	movs	r3, #128	@ 0x80
 80122ea:	055b      	lsls	r3, r3, #21
 80122ec:	401a      	ands	r2, r3
 80122ee:	2380      	movs	r3, #128	@ 0x80
 80122f0:	055b      	lsls	r3, r3, #21
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d101      	bne.n	80122fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80122f6:	2301      	movs	r3, #1
 80122f8:	e000      	b.n	80122fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	0018      	movs	r0, r3
 80122fe:	46bd      	mov	sp, r7
 8012300:	b002      	add	sp, #8
 8012302:	bd80      	pop	{r7, pc}

08012304 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	689b      	ldr	r3, [r3, #8]
 8012310:	4a04      	ldr	r2, [pc, #16]	@ (8012324 <LL_ADC_Enable+0x20>)
 8012312:	4013      	ands	r3, r2
 8012314:	2201      	movs	r2, #1
 8012316:	431a      	orrs	r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801231c:	46c0      	nop			@ (mov r8, r8)
 801231e:	46bd      	mov	sp, r7
 8012320:	b002      	add	sp, #8
 8012322:	bd80      	pop	{r7, pc}
 8012324:	7fffffe8 	.word	0x7fffffe8

08012328 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	689b      	ldr	r3, [r3, #8]
 8012334:	4a04      	ldr	r2, [pc, #16]	@ (8012348 <LL_ADC_Disable+0x20>)
 8012336:	4013      	ands	r3, r2
 8012338:	2202      	movs	r2, #2
 801233a:	431a      	orrs	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8012340:	46c0      	nop			@ (mov r8, r8)
 8012342:	46bd      	mov	sp, r7
 8012344:	b002      	add	sp, #8
 8012346:	bd80      	pop	{r7, pc}
 8012348:	7fffffe8 	.word	0x7fffffe8

0801234c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	689b      	ldr	r3, [r3, #8]
 8012358:	2201      	movs	r2, #1
 801235a:	4013      	ands	r3, r2
 801235c:	2b01      	cmp	r3, #1
 801235e:	d101      	bne.n	8012364 <LL_ADC_IsEnabled+0x18>
 8012360:	2301      	movs	r3, #1
 8012362:	e000      	b.n	8012366 <LL_ADC_IsEnabled+0x1a>
 8012364:	2300      	movs	r3, #0
}
 8012366:	0018      	movs	r0, r3
 8012368:	46bd      	mov	sp, r7
 801236a:	b002      	add	sp, #8
 801236c:	bd80      	pop	{r7, pc}

0801236e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 801236e:	b580      	push	{r7, lr}
 8012370:	b082      	sub	sp, #8
 8012372:	af00      	add	r7, sp, #0
 8012374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	2202      	movs	r2, #2
 801237c:	4013      	ands	r3, r2
 801237e:	2b02      	cmp	r3, #2
 8012380:	d101      	bne.n	8012386 <LL_ADC_IsDisableOngoing+0x18>
 8012382:	2301      	movs	r3, #1
 8012384:	e000      	b.n	8012388 <LL_ADC_IsDisableOngoing+0x1a>
 8012386:	2300      	movs	r3, #0
}
 8012388:	0018      	movs	r0, r3
 801238a:	46bd      	mov	sp, r7
 801238c:	b002      	add	sp, #8
 801238e:	bd80      	pop	{r7, pc}

08012390 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	4a04      	ldr	r2, [pc, #16]	@ (80123b0 <LL_ADC_REG_StopConversion+0x20>)
 801239e:	4013      	ands	r3, r2
 80123a0:	2210      	movs	r2, #16
 80123a2:	431a      	orrs	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80123a8:	46c0      	nop			@ (mov r8, r8)
 80123aa:	46bd      	mov	sp, r7
 80123ac:	b002      	add	sp, #8
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	7fffffe8 	.word	0x7fffffe8

080123b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	2204      	movs	r2, #4
 80123c2:	4013      	ands	r3, r2
 80123c4:	2b04      	cmp	r3, #4
 80123c6:	d101      	bne.n	80123cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80123c8:	2301      	movs	r3, #1
 80123ca:	e000      	b.n	80123ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	0018      	movs	r0, r3
 80123d0:	46bd      	mov	sp, r7
 80123d2:	b002      	add	sp, #8
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b082      	sub	sp, #8
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2280      	movs	r2, #128	@ 0x80
 80123e2:	601a      	str	r2, [r3, #0]
}
 80123e4:	46c0      	nop			@ (mov r8, r8)
 80123e6:	46bd      	mov	sp, r7
 80123e8:	b002      	add	sp, #8
 80123ea:	bd80      	pop	{r7, pc}

080123ec <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2280      	movs	r2, #128	@ 0x80
 80123f8:	0052      	lsls	r2, r2, #1
 80123fa:	601a      	str	r2, [r3, #0]
}
 80123fc:	46c0      	nop			@ (mov r8, r8)
 80123fe:	46bd      	mov	sp, r7
 8012400:	b002      	add	sp, #8
 8012402:	bd80      	pop	{r7, pc}

08012404 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2280      	movs	r2, #128	@ 0x80
 8012410:	0092      	lsls	r2, r2, #2
 8012412:	601a      	str	r2, [r3, #0]
}
 8012414:	46c0      	nop			@ (mov r8, r8)
 8012416:	46bd      	mov	sp, r7
 8012418:	b002      	add	sp, #8
 801241a:	bd80      	pop	{r7, pc}

0801241c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	2280      	movs	r2, #128	@ 0x80
 801242a:	431a      	orrs	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	605a      	str	r2, [r3, #4]
}
 8012430:	46c0      	nop			@ (mov r8, r8)
 8012432:	46bd      	mov	sp, r7
 8012434:	b002      	add	sp, #8
 8012436:	bd80      	pop	{r7, pc}

08012438 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	2280      	movs	r2, #128	@ 0x80
 8012446:	0052      	lsls	r2, r2, #1
 8012448:	431a      	orrs	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	605a      	str	r2, [r3, #4]
}
 801244e:	46c0      	nop			@ (mov r8, r8)
 8012450:	46bd      	mov	sp, r7
 8012452:	b002      	add	sp, #8
 8012454:	bd80      	pop	{r7, pc}

08012456 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b082      	sub	sp, #8
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	2280      	movs	r2, #128	@ 0x80
 8012464:	0092      	lsls	r2, r2, #2
 8012466:	431a      	orrs	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	605a      	str	r2, [r3, #4]
}
 801246c:	46c0      	nop			@ (mov r8, r8)
 801246e:	46bd      	mov	sp, r7
 8012470:	b002      	add	sp, #8
 8012472:	bd80      	pop	{r7, pc}

08012474 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	2280      	movs	r2, #128	@ 0x80
 8012482:	4393      	bics	r3, r2
 8012484:	001a      	movs	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	605a      	str	r2, [r3, #4]
}
 801248a:	46c0      	nop			@ (mov r8, r8)
 801248c:	46bd      	mov	sp, r7
 801248e:	b002      	add	sp, #8
 8012490:	bd80      	pop	{r7, pc}
	...

08012494 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	4a03      	ldr	r2, [pc, #12]	@ (80124b0 <LL_ADC_DisableIT_AWD2+0x1c>)
 80124a2:	401a      	ands	r2, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	605a      	str	r2, [r3, #4]
}
 80124a8:	46c0      	nop			@ (mov r8, r8)
 80124aa:	46bd      	mov	sp, r7
 80124ac:	b002      	add	sp, #8
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	fffffeff 	.word	0xfffffeff

080124b4 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4a03      	ldr	r2, [pc, #12]	@ (80124d0 <LL_ADC_DisableIT_AWD3+0x1c>)
 80124c2:	401a      	ands	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	605a      	str	r2, [r3, #4]
}
 80124c8:	46c0      	nop			@ (mov r8, r8)
 80124ca:	46bd      	mov	sp, r7
 80124cc:	b002      	add	sp, #8
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	fffffdff 	.word	0xfffffdff

080124d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80124dc:	231f      	movs	r3, #31
 80124de:	18fb      	adds	r3, r7, r3
 80124e0:	2200      	movs	r2, #0
 80124e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80124e4:	2300      	movs	r3, #0
 80124e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80124e8:	2300      	movs	r3, #0
 80124ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80124ec:	2300      	movs	r3, #0
 80124ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d101      	bne.n	80124fa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80124f6:	2301      	movs	r3, #1
 80124f8:	e17f      	b.n	80127fa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d10a      	bne.n	8012518 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	0018      	movs	r0, r3
 8012506:	f7f9 fce9 	bl	800bedc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2200      	movs	r2, #0
 801250e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2254      	movs	r2, #84	@ 0x54
 8012514:	2100      	movs	r1, #0
 8012516:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	0018      	movs	r0, r3
 801251e:	f7ff fedd 	bl	80122dc <LL_ADC_IsInternalRegulatorEnabled>
 8012522:	1e03      	subs	r3, r0, #0
 8012524:	d115      	bne.n	8012552 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	0018      	movs	r0, r3
 801252c:	f7ff feb2 	bl	8012294 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012530:	4bb4      	ldr	r3, [pc, #720]	@ (8012804 <HAL_ADC_Init+0x330>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	49b4      	ldr	r1, [pc, #720]	@ (8012808 <HAL_ADC_Init+0x334>)
 8012536:	0018      	movs	r0, r3
 8012538:	f7ed fdee 	bl	8000118 <__udivsi3>
 801253c:	0003      	movs	r3, r0
 801253e:	3301      	adds	r3, #1
 8012540:	005b      	lsls	r3, r3, #1
 8012542:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012544:	e002      	b.n	801254c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	3b01      	subs	r3, #1
 801254a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1f9      	bne.n	8012546 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	0018      	movs	r0, r3
 8012558:	f7ff fec0 	bl	80122dc <LL_ADC_IsInternalRegulatorEnabled>
 801255c:	1e03      	subs	r3, r0, #0
 801255e:	d10f      	bne.n	8012580 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012564:	2210      	movs	r2, #16
 8012566:	431a      	orrs	r2, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012570:	2201      	movs	r2, #1
 8012572:	431a      	orrs	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8012578:	231f      	movs	r3, #31
 801257a:	18fb      	adds	r3, r7, r3
 801257c:	2201      	movs	r2, #1
 801257e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	0018      	movs	r0, r3
 8012586:	f7ff ff15 	bl	80123b4 <LL_ADC_REG_IsConversionOngoing>
 801258a:	0003      	movs	r3, r0
 801258c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012592:	2210      	movs	r2, #16
 8012594:	4013      	ands	r3, r2
 8012596:	d000      	beq.n	801259a <HAL_ADC_Init+0xc6>
 8012598:	e122      	b.n	80127e0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d000      	beq.n	80125a2 <HAL_ADC_Init+0xce>
 80125a0:	e11e      	b.n	80127e0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125a6:	4a99      	ldr	r2, [pc, #612]	@ (801280c <HAL_ADC_Init+0x338>)
 80125a8:	4013      	ands	r3, r2
 80125aa:	2202      	movs	r2, #2
 80125ac:	431a      	orrs	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	0018      	movs	r0, r3
 80125b8:	f7ff fec8 	bl	801234c <LL_ADC_IsEnabled>
 80125bc:	1e03      	subs	r3, r0, #0
 80125be:	d000      	beq.n	80125c2 <HAL_ADC_Init+0xee>
 80125c0:	e0ad      	b.n	801271e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	7e1b      	ldrb	r3, [r3, #24]
 80125ca:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80125cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	7e5b      	ldrb	r3, [r3, #25]
 80125d2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80125d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	7e9b      	ldrb	r3, [r3, #26]
 80125da:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80125dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d002      	beq.n	80125ec <HAL_ADC_Init+0x118>
 80125e6:	2380      	movs	r3, #128	@ 0x80
 80125e8:	015b      	lsls	r3, r3, #5
 80125ea:	e000      	b.n	80125ee <HAL_ADC_Init+0x11a>
 80125ec:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80125ee:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80125f4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	691b      	ldr	r3, [r3, #16]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	da04      	bge.n	8012608 <HAL_ADC_Init+0x134>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	005b      	lsls	r3, r3, #1
 8012604:	085b      	lsrs	r3, r3, #1
 8012606:	e001      	b.n	801260c <HAL_ADC_Init+0x138>
 8012608:	2380      	movs	r3, #128	@ 0x80
 801260a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 801260c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	212c      	movs	r1, #44	@ 0x2c
 8012612:	5c5b      	ldrb	r3, [r3, r1]
 8012614:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8012616:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8012618:	69ba      	ldr	r2, [r7, #24]
 801261a:	4313      	orrs	r3, r2
 801261c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2220      	movs	r2, #32
 8012622:	5c9b      	ldrb	r3, [r3, r2]
 8012624:	2b01      	cmp	r3, #1
 8012626:	d115      	bne.n	8012654 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	7e9b      	ldrb	r3, [r3, #26]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d105      	bne.n	801263c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	2280      	movs	r2, #128	@ 0x80
 8012634:	0252      	lsls	r2, r2, #9
 8012636:	4313      	orrs	r3, r2
 8012638:	61bb      	str	r3, [r7, #24]
 801263a:	e00b      	b.n	8012654 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012640:	2220      	movs	r2, #32
 8012642:	431a      	orrs	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801264c:	2201      	movs	r2, #1
 801264e:	431a      	orrs	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012658:	2b00      	cmp	r3, #0
 801265a:	d00a      	beq.n	8012672 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012660:	23e0      	movs	r3, #224	@ 0xe0
 8012662:	005b      	lsls	r3, r3, #1
 8012664:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 801266a:	4313      	orrs	r3, r2
 801266c:	69ba      	ldr	r2, [r7, #24]
 801266e:	4313      	orrs	r3, r2
 8012670:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	4a65      	ldr	r2, [pc, #404]	@ (8012810 <HAL_ADC_Init+0x33c>)
 801267a:	4013      	ands	r3, r2
 801267c:	0019      	movs	r1, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	69ba      	ldr	r2, [r7, #24]
 8012684:	430a      	orrs	r2, r1
 8012686:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	0f9b      	lsrs	r3, r3, #30
 801268e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8012694:	4313      	orrs	r3, r2
 8012696:	697a      	ldr	r2, [r7, #20]
 8012698:	4313      	orrs	r3, r2
 801269a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	223c      	movs	r2, #60	@ 0x3c
 80126a0:	5c9b      	ldrb	r3, [r3, r2]
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d111      	bne.n	80126ca <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	0f9b      	lsrs	r3, r3, #30
 80126ac:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80126b2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80126b8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80126be:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	4313      	orrs	r3, r2
 80126c4:	2201      	movs	r2, #1
 80126c6:	4313      	orrs	r3, r2
 80126c8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	691b      	ldr	r3, [r3, #16]
 80126d0:	4a50      	ldr	r2, [pc, #320]	@ (8012814 <HAL_ADC_Init+0x340>)
 80126d2:	4013      	ands	r3, r2
 80126d4:	0019      	movs	r1, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	697a      	ldr	r2, [r7, #20]
 80126dc:	430a      	orrs	r2, r1
 80126de:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	685a      	ldr	r2, [r3, #4]
 80126e4:	23c0      	movs	r3, #192	@ 0xc0
 80126e6:	061b      	lsls	r3, r3, #24
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d018      	beq.n	801271e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80126f0:	2380      	movs	r3, #128	@ 0x80
 80126f2:	05db      	lsls	r3, r3, #23
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d012      	beq.n	801271e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80126fc:	2380      	movs	r3, #128	@ 0x80
 80126fe:	061b      	lsls	r3, r3, #24
 8012700:	429a      	cmp	r2, r3
 8012702:	d00c      	beq.n	801271e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8012704:	4b44      	ldr	r3, [pc, #272]	@ (8012818 <HAL_ADC_Init+0x344>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4a44      	ldr	r2, [pc, #272]	@ (801281c <HAL_ADC_Init+0x348>)
 801270a:	4013      	ands	r3, r2
 801270c:	0019      	movs	r1, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	685a      	ldr	r2, [r3, #4]
 8012712:	23f0      	movs	r3, #240	@ 0xf0
 8012714:	039b      	lsls	r3, r3, #14
 8012716:	401a      	ands	r2, r3
 8012718:	4b3f      	ldr	r3, [pc, #252]	@ (8012818 <HAL_ADC_Init+0x344>)
 801271a:	430a      	orrs	r2, r1
 801271c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6818      	ldr	r0, [r3, #0]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012726:	001a      	movs	r2, r3
 8012728:	2100      	movs	r1, #0
 801272a:	f7ff fcca 	bl	80120c2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6818      	ldr	r0, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012736:	493a      	ldr	r1, [pc, #232]	@ (8012820 <HAL_ADC_Init+0x34c>)
 8012738:	001a      	movs	r2, r3
 801273a:	f7ff fcc2 	bl	80120c2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	691b      	ldr	r3, [r3, #16]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d109      	bne.n	801275a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2110      	movs	r1, #16
 8012752:	4249      	negs	r1, r1
 8012754:	430a      	orrs	r2, r1
 8012756:	629a      	str	r2, [r3, #40]	@ 0x28
 8012758:	e018      	b.n	801278c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	691a      	ldr	r2, [r3, #16]
 801275e:	2380      	movs	r3, #128	@ 0x80
 8012760:	039b      	lsls	r3, r3, #14
 8012762:	429a      	cmp	r2, r3
 8012764:	d112      	bne.n	801278c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	69db      	ldr	r3, [r3, #28]
 8012770:	3b01      	subs	r3, #1
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	221c      	movs	r2, #28
 8012776:	4013      	ands	r3, r2
 8012778:	2210      	movs	r2, #16
 801277a:	4252      	negs	r2, r2
 801277c:	409a      	lsls	r2, r3
 801277e:	0011      	movs	r1, r2
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	430a      	orrs	r2, r1
 801278a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2100      	movs	r1, #0
 8012792:	0018      	movs	r0, r3
 8012794:	f7ff fcb2 	bl	80120fc <LL_ADC_GetSamplingTimeCommonChannels>
 8012798:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 801279e:	429a      	cmp	r2, r3
 80127a0:	d10b      	bne.n	80127ba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2200      	movs	r2, #0
 80127a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127ac:	2203      	movs	r2, #3
 80127ae:	4393      	bics	r3, r2
 80127b0:	2201      	movs	r2, #1
 80127b2:	431a      	orrs	r2, r3
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80127b8:	e01c      	b.n	80127f4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127be:	2212      	movs	r2, #18
 80127c0:	4393      	bics	r3, r2
 80127c2:	2210      	movs	r2, #16
 80127c4:	431a      	orrs	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80127ce:	2201      	movs	r2, #1
 80127d0:	431a      	orrs	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80127d6:	231f      	movs	r3, #31
 80127d8:	18fb      	adds	r3, r7, r3
 80127da:	2201      	movs	r2, #1
 80127dc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80127de:	e009      	b.n	80127f4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127e4:	2210      	movs	r2, #16
 80127e6:	431a      	orrs	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80127ec:	231f      	movs	r3, #31
 80127ee:	18fb      	adds	r3, r7, r3
 80127f0:	2201      	movs	r2, #1
 80127f2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80127f4:	231f      	movs	r3, #31
 80127f6:	18fb      	adds	r3, r7, r3
 80127f8:	781b      	ldrb	r3, [r3, #0]
}
 80127fa:	0018      	movs	r0, r3
 80127fc:	46bd      	mov	sp, r7
 80127fe:	b008      	add	sp, #32
 8012800:	bd80      	pop	{r7, pc}
 8012802:	46c0      	nop			@ (mov r8, r8)
 8012804:	2000025c 	.word	0x2000025c
 8012808:	00030d40 	.word	0x00030d40
 801280c:	fffffefd 	.word	0xfffffefd
 8012810:	ffde0201 	.word	0xffde0201
 8012814:	1ffffc02 	.word	0x1ffffc02
 8012818:	40012708 	.word	0x40012708
 801281c:	ffc3ffff 	.word	0xffc3ffff
 8012820:	7fffff04 	.word	0x7fffff04

08012824 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8012824:	b5b0      	push	{r4, r5, r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d101      	bne.n	8012836 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8012832:	2301      	movs	r3, #1
 8012834:	e081      	b.n	801293a <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801283a:	2202      	movs	r2, #2
 801283c:	431a      	orrs	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8012842:	250f      	movs	r5, #15
 8012844:	197c      	adds	r4, r7, r5
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	0018      	movs	r0, r3
 801284a:	f000 fbad 	bl	8012fa8 <ADC_ConversionStop>
 801284e:	0003      	movs	r3, r0
 8012850:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8012852:	197b      	adds	r3, r7, r5
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d112      	bne.n	8012880 <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801285a:	197c      	adds	r4, r7, r5
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	0018      	movs	r0, r3
 8012860:	f000 fc6a 	bl	8013138 <ADC_Disable>
 8012864:	0003      	movs	r3, r0
 8012866:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8012868:	197b      	adds	r3, r7, r5
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d102      	bne.n	8012876 <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2201      	movs	r2, #1
 8012874:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	0018      	movs	r0, r3
 801287c:	f7ff fd1e 	bl	80122bc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	685a      	ldr	r2, [r3, #4]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	492e      	ldr	r1, [pc, #184]	@ (8012944 <HAL_ADC_DeInit+0x120>)
 801288c:	400a      	ands	r2, r1
 801288e:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a2c      	ldr	r2, [pc, #176]	@ (8012948 <HAL_ADC_DeInit+0x124>)
 8012896:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	68da      	ldr	r2, [r3, #12]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	492a      	ldr	r1, [pc, #168]	@ (801294c <HAL_ADC_DeInit+0x128>)
 80128a4:	400a      	ands	r2, r1
 80128a6:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	695a      	ldr	r2, [r3, #20]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2107      	movs	r1, #7
 80128b4:	438a      	bics	r2, r1
 80128b6:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2200      	movs	r2, #0
 80128c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	6a1a      	ldr	r2, [r3, #32]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	491f      	ldr	r1, [pc, #124]	@ (8012950 <HAL_ADC_DeInit+0x12c>)
 80128d2:	400a      	ands	r2, r1
 80128d4:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	491b      	ldr	r1, [pc, #108]	@ (8012950 <HAL_ADC_DeInit+0x12c>)
 80128e2:	400a      	ands	r2, r1
 80128e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4917      	ldr	r1, [pc, #92]	@ (8012950 <HAL_ADC_DeInit+0x12c>)
 80128f2:	400a      	ands	r2, r1
 80128f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	691a      	ldr	r2, [r3, #16]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	0092      	lsls	r2, r2, #2
 8012902:	0892      	lsrs	r2, r2, #2
 8012904:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8012906:	4b13      	ldr	r3, [pc, #76]	@ (8012954 <HAL_ADC_DeInit+0x130>)
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	4b12      	ldr	r3, [pc, #72]	@ (8012954 <HAL_ADC_DeInit+0x130>)
 801290c:	4912      	ldr	r1, [pc, #72]	@ (8012958 <HAL_ADC_DeInit+0x134>)
 801290e:	400a      	ands	r2, r1
 8012910:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	0018      	movs	r0, r3
 8012916:	f7f9 fb77 	bl	800c008 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2200      	movs	r2, #0
 801291e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2254      	movs	r2, #84	@ 0x54
 8012930:	2100      	movs	r1, #0
 8012932:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012934:	230f      	movs	r3, #15
 8012936:	18fb      	adds	r3, r7, r3
 8012938:	781b      	ldrb	r3, [r3, #0]
}
 801293a:	0018      	movs	r0, r3
 801293c:	46bd      	mov	sp, r7
 801293e:	b004      	add	sp, #16
 8012940:	bdb0      	pop	{r4, r5, r7, pc}
 8012942:	46c0      	nop			@ (mov r8, r8)
 8012944:	fffff460 	.word	0xfffff460
 8012948:	00000b9f 	.word	0x00000b9f
 801294c:	831e0200 	.word	0x831e0200
 8012950:	f000f000 	.word	0xf000f000
 8012954:	40012708 	.word	0x40012708
 8012958:	fe03ffff 	.word	0xfe03ffff

0801295c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 801295c:	b590      	push	{r4, r7, lr}
 801295e:	b08b      	sub	sp, #44	@ 0x2c
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012966:	2327      	movs	r3, #39	@ 0x27
 8012968:	18fb      	adds	r3, r7, r3
 801296a:	2200      	movs	r2, #0
 801296c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801296e:	2300      	movs	r3, #0
 8012970:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2254      	movs	r2, #84	@ 0x54
 8012976:	5c9b      	ldrb	r3, [r3, r2]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d101      	bne.n	8012980 <HAL_ADC_ConfigChannel+0x24>
 801297c:	2302      	movs	r3, #2
 801297e:	e141      	b.n	8012c04 <HAL_ADC_ConfigChannel+0x2a8>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2254      	movs	r2, #84	@ 0x54
 8012984:	2101      	movs	r1, #1
 8012986:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	0018      	movs	r0, r3
 801298e:	f7ff fd11 	bl	80123b4 <LL_ADC_REG_IsConversionOngoing>
 8012992:	1e03      	subs	r3, r0, #0
 8012994:	d000      	beq.n	8012998 <HAL_ADC_ConfigChannel+0x3c>
 8012996:	e124      	b.n	8012be2 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	2b02      	cmp	r3, #2
 801299e:	d100      	bne.n	80129a2 <HAL_ADC_ConfigChannel+0x46>
 80129a0:	e0d8      	b.n	8012b54 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	691a      	ldr	r2, [r3, #16]
 80129a6:	2380      	movs	r3, #128	@ 0x80
 80129a8:	061b      	lsls	r3, r3, #24
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d004      	beq.n	80129b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80129b2:	4a96      	ldr	r2, [pc, #600]	@ (8012c0c <HAL_ADC_ConfigChannel+0x2b0>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d108      	bne.n	80129ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	0019      	movs	r1, r3
 80129c2:	0010      	movs	r0, r2
 80129c4:	f7ff fbd1 	bl	801216a <LL_ADC_REG_SetSequencerChAdd>
 80129c8:	e060      	b.n	8012a8c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	211f      	movs	r1, #31
 80129d4:	400b      	ands	r3, r1
 80129d6:	210f      	movs	r1, #15
 80129d8:	4099      	lsls	r1, r3
 80129da:	000b      	movs	r3, r1
 80129dc:	43db      	mvns	r3, r3
 80129de:	4013      	ands	r3, r2
 80129e0:	001c      	movs	r4, r3
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	025b      	lsls	r3, r3, #9
 80129e8:	0a5b      	lsrs	r3, r3, #9
 80129ea:	d105      	bne.n	80129f8 <HAL_ADC_ConfigChannel+0x9c>
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	0e9b      	lsrs	r3, r3, #26
 80129f2:	221f      	movs	r2, #31
 80129f4:	401a      	ands	r2, r3
 80129f6:	e02e      	b.n	8012a56 <HAL_ADC_ConfigChannel+0xfa>
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80129fe:	231f      	movs	r3, #31
 8012a00:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	085b      	lsrs	r3, r3, #1
 8012a0a:	61bb      	str	r3, [r7, #24]
 8012a0c:	e00e      	b.n	8012a2c <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	2201      	movs	r2, #1
 8012a18:	4013      	ands	r3, r2
 8012a1a:	693a      	ldr	r2, [r7, #16]
 8012a1c:	4313      	orrs	r3, r2
 8012a1e:	613b      	str	r3, [r7, #16]
    s--;
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	3b01      	subs	r3, #1
 8012a24:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	085b      	lsrs	r3, r3, #1
 8012a2a:	61bb      	str	r3, [r7, #24]
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1ed      	bne.n	8012a0e <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012a32:	693a      	ldr	r2, [r7, #16]
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	409a      	lsls	r2, r3
 8012a38:	0013      	movs	r3, r2
 8012a3a:	613b      	str	r3, [r7, #16]
  return result;
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d101      	bne.n	8012a4a <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8012a46:	2320      	movs	r3, #32
 8012a48:	e004      	b.n	8012a54 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8012a4a:	69f8      	ldr	r0, [r7, #28]
 8012a4c:	f7ed fd18 	bl	8000480 <__clzsi2>
 8012a50:	0003      	movs	r3, r0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	001a      	movs	r2, r3
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	211f      	movs	r1, #31
 8012a5c:	400b      	ands	r3, r1
 8012a5e:	409a      	lsls	r2, r3
 8012a60:	0013      	movs	r3, r2
 8012a62:	0022      	movs	r2, r4
 8012a64:	431a      	orrs	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	089b      	lsrs	r3, r3, #2
 8012a70:	1c5a      	adds	r2, r3, #1
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	69db      	ldr	r3, [r3, #28]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d808      	bhi.n	8012a8c <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6818      	ldr	r0, [r3, #0]
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	6859      	ldr	r1, [r3, #4]
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	001a      	movs	r2, r3
 8012a88:	f7ff fb4f 	bl	801212a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6818      	ldr	r0, [r3, #0]
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	6819      	ldr	r1, [r3, #0]
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	001a      	movs	r2, r3
 8012a9a:	f7ff fb89 	bl	80121b0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	db00      	blt.n	8012aa8 <HAL_ADC_ConfigChannel+0x14c>
 8012aa6:	e0a6      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012aa8:	4b59      	ldr	r3, [pc, #356]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012aaa:	0018      	movs	r0, r3
 8012aac:	f7ff fafc 	bl	80120a8 <LL_ADC_GetCommonPathInternalCh>
 8012ab0:	0003      	movs	r3, r0
 8012ab2:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4a56      	ldr	r2, [pc, #344]	@ (8012c14 <HAL_ADC_ConfigChannel+0x2b8>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d122      	bne.n	8012b04 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8012abe:	6a3a      	ldr	r2, [r7, #32]
 8012ac0:	2380      	movs	r3, #128	@ 0x80
 8012ac2:	041b      	lsls	r3, r3, #16
 8012ac4:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8012ac6:	d11d      	bne.n	8012b04 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012ac8:	6a3b      	ldr	r3, [r7, #32]
 8012aca:	2280      	movs	r2, #128	@ 0x80
 8012acc:	0412      	lsls	r2, r2, #16
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012ad2:	0019      	movs	r1, r3
 8012ad4:	0010      	movs	r0, r2
 8012ad6:	f7ff fad3 	bl	8012080 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012ada:	4b4f      	ldr	r3, [pc, #316]	@ (8012c18 <HAL_ADC_ConfigChannel+0x2bc>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	494f      	ldr	r1, [pc, #316]	@ (8012c1c <HAL_ADC_ConfigChannel+0x2c0>)
 8012ae0:	0018      	movs	r0, r3
 8012ae2:	f7ed fb19 	bl	8000118 <__udivsi3>
 8012ae6:	0003      	movs	r3, r0
 8012ae8:	1c5a      	adds	r2, r3, #1
 8012aea:	0013      	movs	r3, r2
 8012aec:	005b      	lsls	r3, r3, #1
 8012aee:	189b      	adds	r3, r3, r2
 8012af0:	009b      	lsls	r3, r3, #2
 8012af2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012af4:	e002      	b.n	8012afc <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	3b01      	subs	r3, #1
 8012afa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d1f9      	bne.n	8012af6 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8012b02:	e078      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4a45      	ldr	r2, [pc, #276]	@ (8012c20 <HAL_ADC_ConfigChannel+0x2c4>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d10e      	bne.n	8012b2c <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8012b0e:	6a3a      	ldr	r2, [r7, #32]
 8012b10:	2380      	movs	r3, #128	@ 0x80
 8012b12:	045b      	lsls	r3, r3, #17
 8012b14:	4013      	ands	r3, r2
 8012b16:	d109      	bne.n	8012b2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012b18:	6a3b      	ldr	r3, [r7, #32]
 8012b1a:	2280      	movs	r2, #128	@ 0x80
 8012b1c:	0452      	lsls	r2, r2, #17
 8012b1e:	4313      	orrs	r3, r2
 8012b20:	4a3b      	ldr	r2, [pc, #236]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012b22:	0019      	movs	r1, r3
 8012b24:	0010      	movs	r0, r2
 8012b26:	f7ff faab 	bl	8012080 <LL_ADC_SetCommonPathInternalCh>
 8012b2a:	e064      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a3c      	ldr	r2, [pc, #240]	@ (8012c24 <HAL_ADC_ConfigChannel+0x2c8>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d15f      	bne.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012b36:	6a3a      	ldr	r2, [r7, #32]
 8012b38:	2380      	movs	r3, #128	@ 0x80
 8012b3a:	03db      	lsls	r3, r3, #15
 8012b3c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8012b3e:	d15a      	bne.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012b40:	6a3b      	ldr	r3, [r7, #32]
 8012b42:	2280      	movs	r2, #128	@ 0x80
 8012b44:	03d2      	lsls	r2, r2, #15
 8012b46:	4313      	orrs	r3, r2
 8012b48:	4a31      	ldr	r2, [pc, #196]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012b4a:	0019      	movs	r1, r3
 8012b4c:	0010      	movs	r0, r2
 8012b4e:	f7ff fa97 	bl	8012080 <LL_ADC_SetCommonPathInternalCh>
 8012b52:	e050      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	691a      	ldr	r2, [r3, #16]
 8012b58:	2380      	movs	r3, #128	@ 0x80
 8012b5a:	061b      	lsls	r3, r3, #24
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d004      	beq.n	8012b6a <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8012b64:	4a29      	ldr	r2, [pc, #164]	@ (8012c0c <HAL_ADC_ConfigChannel+0x2b0>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d107      	bne.n	8012b7a <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	0019      	movs	r1, r3
 8012b74:	0010      	movs	r0, r2
 8012b76:	f7ff fb09 	bl	801218c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	da39      	bge.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012b82:	4b23      	ldr	r3, [pc, #140]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012b84:	0018      	movs	r0, r3
 8012b86:	f7ff fa8f 	bl	80120a8 <LL_ADC_GetCommonPathInternalCh>
 8012b8a:	0003      	movs	r3, r0
 8012b8c:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4a20      	ldr	r2, [pc, #128]	@ (8012c14 <HAL_ADC_ConfigChannel+0x2b8>)
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d108      	bne.n	8012baa <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012b98:	6a3b      	ldr	r3, [r7, #32]
 8012b9a:	4a23      	ldr	r2, [pc, #140]	@ (8012c28 <HAL_ADC_ConfigChannel+0x2cc>)
 8012b9c:	4013      	ands	r3, r2
 8012b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012ba0:	0019      	movs	r1, r3
 8012ba2:	0010      	movs	r0, r2
 8012ba4:	f7ff fa6c 	bl	8012080 <LL_ADC_SetCommonPathInternalCh>
 8012ba8:	e025      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	4a1c      	ldr	r2, [pc, #112]	@ (8012c20 <HAL_ADC_ConfigChannel+0x2c4>)
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	d108      	bne.n	8012bc6 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8012c2c <HAL_ADC_ConfigChannel+0x2d0>)
 8012bb8:	4013      	ands	r3, r2
 8012bba:	4a15      	ldr	r2, [pc, #84]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012bbc:	0019      	movs	r1, r3
 8012bbe:	0010      	movs	r0, r2
 8012bc0:	f7ff fa5e 	bl	8012080 <LL_ADC_SetCommonPathInternalCh>
 8012bc4:	e017      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4a16      	ldr	r2, [pc, #88]	@ (8012c24 <HAL_ADC_ConfigChannel+0x2c8>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d112      	bne.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	4a17      	ldr	r2, [pc, #92]	@ (8012c30 <HAL_ADC_ConfigChannel+0x2d4>)
 8012bd4:	4013      	ands	r3, r2
 8012bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8012c10 <HAL_ADC_ConfigChannel+0x2b4>)
 8012bd8:	0019      	movs	r1, r3
 8012bda:	0010      	movs	r0, r2
 8012bdc:	f7ff fa50 	bl	8012080 <LL_ADC_SetCommonPathInternalCh>
 8012be0:	e009      	b.n	8012bf6 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012be6:	2220      	movs	r2, #32
 8012be8:	431a      	orrs	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8012bee:	2327      	movs	r3, #39	@ 0x27
 8012bf0:	18fb      	adds	r3, r7, r3
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2254      	movs	r2, #84	@ 0x54
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012bfe:	2327      	movs	r3, #39	@ 0x27
 8012c00:	18fb      	adds	r3, r7, r3
 8012c02:	781b      	ldrb	r3, [r3, #0]
}
 8012c04:	0018      	movs	r0, r3
 8012c06:	46bd      	mov	sp, r7
 8012c08:	b00b      	add	sp, #44	@ 0x2c
 8012c0a:	bd90      	pop	{r4, r7, pc}
 8012c0c:	80000004 	.word	0x80000004
 8012c10:	40012708 	.word	0x40012708
 8012c14:	ac000800 	.word	0xac000800
 8012c18:	2000025c 	.word	0x2000025c
 8012c1c:	00030d40 	.word	0x00030d40
 8012c20:	b4002000 	.word	0xb4002000
 8012c24:	b0001000 	.word	0xb0001000
 8012c28:	ff7fffff 	.word	0xff7fffff
 8012c2c:	feffffff 	.word	0xfeffffff
 8012c30:	ffbfffff 	.word	0xffbfffff

08012c34 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8012c34:	b590      	push	{r4, r7, lr}
 8012c36:	b08f      	sub	sp, #60	@ 0x3c
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012c3e:	2337      	movs	r3, #55	@ 0x37
 8012c40:	18fb      	adds	r3, r7, r3
 8012c42:	2200      	movs	r2, #0
 8012c44:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 8012c46:	2300      	movs	r3, #0
 8012c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2254      	movs	r2, #84	@ 0x54
 8012c4e:	5c9b      	ldrb	r3, [r3, r2]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d101      	bne.n	8012c58 <HAL_ADC_AnalogWDGConfig+0x24>
 8012c54:	2302      	movs	r3, #2
 8012c56:	e195      	b.n	8012f84 <HAL_ADC_AnalogWDGConfig+0x350>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2254      	movs	r2, #84	@ 0x54
 8012c5c:	2101      	movs	r1, #1
 8012c5e:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	0018      	movs	r0, r3
 8012c66:	f7ff fba5 	bl	80123b4 <LL_ADC_REG_IsConversionOngoing>
 8012c6a:	1e03      	subs	r3, r0, #0
 8012c6c:	d000      	beq.n	8012c70 <HAL_ADC_AnalogWDGConfig+0x3c>
 8012c6e:	e156      	b.n	8012f1e <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4ac5      	ldr	r2, [pc, #788]	@ (8012f8c <HAL_ADC_AnalogWDGConfig+0x358>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d162      	bne.n	8012d40 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	0018      	movs	r0, r3
 8012c80:	f7ff fb64 	bl	801234c <LL_ADC_IsEnabled>
 8012c84:	1e03      	subs	r3, r0, #0
 8012c86:	d009      	beq.n	8012c9c <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 8012c8c:	2337      	movs	r3, #55	@ 0x37
 8012c8e:	18fc      	adds	r4, r7, r3
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	0018      	movs	r0, r3
 8012c94:	f000 fa50 	bl	8013138 <ADC_Disable>
 8012c98:	0003      	movs	r3, r0
 8012c9a:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	2280      	movs	r2, #128	@ 0x80
 8012ca2:	0412      	lsls	r2, r2, #16
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	d011      	beq.n	8012ccc <HAL_ADC_AnalogWDGConfig+0x98>
 8012ca8:	22c0      	movs	r2, #192	@ 0xc0
 8012caa:	0412      	lsls	r2, r2, #16
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d115      	bne.n	8012cdc <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	4ab5      	ldr	r2, [pc, #724]	@ (8012f90 <HAL_ADC_AnalogWDGConfig+0x35c>)
 8012cba:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8012cbc:	22c0      	movs	r2, #192	@ 0xc0
 8012cbe:	0412      	lsls	r2, r2, #16
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	49b2      	ldr	r1, [pc, #712]	@ (8012f8c <HAL_ADC_AnalogWDGConfig+0x358>)
 8012cc4:	001a      	movs	r2, r3
 8012cc6:	f7ff fa8f 	bl	80121e8 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8012cca:	e00f      	b.n	8012cec <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4ab0      	ldr	r2, [pc, #704]	@ (8012f94 <HAL_ADC_AnalogWDGConfig+0x360>)
 8012cd2:	49ae      	ldr	r1, [pc, #696]	@ (8012f8c <HAL_ADC_AnalogWDGConfig+0x358>)
 8012cd4:	0018      	movs	r0, r3
 8012cd6:	f7ff fa87 	bl	80121e8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012cda:	e007      	b.n	8012cec <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	49aa      	ldr	r1, [pc, #680]	@ (8012f8c <HAL_ADC_AnalogWDGConfig+0x358>)
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	0018      	movs	r0, r3
 8012ce6:	f7ff fa7f 	bl	80121e8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012cea:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 8012cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d10b      	bne.n	8012d0a <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 8012cf2:	2237      	movs	r2, #55	@ 0x37
 8012cf4:	18bb      	adds	r3, r7, r2
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d106      	bne.n	8012d0a <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 8012cfc:	18bc      	adds	r4, r7, r2
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	0018      	movs	r0, r3
 8012d02:	f000 f993 	bl	801302c <ADC_Enable>
 8012d06:	0003      	movs	r3, r0
 8012d08:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d0e:	4aa2      	ldr	r2, [pc, #648]	@ (8012f98 <HAL_ADC_AnalogWDGConfig+0x364>)
 8012d10:	401a      	ands	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	0018      	movs	r0, r3
 8012d1c:	f7ff fb5b 	bl	80123d6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	7b1b      	ldrb	r3, [r3, #12]
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d105      	bne.n	8012d34 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	0018      	movs	r0, r3
 8012d2e:	f7ff fb75 	bl	801241c <LL_ADC_EnableIT_AWD1>
 8012d32:	e0f4      	b.n	8012f1e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	0018      	movs	r0, r3
 8012d3a:	f7ff fb9b 	bl	8012474 <LL_ADC_DisableIT_AWD1>
 8012d3e:	e0ee      	b.n	8012f1e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	2280      	movs	r2, #128	@ 0x80
 8012d46:	0412      	lsls	r2, r2, #16
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d100      	bne.n	8012d4e <HAL_ADC_AnalogWDGConfig+0x11a>
 8012d4c:	e09b      	b.n	8012e86 <HAL_ADC_AnalogWDGConfig+0x252>
 8012d4e:	22c0      	movs	r2, #192	@ 0xc0
 8012d50:	0412      	lsls	r2, r2, #16
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d000      	beq.n	8012d58 <HAL_ADC_AnalogWDGConfig+0x124>
 8012d56:	e09f      	b.n	8012e98 <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4a8f      	ldr	r2, [pc, #572]	@ (8012f9c <HAL_ADC_AnalogWDGConfig+0x368>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d148      	bne.n	8012df4 <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	025b      	lsls	r3, r3, #9
 8012d68:	0a5b      	lsrs	r3, r3, #9
 8012d6a:	d108      	bne.n	8012d7e <HAL_ADC_AnalogWDGConfig+0x14a>
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	689b      	ldr	r3, [r3, #8]
 8012d70:	0e9b      	lsrs	r3, r3, #26
 8012d72:	221f      	movs	r2, #31
 8012d74:	4013      	ands	r3, r2
 8012d76:	2201      	movs	r2, #1
 8012d78:	409a      	lsls	r2, r3
 8012d7a:	0013      	movs	r3, r2
 8012d7c:	e030      	b.n	8012de0 <HAL_ADC_AnalogWDGConfig+0x1ac>
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012d84:	231f      	movs	r3, #31
 8012d86:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012d88:	6a3b      	ldr	r3, [r7, #32]
 8012d8a:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012d8c:	6a3b      	ldr	r3, [r7, #32]
 8012d8e:	085b      	lsrs	r3, r3, #1
 8012d90:	623b      	str	r3, [r7, #32]
 8012d92:	e00e      	b.n	8012db2 <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 8012d94:	69bb      	ldr	r3, [r7, #24]
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8012d9a:	6a3b      	ldr	r3, [r7, #32]
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	4013      	ands	r3, r2
 8012da0:	69ba      	ldr	r2, [r7, #24]
 8012da2:	4313      	orrs	r3, r2
 8012da4:	61bb      	str	r3, [r7, #24]
    s--;
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	3b01      	subs	r3, #1
 8012daa:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012dac:	6a3b      	ldr	r3, [r7, #32]
 8012dae:	085b      	lsrs	r3, r3, #1
 8012db0:	623b      	str	r3, [r7, #32]
 8012db2:	6a3b      	ldr	r3, [r7, #32]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1ed      	bne.n	8012d94 <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012db8:	69ba      	ldr	r2, [r7, #24]
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	409a      	lsls	r2, r3
 8012dbe:	0013      	movs	r3, r2
 8012dc0:	61bb      	str	r3, [r7, #24]
  return result;
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8012dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 8012dcc:	2320      	movs	r3, #32
 8012dce:	e004      	b.n	8012dda <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 8012dd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dd2:	f7ed fb55 	bl	8000480 <__clzsi2>
 8012dd6:	0003      	movs	r3, r0
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	001a      	movs	r2, r3
 8012ddc:	2301      	movs	r3, #1
 8012dde:	4093      	lsls	r3, r2
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	6812      	ldr	r2, [r2, #0]
 8012de4:	21a0      	movs	r1, #160	@ 0xa0
 8012de6:	5851      	ldr	r1, [r2, r1]
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	6812      	ldr	r2, [r2, #0]
 8012dec:	430b      	orrs	r3, r1
 8012dee:	21a0      	movs	r1, #160	@ 0xa0
 8012df0:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 8012df2:	e05a      	b.n	8012eaa <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	689b      	ldr	r3, [r3, #8]
 8012df8:	025b      	lsls	r3, r3, #9
 8012dfa:	0a5b      	lsrs	r3, r3, #9
 8012dfc:	d108      	bne.n	8012e10 <HAL_ADC_AnalogWDGConfig+0x1dc>
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	689b      	ldr	r3, [r3, #8]
 8012e02:	0e9b      	lsrs	r3, r3, #26
 8012e04:	221f      	movs	r2, #31
 8012e06:	4013      	ands	r3, r2
 8012e08:	2201      	movs	r2, #1
 8012e0a:	409a      	lsls	r2, r3
 8012e0c:	0013      	movs	r3, r2
 8012e0e:	e030      	b.n	8012e72 <HAL_ADC_AnalogWDGConfig+0x23e>
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	689b      	ldr	r3, [r3, #8]
 8012e14:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8012e16:	231f      	movs	r3, #31
 8012e18:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	085b      	lsrs	r3, r3, #1
 8012e22:	613b      	str	r3, [r7, #16]
 8012e24:	e00e      	b.n	8012e44 <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	005b      	lsls	r3, r3, #1
 8012e2a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	4013      	ands	r3, r2
 8012e32:	68ba      	ldr	r2, [r7, #8]
 8012e34:	4313      	orrs	r3, r2
 8012e36:	60bb      	str	r3, [r7, #8]
    s--;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	085b      	lsrs	r3, r3, #1
 8012e42:	613b      	str	r3, [r7, #16]
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d1ed      	bne.n	8012e26 <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8012e4a:	68ba      	ldr	r2, [r7, #8]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	409a      	lsls	r2, r3
 8012e50:	0013      	movs	r3, r2
 8012e52:	60bb      	str	r3, [r7, #8]
  return result;
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d101      	bne.n	8012e62 <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 8012e5e:	2320      	movs	r3, #32
 8012e60:	e004      	b.n	8012e6c <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 8012e62:	6978      	ldr	r0, [r7, #20]
 8012e64:	f7ed fb0c 	bl	8000480 <__clzsi2>
 8012e68:	0003      	movs	r3, r0
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	001a      	movs	r2, r3
 8012e6e:	2301      	movs	r3, #1
 8012e70:	4093      	lsls	r3, r2
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	6812      	ldr	r2, [r2, #0]
 8012e76:	21a4      	movs	r1, #164	@ 0xa4
 8012e78:	5851      	ldr	r1, [r2, r1]
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	6812      	ldr	r2, [r2, #0]
 8012e7e:	430b      	orrs	r3, r1
 8012e80:	21a4      	movs	r1, #164	@ 0xa4
 8012e82:	5053      	str	r3, [r2, r1]
          break;
 8012e84:	e011      	b.n	8012eaa <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8012e8e:	4a41      	ldr	r2, [pc, #260]	@ (8012f94 <HAL_ADC_AnalogWDGConfig+0x360>)
 8012e90:	0019      	movs	r1, r3
 8012e92:	f7ff f9a9 	bl	80121e8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 8012e96:	e008      	b.n	8012eaa <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6818      	ldr	r0, [r3, #0]
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	0019      	movs	r1, r3
 8012ea4:	f7ff f9a0 	bl	80121e8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8012ea8:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	4a3b      	ldr	r2, [pc, #236]	@ (8012f9c <HAL_ADC_AnalogWDGConfig+0x368>)
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	d11a      	bne.n	8012eea <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012eb8:	4a39      	ldr	r2, [pc, #228]	@ (8012fa0 <HAL_ADC_AnalogWDGConfig+0x36c>)
 8012eba:	401a      	ands	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	0018      	movs	r0, r3
 8012ec6:	f7ff fa91 	bl	80123ec <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	7b1b      	ldrb	r3, [r3, #12]
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d105      	bne.n	8012ede <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	0018      	movs	r0, r3
 8012ed8:	f7ff faae 	bl	8012438 <LL_ADC_EnableIT_AWD2>
 8012edc:	e01f      	b.n	8012f1e <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	0018      	movs	r0, r3
 8012ee4:	f7ff fad6 	bl	8012494 <LL_ADC_DisableIT_AWD2>
 8012ee8:	e019      	b.n	8012f1e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012eee:	4a2d      	ldr	r2, [pc, #180]	@ (8012fa4 <HAL_ADC_AnalogWDGConfig+0x370>)
 8012ef0:	401a      	ands	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	0018      	movs	r0, r3
 8012efc:	f7ff fa82 	bl	8012404 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	7b1b      	ldrb	r3, [r3, #12]
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d105      	bne.n	8012f14 <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	0018      	movs	r0, r3
 8012f0e:	f7ff faa2 	bl	8012456 <LL_ADC_EnableIT_AWD3>
 8012f12:	e004      	b.n	8012f1e <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	0018      	movs	r0, r3
 8012f1a:	f7ff facb 	bl	80124b4 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a1a      	ldr	r2, [pc, #104]	@ (8012f8c <HAL_ADC_AnalogWDGConfig+0x358>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d118      	bne.n	8012f5a <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	691a      	ldr	r2, [r3, #16]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	68db      	ldr	r3, [r3, #12]
 8012f32:	08db      	lsrs	r3, r3, #3
 8012f34:	2103      	movs	r1, #3
 8012f36:	400b      	ands	r3, r1
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	409a      	lsls	r2, r3
 8012f3c:	0013      	movs	r3, r2
 8012f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	695a      	ldr	r2, [r3, #20]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	08db      	lsrs	r3, r3, #3
 8012f4c:	2103      	movs	r1, #3
 8012f4e:	400b      	ands	r3, r1
 8012f50:	005b      	lsls	r3, r3, #1
 8012f52:	409a      	lsls	r2, r3
 8012f54:	0013      	movs	r3, r2
 8012f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f58:	e005      	b.n	8012f66 <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	691b      	ldr	r3, [r3, #16]
 8012f5e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	695b      	ldr	r3, [r3, #20]
 8012f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6818      	ldr	r0, [r3, #0]
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	6819      	ldr	r1, [r3, #0]
 8012f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f72:	f7ff f967 	bl	8012244 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2254      	movs	r2, #84	@ 0x54
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012f7e:	2337      	movs	r3, #55	@ 0x37
 8012f80:	18fb      	adds	r3, r7, r3
 8012f82:	781b      	ldrb	r3, [r3, #0]
}
 8012f84:	0018      	movs	r0, r3
 8012f86:	46bd      	mov	sp, r7
 8012f88:	b00f      	add	sp, #60	@ 0x3c
 8012f8a:	bd90      	pop	{r4, r7, pc}
 8012f8c:	7cc00000 	.word	0x7cc00000
 8012f90:	fc3fffff 	.word	0xfc3fffff
 8012f94:	0087ffff 	.word	0x0087ffff
 8012f98:	fffeffff 	.word	0xfffeffff
 8012f9c:	0017ffff 	.word	0x0017ffff
 8012fa0:	fffdffff 	.word	0xfffdffff
 8012fa4:	fffbffff 	.word	0xfffbffff

08012fa8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	0018      	movs	r0, r3
 8012fb6:	f7ff f9fd 	bl	80123b4 <LL_ADC_REG_IsConversionOngoing>
 8012fba:	1e03      	subs	r3, r0, #0
 8012fbc:	d031      	beq.n	8013022 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	0018      	movs	r0, r3
 8012fc4:	f7ff f9d3 	bl	801236e <LL_ADC_IsDisableOngoing>
 8012fc8:	1e03      	subs	r3, r0, #0
 8012fca:	d104      	bne.n	8012fd6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	0018      	movs	r0, r3
 8012fd2:	f7ff f9dd 	bl	8012390 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012fd6:	f7ff f80b 	bl	8011ff0 <HAL_GetTick>
 8012fda:	0003      	movs	r3, r0
 8012fdc:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012fde:	e01a      	b.n	8013016 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8012fe0:	f7ff f806 	bl	8011ff0 <HAL_GetTick>
 8012fe4:	0002      	movs	r2, r0
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	d913      	bls.n	8013016 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	689b      	ldr	r3, [r3, #8]
 8012ff4:	2204      	movs	r2, #4
 8012ff6:	4013      	ands	r3, r2
 8012ff8:	d00d      	beq.n	8013016 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ffe:	2210      	movs	r2, #16
 8013000:	431a      	orrs	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801300a:	2201      	movs	r2, #1
 801300c:	431a      	orrs	r2, r3
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8013012:	2301      	movs	r3, #1
 8013014:	e006      	b.n	8013024 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	689b      	ldr	r3, [r3, #8]
 801301c:	2204      	movs	r2, #4
 801301e:	4013      	ands	r3, r2
 8013020:	d1de      	bne.n	8012fe0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8013022:	2300      	movs	r3, #0
}
 8013024:	0018      	movs	r0, r3
 8013026:	46bd      	mov	sp, r7
 8013028:	b004      	add	sp, #16
 801302a:	bd80      	pop	{r7, pc}

0801302c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8013034:	2300      	movs	r3, #0
 8013036:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	0018      	movs	r0, r3
 801303e:	f7ff f985 	bl	801234c <LL_ADC_IsEnabled>
 8013042:	1e03      	subs	r3, r0, #0
 8013044:	d000      	beq.n	8013048 <ADC_Enable+0x1c>
 8013046:	e069      	b.n	801311c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	689b      	ldr	r3, [r3, #8]
 801304e:	4a36      	ldr	r2, [pc, #216]	@ (8013128 <ADC_Enable+0xfc>)
 8013050:	4013      	ands	r3, r2
 8013052:	d00d      	beq.n	8013070 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013058:	2210      	movs	r2, #16
 801305a:	431a      	orrs	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013064:	2201      	movs	r2, #1
 8013066:	431a      	orrs	r2, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 801306c:	2301      	movs	r3, #1
 801306e:	e056      	b.n	801311e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	0018      	movs	r0, r3
 8013076:	f7ff f945 	bl	8012304 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 801307a:	4b2c      	ldr	r3, [pc, #176]	@ (801312c <ADC_Enable+0x100>)
 801307c:	0018      	movs	r0, r3
 801307e:	f7ff f813 	bl	80120a8 <LL_ADC_GetCommonPathInternalCh>
 8013082:	0002      	movs	r2, r0
 8013084:	2380      	movs	r3, #128	@ 0x80
 8013086:	041b      	lsls	r3, r3, #16
 8013088:	4013      	ands	r3, r2
 801308a:	d00f      	beq.n	80130ac <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801308c:	4b28      	ldr	r3, [pc, #160]	@ (8013130 <ADC_Enable+0x104>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4928      	ldr	r1, [pc, #160]	@ (8013134 <ADC_Enable+0x108>)
 8013092:	0018      	movs	r0, r3
 8013094:	f7ed f840 	bl	8000118 <__udivsi3>
 8013098:	0003      	movs	r3, r0
 801309a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 801309c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801309e:	e002      	b.n	80130a6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	3b01      	subs	r3, #1
 80130a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d1f9      	bne.n	80130a0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7e5b      	ldrb	r3, [r3, #25]
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d033      	beq.n	801311c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80130b4:	f7fe ff9c 	bl	8011ff0 <HAL_GetTick>
 80130b8:	0003      	movs	r3, r0
 80130ba:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80130bc:	e027      	b.n	801310e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	0018      	movs	r0, r3
 80130c4:	f7ff f942 	bl	801234c <LL_ADC_IsEnabled>
 80130c8:	1e03      	subs	r3, r0, #0
 80130ca:	d104      	bne.n	80130d6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	0018      	movs	r0, r3
 80130d2:	f7ff f917 	bl	8012304 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80130d6:	f7fe ff8b 	bl	8011ff0 <HAL_GetTick>
 80130da:	0002      	movs	r2, r0
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	1ad3      	subs	r3, r2, r3
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d914      	bls.n	801310e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2201      	movs	r2, #1
 80130ec:	4013      	ands	r3, r2
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d00d      	beq.n	801310e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130f6:	2210      	movs	r2, #16
 80130f8:	431a      	orrs	r2, r3
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013102:	2201      	movs	r2, #1
 8013104:	431a      	orrs	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 801310a:	2301      	movs	r3, #1
 801310c:	e007      	b.n	801311e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	2201      	movs	r2, #1
 8013116:	4013      	ands	r3, r2
 8013118:	2b01      	cmp	r3, #1
 801311a:	d1d0      	bne.n	80130be <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801311c:	2300      	movs	r3, #0
}
 801311e:	0018      	movs	r0, r3
 8013120:	46bd      	mov	sp, r7
 8013122:	b004      	add	sp, #16
 8013124:	bd80      	pop	{r7, pc}
 8013126:	46c0      	nop			@ (mov r8, r8)
 8013128:	80000017 	.word	0x80000017
 801312c:	40012708 	.word	0x40012708
 8013130:	2000025c 	.word	0x2000025c
 8013134:	00030d40 	.word	0x00030d40

08013138 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	0018      	movs	r0, r3
 8013146:	f7ff f912 	bl	801236e <LL_ADC_IsDisableOngoing>
 801314a:	0003      	movs	r3, r0
 801314c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	0018      	movs	r0, r3
 8013154:	f7ff f8fa 	bl	801234c <LL_ADC_IsEnabled>
 8013158:	1e03      	subs	r3, r0, #0
 801315a:	d046      	beq.n	80131ea <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d143      	bne.n	80131ea <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	689b      	ldr	r3, [r3, #8]
 8013168:	2205      	movs	r2, #5
 801316a:	4013      	ands	r3, r2
 801316c:	2b01      	cmp	r3, #1
 801316e:	d10d      	bne.n	801318c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	0018      	movs	r0, r3
 8013176:	f7ff f8d7 	bl	8012328 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2203      	movs	r2, #3
 8013180:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8013182:	f7fe ff35 	bl	8011ff0 <HAL_GetTick>
 8013186:	0003      	movs	r3, r0
 8013188:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801318a:	e028      	b.n	80131de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013190:	2210      	movs	r2, #16
 8013192:	431a      	orrs	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801319c:	2201      	movs	r2, #1
 801319e:	431a      	orrs	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80131a4:	2301      	movs	r3, #1
 80131a6:	e021      	b.n	80131ec <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80131a8:	f7fe ff22 	bl	8011ff0 <HAL_GetTick>
 80131ac:	0002      	movs	r2, r0
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d913      	bls.n	80131de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	2201      	movs	r2, #1
 80131be:	4013      	ands	r3, r2
 80131c0:	d00d      	beq.n	80131de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131c6:	2210      	movs	r2, #16
 80131c8:	431a      	orrs	r2, r3
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80131d2:	2201      	movs	r2, #1
 80131d4:	431a      	orrs	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80131da:	2301      	movs	r3, #1
 80131dc:	e006      	b.n	80131ec <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	689b      	ldr	r3, [r3, #8]
 80131e4:	2201      	movs	r2, #1
 80131e6:	4013      	ands	r3, r2
 80131e8:	d1de      	bne.n	80131a8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	0018      	movs	r0, r3
 80131ee:	46bd      	mov	sp, r7
 80131f0:	b004      	add	sp, #16
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <LL_ADC_GetCommonClock>:
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	23f0      	movs	r3, #240	@ 0xf0
 8013202:	039b      	lsls	r3, r3, #14
 8013204:	4013      	ands	r3, r2
}
 8013206:	0018      	movs	r0, r3
 8013208:	46bd      	mov	sp, r7
 801320a:	b002      	add	sp, #8
 801320c:	bd80      	pop	{r7, pc}

0801320e <LL_ADC_GetClock>:
{
 801320e:	b580      	push	{r7, lr}
 8013210:	b082      	sub	sp, #8
 8013212:	af00      	add	r7, sp, #0
 8013214:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	691b      	ldr	r3, [r3, #16]
 801321a:	0f9b      	lsrs	r3, r3, #30
 801321c:	079b      	lsls	r3, r3, #30
}
 801321e:	0018      	movs	r0, r3
 8013220:	46bd      	mov	sp, r7
 8013222:	b002      	add	sp, #8
 8013224:	bd80      	pop	{r7, pc}

08013226 <LL_ADC_SetCalibrationFactor>:
{
 8013226:	b580      	push	{r7, lr}
 8013228:	b082      	sub	sp, #8
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
 801322e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	22b4      	movs	r2, #180	@ 0xb4
 8013234:	589b      	ldr	r3, [r3, r2]
 8013236:	227f      	movs	r2, #127	@ 0x7f
 8013238:	4393      	bics	r3, r2
 801323a:	001a      	movs	r2, r3
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	431a      	orrs	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	21b4      	movs	r1, #180	@ 0xb4
 8013244:	505a      	str	r2, [r3, r1]
}
 8013246:	46c0      	nop			@ (mov r8, r8)
 8013248:	46bd      	mov	sp, r7
 801324a:	b002      	add	sp, #8
 801324c:	bd80      	pop	{r7, pc}

0801324e <LL_ADC_GetCalibrationFactor>:
{
 801324e:	b580      	push	{r7, lr}
 8013250:	b082      	sub	sp, #8
 8013252:	af00      	add	r7, sp, #0
 8013254:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	22b4      	movs	r2, #180	@ 0xb4
 801325a:	589b      	ldr	r3, [r3, r2]
 801325c:	227f      	movs	r2, #127	@ 0x7f
 801325e:	4013      	ands	r3, r2
}
 8013260:	0018      	movs	r0, r3
 8013262:	46bd      	mov	sp, r7
 8013264:	b002      	add	sp, #8
 8013266:	bd80      	pop	{r7, pc}

08013268 <LL_ADC_Enable>:
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	689b      	ldr	r3, [r3, #8]
 8013274:	4a04      	ldr	r2, [pc, #16]	@ (8013288 <LL_ADC_Enable+0x20>)
 8013276:	4013      	ands	r3, r2
 8013278:	2201      	movs	r2, #1
 801327a:	431a      	orrs	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	609a      	str	r2, [r3, #8]
}
 8013280:	46c0      	nop			@ (mov r8, r8)
 8013282:	46bd      	mov	sp, r7
 8013284:	b002      	add	sp, #8
 8013286:	bd80      	pop	{r7, pc}
 8013288:	7fffffe8 	.word	0x7fffffe8

0801328c <LL_ADC_Disable>:
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b082      	sub	sp, #8
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	4a04      	ldr	r2, [pc, #16]	@ (80132ac <LL_ADC_Disable+0x20>)
 801329a:	4013      	ands	r3, r2
 801329c:	2202      	movs	r2, #2
 801329e:	431a      	orrs	r2, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	609a      	str	r2, [r3, #8]
}
 80132a4:	46c0      	nop			@ (mov r8, r8)
 80132a6:	46bd      	mov	sp, r7
 80132a8:	b002      	add	sp, #8
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	7fffffe8 	.word	0x7fffffe8

080132b0 <LL_ADC_IsEnabled>:
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	2201      	movs	r2, #1
 80132be:	4013      	ands	r3, r2
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d101      	bne.n	80132c8 <LL_ADC_IsEnabled+0x18>
 80132c4:	2301      	movs	r3, #1
 80132c6:	e000      	b.n	80132ca <LL_ADC_IsEnabled+0x1a>
 80132c8:	2300      	movs	r3, #0
}
 80132ca:	0018      	movs	r0, r3
 80132cc:	46bd      	mov	sp, r7
 80132ce:	b002      	add	sp, #8
 80132d0:	bd80      	pop	{r7, pc}
	...

080132d4 <LL_ADC_StartCalibration>:
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	4a05      	ldr	r2, [pc, #20]	@ (80132f8 <LL_ADC_StartCalibration+0x24>)
 80132e2:	4013      	ands	r3, r2
 80132e4:	2280      	movs	r2, #128	@ 0x80
 80132e6:	0612      	lsls	r2, r2, #24
 80132e8:	431a      	orrs	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	609a      	str	r2, [r3, #8]
}
 80132ee:	46c0      	nop			@ (mov r8, r8)
 80132f0:	46bd      	mov	sp, r7
 80132f2:	b002      	add	sp, #8
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	46c0      	nop			@ (mov r8, r8)
 80132f8:	7fffffe8 	.word	0x7fffffe8

080132fc <LL_ADC_IsCalibrationOnGoing>:
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	0fdb      	lsrs	r3, r3, #31
 801330a:	07da      	lsls	r2, r3, #31
 801330c:	2380      	movs	r3, #128	@ 0x80
 801330e:	061b      	lsls	r3, r3, #24
 8013310:	429a      	cmp	r2, r3
 8013312:	d101      	bne.n	8013318 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8013314:	2301      	movs	r3, #1
 8013316:	e000      	b.n	801331a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8013318:	2300      	movs	r3, #0
}
 801331a:	0018      	movs	r0, r3
 801331c:	46bd      	mov	sp, r7
 801331e:	b002      	add	sp, #8
 8013320:	bd80      	pop	{r7, pc}
	...

08013324 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8013324:	b590      	push	{r4, r7, lr}
 8013326:	b08b      	sub	sp, #44	@ 0x2c
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801332c:	2300      	movs	r3, #0
 801332e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8013330:	2300      	movs	r3, #0
 8013332:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2254      	movs	r2, #84	@ 0x54
 8013338:	5c9b      	ldrb	r3, [r3, r2]
 801333a:	2b01      	cmp	r3, #1
 801333c:	d101      	bne.n	8013342 <HAL_ADCEx_Calibration_Start+0x1e>
 801333e:	2302      	movs	r3, #2
 8013340:	e0de      	b.n	8013500 <HAL_ADCEx_Calibration_Start+0x1dc>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2254      	movs	r2, #84	@ 0x54
 8013346:	2101      	movs	r1, #1
 8013348:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801334a:	231f      	movs	r3, #31
 801334c:	18fc      	adds	r4, r7, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	0018      	movs	r0, r3
 8013352:	f7ff fef1 	bl	8013138 <ADC_Disable>
 8013356:	0003      	movs	r3, r0
 8013358:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	0018      	movs	r0, r3
 8013360:	f7ff ffa6 	bl	80132b0 <LL_ADC_IsEnabled>
 8013364:	1e03      	subs	r3, r0, #0
 8013366:	d000      	beq.n	801336a <HAL_ADCEx_Calibration_Start+0x46>
 8013368:	e0bd      	b.n	80134e6 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801336e:	4a66      	ldr	r2, [pc, #408]	@ (8013508 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8013370:	4013      	ands	r3, r2
 8013372:	2202      	movs	r2, #2
 8013374:	431a      	orrs	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	4a62      	ldr	r2, [pc, #392]	@ (801350c <HAL_ADCEx_Calibration_Start+0x1e8>)
 8013382:	4013      	ands	r3, r2
 8013384:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	68da      	ldr	r2, [r3, #12]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	495f      	ldr	r1, [pc, #380]	@ (8013510 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8013392:	400a      	ands	r2, r1
 8013394:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8013396:	2300      	movs	r3, #0
 8013398:	627b      	str	r3, [r7, #36]	@ 0x24
 801339a:	e02e      	b.n	80133fa <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	0018      	movs	r0, r3
 80133a2:	f7ff ff97 	bl	80132d4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80133a6:	e015      	b.n	80133d4 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	3301      	adds	r3, #1
 80133ac:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80133ae:	68fa      	ldr	r2, [r7, #12]
 80133b0:	23ae      	movs	r3, #174	@ 0xae
 80133b2:	029b      	lsls	r3, r3, #10
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d30d      	bcc.n	80133d4 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80133bc:	2212      	movs	r2, #18
 80133be:	4393      	bics	r3, r2
 80133c0:	2210      	movs	r2, #16
 80133c2:	431a      	orrs	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2254      	movs	r2, #84	@ 0x54
 80133cc:	2100      	movs	r1, #0
 80133ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80133d0:	2301      	movs	r3, #1
 80133d2:	e095      	b.n	8013500 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	0018      	movs	r0, r3
 80133da:	f7ff ff8f 	bl	80132fc <LL_ADC_IsCalibrationOnGoing>
 80133de:	1e03      	subs	r3, r0, #0
 80133e0:	d1e2      	bne.n	80133a8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	0018      	movs	r0, r3
 80133e8:	f7ff ff31 	bl	801324e <LL_ADC_GetCalibrationFactor>
 80133ec:	0002      	movs	r2, r0
 80133ee:	6a3b      	ldr	r3, [r7, #32]
 80133f0:	189b      	adds	r3, r3, r2
 80133f2:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80133f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f6:	3301      	adds	r3, #1
 80133f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80133fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133fc:	2b07      	cmp	r3, #7
 80133fe:	d9cd      	bls.n	801339c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8013400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013402:	6a38      	ldr	r0, [r7, #32]
 8013404:	f7ec fe88 	bl	8000118 <__udivsi3>
 8013408:	0003      	movs	r3, r0
 801340a:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	0018      	movs	r0, r3
 8013412:	f7ff ff29 	bl	8013268 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	0018      	movs	r0, r3
 801341c:	f7ff fef7 	bl	801320e <LL_ADC_GetClock>
 8013420:	1e03      	subs	r3, r0, #0
 8013422:	d11b      	bne.n	801345c <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013424:	4b3b      	ldr	r3, [pc, #236]	@ (8013514 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8013426:	0018      	movs	r0, r3
 8013428:	f7ff fee4 	bl	80131f4 <LL_ADC_GetCommonClock>
 801342c:	0003      	movs	r3, r0
 801342e:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8013430:	697a      	ldr	r2, [r7, #20]
 8013432:	23e0      	movs	r3, #224	@ 0xe0
 8013434:	035b      	lsls	r3, r3, #13
 8013436:	429a      	cmp	r2, r3
 8013438:	d310      	bcc.n	801345c <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	0c9b      	lsrs	r3, r3, #18
 801343e:	3b03      	subs	r3, #3
 8013440:	2201      	movs	r2, #1
 8013442:	409a      	lsls	r2, r3
 8013444:	0013      	movs	r3, r2
 8013446:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	085b      	lsrs	r3, r3, #1
 801344c:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 801344e:	e002      	b.n	8013456 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	3b01      	subs	r3, #1
 8013454:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1f9      	bne.n	8013450 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	6a3a      	ldr	r2, [r7, #32]
 8013462:	0011      	movs	r1, r2
 8013464:	0018      	movs	r0, r3
 8013466:	f7ff fede 	bl	8013226 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	0018      	movs	r0, r3
 8013470:	f7ff ff0c 	bl	801328c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8013474:	f7fe fdbc 	bl	8011ff0 <HAL_GetTick>
 8013478:	0003      	movs	r3, r0
 801347a:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801347c:	e01b      	b.n	80134b6 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801347e:	f7fe fdb7 	bl	8011ff0 <HAL_GetTick>
 8013482:	0002      	movs	r2, r0
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	2b02      	cmp	r3, #2
 801348a:	d914      	bls.n	80134b6 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	0018      	movs	r0, r3
 8013492:	f7ff ff0d 	bl	80132b0 <LL_ADC_IsEnabled>
 8013496:	1e03      	subs	r3, r0, #0
 8013498:	d00d      	beq.n	80134b6 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801349e:	2210      	movs	r2, #16
 80134a0:	431a      	orrs	r2, r3
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80134aa:	2201      	movs	r2, #1
 80134ac:	431a      	orrs	r2, r3
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80134b2:	2301      	movs	r3, #1
 80134b4:	e024      	b.n	8013500 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	0018      	movs	r0, r3
 80134bc:	f7ff fef8 	bl	80132b0 <LL_ADC_IsEnabled>
 80134c0:	1e03      	subs	r3, r0, #0
 80134c2:	d1dc      	bne.n	801347e <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	68d9      	ldr	r1, [r3, #12]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	69ba      	ldr	r2, [r7, #24]
 80134d0:	430a      	orrs	r2, r1
 80134d2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134d8:	2203      	movs	r2, #3
 80134da:	4393      	bics	r3, r2
 80134dc:	2201      	movs	r2, #1
 80134de:	431a      	orrs	r2, r3
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80134e4:	e005      	b.n	80134f2 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134ea:	2210      	movs	r2, #16
 80134ec:	431a      	orrs	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2254      	movs	r2, #84	@ 0x54
 80134f6:	2100      	movs	r1, #0
 80134f8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80134fa:	231f      	movs	r3, #31
 80134fc:	18fb      	adds	r3, r7, r3
 80134fe:	781b      	ldrb	r3, [r3, #0]
}
 8013500:	0018      	movs	r0, r3
 8013502:	46bd      	mov	sp, r7
 8013504:	b00b      	add	sp, #44	@ 0x2c
 8013506:	bd90      	pop	{r4, r7, pc}
 8013508:	fffffefd 	.word	0xfffffefd
 801350c:	00008003 	.word	0x00008003
 8013510:	ffff7ffc 	.word	0xffff7ffc
 8013514:	40012708 	.word	0x40012708

08013518 <__NVIC_EnableIRQ>:
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	0002      	movs	r2, r0
 8013520:	1dfb      	adds	r3, r7, #7
 8013522:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013524:	1dfb      	adds	r3, r7, #7
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	2b7f      	cmp	r3, #127	@ 0x7f
 801352a:	d809      	bhi.n	8013540 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801352c:	1dfb      	adds	r3, r7, #7
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	001a      	movs	r2, r3
 8013532:	231f      	movs	r3, #31
 8013534:	401a      	ands	r2, r3
 8013536:	4b04      	ldr	r3, [pc, #16]	@ (8013548 <__NVIC_EnableIRQ+0x30>)
 8013538:	2101      	movs	r1, #1
 801353a:	4091      	lsls	r1, r2
 801353c:	000a      	movs	r2, r1
 801353e:	601a      	str	r2, [r3, #0]
}
 8013540:	46c0      	nop			@ (mov r8, r8)
 8013542:	46bd      	mov	sp, r7
 8013544:	b002      	add	sp, #8
 8013546:	bd80      	pop	{r7, pc}
 8013548:	e000e100 	.word	0xe000e100

0801354c <__NVIC_DisableIRQ>:
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	0002      	movs	r2, r0
 8013554:	1dfb      	adds	r3, r7, #7
 8013556:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013558:	1dfb      	adds	r3, r7, #7
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	2b7f      	cmp	r3, #127	@ 0x7f
 801355e:	d810      	bhi.n	8013582 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013560:	1dfb      	adds	r3, r7, #7
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	001a      	movs	r2, r3
 8013566:	231f      	movs	r3, #31
 8013568:	4013      	ands	r3, r2
 801356a:	4908      	ldr	r1, [pc, #32]	@ (801358c <__NVIC_DisableIRQ+0x40>)
 801356c:	2201      	movs	r2, #1
 801356e:	409a      	lsls	r2, r3
 8013570:	0013      	movs	r3, r2
 8013572:	2280      	movs	r2, #128	@ 0x80
 8013574:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013576:	f3bf 8f4f 	dsb	sy
}
 801357a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801357c:	f3bf 8f6f 	isb	sy
}
 8013580:	46c0      	nop			@ (mov r8, r8)
}
 8013582:	46c0      	nop			@ (mov r8, r8)
 8013584:	46bd      	mov	sp, r7
 8013586:	b002      	add	sp, #8
 8013588:	bd80      	pop	{r7, pc}
 801358a:	46c0      	nop			@ (mov r8, r8)
 801358c:	e000e100 	.word	0xe000e100

08013590 <__NVIC_SetPriority>:
{
 8013590:	b590      	push	{r4, r7, lr}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	0002      	movs	r2, r0
 8013598:	6039      	str	r1, [r7, #0]
 801359a:	1dfb      	adds	r3, r7, #7
 801359c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801359e:	1dfb      	adds	r3, r7, #7
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80135a4:	d828      	bhi.n	80135f8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80135a6:	4a2f      	ldr	r2, [pc, #188]	@ (8013664 <__NVIC_SetPriority+0xd4>)
 80135a8:	1dfb      	adds	r3, r7, #7
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	b25b      	sxtb	r3, r3
 80135ae:	089b      	lsrs	r3, r3, #2
 80135b0:	33c0      	adds	r3, #192	@ 0xc0
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	589b      	ldr	r3, [r3, r2]
 80135b6:	1dfa      	adds	r2, r7, #7
 80135b8:	7812      	ldrb	r2, [r2, #0]
 80135ba:	0011      	movs	r1, r2
 80135bc:	2203      	movs	r2, #3
 80135be:	400a      	ands	r2, r1
 80135c0:	00d2      	lsls	r2, r2, #3
 80135c2:	21ff      	movs	r1, #255	@ 0xff
 80135c4:	4091      	lsls	r1, r2
 80135c6:	000a      	movs	r2, r1
 80135c8:	43d2      	mvns	r2, r2
 80135ca:	401a      	ands	r2, r3
 80135cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	019b      	lsls	r3, r3, #6
 80135d2:	22ff      	movs	r2, #255	@ 0xff
 80135d4:	401a      	ands	r2, r3
 80135d6:	1dfb      	adds	r3, r7, #7
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	0018      	movs	r0, r3
 80135dc:	2303      	movs	r3, #3
 80135de:	4003      	ands	r3, r0
 80135e0:	00db      	lsls	r3, r3, #3
 80135e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80135e4:	481f      	ldr	r0, [pc, #124]	@ (8013664 <__NVIC_SetPriority+0xd4>)
 80135e6:	1dfb      	adds	r3, r7, #7
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	b25b      	sxtb	r3, r3
 80135ec:	089b      	lsrs	r3, r3, #2
 80135ee:	430a      	orrs	r2, r1
 80135f0:	33c0      	adds	r3, #192	@ 0xc0
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	501a      	str	r2, [r3, r0]
}
 80135f6:	e031      	b.n	801365c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80135f8:	4a1b      	ldr	r2, [pc, #108]	@ (8013668 <__NVIC_SetPriority+0xd8>)
 80135fa:	1dfb      	adds	r3, r7, #7
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	0019      	movs	r1, r3
 8013600:	230f      	movs	r3, #15
 8013602:	400b      	ands	r3, r1
 8013604:	3b08      	subs	r3, #8
 8013606:	089b      	lsrs	r3, r3, #2
 8013608:	3306      	adds	r3, #6
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	18d3      	adds	r3, r2, r3
 801360e:	3304      	adds	r3, #4
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	1dfa      	adds	r2, r7, #7
 8013614:	7812      	ldrb	r2, [r2, #0]
 8013616:	0011      	movs	r1, r2
 8013618:	2203      	movs	r2, #3
 801361a:	400a      	ands	r2, r1
 801361c:	00d2      	lsls	r2, r2, #3
 801361e:	21ff      	movs	r1, #255	@ 0xff
 8013620:	4091      	lsls	r1, r2
 8013622:	000a      	movs	r2, r1
 8013624:	43d2      	mvns	r2, r2
 8013626:	401a      	ands	r2, r3
 8013628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	019b      	lsls	r3, r3, #6
 801362e:	22ff      	movs	r2, #255	@ 0xff
 8013630:	401a      	ands	r2, r3
 8013632:	1dfb      	adds	r3, r7, #7
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	0018      	movs	r0, r3
 8013638:	2303      	movs	r3, #3
 801363a:	4003      	ands	r3, r0
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013640:	4809      	ldr	r0, [pc, #36]	@ (8013668 <__NVIC_SetPriority+0xd8>)
 8013642:	1dfb      	adds	r3, r7, #7
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	001c      	movs	r4, r3
 8013648:	230f      	movs	r3, #15
 801364a:	4023      	ands	r3, r4
 801364c:	3b08      	subs	r3, #8
 801364e:	089b      	lsrs	r3, r3, #2
 8013650:	430a      	orrs	r2, r1
 8013652:	3306      	adds	r3, #6
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	18c3      	adds	r3, r0, r3
 8013658:	3304      	adds	r3, #4
 801365a:	601a      	str	r2, [r3, #0]
}
 801365c:	46c0      	nop			@ (mov r8, r8)
 801365e:	46bd      	mov	sp, r7
 8013660:	b003      	add	sp, #12
 8013662:	bd90      	pop	{r4, r7, pc}
 8013664:	e000e100 	.word	0xe000e100
 8013668:	e000ed00 	.word	0xe000ed00

0801366c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	1e5a      	subs	r2, r3, #1
 8013678:	2380      	movs	r3, #128	@ 0x80
 801367a:	045b      	lsls	r3, r3, #17
 801367c:	429a      	cmp	r2, r3
 801367e:	d301      	bcc.n	8013684 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013680:	2301      	movs	r3, #1
 8013682:	e010      	b.n	80136a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013684:	4b0a      	ldr	r3, [pc, #40]	@ (80136b0 <SysTick_Config+0x44>)
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	3a01      	subs	r2, #1
 801368a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801368c:	2301      	movs	r3, #1
 801368e:	425b      	negs	r3, r3
 8013690:	2103      	movs	r1, #3
 8013692:	0018      	movs	r0, r3
 8013694:	f7ff ff7c 	bl	8013590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013698:	4b05      	ldr	r3, [pc, #20]	@ (80136b0 <SysTick_Config+0x44>)
 801369a:	2200      	movs	r2, #0
 801369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801369e:	4b04      	ldr	r3, [pc, #16]	@ (80136b0 <SysTick_Config+0x44>)
 80136a0:	2207      	movs	r2, #7
 80136a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80136a4:	2300      	movs	r3, #0
}
 80136a6:	0018      	movs	r0, r3
 80136a8:	46bd      	mov	sp, r7
 80136aa:	b002      	add	sp, #8
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	46c0      	nop			@ (mov r8, r8)
 80136b0:	e000e010 	.word	0xe000e010

080136b4 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60b9      	str	r1, [r7, #8]
 80136bc:	607a      	str	r2, [r7, #4]
 80136be:	210f      	movs	r1, #15
 80136c0:	187b      	adds	r3, r7, r1
 80136c2:	1c02      	adds	r2, r0, #0
 80136c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80136c6:	68ba      	ldr	r2, [r7, #8]
 80136c8:	187b      	adds	r3, r7, r1
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	b25b      	sxtb	r3, r3
 80136ce:	0011      	movs	r1, r2
 80136d0:	0018      	movs	r0, r3
 80136d2:	f7ff ff5d 	bl	8013590 <__NVIC_SetPriority>
}
 80136d6:	46c0      	nop			@ (mov r8, r8)
 80136d8:	46bd      	mov	sp, r7
 80136da:	b004      	add	sp, #16
 80136dc:	bd80      	pop	{r7, pc}

080136de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b082      	sub	sp, #8
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	0002      	movs	r2, r0
 80136e6:	1dfb      	adds	r3, r7, #7
 80136e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80136ea:	1dfb      	adds	r3, r7, #7
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	b25b      	sxtb	r3, r3
 80136f0:	0018      	movs	r0, r3
 80136f2:	f7ff ff11 	bl	8013518 <__NVIC_EnableIRQ>
}
 80136f6:	46c0      	nop			@ (mov r8, r8)
 80136f8:	46bd      	mov	sp, r7
 80136fa:	b002      	add	sp, #8
 80136fc:	bd80      	pop	{r7, pc}

080136fe <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b082      	sub	sp, #8
 8013702:	af00      	add	r7, sp, #0
 8013704:	0002      	movs	r2, r0
 8013706:	1dfb      	adds	r3, r7, #7
 8013708:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801370a:	1dfb      	adds	r3, r7, #7
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	b25b      	sxtb	r3, r3
 8013710:	0018      	movs	r0, r3
 8013712:	f7ff ff1b 	bl	801354c <__NVIC_DisableIRQ>
}
 8013716:	46c0      	nop			@ (mov r8, r8)
 8013718:	46bd      	mov	sp, r7
 801371a:	b002      	add	sp, #8
 801371c:	bd80      	pop	{r7, pc}

0801371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801371e:	b580      	push	{r7, lr}
 8013720:	b082      	sub	sp, #8
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	0018      	movs	r0, r3
 801372a:	f7ff ff9f 	bl	801366c <SysTick_Config>
 801372e:	0003      	movs	r3, r0
}
 8013730:	0018      	movs	r0, r3
 8013732:	46bd      	mov	sp, r7
 8013734:	b002      	add	sp, #8
 8013736:	bd80      	pop	{r7, pc}

08013738 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d101      	bne.n	801374a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	e091      	b.n	801386e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	001a      	movs	r2, r3
 8013750:	4b49      	ldr	r3, [pc, #292]	@ (8013878 <HAL_DMA_Init+0x140>)
 8013752:	429a      	cmp	r2, r3
 8013754:	d810      	bhi.n	8013778 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	4a48      	ldr	r2, [pc, #288]	@ (801387c <HAL_DMA_Init+0x144>)
 801375c:	4694      	mov	ip, r2
 801375e:	4463      	add	r3, ip
 8013760:	2114      	movs	r1, #20
 8013762:	0018      	movs	r0, r3
 8013764:	f7ec fcd8 	bl	8000118 <__udivsi3>
 8013768:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801376a:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	4a43      	ldr	r2, [pc, #268]	@ (8013880 <HAL_DMA_Init+0x148>)
 8013774:	641a      	str	r2, [r3, #64]	@ 0x40
 8013776:	e00f      	b.n	8013798 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	4a41      	ldr	r2, [pc, #260]	@ (8013884 <HAL_DMA_Init+0x14c>)
 801377e:	4694      	mov	ip, r2
 8013780:	4463      	add	r3, ip
 8013782:	2114      	movs	r1, #20
 8013784:	0018      	movs	r0, r3
 8013786:	f7ec fcc7 	bl	8000118 <__udivsi3>
 801378a:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801378c:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4a3c      	ldr	r2, [pc, #240]	@ (8013888 <HAL_DMA_Init+0x150>)
 8013796:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2225      	movs	r2, #37	@ 0x25
 801379c:	2102      	movs	r1, #2
 801379e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4938      	ldr	r1, [pc, #224]	@ (801388c <HAL_DMA_Init+0x154>)
 80137ac:	400a      	ands	r2, r1
 80137ae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	6819      	ldr	r1, [r3, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	689a      	ldr	r2, [r3, #8]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	68db      	ldr	r3, [r3, #12]
 80137be:	431a      	orrs	r2, r3
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	691b      	ldr	r3, [r3, #16]
 80137c4:	431a      	orrs	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	695b      	ldr	r3, [r3, #20]
 80137ca:	431a      	orrs	r2, r3
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	699b      	ldr	r3, [r3, #24]
 80137d0:	431a      	orrs	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	69db      	ldr	r3, [r3, #28]
 80137d6:	431a      	orrs	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6a1b      	ldr	r3, [r3, #32]
 80137dc:	431a      	orrs	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	430a      	orrs	r2, r1
 80137e4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	0018      	movs	r0, r3
 80137ea:	f000 fb4d 	bl	8013e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	689a      	ldr	r2, [r3, #8]
 80137f2:	2380      	movs	r3, #128	@ 0x80
 80137f4:	01db      	lsls	r3, r3, #7
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d102      	bne.n	8013800 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2200      	movs	r2, #0
 80137fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	685a      	ldr	r2, [r3, #4]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013808:	21ff      	movs	r1, #255	@ 0xff
 801380a:	400a      	ands	r2, r1
 801380c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013816:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d011      	beq.n	8013844 <HAL_DMA_Init+0x10c>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	2b04      	cmp	r3, #4
 8013826:	d80d      	bhi.n	8013844 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	0018      	movs	r0, r3
 801382c:	f000 fb76 	bl	8013f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013834:	2200      	movs	r2, #0
 8013836:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013840:	605a      	str	r2, [r3, #4]
 8013842:	e008      	b.n	8013856 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2200      	movs	r2, #0
 8013848:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2200      	movs	r2, #0
 801384e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2200      	movs	r2, #0
 801385a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2225      	movs	r2, #37	@ 0x25
 8013860:	2101      	movs	r1, #1
 8013862:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2224      	movs	r2, #36	@ 0x24
 8013868:	2100      	movs	r1, #0
 801386a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801386c:	2300      	movs	r3, #0
}
 801386e:	0018      	movs	r0, r3
 8013870:	46bd      	mov	sp, r7
 8013872:	b002      	add	sp, #8
 8013874:	bd80      	pop	{r7, pc}
 8013876:	46c0      	nop			@ (mov r8, r8)
 8013878:	40020407 	.word	0x40020407
 801387c:	bffdfff8 	.word	0xbffdfff8
 8013880:	40020000 	.word	0x40020000
 8013884:	bffdfbf8 	.word	0xbffdfbf8
 8013888:	40020400 	.word	0x40020400
 801388c:	ffff800f 	.word	0xffff800f

08013890 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d101      	bne.n	80138a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801389e:	2301      	movs	r3, #1
 80138a0:	e07f      	b.n	80139a2 <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2101      	movs	r1, #1
 80138ae:	438a      	bics	r2, r1
 80138b0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	001a      	movs	r2, r3
 80138b8:	4b3c      	ldr	r3, [pc, #240]	@ (80139ac <HAL_DMA_DeInit+0x11c>)
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d810      	bhi.n	80138e0 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	4a3b      	ldr	r2, [pc, #236]	@ (80139b0 <HAL_DMA_DeInit+0x120>)
 80138c4:	4694      	mov	ip, r2
 80138c6:	4463      	add	r3, ip
 80138c8:	2114      	movs	r1, #20
 80138ca:	0018      	movs	r0, r3
 80138cc:	f7ec fc24 	bl	8000118 <__udivsi3>
 80138d0:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80138d2:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	4a36      	ldr	r2, [pc, #216]	@ (80139b4 <HAL_DMA_DeInit+0x124>)
 80138dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80138de:	e00f      	b.n	8013900 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4a34      	ldr	r2, [pc, #208]	@ (80139b8 <HAL_DMA_DeInit+0x128>)
 80138e6:	4694      	mov	ip, r2
 80138e8:	4463      	add	r3, ip
 80138ea:	2114      	movs	r1, #20
 80138ec:	0018      	movs	r0, r3
 80138ee:	f7ec fc13 	bl	8000118 <__udivsi3>
 80138f2:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80138f4:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4a2f      	ldr	r2, [pc, #188]	@ (80139bc <HAL_DMA_DeInit+0x12c>)
 80138fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2200      	movs	r2, #0
 8013906:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801390c:	221c      	movs	r2, #28
 801390e:	401a      	ands	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013914:	2101      	movs	r1, #1
 8013916:	4091      	lsls	r1, r2
 8013918:	000a      	movs	r2, r1
 801391a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	0018      	movs	r0, r3
 8013920:	f000 fab2 	bl	8013e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013928:	2200      	movs	r2, #0
 801392a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013934:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d010      	beq.n	8013960 <HAL_DMA_DeInit+0xd0>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	2b04      	cmp	r3, #4
 8013944:	d80c      	bhi.n	8013960 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	0018      	movs	r0, r3
 801394a:	f000 fae7 	bl	8013f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013952:	2200      	movs	r2, #0
 8013954:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801395e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2200      	movs	r2, #0
 8013970:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2200      	movs	r2, #0
 8013976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2200      	movs	r2, #0
 801397c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2200      	movs	r2, #0
 8013988:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2200      	movs	r2, #0
 801398e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2225      	movs	r2, #37	@ 0x25
 8013994:	2100      	movs	r1, #0
 8013996:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2224      	movs	r2, #36	@ 0x24
 801399c:	2100      	movs	r1, #0
 801399e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80139a0:	2300      	movs	r3, #0
}
 80139a2:	0018      	movs	r0, r3
 80139a4:	46bd      	mov	sp, r7
 80139a6:	b002      	add	sp, #8
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	46c0      	nop			@ (mov r8, r8)
 80139ac:	40020407 	.word	0x40020407
 80139b0:	bffdfff8 	.word	0xbffdfff8
 80139b4:	40020000 	.word	0x40020000
 80139b8:	bffdfbf8 	.word	0xbffdfbf8
 80139bc:	40020400 	.word	0x40020400

080139c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b086      	sub	sp, #24
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
 80139cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80139ce:	2317      	movs	r3, #23
 80139d0:	18fb      	adds	r3, r7, r3
 80139d2:	2200      	movs	r2, #0
 80139d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2224      	movs	r2, #36	@ 0x24
 80139da:	5c9b      	ldrb	r3, [r3, r2]
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d101      	bne.n	80139e4 <HAL_DMA_Start_IT+0x24>
 80139e0:	2302      	movs	r3, #2
 80139e2:	e06f      	b.n	8013ac4 <HAL_DMA_Start_IT+0x104>
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2224      	movs	r2, #36	@ 0x24
 80139e8:	2101      	movs	r1, #1
 80139ea:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2225      	movs	r2, #37	@ 0x25
 80139f0:	5c9b      	ldrb	r3, [r3, r2]
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d157      	bne.n	8013aa8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2225      	movs	r2, #37	@ 0x25
 80139fc:	2102      	movs	r1, #2
 80139fe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2200      	movs	r2, #0
 8013a04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2101      	movs	r1, #1
 8013a12:	438a      	bics	r2, r1
 8013a14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	68b9      	ldr	r1, [r7, #8]
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f000 f9f7 	bl	8013e10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d008      	beq.n	8013a3c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	210e      	movs	r1, #14
 8013a36:	430a      	orrs	r2, r1
 8013a38:	601a      	str	r2, [r3, #0]
 8013a3a:	e00f      	b.n	8013a5c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2104      	movs	r1, #4
 8013a48:	438a      	bics	r2, r1
 8013a4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	681a      	ldr	r2, [r3, #0]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	210a      	movs	r1, #10
 8013a58:	430a      	orrs	r2, r1
 8013a5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	2380      	movs	r3, #128	@ 0x80
 8013a64:	025b      	lsls	r3, r3, #9
 8013a66:	4013      	ands	r3, r2
 8013a68:	d008      	beq.n	8013a7c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013a74:	2180      	movs	r1, #128	@ 0x80
 8013a76:	0049      	lsls	r1, r1, #1
 8013a78:	430a      	orrs	r2, r1
 8013a7a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d008      	beq.n	8013a96 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a8e:	2180      	movs	r1, #128	@ 0x80
 8013a90:	0049      	lsls	r1, r1, #1
 8013a92:	430a      	orrs	r2, r1
 8013a94:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2101      	movs	r1, #1
 8013aa2:	430a      	orrs	r2, r1
 8013aa4:	601a      	str	r2, [r3, #0]
 8013aa6:	e00a      	b.n	8013abe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2280      	movs	r2, #128	@ 0x80
 8013aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2224      	movs	r2, #36	@ 0x24
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8013ab6:	2317      	movs	r3, #23
 8013ab8:	18fb      	adds	r3, r7, r3
 8013aba:	2201      	movs	r2, #1
 8013abc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013abe:	2317      	movs	r3, #23
 8013ac0:	18fb      	adds	r3, r7, r3
 8013ac2:	781b      	ldrb	r3, [r3, #0]
}
 8013ac4:	0018      	movs	r0, r3
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	b006      	add	sp, #24
 8013aca:	bd80      	pop	{r7, pc}

08013acc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d101      	bne.n	8013ade <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8013ada:	2301      	movs	r3, #1
 8013adc:	e04f      	b.n	8013b7e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2225      	movs	r2, #37	@ 0x25
 8013ae2:	5c9b      	ldrb	r3, [r3, r2]
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b02      	cmp	r3, #2
 8013ae8:	d008      	beq.n	8013afc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2204      	movs	r2, #4
 8013aee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2224      	movs	r2, #36	@ 0x24
 8013af4:	2100      	movs	r1, #0
 8013af6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8013af8:	2301      	movs	r3, #1
 8013afa:	e040      	b.n	8013b7e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	681a      	ldr	r2, [r3, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	210e      	movs	r1, #14
 8013b08:	438a      	bics	r2, r1
 8013b0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013b16:	491c      	ldr	r1, [pc, #112]	@ (8013b88 <HAL_DMA_Abort+0xbc>)
 8013b18:	400a      	ands	r2, r1
 8013b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2101      	movs	r1, #1
 8013b28:	438a      	bics	r2, r1
 8013b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b30:	221c      	movs	r2, #28
 8013b32:	401a      	ands	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b38:	2101      	movs	r1, #1
 8013b3a:	4091      	lsls	r1, r2
 8013b3c:	000a      	movs	r2, r1
 8013b3e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013b48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d00c      	beq.n	8013b6c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b5c:	490a      	ldr	r1, [pc, #40]	@ (8013b88 <HAL_DMA_Abort+0xbc>)
 8013b5e:	400a      	ands	r2, r1
 8013b60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013b6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2225      	movs	r2, #37	@ 0x25
 8013b70:	2101      	movs	r1, #1
 8013b72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2224      	movs	r2, #36	@ 0x24
 8013b78:	2100      	movs	r1, #0
 8013b7a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	0018      	movs	r0, r3
 8013b80:	46bd      	mov	sp, r7
 8013b82:	b002      	add	sp, #8
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	46c0      	nop			@ (mov r8, r8)
 8013b88:	fffffeff 	.word	0xfffffeff

08013b8c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013b94:	210f      	movs	r1, #15
 8013b96:	187b      	adds	r3, r7, r1
 8013b98:	2200      	movs	r2, #0
 8013b9a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2225      	movs	r2, #37	@ 0x25
 8013ba0:	5c9b      	ldrb	r3, [r3, r2]
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	d006      	beq.n	8013bb6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2204      	movs	r2, #4
 8013bac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8013bae:	187b      	adds	r3, r7, r1
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	701a      	strb	r2, [r3, #0]
 8013bb4:	e048      	b.n	8013c48 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	210e      	movs	r1, #14
 8013bc2:	438a      	bics	r2, r1
 8013bc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	438a      	bics	r2, r1
 8013bd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013be0:	491d      	ldr	r1, [pc, #116]	@ (8013c58 <HAL_DMA_Abort_IT+0xcc>)
 8013be2:	400a      	ands	r2, r1
 8013be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bea:	221c      	movs	r2, #28
 8013bec:	401a      	ands	r2, r3
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bf2:	2101      	movs	r1, #1
 8013bf4:	4091      	lsls	r1, r2
 8013bf6:	000a      	movs	r2, r1
 8013bf8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013bfe:	687a      	ldr	r2, [r7, #4]
 8013c00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013c02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d00c      	beq.n	8013c26 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c16:	4910      	ldr	r1, [pc, #64]	@ (8013c58 <HAL_DMA_Abort_IT+0xcc>)
 8013c18:	400a      	ands	r2, r1
 8013c1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c20:	687a      	ldr	r2, [r7, #4]
 8013c22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013c24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2225      	movs	r2, #37	@ 0x25
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2224      	movs	r2, #36	@ 0x24
 8013c32:	2100      	movs	r1, #0
 8013c34:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d004      	beq.n	8013c48 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	0010      	movs	r0, r2
 8013c46:	4798      	blx	r3
    }
  }
  return status;
 8013c48:	230f      	movs	r3, #15
 8013c4a:	18fb      	adds	r3, r7, r3
 8013c4c:	781b      	ldrb	r3, [r3, #0]
}
 8013c4e:	0018      	movs	r0, r3
 8013c50:	46bd      	mov	sp, r7
 8013c52:	b004      	add	sp, #16
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	46c0      	nop			@ (mov r8, r8)
 8013c58:	fffffeff 	.word	0xfffffeff

08013c5c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c78:	221c      	movs	r2, #28
 8013c7a:	4013      	ands	r3, r2
 8013c7c:	2204      	movs	r2, #4
 8013c7e:	409a      	lsls	r2, r3
 8013c80:	0013      	movs	r3, r2
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	4013      	ands	r3, r2
 8013c86:	d026      	beq.n	8013cd6 <HAL_DMA_IRQHandler+0x7a>
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	2204      	movs	r2, #4
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	d022      	beq.n	8013cd6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2220      	movs	r2, #32
 8013c98:	4013      	ands	r3, r2
 8013c9a:	d107      	bne.n	8013cac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	2104      	movs	r1, #4
 8013ca8:	438a      	bics	r2, r1
 8013caa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cb0:	221c      	movs	r2, #28
 8013cb2:	401a      	ands	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cb8:	2104      	movs	r1, #4
 8013cba:	4091      	lsls	r1, r2
 8013cbc:	000a      	movs	r2, r1
 8013cbe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d100      	bne.n	8013cca <HAL_DMA_IRQHandler+0x6e>
 8013cc8:	e080      	b.n	8013dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	0010      	movs	r0, r2
 8013cd2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8013cd4:	e07a      	b.n	8013dcc <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cda:	221c      	movs	r2, #28
 8013cdc:	4013      	ands	r3, r2
 8013cde:	2202      	movs	r2, #2
 8013ce0:	409a      	lsls	r2, r3
 8013ce2:	0013      	movs	r3, r2
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	4013      	ands	r3, r2
 8013ce8:	d03c      	beq.n	8013d64 <HAL_DMA_IRQHandler+0x108>
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	2202      	movs	r2, #2
 8013cee:	4013      	ands	r3, r2
 8013cf0:	d038      	beq.n	8013d64 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2220      	movs	r2, #32
 8013cfa:	4013      	ands	r3, r2
 8013cfc:	d10b      	bne.n	8013d16 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	210a      	movs	r1, #10
 8013d0a:	438a      	bics	r2, r1
 8013d0c:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2225      	movs	r2, #37	@ 0x25
 8013d12:	2101      	movs	r1, #1
 8013d14:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	001a      	movs	r2, r3
 8013d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8013dd8 <HAL_DMA_IRQHandler+0x17c>)
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d909      	bls.n	8013d36 <HAL_DMA_IRQHandler+0xda>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d26:	221c      	movs	r2, #28
 8013d28:	401a      	ands	r2, r3
 8013d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8013ddc <HAL_DMA_IRQHandler+0x180>)
 8013d2c:	2102      	movs	r1, #2
 8013d2e:	4091      	lsls	r1, r2
 8013d30:	000a      	movs	r2, r1
 8013d32:	605a      	str	r2, [r3, #4]
 8013d34:	e008      	b.n	8013d48 <HAL_DMA_IRQHandler+0xec>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d3a:	221c      	movs	r2, #28
 8013d3c:	401a      	ands	r2, r3
 8013d3e:	4b28      	ldr	r3, [pc, #160]	@ (8013de0 <HAL_DMA_IRQHandler+0x184>)
 8013d40:	2102      	movs	r1, #2
 8013d42:	4091      	lsls	r1, r2
 8013d44:	000a      	movs	r2, r1
 8013d46:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2224      	movs	r2, #36	@ 0x24
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d039      	beq.n	8013dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d5c:	687a      	ldr	r2, [r7, #4]
 8013d5e:	0010      	movs	r0, r2
 8013d60:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8013d62:	e033      	b.n	8013dcc <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d68:	221c      	movs	r2, #28
 8013d6a:	4013      	ands	r3, r2
 8013d6c:	2208      	movs	r2, #8
 8013d6e:	409a      	lsls	r2, r3
 8013d70:	0013      	movs	r3, r2
 8013d72:	68fa      	ldr	r2, [r7, #12]
 8013d74:	4013      	ands	r3, r2
 8013d76:	d02a      	beq.n	8013dce <HAL_DMA_IRQHandler+0x172>
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	2208      	movs	r2, #8
 8013d7c:	4013      	ands	r3, r2
 8013d7e:	d026      	beq.n	8013dce <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	210e      	movs	r1, #14
 8013d8c:	438a      	bics	r2, r1
 8013d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d94:	221c      	movs	r2, #28
 8013d96:	401a      	ands	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d9c:	2101      	movs	r1, #1
 8013d9e:	4091      	lsls	r1, r2
 8013da0:	000a      	movs	r2, r1
 8013da2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2201      	movs	r2, #1
 8013da8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2225      	movs	r2, #37	@ 0x25
 8013dae:	2101      	movs	r1, #1
 8013db0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2224      	movs	r2, #36	@ 0x24
 8013db6:	2100      	movs	r1, #0
 8013db8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d005      	beq.n	8013dce <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	0010      	movs	r0, r2
 8013dca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8013dcc:	46c0      	nop			@ (mov r8, r8)
 8013dce:	46c0      	nop			@ (mov r8, r8)
}
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	b004      	add	sp, #16
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	46c0      	nop			@ (mov r8, r8)
 8013dd8:	40020080 	.word	0x40020080
 8013ddc:	40020400 	.word	0x40020400
 8013de0:	40020000 	.word	0x40020000

08013de4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2225      	movs	r2, #37	@ 0x25
 8013df0:	5c9b      	ldrb	r3, [r3, r2]
 8013df2:	b2db      	uxtb	r3, r3
}
 8013df4:	0018      	movs	r0, r3
 8013df6:	46bd      	mov	sp, r7
 8013df8:	b002      	add	sp, #8
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8013e08:	0018      	movs	r0, r3
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	b002      	add	sp, #8
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	60f8      	str	r0, [r7, #12]
 8013e18:	60b9      	str	r1, [r7, #8]
 8013e1a:	607a      	str	r2, [r7, #4]
 8013e1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013e22:	68fa      	ldr	r2, [r7, #12]
 8013e24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013e26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d004      	beq.n	8013e3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e34:	68fa      	ldr	r2, [r7, #12]
 8013e36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8013e38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e3e:	221c      	movs	r2, #28
 8013e40:	401a      	ands	r2, r3
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e46:	2101      	movs	r1, #1
 8013e48:	4091      	lsls	r1, r2
 8013e4a:	000a      	movs	r2, r1
 8013e4c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	683a      	ldr	r2, [r7, #0]
 8013e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	2b10      	cmp	r3, #16
 8013e5c:	d108      	bne.n	8013e70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	68ba      	ldr	r2, [r7, #8]
 8013e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8013e6e:	e007      	b.n	8013e80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	68ba      	ldr	r2, [r7, #8]
 8013e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	60da      	str	r2, [r3, #12]
}
 8013e80:	46c0      	nop			@ (mov r8, r8)
 8013e82:	46bd      	mov	sp, r7
 8013e84:	b004      	add	sp, #16
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	001a      	movs	r2, r3
 8013e96:	4b1d      	ldr	r3, [pc, #116]	@ (8013f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d814      	bhi.n	8013ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ea0:	089b      	lsrs	r3, r3, #2
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8013f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8013ea6:	189a      	adds	r2, r3, r2
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	001a      	movs	r2, r3
 8013eb2:	23ff      	movs	r3, #255	@ 0xff
 8013eb4:	4013      	ands	r3, r2
 8013eb6:	3b08      	subs	r3, #8
 8013eb8:	2114      	movs	r1, #20
 8013eba:	0018      	movs	r0, r3
 8013ebc:	f7ec f92c 	bl	8000118 <__udivsi3>
 8013ec0:	0003      	movs	r3, r0
 8013ec2:	60fb      	str	r3, [r7, #12]
 8013ec4:	e014      	b.n	8013ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013eca:	089b      	lsrs	r3, r3, #2
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	4a11      	ldr	r2, [pc, #68]	@ (8013f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8013ed0:	189a      	adds	r2, r3, r2
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	001a      	movs	r2, r3
 8013edc:	23ff      	movs	r3, #255	@ 0xff
 8013ede:	4013      	ands	r3, r2
 8013ee0:	3b08      	subs	r3, #8
 8013ee2:	2114      	movs	r1, #20
 8013ee4:	0018      	movs	r0, r3
 8013ee6:	f7ec f917 	bl	8000118 <__udivsi3>
 8013eea:	0003      	movs	r3, r0
 8013eec:	3307      	adds	r3, #7
 8013eee:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	4a09      	ldr	r2, [pc, #36]	@ (8013f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8013ef4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	221f      	movs	r2, #31
 8013efa:	4013      	ands	r3, r2
 8013efc:	2201      	movs	r2, #1
 8013efe:	409a      	lsls	r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8013f04:	46c0      	nop			@ (mov r8, r8)
 8013f06:	46bd      	mov	sp, r7
 8013f08:	b004      	add	sp, #16
 8013f0a:	bd80      	pop	{r7, pc}
 8013f0c:	40020407 	.word	0x40020407
 8013f10:	40020800 	.word	0x40020800
 8013f14:	4002081c 	.word	0x4002081c
 8013f18:	40020880 	.word	0x40020880

08013f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	22ff      	movs	r2, #255	@ 0xff
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	4a0a      	ldr	r2, [pc, #40]	@ (8013f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8013f32:	4694      	mov	ip, r2
 8013f34:	4463      	add	r3, ip
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	001a      	movs	r2, r3
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	4a07      	ldr	r2, [pc, #28]	@ (8013f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013f42:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	3b01      	subs	r3, #1
 8013f48:	2203      	movs	r2, #3
 8013f4a:	4013      	ands	r3, r2
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	409a      	lsls	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8013f54:	46c0      	nop			@ (mov r8, r8)
 8013f56:	46bd      	mov	sp, r7
 8013f58:	b004      	add	sp, #16
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	1000823f 	.word	0x1000823f
 8013f60:	40020940 	.word	0x40020940

08013f64 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013f64:	b5b0      	push	{r4, r5, r7, lr}
 8013f66:	b086      	sub	sp, #24
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	603a      	str	r2, [r7, #0]
 8013f70:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013f72:	4b21      	ldr	r3, [pc, #132]	@ (8013ff8 <HAL_FLASH_Program+0x94>)
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d101      	bne.n	8013f7e <HAL_FLASH_Program+0x1a>
 8013f7a:	2302      	movs	r3, #2
 8013f7c:	e038      	b.n	8013ff0 <HAL_FLASH_Program+0x8c>
 8013f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8013ff8 <HAL_FLASH_Program+0x94>)
 8013f80:	2201      	movs	r2, #1
 8013f82:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013f84:	4b1c      	ldr	r3, [pc, #112]	@ (8013ff8 <HAL_FLASH_Program+0x94>)
 8013f86:	2200      	movs	r2, #0
 8013f88:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013f8a:	2517      	movs	r5, #23
 8013f8c:	197c      	adds	r4, r7, r5
 8013f8e:	23fa      	movs	r3, #250	@ 0xfa
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	0018      	movs	r0, r3
 8013f94:	f000 f874 	bl	8014080 <FLASH_WaitForLastOperation>
 8013f98:	0003      	movs	r3, r0
 8013f9a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8013f9c:	197b      	adds	r3, r7, r5
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d11f      	bne.n	8013fe4 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d106      	bne.n	8013fb8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8013faa:	683a      	ldr	r2, [r7, #0]
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	68b9      	ldr	r1, [r7, #8]
 8013fb0:	0008      	movs	r0, r1
 8013fb2:	f000 f8b3 	bl	801411c <FLASH_Program_DoubleWord>
 8013fb6:	e005      	b.n	8013fc4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8013fb8:	683a      	ldr	r2, [r7, #0]
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	0011      	movs	r1, r2
 8013fbe:	0018      	movs	r0, r3
 8013fc0:	f008 fa96 	bl	801c4f0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013fc4:	2317      	movs	r3, #23
 8013fc6:	18fc      	adds	r4, r7, r3
 8013fc8:	23fa      	movs	r3, #250	@ 0xfa
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	0018      	movs	r0, r3
 8013fce:	f000 f857 	bl	8014080 <FLASH_WaitForLastOperation>
 8013fd2:	0003      	movs	r3, r0
 8013fd4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8013fd6:	4b09      	ldr	r3, [pc, #36]	@ (8013ffc <HAL_FLASH_Program+0x98>)
 8013fd8:	695a      	ldr	r2, [r3, #20]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	43d9      	mvns	r1, r3
 8013fde:	4b07      	ldr	r3, [pc, #28]	@ (8013ffc <HAL_FLASH_Program+0x98>)
 8013fe0:	400a      	ands	r2, r1
 8013fe2:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013fe4:	4b04      	ldr	r3, [pc, #16]	@ (8013ff8 <HAL_FLASH_Program+0x94>)
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8013fea:	2317      	movs	r3, #23
 8013fec:	18fb      	adds	r3, r7, r3
 8013fee:	781b      	ldrb	r3, [r3, #0]
}
 8013ff0:	0018      	movs	r0, r3
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	b006      	add	sp, #24
 8013ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ff8:	2000126c 	.word	0x2000126c
 8013ffc:	40022000 	.word	0x40022000

08014000 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8014006:	1dfb      	adds	r3, r7, #7
 8014008:	2200      	movs	r2, #0
 801400a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 801400c:	4b0b      	ldr	r3, [pc, #44]	@ (801403c <HAL_FLASH_Unlock+0x3c>)
 801400e:	695b      	ldr	r3, [r3, #20]
 8014010:	2b00      	cmp	r3, #0
 8014012:	da0c      	bge.n	801402e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8014014:	4b09      	ldr	r3, [pc, #36]	@ (801403c <HAL_FLASH_Unlock+0x3c>)
 8014016:	4a0a      	ldr	r2, [pc, #40]	@ (8014040 <HAL_FLASH_Unlock+0x40>)
 8014018:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801401a:	4b08      	ldr	r3, [pc, #32]	@ (801403c <HAL_FLASH_Unlock+0x3c>)
 801401c:	4a09      	ldr	r2, [pc, #36]	@ (8014044 <HAL_FLASH_Unlock+0x44>)
 801401e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8014020:	4b06      	ldr	r3, [pc, #24]	@ (801403c <HAL_FLASH_Unlock+0x3c>)
 8014022:	695b      	ldr	r3, [r3, #20]
 8014024:	2b00      	cmp	r3, #0
 8014026:	da02      	bge.n	801402e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8014028:	1dfb      	adds	r3, r7, #7
 801402a:	2201      	movs	r2, #1
 801402c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801402e:	1dfb      	adds	r3, r7, #7
 8014030:	781b      	ldrb	r3, [r3, #0]
}
 8014032:	0018      	movs	r0, r3
 8014034:	46bd      	mov	sp, r7
 8014036:	b002      	add	sp, #8
 8014038:	bd80      	pop	{r7, pc}
 801403a:	46c0      	nop			@ (mov r8, r8)
 801403c:	40022000 	.word	0x40022000
 8014040:	45670123 	.word	0x45670123
 8014044:	cdef89ab 	.word	0xcdef89ab

08014048 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801404e:	1dfb      	adds	r3, r7, #7
 8014050:	2201      	movs	r2, #1
 8014052:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8014054:	4b09      	ldr	r3, [pc, #36]	@ (801407c <HAL_FLASH_Lock+0x34>)
 8014056:	695a      	ldr	r2, [r3, #20]
 8014058:	4b08      	ldr	r3, [pc, #32]	@ (801407c <HAL_FLASH_Lock+0x34>)
 801405a:	2180      	movs	r1, #128	@ 0x80
 801405c:	0609      	lsls	r1, r1, #24
 801405e:	430a      	orrs	r2, r1
 8014060:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8014062:	4b06      	ldr	r3, [pc, #24]	@ (801407c <HAL_FLASH_Lock+0x34>)
 8014064:	695b      	ldr	r3, [r3, #20]
 8014066:	2b00      	cmp	r3, #0
 8014068:	da02      	bge.n	8014070 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 801406a:	1dfb      	adds	r3, r7, #7
 801406c:	2200      	movs	r2, #0
 801406e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8014070:	1dfb      	adds	r3, r7, #7
 8014072:	781b      	ldrb	r3, [r3, #0]
}
 8014074:	0018      	movs	r0, r3
 8014076:	46bd      	mov	sp, r7
 8014078:	b002      	add	sp, #8
 801407a:	bd80      	pop	{r7, pc}
 801407c:	40022000 	.word	0x40022000

08014080 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b084      	sub	sp, #16
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8014088:	f7fd ffb2 	bl	8011ff0 <HAL_GetTick>
 801408c:	0002      	movs	r2, r0
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	189b      	adds	r3, r3, r2
 8014092:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8014094:	2380      	movs	r3, #128	@ 0x80
 8014096:	025b      	lsls	r3, r3, #9
 8014098:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 801409a:	e007      	b.n	80140ac <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 801409c:	f7fd ffa8 	bl	8011ff0 <HAL_GetTick>
 80140a0:	0002      	movs	r2, r0
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d801      	bhi.n	80140ac <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80140a8:	2303      	movs	r3, #3
 80140aa:	e02a      	b.n	8014102 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80140ac:	4b17      	ldr	r3, [pc, #92]	@ (801410c <FLASH_WaitForLastOperation+0x8c>)
 80140ae:	691b      	ldr	r3, [r3, #16]
 80140b0:	68ba      	ldr	r2, [r7, #8]
 80140b2:	4013      	ands	r3, r2
 80140b4:	d1f2      	bne.n	801409c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80140b6:	4b15      	ldr	r3, [pc, #84]	@ (801410c <FLASH_WaitForLastOperation+0x8c>)
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	4a15      	ldr	r2, [pc, #84]	@ (8014110 <FLASH_WaitForLastOperation+0x90>)
 80140bc:	4013      	ands	r3, r2
 80140be:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80140c0:	4b12      	ldr	r3, [pc, #72]	@ (801410c <FLASH_WaitForLastOperation+0x8c>)
 80140c2:	4a14      	ldr	r2, [pc, #80]	@ (8014114 <FLASH_WaitForLastOperation+0x94>)
 80140c4:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d004      	beq.n	80140d6 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80140cc:	4b12      	ldr	r3, [pc, #72]	@ (8014118 <FLASH_WaitForLastOperation+0x98>)
 80140ce:	68ba      	ldr	r2, [r7, #8]
 80140d0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80140d2:	2301      	movs	r3, #1
 80140d4:	e015      	b.n	8014102 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80140d6:	f7fd ff8b 	bl	8011ff0 <HAL_GetTick>
 80140da:	0002      	movs	r2, r0
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	189b      	adds	r3, r3, r2
 80140e0:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80140e2:	e007      	b.n	80140f4 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80140e4:	f7fd ff84 	bl	8011ff0 <HAL_GetTick>
 80140e8:	0002      	movs	r2, r0
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	4293      	cmp	r3, r2
 80140ee:	d801      	bhi.n	80140f4 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80140f0:	2303      	movs	r3, #3
 80140f2:	e006      	b.n	8014102 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80140f4:	4b05      	ldr	r3, [pc, #20]	@ (801410c <FLASH_WaitForLastOperation+0x8c>)
 80140f6:	691a      	ldr	r2, [r3, #16]
 80140f8:	2380      	movs	r3, #128	@ 0x80
 80140fa:	02db      	lsls	r3, r3, #11
 80140fc:	4013      	ands	r3, r2
 80140fe:	d1f1      	bne.n	80140e4 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8014100:	2300      	movs	r3, #0
}
 8014102:	0018      	movs	r0, r3
 8014104:	46bd      	mov	sp, r7
 8014106:	b004      	add	sp, #16
 8014108:	bd80      	pop	{r7, pc}
 801410a:	46c0      	nop			@ (mov r8, r8)
 801410c:	40022000 	.word	0x40022000
 8014110:	000083fa 	.word	0x000083fa
 8014114:	000083fb 	.word	0x000083fb
 8014118:	2000126c 	.word	0x2000126c

0801411c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801411c:	b5b0      	push	{r4, r5, r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	603a      	str	r2, [r7, #0]
 8014126:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8014128:	4b0b      	ldr	r3, [pc, #44]	@ (8014158 <FLASH_Program_DoubleWord+0x3c>)
 801412a:	695a      	ldr	r2, [r3, #20]
 801412c:	4b0a      	ldr	r3, [pc, #40]	@ (8014158 <FLASH_Program_DoubleWord+0x3c>)
 801412e:	2101      	movs	r1, #1
 8014130:	430a      	orrs	r2, r1
 8014132:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801413a:	f3bf 8f6f 	isb	sy
}
 801413e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	001c      	movs	r4, r3
 8014144:	2300      	movs	r3, #0
 8014146:	001d      	movs	r5, r3
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	3304      	adds	r3, #4
 801414c:	0022      	movs	r2, r4
 801414e:	601a      	str	r2, [r3, #0]
}
 8014150:	46c0      	nop			@ (mov r8, r8)
 8014152:	46bd      	mov	sp, r7
 8014154:	b004      	add	sp, #16
 8014156:	bdb0      	pop	{r4, r5, r7, pc}
 8014158:	40022000 	.word	0x40022000

0801415c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801415c:	b5b0      	push	{r4, r5, r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8014166:	4b32      	ldr	r3, [pc, #200]	@ (8014230 <HAL_FLASHEx_Erase+0xd4>)
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b01      	cmp	r3, #1
 801416c:	d101      	bne.n	8014172 <HAL_FLASHEx_Erase+0x16>
 801416e:	2302      	movs	r3, #2
 8014170:	e059      	b.n	8014226 <HAL_FLASHEx_Erase+0xca>
 8014172:	4b2f      	ldr	r3, [pc, #188]	@ (8014230 <HAL_FLASHEx_Erase+0xd4>)
 8014174:	2201      	movs	r2, #1
 8014176:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014178:	4b2d      	ldr	r3, [pc, #180]	@ (8014230 <HAL_FLASHEx_Erase+0xd4>)
 801417a:	2200      	movs	r2, #0
 801417c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801417e:	250f      	movs	r5, #15
 8014180:	197c      	adds	r4, r7, r5
 8014182:	23fa      	movs	r3, #250	@ 0xfa
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	0018      	movs	r0, r3
 8014188:	f7ff ff7a 	bl	8014080 <FLASH_WaitForLastOperation>
 801418c:	0003      	movs	r3, r0
 801418e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014190:	002c      	movs	r4, r5
 8014192:	193b      	adds	r3, r7, r4
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d13f      	bne.n	801421a <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	2201      	movs	r2, #1
 801419e:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b04      	cmp	r3, #4
 80141a6:	d10a      	bne.n	80141be <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80141a8:	f000 f846 	bl	8014238 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80141ac:	193c      	adds	r4, r7, r4
 80141ae:	23fa      	movs	r3, #250	@ 0xfa
 80141b0:	009b      	lsls	r3, r3, #2
 80141b2:	0018      	movs	r0, r3
 80141b4:	f7ff ff64 	bl	8014080 <FLASH_WaitForLastOperation>
 80141b8:	0003      	movs	r3, r0
 80141ba:	7023      	strb	r3, [r4, #0]
 80141bc:	e02d      	b.n	801421a <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	2201      	movs	r2, #1
 80141c2:	4252      	negs	r2, r2
 80141c4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	689b      	ldr	r3, [r3, #8]
 80141ca:	60bb      	str	r3, [r7, #8]
 80141cc:	e017      	b.n	80141fe <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	0018      	movs	r0, r3
 80141d2:	f000 f841 	bl	8014258 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80141d6:	250f      	movs	r5, #15
 80141d8:	197c      	adds	r4, r7, r5
 80141da:	23fa      	movs	r3, #250	@ 0xfa
 80141dc:	009b      	lsls	r3, r3, #2
 80141de:	0018      	movs	r0, r3
 80141e0:	f7ff ff4e 	bl	8014080 <FLASH_WaitForLastOperation>
 80141e4:	0003      	movs	r3, r0
 80141e6:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80141e8:	197b      	adds	r3, r7, r5
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d003      	beq.n	80141f8 <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	601a      	str	r2, [r3, #0]
          break;
 80141f6:	e00a      	b.n	801420e <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	3301      	adds	r3, #1
 80141fc:	60bb      	str	r3, [r7, #8]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	689a      	ldr	r2, [r3, #8]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	18d3      	adds	r3, r2, r3
 8014208:	68ba      	ldr	r2, [r7, #8]
 801420a:	429a      	cmp	r2, r3
 801420c:	d3df      	bcc.n	80141ce <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801420e:	4b09      	ldr	r3, [pc, #36]	@ (8014234 <HAL_FLASHEx_Erase+0xd8>)
 8014210:	695a      	ldr	r2, [r3, #20]
 8014212:	4b08      	ldr	r3, [pc, #32]	@ (8014234 <HAL_FLASHEx_Erase+0xd8>)
 8014214:	2102      	movs	r1, #2
 8014216:	438a      	bics	r2, r1
 8014218:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801421a:	4b05      	ldr	r3, [pc, #20]	@ (8014230 <HAL_FLASHEx_Erase+0xd4>)
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8014220:	230f      	movs	r3, #15
 8014222:	18fb      	adds	r3, r7, r3
 8014224:	781b      	ldrb	r3, [r3, #0]
}
 8014226:	0018      	movs	r0, r3
 8014228:	46bd      	mov	sp, r7
 801422a:	b004      	add	sp, #16
 801422c:	bdb0      	pop	{r4, r5, r7, pc}
 801422e:	46c0      	nop			@ (mov r8, r8)
 8014230:	2000126c 	.word	0x2000126c
 8014234:	40022000 	.word	0x40022000

08014238 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 801423c:	4b04      	ldr	r3, [pc, #16]	@ (8014250 <FLASH_MassErase+0x18>)
 801423e:	695a      	ldr	r2, [r3, #20]
 8014240:	4b03      	ldr	r3, [pc, #12]	@ (8014250 <FLASH_MassErase+0x18>)
 8014242:	4904      	ldr	r1, [pc, #16]	@ (8014254 <FLASH_MassErase+0x1c>)
 8014244:	430a      	orrs	r2, r1
 8014246:	615a      	str	r2, [r3, #20]
}
 8014248:	46c0      	nop			@ (mov r8, r8)
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	46c0      	nop			@ (mov r8, r8)
 8014250:	40022000 	.word	0x40022000
 8014254:	00010004 	.word	0x00010004

08014258 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8014260:	4b08      	ldr	r3, [pc, #32]	@ (8014284 <FLASH_PageErase+0x2c>)
 8014262:	695b      	ldr	r3, [r3, #20]
 8014264:	4a08      	ldr	r2, [pc, #32]	@ (8014288 <FLASH_PageErase+0x30>)
 8014266:	4013      	ands	r3, r2
 8014268:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	00da      	lsls	r2, r3, #3
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	431a      	orrs	r2, r3
 8014272:	4b04      	ldr	r3, [pc, #16]	@ (8014284 <FLASH_PageErase+0x2c>)
 8014274:	4905      	ldr	r1, [pc, #20]	@ (801428c <FLASH_PageErase+0x34>)
 8014276:	430a      	orrs	r2, r1
 8014278:	615a      	str	r2, [r3, #20]
}
 801427a:	46c0      	nop			@ (mov r8, r8)
 801427c:	46bd      	mov	sp, r7
 801427e:	b004      	add	sp, #16
 8014280:	bd80      	pop	{r7, pc}
 8014282:	46c0      	nop			@ (mov r8, r8)
 8014284:	40022000 	.word	0x40022000
 8014288:	fffffc07 	.word	0xfffffc07
 801428c:	00010002 	.word	0x00010002

08014290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801429a:	2300      	movs	r3, #0
 801429c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801429e:	e153      	b.n	8014548 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2101      	movs	r1, #1
 80142a6:	697a      	ldr	r2, [r7, #20]
 80142a8:	4091      	lsls	r1, r2
 80142aa:	000a      	movs	r2, r1
 80142ac:	4013      	ands	r3, r2
 80142ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d100      	bne.n	80142b8 <HAL_GPIO_Init+0x28>
 80142b6:	e144      	b.n	8014542 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	2203      	movs	r2, #3
 80142be:	4013      	ands	r3, r2
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d005      	beq.n	80142d0 <HAL_GPIO_Init+0x40>
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	2203      	movs	r2, #3
 80142ca:	4013      	ands	r3, r2
 80142cc:	2b02      	cmp	r3, #2
 80142ce:	d130      	bne.n	8014332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	005b      	lsls	r3, r3, #1
 80142da:	2203      	movs	r2, #3
 80142dc:	409a      	lsls	r2, r3
 80142de:	0013      	movs	r3, r2
 80142e0:	43da      	mvns	r2, r3
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	4013      	ands	r3, r2
 80142e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	68da      	ldr	r2, [r3, #12]
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	005b      	lsls	r3, r3, #1
 80142f0:	409a      	lsls	r2, r3
 80142f2:	0013      	movs	r3, r2
 80142f4:	693a      	ldr	r2, [r7, #16]
 80142f6:	4313      	orrs	r3, r2
 80142f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	693a      	ldr	r2, [r7, #16]
 80142fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8014306:	2201      	movs	r2, #1
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	409a      	lsls	r2, r3
 801430c:	0013      	movs	r3, r2
 801430e:	43da      	mvns	r2, r3
 8014310:	693b      	ldr	r3, [r7, #16]
 8014312:	4013      	ands	r3, r2
 8014314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	091b      	lsrs	r3, r3, #4
 801431c:	2201      	movs	r2, #1
 801431e:	401a      	ands	r2, r3
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	409a      	lsls	r2, r3
 8014324:	0013      	movs	r3, r2
 8014326:	693a      	ldr	r2, [r7, #16]
 8014328:	4313      	orrs	r3, r2
 801432a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	693a      	ldr	r2, [r7, #16]
 8014330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	2203      	movs	r2, #3
 8014338:	4013      	ands	r3, r2
 801433a:	2b03      	cmp	r3, #3
 801433c:	d017      	beq.n	801436e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	005b      	lsls	r3, r3, #1
 8014348:	2203      	movs	r2, #3
 801434a:	409a      	lsls	r2, r3
 801434c:	0013      	movs	r3, r2
 801434e:	43da      	mvns	r2, r3
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	4013      	ands	r3, r2
 8014354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	689a      	ldr	r2, [r3, #8]
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	005b      	lsls	r3, r3, #1
 801435e:	409a      	lsls	r2, r3
 8014360:	0013      	movs	r3, r2
 8014362:	693a      	ldr	r2, [r7, #16]
 8014364:	4313      	orrs	r3, r2
 8014366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	693a      	ldr	r2, [r7, #16]
 801436c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	2203      	movs	r2, #3
 8014374:	4013      	ands	r3, r2
 8014376:	2b02      	cmp	r3, #2
 8014378:	d123      	bne.n	80143c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	08da      	lsrs	r2, r3, #3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	3208      	adds	r2, #8
 8014382:	0092      	lsls	r2, r2, #2
 8014384:	58d3      	ldr	r3, [r2, r3]
 8014386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	2207      	movs	r2, #7
 801438c:	4013      	ands	r3, r2
 801438e:	009b      	lsls	r3, r3, #2
 8014390:	220f      	movs	r2, #15
 8014392:	409a      	lsls	r2, r3
 8014394:	0013      	movs	r3, r2
 8014396:	43da      	mvns	r2, r3
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	4013      	ands	r3, r2
 801439c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	691a      	ldr	r2, [r3, #16]
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	2107      	movs	r1, #7
 80143a6:	400b      	ands	r3, r1
 80143a8:	009b      	lsls	r3, r3, #2
 80143aa:	409a      	lsls	r2, r3
 80143ac:	0013      	movs	r3, r2
 80143ae:	693a      	ldr	r2, [r7, #16]
 80143b0:	4313      	orrs	r3, r2
 80143b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	08da      	lsrs	r2, r3, #3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	3208      	adds	r2, #8
 80143bc:	0092      	lsls	r2, r2, #2
 80143be:	6939      	ldr	r1, [r7, #16]
 80143c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	005b      	lsls	r3, r3, #1
 80143cc:	2203      	movs	r2, #3
 80143ce:	409a      	lsls	r2, r3
 80143d0:	0013      	movs	r3, r2
 80143d2:	43da      	mvns	r2, r3
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	4013      	ands	r3, r2
 80143d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	2203      	movs	r2, #3
 80143e0:	401a      	ands	r2, r3
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	005b      	lsls	r3, r3, #1
 80143e6:	409a      	lsls	r2, r3
 80143e8:	0013      	movs	r3, r2
 80143ea:	693a      	ldr	r2, [r7, #16]
 80143ec:	4313      	orrs	r3, r2
 80143ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	693a      	ldr	r2, [r7, #16]
 80143f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	685a      	ldr	r2, [r3, #4]
 80143fa:	23c0      	movs	r3, #192	@ 0xc0
 80143fc:	029b      	lsls	r3, r3, #10
 80143fe:	4013      	ands	r3, r2
 8014400:	d100      	bne.n	8014404 <HAL_GPIO_Init+0x174>
 8014402:	e09e      	b.n	8014542 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8014404:	4a56      	ldr	r2, [pc, #344]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	089b      	lsrs	r3, r3, #2
 801440a:	3318      	adds	r3, #24
 801440c:	009b      	lsls	r3, r3, #2
 801440e:	589b      	ldr	r3, [r3, r2]
 8014410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	2203      	movs	r2, #3
 8014416:	4013      	ands	r3, r2
 8014418:	00db      	lsls	r3, r3, #3
 801441a:	220f      	movs	r2, #15
 801441c:	409a      	lsls	r2, r3
 801441e:	0013      	movs	r3, r2
 8014420:	43da      	mvns	r2, r3
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	4013      	ands	r3, r2
 8014426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	23a0      	movs	r3, #160	@ 0xa0
 801442c:	05db      	lsls	r3, r3, #23
 801442e:	429a      	cmp	r2, r3
 8014430:	d01f      	beq.n	8014472 <HAL_GPIO_Init+0x1e2>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	4a4b      	ldr	r2, [pc, #300]	@ (8014564 <HAL_GPIO_Init+0x2d4>)
 8014436:	4293      	cmp	r3, r2
 8014438:	d019      	beq.n	801446e <HAL_GPIO_Init+0x1de>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4a4a      	ldr	r2, [pc, #296]	@ (8014568 <HAL_GPIO_Init+0x2d8>)
 801443e:	4293      	cmp	r3, r2
 8014440:	d013      	beq.n	801446a <HAL_GPIO_Init+0x1da>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4a49      	ldr	r2, [pc, #292]	@ (801456c <HAL_GPIO_Init+0x2dc>)
 8014446:	4293      	cmp	r3, r2
 8014448:	d00d      	beq.n	8014466 <HAL_GPIO_Init+0x1d6>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	4a48      	ldr	r2, [pc, #288]	@ (8014570 <HAL_GPIO_Init+0x2e0>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d007      	beq.n	8014462 <HAL_GPIO_Init+0x1d2>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	4a47      	ldr	r2, [pc, #284]	@ (8014574 <HAL_GPIO_Init+0x2e4>)
 8014456:	4293      	cmp	r3, r2
 8014458:	d101      	bne.n	801445e <HAL_GPIO_Init+0x1ce>
 801445a:	2305      	movs	r3, #5
 801445c:	e00a      	b.n	8014474 <HAL_GPIO_Init+0x1e4>
 801445e:	2306      	movs	r3, #6
 8014460:	e008      	b.n	8014474 <HAL_GPIO_Init+0x1e4>
 8014462:	2304      	movs	r3, #4
 8014464:	e006      	b.n	8014474 <HAL_GPIO_Init+0x1e4>
 8014466:	2303      	movs	r3, #3
 8014468:	e004      	b.n	8014474 <HAL_GPIO_Init+0x1e4>
 801446a:	2302      	movs	r3, #2
 801446c:	e002      	b.n	8014474 <HAL_GPIO_Init+0x1e4>
 801446e:	2301      	movs	r3, #1
 8014470:	e000      	b.n	8014474 <HAL_GPIO_Init+0x1e4>
 8014472:	2300      	movs	r3, #0
 8014474:	697a      	ldr	r2, [r7, #20]
 8014476:	2103      	movs	r1, #3
 8014478:	400a      	ands	r2, r1
 801447a:	00d2      	lsls	r2, r2, #3
 801447c:	4093      	lsls	r3, r2
 801447e:	693a      	ldr	r2, [r7, #16]
 8014480:	4313      	orrs	r3, r2
 8014482:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8014484:	4936      	ldr	r1, [pc, #216]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	089b      	lsrs	r3, r3, #2
 801448a:	3318      	adds	r3, #24
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	693a      	ldr	r2, [r7, #16]
 8014490:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8014492:	4b33      	ldr	r3, [pc, #204]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	43da      	mvns	r2, r3
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	4013      	ands	r3, r2
 80144a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	685a      	ldr	r2, [r3, #4]
 80144a6:	2380      	movs	r3, #128	@ 0x80
 80144a8:	035b      	lsls	r3, r3, #13
 80144aa:	4013      	ands	r3, r2
 80144ac:	d003      	beq.n	80144b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80144ae:	693a      	ldr	r2, [r7, #16]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	4313      	orrs	r3, r2
 80144b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80144b6:	4b2a      	ldr	r3, [pc, #168]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 80144b8:	693a      	ldr	r2, [r7, #16]
 80144ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80144bc:	4b28      	ldr	r3, [pc, #160]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	43da      	mvns	r2, r3
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	4013      	ands	r3, r2
 80144ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	685a      	ldr	r2, [r3, #4]
 80144d0:	2380      	movs	r3, #128	@ 0x80
 80144d2:	039b      	lsls	r3, r3, #14
 80144d4:	4013      	ands	r3, r2
 80144d6:	d003      	beq.n	80144e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80144d8:	693a      	ldr	r2, [r7, #16]
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	4313      	orrs	r3, r2
 80144de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80144e0:	4b1f      	ldr	r3, [pc, #124]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 80144e2:	693a      	ldr	r2, [r7, #16]
 80144e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80144e6:	4a1e      	ldr	r2, [pc, #120]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 80144e8:	2384      	movs	r3, #132	@ 0x84
 80144ea:	58d3      	ldr	r3, [r2, r3]
 80144ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	43da      	mvns	r2, r3
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	4013      	ands	r3, r2
 80144f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	685a      	ldr	r2, [r3, #4]
 80144fc:	2380      	movs	r3, #128	@ 0x80
 80144fe:	029b      	lsls	r3, r3, #10
 8014500:	4013      	ands	r3, r2
 8014502:	d003      	beq.n	801450c <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8014504:	693a      	ldr	r2, [r7, #16]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	4313      	orrs	r3, r2
 801450a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801450c:	4914      	ldr	r1, [pc, #80]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 801450e:	2284      	movs	r2, #132	@ 0x84
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8014514:	4a12      	ldr	r2, [pc, #72]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 8014516:	2380      	movs	r3, #128	@ 0x80
 8014518:	58d3      	ldr	r3, [r2, r3]
 801451a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	43da      	mvns	r2, r3
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	4013      	ands	r3, r2
 8014524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	685a      	ldr	r2, [r3, #4]
 801452a:	2380      	movs	r3, #128	@ 0x80
 801452c:	025b      	lsls	r3, r3, #9
 801452e:	4013      	ands	r3, r2
 8014530:	d003      	beq.n	801453a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8014532:	693a      	ldr	r2, [r7, #16]
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	4313      	orrs	r3, r2
 8014538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801453a:	4909      	ldr	r1, [pc, #36]	@ (8014560 <HAL_GPIO_Init+0x2d0>)
 801453c:	2280      	movs	r2, #128	@ 0x80
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	3301      	adds	r3, #1
 8014546:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	681a      	ldr	r2, [r3, #0]
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	40da      	lsrs	r2, r3
 8014550:	1e13      	subs	r3, r2, #0
 8014552:	d000      	beq.n	8014556 <HAL_GPIO_Init+0x2c6>
 8014554:	e6a4      	b.n	80142a0 <HAL_GPIO_Init+0x10>
  }
}
 8014556:	46c0      	nop			@ (mov r8, r8)
 8014558:	46c0      	nop			@ (mov r8, r8)
 801455a:	46bd      	mov	sp, r7
 801455c:	b006      	add	sp, #24
 801455e:	bd80      	pop	{r7, pc}
 8014560:	40021800 	.word	0x40021800
 8014564:	50000400 	.word	0x50000400
 8014568:	50000800 	.word	0x50000800
 801456c:	50000c00 	.word	0x50000c00
 8014570:	50001000 	.word	0x50001000
 8014574:	50001400 	.word	0x50001400

08014578 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b086      	sub	sp, #24
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8014582:	2300      	movs	r3, #0
 8014584:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8014586:	e0c0      	b.n	801470a <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8014588:	2201      	movs	r2, #1
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	409a      	lsls	r2, r3
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	4013      	ands	r3, r2
 8014592:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d100      	bne.n	801459c <HAL_GPIO_DeInit+0x24>
 801459a:	e0b3      	b.n	8014704 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 801459c:	4a60      	ldr	r2, [pc, #384]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	089b      	lsrs	r3, r3, #2
 80145a2:	3318      	adds	r3, #24
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	589b      	ldr	r3, [r3, r2]
 80145a8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	2203      	movs	r2, #3
 80145ae:	4013      	ands	r3, r2
 80145b0:	00db      	lsls	r3, r3, #3
 80145b2:	220f      	movs	r2, #15
 80145b4:	409a      	lsls	r2, r3
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	4013      	ands	r3, r2
 80145ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	23a0      	movs	r3, #160	@ 0xa0
 80145c0:	05db      	lsls	r3, r3, #23
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d01f      	beq.n	8014606 <HAL_GPIO_DeInit+0x8e>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	4a56      	ldr	r2, [pc, #344]	@ (8014724 <HAL_GPIO_DeInit+0x1ac>)
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d019      	beq.n	8014602 <HAL_GPIO_DeInit+0x8a>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4a55      	ldr	r2, [pc, #340]	@ (8014728 <HAL_GPIO_DeInit+0x1b0>)
 80145d2:	4293      	cmp	r3, r2
 80145d4:	d013      	beq.n	80145fe <HAL_GPIO_DeInit+0x86>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4a54      	ldr	r2, [pc, #336]	@ (801472c <HAL_GPIO_DeInit+0x1b4>)
 80145da:	4293      	cmp	r3, r2
 80145dc:	d00d      	beq.n	80145fa <HAL_GPIO_DeInit+0x82>
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	4a53      	ldr	r2, [pc, #332]	@ (8014730 <HAL_GPIO_DeInit+0x1b8>)
 80145e2:	4293      	cmp	r3, r2
 80145e4:	d007      	beq.n	80145f6 <HAL_GPIO_DeInit+0x7e>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	4a52      	ldr	r2, [pc, #328]	@ (8014734 <HAL_GPIO_DeInit+0x1bc>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d101      	bne.n	80145f2 <HAL_GPIO_DeInit+0x7a>
 80145ee:	2305      	movs	r3, #5
 80145f0:	e00a      	b.n	8014608 <HAL_GPIO_DeInit+0x90>
 80145f2:	2306      	movs	r3, #6
 80145f4:	e008      	b.n	8014608 <HAL_GPIO_DeInit+0x90>
 80145f6:	2304      	movs	r3, #4
 80145f8:	e006      	b.n	8014608 <HAL_GPIO_DeInit+0x90>
 80145fa:	2303      	movs	r3, #3
 80145fc:	e004      	b.n	8014608 <HAL_GPIO_DeInit+0x90>
 80145fe:	2302      	movs	r3, #2
 8014600:	e002      	b.n	8014608 <HAL_GPIO_DeInit+0x90>
 8014602:	2301      	movs	r3, #1
 8014604:	e000      	b.n	8014608 <HAL_GPIO_DeInit+0x90>
 8014606:	2300      	movs	r3, #0
 8014608:	697a      	ldr	r2, [r7, #20]
 801460a:	2103      	movs	r1, #3
 801460c:	400a      	ands	r2, r1
 801460e:	00d2      	lsls	r2, r2, #3
 8014610:	4093      	lsls	r3, r2
 8014612:	68fa      	ldr	r2, [r7, #12]
 8014614:	429a      	cmp	r2, r3
 8014616:	d136      	bne.n	8014686 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8014618:	4a41      	ldr	r2, [pc, #260]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801461a:	2380      	movs	r3, #128	@ 0x80
 801461c:	58d3      	ldr	r3, [r2, r3]
 801461e:	693a      	ldr	r2, [r7, #16]
 8014620:	43d2      	mvns	r2, r2
 8014622:	493f      	ldr	r1, [pc, #252]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 8014624:	4013      	ands	r3, r2
 8014626:	2280      	movs	r2, #128	@ 0x80
 8014628:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 801462a:	4a3d      	ldr	r2, [pc, #244]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801462c:	2384      	movs	r3, #132	@ 0x84
 801462e:	58d3      	ldr	r3, [r2, r3]
 8014630:	693a      	ldr	r2, [r7, #16]
 8014632:	43d2      	mvns	r2, r2
 8014634:	493a      	ldr	r1, [pc, #232]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 8014636:	4013      	ands	r3, r2
 8014638:	2284      	movs	r2, #132	@ 0x84
 801463a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801463c:	4b38      	ldr	r3, [pc, #224]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801463e:	685a      	ldr	r2, [r3, #4]
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	43d9      	mvns	r1, r3
 8014644:	4b36      	ldr	r3, [pc, #216]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 8014646:	400a      	ands	r2, r1
 8014648:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801464a:	4b35      	ldr	r3, [pc, #212]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	43d9      	mvns	r1, r3
 8014652:	4b33      	ldr	r3, [pc, #204]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 8014654:	400a      	ands	r2, r1
 8014656:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	2203      	movs	r2, #3
 801465c:	4013      	ands	r3, r2
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	220f      	movs	r2, #15
 8014662:	409a      	lsls	r2, r3
 8014664:	0013      	movs	r3, r2
 8014666:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8014668:	4a2d      	ldr	r2, [pc, #180]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	089b      	lsrs	r3, r3, #2
 801466e:	3318      	adds	r3, #24
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	589a      	ldr	r2, [r3, r2]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	43d9      	mvns	r1, r3
 8014678:	4829      	ldr	r0, [pc, #164]	@ (8014720 <HAL_GPIO_DeInit+0x1a8>)
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	089b      	lsrs	r3, r3, #2
 801467e:	400a      	ands	r2, r1
 8014680:	3318      	adds	r3, #24
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	2103      	movs	r1, #3
 8014690:	4099      	lsls	r1, r3
 8014692:	000b      	movs	r3, r1
 8014694:	431a      	orrs	r2, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	08da      	lsrs	r2, r3, #3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	3208      	adds	r2, #8
 80146a2:	0092      	lsls	r2, r2, #2
 80146a4:	58d3      	ldr	r3, [r2, r3]
 80146a6:	697a      	ldr	r2, [r7, #20]
 80146a8:	2107      	movs	r1, #7
 80146aa:	400a      	ands	r2, r1
 80146ac:	0092      	lsls	r2, r2, #2
 80146ae:	210f      	movs	r1, #15
 80146b0:	4091      	lsls	r1, r2
 80146b2:	000a      	movs	r2, r1
 80146b4:	43d1      	mvns	r1, r2
 80146b6:	697a      	ldr	r2, [r7, #20]
 80146b8:	08d2      	lsrs	r2, r2, #3
 80146ba:	4019      	ands	r1, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	3208      	adds	r2, #8
 80146c0:	0092      	lsls	r2, r2, #2
 80146c2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	697a      	ldr	r2, [r7, #20]
 80146ca:	0052      	lsls	r2, r2, #1
 80146cc:	2103      	movs	r1, #3
 80146ce:	4091      	lsls	r1, r2
 80146d0:	000a      	movs	r2, r1
 80146d2:	43d2      	mvns	r2, r2
 80146d4:	401a      	ands	r2, r3
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	2101      	movs	r1, #1
 80146e0:	697a      	ldr	r2, [r7, #20]
 80146e2:	4091      	lsls	r1, r2
 80146e4:	000a      	movs	r2, r1
 80146e6:	43d2      	mvns	r2, r2
 80146e8:	401a      	ands	r2, r3
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	68db      	ldr	r3, [r3, #12]
 80146f2:	697a      	ldr	r2, [r7, #20]
 80146f4:	0052      	lsls	r2, r2, #1
 80146f6:	2103      	movs	r1, #3
 80146f8:	4091      	lsls	r1, r2
 80146fa:	000a      	movs	r2, r1
 80146fc:	43d2      	mvns	r2, r2
 80146fe:	401a      	ands	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	60da      	str	r2, [r3, #12]
    }

    position++;
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	3301      	adds	r3, #1
 8014708:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	40da      	lsrs	r2, r3
 8014710:	1e13      	subs	r3, r2, #0
 8014712:	d000      	beq.n	8014716 <HAL_GPIO_DeInit+0x19e>
 8014714:	e738      	b.n	8014588 <HAL_GPIO_DeInit+0x10>
  }
}
 8014716:	46c0      	nop			@ (mov r8, r8)
 8014718:	46c0      	nop			@ (mov r8, r8)
 801471a:	46bd      	mov	sp, r7
 801471c:	b006      	add	sp, #24
 801471e:	bd80      	pop	{r7, pc}
 8014720:	40021800 	.word	0x40021800
 8014724:	50000400 	.word	0x50000400
 8014728:	50000800 	.word	0x50000800
 801472c:	50000c00 	.word	0x50000c00
 8014730:	50001000 	.word	0x50001000
 8014734:	50001400 	.word	0x50001400

08014738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	000a      	movs	r2, r1
 8014742:	1cbb      	adds	r3, r7, #2
 8014744:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	1cba      	adds	r2, r7, #2
 801474c:	8812      	ldrh	r2, [r2, #0]
 801474e:	4013      	ands	r3, r2
 8014750:	d004      	beq.n	801475c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8014752:	230f      	movs	r3, #15
 8014754:	18fb      	adds	r3, r7, r3
 8014756:	2201      	movs	r2, #1
 8014758:	701a      	strb	r2, [r3, #0]
 801475a:	e003      	b.n	8014764 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801475c:	230f      	movs	r3, #15
 801475e:	18fb      	adds	r3, r7, r3
 8014760:	2200      	movs	r2, #0
 8014762:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8014764:	230f      	movs	r3, #15
 8014766:	18fb      	adds	r3, r7, r3
 8014768:	781b      	ldrb	r3, [r3, #0]
}
 801476a:	0018      	movs	r0, r3
 801476c:	46bd      	mov	sp, r7
 801476e:	b004      	add	sp, #16
 8014770:	bd80      	pop	{r7, pc}

08014772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b082      	sub	sp, #8
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	0008      	movs	r0, r1
 801477c:	0011      	movs	r1, r2
 801477e:	1cbb      	adds	r3, r7, #2
 8014780:	1c02      	adds	r2, r0, #0
 8014782:	801a      	strh	r2, [r3, #0]
 8014784:	1c7b      	adds	r3, r7, #1
 8014786:	1c0a      	adds	r2, r1, #0
 8014788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801478a:	1c7b      	adds	r3, r7, #1
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d004      	beq.n	801479c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8014792:	1cbb      	adds	r3, r7, #2
 8014794:	881a      	ldrh	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801479a:	e003      	b.n	80147a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801479c:	1cbb      	adds	r3, r7, #2
 801479e:	881a      	ldrh	r2, [r3, #0]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80147a4:	46c0      	nop			@ (mov r8, r8)
 80147a6:	46bd      	mov	sp, r7
 80147a8:	b002      	add	sp, #8
 80147aa:	bd80      	pop	{r7, pc}

080147ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	000a      	movs	r2, r1
 80147b6:	1cbb      	adds	r3, r7, #2
 80147b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	695b      	ldr	r3, [r3, #20]
 80147be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80147c0:	1cbb      	adds	r3, r7, #2
 80147c2:	881b      	ldrh	r3, [r3, #0]
 80147c4:	68fa      	ldr	r2, [r7, #12]
 80147c6:	4013      	ands	r3, r2
 80147c8:	041a      	lsls	r2, r3, #16
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	43db      	mvns	r3, r3
 80147ce:	1cb9      	adds	r1, r7, #2
 80147d0:	8809      	ldrh	r1, [r1, #0]
 80147d2:	400b      	ands	r3, r1
 80147d4:	431a      	orrs	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	619a      	str	r2, [r3, #24]
}
 80147da:	46c0      	nop			@ (mov r8, r8)
 80147dc:	46bd      	mov	sp, r7
 80147de:	b004      	add	sp, #16
 80147e0:	bd80      	pop	{r7, pc}
	...

080147e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	0002      	movs	r2, r0
 80147ec:	1dbb      	adds	r3, r7, #6
 80147ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80147f0:	4b10      	ldr	r3, [pc, #64]	@ (8014834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	1dba      	adds	r2, r7, #6
 80147f6:	8812      	ldrh	r2, [r2, #0]
 80147f8:	4013      	ands	r3, r2
 80147fa:	d008      	beq.n	801480e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80147fc:	4b0d      	ldr	r3, [pc, #52]	@ (8014834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80147fe:	1dba      	adds	r2, r7, #6
 8014800:	8812      	ldrh	r2, [r2, #0]
 8014802:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8014804:	1dbb      	adds	r3, r7, #6
 8014806:	881b      	ldrh	r3, [r3, #0]
 8014808:	0018      	movs	r0, r3
 801480a:	f000 f815 	bl	8014838 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 801480e:	4b09      	ldr	r3, [pc, #36]	@ (8014834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8014810:	691b      	ldr	r3, [r3, #16]
 8014812:	1dba      	adds	r2, r7, #6
 8014814:	8812      	ldrh	r2, [r2, #0]
 8014816:	4013      	ands	r3, r2
 8014818:	d008      	beq.n	801482c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801481a:	4b06      	ldr	r3, [pc, #24]	@ (8014834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801481c:	1dba      	adds	r2, r7, #6
 801481e:	8812      	ldrh	r2, [r2, #0]
 8014820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8014822:	1dbb      	adds	r3, r7, #6
 8014824:	881b      	ldrh	r3, [r3, #0]
 8014826:	0018      	movs	r0, r3
 8014828:	f000 f810 	bl	801484c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 801482c:	46c0      	nop			@ (mov r8, r8)
 801482e:	46bd      	mov	sp, r7
 8014830:	b002      	add	sp, #8
 8014832:	bd80      	pop	{r7, pc}
 8014834:	40021800 	.word	0x40021800

08014838 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	0002      	movs	r2, r0
 8014840:	1dbb      	adds	r3, r7, #6
 8014842:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8014844:	46c0      	nop			@ (mov r8, r8)
 8014846:	46bd      	mov	sp, r7
 8014848:	b002      	add	sp, #8
 801484a:	bd80      	pop	{r7, pc}

0801484c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	0002      	movs	r2, r0
 8014854:	1dbb      	adds	r3, r7, #6
 8014856:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8014858:	46c0      	nop			@ (mov r8, r8)
 801485a:	46bd      	mov	sp, r7
 801485c:	b002      	add	sp, #8
 801485e:	bd80      	pop	{r7, pc}

08014860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d101      	bne.n	8014872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801486e:	2301      	movs	r3, #1
 8014870:	e08f      	b.n	8014992 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2241      	movs	r2, #65	@ 0x41
 8014876:	5c9b      	ldrb	r3, [r3, r2]
 8014878:	b2db      	uxtb	r3, r3
 801487a:	2b00      	cmp	r3, #0
 801487c:	d107      	bne.n	801488e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2240      	movs	r2, #64	@ 0x40
 8014882:	2100      	movs	r1, #0
 8014884:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	0018      	movs	r0, r3
 801488a:	f7f7 fbeb 	bl	800c064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2241      	movs	r2, #65	@ 0x41
 8014892:	2124      	movs	r1, #36	@ 0x24
 8014894:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2101      	movs	r1, #1
 80148a2:	438a      	bics	r2, r1
 80148a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	685a      	ldr	r2, [r3, #4]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	493b      	ldr	r1, [pc, #236]	@ (801499c <HAL_I2C_Init+0x13c>)
 80148b0:	400a      	ands	r2, r1
 80148b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	689a      	ldr	r2, [r3, #8]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	4938      	ldr	r1, [pc, #224]	@ (80149a0 <HAL_I2C_Init+0x140>)
 80148c0:	400a      	ands	r2, r1
 80148c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d108      	bne.n	80148de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	689a      	ldr	r2, [r3, #8]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2180      	movs	r1, #128	@ 0x80
 80148d6:	0209      	lsls	r1, r1, #8
 80148d8:	430a      	orrs	r2, r1
 80148da:	609a      	str	r2, [r3, #8]
 80148dc:	e007      	b.n	80148ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	689a      	ldr	r2, [r3, #8]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	2184      	movs	r1, #132	@ 0x84
 80148e8:	0209      	lsls	r1, r1, #8
 80148ea:	430a      	orrs	r2, r1
 80148ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d109      	bne.n	801490a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	685a      	ldr	r2, [r3, #4]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	2180      	movs	r1, #128	@ 0x80
 8014902:	0109      	lsls	r1, r1, #4
 8014904:	430a      	orrs	r2, r1
 8014906:	605a      	str	r2, [r3, #4]
 8014908:	e007      	b.n	801491a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	685a      	ldr	r2, [r3, #4]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4923      	ldr	r1, [pc, #140]	@ (80149a4 <HAL_I2C_Init+0x144>)
 8014916:	400a      	ands	r2, r1
 8014918:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	685a      	ldr	r2, [r3, #4]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	4920      	ldr	r1, [pc, #128]	@ (80149a8 <HAL_I2C_Init+0x148>)
 8014926:	430a      	orrs	r2, r1
 8014928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	68da      	ldr	r2, [r3, #12]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	491a      	ldr	r1, [pc, #104]	@ (80149a0 <HAL_I2C_Init+0x140>)
 8014936:	400a      	ands	r2, r1
 8014938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	691a      	ldr	r2, [r3, #16]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	695b      	ldr	r3, [r3, #20]
 8014942:	431a      	orrs	r2, r3
 8014944:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	699b      	ldr	r3, [r3, #24]
 801494a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	430a      	orrs	r2, r1
 8014952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	69d9      	ldr	r1, [r3, #28]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6a1a      	ldr	r2, [r3, #32]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	430a      	orrs	r2, r1
 8014962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2101      	movs	r1, #1
 8014970:	430a      	orrs	r2, r1
 8014972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2200      	movs	r2, #0
 8014978:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2241      	movs	r2, #65	@ 0x41
 801497e:	2120      	movs	r1, #32
 8014980:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2200      	movs	r2, #0
 8014986:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2242      	movs	r2, #66	@ 0x42
 801498c:	2100      	movs	r1, #0
 801498e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014990:	2300      	movs	r3, #0
}
 8014992:	0018      	movs	r0, r3
 8014994:	46bd      	mov	sp, r7
 8014996:	b002      	add	sp, #8
 8014998:	bd80      	pop	{r7, pc}
 801499a:	46c0      	nop			@ (mov r8, r8)
 801499c:	f0ffffff 	.word	0xf0ffffff
 80149a0:	ffff7fff 	.word	0xffff7fff
 80149a4:	fffff7ff 	.word	0xfffff7ff
 80149a8:	02008000 	.word	0x02008000

080149ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d101      	bne.n	80149be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80149ba:	2301      	movs	r3, #1
 80149bc:	e022      	b.n	8014a04 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2241      	movs	r2, #65	@ 0x41
 80149c2:	2124      	movs	r1, #36	@ 0x24
 80149c4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	681a      	ldr	r2, [r3, #0]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2101      	movs	r1, #1
 80149d2:	438a      	bics	r2, r1
 80149d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	0018      	movs	r0, r3
 80149da:	f7f7 fc09 	bl	800c1f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2200      	movs	r2, #0
 80149e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2241      	movs	r2, #65	@ 0x41
 80149e8:	2100      	movs	r1, #0
 80149ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2200      	movs	r2, #0
 80149f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2242      	movs	r2, #66	@ 0x42
 80149f6:	2100      	movs	r1, #0
 80149f8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2240      	movs	r2, #64	@ 0x40
 80149fe:	2100      	movs	r1, #0
 8014a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	0018      	movs	r0, r3
 8014a06:	46bd      	mov	sp, r7
 8014a08:	b002      	add	sp, #8
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8014a0c:	b5b0      	push	{r4, r5, r7, lr}
 8014a0e:	b088      	sub	sp, #32
 8014a10:	af02      	add	r7, sp, #8
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	0008      	movs	r0, r1
 8014a16:	607a      	str	r2, [r7, #4]
 8014a18:	0019      	movs	r1, r3
 8014a1a:	230a      	movs	r3, #10
 8014a1c:	18fb      	adds	r3, r7, r3
 8014a1e:	1c02      	adds	r2, r0, #0
 8014a20:	801a      	strh	r2, [r3, #0]
 8014a22:	2308      	movs	r3, #8
 8014a24:	18fb      	adds	r3, r7, r3
 8014a26:	1c0a      	adds	r2, r1, #0
 8014a28:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2241      	movs	r2, #65	@ 0x41
 8014a2e:	5c9b      	ldrb	r3, [r3, r2]
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	2b20      	cmp	r3, #32
 8014a34:	d000      	beq.n	8014a38 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8014a36:	e0dd      	b.n	8014bf4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	699a      	ldr	r2, [r3, #24]
 8014a3e:	2380      	movs	r3, #128	@ 0x80
 8014a40:	021b      	lsls	r3, r3, #8
 8014a42:	401a      	ands	r2, r3
 8014a44:	2380      	movs	r3, #128	@ 0x80
 8014a46:	021b      	lsls	r3, r3, #8
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d101      	bne.n	8014a50 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8014a4c:	2302      	movs	r3, #2
 8014a4e:	e0d2      	b.n	8014bf6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2240      	movs	r2, #64	@ 0x40
 8014a54:	5c9b      	ldrb	r3, [r3, r2]
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d101      	bne.n	8014a5e <HAL_I2C_Master_Transmit_DMA+0x52>
 8014a5a:	2302      	movs	r3, #2
 8014a5c:	e0cb      	b.n	8014bf6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2240      	movs	r2, #64	@ 0x40
 8014a62:	2101      	movs	r1, #1
 8014a64:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2241      	movs	r2, #65	@ 0x41
 8014a6a:	2121      	movs	r1, #33	@ 0x21
 8014a6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2242      	movs	r2, #66	@ 0x42
 8014a72:	2110      	movs	r1, #16
 8014a74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2208      	movs	r2, #8
 8014a86:	18ba      	adds	r2, r7, r2
 8014a88:	8812      	ldrh	r2, [r2, #0]
 8014a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8014c00 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8014a90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	4a5b      	ldr	r2, [pc, #364]	@ (8014c04 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8014a96:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	2bff      	cmp	r3, #255	@ 0xff
 8014aa0:	d906      	bls.n	8014ab0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	22ff      	movs	r2, #255	@ 0xff
 8014aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8014aa8:	2380      	movs	r3, #128	@ 0x80
 8014aaa:	045b      	lsls	r3, r3, #17
 8014aac:	617b      	str	r3, [r7, #20]
 8014aae:	e007      	b.n	8014ac0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014aba:	2380      	movs	r3, #128	@ 0x80
 8014abc:	049b      	lsls	r3, r3, #18
 8014abe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d100      	bne.n	8014aca <HAL_I2C_Master_Transmit_DMA+0xbe>
 8014ac8:	e078      	b.n	8014bbc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d023      	beq.n	8014b1a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8014c08 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8014ad8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ade:	4a4b      	ldr	r2, [pc, #300]	@ (8014c0c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8014ae0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014aee:	2200      	movs	r2, #0
 8014af0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014af6:	6879      	ldr	r1, [r7, #4]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	3328      	adds	r3, #40	@ 0x28
 8014afe:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014b04:	2513      	movs	r5, #19
 8014b06:	197c      	adds	r4, r7, r5
 8014b08:	f7fe ff5a 	bl	80139c0 <HAL_DMA_Start_IT>
 8014b0c:	0003      	movs	r3, r0
 8014b0e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014b10:	197b      	adds	r3, r7, r5
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d13d      	bne.n	8014b94 <HAL_I2C_Master_Transmit_DMA+0x188>
 8014b18:	e013      	b.n	8014b42 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2241      	movs	r2, #65	@ 0x41
 8014b1e:	2120      	movs	r1, #32
 8014b20:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2242      	movs	r2, #66	@ 0x42
 8014b26:	2100      	movs	r1, #0
 8014b28:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b2e:	2280      	movs	r2, #128	@ 0x80
 8014b30:	431a      	orrs	r2, r3
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2240      	movs	r2, #64	@ 0x40
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014b3e:	2301      	movs	r3, #1
 8014b40:	e059      	b.n	8014bf6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b46:	b2da      	uxtb	r2, r3
 8014b48:	697c      	ldr	r4, [r7, #20]
 8014b4a:	230a      	movs	r3, #10
 8014b4c:	18fb      	adds	r3, r7, r3
 8014b4e:	8819      	ldrh	r1, [r3, #0]
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	4b2f      	ldr	r3, [pc, #188]	@ (8014c10 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8014b54:	9300      	str	r3, [sp, #0]
 8014b56:	0023      	movs	r3, r4
 8014b58:	f001 fe0c 	bl	8016774 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b60:	b29a      	uxth	r2, r3
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b66:	1ad3      	subs	r3, r2, r3
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2240      	movs	r2, #64	@ 0x40
 8014b72:	2100      	movs	r1, #0
 8014b74:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2110      	movs	r1, #16
 8014b7a:	0018      	movs	r0, r3
 8014b7c:	f001 fe34 	bl	80167e8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	2180      	movs	r1, #128	@ 0x80
 8014b8c:	01c9      	lsls	r1, r1, #7
 8014b8e:	430a      	orrs	r2, r1
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	e02d      	b.n	8014bf0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2241      	movs	r2, #65	@ 0x41
 8014b98:	2120      	movs	r1, #32
 8014b9a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2242      	movs	r2, #66	@ 0x42
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ba8:	2210      	movs	r2, #16
 8014baa:	431a      	orrs	r2, r3
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2240      	movs	r2, #64	@ 0x40
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014bb8:	2301      	movs	r3, #1
 8014bba:	e01c      	b.n	8014bf6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	4a15      	ldr	r2, [pc, #84]	@ (8014c14 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8014bc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014bc6:	b2da      	uxtb	r2, r3
 8014bc8:	2380      	movs	r3, #128	@ 0x80
 8014bca:	049c      	lsls	r4, r3, #18
 8014bcc:	230a      	movs	r3, #10
 8014bce:	18fb      	adds	r3, r7, r3
 8014bd0:	8819      	ldrh	r1, [r3, #0]
 8014bd2:	68f8      	ldr	r0, [r7, #12]
 8014bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8014c10 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	0023      	movs	r3, r4
 8014bda:	f001 fdcb 	bl	8016774 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2240      	movs	r2, #64	@ 0x40
 8014be2:	2100      	movs	r1, #0
 8014be4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2101      	movs	r1, #1
 8014bea:	0018      	movs	r0, r3
 8014bec:	f001 fdfc 	bl	80167e8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	e000      	b.n	8014bf6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014bf4:	2302      	movs	r3, #2
  }
}
 8014bf6:	0018      	movs	r0, r3
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	b006      	add	sp, #24
 8014bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8014bfe:	46c0      	nop			@ (mov r8, r8)
 8014c00:	ffff0000 	.word	0xffff0000
 8014c04:	08015491 	.word	0x08015491
 8014c08:	080165c5 	.word	0x080165c5
 8014c0c:	08016705 	.word	0x08016705
 8014c10:	80002000 	.word	0x80002000
 8014c14:	08014fe5 	.word	0x08014fe5

08014c18 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8014c18:	b5b0      	push	{r4, r5, r7, lr}
 8014c1a:	b088      	sub	sp, #32
 8014c1c:	af02      	add	r7, sp, #8
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	0008      	movs	r0, r1
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	0019      	movs	r1, r3
 8014c26:	230a      	movs	r3, #10
 8014c28:	18fb      	adds	r3, r7, r3
 8014c2a:	1c02      	adds	r2, r0, #0
 8014c2c:	801a      	strh	r2, [r3, #0]
 8014c2e:	2308      	movs	r3, #8
 8014c30:	18fb      	adds	r3, r7, r3
 8014c32:	1c0a      	adds	r2, r1, #0
 8014c34:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2241      	movs	r2, #65	@ 0x41
 8014c3a:	5c9b      	ldrb	r3, [r3, r2]
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	2b20      	cmp	r3, #32
 8014c40:	d000      	beq.n	8014c44 <HAL_I2C_Master_Receive_DMA+0x2c>
 8014c42:	e0dd      	b.n	8014e00 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	699a      	ldr	r2, [r3, #24]
 8014c4a:	2380      	movs	r3, #128	@ 0x80
 8014c4c:	021b      	lsls	r3, r3, #8
 8014c4e:	401a      	ands	r2, r3
 8014c50:	2380      	movs	r3, #128	@ 0x80
 8014c52:	021b      	lsls	r3, r3, #8
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d101      	bne.n	8014c5c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8014c58:	2302      	movs	r3, #2
 8014c5a:	e0d2      	b.n	8014e02 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2240      	movs	r2, #64	@ 0x40
 8014c60:	5c9b      	ldrb	r3, [r3, r2]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d101      	bne.n	8014c6a <HAL_I2C_Master_Receive_DMA+0x52>
 8014c66:	2302      	movs	r3, #2
 8014c68:	e0cb      	b.n	8014e02 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2240      	movs	r2, #64	@ 0x40
 8014c6e:	2101      	movs	r1, #1
 8014c70:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	2241      	movs	r2, #65	@ 0x41
 8014c76:	2122      	movs	r1, #34	@ 0x22
 8014c78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	2242      	movs	r2, #66	@ 0x42
 8014c7e:	2110      	movs	r1, #16
 8014c80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2200      	movs	r2, #0
 8014c86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	2208      	movs	r2, #8
 8014c92:	18ba      	adds	r2, r7, r2
 8014c94:	8812      	ldrh	r2, [r2, #0]
 8014c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	4a5c      	ldr	r2, [pc, #368]	@ (8014e0c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8014c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	4a5b      	ldr	r2, [pc, #364]	@ (8014e10 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8014ca2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	2bff      	cmp	r3, #255	@ 0xff
 8014cac:	d906      	bls.n	8014cbc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	22ff      	movs	r2, #255	@ 0xff
 8014cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8014cb4:	2380      	movs	r3, #128	@ 0x80
 8014cb6:	045b      	lsls	r3, r3, #17
 8014cb8:	617b      	str	r3, [r7, #20]
 8014cba:	e007      	b.n	8014ccc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014cc6:	2380      	movs	r3, #128	@ 0x80
 8014cc8:	049b      	lsls	r3, r3, #18
 8014cca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d100      	bne.n	8014cd6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8014cd4:	e078      	b.n	8014dc8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d023      	beq.n	8014d26 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ce2:	4a4c      	ldr	r2, [pc, #304]	@ (8014e14 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8014ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cea:	4a4b      	ldr	r2, [pc, #300]	@ (8014e18 <HAL_I2C_Master_Receive_DMA+0x200>)
 8014cec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	3324      	adds	r3, #36	@ 0x24
 8014d08:	0019      	movs	r1, r3
 8014d0a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014d10:	2513      	movs	r5, #19
 8014d12:	197c      	adds	r4, r7, r5
 8014d14:	f7fe fe54 	bl	80139c0 <HAL_DMA_Start_IT>
 8014d18:	0003      	movs	r3, r0
 8014d1a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014d1c:	197b      	adds	r3, r7, r5
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d13d      	bne.n	8014da0 <HAL_I2C_Master_Receive_DMA+0x188>
 8014d24:	e013      	b.n	8014d4e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	2241      	movs	r2, #65	@ 0x41
 8014d2a:	2120      	movs	r1, #32
 8014d2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2242      	movs	r2, #66	@ 0x42
 8014d32:	2100      	movs	r1, #0
 8014d34:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d3a:	2280      	movs	r2, #128	@ 0x80
 8014d3c:	431a      	orrs	r2, r3
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2240      	movs	r2, #64	@ 0x40
 8014d46:	2100      	movs	r1, #0
 8014d48:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	e059      	b.n	8014e02 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d52:	b2da      	uxtb	r2, r3
 8014d54:	697c      	ldr	r4, [r7, #20]
 8014d56:	230a      	movs	r3, #10
 8014d58:	18fb      	adds	r3, r7, r3
 8014d5a:	8819      	ldrh	r1, [r3, #0]
 8014d5c:	68f8      	ldr	r0, [r7, #12]
 8014d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8014e1c <HAL_I2C_Master_Receive_DMA+0x204>)
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	0023      	movs	r3, r4
 8014d64:	f001 fd06 	bl	8016774 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d6c:	b29a      	uxth	r2, r3
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d72:	1ad3      	subs	r3, r2, r3
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2240      	movs	r2, #64	@ 0x40
 8014d7e:	2100      	movs	r1, #0
 8014d80:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2110      	movs	r1, #16
 8014d86:	0018      	movs	r0, r3
 8014d88:	f001 fd2e 	bl	80167e8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2180      	movs	r1, #128	@ 0x80
 8014d98:	0209      	lsls	r1, r1, #8
 8014d9a:	430a      	orrs	r2, r1
 8014d9c:	601a      	str	r2, [r3, #0]
 8014d9e:	e02d      	b.n	8014dfc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	2241      	movs	r2, #65	@ 0x41
 8014da4:	2120      	movs	r1, #32
 8014da6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2242      	movs	r2, #66	@ 0x42
 8014dac:	2100      	movs	r1, #0
 8014dae:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014db4:	2210      	movs	r2, #16
 8014db6:	431a      	orrs	r2, r3
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2240      	movs	r2, #64	@ 0x40
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	e01c      	b.n	8014e02 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	4a15      	ldr	r2, [pc, #84]	@ (8014e20 <HAL_I2C_Master_Receive_DMA+0x208>)
 8014dcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dd2:	b2da      	uxtb	r2, r3
 8014dd4:	2380      	movs	r3, #128	@ 0x80
 8014dd6:	049c      	lsls	r4, r3, #18
 8014dd8:	230a      	movs	r3, #10
 8014dda:	18fb      	adds	r3, r7, r3
 8014ddc:	8819      	ldrh	r1, [r3, #0]
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	4b0e      	ldr	r3, [pc, #56]	@ (8014e1c <HAL_I2C_Master_Receive_DMA+0x204>)
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	0023      	movs	r3, r4
 8014de6:	f001 fcc5 	bl	8016774 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2240      	movs	r2, #64	@ 0x40
 8014dee:	2100      	movs	r1, #0
 8014df0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2102      	movs	r1, #2
 8014df6:	0018      	movs	r0, r3
 8014df8:	f001 fcf6 	bl	80167e8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	e000      	b.n	8014e02 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014e00:	2302      	movs	r3, #2
  }
}
 8014e02:	0018      	movs	r0, r3
 8014e04:	46bd      	mov	sp, r7
 8014e06:	b006      	add	sp, #24
 8014e08:	bdb0      	pop	{r4, r5, r7, pc}
 8014e0a:	46c0      	nop			@ (mov r8, r8)
 8014e0c:	ffff0000 	.word	0xffff0000
 8014e10:	08015491 	.word	0x08015491
 8014e14:	08016665 	.word	0x08016665
 8014e18:	08016705 	.word	0x08016705
 8014e1c:	80002400 	.word	0x80002400
 8014e20:	08014fe5 	.word	0x08014fe5

08014e24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	699b      	ldr	r3, [r3, #24]
 8014e32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d005      	beq.n	8014e50 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e48:	68ba      	ldr	r2, [r7, #8]
 8014e4a:	68f9      	ldr	r1, [r7, #12]
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	4798      	blx	r3
  }
}
 8014e50:	46c0      	nop			@ (mov r8, r8)
 8014e52:	46bd      	mov	sp, r7
 8014e54:	b004      	add	sp, #16
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b086      	sub	sp, #24
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	699b      	ldr	r3, [r3, #24]
 8014e66:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	0a1b      	lsrs	r3, r3, #8
 8014e74:	001a      	movs	r2, r3
 8014e76:	2301      	movs	r3, #1
 8014e78:	4013      	ands	r3, r2
 8014e7a:	d010      	beq.n	8014e9e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014e7c:	693b      	ldr	r3, [r7, #16]
 8014e7e:	09db      	lsrs	r3, r3, #7
 8014e80:	001a      	movs	r2, r3
 8014e82:	2301      	movs	r3, #1
 8014e84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8014e86:	d00a      	beq.n	8014e9e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	431a      	orrs	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2280      	movs	r2, #128	@ 0x80
 8014e9a:	0052      	lsls	r2, r2, #1
 8014e9c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	0a9b      	lsrs	r3, r3, #10
 8014ea2:	001a      	movs	r2, r3
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	4013      	ands	r3, r2
 8014ea8:	d010      	beq.n	8014ecc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	09db      	lsrs	r3, r3, #7
 8014eae:	001a      	movs	r2, r3
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014eb4:	d00a      	beq.n	8014ecc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eba:	2208      	movs	r2, #8
 8014ebc:	431a      	orrs	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2280      	movs	r2, #128	@ 0x80
 8014ec8:	00d2      	lsls	r2, r2, #3
 8014eca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	0a5b      	lsrs	r3, r3, #9
 8014ed0:	001a      	movs	r2, r3
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	4013      	ands	r3, r2
 8014ed6:	d010      	beq.n	8014efa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	09db      	lsrs	r3, r3, #7
 8014edc:	001a      	movs	r2, r3
 8014ede:	2301      	movs	r3, #1
 8014ee0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014ee2:	d00a      	beq.n	8014efa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ee8:	2202      	movs	r2, #2
 8014eea:	431a      	orrs	r2, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	2280      	movs	r2, #128	@ 0x80
 8014ef6:	0092      	lsls	r2, r2, #2
 8014ef8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014efe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	220b      	movs	r2, #11
 8014f04:	4013      	ands	r3, r2
 8014f06:	d005      	beq.n	8014f14 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	0011      	movs	r1, r2
 8014f0e:	0018      	movs	r0, r3
 8014f10:	f001 fa0a 	bl	8016328 <I2C_ITError>
  }
}
 8014f14:	46c0      	nop			@ (mov r8, r8)
 8014f16:	46bd      	mov	sp, r7
 8014f18:	b006      	add	sp, #24
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014f24:	46c0      	nop			@ (mov r8, r8)
 8014f26:	46bd      	mov	sp, r7
 8014f28:	b002      	add	sp, #8
 8014f2a:	bd80      	pop	{r7, pc}

08014f2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014f34:	46c0      	nop			@ (mov r8, r8)
 8014f36:	46bd      	mov	sp, r7
 8014f38:	b002      	add	sp, #8
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014f44:	46c0      	nop			@ (mov r8, r8)
 8014f46:	46bd      	mov	sp, r7
 8014f48:	b002      	add	sp, #8
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014f54:	46c0      	nop			@ (mov r8, r8)
 8014f56:	46bd      	mov	sp, r7
 8014f58:	b002      	add	sp, #8
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	0008      	movs	r0, r1
 8014f66:	0011      	movs	r1, r2
 8014f68:	1cfb      	adds	r3, r7, #3
 8014f6a:	1c02      	adds	r2, r0, #0
 8014f6c:	701a      	strb	r2, [r3, #0]
 8014f6e:	003b      	movs	r3, r7
 8014f70:	1c0a      	adds	r2, r1, #0
 8014f72:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014f74:	46c0      	nop			@ (mov r8, r8)
 8014f76:	46bd      	mov	sp, r7
 8014f78:	b002      	add	sp, #8
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8014f84:	46c0      	nop			@ (mov r8, r8)
 8014f86:	46bd      	mov	sp, r7
 8014f88:	b002      	add	sp, #8
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8014f94:	46c0      	nop			@ (mov r8, r8)
 8014f96:	46bd      	mov	sp, r7
 8014f98:	b002      	add	sp, #8
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8014fa4:	46c0      	nop			@ (mov r8, r8)
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	b002      	add	sp, #8
 8014faa:	bd80      	pop	{r7, pc}

08014fac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8014fb4:	46c0      	nop			@ (mov r8, r8)
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	b002      	add	sp, #8
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8014fc4:	46c0      	nop			@ (mov r8, r8)
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	b002      	add	sp, #8
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2241      	movs	r2, #65	@ 0x41
 8014fd8:	5c9b      	ldrb	r3, [r3, r2]
 8014fda:	b2db      	uxtb	r3, r3
}
 8014fdc:	0018      	movs	r0, r3
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	b002      	add	sp, #8
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014fe4:	b590      	push	{r4, r7, lr}
 8014fe6:	b089      	sub	sp, #36	@ 0x24
 8014fe8:	af02      	add	r7, sp, #8
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	2240      	movs	r2, #64	@ 0x40
 8014ff8:	5c9b      	ldrb	r3, [r3, r2]
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d101      	bne.n	8015002 <I2C_Master_ISR_IT+0x1e>
 8014ffe:	2302      	movs	r3, #2
 8015000:	e12b      	b.n	801525a <I2C_Master_ISR_IT+0x276>
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	2240      	movs	r2, #64	@ 0x40
 8015006:	2101      	movs	r1, #1
 8015008:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	091b      	lsrs	r3, r3, #4
 801500e:	001a      	movs	r2, r3
 8015010:	2301      	movs	r3, #1
 8015012:	4013      	ands	r3, r2
 8015014:	d014      	beq.n	8015040 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	091b      	lsrs	r3, r3, #4
 801501a:	001a      	movs	r2, r3
 801501c:	2301      	movs	r3, #1
 801501e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015020:	d00e      	beq.n	8015040 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	2210      	movs	r2, #16
 8015028:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801502e:	2204      	movs	r2, #4
 8015030:	431a      	orrs	r2, r3
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	0018      	movs	r0, r3
 801503a:	f001 faa0 	bl	801657e <I2C_Flush_TXDR>
 801503e:	e0f5      	b.n	801522c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	089b      	lsrs	r3, r3, #2
 8015044:	001a      	movs	r2, r3
 8015046:	2301      	movs	r3, #1
 8015048:	4013      	ands	r3, r2
 801504a:	d023      	beq.n	8015094 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	089b      	lsrs	r3, r3, #2
 8015050:	001a      	movs	r2, r3
 8015052:	2301      	movs	r3, #1
 8015054:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015056:	d01d      	beq.n	8015094 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	2204      	movs	r2, #4
 801505c:	4393      	bics	r3, r2
 801505e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801506a:	b2d2      	uxtb	r2, r2
 801506c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015072:	1c5a      	adds	r2, r3, #1
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801507c:	3b01      	subs	r3, #1
 801507e:	b29a      	uxth	r2, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015088:	b29b      	uxth	r3, r3
 801508a:	3b01      	subs	r3, #1
 801508c:	b29a      	uxth	r2, r3
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015092:	e0cb      	b.n	801522c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015094:	697b      	ldr	r3, [r7, #20]
 8015096:	085b      	lsrs	r3, r3, #1
 8015098:	001a      	movs	r2, r3
 801509a:	2301      	movs	r3, #1
 801509c:	4013      	ands	r3, r2
 801509e:	d01e      	beq.n	80150de <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	085b      	lsrs	r3, r3, #1
 80150a4:	001a      	movs	r2, r3
 80150a6:	2301      	movs	r3, #1
 80150a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80150aa:	d018      	beq.n	80150de <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150b0:	781a      	ldrb	r2, [r3, #0]
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150bc:	1c5a      	adds	r2, r3, #1
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150c6:	3b01      	subs	r3, #1
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	3b01      	subs	r3, #1
 80150d6:	b29a      	uxth	r2, r3
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80150dc:	e0a6      	b.n	801522c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	09db      	lsrs	r3, r3, #7
 80150e2:	001a      	movs	r2, r3
 80150e4:	2301      	movs	r3, #1
 80150e6:	4013      	ands	r3, r2
 80150e8:	d100      	bne.n	80150ec <I2C_Master_ISR_IT+0x108>
 80150ea:	e06b      	b.n	80151c4 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	099b      	lsrs	r3, r3, #6
 80150f0:	001a      	movs	r2, r3
 80150f2:	2301      	movs	r3, #1
 80150f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80150f6:	d065      	beq.n	80151c4 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d04a      	beq.n	8015198 <I2C_Master_ISR_IT+0x1b4>
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015106:	2b00      	cmp	r3, #0
 8015108:	d146      	bne.n	8015198 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	b29a      	uxth	r2, r3
 8015112:	2112      	movs	r1, #18
 8015114:	187b      	adds	r3, r7, r1
 8015116:	0592      	lsls	r2, r2, #22
 8015118:	0d92      	lsrs	r2, r2, #22
 801511a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015120:	b29b      	uxth	r3, r3
 8015122:	2bff      	cmp	r3, #255	@ 0xff
 8015124:	d910      	bls.n	8015148 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	22ff      	movs	r2, #255	@ 0xff
 801512a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015130:	b2da      	uxtb	r2, r3
 8015132:	2380      	movs	r3, #128	@ 0x80
 8015134:	045c      	lsls	r4, r3, #17
 8015136:	187b      	adds	r3, r7, r1
 8015138:	8819      	ldrh	r1, [r3, #0]
 801513a:	68f8      	ldr	r0, [r7, #12]
 801513c:	2300      	movs	r3, #0
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	0023      	movs	r3, r4
 8015142:	f001 fb17 	bl	8016774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015146:	e03c      	b.n	80151c2 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801514c:	b29a      	uxth	r2, r3
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015156:	4a43      	ldr	r2, [pc, #268]	@ (8015264 <I2C_Master_ISR_IT+0x280>)
 8015158:	4293      	cmp	r3, r2
 801515a:	d00e      	beq.n	801517a <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015160:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015166:	2312      	movs	r3, #18
 8015168:	18fb      	adds	r3, r7, r3
 801516a:	8819      	ldrh	r1, [r3, #0]
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	2300      	movs	r3, #0
 8015170:	9300      	str	r3, [sp, #0]
 8015172:	0023      	movs	r3, r4
 8015174:	f001 fafe 	bl	8016774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015178:	e023      	b.n	80151c2 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801517e:	b2da      	uxtb	r2, r3
 8015180:	2380      	movs	r3, #128	@ 0x80
 8015182:	049c      	lsls	r4, r3, #18
 8015184:	2312      	movs	r3, #18
 8015186:	18fb      	adds	r3, r7, r3
 8015188:	8819      	ldrh	r1, [r3, #0]
 801518a:	68f8      	ldr	r0, [r7, #12]
 801518c:	2300      	movs	r3, #0
 801518e:	9300      	str	r3, [sp, #0]
 8015190:	0023      	movs	r3, r4
 8015192:	f001 faef 	bl	8016774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015196:	e014      	b.n	80151c2 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	685a      	ldr	r2, [r3, #4]
 801519e:	2380      	movs	r3, #128	@ 0x80
 80151a0:	049b      	lsls	r3, r3, #18
 80151a2:	401a      	ands	r2, r3
 80151a4:	2380      	movs	r3, #128	@ 0x80
 80151a6:	049b      	lsls	r3, r3, #18
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d004      	beq.n	80151b6 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	0018      	movs	r0, r3
 80151b0:	f000 fd56 	bl	8015c60 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80151b4:	e03a      	b.n	801522c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	2140      	movs	r1, #64	@ 0x40
 80151ba:	0018      	movs	r0, r3
 80151bc:	f001 f8b4 	bl	8016328 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80151c0:	e034      	b.n	801522c <I2C_Master_ISR_IT+0x248>
 80151c2:	e033      	b.n	801522c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	099b      	lsrs	r3, r3, #6
 80151c8:	001a      	movs	r2, r3
 80151ca:	2301      	movs	r3, #1
 80151cc:	4013      	ands	r3, r2
 80151ce:	d02d      	beq.n	801522c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	099b      	lsrs	r3, r3, #6
 80151d4:	001a      	movs	r2, r3
 80151d6:	2301      	movs	r3, #1
 80151d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80151da:	d027      	beq.n	801522c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d11d      	bne.n	8015222 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	685a      	ldr	r2, [r3, #4]
 80151ec:	2380      	movs	r3, #128	@ 0x80
 80151ee:	049b      	lsls	r3, r3, #18
 80151f0:	401a      	ands	r2, r3
 80151f2:	2380      	movs	r3, #128	@ 0x80
 80151f4:	049b      	lsls	r3, r3, #18
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d018      	beq.n	801522c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151fe:	4a19      	ldr	r2, [pc, #100]	@ (8015264 <I2C_Master_ISR_IT+0x280>)
 8015200:	4293      	cmp	r3, r2
 8015202:	d109      	bne.n	8015218 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	685a      	ldr	r2, [r3, #4]
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2180      	movs	r1, #128	@ 0x80
 8015210:	01c9      	lsls	r1, r1, #7
 8015212:	430a      	orrs	r2, r1
 8015214:	605a      	str	r2, [r3, #4]
 8015216:	e009      	b.n	801522c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	0018      	movs	r0, r3
 801521c:	f000 fd20 	bl	8015c60 <I2C_ITMasterSeqCplt>
 8015220:	e004      	b.n	801522c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2140      	movs	r1, #64	@ 0x40
 8015226:	0018      	movs	r0, r3
 8015228:	f001 f87e 	bl	8016328 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	095b      	lsrs	r3, r3, #5
 8015230:	001a      	movs	r2, r3
 8015232:	2301      	movs	r3, #1
 8015234:	4013      	ands	r3, r2
 8015236:	d00b      	beq.n	8015250 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	095b      	lsrs	r3, r3, #5
 801523c:	001a      	movs	r2, r3
 801523e:	2301      	movs	r3, #1
 8015240:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015242:	d005      	beq.n	8015250 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8015244:	697a      	ldr	r2, [r7, #20]
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	0011      	movs	r1, r2
 801524a:	0018      	movs	r0, r3
 801524c:	f000 fdb0 	bl	8015db0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2240      	movs	r2, #64	@ 0x40
 8015254:	2100      	movs	r1, #0
 8015256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	0018      	movs	r0, r3
 801525c:	46bd      	mov	sp, r7
 801525e:	b007      	add	sp, #28
 8015260:	bd90      	pop	{r4, r7, pc}
 8015262:	46c0      	nop			@ (mov r8, r8)
 8015264:	ffff0000 	.word	0xffff0000

08015268 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b086      	sub	sp, #24
 801526c:	af00      	add	r7, sp, #0
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	60b9      	str	r1, [r7, #8]
 8015272:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015278:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2240      	movs	r2, #64	@ 0x40
 8015282:	5c9b      	ldrb	r3, [r3, r2]
 8015284:	2b01      	cmp	r3, #1
 8015286:	d101      	bne.n	801528c <I2C_Slave_ISR_IT+0x24>
 8015288:	2302      	movs	r3, #2
 801528a:	e0fb      	b.n	8015484 <I2C_Slave_ISR_IT+0x21c>
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	2240      	movs	r2, #64	@ 0x40
 8015290:	2101      	movs	r1, #1
 8015292:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	095b      	lsrs	r3, r3, #5
 8015298:	001a      	movs	r2, r3
 801529a:	2301      	movs	r3, #1
 801529c:	4013      	ands	r3, r2
 801529e:	d00c      	beq.n	80152ba <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	095b      	lsrs	r3, r3, #5
 80152a4:	001a      	movs	r2, r3
 80152a6:	2301      	movs	r3, #1
 80152a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80152aa:	d006      	beq.n	80152ba <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80152ac:	693a      	ldr	r2, [r7, #16]
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	0011      	movs	r1, r2
 80152b2:	0018      	movs	r0, r3
 80152b4:	f000 fe4e 	bl	8015f54 <I2C_ITSlaveCplt>
 80152b8:	e0df      	b.n	801547a <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	091b      	lsrs	r3, r3, #4
 80152be:	001a      	movs	r2, r3
 80152c0:	2301      	movs	r3, #1
 80152c2:	4013      	ands	r3, r2
 80152c4:	d054      	beq.n	8015370 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	091b      	lsrs	r3, r3, #4
 80152ca:	001a      	movs	r2, r3
 80152cc:	2301      	movs	r3, #1
 80152ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80152d0:	d04e      	beq.n	8015370 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d12d      	bne.n	8015338 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	2241      	movs	r2, #65	@ 0x41
 80152e0:	5c9b      	ldrb	r3, [r3, r2]
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	2b28      	cmp	r3, #40	@ 0x28
 80152e6:	d10b      	bne.n	8015300 <I2C_Slave_ISR_IT+0x98>
 80152e8:	697a      	ldr	r2, [r7, #20]
 80152ea:	2380      	movs	r3, #128	@ 0x80
 80152ec:	049b      	lsls	r3, r3, #18
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d106      	bne.n	8015300 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80152f2:	693a      	ldr	r2, [r7, #16]
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	0011      	movs	r1, r2
 80152f8:	0018      	movs	r0, r3
 80152fa:	f000 ffbb 	bl	8016274 <I2C_ITListenCplt>
 80152fe:	e036      	b.n	801536e <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2241      	movs	r2, #65	@ 0x41
 8015304:	5c9b      	ldrb	r3, [r3, r2]
 8015306:	b2db      	uxtb	r3, r3
 8015308:	2b29      	cmp	r3, #41	@ 0x29
 801530a:	d110      	bne.n	801532e <I2C_Slave_ISR_IT+0xc6>
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	4a5f      	ldr	r2, [pc, #380]	@ (801548c <I2C_Slave_ISR_IT+0x224>)
 8015310:	4293      	cmp	r3, r2
 8015312:	d00c      	beq.n	801532e <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	2210      	movs	r2, #16
 801531a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	0018      	movs	r0, r3
 8015320:	f001 f92d 	bl	801657e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	0018      	movs	r0, r3
 8015328:	f000 fcdc 	bl	8015ce4 <I2C_ITSlaveSeqCplt>
 801532c:	e01f      	b.n	801536e <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2210      	movs	r2, #16
 8015334:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8015336:	e09d      	b.n	8015474 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2210      	movs	r2, #16
 801533e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015344:	2204      	movs	r2, #4
 8015346:	431a      	orrs	r2, r3
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d005      	beq.n	801535e <I2C_Slave_ISR_IT+0xf6>
 8015352:	697a      	ldr	r2, [r7, #20]
 8015354:	2380      	movs	r3, #128	@ 0x80
 8015356:	045b      	lsls	r3, r3, #17
 8015358:	429a      	cmp	r2, r3
 801535a:	d000      	beq.n	801535e <I2C_Slave_ISR_IT+0xf6>
 801535c:	e08a      	b.n	8015474 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	0011      	movs	r1, r2
 8015366:	0018      	movs	r0, r3
 8015368:	f000 ffde 	bl	8016328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801536c:	e082      	b.n	8015474 <I2C_Slave_ISR_IT+0x20c>
 801536e:	e081      	b.n	8015474 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	089b      	lsrs	r3, r3, #2
 8015374:	001a      	movs	r2, r3
 8015376:	2301      	movs	r3, #1
 8015378:	4013      	ands	r3, r2
 801537a:	d031      	beq.n	80153e0 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	089b      	lsrs	r3, r3, #2
 8015380:	001a      	movs	r2, r3
 8015382:	2301      	movs	r3, #1
 8015384:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015386:	d02b      	beq.n	80153e0 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801538c:	b29b      	uxth	r3, r3
 801538e:	2b00      	cmp	r3, #0
 8015390:	d018      	beq.n	80153c4 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801539c:	b2d2      	uxtb	r2, r2
 801539e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153a4:	1c5a      	adds	r2, r3, #1
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153ae:	3b01      	subs	r3, #1
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153ba:	b29b      	uxth	r3, r3
 80153bc:	3b01      	subs	r3, #1
 80153be:	b29a      	uxth	r2, r3
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153c8:	b29b      	uxth	r3, r3
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d154      	bne.n	8015478 <I2C_Slave_ISR_IT+0x210>
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	4a2e      	ldr	r2, [pc, #184]	@ (801548c <I2C_Slave_ISR_IT+0x224>)
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d050      	beq.n	8015478 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	0018      	movs	r0, r3
 80153da:	f000 fc83 	bl	8015ce4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80153de:	e04b      	b.n	8015478 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	08db      	lsrs	r3, r3, #3
 80153e4:	001a      	movs	r2, r3
 80153e6:	2301      	movs	r3, #1
 80153e8:	4013      	ands	r3, r2
 80153ea:	d00c      	beq.n	8015406 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	08db      	lsrs	r3, r3, #3
 80153f0:	001a      	movs	r2, r3
 80153f2:	2301      	movs	r3, #1
 80153f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80153f6:	d006      	beq.n	8015406 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80153f8:	693a      	ldr	r2, [r7, #16]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	0011      	movs	r1, r2
 80153fe:	0018      	movs	r0, r3
 8015400:	f000 fb8a 	bl	8015b18 <I2C_ITAddrCplt>
 8015404:	e039      	b.n	801547a <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	085b      	lsrs	r3, r3, #1
 801540a:	001a      	movs	r2, r3
 801540c:	2301      	movs	r3, #1
 801540e:	4013      	ands	r3, r2
 8015410:	d033      	beq.n	801547a <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	085b      	lsrs	r3, r3, #1
 8015416:	001a      	movs	r2, r3
 8015418:	2301      	movs	r3, #1
 801541a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801541c:	d02d      	beq.n	801547a <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015422:	b29b      	uxth	r3, r3
 8015424:	2b00      	cmp	r3, #0
 8015426:	d018      	beq.n	801545a <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801542c:	781a      	ldrb	r2, [r3, #0]
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015438:	1c5a      	adds	r2, r3, #1
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015442:	b29b      	uxth	r3, r3
 8015444:	3b01      	subs	r3, #1
 8015446:	b29a      	uxth	r2, r3
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015450:	3b01      	subs	r3, #1
 8015452:	b29a      	uxth	r2, r3
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015458:	e00f      	b.n	801547a <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801545a:	697a      	ldr	r2, [r7, #20]
 801545c:	2380      	movs	r3, #128	@ 0x80
 801545e:	045b      	lsls	r3, r3, #17
 8015460:	429a      	cmp	r2, r3
 8015462:	d002      	beq.n	801546a <I2C_Slave_ISR_IT+0x202>
 8015464:	697b      	ldr	r3, [r7, #20]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d107      	bne.n	801547a <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	0018      	movs	r0, r3
 801546e:	f000 fc39 	bl	8015ce4 <I2C_ITSlaveSeqCplt>
 8015472:	e002      	b.n	801547a <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8015474:	46c0      	nop			@ (mov r8, r8)
 8015476:	e000      	b.n	801547a <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8015478:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2240      	movs	r2, #64	@ 0x40
 801547e:	2100      	movs	r1, #0
 8015480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015482:	2300      	movs	r3, #0
}
 8015484:	0018      	movs	r0, r3
 8015486:	46bd      	mov	sp, r7
 8015488:	b006      	add	sp, #24
 801548a:	bd80      	pop	{r7, pc}
 801548c:	ffff0000 	.word	0xffff0000

08015490 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8015490:	b590      	push	{r4, r7, lr}
 8015492:	b089      	sub	sp, #36	@ 0x24
 8015494:	af02      	add	r7, sp, #8
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	2240      	movs	r2, #64	@ 0x40
 80154a0:	5c9b      	ldrb	r3, [r3, r2]
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	d101      	bne.n	80154aa <I2C_Master_ISR_DMA+0x1a>
 80154a6:	2302      	movs	r3, #2
 80154a8:	e0f7      	b.n	801569a <I2C_Master_ISR_DMA+0x20a>
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2240      	movs	r2, #64	@ 0x40
 80154ae:	2101      	movs	r1, #1
 80154b0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	091b      	lsrs	r3, r3, #4
 80154b6:	001a      	movs	r2, r3
 80154b8:	2301      	movs	r3, #1
 80154ba:	4013      	ands	r3, r2
 80154bc:	d019      	beq.n	80154f2 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	091b      	lsrs	r3, r3, #4
 80154c2:	001a      	movs	r2, r3
 80154c4:	2301      	movs	r3, #1
 80154c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80154c8:	d013      	beq.n	80154f2 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2210      	movs	r2, #16
 80154d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154d6:	2204      	movs	r2, #4
 80154d8:	431a      	orrs	r2, r3
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2120      	movs	r1, #32
 80154e2:	0018      	movs	r0, r3
 80154e4:	f001 f980 	bl	80167e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	0018      	movs	r0, r3
 80154ec:	f001 f847 	bl	801657e <I2C_Flush_TXDR>
 80154f0:	e0ce      	b.n	8015690 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	09db      	lsrs	r3, r3, #7
 80154f6:	001a      	movs	r2, r3
 80154f8:	2301      	movs	r3, #1
 80154fa:	4013      	ands	r3, r2
 80154fc:	d100      	bne.n	8015500 <I2C_Master_ISR_DMA+0x70>
 80154fe:	e07e      	b.n	80155fe <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	099b      	lsrs	r3, r3, #6
 8015504:	001a      	movs	r2, r3
 8015506:	2301      	movs	r3, #1
 8015508:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801550a:	d100      	bne.n	801550e <I2C_Master_ISR_DMA+0x7e>
 801550c:	e077      	b.n	80155fe <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	681a      	ldr	r2, [r3, #0]
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2140      	movs	r1, #64	@ 0x40
 801551a:	438a      	bics	r2, r1
 801551c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015522:	b29b      	uxth	r3, r3
 8015524:	2b00      	cmp	r3, #0
 8015526:	d055      	beq.n	80155d4 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	b29a      	uxth	r2, r3
 8015530:	2312      	movs	r3, #18
 8015532:	18fb      	adds	r3, r7, r3
 8015534:	0592      	lsls	r2, r2, #22
 8015536:	0d92      	lsrs	r2, r2, #22
 8015538:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801553e:	b29b      	uxth	r3, r3
 8015540:	2bff      	cmp	r3, #255	@ 0xff
 8015542:	d906      	bls.n	8015552 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	22ff      	movs	r2, #255	@ 0xff
 8015548:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801554a:	2380      	movs	r3, #128	@ 0x80
 801554c:	045b      	lsls	r3, r3, #17
 801554e:	617b      	str	r3, [r7, #20]
 8015550:	e010      	b.n	8015574 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015556:	b29a      	uxth	r2, r3
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015560:	4a50      	ldr	r2, [pc, #320]	@ (80156a4 <I2C_Master_ISR_DMA+0x214>)
 8015562:	4293      	cmp	r3, r2
 8015564:	d003      	beq.n	801556e <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801556a:	617b      	str	r3, [r7, #20]
 801556c:	e002      	b.n	8015574 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801556e:	2380      	movs	r3, #128	@ 0x80
 8015570:	049b      	lsls	r3, r3, #18
 8015572:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015578:	b2da      	uxtb	r2, r3
 801557a:	697c      	ldr	r4, [r7, #20]
 801557c:	2312      	movs	r3, #18
 801557e:	18fb      	adds	r3, r7, r3
 8015580:	8819      	ldrh	r1, [r3, #0]
 8015582:	68f8      	ldr	r0, [r7, #12]
 8015584:	2300      	movs	r3, #0
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	0023      	movs	r3, r4
 801558a:	f001 f8f3 	bl	8016774 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015592:	b29a      	uxth	r2, r3
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015598:	1ad3      	subs	r3, r2, r3
 801559a:	b29a      	uxth	r2, r3
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2241      	movs	r2, #65	@ 0x41
 80155a4:	5c9b      	ldrb	r3, [r3, r2]
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	2b22      	cmp	r3, #34	@ 0x22
 80155aa:	d109      	bne.n	80155c0 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	2180      	movs	r1, #128	@ 0x80
 80155b8:	0209      	lsls	r1, r1, #8
 80155ba:	430a      	orrs	r2, r1
 80155bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80155be:	e067      	b.n	8015690 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	681a      	ldr	r2, [r3, #0]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	2180      	movs	r1, #128	@ 0x80
 80155cc:	01c9      	lsls	r1, r1, #7
 80155ce:	430a      	orrs	r2, r1
 80155d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80155d2:	e05d      	b.n	8015690 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	685a      	ldr	r2, [r3, #4]
 80155da:	2380      	movs	r3, #128	@ 0x80
 80155dc:	049b      	lsls	r3, r3, #18
 80155de:	401a      	ands	r2, r3
 80155e0:	2380      	movs	r3, #128	@ 0x80
 80155e2:	049b      	lsls	r3, r3, #18
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d004      	beq.n	80155f2 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	0018      	movs	r0, r3
 80155ec:	f000 fb38 	bl	8015c60 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80155f0:	e04e      	b.n	8015690 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2140      	movs	r1, #64	@ 0x40
 80155f6:	0018      	movs	r0, r3
 80155f8:	f000 fe96 	bl	8016328 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80155fc:	e048      	b.n	8015690 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	099b      	lsrs	r3, r3, #6
 8015602:	001a      	movs	r2, r3
 8015604:	2301      	movs	r3, #1
 8015606:	4013      	ands	r3, r2
 8015608:	d02e      	beq.n	8015668 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	099b      	lsrs	r3, r3, #6
 801560e:	001a      	movs	r2, r3
 8015610:	2301      	movs	r3, #1
 8015612:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015614:	d028      	beq.n	8015668 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801561a:	b29b      	uxth	r3, r3
 801561c:	2b00      	cmp	r3, #0
 801561e:	d11d      	bne.n	801565c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	685a      	ldr	r2, [r3, #4]
 8015626:	2380      	movs	r3, #128	@ 0x80
 8015628:	049b      	lsls	r3, r3, #18
 801562a:	401a      	ands	r2, r3
 801562c:	2380      	movs	r3, #128	@ 0x80
 801562e:	049b      	lsls	r3, r3, #18
 8015630:	429a      	cmp	r2, r3
 8015632:	d02c      	beq.n	801568e <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015638:	4a1a      	ldr	r2, [pc, #104]	@ (80156a4 <I2C_Master_ISR_DMA+0x214>)
 801563a:	4293      	cmp	r3, r2
 801563c:	d109      	bne.n	8015652 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	685a      	ldr	r2, [r3, #4]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	2180      	movs	r1, #128	@ 0x80
 801564a:	01c9      	lsls	r1, r1, #7
 801564c:	430a      	orrs	r2, r1
 801564e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8015650:	e01d      	b.n	801568e <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	0018      	movs	r0, r3
 8015656:	f000 fb03 	bl	8015c60 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801565a:	e018      	b.n	801568e <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	2140      	movs	r1, #64	@ 0x40
 8015660:	0018      	movs	r0, r3
 8015662:	f000 fe61 	bl	8016328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8015666:	e012      	b.n	801568e <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	095b      	lsrs	r3, r3, #5
 801566c:	001a      	movs	r2, r3
 801566e:	2301      	movs	r3, #1
 8015670:	4013      	ands	r3, r2
 8015672:	d00d      	beq.n	8015690 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	095b      	lsrs	r3, r3, #5
 8015678:	001a      	movs	r2, r3
 801567a:	2301      	movs	r3, #1
 801567c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801567e:	d007      	beq.n	8015690 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	0011      	movs	r1, r2
 8015686:	0018      	movs	r0, r3
 8015688:	f000 fb92 	bl	8015db0 <I2C_ITMasterCplt>
 801568c:	e000      	b.n	8015690 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 801568e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2240      	movs	r2, #64	@ 0x40
 8015694:	2100      	movs	r1, #0
 8015696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015698:	2300      	movs	r3, #0
}
 801569a:	0018      	movs	r0, r3
 801569c:	46bd      	mov	sp, r7
 801569e:	b007      	add	sp, #28
 80156a0:	bd90      	pop	{r4, r7, pc}
 80156a2:	46c0      	nop			@ (mov r8, r8)
 80156a4:	ffff0000 	.word	0xffff0000

080156a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80156a8:	b590      	push	{r4, r7, lr}
 80156aa:	b089      	sub	sp, #36	@ 0x24
 80156ac:	af02      	add	r7, sp, #8
 80156ae:	60f8      	str	r0, [r7, #12]
 80156b0:	60b9      	str	r1, [r7, #8]
 80156b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80156b4:	4b9a      	ldr	r3, [pc, #616]	@ (8015920 <I2C_Mem_ISR_DMA+0x278>)
 80156b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2240      	movs	r2, #64	@ 0x40
 80156bc:	5c9b      	ldrb	r3, [r3, r2]
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d101      	bne.n	80156c6 <I2C_Mem_ISR_DMA+0x1e>
 80156c2:	2302      	movs	r3, #2
 80156c4:	e127      	b.n	8015916 <I2C_Mem_ISR_DMA+0x26e>
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2240      	movs	r2, #64	@ 0x40
 80156ca:	2101      	movs	r1, #1
 80156cc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	091b      	lsrs	r3, r3, #4
 80156d2:	001a      	movs	r2, r3
 80156d4:	2301      	movs	r3, #1
 80156d6:	4013      	ands	r3, r2
 80156d8:	d019      	beq.n	801570e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	091b      	lsrs	r3, r3, #4
 80156de:	001a      	movs	r2, r3
 80156e0:	2301      	movs	r3, #1
 80156e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80156e4:	d013      	beq.n	801570e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	2210      	movs	r2, #16
 80156ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156f2:	2204      	movs	r2, #4
 80156f4:	431a      	orrs	r2, r3
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	2120      	movs	r1, #32
 80156fe:	0018      	movs	r0, r3
 8015700:	f001 f872 	bl	80167e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	0018      	movs	r0, r3
 8015708:	f000 ff39 	bl	801657e <I2C_Flush_TXDR>
 801570c:	e0fe      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	085b      	lsrs	r3, r3, #1
 8015712:	001a      	movs	r2, r3
 8015714:	2301      	movs	r3, #1
 8015716:	4013      	ands	r3, r2
 8015718:	d00f      	beq.n	801573a <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	085b      	lsrs	r3, r3, #1
 801571e:	001a      	movs	r2, r3
 8015720:	2301      	movs	r3, #1
 8015722:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015724:	d009      	beq.n	801573a <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801572e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2201      	movs	r2, #1
 8015734:	4252      	negs	r2, r2
 8015736:	651a      	str	r2, [r3, #80]	@ 0x50
 8015738:	e0e8      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	09db      	lsrs	r3, r3, #7
 801573e:	001a      	movs	r2, r3
 8015740:	2301      	movs	r3, #1
 8015742:	4013      	ands	r3, r2
 8015744:	d065      	beq.n	8015812 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	099b      	lsrs	r3, r3, #6
 801574a:	001a      	movs	r2, r3
 801574c:	2301      	movs	r3, #1
 801574e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015750:	d05f      	beq.n	8015812 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	2101      	movs	r1, #1
 8015756:	0018      	movs	r0, r3
 8015758:	f001 f8d0 	bl	80168fc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2110      	movs	r1, #16
 8015760:	0018      	movs	r0, r3
 8015762:	f001 f841 	bl	80167e8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801576a:	b29b      	uxth	r3, r3
 801576c:	2b00      	cmp	r3, #0
 801576e:	d04a      	beq.n	8015806 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015774:	b29b      	uxth	r3, r3
 8015776:	2bff      	cmp	r3, #255	@ 0xff
 8015778:	d910      	bls.n	801579c <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	22ff      	movs	r2, #255	@ 0xff
 801577e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015784:	b299      	uxth	r1, r3
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801578a:	b2da      	uxtb	r2, r3
 801578c:	2380      	movs	r3, #128	@ 0x80
 801578e:	045b      	lsls	r3, r3, #17
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	2400      	movs	r4, #0
 8015794:	9400      	str	r4, [sp, #0]
 8015796:	f000 ffed 	bl	8016774 <I2C_TransferConfig>
 801579a:	e011      	b.n	80157c0 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157a0:	b29a      	uxth	r2, r3
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157aa:	b299      	uxth	r1, r3
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157b0:	b2da      	uxtb	r2, r3
 80157b2:	2380      	movs	r3, #128	@ 0x80
 80157b4:	049b      	lsls	r3, r3, #18
 80157b6:	68f8      	ldr	r0, [r7, #12]
 80157b8:	2400      	movs	r4, #0
 80157ba:	9400      	str	r4, [sp, #0]
 80157bc:	f000 ffda 	bl	8016774 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157ca:	1ad3      	subs	r3, r2, r3
 80157cc:	b29a      	uxth	r2, r3
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2241      	movs	r2, #65	@ 0x41
 80157d6:	5c9b      	ldrb	r3, [r3, r2]
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b22      	cmp	r3, #34	@ 0x22
 80157dc:	d109      	bne.n	80157f2 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	681a      	ldr	r2, [r3, #0]
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2180      	movs	r1, #128	@ 0x80
 80157ea:	0209      	lsls	r1, r1, #8
 80157ec:	430a      	orrs	r2, r1
 80157ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80157f0:	e08c      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	681a      	ldr	r2, [r3, #0]
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2180      	movs	r1, #128	@ 0x80
 80157fe:	01c9      	lsls	r1, r1, #7
 8015800:	430a      	orrs	r2, r1
 8015802:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015804:	e082      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	2140      	movs	r1, #64	@ 0x40
 801580a:	0018      	movs	r0, r3
 801580c:	f000 fd8c 	bl	8016328 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015810:	e07c      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	099b      	lsrs	r3, r3, #6
 8015816:	001a      	movs	r2, r3
 8015818:	2301      	movs	r3, #1
 801581a:	4013      	ands	r3, r2
 801581c:	d064      	beq.n	80158e8 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	099b      	lsrs	r3, r3, #6
 8015822:	001a      	movs	r2, r3
 8015824:	2301      	movs	r3, #1
 8015826:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015828:	d05e      	beq.n	80158e8 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	2101      	movs	r1, #1
 801582e:	0018      	movs	r0, r3
 8015830:	f001 f864 	bl	80168fc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	2110      	movs	r1, #16
 8015838:	0018      	movs	r0, r3
 801583a:	f000 ffd5 	bl	80167e8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2241      	movs	r2, #65	@ 0x41
 8015842:	5c9b      	ldrb	r3, [r3, r2]
 8015844:	b2db      	uxtb	r3, r3
 8015846:	2b22      	cmp	r3, #34	@ 0x22
 8015848:	d101      	bne.n	801584e <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
 801584a:	4b36      	ldr	r3, [pc, #216]	@ (8015924 <I2C_Mem_ISR_DMA+0x27c>)
 801584c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015852:	b29b      	uxth	r3, r3
 8015854:	2bff      	cmp	r3, #255	@ 0xff
 8015856:	d911      	bls.n	801587c <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	22ff      	movs	r2, #255	@ 0xff
 801585c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015862:	b299      	uxth	r1, r3
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015868:	b2da      	uxtb	r2, r3
 801586a:	2380      	movs	r3, #128	@ 0x80
 801586c:	045c      	lsls	r4, r3, #17
 801586e:	68f8      	ldr	r0, [r7, #12]
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	9300      	str	r3, [sp, #0]
 8015874:	0023      	movs	r3, r4
 8015876:	f000 ff7d 	bl	8016774 <I2C_TransferConfig>
 801587a:	e012      	b.n	80158a2 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015880:	b29a      	uxth	r2, r3
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801588a:	b299      	uxth	r1, r3
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015890:	b2da      	uxtb	r2, r3
 8015892:	2380      	movs	r3, #128	@ 0x80
 8015894:	049c      	lsls	r4, r3, #18
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	9300      	str	r3, [sp, #0]
 801589c:	0023      	movs	r3, r4
 801589e:	f000 ff69 	bl	8016774 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158a6:	b29a      	uxth	r2, r3
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158ac:	1ad3      	subs	r3, r2, r3
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	2241      	movs	r2, #65	@ 0x41
 80158b8:	5c9b      	ldrb	r3, [r3, r2]
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	2b22      	cmp	r3, #34	@ 0x22
 80158be:	d109      	bne.n	80158d4 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2180      	movs	r1, #128	@ 0x80
 80158cc:	0209      	lsls	r1, r1, #8
 80158ce:	430a      	orrs	r2, r1
 80158d0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80158d2:	e01b      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2180      	movs	r1, #128	@ 0x80
 80158e0:	01c9      	lsls	r1, r1, #7
 80158e2:	430a      	orrs	r2, r1
 80158e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80158e6:	e011      	b.n	801590c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	095b      	lsrs	r3, r3, #5
 80158ec:	001a      	movs	r2, r3
 80158ee:	2301      	movs	r3, #1
 80158f0:	4013      	ands	r3, r2
 80158f2:	d00b      	beq.n	801590c <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	095b      	lsrs	r3, r3, #5
 80158f8:	001a      	movs	r2, r3
 80158fa:	2301      	movs	r3, #1
 80158fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80158fe:	d005      	beq.n	801590c <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8015900:	68ba      	ldr	r2, [r7, #8]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	0011      	movs	r1, r2
 8015906:	0018      	movs	r0, r3
 8015908:	f000 fa52 	bl	8015db0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	2240      	movs	r2, #64	@ 0x40
 8015910:	2100      	movs	r1, #0
 8015912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015914:	2300      	movs	r3, #0
}
 8015916:	0018      	movs	r0, r3
 8015918:	46bd      	mov	sp, r7
 801591a:	b007      	add	sp, #28
 801591c:	bd90      	pop	{r4, r7, pc}
 801591e:	46c0      	nop			@ (mov r8, r8)
 8015920:	80002000 	.word	0x80002000
 8015924:	80002400 	.word	0x80002400

08015928 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b088      	sub	sp, #32
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015938:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801593a:	2300      	movs	r3, #0
 801593c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2240      	movs	r2, #64	@ 0x40
 8015942:	5c9b      	ldrb	r3, [r3, r2]
 8015944:	2b01      	cmp	r3, #1
 8015946:	d101      	bne.n	801594c <I2C_Slave_ISR_DMA+0x24>
 8015948:	2302      	movs	r3, #2
 801594a:	e0de      	b.n	8015b0a <I2C_Slave_ISR_DMA+0x1e2>
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2240      	movs	r2, #64	@ 0x40
 8015950:	2101      	movs	r1, #1
 8015952:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	095b      	lsrs	r3, r3, #5
 8015958:	001a      	movs	r2, r3
 801595a:	2301      	movs	r3, #1
 801595c:	4013      	ands	r3, r2
 801595e:	d00c      	beq.n	801597a <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	095b      	lsrs	r3, r3, #5
 8015964:	001a      	movs	r2, r3
 8015966:	2301      	movs	r3, #1
 8015968:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801596a:	d006      	beq.n	801597a <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 801596c:	68ba      	ldr	r2, [r7, #8]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	0011      	movs	r1, r2
 8015972:	0018      	movs	r0, r3
 8015974:	f000 faee 	bl	8015f54 <I2C_ITSlaveCplt>
 8015978:	e0c2      	b.n	8015b00 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801597a:	68bb      	ldr	r3, [r7, #8]
 801597c:	091b      	lsrs	r3, r3, #4
 801597e:	001a      	movs	r2, r3
 8015980:	2301      	movs	r3, #1
 8015982:	4013      	ands	r3, r2
 8015984:	d100      	bne.n	8015988 <I2C_Slave_ISR_DMA+0x60>
 8015986:	e0a9      	b.n	8015adc <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	091b      	lsrs	r3, r3, #4
 801598c:	001a      	movs	r2, r3
 801598e:	2301      	movs	r3, #1
 8015990:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015992:	d100      	bne.n	8015996 <I2C_Slave_ISR_DMA+0x6e>
 8015994:	e0a2      	b.n	8015adc <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	0b9b      	lsrs	r3, r3, #14
 801599a:	001a      	movs	r2, r3
 801599c:	2301      	movs	r3, #1
 801599e:	4013      	ands	r3, r2
 80159a0:	d106      	bne.n	80159b0 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	0bdb      	lsrs	r3, r3, #15
 80159a6:	001a      	movs	r2, r3
 80159a8:	2301      	movs	r3, #1
 80159aa:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80159ac:	d100      	bne.n	80159b0 <I2C_Slave_ISR_DMA+0x88>
 80159ae:	e08e      	b.n	8015ace <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d00d      	beq.n	80159d4 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	0bdb      	lsrs	r3, r3, #15
 80159bc:	001a      	movs	r2, r3
 80159be:	2301      	movs	r3, #1
 80159c0:	4013      	ands	r3, r2
 80159c2:	d007      	beq.n	80159d4 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d101      	bne.n	80159d4 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
 80159d0:	2301      	movs	r3, #1
 80159d2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d00d      	beq.n	80159f8 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	0b9b      	lsrs	r3, r3, #14
 80159e0:	001a      	movs	r2, r3
 80159e2:	2301      	movs	r3, #1
 80159e4:	4013      	ands	r3, r2
 80159e6:	d007      	beq.n	80159f8 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d101      	bne.n	80159f8 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
 80159f4:	2301      	movs	r3, #1
 80159f6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d12d      	bne.n	8015a5a <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	2241      	movs	r2, #65	@ 0x41
 8015a02:	5c9b      	ldrb	r3, [r3, r2]
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	2b28      	cmp	r3, #40	@ 0x28
 8015a08:	d10b      	bne.n	8015a22 <I2C_Slave_ISR_DMA+0xfa>
 8015a0a:	69ba      	ldr	r2, [r7, #24]
 8015a0c:	2380      	movs	r3, #128	@ 0x80
 8015a0e:	049b      	lsls	r3, r3, #18
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d106      	bne.n	8015a22 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8015a14:	68ba      	ldr	r2, [r7, #8]
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	0011      	movs	r1, r2
 8015a1a:	0018      	movs	r0, r3
 8015a1c:	f000 fc2a 	bl	8016274 <I2C_ITListenCplt>
 8015a20:	e054      	b.n	8015acc <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	2241      	movs	r2, #65	@ 0x41
 8015a26:	5c9b      	ldrb	r3, [r3, r2]
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	2b29      	cmp	r3, #41	@ 0x29
 8015a2c:	d110      	bne.n	8015a50 <I2C_Slave_ISR_DMA+0x128>
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	4a38      	ldr	r2, [pc, #224]	@ (8015b14 <I2C_Slave_ISR_DMA+0x1ec>)
 8015a32:	4293      	cmp	r3, r2
 8015a34:	d00c      	beq.n	8015a50 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	2210      	movs	r2, #16
 8015a3c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	0018      	movs	r0, r3
 8015a42:	f000 fd9c 	bl	801657e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	0018      	movs	r0, r3
 8015a4a:	f000 f94b 	bl	8015ce4 <I2C_ITSlaveSeqCplt>
 8015a4e:	e03d      	b.n	8015acc <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2210      	movs	r2, #16
 8015a56:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8015a58:	e03e      	b.n	8015ad8 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	2210      	movs	r2, #16
 8015a60:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a66:	2204      	movs	r2, #4
 8015a68:	431a      	orrs	r2, r3
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8015a6e:	2317      	movs	r3, #23
 8015a70:	18fb      	adds	r3, r7, r3
 8015a72:	68fa      	ldr	r2, [r7, #12]
 8015a74:	2141      	movs	r1, #65	@ 0x41
 8015a76:	5c52      	ldrb	r2, [r2, r1]
 8015a78:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d004      	beq.n	8015a8a <I2C_Slave_ISR_DMA+0x162>
 8015a80:	69ba      	ldr	r2, [r7, #24]
 8015a82:	2380      	movs	r3, #128	@ 0x80
 8015a84:	045b      	lsls	r3, r3, #17
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d126      	bne.n	8015ad8 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015a8a:	2217      	movs	r2, #23
 8015a8c:	18bb      	adds	r3, r7, r2
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	2b21      	cmp	r3, #33	@ 0x21
 8015a92:	d003      	beq.n	8015a9c <I2C_Slave_ISR_DMA+0x174>
 8015a94:	18bb      	adds	r3, r7, r2
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b29      	cmp	r3, #41	@ 0x29
 8015a9a:	d103      	bne.n	8015aa4 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	2221      	movs	r2, #33	@ 0x21
 8015aa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8015aa2:	e00b      	b.n	8015abc <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015aa4:	2217      	movs	r2, #23
 8015aa6:	18bb      	adds	r3, r7, r2
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	2b22      	cmp	r3, #34	@ 0x22
 8015aac:	d003      	beq.n	8015ab6 <I2C_Slave_ISR_DMA+0x18e>
 8015aae:	18bb      	adds	r3, r7, r2
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ab4:	d102      	bne.n	8015abc <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2222      	movs	r2, #34	@ 0x22
 8015aba:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	0011      	movs	r1, r2
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f000 fc2f 	bl	8016328 <I2C_ITError>
      if (treatdmanack == 1U)
 8015aca:	e005      	b.n	8015ad8 <I2C_Slave_ISR_DMA+0x1b0>
 8015acc:	e004      	b.n	8015ad8 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2210      	movs	r2, #16
 8015ad4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015ad6:	e013      	b.n	8015b00 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
 8015ad8:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015ada:	e011      	b.n	8015b00 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	08db      	lsrs	r3, r3, #3
 8015ae0:	001a      	movs	r2, r3
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	d00b      	beq.n	8015b00 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	08db      	lsrs	r3, r3, #3
 8015aec:	001a      	movs	r2, r3
 8015aee:	2301      	movs	r3, #1
 8015af0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015af2:	d005      	beq.n	8015b00 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	0011      	movs	r1, r2
 8015afa:	0018      	movs	r0, r3
 8015afc:	f000 f80c 	bl	8015b18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2240      	movs	r2, #64	@ 0x40
 8015b04:	2100      	movs	r1, #0
 8015b06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015b08:	2300      	movs	r3, #0
}
 8015b0a:	0018      	movs	r0, r3
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	b008      	add	sp, #32
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	46c0      	nop			@ (mov r8, r8)
 8015b14:	ffff0000 	.word	0xffff0000

08015b18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015b18:	b5b0      	push	{r4, r5, r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	2241      	movs	r2, #65	@ 0x41
 8015b26:	5c9b      	ldrb	r3, [r3, r2]
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	001a      	movs	r2, r3
 8015b2c:	2328      	movs	r3, #40	@ 0x28
 8015b2e:	4013      	ands	r3, r2
 8015b30:	2b28      	cmp	r3, #40	@ 0x28
 8015b32:	d000      	beq.n	8015b36 <I2C_ITAddrCplt+0x1e>
 8015b34:	e088      	b.n	8015c48 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	699b      	ldr	r3, [r3, #24]
 8015b3c:	0c1b      	lsrs	r3, r3, #16
 8015b3e:	b2da      	uxtb	r2, r3
 8015b40:	250f      	movs	r5, #15
 8015b42:	197b      	adds	r3, r7, r5
 8015b44:	2101      	movs	r1, #1
 8015b46:	400a      	ands	r2, r1
 8015b48:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	699b      	ldr	r3, [r3, #24]
 8015b50:	0c1b      	lsrs	r3, r3, #16
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	200c      	movs	r0, #12
 8015b56:	183b      	adds	r3, r7, r0
 8015b58:	21fe      	movs	r1, #254	@ 0xfe
 8015b5a:	400a      	ands	r2, r1
 8015b5c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	b29a      	uxth	r2, r3
 8015b66:	240a      	movs	r4, #10
 8015b68:	193b      	adds	r3, r7, r4
 8015b6a:	0592      	lsls	r2, r2, #22
 8015b6c:	0d92      	lsrs	r2, r2, #22
 8015b6e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	2308      	movs	r3, #8
 8015b7a:	18fb      	adds	r3, r7, r3
 8015b7c:	21fe      	movs	r1, #254	@ 0xfe
 8015b7e:	400a      	ands	r2, r1
 8015b80:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	2b02      	cmp	r3, #2
 8015b88:	d148      	bne.n	8015c1c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8015b8a:	0021      	movs	r1, r4
 8015b8c:	187b      	adds	r3, r7, r1
 8015b8e:	881b      	ldrh	r3, [r3, #0]
 8015b90:	09db      	lsrs	r3, r3, #7
 8015b92:	b29a      	uxth	r2, r3
 8015b94:	183b      	adds	r3, r7, r0
 8015b96:	881b      	ldrh	r3, [r3, #0]
 8015b98:	4053      	eors	r3, r2
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	001a      	movs	r2, r3
 8015b9e:	2306      	movs	r3, #6
 8015ba0:	4013      	ands	r3, r2
 8015ba2:	d120      	bne.n	8015be6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8015ba4:	183b      	adds	r3, r7, r0
 8015ba6:	187a      	adds	r2, r7, r1
 8015ba8:	8812      	ldrh	r2, [r2, #0]
 8015baa:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015bb0:	1c5a      	adds	r2, r3, #1
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015bba:	2b02      	cmp	r3, #2
 8015bbc:	d14c      	bne.n	8015c58 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	2208      	movs	r2, #8
 8015bca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2240      	movs	r2, #64	@ 0x40
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015bd4:	183b      	adds	r3, r7, r0
 8015bd6:	881a      	ldrh	r2, [r3, #0]
 8015bd8:	197b      	adds	r3, r7, r5
 8015bda:	7819      	ldrb	r1, [r3, #0]
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	0018      	movs	r0, r3
 8015be0:	f7ff f9bc 	bl	8014f5c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8015be4:	e038      	b.n	8015c58 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8015be6:	240c      	movs	r4, #12
 8015be8:	193b      	adds	r3, r7, r4
 8015bea:	2208      	movs	r2, #8
 8015bec:	18ba      	adds	r2, r7, r2
 8015bee:	8812      	ldrh	r2, [r2, #0]
 8015bf0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015bf2:	2380      	movs	r3, #128	@ 0x80
 8015bf4:	021a      	lsls	r2, r3, #8
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	0011      	movs	r1, r2
 8015bfa:	0018      	movs	r0, r3
 8015bfc:	f000 fe7e 	bl	80168fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2240      	movs	r2, #64	@ 0x40
 8015c04:	2100      	movs	r1, #0
 8015c06:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015c08:	193b      	adds	r3, r7, r4
 8015c0a:	881a      	ldrh	r2, [r3, #0]
 8015c0c:	230f      	movs	r3, #15
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	7819      	ldrb	r1, [r3, #0]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	0018      	movs	r0, r3
 8015c16:	f7ff f9a1 	bl	8014f5c <HAL_I2C_AddrCallback>
}
 8015c1a:	e01d      	b.n	8015c58 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015c1c:	2380      	movs	r3, #128	@ 0x80
 8015c1e:	021a      	lsls	r2, r3, #8
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	0011      	movs	r1, r2
 8015c24:	0018      	movs	r0, r3
 8015c26:	f000 fe69 	bl	80168fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2240      	movs	r2, #64	@ 0x40
 8015c2e:	2100      	movs	r1, #0
 8015c30:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015c32:	230c      	movs	r3, #12
 8015c34:	18fb      	adds	r3, r7, r3
 8015c36:	881a      	ldrh	r2, [r3, #0]
 8015c38:	230f      	movs	r3, #15
 8015c3a:	18fb      	adds	r3, r7, r3
 8015c3c:	7819      	ldrb	r1, [r3, #0]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	0018      	movs	r0, r3
 8015c42:	f7ff f98b 	bl	8014f5c <HAL_I2C_AddrCallback>
}
 8015c46:	e007      	b.n	8015c58 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	2208      	movs	r2, #8
 8015c4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2240      	movs	r2, #64	@ 0x40
 8015c54:	2100      	movs	r1, #0
 8015c56:	5499      	strb	r1, [r3, r2]
}
 8015c58:	46c0      	nop			@ (mov r8, r8)
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	b004      	add	sp, #16
 8015c5e:	bdb0      	pop	{r4, r5, r7, pc}

08015c60 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2242      	movs	r2, #66	@ 0x42
 8015c6c:	2100      	movs	r1, #0
 8015c6e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2241      	movs	r2, #65	@ 0x41
 8015c74:	5c9b      	ldrb	r3, [r3, r2]
 8015c76:	b2db      	uxtb	r3, r3
 8015c78:	2b21      	cmp	r3, #33	@ 0x21
 8015c7a:	d117      	bne.n	8015cac <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2241      	movs	r2, #65	@ 0x41
 8015c80:	2120      	movs	r1, #32
 8015c82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2211      	movs	r2, #17
 8015c88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2101      	movs	r1, #1
 8015c94:	0018      	movs	r0, r3
 8015c96:	f000 fe31 	bl	80168fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2240      	movs	r2, #64	@ 0x40
 8015c9e:	2100      	movs	r1, #0
 8015ca0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	0018      	movs	r0, r3
 8015ca6:	f7ff f939 	bl	8014f1c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015caa:	e016      	b.n	8015cda <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2241      	movs	r2, #65	@ 0x41
 8015cb0:	2120      	movs	r1, #32
 8015cb2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2212      	movs	r2, #18
 8015cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2102      	movs	r1, #2
 8015cc4:	0018      	movs	r0, r3
 8015cc6:	f000 fe19 	bl	80168fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2240      	movs	r2, #64	@ 0x40
 8015cce:	2100      	movs	r1, #0
 8015cd0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	0018      	movs	r0, r3
 8015cd6:	f7ff f929 	bl	8014f2c <HAL_I2C_MasterRxCpltCallback>
}
 8015cda:	46c0      	nop			@ (mov r8, r8)
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	b002      	add	sp, #8
 8015ce0:	bd80      	pop	{r7, pc}
	...

08015ce4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2242      	movs	r2, #66	@ 0x42
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	0b9b      	lsrs	r3, r3, #14
 8015d00:	001a      	movs	r2, r3
 8015d02:	2301      	movs	r3, #1
 8015d04:	4013      	ands	r3, r2
 8015d06:	d008      	beq.n	8015d1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	4925      	ldr	r1, [pc, #148]	@ (8015da8 <I2C_ITSlaveSeqCplt+0xc4>)
 8015d14:	400a      	ands	r2, r1
 8015d16:	601a      	str	r2, [r3, #0]
 8015d18:	e00d      	b.n	8015d36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	0bdb      	lsrs	r3, r3, #15
 8015d1e:	001a      	movs	r2, r3
 8015d20:	2301      	movs	r3, #1
 8015d22:	4013      	ands	r3, r2
 8015d24:	d007      	beq.n	8015d36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	491e      	ldr	r1, [pc, #120]	@ (8015dac <I2C_ITSlaveSeqCplt+0xc8>)
 8015d32:	400a      	ands	r2, r1
 8015d34:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2241      	movs	r2, #65	@ 0x41
 8015d3a:	5c9b      	ldrb	r3, [r3, r2]
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	2b29      	cmp	r3, #41	@ 0x29
 8015d40:	d114      	bne.n	8015d6c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2241      	movs	r2, #65	@ 0x41
 8015d46:	2128      	movs	r1, #40	@ 0x28
 8015d48:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2221      	movs	r2, #33	@ 0x21
 8015d4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2101      	movs	r1, #1
 8015d54:	0018      	movs	r0, r3
 8015d56:	f000 fdd1 	bl	80168fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2240      	movs	r2, #64	@ 0x40
 8015d5e:	2100      	movs	r1, #0
 8015d60:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	0018      	movs	r0, r3
 8015d66:	f7ff f8e9 	bl	8014f3c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015d6a:	e019      	b.n	8015da0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2241      	movs	r2, #65	@ 0x41
 8015d70:	5c9b      	ldrb	r3, [r3, r2]
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d76:	d113      	bne.n	8015da0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2241      	movs	r2, #65	@ 0x41
 8015d7c:	2128      	movs	r1, #40	@ 0x28
 8015d7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2222      	movs	r2, #34	@ 0x22
 8015d84:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2102      	movs	r1, #2
 8015d8a:	0018      	movs	r0, r3
 8015d8c:	f000 fdb6 	bl	80168fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2240      	movs	r2, #64	@ 0x40
 8015d94:	2100      	movs	r1, #0
 8015d96:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	0018      	movs	r0, r3
 8015d9c:	f7ff f8d6 	bl	8014f4c <HAL_I2C_SlaveRxCpltCallback>
}
 8015da0:	46c0      	nop			@ (mov r8, r8)
 8015da2:	46bd      	mov	sp, r7
 8015da4:	b004      	add	sp, #16
 8015da6:	bd80      	pop	{r7, pc}
 8015da8:	ffffbfff 	.word	0xffffbfff
 8015dac:	ffff7fff 	.word	0xffff7fff

08015db0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b086      	sub	sp, #24
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
 8015db8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2220      	movs	r2, #32
 8015dc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2241      	movs	r2, #65	@ 0x41
 8015dca:	5c9b      	ldrb	r3, [r3, r2]
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	2b21      	cmp	r3, #33	@ 0x21
 8015dd0:	d108      	bne.n	8015de4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2101      	movs	r1, #1
 8015dd6:	0018      	movs	r0, r3
 8015dd8:	f000 fd90 	bl	80168fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2211      	movs	r2, #17
 8015de0:	631a      	str	r2, [r3, #48]	@ 0x30
 8015de2:	e00d      	b.n	8015e00 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2241      	movs	r2, #65	@ 0x41
 8015de8:	5c9b      	ldrb	r3, [r3, r2]
 8015dea:	b2db      	uxtb	r3, r3
 8015dec:	2b22      	cmp	r3, #34	@ 0x22
 8015dee:	d107      	bne.n	8015e00 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2102      	movs	r1, #2
 8015df4:	0018      	movs	r0, r3
 8015df6:	f000 fd81 	bl	80168fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2212      	movs	r2, #18
 8015dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	685a      	ldr	r2, [r3, #4]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4950      	ldr	r1, [pc, #320]	@ (8015f4c <I2C_ITMasterCplt+0x19c>)
 8015e0c:	400a      	ands	r2, r1
 8015e0e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2200      	movs	r2, #0
 8015e14:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	4a4d      	ldr	r2, [pc, #308]	@ (8015f50 <I2C_ITMasterCplt+0x1a0>)
 8015e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	091b      	lsrs	r3, r3, #4
 8015e20:	001a      	movs	r2, r3
 8015e22:	2301      	movs	r3, #1
 8015e24:	4013      	ands	r3, r2
 8015e26:	d009      	beq.n	8015e3c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	2210      	movs	r2, #16
 8015e2e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e34:	2204      	movs	r2, #4
 8015e36:	431a      	orrs	r2, r3
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2241      	movs	r2, #65	@ 0x41
 8015e40:	5c9b      	ldrb	r3, [r3, r2]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	2b60      	cmp	r3, #96	@ 0x60
 8015e46:	d10b      	bne.n	8015e60 <I2C_ITMasterCplt+0xb0>
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	089b      	lsrs	r3, r3, #2
 8015e4c:	001a      	movs	r2, r3
 8015e4e:	2301      	movs	r3, #1
 8015e50:	4013      	ands	r3, r2
 8015e52:	d005      	beq.n	8015e60 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8015e5e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	0018      	movs	r0, r3
 8015e64:	f000 fb8b 	bl	801657e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e6c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2241      	movs	r2, #65	@ 0x41
 8015e72:	5c9b      	ldrb	r3, [r3, r2]
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	2b60      	cmp	r3, #96	@ 0x60
 8015e78:	d002      	beq.n	8015e80 <I2C_ITMasterCplt+0xd0>
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d007      	beq.n	8015e90 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	0011      	movs	r1, r2
 8015e88:	0018      	movs	r0, r3
 8015e8a:	f000 fa4d 	bl	8016328 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015e8e:	e058      	b.n	8015f42 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2241      	movs	r2, #65	@ 0x41
 8015e94:	5c9b      	ldrb	r3, [r3, r2]
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	2b21      	cmp	r3, #33	@ 0x21
 8015e9a:	d126      	bne.n	8015eea <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2241      	movs	r2, #65	@ 0x41
 8015ea0:	2120      	movs	r1, #32
 8015ea2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2242      	movs	r2, #66	@ 0x42
 8015eae:	5c9b      	ldrb	r3, [r3, r2]
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	2b40      	cmp	r3, #64	@ 0x40
 8015eb4:	d10c      	bne.n	8015ed0 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2242      	movs	r2, #66	@ 0x42
 8015eba:	2100      	movs	r1, #0
 8015ebc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2240      	movs	r2, #64	@ 0x40
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	0018      	movs	r0, r3
 8015eca:	f7ff f85f 	bl	8014f8c <HAL_I2C_MemTxCpltCallback>
}
 8015ece:	e038      	b.n	8015f42 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2242      	movs	r2, #66	@ 0x42
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2240      	movs	r2, #64	@ 0x40
 8015edc:	2100      	movs	r1, #0
 8015ede:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	0018      	movs	r0, r3
 8015ee4:	f7ff f81a 	bl	8014f1c <HAL_I2C_MasterTxCpltCallback>
}
 8015ee8:	e02b      	b.n	8015f42 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2241      	movs	r2, #65	@ 0x41
 8015eee:	5c9b      	ldrb	r3, [r3, r2]
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	2b22      	cmp	r3, #34	@ 0x22
 8015ef4:	d125      	bne.n	8015f42 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2241      	movs	r2, #65	@ 0x41
 8015efa:	2120      	movs	r1, #32
 8015efc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2200      	movs	r2, #0
 8015f02:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2242      	movs	r2, #66	@ 0x42
 8015f08:	5c9b      	ldrb	r3, [r3, r2]
 8015f0a:	b2db      	uxtb	r3, r3
 8015f0c:	2b40      	cmp	r3, #64	@ 0x40
 8015f0e:	d10c      	bne.n	8015f2a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2242      	movs	r2, #66	@ 0x42
 8015f14:	2100      	movs	r1, #0
 8015f16:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2240      	movs	r2, #64	@ 0x40
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	0018      	movs	r0, r3
 8015f24:	f7ff f83a 	bl	8014f9c <HAL_I2C_MemRxCpltCallback>
}
 8015f28:	e00b      	b.n	8015f42 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2242      	movs	r2, #66	@ 0x42
 8015f2e:	2100      	movs	r1, #0
 8015f30:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2240      	movs	r2, #64	@ 0x40
 8015f36:	2100      	movs	r1, #0
 8015f38:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	0018      	movs	r0, r3
 8015f3e:	f7fe fff5 	bl	8014f2c <HAL_I2C_MasterRxCpltCallback>
}
 8015f42:	46c0      	nop			@ (mov r8, r8)
 8015f44:	46bd      	mov	sp, r7
 8015f46:	b006      	add	sp, #24
 8015f48:	bd80      	pop	{r7, pc}
 8015f4a:	46c0      	nop			@ (mov r8, r8)
 8015f4c:	fe00e800 	.word	0xfe00e800
 8015f50:	ffff0000 	.word	0xffff0000

08015f54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b086      	sub	sp, #24
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f6e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8015f70:	200b      	movs	r0, #11
 8015f72:	183b      	adds	r3, r7, r0
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	2141      	movs	r1, #65	@ 0x41
 8015f78:	5c52      	ldrb	r2, [r2, r1]
 8015f7a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2220      	movs	r2, #32
 8015f82:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015f84:	183b      	adds	r3, r7, r0
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	2b21      	cmp	r3, #33	@ 0x21
 8015f8a:	d003      	beq.n	8015f94 <I2C_ITSlaveCplt+0x40>
 8015f8c:	183b      	adds	r3, r7, r0
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b29      	cmp	r3, #41	@ 0x29
 8015f92:	d109      	bne.n	8015fa8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8015f94:	4ab0      	ldr	r2, [pc, #704]	@ (8016258 <I2C_ITSlaveCplt+0x304>)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	0011      	movs	r1, r2
 8015f9a:	0018      	movs	r0, r3
 8015f9c:	f000 fcae 	bl	80168fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2221      	movs	r2, #33	@ 0x21
 8015fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8015fa6:	e020      	b.n	8015fea <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015fa8:	220b      	movs	r2, #11
 8015faa:	18bb      	adds	r3, r7, r2
 8015fac:	781b      	ldrb	r3, [r3, #0]
 8015fae:	2b22      	cmp	r3, #34	@ 0x22
 8015fb0:	d003      	beq.n	8015fba <I2C_ITSlaveCplt+0x66>
 8015fb2:	18bb      	adds	r3, r7, r2
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fb8:	d109      	bne.n	8015fce <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8015fba:	4aa8      	ldr	r2, [pc, #672]	@ (801625c <I2C_ITSlaveCplt+0x308>)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	0011      	movs	r1, r2
 8015fc0:	0018      	movs	r0, r3
 8015fc2:	f000 fc9b 	bl	80168fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	2222      	movs	r2, #34	@ 0x22
 8015fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8015fcc:	e00d      	b.n	8015fea <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8015fce:	230b      	movs	r3, #11
 8015fd0:	18fb      	adds	r3, r7, r3
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	2b28      	cmp	r3, #40	@ 0x28
 8015fd6:	d108      	bne.n	8015fea <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8015fd8:	4aa1      	ldr	r2, [pc, #644]	@ (8016260 <I2C_ITSlaveCplt+0x30c>)
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	0011      	movs	r1, r2
 8015fde:	0018      	movs	r0, r3
 8015fe0:	f000 fc8c 	bl	80168fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	685a      	ldr	r2, [r3, #4]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	2180      	movs	r1, #128	@ 0x80
 8015ff6:	0209      	lsls	r1, r1, #8
 8015ff8:	430a      	orrs	r2, r1
 8015ffa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	685a      	ldr	r2, [r3, #4]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4997      	ldr	r1, [pc, #604]	@ (8016264 <I2C_ITSlaveCplt+0x310>)
 8016008:	400a      	ands	r2, r1
 801600a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	0018      	movs	r0, r3
 8016010:	f000 fab5 	bl	801657e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	0b9b      	lsrs	r3, r3, #14
 8016018:	001a      	movs	r2, r3
 801601a:	2301      	movs	r3, #1
 801601c:	4013      	ands	r3, r2
 801601e:	d013      	beq.n	8016048 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	498f      	ldr	r1, [pc, #572]	@ (8016268 <I2C_ITSlaveCplt+0x314>)
 801602c:	400a      	ands	r2, r1
 801602e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016034:	2b00      	cmp	r3, #0
 8016036:	d020      	beq.n	801607a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	b29a      	uxth	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016046:	e018      	b.n	801607a <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	0bdb      	lsrs	r3, r3, #15
 801604c:	001a      	movs	r2, r3
 801604e:	2301      	movs	r3, #1
 8016050:	4013      	ands	r3, r2
 8016052:	d012      	beq.n	801607a <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	4983      	ldr	r1, [pc, #524]	@ (801626c <I2C_ITSlaveCplt+0x318>)
 8016060:	400a      	ands	r2, r1
 8016062:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016068:	2b00      	cmp	r3, #0
 801606a:	d006      	beq.n	801607a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	b29a      	uxth	r2, r3
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	089b      	lsrs	r3, r3, #2
 801607e:	001a      	movs	r2, r3
 8016080:	2301      	movs	r3, #1
 8016082:	4013      	ands	r3, r2
 8016084:	d020      	beq.n	80160c8 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	2204      	movs	r2, #4
 801608a:	4393      	bics	r3, r2
 801608c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016098:	b2d2      	uxtb	r2, r2
 801609a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160a0:	1c5a      	adds	r2, r3, #1
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d00c      	beq.n	80160c8 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160b2:	3b01      	subs	r3, #1
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160be:	b29b      	uxth	r3, r3
 80160c0:	3b01      	subs	r3, #1
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d005      	beq.n	80160de <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160d6:	2204      	movs	r2, #4
 80160d8:	431a      	orrs	r2, r3
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80160de:	697b      	ldr	r3, [r7, #20]
 80160e0:	091b      	lsrs	r3, r3, #4
 80160e2:	001a      	movs	r2, r3
 80160e4:	2301      	movs	r3, #1
 80160e6:	4013      	ands	r3, r2
 80160e8:	d051      	beq.n	801618e <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	091b      	lsrs	r3, r3, #4
 80160ee:	001a      	movs	r2, r3
 80160f0:	2301      	movs	r3, #1
 80160f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80160f4:	d04b      	beq.n	801618e <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d12d      	bne.n	801615c <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2241      	movs	r2, #65	@ 0x41
 8016104:	5c9b      	ldrb	r3, [r3, r2]
 8016106:	b2db      	uxtb	r3, r3
 8016108:	2b28      	cmp	r3, #40	@ 0x28
 801610a:	d10b      	bne.n	8016124 <I2C_ITSlaveCplt+0x1d0>
 801610c:	68fa      	ldr	r2, [r7, #12]
 801610e:	2380      	movs	r3, #128	@ 0x80
 8016110:	049b      	lsls	r3, r3, #18
 8016112:	429a      	cmp	r2, r3
 8016114:	d106      	bne.n	8016124 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8016116:	697a      	ldr	r2, [r7, #20]
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	0011      	movs	r1, r2
 801611c:	0018      	movs	r0, r3
 801611e:	f000 f8a9 	bl	8016274 <I2C_ITListenCplt>
 8016122:	e034      	b.n	801618e <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2241      	movs	r2, #65	@ 0x41
 8016128:	5c9b      	ldrb	r3, [r3, r2]
 801612a:	b2db      	uxtb	r3, r3
 801612c:	2b29      	cmp	r3, #41	@ 0x29
 801612e:	d110      	bne.n	8016152 <I2C_ITSlaveCplt+0x1fe>
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	4a4f      	ldr	r2, [pc, #316]	@ (8016270 <I2C_ITSlaveCplt+0x31c>)
 8016134:	4293      	cmp	r3, r2
 8016136:	d00c      	beq.n	8016152 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	2210      	movs	r2, #16
 801613e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	0018      	movs	r0, r3
 8016144:	f000 fa1b 	bl	801657e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	0018      	movs	r0, r3
 801614c:	f7ff fdca 	bl	8015ce4 <I2C_ITSlaveSeqCplt>
 8016150:	e01d      	b.n	801618e <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2210      	movs	r2, #16
 8016158:	61da      	str	r2, [r3, #28]
 801615a:	e018      	b.n	801618e <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	2210      	movs	r2, #16
 8016162:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016168:	2204      	movs	r2, #4
 801616a:	431a      	orrs	r2, r3
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d004      	beq.n	8016180 <I2C_ITSlaveCplt+0x22c>
 8016176:	68fa      	ldr	r2, [r7, #12]
 8016178:	2380      	movs	r3, #128	@ 0x80
 801617a:	045b      	lsls	r3, r3, #17
 801617c:	429a      	cmp	r2, r3
 801617e:	d106      	bne.n	801618e <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	0011      	movs	r1, r2
 8016188:	0018      	movs	r0, r3
 801618a:	f000 f8cd 	bl	8016328 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2242      	movs	r2, #66	@ 0x42
 8016192:	2100      	movs	r1, #0
 8016194:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2200      	movs	r2, #0
 801619a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d013      	beq.n	80161cc <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	0011      	movs	r1, r2
 80161ac:	0018      	movs	r0, r3
 80161ae:	f000 f8bb 	bl	8016328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2241      	movs	r2, #65	@ 0x41
 80161b6:	5c9b      	ldrb	r3, [r3, r2]
 80161b8:	b2db      	uxtb	r3, r3
 80161ba:	2b28      	cmp	r3, #40	@ 0x28
 80161bc:	d147      	bne.n	801624e <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80161be:	697a      	ldr	r2, [r7, #20]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	0011      	movs	r1, r2
 80161c4:	0018      	movs	r0, r3
 80161c6:	f000 f855 	bl	8016274 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80161ca:	e040      	b.n	801624e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161d0:	4a27      	ldr	r2, [pc, #156]	@ (8016270 <I2C_ITSlaveCplt+0x31c>)
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d016      	beq.n	8016204 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	0018      	movs	r0, r3
 80161da:	f7ff fd83 	bl	8015ce4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	4a23      	ldr	r2, [pc, #140]	@ (8016270 <I2C_ITSlaveCplt+0x31c>)
 80161e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2241      	movs	r2, #65	@ 0x41
 80161e8:	2120      	movs	r1, #32
 80161ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2200      	movs	r2, #0
 80161f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2240      	movs	r2, #64	@ 0x40
 80161f6:	2100      	movs	r1, #0
 80161f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	0018      	movs	r0, r3
 80161fe:	f7fe febd 	bl	8014f7c <HAL_I2C_ListenCpltCallback>
}
 8016202:	e024      	b.n	801624e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2241      	movs	r2, #65	@ 0x41
 8016208:	5c9b      	ldrb	r3, [r3, r2]
 801620a:	b2db      	uxtb	r3, r3
 801620c:	2b22      	cmp	r3, #34	@ 0x22
 801620e:	d10f      	bne.n	8016230 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2241      	movs	r2, #65	@ 0x41
 8016214:	2120      	movs	r1, #32
 8016216:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2200      	movs	r2, #0
 801621c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2240      	movs	r2, #64	@ 0x40
 8016222:	2100      	movs	r1, #0
 8016224:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	0018      	movs	r0, r3
 801622a:	f7fe fe8f 	bl	8014f4c <HAL_I2C_SlaveRxCpltCallback>
}
 801622e:	e00e      	b.n	801624e <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2241      	movs	r2, #65	@ 0x41
 8016234:	2120      	movs	r1, #32
 8016236:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	2200      	movs	r2, #0
 801623c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2240      	movs	r2, #64	@ 0x40
 8016242:	2100      	movs	r1, #0
 8016244:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	0018      	movs	r0, r3
 801624a:	f7fe fe77 	bl	8014f3c <HAL_I2C_SlaveTxCpltCallback>
}
 801624e:	46c0      	nop			@ (mov r8, r8)
 8016250:	46bd      	mov	sp, r7
 8016252:	b006      	add	sp, #24
 8016254:	bd80      	pop	{r7, pc}
 8016256:	46c0      	nop			@ (mov r8, r8)
 8016258:	00008001 	.word	0x00008001
 801625c:	00008002 	.word	0x00008002
 8016260:	00008003 	.word	0x00008003
 8016264:	fe00e800 	.word	0xfe00e800
 8016268:	ffffbfff 	.word	0xffffbfff
 801626c:	ffff7fff 	.word	0xffff7fff
 8016270:	ffff0000 	.word	0xffff0000

08016274 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	4a27      	ldr	r2, [pc, #156]	@ (8016320 <I2C_ITListenCplt+0xac>)
 8016282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2241      	movs	r2, #65	@ 0x41
 801628e:	2120      	movs	r1, #32
 8016290:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2242      	movs	r2, #66	@ 0x42
 8016296:	2100      	movs	r1, #0
 8016298:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2200      	movs	r2, #0
 801629e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	089b      	lsrs	r3, r3, #2
 80162a4:	001a      	movs	r2, r3
 80162a6:	2301      	movs	r3, #1
 80162a8:	4013      	ands	r3, r2
 80162aa:	d022      	beq.n	80162f2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b6:	b2d2      	uxtb	r2, r2
 80162b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162be:	1c5a      	adds	r2, r3, #1
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d012      	beq.n	80162f2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162d0:	3b01      	subs	r3, #1
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162dc:	b29b      	uxth	r3, r3
 80162de:	3b01      	subs	r3, #1
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162ea:	2204      	movs	r2, #4
 80162ec:	431a      	orrs	r2, r3
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80162f2:	4a0c      	ldr	r2, [pc, #48]	@ (8016324 <I2C_ITListenCplt+0xb0>)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	0011      	movs	r1, r2
 80162f8:	0018      	movs	r0, r3
 80162fa:	f000 faff 	bl	80168fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2210      	movs	r2, #16
 8016304:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2240      	movs	r2, #64	@ 0x40
 801630a:	2100      	movs	r1, #0
 801630c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	0018      	movs	r0, r3
 8016312:	f7fe fe33 	bl	8014f7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8016316:	46c0      	nop			@ (mov r8, r8)
 8016318:	46bd      	mov	sp, r7
 801631a:	b002      	add	sp, #8
 801631c:	bd80      	pop	{r7, pc}
 801631e:	46c0      	nop			@ (mov r8, r8)
 8016320:	ffff0000 	.word	0xffff0000
 8016324:	00008003 	.word	0x00008003

08016328 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016332:	200f      	movs	r0, #15
 8016334:	183b      	adds	r3, r7, r0
 8016336:	687a      	ldr	r2, [r7, #4]
 8016338:	2141      	movs	r1, #65	@ 0x41
 801633a:	5c52      	ldrb	r2, [r2, r1]
 801633c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2242      	movs	r2, #66	@ 0x42
 8016342:	2100      	movs	r1, #0
 8016344:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	4a72      	ldr	r2, [pc, #456]	@ (8016514 <I2C_ITError+0x1ec>)
 801634a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2200      	movs	r2, #0
 8016350:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	431a      	orrs	r2, r3
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801635e:	183b      	adds	r3, r7, r0
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	2b28      	cmp	r3, #40	@ 0x28
 8016364:	d007      	beq.n	8016376 <I2C_ITError+0x4e>
 8016366:	183b      	adds	r3, r7, r0
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	2b29      	cmp	r3, #41	@ 0x29
 801636c:	d003      	beq.n	8016376 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801636e:	183b      	adds	r3, r7, r0
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b2a      	cmp	r3, #42	@ 0x2a
 8016374:	d10c      	bne.n	8016390 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2103      	movs	r1, #3
 801637a:	0018      	movs	r0, r3
 801637c:	f000 fabe 	bl	80168fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2241      	movs	r2, #65	@ 0x41
 8016384:	2128      	movs	r1, #40	@ 0x28
 8016386:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	4a63      	ldr	r2, [pc, #396]	@ (8016518 <I2C_ITError+0x1f0>)
 801638c:	635a      	str	r2, [r3, #52]	@ 0x34
 801638e:	e032      	b.n	80163f6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016390:	4a62      	ldr	r2, [pc, #392]	@ (801651c <I2C_ITError+0x1f4>)
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	0011      	movs	r1, r2
 8016396:	0018      	movs	r0, r3
 8016398:	f000 fab0 	bl	80168fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	0018      	movs	r0, r3
 80163a0:	f000 f8ed 	bl	801657e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2241      	movs	r2, #65	@ 0x41
 80163a8:	5c9b      	ldrb	r3, [r3, r2]
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	2b60      	cmp	r3, #96	@ 0x60
 80163ae:	d01f      	beq.n	80163f0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2241      	movs	r2, #65	@ 0x41
 80163b4:	2120      	movs	r1, #32
 80163b6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	699b      	ldr	r3, [r3, #24]
 80163be:	2220      	movs	r2, #32
 80163c0:	4013      	ands	r3, r2
 80163c2:	2b20      	cmp	r3, #32
 80163c4:	d114      	bne.n	80163f0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	699b      	ldr	r3, [r3, #24]
 80163cc:	2210      	movs	r2, #16
 80163ce:	4013      	ands	r3, r2
 80163d0:	2b10      	cmp	r3, #16
 80163d2:	d109      	bne.n	80163e8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2210      	movs	r2, #16
 80163da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163e0:	2204      	movs	r2, #4
 80163e2:	431a      	orrs	r2, r3
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2220      	movs	r2, #32
 80163ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2200      	movs	r2, #0
 80163f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016400:	2b00      	cmp	r3, #0
 8016402:	d03b      	beq.n	801647c <I2C_ITError+0x154>
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	2b11      	cmp	r3, #17
 8016408:	d002      	beq.n	8016410 <I2C_ITError+0xe8>
 801640a:	68bb      	ldr	r3, [r7, #8]
 801640c:	2b21      	cmp	r3, #33	@ 0x21
 801640e:	d135      	bne.n	801647c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	2380      	movs	r3, #128	@ 0x80
 8016418:	01db      	lsls	r3, r3, #7
 801641a:	401a      	ands	r2, r3
 801641c:	2380      	movs	r3, #128	@ 0x80
 801641e:	01db      	lsls	r3, r3, #7
 8016420:	429a      	cmp	r2, r3
 8016422:	d107      	bne.n	8016434 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	493c      	ldr	r1, [pc, #240]	@ (8016520 <I2C_ITError+0x1f8>)
 8016430:	400a      	ands	r2, r1
 8016432:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016438:	0018      	movs	r0, r3
 801643a:	f7fd fcd3 	bl	8013de4 <HAL_DMA_GetState>
 801643e:	0003      	movs	r3, r0
 8016440:	2b01      	cmp	r3, #1
 8016442:	d016      	beq.n	8016472 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016448:	4a36      	ldr	r2, [pc, #216]	@ (8016524 <I2C_ITError+0x1fc>)
 801644a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2240      	movs	r2, #64	@ 0x40
 8016450:	2100      	movs	r1, #0
 8016452:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016458:	0018      	movs	r0, r3
 801645a:	f7fd fb97 	bl	8013b8c <HAL_DMA_Abort_IT>
 801645e:	1e03      	subs	r3, r0, #0
 8016460:	d051      	beq.n	8016506 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801646c:	0018      	movs	r0, r3
 801646e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016470:	e049      	b.n	8016506 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	0018      	movs	r0, r3
 8016476:	f000 f859 	bl	801652c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801647a:	e044      	b.n	8016506 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016480:	2b00      	cmp	r3, #0
 8016482:	d03b      	beq.n	80164fc <I2C_ITError+0x1d4>
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	2b12      	cmp	r3, #18
 8016488:	d002      	beq.n	8016490 <I2C_ITError+0x168>
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	2b22      	cmp	r3, #34	@ 0x22
 801648e:	d135      	bne.n	80164fc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	2380      	movs	r3, #128	@ 0x80
 8016498:	021b      	lsls	r3, r3, #8
 801649a:	401a      	ands	r2, r3
 801649c:	2380      	movs	r3, #128	@ 0x80
 801649e:	021b      	lsls	r3, r3, #8
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d107      	bne.n	80164b4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	681a      	ldr	r2, [r3, #0]
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	491e      	ldr	r1, [pc, #120]	@ (8016528 <I2C_ITError+0x200>)
 80164b0:	400a      	ands	r2, r1
 80164b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164b8:	0018      	movs	r0, r3
 80164ba:	f7fd fc93 	bl	8013de4 <HAL_DMA_GetState>
 80164be:	0003      	movs	r3, r0
 80164c0:	2b01      	cmp	r3, #1
 80164c2:	d016      	beq.n	80164f2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164c8:	4a16      	ldr	r2, [pc, #88]	@ (8016524 <I2C_ITError+0x1fc>)
 80164ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2240      	movs	r2, #64	@ 0x40
 80164d0:	2100      	movs	r1, #0
 80164d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164d8:	0018      	movs	r0, r3
 80164da:	f7fd fb57 	bl	8013b8c <HAL_DMA_Abort_IT>
 80164de:	1e03      	subs	r3, r0, #0
 80164e0:	d013      	beq.n	801650a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164ec:	0018      	movs	r0, r3
 80164ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80164f0:	e00b      	b.n	801650a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	0018      	movs	r0, r3
 80164f6:	f000 f819 	bl	801652c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80164fa:	e006      	b.n	801650a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	0018      	movs	r0, r3
 8016500:	f000 f814 	bl	801652c <I2C_TreatErrorCallback>
  }
}
 8016504:	e002      	b.n	801650c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016506:	46c0      	nop			@ (mov r8, r8)
 8016508:	e000      	b.n	801650c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801650a:	46c0      	nop			@ (mov r8, r8)
}
 801650c:	46c0      	nop			@ (mov r8, r8)
 801650e:	46bd      	mov	sp, r7
 8016510:	b004      	add	sp, #16
 8016512:	bd80      	pop	{r7, pc}
 8016514:	ffff0000 	.word	0xffff0000
 8016518:	08015269 	.word	0x08015269
 801651c:	00008003 	.word	0x00008003
 8016520:	ffffbfff 	.word	0xffffbfff
 8016524:	08016737 	.word	0x08016737
 8016528:	ffff7fff 	.word	0xffff7fff

0801652c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2241      	movs	r2, #65	@ 0x41
 8016538:	5c9b      	ldrb	r3, [r3, r2]
 801653a:	b2db      	uxtb	r3, r3
 801653c:	2b60      	cmp	r3, #96	@ 0x60
 801653e:	d10f      	bne.n	8016560 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2241      	movs	r2, #65	@ 0x41
 8016544:	2120      	movs	r1, #32
 8016546:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	2240      	movs	r2, #64	@ 0x40
 8016552:	2100      	movs	r1, #0
 8016554:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	0018      	movs	r0, r3
 801655a:	f7fe fd2f 	bl	8014fbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801655e:	e00a      	b.n	8016576 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2200      	movs	r2, #0
 8016564:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2240      	movs	r2, #64	@ 0x40
 801656a:	2100      	movs	r1, #0
 801656c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	0018      	movs	r0, r3
 8016572:	f7fe fd1b 	bl	8014fac <HAL_I2C_ErrorCallback>
}
 8016576:	46c0      	nop			@ (mov r8, r8)
 8016578:	46bd      	mov	sp, r7
 801657a:	b002      	add	sp, #8
 801657c:	bd80      	pop	{r7, pc}

0801657e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801657e:	b580      	push	{r7, lr}
 8016580:	b082      	sub	sp, #8
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	699b      	ldr	r3, [r3, #24]
 801658c:	2202      	movs	r2, #2
 801658e:	4013      	ands	r3, r2
 8016590:	2b02      	cmp	r3, #2
 8016592:	d103      	bne.n	801659c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	2200      	movs	r2, #0
 801659a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	699b      	ldr	r3, [r3, #24]
 80165a2:	2201      	movs	r2, #1
 80165a4:	4013      	ands	r3, r2
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d007      	beq.n	80165ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	699a      	ldr	r2, [r3, #24]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	2101      	movs	r1, #1
 80165b6:	430a      	orrs	r2, r1
 80165b8:	619a      	str	r2, [r3, #24]
  }
}
 80165ba:	46c0      	nop			@ (mov r8, r8)
 80165bc:	46bd      	mov	sp, r7
 80165be:	b002      	add	sp, #8
 80165c0:	bd80      	pop	{r7, pc}
	...

080165c4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b084      	sub	sp, #16
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165d0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	681a      	ldr	r2, [r3, #0]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4920      	ldr	r1, [pc, #128]	@ (8016660 <I2C_DMAMasterTransmitCplt+0x9c>)
 80165de:	400a      	ands	r2, r1
 80165e0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d105      	bne.n	80165f8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2120      	movs	r1, #32
 80165f0:	0018      	movs	r0, r3
 80165f2:	f000 f8f9 	bl	80167e8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80165f6:	e02e      	b.n	8016656 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016600:	189a      	adds	r2, r3, r2
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801660a:	b29b      	uxth	r3, r3
 801660c:	2bff      	cmp	r3, #255	@ 0xff
 801660e:	d903      	bls.n	8016618 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	22ff      	movs	r2, #255	@ 0xff
 8016614:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016616:	e004      	b.n	8016622 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801661c:	b29a      	uxth	r2, r3
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801662a:	0019      	movs	r1, r3
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	3328      	adds	r3, #40	@ 0x28
 8016632:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016638:	f7fd f9c2 	bl	80139c0 <HAL_DMA_Start_IT>
 801663c:	1e03      	subs	r3, r0, #0
 801663e:	d005      	beq.n	801664c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	2110      	movs	r1, #16
 8016644:	0018      	movs	r0, r3
 8016646:	f7ff fe6f 	bl	8016328 <I2C_ITError>
}
 801664a:	e004      	b.n	8016656 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	2140      	movs	r1, #64	@ 0x40
 8016650:	0018      	movs	r0, r3
 8016652:	f000 f8c9 	bl	80167e8 <I2C_Enable_IRQ>
}
 8016656:	46c0      	nop			@ (mov r8, r8)
 8016658:	46bd      	mov	sp, r7
 801665a:	b004      	add	sp, #16
 801665c:	bd80      	pop	{r7, pc}
 801665e:	46c0      	nop			@ (mov r8, r8)
 8016660:	ffffbfff 	.word	0xffffbfff

08016664 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016670:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	681a      	ldr	r2, [r3, #0]
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	4920      	ldr	r1, [pc, #128]	@ (8016700 <I2C_DMAMasterReceiveCplt+0x9c>)
 801667e:	400a      	ands	r2, r1
 8016680:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016686:	b29b      	uxth	r3, r3
 8016688:	2b00      	cmp	r3, #0
 801668a:	d105      	bne.n	8016698 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	2120      	movs	r1, #32
 8016690:	0018      	movs	r0, r3
 8016692:	f000 f8a9 	bl	80167e8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8016696:	e02e      	b.n	80166f6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801669c:	68fa      	ldr	r2, [r7, #12]
 801669e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80166a0:	189a      	adds	r2, r3, r2
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	2bff      	cmp	r3, #255	@ 0xff
 80166ae:	d903      	bls.n	80166b8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	22ff      	movs	r2, #255	@ 0xff
 80166b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80166b6:	e004      	b.n	80166c2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166bc:	b29a      	uxth	r2, r3
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	3324      	adds	r3, #36	@ 0x24
 80166cc:	0019      	movs	r1, r3
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166d2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80166d8:	f7fd f972 	bl	80139c0 <HAL_DMA_Start_IT>
 80166dc:	1e03      	subs	r3, r0, #0
 80166de:	d005      	beq.n	80166ec <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	2110      	movs	r1, #16
 80166e4:	0018      	movs	r0, r3
 80166e6:	f7ff fe1f 	bl	8016328 <I2C_ITError>
}
 80166ea:	e004      	b.n	80166f6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	2140      	movs	r1, #64	@ 0x40
 80166f0:	0018      	movs	r0, r3
 80166f2:	f000 f879 	bl	80167e8 <I2C_Enable_IRQ>
}
 80166f6:	46c0      	nop			@ (mov r8, r8)
 80166f8:	46bd      	mov	sp, r7
 80166fa:	b004      	add	sp, #16
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	46c0      	nop			@ (mov r8, r8)
 8016700:	ffff7fff 	.word	0xffff7fff

08016704 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016710:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	685a      	ldr	r2, [r3, #4]
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	2180      	movs	r1, #128	@ 0x80
 801671e:	0209      	lsls	r1, r1, #8
 8016720:	430a      	orrs	r2, r1
 8016722:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	2110      	movs	r1, #16
 8016728:	0018      	movs	r0, r3
 801672a:	f7ff fdfd 	bl	8016328 <I2C_ITError>
}
 801672e:	46c0      	nop			@ (mov r8, r8)
 8016730:	46bd      	mov	sp, r7
 8016732:	b004      	add	sp, #16
 8016734:	bd80      	pop	{r7, pc}

08016736 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8016736:	b580      	push	{r7, lr}
 8016738:	b084      	sub	sp, #16
 801673a:	af00      	add	r7, sp, #0
 801673c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016742:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016748:	2b00      	cmp	r3, #0
 801674a:	d003      	beq.n	8016754 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016750:	2200      	movs	r2, #0
 8016752:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016758:	2b00      	cmp	r3, #0
 801675a:	d003      	beq.n	8016764 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016760:	2200      	movs	r2, #0
 8016762:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	0018      	movs	r0, r3
 8016768:	f7ff fee0 	bl	801652c <I2C_TreatErrorCallback>
}
 801676c:	46c0      	nop			@ (mov r8, r8)
 801676e:	46bd      	mov	sp, r7
 8016770:	b004      	add	sp, #16
 8016772:	bd80      	pop	{r7, pc}

08016774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016774:	b590      	push	{r4, r7, lr}
 8016776:	b087      	sub	sp, #28
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	0008      	movs	r0, r1
 801677e:	0011      	movs	r1, r2
 8016780:	607b      	str	r3, [r7, #4]
 8016782:	240a      	movs	r4, #10
 8016784:	193b      	adds	r3, r7, r4
 8016786:	1c02      	adds	r2, r0, #0
 8016788:	801a      	strh	r2, [r3, #0]
 801678a:	2009      	movs	r0, #9
 801678c:	183b      	adds	r3, r7, r0
 801678e:	1c0a      	adds	r2, r1, #0
 8016790:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016792:	193b      	adds	r3, r7, r4
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	059b      	lsls	r3, r3, #22
 8016798:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801679a:	183b      	adds	r3, r7, r0
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	0419      	lsls	r1, r3, #16
 80167a0:	23ff      	movs	r3, #255	@ 0xff
 80167a2:	041b      	lsls	r3, r3, #16
 80167a4:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80167a6:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80167ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167ae:	4313      	orrs	r3, r2
 80167b0:	005b      	lsls	r3, r3, #1
 80167b2:	085b      	lsrs	r3, r3, #1
 80167b4:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	685b      	ldr	r3, [r3, #4]
 80167bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80167be:	0d51      	lsrs	r1, r2, #21
 80167c0:	2280      	movs	r2, #128	@ 0x80
 80167c2:	00d2      	lsls	r2, r2, #3
 80167c4:	400a      	ands	r2, r1
 80167c6:	4907      	ldr	r1, [pc, #28]	@ (80167e4 <I2C_TransferConfig+0x70>)
 80167c8:	430a      	orrs	r2, r1
 80167ca:	43d2      	mvns	r2, r2
 80167cc:	401a      	ands	r2, r3
 80167ce:	0011      	movs	r1, r2
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	697a      	ldr	r2, [r7, #20]
 80167d6:	430a      	orrs	r2, r1
 80167d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80167da:	46c0      	nop			@ (mov r8, r8)
 80167dc:	46bd      	mov	sp, r7
 80167de:	b007      	add	sp, #28
 80167e0:	bd90      	pop	{r4, r7, pc}
 80167e2:	46c0      	nop			@ (mov r8, r8)
 80167e4:	03ff63ff 	.word	0x03ff63ff

080167e8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b084      	sub	sp, #16
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	000a      	movs	r2, r1
 80167f2:	1cbb      	adds	r3, r7, #2
 80167f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80167f6:	2300      	movs	r3, #0
 80167f8:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80167fe:	4b3c      	ldr	r3, [pc, #240]	@ (80168f0 <I2C_Enable_IRQ+0x108>)
 8016800:	429a      	cmp	r2, r3
 8016802:	d035      	beq.n	8016870 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8016808:	4b3a      	ldr	r3, [pc, #232]	@ (80168f4 <I2C_Enable_IRQ+0x10c>)
 801680a:	429a      	cmp	r2, r3
 801680c:	d030      	beq.n	8016870 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8016812:	4b39      	ldr	r3, [pc, #228]	@ (80168f8 <I2C_Enable_IRQ+0x110>)
 8016814:	429a      	cmp	r2, r3
 8016816:	d02b      	beq.n	8016870 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016818:	1cbb      	adds	r3, r7, #2
 801681a:	2200      	movs	r2, #0
 801681c:	5e9b      	ldrsh	r3, [r3, r2]
 801681e:	2b00      	cmp	r3, #0
 8016820:	da03      	bge.n	801682a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	22b8      	movs	r2, #184	@ 0xb8
 8016826:	4313      	orrs	r3, r2
 8016828:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801682a:	1cbb      	adds	r3, r7, #2
 801682c:	881b      	ldrh	r3, [r3, #0]
 801682e:	2201      	movs	r2, #1
 8016830:	4013      	ands	r3, r2
 8016832:	d003      	beq.n	801683c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	22f2      	movs	r2, #242	@ 0xf2
 8016838:	4313      	orrs	r3, r2
 801683a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801683c:	1cbb      	adds	r3, r7, #2
 801683e:	881b      	ldrh	r3, [r3, #0]
 8016840:	2202      	movs	r2, #2
 8016842:	4013      	ands	r3, r2
 8016844:	d003      	beq.n	801684e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	22f4      	movs	r2, #244	@ 0xf4
 801684a:	4313      	orrs	r3, r2
 801684c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801684e:	1cbb      	adds	r3, r7, #2
 8016850:	881b      	ldrh	r3, [r3, #0]
 8016852:	2b10      	cmp	r3, #16
 8016854:	d103      	bne.n	801685e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	2290      	movs	r2, #144	@ 0x90
 801685a:	4313      	orrs	r3, r2
 801685c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801685e:	1cbb      	adds	r3, r7, #2
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	2b20      	cmp	r3, #32
 8016864:	d137      	bne.n	80168d6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	2220      	movs	r2, #32
 801686a:	4313      	orrs	r3, r2
 801686c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801686e:	e032      	b.n	80168d6 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016870:	1cbb      	adds	r3, r7, #2
 8016872:	2200      	movs	r2, #0
 8016874:	5e9b      	ldrsh	r3, [r3, r2]
 8016876:	2b00      	cmp	r3, #0
 8016878:	da03      	bge.n	8016882 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	22b8      	movs	r2, #184	@ 0xb8
 801687e:	4313      	orrs	r3, r2
 8016880:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8016882:	1cbb      	adds	r3, r7, #2
 8016884:	881b      	ldrh	r3, [r3, #0]
 8016886:	2201      	movs	r2, #1
 8016888:	4013      	ands	r3, r2
 801688a:	d003      	beq.n	8016894 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	22f2      	movs	r2, #242	@ 0xf2
 8016890:	4313      	orrs	r3, r2
 8016892:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8016894:	1cbb      	adds	r3, r7, #2
 8016896:	881b      	ldrh	r3, [r3, #0]
 8016898:	2202      	movs	r2, #2
 801689a:	4013      	ands	r3, r2
 801689c:	d003      	beq.n	80168a6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	22f4      	movs	r2, #244	@ 0xf4
 80168a2:	4313      	orrs	r3, r2
 80168a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80168a6:	1cbb      	adds	r3, r7, #2
 80168a8:	881b      	ldrh	r3, [r3, #0]
 80168aa:	2b10      	cmp	r3, #16
 80168ac:	d103      	bne.n	80168b6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	2290      	movs	r2, #144	@ 0x90
 80168b2:	4313      	orrs	r3, r2
 80168b4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80168b6:	1cbb      	adds	r3, r7, #2
 80168b8:	881b      	ldrh	r3, [r3, #0]
 80168ba:	2b20      	cmp	r3, #32
 80168bc:	d103      	bne.n	80168c6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2260      	movs	r2, #96	@ 0x60
 80168c2:	4313      	orrs	r3, r2
 80168c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80168c6:	1cbb      	adds	r3, r7, #2
 80168c8:	881b      	ldrh	r3, [r3, #0]
 80168ca:	2b40      	cmp	r3, #64	@ 0x40
 80168cc:	d103      	bne.n	80168d6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2240      	movs	r2, #64	@ 0x40
 80168d2:	4313      	orrs	r3, r2
 80168d4:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	6819      	ldr	r1, [r3, #0]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	430a      	orrs	r2, r1
 80168e4:	601a      	str	r2, [r3, #0]
}
 80168e6:	46c0      	nop			@ (mov r8, r8)
 80168e8:	46bd      	mov	sp, r7
 80168ea:	b004      	add	sp, #16
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	46c0      	nop			@ (mov r8, r8)
 80168f0:	08015491 	.word	0x08015491
 80168f4:	08015929 	.word	0x08015929
 80168f8:	080156a9 	.word	0x080156a9

080168fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b084      	sub	sp, #16
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	000a      	movs	r2, r1
 8016906:	1cbb      	adds	r3, r7, #2
 8016908:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801690a:	2300      	movs	r3, #0
 801690c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801690e:	1cbb      	adds	r3, r7, #2
 8016910:	881b      	ldrh	r3, [r3, #0]
 8016912:	2201      	movs	r2, #1
 8016914:	4013      	ands	r3, r2
 8016916:	d010      	beq.n	801693a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2242      	movs	r2, #66	@ 0x42
 801691c:	4313      	orrs	r3, r2
 801691e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2241      	movs	r2, #65	@ 0x41
 8016924:	5c9b      	ldrb	r3, [r3, r2]
 8016926:	b2db      	uxtb	r3, r3
 8016928:	001a      	movs	r2, r3
 801692a:	2328      	movs	r3, #40	@ 0x28
 801692c:	4013      	ands	r3, r2
 801692e:	2b28      	cmp	r3, #40	@ 0x28
 8016930:	d003      	beq.n	801693a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	22b0      	movs	r2, #176	@ 0xb0
 8016936:	4313      	orrs	r3, r2
 8016938:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801693a:	1cbb      	adds	r3, r7, #2
 801693c:	881b      	ldrh	r3, [r3, #0]
 801693e:	2202      	movs	r2, #2
 8016940:	4013      	ands	r3, r2
 8016942:	d010      	beq.n	8016966 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	2244      	movs	r2, #68	@ 0x44
 8016948:	4313      	orrs	r3, r2
 801694a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2241      	movs	r2, #65	@ 0x41
 8016950:	5c9b      	ldrb	r3, [r3, r2]
 8016952:	b2db      	uxtb	r3, r3
 8016954:	001a      	movs	r2, r3
 8016956:	2328      	movs	r3, #40	@ 0x28
 8016958:	4013      	ands	r3, r2
 801695a:	2b28      	cmp	r3, #40	@ 0x28
 801695c:	d003      	beq.n	8016966 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	22b0      	movs	r2, #176	@ 0xb0
 8016962:	4313      	orrs	r3, r2
 8016964:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016966:	1cbb      	adds	r3, r7, #2
 8016968:	2200      	movs	r2, #0
 801696a:	5e9b      	ldrsh	r3, [r3, r2]
 801696c:	2b00      	cmp	r3, #0
 801696e:	da03      	bge.n	8016978 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	22b8      	movs	r2, #184	@ 0xb8
 8016974:	4313      	orrs	r3, r2
 8016976:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016978:	1cbb      	adds	r3, r7, #2
 801697a:	881b      	ldrh	r3, [r3, #0]
 801697c:	2b10      	cmp	r3, #16
 801697e:	d103      	bne.n	8016988 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	2290      	movs	r2, #144	@ 0x90
 8016984:	4313      	orrs	r3, r2
 8016986:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016988:	1cbb      	adds	r3, r7, #2
 801698a:	881b      	ldrh	r3, [r3, #0]
 801698c:	2b20      	cmp	r3, #32
 801698e:	d103      	bne.n	8016998 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	2220      	movs	r2, #32
 8016994:	4313      	orrs	r3, r2
 8016996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8016998:	1cbb      	adds	r3, r7, #2
 801699a:	881b      	ldrh	r3, [r3, #0]
 801699c:	2b40      	cmp	r3, #64	@ 0x40
 801699e:	d103      	bne.n	80169a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	2240      	movs	r2, #64	@ 0x40
 80169a4:	4313      	orrs	r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	681a      	ldr	r2, [r3, #0]
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	43d9      	mvns	r1, r3
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	400a      	ands	r2, r1
 80169b8:	601a      	str	r2, [r3, #0]
}
 80169ba:	46c0      	nop			@ (mov r8, r8)
 80169bc:	46bd      	mov	sp, r7
 80169be:	b004      	add	sp, #16
 80169c0:	bd80      	pop	{r7, pc}
	...

080169c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	2241      	movs	r2, #65	@ 0x41
 80169d2:	5c9b      	ldrb	r3, [r3, r2]
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	2b20      	cmp	r3, #32
 80169d8:	d138      	bne.n	8016a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2240      	movs	r2, #64	@ 0x40
 80169de:	5c9b      	ldrb	r3, [r3, r2]
 80169e0:	2b01      	cmp	r3, #1
 80169e2:	d101      	bne.n	80169e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80169e4:	2302      	movs	r3, #2
 80169e6:	e032      	b.n	8016a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2240      	movs	r2, #64	@ 0x40
 80169ec:	2101      	movs	r1, #1
 80169ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2241      	movs	r2, #65	@ 0x41
 80169f4:	2124      	movs	r1, #36	@ 0x24
 80169f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	681a      	ldr	r2, [r3, #0]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	2101      	movs	r1, #1
 8016a04:	438a      	bics	r2, r1
 8016a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4911      	ldr	r1, [pc, #68]	@ (8016a58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8016a14:	400a      	ands	r2, r1
 8016a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	6819      	ldr	r1, [r3, #0]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	683a      	ldr	r2, [r7, #0]
 8016a24:	430a      	orrs	r2, r1
 8016a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2101      	movs	r1, #1
 8016a34:	430a      	orrs	r2, r1
 8016a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2241      	movs	r2, #65	@ 0x41
 8016a3c:	2120      	movs	r1, #32
 8016a3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2240      	movs	r2, #64	@ 0x40
 8016a44:	2100      	movs	r1, #0
 8016a46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	e000      	b.n	8016a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016a4c:	2302      	movs	r3, #2
  }
}
 8016a4e:	0018      	movs	r0, r3
 8016a50:	46bd      	mov	sp, r7
 8016a52:	b002      	add	sp, #8
 8016a54:	bd80      	pop	{r7, pc}
 8016a56:	46c0      	nop			@ (mov r8, r8)
 8016a58:	ffffefff 	.word	0xffffefff

08016a5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2241      	movs	r2, #65	@ 0x41
 8016a6a:	5c9b      	ldrb	r3, [r3, r2]
 8016a6c:	b2db      	uxtb	r3, r3
 8016a6e:	2b20      	cmp	r3, #32
 8016a70:	d139      	bne.n	8016ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2240      	movs	r2, #64	@ 0x40
 8016a76:	5c9b      	ldrb	r3, [r3, r2]
 8016a78:	2b01      	cmp	r3, #1
 8016a7a:	d101      	bne.n	8016a80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016a7c:	2302      	movs	r3, #2
 8016a7e:	e033      	b.n	8016ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2240      	movs	r2, #64	@ 0x40
 8016a84:	2101      	movs	r1, #1
 8016a86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2241      	movs	r2, #65	@ 0x41
 8016a8c:	2124      	movs	r1, #36	@ 0x24
 8016a8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2101      	movs	r1, #1
 8016a9c:	438a      	bics	r2, r1
 8016a9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	4a11      	ldr	r2, [pc, #68]	@ (8016af0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8016aac:	4013      	ands	r3, r2
 8016aae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	021b      	lsls	r3, r3, #8
 8016ab4:	68fa      	ldr	r2, [r7, #12]
 8016ab6:	4313      	orrs	r3, r2
 8016ab8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	68fa      	ldr	r2, [r7, #12]
 8016ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	681a      	ldr	r2, [r3, #0]
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	2101      	movs	r1, #1
 8016ace:	430a      	orrs	r2, r1
 8016ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	2241      	movs	r2, #65	@ 0x41
 8016ad6:	2120      	movs	r1, #32
 8016ad8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2240      	movs	r2, #64	@ 0x40
 8016ade:	2100      	movs	r1, #0
 8016ae0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	e000      	b.n	8016ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016ae6:	2302      	movs	r3, #2
  }
}
 8016ae8:	0018      	movs	r0, r3
 8016aea:	46bd      	mov	sp, r7
 8016aec:	b004      	add	sp, #16
 8016aee:	bd80      	pop	{r7, pc}
 8016af0:	fffff0ff 	.word	0xfffff0ff

08016af4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d101      	bne.n	8016b06 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8016b02:	2301      	movs	r3, #1
 8016b04:	e06d      	b.n	8016be2 <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	0018      	movs	r0, r3
 8016b0a:	f000 f875 	bl	8016bf8 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4a36      	ldr	r2, [pc, #216]	@ (8016bec <HAL_IWDG_Init+0xf8>)
 8016b14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4a35      	ldr	r2, [pc, #212]	@ (8016bf0 <HAL_IWDG_Init+0xfc>)
 8016b1c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	687a      	ldr	r2, [r7, #4]
 8016b24:	6852      	ldr	r2, [r2, #4]
 8016b26:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	687a      	ldr	r2, [r7, #4]
 8016b2e:	6892      	ldr	r2, [r2, #8]
 8016b30:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 8016b32:	f7fb fa5d 	bl	8011ff0 <HAL_GetTick>
 8016b36:	0003      	movs	r3, r0
 8016b38:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8016b3a:	e00e      	b.n	8016b5a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8016b3c:	f7fb fa58 	bl	8011ff0 <HAL_GetTick>
 8016b40:	0002      	movs	r2, r0
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	1ad3      	subs	r3, r2, r3
 8016b46:	2b21      	cmp	r3, #33	@ 0x21
 8016b48:	d907      	bls.n	8016b5a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	68db      	ldr	r3, [r3, #12]
 8016b50:	2202      	movs	r2, #2
 8016b52:	4013      	ands	r3, r2
 8016b54:	d001      	beq.n	8016b5a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8016b56:	2303      	movs	r3, #3
 8016b58:	e043      	b.n	8016be2 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	68db      	ldr	r3, [r3, #12]
 8016b60:	2202      	movs	r2, #2
 8016b62:	4013      	ands	r3, r2
 8016b64:	d1ea      	bne.n	8016b3c <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d105      	bne.n	8016b7a <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2280      	movs	r2, #128	@ 0x80
 8016b74:	01d2      	lsls	r2, r2, #7
 8016b76:	615a      	str	r2, [r3, #20]
 8016b78:	e007      	b.n	8016b8a <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	691a      	ldr	r2, [r3, #16]
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	21c0      	movs	r1, #192	@ 0xc0
 8016b84:	0209      	lsls	r1, r1, #8
 8016b86:	430a      	orrs	r2, r1
 8016b88:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8016b8a:	f7fb fa31 	bl	8011ff0 <HAL_GetTick>
 8016b8e:	0003      	movs	r3, r0
 8016b90:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016b92:	e00e      	b.n	8016bb2 <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8016b94:	f7fb fa2c 	bl	8011ff0 <HAL_GetTick>
 8016b98:	0002      	movs	r2, r0
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	1ad3      	subs	r3, r2, r3
 8016b9e:	2b21      	cmp	r3, #33	@ 0x21
 8016ba0:	d907      	bls.n	8016bb2 <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	68db      	ldr	r3, [r3, #12]
 8016ba8:	220f      	movs	r2, #15
 8016baa:	4013      	ands	r3, r2
 8016bac:	d001      	beq.n	8016bb2 <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 8016bae:	2303      	movs	r3, #3
 8016bb0:	e017      	b.n	8016be2 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	220f      	movs	r2, #15
 8016bba:	4013      	ands	r3, r2
 8016bbc:	d1ea      	bne.n	8016b94 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	691a      	ldr	r2, [r3, #16]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	d005      	beq.n	8016bd8 <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	68d2      	ldr	r2, [r2, #12]
 8016bd4:	611a      	str	r2, [r3, #16]
 8016bd6:	e003      	b.n	8016be0 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a05      	ldr	r2, [pc, #20]	@ (8016bf4 <HAL_IWDG_Init+0x100>)
 8016bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016be0:	2300      	movs	r3, #0
}
 8016be2:	0018      	movs	r0, r3
 8016be4:	46bd      	mov	sp, r7
 8016be6:	b004      	add	sp, #16
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	46c0      	nop			@ (mov r8, r8)
 8016bec:	0000cccc 	.word	0x0000cccc
 8016bf0:	00005555 	.word	0x00005555
 8016bf4:	0000aaaa 	.word	0x0000aaaa

08016bf8 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8016c00:	46c0      	nop			@ (mov r8, r8)
 8016c02:	46bd      	mov	sp, r7
 8016c04:	b002      	add	sp, #8
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	4a03      	ldr	r2, [pc, #12]	@ (8016c24 <HAL_IWDG_Refresh+0x1c>)
 8016c16:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8016c18:	2300      	movs	r3, #0
}
 8016c1a:	0018      	movs	r0, r3
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	b002      	add	sp, #8
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	46c0      	nop			@ (mov r8, r8)
 8016c24:	0000aaaa 	.word	0x0000aaaa

08016c28 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016c2c:	4b04      	ldr	r3, [pc, #16]	@ (8016c40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8016c2e:	681a      	ldr	r2, [r3, #0]
 8016c30:	4b03      	ldr	r3, [pc, #12]	@ (8016c40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8016c32:	2180      	movs	r1, #128	@ 0x80
 8016c34:	0049      	lsls	r1, r1, #1
 8016c36:	430a      	orrs	r2, r1
 8016c38:	601a      	str	r2, [r3, #0]
}
 8016c3a:	46c0      	nop			@ (mov r8, r8)
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	40007000 	.word	0x40007000

08016c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b084      	sub	sp, #16
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016c4c:	687a      	ldr	r2, [r7, #4]
 8016c4e:	2380      	movs	r3, #128	@ 0x80
 8016c50:	009b      	lsls	r3, r3, #2
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d137      	bne.n	8016cc6 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8016c56:	4b27      	ldr	r3, [pc, #156]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	23c0      	movs	r3, #192	@ 0xc0
 8016c5c:	00db      	lsls	r3, r3, #3
 8016c5e:	401a      	ands	r2, r3
 8016c60:	2380      	movs	r3, #128	@ 0x80
 8016c62:	009b      	lsls	r3, r3, #2
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d040      	beq.n	8016cea <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8016c68:	4b22      	ldr	r3, [pc, #136]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	4a22      	ldr	r2, [pc, #136]	@ (8016cf8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016c6e:	401a      	ands	r2, r3
 8016c70:	4b20      	ldr	r3, [pc, #128]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016c72:	2180      	movs	r1, #128	@ 0x80
 8016c74:	0089      	lsls	r1, r1, #2
 8016c76:	430a      	orrs	r2, r1
 8016c78:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8016c7a:	4b20      	ldr	r3, [pc, #128]	@ (8016cfc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	2232      	movs	r2, #50	@ 0x32
 8016c80:	4353      	muls	r3, r2
 8016c82:	491f      	ldr	r1, [pc, #124]	@ (8016d00 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8016c84:	0018      	movs	r0, r3
 8016c86:	f7e9 fa47 	bl	8000118 <__udivsi3>
 8016c8a:	0003      	movs	r3, r0
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016c90:	e002      	b.n	8016c98 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	3b01      	subs	r3, #1
 8016c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016c98:	4b16      	ldr	r3, [pc, #88]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016c9a:	695a      	ldr	r2, [r3, #20]
 8016c9c:	2380      	movs	r3, #128	@ 0x80
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	401a      	ands	r2, r3
 8016ca2:	2380      	movs	r3, #128	@ 0x80
 8016ca4:	00db      	lsls	r3, r3, #3
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d102      	bne.n	8016cb0 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d1f0      	bne.n	8016c92 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8016cb0:	4b10      	ldr	r3, [pc, #64]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016cb2:	695a      	ldr	r2, [r3, #20]
 8016cb4:	2380      	movs	r3, #128	@ 0x80
 8016cb6:	00db      	lsls	r3, r3, #3
 8016cb8:	401a      	ands	r2, r3
 8016cba:	2380      	movs	r3, #128	@ 0x80
 8016cbc:	00db      	lsls	r3, r3, #3
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d113      	bne.n	8016cea <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8016cc2:	2303      	movs	r3, #3
 8016cc4:	e012      	b.n	8016cec <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8016cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016cc8:	681a      	ldr	r2, [r3, #0]
 8016cca:	23c0      	movs	r3, #192	@ 0xc0
 8016ccc:	00db      	lsls	r3, r3, #3
 8016cce:	401a      	ands	r2, r3
 8016cd0:	2380      	movs	r3, #128	@ 0x80
 8016cd2:	00db      	lsls	r3, r3, #3
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d008      	beq.n	8016cea <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8016cd8:	4b06      	ldr	r3, [pc, #24]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	4a06      	ldr	r2, [pc, #24]	@ (8016cf8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016cde:	401a      	ands	r2, r3
 8016ce0:	4b04      	ldr	r3, [pc, #16]	@ (8016cf4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016ce2:	2180      	movs	r1, #128	@ 0x80
 8016ce4:	00c9      	lsls	r1, r1, #3
 8016ce6:	430a      	orrs	r2, r1
 8016ce8:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8016cea:	2300      	movs	r3, #0
}
 8016cec:	0018      	movs	r0, r3
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	b004      	add	sp, #16
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	40007000 	.word	0x40007000
 8016cf8:	fffff9ff 	.word	0xfffff9ff
 8016cfc:	2000025c 	.word	0x2000025c
 8016d00:	000f4240 	.word	0x000f4240

08016d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016d08:	4b03      	ldr	r3, [pc, #12]	@ (8016d18 <HAL_PWREx_GetVoltageRange+0x14>)
 8016d0a:	681a      	ldr	r2, [r3, #0]
 8016d0c:	23c0      	movs	r3, #192	@ 0xc0
 8016d0e:	00db      	lsls	r3, r3, #3
 8016d10:	4013      	ands	r3, r2
}
 8016d12:	0018      	movs	r0, r3
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	40007000 	.word	0x40007000

08016d1c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	0002      	movs	r2, r0
 8016d24:	1dfb      	adds	r3, r7, #7
 8016d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8016d28:	4b13      	ldr	r3, [pc, #76]	@ (8016d78 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	4b12      	ldr	r3, [pc, #72]	@ (8016d78 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016d2e:	4913      	ldr	r1, [pc, #76]	@ (8016d7c <HAL_PWREx_EnterSTOP2Mode+0x60>)
 8016d30:	400a      	ands	r2, r1
 8016d32:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8016d34:	4b10      	ldr	r3, [pc, #64]	@ (8016d78 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2207      	movs	r2, #7
 8016d3a:	4393      	bics	r3, r2
 8016d3c:	001a      	movs	r2, r3
 8016d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8016d78 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8016d40:	2102      	movs	r1, #2
 8016d42:	430a      	orrs	r2, r1
 8016d44:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8016d46:	4b0e      	ldr	r3, [pc, #56]	@ (8016d80 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016d48:	691a      	ldr	r2, [r3, #16]
 8016d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d80 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016d4c:	2104      	movs	r1, #4
 8016d4e:	430a      	orrs	r2, r1
 8016d50:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8016d52:	1dfb      	adds	r3, r7, #7
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d101      	bne.n	8016d5e <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8016d5a:	bf30      	wfi
 8016d5c:	e002      	b.n	8016d64 <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8016d5e:	bf40      	sev
    __WFE();
 8016d60:	bf20      	wfe
    __WFE();
 8016d62:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8016d64:	4b06      	ldr	r3, [pc, #24]	@ (8016d80 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016d66:	691a      	ldr	r2, [r3, #16]
 8016d68:	4b05      	ldr	r3, [pc, #20]	@ (8016d80 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8016d6a:	2104      	movs	r1, #4
 8016d6c:	438a      	bics	r2, r1
 8016d6e:	611a      	str	r2, [r3, #16]
}
 8016d70:	46c0      	nop			@ (mov r8, r8)
 8016d72:	46bd      	mov	sp, r7
 8016d74:	b002      	add	sp, #8
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	40007000 	.word	0x40007000
 8016d7c:	ffffbfff 	.word	0xffffbfff
 8016d80:	e000ed00 	.word	0xe000ed00

08016d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016d84:	b5b0      	push	{r4, r5, r7, lr}
 8016d86:	b088      	sub	sp, #32
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016d8c:	4bc9      	ldr	r3, [pc, #804]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016d8e:	689b      	ldr	r3, [r3, #8]
 8016d90:	2238      	movs	r2, #56	@ 0x38
 8016d92:	4013      	ands	r3, r2
 8016d94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016d96:	4bc7      	ldr	r3, [pc, #796]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016d98:	68db      	ldr	r3, [r3, #12]
 8016d9a:	2203      	movs	r2, #3
 8016d9c:	4013      	ands	r3, r2
 8016d9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2210      	movs	r2, #16
 8016da6:	4013      	ands	r3, r2
 8016da8:	d100      	bne.n	8016dac <HAL_RCC_OscConfig+0x28>
 8016daa:	e0ef      	b.n	8016f8c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016dac:	69bb      	ldr	r3, [r7, #24]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d007      	beq.n	8016dc2 <HAL_RCC_OscConfig+0x3e>
 8016db2:	69bb      	ldr	r3, [r7, #24]
 8016db4:	2b18      	cmp	r3, #24
 8016db6:	d000      	beq.n	8016dba <HAL_RCC_OscConfig+0x36>
 8016db8:	e093      	b.n	8016ee2 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d000      	beq.n	8016dc2 <HAL_RCC_OscConfig+0x3e>
 8016dc0:	e08f      	b.n	8016ee2 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016dc2:	4bbc      	ldr	r3, [pc, #752]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2202      	movs	r2, #2
 8016dc8:	4013      	ands	r3, r2
 8016dca:	d006      	beq.n	8016dda <HAL_RCC_OscConfig+0x56>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	69db      	ldr	r3, [r3, #28]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d102      	bne.n	8016dda <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	f000 fbf2 	bl	80175be <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016dde:	4bb5      	ldr	r3, [pc, #724]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2108      	movs	r1, #8
 8016de4:	400b      	ands	r3, r1
 8016de6:	d004      	beq.n	8016df2 <HAL_RCC_OscConfig+0x6e>
 8016de8:	4bb2      	ldr	r3, [pc, #712]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	21f0      	movs	r1, #240	@ 0xf0
 8016dee:	400b      	ands	r3, r1
 8016df0:	e005      	b.n	8016dfe <HAL_RCC_OscConfig+0x7a>
 8016df2:	49b0      	ldr	r1, [pc, #704]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016df4:	2394      	movs	r3, #148	@ 0x94
 8016df6:	58cb      	ldr	r3, [r1, r3]
 8016df8:	091b      	lsrs	r3, r3, #4
 8016dfa:	21f0      	movs	r1, #240	@ 0xf0
 8016dfc:	400b      	ands	r3, r1
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d225      	bcs.n	8016e4e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e06:	0018      	movs	r0, r3
 8016e08:	f000 fd90 	bl	801792c <RCC_SetFlashLatencyFromMSIRange>
 8016e0c:	1e03      	subs	r3, r0, #0
 8016e0e:	d002      	beq.n	8016e16 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8016e10:	2301      	movs	r3, #1
 8016e12:	f000 fbd4 	bl	80175be <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016e16:	4ba7      	ldr	r3, [pc, #668]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e18:	681a      	ldr	r2, [r3, #0]
 8016e1a:	4ba6      	ldr	r3, [pc, #664]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e1c:	2108      	movs	r1, #8
 8016e1e:	430a      	orrs	r2, r1
 8016e20:	601a      	str	r2, [r3, #0]
 8016e22:	4ba4      	ldr	r3, [pc, #656]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	22f0      	movs	r2, #240	@ 0xf0
 8016e28:	4393      	bics	r3, r2
 8016e2a:	0019      	movs	r1, r3
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e30:	4ba0      	ldr	r3, [pc, #640]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e32:	430a      	orrs	r2, r1
 8016e34:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016e36:	4b9f      	ldr	r3, [pc, #636]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	4a9f      	ldr	r2, [pc, #636]	@ (80170b8 <HAL_RCC_OscConfig+0x334>)
 8016e3c:	4013      	ands	r3, r2
 8016e3e:	0019      	movs	r1, r3
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6a1b      	ldr	r3, [r3, #32]
 8016e44:	021a      	lsls	r2, r3, #8
 8016e46:	4b9b      	ldr	r3, [pc, #620]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e48:	430a      	orrs	r2, r1
 8016e4a:	605a      	str	r2, [r3, #4]
 8016e4c:	e027      	b.n	8016e9e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016e4e:	4b99      	ldr	r3, [pc, #612]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	4b98      	ldr	r3, [pc, #608]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e54:	2108      	movs	r1, #8
 8016e56:	430a      	orrs	r2, r1
 8016e58:	601a      	str	r2, [r3, #0]
 8016e5a:	4b96      	ldr	r3, [pc, #600]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	22f0      	movs	r2, #240	@ 0xf0
 8016e60:	4393      	bics	r3, r2
 8016e62:	0019      	movs	r1, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e68:	4b92      	ldr	r3, [pc, #584]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e6a:	430a      	orrs	r2, r1
 8016e6c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016e6e:	4b91      	ldr	r3, [pc, #580]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	4a91      	ldr	r2, [pc, #580]	@ (80170b8 <HAL_RCC_OscConfig+0x334>)
 8016e74:	4013      	ands	r3, r2
 8016e76:	0019      	movs	r1, r3
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6a1b      	ldr	r3, [r3, #32]
 8016e7c:	021a      	lsls	r2, r3, #8
 8016e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016e80:	430a      	orrs	r2, r1
 8016e82:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016e84:	69bb      	ldr	r3, [r7, #24]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d109      	bne.n	8016e9e <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e8e:	0018      	movs	r0, r3
 8016e90:	f000 fd4c 	bl	801792c <RCC_SetFlashLatencyFromMSIRange>
 8016e94:	1e03      	subs	r3, r0, #0
 8016e96:	d002      	beq.n	8016e9e <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	f000 fb90 	bl	80175be <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016e9e:	f000 fc87 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 8016ea2:	0001      	movs	r1, r0
 8016ea4:	4b83      	ldr	r3, [pc, #524]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016ea6:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016ea8:	0a1b      	lsrs	r3, r3, #8
 8016eaa:	220f      	movs	r2, #15
 8016eac:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016eae:	4a83      	ldr	r2, [pc, #524]	@ (80170bc <HAL_RCC_OscConfig+0x338>)
 8016eb0:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016eb2:	001a      	movs	r2, r3
 8016eb4:	231f      	movs	r3, #31
 8016eb6:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016eb8:	000a      	movs	r2, r1
 8016eba:	40da      	lsrs	r2, r3
 8016ebc:	4b80      	ldr	r3, [pc, #512]	@ (80170c0 <HAL_RCC_OscConfig+0x33c>)
 8016ebe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8016ec0:	4b80      	ldr	r3, [pc, #512]	@ (80170c4 <HAL_RCC_OscConfig+0x340>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	250f      	movs	r5, #15
 8016ec6:	197c      	adds	r4, r7, r5
 8016ec8:	0018      	movs	r0, r3
 8016eca:	f7fb f837 	bl	8011f3c <HAL_InitTick>
 8016ece:	0003      	movs	r3, r0
 8016ed0:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8016ed2:	197b      	adds	r3, r7, r5
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d057      	beq.n	8016f8a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8016eda:	197b      	adds	r3, r7, r5
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	f000 fb6e 	bl	80175be <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	69db      	ldr	r3, [r3, #28]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d035      	beq.n	8016f56 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016eea:	4b72      	ldr	r3, [pc, #456]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	4b71      	ldr	r3, [pc, #452]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016ef0:	2101      	movs	r1, #1
 8016ef2:	430a      	orrs	r2, r1
 8016ef4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016ef6:	f7fb f87b 	bl	8011ff0 <HAL_GetTick>
 8016efa:	0003      	movs	r3, r0
 8016efc:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016efe:	e009      	b.n	8016f14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8016f00:	f7fb f876 	bl	8011ff0 <HAL_GetTick>
 8016f04:	0002      	movs	r2, r0
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	1ad3      	subs	r3, r2, r3
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d902      	bls.n	8016f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8016f0e:	2303      	movs	r3, #3
 8016f10:	f000 fb55 	bl	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016f14:	4b67      	ldr	r3, [pc, #412]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	2202      	movs	r2, #2
 8016f1a:	4013      	ands	r3, r2
 8016f1c:	d0f0      	beq.n	8016f00 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016f1e:	4b65      	ldr	r3, [pc, #404]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f20:	681a      	ldr	r2, [r3, #0]
 8016f22:	4b64      	ldr	r3, [pc, #400]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f24:	2108      	movs	r1, #8
 8016f26:	430a      	orrs	r2, r1
 8016f28:	601a      	str	r2, [r3, #0]
 8016f2a:	4b62      	ldr	r3, [pc, #392]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	22f0      	movs	r2, #240	@ 0xf0
 8016f30:	4393      	bics	r3, r2
 8016f32:	0019      	movs	r1, r3
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f38:	4b5e      	ldr	r3, [pc, #376]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f3a:	430a      	orrs	r2, r1
 8016f3c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	4a5d      	ldr	r2, [pc, #372]	@ (80170b8 <HAL_RCC_OscConfig+0x334>)
 8016f44:	4013      	ands	r3, r2
 8016f46:	0019      	movs	r1, r3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6a1b      	ldr	r3, [r3, #32]
 8016f4c:	021a      	lsls	r2, r3, #8
 8016f4e:	4b59      	ldr	r3, [pc, #356]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f50:	430a      	orrs	r2, r1
 8016f52:	605a      	str	r2, [r3, #4]
 8016f54:	e01a      	b.n	8016f8c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016f56:	4b57      	ldr	r3, [pc, #348]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f58:	681a      	ldr	r2, [r3, #0]
 8016f5a:	4b56      	ldr	r3, [pc, #344]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f5c:	2101      	movs	r1, #1
 8016f5e:	438a      	bics	r2, r1
 8016f60:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016f62:	f7fb f845 	bl	8011ff0 <HAL_GetTick>
 8016f66:	0003      	movs	r3, r0
 8016f68:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016f6a:	e008      	b.n	8016f7e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8016f6c:	f7fb f840 	bl	8011ff0 <HAL_GetTick>
 8016f70:	0002      	movs	r2, r0
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	1ad3      	subs	r3, r2, r3
 8016f76:	2b02      	cmp	r3, #2
 8016f78:	d901      	bls.n	8016f7e <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8016f7a:	2303      	movs	r3, #3
 8016f7c:	e31f      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	2202      	movs	r2, #2
 8016f84:	4013      	ands	r3, r2
 8016f86:	d1f1      	bne.n	8016f6c <HAL_RCC_OscConfig+0x1e8>
 8016f88:	e000      	b.n	8016f8c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016f8a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2201      	movs	r2, #1
 8016f92:	4013      	ands	r3, r2
 8016f94:	d100      	bne.n	8016f98 <HAL_RCC_OscConfig+0x214>
 8016f96:	e065      	b.n	8017064 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016f98:	69bb      	ldr	r3, [r7, #24]
 8016f9a:	2b10      	cmp	r3, #16
 8016f9c:	d005      	beq.n	8016faa <HAL_RCC_OscConfig+0x226>
 8016f9e:	69bb      	ldr	r3, [r7, #24]
 8016fa0:	2b18      	cmp	r3, #24
 8016fa2:	d10e      	bne.n	8016fc2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016fa4:	697b      	ldr	r3, [r7, #20]
 8016fa6:	2b03      	cmp	r3, #3
 8016fa8:	d10b      	bne.n	8016fc2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016faa:	4b42      	ldr	r3, [pc, #264]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	2380      	movs	r3, #128	@ 0x80
 8016fb0:	029b      	lsls	r3, r3, #10
 8016fb2:	4013      	ands	r3, r2
 8016fb4:	d055      	beq.n	8017062 <HAL_RCC_OscConfig+0x2de>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d151      	bne.n	8017062 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e2fd      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	685a      	ldr	r2, [r3, #4]
 8016fc6:	2380      	movs	r3, #128	@ 0x80
 8016fc8:	025b      	lsls	r3, r3, #9
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d107      	bne.n	8016fde <HAL_RCC_OscConfig+0x25a>
 8016fce:	4b39      	ldr	r3, [pc, #228]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016fd0:	681a      	ldr	r2, [r3, #0]
 8016fd2:	4b38      	ldr	r3, [pc, #224]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016fd4:	2180      	movs	r1, #128	@ 0x80
 8016fd6:	0249      	lsls	r1, r1, #9
 8016fd8:	430a      	orrs	r2, r1
 8016fda:	601a      	str	r2, [r3, #0]
 8016fdc:	e013      	b.n	8017006 <HAL_RCC_OscConfig+0x282>
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	685a      	ldr	r2, [r3, #4]
 8016fe2:	23a0      	movs	r3, #160	@ 0xa0
 8016fe4:	02db      	lsls	r3, r3, #11
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d107      	bne.n	8016ffa <HAL_RCC_OscConfig+0x276>
 8016fea:	4b32      	ldr	r3, [pc, #200]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	4b31      	ldr	r3, [pc, #196]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016ff0:	21a0      	movs	r1, #160	@ 0xa0
 8016ff2:	02c9      	lsls	r1, r1, #11
 8016ff4:	430a      	orrs	r2, r1
 8016ff6:	601a      	str	r2, [r3, #0]
 8016ff8:	e005      	b.n	8017006 <HAL_RCC_OscConfig+0x282>
 8016ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8016ffc:	681a      	ldr	r2, [r3, #0]
 8016ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8017000:	4931      	ldr	r1, [pc, #196]	@ (80170c8 <HAL_RCC_OscConfig+0x344>)
 8017002:	400a      	ands	r2, r1
 8017004:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d014      	beq.n	8017038 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801700e:	f7fa ffef 	bl	8011ff0 <HAL_GetTick>
 8017012:	0003      	movs	r3, r0
 8017014:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017016:	e008      	b.n	801702a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8017018:	f7fa ffea 	bl	8011ff0 <HAL_GetTick>
 801701c:	0002      	movs	r2, r0
 801701e:	693b      	ldr	r3, [r7, #16]
 8017020:	1ad3      	subs	r3, r2, r3
 8017022:	2b64      	cmp	r3, #100	@ 0x64
 8017024:	d901      	bls.n	801702a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8017026:	2303      	movs	r3, #3
 8017028:	e2c9      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801702a:	4b22      	ldr	r3, [pc, #136]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 801702c:	681a      	ldr	r2, [r3, #0]
 801702e:	2380      	movs	r3, #128	@ 0x80
 8017030:	029b      	lsls	r3, r3, #10
 8017032:	4013      	ands	r3, r2
 8017034:	d0f0      	beq.n	8017018 <HAL_RCC_OscConfig+0x294>
 8017036:	e015      	b.n	8017064 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017038:	f7fa ffda 	bl	8011ff0 <HAL_GetTick>
 801703c:	0003      	movs	r3, r0
 801703e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017040:	e008      	b.n	8017054 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8017042:	f7fa ffd5 	bl	8011ff0 <HAL_GetTick>
 8017046:	0002      	movs	r2, r0
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	1ad3      	subs	r3, r2, r3
 801704c:	2b64      	cmp	r3, #100	@ 0x64
 801704e:	d901      	bls.n	8017054 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8017050:	2303      	movs	r3, #3
 8017052:	e2b4      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017054:	4b17      	ldr	r3, [pc, #92]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	2380      	movs	r3, #128	@ 0x80
 801705a:	029b      	lsls	r3, r3, #10
 801705c:	4013      	ands	r3, r2
 801705e:	d1f0      	bne.n	8017042 <HAL_RCC_OscConfig+0x2be>
 8017060:	e000      	b.n	8017064 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017062:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	2202      	movs	r2, #2
 801706a:	4013      	ands	r3, r2
 801706c:	d100      	bne.n	8017070 <HAL_RCC_OscConfig+0x2ec>
 801706e:	e074      	b.n	801715a <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8017070:	69bb      	ldr	r3, [r7, #24]
 8017072:	2b08      	cmp	r3, #8
 8017074:	d005      	beq.n	8017082 <HAL_RCC_OscConfig+0x2fe>
 8017076:	69bb      	ldr	r3, [r7, #24]
 8017078:	2b18      	cmp	r3, #24
 801707a:	d129      	bne.n	80170d0 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	2b02      	cmp	r3, #2
 8017080:	d126      	bne.n	80170d0 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017082:	4b0c      	ldr	r3, [pc, #48]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 8017084:	681a      	ldr	r2, [r3, #0]
 8017086:	2380      	movs	r3, #128	@ 0x80
 8017088:	00db      	lsls	r3, r3, #3
 801708a:	4013      	ands	r3, r2
 801708c:	d005      	beq.n	801709a <HAL_RCC_OscConfig+0x316>
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	68db      	ldr	r3, [r3, #12]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d101      	bne.n	801709a <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8017096:	2301      	movs	r3, #1
 8017098:	e291      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801709a:	4b06      	ldr	r3, [pc, #24]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 801709c:	685b      	ldr	r3, [r3, #4]
 801709e:	4a0b      	ldr	r2, [pc, #44]	@ (80170cc <HAL_RCC_OscConfig+0x348>)
 80170a0:	4013      	ands	r3, r2
 80170a2:	0019      	movs	r1, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	691b      	ldr	r3, [r3, #16]
 80170a8:	061a      	lsls	r2, r3, #24
 80170aa:	4b02      	ldr	r3, [pc, #8]	@ (80170b4 <HAL_RCC_OscConfig+0x330>)
 80170ac:	430a      	orrs	r2, r1
 80170ae:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80170b0:	e053      	b.n	801715a <HAL_RCC_OscConfig+0x3d6>
 80170b2:	46c0      	nop			@ (mov r8, r8)
 80170b4:	40021000 	.word	0x40021000
 80170b8:	ffff00ff 	.word	0xffff00ff
 80170bc:	0801c6a4 	.word	0x0801c6a4
 80170c0:	2000025c 	.word	0x2000025c
 80170c4:	2000027c 	.word	0x2000027c
 80170c8:	fffaffff 	.word	0xfffaffff
 80170cc:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d026      	beq.n	8017126 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80170d8:	4bc7      	ldr	r3, [pc, #796]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	4bc6      	ldr	r3, [pc, #792]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80170de:	2180      	movs	r1, #128	@ 0x80
 80170e0:	0049      	lsls	r1, r1, #1
 80170e2:	430a      	orrs	r2, r1
 80170e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170e6:	f7fa ff83 	bl	8011ff0 <HAL_GetTick>
 80170ea:	0003      	movs	r3, r0
 80170ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80170ee:	e008      	b.n	8017102 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80170f0:	f7fa ff7e 	bl	8011ff0 <HAL_GetTick>
 80170f4:	0002      	movs	r2, r0
 80170f6:	693b      	ldr	r3, [r7, #16]
 80170f8:	1ad3      	subs	r3, r2, r3
 80170fa:	2b02      	cmp	r3, #2
 80170fc:	d901      	bls.n	8017102 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80170fe:	2303      	movs	r3, #3
 8017100:	e25d      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017102:	4bbd      	ldr	r3, [pc, #756]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017104:	681a      	ldr	r2, [r3, #0]
 8017106:	2380      	movs	r3, #128	@ 0x80
 8017108:	00db      	lsls	r3, r3, #3
 801710a:	4013      	ands	r3, r2
 801710c:	d0f0      	beq.n	80170f0 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801710e:	4bba      	ldr	r3, [pc, #744]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017110:	685b      	ldr	r3, [r3, #4]
 8017112:	4aba      	ldr	r2, [pc, #744]	@ (80173fc <HAL_RCC_OscConfig+0x678>)
 8017114:	4013      	ands	r3, r2
 8017116:	0019      	movs	r1, r3
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	691b      	ldr	r3, [r3, #16]
 801711c:	061a      	lsls	r2, r3, #24
 801711e:	4bb6      	ldr	r3, [pc, #728]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017120:	430a      	orrs	r2, r1
 8017122:	605a      	str	r2, [r3, #4]
 8017124:	e019      	b.n	801715a <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017126:	4bb4      	ldr	r3, [pc, #720]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	4bb3      	ldr	r3, [pc, #716]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801712c:	49b4      	ldr	r1, [pc, #720]	@ (8017400 <HAL_RCC_OscConfig+0x67c>)
 801712e:	400a      	ands	r2, r1
 8017130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017132:	f7fa ff5d 	bl	8011ff0 <HAL_GetTick>
 8017136:	0003      	movs	r3, r0
 8017138:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801713a:	e008      	b.n	801714e <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 801713c:	f7fa ff58 	bl	8011ff0 <HAL_GetTick>
 8017140:	0002      	movs	r2, r0
 8017142:	693b      	ldr	r3, [r7, #16]
 8017144:	1ad3      	subs	r3, r2, r3
 8017146:	2b02      	cmp	r3, #2
 8017148:	d901      	bls.n	801714e <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 801714a:	2303      	movs	r3, #3
 801714c:	e237      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801714e:	4baa      	ldr	r3, [pc, #680]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017150:	681a      	ldr	r2, [r3, #0]
 8017152:	2380      	movs	r3, #128	@ 0x80
 8017154:	00db      	lsls	r3, r3, #3
 8017156:	4013      	ands	r3, r2
 8017158:	d1f0      	bne.n	801713c <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2208      	movs	r2, #8
 8017160:	4013      	ands	r3, r2
 8017162:	d051      	beq.n	8017208 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	695b      	ldr	r3, [r3, #20]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d031      	beq.n	80171d0 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	699b      	ldr	r3, [r3, #24]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d108      	bne.n	8017186 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8017174:	4aa0      	ldr	r2, [pc, #640]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017176:	2394      	movs	r3, #148	@ 0x94
 8017178:	58d3      	ldr	r3, [r2, r3]
 801717a:	499f      	ldr	r1, [pc, #636]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801717c:	2204      	movs	r2, #4
 801717e:	4393      	bics	r3, r2
 8017180:	2294      	movs	r2, #148	@ 0x94
 8017182:	508b      	str	r3, [r1, r2]
 8017184:	e007      	b.n	8017196 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8017186:	4a9c      	ldr	r2, [pc, #624]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017188:	2394      	movs	r3, #148	@ 0x94
 801718a:	58d3      	ldr	r3, [r2, r3]
 801718c:	499a      	ldr	r1, [pc, #616]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801718e:	2204      	movs	r2, #4
 8017190:	4313      	orrs	r3, r2
 8017192:	2294      	movs	r2, #148	@ 0x94
 8017194:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017196:	4a98      	ldr	r2, [pc, #608]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017198:	2394      	movs	r3, #148	@ 0x94
 801719a:	58d3      	ldr	r3, [r2, r3]
 801719c:	4996      	ldr	r1, [pc, #600]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801719e:	2201      	movs	r2, #1
 80171a0:	4313      	orrs	r3, r2
 80171a2:	2294      	movs	r2, #148	@ 0x94
 80171a4:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171a6:	f7fa ff23 	bl	8011ff0 <HAL_GetTick>
 80171aa:	0003      	movs	r3, r0
 80171ac:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80171ae:	e008      	b.n	80171c2 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80171b0:	f7fa ff1e 	bl	8011ff0 <HAL_GetTick>
 80171b4:	0002      	movs	r2, r0
 80171b6:	693b      	ldr	r3, [r7, #16]
 80171b8:	1ad3      	subs	r3, r2, r3
 80171ba:	2b11      	cmp	r3, #17
 80171bc:	d901      	bls.n	80171c2 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80171be:	2303      	movs	r3, #3
 80171c0:	e1fd      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80171c2:	4a8d      	ldr	r2, [pc, #564]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80171c4:	2394      	movs	r3, #148	@ 0x94
 80171c6:	58d3      	ldr	r3, [r2, r3]
 80171c8:	2202      	movs	r2, #2
 80171ca:	4013      	ands	r3, r2
 80171cc:	d0f0      	beq.n	80171b0 <HAL_RCC_OscConfig+0x42c>
 80171ce:	e01b      	b.n	8017208 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80171d0:	4a89      	ldr	r2, [pc, #548]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80171d2:	2394      	movs	r3, #148	@ 0x94
 80171d4:	58d3      	ldr	r3, [r2, r3]
 80171d6:	4988      	ldr	r1, [pc, #544]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80171d8:	2201      	movs	r2, #1
 80171da:	4393      	bics	r3, r2
 80171dc:	2294      	movs	r2, #148	@ 0x94
 80171de:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171e0:	f7fa ff06 	bl	8011ff0 <HAL_GetTick>
 80171e4:	0003      	movs	r3, r0
 80171e6:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80171e8:	e008      	b.n	80171fc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80171ea:	f7fa ff01 	bl	8011ff0 <HAL_GetTick>
 80171ee:	0002      	movs	r2, r0
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	2b11      	cmp	r3, #17
 80171f6:	d901      	bls.n	80171fc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80171f8:	2303      	movs	r3, #3
 80171fa:	e1e0      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80171fc:	4a7e      	ldr	r2, [pc, #504]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80171fe:	2394      	movs	r3, #148	@ 0x94
 8017200:	58d3      	ldr	r3, [r2, r3]
 8017202:	2202      	movs	r2, #2
 8017204:	4013      	ands	r3, r2
 8017206:	d1f0      	bne.n	80171ea <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	2204      	movs	r2, #4
 801720e:	4013      	ands	r3, r2
 8017210:	d100      	bne.n	8017214 <HAL_RCC_OscConfig+0x490>
 8017212:	e10d      	b.n	8017430 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017214:	201f      	movs	r0, #31
 8017216:	183b      	adds	r3, r7, r0
 8017218:	2200      	movs	r2, #0
 801721a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 801721c:	4b76      	ldr	r3, [pc, #472]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801721e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017220:	2380      	movs	r3, #128	@ 0x80
 8017222:	055b      	lsls	r3, r3, #21
 8017224:	4013      	ands	r3, r2
 8017226:	d110      	bne.n	801724a <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017228:	4b73      	ldr	r3, [pc, #460]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801722a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801722c:	4b72      	ldr	r3, [pc, #456]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801722e:	2180      	movs	r1, #128	@ 0x80
 8017230:	0549      	lsls	r1, r1, #21
 8017232:	430a      	orrs	r2, r1
 8017234:	659a      	str	r2, [r3, #88]	@ 0x58
 8017236:	4b70      	ldr	r3, [pc, #448]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017238:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801723a:	2380      	movs	r3, #128	@ 0x80
 801723c:	055b      	lsls	r3, r3, #21
 801723e:	4013      	ands	r3, r2
 8017240:	60bb      	str	r3, [r7, #8]
 8017242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017244:	183b      	adds	r3, r7, r0
 8017246:	2201      	movs	r2, #1
 8017248:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801724a:	4b6e      	ldr	r3, [pc, #440]	@ (8017404 <HAL_RCC_OscConfig+0x680>)
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	2380      	movs	r3, #128	@ 0x80
 8017250:	005b      	lsls	r3, r3, #1
 8017252:	4013      	ands	r3, r2
 8017254:	d11a      	bne.n	801728c <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017256:	4b6b      	ldr	r3, [pc, #428]	@ (8017404 <HAL_RCC_OscConfig+0x680>)
 8017258:	681a      	ldr	r2, [r3, #0]
 801725a:	4b6a      	ldr	r3, [pc, #424]	@ (8017404 <HAL_RCC_OscConfig+0x680>)
 801725c:	2180      	movs	r1, #128	@ 0x80
 801725e:	0049      	lsls	r1, r1, #1
 8017260:	430a      	orrs	r2, r1
 8017262:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017264:	f7fa fec4 	bl	8011ff0 <HAL_GetTick>
 8017268:	0003      	movs	r3, r0
 801726a:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801726c:	e008      	b.n	8017280 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801726e:	f7fa febf 	bl	8011ff0 <HAL_GetTick>
 8017272:	0002      	movs	r2, r0
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	2b02      	cmp	r3, #2
 801727a:	d901      	bls.n	8017280 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801727c:	2303      	movs	r3, #3
 801727e:	e19e      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017280:	4b60      	ldr	r3, [pc, #384]	@ (8017404 <HAL_RCC_OscConfig+0x680>)
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	2380      	movs	r3, #128	@ 0x80
 8017286:	005b      	lsls	r3, r3, #1
 8017288:	4013      	ands	r3, r2
 801728a:	d0f0      	beq.n	801726e <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	689b      	ldr	r3, [r3, #8]
 8017290:	2201      	movs	r2, #1
 8017292:	4013      	ands	r3, r2
 8017294:	d01e      	beq.n	80172d4 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	689b      	ldr	r3, [r3, #8]
 801729a:	2204      	movs	r2, #4
 801729c:	4013      	ands	r3, r2
 801729e:	d010      	beq.n	80172c2 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80172a0:	4a55      	ldr	r2, [pc, #340]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172a2:	2390      	movs	r3, #144	@ 0x90
 80172a4:	58d3      	ldr	r3, [r2, r3]
 80172a6:	4954      	ldr	r1, [pc, #336]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172a8:	2204      	movs	r2, #4
 80172aa:	4313      	orrs	r3, r2
 80172ac:	2290      	movs	r2, #144	@ 0x90
 80172ae:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80172b0:	4a51      	ldr	r2, [pc, #324]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172b2:	2390      	movs	r3, #144	@ 0x90
 80172b4:	58d3      	ldr	r3, [r2, r3]
 80172b6:	4950      	ldr	r1, [pc, #320]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172b8:	2201      	movs	r2, #1
 80172ba:	4313      	orrs	r3, r2
 80172bc:	2290      	movs	r2, #144	@ 0x90
 80172be:	508b      	str	r3, [r1, r2]
 80172c0:	e018      	b.n	80172f4 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80172c2:	4a4d      	ldr	r2, [pc, #308]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172c4:	2390      	movs	r3, #144	@ 0x90
 80172c6:	58d3      	ldr	r3, [r2, r3]
 80172c8:	494b      	ldr	r1, [pc, #300]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172ca:	2201      	movs	r2, #1
 80172cc:	4313      	orrs	r3, r2
 80172ce:	2290      	movs	r2, #144	@ 0x90
 80172d0:	508b      	str	r3, [r1, r2]
 80172d2:	e00f      	b.n	80172f4 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80172d4:	4a48      	ldr	r2, [pc, #288]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172d6:	2390      	movs	r3, #144	@ 0x90
 80172d8:	58d3      	ldr	r3, [r2, r3]
 80172da:	4947      	ldr	r1, [pc, #284]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172dc:	2201      	movs	r2, #1
 80172de:	4393      	bics	r3, r2
 80172e0:	2290      	movs	r2, #144	@ 0x90
 80172e2:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80172e4:	4a44      	ldr	r2, [pc, #272]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172e6:	2390      	movs	r3, #144	@ 0x90
 80172e8:	58d3      	ldr	r3, [r2, r3]
 80172ea:	4943      	ldr	r1, [pc, #268]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80172ec:	2204      	movs	r2, #4
 80172ee:	4393      	bics	r3, r2
 80172f0:	2290      	movs	r2, #144	@ 0x90
 80172f2:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	689b      	ldr	r3, [r3, #8]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d04f      	beq.n	801739c <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172fc:	f7fa fe78 	bl	8011ff0 <HAL_GetTick>
 8017300:	0003      	movs	r3, r0
 8017302:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017304:	e009      	b.n	801731a <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017306:	f7fa fe73 	bl	8011ff0 <HAL_GetTick>
 801730a:	0002      	movs	r2, r0
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	1ad3      	subs	r3, r2, r3
 8017310:	4a3d      	ldr	r2, [pc, #244]	@ (8017408 <HAL_RCC_OscConfig+0x684>)
 8017312:	4293      	cmp	r3, r2
 8017314:	d901      	bls.n	801731a <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8017316:	2303      	movs	r3, #3
 8017318:	e151      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801731a:	4a37      	ldr	r2, [pc, #220]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801731c:	2390      	movs	r3, #144	@ 0x90
 801731e:	58d3      	ldr	r3, [r2, r3]
 8017320:	2202      	movs	r2, #2
 8017322:	4013      	ands	r3, r2
 8017324:	d0ef      	beq.n	8017306 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	689b      	ldr	r3, [r3, #8]
 801732a:	2280      	movs	r2, #128	@ 0x80
 801732c:	4013      	ands	r3, r2
 801732e:	d01a      	beq.n	8017366 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017330:	4a31      	ldr	r2, [pc, #196]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017332:	2390      	movs	r3, #144	@ 0x90
 8017334:	58d3      	ldr	r3, [r2, r3]
 8017336:	4930      	ldr	r1, [pc, #192]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017338:	2280      	movs	r2, #128	@ 0x80
 801733a:	4313      	orrs	r3, r2
 801733c:	2290      	movs	r2, #144	@ 0x90
 801733e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017340:	e009      	b.n	8017356 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017342:	f7fa fe55 	bl	8011ff0 <HAL_GetTick>
 8017346:	0002      	movs	r2, r0
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	1ad3      	subs	r3, r2, r3
 801734c:	4a2e      	ldr	r2, [pc, #184]	@ (8017408 <HAL_RCC_OscConfig+0x684>)
 801734e:	4293      	cmp	r3, r2
 8017350:	d901      	bls.n	8017356 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8017352:	2303      	movs	r3, #3
 8017354:	e133      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017356:	4a28      	ldr	r2, [pc, #160]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017358:	2390      	movs	r3, #144	@ 0x90
 801735a:	58d2      	ldr	r2, [r2, r3]
 801735c:	2380      	movs	r3, #128	@ 0x80
 801735e:	011b      	lsls	r3, r3, #4
 8017360:	4013      	ands	r3, r2
 8017362:	d0ee      	beq.n	8017342 <HAL_RCC_OscConfig+0x5be>
 8017364:	e059      	b.n	801741a <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017366:	4a24      	ldr	r2, [pc, #144]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 8017368:	2390      	movs	r3, #144	@ 0x90
 801736a:	58d3      	ldr	r3, [r2, r3]
 801736c:	4922      	ldr	r1, [pc, #136]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801736e:	2280      	movs	r2, #128	@ 0x80
 8017370:	4393      	bics	r3, r2
 8017372:	2290      	movs	r2, #144	@ 0x90
 8017374:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017376:	e009      	b.n	801738c <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017378:	f7fa fe3a 	bl	8011ff0 <HAL_GetTick>
 801737c:	0002      	movs	r2, r0
 801737e:	693b      	ldr	r3, [r7, #16]
 8017380:	1ad3      	subs	r3, r2, r3
 8017382:	4a21      	ldr	r2, [pc, #132]	@ (8017408 <HAL_RCC_OscConfig+0x684>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d901      	bls.n	801738c <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8017388:	2303      	movs	r3, #3
 801738a:	e118      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801738c:	4a1a      	ldr	r2, [pc, #104]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 801738e:	2390      	movs	r3, #144	@ 0x90
 8017390:	58d2      	ldr	r2, [r2, r3]
 8017392:	2380      	movs	r3, #128	@ 0x80
 8017394:	011b      	lsls	r3, r3, #4
 8017396:	4013      	ands	r3, r2
 8017398:	d1ee      	bne.n	8017378 <HAL_RCC_OscConfig+0x5f4>
 801739a:	e03e      	b.n	801741a <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801739c:	f7fa fe28 	bl	8011ff0 <HAL_GetTick>
 80173a0:	0003      	movs	r3, r0
 80173a2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80173a4:	e009      	b.n	80173ba <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173a6:	f7fa fe23 	bl	8011ff0 <HAL_GetTick>
 80173aa:	0002      	movs	r2, r0
 80173ac:	693b      	ldr	r3, [r7, #16]
 80173ae:	1ad3      	subs	r3, r2, r3
 80173b0:	4a15      	ldr	r2, [pc, #84]	@ (8017408 <HAL_RCC_OscConfig+0x684>)
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d901      	bls.n	80173ba <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80173b6:	2303      	movs	r3, #3
 80173b8:	e101      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80173ba:	4a0f      	ldr	r2, [pc, #60]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80173bc:	2390      	movs	r3, #144	@ 0x90
 80173be:	58d3      	ldr	r3, [r2, r3]
 80173c0:	2202      	movs	r2, #2
 80173c2:	4013      	ands	r3, r2
 80173c4:	d1ef      	bne.n	80173a6 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80173c6:	4a0c      	ldr	r2, [pc, #48]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80173c8:	2390      	movs	r3, #144	@ 0x90
 80173ca:	58d3      	ldr	r3, [r2, r3]
 80173cc:	2280      	movs	r2, #128	@ 0x80
 80173ce:	4013      	ands	r3, r2
 80173d0:	d023      	beq.n	801741a <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80173d2:	4a09      	ldr	r2, [pc, #36]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80173d4:	2390      	movs	r3, #144	@ 0x90
 80173d6:	58d3      	ldr	r3, [r2, r3]
 80173d8:	4907      	ldr	r1, [pc, #28]	@ (80173f8 <HAL_RCC_OscConfig+0x674>)
 80173da:	2280      	movs	r2, #128	@ 0x80
 80173dc:	4393      	bics	r3, r2
 80173de:	2290      	movs	r2, #144	@ 0x90
 80173e0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80173e2:	e013      	b.n	801740c <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173e4:	f7fa fe04 	bl	8011ff0 <HAL_GetTick>
 80173e8:	0002      	movs	r2, r0
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	1ad3      	subs	r3, r2, r3
 80173ee:	4a06      	ldr	r2, [pc, #24]	@ (8017408 <HAL_RCC_OscConfig+0x684>)
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d90b      	bls.n	801740c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80173f4:	2303      	movs	r3, #3
 80173f6:	e0e2      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
 80173f8:	40021000 	.word	0x40021000
 80173fc:	80ffffff 	.word	0x80ffffff
 8017400:	fffffeff 	.word	0xfffffeff
 8017404:	40007000 	.word	0x40007000
 8017408:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801740c:	4a6e      	ldr	r2, [pc, #440]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801740e:	2390      	movs	r3, #144	@ 0x90
 8017410:	58d2      	ldr	r2, [r2, r3]
 8017412:	2380      	movs	r3, #128	@ 0x80
 8017414:	011b      	lsls	r3, r3, #4
 8017416:	4013      	ands	r3, r2
 8017418:	d1e4      	bne.n	80173e4 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801741a:	231f      	movs	r3, #31
 801741c:	18fb      	adds	r3, r7, r3
 801741e:	781b      	ldrb	r3, [r3, #0]
 8017420:	2b01      	cmp	r3, #1
 8017422:	d105      	bne.n	8017430 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017424:	4b68      	ldr	r3, [pc, #416]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017426:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017428:	4b67      	ldr	r3, [pc, #412]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801742a:	4968      	ldr	r1, [pc, #416]	@ (80175cc <HAL_RCC_OscConfig+0x848>)
 801742c:	400a      	ands	r2, r1
 801742e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	2220      	movs	r2, #32
 8017436:	4013      	ands	r3, r2
 8017438:	d03c      	beq.n	80174b4 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801743e:	2b00      	cmp	r3, #0
 8017440:	d01c      	beq.n	801747c <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017442:	4a61      	ldr	r2, [pc, #388]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017444:	2398      	movs	r3, #152	@ 0x98
 8017446:	58d3      	ldr	r3, [r2, r3]
 8017448:	495f      	ldr	r1, [pc, #380]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801744a:	2201      	movs	r2, #1
 801744c:	4313      	orrs	r3, r2
 801744e:	2298      	movs	r2, #152	@ 0x98
 8017450:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017452:	f7fa fdcd 	bl	8011ff0 <HAL_GetTick>
 8017456:	0003      	movs	r3, r0
 8017458:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801745a:	e008      	b.n	801746e <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801745c:	f7fa fdc8 	bl	8011ff0 <HAL_GetTick>
 8017460:	0002      	movs	r2, r0
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	1ad3      	subs	r3, r2, r3
 8017466:	2b02      	cmp	r3, #2
 8017468:	d901      	bls.n	801746e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 801746a:	2303      	movs	r3, #3
 801746c:	e0a7      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801746e:	4a56      	ldr	r2, [pc, #344]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017470:	2398      	movs	r3, #152	@ 0x98
 8017472:	58d3      	ldr	r3, [r2, r3]
 8017474:	2202      	movs	r2, #2
 8017476:	4013      	ands	r3, r2
 8017478:	d0f0      	beq.n	801745c <HAL_RCC_OscConfig+0x6d8>
 801747a:	e01b      	b.n	80174b4 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801747c:	4a52      	ldr	r2, [pc, #328]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801747e:	2398      	movs	r3, #152	@ 0x98
 8017480:	58d3      	ldr	r3, [r2, r3]
 8017482:	4951      	ldr	r1, [pc, #324]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017484:	2201      	movs	r2, #1
 8017486:	4393      	bics	r3, r2
 8017488:	2298      	movs	r2, #152	@ 0x98
 801748a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801748c:	f7fa fdb0 	bl	8011ff0 <HAL_GetTick>
 8017490:	0003      	movs	r3, r0
 8017492:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8017494:	e008      	b.n	80174a8 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017496:	f7fa fdab 	bl	8011ff0 <HAL_GetTick>
 801749a:	0002      	movs	r2, r0
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	1ad3      	subs	r3, r2, r3
 80174a0:	2b02      	cmp	r3, #2
 80174a2:	d901      	bls.n	80174a8 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80174a4:	2303      	movs	r3, #3
 80174a6:	e08a      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80174a8:	4a47      	ldr	r2, [pc, #284]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 80174aa:	2398      	movs	r3, #152	@ 0x98
 80174ac:	58d3      	ldr	r3, [r2, r3]
 80174ae:	2202      	movs	r2, #2
 80174b0:	4013      	ands	r3, r2
 80174b2:	d1f0      	bne.n	8017496 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d100      	bne.n	80174be <HAL_RCC_OscConfig+0x73a>
 80174bc:	e07e      	b.n	80175bc <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80174be:	4b42      	ldr	r3, [pc, #264]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 80174c0:	689b      	ldr	r3, [r3, #8]
 80174c2:	2238      	movs	r2, #56	@ 0x38
 80174c4:	4013      	ands	r3, r2
 80174c6:	2b18      	cmp	r3, #24
 80174c8:	d100      	bne.n	80174cc <HAL_RCC_OscConfig+0x748>
 80174ca:	e075      	b.n	80175b8 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174d0:	2b02      	cmp	r3, #2
 80174d2:	d156      	bne.n	8017582 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80174d4:	4b3c      	ldr	r3, [pc, #240]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 80174d6:	681a      	ldr	r2, [r3, #0]
 80174d8:	4b3b      	ldr	r3, [pc, #236]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 80174da:	493d      	ldr	r1, [pc, #244]	@ (80175d0 <HAL_RCC_OscConfig+0x84c>)
 80174dc:	400a      	ands	r2, r1
 80174de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80174e0:	f7fa fd86 	bl	8011ff0 <HAL_GetTick>
 80174e4:	0003      	movs	r3, r0
 80174e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174e8:	e008      	b.n	80174fc <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174ea:	f7fa fd81 	bl	8011ff0 <HAL_GetTick>
 80174ee:	0002      	movs	r2, r0
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	1ad3      	subs	r3, r2, r3
 80174f4:	2b02      	cmp	r3, #2
 80174f6:	d901      	bls.n	80174fc <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80174f8:	2303      	movs	r3, #3
 80174fa:	e060      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174fc:	4b32      	ldr	r3, [pc, #200]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	2380      	movs	r3, #128	@ 0x80
 8017502:	049b      	lsls	r3, r3, #18
 8017504:	4013      	ands	r3, r2
 8017506:	d1f0      	bne.n	80174ea <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017508:	4b2f      	ldr	r3, [pc, #188]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	4a31      	ldr	r2, [pc, #196]	@ (80175d4 <HAL_RCC_OscConfig+0x850>)
 801750e:	4013      	ands	r3, r2
 8017510:	0019      	movs	r1, r3
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801751a:	431a      	orrs	r2, r3
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017520:	021b      	lsls	r3, r3, #8
 8017522:	431a      	orrs	r2, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017528:	431a      	orrs	r2, r3
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801752e:	431a      	orrs	r2, r3
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017534:	431a      	orrs	r2, r3
 8017536:	4b24      	ldr	r3, [pc, #144]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017538:	430a      	orrs	r2, r1
 801753a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 801753c:	4b22      	ldr	r3, [pc, #136]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801753e:	68da      	ldr	r2, [r3, #12]
 8017540:	4b21      	ldr	r3, [pc, #132]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017542:	2180      	movs	r1, #128	@ 0x80
 8017544:	0549      	lsls	r1, r1, #21
 8017546:	430a      	orrs	r2, r1
 8017548:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801754a:	4b1f      	ldr	r3, [pc, #124]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	4b1e      	ldr	r3, [pc, #120]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017550:	2180      	movs	r1, #128	@ 0x80
 8017552:	0449      	lsls	r1, r1, #17
 8017554:	430a      	orrs	r2, r1
 8017556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017558:	f7fa fd4a 	bl	8011ff0 <HAL_GetTick>
 801755c:	0003      	movs	r3, r0
 801755e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017560:	e008      	b.n	8017574 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017562:	f7fa fd45 	bl	8011ff0 <HAL_GetTick>
 8017566:	0002      	movs	r2, r0
 8017568:	693b      	ldr	r3, [r7, #16]
 801756a:	1ad3      	subs	r3, r2, r3
 801756c:	2b02      	cmp	r3, #2
 801756e:	d901      	bls.n	8017574 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8017570:	2303      	movs	r3, #3
 8017572:	e024      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017574:	4b14      	ldr	r3, [pc, #80]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	2380      	movs	r3, #128	@ 0x80
 801757a:	049b      	lsls	r3, r3, #18
 801757c:	4013      	ands	r3, r2
 801757e:	d0f0      	beq.n	8017562 <HAL_RCC_OscConfig+0x7de>
 8017580:	e01c      	b.n	80175bc <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017582:	4b11      	ldr	r3, [pc, #68]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	4b10      	ldr	r3, [pc, #64]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 8017588:	4911      	ldr	r1, [pc, #68]	@ (80175d0 <HAL_RCC_OscConfig+0x84c>)
 801758a:	400a      	ands	r2, r1
 801758c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801758e:	f7fa fd2f 	bl	8011ff0 <HAL_GetTick>
 8017592:	0003      	movs	r3, r0
 8017594:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017596:	e008      	b.n	80175aa <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017598:	f7fa fd2a 	bl	8011ff0 <HAL_GetTick>
 801759c:	0002      	movs	r2, r0
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	1ad3      	subs	r3, r2, r3
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	d901      	bls.n	80175aa <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80175a6:	2303      	movs	r3, #3
 80175a8:	e009      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80175aa:	4b07      	ldr	r3, [pc, #28]	@ (80175c8 <HAL_RCC_OscConfig+0x844>)
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	2380      	movs	r3, #128	@ 0x80
 80175b0:	049b      	lsls	r3, r3, #18
 80175b2:	4013      	ands	r3, r2
 80175b4:	d1f0      	bne.n	8017598 <HAL_RCC_OscConfig+0x814>
 80175b6:	e001      	b.n	80175bc <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80175b8:	2301      	movs	r3, #1
 80175ba:	e000      	b.n	80175be <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80175bc:	2300      	movs	r3, #0
}
 80175be:	0018      	movs	r0, r3
 80175c0:	46bd      	mov	sp, r7
 80175c2:	b008      	add	sp, #32
 80175c4:	bdb0      	pop	{r4, r5, r7, pc}
 80175c6:	46c0      	nop			@ (mov r8, r8)
 80175c8:	40021000 	.word	0x40021000
 80175cc:	efffffff 	.word	0xefffffff
 80175d0:	feffffff 	.word	0xfeffffff
 80175d4:	11c1808c 	.word	0x11c1808c

080175d8 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80175d8:	b5b0      	push	{r4, r5, r7, lr}
 80175da:	b084      	sub	sp, #16
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
 80175e0:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80175e2:	4b6c      	ldr	r3, [pc, #432]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	2207      	movs	r2, #7
 80175e8:	4013      	ands	r3, r2
 80175ea:	683a      	ldr	r2, [r7, #0]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d911      	bls.n	8017614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80175f0:	4b68      	ldr	r3, [pc, #416]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	2207      	movs	r2, #7
 80175f6:	4393      	bics	r3, r2
 80175f8:	0019      	movs	r1, r3
 80175fa:	4b66      	ldr	r3, [pc, #408]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 80175fc:	683a      	ldr	r2, [r7, #0]
 80175fe:	430a      	orrs	r2, r1
 8017600:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017602:	4b64      	ldr	r3, [pc, #400]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	2207      	movs	r2, #7
 8017608:	4013      	ands	r3, r2
 801760a:	683a      	ldr	r2, [r7, #0]
 801760c:	429a      	cmp	r2, r3
 801760e:	d001      	beq.n	8017614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017610:	2301      	movs	r3, #1
 8017612:	e0bb      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2201      	movs	r2, #1
 801761a:	4013      	ands	r3, r2
 801761c:	d100      	bne.n	8017620 <HAL_RCC_ClockConfig+0x48>
 801761e:	e064      	b.n	80176ea <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	2b03      	cmp	r3, #3
 8017626:	d107      	bne.n	8017638 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017628:	4b5b      	ldr	r3, [pc, #364]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 801762a:	681a      	ldr	r2, [r3, #0]
 801762c:	2380      	movs	r3, #128	@ 0x80
 801762e:	049b      	lsls	r3, r3, #18
 8017630:	4013      	ands	r3, r2
 8017632:	d138      	bne.n	80176a6 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8017634:	2301      	movs	r3, #1
 8017636:	e0a9      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	2b02      	cmp	r3, #2
 801763e:	d107      	bne.n	8017650 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017640:	4b55      	ldr	r3, [pc, #340]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	2380      	movs	r3, #128	@ 0x80
 8017646:	029b      	lsls	r3, r3, #10
 8017648:	4013      	ands	r3, r2
 801764a:	d12c      	bne.n	80176a6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801764c:	2301      	movs	r3, #1
 801764e:	e09d      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	685b      	ldr	r3, [r3, #4]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d106      	bne.n	8017666 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017658:	4b4f      	ldr	r3, [pc, #316]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	2202      	movs	r2, #2
 801765e:	4013      	ands	r3, r2
 8017660:	d121      	bne.n	80176a6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8017662:	2301      	movs	r3, #1
 8017664:	e092      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	2b01      	cmp	r3, #1
 801766c:	d107      	bne.n	801767e <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801766e:	4b4a      	ldr	r3, [pc, #296]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	2380      	movs	r3, #128	@ 0x80
 8017674:	00db      	lsls	r3, r3, #3
 8017676:	4013      	ands	r3, r2
 8017678:	d115      	bne.n	80176a6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801767a:	2301      	movs	r3, #1
 801767c:	e086      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	2b04      	cmp	r3, #4
 8017684:	d107      	bne.n	8017696 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017686:	4a44      	ldr	r2, [pc, #272]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017688:	2394      	movs	r3, #148	@ 0x94
 801768a:	58d3      	ldr	r3, [r2, r3]
 801768c:	2202      	movs	r2, #2
 801768e:	4013      	ands	r3, r2
 8017690:	d109      	bne.n	80176a6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8017692:	2301      	movs	r3, #1
 8017694:	e07a      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017696:	4a40      	ldr	r2, [pc, #256]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017698:	2390      	movs	r3, #144	@ 0x90
 801769a:	58d3      	ldr	r3, [r2, r3]
 801769c:	2202      	movs	r2, #2
 801769e:	4013      	ands	r3, r2
 80176a0:	d101      	bne.n	80176a6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80176a2:	2301      	movs	r3, #1
 80176a4:	e072      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80176a6:	4b3c      	ldr	r3, [pc, #240]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 80176a8:	689b      	ldr	r3, [r3, #8]
 80176aa:	2207      	movs	r2, #7
 80176ac:	4393      	bics	r3, r2
 80176ae:	0019      	movs	r1, r3
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	685a      	ldr	r2, [r3, #4]
 80176b4:	4b38      	ldr	r3, [pc, #224]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 80176b6:	430a      	orrs	r2, r1
 80176b8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80176ba:	f7fa fc99 	bl	8011ff0 <HAL_GetTick>
 80176be:	0003      	movs	r3, r0
 80176c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80176c2:	e009      	b.n	80176d8 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80176c4:	f7fa fc94 	bl	8011ff0 <HAL_GetTick>
 80176c8:	0002      	movs	r2, r0
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	1ad3      	subs	r3, r2, r3
 80176ce:	4a33      	ldr	r2, [pc, #204]	@ (801779c <HAL_RCC_ClockConfig+0x1c4>)
 80176d0:	4293      	cmp	r3, r2
 80176d2:	d901      	bls.n	80176d8 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80176d4:	2303      	movs	r3, #3
 80176d6:	e059      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80176d8:	4b2f      	ldr	r3, [pc, #188]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 80176da:	689b      	ldr	r3, [r3, #8]
 80176dc:	2238      	movs	r2, #56	@ 0x38
 80176de:	401a      	ands	r2, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	685b      	ldr	r3, [r3, #4]
 80176e4:	00db      	lsls	r3, r3, #3
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d1ec      	bne.n	80176c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	2202      	movs	r2, #2
 80176f0:	4013      	ands	r3, r2
 80176f2:	d009      	beq.n	8017708 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80176f4:	4b28      	ldr	r3, [pc, #160]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 80176f6:	689b      	ldr	r3, [r3, #8]
 80176f8:	4a29      	ldr	r2, [pc, #164]	@ (80177a0 <HAL_RCC_ClockConfig+0x1c8>)
 80176fa:	4013      	ands	r3, r2
 80176fc:	0019      	movs	r1, r3
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	689a      	ldr	r2, [r3, #8]
 8017702:	4b25      	ldr	r3, [pc, #148]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017704:	430a      	orrs	r2, r1
 8017706:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017708:	4b22      	ldr	r3, [pc, #136]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2207      	movs	r2, #7
 801770e:	4013      	ands	r3, r2
 8017710:	683a      	ldr	r2, [r7, #0]
 8017712:	429a      	cmp	r2, r3
 8017714:	d211      	bcs.n	801773a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017716:	4b1f      	ldr	r3, [pc, #124]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	2207      	movs	r2, #7
 801771c:	4393      	bics	r3, r2
 801771e:	0019      	movs	r1, r3
 8017720:	4b1c      	ldr	r3, [pc, #112]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	430a      	orrs	r2, r1
 8017726:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017728:	4b1a      	ldr	r3, [pc, #104]	@ (8017794 <HAL_RCC_ClockConfig+0x1bc>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	2207      	movs	r2, #7
 801772e:	4013      	ands	r3, r2
 8017730:	683a      	ldr	r2, [r7, #0]
 8017732:	429a      	cmp	r2, r3
 8017734:	d001      	beq.n	801773a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8017736:	2301      	movs	r3, #1
 8017738:	e028      	b.n	801778c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	2204      	movs	r2, #4
 8017740:	4013      	ands	r3, r2
 8017742:	d009      	beq.n	8017758 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8017744:	4b14      	ldr	r3, [pc, #80]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017746:	689b      	ldr	r3, [r3, #8]
 8017748:	4a16      	ldr	r2, [pc, #88]	@ (80177a4 <HAL_RCC_ClockConfig+0x1cc>)
 801774a:	4013      	ands	r3, r2
 801774c:	0019      	movs	r1, r3
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	68da      	ldr	r2, [r3, #12]
 8017752:	4b11      	ldr	r3, [pc, #68]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017754:	430a      	orrs	r2, r1
 8017756:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8017758:	f000 f82a 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 801775c:	0001      	movs	r1, r0
 801775e:	4b0e      	ldr	r3, [pc, #56]	@ (8017798 <HAL_RCC_ClockConfig+0x1c0>)
 8017760:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8017762:	0a1b      	lsrs	r3, r3, #8
 8017764:	220f      	movs	r2, #15
 8017766:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8017768:	4a0f      	ldr	r2, [pc, #60]	@ (80177a8 <HAL_RCC_ClockConfig+0x1d0>)
 801776a:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801776c:	001a      	movs	r2, r3
 801776e:	231f      	movs	r3, #31
 8017770:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8017772:	000a      	movs	r2, r1
 8017774:	40da      	lsrs	r2, r3
 8017776:	4b0d      	ldr	r3, [pc, #52]	@ (80177ac <HAL_RCC_ClockConfig+0x1d4>)
 8017778:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 801777a:	250b      	movs	r5, #11
 801777c:	197c      	adds	r4, r7, r5
 801777e:	2003      	movs	r0, #3
 8017780:	f7fa fbdc 	bl	8011f3c <HAL_InitTick>
 8017784:	0003      	movs	r3, r0
 8017786:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8017788:	197b      	adds	r3, r7, r5
 801778a:	781b      	ldrb	r3, [r3, #0]
}
 801778c:	0018      	movs	r0, r3
 801778e:	46bd      	mov	sp, r7
 8017790:	b004      	add	sp, #16
 8017792:	bdb0      	pop	{r4, r5, r7, pc}
 8017794:	40022000 	.word	0x40022000
 8017798:	40021000 	.word	0x40021000
 801779c:	00001388 	.word	0x00001388
 80177a0:	fffff0ff 	.word	0xfffff0ff
 80177a4:	ffff8fff 	.word	0xffff8fff
 80177a8:	0801c6a4 	.word	0x0801c6a4
 80177ac:	2000025c 	.word	0x2000025c

080177b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b08a      	sub	sp, #40	@ 0x28
 80177b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80177b6:	2300      	movs	r3, #0
 80177b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80177ba:	2300      	movs	r3, #0
 80177bc:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80177be:	4b46      	ldr	r3, [pc, #280]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80177c0:	689b      	ldr	r3, [r3, #8]
 80177c2:	2238      	movs	r2, #56	@ 0x38
 80177c4:	4013      	ands	r3, r2
 80177c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80177c8:	4b43      	ldr	r3, [pc, #268]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	2203      	movs	r2, #3
 80177ce:	4013      	ands	r3, r2
 80177d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80177d2:	69bb      	ldr	r3, [r7, #24]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d005      	beq.n	80177e4 <HAL_RCC_GetSysClockFreq+0x34>
 80177d8:	69bb      	ldr	r3, [r7, #24]
 80177da:	2b18      	cmp	r3, #24
 80177dc:	d125      	bne.n	801782a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	2b01      	cmp	r3, #1
 80177e2:	d122      	bne.n	801782a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80177e4:	4b3c      	ldr	r3, [pc, #240]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	2208      	movs	r2, #8
 80177ea:	4013      	ands	r3, r2
 80177ec:	d107      	bne.n	80177fe <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80177ee:	4a3a      	ldr	r2, [pc, #232]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80177f0:	2394      	movs	r3, #148	@ 0x94
 80177f2:	58d3      	ldr	r3, [r2, r3]
 80177f4:	0a1b      	lsrs	r3, r3, #8
 80177f6:	220f      	movs	r2, #15
 80177f8:	4013      	ands	r3, r2
 80177fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80177fc:	e005      	b.n	801780a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80177fe:	4b36      	ldr	r3, [pc, #216]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	091b      	lsrs	r3, r3, #4
 8017804:	220f      	movs	r2, #15
 8017806:	4013      	ands	r3, r2
 8017808:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 801780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801780c:	2b0b      	cmp	r3, #11
 801780e:	d901      	bls.n	8017814 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8017810:	2300      	movs	r3, #0
 8017812:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8017814:	4b31      	ldr	r3, [pc, #196]	@ (80178dc <HAL_RCC_GetSysClockFreq+0x12c>)
 8017816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017818:	0092      	lsls	r2, r2, #2
 801781a:	58d3      	ldr	r3, [r2, r3]
 801781c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d11b      	bne.n	801785c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8017824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017826:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017828:	e018      	b.n	801785c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	2b08      	cmp	r3, #8
 801782e:	d102      	bne.n	8017836 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017830:	4b2b      	ldr	r3, [pc, #172]	@ (80178e0 <HAL_RCC_GetSysClockFreq+0x130>)
 8017832:	623b      	str	r3, [r7, #32]
 8017834:	e012      	b.n	801785c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017836:	69bb      	ldr	r3, [r7, #24]
 8017838:	2b10      	cmp	r3, #16
 801783a:	d102      	bne.n	8017842 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801783c:	4b29      	ldr	r3, [pc, #164]	@ (80178e4 <HAL_RCC_GetSysClockFreq+0x134>)
 801783e:	623b      	str	r3, [r7, #32]
 8017840:	e00c      	b.n	801785c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8017842:	69bb      	ldr	r3, [r7, #24]
 8017844:	2b20      	cmp	r3, #32
 8017846:	d103      	bne.n	8017850 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8017848:	23fa      	movs	r3, #250	@ 0xfa
 801784a:	01db      	lsls	r3, r3, #7
 801784c:	623b      	str	r3, [r7, #32]
 801784e:	e005      	b.n	801785c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	2b28      	cmp	r3, #40	@ 0x28
 8017854:	d102      	bne.n	801785c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8017856:	2380      	movs	r3, #128	@ 0x80
 8017858:	021b      	lsls	r3, r3, #8
 801785a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801785c:	69bb      	ldr	r3, [r7, #24]
 801785e:	2b18      	cmp	r3, #24
 8017860:	d135      	bne.n	80178ce <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8017862:	4b1d      	ldr	r3, [pc, #116]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	2203      	movs	r2, #3
 8017868:	4013      	ands	r3, r2
 801786a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801786c:	4b1a      	ldr	r3, [pc, #104]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	091b      	lsrs	r3, r3, #4
 8017872:	2207      	movs	r2, #7
 8017874:	4013      	ands	r3, r2
 8017876:	3301      	adds	r3, #1
 8017878:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	2b02      	cmp	r3, #2
 801787e:	d003      	beq.n	8017888 <HAL_RCC_GetSysClockFreq+0xd8>
 8017880:	693b      	ldr	r3, [r7, #16]
 8017882:	2b03      	cmp	r3, #3
 8017884:	d003      	beq.n	801788e <HAL_RCC_GetSysClockFreq+0xde>
 8017886:	e005      	b.n	8017894 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8017888:	4b15      	ldr	r3, [pc, #84]	@ (80178e0 <HAL_RCC_GetSysClockFreq+0x130>)
 801788a:	61fb      	str	r3, [r7, #28]
        break;
 801788c:	e005      	b.n	801789a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 801788e:	4b15      	ldr	r3, [pc, #84]	@ (80178e4 <HAL_RCC_GetSysClockFreq+0x134>)
 8017890:	61fb      	str	r3, [r7, #28]
        break;
 8017892:	e002      	b.n	801789a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8017894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017896:	61fb      	str	r3, [r7, #28]
        break;
 8017898:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 801789a:	4b0f      	ldr	r3, [pc, #60]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 801789c:	68db      	ldr	r3, [r3, #12]
 801789e:	0a1b      	lsrs	r3, r3, #8
 80178a0:	227f      	movs	r2, #127	@ 0x7f
 80178a2:	4013      	ands	r3, r2
 80178a4:	69fa      	ldr	r2, [r7, #28]
 80178a6:	4353      	muls	r3, r2
 80178a8:	68f9      	ldr	r1, [r7, #12]
 80178aa:	0018      	movs	r0, r3
 80178ac:	f7e8 fc34 	bl	8000118 <__udivsi3>
 80178b0:	0003      	movs	r3, r0
 80178b2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80178b4:	4b08      	ldr	r3, [pc, #32]	@ (80178d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80178b6:	68db      	ldr	r3, [r3, #12]
 80178b8:	0f5b      	lsrs	r3, r3, #29
 80178ba:	2207      	movs	r2, #7
 80178bc:	4013      	ands	r3, r2
 80178be:	3301      	adds	r3, #1
 80178c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80178c2:	6879      	ldr	r1, [r7, #4]
 80178c4:	68b8      	ldr	r0, [r7, #8]
 80178c6:	f7e8 fc27 	bl	8000118 <__udivsi3>
 80178ca:	0003      	movs	r3, r0
 80178cc:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80178ce:	6a3b      	ldr	r3, [r7, #32]
}
 80178d0:	0018      	movs	r0, r3
 80178d2:	46bd      	mov	sp, r7
 80178d4:	b00a      	add	sp, #40	@ 0x28
 80178d6:	bd80      	pop	{r7, pc}
 80178d8:	40021000 	.word	0x40021000
 80178dc:	0801c6bc 	.word	0x0801c6bc
 80178e0:	00f42400 	.word	0x00f42400
 80178e4:	003d0900 	.word	0x003d0900

080178e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80178ec:	4b02      	ldr	r3, [pc, #8]	@ (80178f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80178ee:	681b      	ldr	r3, [r3, #0]
}
 80178f0:	0018      	movs	r0, r3
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	46c0      	nop			@ (mov r8, r8)
 80178f8:	2000025c 	.word	0x2000025c

080178fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8017900:	f7ff fff2 	bl	80178e8 <HAL_RCC_GetHCLKFreq>
 8017904:	0001      	movs	r1, r0
 8017906:	4b07      	ldr	r3, [pc, #28]	@ (8017924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017908:	689b      	ldr	r3, [r3, #8]
 801790a:	0b1b      	lsrs	r3, r3, #12
 801790c:	2207      	movs	r2, #7
 801790e:	4013      	ands	r3, r2
 8017910:	4a05      	ldr	r2, [pc, #20]	@ (8017928 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8017912:	5cd3      	ldrb	r3, [r2, r3]
 8017914:	001a      	movs	r2, r3
 8017916:	231f      	movs	r3, #31
 8017918:	4013      	ands	r3, r2
 801791a:	40d9      	lsrs	r1, r3
 801791c:	000b      	movs	r3, r1
}
 801791e:	0018      	movs	r0, r3
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}
 8017924:	40021000 	.word	0x40021000
 8017928:	0801c6b4 	.word	0x0801c6b4

0801792c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b086      	sub	sp, #24
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8017934:	2300      	movs	r3, #0
 8017936:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8017938:	4b2f      	ldr	r3, [pc, #188]	@ (80179f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801793a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801793c:	2380      	movs	r3, #128	@ 0x80
 801793e:	055b      	lsls	r3, r3, #21
 8017940:	4013      	ands	r3, r2
 8017942:	d004      	beq.n	801794e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017944:	f7ff f9de 	bl	8016d04 <HAL_PWREx_GetVoltageRange>
 8017948:	0003      	movs	r3, r0
 801794a:	617b      	str	r3, [r7, #20]
 801794c:	e017      	b.n	801797e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801794e:	4b2a      	ldr	r3, [pc, #168]	@ (80179f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017950:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017952:	4b29      	ldr	r3, [pc, #164]	@ (80179f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017954:	2180      	movs	r1, #128	@ 0x80
 8017956:	0549      	lsls	r1, r1, #21
 8017958:	430a      	orrs	r2, r1
 801795a:	659a      	str	r2, [r3, #88]	@ 0x58
 801795c:	4b26      	ldr	r3, [pc, #152]	@ (80179f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801795e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017960:	2380      	movs	r3, #128	@ 0x80
 8017962:	055b      	lsls	r3, r3, #21
 8017964:	4013      	ands	r3, r2
 8017966:	60fb      	str	r3, [r7, #12]
 8017968:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801796a:	f7ff f9cb 	bl	8016d04 <HAL_PWREx_GetVoltageRange>
 801796e:	0003      	movs	r3, r0
 8017970:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8017972:	4b21      	ldr	r3, [pc, #132]	@ (80179f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017974:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017976:	4b20      	ldr	r3, [pc, #128]	@ (80179f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8017978:	4920      	ldr	r1, [pc, #128]	@ (80179fc <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 801797a:	400a      	ands	r2, r1
 801797c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801797e:	697a      	ldr	r2, [r7, #20]
 8017980:	2380      	movs	r3, #128	@ 0x80
 8017982:	009b      	lsls	r3, r3, #2
 8017984:	429a      	cmp	r2, r3
 8017986:	d111      	bne.n	80179ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2b80      	cmp	r3, #128	@ 0x80
 801798c:	d91c      	bls.n	80179c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	2bb0      	cmp	r3, #176	@ 0xb0
 8017992:	d902      	bls.n	801799a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8017994:	2302      	movs	r3, #2
 8017996:	613b      	str	r3, [r7, #16]
 8017998:	e016      	b.n	80179c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2b90      	cmp	r3, #144	@ 0x90
 801799e:	d902      	bls.n	80179a6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80179a0:	2301      	movs	r3, #1
 80179a2:	613b      	str	r3, [r7, #16]
 80179a4:	e010      	b.n	80179c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80179a6:	2300      	movs	r3, #0
 80179a8:	613b      	str	r3, [r7, #16]
 80179aa:	e00d      	b.n	80179c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80179b0:	d902      	bls.n	80179b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80179b2:	2302      	movs	r3, #2
 80179b4:	613b      	str	r3, [r7, #16]
 80179b6:	e007      	b.n	80179c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2b70      	cmp	r3, #112	@ 0x70
 80179bc:	d102      	bne.n	80179c4 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80179be:	2301      	movs	r3, #1
 80179c0:	613b      	str	r3, [r7, #16]
 80179c2:	e001      	b.n	80179c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80179c4:	2300      	movs	r3, #0
 80179c6:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80179c8:	4b0d      	ldr	r3, [pc, #52]	@ (8017a00 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2207      	movs	r2, #7
 80179ce:	4393      	bics	r3, r2
 80179d0:	0019      	movs	r1, r3
 80179d2:	4b0b      	ldr	r3, [pc, #44]	@ (8017a00 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80179d4:	693a      	ldr	r2, [r7, #16]
 80179d6:	430a      	orrs	r2, r1
 80179d8:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80179da:	4b09      	ldr	r3, [pc, #36]	@ (8017a00 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	2207      	movs	r2, #7
 80179e0:	4013      	ands	r3, r2
 80179e2:	693a      	ldr	r2, [r7, #16]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d001      	beq.n	80179ec <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80179e8:	2301      	movs	r3, #1
 80179ea:	e000      	b.n	80179ee <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80179ec:	2300      	movs	r3, #0
}
 80179ee:	0018      	movs	r0, r3
 80179f0:	46bd      	mov	sp, r7
 80179f2:	b006      	add	sp, #24
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	46c0      	nop			@ (mov r8, r8)
 80179f8:	40021000 	.word	0x40021000
 80179fc:	efffffff 	.word	0xefffffff
 8017a00:	40022000 	.word	0x40022000

08017a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b086      	sub	sp, #24
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8017a0c:	2313      	movs	r3, #19
 8017a0e:	18fb      	adds	r3, r7, r3
 8017a10:	2200      	movs	r2, #0
 8017a12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017a14:	2312      	movs	r3, #18
 8017a16:	18fb      	adds	r3, r7, r3
 8017a18:	2200      	movs	r2, #0
 8017a1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	681a      	ldr	r2, [r3, #0]
 8017a20:	2380      	movs	r3, #128	@ 0x80
 8017a22:	021b      	lsls	r3, r3, #8
 8017a24:	4013      	ands	r3, r2
 8017a26:	d100      	bne.n	8017a2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8017a28:	e0b7      	b.n	8017b9a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017a2a:	2011      	movs	r0, #17
 8017a2c:	183b      	adds	r3, r7, r0
 8017a2e:	2200      	movs	r2, #0
 8017a30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017a32:	4b4c      	ldr	r3, [pc, #304]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017a34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017a36:	2380      	movs	r3, #128	@ 0x80
 8017a38:	055b      	lsls	r3, r3, #21
 8017a3a:	4013      	ands	r3, r2
 8017a3c:	d110      	bne.n	8017a60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017a3e:	4b49      	ldr	r3, [pc, #292]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017a40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017a42:	4b48      	ldr	r3, [pc, #288]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017a44:	2180      	movs	r1, #128	@ 0x80
 8017a46:	0549      	lsls	r1, r1, #21
 8017a48:	430a      	orrs	r2, r1
 8017a4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8017a4c:	4b45      	ldr	r3, [pc, #276]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017a4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017a50:	2380      	movs	r3, #128	@ 0x80
 8017a52:	055b      	lsls	r3, r3, #21
 8017a54:	4013      	ands	r3, r2
 8017a56:	60bb      	str	r3, [r7, #8]
 8017a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017a5a:	183b      	adds	r3, r7, r0
 8017a5c:	2201      	movs	r2, #1
 8017a5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017a60:	4b41      	ldr	r3, [pc, #260]	@ (8017b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	4b40      	ldr	r3, [pc, #256]	@ (8017b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8017a66:	2180      	movs	r1, #128	@ 0x80
 8017a68:	0049      	lsls	r1, r1, #1
 8017a6a:	430a      	orrs	r2, r1
 8017a6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8017a6e:	f7fa fabf 	bl	8011ff0 <HAL_GetTick>
 8017a72:	0003      	movs	r3, r0
 8017a74:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8017a76:	e00b      	b.n	8017a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017a78:	f7fa faba 	bl	8011ff0 <HAL_GetTick>
 8017a7c:	0002      	movs	r2, r0
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	1ad3      	subs	r3, r2, r3
 8017a82:	2b02      	cmp	r3, #2
 8017a84:	d904      	bls.n	8017a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8017a86:	2313      	movs	r3, #19
 8017a88:	18fb      	adds	r3, r7, r3
 8017a8a:	2203      	movs	r2, #3
 8017a8c:	701a      	strb	r2, [r3, #0]
        break;
 8017a8e:	e005      	b.n	8017a9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8017a90:	4b35      	ldr	r3, [pc, #212]	@ (8017b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8017a92:	681a      	ldr	r2, [r3, #0]
 8017a94:	2380      	movs	r3, #128	@ 0x80
 8017a96:	005b      	lsls	r3, r3, #1
 8017a98:	4013      	ands	r3, r2
 8017a9a:	d0ed      	beq.n	8017a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8017a9c:	2313      	movs	r3, #19
 8017a9e:	18fb      	adds	r3, r7, r3
 8017aa0:	781b      	ldrb	r3, [r3, #0]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d168      	bne.n	8017b78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8017aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017aa8:	2390      	movs	r3, #144	@ 0x90
 8017aaa:	58d2      	ldr	r2, [r2, r3]
 8017aac:	23c0      	movs	r3, #192	@ 0xc0
 8017aae:	009b      	lsls	r3, r3, #2
 8017ab0:	4013      	ands	r3, r2
 8017ab2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8017ab4:	697b      	ldr	r3, [r7, #20]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d01f      	beq.n	8017afa <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017abe:	697a      	ldr	r2, [r7, #20]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d01a      	beq.n	8017afa <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8017ac4:	4a27      	ldr	r2, [pc, #156]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017ac6:	2390      	movs	r3, #144	@ 0x90
 8017ac8:	58d3      	ldr	r3, [r2, r3]
 8017aca:	4a28      	ldr	r2, [pc, #160]	@ (8017b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8017acc:	4013      	ands	r3, r2
 8017ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8017ad0:	4a24      	ldr	r2, [pc, #144]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017ad2:	2390      	movs	r3, #144	@ 0x90
 8017ad4:	58d3      	ldr	r3, [r2, r3]
 8017ad6:	4923      	ldr	r1, [pc, #140]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017ad8:	2280      	movs	r2, #128	@ 0x80
 8017ada:	0252      	lsls	r2, r2, #9
 8017adc:	4313      	orrs	r3, r2
 8017ade:	2290      	movs	r2, #144	@ 0x90
 8017ae0:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017ae2:	4a20      	ldr	r2, [pc, #128]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017ae4:	2390      	movs	r3, #144	@ 0x90
 8017ae6:	58d3      	ldr	r3, [r2, r3]
 8017ae8:	491e      	ldr	r1, [pc, #120]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017aea:	4a21      	ldr	r2, [pc, #132]	@ (8017b70 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8017aec:	4013      	ands	r3, r2
 8017aee:	2290      	movs	r2, #144	@ 0x90
 8017af0:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017af2:	491c      	ldr	r1, [pc, #112]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017af4:	2290      	movs	r2, #144	@ 0x90
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	2201      	movs	r2, #1
 8017afe:	4013      	ands	r3, r2
 8017b00:	d017      	beq.n	8017b32 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017b02:	f7fa fa75 	bl	8011ff0 <HAL_GetTick>
 8017b06:	0003      	movs	r3, r0
 8017b08:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b0a:	e00c      	b.n	8017b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017b0c:	f7fa fa70 	bl	8011ff0 <HAL_GetTick>
 8017b10:	0002      	movs	r2, r0
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	4a17      	ldr	r2, [pc, #92]	@ (8017b74 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8017b18:	4293      	cmp	r3, r2
 8017b1a:	d904      	bls.n	8017b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8017b1c:	2313      	movs	r3, #19
 8017b1e:	18fb      	adds	r3, r7, r3
 8017b20:	2203      	movs	r2, #3
 8017b22:	701a      	strb	r2, [r3, #0]
            break;
 8017b24:	e005      	b.n	8017b32 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b26:	4a0f      	ldr	r2, [pc, #60]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017b28:	2390      	movs	r3, #144	@ 0x90
 8017b2a:	58d3      	ldr	r3, [r2, r3]
 8017b2c:	2202      	movs	r2, #2
 8017b2e:	4013      	ands	r3, r2
 8017b30:	d0ec      	beq.n	8017b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8017b32:	2313      	movs	r3, #19
 8017b34:	18fb      	adds	r3, r7, r3
 8017b36:	781b      	ldrb	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10b      	bne.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017b3c:	4a09      	ldr	r2, [pc, #36]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017b3e:	2390      	movs	r3, #144	@ 0x90
 8017b40:	58d3      	ldr	r3, [r2, r3]
 8017b42:	4a0a      	ldr	r2, [pc, #40]	@ (8017b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8017b44:	401a      	ands	r2, r3
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b4a:	4906      	ldr	r1, [pc, #24]	@ (8017b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8017b4c:	4313      	orrs	r3, r2
 8017b4e:	2290      	movs	r2, #144	@ 0x90
 8017b50:	508b      	str	r3, [r1, r2]
 8017b52:	e017      	b.n	8017b84 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017b54:	2312      	movs	r3, #18
 8017b56:	18fb      	adds	r3, r7, r3
 8017b58:	2213      	movs	r2, #19
 8017b5a:	18ba      	adds	r2, r7, r2
 8017b5c:	7812      	ldrb	r2, [r2, #0]
 8017b5e:	701a      	strb	r2, [r3, #0]
 8017b60:	e010      	b.n	8017b84 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8017b62:	46c0      	nop			@ (mov r8, r8)
 8017b64:	40021000 	.word	0x40021000
 8017b68:	40007000 	.word	0x40007000
 8017b6c:	fffffcff 	.word	0xfffffcff
 8017b70:	fffeffff 	.word	0xfffeffff
 8017b74:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017b78:	2312      	movs	r3, #18
 8017b7a:	18fb      	adds	r3, r7, r3
 8017b7c:	2213      	movs	r2, #19
 8017b7e:	18ba      	adds	r2, r7, r2
 8017b80:	7812      	ldrb	r2, [r2, #0]
 8017b82:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017b84:	2311      	movs	r3, #17
 8017b86:	18fb      	adds	r3, r7, r3
 8017b88:	781b      	ldrb	r3, [r3, #0]
 8017b8a:	2b01      	cmp	r3, #1
 8017b8c:	d105      	bne.n	8017b9a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017b8e:	4ba4      	ldr	r3, [pc, #656]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017b92:	4ba3      	ldr	r3, [pc, #652]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017b94:	49a3      	ldr	r1, [pc, #652]	@ (8017e24 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8017b96:	400a      	ands	r2, r1
 8017b98:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	2201      	movs	r2, #1
 8017ba0:	4013      	ands	r3, r2
 8017ba2:	d00b      	beq.n	8017bbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017ba4:	4a9e      	ldr	r2, [pc, #632]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017ba6:	2388      	movs	r3, #136	@ 0x88
 8017ba8:	58d3      	ldr	r3, [r2, r3]
 8017baa:	2203      	movs	r2, #3
 8017bac:	4393      	bics	r3, r2
 8017bae:	001a      	movs	r2, r3
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	499a      	ldr	r1, [pc, #616]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bb6:	4313      	orrs	r3, r2
 8017bb8:	2288      	movs	r2, #136	@ 0x88
 8017bba:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	2202      	movs	r2, #2
 8017bc2:	4013      	ands	r3, r2
 8017bc4:	d00b      	beq.n	8017bde <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8017bc6:	4a96      	ldr	r2, [pc, #600]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bc8:	2388      	movs	r3, #136	@ 0x88
 8017bca:	58d3      	ldr	r3, [r2, r3]
 8017bcc:	220c      	movs	r2, #12
 8017bce:	4393      	bics	r3, r2
 8017bd0:	001a      	movs	r2, r3
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	689b      	ldr	r3, [r3, #8]
 8017bd6:	4992      	ldr	r1, [pc, #584]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bd8:	4313      	orrs	r3, r2
 8017bda:	2288      	movs	r2, #136	@ 0x88
 8017bdc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	2210      	movs	r2, #16
 8017be4:	4013      	ands	r3, r2
 8017be6:	d00a      	beq.n	8017bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017be8:	4a8d      	ldr	r2, [pc, #564]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bea:	2388      	movs	r3, #136	@ 0x88
 8017bec:	58d3      	ldr	r3, [r2, r3]
 8017bee:	4a8e      	ldr	r2, [pc, #568]	@ (8017e28 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8017bf0:	401a      	ands	r2, r3
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	695b      	ldr	r3, [r3, #20]
 8017bf6:	498a      	ldr	r1, [pc, #552]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	2288      	movs	r2, #136	@ 0x88
 8017bfc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2208      	movs	r2, #8
 8017c04:	4013      	ands	r3, r2
 8017c06:	d00a      	beq.n	8017c1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8017c08:	4a85      	ldr	r2, [pc, #532]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c0a:	2388      	movs	r3, #136	@ 0x88
 8017c0c:	58d3      	ldr	r3, [r2, r3]
 8017c0e:	4a87      	ldr	r2, [pc, #540]	@ (8017e2c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8017c10:	401a      	ands	r2, r3
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	691b      	ldr	r3, [r3, #16]
 8017c16:	4982      	ldr	r1, [pc, #520]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c18:	4313      	orrs	r3, r2
 8017c1a:	2288      	movs	r2, #136	@ 0x88
 8017c1c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	2204      	movs	r2, #4
 8017c24:	4013      	ands	r3, r2
 8017c26:	d00b      	beq.n	8017c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8017c28:	4a7d      	ldr	r2, [pc, #500]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c2a:	2388      	movs	r3, #136	@ 0x88
 8017c2c:	58d3      	ldr	r3, [r2, r3]
 8017c2e:	22c0      	movs	r2, #192	@ 0xc0
 8017c30:	4393      	bics	r3, r2
 8017c32:	001a      	movs	r2, r3
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	68db      	ldr	r3, [r3, #12]
 8017c38:	4979      	ldr	r1, [pc, #484]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c3a:	4313      	orrs	r3, r2
 8017c3c:	2288      	movs	r2, #136	@ 0x88
 8017c3e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	2220      	movs	r2, #32
 8017c46:	4013      	ands	r3, r2
 8017c48:	d00a      	beq.n	8017c60 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017c4a:	4a75      	ldr	r2, [pc, #468]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c4c:	2388      	movs	r3, #136	@ 0x88
 8017c4e:	58d3      	ldr	r3, [r2, r3]
 8017c50:	4a77      	ldr	r2, [pc, #476]	@ (8017e30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8017c52:	401a      	ands	r2, r3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	699b      	ldr	r3, [r3, #24]
 8017c58:	4971      	ldr	r1, [pc, #452]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c5a:	4313      	orrs	r3, r2
 8017c5c:	2288      	movs	r2, #136	@ 0x88
 8017c5e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	2240      	movs	r2, #64	@ 0x40
 8017c66:	4013      	ands	r3, r2
 8017c68:	d00a      	beq.n	8017c80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017c6a:	4a6d      	ldr	r2, [pc, #436]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c6c:	2388      	movs	r3, #136	@ 0x88
 8017c6e:	58d3      	ldr	r3, [r2, r3]
 8017c70:	4a70      	ldr	r2, [pc, #448]	@ (8017e34 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8017c72:	401a      	ands	r2, r3
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	69db      	ldr	r3, [r3, #28]
 8017c78:	4969      	ldr	r1, [pc, #420]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c7a:	4313      	orrs	r3, r2
 8017c7c:	2288      	movs	r2, #136	@ 0x88
 8017c7e:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2280      	movs	r2, #128	@ 0x80
 8017c86:	4013      	ands	r3, r2
 8017c88:	d00a      	beq.n	8017ca0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017c8a:	4a65      	ldr	r2, [pc, #404]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c8c:	2388      	movs	r3, #136	@ 0x88
 8017c8e:	58d3      	ldr	r3, [r2, r3]
 8017c90:	4a69      	ldr	r2, [pc, #420]	@ (8017e38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8017c92:	401a      	ands	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	6a1b      	ldr	r3, [r3, #32]
 8017c98:	4961      	ldr	r1, [pc, #388]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	2288      	movs	r2, #136	@ 0x88
 8017c9e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	2380      	movs	r3, #128	@ 0x80
 8017ca6:	005b      	lsls	r3, r3, #1
 8017ca8:	4013      	ands	r3, r2
 8017caa:	d00a      	beq.n	8017cc2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017cac:	4a5c      	ldr	r2, [pc, #368]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017cae:	2388      	movs	r3, #136	@ 0x88
 8017cb0:	58d3      	ldr	r3, [r2, r3]
 8017cb2:	4a62      	ldr	r2, [pc, #392]	@ (8017e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8017cb4:	401a      	ands	r2, r3
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cba:	4959      	ldr	r1, [pc, #356]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017cbc:	4313      	orrs	r3, r2
 8017cbe:	2288      	movs	r2, #136	@ 0x88
 8017cc0:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	2380      	movs	r3, #128	@ 0x80
 8017cc8:	009b      	lsls	r3, r3, #2
 8017cca:	4013      	ands	r3, r2
 8017ccc:	d00a      	beq.n	8017ce4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8017cce:	4a54      	ldr	r2, [pc, #336]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017cd0:	2388      	movs	r3, #136	@ 0x88
 8017cd2:	58d3      	ldr	r3, [r2, r3]
 8017cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8017e40 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8017cd6:	401a      	ands	r2, r3
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cdc:	4950      	ldr	r1, [pc, #320]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017cde:	4313      	orrs	r3, r2
 8017ce0:	2288      	movs	r2, #136	@ 0x88
 8017ce2:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681a      	ldr	r2, [r3, #0]
 8017ce8:	2380      	movs	r3, #128	@ 0x80
 8017cea:	01db      	lsls	r3, r3, #7
 8017cec:	4013      	ands	r3, r2
 8017cee:	d017      	beq.n	8017d20 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017cf4:	2380      	movs	r3, #128	@ 0x80
 8017cf6:	055b      	lsls	r3, r3, #21
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d106      	bne.n	8017d0a <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8017cfc:	4b48      	ldr	r3, [pc, #288]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017cfe:	68da      	ldr	r2, [r3, #12]
 8017d00:	4b47      	ldr	r3, [pc, #284]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d02:	2180      	movs	r1, #128	@ 0x80
 8017d04:	0249      	lsls	r1, r1, #9
 8017d06:	430a      	orrs	r2, r1
 8017d08:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017d0a:	4a45      	ldr	r2, [pc, #276]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d0c:	2388      	movs	r3, #136	@ 0x88
 8017d0e:	58d3      	ldr	r3, [r2, r3]
 8017d10:	4a4c      	ldr	r2, [pc, #304]	@ (8017e44 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8017d12:	401a      	ands	r2, r3
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d18:	4941      	ldr	r1, [pc, #260]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d1a:	4313      	orrs	r3, r2
 8017d1c:	2288      	movs	r2, #136	@ 0x88
 8017d1e:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	2380      	movs	r3, #128	@ 0x80
 8017d26:	015b      	lsls	r3, r3, #5
 8017d28:	4013      	ands	r3, r2
 8017d2a:	d017      	beq.n	8017d5c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d30:	2380      	movs	r3, #128	@ 0x80
 8017d32:	051b      	lsls	r3, r3, #20
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d106      	bne.n	8017d46 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017d38:	4b39      	ldr	r3, [pc, #228]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d3a:	68da      	ldr	r2, [r3, #12]
 8017d3c:	4b38      	ldr	r3, [pc, #224]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d3e:	2180      	movs	r1, #128	@ 0x80
 8017d40:	0449      	lsls	r1, r1, #17
 8017d42:	430a      	orrs	r2, r1
 8017d44:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017d46:	4a36      	ldr	r2, [pc, #216]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d48:	2388      	movs	r3, #136	@ 0x88
 8017d4a:	58d3      	ldr	r3, [r2, r3]
 8017d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8017e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8017d4e:	401a      	ands	r2, r3
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d54:	4932      	ldr	r1, [pc, #200]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d56:	4313      	orrs	r3, r2
 8017d58:	2288      	movs	r2, #136	@ 0x88
 8017d5a:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681a      	ldr	r2, [r3, #0]
 8017d60:	2380      	movs	r3, #128	@ 0x80
 8017d62:	019b      	lsls	r3, r3, #6
 8017d64:	4013      	ands	r3, r2
 8017d66:	d017      	beq.n	8017d98 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017d6c:	2380      	movs	r3, #128	@ 0x80
 8017d6e:	051b      	lsls	r3, r3, #20
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d106      	bne.n	8017d82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017d74:	4b2a      	ldr	r3, [pc, #168]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d76:	68da      	ldr	r2, [r3, #12]
 8017d78:	4b29      	ldr	r3, [pc, #164]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d7a:	2180      	movs	r1, #128	@ 0x80
 8017d7c:	0449      	lsls	r1, r1, #17
 8017d7e:	430a      	orrs	r2, r1
 8017d80:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017d82:	4a27      	ldr	r2, [pc, #156]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d84:	2388      	movs	r3, #136	@ 0x88
 8017d86:	58d3      	ldr	r3, [r2, r3]
 8017d88:	4a2f      	ldr	r2, [pc, #188]	@ (8017e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8017d8a:	401a      	ands	r2, r3
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d90:	4923      	ldr	r1, [pc, #140]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017d92:	4313      	orrs	r3, r2
 8017d94:	2288      	movs	r2, #136	@ 0x88
 8017d96:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681a      	ldr	r2, [r3, #0]
 8017d9c:	2380      	movs	r3, #128	@ 0x80
 8017d9e:	00db      	lsls	r3, r3, #3
 8017da0:	4013      	ands	r3, r2
 8017da2:	d017      	beq.n	8017dd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017da8:	2380      	movs	r3, #128	@ 0x80
 8017daa:	045b      	lsls	r3, r3, #17
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d106      	bne.n	8017dbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017db0:	4b1b      	ldr	r3, [pc, #108]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017db2:	68da      	ldr	r2, [r3, #12]
 8017db4:	4b1a      	ldr	r3, [pc, #104]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017db6:	2180      	movs	r1, #128	@ 0x80
 8017db8:	0449      	lsls	r1, r1, #17
 8017dba:	430a      	orrs	r2, r1
 8017dbc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8017dbe:	4a18      	ldr	r2, [pc, #96]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017dc0:	2388      	movs	r3, #136	@ 0x88
 8017dc2:	58d3      	ldr	r3, [r2, r3]
 8017dc4:	4a21      	ldr	r2, [pc, #132]	@ (8017e4c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8017dc6:	401a      	ands	r2, r3
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dcc:	4914      	ldr	r1, [pc, #80]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	2288      	movs	r2, #136	@ 0x88
 8017dd2:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	681a      	ldr	r2, [r3, #0]
 8017dd8:	2380      	movs	r3, #128	@ 0x80
 8017dda:	011b      	lsls	r3, r3, #4
 8017ddc:	4013      	ands	r3, r2
 8017dde:	d017      	beq.n	8017e10 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017de4:	2380      	movs	r3, #128	@ 0x80
 8017de6:	049b      	lsls	r3, r3, #18
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d106      	bne.n	8017dfa <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8017dec:	4b0c      	ldr	r3, [pc, #48]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017dee:	68da      	ldr	r2, [r3, #12]
 8017df0:	4b0b      	ldr	r3, [pc, #44]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017df2:	2180      	movs	r1, #128	@ 0x80
 8017df4:	0449      	lsls	r1, r1, #17
 8017df6:	430a      	orrs	r2, r1
 8017df8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8017dfa:	4a09      	ldr	r2, [pc, #36]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017dfc:	2388      	movs	r3, #136	@ 0x88
 8017dfe:	58d3      	ldr	r3, [r2, r3]
 8017e00:	4a12      	ldr	r2, [pc, #72]	@ (8017e4c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8017e02:	401a      	ands	r2, r3
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e08:	4905      	ldr	r1, [pc, #20]	@ (8017e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8017e0a:	4313      	orrs	r3, r2
 8017e0c:	2288      	movs	r2, #136	@ 0x88
 8017e0e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8017e10:	2312      	movs	r3, #18
 8017e12:	18fb      	adds	r3, r7, r3
 8017e14:	781b      	ldrb	r3, [r3, #0]
}
 8017e16:	0018      	movs	r0, r3
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	b006      	add	sp, #24
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	46c0      	nop			@ (mov r8, r8)
 8017e20:	40021000 	.word	0x40021000
 8017e24:	efffffff 	.word	0xefffffff
 8017e28:	fffff3ff 	.word	0xfffff3ff
 8017e2c:	fffffcff 	.word	0xfffffcff
 8017e30:	ffffcfff 	.word	0xffffcfff
 8017e34:	fffcffff 	.word	0xfffcffff
 8017e38:	fff3ffff 	.word	0xfff3ffff
 8017e3c:	ffcfffff 	.word	0xffcfffff
 8017e40:	ff3fffff 	.word	0xff3fffff
 8017e44:	cfffffff 	.word	0xcfffffff
 8017e48:	f3ffffff 	.word	0xf3ffffff
 8017e4c:	feffffff 	.word	0xfeffffff

08017e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8017e50:	b590      	push	{r4, r7, lr}
 8017e52:	b089      	sub	sp, #36	@ 0x24
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8017e5c:	687a      	ldr	r2, [r7, #4]
 8017e5e:	2380      	movs	r3, #128	@ 0x80
 8017e60:	021b      	lsls	r3, r3, #8
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d154      	bne.n	8017f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8017e66:	4ad5      	ldr	r2, [pc, #852]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017e68:	2390      	movs	r3, #144	@ 0x90
 8017e6a:	58d2      	ldr	r2, [r2, r3]
 8017e6c:	23c0      	movs	r3, #192	@ 0xc0
 8017e6e:	009b      	lsls	r3, r3, #2
 8017e70:	4013      	ands	r3, r2
 8017e72:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8017e74:	697a      	ldr	r2, [r7, #20]
 8017e76:	23c0      	movs	r3, #192	@ 0xc0
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	d039      	beq.n	8017ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8017e7e:	697a      	ldr	r2, [r7, #20]
 8017e80:	23c0      	movs	r3, #192	@ 0xc0
 8017e82:	009b      	lsls	r3, r3, #2
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d901      	bls.n	8017e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8017e88:	f000 fd1a 	bl	80188c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8017e8c:	697a      	ldr	r2, [r7, #20]
 8017e8e:	2380      	movs	r3, #128	@ 0x80
 8017e90:	005b      	lsls	r3, r3, #1
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d006      	beq.n	8017ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8017e96:	697a      	ldr	r2, [r7, #20]
 8017e98:	2380      	movs	r3, #128	@ 0x80
 8017e9a:	009b      	lsls	r3, r3, #2
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d00f      	beq.n	8017ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8017ea0:	f000 fd0e 	bl	80188c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017ea4:	4ac5      	ldr	r2, [pc, #788]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ea6:	2390      	movs	r3, #144	@ 0x90
 8017ea8:	58d3      	ldr	r3, [r2, r3]
 8017eaa:	2202      	movs	r2, #2
 8017eac:	4013      	ands	r3, r2
 8017eae:	2b02      	cmp	r3, #2
 8017eb0:	d001      	beq.n	8017eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8017eb2:	f000 fd07 	bl	80188c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8017eb6:	2380      	movs	r3, #128	@ 0x80
 8017eb8:	021b      	lsls	r3, r3, #8
 8017eba:	61fb      	str	r3, [r7, #28]
        break;
 8017ebc:	f000 fd02 	bl	80188c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017ec0:	4abe      	ldr	r2, [pc, #760]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ec2:	2394      	movs	r3, #148	@ 0x94
 8017ec4:	58d3      	ldr	r3, [r2, r3]
 8017ec6:	2202      	movs	r2, #2
 8017ec8:	4013      	ands	r3, r2
 8017eca:	2b02      	cmp	r3, #2
 8017ecc:	d001      	beq.n	8017ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8017ece:	f000 fcfb 	bl	80188c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8017ed2:	4aba      	ldr	r2, [pc, #744]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ed4:	2394      	movs	r3, #148	@ 0x94
 8017ed6:	58d3      	ldr	r3, [r2, r3]
 8017ed8:	2204      	movs	r2, #4
 8017eda:	4013      	ands	r3, r2
 8017edc:	2b04      	cmp	r3, #4
 8017ede:	d103      	bne.n	8017ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8017ee0:	23fa      	movs	r3, #250	@ 0xfa
 8017ee2:	61fb      	str	r3, [r7, #28]
        break;
 8017ee4:	f000 fcf0 	bl	80188c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8017ee8:	23fa      	movs	r3, #250	@ 0xfa
 8017eea:	01db      	lsls	r3, r3, #7
 8017eec:	61fb      	str	r3, [r7, #28]
        break;
 8017eee:	f000 fceb 	bl	80188c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8017ef2:	4bb2      	ldr	r3, [pc, #712]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8017ef4:	681a      	ldr	r2, [r3, #0]
 8017ef6:	2380      	movs	r3, #128	@ 0x80
 8017ef8:	029b      	lsls	r3, r3, #10
 8017efa:	401a      	ands	r2, r3
 8017efc:	2380      	movs	r3, #128	@ 0x80
 8017efe:	029b      	lsls	r3, r3, #10
 8017f00:	429a      	cmp	r2, r3
 8017f02:	d001      	beq.n	8017f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8017f04:	f000 fce2 	bl	80188cc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8017f08:	4bad      	ldr	r3, [pc, #692]	@ (80181c0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8017f0a:	61fb      	str	r3, [r7, #28]
        break;
 8017f0c:	f000 fcde 	bl	80188cc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8017f10:	687a      	ldr	r2, [r7, #4]
 8017f12:	2380      	movs	r3, #128	@ 0x80
 8017f14:	029b      	lsls	r3, r3, #10
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d100      	bne.n	8017f1c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8017f1a:	e11a      	b.n	8018152 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8017f1c:	687a      	ldr	r2, [r7, #4]
 8017f1e:	2380      	movs	r3, #128	@ 0x80
 8017f20:	029b      	lsls	r3, r3, #10
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d901      	bls.n	8017f2a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8017f26:	f000 fcd3 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017f2a:	687a      	ldr	r2, [r7, #4]
 8017f2c:	2380      	movs	r3, #128	@ 0x80
 8017f2e:	025b      	lsls	r3, r3, #9
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d100      	bne.n	8017f36 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8017f34:	e10d      	b.n	8018152 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8017f36:	687a      	ldr	r2, [r7, #4]
 8017f38:	2380      	movs	r3, #128	@ 0x80
 8017f3a:	025b      	lsls	r3, r3, #9
 8017f3c:	429a      	cmp	r2, r3
 8017f3e:	d901      	bls.n	8017f44 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8017f40:	f000 fcc6 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017f44:	687a      	ldr	r2, [r7, #4]
 8017f46:	2380      	movs	r3, #128	@ 0x80
 8017f48:	01db      	lsls	r3, r3, #7
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d100      	bne.n	8017f50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8017f4e:	e1eb      	b.n	8018328 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8017f50:	687a      	ldr	r2, [r7, #4]
 8017f52:	2380      	movs	r3, #128	@ 0x80
 8017f54:	01db      	lsls	r3, r3, #7
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d901      	bls.n	8017f5e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8017f5a:	f000 fcb9 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017f5e:	687a      	ldr	r2, [r7, #4]
 8017f60:	2380      	movs	r3, #128	@ 0x80
 8017f62:	019b      	lsls	r3, r3, #6
 8017f64:	429a      	cmp	r2, r3
 8017f66:	d101      	bne.n	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8017f68:	f000 fc50 	bl	801880c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8017f6c:	687a      	ldr	r2, [r7, #4]
 8017f6e:	2380      	movs	r3, #128	@ 0x80
 8017f70:	019b      	lsls	r3, r3, #6
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d901      	bls.n	8017f7a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8017f76:	f000 fcab 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017f7a:	687a      	ldr	r2, [r7, #4]
 8017f7c:	2380      	movs	r3, #128	@ 0x80
 8017f7e:	015b      	lsls	r3, r3, #5
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d101      	bne.n	8017f88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8017f84:	f000 fbe2 	bl	801874c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8017f88:	687a      	ldr	r2, [r7, #4]
 8017f8a:	2380      	movs	r3, #128	@ 0x80
 8017f8c:	015b      	lsls	r3, r3, #5
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d901      	bls.n	8017f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8017f92:	f000 fc9d 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017f96:	687a      	ldr	r2, [r7, #4]
 8017f98:	2380      	movs	r3, #128	@ 0x80
 8017f9a:	011b      	lsls	r3, r3, #4
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d101      	bne.n	8017fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8017fa0:	f000 fba9 	bl	80186f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	2380      	movs	r3, #128	@ 0x80
 8017fa8:	011b      	lsls	r3, r3, #4
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d901      	bls.n	8017fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8017fae:	f000 fc8f 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017fb2:	687a      	ldr	r2, [r7, #4]
 8017fb4:	2380      	movs	r3, #128	@ 0x80
 8017fb6:	00db      	lsls	r3, r3, #3
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d101      	bne.n	8017fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8017fbc:	f000 fb70 	bl	80186a0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8017fc0:	687a      	ldr	r2, [r7, #4]
 8017fc2:	2380      	movs	r3, #128	@ 0x80
 8017fc4:	00db      	lsls	r3, r3, #3
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d901      	bls.n	8017fce <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8017fca:	f000 fc81 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	2380      	movs	r3, #128	@ 0x80
 8017fd2:	009b      	lsls	r3, r3, #2
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d100      	bne.n	8017fda <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8017fd8:	e305      	b.n	80185e6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	2380      	movs	r3, #128	@ 0x80
 8017fde:	009b      	lsls	r3, r3, #2
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d901      	bls.n	8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8017fe4:	f000 fc74 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8017fe8:	687a      	ldr	r2, [r7, #4]
 8017fea:	2380      	movs	r3, #128	@ 0x80
 8017fec:	005b      	lsls	r3, r3, #1
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	d100      	bne.n	8017ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8017ff2:	e29b      	b.n	801852c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8017ff4:	687a      	ldr	r2, [r7, #4]
 8017ff6:	2380      	movs	r3, #128	@ 0x80
 8017ff8:	005b      	lsls	r3, r3, #1
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d901      	bls.n	8018002 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8017ffe:	f000 fc67 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2b80      	cmp	r3, #128	@ 0x80
 8018006:	d100      	bne.n	801800a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8018008:	e22f      	b.n	801846a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2b80      	cmp	r3, #128	@ 0x80
 801800e:	d901      	bls.n	8018014 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8018010:	f000 fc5e 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	2b20      	cmp	r3, #32
 8018018:	d80f      	bhi.n	801803a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d101      	bne.n	8018024 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8018020:	f000 fc56 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2b20      	cmp	r3, #32
 8018028:	d901      	bls.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 801802a:	f000 fc51 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	009a      	lsls	r2, r3, #2
 8018032:	4b64      	ldr	r3, [pc, #400]	@ (80181c4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8018034:	18d3      	adds	r3, r2, r3
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	469f      	mov	pc, r3
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2b40      	cmp	r3, #64	@ 0x40
 801803e:	d100      	bne.n	8018042 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8018040:	e1df      	b.n	8018402 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8018042:	f000 fc45 	bl	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8018046:	4a5d      	ldr	r2, [pc, #372]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8018048:	2388      	movs	r3, #136	@ 0x88
 801804a:	58d3      	ldr	r3, [r2, r3]
 801804c:	2203      	movs	r2, #3
 801804e:	4013      	ands	r3, r2
 8018050:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	2b03      	cmp	r3, #3
 8018056:	d025      	beq.n	80180a4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	2b03      	cmp	r3, #3
 801805c:	d82d      	bhi.n	80180ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	2b02      	cmp	r3, #2
 8018062:	d013      	beq.n	801808c <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8018064:	697b      	ldr	r3, [r7, #20]
 8018066:	2b02      	cmp	r3, #2
 8018068:	d827      	bhi.n	80180ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d003      	beq.n	8018078 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	2b01      	cmp	r3, #1
 8018074:	d005      	beq.n	8018082 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8018076:	e020      	b.n	80180ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018078:	f7ff fc40 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 801807c:	0003      	movs	r3, r0
 801807e:	61fb      	str	r3, [r7, #28]
            break;
 8018080:	e022      	b.n	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8018082:	f7ff fb95 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 8018086:	0003      	movs	r3, r0
 8018088:	61fb      	str	r3, [r7, #28]
            break;
 801808a:	e01d      	b.n	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801808c:	4b4b      	ldr	r3, [pc, #300]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801808e:	681a      	ldr	r2, [r3, #0]
 8018090:	2380      	movs	r3, #128	@ 0x80
 8018092:	00db      	lsls	r3, r3, #3
 8018094:	401a      	ands	r2, r3
 8018096:	2380      	movs	r3, #128	@ 0x80
 8018098:	00db      	lsls	r3, r3, #3
 801809a:	429a      	cmp	r2, r3
 801809c:	d110      	bne.n	80180c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 801809e:	4b4a      	ldr	r3, [pc, #296]	@ (80181c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80180a0:	61fb      	str	r3, [r7, #28]
            break;
 80180a2:	e00d      	b.n	80180c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80180a4:	4a45      	ldr	r2, [pc, #276]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80180a6:	2390      	movs	r3, #144	@ 0x90
 80180a8:	58d3      	ldr	r3, [r2, r3]
 80180aa:	2202      	movs	r2, #2
 80180ac:	4013      	ands	r3, r2
 80180ae:	2b02      	cmp	r3, #2
 80180b0:	d109      	bne.n	80180c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 80180b2:	2380      	movs	r3, #128	@ 0x80
 80180b4:	021b      	lsls	r3, r3, #8
 80180b6:	61fb      	str	r3, [r7, #28]
            break;
 80180b8:	e005      	b.n	80180c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 80180ba:	46c0      	nop			@ (mov r8, r8)
 80180bc:	f000 fc09 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80180c0:	46c0      	nop			@ (mov r8, r8)
 80180c2:	f000 fc06 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80180c6:	46c0      	nop			@ (mov r8, r8)
        break;
 80180c8:	f000 fc03 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80180cc:	4a3b      	ldr	r2, [pc, #236]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80180ce:	2388      	movs	r3, #136	@ 0x88
 80180d0:	58d3      	ldr	r3, [r2, r3]
 80180d2:	220c      	movs	r2, #12
 80180d4:	4013      	ands	r3, r2
 80180d6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80180d8:	697b      	ldr	r3, [r7, #20]
 80180da:	2b0c      	cmp	r3, #12
 80180dc:	d025      	beq.n	801812a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80180de:	697b      	ldr	r3, [r7, #20]
 80180e0:	2b0c      	cmp	r3, #12
 80180e2:	d82d      	bhi.n	8018140 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	2b08      	cmp	r3, #8
 80180e8:	d013      	beq.n	8018112 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80180ea:	697b      	ldr	r3, [r7, #20]
 80180ec:	2b08      	cmp	r3, #8
 80180ee:	d827      	bhi.n	8018140 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d003      	beq.n	80180fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80180f6:	697b      	ldr	r3, [r7, #20]
 80180f8:	2b04      	cmp	r3, #4
 80180fa:	d005      	beq.n	8018108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80180fc:	e020      	b.n	8018140 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80180fe:	f7ff fbfd 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018102:	0003      	movs	r3, r0
 8018104:	61fb      	str	r3, [r7, #28]
            break;
 8018106:	e022      	b.n	801814e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8018108:	f7ff fb52 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 801810c:	0003      	movs	r3, r0
 801810e:	61fb      	str	r3, [r7, #28]
            break;
 8018110:	e01d      	b.n	801814e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018112:	4b2a      	ldr	r3, [pc, #168]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8018114:	681a      	ldr	r2, [r3, #0]
 8018116:	2380      	movs	r3, #128	@ 0x80
 8018118:	00db      	lsls	r3, r3, #3
 801811a:	401a      	ands	r2, r3
 801811c:	2380      	movs	r3, #128	@ 0x80
 801811e:	00db      	lsls	r3, r3, #3
 8018120:	429a      	cmp	r2, r3
 8018122:	d110      	bne.n	8018146 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8018124:	4b28      	ldr	r3, [pc, #160]	@ (80181c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8018126:	61fb      	str	r3, [r7, #28]
            break;
 8018128:	e00d      	b.n	8018146 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801812a:	4a24      	ldr	r2, [pc, #144]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 801812c:	2390      	movs	r3, #144	@ 0x90
 801812e:	58d3      	ldr	r3, [r2, r3]
 8018130:	2202      	movs	r2, #2
 8018132:	4013      	ands	r3, r2
 8018134:	2b02      	cmp	r3, #2
 8018136:	d109      	bne.n	801814c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8018138:	2380      	movs	r3, #128	@ 0x80
 801813a:	021b      	lsls	r3, r3, #8
 801813c:	61fb      	str	r3, [r7, #28]
            break;
 801813e:	e005      	b.n	801814c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8018140:	46c0      	nop			@ (mov r8, r8)
 8018142:	f000 fbc6 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018146:	46c0      	nop			@ (mov r8, r8)
 8018148:	f000 fbc3 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801814c:	46c0      	nop			@ (mov r8, r8)
        break;
 801814e:	f000 fbc0 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8018152:	f7ff fbd3 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018156:	0003      	movs	r3, r0
 8018158:	61fb      	str	r3, [r7, #28]
        break;
 801815a:	f000 fbba 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801815e:	4a17      	ldr	r2, [pc, #92]	@ (80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8018160:	2388      	movs	r3, #136	@ 0x88
 8018162:	58d2      	ldr	r2, [r2, r3]
 8018164:	23c0      	movs	r3, #192	@ 0xc0
 8018166:	011b      	lsls	r3, r3, #4
 8018168:	4013      	ands	r3, r2
 801816a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801816c:	697a      	ldr	r2, [r7, #20]
 801816e:	23c0      	movs	r3, #192	@ 0xc0
 8018170:	011b      	lsls	r3, r3, #4
 8018172:	429a      	cmp	r2, r3
 8018174:	d036      	beq.n	80181e4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8018176:	697a      	ldr	r2, [r7, #20]
 8018178:	23c0      	movs	r3, #192	@ 0xc0
 801817a:	011b      	lsls	r3, r3, #4
 801817c:	429a      	cmp	r2, r3
 801817e:	d83c      	bhi.n	80181fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8018180:	697a      	ldr	r2, [r7, #20]
 8018182:	2380      	movs	r3, #128	@ 0x80
 8018184:	011b      	lsls	r3, r3, #4
 8018186:	429a      	cmp	r2, r3
 8018188:	d020      	beq.n	80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 801818a:	697a      	ldr	r2, [r7, #20]
 801818c:	2380      	movs	r3, #128	@ 0x80
 801818e:	011b      	lsls	r3, r3, #4
 8018190:	429a      	cmp	r2, r3
 8018192:	d832      	bhi.n	80181fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d005      	beq.n	80181a6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 801819a:	697a      	ldr	r2, [r7, #20]
 801819c:	2380      	movs	r3, #128	@ 0x80
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d005      	beq.n	80181b0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 80181a4:	e029      	b.n	80181fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80181a6:	f7ff fba9 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 80181aa:	0003      	movs	r3, r0
 80181ac:	61fb      	str	r3, [r7, #28]
            break;
 80181ae:	e02b      	b.n	8018208 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80181b0:	f7ff fafe 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 80181b4:	0003      	movs	r3, r0
 80181b6:	61fb      	str	r3, [r7, #28]
            break;
 80181b8:	e026      	b.n	8018208 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80181ba:	46c0      	nop			@ (mov r8, r8)
 80181bc:	40021000 	.word	0x40021000
 80181c0:	0001e848 	.word	0x0001e848
 80181c4:	0801c70c 	.word	0x0801c70c
 80181c8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80181cc:	4bbb      	ldr	r3, [pc, #748]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80181ce:	681a      	ldr	r2, [r3, #0]
 80181d0:	2380      	movs	r3, #128	@ 0x80
 80181d2:	00db      	lsls	r3, r3, #3
 80181d4:	401a      	ands	r2, r3
 80181d6:	2380      	movs	r3, #128	@ 0x80
 80181d8:	00db      	lsls	r3, r3, #3
 80181da:	429a      	cmp	r2, r3
 80181dc:	d110      	bne.n	8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80181de:	4bb8      	ldr	r3, [pc, #736]	@ (80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80181e0:	61fb      	str	r3, [r7, #28]
            break;
 80181e2:	e00d      	b.n	8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80181e4:	4ab5      	ldr	r2, [pc, #724]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80181e6:	2390      	movs	r3, #144	@ 0x90
 80181e8:	58d3      	ldr	r3, [r2, r3]
 80181ea:	2202      	movs	r2, #2
 80181ec:	4013      	ands	r3, r2
 80181ee:	2b02      	cmp	r3, #2
 80181f0:	d109      	bne.n	8018206 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80181f2:	2380      	movs	r3, #128	@ 0x80
 80181f4:	021b      	lsls	r3, r3, #8
 80181f6:	61fb      	str	r3, [r7, #28]
            break;
 80181f8:	e005      	b.n	8018206 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80181fa:	46c0      	nop			@ (mov r8, r8)
 80181fc:	f000 fb69 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018200:	46c0      	nop			@ (mov r8, r8)
 8018202:	f000 fb66 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018206:	46c0      	nop			@ (mov r8, r8)
        break;
 8018208:	f000 fb63 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 801820c:	4aab      	ldr	r2, [pc, #684]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801820e:	2388      	movs	r3, #136	@ 0x88
 8018210:	58d2      	ldr	r2, [r2, r3]
 8018212:	23c0      	movs	r3, #192	@ 0xc0
 8018214:	009b      	lsls	r3, r3, #2
 8018216:	4013      	ands	r3, r2
 8018218:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801821a:	697a      	ldr	r2, [r7, #20]
 801821c:	23c0      	movs	r3, #192	@ 0xc0
 801821e:	009b      	lsls	r3, r3, #2
 8018220:	429a      	cmp	r2, r3
 8018222:	d02d      	beq.n	8018280 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8018224:	697a      	ldr	r2, [r7, #20]
 8018226:	23c0      	movs	r3, #192	@ 0xc0
 8018228:	009b      	lsls	r3, r3, #2
 801822a:	429a      	cmp	r2, r3
 801822c:	d833      	bhi.n	8018296 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 801822e:	697a      	ldr	r2, [r7, #20]
 8018230:	2380      	movs	r3, #128	@ 0x80
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	429a      	cmp	r2, r3
 8018236:	d017      	beq.n	8018268 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8018238:	697a      	ldr	r2, [r7, #20]
 801823a:	2380      	movs	r3, #128	@ 0x80
 801823c:	009b      	lsls	r3, r3, #2
 801823e:	429a      	cmp	r2, r3
 8018240:	d829      	bhi.n	8018296 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d005      	beq.n	8018254 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8018248:	697a      	ldr	r2, [r7, #20]
 801824a:	2380      	movs	r3, #128	@ 0x80
 801824c:	005b      	lsls	r3, r3, #1
 801824e:	429a      	cmp	r2, r3
 8018250:	d005      	beq.n	801825e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8018252:	e020      	b.n	8018296 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018254:	f7ff fb52 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018258:	0003      	movs	r3, r0
 801825a:	61fb      	str	r3, [r7, #28]
            break;
 801825c:	e022      	b.n	80182a4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 801825e:	f7ff faa7 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 8018262:	0003      	movs	r3, r0
 8018264:	61fb      	str	r3, [r7, #28]
            break;
 8018266:	e01d      	b.n	80182a4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018268:	4b94      	ldr	r3, [pc, #592]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	2380      	movs	r3, #128	@ 0x80
 801826e:	00db      	lsls	r3, r3, #3
 8018270:	401a      	ands	r2, r3
 8018272:	2380      	movs	r3, #128	@ 0x80
 8018274:	00db      	lsls	r3, r3, #3
 8018276:	429a      	cmp	r2, r3
 8018278:	d110      	bne.n	801829c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 801827a:	4b91      	ldr	r3, [pc, #580]	@ (80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801827c:	61fb      	str	r3, [r7, #28]
            break;
 801827e:	e00d      	b.n	801829c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018280:	4a8e      	ldr	r2, [pc, #568]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018282:	2390      	movs	r3, #144	@ 0x90
 8018284:	58d3      	ldr	r3, [r2, r3]
 8018286:	2202      	movs	r2, #2
 8018288:	4013      	ands	r3, r2
 801828a:	2b02      	cmp	r3, #2
 801828c:	d109      	bne.n	80182a2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 801828e:	2380      	movs	r3, #128	@ 0x80
 8018290:	021b      	lsls	r3, r3, #8
 8018292:	61fb      	str	r3, [r7, #28]
            break;
 8018294:	e005      	b.n	80182a2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8018296:	46c0      	nop			@ (mov r8, r8)
 8018298:	f000 fb1b 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801829c:	46c0      	nop			@ (mov r8, r8)
 801829e:	f000 fb18 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80182a2:	46c0      	nop			@ (mov r8, r8)
        break;
 80182a4:	f000 fb15 	bl	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80182a8:	4a84      	ldr	r2, [pc, #528]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80182aa:	2388      	movs	r3, #136	@ 0x88
 80182ac:	58d3      	ldr	r3, [r2, r3]
 80182ae:	22c0      	movs	r2, #192	@ 0xc0
 80182b0:	4013      	ands	r3, r2
 80182b2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80182b4:	697b      	ldr	r3, [r7, #20]
 80182b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80182b8:	d025      	beq.n	8018306 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80182be:	d82d      	bhi.n	801831c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80182c0:	697b      	ldr	r3, [r7, #20]
 80182c2:	2b80      	cmp	r3, #128	@ 0x80
 80182c4:	d013      	beq.n	80182ee <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	2b80      	cmp	r3, #128	@ 0x80
 80182ca:	d827      	bhi.n	801831c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d003      	beq.n	80182da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	2b40      	cmp	r3, #64	@ 0x40
 80182d6:	d005      	beq.n	80182e4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80182d8:	e020      	b.n	801831c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80182da:	f7ff fb0f 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 80182de:	0003      	movs	r3, r0
 80182e0:	61fb      	str	r3, [r7, #28]
            break;
 80182e2:	e020      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80182e4:	f7ff fa64 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 80182e8:	0003      	movs	r3, r0
 80182ea:	61fb      	str	r3, [r7, #28]
            break;
 80182ec:	e01b      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80182ee:	4b73      	ldr	r3, [pc, #460]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	2380      	movs	r3, #128	@ 0x80
 80182f4:	00db      	lsls	r3, r3, #3
 80182f6:	401a      	ands	r2, r3
 80182f8:	2380      	movs	r3, #128	@ 0x80
 80182fa:	00db      	lsls	r3, r3, #3
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d10f      	bne.n	8018320 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8018300:	4b6f      	ldr	r3, [pc, #444]	@ (80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8018302:	61fb      	str	r3, [r7, #28]
            break;
 8018304:	e00c      	b.n	8018320 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018306:	4a6d      	ldr	r2, [pc, #436]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018308:	2390      	movs	r3, #144	@ 0x90
 801830a:	58d3      	ldr	r3, [r2, r3]
 801830c:	2202      	movs	r2, #2
 801830e:	4013      	ands	r3, r2
 8018310:	2b02      	cmp	r3, #2
 8018312:	d107      	bne.n	8018324 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8018314:	2380      	movs	r3, #128	@ 0x80
 8018316:	021b      	lsls	r3, r3, #8
 8018318:	61fb      	str	r3, [r7, #28]
            break;
 801831a:	e003      	b.n	8018324 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 801831c:	46c0      	nop			@ (mov r8, r8)
 801831e:	e2d8      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018320:	46c0      	nop			@ (mov r8, r8)
 8018322:	e2d6      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018324:	46c0      	nop			@ (mov r8, r8)
        break;
 8018326:	e2d4      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8018328:	4a64      	ldr	r2, [pc, #400]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801832a:	2388      	movs	r3, #136	@ 0x88
 801832c:	58d2      	ldr	r2, [r2, r3]
 801832e:	23c0      	movs	r3, #192	@ 0xc0
 8018330:	059b      	lsls	r3, r3, #22
 8018332:	4013      	ands	r3, r2
 8018334:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018336:	697a      	ldr	r2, [r7, #20]
 8018338:	2380      	movs	r3, #128	@ 0x80
 801833a:	059b      	lsls	r3, r3, #22
 801833c:	429a      	cmp	r2, r3
 801833e:	d012      	beq.n	8018366 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8018340:	697a      	ldr	r2, [r7, #20]
 8018342:	2380      	movs	r3, #128	@ 0x80
 8018344:	059b      	lsls	r3, r3, #22
 8018346:	429a      	cmp	r2, r3
 8018348:	d825      	bhi.n	8018396 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 801834a:	697b      	ldr	r3, [r7, #20]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d005      	beq.n	801835c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8018350:	697a      	ldr	r2, [r7, #20]
 8018352:	2380      	movs	r3, #128	@ 0x80
 8018354:	055b      	lsls	r3, r3, #21
 8018356:	429a      	cmp	r2, r3
 8018358:	d014      	beq.n	8018384 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 801835a:	e01c      	b.n	8018396 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 801835c:	f7ff fa28 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 8018360:	0003      	movs	r3, r0
 8018362:	61fb      	str	r3, [r7, #28]
            break;
 8018364:	e018      	b.n	8018398 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018366:	4b55      	ldr	r3, [pc, #340]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018368:	681a      	ldr	r2, [r3, #0]
 801836a:	2380      	movs	r3, #128	@ 0x80
 801836c:	00db      	lsls	r3, r3, #3
 801836e:	401a      	ands	r2, r3
 8018370:	2380      	movs	r3, #128	@ 0x80
 8018372:	00db      	lsls	r3, r3, #3
 8018374:	429a      	cmp	r2, r3
 8018376:	d102      	bne.n	801837e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8018378:	4b51      	ldr	r3, [pc, #324]	@ (80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801837a:	61fb      	str	r3, [r7, #28]
            break;
 801837c:	e00c      	b.n	8018398 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 801837e:	2300      	movs	r3, #0
 8018380:	61fb      	str	r3, [r7, #28]
            break;
 8018382:	e009      	b.n	8018398 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8018384:	2408      	movs	r4, #8
 8018386:	193b      	adds	r3, r7, r4
 8018388:	0018      	movs	r0, r3
 801838a:	f000 faad 	bl	80188e8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 801838e:	193b      	adds	r3, r7, r4
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	61fb      	str	r3, [r7, #28]
            break;
 8018394:	e000      	b.n	8018398 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8018396:	46c0      	nop			@ (mov r8, r8)
        break;
 8018398:	e29b      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 801839a:	4a48      	ldr	r2, [pc, #288]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801839c:	2388      	movs	r3, #136	@ 0x88
 801839e:	58d2      	ldr	r2, [r2, r3]
 80183a0:	23c0      	movs	r3, #192	@ 0xc0
 80183a2:	019b      	lsls	r3, r3, #6
 80183a4:	4013      	ands	r3, r2
 80183a6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80183a8:	697a      	ldr	r2, [r7, #20]
 80183aa:	2380      	movs	r3, #128	@ 0x80
 80183ac:	019b      	lsls	r3, r3, #6
 80183ae:	429a      	cmp	r2, r3
 80183b0:	d017      	beq.n	80183e2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80183b2:	697a      	ldr	r2, [r7, #20]
 80183b4:	2380      	movs	r3, #128	@ 0x80
 80183b6:	019b      	lsls	r3, r3, #6
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d81e      	bhi.n	80183fa <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d005      	beq.n	80183ce <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80183c2:	697a      	ldr	r2, [r7, #20]
 80183c4:	2380      	movs	r3, #128	@ 0x80
 80183c6:	015b      	lsls	r3, r3, #5
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d005      	beq.n	80183d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80183cc:	e015      	b.n	80183fa <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80183ce:	f7ff fa95 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 80183d2:	0003      	movs	r3, r0
 80183d4:	61fb      	str	r3, [r7, #28]
            break;
 80183d6:	e013      	b.n	8018400 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80183d8:	f7ff f9ea 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 80183dc:	0003      	movs	r3, r0
 80183de:	61fb      	str	r3, [r7, #28]
            break;
 80183e0:	e00e      	b.n	8018400 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80183e2:	4b36      	ldr	r3, [pc, #216]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80183e4:	681a      	ldr	r2, [r3, #0]
 80183e6:	2380      	movs	r3, #128	@ 0x80
 80183e8:	00db      	lsls	r3, r3, #3
 80183ea:	401a      	ands	r2, r3
 80183ec:	2380      	movs	r3, #128	@ 0x80
 80183ee:	00db      	lsls	r3, r3, #3
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d104      	bne.n	80183fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80183f4:	4b32      	ldr	r3, [pc, #200]	@ (80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80183f6:	61fb      	str	r3, [r7, #28]
            break;
 80183f8:	e001      	b.n	80183fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80183fa:	46c0      	nop			@ (mov r8, r8)
 80183fc:	e269      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80183fe:	46c0      	nop			@ (mov r8, r8)
        break;
 8018400:	e267      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8018402:	4a2e      	ldr	r2, [pc, #184]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8018404:	2388      	movs	r3, #136	@ 0x88
 8018406:	58d2      	ldr	r2, [r2, r3]
 8018408:	23c0      	movs	r3, #192	@ 0xc0
 801840a:	029b      	lsls	r3, r3, #10
 801840c:	4013      	ands	r3, r2
 801840e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018410:	697a      	ldr	r2, [r7, #20]
 8018412:	2380      	movs	r3, #128	@ 0x80
 8018414:	029b      	lsls	r3, r3, #10
 8018416:	429a      	cmp	r2, r3
 8018418:	d017      	beq.n	801844a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 801841a:	697a      	ldr	r2, [r7, #20]
 801841c:	2380      	movs	r3, #128	@ 0x80
 801841e:	029b      	lsls	r3, r3, #10
 8018420:	429a      	cmp	r2, r3
 8018422:	d81e      	bhi.n	8018462 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d005      	beq.n	8018436 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 801842a:	697a      	ldr	r2, [r7, #20]
 801842c:	2380      	movs	r3, #128	@ 0x80
 801842e:	025b      	lsls	r3, r3, #9
 8018430:	429a      	cmp	r2, r3
 8018432:	d005      	beq.n	8018440 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8018434:	e015      	b.n	8018462 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018436:	f7ff fa61 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 801843a:	0003      	movs	r3, r0
 801843c:	61fb      	str	r3, [r7, #28]
            break;
 801843e:	e013      	b.n	8018468 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8018440:	f7ff f9b6 	bl	80177b0 <HAL_RCC_GetSysClockFreq>
 8018444:	0003      	movs	r3, r0
 8018446:	61fb      	str	r3, [r7, #28]
            break;
 8018448:	e00e      	b.n	8018468 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801844a:	4b1c      	ldr	r3, [pc, #112]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801844c:	681a      	ldr	r2, [r3, #0]
 801844e:	2380      	movs	r3, #128	@ 0x80
 8018450:	00db      	lsls	r3, r3, #3
 8018452:	401a      	ands	r2, r3
 8018454:	2380      	movs	r3, #128	@ 0x80
 8018456:	00db      	lsls	r3, r3, #3
 8018458:	429a      	cmp	r2, r3
 801845a:	d104      	bne.n	8018466 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 801845c:	4b18      	ldr	r3, [pc, #96]	@ (80184c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801845e:	61fb      	str	r3, [r7, #28]
            break;
 8018460:	e001      	b.n	8018466 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8018462:	46c0      	nop			@ (mov r8, r8)
 8018464:	e235      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018466:	46c0      	nop			@ (mov r8, r8)
        break;
 8018468:	e233      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801846a:	4a14      	ldr	r2, [pc, #80]	@ (80184bc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801846c:	2388      	movs	r3, #136	@ 0x88
 801846e:	58d2      	ldr	r2, [r2, r3]
 8018470:	23c0      	movs	r3, #192	@ 0xc0
 8018472:	031b      	lsls	r3, r3, #12
 8018474:	4013      	ands	r3, r2
 8018476:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018478:	697a      	ldr	r2, [r7, #20]
 801847a:	23c0      	movs	r3, #192	@ 0xc0
 801847c:	031b      	lsls	r3, r3, #12
 801847e:	429a      	cmp	r2, r3
 8018480:	d041      	beq.n	8018506 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8018482:	697a      	ldr	r2, [r7, #20]
 8018484:	23c0      	movs	r3, #192	@ 0xc0
 8018486:	031b      	lsls	r3, r3, #12
 8018488:	429a      	cmp	r2, r3
 801848a:	d847      	bhi.n	801851c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 801848c:	697a      	ldr	r2, [r7, #20]
 801848e:	2380      	movs	r3, #128	@ 0x80
 8018490:	031b      	lsls	r3, r3, #12
 8018492:	429a      	cmp	r2, r3
 8018494:	d02b      	beq.n	80184ee <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8018496:	697a      	ldr	r2, [r7, #20]
 8018498:	2380      	movs	r3, #128	@ 0x80
 801849a:	031b      	lsls	r3, r3, #12
 801849c:	429a      	cmp	r2, r3
 801849e:	d83d      	bhi.n	801851c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80184a0:	697b      	ldr	r3, [r7, #20]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d005      	beq.n	80184b2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80184a6:	697a      	ldr	r2, [r7, #20]
 80184a8:	2380      	movs	r3, #128	@ 0x80
 80184aa:	02db      	lsls	r3, r3, #11
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d009      	beq.n	80184c4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80184b0:	e034      	b.n	801851c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80184b2:	f7ff fa23 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 80184b6:	0003      	movs	r3, r0
 80184b8:	61fb      	str	r3, [r7, #28]
            break;
 80184ba:	e036      	b.n	801852a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80184bc:	40021000 	.word	0x40021000
 80184c0:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80184c4:	4abd      	ldr	r2, [pc, #756]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184c6:	2394      	movs	r3, #148	@ 0x94
 80184c8:	58d3      	ldr	r3, [r2, r3]
 80184ca:	2202      	movs	r2, #2
 80184cc:	4013      	ands	r3, r2
 80184ce:	2b02      	cmp	r3, #2
 80184d0:	d126      	bne.n	8018520 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80184d2:	4aba      	ldr	r2, [pc, #744]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184d4:	2394      	movs	r3, #148	@ 0x94
 80184d6:	58d3      	ldr	r3, [r2, r3]
 80184d8:	2204      	movs	r2, #4
 80184da:	4013      	ands	r3, r2
 80184dc:	2b04      	cmp	r3, #4
 80184de:	d102      	bne.n	80184e6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80184e0:	23fa      	movs	r3, #250	@ 0xfa
 80184e2:	61fb      	str	r3, [r7, #28]
            break;
 80184e4:	e01c      	b.n	8018520 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80184e6:	23fa      	movs	r3, #250	@ 0xfa
 80184e8:	01db      	lsls	r3, r3, #7
 80184ea:	61fb      	str	r3, [r7, #28]
            break;
 80184ec:	e018      	b.n	8018520 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80184ee:	4bb3      	ldr	r3, [pc, #716]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80184f0:	681a      	ldr	r2, [r3, #0]
 80184f2:	2380      	movs	r3, #128	@ 0x80
 80184f4:	00db      	lsls	r3, r3, #3
 80184f6:	401a      	ands	r2, r3
 80184f8:	2380      	movs	r3, #128	@ 0x80
 80184fa:	00db      	lsls	r3, r3, #3
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d111      	bne.n	8018524 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8018500:	4baf      	ldr	r3, [pc, #700]	@ (80187c0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8018502:	61fb      	str	r3, [r7, #28]
            break;
 8018504:	e00e      	b.n	8018524 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8018506:	4aad      	ldr	r2, [pc, #692]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018508:	2390      	movs	r3, #144	@ 0x90
 801850a:	58d3      	ldr	r3, [r2, r3]
 801850c:	2202      	movs	r2, #2
 801850e:	4013      	ands	r3, r2
 8018510:	2b02      	cmp	r3, #2
 8018512:	d109      	bne.n	8018528 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8018514:	2380      	movs	r3, #128	@ 0x80
 8018516:	021b      	lsls	r3, r3, #8
 8018518:	61fb      	str	r3, [r7, #28]
            break;
 801851a:	e005      	b.n	8018528 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 801851c:	46c0      	nop			@ (mov r8, r8)
 801851e:	e1d8      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018520:	46c0      	nop			@ (mov r8, r8)
 8018522:	e1d6      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018524:	46c0      	nop			@ (mov r8, r8)
 8018526:	e1d4      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018528:	46c0      	nop			@ (mov r8, r8)
        break;
 801852a:	e1d2      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801852c:	4aa3      	ldr	r2, [pc, #652]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801852e:	2388      	movs	r3, #136	@ 0x88
 8018530:	58d2      	ldr	r2, [r2, r3]
 8018532:	23c0      	movs	r3, #192	@ 0xc0
 8018534:	039b      	lsls	r3, r3, #14
 8018536:	4013      	ands	r3, r2
 8018538:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801853a:	697a      	ldr	r2, [r7, #20]
 801853c:	23c0      	movs	r3, #192	@ 0xc0
 801853e:	039b      	lsls	r3, r3, #14
 8018540:	429a      	cmp	r2, r3
 8018542:	d03d      	beq.n	80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8018544:	697a      	ldr	r2, [r7, #20]
 8018546:	23c0      	movs	r3, #192	@ 0xc0
 8018548:	039b      	lsls	r3, r3, #14
 801854a:	429a      	cmp	r2, r3
 801854c:	d843      	bhi.n	80185d6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 801854e:	697a      	ldr	r2, [r7, #20]
 8018550:	2380      	movs	r3, #128	@ 0x80
 8018552:	039b      	lsls	r3, r3, #14
 8018554:	429a      	cmp	r2, r3
 8018556:	d027      	beq.n	80185a8 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8018558:	697a      	ldr	r2, [r7, #20]
 801855a:	2380      	movs	r3, #128	@ 0x80
 801855c:	039b      	lsls	r3, r3, #14
 801855e:	429a      	cmp	r2, r3
 8018560:	d839      	bhi.n	80185d6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d005      	beq.n	8018574 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8018568:	697a      	ldr	r2, [r7, #20]
 801856a:	2380      	movs	r3, #128	@ 0x80
 801856c:	035b      	lsls	r3, r3, #13
 801856e:	429a      	cmp	r2, r3
 8018570:	d005      	beq.n	801857e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8018572:	e030      	b.n	80185d6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8018574:	f7ff f9c2 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018578:	0003      	movs	r3, r0
 801857a:	61fb      	str	r3, [r7, #28]
            break;
 801857c:	e032      	b.n	80185e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801857e:	4a8f      	ldr	r2, [pc, #572]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018580:	2394      	movs	r3, #148	@ 0x94
 8018582:	58d3      	ldr	r3, [r2, r3]
 8018584:	2202      	movs	r2, #2
 8018586:	4013      	ands	r3, r2
 8018588:	2b02      	cmp	r3, #2
 801858a:	d126      	bne.n	80185da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 801858c:	4a8b      	ldr	r2, [pc, #556]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801858e:	2394      	movs	r3, #148	@ 0x94
 8018590:	58d3      	ldr	r3, [r2, r3]
 8018592:	2204      	movs	r2, #4
 8018594:	4013      	ands	r3, r2
 8018596:	2b04      	cmp	r3, #4
 8018598:	d102      	bne.n	80185a0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 801859a:	23fa      	movs	r3, #250	@ 0xfa
 801859c:	61fb      	str	r3, [r7, #28]
            break;
 801859e:	e01c      	b.n	80185da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80185a0:	23fa      	movs	r3, #250	@ 0xfa
 80185a2:	01db      	lsls	r3, r3, #7
 80185a4:	61fb      	str	r3, [r7, #28]
            break;
 80185a6:	e018      	b.n	80185da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80185a8:	4b84      	ldr	r3, [pc, #528]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80185aa:	681a      	ldr	r2, [r3, #0]
 80185ac:	2380      	movs	r3, #128	@ 0x80
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	401a      	ands	r2, r3
 80185b2:	2380      	movs	r3, #128	@ 0x80
 80185b4:	00db      	lsls	r3, r3, #3
 80185b6:	429a      	cmp	r2, r3
 80185b8:	d111      	bne.n	80185de <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80185ba:	4b81      	ldr	r3, [pc, #516]	@ (80187c0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80185bc:	61fb      	str	r3, [r7, #28]
            break;
 80185be:	e00e      	b.n	80185de <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80185c0:	4a7e      	ldr	r2, [pc, #504]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80185c2:	2390      	movs	r3, #144	@ 0x90
 80185c4:	58d3      	ldr	r3, [r2, r3]
 80185c6:	2202      	movs	r2, #2
 80185c8:	4013      	ands	r3, r2
 80185ca:	2b02      	cmp	r3, #2
 80185cc:	d109      	bne.n	80185e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80185ce:	2380      	movs	r3, #128	@ 0x80
 80185d0:	021b      	lsls	r3, r3, #8
 80185d2:	61fb      	str	r3, [r7, #28]
            break;
 80185d4:	e005      	b.n	80185e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80185d6:	46c0      	nop			@ (mov r8, r8)
 80185d8:	e17b      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80185da:	46c0      	nop			@ (mov r8, r8)
 80185dc:	e179      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80185de:	46c0      	nop			@ (mov r8, r8)
 80185e0:	e177      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80185e2:	46c0      	nop			@ (mov r8, r8)
        break;
 80185e4:	e175      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80185e6:	4a75      	ldr	r2, [pc, #468]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80185e8:	2388      	movs	r3, #136	@ 0x88
 80185ea:	58d2      	ldr	r2, [r2, r3]
 80185ec:	23c0      	movs	r3, #192	@ 0xc0
 80185ee:	041b      	lsls	r3, r3, #16
 80185f0:	4013      	ands	r3, r2
 80185f2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80185f4:	697a      	ldr	r2, [r7, #20]
 80185f6:	23c0      	movs	r3, #192	@ 0xc0
 80185f8:	041b      	lsls	r3, r3, #16
 80185fa:	429a      	cmp	r2, r3
 80185fc:	d03d      	beq.n	801867a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80185fe:	697a      	ldr	r2, [r7, #20]
 8018600:	23c0      	movs	r3, #192	@ 0xc0
 8018602:	041b      	lsls	r3, r3, #16
 8018604:	429a      	cmp	r2, r3
 8018606:	d843      	bhi.n	8018690 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8018608:	697a      	ldr	r2, [r7, #20]
 801860a:	2380      	movs	r3, #128	@ 0x80
 801860c:	041b      	lsls	r3, r3, #16
 801860e:	429a      	cmp	r2, r3
 8018610:	d027      	beq.n	8018662 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8018612:	697a      	ldr	r2, [r7, #20]
 8018614:	2380      	movs	r3, #128	@ 0x80
 8018616:	041b      	lsls	r3, r3, #16
 8018618:	429a      	cmp	r2, r3
 801861a:	d839      	bhi.n	8018690 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d005      	beq.n	801862e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8018622:	697a      	ldr	r2, [r7, #20]
 8018624:	2380      	movs	r3, #128	@ 0x80
 8018626:	03db      	lsls	r3, r3, #15
 8018628:	429a      	cmp	r2, r3
 801862a:	d005      	beq.n	8018638 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 801862c:	e030      	b.n	8018690 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 801862e:	f7ff f965 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018632:	0003      	movs	r3, r0
 8018634:	61fb      	str	r3, [r7, #28]
            break;
 8018636:	e032      	b.n	801869e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8018638:	4a60      	ldr	r2, [pc, #384]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801863a:	2394      	movs	r3, #148	@ 0x94
 801863c:	58d3      	ldr	r3, [r2, r3]
 801863e:	2202      	movs	r2, #2
 8018640:	4013      	ands	r3, r2
 8018642:	2b02      	cmp	r3, #2
 8018644:	d126      	bne.n	8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8018646:	4a5d      	ldr	r2, [pc, #372]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018648:	2394      	movs	r3, #148	@ 0x94
 801864a:	58d3      	ldr	r3, [r2, r3]
 801864c:	2204      	movs	r2, #4
 801864e:	4013      	ands	r3, r2
 8018650:	2b04      	cmp	r3, #4
 8018652:	d102      	bne.n	801865a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8018654:	23fa      	movs	r3, #250	@ 0xfa
 8018656:	61fb      	str	r3, [r7, #28]
            break;
 8018658:	e01c      	b.n	8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 801865a:	23fa      	movs	r3, #250	@ 0xfa
 801865c:	01db      	lsls	r3, r3, #7
 801865e:	61fb      	str	r3, [r7, #28]
            break;
 8018660:	e018      	b.n	8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018662:	4b56      	ldr	r3, [pc, #344]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018664:	681a      	ldr	r2, [r3, #0]
 8018666:	2380      	movs	r3, #128	@ 0x80
 8018668:	00db      	lsls	r3, r3, #3
 801866a:	401a      	ands	r2, r3
 801866c:	2380      	movs	r3, #128	@ 0x80
 801866e:	00db      	lsls	r3, r3, #3
 8018670:	429a      	cmp	r2, r3
 8018672:	d111      	bne.n	8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8018674:	4b52      	ldr	r3, [pc, #328]	@ (80187c0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8018676:	61fb      	str	r3, [r7, #28]
            break;
 8018678:	e00e      	b.n	8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801867a:	4a50      	ldr	r2, [pc, #320]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801867c:	2390      	movs	r3, #144	@ 0x90
 801867e:	58d3      	ldr	r3, [r2, r3]
 8018680:	2202      	movs	r2, #2
 8018682:	4013      	ands	r3, r2
 8018684:	2b02      	cmp	r3, #2
 8018686:	d109      	bne.n	801869c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8018688:	2380      	movs	r3, #128	@ 0x80
 801868a:	021b      	lsls	r3, r3, #8
 801868c:	61fb      	str	r3, [r7, #28]
            break;
 801868e:	e005      	b.n	801869c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8018690:	46c0      	nop			@ (mov r8, r8)
 8018692:	e11e      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018694:	46c0      	nop			@ (mov r8, r8)
 8018696:	e11c      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018698:	46c0      	nop			@ (mov r8, r8)
 801869a:	e11a      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801869c:	46c0      	nop			@ (mov r8, r8)
        break;
 801869e:	e118      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80186a0:	4a46      	ldr	r2, [pc, #280]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80186a2:	2388      	movs	r3, #136	@ 0x88
 80186a4:	58d2      	ldr	r2, [r2, r3]
 80186a6:	2380      	movs	r3, #128	@ 0x80
 80186a8:	045b      	lsls	r3, r3, #17
 80186aa:	4013      	ands	r3, r2
 80186ac:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d005      	beq.n	80186c0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80186b4:	697a      	ldr	r2, [r7, #20]
 80186b6:	2380      	movs	r3, #128	@ 0x80
 80186b8:	045b      	lsls	r3, r3, #17
 80186ba:	429a      	cmp	r2, r3
 80186bc:	d011      	beq.n	80186e2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80186be:	e019      	b.n	80186f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80186c0:	4b3e      	ldr	r3, [pc, #248]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80186c2:	689a      	ldr	r2, [r3, #8]
 80186c4:	23e0      	movs	r3, #224	@ 0xe0
 80186c6:	01db      	lsls	r3, r3, #7
 80186c8:	4013      	ands	r3, r2
 80186ca:	d104      	bne.n	80186d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80186cc:	f7ff f916 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 80186d0:	0003      	movs	r3, r0
 80186d2:	61fb      	str	r3, [r7, #28]
            break;
 80186d4:	e00e      	b.n	80186f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80186d6:	f7ff f911 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 80186da:	0003      	movs	r3, r0
 80186dc:	005b      	lsls	r3, r3, #1
 80186de:	61fb      	str	r3, [r7, #28]
            break;
 80186e0:	e008      	b.n	80186f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80186e2:	2408      	movs	r4, #8
 80186e4:	193b      	adds	r3, r7, r4
 80186e6:	0018      	movs	r0, r3
 80186e8:	f000 f8fe 	bl	80188e8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80186ec:	193b      	adds	r3, r7, r4
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	61fb      	str	r3, [r7, #28]
            break;
 80186f2:	46c0      	nop			@ (mov r8, r8)
        break;
 80186f4:	e0ed      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80186f6:	4a31      	ldr	r2, [pc, #196]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80186f8:	2388      	movs	r3, #136	@ 0x88
 80186fa:	58d2      	ldr	r2, [r2, r3]
 80186fc:	2380      	movs	r3, #128	@ 0x80
 80186fe:	049b      	lsls	r3, r3, #18
 8018700:	4013      	ands	r3, r2
 8018702:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d005      	beq.n	8018716 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 801870a:	697a      	ldr	r2, [r7, #20]
 801870c:	2380      	movs	r3, #128	@ 0x80
 801870e:	049b      	lsls	r3, r3, #18
 8018710:	429a      	cmp	r2, r3
 8018712:	d011      	beq.n	8018738 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8018714:	e019      	b.n	801874a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8018716:	4b29      	ldr	r3, [pc, #164]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8018718:	689a      	ldr	r2, [r3, #8]
 801871a:	23e0      	movs	r3, #224	@ 0xe0
 801871c:	01db      	lsls	r3, r3, #7
 801871e:	4013      	ands	r3, r2
 8018720:	d104      	bne.n	801872c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8018722:	f7ff f8eb 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018726:	0003      	movs	r3, r0
 8018728:	61fb      	str	r3, [r7, #28]
            break;
 801872a:	e00e      	b.n	801874a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 801872c:	f7ff f8e6 	bl	80178fc <HAL_RCC_GetPCLK1Freq>
 8018730:	0003      	movs	r3, r0
 8018732:	005b      	lsls	r3, r3, #1
 8018734:	61fb      	str	r3, [r7, #28]
            break;
 8018736:	e008      	b.n	801874a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8018738:	2408      	movs	r4, #8
 801873a:	193b      	adds	r3, r7, r4
 801873c:	0018      	movs	r0, r3
 801873e:	f000 f8d3 	bl	80188e8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8018742:	193b      	adds	r3, r7, r4
 8018744:	685b      	ldr	r3, [r3, #4]
 8018746:	61fb      	str	r3, [r7, #28]
            break;
 8018748:	46c0      	nop			@ (mov r8, r8)
        break;
 801874a:	e0c2      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 801874c:	4a1b      	ldr	r2, [pc, #108]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801874e:	2388      	movs	r3, #136	@ 0x88
 8018750:	58d2      	ldr	r2, [r2, r3]
 8018752:	23c0      	movs	r3, #192	@ 0xc0
 8018754:	051b      	lsls	r3, r3, #20
 8018756:	4013      	ands	r3, r2
 8018758:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801875a:	697a      	ldr	r2, [r7, #20]
 801875c:	23c0      	movs	r3, #192	@ 0xc0
 801875e:	051b      	lsls	r3, r3, #20
 8018760:	429a      	cmp	r2, r3
 8018762:	d017      	beq.n	8018794 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8018764:	697a      	ldr	r2, [r7, #20]
 8018766:	23c0      	movs	r3, #192	@ 0xc0
 8018768:	051b      	lsls	r3, r3, #20
 801876a:	429a      	cmp	r2, r3
 801876c:	d84a      	bhi.n	8018804 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801876e:	697a      	ldr	r2, [r7, #20]
 8018770:	2380      	movs	r3, #128	@ 0x80
 8018772:	051b      	lsls	r3, r3, #20
 8018774:	429a      	cmp	r2, r3
 8018776:	d039      	beq.n	80187ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8018778:	697a      	ldr	r2, [r7, #20]
 801877a:	2380      	movs	r3, #128	@ 0x80
 801877c:	051b      	lsls	r3, r3, #20
 801877e:	429a      	cmp	r2, r3
 8018780:	d840      	bhi.n	8018804 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8018782:	697b      	ldr	r3, [r7, #20]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d03a      	beq.n	80187fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8018788:	697a      	ldr	r2, [r7, #20]
 801878a:	2380      	movs	r3, #128	@ 0x80
 801878c:	04db      	lsls	r3, r3, #19
 801878e:	429a      	cmp	r2, r3
 8018790:	d003      	beq.n	801879a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8018792:	e037      	b.n	8018804 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8018794:	4b0b      	ldr	r3, [pc, #44]	@ (80187c4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8018796:	61fb      	str	r3, [r7, #28]
            break;
 8018798:	e037      	b.n	801880a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801879a:	4b08      	ldr	r3, [pc, #32]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	2202      	movs	r2, #2
 80187a0:	4013      	ands	r3, r2
 80187a2:	2b02      	cmp	r3, #2
 80187a4:	d130      	bne.n	8018808 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80187a6:	4b05      	ldr	r3, [pc, #20]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	2208      	movs	r2, #8
 80187ac:	4013      	ands	r3, r2
 80187ae:	d00b      	beq.n	80187c8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80187b0:	4b02      	ldr	r3, [pc, #8]	@ (80187bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	091b      	lsrs	r3, r3, #4
 80187b6:	220f      	movs	r2, #15
 80187b8:	4013      	ands	r3, r2
 80187ba:	e00b      	b.n	80187d4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80187bc:	40021000 	.word	0x40021000
 80187c0:	00f42400 	.word	0x00f42400
 80187c4:	02dc6c00 	.word	0x02dc6c00
 80187c8:	4a44      	ldr	r2, [pc, #272]	@ (80188dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80187ca:	2394      	movs	r3, #148	@ 0x94
 80187cc:	58d3      	ldr	r3, [r2, r3]
 80187ce:	0a1b      	lsrs	r3, r3, #8
 80187d0:	220f      	movs	r2, #15
 80187d2:	4013      	ands	r3, r2
 80187d4:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80187d6:	69bb      	ldr	r3, [r7, #24]
 80187d8:	2b0b      	cmp	r3, #11
 80187da:	d901      	bls.n	80187e0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80187dc:	230b      	movs	r3, #11
 80187de:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80187e0:	4b3f      	ldr	r3, [pc, #252]	@ (80188e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80187e2:	69ba      	ldr	r2, [r7, #24]
 80187e4:	0092      	lsls	r2, r2, #2
 80187e6:	58d3      	ldr	r3, [r2, r3]
 80187e8:	61fb      	str	r3, [r7, #28]
            break;
 80187ea:	e00d      	b.n	8018808 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80187ec:	2408      	movs	r4, #8
 80187ee:	193b      	adds	r3, r7, r4
 80187f0:	0018      	movs	r0, r3
 80187f2:	f000 f879 	bl	80188e8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80187f6:	193b      	adds	r3, r7, r4
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	61fb      	str	r3, [r7, #28]
            break;
 80187fc:	e005      	b.n	801880a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80187fe:	2300      	movs	r3, #0
 8018800:	61fb      	str	r3, [r7, #28]
            break;
 8018802:	e002      	b.n	801880a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8018804:	46c0      	nop			@ (mov r8, r8)
 8018806:	e064      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8018808:	46c0      	nop			@ (mov r8, r8)
        break;
 801880a:	e062      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801880c:	4a33      	ldr	r2, [pc, #204]	@ (80188dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801880e:	2388      	movs	r3, #136	@ 0x88
 8018810:	58d2      	ldr	r2, [r2, r3]
 8018812:	23c0      	movs	r3, #192	@ 0xc0
 8018814:	051b      	lsls	r3, r3, #20
 8018816:	4013      	ands	r3, r2
 8018818:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801881a:	697a      	ldr	r2, [r7, #20]
 801881c:	23c0      	movs	r3, #192	@ 0xc0
 801881e:	051b      	lsls	r3, r3, #20
 8018820:	429a      	cmp	r2, r3
 8018822:	d017      	beq.n	8018854 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8018824:	697a      	ldr	r2, [r7, #20]
 8018826:	23c0      	movs	r3, #192	@ 0xc0
 8018828:	051b      	lsls	r3, r3, #20
 801882a:	429a      	cmp	r2, r3
 801882c:	d844      	bhi.n	80188b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 801882e:	697a      	ldr	r2, [r7, #20]
 8018830:	2380      	movs	r3, #128	@ 0x80
 8018832:	051b      	lsls	r3, r3, #20
 8018834:	429a      	cmp	r2, r3
 8018836:	d033      	beq.n	80188a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8018838:	697a      	ldr	r2, [r7, #20]
 801883a:	2380      	movs	r3, #128	@ 0x80
 801883c:	051b      	lsls	r3, r3, #20
 801883e:	429a      	cmp	r2, r3
 8018840:	d83a      	bhi.n	80188b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d034      	beq.n	80188b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8018848:	697a      	ldr	r2, [r7, #20]
 801884a:	2380      	movs	r3, #128	@ 0x80
 801884c:	04db      	lsls	r3, r3, #19
 801884e:	429a      	cmp	r2, r3
 8018850:	d003      	beq.n	801885a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8018852:	e031      	b.n	80188b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8018854:	4b23      	ldr	r3, [pc, #140]	@ (80188e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8018856:	61fb      	str	r3, [r7, #28]
            break;
 8018858:	e031      	b.n	80188be <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801885a:	4b20      	ldr	r3, [pc, #128]	@ (80188dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	2202      	movs	r2, #2
 8018860:	4013      	ands	r3, r2
 8018862:	2b02      	cmp	r3, #2
 8018864:	d12a      	bne.n	80188bc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8018866:	4b1d      	ldr	r3, [pc, #116]	@ (80188dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	2208      	movs	r2, #8
 801886c:	4013      	ands	r3, r2
 801886e:	d005      	beq.n	801887c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8018870:	4b1a      	ldr	r3, [pc, #104]	@ (80188dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	091b      	lsrs	r3, r3, #4
 8018876:	220f      	movs	r2, #15
 8018878:	4013      	ands	r3, r2
 801887a:	e005      	b.n	8018888 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 801887c:	4a17      	ldr	r2, [pc, #92]	@ (80188dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801887e:	2394      	movs	r3, #148	@ 0x94
 8018880:	58d3      	ldr	r3, [r2, r3]
 8018882:	0a1b      	lsrs	r3, r3, #8
 8018884:	220f      	movs	r2, #15
 8018886:	4013      	ands	r3, r2
 8018888:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 801888a:	69bb      	ldr	r3, [r7, #24]
 801888c:	2b0b      	cmp	r3, #11
 801888e:	d901      	bls.n	8018894 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8018890:	230b      	movs	r3, #11
 8018892:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8018894:	4b12      	ldr	r3, [pc, #72]	@ (80188e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8018896:	69ba      	ldr	r2, [r7, #24]
 8018898:	0092      	lsls	r2, r2, #2
 801889a:	58d3      	ldr	r3, [r2, r3]
 801889c:	61fb      	str	r3, [r7, #28]
            break;
 801889e:	e00d      	b.n	80188bc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80188a0:	2408      	movs	r4, #8
 80188a2:	193b      	adds	r3, r7, r4
 80188a4:	0018      	movs	r0, r3
 80188a6:	f000 f81f 	bl	80188e8 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80188aa:	193b      	adds	r3, r7, r4
 80188ac:	685b      	ldr	r3, [r3, #4]
 80188ae:	61fb      	str	r3, [r7, #28]
            break;
 80188b0:	e005      	b.n	80188be <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80188b2:	2300      	movs	r3, #0
 80188b4:	61fb      	str	r3, [r7, #28]
            break;
 80188b6:	e002      	b.n	80188be <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80188b8:	46c0      	nop			@ (mov r8, r8)
 80188ba:	e00a      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80188bc:	46c0      	nop			@ (mov r8, r8)
        break;
 80188be:	e008      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80188c0:	46c0      	nop			@ (mov r8, r8)
 80188c2:	e006      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80188c4:	46c0      	nop			@ (mov r8, r8)
 80188c6:	e004      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80188c8:	46c0      	nop			@ (mov r8, r8)
 80188ca:	e002      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80188cc:	46c0      	nop			@ (mov r8, r8)
 80188ce:	e000      	b.n	80188d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80188d0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80188d2:	69fb      	ldr	r3, [r7, #28]
}
 80188d4:	0018      	movs	r0, r3
 80188d6:	46bd      	mov	sp, r7
 80188d8:	b009      	add	sp, #36	@ 0x24
 80188da:	bd90      	pop	{r4, r7, pc}
 80188dc:	40021000 	.word	0x40021000
 80188e0:	0801c6bc 	.word	0x0801c6bc
 80188e4:	02dc6c00 	.word	0x02dc6c00

080188e8 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b088      	sub	sp, #32
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80188f0:	4b58      	ldr	r3, [pc, #352]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80188f2:	68db      	ldr	r3, [r3, #12]
 80188f4:	0a1b      	lsrs	r3, r3, #8
 80188f6:	227f      	movs	r2, #127	@ 0x7f
 80188f8:	4013      	ands	r3, r2
 80188fa:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80188fc:	4b55      	ldr	r3, [pc, #340]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80188fe:	68db      	ldr	r3, [r3, #12]
 8018900:	2203      	movs	r2, #3
 8018902:	4013      	ands	r3, r2
 8018904:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8018906:	4b53      	ldr	r3, [pc, #332]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018908:	68db      	ldr	r3, [r3, #12]
 801890a:	091b      	lsrs	r3, r3, #4
 801890c:	2207      	movs	r2, #7
 801890e:	4013      	ands	r3, r2
 8018910:	3301      	adds	r3, #1
 8018912:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8018914:	4b4f      	ldr	r3, [pc, #316]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2208      	movs	r2, #8
 801891a:	4013      	ands	r3, r2
 801891c:	d005      	beq.n	801892a <HAL_RCCEx_GetPLLClockFreq+0x42>
 801891e:	4b4d      	ldr	r3, [pc, #308]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	091b      	lsrs	r3, r3, #4
 8018924:	220f      	movs	r2, #15
 8018926:	4013      	ands	r3, r2
 8018928:	e005      	b.n	8018936 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 801892a:	4a4a      	ldr	r2, [pc, #296]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801892c:	2394      	movs	r3, #148	@ 0x94
 801892e:	58d3      	ldr	r3, [r2, r3]
 8018930:	0a1b      	lsrs	r3, r3, #8
 8018932:	220f      	movs	r2, #15
 8018934:	4013      	ands	r3, r2
 8018936:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8018938:	69bb      	ldr	r3, [r7, #24]
 801893a:	2b0b      	cmp	r3, #11
 801893c:	d901      	bls.n	8018942 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 801893e:	230b      	movs	r3, #11
 8018940:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8018942:	693b      	ldr	r3, [r7, #16]
 8018944:	2b03      	cmp	r3, #3
 8018946:	d020      	beq.n	801898a <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	2b03      	cmp	r3, #3
 801894c:	d827      	bhi.n	801899e <HAL_RCCEx_GetPLLClockFreq+0xb6>
 801894e:	693b      	ldr	r3, [r7, #16]
 8018950:	2b01      	cmp	r3, #1
 8018952:	d00c      	beq.n	801896e <HAL_RCCEx_GetPLLClockFreq+0x86>
 8018954:	693b      	ldr	r3, [r7, #16]
 8018956:	2b02      	cmp	r3, #2
 8018958:	d121      	bne.n	801899e <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 801895a:	68f9      	ldr	r1, [r7, #12]
 801895c:	483e      	ldr	r0, [pc, #248]	@ (8018a58 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 801895e:	f7e7 fbdb 	bl	8000118 <__udivsi3>
 8018962:	0003      	movs	r3, r0
 8018964:	001a      	movs	r2, r3
 8018966:	697b      	ldr	r3, [r7, #20]
 8018968:	4353      	muls	r3, r2
 801896a:	61fb      	str	r3, [r7, #28]
      break;
 801896c:	e025      	b.n	80189ba <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801896e:	4b3b      	ldr	r3, [pc, #236]	@ (8018a5c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8018970:	69ba      	ldr	r2, [r7, #24]
 8018972:	0092      	lsls	r2, r2, #2
 8018974:	58d3      	ldr	r3, [r2, r3]
 8018976:	68f9      	ldr	r1, [r7, #12]
 8018978:	0018      	movs	r0, r3
 801897a:	f7e7 fbcd 	bl	8000118 <__udivsi3>
 801897e:	0003      	movs	r3, r0
 8018980:	001a      	movs	r2, r3
 8018982:	697b      	ldr	r3, [r7, #20]
 8018984:	4353      	muls	r3, r2
 8018986:	61fb      	str	r3, [r7, #28]
      break;
 8018988:	e017      	b.n	80189ba <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 801898a:	68f9      	ldr	r1, [r7, #12]
 801898c:	4834      	ldr	r0, [pc, #208]	@ (8018a60 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 801898e:	f7e7 fbc3 	bl	8000118 <__udivsi3>
 8018992:	0003      	movs	r3, r0
 8018994:	001a      	movs	r2, r3
 8018996:	697b      	ldr	r3, [r7, #20]
 8018998:	4353      	muls	r3, r2
 801899a:	61fb      	str	r3, [r7, #28]
      break;
 801899c:	e00d      	b.n	80189ba <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801899e:	4b2f      	ldr	r3, [pc, #188]	@ (8018a5c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80189a0:	69ba      	ldr	r2, [r7, #24]
 80189a2:	0092      	lsls	r2, r2, #2
 80189a4:	58d3      	ldr	r3, [r2, r3]
 80189a6:	68f9      	ldr	r1, [r7, #12]
 80189a8:	0018      	movs	r0, r3
 80189aa:	f7e7 fbb5 	bl	8000118 <__udivsi3>
 80189ae:	0003      	movs	r3, r0
 80189b0:	001a      	movs	r2, r3
 80189b2:	697b      	ldr	r3, [r7, #20]
 80189b4:	4353      	muls	r3, r2
 80189b6:	61fb      	str	r3, [r7, #28]
      break;
 80189b8:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80189ba:	4b26      	ldr	r3, [pc, #152]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80189bc:	68da      	ldr	r2, [r3, #12]
 80189be:	2380      	movs	r3, #128	@ 0x80
 80189c0:	025b      	lsls	r3, r3, #9
 80189c2:	4013      	ands	r3, r2
 80189c4:	d00e      	beq.n	80189e4 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80189c6:	4b23      	ldr	r3, [pc, #140]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80189c8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80189ca:	0c5b      	lsrs	r3, r3, #17
 80189cc:	221f      	movs	r2, #31
 80189ce:	4013      	ands	r3, r2
 80189d0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80189d2:	0019      	movs	r1, r3
 80189d4:	69f8      	ldr	r0, [r7, #28]
 80189d6:	f7e7 fb9f 	bl	8000118 <__udivsi3>
 80189da:	0003      	movs	r3, r0
 80189dc:	001a      	movs	r2, r3
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	601a      	str	r2, [r3, #0]
 80189e2:	e002      	b.n	80189ea <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2200      	movs	r2, #0
 80189e8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80189ea:	4b1a      	ldr	r3, [pc, #104]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80189ec:	68da      	ldr	r2, [r3, #12]
 80189ee:	2380      	movs	r3, #128	@ 0x80
 80189f0:	045b      	lsls	r3, r3, #17
 80189f2:	4013      	ands	r3, r2
 80189f4:	d00e      	beq.n	8018a14 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80189f6:	4b17      	ldr	r3, [pc, #92]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80189f8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80189fa:	0e5b      	lsrs	r3, r3, #25
 80189fc:	2207      	movs	r2, #7
 80189fe:	4013      	ands	r3, r2
 8018a00:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8018a02:	0019      	movs	r1, r3
 8018a04:	69f8      	ldr	r0, [r7, #28]
 8018a06:	f7e7 fb87 	bl	8000118 <__udivsi3>
 8018a0a:	0003      	movs	r3, r0
 8018a0c:	001a      	movs	r2, r3
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	605a      	str	r2, [r3, #4]
 8018a12:	e002      	b.n	8018a1a <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	2200      	movs	r2, #0
 8018a18:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8018a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018a1c:	68da      	ldr	r2, [r3, #12]
 8018a1e:	2380      	movs	r3, #128	@ 0x80
 8018a20:	055b      	lsls	r3, r3, #21
 8018a22:	4013      	ands	r3, r2
 8018a24:	d00e      	beq.n	8018a44 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8018a26:	4b0b      	ldr	r3, [pc, #44]	@ (8018a54 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8018a28:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8018a2a:	0f5b      	lsrs	r3, r3, #29
 8018a2c:	2207      	movs	r2, #7
 8018a2e:	4013      	ands	r3, r2
 8018a30:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8018a32:	0019      	movs	r1, r3
 8018a34:	69f8      	ldr	r0, [r7, #28]
 8018a36:	f7e7 fb6f 	bl	8000118 <__udivsi3>
 8018a3a:	0003      	movs	r3, r0
 8018a3c:	001a      	movs	r2, r3
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8018a42:	e002      	b.n	8018a4a <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2200      	movs	r2, #0
 8018a48:	609a      	str	r2, [r3, #8]
}
 8018a4a:	46c0      	nop			@ (mov r8, r8)
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	b008      	add	sp, #32
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	46c0      	nop			@ (mov r8, r8)
 8018a54:	40021000 	.word	0x40021000
 8018a58:	00f42400 	.word	0x00f42400
 8018a5c:	0801c6bc 	.word	0x0801c6bc
 8018a60:	003d0900 	.word	0x003d0900

08018a64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b084      	sub	sp, #16
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018a6c:	210f      	movs	r1, #15
 8018a6e:	187b      	adds	r3, r7, r1
 8018a70:	2201      	movs	r2, #1
 8018a72:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d100      	bne.n	8018a7c <HAL_RTC_Init+0x18>
 8018a7a:	e08b      	b.n	8018b94 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8018a7c:	187b      	adds	r3, r7, r1
 8018a7e:	2200      	movs	r2, #0
 8018a80:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	222d      	movs	r2, #45	@ 0x2d
 8018a86:	5c9b      	ldrb	r3, [r3, r2]
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d107      	bne.n	8018a9e <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	222c      	movs	r2, #44	@ 0x2c
 8018a92:	2100      	movs	r1, #0
 8018a94:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	0018      	movs	r0, r3
 8018a9a:	f7f3 fbdf 	bl	800c25c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	222d      	movs	r2, #45	@ 0x2d
 8018aa2:	2102      	movs	r1, #2
 8018aa4:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018aa8:	22ca      	movs	r2, #202	@ 0xca
 8018aaa:	625a      	str	r2, [r3, #36]	@ 0x24
 8018aac:	4b3d      	ldr	r3, [pc, #244]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018aae:	2253      	movs	r2, #83	@ 0x53
 8018ab0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	0018      	movs	r0, r3
 8018ab6:	f000 fab9 	bl	801902c <RTC_EnterInitMode>
 8018aba:	1e03      	subs	r3, r0, #0
 8018abc:	d00b      	beq.n	8018ad6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018abe:	4b39      	ldr	r3, [pc, #228]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018ac0:	22ff      	movs	r2, #255	@ 0xff
 8018ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	222d      	movs	r2, #45	@ 0x2d
 8018ac8:	2104      	movs	r1, #4
 8018aca:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8018acc:	230f      	movs	r3, #15
 8018ace:	18fb      	adds	r3, r7, r3
 8018ad0:	2201      	movs	r2, #1
 8018ad2:	701a      	strb	r2, [r3, #0]
 8018ad4:	e05e      	b.n	8018b94 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8018ad6:	4b33      	ldr	r3, [pc, #204]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018ad8:	699a      	ldr	r2, [r3, #24]
 8018ada:	4b32      	ldr	r3, [pc, #200]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018adc:	4932      	ldr	r1, [pc, #200]	@ (8018ba8 <HAL_RTC_Init+0x144>)
 8018ade:	400a      	ands	r2, r1
 8018ae0:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8018ae2:	4b30      	ldr	r3, [pc, #192]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018ae4:	6999      	ldr	r1, [r3, #24]
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	685a      	ldr	r2, [r3, #4]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	691b      	ldr	r3, [r3, #16]
 8018aee:	431a      	orrs	r2, r3
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	699b      	ldr	r3, [r3, #24]
 8018af4:	431a      	orrs	r2, r3
 8018af6:	4b2b      	ldr	r3, [pc, #172]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018af8:	430a      	orrs	r2, r1
 8018afa:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	68d9      	ldr	r1, [r3, #12]
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	689b      	ldr	r3, [r3, #8]
 8018b04:	041a      	lsls	r2, r3, #16
 8018b06:	4b27      	ldr	r3, [pc, #156]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b08:	430a      	orrs	r2, r1
 8018b0a:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8018b0c:	4b25      	ldr	r3, [pc, #148]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b0e:	68db      	ldr	r3, [r3, #12]
 8018b10:	4a26      	ldr	r2, [pc, #152]	@ (8018bac <HAL_RTC_Init+0x148>)
 8018b12:	4013      	ands	r3, r2
 8018b14:	0019      	movs	r1, r3
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b1e:	431a      	orrs	r2, r3
 8018b20:	4b20      	ldr	r3, [pc, #128]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b22:	430a      	orrs	r2, r1
 8018b24:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018b26:	4b1f      	ldr	r3, [pc, #124]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b28:	68da      	ldr	r2, [r3, #12]
 8018b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b2c:	2180      	movs	r1, #128	@ 0x80
 8018b2e:	438a      	bics	r2, r1
 8018b30:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018b32:	4b1c      	ldr	r3, [pc, #112]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b34:	699b      	ldr	r3, [r3, #24]
 8018b36:	2220      	movs	r2, #32
 8018b38:	4013      	ands	r3, r2
 8018b3a:	d110      	bne.n	8018b5e <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	0018      	movs	r0, r3
 8018b40:	f000 fa4e 	bl	8018fe0 <HAL_RTC_WaitForSynchro>
 8018b44:	1e03      	subs	r3, r0, #0
 8018b46:	d00a      	beq.n	8018b5e <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b48:	4b16      	ldr	r3, [pc, #88]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b4a:	22ff      	movs	r2, #255	@ 0xff
 8018b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	222d      	movs	r2, #45	@ 0x2d
 8018b52:	2104      	movs	r1, #4
 8018b54:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8018b56:	230f      	movs	r3, #15
 8018b58:	18fb      	adds	r3, r7, r3
 8018b5a:	2201      	movs	r2, #1
 8018b5c:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8018b5e:	230f      	movs	r3, #15
 8018b60:	18fb      	adds	r3, r7, r3
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d115      	bne.n	8018b94 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8018b68:	4b0e      	ldr	r3, [pc, #56]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b6a:	699b      	ldr	r3, [r3, #24]
 8018b6c:	00db      	lsls	r3, r3, #3
 8018b6e:	08d9      	lsrs	r1, r3, #3
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6a1a      	ldr	r2, [r3, #32]
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	69db      	ldr	r3, [r3, #28]
 8018b78:	431a      	orrs	r2, r3
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	695b      	ldr	r3, [r3, #20]
 8018b7e:	431a      	orrs	r2, r3
 8018b80:	4b08      	ldr	r3, [pc, #32]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b82:	430a      	orrs	r2, r1
 8018b84:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b86:	4b07      	ldr	r3, [pc, #28]	@ (8018ba4 <HAL_RTC_Init+0x140>)
 8018b88:	22ff      	movs	r2, #255	@ 0xff
 8018b8a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	222d      	movs	r2, #45	@ 0x2d
 8018b90:	2101      	movs	r1, #1
 8018b92:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8018b94:	230f      	movs	r3, #15
 8018b96:	18fb      	adds	r3, r7, r3
 8018b98:	781b      	ldrb	r3, [r3, #0]
}
 8018b9a:	0018      	movs	r0, r3
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	b004      	add	sp, #16
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	46c0      	nop			@ (mov r8, r8)
 8018ba4:	40002800 	.word	0x40002800
 8018ba8:	fb8fffbf 	.word	0xfb8fffbf
 8018bac:	ffffe0ff 	.word	0xffffe0ff

08018bb0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018bb0:	b590      	push	{r4, r7, lr}
 8018bb2:	b087      	sub	sp, #28
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	60f8      	str	r0, [r7, #12]
 8018bb8:	60b9      	str	r1, [r7, #8]
 8018bba:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	222c      	movs	r2, #44	@ 0x2c
 8018bc0:	5c9b      	ldrb	r3, [r3, r2]
 8018bc2:	2b01      	cmp	r3, #1
 8018bc4:	d101      	bne.n	8018bca <HAL_RTC_SetTime+0x1a>
 8018bc6:	2302      	movs	r3, #2
 8018bc8:	e0a7      	b.n	8018d1a <HAL_RTC_SetTime+0x16a>
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	222c      	movs	r2, #44	@ 0x2c
 8018bce:	2101      	movs	r1, #1
 8018bd0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	222d      	movs	r2, #45	@ 0x2d
 8018bd6:	2102      	movs	r1, #2
 8018bd8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018bda:	4b52      	ldr	r3, [pc, #328]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018bdc:	22ca      	movs	r2, #202	@ 0xca
 8018bde:	625a      	str	r2, [r3, #36]	@ 0x24
 8018be0:	4b50      	ldr	r3, [pc, #320]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018be2:	2253      	movs	r2, #83	@ 0x53
 8018be4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	0018      	movs	r0, r3
 8018bea:	f000 fa1f 	bl	801902c <RTC_EnterInitMode>
 8018bee:	1e03      	subs	r3, r0, #0
 8018bf0:	d00c      	beq.n	8018c0c <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018bf4:	22ff      	movs	r2, #255	@ 0xff
 8018bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	222d      	movs	r2, #45	@ 0x2d
 8018bfc:	2104      	movs	r1, #4
 8018bfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	222c      	movs	r2, #44	@ 0x2c
 8018c04:	2100      	movs	r1, #0
 8018c06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8018c08:	2301      	movs	r3, #1
 8018c0a:	e086      	b.n	8018d1a <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018c0c:	4b45      	ldr	r3, [pc, #276]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018c0e:	68da      	ldr	r2, [r3, #12]
 8018c10:	23c0      	movs	r3, #192	@ 0xc0
 8018c12:	009b      	lsls	r3, r3, #2
 8018c14:	401a      	ands	r2, r3
 8018c16:	2380      	movs	r3, #128	@ 0x80
 8018c18:	005b      	lsls	r3, r3, #1
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d053      	beq.n	8018cc6 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d124      	bne.n	8018c6e <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018c24:	4b3f      	ldr	r3, [pc, #252]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018c26:	699b      	ldr	r3, [r3, #24]
 8018c28:	2240      	movs	r2, #64	@ 0x40
 8018c2a:	4013      	ands	r3, r2
 8018c2c:	d102      	bne.n	8018c34 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	2200      	movs	r2, #0
 8018c32:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018c34:	68bb      	ldr	r3, [r7, #8]
 8018c36:	781b      	ldrb	r3, [r3, #0]
 8018c38:	0018      	movs	r0, r3
 8018c3a:	f000 fa23 	bl	8019084 <RTC_ByteToBcd2>
 8018c3e:	0003      	movs	r3, r0
 8018c40:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	785b      	ldrb	r3, [r3, #1]
 8018c46:	0018      	movs	r0, r3
 8018c48:	f000 fa1c 	bl	8019084 <RTC_ByteToBcd2>
 8018c4c:	0003      	movs	r3, r0
 8018c4e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018c50:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	789b      	ldrb	r3, [r3, #2]
 8018c56:	0018      	movs	r0, r3
 8018c58:	f000 fa14 	bl	8019084 <RTC_ByteToBcd2>
 8018c5c:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018c5e:	0022      	movs	r2, r4
 8018c60:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	78db      	ldrb	r3, [r3, #3]
 8018c66:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018c68:	4313      	orrs	r3, r2
 8018c6a:	617b      	str	r3, [r7, #20]
 8018c6c:	e016      	b.n	8018c9c <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8018c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018c70:	699b      	ldr	r3, [r3, #24]
 8018c72:	2240      	movs	r2, #64	@ 0x40
 8018c74:	4013      	ands	r3, r2
 8018c76:	d102      	bne.n	8018c7e <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018c7e:	68bb      	ldr	r3, [r7, #8]
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	785b      	ldrb	r3, [r3, #1]
 8018c88:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018c8a:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8018c8c:	68ba      	ldr	r2, [r7, #8]
 8018c8e:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018c90:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018c92:	68bb      	ldr	r3, [r7, #8]
 8018c94:	78db      	ldrb	r3, [r3, #3]
 8018c96:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8018c98:	4313      	orrs	r3, r2
 8018c9a:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8018c9c:	4b21      	ldr	r3, [pc, #132]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018c9e:	697a      	ldr	r2, [r7, #20]
 8018ca0:	4921      	ldr	r1, [pc, #132]	@ (8018d28 <HAL_RTC_SetTime+0x178>)
 8018ca2:	400a      	ands	r2, r1
 8018ca4:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8018ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018ca8:	699a      	ldr	r2, [r3, #24]
 8018caa:	4b1e      	ldr	r3, [pc, #120]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018cac:	491f      	ldr	r1, [pc, #124]	@ (8018d2c <HAL_RTC_SetTime+0x17c>)
 8018cae:	400a      	ands	r2, r1
 8018cb0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8018cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018cb4:	6999      	ldr	r1, [r3, #24]
 8018cb6:	68bb      	ldr	r3, [r7, #8]
 8018cb8:	68da      	ldr	r2, [r3, #12]
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	691b      	ldr	r3, [r3, #16]
 8018cbe:	431a      	orrs	r2, r3
 8018cc0:	4b18      	ldr	r3, [pc, #96]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018cc2:	430a      	orrs	r2, r1
 8018cc4:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018cc6:	4b17      	ldr	r3, [pc, #92]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018cc8:	68da      	ldr	r2, [r3, #12]
 8018cca:	4b16      	ldr	r3, [pc, #88]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018ccc:	2180      	movs	r1, #128	@ 0x80
 8018cce:	438a      	bics	r2, r1
 8018cd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018cd2:	4b14      	ldr	r3, [pc, #80]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018cd4:	699b      	ldr	r3, [r3, #24]
 8018cd6:	2220      	movs	r2, #32
 8018cd8:	4013      	ands	r3, r2
 8018cda:	d112      	bne.n	8018d02 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	0018      	movs	r0, r3
 8018ce0:	f000 f97e 	bl	8018fe0 <HAL_RTC_WaitForSynchro>
 8018ce4:	1e03      	subs	r3, r0, #0
 8018ce6:	d00c      	beq.n	8018d02 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018cea:	22ff      	movs	r2, #255	@ 0xff
 8018cec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	222d      	movs	r2, #45	@ 0x2d
 8018cf2:	2104      	movs	r1, #4
 8018cf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	222c      	movs	r2, #44	@ 0x2c
 8018cfa:	2100      	movs	r1, #0
 8018cfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018cfe:	2301      	movs	r3, #1
 8018d00:	e00b      	b.n	8018d1a <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018d02:	4b08      	ldr	r3, [pc, #32]	@ (8018d24 <HAL_RTC_SetTime+0x174>)
 8018d04:	22ff      	movs	r2, #255	@ 0xff
 8018d06:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	222d      	movs	r2, #45	@ 0x2d
 8018d0c:	2101      	movs	r1, #1
 8018d0e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	222c      	movs	r2, #44	@ 0x2c
 8018d14:	2100      	movs	r1, #0
 8018d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018d18:	2300      	movs	r3, #0
  }
}
 8018d1a:	0018      	movs	r0, r3
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	b007      	add	sp, #28
 8018d20:	bd90      	pop	{r4, r7, pc}
 8018d22:	46c0      	nop			@ (mov r8, r8)
 8018d24:	40002800 	.word	0x40002800
 8018d28:	007f7f7f 	.word	0x007f7f7f
 8018d2c:	fffbffff 	.word	0xfffbffff

08018d30 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b086      	sub	sp, #24
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	60f8      	str	r0, [r7, #12]
 8018d38:	60b9      	str	r1, [r7, #8]
 8018d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8018d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8018df0 <HAL_RTC_GetTime+0xc0>)
 8018d3e:	689a      	ldr	r2, [r3, #8]
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8018d44:	4b2a      	ldr	r3, [pc, #168]	@ (8018df0 <HAL_RTC_GetTime+0xc0>)
 8018d46:	68da      	ldr	r2, [r3, #12]
 8018d48:	23c0      	movs	r3, #192	@ 0xc0
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	401a      	ands	r2, r3
 8018d4e:	2380      	movs	r3, #128	@ 0x80
 8018d50:	005b      	lsls	r3, r3, #1
 8018d52:	429a      	cmp	r2, r3
 8018d54:	d047      	beq.n	8018de6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8018d56:	4b26      	ldr	r3, [pc, #152]	@ (8018df0 <HAL_RTC_GetTime+0xc0>)
 8018d58:	691b      	ldr	r3, [r3, #16]
 8018d5a:	045b      	lsls	r3, r3, #17
 8018d5c:	0c5a      	lsrs	r2, r3, #17
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8018d62:	4b23      	ldr	r3, [pc, #140]	@ (8018df0 <HAL_RTC_GetTime+0xc0>)
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	4a23      	ldr	r2, [pc, #140]	@ (8018df4 <HAL_RTC_GetTime+0xc4>)
 8018d68:	4013      	ands	r3, r2
 8018d6a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8018d6c:	697b      	ldr	r3, [r7, #20]
 8018d6e:	0c1b      	lsrs	r3, r3, #16
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	223f      	movs	r2, #63	@ 0x3f
 8018d74:	4013      	ands	r3, r2
 8018d76:	b2da      	uxtb	r2, r3
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	0a1b      	lsrs	r3, r3, #8
 8018d80:	b2db      	uxtb	r3, r3
 8018d82:	227f      	movs	r2, #127	@ 0x7f
 8018d84:	4013      	ands	r3, r2
 8018d86:	b2da      	uxtb	r2, r3
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	b2db      	uxtb	r3, r3
 8018d90:	227f      	movs	r2, #127	@ 0x7f
 8018d92:	4013      	ands	r3, r2
 8018d94:	b2da      	uxtb	r2, r3
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	0d9b      	lsrs	r3, r3, #22
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	2201      	movs	r2, #1
 8018da2:	4013      	ands	r3, r2
 8018da4:	b2da      	uxtb	r2, r3
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d11a      	bne.n	8018de6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	0018      	movs	r0, r3
 8018db6:	f000 f98d 	bl	80190d4 <RTC_Bcd2ToByte>
 8018dba:	0003      	movs	r3, r0
 8018dbc:	001a      	movs	r2, r3
 8018dbe:	68bb      	ldr	r3, [r7, #8]
 8018dc0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018dc2:	68bb      	ldr	r3, [r7, #8]
 8018dc4:	785b      	ldrb	r3, [r3, #1]
 8018dc6:	0018      	movs	r0, r3
 8018dc8:	f000 f984 	bl	80190d4 <RTC_Bcd2ToByte>
 8018dcc:	0003      	movs	r3, r0
 8018dce:	001a      	movs	r2, r3
 8018dd0:	68bb      	ldr	r3, [r7, #8]
 8018dd2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	789b      	ldrb	r3, [r3, #2]
 8018dd8:	0018      	movs	r0, r3
 8018dda:	f000 f97b 	bl	80190d4 <RTC_Bcd2ToByte>
 8018dde:	0003      	movs	r3, r0
 8018de0:	001a      	movs	r2, r3
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8018de6:	2300      	movs	r3, #0
}
 8018de8:	0018      	movs	r0, r3
 8018dea:	46bd      	mov	sp, r7
 8018dec:	b006      	add	sp, #24
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	40002800 	.word	0x40002800
 8018df4:	007f7f7f 	.word	0x007f7f7f

08018df8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018df8:	b590      	push	{r4, r7, lr}
 8018dfa:	b087      	sub	sp, #28
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	222c      	movs	r2, #44	@ 0x2c
 8018e08:	5c9b      	ldrb	r3, [r3, r2]
 8018e0a:	2b01      	cmp	r3, #1
 8018e0c:	d101      	bne.n	8018e12 <HAL_RTC_SetDate+0x1a>
 8018e0e:	2302      	movs	r3, #2
 8018e10:	e090      	b.n	8018f34 <HAL_RTC_SetDate+0x13c>
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	222c      	movs	r2, #44	@ 0x2c
 8018e16:	2101      	movs	r1, #1
 8018e18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	222d      	movs	r2, #45	@ 0x2d
 8018e1e:	2102      	movs	r1, #2
 8018e20:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d10e      	bne.n	8018e46 <HAL_RTC_SetDate+0x4e>
 8018e28:	68bb      	ldr	r3, [r7, #8]
 8018e2a:	785b      	ldrb	r3, [r3, #1]
 8018e2c:	001a      	movs	r2, r3
 8018e2e:	2310      	movs	r3, #16
 8018e30:	4013      	ands	r3, r2
 8018e32:	d008      	beq.n	8018e46 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	785b      	ldrb	r3, [r3, #1]
 8018e38:	2210      	movs	r2, #16
 8018e3a:	4393      	bics	r3, r2
 8018e3c:	b2db      	uxtb	r3, r3
 8018e3e:	330a      	adds	r3, #10
 8018e40:	b2da      	uxtb	r2, r3
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d11c      	bne.n	8018e86 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	78db      	ldrb	r3, [r3, #3]
 8018e50:	0018      	movs	r0, r3
 8018e52:	f000 f917 	bl	8019084 <RTC_ByteToBcd2>
 8018e56:	0003      	movs	r3, r0
 8018e58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	785b      	ldrb	r3, [r3, #1]
 8018e5e:	0018      	movs	r0, r3
 8018e60:	f000 f910 	bl	8019084 <RTC_ByteToBcd2>
 8018e64:	0003      	movs	r3, r0
 8018e66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018e68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8018e6a:	68bb      	ldr	r3, [r7, #8]
 8018e6c:	789b      	ldrb	r3, [r3, #2]
 8018e6e:	0018      	movs	r0, r3
 8018e70:	f000 f908 	bl	8019084 <RTC_ByteToBcd2>
 8018e74:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018e76:	0022      	movs	r2, r4
 8018e78:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	781b      	ldrb	r3, [r3, #0]
 8018e7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8018e80:	4313      	orrs	r3, r2
 8018e82:	617b      	str	r3, [r7, #20]
 8018e84:	e00e      	b.n	8018ea4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	78db      	ldrb	r3, [r3, #3]
 8018e8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018e8c:	68bb      	ldr	r3, [r7, #8]
 8018e8e:	785b      	ldrb	r3, [r3, #1]
 8018e90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018e92:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8018e94:	68ba      	ldr	r2, [r7, #8]
 8018e96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8018e98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8018ea0:	4313      	orrs	r3, r2
 8018ea2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018ea4:	4b25      	ldr	r3, [pc, #148]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018ea6:	22ca      	movs	r2, #202	@ 0xca
 8018ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8018eaa:	4b24      	ldr	r3, [pc, #144]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018eac:	2253      	movs	r2, #83	@ 0x53
 8018eae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	0018      	movs	r0, r3
 8018eb4:	f000 f8ba 	bl	801902c <RTC_EnterInitMode>
 8018eb8:	1e03      	subs	r3, r0, #0
 8018eba:	d00c      	beq.n	8018ed6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018ebe:	22ff      	movs	r2, #255	@ 0xff
 8018ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	222d      	movs	r2, #45	@ 0x2d
 8018ec6:	2104      	movs	r1, #4
 8018ec8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	222c      	movs	r2, #44	@ 0x2c
 8018ece:	2100      	movs	r1, #0
 8018ed0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	e02e      	b.n	8018f34 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8018ed6:	4b19      	ldr	r3, [pc, #100]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018ed8:	697a      	ldr	r2, [r7, #20]
 8018eda:	4919      	ldr	r1, [pc, #100]	@ (8018f40 <HAL_RTC_SetDate+0x148>)
 8018edc:	400a      	ands	r2, r1
 8018ede:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018ee0:	4b16      	ldr	r3, [pc, #88]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018ee2:	68da      	ldr	r2, [r3, #12]
 8018ee4:	4b15      	ldr	r3, [pc, #84]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018ee6:	2180      	movs	r1, #128	@ 0x80
 8018ee8:	438a      	bics	r2, r1
 8018eea:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018eec:	4b13      	ldr	r3, [pc, #76]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018eee:	699b      	ldr	r3, [r3, #24]
 8018ef0:	2220      	movs	r2, #32
 8018ef2:	4013      	ands	r3, r2
 8018ef4:	d112      	bne.n	8018f1c <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	0018      	movs	r0, r3
 8018efa:	f000 f871 	bl	8018fe0 <HAL_RTC_WaitForSynchro>
 8018efe:	1e03      	subs	r3, r0, #0
 8018f00:	d00c      	beq.n	8018f1c <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018f02:	4b0e      	ldr	r3, [pc, #56]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018f04:	22ff      	movs	r2, #255	@ 0xff
 8018f06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	222d      	movs	r2, #45	@ 0x2d
 8018f0c:	2104      	movs	r1, #4
 8018f0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	222c      	movs	r2, #44	@ 0x2c
 8018f14:	2100      	movs	r1, #0
 8018f16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018f18:	2301      	movs	r3, #1
 8018f1a:	e00b      	b.n	8018f34 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018f1c:	4b07      	ldr	r3, [pc, #28]	@ (8018f3c <HAL_RTC_SetDate+0x144>)
 8018f1e:	22ff      	movs	r2, #255	@ 0xff
 8018f20:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	222d      	movs	r2, #45	@ 0x2d
 8018f26:	2101      	movs	r1, #1
 8018f28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	222c      	movs	r2, #44	@ 0x2c
 8018f2e:	2100      	movs	r1, #0
 8018f30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018f32:	2300      	movs	r3, #0
  }
}
 8018f34:	0018      	movs	r0, r3
 8018f36:	46bd      	mov	sp, r7
 8018f38:	b007      	add	sp, #28
 8018f3a:	bd90      	pop	{r4, r7, pc}
 8018f3c:	40002800 	.word	0x40002800
 8018f40:	00ffff3f 	.word	0x00ffff3f

08018f44 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b086      	sub	sp, #24
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	60f8      	str	r0, [r7, #12]
 8018f4c:	60b9      	str	r1, [r7, #8]
 8018f4e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8018f50:	4b21      	ldr	r3, [pc, #132]	@ (8018fd8 <HAL_RTC_GetDate+0x94>)
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	4a21      	ldr	r2, [pc, #132]	@ (8018fdc <HAL_RTC_GetDate+0x98>)
 8018f56:	4013      	ands	r3, r2
 8018f58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	0c1b      	lsrs	r3, r3, #16
 8018f5e:	b2da      	uxtb	r2, r3
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018f64:	697b      	ldr	r3, [r7, #20]
 8018f66:	0a1b      	lsrs	r3, r3, #8
 8018f68:	b2db      	uxtb	r3, r3
 8018f6a:	221f      	movs	r2, #31
 8018f6c:	4013      	ands	r3, r2
 8018f6e:	b2da      	uxtb	r2, r3
 8018f70:	68bb      	ldr	r3, [r7, #8]
 8018f72:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8018f74:	697b      	ldr	r3, [r7, #20]
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	223f      	movs	r2, #63	@ 0x3f
 8018f7a:	4013      	ands	r3, r2
 8018f7c:	b2da      	uxtb	r2, r3
 8018f7e:	68bb      	ldr	r3, [r7, #8]
 8018f80:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8018f82:	697b      	ldr	r3, [r7, #20]
 8018f84:	0b5b      	lsrs	r3, r3, #13
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	2207      	movs	r2, #7
 8018f8a:	4013      	ands	r3, r2
 8018f8c:	b2da      	uxtb	r2, r3
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d11a      	bne.n	8018fce <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018f98:	68bb      	ldr	r3, [r7, #8]
 8018f9a:	78db      	ldrb	r3, [r3, #3]
 8018f9c:	0018      	movs	r0, r3
 8018f9e:	f000 f899 	bl	80190d4 <RTC_Bcd2ToByte>
 8018fa2:	0003      	movs	r3, r0
 8018fa4:	001a      	movs	r2, r3
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	785b      	ldrb	r3, [r3, #1]
 8018fae:	0018      	movs	r0, r3
 8018fb0:	f000 f890 	bl	80190d4 <RTC_Bcd2ToByte>
 8018fb4:	0003      	movs	r3, r0
 8018fb6:	001a      	movs	r2, r3
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	789b      	ldrb	r3, [r3, #2]
 8018fc0:	0018      	movs	r0, r3
 8018fc2:	f000 f887 	bl	80190d4 <RTC_Bcd2ToByte>
 8018fc6:	0003      	movs	r3, r0
 8018fc8:	001a      	movs	r2, r3
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018fce:	2300      	movs	r3, #0
}
 8018fd0:	0018      	movs	r0, r3
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	b006      	add	sp, #24
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	40002800 	.word	0x40002800
 8018fdc:	00ffff3f 	.word	0x00ffff3f

08018fe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8018fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8019028 <HAL_RTC_WaitForSynchro+0x48>)
 8018fea:	68da      	ldr	r2, [r3, #12]
 8018fec:	4b0e      	ldr	r3, [pc, #56]	@ (8019028 <HAL_RTC_WaitForSynchro+0x48>)
 8018fee:	2120      	movs	r1, #32
 8018ff0:	438a      	bics	r2, r1
 8018ff2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8018ff4:	f7f8 fffc 	bl	8011ff0 <HAL_GetTick>
 8018ff8:	0003      	movs	r3, r0
 8018ffa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018ffc:	e00a      	b.n	8019014 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018ffe:	f7f8 fff7 	bl	8011ff0 <HAL_GetTick>
 8019002:	0002      	movs	r2, r0
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	1ad2      	subs	r2, r2, r3
 8019008:	23fa      	movs	r3, #250	@ 0xfa
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	429a      	cmp	r2, r3
 801900e:	d901      	bls.n	8019014 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8019010:	2303      	movs	r3, #3
 8019012:	e005      	b.n	8019020 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8019014:	4b04      	ldr	r3, [pc, #16]	@ (8019028 <HAL_RTC_WaitForSynchro+0x48>)
 8019016:	68db      	ldr	r3, [r3, #12]
 8019018:	2220      	movs	r2, #32
 801901a:	4013      	ands	r3, r2
 801901c:	d0ef      	beq.n	8018ffe <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801901e:	2300      	movs	r3, #0
}
 8019020:	0018      	movs	r0, r3
 8019022:	46bd      	mov	sp, r7
 8019024:	b004      	add	sp, #16
 8019026:	bd80      	pop	{r7, pc}
 8019028:	40002800 	.word	0x40002800

0801902c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8019034:	4b12      	ldr	r3, [pc, #72]	@ (8019080 <RTC_EnterInitMode+0x54>)
 8019036:	68db      	ldr	r3, [r3, #12]
 8019038:	2240      	movs	r2, #64	@ 0x40
 801903a:	4013      	ands	r3, r2
 801903c:	d11a      	bne.n	8019074 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801903e:	4b10      	ldr	r3, [pc, #64]	@ (8019080 <RTC_EnterInitMode+0x54>)
 8019040:	68da      	ldr	r2, [r3, #12]
 8019042:	4b0f      	ldr	r3, [pc, #60]	@ (8019080 <RTC_EnterInitMode+0x54>)
 8019044:	2180      	movs	r1, #128	@ 0x80
 8019046:	430a      	orrs	r2, r1
 8019048:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801904a:	f7f8 ffd1 	bl	8011ff0 <HAL_GetTick>
 801904e:	0003      	movs	r3, r0
 8019050:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8019052:	e00a      	b.n	801906a <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8019054:	f7f8 ffcc 	bl	8011ff0 <HAL_GetTick>
 8019058:	0002      	movs	r2, r0
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	1ad2      	subs	r2, r2, r3
 801905e:	23fa      	movs	r3, #250	@ 0xfa
 8019060:	009b      	lsls	r3, r3, #2
 8019062:	429a      	cmp	r2, r3
 8019064:	d901      	bls.n	801906a <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8019066:	2303      	movs	r3, #3
 8019068:	e005      	b.n	8019076 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 801906a:	4b05      	ldr	r3, [pc, #20]	@ (8019080 <RTC_EnterInitMode+0x54>)
 801906c:	68db      	ldr	r3, [r3, #12]
 801906e:	2240      	movs	r2, #64	@ 0x40
 8019070:	4013      	ands	r3, r2
 8019072:	d0ef      	beq.n	8019054 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8019074:	2300      	movs	r3, #0
}
 8019076:	0018      	movs	r0, r3
 8019078:	46bd      	mov	sp, r7
 801907a:	b004      	add	sp, #16
 801907c:	bd80      	pop	{r7, pc}
 801907e:	46c0      	nop			@ (mov r8, r8)
 8019080:	40002800 	.word	0x40002800

08019084 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b084      	sub	sp, #16
 8019088:	af00      	add	r7, sp, #0
 801908a:	0002      	movs	r2, r0
 801908c:	1dfb      	adds	r3, r7, #7
 801908e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8019090:	2300      	movs	r3, #0
 8019092:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8019094:	230b      	movs	r3, #11
 8019096:	18fb      	adds	r3, r7, r3
 8019098:	1dfa      	adds	r2, r7, #7
 801909a:	7812      	ldrb	r2, [r2, #0]
 801909c:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 801909e:	e008      	b.n	80190b2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	3301      	adds	r3, #1
 80190a4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80190a6:	220b      	movs	r2, #11
 80190a8:	18bb      	adds	r3, r7, r2
 80190aa:	18ba      	adds	r2, r7, r2
 80190ac:	7812      	ldrb	r2, [r2, #0]
 80190ae:	3a0a      	subs	r2, #10
 80190b0:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 80190b2:	210b      	movs	r1, #11
 80190b4:	187b      	adds	r3, r7, r1
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	2b09      	cmp	r3, #9
 80190ba:	d8f1      	bhi.n	80190a0 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	b2db      	uxtb	r3, r3
 80190c0:	011b      	lsls	r3, r3, #4
 80190c2:	b2da      	uxtb	r2, r3
 80190c4:	187b      	adds	r3, r7, r1
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	4313      	orrs	r3, r2
 80190ca:	b2db      	uxtb	r3, r3
}
 80190cc:	0018      	movs	r0, r3
 80190ce:	46bd      	mov	sp, r7
 80190d0:	b004      	add	sp, #16
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	0002      	movs	r2, r0
 80190dc:	1dfb      	adds	r3, r7, #7
 80190de:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80190e0:	1dfb      	adds	r3, r7, #7
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	091b      	lsrs	r3, r3, #4
 80190e6:	b2db      	uxtb	r3, r3
 80190e8:	001a      	movs	r2, r3
 80190ea:	0013      	movs	r3, r2
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	189b      	adds	r3, r3, r2
 80190f0:	005b      	lsls	r3, r3, #1
 80190f2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	b2da      	uxtb	r2, r3
 80190f8:	1dfb      	adds	r3, r7, #7
 80190fa:	781b      	ldrb	r3, [r3, #0]
 80190fc:	210f      	movs	r1, #15
 80190fe:	400b      	ands	r3, r1
 8019100:	b2db      	uxtb	r3, r3
 8019102:	18d3      	adds	r3, r2, r3
 8019104:	b2db      	uxtb	r3, r3
}
 8019106:	0018      	movs	r0, r3
 8019108:	46bd      	mov	sp, r7
 801910a:	b004      	add	sp, #16
 801910c:	bd80      	pop	{r7, pc}
	...

08019110 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b086      	sub	sp, #24
 8019114:	af00      	add	r7, sp, #0
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	60b9      	str	r1, [r7, #8]
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	222c      	movs	r2, #44	@ 0x2c
 8019122:	5c9b      	ldrb	r3, [r3, r2]
 8019124:	2b01      	cmp	r3, #1
 8019126:	d101      	bne.n	801912c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8019128:	2302      	movs	r3, #2
 801912a:	e088      	b.n	801923e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	222c      	movs	r2, #44	@ 0x2c
 8019130:	2101      	movs	r1, #1
 8019132:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	222d      	movs	r2, #45	@ 0x2d
 8019138:	2102      	movs	r1, #2
 801913a:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 801913c:	4b42      	ldr	r3, [pc, #264]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801913e:	699a      	ldr	r2, [r3, #24]
 8019140:	2380      	movs	r3, #128	@ 0x80
 8019142:	00db      	lsls	r3, r3, #3
 8019144:	4013      	ands	r3, r2
 8019146:	d01c      	beq.n	8019182 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8019148:	f7f8 ff52 	bl	8011ff0 <HAL_GetTick>
 801914c:	0003      	movs	r3, r0
 801914e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8019150:	e012      	b.n	8019178 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019152:	f7f8 ff4d 	bl	8011ff0 <HAL_GetTick>
 8019156:	0002      	movs	r2, r0
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	1ad2      	subs	r2, r2, r3
 801915c:	23fa      	movs	r3, #250	@ 0xfa
 801915e:	009b      	lsls	r3, r3, #2
 8019160:	429a      	cmp	r2, r3
 8019162:	d909      	bls.n	8019178 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	222d      	movs	r2, #45	@ 0x2d
 8019168:	2103      	movs	r1, #3
 801916a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	222c      	movs	r2, #44	@ 0x2c
 8019170:	2100      	movs	r1, #0
 8019172:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019174:	2303      	movs	r3, #3
 8019176:	e062      	b.n	801923e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8019178:	4b33      	ldr	r3, [pc, #204]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 801917a:	68db      	ldr	r3, [r3, #12]
 801917c:	2204      	movs	r2, #4
 801917e:	4013      	ands	r3, r2
 8019180:	d1e7      	bne.n	8019152 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8019182:	4b31      	ldr	r3, [pc, #196]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019184:	699a      	ldr	r2, [r3, #24]
 8019186:	4b30      	ldr	r3, [pc, #192]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019188:	4930      	ldr	r1, [pc, #192]	@ (801924c <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 801918a:	400a      	ands	r2, r1
 801918c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 801918e:	4b2e      	ldr	r3, [pc, #184]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019190:	2204      	movs	r2, #4
 8019192:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8019194:	f7f8 ff2c 	bl	8011ff0 <HAL_GetTick>
 8019198:	0003      	movs	r3, r0
 801919a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801919c:	e015      	b.n	80191ca <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801919e:	f7f8 ff27 	bl	8011ff0 <HAL_GetTick>
 80191a2:	0002      	movs	r2, r0
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	1ad2      	subs	r2, r2, r3
 80191a8:	23fa      	movs	r3, #250	@ 0xfa
 80191aa:	009b      	lsls	r3, r3, #2
 80191ac:	429a      	cmp	r2, r3
 80191ae:	d90c      	bls.n	80191ca <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80191b0:	4b25      	ldr	r3, [pc, #148]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80191b2:	22ff      	movs	r2, #255	@ 0xff
 80191b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	222d      	movs	r2, #45	@ 0x2d
 80191ba:	2103      	movs	r1, #3
 80191bc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	222c      	movs	r2, #44	@ 0x2c
 80191c2:	2100      	movs	r1, #0
 80191c4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80191c6:	2303      	movs	r3, #3
 80191c8:	e039      	b.n	801923e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80191ca:	4b1f      	ldr	r3, [pc, #124]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80191cc:	68db      	ldr	r3, [r3, #12]
 80191ce:	2204      	movs	r2, #4
 80191d0:	4013      	ands	r3, r2
 80191d2:	d0e4      	beq.n	801919e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	0419      	lsls	r1, r3, #16
 80191d8:	4b1b      	ldr	r3, [pc, #108]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80191da:	68ba      	ldr	r2, [r7, #8]
 80191dc:	430a      	orrs	r2, r1
 80191de:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80191e0:	4b19      	ldr	r3, [pc, #100]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80191e2:	699b      	ldr	r3, [r3, #24]
 80191e4:	2207      	movs	r2, #7
 80191e6:	4393      	bics	r3, r2
 80191e8:	0019      	movs	r1, r3
 80191ea:	4b17      	ldr	r3, [pc, #92]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 80191ec:	687a      	ldr	r2, [r7, #4]
 80191ee:	430a      	orrs	r2, r1
 80191f0:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 80191f2:	683b      	ldr	r3, [r7, #0]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d009      	beq.n	801920c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80191f8:	4a15      	ldr	r2, [pc, #84]	@ (8019250 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 80191fa:	2384      	movs	r3, #132	@ 0x84
 80191fc:	58d3      	ldr	r3, [r2, r3]
 80191fe:	4914      	ldr	r1, [pc, #80]	@ (8019250 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8019200:	2280      	movs	r2, #128	@ 0x80
 8019202:	0552      	lsls	r2, r2, #21
 8019204:	4313      	orrs	r3, r2
 8019206:	2284      	movs	r2, #132	@ 0x84
 8019208:	508b      	str	r3, [r1, r2]
 801920a:	e008      	b.n	801921e <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801920c:	4a10      	ldr	r2, [pc, #64]	@ (8019250 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 801920e:	2380      	movs	r3, #128	@ 0x80
 8019210:	58d3      	ldr	r3, [r2, r3]
 8019212:	490f      	ldr	r1, [pc, #60]	@ (8019250 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8019214:	2280      	movs	r2, #128	@ 0x80
 8019216:	0552      	lsls	r2, r2, #21
 8019218:	4313      	orrs	r3, r2
 801921a:	2280      	movs	r2, #128	@ 0x80
 801921c:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 801921e:	4b0a      	ldr	r3, [pc, #40]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019220:	699a      	ldr	r2, [r3, #24]
 8019222:	4b09      	ldr	r3, [pc, #36]	@ (8019248 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8019224:	2188      	movs	r1, #136	@ 0x88
 8019226:	01c9      	lsls	r1, r1, #7
 8019228:	430a      	orrs	r2, r1
 801922a:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	222d      	movs	r2, #45	@ 0x2d
 8019230:	2101      	movs	r1, #1
 8019232:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	222c      	movs	r2, #44	@ 0x2c
 8019238:	2100      	movs	r1, #0
 801923a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801923c:	2300      	movs	r3, #0
}
 801923e:	0018      	movs	r0, r3
 8019240:	46bd      	mov	sp, r7
 8019242:	b006      	add	sp, #24
 8019244:	bd80      	pop	{r7, pc}
 8019246:	46c0      	nop			@ (mov r8, r8)
 8019248:	40002800 	.word	0x40002800
 801924c:	fffffbff 	.word	0xfffffbff
 8019250:	40021800 	.word	0x40021800

08019254 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b082      	sub	sp, #8
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	222c      	movs	r2, #44	@ 0x2c
 8019260:	5c9b      	ldrb	r3, [r3, r2]
 8019262:	2b01      	cmp	r3, #1
 8019264:	d101      	bne.n	801926a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8019266:	2302      	movs	r3, #2
 8019268:	e016      	b.n	8019298 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	222c      	movs	r2, #44	@ 0x2c
 801926e:	2101      	movs	r1, #1
 8019270:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	222d      	movs	r2, #45	@ 0x2d
 8019276:	2102      	movs	r1, #2
 8019278:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 801927a:	4b09      	ldr	r3, [pc, #36]	@ (80192a0 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 801927c:	699a      	ldr	r2, [r3, #24]
 801927e:	4b08      	ldr	r3, [pc, #32]	@ (80192a0 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8019280:	4908      	ldr	r1, [pc, #32]	@ (80192a4 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8019282:	400a      	ands	r2, r1
 8019284:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	222d      	movs	r2, #45	@ 0x2d
 801928a:	2101      	movs	r1, #1
 801928c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	222c      	movs	r2, #44	@ 0x2c
 8019292:	2100      	movs	r1, #0
 8019294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019296:	2300      	movs	r3, #0
}
 8019298:	0018      	movs	r0, r3
 801929a:	46bd      	mov	sp, r7
 801929c:	b002      	add	sp, #8
 801929e:	bd80      	pop	{r7, pc}
 80192a0:	40002800 	.word	0x40002800
 80192a4:	ffffbbff 	.word	0xffffbbff

080192a8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b082      	sub	sp, #8
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80192b0:	4b09      	ldr	r3, [pc, #36]	@ (80192d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80192b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80192b4:	2204      	movs	r2, #4
 80192b6:	4013      	ands	r3, r2
 80192b8:	d006      	beq.n	80192c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80192ba:	4b07      	ldr	r3, [pc, #28]	@ (80192d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80192bc:	2204      	movs	r2, #4
 80192be:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	0018      	movs	r0, r3
 80192c4:	f000 f80a 	bl	80192dc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	222d      	movs	r2, #45	@ 0x2d
 80192cc:	2101      	movs	r1, #1
 80192ce:	5499      	strb	r1, [r3, r2]
}
 80192d0:	46c0      	nop			@ (mov r8, r8)
 80192d2:	46bd      	mov	sp, r7
 80192d4:	b002      	add	sp, #8
 80192d6:	bd80      	pop	{r7, pc}
 80192d8:	40002800 	.word	0x40002800

080192dc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b082      	sub	sp, #8
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80192e4:	46c0      	nop			@ (mov r8, r8)
 80192e6:	46bd      	mov	sp, r7
 80192e8:	b002      	add	sp, #8
 80192ea:	bd80      	pop	{r7, pc}

080192ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b082      	sub	sp, #8
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d101      	bne.n	80192fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80192fa:	2301      	movs	r3, #1
 80192fc:	e04a      	b.n	8019394 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	223d      	movs	r2, #61	@ 0x3d
 8019302:	5c9b      	ldrb	r3, [r3, r2]
 8019304:	b2db      	uxtb	r3, r3
 8019306:	2b00      	cmp	r3, #0
 8019308:	d107      	bne.n	801931a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	223c      	movs	r2, #60	@ 0x3c
 801930e:	2100      	movs	r1, #0
 8019310:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	0018      	movs	r0, r3
 8019316:	f7f2 ffe9 	bl	800c2ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	223d      	movs	r2, #61	@ 0x3d
 801931e:	2102      	movs	r1, #2
 8019320:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681a      	ldr	r2, [r3, #0]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	3304      	adds	r3, #4
 801932a:	0019      	movs	r1, r3
 801932c:	0010      	movs	r0, r2
 801932e:	f000 fbd9 	bl	8019ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	2248      	movs	r2, #72	@ 0x48
 8019336:	2101      	movs	r1, #1
 8019338:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	223e      	movs	r2, #62	@ 0x3e
 801933e:	2101      	movs	r1, #1
 8019340:	5499      	strb	r1, [r3, r2]
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	223f      	movs	r2, #63	@ 0x3f
 8019346:	2101      	movs	r1, #1
 8019348:	5499      	strb	r1, [r3, r2]
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	2240      	movs	r2, #64	@ 0x40
 801934e:	2101      	movs	r1, #1
 8019350:	5499      	strb	r1, [r3, r2]
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	2241      	movs	r2, #65	@ 0x41
 8019356:	2101      	movs	r1, #1
 8019358:	5499      	strb	r1, [r3, r2]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2242      	movs	r2, #66	@ 0x42
 801935e:	2101      	movs	r1, #1
 8019360:	5499      	strb	r1, [r3, r2]
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2243      	movs	r2, #67	@ 0x43
 8019366:	2101      	movs	r1, #1
 8019368:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	2244      	movs	r2, #68	@ 0x44
 801936e:	2101      	movs	r1, #1
 8019370:	5499      	strb	r1, [r3, r2]
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	2245      	movs	r2, #69	@ 0x45
 8019376:	2101      	movs	r1, #1
 8019378:	5499      	strb	r1, [r3, r2]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2246      	movs	r2, #70	@ 0x46
 801937e:	2101      	movs	r1, #1
 8019380:	5499      	strb	r1, [r3, r2]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2247      	movs	r2, #71	@ 0x47
 8019386:	2101      	movs	r1, #1
 8019388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	223d      	movs	r2, #61	@ 0x3d
 801938e:	2101      	movs	r1, #1
 8019390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019392:	2300      	movs	r3, #0
}
 8019394:	0018      	movs	r0, r3
 8019396:	46bd      	mov	sp, r7
 8019398:	b002      	add	sp, #8
 801939a:	bd80      	pop	{r7, pc}

0801939c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d101      	bne.n	80193ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80193aa:	2301      	movs	r3, #1
 80193ac:	e04a      	b.n	8019444 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	223d      	movs	r2, #61	@ 0x3d
 80193b2:	5c9b      	ldrb	r3, [r3, r2]
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d107      	bne.n	80193ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	223c      	movs	r2, #60	@ 0x3c
 80193be:	2100      	movs	r1, #0
 80193c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	0018      	movs	r0, r3
 80193c6:	f000 f841 	bl	801944c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	223d      	movs	r2, #61	@ 0x3d
 80193ce:	2102      	movs	r1, #2
 80193d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	3304      	adds	r3, #4
 80193da:	0019      	movs	r1, r3
 80193dc:	0010      	movs	r0, r2
 80193de:	f000 fb81 	bl	8019ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	2248      	movs	r2, #72	@ 0x48
 80193e6:	2101      	movs	r1, #1
 80193e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	223e      	movs	r2, #62	@ 0x3e
 80193ee:	2101      	movs	r1, #1
 80193f0:	5499      	strb	r1, [r3, r2]
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	223f      	movs	r2, #63	@ 0x3f
 80193f6:	2101      	movs	r1, #1
 80193f8:	5499      	strb	r1, [r3, r2]
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2240      	movs	r2, #64	@ 0x40
 80193fe:	2101      	movs	r1, #1
 8019400:	5499      	strb	r1, [r3, r2]
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	2241      	movs	r2, #65	@ 0x41
 8019406:	2101      	movs	r1, #1
 8019408:	5499      	strb	r1, [r3, r2]
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	2242      	movs	r2, #66	@ 0x42
 801940e:	2101      	movs	r1, #1
 8019410:	5499      	strb	r1, [r3, r2]
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2243      	movs	r2, #67	@ 0x43
 8019416:	2101      	movs	r1, #1
 8019418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2244      	movs	r2, #68	@ 0x44
 801941e:	2101      	movs	r1, #1
 8019420:	5499      	strb	r1, [r3, r2]
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	2245      	movs	r2, #69	@ 0x45
 8019426:	2101      	movs	r1, #1
 8019428:	5499      	strb	r1, [r3, r2]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2246      	movs	r2, #70	@ 0x46
 801942e:	2101      	movs	r1, #1
 8019430:	5499      	strb	r1, [r3, r2]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2247      	movs	r2, #71	@ 0x47
 8019436:	2101      	movs	r1, #1
 8019438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	223d      	movs	r2, #61	@ 0x3d
 801943e:	2101      	movs	r1, #1
 8019440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019442:	2300      	movs	r3, #0
}
 8019444:	0018      	movs	r0, r3
 8019446:	46bd      	mov	sp, r7
 8019448:	b002      	add	sp, #8
 801944a:	bd80      	pop	{r7, pc}

0801944c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8019454:	46c0      	nop			@ (mov r8, r8)
 8019456:	46bd      	mov	sp, r7
 8019458:	b002      	add	sp, #8
 801945a:	bd80      	pop	{r7, pc}

0801945c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
 8019464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d108      	bne.n	801947e <HAL_TIM_PWM_Start+0x22>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	223e      	movs	r2, #62	@ 0x3e
 8019470:	5c9b      	ldrb	r3, [r3, r2]
 8019472:	b2db      	uxtb	r3, r3
 8019474:	3b01      	subs	r3, #1
 8019476:	1e5a      	subs	r2, r3, #1
 8019478:	4193      	sbcs	r3, r2
 801947a:	b2db      	uxtb	r3, r3
 801947c:	e037      	b.n	80194ee <HAL_TIM_PWM_Start+0x92>
 801947e:	683b      	ldr	r3, [r7, #0]
 8019480:	2b04      	cmp	r3, #4
 8019482:	d108      	bne.n	8019496 <HAL_TIM_PWM_Start+0x3a>
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	223f      	movs	r2, #63	@ 0x3f
 8019488:	5c9b      	ldrb	r3, [r3, r2]
 801948a:	b2db      	uxtb	r3, r3
 801948c:	3b01      	subs	r3, #1
 801948e:	1e5a      	subs	r2, r3, #1
 8019490:	4193      	sbcs	r3, r2
 8019492:	b2db      	uxtb	r3, r3
 8019494:	e02b      	b.n	80194ee <HAL_TIM_PWM_Start+0x92>
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	2b08      	cmp	r3, #8
 801949a:	d108      	bne.n	80194ae <HAL_TIM_PWM_Start+0x52>
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	2240      	movs	r2, #64	@ 0x40
 80194a0:	5c9b      	ldrb	r3, [r3, r2]
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	3b01      	subs	r3, #1
 80194a6:	1e5a      	subs	r2, r3, #1
 80194a8:	4193      	sbcs	r3, r2
 80194aa:	b2db      	uxtb	r3, r3
 80194ac:	e01f      	b.n	80194ee <HAL_TIM_PWM_Start+0x92>
 80194ae:	683b      	ldr	r3, [r7, #0]
 80194b0:	2b0c      	cmp	r3, #12
 80194b2:	d108      	bne.n	80194c6 <HAL_TIM_PWM_Start+0x6a>
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	2241      	movs	r2, #65	@ 0x41
 80194b8:	5c9b      	ldrb	r3, [r3, r2]
 80194ba:	b2db      	uxtb	r3, r3
 80194bc:	3b01      	subs	r3, #1
 80194be:	1e5a      	subs	r2, r3, #1
 80194c0:	4193      	sbcs	r3, r2
 80194c2:	b2db      	uxtb	r3, r3
 80194c4:	e013      	b.n	80194ee <HAL_TIM_PWM_Start+0x92>
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	2b10      	cmp	r3, #16
 80194ca:	d108      	bne.n	80194de <HAL_TIM_PWM_Start+0x82>
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2242      	movs	r2, #66	@ 0x42
 80194d0:	5c9b      	ldrb	r3, [r3, r2]
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	3b01      	subs	r3, #1
 80194d6:	1e5a      	subs	r2, r3, #1
 80194d8:	4193      	sbcs	r3, r2
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	e007      	b.n	80194ee <HAL_TIM_PWM_Start+0x92>
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	2243      	movs	r2, #67	@ 0x43
 80194e2:	5c9b      	ldrb	r3, [r3, r2]
 80194e4:	b2db      	uxtb	r3, r3
 80194e6:	3b01      	subs	r3, #1
 80194e8:	1e5a      	subs	r2, r3, #1
 80194ea:	4193      	sbcs	r3, r2
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d001      	beq.n	80194f6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80194f2:	2301      	movs	r3, #1
 80194f4:	e086      	b.n	8019604 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d104      	bne.n	8019506 <HAL_TIM_PWM_Start+0xaa>
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	223e      	movs	r2, #62	@ 0x3e
 8019500:	2102      	movs	r1, #2
 8019502:	5499      	strb	r1, [r3, r2]
 8019504:	e023      	b.n	801954e <HAL_TIM_PWM_Start+0xf2>
 8019506:	683b      	ldr	r3, [r7, #0]
 8019508:	2b04      	cmp	r3, #4
 801950a:	d104      	bne.n	8019516 <HAL_TIM_PWM_Start+0xba>
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	223f      	movs	r2, #63	@ 0x3f
 8019510:	2102      	movs	r1, #2
 8019512:	5499      	strb	r1, [r3, r2]
 8019514:	e01b      	b.n	801954e <HAL_TIM_PWM_Start+0xf2>
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	2b08      	cmp	r3, #8
 801951a:	d104      	bne.n	8019526 <HAL_TIM_PWM_Start+0xca>
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2240      	movs	r2, #64	@ 0x40
 8019520:	2102      	movs	r1, #2
 8019522:	5499      	strb	r1, [r3, r2]
 8019524:	e013      	b.n	801954e <HAL_TIM_PWM_Start+0xf2>
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	2b0c      	cmp	r3, #12
 801952a:	d104      	bne.n	8019536 <HAL_TIM_PWM_Start+0xda>
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	2241      	movs	r2, #65	@ 0x41
 8019530:	2102      	movs	r1, #2
 8019532:	5499      	strb	r1, [r3, r2]
 8019534:	e00b      	b.n	801954e <HAL_TIM_PWM_Start+0xf2>
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	2b10      	cmp	r3, #16
 801953a:	d104      	bne.n	8019546 <HAL_TIM_PWM_Start+0xea>
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	2242      	movs	r2, #66	@ 0x42
 8019540:	2102      	movs	r1, #2
 8019542:	5499      	strb	r1, [r3, r2]
 8019544:	e003      	b.n	801954e <HAL_TIM_PWM_Start+0xf2>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2243      	movs	r2, #67	@ 0x43
 801954a:	2102      	movs	r1, #2
 801954c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	6839      	ldr	r1, [r7, #0]
 8019554:	2201      	movs	r2, #1
 8019556:	0018      	movs	r0, r3
 8019558:	f000 fe7a 	bl	801a250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	4a2a      	ldr	r2, [pc, #168]	@ (801960c <HAL_TIM_PWM_Start+0x1b0>)
 8019562:	4293      	cmp	r3, r2
 8019564:	d009      	beq.n	801957a <HAL_TIM_PWM_Start+0x11e>
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4a29      	ldr	r2, [pc, #164]	@ (8019610 <HAL_TIM_PWM_Start+0x1b4>)
 801956c:	4293      	cmp	r3, r2
 801956e:	d004      	beq.n	801957a <HAL_TIM_PWM_Start+0x11e>
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	4a27      	ldr	r2, [pc, #156]	@ (8019614 <HAL_TIM_PWM_Start+0x1b8>)
 8019576:	4293      	cmp	r3, r2
 8019578:	d101      	bne.n	801957e <HAL_TIM_PWM_Start+0x122>
 801957a:	2301      	movs	r3, #1
 801957c:	e000      	b.n	8019580 <HAL_TIM_PWM_Start+0x124>
 801957e:	2300      	movs	r3, #0
 8019580:	2b00      	cmp	r3, #0
 8019582:	d008      	beq.n	8019596 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2180      	movs	r1, #128	@ 0x80
 8019590:	0209      	lsls	r1, r1, #8
 8019592:	430a      	orrs	r2, r1
 8019594:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	4a1c      	ldr	r2, [pc, #112]	@ (801960c <HAL_TIM_PWM_Start+0x1b0>)
 801959c:	4293      	cmp	r3, r2
 801959e:	d00f      	beq.n	80195c0 <HAL_TIM_PWM_Start+0x164>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681a      	ldr	r2, [r3, #0]
 80195a4:	2380      	movs	r3, #128	@ 0x80
 80195a6:	05db      	lsls	r3, r3, #23
 80195a8:	429a      	cmp	r2, r3
 80195aa:	d009      	beq.n	80195c0 <HAL_TIM_PWM_Start+0x164>
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	4a19      	ldr	r2, [pc, #100]	@ (8019618 <HAL_TIM_PWM_Start+0x1bc>)
 80195b2:	4293      	cmp	r3, r2
 80195b4:	d004      	beq.n	80195c0 <HAL_TIM_PWM_Start+0x164>
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	4a15      	ldr	r2, [pc, #84]	@ (8019610 <HAL_TIM_PWM_Start+0x1b4>)
 80195bc:	4293      	cmp	r3, r2
 80195be:	d116      	bne.n	80195ee <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	689b      	ldr	r3, [r3, #8]
 80195c6:	4a15      	ldr	r2, [pc, #84]	@ (801961c <HAL_TIM_PWM_Start+0x1c0>)
 80195c8:	4013      	ands	r3, r2
 80195ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	2b06      	cmp	r3, #6
 80195d0:	d016      	beq.n	8019600 <HAL_TIM_PWM_Start+0x1a4>
 80195d2:	68fa      	ldr	r2, [r7, #12]
 80195d4:	2380      	movs	r3, #128	@ 0x80
 80195d6:	025b      	lsls	r3, r3, #9
 80195d8:	429a      	cmp	r2, r3
 80195da:	d011      	beq.n	8019600 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	681a      	ldr	r2, [r3, #0]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	2101      	movs	r1, #1
 80195e8:	430a      	orrs	r2, r1
 80195ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80195ec:	e008      	b.n	8019600 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	681a      	ldr	r2, [r3, #0]
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	2101      	movs	r1, #1
 80195fa:	430a      	orrs	r2, r1
 80195fc:	601a      	str	r2, [r3, #0]
 80195fe:	e000      	b.n	8019602 <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019600:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8019602:	2300      	movs	r3, #0
}
 8019604:	0018      	movs	r0, r3
 8019606:	46bd      	mov	sp, r7
 8019608:	b004      	add	sp, #16
 801960a:	bd80      	pop	{r7, pc}
 801960c:	40012c00 	.word	0x40012c00
 8019610:	40014000 	.word	0x40014000
 8019614:	40014400 	.word	0x40014400
 8019618:	40000400 	.word	0x40000400
 801961c:	00010007 	.word	0x00010007

08019620 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b082      	sub	sp, #8
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
 8019628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	6839      	ldr	r1, [r7, #0]
 8019630:	2200      	movs	r2, #0
 8019632:	0018      	movs	r0, r3
 8019634:	f000 fe0c 	bl	801a250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	4a35      	ldr	r2, [pc, #212]	@ (8019714 <HAL_TIM_PWM_Stop+0xf4>)
 801963e:	4293      	cmp	r3, r2
 8019640:	d009      	beq.n	8019656 <HAL_TIM_PWM_Stop+0x36>
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	4a34      	ldr	r2, [pc, #208]	@ (8019718 <HAL_TIM_PWM_Stop+0xf8>)
 8019648:	4293      	cmp	r3, r2
 801964a:	d004      	beq.n	8019656 <HAL_TIM_PWM_Stop+0x36>
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	4a32      	ldr	r2, [pc, #200]	@ (801971c <HAL_TIM_PWM_Stop+0xfc>)
 8019652:	4293      	cmp	r3, r2
 8019654:	d101      	bne.n	801965a <HAL_TIM_PWM_Stop+0x3a>
 8019656:	2301      	movs	r3, #1
 8019658:	e000      	b.n	801965c <HAL_TIM_PWM_Stop+0x3c>
 801965a:	2300      	movs	r3, #0
 801965c:	2b00      	cmp	r3, #0
 801965e:	d013      	beq.n	8019688 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	6a1b      	ldr	r3, [r3, #32]
 8019666:	4a2e      	ldr	r2, [pc, #184]	@ (8019720 <HAL_TIM_PWM_Stop+0x100>)
 8019668:	4013      	ands	r3, r2
 801966a:	d10d      	bne.n	8019688 <HAL_TIM_PWM_Stop+0x68>
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	6a1b      	ldr	r3, [r3, #32]
 8019672:	4a2c      	ldr	r2, [pc, #176]	@ (8019724 <HAL_TIM_PWM_Stop+0x104>)
 8019674:	4013      	ands	r3, r2
 8019676:	d107      	bne.n	8019688 <HAL_TIM_PWM_Stop+0x68>
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	4929      	ldr	r1, [pc, #164]	@ (8019728 <HAL_TIM_PWM_Stop+0x108>)
 8019684:	400a      	ands	r2, r1
 8019686:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	6a1b      	ldr	r3, [r3, #32]
 801968e:	4a24      	ldr	r2, [pc, #144]	@ (8019720 <HAL_TIM_PWM_Stop+0x100>)
 8019690:	4013      	ands	r3, r2
 8019692:	d10d      	bne.n	80196b0 <HAL_TIM_PWM_Stop+0x90>
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	6a1b      	ldr	r3, [r3, #32]
 801969a:	4a22      	ldr	r2, [pc, #136]	@ (8019724 <HAL_TIM_PWM_Stop+0x104>)
 801969c:	4013      	ands	r3, r2
 801969e:	d107      	bne.n	80196b0 <HAL_TIM_PWM_Stop+0x90>
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	681a      	ldr	r2, [r3, #0]
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	2101      	movs	r1, #1
 80196ac:	438a      	bics	r2, r1
 80196ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d104      	bne.n	80196c0 <HAL_TIM_PWM_Stop+0xa0>
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	223e      	movs	r2, #62	@ 0x3e
 80196ba:	2101      	movs	r1, #1
 80196bc:	5499      	strb	r1, [r3, r2]
 80196be:	e023      	b.n	8019708 <HAL_TIM_PWM_Stop+0xe8>
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	2b04      	cmp	r3, #4
 80196c4:	d104      	bne.n	80196d0 <HAL_TIM_PWM_Stop+0xb0>
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	223f      	movs	r2, #63	@ 0x3f
 80196ca:	2101      	movs	r1, #1
 80196cc:	5499      	strb	r1, [r3, r2]
 80196ce:	e01b      	b.n	8019708 <HAL_TIM_PWM_Stop+0xe8>
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	2b08      	cmp	r3, #8
 80196d4:	d104      	bne.n	80196e0 <HAL_TIM_PWM_Stop+0xc0>
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	2240      	movs	r2, #64	@ 0x40
 80196da:	2101      	movs	r1, #1
 80196dc:	5499      	strb	r1, [r3, r2]
 80196de:	e013      	b.n	8019708 <HAL_TIM_PWM_Stop+0xe8>
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	2b0c      	cmp	r3, #12
 80196e4:	d104      	bne.n	80196f0 <HAL_TIM_PWM_Stop+0xd0>
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2241      	movs	r2, #65	@ 0x41
 80196ea:	2101      	movs	r1, #1
 80196ec:	5499      	strb	r1, [r3, r2]
 80196ee:	e00b      	b.n	8019708 <HAL_TIM_PWM_Stop+0xe8>
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	2b10      	cmp	r3, #16
 80196f4:	d104      	bne.n	8019700 <HAL_TIM_PWM_Stop+0xe0>
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	2242      	movs	r2, #66	@ 0x42
 80196fa:	2101      	movs	r1, #1
 80196fc:	5499      	strb	r1, [r3, r2]
 80196fe:	e003      	b.n	8019708 <HAL_TIM_PWM_Stop+0xe8>
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2243      	movs	r2, #67	@ 0x43
 8019704:	2101      	movs	r1, #1
 8019706:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8019708:	2300      	movs	r3, #0
}
 801970a:	0018      	movs	r0, r3
 801970c:	46bd      	mov	sp, r7
 801970e:	b002      	add	sp, #8
 8019710:	bd80      	pop	{r7, pc}
 8019712:	46c0      	nop			@ (mov r8, r8)
 8019714:	40012c00 	.word	0x40012c00
 8019718:	40014000 	.word	0x40014000
 801971c:	40014400 	.word	0x40014400
 8019720:	00001111 	.word	0x00001111
 8019724:	00000444 	.word	0x00000444
 8019728:	ffff7fff 	.word	0xffff7fff

0801972c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b086      	sub	sp, #24
 8019730:	af00      	add	r7, sp, #0
 8019732:	60f8      	str	r0, [r7, #12]
 8019734:	60b9      	str	r1, [r7, #8]
 8019736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019738:	2317      	movs	r3, #23
 801973a:	18fb      	adds	r3, r7, r3
 801973c:	2200      	movs	r2, #0
 801973e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	223c      	movs	r2, #60	@ 0x3c
 8019744:	5c9b      	ldrb	r3, [r3, r2]
 8019746:	2b01      	cmp	r3, #1
 8019748:	d101      	bne.n	801974e <HAL_TIM_PWM_ConfigChannel+0x22>
 801974a:	2302      	movs	r3, #2
 801974c:	e0e5      	b.n	801991a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	223c      	movs	r2, #60	@ 0x3c
 8019752:	2101      	movs	r1, #1
 8019754:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	2b14      	cmp	r3, #20
 801975a:	d900      	bls.n	801975e <HAL_TIM_PWM_ConfigChannel+0x32>
 801975c:	e0d1      	b.n	8019902 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	009a      	lsls	r2, r3, #2
 8019762:	4b70      	ldr	r3, [pc, #448]	@ (8019924 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8019764:	18d3      	adds	r3, r2, r3
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	68ba      	ldr	r2, [r7, #8]
 8019770:	0011      	movs	r1, r2
 8019772:	0018      	movs	r0, r3
 8019774:	f000 fa34 	bl	8019be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	699a      	ldr	r2, [r3, #24]
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	2108      	movs	r1, #8
 8019784:	430a      	orrs	r2, r1
 8019786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	699a      	ldr	r2, [r3, #24]
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	2104      	movs	r1, #4
 8019794:	438a      	bics	r2, r1
 8019796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	6999      	ldr	r1, [r3, #24]
 801979e:	68bb      	ldr	r3, [r7, #8]
 80197a0:	691a      	ldr	r2, [r3, #16]
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	430a      	orrs	r2, r1
 80197a8:	619a      	str	r2, [r3, #24]
      break;
 80197aa:	e0af      	b.n	801990c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	68ba      	ldr	r2, [r7, #8]
 80197b2:	0011      	movs	r1, r2
 80197b4:	0018      	movs	r0, r3
 80197b6:	f000 fa93 	bl	8019ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	699a      	ldr	r2, [r3, #24]
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	2180      	movs	r1, #128	@ 0x80
 80197c6:	0109      	lsls	r1, r1, #4
 80197c8:	430a      	orrs	r2, r1
 80197ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	699a      	ldr	r2, [r3, #24]
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	4954      	ldr	r1, [pc, #336]	@ (8019928 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80197d8:	400a      	ands	r2, r1
 80197da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	6999      	ldr	r1, [r3, #24]
 80197e2:	68bb      	ldr	r3, [r7, #8]
 80197e4:	691b      	ldr	r3, [r3, #16]
 80197e6:	021a      	lsls	r2, r3, #8
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	430a      	orrs	r2, r1
 80197ee:	619a      	str	r2, [r3, #24]
      break;
 80197f0:	e08c      	b.n	801990c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	68ba      	ldr	r2, [r7, #8]
 80197f8:	0011      	movs	r1, r2
 80197fa:	0018      	movs	r0, r3
 80197fc:	f000 faee 	bl	8019ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	69da      	ldr	r2, [r3, #28]
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	2108      	movs	r1, #8
 801980c:	430a      	orrs	r2, r1
 801980e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	69da      	ldr	r2, [r3, #28]
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	2104      	movs	r1, #4
 801981c:	438a      	bics	r2, r1
 801981e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	69d9      	ldr	r1, [r3, #28]
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	691a      	ldr	r2, [r3, #16]
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	430a      	orrs	r2, r1
 8019830:	61da      	str	r2, [r3, #28]
      break;
 8019832:	e06b      	b.n	801990c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	68ba      	ldr	r2, [r7, #8]
 801983a:	0011      	movs	r1, r2
 801983c:	0018      	movs	r0, r3
 801983e:	f000 fb4f 	bl	8019ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	69da      	ldr	r2, [r3, #28]
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2180      	movs	r1, #128	@ 0x80
 801984e:	0109      	lsls	r1, r1, #4
 8019850:	430a      	orrs	r2, r1
 8019852:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	69da      	ldr	r2, [r3, #28]
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	4932      	ldr	r1, [pc, #200]	@ (8019928 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8019860:	400a      	ands	r2, r1
 8019862:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	69d9      	ldr	r1, [r3, #28]
 801986a:	68bb      	ldr	r3, [r7, #8]
 801986c:	691b      	ldr	r3, [r3, #16]
 801986e:	021a      	lsls	r2, r3, #8
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	430a      	orrs	r2, r1
 8019876:	61da      	str	r2, [r3, #28]
      break;
 8019878:	e048      	b.n	801990c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	68ba      	ldr	r2, [r7, #8]
 8019880:	0011      	movs	r1, r2
 8019882:	0018      	movs	r0, r3
 8019884:	f000 fb90 	bl	8019fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	2108      	movs	r1, #8
 8019894:	430a      	orrs	r2, r1
 8019896:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	2104      	movs	r1, #4
 80198a4:	438a      	bics	r2, r1
 80198a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80198ae:	68bb      	ldr	r3, [r7, #8]
 80198b0:	691a      	ldr	r2, [r3, #16]
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	430a      	orrs	r2, r1
 80198b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80198ba:	e027      	b.n	801990c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	68ba      	ldr	r2, [r7, #8]
 80198c2:	0011      	movs	r1, r2
 80198c4:	0018      	movs	r0, r3
 80198c6:	f000 fbc9 	bl	801a05c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	2180      	movs	r1, #128	@ 0x80
 80198d6:	0109      	lsls	r1, r1, #4
 80198d8:	430a      	orrs	r2, r1
 80198da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	4910      	ldr	r1, [pc, #64]	@ (8019928 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80198e8:	400a      	ands	r2, r1
 80198ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	691b      	ldr	r3, [r3, #16]
 80198f6:	021a      	lsls	r2, r3, #8
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	430a      	orrs	r2, r1
 80198fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8019900:	e004      	b.n	801990c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8019902:	2317      	movs	r3, #23
 8019904:	18fb      	adds	r3, r7, r3
 8019906:	2201      	movs	r2, #1
 8019908:	701a      	strb	r2, [r3, #0]
      break;
 801990a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	223c      	movs	r2, #60	@ 0x3c
 8019910:	2100      	movs	r1, #0
 8019912:	5499      	strb	r1, [r3, r2]

  return status;
 8019914:	2317      	movs	r3, #23
 8019916:	18fb      	adds	r3, r7, r3
 8019918:	781b      	ldrb	r3, [r3, #0]
}
 801991a:	0018      	movs	r0, r3
 801991c:	46bd      	mov	sp, r7
 801991e:	b006      	add	sp, #24
 8019920:	bd80      	pop	{r7, pc}
 8019922:	46c0      	nop			@ (mov r8, r8)
 8019924:	0801c790 	.word	0x0801c790
 8019928:	fffffbff 	.word	0xfffffbff

0801992c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b084      	sub	sp, #16
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
 8019934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019936:	230f      	movs	r3, #15
 8019938:	18fb      	adds	r3, r7, r3
 801993a:	2200      	movs	r2, #0
 801993c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	223c      	movs	r2, #60	@ 0x3c
 8019942:	5c9b      	ldrb	r3, [r3, r2]
 8019944:	2b01      	cmp	r3, #1
 8019946:	d101      	bne.n	801994c <HAL_TIM_ConfigClockSource+0x20>
 8019948:	2302      	movs	r3, #2
 801994a:	e0c0      	b.n	8019ace <HAL_TIM_ConfigClockSource+0x1a2>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	223c      	movs	r2, #60	@ 0x3c
 8019950:	2101      	movs	r1, #1
 8019952:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	223d      	movs	r2, #61	@ 0x3d
 8019958:	2102      	movs	r1, #2
 801995a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	689b      	ldr	r3, [r3, #8]
 8019962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	4a5c      	ldr	r2, [pc, #368]	@ (8019ad8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8019968:	4013      	ands	r3, r2
 801996a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	4a5b      	ldr	r2, [pc, #364]	@ (8019adc <HAL_TIM_ConfigClockSource+0x1b0>)
 8019970:	4013      	ands	r3, r2
 8019972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	68ba      	ldr	r2, [r7, #8]
 801997a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	4a57      	ldr	r2, [pc, #348]	@ (8019ae0 <HAL_TIM_ConfigClockSource+0x1b4>)
 8019982:	4293      	cmp	r3, r2
 8019984:	d100      	bne.n	8019988 <HAL_TIM_ConfigClockSource+0x5c>
 8019986:	e088      	b.n	8019a9a <HAL_TIM_ConfigClockSource+0x16e>
 8019988:	4a55      	ldr	r2, [pc, #340]	@ (8019ae0 <HAL_TIM_ConfigClockSource+0x1b4>)
 801998a:	4293      	cmp	r3, r2
 801998c:	d900      	bls.n	8019990 <HAL_TIM_ConfigClockSource+0x64>
 801998e:	e08d      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 8019990:	2280      	movs	r2, #128	@ 0x80
 8019992:	0192      	lsls	r2, r2, #6
 8019994:	4293      	cmp	r3, r2
 8019996:	d03c      	beq.n	8019a12 <HAL_TIM_ConfigClockSource+0xe6>
 8019998:	2280      	movs	r2, #128	@ 0x80
 801999a:	0192      	lsls	r2, r2, #6
 801999c:	4293      	cmp	r3, r2
 801999e:	d900      	bls.n	80199a2 <HAL_TIM_ConfigClockSource+0x76>
 80199a0:	e084      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199a2:	2280      	movs	r2, #128	@ 0x80
 80199a4:	0152      	lsls	r2, r2, #5
 80199a6:	4293      	cmp	r3, r2
 80199a8:	d100      	bne.n	80199ac <HAL_TIM_ConfigClockSource+0x80>
 80199aa:	e084      	b.n	8019ab6 <HAL_TIM_ConfigClockSource+0x18a>
 80199ac:	2280      	movs	r2, #128	@ 0x80
 80199ae:	0152      	lsls	r2, r2, #5
 80199b0:	4293      	cmp	r3, r2
 80199b2:	d900      	bls.n	80199b6 <HAL_TIM_ConfigClockSource+0x8a>
 80199b4:	e07a      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199b6:	2b70      	cmp	r3, #112	@ 0x70
 80199b8:	d014      	beq.n	80199e4 <HAL_TIM_ConfigClockSource+0xb8>
 80199ba:	d900      	bls.n	80199be <HAL_TIM_ConfigClockSource+0x92>
 80199bc:	e076      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199be:	2b60      	cmp	r3, #96	@ 0x60
 80199c0:	d04b      	beq.n	8019a5a <HAL_TIM_ConfigClockSource+0x12e>
 80199c2:	d900      	bls.n	80199c6 <HAL_TIM_ConfigClockSource+0x9a>
 80199c4:	e072      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199c6:	2b50      	cmp	r3, #80	@ 0x50
 80199c8:	d037      	beq.n	8019a3a <HAL_TIM_ConfigClockSource+0x10e>
 80199ca:	d900      	bls.n	80199ce <HAL_TIM_ConfigClockSource+0xa2>
 80199cc:	e06e      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199ce:	2b40      	cmp	r3, #64	@ 0x40
 80199d0:	d053      	beq.n	8019a7a <HAL_TIM_ConfigClockSource+0x14e>
 80199d2:	d86b      	bhi.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199d4:	2b20      	cmp	r3, #32
 80199d6:	d060      	beq.n	8019a9a <HAL_TIM_ConfigClockSource+0x16e>
 80199d8:	d868      	bhi.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d05d      	beq.n	8019a9a <HAL_TIM_ConfigClockSource+0x16e>
 80199de:	2b10      	cmp	r3, #16
 80199e0:	d05b      	beq.n	8019a9a <HAL_TIM_ConfigClockSource+0x16e>
 80199e2:	e063      	b.n	8019aac <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80199f4:	f000 fc0c 	bl	801a210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	689b      	ldr	r3, [r3, #8]
 80199fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8019a00:	68bb      	ldr	r3, [r7, #8]
 8019a02:	2277      	movs	r2, #119	@ 0x77
 8019a04:	4313      	orrs	r3, r2
 8019a06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	68ba      	ldr	r2, [r7, #8]
 8019a0e:	609a      	str	r2, [r3, #8]
      break;
 8019a10:	e052      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8019a16:	683b      	ldr	r3, [r7, #0]
 8019a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8019a1e:	683b      	ldr	r3, [r7, #0]
 8019a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8019a22:	f000 fbf5 	bl	801a210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	689a      	ldr	r2, [r3, #8]
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	2180      	movs	r1, #128	@ 0x80
 8019a32:	01c9      	lsls	r1, r1, #7
 8019a34:	430a      	orrs	r2, r1
 8019a36:	609a      	str	r2, [r3, #8]
      break;
 8019a38:	e03e      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019a3e:	683b      	ldr	r3, [r7, #0]
 8019a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019a46:	001a      	movs	r2, r3
 8019a48:	f000 fb66 	bl	801a118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	2150      	movs	r1, #80	@ 0x50
 8019a52:	0018      	movs	r0, r3
 8019a54:	f000 fbc0 	bl	801a1d8 <TIM_ITRx_SetConfig>
      break;
 8019a58:	e02e      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8019a66:	001a      	movs	r2, r3
 8019a68:	f000 fb84 	bl	801a174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	2160      	movs	r1, #96	@ 0x60
 8019a72:	0018      	movs	r0, r3
 8019a74:	f000 fbb0 	bl	801a1d8 <TIM_ITRx_SetConfig>
      break;
 8019a78:	e01e      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019a7e:	683b      	ldr	r3, [r7, #0]
 8019a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019a86:	001a      	movs	r2, r3
 8019a88:	f000 fb46 	bl	801a118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	2140      	movs	r1, #64	@ 0x40
 8019a92:	0018      	movs	r0, r3
 8019a94:	f000 fba0 	bl	801a1d8 <TIM_ITRx_SetConfig>
      break;
 8019a98:	e00e      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	681a      	ldr	r2, [r3, #0]
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	0019      	movs	r1, r3
 8019aa4:	0010      	movs	r0, r2
 8019aa6:	f000 fb97 	bl	801a1d8 <TIM_ITRx_SetConfig>
      break;
 8019aaa:	e005      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 8019aac:	230f      	movs	r3, #15
 8019aae:	18fb      	adds	r3, r7, r3
 8019ab0:	2201      	movs	r2, #1
 8019ab2:	701a      	strb	r2, [r3, #0]
      break;
 8019ab4:	e000      	b.n	8019ab8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8019ab6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	223d      	movs	r2, #61	@ 0x3d
 8019abc:	2101      	movs	r1, #1
 8019abe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	223c      	movs	r2, #60	@ 0x3c
 8019ac4:	2100      	movs	r1, #0
 8019ac6:	5499      	strb	r1, [r3, r2]

  return status;
 8019ac8:	230f      	movs	r3, #15
 8019aca:	18fb      	adds	r3, r7, r3
 8019acc:	781b      	ldrb	r3, [r3, #0]
}
 8019ace:	0018      	movs	r0, r3
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	b004      	add	sp, #16
 8019ad4:	bd80      	pop	{r7, pc}
 8019ad6:	46c0      	nop			@ (mov r8, r8)
 8019ad8:	ffceff88 	.word	0xffceff88
 8019adc:	ffff00ff 	.word	0xffff00ff
 8019ae0:	00100030 	.word	0x00100030

08019ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b084      	sub	sp, #16
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
 8019aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	4a35      	ldr	r2, [pc, #212]	@ (8019bcc <TIM_Base_SetConfig+0xe8>)
 8019af8:	4293      	cmp	r3, r2
 8019afa:	d008      	beq.n	8019b0e <TIM_Base_SetConfig+0x2a>
 8019afc:	687a      	ldr	r2, [r7, #4]
 8019afe:	2380      	movs	r3, #128	@ 0x80
 8019b00:	05db      	lsls	r3, r3, #23
 8019b02:	429a      	cmp	r2, r3
 8019b04:	d003      	beq.n	8019b0e <TIM_Base_SetConfig+0x2a>
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	4a31      	ldr	r2, [pc, #196]	@ (8019bd0 <TIM_Base_SetConfig+0xec>)
 8019b0a:	4293      	cmp	r3, r2
 8019b0c:	d108      	bne.n	8019b20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	2270      	movs	r2, #112	@ 0x70
 8019b12:	4393      	bics	r3, r2
 8019b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	68fa      	ldr	r2, [r7, #12]
 8019b1c:	4313      	orrs	r3, r2
 8019b1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	4a2a      	ldr	r2, [pc, #168]	@ (8019bcc <TIM_Base_SetConfig+0xe8>)
 8019b24:	4293      	cmp	r3, r2
 8019b26:	d010      	beq.n	8019b4a <TIM_Base_SetConfig+0x66>
 8019b28:	687a      	ldr	r2, [r7, #4]
 8019b2a:	2380      	movs	r3, #128	@ 0x80
 8019b2c:	05db      	lsls	r3, r3, #23
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d00b      	beq.n	8019b4a <TIM_Base_SetConfig+0x66>
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	4a26      	ldr	r2, [pc, #152]	@ (8019bd0 <TIM_Base_SetConfig+0xec>)
 8019b36:	4293      	cmp	r3, r2
 8019b38:	d007      	beq.n	8019b4a <TIM_Base_SetConfig+0x66>
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	4a25      	ldr	r2, [pc, #148]	@ (8019bd4 <TIM_Base_SetConfig+0xf0>)
 8019b3e:	4293      	cmp	r3, r2
 8019b40:	d003      	beq.n	8019b4a <TIM_Base_SetConfig+0x66>
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	4a24      	ldr	r2, [pc, #144]	@ (8019bd8 <TIM_Base_SetConfig+0xf4>)
 8019b46:	4293      	cmp	r3, r2
 8019b48:	d108      	bne.n	8019b5c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	4a23      	ldr	r2, [pc, #140]	@ (8019bdc <TIM_Base_SetConfig+0xf8>)
 8019b4e:	4013      	ands	r3, r2
 8019b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	68db      	ldr	r3, [r3, #12]
 8019b56:	68fa      	ldr	r2, [r7, #12]
 8019b58:	4313      	orrs	r3, r2
 8019b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	2280      	movs	r2, #128	@ 0x80
 8019b60:	4393      	bics	r3, r2
 8019b62:	001a      	movs	r2, r3
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	695b      	ldr	r3, [r3, #20]
 8019b68:	4313      	orrs	r3, r2
 8019b6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	68fa      	ldr	r2, [r7, #12]
 8019b70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019b72:	683b      	ldr	r3, [r7, #0]
 8019b74:	689a      	ldr	r2, [r3, #8]
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	681a      	ldr	r2, [r3, #0]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	4a11      	ldr	r2, [pc, #68]	@ (8019bcc <TIM_Base_SetConfig+0xe8>)
 8019b86:	4293      	cmp	r3, r2
 8019b88:	d007      	beq.n	8019b9a <TIM_Base_SetConfig+0xb6>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	4a11      	ldr	r2, [pc, #68]	@ (8019bd4 <TIM_Base_SetConfig+0xf0>)
 8019b8e:	4293      	cmp	r3, r2
 8019b90:	d003      	beq.n	8019b9a <TIM_Base_SetConfig+0xb6>
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	4a10      	ldr	r2, [pc, #64]	@ (8019bd8 <TIM_Base_SetConfig+0xf4>)
 8019b96:	4293      	cmp	r3, r2
 8019b98:	d103      	bne.n	8019ba2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	691a      	ldr	r2, [r3, #16]
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	2201      	movs	r2, #1
 8019ba6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	691b      	ldr	r3, [r3, #16]
 8019bac:	2201      	movs	r2, #1
 8019bae:	4013      	ands	r3, r2
 8019bb0:	2b01      	cmp	r3, #1
 8019bb2:	d106      	bne.n	8019bc2 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	691b      	ldr	r3, [r3, #16]
 8019bb8:	2201      	movs	r2, #1
 8019bba:	4393      	bics	r3, r2
 8019bbc:	001a      	movs	r2, r3
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	611a      	str	r2, [r3, #16]
  }
}
 8019bc2:	46c0      	nop			@ (mov r8, r8)
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	b004      	add	sp, #16
 8019bc8:	bd80      	pop	{r7, pc}
 8019bca:	46c0      	nop			@ (mov r8, r8)
 8019bcc:	40012c00 	.word	0x40012c00
 8019bd0:	40000400 	.word	0x40000400
 8019bd4:	40014000 	.word	0x40014000
 8019bd8:	40014400 	.word	0x40014400
 8019bdc:	fffffcff 	.word	0xfffffcff

08019be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b086      	sub	sp, #24
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
 8019be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	6a1b      	ldr	r3, [r3, #32]
 8019bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6a1b      	ldr	r3, [r3, #32]
 8019bf4:	2201      	movs	r2, #1
 8019bf6:	4393      	bics	r3, r2
 8019bf8:	001a      	movs	r2, r3
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	685b      	ldr	r3, [r3, #4]
 8019c02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	699b      	ldr	r3, [r3, #24]
 8019c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8019cc8 <TIM_OC1_SetConfig+0xe8>)
 8019c0e:	4013      	ands	r3, r2
 8019c10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	2203      	movs	r2, #3
 8019c16:	4393      	bics	r3, r2
 8019c18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	68fa      	ldr	r2, [r7, #12]
 8019c20:	4313      	orrs	r3, r2
 8019c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019c24:	697b      	ldr	r3, [r7, #20]
 8019c26:	2202      	movs	r2, #2
 8019c28:	4393      	bics	r3, r2
 8019c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	689b      	ldr	r3, [r3, #8]
 8019c30:	697a      	ldr	r2, [r7, #20]
 8019c32:	4313      	orrs	r3, r2
 8019c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	4a24      	ldr	r2, [pc, #144]	@ (8019ccc <TIM_OC1_SetConfig+0xec>)
 8019c3a:	4293      	cmp	r3, r2
 8019c3c:	d007      	beq.n	8019c4e <TIM_OC1_SetConfig+0x6e>
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	4a23      	ldr	r2, [pc, #140]	@ (8019cd0 <TIM_OC1_SetConfig+0xf0>)
 8019c42:	4293      	cmp	r3, r2
 8019c44:	d003      	beq.n	8019c4e <TIM_OC1_SetConfig+0x6e>
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	4a22      	ldr	r2, [pc, #136]	@ (8019cd4 <TIM_OC1_SetConfig+0xf4>)
 8019c4a:	4293      	cmp	r3, r2
 8019c4c:	d10c      	bne.n	8019c68 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	2208      	movs	r2, #8
 8019c52:	4393      	bics	r3, r2
 8019c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	68db      	ldr	r3, [r3, #12]
 8019c5a:	697a      	ldr	r2, [r7, #20]
 8019c5c:	4313      	orrs	r3, r2
 8019c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8019c60:	697b      	ldr	r3, [r7, #20]
 8019c62:	2204      	movs	r2, #4
 8019c64:	4393      	bics	r3, r2
 8019c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	4a18      	ldr	r2, [pc, #96]	@ (8019ccc <TIM_OC1_SetConfig+0xec>)
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d007      	beq.n	8019c80 <TIM_OC1_SetConfig+0xa0>
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	4a17      	ldr	r2, [pc, #92]	@ (8019cd0 <TIM_OC1_SetConfig+0xf0>)
 8019c74:	4293      	cmp	r3, r2
 8019c76:	d003      	beq.n	8019c80 <TIM_OC1_SetConfig+0xa0>
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	4a16      	ldr	r2, [pc, #88]	@ (8019cd4 <TIM_OC1_SetConfig+0xf4>)
 8019c7c:	4293      	cmp	r3, r2
 8019c7e:	d111      	bne.n	8019ca4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8019c80:	693b      	ldr	r3, [r7, #16]
 8019c82:	4a15      	ldr	r2, [pc, #84]	@ (8019cd8 <TIM_OC1_SetConfig+0xf8>)
 8019c84:	4013      	ands	r3, r2
 8019c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8019c88:	693b      	ldr	r3, [r7, #16]
 8019c8a:	4a14      	ldr	r2, [pc, #80]	@ (8019cdc <TIM_OC1_SetConfig+0xfc>)
 8019c8c:	4013      	ands	r3, r2
 8019c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	695b      	ldr	r3, [r3, #20]
 8019c94:	693a      	ldr	r2, [r7, #16]
 8019c96:	4313      	orrs	r3, r2
 8019c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	699b      	ldr	r3, [r3, #24]
 8019c9e:	693a      	ldr	r2, [r7, #16]
 8019ca0:	4313      	orrs	r3, r2
 8019ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	693a      	ldr	r2, [r7, #16]
 8019ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	68fa      	ldr	r2, [r7, #12]
 8019cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8019cb0:	683b      	ldr	r3, [r7, #0]
 8019cb2:	685a      	ldr	r2, [r3, #4]
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	697a      	ldr	r2, [r7, #20]
 8019cbc:	621a      	str	r2, [r3, #32]
}
 8019cbe:	46c0      	nop			@ (mov r8, r8)
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	b006      	add	sp, #24
 8019cc4:	bd80      	pop	{r7, pc}
 8019cc6:	46c0      	nop			@ (mov r8, r8)
 8019cc8:	fffeff8f 	.word	0xfffeff8f
 8019ccc:	40012c00 	.word	0x40012c00
 8019cd0:	40014000 	.word	0x40014000
 8019cd4:	40014400 	.word	0x40014400
 8019cd8:	fffffeff 	.word	0xfffffeff
 8019cdc:	fffffdff 	.word	0xfffffdff

08019ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b086      	sub	sp, #24
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
 8019ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	6a1b      	ldr	r3, [r3, #32]
 8019cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6a1b      	ldr	r3, [r3, #32]
 8019cf4:	2210      	movs	r2, #16
 8019cf6:	4393      	bics	r3, r2
 8019cf8:	001a      	movs	r2, r3
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	685b      	ldr	r3, [r3, #4]
 8019d02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	699b      	ldr	r3, [r3, #24]
 8019d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8019dc0 <TIM_OC2_SetConfig+0xe0>)
 8019d0e:	4013      	ands	r3, r2
 8019d10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	4a2b      	ldr	r2, [pc, #172]	@ (8019dc4 <TIM_OC2_SetConfig+0xe4>)
 8019d16:	4013      	ands	r3, r2
 8019d18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	021b      	lsls	r3, r3, #8
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	4313      	orrs	r3, r2
 8019d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	2220      	movs	r2, #32
 8019d2a:	4393      	bics	r3, r2
 8019d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	689b      	ldr	r3, [r3, #8]
 8019d32:	011b      	lsls	r3, r3, #4
 8019d34:	697a      	ldr	r2, [r7, #20]
 8019d36:	4313      	orrs	r3, r2
 8019d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	4a22      	ldr	r2, [pc, #136]	@ (8019dc8 <TIM_OC2_SetConfig+0xe8>)
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	d10d      	bne.n	8019d5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	2280      	movs	r2, #128	@ 0x80
 8019d46:	4393      	bics	r3, r2
 8019d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8019d4a:	683b      	ldr	r3, [r7, #0]
 8019d4c:	68db      	ldr	r3, [r3, #12]
 8019d4e:	011b      	lsls	r3, r3, #4
 8019d50:	697a      	ldr	r2, [r7, #20]
 8019d52:	4313      	orrs	r3, r2
 8019d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8019d56:	697b      	ldr	r3, [r7, #20]
 8019d58:	2240      	movs	r2, #64	@ 0x40
 8019d5a:	4393      	bics	r3, r2
 8019d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	4a19      	ldr	r2, [pc, #100]	@ (8019dc8 <TIM_OC2_SetConfig+0xe8>)
 8019d62:	4293      	cmp	r3, r2
 8019d64:	d007      	beq.n	8019d76 <TIM_OC2_SetConfig+0x96>
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	4a18      	ldr	r2, [pc, #96]	@ (8019dcc <TIM_OC2_SetConfig+0xec>)
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	d003      	beq.n	8019d76 <TIM_OC2_SetConfig+0x96>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	4a17      	ldr	r2, [pc, #92]	@ (8019dd0 <TIM_OC2_SetConfig+0xf0>)
 8019d72:	4293      	cmp	r3, r2
 8019d74:	d113      	bne.n	8019d9e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	4a16      	ldr	r2, [pc, #88]	@ (8019dd4 <TIM_OC2_SetConfig+0xf4>)
 8019d7a:	4013      	ands	r3, r2
 8019d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8019d7e:	693b      	ldr	r3, [r7, #16]
 8019d80:	4a15      	ldr	r2, [pc, #84]	@ (8019dd8 <TIM_OC2_SetConfig+0xf8>)
 8019d82:	4013      	ands	r3, r2
 8019d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	695b      	ldr	r3, [r3, #20]
 8019d8a:	009b      	lsls	r3, r3, #2
 8019d8c:	693a      	ldr	r2, [r7, #16]
 8019d8e:	4313      	orrs	r3, r2
 8019d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	699b      	ldr	r3, [r3, #24]
 8019d96:	009b      	lsls	r3, r3, #2
 8019d98:	693a      	ldr	r2, [r7, #16]
 8019d9a:	4313      	orrs	r3, r2
 8019d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	693a      	ldr	r2, [r7, #16]
 8019da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	68fa      	ldr	r2, [r7, #12]
 8019da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	685a      	ldr	r2, [r3, #4]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	697a      	ldr	r2, [r7, #20]
 8019db6:	621a      	str	r2, [r3, #32]
}
 8019db8:	46c0      	nop			@ (mov r8, r8)
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	b006      	add	sp, #24
 8019dbe:	bd80      	pop	{r7, pc}
 8019dc0:	feff8fff 	.word	0xfeff8fff
 8019dc4:	fffffcff 	.word	0xfffffcff
 8019dc8:	40012c00 	.word	0x40012c00
 8019dcc:	40014000 	.word	0x40014000
 8019dd0:	40014400 	.word	0x40014400
 8019dd4:	fffffbff 	.word	0xfffffbff
 8019dd8:	fffff7ff 	.word	0xfffff7ff

08019ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b086      	sub	sp, #24
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	6a1b      	ldr	r3, [r3, #32]
 8019dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	6a1b      	ldr	r3, [r3, #32]
 8019df0:	4a31      	ldr	r2, [pc, #196]	@ (8019eb8 <TIM_OC3_SetConfig+0xdc>)
 8019df2:	401a      	ands	r2, r3
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	685b      	ldr	r3, [r3, #4]
 8019dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	69db      	ldr	r3, [r3, #28]
 8019e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	4a2d      	ldr	r2, [pc, #180]	@ (8019ebc <TIM_OC3_SetConfig+0xe0>)
 8019e08:	4013      	ands	r3, r2
 8019e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	2203      	movs	r2, #3
 8019e10:	4393      	bics	r3, r2
 8019e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	68fa      	ldr	r2, [r7, #12]
 8019e1a:	4313      	orrs	r3, r2
 8019e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019e1e:	697b      	ldr	r3, [r7, #20]
 8019e20:	4a27      	ldr	r2, [pc, #156]	@ (8019ec0 <TIM_OC3_SetConfig+0xe4>)
 8019e22:	4013      	ands	r3, r2
 8019e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019e26:	683b      	ldr	r3, [r7, #0]
 8019e28:	689b      	ldr	r3, [r3, #8]
 8019e2a:	021b      	lsls	r3, r3, #8
 8019e2c:	697a      	ldr	r2, [r7, #20]
 8019e2e:	4313      	orrs	r3, r2
 8019e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	4a23      	ldr	r2, [pc, #140]	@ (8019ec4 <TIM_OC3_SetConfig+0xe8>)
 8019e36:	4293      	cmp	r3, r2
 8019e38:	d10d      	bne.n	8019e56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	4a22      	ldr	r2, [pc, #136]	@ (8019ec8 <TIM_OC3_SetConfig+0xec>)
 8019e3e:	4013      	ands	r3, r2
 8019e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8019e42:	683b      	ldr	r3, [r7, #0]
 8019e44:	68db      	ldr	r3, [r3, #12]
 8019e46:	021b      	lsls	r3, r3, #8
 8019e48:	697a      	ldr	r2, [r7, #20]
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8019e4e:	697b      	ldr	r3, [r7, #20]
 8019e50:	4a1e      	ldr	r2, [pc, #120]	@ (8019ecc <TIM_OC3_SetConfig+0xf0>)
 8019e52:	4013      	ands	r3, r2
 8019e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	4a1a      	ldr	r2, [pc, #104]	@ (8019ec4 <TIM_OC3_SetConfig+0xe8>)
 8019e5a:	4293      	cmp	r3, r2
 8019e5c:	d007      	beq.n	8019e6e <TIM_OC3_SetConfig+0x92>
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	4a1b      	ldr	r2, [pc, #108]	@ (8019ed0 <TIM_OC3_SetConfig+0xf4>)
 8019e62:	4293      	cmp	r3, r2
 8019e64:	d003      	beq.n	8019e6e <TIM_OC3_SetConfig+0x92>
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	4a1a      	ldr	r2, [pc, #104]	@ (8019ed4 <TIM_OC3_SetConfig+0xf8>)
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	d113      	bne.n	8019e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8019e6e:	693b      	ldr	r3, [r7, #16]
 8019e70:	4a19      	ldr	r2, [pc, #100]	@ (8019ed8 <TIM_OC3_SetConfig+0xfc>)
 8019e72:	4013      	ands	r3, r2
 8019e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	4a18      	ldr	r2, [pc, #96]	@ (8019edc <TIM_OC3_SetConfig+0x100>)
 8019e7a:	4013      	ands	r3, r2
 8019e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	695b      	ldr	r3, [r3, #20]
 8019e82:	011b      	lsls	r3, r3, #4
 8019e84:	693a      	ldr	r2, [r7, #16]
 8019e86:	4313      	orrs	r3, r2
 8019e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	699b      	ldr	r3, [r3, #24]
 8019e8e:	011b      	lsls	r3, r3, #4
 8019e90:	693a      	ldr	r2, [r7, #16]
 8019e92:	4313      	orrs	r3, r2
 8019e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	693a      	ldr	r2, [r7, #16]
 8019e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	68fa      	ldr	r2, [r7, #12]
 8019ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8019ea2:	683b      	ldr	r3, [r7, #0]
 8019ea4:	685a      	ldr	r2, [r3, #4]
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	697a      	ldr	r2, [r7, #20]
 8019eae:	621a      	str	r2, [r3, #32]
}
 8019eb0:	46c0      	nop			@ (mov r8, r8)
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	b006      	add	sp, #24
 8019eb6:	bd80      	pop	{r7, pc}
 8019eb8:	fffffeff 	.word	0xfffffeff
 8019ebc:	fffeff8f 	.word	0xfffeff8f
 8019ec0:	fffffdff 	.word	0xfffffdff
 8019ec4:	40012c00 	.word	0x40012c00
 8019ec8:	fffff7ff 	.word	0xfffff7ff
 8019ecc:	fffffbff 	.word	0xfffffbff
 8019ed0:	40014000 	.word	0x40014000
 8019ed4:	40014400 	.word	0x40014400
 8019ed8:	ffffefff 	.word	0xffffefff
 8019edc:	ffffdfff 	.word	0xffffdfff

08019ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b086      	sub	sp, #24
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
 8019ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	6a1b      	ldr	r3, [r3, #32]
 8019eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6a1b      	ldr	r3, [r3, #32]
 8019ef4:	4a24      	ldr	r2, [pc, #144]	@ (8019f88 <TIM_OC4_SetConfig+0xa8>)
 8019ef6:	401a      	ands	r2, r3
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	685b      	ldr	r3, [r3, #4]
 8019f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	69db      	ldr	r3, [r3, #28]
 8019f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	4a20      	ldr	r2, [pc, #128]	@ (8019f8c <TIM_OC4_SetConfig+0xac>)
 8019f0c:	4013      	ands	r3, r2
 8019f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	4a1f      	ldr	r2, [pc, #124]	@ (8019f90 <TIM_OC4_SetConfig+0xb0>)
 8019f14:	4013      	ands	r3, r2
 8019f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	021b      	lsls	r3, r3, #8
 8019f1e:	68fa      	ldr	r2, [r7, #12]
 8019f20:	4313      	orrs	r3, r2
 8019f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019f24:	693b      	ldr	r3, [r7, #16]
 8019f26:	4a1b      	ldr	r2, [pc, #108]	@ (8019f94 <TIM_OC4_SetConfig+0xb4>)
 8019f28:	4013      	ands	r3, r2
 8019f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	689b      	ldr	r3, [r3, #8]
 8019f30:	031b      	lsls	r3, r3, #12
 8019f32:	693a      	ldr	r2, [r7, #16]
 8019f34:	4313      	orrs	r3, r2
 8019f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	4a17      	ldr	r2, [pc, #92]	@ (8019f98 <TIM_OC4_SetConfig+0xb8>)
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	d007      	beq.n	8019f50 <TIM_OC4_SetConfig+0x70>
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	4a16      	ldr	r2, [pc, #88]	@ (8019f9c <TIM_OC4_SetConfig+0xbc>)
 8019f44:	4293      	cmp	r3, r2
 8019f46:	d003      	beq.n	8019f50 <TIM_OC4_SetConfig+0x70>
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	4a15      	ldr	r2, [pc, #84]	@ (8019fa0 <TIM_OC4_SetConfig+0xc0>)
 8019f4c:	4293      	cmp	r3, r2
 8019f4e:	d109      	bne.n	8019f64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	4a14      	ldr	r2, [pc, #80]	@ (8019fa4 <TIM_OC4_SetConfig+0xc4>)
 8019f54:	4013      	ands	r3, r2
 8019f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	695b      	ldr	r3, [r3, #20]
 8019f5c:	019b      	lsls	r3, r3, #6
 8019f5e:	697a      	ldr	r2, [r7, #20]
 8019f60:	4313      	orrs	r3, r2
 8019f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	697a      	ldr	r2, [r7, #20]
 8019f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	68fa      	ldr	r2, [r7, #12]
 8019f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	685a      	ldr	r2, [r3, #4]
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	693a      	ldr	r2, [r7, #16]
 8019f7c:	621a      	str	r2, [r3, #32]
}
 8019f7e:	46c0      	nop			@ (mov r8, r8)
 8019f80:	46bd      	mov	sp, r7
 8019f82:	b006      	add	sp, #24
 8019f84:	bd80      	pop	{r7, pc}
 8019f86:	46c0      	nop			@ (mov r8, r8)
 8019f88:	ffffefff 	.word	0xffffefff
 8019f8c:	feff8fff 	.word	0xfeff8fff
 8019f90:	fffffcff 	.word	0xfffffcff
 8019f94:	ffffdfff 	.word	0xffffdfff
 8019f98:	40012c00 	.word	0x40012c00
 8019f9c:	40014000 	.word	0x40014000
 8019fa0:	40014400 	.word	0x40014400
 8019fa4:	ffffbfff 	.word	0xffffbfff

08019fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b086      	sub	sp, #24
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	6a1b      	ldr	r3, [r3, #32]
 8019fb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	6a1b      	ldr	r3, [r3, #32]
 8019fbc:	4a21      	ldr	r2, [pc, #132]	@ (801a044 <TIM_OC5_SetConfig+0x9c>)
 8019fbe:	401a      	ands	r2, r3
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	685b      	ldr	r3, [r3, #4]
 8019fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	4a1d      	ldr	r2, [pc, #116]	@ (801a048 <TIM_OC5_SetConfig+0xa0>)
 8019fd4:	4013      	ands	r3, r2
 8019fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019fd8:	683b      	ldr	r3, [r7, #0]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	68fa      	ldr	r2, [r7, #12]
 8019fde:	4313      	orrs	r3, r2
 8019fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8019fe2:	693b      	ldr	r3, [r7, #16]
 8019fe4:	4a19      	ldr	r2, [pc, #100]	@ (801a04c <TIM_OC5_SetConfig+0xa4>)
 8019fe6:	4013      	ands	r3, r2
 8019fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	689b      	ldr	r3, [r3, #8]
 8019fee:	041b      	lsls	r3, r3, #16
 8019ff0:	693a      	ldr	r2, [r7, #16]
 8019ff2:	4313      	orrs	r3, r2
 8019ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	4a15      	ldr	r2, [pc, #84]	@ (801a050 <TIM_OC5_SetConfig+0xa8>)
 8019ffa:	4293      	cmp	r3, r2
 8019ffc:	d007      	beq.n	801a00e <TIM_OC5_SetConfig+0x66>
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	4a14      	ldr	r2, [pc, #80]	@ (801a054 <TIM_OC5_SetConfig+0xac>)
 801a002:	4293      	cmp	r3, r2
 801a004:	d003      	beq.n	801a00e <TIM_OC5_SetConfig+0x66>
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	4a13      	ldr	r2, [pc, #76]	@ (801a058 <TIM_OC5_SetConfig+0xb0>)
 801a00a:	4293      	cmp	r3, r2
 801a00c:	d109      	bne.n	801a022 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	4a0c      	ldr	r2, [pc, #48]	@ (801a044 <TIM_OC5_SetConfig+0x9c>)
 801a012:	4013      	ands	r3, r2
 801a014:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	695b      	ldr	r3, [r3, #20]
 801a01a:	021b      	lsls	r3, r3, #8
 801a01c:	697a      	ldr	r2, [r7, #20]
 801a01e:	4313      	orrs	r3, r2
 801a020:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	697a      	ldr	r2, [r7, #20]
 801a026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	68fa      	ldr	r2, [r7, #12]
 801a02c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	685a      	ldr	r2, [r3, #4]
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	693a      	ldr	r2, [r7, #16]
 801a03a:	621a      	str	r2, [r3, #32]
}
 801a03c:	46c0      	nop			@ (mov r8, r8)
 801a03e:	46bd      	mov	sp, r7
 801a040:	b006      	add	sp, #24
 801a042:	bd80      	pop	{r7, pc}
 801a044:	fffeffff 	.word	0xfffeffff
 801a048:	fffeff8f 	.word	0xfffeff8f
 801a04c:	fffdffff 	.word	0xfffdffff
 801a050:	40012c00 	.word	0x40012c00
 801a054:	40014000 	.word	0x40014000
 801a058:	40014400 	.word	0x40014400

0801a05c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b086      	sub	sp, #24
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
 801a064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	6a1b      	ldr	r3, [r3, #32]
 801a06a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	6a1b      	ldr	r3, [r3, #32]
 801a070:	4a22      	ldr	r2, [pc, #136]	@ (801a0fc <TIM_OC6_SetConfig+0xa0>)
 801a072:	401a      	ands	r2, r3
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	685b      	ldr	r3, [r3, #4]
 801a07c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	4a1e      	ldr	r2, [pc, #120]	@ (801a100 <TIM_OC6_SetConfig+0xa4>)
 801a088:	4013      	ands	r3, r2
 801a08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	021b      	lsls	r3, r3, #8
 801a092:	68fa      	ldr	r2, [r7, #12]
 801a094:	4313      	orrs	r3, r2
 801a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801a098:	693b      	ldr	r3, [r7, #16]
 801a09a:	4a1a      	ldr	r2, [pc, #104]	@ (801a104 <TIM_OC6_SetConfig+0xa8>)
 801a09c:	4013      	ands	r3, r2
 801a09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	689b      	ldr	r3, [r3, #8]
 801a0a4:	051b      	lsls	r3, r3, #20
 801a0a6:	693a      	ldr	r2, [r7, #16]
 801a0a8:	4313      	orrs	r3, r2
 801a0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	4a16      	ldr	r2, [pc, #88]	@ (801a108 <TIM_OC6_SetConfig+0xac>)
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d007      	beq.n	801a0c4 <TIM_OC6_SetConfig+0x68>
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	4a15      	ldr	r2, [pc, #84]	@ (801a10c <TIM_OC6_SetConfig+0xb0>)
 801a0b8:	4293      	cmp	r3, r2
 801a0ba:	d003      	beq.n	801a0c4 <TIM_OC6_SetConfig+0x68>
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	4a14      	ldr	r2, [pc, #80]	@ (801a110 <TIM_OC6_SetConfig+0xb4>)
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	d109      	bne.n	801a0d8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801a0c4:	697b      	ldr	r3, [r7, #20]
 801a0c6:	4a13      	ldr	r2, [pc, #76]	@ (801a114 <TIM_OC6_SetConfig+0xb8>)
 801a0c8:	4013      	ands	r3, r2
 801a0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801a0cc:	683b      	ldr	r3, [r7, #0]
 801a0ce:	695b      	ldr	r3, [r3, #20]
 801a0d0:	029b      	lsls	r3, r3, #10
 801a0d2:	697a      	ldr	r2, [r7, #20]
 801a0d4:	4313      	orrs	r3, r2
 801a0d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	697a      	ldr	r2, [r7, #20]
 801a0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	68fa      	ldr	r2, [r7, #12]
 801a0e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	685a      	ldr	r2, [r3, #4]
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	693a      	ldr	r2, [r7, #16]
 801a0f0:	621a      	str	r2, [r3, #32]
}
 801a0f2:	46c0      	nop			@ (mov r8, r8)
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	b006      	add	sp, #24
 801a0f8:	bd80      	pop	{r7, pc}
 801a0fa:	46c0      	nop			@ (mov r8, r8)
 801a0fc:	ffefffff 	.word	0xffefffff
 801a100:	feff8fff 	.word	0xfeff8fff
 801a104:	ffdfffff 	.word	0xffdfffff
 801a108:	40012c00 	.word	0x40012c00
 801a10c:	40014000 	.word	0x40014000
 801a110:	40014400 	.word	0x40014400
 801a114:	fffbffff 	.word	0xfffbffff

0801a118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b086      	sub	sp, #24
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	60f8      	str	r0, [r7, #12]
 801a120:	60b9      	str	r1, [r7, #8]
 801a122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	6a1b      	ldr	r3, [r3, #32]
 801a128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	6a1b      	ldr	r3, [r3, #32]
 801a12e:	2201      	movs	r2, #1
 801a130:	4393      	bics	r3, r2
 801a132:	001a      	movs	r2, r3
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	699b      	ldr	r3, [r3, #24]
 801a13c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a13e:	693b      	ldr	r3, [r7, #16]
 801a140:	22f0      	movs	r2, #240	@ 0xf0
 801a142:	4393      	bics	r3, r2
 801a144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	011b      	lsls	r3, r3, #4
 801a14a:	693a      	ldr	r2, [r7, #16]
 801a14c:	4313      	orrs	r3, r2
 801a14e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	220a      	movs	r2, #10
 801a154:	4393      	bics	r3, r2
 801a156:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801a158:	697a      	ldr	r2, [r7, #20]
 801a15a:	68bb      	ldr	r3, [r7, #8]
 801a15c:	4313      	orrs	r3, r2
 801a15e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	693a      	ldr	r2, [r7, #16]
 801a164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	697a      	ldr	r2, [r7, #20]
 801a16a:	621a      	str	r2, [r3, #32]
}
 801a16c:	46c0      	nop			@ (mov r8, r8)
 801a16e:	46bd      	mov	sp, r7
 801a170:	b006      	add	sp, #24
 801a172:	bd80      	pop	{r7, pc}

0801a174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b086      	sub	sp, #24
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60f8      	str	r0, [r7, #12]
 801a17c:	60b9      	str	r1, [r7, #8]
 801a17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	6a1b      	ldr	r3, [r3, #32]
 801a184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	6a1b      	ldr	r3, [r3, #32]
 801a18a:	2210      	movs	r2, #16
 801a18c:	4393      	bics	r3, r2
 801a18e:	001a      	movs	r2, r3
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	699b      	ldr	r3, [r3, #24]
 801a198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801a19a:	693b      	ldr	r3, [r7, #16]
 801a19c:	4a0d      	ldr	r2, [pc, #52]	@ (801a1d4 <TIM_TI2_ConfigInputStage+0x60>)
 801a19e:	4013      	ands	r3, r2
 801a1a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	031b      	lsls	r3, r3, #12
 801a1a6:	693a      	ldr	r2, [r7, #16]
 801a1a8:	4313      	orrs	r3, r2
 801a1aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	22a0      	movs	r2, #160	@ 0xa0
 801a1b0:	4393      	bics	r3, r2
 801a1b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	011b      	lsls	r3, r3, #4
 801a1b8:	697a      	ldr	r2, [r7, #20]
 801a1ba:	4313      	orrs	r3, r2
 801a1bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	693a      	ldr	r2, [r7, #16]
 801a1c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	697a      	ldr	r2, [r7, #20]
 801a1c8:	621a      	str	r2, [r3, #32]
}
 801a1ca:	46c0      	nop			@ (mov r8, r8)
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	b006      	add	sp, #24
 801a1d0:	bd80      	pop	{r7, pc}
 801a1d2:	46c0      	nop			@ (mov r8, r8)
 801a1d4:	ffff0fff 	.word	0xffff0fff

0801a1d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b084      	sub	sp, #16
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	6078      	str	r0, [r7, #4]
 801a1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	689b      	ldr	r3, [r3, #8]
 801a1e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	4a08      	ldr	r2, [pc, #32]	@ (801a20c <TIM_ITRx_SetConfig+0x34>)
 801a1ec:	4013      	ands	r3, r2
 801a1ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801a1f0:	683a      	ldr	r2, [r7, #0]
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	4313      	orrs	r3, r2
 801a1f6:	2207      	movs	r2, #7
 801a1f8:	4313      	orrs	r3, r2
 801a1fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	68fa      	ldr	r2, [r7, #12]
 801a200:	609a      	str	r2, [r3, #8]
}
 801a202:	46c0      	nop			@ (mov r8, r8)
 801a204:	46bd      	mov	sp, r7
 801a206:	b004      	add	sp, #16
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	46c0      	nop			@ (mov r8, r8)
 801a20c:	ffcfff8f 	.word	0xffcfff8f

0801a210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b086      	sub	sp, #24
 801a214:	af00      	add	r7, sp, #0
 801a216:	60f8      	str	r0, [r7, #12]
 801a218:	60b9      	str	r1, [r7, #8]
 801a21a:	607a      	str	r2, [r7, #4]
 801a21c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	689b      	ldr	r3, [r3, #8]
 801a222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a224:	697b      	ldr	r3, [r7, #20]
 801a226:	4a09      	ldr	r2, [pc, #36]	@ (801a24c <TIM_ETR_SetConfig+0x3c>)
 801a228:	4013      	ands	r3, r2
 801a22a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	021a      	lsls	r2, r3, #8
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	431a      	orrs	r2, r3
 801a234:	68bb      	ldr	r3, [r7, #8]
 801a236:	4313      	orrs	r3, r2
 801a238:	697a      	ldr	r2, [r7, #20]
 801a23a:	4313      	orrs	r3, r2
 801a23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	697a      	ldr	r2, [r7, #20]
 801a242:	609a      	str	r2, [r3, #8]
}
 801a244:	46c0      	nop			@ (mov r8, r8)
 801a246:	46bd      	mov	sp, r7
 801a248:	b006      	add	sp, #24
 801a24a:	bd80      	pop	{r7, pc}
 801a24c:	ffff00ff 	.word	0xffff00ff

0801a250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b086      	sub	sp, #24
 801a254:	af00      	add	r7, sp, #0
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	60b9      	str	r1, [r7, #8]
 801a25a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a25c:	68bb      	ldr	r3, [r7, #8]
 801a25e:	221f      	movs	r2, #31
 801a260:	4013      	ands	r3, r2
 801a262:	2201      	movs	r2, #1
 801a264:	409a      	lsls	r2, r3
 801a266:	0013      	movs	r3, r2
 801a268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	6a1b      	ldr	r3, [r3, #32]
 801a26e:	697a      	ldr	r2, [r7, #20]
 801a270:	43d2      	mvns	r2, r2
 801a272:	401a      	ands	r2, r3
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	6a1a      	ldr	r2, [r3, #32]
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	211f      	movs	r1, #31
 801a280:	400b      	ands	r3, r1
 801a282:	6879      	ldr	r1, [r7, #4]
 801a284:	4099      	lsls	r1, r3
 801a286:	000b      	movs	r3, r1
 801a288:	431a      	orrs	r2, r3
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	621a      	str	r2, [r3, #32]
}
 801a28e:	46c0      	nop			@ (mov r8, r8)
 801a290:	46bd      	mov	sp, r7
 801a292:	b006      	add	sp, #24
 801a294:	bd80      	pop	{r7, pc}
	...

0801a298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b084      	sub	sp, #16
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
 801a2a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	223c      	movs	r2, #60	@ 0x3c
 801a2a6:	5c9b      	ldrb	r3, [r3, r2]
 801a2a8:	2b01      	cmp	r3, #1
 801a2aa:	d101      	bne.n	801a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a2ac:	2302      	movs	r3, #2
 801a2ae:	e055      	b.n	801a35c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	223c      	movs	r2, #60	@ 0x3c
 801a2b4:	2101      	movs	r1, #1
 801a2b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	223d      	movs	r2, #61	@ 0x3d
 801a2bc:	2102      	movs	r1, #2
 801a2be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	685b      	ldr	r3, [r3, #4]
 801a2c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	689b      	ldr	r3, [r3, #8]
 801a2ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4a23      	ldr	r2, [pc, #140]	@ (801a364 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	d108      	bne.n	801a2ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	4a22      	ldr	r2, [pc, #136]	@ (801a368 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801a2de:	4013      	ands	r3, r2
 801a2e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801a2e2:	683b      	ldr	r3, [r7, #0]
 801a2e4:	685b      	ldr	r3, [r3, #4]
 801a2e6:	68fa      	ldr	r2, [r7, #12]
 801a2e8:	4313      	orrs	r3, r2
 801a2ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	2270      	movs	r2, #112	@ 0x70
 801a2f0:	4393      	bics	r3, r2
 801a2f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	68fa      	ldr	r2, [r7, #12]
 801a2fa:	4313      	orrs	r3, r2
 801a2fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	68fa      	ldr	r2, [r7, #12]
 801a304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	4a16      	ldr	r2, [pc, #88]	@ (801a364 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a30c:	4293      	cmp	r3, r2
 801a30e:	d00f      	beq.n	801a330 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681a      	ldr	r2, [r3, #0]
 801a314:	2380      	movs	r3, #128	@ 0x80
 801a316:	05db      	lsls	r3, r3, #23
 801a318:	429a      	cmp	r2, r3
 801a31a:	d009      	beq.n	801a330 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4a12      	ldr	r2, [pc, #72]	@ (801a36c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801a322:	4293      	cmp	r3, r2
 801a324:	d004      	beq.n	801a330 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	4a11      	ldr	r2, [pc, #68]	@ (801a370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801a32c:	4293      	cmp	r3, r2
 801a32e:	d10c      	bne.n	801a34a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a330:	68bb      	ldr	r3, [r7, #8]
 801a332:	2280      	movs	r2, #128	@ 0x80
 801a334:	4393      	bics	r3, r2
 801a336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a338:	683b      	ldr	r3, [r7, #0]
 801a33a:	689b      	ldr	r3, [r3, #8]
 801a33c:	68ba      	ldr	r2, [r7, #8]
 801a33e:	4313      	orrs	r3, r2
 801a340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	68ba      	ldr	r2, [r7, #8]
 801a348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	223d      	movs	r2, #61	@ 0x3d
 801a34e:	2101      	movs	r1, #1
 801a350:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	223c      	movs	r2, #60	@ 0x3c
 801a356:	2100      	movs	r1, #0
 801a358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a35a:	2300      	movs	r3, #0
}
 801a35c:	0018      	movs	r0, r3
 801a35e:	46bd      	mov	sp, r7
 801a360:	b004      	add	sp, #16
 801a362:	bd80      	pop	{r7, pc}
 801a364:	40012c00 	.word	0x40012c00
 801a368:	ff0fffff 	.word	0xff0fffff
 801a36c:	40000400 	.word	0x40000400
 801a370:	40014000 	.word	0x40014000

0801a374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b084      	sub	sp, #16
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
 801a37c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801a37e:	2300      	movs	r3, #0
 801a380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	223c      	movs	r2, #60	@ 0x3c
 801a386:	5c9b      	ldrb	r3, [r3, r2]
 801a388:	2b01      	cmp	r3, #1
 801a38a:	d101      	bne.n	801a390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801a38c:	2302      	movs	r3, #2
 801a38e:	e06f      	b.n	801a470 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	223c      	movs	r2, #60	@ 0x3c
 801a394:	2101      	movs	r1, #1
 801a396:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	22ff      	movs	r2, #255	@ 0xff
 801a39c:	4393      	bics	r3, r2
 801a39e:	001a      	movs	r2, r3
 801a3a0:	683b      	ldr	r3, [r7, #0]
 801a3a2:	68db      	ldr	r3, [r3, #12]
 801a3a4:	4313      	orrs	r3, r2
 801a3a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	4a33      	ldr	r2, [pc, #204]	@ (801a478 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 801a3ac:	401a      	ands	r2, r3
 801a3ae:	683b      	ldr	r3, [r7, #0]
 801a3b0:	689b      	ldr	r3, [r3, #8]
 801a3b2:	4313      	orrs	r3, r2
 801a3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	4a30      	ldr	r2, [pc, #192]	@ (801a47c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 801a3ba:	401a      	ands	r2, r3
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	685b      	ldr	r3, [r3, #4]
 801a3c0:	4313      	orrs	r3, r2
 801a3c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	4a2e      	ldr	r2, [pc, #184]	@ (801a480 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 801a3c8:	401a      	ands	r2, r3
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	4313      	orrs	r3, r2
 801a3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	4a2b      	ldr	r2, [pc, #172]	@ (801a484 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801a3d6:	401a      	ands	r2, r3
 801a3d8:	683b      	ldr	r3, [r7, #0]
 801a3da:	691b      	ldr	r3, [r3, #16]
 801a3dc:	4313      	orrs	r3, r2
 801a3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	4a29      	ldr	r2, [pc, #164]	@ (801a488 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 801a3e4:	401a      	ands	r2, r3
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	695b      	ldr	r3, [r3, #20]
 801a3ea:	4313      	orrs	r3, r2
 801a3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	4a26      	ldr	r2, [pc, #152]	@ (801a48c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 801a3f2:	401a      	ands	r2, r3
 801a3f4:	683b      	ldr	r3, [r7, #0]
 801a3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a3f8:	4313      	orrs	r3, r2
 801a3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	4a24      	ldr	r2, [pc, #144]	@ (801a490 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801a400:	401a      	ands	r2, r3
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	699b      	ldr	r3, [r3, #24]
 801a406:	041b      	lsls	r3, r3, #16
 801a408:	4313      	orrs	r3, r2
 801a40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	4a21      	ldr	r2, [pc, #132]	@ (801a494 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 801a410:	401a      	ands	r2, r3
 801a412:	683b      	ldr	r3, [r7, #0]
 801a414:	69db      	ldr	r3, [r3, #28]
 801a416:	4313      	orrs	r3, r2
 801a418:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	4a1e      	ldr	r2, [pc, #120]	@ (801a498 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 801a420:	4293      	cmp	r3, r2
 801a422:	d11c      	bne.n	801a45e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	4a1d      	ldr	r2, [pc, #116]	@ (801a49c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 801a428:	401a      	ands	r2, r3
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a42e:	051b      	lsls	r3, r3, #20
 801a430:	4313      	orrs	r3, r2
 801a432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	4a1a      	ldr	r2, [pc, #104]	@ (801a4a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 801a438:	401a      	ands	r2, r3
 801a43a:	683b      	ldr	r3, [r7, #0]
 801a43c:	6a1b      	ldr	r3, [r3, #32]
 801a43e:	4313      	orrs	r3, r2
 801a440:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	4a17      	ldr	r2, [pc, #92]	@ (801a4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 801a446:	401a      	ands	r2, r3
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a44c:	4313      	orrs	r3, r2
 801a44e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	4a15      	ldr	r2, [pc, #84]	@ (801a4a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 801a454:	401a      	ands	r2, r3
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a45a:	4313      	orrs	r3, r2
 801a45c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	68fa      	ldr	r2, [r7, #12]
 801a464:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	223c      	movs	r2, #60	@ 0x3c
 801a46a:	2100      	movs	r1, #0
 801a46c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a46e:	2300      	movs	r3, #0
}
 801a470:	0018      	movs	r0, r3
 801a472:	46bd      	mov	sp, r7
 801a474:	b004      	add	sp, #16
 801a476:	bd80      	pop	{r7, pc}
 801a478:	fffffcff 	.word	0xfffffcff
 801a47c:	fffffbff 	.word	0xfffffbff
 801a480:	fffff7ff 	.word	0xfffff7ff
 801a484:	ffffefff 	.word	0xffffefff
 801a488:	ffffdfff 	.word	0xffffdfff
 801a48c:	ffffbfff 	.word	0xffffbfff
 801a490:	fff0ffff 	.word	0xfff0ffff
 801a494:	efffffff 	.word	0xefffffff
 801a498:	40012c00 	.word	0x40012c00
 801a49c:	ff0fffff 	.word	0xff0fffff
 801a4a0:	feffffff 	.word	0xfeffffff
 801a4a4:	fdffffff 	.word	0xfdffffff
 801a4a8:	dfffffff 	.word	0xdfffffff

0801a4ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d101      	bne.n	801a4be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a4ba:	2301      	movs	r3, #1
 801a4bc:	e046      	b.n	801a54c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	2288      	movs	r2, #136	@ 0x88
 801a4c2:	589b      	ldr	r3, [r3, r2]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d107      	bne.n	801a4d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	2284      	movs	r2, #132	@ 0x84
 801a4cc:	2100      	movs	r1, #0
 801a4ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	0018      	movs	r0, r3
 801a4d4:	f7f1 ffd2 	bl	800c47c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	2288      	movs	r2, #136	@ 0x88
 801a4dc:	2124      	movs	r1, #36	@ 0x24
 801a4de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	681a      	ldr	r2, [r3, #0]
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	2101      	movs	r1, #1
 801a4ec:	438a      	bics	r2, r1
 801a4ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d003      	beq.n	801a500 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	0018      	movs	r0, r3
 801a4fc:	f000 ff6a 	bl	801b3d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	0018      	movs	r0, r3
 801a504:	f000 fd94 	bl	801b030 <UART_SetConfig>
 801a508:	0003      	movs	r3, r0
 801a50a:	2b01      	cmp	r3, #1
 801a50c:	d101      	bne.n	801a512 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 801a50e:	2301      	movs	r3, #1
 801a510:	e01c      	b.n	801a54c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	685a      	ldr	r2, [r3, #4]
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	490d      	ldr	r1, [pc, #52]	@ (801a554 <HAL_UART_Init+0xa8>)
 801a51e:	400a      	ands	r2, r1
 801a520:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	689a      	ldr	r2, [r3, #8]
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	212a      	movs	r1, #42	@ 0x2a
 801a52e:	438a      	bics	r2, r1
 801a530:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	681a      	ldr	r2, [r3, #0]
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	2101      	movs	r1, #1
 801a53e:	430a      	orrs	r2, r1
 801a540:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	0018      	movs	r0, r3
 801a546:	f000 fff9 	bl	801b53c <UART_CheckIdleState>
 801a54a:	0003      	movs	r3, r0
}
 801a54c:	0018      	movs	r0, r3
 801a54e:	46bd      	mov	sp, r7
 801a550:	b002      	add	sp, #8
 801a552:	bd80      	pop	{r7, pc}
 801a554:	ffffb7ff 	.word	0xffffb7ff

0801a558 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 801a558:	b580      	push	{r7, lr}
 801a55a:	b082      	sub	sp, #8
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d101      	bne.n	801a56a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801a566:	2301      	movs	r3, #1
 801a568:	e032      	b.n	801a5d0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2288      	movs	r2, #136	@ 0x88
 801a56e:	2124      	movs	r1, #36	@ 0x24
 801a570:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	681a      	ldr	r2, [r3, #0]
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	2101      	movs	r1, #1
 801a57e:	438a      	bics	r2, r1
 801a580:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	2200      	movs	r2, #0
 801a588:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	2200      	movs	r2, #0
 801a590:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	2200      	movs	r2, #0
 801a598:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	0018      	movs	r0, r3
 801a59e:	f7f2 f8db 	bl	800c758 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	2290      	movs	r2, #144	@ 0x90
 801a5a6:	2100      	movs	r1, #0
 801a5a8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	2288      	movs	r2, #136	@ 0x88
 801a5ae:	2100      	movs	r1, #0
 801a5b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	228c      	movs	r2, #140	@ 0x8c
 801a5b6:	2100      	movs	r1, #0
 801a5b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	2200      	movs	r2, #0
 801a5be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	2284      	movs	r2, #132	@ 0x84
 801a5ca:	2100      	movs	r1, #0
 801a5cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a5ce:	2300      	movs	r3, #0
}
 801a5d0:	0018      	movs	r0, r3
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	b002      	add	sp, #8
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b088      	sub	sp, #32
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	60f8      	str	r0, [r7, #12]
 801a5e0:	60b9      	str	r1, [r7, #8]
 801a5e2:	1dbb      	adds	r3, r7, #6
 801a5e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	2288      	movs	r2, #136	@ 0x88
 801a5ea:	589b      	ldr	r3, [r3, r2]
 801a5ec:	2b20      	cmp	r3, #32
 801a5ee:	d000      	beq.n	801a5f2 <HAL_UART_Transmit_DMA+0x1a>
 801a5f0:	e079      	b.n	801a6e6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 801a5f2:	68bb      	ldr	r3, [r7, #8]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d003      	beq.n	801a600 <HAL_UART_Transmit_DMA+0x28>
 801a5f8:	1dbb      	adds	r3, r7, #6
 801a5fa:	881b      	ldrh	r3, [r3, #0]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d101      	bne.n	801a604 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 801a600:	2301      	movs	r3, #1
 801a602:	e071      	b.n	801a6e8 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	689a      	ldr	r2, [r3, #8]
 801a608:	2380      	movs	r3, #128	@ 0x80
 801a60a:	015b      	lsls	r3, r3, #5
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d109      	bne.n	801a624 <HAL_UART_Transmit_DMA+0x4c>
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	691b      	ldr	r3, [r3, #16]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d105      	bne.n	801a624 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801a618:	68bb      	ldr	r3, [r7, #8]
 801a61a:	2201      	movs	r2, #1
 801a61c:	4013      	ands	r3, r2
 801a61e:	d001      	beq.n	801a624 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 801a620:	2301      	movs	r3, #1
 801a622:	e061      	b.n	801a6e8 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	68ba      	ldr	r2, [r7, #8]
 801a628:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	1dba      	adds	r2, r7, #6
 801a62e:	2154      	movs	r1, #84	@ 0x54
 801a630:	8812      	ldrh	r2, [r2, #0]
 801a632:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	1dba      	adds	r2, r7, #6
 801a638:	2156      	movs	r1, #86	@ 0x56
 801a63a:	8812      	ldrh	r2, [r2, #0]
 801a63c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	2290      	movs	r2, #144	@ 0x90
 801a642:	2100      	movs	r1, #0
 801a644:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	2288      	movs	r2, #136	@ 0x88
 801a64a:	2121      	movs	r1, #33	@ 0x21
 801a64c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a652:	2b00      	cmp	r3, #0
 801a654:	d028      	beq.n	801a6a8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a65a:	4a25      	ldr	r2, [pc, #148]	@ (801a6f0 <HAL_UART_Transmit_DMA+0x118>)
 801a65c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a662:	4a24      	ldr	r2, [pc, #144]	@ (801a6f4 <HAL_UART_Transmit_DMA+0x11c>)
 801a664:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a66a:	4a23      	ldr	r2, [pc, #140]	@ (801a6f8 <HAL_UART_Transmit_DMA+0x120>)
 801a66c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a672:	2200      	movs	r2, #0
 801a674:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a67e:	0019      	movs	r1, r3
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	3328      	adds	r3, #40	@ 0x28
 801a686:	001a      	movs	r2, r3
 801a688:	1dbb      	adds	r3, r7, #6
 801a68a:	881b      	ldrh	r3, [r3, #0]
 801a68c:	f7f9 f998 	bl	80139c0 <HAL_DMA_Start_IT>
 801a690:	1e03      	subs	r3, r0, #0
 801a692:	d009      	beq.n	801a6a8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	2290      	movs	r2, #144	@ 0x90
 801a698:	2110      	movs	r1, #16
 801a69a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	2288      	movs	r2, #136	@ 0x88
 801a6a0:	2120      	movs	r1, #32
 801a6a2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	e01f      	b.n	801a6e8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	2240      	movs	r2, #64	@ 0x40
 801a6ae:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a6b0:	f3ef 8310 	mrs	r3, PRIMASK
 801a6b4:	613b      	str	r3, [r7, #16]
  return(result);
 801a6b6:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a6b8:	61fb      	str	r3, [r7, #28]
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6be:	697b      	ldr	r3, [r7, #20]
 801a6c0:	f383 8810 	msr	PRIMASK, r3
}
 801a6c4:	46c0      	nop			@ (mov r8, r8)
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	689a      	ldr	r2, [r3, #8]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	2180      	movs	r1, #128	@ 0x80
 801a6d2:	430a      	orrs	r2, r1
 801a6d4:	609a      	str	r2, [r3, #8]
 801a6d6:	69fb      	ldr	r3, [r7, #28]
 801a6d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6da:	69bb      	ldr	r3, [r7, #24]
 801a6dc:	f383 8810 	msr	PRIMASK, r3
}
 801a6e0:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	e000      	b.n	801a6e8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 801a6e6:	2302      	movs	r3, #2
  }
}
 801a6e8:	0018      	movs	r0, r3
 801a6ea:	46bd      	mov	sp, r7
 801a6ec:	b008      	add	sp, #32
 801a6ee:	bd80      	pop	{r7, pc}
 801a6f0:	0801ba09 	.word	0x0801ba09
 801a6f4:	0801baa1 	.word	0x0801baa1
 801a6f8:	0801bc33 	.word	0x0801bc33

0801a6fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b088      	sub	sp, #32
 801a700:	af00      	add	r7, sp, #0
 801a702:	60f8      	str	r0, [r7, #12]
 801a704:	60b9      	str	r1, [r7, #8]
 801a706:	1dbb      	adds	r3, r7, #6
 801a708:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	228c      	movs	r2, #140	@ 0x8c
 801a70e:	589b      	ldr	r3, [r3, r2]
 801a710:	2b20      	cmp	r3, #32
 801a712:	d154      	bne.n	801a7be <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d003      	beq.n	801a722 <HAL_UART_Receive_DMA+0x26>
 801a71a:	1dbb      	adds	r3, r7, #6
 801a71c:	881b      	ldrh	r3, [r3, #0]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d101      	bne.n	801a726 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801a722:	2301      	movs	r3, #1
 801a724:	e04c      	b.n	801a7c0 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	689a      	ldr	r2, [r3, #8]
 801a72a:	2380      	movs	r3, #128	@ 0x80
 801a72c:	015b      	lsls	r3, r3, #5
 801a72e:	429a      	cmp	r2, r3
 801a730:	d109      	bne.n	801a746 <HAL_UART_Receive_DMA+0x4a>
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	691b      	ldr	r3, [r3, #16]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d105      	bne.n	801a746 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	2201      	movs	r2, #1
 801a73e:	4013      	ands	r3, r2
 801a740:	d001      	beq.n	801a746 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801a742:	2301      	movs	r3, #1
 801a744:	e03c      	b.n	801a7c0 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	2200      	movs	r2, #0
 801a74a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4a1d      	ldr	r2, [pc, #116]	@ (801a7c8 <HAL_UART_Receive_DMA+0xcc>)
 801a752:	4293      	cmp	r3, r2
 801a754:	d02a      	beq.n	801a7ac <HAL_UART_Receive_DMA+0xb0>
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	4a1c      	ldr	r2, [pc, #112]	@ (801a7cc <HAL_UART_Receive_DMA+0xd0>)
 801a75c:	4293      	cmp	r3, r2
 801a75e:	d025      	beq.n	801a7ac <HAL_UART_Receive_DMA+0xb0>
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	4a1a      	ldr	r2, [pc, #104]	@ (801a7d0 <HAL_UART_Receive_DMA+0xd4>)
 801a766:	4293      	cmp	r3, r2
 801a768:	d020      	beq.n	801a7ac <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	685a      	ldr	r2, [r3, #4]
 801a770:	2380      	movs	r3, #128	@ 0x80
 801a772:	041b      	lsls	r3, r3, #16
 801a774:	4013      	ands	r3, r2
 801a776:	d019      	beq.n	801a7ac <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a778:	f3ef 8310 	mrs	r3, PRIMASK
 801a77c:	613b      	str	r3, [r7, #16]
  return(result);
 801a77e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a780:	61fb      	str	r3, [r7, #28]
 801a782:	2301      	movs	r3, #1
 801a784:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	f383 8810 	msr	PRIMASK, r3
}
 801a78c:	46c0      	nop			@ (mov r8, r8)
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	2180      	movs	r1, #128	@ 0x80
 801a79a:	04c9      	lsls	r1, r1, #19
 801a79c:	430a      	orrs	r2, r1
 801a79e:	601a      	str	r2, [r3, #0]
 801a7a0:	69fb      	ldr	r3, [r7, #28]
 801a7a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7a4:	69bb      	ldr	r3, [r7, #24]
 801a7a6:	f383 8810 	msr	PRIMASK, r3
}
 801a7aa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801a7ac:	1dbb      	adds	r3, r7, #6
 801a7ae:	881a      	ldrh	r2, [r3, #0]
 801a7b0:	68b9      	ldr	r1, [r7, #8]
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	0018      	movs	r0, r3
 801a7b6:	f000 ffdb 	bl	801b770 <UART_Start_Receive_DMA>
 801a7ba:	0003      	movs	r3, r0
 801a7bc:	e000      	b.n	801a7c0 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 801a7be:	2302      	movs	r3, #2
  }
}
 801a7c0:	0018      	movs	r0, r3
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	b008      	add	sp, #32
 801a7c6:	bd80      	pop	{r7, pc}
 801a7c8:	40008000 	.word	0x40008000
 801a7cc:	40008400 	.word	0x40008400
 801a7d0:	40008c00 	.word	0x40008c00

0801a7d4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b092      	sub	sp, #72	@ 0x48
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a7dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a7e0:	623b      	str	r3, [r7, #32]
  return(result);
 801a7e2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801a7e4:	647b      	str	r3, [r7, #68]	@ 0x44
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ec:	f383 8810 	msr	PRIMASK, r3
}
 801a7f0:	46c0      	nop			@ (mov r8, r8)
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	681a      	ldr	r2, [r3, #0]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	494d      	ldr	r1, [pc, #308]	@ (801a934 <HAL_UART_AbortReceive+0x160>)
 801a7fe:	400a      	ands	r2, r1
 801a800:	601a      	str	r2, [r3, #0]
 801a802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a804:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a808:	f383 8810 	msr	PRIMASK, r3
}
 801a80c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a80e:	f3ef 8310 	mrs	r3, PRIMASK
 801a812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801a816:	643b      	str	r3, [r7, #64]	@ 0x40
 801a818:	2301      	movs	r3, #1
 801a81a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a81e:	f383 8810 	msr	PRIMASK, r3
}
 801a822:	46c0      	nop			@ (mov r8, r8)
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	689a      	ldr	r2, [r3, #8]
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	4942      	ldr	r1, [pc, #264]	@ (801a938 <HAL_UART_AbortReceive+0x164>)
 801a830:	400a      	ands	r2, r1
 801a832:	609a      	str	r2, [r3, #8]
 801a834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a836:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a83a:	f383 8810 	msr	PRIMASK, r3
}
 801a83e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a844:	2b01      	cmp	r3, #1
 801a846:	d118      	bne.n	801a87a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a848:	f3ef 8310 	mrs	r3, PRIMASK
 801a84c:	617b      	str	r3, [r7, #20]
  return(result);
 801a84e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a852:	2301      	movs	r3, #1
 801a854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a856:	69bb      	ldr	r3, [r7, #24]
 801a858:	f383 8810 	msr	PRIMASK, r3
}
 801a85c:	46c0      	nop			@ (mov r8, r8)
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	681a      	ldr	r2, [r3, #0]
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	2110      	movs	r1, #16
 801a86a:	438a      	bics	r2, r1
 801a86c:	601a      	str	r2, [r3, #0]
 801a86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a872:	69fb      	ldr	r3, [r7, #28]
 801a874:	f383 8810 	msr	PRIMASK, r3
}
 801a878:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	689b      	ldr	r3, [r3, #8]
 801a880:	2240      	movs	r2, #64	@ 0x40
 801a882:	4013      	ands	r3, r2
 801a884:	2b40      	cmp	r3, #64	@ 0x40
 801a886:	d139      	bne.n	801a8fc <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a888:	f3ef 8310 	mrs	r3, PRIMASK
 801a88c:	60bb      	str	r3, [r7, #8]
  return(result);
 801a88e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a890:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a892:	2301      	movs	r3, #1
 801a894:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	f383 8810 	msr	PRIMASK, r3
}
 801a89c:	46c0      	nop			@ (mov r8, r8)
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	689a      	ldr	r2, [r3, #8]
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2140      	movs	r1, #64	@ 0x40
 801a8aa:	438a      	bics	r2, r1
 801a8ac:	609a      	str	r2, [r3, #8]
 801a8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8b2:	693b      	ldr	r3, [r7, #16]
 801a8b4:	f383 8810 	msr	PRIMASK, r3
}
 801a8b8:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2280      	movs	r2, #128	@ 0x80
 801a8be:	589b      	ldr	r3, [r3, r2]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d01b      	beq.n	801a8fc <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2280      	movs	r2, #128	@ 0x80
 801a8c8:	589b      	ldr	r3, [r3, r2]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	2280      	movs	r2, #128	@ 0x80
 801a8d2:	589b      	ldr	r3, [r3, r2]
 801a8d4:	0018      	movs	r0, r3
 801a8d6:	f7f9 f8f9 	bl	8013acc <HAL_DMA_Abort>
 801a8da:	1e03      	subs	r3, r0, #0
 801a8dc:	d00e      	beq.n	801a8fc <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	2280      	movs	r2, #128	@ 0x80
 801a8e2:	589b      	ldr	r3, [r3, r2]
 801a8e4:	0018      	movs	r0, r3
 801a8e6:	f7f9 fa89 	bl	8013dfc <HAL_DMA_GetError>
 801a8ea:	0003      	movs	r3, r0
 801a8ec:	2b20      	cmp	r3, #32
 801a8ee:	d105      	bne.n	801a8fc <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2290      	movs	r2, #144	@ 0x90
 801a8f4:	2110      	movs	r1, #16
 801a8f6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801a8f8:	2303      	movs	r3, #3
 801a8fa:	e017      	b.n	801a92c <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	225e      	movs	r2, #94	@ 0x5e
 801a900:	2100      	movs	r1, #0
 801a902:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	220f      	movs	r2, #15
 801a90a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	699a      	ldr	r2, [r3, #24]
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	2108      	movs	r1, #8
 801a918:	430a      	orrs	r2, r1
 801a91a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	228c      	movs	r2, #140	@ 0x8c
 801a920:	2120      	movs	r1, #32
 801a922:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2200      	movs	r2, #0
 801a928:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 801a92a:	2300      	movs	r3, #0
}
 801a92c:	0018      	movs	r0, r3
 801a92e:	46bd      	mov	sp, r7
 801a930:	b012      	add	sp, #72	@ 0x48
 801a932:	bd80      	pop	{r7, pc}
 801a934:	fffffedf 	.word	0xfffffedf
 801a938:	effffffe 	.word	0xeffffffe

0801a93c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a93c:	b5b0      	push	{r4, r5, r7, lr}
 801a93e:	b0aa      	sub	sp, #168	@ 0xa8
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	69db      	ldr	r3, [r3, #28]
 801a94a:	22a4      	movs	r2, #164	@ 0xa4
 801a94c:	18b9      	adds	r1, r7, r2
 801a94e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	20a0      	movs	r0, #160	@ 0xa0
 801a958:	1839      	adds	r1, r7, r0
 801a95a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	689b      	ldr	r3, [r3, #8]
 801a962:	249c      	movs	r4, #156	@ 0x9c
 801a964:	1939      	adds	r1, r7, r4
 801a966:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801a968:	0011      	movs	r1, r2
 801a96a:	18bb      	adds	r3, r7, r2
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	4aa2      	ldr	r2, [pc, #648]	@ (801abf8 <HAL_UART_IRQHandler+0x2bc>)
 801a970:	4013      	ands	r3, r2
 801a972:	2298      	movs	r2, #152	@ 0x98
 801a974:	18bd      	adds	r5, r7, r2
 801a976:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 801a978:	18bb      	adds	r3, r7, r2
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d11a      	bne.n	801a9b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a980:	187b      	adds	r3, r7, r1
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	2220      	movs	r2, #32
 801a986:	4013      	ands	r3, r2
 801a988:	d015      	beq.n	801a9b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a98a:	183b      	adds	r3, r7, r0
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	2220      	movs	r2, #32
 801a990:	4013      	ands	r3, r2
 801a992:	d105      	bne.n	801a9a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a994:	193b      	adds	r3, r7, r4
 801a996:	681a      	ldr	r2, [r3, #0]
 801a998:	2380      	movs	r3, #128	@ 0x80
 801a99a:	055b      	lsls	r3, r3, #21
 801a99c:	4013      	ands	r3, r2
 801a99e:	d00a      	beq.n	801a9b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d100      	bne.n	801a9aa <HAL_UART_IRQHandler+0x6e>
 801a9a8:	e2fb      	b.n	801afa2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	0010      	movs	r0, r2
 801a9b2:	4798      	blx	r3
      }
      return;
 801a9b4:	e2f5      	b.n	801afa2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801a9b6:	2398      	movs	r3, #152	@ 0x98
 801a9b8:	18fb      	adds	r3, r7, r3
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d100      	bne.n	801a9c2 <HAL_UART_IRQHandler+0x86>
 801a9c0:	e122      	b.n	801ac08 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801a9c2:	239c      	movs	r3, #156	@ 0x9c
 801a9c4:	18fb      	adds	r3, r7, r3
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	4a8c      	ldr	r2, [pc, #560]	@ (801abfc <HAL_UART_IRQHandler+0x2c0>)
 801a9ca:	4013      	ands	r3, r2
 801a9cc:	d106      	bne.n	801a9dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801a9ce:	23a0      	movs	r3, #160	@ 0xa0
 801a9d0:	18fb      	adds	r3, r7, r3
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	4a8a      	ldr	r2, [pc, #552]	@ (801ac00 <HAL_UART_IRQHandler+0x2c4>)
 801a9d6:	4013      	ands	r3, r2
 801a9d8:	d100      	bne.n	801a9dc <HAL_UART_IRQHandler+0xa0>
 801a9da:	e115      	b.n	801ac08 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a9dc:	23a4      	movs	r3, #164	@ 0xa4
 801a9de:	18fb      	adds	r3, r7, r3
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	2201      	movs	r2, #1
 801a9e4:	4013      	ands	r3, r2
 801a9e6:	d012      	beq.n	801aa0e <HAL_UART_IRQHandler+0xd2>
 801a9e8:	23a0      	movs	r3, #160	@ 0xa0
 801a9ea:	18fb      	adds	r3, r7, r3
 801a9ec:	681a      	ldr	r2, [r3, #0]
 801a9ee:	2380      	movs	r3, #128	@ 0x80
 801a9f0:	005b      	lsls	r3, r3, #1
 801a9f2:	4013      	ands	r3, r2
 801a9f4:	d00b      	beq.n	801aa0e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	2201      	movs	r2, #1
 801a9fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	2290      	movs	r2, #144	@ 0x90
 801aa02:	589b      	ldr	r3, [r3, r2]
 801aa04:	2201      	movs	r2, #1
 801aa06:	431a      	orrs	r2, r3
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2190      	movs	r1, #144	@ 0x90
 801aa0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801aa0e:	23a4      	movs	r3, #164	@ 0xa4
 801aa10:	18fb      	adds	r3, r7, r3
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	2202      	movs	r2, #2
 801aa16:	4013      	ands	r3, r2
 801aa18:	d011      	beq.n	801aa3e <HAL_UART_IRQHandler+0x102>
 801aa1a:	239c      	movs	r3, #156	@ 0x9c
 801aa1c:	18fb      	adds	r3, r7, r3
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	2201      	movs	r2, #1
 801aa22:	4013      	ands	r3, r2
 801aa24:	d00b      	beq.n	801aa3e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	2202      	movs	r2, #2
 801aa2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	2290      	movs	r2, #144	@ 0x90
 801aa32:	589b      	ldr	r3, [r3, r2]
 801aa34:	2204      	movs	r2, #4
 801aa36:	431a      	orrs	r2, r3
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2190      	movs	r1, #144	@ 0x90
 801aa3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801aa3e:	23a4      	movs	r3, #164	@ 0xa4
 801aa40:	18fb      	adds	r3, r7, r3
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	2204      	movs	r2, #4
 801aa46:	4013      	ands	r3, r2
 801aa48:	d011      	beq.n	801aa6e <HAL_UART_IRQHandler+0x132>
 801aa4a:	239c      	movs	r3, #156	@ 0x9c
 801aa4c:	18fb      	adds	r3, r7, r3
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	2201      	movs	r2, #1
 801aa52:	4013      	ands	r3, r2
 801aa54:	d00b      	beq.n	801aa6e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2204      	movs	r2, #4
 801aa5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2290      	movs	r2, #144	@ 0x90
 801aa62:	589b      	ldr	r3, [r3, r2]
 801aa64:	2202      	movs	r2, #2
 801aa66:	431a      	orrs	r2, r3
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2190      	movs	r1, #144	@ 0x90
 801aa6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801aa6e:	23a4      	movs	r3, #164	@ 0xa4
 801aa70:	18fb      	adds	r3, r7, r3
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	2208      	movs	r2, #8
 801aa76:	4013      	ands	r3, r2
 801aa78:	d017      	beq.n	801aaaa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801aa7a:	23a0      	movs	r3, #160	@ 0xa0
 801aa7c:	18fb      	adds	r3, r7, r3
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2220      	movs	r2, #32
 801aa82:	4013      	ands	r3, r2
 801aa84:	d105      	bne.n	801aa92 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801aa86:	239c      	movs	r3, #156	@ 0x9c
 801aa88:	18fb      	adds	r3, r7, r3
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	4a5b      	ldr	r2, [pc, #364]	@ (801abfc <HAL_UART_IRQHandler+0x2c0>)
 801aa8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801aa90:	d00b      	beq.n	801aaaa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	2208      	movs	r2, #8
 801aa98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2290      	movs	r2, #144	@ 0x90
 801aa9e:	589b      	ldr	r3, [r3, r2]
 801aaa0:	2208      	movs	r2, #8
 801aaa2:	431a      	orrs	r2, r3
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	2190      	movs	r1, #144	@ 0x90
 801aaa8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801aaaa:	23a4      	movs	r3, #164	@ 0xa4
 801aaac:	18fb      	adds	r3, r7, r3
 801aaae:	681a      	ldr	r2, [r3, #0]
 801aab0:	2380      	movs	r3, #128	@ 0x80
 801aab2:	011b      	lsls	r3, r3, #4
 801aab4:	4013      	ands	r3, r2
 801aab6:	d013      	beq.n	801aae0 <HAL_UART_IRQHandler+0x1a4>
 801aab8:	23a0      	movs	r3, #160	@ 0xa0
 801aaba:	18fb      	adds	r3, r7, r3
 801aabc:	681a      	ldr	r2, [r3, #0]
 801aabe:	2380      	movs	r3, #128	@ 0x80
 801aac0:	04db      	lsls	r3, r3, #19
 801aac2:	4013      	ands	r3, r2
 801aac4:	d00c      	beq.n	801aae0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	2280      	movs	r2, #128	@ 0x80
 801aacc:	0112      	lsls	r2, r2, #4
 801aace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	2290      	movs	r2, #144	@ 0x90
 801aad4:	589b      	ldr	r3, [r3, r2]
 801aad6:	2220      	movs	r2, #32
 801aad8:	431a      	orrs	r2, r3
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2190      	movs	r1, #144	@ 0x90
 801aade:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	2290      	movs	r2, #144	@ 0x90
 801aae4:	589b      	ldr	r3, [r3, r2]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d100      	bne.n	801aaec <HAL_UART_IRQHandler+0x1b0>
 801aaea:	e25c      	b.n	801afa6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801aaec:	23a4      	movs	r3, #164	@ 0xa4
 801aaee:	18fb      	adds	r3, r7, r3
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	2220      	movs	r2, #32
 801aaf4:	4013      	ands	r3, r2
 801aaf6:	d015      	beq.n	801ab24 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801aaf8:	23a0      	movs	r3, #160	@ 0xa0
 801aafa:	18fb      	adds	r3, r7, r3
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	2220      	movs	r2, #32
 801ab00:	4013      	ands	r3, r2
 801ab02:	d106      	bne.n	801ab12 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801ab04:	239c      	movs	r3, #156	@ 0x9c
 801ab06:	18fb      	adds	r3, r7, r3
 801ab08:	681a      	ldr	r2, [r3, #0]
 801ab0a:	2380      	movs	r3, #128	@ 0x80
 801ab0c:	055b      	lsls	r3, r3, #21
 801ab0e:	4013      	ands	r3, r2
 801ab10:	d008      	beq.n	801ab24 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d004      	beq.n	801ab24 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	0010      	movs	r0, r2
 801ab22:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2290      	movs	r2, #144	@ 0x90
 801ab28:	589b      	ldr	r3, [r3, r2]
 801ab2a:	2194      	movs	r1, #148	@ 0x94
 801ab2c:	187a      	adds	r2, r7, r1
 801ab2e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	689b      	ldr	r3, [r3, #8]
 801ab36:	2240      	movs	r2, #64	@ 0x40
 801ab38:	4013      	ands	r3, r2
 801ab3a:	2b40      	cmp	r3, #64	@ 0x40
 801ab3c:	d004      	beq.n	801ab48 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801ab3e:	187b      	adds	r3, r7, r1
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	2228      	movs	r2, #40	@ 0x28
 801ab44:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801ab46:	d04c      	beq.n	801abe2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	0018      	movs	r0, r3
 801ab4c:	f000 fef6 	bl	801b93c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	689b      	ldr	r3, [r3, #8]
 801ab56:	2240      	movs	r2, #64	@ 0x40
 801ab58:	4013      	ands	r3, r2
 801ab5a:	2b40      	cmp	r3, #64	@ 0x40
 801ab5c:	d13c      	bne.n	801abd8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ab5e:	f3ef 8310 	mrs	r3, PRIMASK
 801ab62:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801ab64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ab66:	2090      	movs	r0, #144	@ 0x90
 801ab68:	183a      	adds	r2, r7, r0
 801ab6a:	6013      	str	r3, [r2, #0]
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ab72:	f383 8810 	msr	PRIMASK, r3
}
 801ab76:	46c0      	nop			@ (mov r8, r8)
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	689a      	ldr	r2, [r3, #8]
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	2140      	movs	r1, #64	@ 0x40
 801ab84:	438a      	bics	r2, r1
 801ab86:	609a      	str	r2, [r3, #8]
 801ab88:	183b      	adds	r3, r7, r0
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab90:	f383 8810 	msr	PRIMASK, r3
}
 801ab94:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	2280      	movs	r2, #128	@ 0x80
 801ab9a:	589b      	ldr	r3, [r3, r2]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d016      	beq.n	801abce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2280      	movs	r2, #128	@ 0x80
 801aba4:	589b      	ldr	r3, [r3, r2]
 801aba6:	4a17      	ldr	r2, [pc, #92]	@ (801ac04 <HAL_UART_IRQHandler+0x2c8>)
 801aba8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	2280      	movs	r2, #128	@ 0x80
 801abae:	589b      	ldr	r3, [r3, r2]
 801abb0:	0018      	movs	r0, r3
 801abb2:	f7f8 ffeb 	bl	8013b8c <HAL_DMA_Abort_IT>
 801abb6:	1e03      	subs	r3, r0, #0
 801abb8:	d01c      	beq.n	801abf4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2280      	movs	r2, #128	@ 0x80
 801abbe:	589b      	ldr	r3, [r3, r2]
 801abc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801abc2:	687a      	ldr	r2, [r7, #4]
 801abc4:	2180      	movs	r1, #128	@ 0x80
 801abc6:	5852      	ldr	r2, [r2, r1]
 801abc8:	0010      	movs	r0, r2
 801abca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801abcc:	e012      	b.n	801abf4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	0018      	movs	r0, r3
 801abd2:	f000 fa19 	bl	801b008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801abd6:	e00d      	b.n	801abf4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	0018      	movs	r0, r3
 801abdc:	f000 fa14 	bl	801b008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801abe0:	e008      	b.n	801abf4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	0018      	movs	r0, r3
 801abe6:	f000 fa0f 	bl	801b008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2290      	movs	r2, #144	@ 0x90
 801abee:	2100      	movs	r1, #0
 801abf0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801abf2:	e1d8      	b.n	801afa6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801abf4:	46c0      	nop			@ (mov r8, r8)
    return;
 801abf6:	e1d6      	b.n	801afa6 <HAL_UART_IRQHandler+0x66a>
 801abf8:	0000080f 	.word	0x0000080f
 801abfc:	10000001 	.word	0x10000001
 801ac00:	04000120 	.word	0x04000120
 801ac04:	0801bcb9 	.word	0x0801bcb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac0c:	2b01      	cmp	r3, #1
 801ac0e:	d000      	beq.n	801ac12 <HAL_UART_IRQHandler+0x2d6>
 801ac10:	e15d      	b.n	801aece <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801ac12:	23a4      	movs	r3, #164	@ 0xa4
 801ac14:	18fb      	adds	r3, r7, r3
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	2210      	movs	r2, #16
 801ac1a:	4013      	ands	r3, r2
 801ac1c:	d100      	bne.n	801ac20 <HAL_UART_IRQHandler+0x2e4>
 801ac1e:	e156      	b.n	801aece <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801ac20:	23a0      	movs	r3, #160	@ 0xa0
 801ac22:	18fb      	adds	r3, r7, r3
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	2210      	movs	r2, #16
 801ac28:	4013      	ands	r3, r2
 801ac2a:	d100      	bne.n	801ac2e <HAL_UART_IRQHandler+0x2f2>
 801ac2c:	e14f      	b.n	801aece <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	2210      	movs	r2, #16
 801ac34:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	689b      	ldr	r3, [r3, #8]
 801ac3c:	2240      	movs	r2, #64	@ 0x40
 801ac3e:	4013      	ands	r3, r2
 801ac40:	2b40      	cmp	r3, #64	@ 0x40
 801ac42:	d000      	beq.n	801ac46 <HAL_UART_IRQHandler+0x30a>
 801ac44:	e0c3      	b.n	801adce <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2280      	movs	r2, #128	@ 0x80
 801ac4a:	589b      	ldr	r3, [r3, r2]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	685a      	ldr	r2, [r3, #4]
 801ac50:	217e      	movs	r1, #126	@ 0x7e
 801ac52:	187b      	adds	r3, r7, r1
 801ac54:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801ac56:	187b      	adds	r3, r7, r1
 801ac58:	881b      	ldrh	r3, [r3, #0]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d100      	bne.n	801ac60 <HAL_UART_IRQHandler+0x324>
 801ac5e:	e097      	b.n	801ad90 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	225c      	movs	r2, #92	@ 0x5c
 801ac64:	5a9b      	ldrh	r3, [r3, r2]
 801ac66:	187a      	adds	r2, r7, r1
 801ac68:	8812      	ldrh	r2, [r2, #0]
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d300      	bcc.n	801ac70 <HAL_UART_IRQHandler+0x334>
 801ac6e:	e08f      	b.n	801ad90 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	187a      	adds	r2, r7, r1
 801ac74:	215e      	movs	r1, #94	@ 0x5e
 801ac76:	8812      	ldrh	r2, [r2, #0]
 801ac78:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	2280      	movs	r2, #128	@ 0x80
 801ac7e:	589b      	ldr	r3, [r3, r2]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	2220      	movs	r2, #32
 801ac86:	4013      	ands	r3, r2
 801ac88:	d170      	bne.n	801ad6c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ac8a:	f3ef 8310 	mrs	r3, PRIMASK
 801ac8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ac92:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ac94:	2301      	movs	r3, #1
 801ac96:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac9a:	f383 8810 	msr	PRIMASK, r3
}
 801ac9e:	46c0      	nop			@ (mov r8, r8)
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	681a      	ldr	r2, [r3, #0]
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	49c4      	ldr	r1, [pc, #784]	@ (801afbc <HAL_UART_IRQHandler+0x680>)
 801acac:	400a      	ands	r2, r1
 801acae:	601a      	str	r2, [r3, #0]
 801acb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acb6:	f383 8810 	msr	PRIMASK, r3
}
 801acba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801acbc:	f3ef 8310 	mrs	r3, PRIMASK
 801acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801acc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801acc4:	677b      	str	r3, [r7, #116]	@ 0x74
 801acc6:	2301      	movs	r3, #1
 801acc8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801accc:	f383 8810 	msr	PRIMASK, r3
}
 801acd0:	46c0      	nop			@ (mov r8, r8)
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	689a      	ldr	r2, [r3, #8]
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	2101      	movs	r1, #1
 801acde:	438a      	bics	r2, r1
 801ace0:	609a      	str	r2, [r3, #8]
 801ace2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ace4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ace6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ace8:	f383 8810 	msr	PRIMASK, r3
}
 801acec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801acee:	f3ef 8310 	mrs	r3, PRIMASK
 801acf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801acf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801acf6:	673b      	str	r3, [r7, #112]	@ 0x70
 801acf8:	2301      	movs	r3, #1
 801acfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801acfe:	f383 8810 	msr	PRIMASK, r3
}
 801ad02:	46c0      	nop			@ (mov r8, r8)
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	689a      	ldr	r2, [r3, #8]
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2140      	movs	r1, #64	@ 0x40
 801ad10:	438a      	bics	r2, r1
 801ad12:	609a      	str	r2, [r3, #8]
 801ad14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ad16:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad1a:	f383 8810 	msr	PRIMASK, r3
}
 801ad1e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	228c      	movs	r2, #140	@ 0x8c
 801ad24:	2120      	movs	r1, #32
 801ad26:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ad2e:	f3ef 8310 	mrs	r3, PRIMASK
 801ad32:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801ad34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ad36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad38:	2301      	movs	r3, #1
 801ad3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ad3e:	f383 8810 	msr	PRIMASK, r3
}
 801ad42:	46c0      	nop			@ (mov r8, r8)
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	681a      	ldr	r2, [r3, #0]
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	2110      	movs	r1, #16
 801ad50:	438a      	bics	r2, r1
 801ad52:	601a      	str	r2, [r3, #0]
 801ad54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ad5a:	f383 8810 	msr	PRIMASK, r3
}
 801ad5e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	2280      	movs	r2, #128	@ 0x80
 801ad64:	589b      	ldr	r3, [r3, r2]
 801ad66:	0018      	movs	r0, r3
 801ad68:	f7f8 feb0 	bl	8013acc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	2202      	movs	r2, #2
 801ad70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	225c      	movs	r2, #92	@ 0x5c
 801ad76:	5a9a      	ldrh	r2, [r3, r2]
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	215e      	movs	r1, #94	@ 0x5e
 801ad7c:	5a5b      	ldrh	r3, [r3, r1]
 801ad7e:	b29b      	uxth	r3, r3
 801ad80:	1ad3      	subs	r3, r2, r3
 801ad82:	b29a      	uxth	r2, r3
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	0011      	movs	r1, r2
 801ad88:	0018      	movs	r0, r3
 801ad8a:	f000 f945 	bl	801b018 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801ad8e:	e10c      	b.n	801afaa <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	225c      	movs	r2, #92	@ 0x5c
 801ad94:	5a9b      	ldrh	r3, [r3, r2]
 801ad96:	227e      	movs	r2, #126	@ 0x7e
 801ad98:	18ba      	adds	r2, r7, r2
 801ad9a:	8812      	ldrh	r2, [r2, #0]
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d000      	beq.n	801ada2 <HAL_UART_IRQHandler+0x466>
 801ada0:	e103      	b.n	801afaa <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	2280      	movs	r2, #128	@ 0x80
 801ada6:	589b      	ldr	r3, [r3, r2]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	2220      	movs	r2, #32
 801adae:	4013      	ands	r3, r2
 801adb0:	2b20      	cmp	r3, #32
 801adb2:	d000      	beq.n	801adb6 <HAL_UART_IRQHandler+0x47a>
 801adb4:	e0f9      	b.n	801afaa <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	2202      	movs	r2, #2
 801adba:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	225c      	movs	r2, #92	@ 0x5c
 801adc0:	5a9a      	ldrh	r2, [r3, r2]
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	0011      	movs	r1, r2
 801adc6:	0018      	movs	r0, r3
 801adc8:	f000 f926 	bl	801b018 <HAL_UARTEx_RxEventCallback>
      return;
 801adcc:	e0ed      	b.n	801afaa <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	225c      	movs	r2, #92	@ 0x5c
 801add2:	5a99      	ldrh	r1, [r3, r2]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	225e      	movs	r2, #94	@ 0x5e
 801add8:	5a9b      	ldrh	r3, [r3, r2]
 801adda:	b29a      	uxth	r2, r3
 801addc:	208e      	movs	r0, #142	@ 0x8e
 801adde:	183b      	adds	r3, r7, r0
 801ade0:	1a8a      	subs	r2, r1, r2
 801ade2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	225e      	movs	r2, #94	@ 0x5e
 801ade8:	5a9b      	ldrh	r3, [r3, r2]
 801adea:	b29b      	uxth	r3, r3
 801adec:	2b00      	cmp	r3, #0
 801adee:	d100      	bne.n	801adf2 <HAL_UART_IRQHandler+0x4b6>
 801adf0:	e0dd      	b.n	801afae <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 801adf2:	183b      	adds	r3, r7, r0
 801adf4:	881b      	ldrh	r3, [r3, #0]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d100      	bne.n	801adfc <HAL_UART_IRQHandler+0x4c0>
 801adfa:	e0d8      	b.n	801afae <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801adfc:	f3ef 8310 	mrs	r3, PRIMASK
 801ae00:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae02:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ae04:	2488      	movs	r4, #136	@ 0x88
 801ae06:	193a      	adds	r2, r7, r4
 801ae08:	6013      	str	r3, [r2, #0]
 801ae0a:	2301      	movs	r3, #1
 801ae0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae0e:	693b      	ldr	r3, [r7, #16]
 801ae10:	f383 8810 	msr	PRIMASK, r3
}
 801ae14:	46c0      	nop			@ (mov r8, r8)
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	681a      	ldr	r2, [r3, #0]
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4967      	ldr	r1, [pc, #412]	@ (801afc0 <HAL_UART_IRQHandler+0x684>)
 801ae22:	400a      	ands	r2, r1
 801ae24:	601a      	str	r2, [r3, #0]
 801ae26:	193b      	adds	r3, r7, r4
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	f383 8810 	msr	PRIMASK, r3
}
 801ae32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ae34:	f3ef 8310 	mrs	r3, PRIMASK
 801ae38:	61bb      	str	r3, [r7, #24]
  return(result);
 801ae3a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ae3c:	2484      	movs	r4, #132	@ 0x84
 801ae3e:	193a      	adds	r2, r7, r4
 801ae40:	6013      	str	r3, [r2, #0]
 801ae42:	2301      	movs	r3, #1
 801ae44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae46:	69fb      	ldr	r3, [r7, #28]
 801ae48:	f383 8810 	msr	PRIMASK, r3
}
 801ae4c:	46c0      	nop			@ (mov r8, r8)
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	689a      	ldr	r2, [r3, #8]
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	495a      	ldr	r1, [pc, #360]	@ (801afc4 <HAL_UART_IRQHandler+0x688>)
 801ae5a:	400a      	ands	r2, r1
 801ae5c:	609a      	str	r2, [r3, #8]
 801ae5e:	193b      	adds	r3, r7, r4
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae64:	6a3b      	ldr	r3, [r7, #32]
 801ae66:	f383 8810 	msr	PRIMASK, r3
}
 801ae6a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	228c      	movs	r2, #140	@ 0x8c
 801ae70:	2120      	movs	r1, #32
 801ae72:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	2200      	movs	r2, #0
 801ae78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ae80:	f3ef 8310 	mrs	r3, PRIMASK
 801ae84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ae88:	2480      	movs	r4, #128	@ 0x80
 801ae8a:	193a      	adds	r2, r7, r4
 801ae8c:	6013      	str	r3, [r2, #0]
 801ae8e:	2301      	movs	r3, #1
 801ae90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae94:	f383 8810 	msr	PRIMASK, r3
}
 801ae98:	46c0      	nop			@ (mov r8, r8)
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	681a      	ldr	r2, [r3, #0]
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	2110      	movs	r1, #16
 801aea6:	438a      	bics	r2, r1
 801aea8:	601a      	str	r2, [r3, #0]
 801aeaa:	193b      	adds	r3, r7, r4
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeb2:	f383 8810 	msr	PRIMASK, r3
}
 801aeb6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	2202      	movs	r2, #2
 801aebc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801aebe:	183b      	adds	r3, r7, r0
 801aec0:	881a      	ldrh	r2, [r3, #0]
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	0011      	movs	r1, r2
 801aec6:	0018      	movs	r0, r3
 801aec8:	f000 f8a6 	bl	801b018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801aecc:	e06f      	b.n	801afae <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801aece:	23a4      	movs	r3, #164	@ 0xa4
 801aed0:	18fb      	adds	r3, r7, r3
 801aed2:	681a      	ldr	r2, [r3, #0]
 801aed4:	2380      	movs	r3, #128	@ 0x80
 801aed6:	035b      	lsls	r3, r3, #13
 801aed8:	4013      	ands	r3, r2
 801aeda:	d010      	beq.n	801aefe <HAL_UART_IRQHandler+0x5c2>
 801aedc:	239c      	movs	r3, #156	@ 0x9c
 801aede:	18fb      	adds	r3, r7, r3
 801aee0:	681a      	ldr	r2, [r3, #0]
 801aee2:	2380      	movs	r3, #128	@ 0x80
 801aee4:	03db      	lsls	r3, r3, #15
 801aee6:	4013      	ands	r3, r2
 801aee8:	d009      	beq.n	801aefe <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	2280      	movs	r2, #128	@ 0x80
 801aef0:	0352      	lsls	r2, r2, #13
 801aef2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	0018      	movs	r0, r3
 801aef8:	f000 ff1d 	bl	801bd36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801aefc:	e05a      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801aefe:	23a4      	movs	r3, #164	@ 0xa4
 801af00:	18fb      	adds	r3, r7, r3
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2280      	movs	r2, #128	@ 0x80
 801af06:	4013      	ands	r3, r2
 801af08:	d016      	beq.n	801af38 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801af0a:	23a0      	movs	r3, #160	@ 0xa0
 801af0c:	18fb      	adds	r3, r7, r3
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	2280      	movs	r2, #128	@ 0x80
 801af12:	4013      	ands	r3, r2
 801af14:	d106      	bne.n	801af24 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801af16:	239c      	movs	r3, #156	@ 0x9c
 801af18:	18fb      	adds	r3, r7, r3
 801af1a:	681a      	ldr	r2, [r3, #0]
 801af1c:	2380      	movs	r3, #128	@ 0x80
 801af1e:	041b      	lsls	r3, r3, #16
 801af20:	4013      	ands	r3, r2
 801af22:	d009      	beq.n	801af38 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d042      	beq.n	801afb2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801af30:	687a      	ldr	r2, [r7, #4]
 801af32:	0010      	movs	r0, r2
 801af34:	4798      	blx	r3
    }
    return;
 801af36:	e03c      	b.n	801afb2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801af38:	23a4      	movs	r3, #164	@ 0xa4
 801af3a:	18fb      	adds	r3, r7, r3
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	2240      	movs	r2, #64	@ 0x40
 801af40:	4013      	ands	r3, r2
 801af42:	d00a      	beq.n	801af5a <HAL_UART_IRQHandler+0x61e>
 801af44:	23a0      	movs	r3, #160	@ 0xa0
 801af46:	18fb      	adds	r3, r7, r3
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	2240      	movs	r2, #64	@ 0x40
 801af4c:	4013      	ands	r3, r2
 801af4e:	d004      	beq.n	801af5a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	0018      	movs	r0, r3
 801af54:	f000 fec3 	bl	801bcde <UART_EndTransmit_IT>
    return;
 801af58:	e02c      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801af5a:	23a4      	movs	r3, #164	@ 0xa4
 801af5c:	18fb      	adds	r3, r7, r3
 801af5e:	681a      	ldr	r2, [r3, #0]
 801af60:	2380      	movs	r3, #128	@ 0x80
 801af62:	041b      	lsls	r3, r3, #16
 801af64:	4013      	ands	r3, r2
 801af66:	d00b      	beq.n	801af80 <HAL_UART_IRQHandler+0x644>
 801af68:	23a0      	movs	r3, #160	@ 0xa0
 801af6a:	18fb      	adds	r3, r7, r3
 801af6c:	681a      	ldr	r2, [r3, #0]
 801af6e:	2380      	movs	r3, #128	@ 0x80
 801af70:	05db      	lsls	r3, r3, #23
 801af72:	4013      	ands	r3, r2
 801af74:	d004      	beq.n	801af80 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	0018      	movs	r0, r3
 801af7a:	f000 feec 	bl	801bd56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801af7e:	e019      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801af80:	23a4      	movs	r3, #164	@ 0xa4
 801af82:	18fb      	adds	r3, r7, r3
 801af84:	681a      	ldr	r2, [r3, #0]
 801af86:	2380      	movs	r3, #128	@ 0x80
 801af88:	045b      	lsls	r3, r3, #17
 801af8a:	4013      	ands	r3, r2
 801af8c:	d012      	beq.n	801afb4 <HAL_UART_IRQHandler+0x678>
 801af8e:	23a0      	movs	r3, #160	@ 0xa0
 801af90:	18fb      	adds	r3, r7, r3
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	2b00      	cmp	r3, #0
 801af96:	da0d      	bge.n	801afb4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	0018      	movs	r0, r3
 801af9c:	f000 fed3 	bl	801bd46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801afa0:	e008      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
      return;
 801afa2:	46c0      	nop			@ (mov r8, r8)
 801afa4:	e006      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
    return;
 801afa6:	46c0      	nop			@ (mov r8, r8)
 801afa8:	e004      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
      return;
 801afaa:	46c0      	nop			@ (mov r8, r8)
 801afac:	e002      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
      return;
 801afae:	46c0      	nop			@ (mov r8, r8)
 801afb0:	e000      	b.n	801afb4 <HAL_UART_IRQHandler+0x678>
    return;
 801afb2:	46c0      	nop			@ (mov r8, r8)
  }
}
 801afb4:	46bd      	mov	sp, r7
 801afb6:	b02a      	add	sp, #168	@ 0xa8
 801afb8:	bdb0      	pop	{r4, r5, r7, pc}
 801afba:	46c0      	nop			@ (mov r8, r8)
 801afbc:	fffffeff 	.word	0xfffffeff
 801afc0:	fffffedf 	.word	0xfffffedf
 801afc4:	effffffe 	.word	0xeffffffe

0801afc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b082      	sub	sp, #8
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801afd0:	46c0      	nop			@ (mov r8, r8)
 801afd2:	46bd      	mov	sp, r7
 801afd4:	b002      	add	sp, #8
 801afd6:	bd80      	pop	{r7, pc}

0801afd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801afe0:	46c0      	nop			@ (mov r8, r8)
 801afe2:	46bd      	mov	sp, r7
 801afe4:	b002      	add	sp, #8
 801afe6:	bd80      	pop	{r7, pc}

0801afe8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b082      	sub	sp, #8
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801aff0:	46c0      	nop			@ (mov r8, r8)
 801aff2:	46bd      	mov	sp, r7
 801aff4:	b002      	add	sp, #8
 801aff6:	bd80      	pop	{r7, pc}

0801aff8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b082      	sub	sp, #8
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b000:	46c0      	nop			@ (mov r8, r8)
 801b002:	46bd      	mov	sp, r7
 801b004:	b002      	add	sp, #8
 801b006:	bd80      	pop	{r7, pc}

0801b008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b082      	sub	sp, #8
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b010:	46c0      	nop			@ (mov r8, r8)
 801b012:	46bd      	mov	sp, r7
 801b014:	b002      	add	sp, #8
 801b016:	bd80      	pop	{r7, pc}

0801b018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b082      	sub	sp, #8
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
 801b020:	000a      	movs	r2, r1
 801b022:	1cbb      	adds	r3, r7, #2
 801b024:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b026:	46c0      	nop			@ (mov r8, r8)
 801b028:	46bd      	mov	sp, r7
 801b02a:	b002      	add	sp, #8
 801b02c:	bd80      	pop	{r7, pc}
	...

0801b030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b030:	b5b0      	push	{r4, r5, r7, lr}
 801b032:	b092      	sub	sp, #72	@ 0x48
 801b034:	af00      	add	r7, sp, #0
 801b036:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b038:	231f      	movs	r3, #31
 801b03a:	2220      	movs	r2, #32
 801b03c:	189b      	adds	r3, r3, r2
 801b03e:	19db      	adds	r3, r3, r7
 801b040:	2200      	movs	r2, #0
 801b042:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	4ac8      	ldr	r2, [pc, #800]	@ (801b36c <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b04c:	689a      	ldr	r2, [r3, #8]
 801b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b050:	691b      	ldr	r3, [r3, #16]
 801b052:	431a      	orrs	r2, r3
 801b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b056:	695b      	ldr	r3, [r3, #20]
 801b058:	431a      	orrs	r2, r3
 801b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b05c:	69db      	ldr	r3, [r3, #28]
 801b05e:	4313      	orrs	r3, r2
 801b060:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	4ac1      	ldr	r2, [pc, #772]	@ (801b370 <UART_SetConfig+0x340>)
 801b06a:	4013      	ands	r3, r2
 801b06c:	0019      	movs	r1, r3
 801b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b074:	430b      	orrs	r3, r1
 801b076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	685b      	ldr	r3, [r3, #4]
 801b07e:	4abd      	ldr	r2, [pc, #756]	@ (801b374 <UART_SetConfig+0x344>)
 801b080:	4013      	ands	r3, r2
 801b082:	0018      	movs	r0, r3
 801b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b086:	68d9      	ldr	r1, [r3, #12]
 801b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b08a:	681a      	ldr	r2, [r3, #0]
 801b08c:	0003      	movs	r3, r0
 801b08e:	430b      	orrs	r3, r1
 801b090:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b094:	699b      	ldr	r3, [r3, #24]
 801b096:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	4ab3      	ldr	r2, [pc, #716]	@ (801b36c <UART_SetConfig+0x33c>)
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	d00e      	beq.n	801b0c0 <UART_SetConfig+0x90>
 801b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	4ab4      	ldr	r2, [pc, #720]	@ (801b378 <UART_SetConfig+0x348>)
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	d009      	beq.n	801b0c0 <UART_SetConfig+0x90>
 801b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	4ab2      	ldr	r2, [pc, #712]	@ (801b37c <UART_SetConfig+0x34c>)
 801b0b2:	4293      	cmp	r3, r2
 801b0b4:	d004      	beq.n	801b0c0 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0b8:	6a1b      	ldr	r3, [r3, #32]
 801b0ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	689b      	ldr	r3, [r3, #8]
 801b0c6:	4aae      	ldr	r2, [pc, #696]	@ (801b380 <UART_SetConfig+0x350>)
 801b0c8:	4013      	ands	r3, r2
 801b0ca:	0019      	movs	r1, r3
 801b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ce:	681a      	ldr	r2, [r3, #0]
 801b0d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b0d2:	430b      	orrs	r3, r1
 801b0d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b0dc:	220f      	movs	r2, #15
 801b0de:	4393      	bics	r3, r2
 801b0e0:	0018      	movs	r0, r3
 801b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e8:	681a      	ldr	r2, [r3, #0]
 801b0ea:	0003      	movs	r3, r0
 801b0ec:	430b      	orrs	r3, r1
 801b0ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	4aa3      	ldr	r2, [pc, #652]	@ (801b384 <UART_SetConfig+0x354>)
 801b0f6:	4293      	cmp	r3, r2
 801b0f8:	d102      	bne.n	801b100 <UART_SetConfig+0xd0>
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	643b      	str	r3, [r7, #64]	@ 0x40
 801b0fe:	e033      	b.n	801b168 <UART_SetConfig+0x138>
 801b100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	4aa0      	ldr	r2, [pc, #640]	@ (801b388 <UART_SetConfig+0x358>)
 801b106:	4293      	cmp	r3, r2
 801b108:	d102      	bne.n	801b110 <UART_SetConfig+0xe0>
 801b10a:	2302      	movs	r3, #2
 801b10c:	643b      	str	r3, [r7, #64]	@ 0x40
 801b10e:	e02b      	b.n	801b168 <UART_SetConfig+0x138>
 801b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4a9d      	ldr	r2, [pc, #628]	@ (801b38c <UART_SetConfig+0x35c>)
 801b116:	4293      	cmp	r3, r2
 801b118:	d103      	bne.n	801b122 <UART_SetConfig+0xf2>
 801b11a:	2380      	movs	r3, #128	@ 0x80
 801b11c:	025b      	lsls	r3, r3, #9
 801b11e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b120:	e022      	b.n	801b168 <UART_SetConfig+0x138>
 801b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	4a9a      	ldr	r2, [pc, #616]	@ (801b390 <UART_SetConfig+0x360>)
 801b128:	4293      	cmp	r3, r2
 801b12a:	d103      	bne.n	801b134 <UART_SetConfig+0x104>
 801b12c:	2380      	movs	r3, #128	@ 0x80
 801b12e:	029b      	lsls	r3, r3, #10
 801b130:	643b      	str	r3, [r7, #64]	@ 0x40
 801b132:	e019      	b.n	801b168 <UART_SetConfig+0x138>
 801b134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	4a8c      	ldr	r2, [pc, #560]	@ (801b36c <UART_SetConfig+0x33c>)
 801b13a:	4293      	cmp	r3, r2
 801b13c:	d102      	bne.n	801b144 <UART_SetConfig+0x114>
 801b13e:	2310      	movs	r3, #16
 801b140:	643b      	str	r3, [r7, #64]	@ 0x40
 801b142:	e011      	b.n	801b168 <UART_SetConfig+0x138>
 801b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	4a8b      	ldr	r2, [pc, #556]	@ (801b378 <UART_SetConfig+0x348>)
 801b14a:	4293      	cmp	r3, r2
 801b14c:	d102      	bne.n	801b154 <UART_SetConfig+0x124>
 801b14e:	2308      	movs	r3, #8
 801b150:	643b      	str	r3, [r7, #64]	@ 0x40
 801b152:	e009      	b.n	801b168 <UART_SetConfig+0x138>
 801b154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	4a88      	ldr	r2, [pc, #544]	@ (801b37c <UART_SetConfig+0x34c>)
 801b15a:	4293      	cmp	r3, r2
 801b15c:	d102      	bne.n	801b164 <UART_SetConfig+0x134>
 801b15e:	2304      	movs	r3, #4
 801b160:	643b      	str	r3, [r7, #64]	@ 0x40
 801b162:	e001      	b.n	801b168 <UART_SetConfig+0x138>
 801b164:	2300      	movs	r3, #0
 801b166:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	4a7f      	ldr	r2, [pc, #508]	@ (801b36c <UART_SetConfig+0x33c>)
 801b16e:	4293      	cmp	r3, r2
 801b170:	d00a      	beq.n	801b188 <UART_SetConfig+0x158>
 801b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4a80      	ldr	r2, [pc, #512]	@ (801b378 <UART_SetConfig+0x348>)
 801b178:	4293      	cmp	r3, r2
 801b17a:	d005      	beq.n	801b188 <UART_SetConfig+0x158>
 801b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	4a7e      	ldr	r2, [pc, #504]	@ (801b37c <UART_SetConfig+0x34c>)
 801b182:	4293      	cmp	r3, r2
 801b184:	d000      	beq.n	801b188 <UART_SetConfig+0x158>
 801b186:	e06f      	b.n	801b268 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801b188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b18a:	0018      	movs	r0, r3
 801b18c:	f7fc fe60 	bl	8017e50 <HAL_RCCEx_GetPeriphCLKFreq>
 801b190:	0003      	movs	r3, r0
 801b192:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 801b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b196:	2b00      	cmp	r3, #0
 801b198:	d100      	bne.n	801b19c <UART_SetConfig+0x16c>
 801b19a:	e103      	b.n	801b3a4 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b19e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b1a0:	4b7c      	ldr	r3, [pc, #496]	@ (801b394 <UART_SetConfig+0x364>)
 801b1a2:	0052      	lsls	r2, r2, #1
 801b1a4:	5ad3      	ldrh	r3, [r2, r3]
 801b1a6:	0019      	movs	r1, r3
 801b1a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b1aa:	f7e4 ffb5 	bl	8000118 <__udivsi3>
 801b1ae:	0003      	movs	r3, r0
 801b1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1b4:	685a      	ldr	r2, [r3, #4]
 801b1b6:	0013      	movs	r3, r2
 801b1b8:	005b      	lsls	r3, r3, #1
 801b1ba:	189b      	adds	r3, r3, r2
 801b1bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	d305      	bcc.n	801b1ce <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1c4:	685b      	ldr	r3, [r3, #4]
 801b1c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801b1c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b1ca:	429a      	cmp	r2, r3
 801b1cc:	d906      	bls.n	801b1dc <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 801b1ce:	231f      	movs	r3, #31
 801b1d0:	2220      	movs	r2, #32
 801b1d2:	189b      	adds	r3, r3, r2
 801b1d4:	19db      	adds	r3, r3, r7
 801b1d6:	2201      	movs	r2, #1
 801b1d8:	701a      	strb	r2, [r3, #0]
 801b1da:	e044      	b.n	801b266 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1de:	61bb      	str	r3, [r7, #24]
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	61fb      	str	r3, [r7, #28]
 801b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b1e8:	4b6a      	ldr	r3, [pc, #424]	@ (801b394 <UART_SetConfig+0x364>)
 801b1ea:	0052      	lsls	r2, r2, #1
 801b1ec:	5ad3      	ldrh	r3, [r2, r3]
 801b1ee:	613b      	str	r3, [r7, #16]
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	617b      	str	r3, [r7, #20]
 801b1f4:	693a      	ldr	r2, [r7, #16]
 801b1f6:	697b      	ldr	r3, [r7, #20]
 801b1f8:	69b8      	ldr	r0, [r7, #24]
 801b1fa:	69f9      	ldr	r1, [r7, #28]
 801b1fc:	f7e5 f95e 	bl	80004bc <__aeabi_uldivmod>
 801b200:	0002      	movs	r2, r0
 801b202:	000b      	movs	r3, r1
 801b204:	0e11      	lsrs	r1, r2, #24
 801b206:	021d      	lsls	r5, r3, #8
 801b208:	430d      	orrs	r5, r1
 801b20a:	0214      	lsls	r4, r2, #8
 801b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b20e:	685b      	ldr	r3, [r3, #4]
 801b210:	085b      	lsrs	r3, r3, #1
 801b212:	60bb      	str	r3, [r7, #8]
 801b214:	2300      	movs	r3, #0
 801b216:	60fb      	str	r3, [r7, #12]
 801b218:	68b8      	ldr	r0, [r7, #8]
 801b21a:	68f9      	ldr	r1, [r7, #12]
 801b21c:	1900      	adds	r0, r0, r4
 801b21e:	4169      	adcs	r1, r5
 801b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b222:	685b      	ldr	r3, [r3, #4]
 801b224:	603b      	str	r3, [r7, #0]
 801b226:	2300      	movs	r3, #0
 801b228:	607b      	str	r3, [r7, #4]
 801b22a:	683a      	ldr	r2, [r7, #0]
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	f7e5 f945 	bl	80004bc <__aeabi_uldivmod>
 801b232:	0002      	movs	r2, r0
 801b234:	000b      	movs	r3, r1
 801b236:	0013      	movs	r3, r2
 801b238:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b23a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b23c:	23c0      	movs	r3, #192	@ 0xc0
 801b23e:	009b      	lsls	r3, r3, #2
 801b240:	429a      	cmp	r2, r3
 801b242:	d309      	bcc.n	801b258 <UART_SetConfig+0x228>
 801b244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b246:	2380      	movs	r3, #128	@ 0x80
 801b248:	035b      	lsls	r3, r3, #13
 801b24a:	429a      	cmp	r2, r3
 801b24c:	d204      	bcs.n	801b258 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 801b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b254:	60da      	str	r2, [r3, #12]
 801b256:	e006      	b.n	801b266 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 801b258:	231f      	movs	r3, #31
 801b25a:	2220      	movs	r2, #32
 801b25c:	189b      	adds	r3, r3, r2
 801b25e:	19db      	adds	r3, r3, r7
 801b260:	2201      	movs	r2, #1
 801b262:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 801b264:	e09e      	b.n	801b3a4 <UART_SetConfig+0x374>
 801b266:	e09d      	b.n	801b3a4 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b26a:	69da      	ldr	r2, [r3, #28]
 801b26c:	2380      	movs	r3, #128	@ 0x80
 801b26e:	021b      	lsls	r3, r3, #8
 801b270:	429a      	cmp	r2, r3
 801b272:	d14c      	bne.n	801b30e <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801b274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b276:	0018      	movs	r0, r3
 801b278:	f7fc fdea 	bl	8017e50 <HAL_RCCEx_GetPeriphCLKFreq>
 801b27c:	0003      	movs	r3, r0
 801b27e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b282:	2b00      	cmp	r3, #0
 801b284:	d100      	bne.n	801b288 <UART_SetConfig+0x258>
 801b286:	e08d      	b.n	801b3a4 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b28a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b28c:	4b41      	ldr	r3, [pc, #260]	@ (801b394 <UART_SetConfig+0x364>)
 801b28e:	0052      	lsls	r2, r2, #1
 801b290:	5ad3      	ldrh	r3, [r2, r3]
 801b292:	0019      	movs	r1, r3
 801b294:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b296:	f7e4 ff3f 	bl	8000118 <__udivsi3>
 801b29a:	0003      	movs	r3, r0
 801b29c:	005a      	lsls	r2, r3, #1
 801b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	085b      	lsrs	r3, r3, #1
 801b2a4:	18d2      	adds	r2, r2, r3
 801b2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a8:	685b      	ldr	r3, [r3, #4]
 801b2aa:	0019      	movs	r1, r3
 801b2ac:	0010      	movs	r0, r2
 801b2ae:	f7e4 ff33 	bl	8000118 <__udivsi3>
 801b2b2:	0003      	movs	r3, r0
 801b2b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2b8:	2b0f      	cmp	r3, #15
 801b2ba:	d921      	bls.n	801b300 <UART_SetConfig+0x2d0>
 801b2bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b2be:	2380      	movs	r3, #128	@ 0x80
 801b2c0:	025b      	lsls	r3, r3, #9
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	d21c      	bcs.n	801b300 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2c8:	b29a      	uxth	r2, r3
 801b2ca:	2012      	movs	r0, #18
 801b2cc:	2420      	movs	r4, #32
 801b2ce:	1903      	adds	r3, r0, r4
 801b2d0:	19db      	adds	r3, r3, r7
 801b2d2:	210f      	movs	r1, #15
 801b2d4:	438a      	bics	r2, r1
 801b2d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2da:	085b      	lsrs	r3, r3, #1
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	2207      	movs	r2, #7
 801b2e0:	4013      	ands	r3, r2
 801b2e2:	b299      	uxth	r1, r3
 801b2e4:	1903      	adds	r3, r0, r4
 801b2e6:	19db      	adds	r3, r3, r7
 801b2e8:	1902      	adds	r2, r0, r4
 801b2ea:	19d2      	adds	r2, r2, r7
 801b2ec:	8812      	ldrh	r2, [r2, #0]
 801b2ee:	430a      	orrs	r2, r1
 801b2f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	1902      	adds	r2, r0, r4
 801b2f8:	19d2      	adds	r2, r2, r7
 801b2fa:	8812      	ldrh	r2, [r2, #0]
 801b2fc:	60da      	str	r2, [r3, #12]
 801b2fe:	e051      	b.n	801b3a4 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 801b300:	231f      	movs	r3, #31
 801b302:	2220      	movs	r2, #32
 801b304:	189b      	adds	r3, r3, r2
 801b306:	19db      	adds	r3, r3, r7
 801b308:	2201      	movs	r2, #1
 801b30a:	701a      	strb	r2, [r3, #0]
 801b30c:	e04a      	b.n	801b3a4 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801b30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b310:	0018      	movs	r0, r3
 801b312:	f7fc fd9d 	bl	8017e50 <HAL_RCCEx_GetPeriphCLKFreq>
 801b316:	0003      	movs	r3, r0
 801b318:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 801b31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d041      	beq.n	801b3a4 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b324:	4b1b      	ldr	r3, [pc, #108]	@ (801b394 <UART_SetConfig+0x364>)
 801b326:	0052      	lsls	r2, r2, #1
 801b328:	5ad3      	ldrh	r3, [r2, r3]
 801b32a:	0019      	movs	r1, r3
 801b32c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b32e:	f7e4 fef3 	bl	8000118 <__udivsi3>
 801b332:	0003      	movs	r3, r0
 801b334:	001a      	movs	r2, r3
 801b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b338:	685b      	ldr	r3, [r3, #4]
 801b33a:	085b      	lsrs	r3, r3, #1
 801b33c:	18d2      	adds	r2, r2, r3
 801b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b340:	685b      	ldr	r3, [r3, #4]
 801b342:	0019      	movs	r1, r3
 801b344:	0010      	movs	r0, r2
 801b346:	f7e4 fee7 	bl	8000118 <__udivsi3>
 801b34a:	0003      	movs	r3, r0
 801b34c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b350:	2b0f      	cmp	r3, #15
 801b352:	d921      	bls.n	801b398 <UART_SetConfig+0x368>
 801b354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b356:	2380      	movs	r3, #128	@ 0x80
 801b358:	025b      	lsls	r3, r3, #9
 801b35a:	429a      	cmp	r2, r3
 801b35c:	d21c      	bcs.n	801b398 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b360:	b29a      	uxth	r2, r3
 801b362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	60da      	str	r2, [r3, #12]
 801b368:	e01c      	b.n	801b3a4 <UART_SetConfig+0x374>
 801b36a:	46c0      	nop			@ (mov r8, r8)
 801b36c:	40008000 	.word	0x40008000
 801b370:	cfff69f3 	.word	0xcfff69f3
 801b374:	ffffcfff 	.word	0xffffcfff
 801b378:	40008400 	.word	0x40008400
 801b37c:	40008c00 	.word	0x40008c00
 801b380:	11fff4ff 	.word	0x11fff4ff
 801b384:	40013800 	.word	0x40013800
 801b388:	40004400 	.word	0x40004400
 801b38c:	40004800 	.word	0x40004800
 801b390:	40004c00 	.word	0x40004c00
 801b394:	0801c7e4 	.word	0x0801c7e4
      }
      else
      {
        ret = HAL_ERROR;
 801b398:	231f      	movs	r3, #31
 801b39a:	2220      	movs	r2, #32
 801b39c:	189b      	adds	r3, r3, r2
 801b39e:	19db      	adds	r3, r3, r7
 801b3a0:	2201      	movs	r2, #1
 801b3a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3a6:	226a      	movs	r2, #106	@ 0x6a
 801b3a8:	2101      	movs	r1, #1
 801b3aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 801b3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3ae:	2268      	movs	r2, #104	@ 0x68
 801b3b0:	2101      	movs	r1, #1
 801b3b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3bc:	2200      	movs	r2, #0
 801b3be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801b3c0:	231f      	movs	r3, #31
 801b3c2:	2220      	movs	r2, #32
 801b3c4:	189b      	adds	r3, r3, r2
 801b3c6:	19db      	adds	r3, r3, r7
 801b3c8:	781b      	ldrb	r3, [r3, #0]
}
 801b3ca:	0018      	movs	r0, r3
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	b012      	add	sp, #72	@ 0x48
 801b3d0:	bdb0      	pop	{r4, r5, r7, pc}
 801b3d2:	46c0      	nop			@ (mov r8, r8)

0801b3d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b082      	sub	sp, #8
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3e0:	2208      	movs	r2, #8
 801b3e2:	4013      	ands	r3, r2
 801b3e4:	d00b      	beq.n	801b3fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	685b      	ldr	r3, [r3, #4]
 801b3ec:	4a4a      	ldr	r2, [pc, #296]	@ (801b518 <UART_AdvFeatureConfig+0x144>)
 801b3ee:	4013      	ands	r3, r2
 801b3f0:	0019      	movs	r1, r3
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	430a      	orrs	r2, r1
 801b3fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b402:	2201      	movs	r2, #1
 801b404:	4013      	ands	r3, r2
 801b406:	d00b      	beq.n	801b420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	4a43      	ldr	r2, [pc, #268]	@ (801b51c <UART_AdvFeatureConfig+0x148>)
 801b410:	4013      	ands	r3, r2
 801b412:	0019      	movs	r1, r3
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	430a      	orrs	r2, r1
 801b41e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b424:	2202      	movs	r2, #2
 801b426:	4013      	ands	r3, r2
 801b428:	d00b      	beq.n	801b442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	685b      	ldr	r3, [r3, #4]
 801b430:	4a3b      	ldr	r2, [pc, #236]	@ (801b520 <UART_AdvFeatureConfig+0x14c>)
 801b432:	4013      	ands	r3, r2
 801b434:	0019      	movs	r1, r3
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	430a      	orrs	r2, r1
 801b440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b446:	2204      	movs	r2, #4
 801b448:	4013      	ands	r3, r2
 801b44a:	d00b      	beq.n	801b464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	685b      	ldr	r3, [r3, #4]
 801b452:	4a34      	ldr	r2, [pc, #208]	@ (801b524 <UART_AdvFeatureConfig+0x150>)
 801b454:	4013      	ands	r3, r2
 801b456:	0019      	movs	r1, r3
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	430a      	orrs	r2, r1
 801b462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b468:	2210      	movs	r2, #16
 801b46a:	4013      	ands	r3, r2
 801b46c:	d00b      	beq.n	801b486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	689b      	ldr	r3, [r3, #8]
 801b474:	4a2c      	ldr	r2, [pc, #176]	@ (801b528 <UART_AdvFeatureConfig+0x154>)
 801b476:	4013      	ands	r3, r2
 801b478:	0019      	movs	r1, r3
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	430a      	orrs	r2, r1
 801b484:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b48a:	2220      	movs	r2, #32
 801b48c:	4013      	ands	r3, r2
 801b48e:	d00b      	beq.n	801b4a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	689b      	ldr	r3, [r3, #8]
 801b496:	4a25      	ldr	r2, [pc, #148]	@ (801b52c <UART_AdvFeatureConfig+0x158>)
 801b498:	4013      	ands	r3, r2
 801b49a:	0019      	movs	r1, r3
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	430a      	orrs	r2, r1
 801b4a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4ac:	2240      	movs	r2, #64	@ 0x40
 801b4ae:	4013      	ands	r3, r2
 801b4b0:	d01d      	beq.n	801b4ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	685b      	ldr	r3, [r3, #4]
 801b4b8:	4a1d      	ldr	r2, [pc, #116]	@ (801b530 <UART_AdvFeatureConfig+0x15c>)
 801b4ba:	4013      	ands	r3, r2
 801b4bc:	0019      	movs	r1, r3
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	430a      	orrs	r2, r1
 801b4c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b4ce:	2380      	movs	r3, #128	@ 0x80
 801b4d0:	035b      	lsls	r3, r3, #13
 801b4d2:	429a      	cmp	r2, r3
 801b4d4:	d10b      	bne.n	801b4ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	4a15      	ldr	r2, [pc, #84]	@ (801b534 <UART_AdvFeatureConfig+0x160>)
 801b4de:	4013      	ands	r3, r2
 801b4e0:	0019      	movs	r1, r3
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	430a      	orrs	r2, r1
 801b4ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4f2:	2280      	movs	r2, #128	@ 0x80
 801b4f4:	4013      	ands	r3, r2
 801b4f6:	d00b      	beq.n	801b510 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	4a0e      	ldr	r2, [pc, #56]	@ (801b538 <UART_AdvFeatureConfig+0x164>)
 801b500:	4013      	ands	r3, r2
 801b502:	0019      	movs	r1, r3
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	430a      	orrs	r2, r1
 801b50e:	605a      	str	r2, [r3, #4]
  }
}
 801b510:	46c0      	nop			@ (mov r8, r8)
 801b512:	46bd      	mov	sp, r7
 801b514:	b002      	add	sp, #8
 801b516:	bd80      	pop	{r7, pc}
 801b518:	ffff7fff 	.word	0xffff7fff
 801b51c:	fffdffff 	.word	0xfffdffff
 801b520:	fffeffff 	.word	0xfffeffff
 801b524:	fffbffff 	.word	0xfffbffff
 801b528:	ffffefff 	.word	0xffffefff
 801b52c:	ffffdfff 	.word	0xffffdfff
 801b530:	ffefffff 	.word	0xffefffff
 801b534:	ff9fffff 	.word	0xff9fffff
 801b538:	fff7ffff 	.word	0xfff7ffff

0801b53c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b092      	sub	sp, #72	@ 0x48
 801b540:	af02      	add	r7, sp, #8
 801b542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	2290      	movs	r2, #144	@ 0x90
 801b548:	2100      	movs	r1, #0
 801b54a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801b54c:	f7f6 fd50 	bl	8011ff0 <HAL_GetTick>
 801b550:	0003      	movs	r3, r0
 801b552:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	2208      	movs	r2, #8
 801b55c:	4013      	ands	r3, r2
 801b55e:	2b08      	cmp	r3, #8
 801b560:	d12d      	bne.n	801b5be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b564:	2280      	movs	r2, #128	@ 0x80
 801b566:	0391      	lsls	r1, r2, #14
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	4a47      	ldr	r2, [pc, #284]	@ (801b688 <UART_CheckIdleState+0x14c>)
 801b56c:	9200      	str	r2, [sp, #0]
 801b56e:	2200      	movs	r2, #0
 801b570:	f000 f88e 	bl	801b690 <UART_WaitOnFlagUntilTimeout>
 801b574:	1e03      	subs	r3, r0, #0
 801b576:	d022      	beq.n	801b5be <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b578:	f3ef 8310 	mrs	r3, PRIMASK
 801b57c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801b580:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b582:	2301      	movs	r3, #1
 801b584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b588:	f383 8810 	msr	PRIMASK, r3
}
 801b58c:	46c0      	nop			@ (mov r8, r8)
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	681a      	ldr	r2, [r3, #0]
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2180      	movs	r1, #128	@ 0x80
 801b59a:	438a      	bics	r2, r1
 801b59c:	601a      	str	r2, [r3, #0]
 801b59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5a4:	f383 8810 	msr	PRIMASK, r3
}
 801b5a8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	2288      	movs	r2, #136	@ 0x88
 801b5ae:	2120      	movs	r1, #32
 801b5b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	2284      	movs	r2, #132	@ 0x84
 801b5b6:	2100      	movs	r1, #0
 801b5b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b5ba:	2303      	movs	r3, #3
 801b5bc:	e060      	b.n	801b680 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	2204      	movs	r2, #4
 801b5c6:	4013      	ands	r3, r2
 801b5c8:	2b04      	cmp	r3, #4
 801b5ca:	d146      	bne.n	801b65a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b5ce:	2280      	movs	r2, #128	@ 0x80
 801b5d0:	03d1      	lsls	r1, r2, #15
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	4a2c      	ldr	r2, [pc, #176]	@ (801b688 <UART_CheckIdleState+0x14c>)
 801b5d6:	9200      	str	r2, [sp, #0]
 801b5d8:	2200      	movs	r2, #0
 801b5da:	f000 f859 	bl	801b690 <UART_WaitOnFlagUntilTimeout>
 801b5de:	1e03      	subs	r3, r0, #0
 801b5e0:	d03b      	beq.n	801b65a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b5e2:	f3ef 8310 	mrs	r3, PRIMASK
 801b5e6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	f383 8810 	msr	PRIMASK, r3
}
 801b5f6:	46c0      	nop			@ (mov r8, r8)
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	681a      	ldr	r2, [r3, #0]
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	4922      	ldr	r1, [pc, #136]	@ (801b68c <UART_CheckIdleState+0x150>)
 801b604:	400a      	ands	r2, r1
 801b606:	601a      	str	r2, [r3, #0]
 801b608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b60a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b60c:	697b      	ldr	r3, [r7, #20]
 801b60e:	f383 8810 	msr	PRIMASK, r3
}
 801b612:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b614:	f3ef 8310 	mrs	r3, PRIMASK
 801b618:	61bb      	str	r3, [r7, #24]
  return(result);
 801b61a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b61c:	633b      	str	r3, [r7, #48]	@ 0x30
 801b61e:	2301      	movs	r3, #1
 801b620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b622:	69fb      	ldr	r3, [r7, #28]
 801b624:	f383 8810 	msr	PRIMASK, r3
}
 801b628:	46c0      	nop			@ (mov r8, r8)
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	689a      	ldr	r2, [r3, #8]
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	2101      	movs	r1, #1
 801b636:	438a      	bics	r2, r1
 801b638:	609a      	str	r2, [r3, #8]
 801b63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b63c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b63e:	6a3b      	ldr	r3, [r7, #32]
 801b640:	f383 8810 	msr	PRIMASK, r3
}
 801b644:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	228c      	movs	r2, #140	@ 0x8c
 801b64a:	2120      	movs	r1, #32
 801b64c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2284      	movs	r2, #132	@ 0x84
 801b652:	2100      	movs	r1, #0
 801b654:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b656:	2303      	movs	r3, #3
 801b658:	e012      	b.n	801b680 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	2288      	movs	r2, #136	@ 0x88
 801b65e:	2120      	movs	r1, #32
 801b660:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	228c      	movs	r2, #140	@ 0x8c
 801b666:	2120      	movs	r1, #32
 801b668:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	2200      	movs	r2, #0
 801b66e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	2200      	movs	r2, #0
 801b674:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	2284      	movs	r2, #132	@ 0x84
 801b67a:	2100      	movs	r1, #0
 801b67c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b67e:	2300      	movs	r3, #0
}
 801b680:	0018      	movs	r0, r3
 801b682:	46bd      	mov	sp, r7
 801b684:	b010      	add	sp, #64	@ 0x40
 801b686:	bd80      	pop	{r7, pc}
 801b688:	01ffffff 	.word	0x01ffffff
 801b68c:	fffffedf 	.word	0xfffffedf

0801b690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b084      	sub	sp, #16
 801b694:	af00      	add	r7, sp, #0
 801b696:	60f8      	str	r0, [r7, #12]
 801b698:	60b9      	str	r1, [r7, #8]
 801b69a:	603b      	str	r3, [r7, #0]
 801b69c:	1dfb      	adds	r3, r7, #7
 801b69e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b6a0:	e051      	b.n	801b746 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b6a2:	69bb      	ldr	r3, [r7, #24]
 801b6a4:	3301      	adds	r3, #1
 801b6a6:	d04e      	beq.n	801b746 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b6a8:	f7f6 fca2 	bl	8011ff0 <HAL_GetTick>
 801b6ac:	0002      	movs	r2, r0
 801b6ae:	683b      	ldr	r3, [r7, #0]
 801b6b0:	1ad3      	subs	r3, r2, r3
 801b6b2:	69ba      	ldr	r2, [r7, #24]
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	d302      	bcc.n	801b6be <UART_WaitOnFlagUntilTimeout+0x2e>
 801b6b8:	69bb      	ldr	r3, [r7, #24]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d101      	bne.n	801b6c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801b6be:	2303      	movs	r3, #3
 801b6c0:	e051      	b.n	801b766 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801b6c2:	68fb      	ldr	r3, [r7, #12]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	2204      	movs	r2, #4
 801b6ca:	4013      	ands	r3, r2
 801b6cc:	d03b      	beq.n	801b746 <UART_WaitOnFlagUntilTimeout+0xb6>
 801b6ce:	68bb      	ldr	r3, [r7, #8]
 801b6d0:	2b80      	cmp	r3, #128	@ 0x80
 801b6d2:	d038      	beq.n	801b746 <UART_WaitOnFlagUntilTimeout+0xb6>
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	2b40      	cmp	r3, #64	@ 0x40
 801b6d8:	d035      	beq.n	801b746 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	69db      	ldr	r3, [r3, #28]
 801b6e0:	2208      	movs	r2, #8
 801b6e2:	4013      	ands	r3, r2
 801b6e4:	2b08      	cmp	r3, #8
 801b6e6:	d111      	bne.n	801b70c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2208      	movs	r2, #8
 801b6ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	0018      	movs	r0, r3
 801b6f4:	f000 f922 	bl	801b93c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	2290      	movs	r2, #144	@ 0x90
 801b6fc:	2108      	movs	r1, #8
 801b6fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	2284      	movs	r2, #132	@ 0x84
 801b704:	2100      	movs	r1, #0
 801b706:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801b708:	2301      	movs	r3, #1
 801b70a:	e02c      	b.n	801b766 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	69da      	ldr	r2, [r3, #28]
 801b712:	2380      	movs	r3, #128	@ 0x80
 801b714:	011b      	lsls	r3, r3, #4
 801b716:	401a      	ands	r2, r3
 801b718:	2380      	movs	r3, #128	@ 0x80
 801b71a:	011b      	lsls	r3, r3, #4
 801b71c:	429a      	cmp	r2, r3
 801b71e:	d112      	bne.n	801b746 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	2280      	movs	r2, #128	@ 0x80
 801b726:	0112      	lsls	r2, r2, #4
 801b728:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	0018      	movs	r0, r3
 801b72e:	f000 f905 	bl	801b93c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	2290      	movs	r2, #144	@ 0x90
 801b736:	2120      	movs	r1, #32
 801b738:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	2284      	movs	r2, #132	@ 0x84
 801b73e:	2100      	movs	r1, #0
 801b740:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801b742:	2303      	movs	r3, #3
 801b744:	e00f      	b.n	801b766 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	69db      	ldr	r3, [r3, #28]
 801b74c:	68ba      	ldr	r2, [r7, #8]
 801b74e:	4013      	ands	r3, r2
 801b750:	68ba      	ldr	r2, [r7, #8]
 801b752:	1ad3      	subs	r3, r2, r3
 801b754:	425a      	negs	r2, r3
 801b756:	4153      	adcs	r3, r2
 801b758:	b2db      	uxtb	r3, r3
 801b75a:	001a      	movs	r2, r3
 801b75c:	1dfb      	adds	r3, r7, #7
 801b75e:	781b      	ldrb	r3, [r3, #0]
 801b760:	429a      	cmp	r2, r3
 801b762:	d09e      	beq.n	801b6a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b764:	2300      	movs	r3, #0
}
 801b766:	0018      	movs	r0, r3
 801b768:	46bd      	mov	sp, r7
 801b76a:	b004      	add	sp, #16
 801b76c:	bd80      	pop	{r7, pc}
	...

0801b770 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b770:	b580      	push	{r7, lr}
 801b772:	b090      	sub	sp, #64	@ 0x40
 801b774:	af00      	add	r7, sp, #0
 801b776:	60f8      	str	r0, [r7, #12]
 801b778:	60b9      	str	r1, [r7, #8]
 801b77a:	1dbb      	adds	r3, r7, #6
 801b77c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	68ba      	ldr	r2, [r7, #8]
 801b782:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	1dba      	adds	r2, r7, #6
 801b788:	215c      	movs	r1, #92	@ 0x5c
 801b78a:	8812      	ldrh	r2, [r2, #0]
 801b78c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	2290      	movs	r2, #144	@ 0x90
 801b792:	2100      	movs	r1, #0
 801b794:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	228c      	movs	r2, #140	@ 0x8c
 801b79a:	2122      	movs	r1, #34	@ 0x22
 801b79c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	2280      	movs	r2, #128	@ 0x80
 801b7a2:	589b      	ldr	r3, [r3, r2]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d02d      	beq.n	801b804 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	2280      	movs	r2, #128	@ 0x80
 801b7ac:	589b      	ldr	r3, [r3, r2]
 801b7ae:	4a40      	ldr	r2, [pc, #256]	@ (801b8b0 <UART_Start_Receive_DMA+0x140>)
 801b7b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	2280      	movs	r2, #128	@ 0x80
 801b7b6:	589b      	ldr	r3, [r3, r2]
 801b7b8:	4a3e      	ldr	r2, [pc, #248]	@ (801b8b4 <UART_Start_Receive_DMA+0x144>)
 801b7ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	2280      	movs	r2, #128	@ 0x80
 801b7c0:	589b      	ldr	r3, [r3, r2]
 801b7c2:	4a3d      	ldr	r2, [pc, #244]	@ (801b8b8 <UART_Start_Receive_DMA+0x148>)
 801b7c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	2280      	movs	r2, #128	@ 0x80
 801b7ca:	589b      	ldr	r3, [r3, r2]
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	2280      	movs	r2, #128	@ 0x80
 801b7d4:	5898      	ldr	r0, [r3, r2]
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	3324      	adds	r3, #36	@ 0x24
 801b7dc:	0019      	movs	r1, r3
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b7e2:	001a      	movs	r2, r3
 801b7e4:	1dbb      	adds	r3, r7, #6
 801b7e6:	881b      	ldrh	r3, [r3, #0]
 801b7e8:	f7f8 f8ea 	bl	80139c0 <HAL_DMA_Start_IT>
 801b7ec:	1e03      	subs	r3, r0, #0
 801b7ee:	d009      	beq.n	801b804 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	2290      	movs	r2, #144	@ 0x90
 801b7f4:	2110      	movs	r1, #16
 801b7f6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	228c      	movs	r2, #140	@ 0x8c
 801b7fc:	2120      	movs	r1, #32
 801b7fe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801b800:	2301      	movs	r3, #1
 801b802:	e050      	b.n	801b8a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	691b      	ldr	r3, [r3, #16]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d019      	beq.n	801b840 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b80c:	f3ef 8310 	mrs	r3, PRIMASK
 801b810:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801b812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b816:	2301      	movs	r3, #1
 801b818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b81c:	f383 8810 	msr	PRIMASK, r3
}
 801b820:	46c0      	nop			@ (mov r8, r8)
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	681a      	ldr	r2, [r3, #0]
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	2180      	movs	r1, #128	@ 0x80
 801b82e:	0049      	lsls	r1, r1, #1
 801b830:	430a      	orrs	r2, r1
 801b832:	601a      	str	r2, [r3, #0]
 801b834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b836:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b83a:	f383 8810 	msr	PRIMASK, r3
}
 801b83e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b840:	f3ef 8310 	mrs	r3, PRIMASK
 801b844:	613b      	str	r3, [r7, #16]
  return(result);
 801b846:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b848:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b84a:	2301      	movs	r3, #1
 801b84c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b84e:	697b      	ldr	r3, [r7, #20]
 801b850:	f383 8810 	msr	PRIMASK, r3
}
 801b854:	46c0      	nop			@ (mov r8, r8)
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	689a      	ldr	r2, [r3, #8]
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	2101      	movs	r1, #1
 801b862:	430a      	orrs	r2, r1
 801b864:	609a      	str	r2, [r3, #8]
 801b866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b868:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b86a:	69bb      	ldr	r3, [r7, #24]
 801b86c:	f383 8810 	msr	PRIMASK, r3
}
 801b870:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b872:	f3ef 8310 	mrs	r3, PRIMASK
 801b876:	61fb      	str	r3, [r7, #28]
  return(result);
 801b878:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b87a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b87c:	2301      	movs	r3, #1
 801b87e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b880:	6a3b      	ldr	r3, [r7, #32]
 801b882:	f383 8810 	msr	PRIMASK, r3
}
 801b886:	46c0      	nop			@ (mov r8, r8)
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	689a      	ldr	r2, [r3, #8]
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	2140      	movs	r1, #64	@ 0x40
 801b894:	430a      	orrs	r2, r1
 801b896:	609a      	str	r2, [r3, #8]
 801b898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b89a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b89e:	f383 8810 	msr	PRIMASK, r3
}
 801b8a2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801b8a4:	2300      	movs	r3, #0
}
 801b8a6:	0018      	movs	r0, r3
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	b010      	add	sp, #64	@ 0x40
 801b8ac:	bd80      	pop	{r7, pc}
 801b8ae:	46c0      	nop			@ (mov r8, r8)
 801b8b0:	0801bac1 	.word	0x0801bac1
 801b8b4:	0801bbf1 	.word	0x0801bbf1
 801b8b8:	0801bc33 	.word	0x0801bc33

0801b8bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b08a      	sub	sp, #40	@ 0x28
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b8c4:	f3ef 8310 	mrs	r3, PRIMASK
 801b8c8:	60bb      	str	r3, [r7, #8]
  return(result);
 801b8ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801b8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	f383 8810 	msr	PRIMASK, r3
}
 801b8d8:	46c0      	nop			@ (mov r8, r8)
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	681a      	ldr	r2, [r3, #0]
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	21c0      	movs	r1, #192	@ 0xc0
 801b8e6:	438a      	bics	r2, r1
 801b8e8:	601a      	str	r2, [r3, #0]
 801b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8ee:	693b      	ldr	r3, [r7, #16]
 801b8f0:	f383 8810 	msr	PRIMASK, r3
}
 801b8f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b8f6:	f3ef 8310 	mrs	r3, PRIMASK
 801b8fa:	617b      	str	r3, [r7, #20]
  return(result);
 801b8fc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801b8fe:	623b      	str	r3, [r7, #32]
 801b900:	2301      	movs	r3, #1
 801b902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b904:	69bb      	ldr	r3, [r7, #24]
 801b906:	f383 8810 	msr	PRIMASK, r3
}
 801b90a:	46c0      	nop			@ (mov r8, r8)
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	689a      	ldr	r2, [r3, #8]
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4908      	ldr	r1, [pc, #32]	@ (801b938 <UART_EndTxTransfer+0x7c>)
 801b918:	400a      	ands	r2, r1
 801b91a:	609a      	str	r2, [r3, #8]
 801b91c:	6a3b      	ldr	r3, [r7, #32]
 801b91e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b920:	69fb      	ldr	r3, [r7, #28]
 801b922:	f383 8810 	msr	PRIMASK, r3
}
 801b926:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	2288      	movs	r2, #136	@ 0x88
 801b92c:	2120      	movs	r1, #32
 801b92e:	5099      	str	r1, [r3, r2]
}
 801b930:	46c0      	nop			@ (mov r8, r8)
 801b932:	46bd      	mov	sp, r7
 801b934:	b00a      	add	sp, #40	@ 0x28
 801b936:	bd80      	pop	{r7, pc}
 801b938:	ff7fffff 	.word	0xff7fffff

0801b93c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b08e      	sub	sp, #56	@ 0x38
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b944:	f3ef 8310 	mrs	r3, PRIMASK
 801b948:	617b      	str	r3, [r7, #20]
  return(result);
 801b94a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b94c:	637b      	str	r3, [r7, #52]	@ 0x34
 801b94e:	2301      	movs	r3, #1
 801b950:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b952:	69bb      	ldr	r3, [r7, #24]
 801b954:	f383 8810 	msr	PRIMASK, r3
}
 801b958:	46c0      	nop			@ (mov r8, r8)
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	681a      	ldr	r2, [r3, #0]
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	4926      	ldr	r1, [pc, #152]	@ (801ba00 <UART_EndRxTransfer+0xc4>)
 801b966:	400a      	ands	r2, r1
 801b968:	601a      	str	r2, [r3, #0]
 801b96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b96c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b96e:	69fb      	ldr	r3, [r7, #28]
 801b970:	f383 8810 	msr	PRIMASK, r3
}
 801b974:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b976:	f3ef 8310 	mrs	r3, PRIMASK
 801b97a:	623b      	str	r3, [r7, #32]
  return(result);
 801b97c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b97e:	633b      	str	r3, [r7, #48]	@ 0x30
 801b980:	2301      	movs	r3, #1
 801b982:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b986:	f383 8810 	msr	PRIMASK, r3
}
 801b98a:	46c0      	nop			@ (mov r8, r8)
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	689a      	ldr	r2, [r3, #8]
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	491b      	ldr	r1, [pc, #108]	@ (801ba04 <UART_EndRxTransfer+0xc8>)
 801b998:	400a      	ands	r2, r1
 801b99a:	609a      	str	r2, [r3, #8]
 801b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b99e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9a2:	f383 8810 	msr	PRIMASK, r3
}
 801b9a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9ac:	2b01      	cmp	r3, #1
 801b9ae:	d118      	bne.n	801b9e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b9b0:	f3ef 8310 	mrs	r3, PRIMASK
 801b9b4:	60bb      	str	r3, [r7, #8]
  return(result);
 801b9b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b9ba:	2301      	movs	r3, #1
 801b9bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	f383 8810 	msr	PRIMASK, r3
}
 801b9c4:	46c0      	nop			@ (mov r8, r8)
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	681a      	ldr	r2, [r3, #0]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	2110      	movs	r1, #16
 801b9d2:	438a      	bics	r2, r1
 801b9d4:	601a      	str	r2, [r3, #0]
 801b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9da:	693b      	ldr	r3, [r7, #16]
 801b9dc:	f383 8810 	msr	PRIMASK, r3
}
 801b9e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	228c      	movs	r2, #140	@ 0x8c
 801b9e6:	2120      	movs	r1, #32
 801b9e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801b9f6:	46c0      	nop			@ (mov r8, r8)
 801b9f8:	46bd      	mov	sp, r7
 801b9fa:	b00e      	add	sp, #56	@ 0x38
 801b9fc:	bd80      	pop	{r7, pc}
 801b9fe:	46c0      	nop			@ (mov r8, r8)
 801ba00:	fffffedf 	.word	0xfffffedf
 801ba04:	effffffe 	.word	0xeffffffe

0801ba08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b08c      	sub	sp, #48	@ 0x30
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2220      	movs	r2, #32
 801ba1e:	4013      	ands	r3, r2
 801ba20:	d135      	bne.n	801ba8e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ba22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba24:	2256      	movs	r2, #86	@ 0x56
 801ba26:	2100      	movs	r1, #0
 801ba28:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ba2a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba2e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba30:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ba32:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba34:	2301      	movs	r3, #1
 801ba36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba38:	693b      	ldr	r3, [r7, #16]
 801ba3a:	f383 8810 	msr	PRIMASK, r3
}
 801ba3e:	46c0      	nop			@ (mov r8, r8)
 801ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	689a      	ldr	r2, [r3, #8]
 801ba46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	2180      	movs	r1, #128	@ 0x80
 801ba4c:	438a      	bics	r2, r1
 801ba4e:	609a      	str	r2, [r3, #8]
 801ba50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba54:	697b      	ldr	r3, [r7, #20]
 801ba56:	f383 8810 	msr	PRIMASK, r3
}
 801ba5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801ba5c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba60:	61bb      	str	r3, [r7, #24]
  return(result);
 801ba62:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ba64:	627b      	str	r3, [r7, #36]	@ 0x24
 801ba66:	2301      	movs	r3, #1
 801ba68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba6a:	69fb      	ldr	r3, [r7, #28]
 801ba6c:	f383 8810 	msr	PRIMASK, r3
}
 801ba70:	46c0      	nop			@ (mov r8, r8)
 801ba72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	681a      	ldr	r2, [r3, #0]
 801ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	2140      	movs	r1, #64	@ 0x40
 801ba7e:	430a      	orrs	r2, r1
 801ba80:	601a      	str	r2, [r3, #0]
 801ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba86:	6a3b      	ldr	r3, [r7, #32]
 801ba88:	f383 8810 	msr	PRIMASK, r3
}
 801ba8c:	e004      	b.n	801ba98 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801ba8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba90:	0018      	movs	r0, r3
 801ba92:	f7ff fa99 	bl	801afc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ba96:	46c0      	nop			@ (mov r8, r8)
 801ba98:	46c0      	nop			@ (mov r8, r8)
 801ba9a:	46bd      	mov	sp, r7
 801ba9c:	b00c      	add	sp, #48	@ 0x30
 801ba9e:	bd80      	pop	{r7, pc}

0801baa0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b084      	sub	sp, #16
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801baac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	0018      	movs	r0, r3
 801bab2:	f7ff fa91 	bl	801afd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bab6:	46c0      	nop			@ (mov r8, r8)
 801bab8:	46bd      	mov	sp, r7
 801baba:	b004      	add	sp, #16
 801babc:	bd80      	pop	{r7, pc}
	...

0801bac0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b094      	sub	sp, #80	@ 0x50
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bacc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	2220      	movs	r2, #32
 801bad6:	4013      	ands	r3, r2
 801bad8:	d16f      	bne.n	801bbba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801bada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801badc:	225e      	movs	r2, #94	@ 0x5e
 801bade:	2100      	movs	r1, #0
 801bae0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bae2:	f3ef 8310 	mrs	r3, PRIMASK
 801bae6:	61bb      	str	r3, [r7, #24]
  return(result);
 801bae8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801baea:	64bb      	str	r3, [r7, #72]	@ 0x48
 801baec:	2301      	movs	r3, #1
 801baee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baf0:	69fb      	ldr	r3, [r7, #28]
 801baf2:	f383 8810 	msr	PRIMASK, r3
}
 801baf6:	46c0      	nop			@ (mov r8, r8)
 801baf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	681a      	ldr	r2, [r3, #0]
 801bafe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	493a      	ldr	r1, [pc, #232]	@ (801bbec <UART_DMAReceiveCplt+0x12c>)
 801bb04:	400a      	ands	r2, r1
 801bb06:	601a      	str	r2, [r3, #0]
 801bb08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bb0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb0c:	6a3b      	ldr	r3, [r7, #32]
 801bb0e:	f383 8810 	msr	PRIMASK, r3
}
 801bb12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bb14:	f3ef 8310 	mrs	r3, PRIMASK
 801bb18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bb1c:	647b      	str	r3, [r7, #68]	@ 0x44
 801bb1e:	2301      	movs	r3, #1
 801bb20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb24:	f383 8810 	msr	PRIMASK, r3
}
 801bb28:	46c0      	nop			@ (mov r8, r8)
 801bb2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	689a      	ldr	r2, [r3, #8]
 801bb30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	2101      	movs	r1, #1
 801bb36:	438a      	bics	r2, r1
 801bb38:	609a      	str	r2, [r3, #8]
 801bb3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb40:	f383 8810 	msr	PRIMASK, r3
}
 801bb44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bb46:	f3ef 8310 	mrs	r3, PRIMASK
 801bb4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801bb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bb4e:	643b      	str	r3, [r7, #64]	@ 0x40
 801bb50:	2301      	movs	r3, #1
 801bb52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bb56:	f383 8810 	msr	PRIMASK, r3
}
 801bb5a:	46c0      	nop			@ (mov r8, r8)
 801bb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	689a      	ldr	r2, [r3, #8]
 801bb62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	2140      	movs	r1, #64	@ 0x40
 801bb68:	438a      	bics	r2, r1
 801bb6a:	609a      	str	r2, [r3, #8]
 801bb6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb72:	f383 8810 	msr	PRIMASK, r3
}
 801bb76:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801bb78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb7a:	228c      	movs	r2, #140	@ 0x8c
 801bb7c:	2120      	movs	r1, #32
 801bb7e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bb80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bb84:	2b01      	cmp	r3, #1
 801bb86:	d118      	bne.n	801bbba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bb88:	f3ef 8310 	mrs	r3, PRIMASK
 801bb8c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb8e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bb92:	2301      	movs	r3, #1
 801bb94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb96:	693b      	ldr	r3, [r7, #16]
 801bb98:	f383 8810 	msr	PRIMASK, r3
}
 801bb9c:	46c0      	nop			@ (mov r8, r8)
 801bb9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	681a      	ldr	r2, [r3, #0]
 801bba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	2110      	movs	r1, #16
 801bbaa:	438a      	bics	r2, r1
 801bbac:	601a      	str	r2, [r3, #0]
 801bbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbb2:	697b      	ldr	r3, [r7, #20]
 801bbb4:	f383 8810 	msr	PRIMASK, r3
}
 801bbb8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bbba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbbc:	2200      	movs	r2, #0
 801bbbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bbc4:	2b01      	cmp	r3, #1
 801bbc6:	d108      	bne.n	801bbda <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801bbc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbca:	225c      	movs	r2, #92	@ 0x5c
 801bbcc:	5a9a      	ldrh	r2, [r3, r2]
 801bbce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbd0:	0011      	movs	r1, r2
 801bbd2:	0018      	movs	r0, r3
 801bbd4:	f7ff fa20 	bl	801b018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801bbd8:	e003      	b.n	801bbe2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 801bbda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbdc:	0018      	movs	r0, r3
 801bbde:	f7ff fa03 	bl	801afe8 <HAL_UART_RxCpltCallback>
}
 801bbe2:	46c0      	nop			@ (mov r8, r8)
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	b014      	add	sp, #80	@ 0x50
 801bbe8:	bd80      	pop	{r7, pc}
 801bbea:	46c0      	nop			@ (mov r8, r8)
 801bbec:	fffffeff 	.word	0xfffffeff

0801bbf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b084      	sub	sp, #16
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	2201      	movs	r2, #1
 801bc02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc08:	2b01      	cmp	r3, #1
 801bc0a:	d10a      	bne.n	801bc22 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	225c      	movs	r2, #92	@ 0x5c
 801bc10:	5a9b      	ldrh	r3, [r3, r2]
 801bc12:	085b      	lsrs	r3, r3, #1
 801bc14:	b29a      	uxth	r2, r3
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	0011      	movs	r1, r2
 801bc1a:	0018      	movs	r0, r3
 801bc1c:	f7ff f9fc 	bl	801b018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801bc20:	e003      	b.n	801bc2a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	0018      	movs	r0, r3
 801bc26:	f7ff f9e7 	bl	801aff8 <HAL_UART_RxHalfCpltCallback>
}
 801bc2a:	46c0      	nop			@ (mov r8, r8)
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	b004      	add	sp, #16
 801bc30:	bd80      	pop	{r7, pc}

0801bc32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801bc32:	b580      	push	{r7, lr}
 801bc34:	b086      	sub	sp, #24
 801bc36:	af00      	add	r7, sp, #0
 801bc38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	2288      	movs	r2, #136	@ 0x88
 801bc44:	589b      	ldr	r3, [r3, r2]
 801bc46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801bc48:	697b      	ldr	r3, [r7, #20]
 801bc4a:	228c      	movs	r2, #140	@ 0x8c
 801bc4c:	589b      	ldr	r3, [r3, r2]
 801bc4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	689b      	ldr	r3, [r3, #8]
 801bc56:	2280      	movs	r2, #128	@ 0x80
 801bc58:	4013      	ands	r3, r2
 801bc5a:	2b80      	cmp	r3, #128	@ 0x80
 801bc5c:	d10a      	bne.n	801bc74 <UART_DMAError+0x42>
 801bc5e:	693b      	ldr	r3, [r7, #16]
 801bc60:	2b21      	cmp	r3, #33	@ 0x21
 801bc62:	d107      	bne.n	801bc74 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801bc64:	697b      	ldr	r3, [r7, #20]
 801bc66:	2256      	movs	r2, #86	@ 0x56
 801bc68:	2100      	movs	r1, #0
 801bc6a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	0018      	movs	r0, r3
 801bc70:	f7ff fe24 	bl	801b8bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801bc74:	697b      	ldr	r3, [r7, #20]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	689b      	ldr	r3, [r3, #8]
 801bc7a:	2240      	movs	r2, #64	@ 0x40
 801bc7c:	4013      	ands	r3, r2
 801bc7e:	2b40      	cmp	r3, #64	@ 0x40
 801bc80:	d10a      	bne.n	801bc98 <UART_DMAError+0x66>
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	2b22      	cmp	r3, #34	@ 0x22
 801bc86:	d107      	bne.n	801bc98 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801bc88:	697b      	ldr	r3, [r7, #20]
 801bc8a:	225e      	movs	r2, #94	@ 0x5e
 801bc8c:	2100      	movs	r1, #0
 801bc8e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801bc90:	697b      	ldr	r3, [r7, #20]
 801bc92:	0018      	movs	r0, r3
 801bc94:	f7ff fe52 	bl	801b93c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	2290      	movs	r2, #144	@ 0x90
 801bc9c:	589b      	ldr	r3, [r3, r2]
 801bc9e:	2210      	movs	r2, #16
 801bca0:	431a      	orrs	r2, r3
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	2190      	movs	r1, #144	@ 0x90
 801bca6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	0018      	movs	r0, r3
 801bcac:	f7ff f9ac 	bl	801b008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bcb0:	46c0      	nop			@ (mov r8, r8)
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	b006      	add	sp, #24
 801bcb6:	bd80      	pop	{r7, pc}

0801bcb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b084      	sub	sp, #16
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bcc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	225e      	movs	r2, #94	@ 0x5e
 801bcca:	2100      	movs	r1, #0
 801bccc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	0018      	movs	r0, r3
 801bcd2:	f7ff f999 	bl	801b008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bcd6:	46c0      	nop			@ (mov r8, r8)
 801bcd8:	46bd      	mov	sp, r7
 801bcda:	b004      	add	sp, #16
 801bcdc:	bd80      	pop	{r7, pc}

0801bcde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801bcde:	b580      	push	{r7, lr}
 801bce0:	b086      	sub	sp, #24
 801bce2:	af00      	add	r7, sp, #0
 801bce4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801bce6:	f3ef 8310 	mrs	r3, PRIMASK
 801bcea:	60bb      	str	r3, [r7, #8]
  return(result);
 801bcec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801bcee:	617b      	str	r3, [r7, #20]
 801bcf0:	2301      	movs	r3, #1
 801bcf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	f383 8810 	msr	PRIMASK, r3
}
 801bcfa:	46c0      	nop			@ (mov r8, r8)
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	681a      	ldr	r2, [r3, #0]
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	2140      	movs	r1, #64	@ 0x40
 801bd08:	438a      	bics	r2, r1
 801bd0a:	601a      	str	r2, [r3, #0]
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd10:	693b      	ldr	r3, [r7, #16]
 801bd12:	f383 8810 	msr	PRIMASK, r3
}
 801bd16:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	2288      	movs	r2, #136	@ 0x88
 801bd1c:	2120      	movs	r1, #32
 801bd1e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	2200      	movs	r2, #0
 801bd24:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	0018      	movs	r0, r3
 801bd2a:	f7ff f94d 	bl	801afc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bd2e:	46c0      	nop			@ (mov r8, r8)
 801bd30:	46bd      	mov	sp, r7
 801bd32:	b006      	add	sp, #24
 801bd34:	bd80      	pop	{r7, pc}

0801bd36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801bd36:	b580      	push	{r7, lr}
 801bd38:	b082      	sub	sp, #8
 801bd3a:	af00      	add	r7, sp, #0
 801bd3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801bd3e:	46c0      	nop			@ (mov r8, r8)
 801bd40:	46bd      	mov	sp, r7
 801bd42:	b002      	add	sp, #8
 801bd44:	bd80      	pop	{r7, pc}

0801bd46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801bd46:	b580      	push	{r7, lr}
 801bd48:	b082      	sub	sp, #8
 801bd4a:	af00      	add	r7, sp, #0
 801bd4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801bd4e:	46c0      	nop			@ (mov r8, r8)
 801bd50:	46bd      	mov	sp, r7
 801bd52:	b002      	add	sp, #8
 801bd54:	bd80      	pop	{r7, pc}

0801bd56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801bd56:	b580      	push	{r7, lr}
 801bd58:	b082      	sub	sp, #8
 801bd5a:	af00      	add	r7, sp, #0
 801bd5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801bd5e:	46c0      	nop			@ (mov r8, r8)
 801bd60:	46bd      	mov	sp, r7
 801bd62:	b002      	add	sp, #8
 801bd64:	bd80      	pop	{r7, pc}
	...

0801bd68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b084      	sub	sp, #16
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	2284      	movs	r2, #132	@ 0x84
 801bd74:	5c9b      	ldrb	r3, [r3, r2]
 801bd76:	2b01      	cmp	r3, #1
 801bd78:	d101      	bne.n	801bd7e <HAL_UARTEx_DisableFifoMode+0x16>
 801bd7a:	2302      	movs	r3, #2
 801bd7c:	e027      	b.n	801bdce <HAL_UARTEx_DisableFifoMode+0x66>
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2284      	movs	r2, #132	@ 0x84
 801bd82:	2101      	movs	r1, #1
 801bd84:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	2288      	movs	r2, #136	@ 0x88
 801bd8a:	2124      	movs	r1, #36	@ 0x24
 801bd8c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	681a      	ldr	r2, [r3, #0]
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	2101      	movs	r1, #1
 801bda2:	438a      	bics	r2, r1
 801bda4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	4a0b      	ldr	r2, [pc, #44]	@ (801bdd8 <HAL_UARTEx_DisableFifoMode+0x70>)
 801bdaa:	4013      	ands	r3, r2
 801bdac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	68fa      	ldr	r2, [r7, #12]
 801bdba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	2288      	movs	r2, #136	@ 0x88
 801bdc0:	2120      	movs	r1, #32
 801bdc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	2284      	movs	r2, #132	@ 0x84
 801bdc8:	2100      	movs	r1, #0
 801bdca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bdcc:	2300      	movs	r3, #0
}
 801bdce:	0018      	movs	r0, r3
 801bdd0:	46bd      	mov	sp, r7
 801bdd2:	b004      	add	sp, #16
 801bdd4:	bd80      	pop	{r7, pc}
 801bdd6:	46c0      	nop			@ (mov r8, r8)
 801bdd8:	dfffffff 	.word	0xdfffffff

0801bddc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b084      	sub	sp, #16
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
 801bde4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	2284      	movs	r2, #132	@ 0x84
 801bdea:	5c9b      	ldrb	r3, [r3, r2]
 801bdec:	2b01      	cmp	r3, #1
 801bdee:	d101      	bne.n	801bdf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801bdf0:	2302      	movs	r3, #2
 801bdf2:	e02e      	b.n	801be52 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	2284      	movs	r2, #132	@ 0x84
 801bdf8:	2101      	movs	r1, #1
 801bdfa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	2288      	movs	r2, #136	@ 0x88
 801be00:	2124      	movs	r1, #36	@ 0x24
 801be02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	681a      	ldr	r2, [r3, #0]
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	2101      	movs	r1, #1
 801be18:	438a      	bics	r2, r1
 801be1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	689b      	ldr	r3, [r3, #8]
 801be22:	00db      	lsls	r3, r3, #3
 801be24:	08d9      	lsrs	r1, r3, #3
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	683a      	ldr	r2, [r7, #0]
 801be2c:	430a      	orrs	r2, r1
 801be2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	0018      	movs	r0, r3
 801be34:	f000 f854 	bl	801bee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	68fa      	ldr	r2, [r7, #12]
 801be3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	2288      	movs	r2, #136	@ 0x88
 801be44:	2120      	movs	r1, #32
 801be46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	2284      	movs	r2, #132	@ 0x84
 801be4c:	2100      	movs	r1, #0
 801be4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801be50:	2300      	movs	r3, #0
}
 801be52:	0018      	movs	r0, r3
 801be54:	46bd      	mov	sp, r7
 801be56:	b004      	add	sp, #16
 801be58:	bd80      	pop	{r7, pc}
	...

0801be5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b084      	sub	sp, #16
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
 801be64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	2284      	movs	r2, #132	@ 0x84
 801be6a:	5c9b      	ldrb	r3, [r3, r2]
 801be6c:	2b01      	cmp	r3, #1
 801be6e:	d101      	bne.n	801be74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801be70:	2302      	movs	r3, #2
 801be72:	e02f      	b.n	801bed4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	2284      	movs	r2, #132	@ 0x84
 801be78:	2101      	movs	r1, #1
 801be7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	2288      	movs	r2, #136	@ 0x88
 801be80:	2124      	movs	r1, #36	@ 0x24
 801be82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	681a      	ldr	r2, [r3, #0]
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	2101      	movs	r1, #1
 801be98:	438a      	bics	r2, r1
 801be9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	689b      	ldr	r3, [r3, #8]
 801bea2:	4a0e      	ldr	r2, [pc, #56]	@ (801bedc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801bea4:	4013      	ands	r3, r2
 801bea6:	0019      	movs	r1, r3
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	683a      	ldr	r2, [r7, #0]
 801beae:	430a      	orrs	r2, r1
 801beb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	0018      	movs	r0, r3
 801beb6:	f000 f813 	bl	801bee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	68fa      	ldr	r2, [r7, #12]
 801bec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	2288      	movs	r2, #136	@ 0x88
 801bec6:	2120      	movs	r1, #32
 801bec8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	2284      	movs	r2, #132	@ 0x84
 801bece:	2100      	movs	r1, #0
 801bed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bed2:	2300      	movs	r3, #0
}
 801bed4:	0018      	movs	r0, r3
 801bed6:	46bd      	mov	sp, r7
 801bed8:	b004      	add	sp, #16
 801beda:	bd80      	pop	{r7, pc}
 801bedc:	f1ffffff 	.word	0xf1ffffff

0801bee0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bee2:	b085      	sub	sp, #20
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801beec:	2b00      	cmp	r3, #0
 801beee:	d108      	bne.n	801bf02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	226a      	movs	r2, #106	@ 0x6a
 801bef4:	2101      	movs	r1, #1
 801bef6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	2268      	movs	r2, #104	@ 0x68
 801befc:	2101      	movs	r1, #1
 801befe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801bf00:	e043      	b.n	801bf8a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801bf02:	260f      	movs	r6, #15
 801bf04:	19bb      	adds	r3, r7, r6
 801bf06:	2208      	movs	r2, #8
 801bf08:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801bf0a:	200e      	movs	r0, #14
 801bf0c:	183b      	adds	r3, r7, r0
 801bf0e:	2208      	movs	r2, #8
 801bf10:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	689b      	ldr	r3, [r3, #8]
 801bf18:	0e5b      	lsrs	r3, r3, #25
 801bf1a:	b2da      	uxtb	r2, r3
 801bf1c:	240d      	movs	r4, #13
 801bf1e:	193b      	adds	r3, r7, r4
 801bf20:	2107      	movs	r1, #7
 801bf22:	400a      	ands	r2, r1
 801bf24:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	689b      	ldr	r3, [r3, #8]
 801bf2c:	0f5b      	lsrs	r3, r3, #29
 801bf2e:	b2da      	uxtb	r2, r3
 801bf30:	250c      	movs	r5, #12
 801bf32:	197b      	adds	r3, r7, r5
 801bf34:	2107      	movs	r1, #7
 801bf36:	400a      	ands	r2, r1
 801bf38:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bf3a:	183b      	adds	r3, r7, r0
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	197a      	adds	r2, r7, r5
 801bf40:	7812      	ldrb	r2, [r2, #0]
 801bf42:	4914      	ldr	r1, [pc, #80]	@ (801bf94 <UARTEx_SetNbDataToProcess+0xb4>)
 801bf44:	5c8a      	ldrb	r2, [r1, r2]
 801bf46:	435a      	muls	r2, r3
 801bf48:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801bf4a:	197b      	adds	r3, r7, r5
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	4a12      	ldr	r2, [pc, #72]	@ (801bf98 <UARTEx_SetNbDataToProcess+0xb8>)
 801bf50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bf52:	0019      	movs	r1, r3
 801bf54:	f7e4 f96a 	bl	800022c <__divsi3>
 801bf58:	0003      	movs	r3, r0
 801bf5a:	b299      	uxth	r1, r3
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	226a      	movs	r2, #106	@ 0x6a
 801bf60:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bf62:	19bb      	adds	r3, r7, r6
 801bf64:	781b      	ldrb	r3, [r3, #0]
 801bf66:	193a      	adds	r2, r7, r4
 801bf68:	7812      	ldrb	r2, [r2, #0]
 801bf6a:	490a      	ldr	r1, [pc, #40]	@ (801bf94 <UARTEx_SetNbDataToProcess+0xb4>)
 801bf6c:	5c8a      	ldrb	r2, [r1, r2]
 801bf6e:	435a      	muls	r2, r3
 801bf70:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801bf72:	193b      	adds	r3, r7, r4
 801bf74:	781b      	ldrb	r3, [r3, #0]
 801bf76:	4a08      	ldr	r2, [pc, #32]	@ (801bf98 <UARTEx_SetNbDataToProcess+0xb8>)
 801bf78:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bf7a:	0019      	movs	r1, r3
 801bf7c:	f7e4 f956 	bl	800022c <__divsi3>
 801bf80:	0003      	movs	r3, r0
 801bf82:	b299      	uxth	r1, r3
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	2268      	movs	r2, #104	@ 0x68
 801bf88:	5299      	strh	r1, [r3, r2]
}
 801bf8a:	46c0      	nop			@ (mov r8, r8)
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	b005      	add	sp, #20
 801bf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf92:	46c0      	nop			@ (mov r8, r8)
 801bf94:	0801c7fc 	.word	0x0801c7fc
 801bf98:	0801c804 	.word	0x0801c804

0801bf9c <malloc>:
 801bf9c:	b510      	push	{r4, lr}
 801bf9e:	4b03      	ldr	r3, [pc, #12]	@ (801bfac <malloc+0x10>)
 801bfa0:	0001      	movs	r1, r0
 801bfa2:	6818      	ldr	r0, [r3, #0]
 801bfa4:	f000 f830 	bl	801c008 <_malloc_r>
 801bfa8:	bd10      	pop	{r4, pc}
 801bfaa:	46c0      	nop			@ (mov r8, r8)
 801bfac:	20000284 	.word	0x20000284

0801bfb0 <free>:
 801bfb0:	b510      	push	{r4, lr}
 801bfb2:	4b03      	ldr	r3, [pc, #12]	@ (801bfc0 <free+0x10>)
 801bfb4:	0001      	movs	r1, r0
 801bfb6:	6818      	ldr	r0, [r3, #0]
 801bfb8:	f000 f938 	bl	801c22c <_free_r>
 801bfbc:	bd10      	pop	{r4, pc}
 801bfbe:	46c0      	nop			@ (mov r8, r8)
 801bfc0:	20000284 	.word	0x20000284

0801bfc4 <sbrk_aligned>:
 801bfc4:	b570      	push	{r4, r5, r6, lr}
 801bfc6:	4e0f      	ldr	r6, [pc, #60]	@ (801c004 <sbrk_aligned+0x40>)
 801bfc8:	000d      	movs	r5, r1
 801bfca:	6831      	ldr	r1, [r6, #0]
 801bfcc:	0004      	movs	r4, r0
 801bfce:	2900      	cmp	r1, #0
 801bfd0:	d102      	bne.n	801bfd8 <sbrk_aligned+0x14>
 801bfd2:	f000 f8e3 	bl	801c19c <_sbrk_r>
 801bfd6:	6030      	str	r0, [r6, #0]
 801bfd8:	0029      	movs	r1, r5
 801bfda:	0020      	movs	r0, r4
 801bfdc:	f000 f8de 	bl	801c19c <_sbrk_r>
 801bfe0:	1c43      	adds	r3, r0, #1
 801bfe2:	d103      	bne.n	801bfec <sbrk_aligned+0x28>
 801bfe4:	2501      	movs	r5, #1
 801bfe6:	426d      	negs	r5, r5
 801bfe8:	0028      	movs	r0, r5
 801bfea:	bd70      	pop	{r4, r5, r6, pc}
 801bfec:	2303      	movs	r3, #3
 801bfee:	1cc5      	adds	r5, r0, #3
 801bff0:	439d      	bics	r5, r3
 801bff2:	42a8      	cmp	r0, r5
 801bff4:	d0f8      	beq.n	801bfe8 <sbrk_aligned+0x24>
 801bff6:	1a29      	subs	r1, r5, r0
 801bff8:	0020      	movs	r0, r4
 801bffa:	f000 f8cf 	bl	801c19c <_sbrk_r>
 801bffe:	3001      	adds	r0, #1
 801c000:	d1f2      	bne.n	801bfe8 <sbrk_aligned+0x24>
 801c002:	e7ef      	b.n	801bfe4 <sbrk_aligned+0x20>
 801c004:	20001288 	.word	0x20001288

0801c008 <_malloc_r>:
 801c008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c00a:	2203      	movs	r2, #3
 801c00c:	1ccb      	adds	r3, r1, #3
 801c00e:	4393      	bics	r3, r2
 801c010:	3308      	adds	r3, #8
 801c012:	0005      	movs	r5, r0
 801c014:	001f      	movs	r7, r3
 801c016:	2b0c      	cmp	r3, #12
 801c018:	d234      	bcs.n	801c084 <_malloc_r+0x7c>
 801c01a:	270c      	movs	r7, #12
 801c01c:	42b9      	cmp	r1, r7
 801c01e:	d833      	bhi.n	801c088 <_malloc_r+0x80>
 801c020:	0028      	movs	r0, r5
 801c022:	f000 f871 	bl	801c108 <__malloc_lock>
 801c026:	4e37      	ldr	r6, [pc, #220]	@ (801c104 <_malloc_r+0xfc>)
 801c028:	6833      	ldr	r3, [r6, #0]
 801c02a:	001c      	movs	r4, r3
 801c02c:	2c00      	cmp	r4, #0
 801c02e:	d12f      	bne.n	801c090 <_malloc_r+0x88>
 801c030:	0039      	movs	r1, r7
 801c032:	0028      	movs	r0, r5
 801c034:	f7ff ffc6 	bl	801bfc4 <sbrk_aligned>
 801c038:	0004      	movs	r4, r0
 801c03a:	1c43      	adds	r3, r0, #1
 801c03c:	d15f      	bne.n	801c0fe <_malloc_r+0xf6>
 801c03e:	6834      	ldr	r4, [r6, #0]
 801c040:	9400      	str	r4, [sp, #0]
 801c042:	9b00      	ldr	r3, [sp, #0]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d14a      	bne.n	801c0de <_malloc_r+0xd6>
 801c048:	2c00      	cmp	r4, #0
 801c04a:	d052      	beq.n	801c0f2 <_malloc_r+0xea>
 801c04c:	6823      	ldr	r3, [r4, #0]
 801c04e:	0028      	movs	r0, r5
 801c050:	18e3      	adds	r3, r4, r3
 801c052:	9900      	ldr	r1, [sp, #0]
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	f000 f8a1 	bl	801c19c <_sbrk_r>
 801c05a:	9b01      	ldr	r3, [sp, #4]
 801c05c:	4283      	cmp	r3, r0
 801c05e:	d148      	bne.n	801c0f2 <_malloc_r+0xea>
 801c060:	6823      	ldr	r3, [r4, #0]
 801c062:	0028      	movs	r0, r5
 801c064:	1aff      	subs	r7, r7, r3
 801c066:	0039      	movs	r1, r7
 801c068:	f7ff ffac 	bl	801bfc4 <sbrk_aligned>
 801c06c:	3001      	adds	r0, #1
 801c06e:	d040      	beq.n	801c0f2 <_malloc_r+0xea>
 801c070:	6823      	ldr	r3, [r4, #0]
 801c072:	19db      	adds	r3, r3, r7
 801c074:	6023      	str	r3, [r4, #0]
 801c076:	6833      	ldr	r3, [r6, #0]
 801c078:	685a      	ldr	r2, [r3, #4]
 801c07a:	2a00      	cmp	r2, #0
 801c07c:	d133      	bne.n	801c0e6 <_malloc_r+0xde>
 801c07e:	9b00      	ldr	r3, [sp, #0]
 801c080:	6033      	str	r3, [r6, #0]
 801c082:	e019      	b.n	801c0b8 <_malloc_r+0xb0>
 801c084:	2b00      	cmp	r3, #0
 801c086:	dac9      	bge.n	801c01c <_malloc_r+0x14>
 801c088:	230c      	movs	r3, #12
 801c08a:	602b      	str	r3, [r5, #0]
 801c08c:	2000      	movs	r0, #0
 801c08e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c090:	6821      	ldr	r1, [r4, #0]
 801c092:	1bc9      	subs	r1, r1, r7
 801c094:	d420      	bmi.n	801c0d8 <_malloc_r+0xd0>
 801c096:	290b      	cmp	r1, #11
 801c098:	d90a      	bls.n	801c0b0 <_malloc_r+0xa8>
 801c09a:	19e2      	adds	r2, r4, r7
 801c09c:	6027      	str	r7, [r4, #0]
 801c09e:	42a3      	cmp	r3, r4
 801c0a0:	d104      	bne.n	801c0ac <_malloc_r+0xa4>
 801c0a2:	6032      	str	r2, [r6, #0]
 801c0a4:	6863      	ldr	r3, [r4, #4]
 801c0a6:	6011      	str	r1, [r2, #0]
 801c0a8:	6053      	str	r3, [r2, #4]
 801c0aa:	e005      	b.n	801c0b8 <_malloc_r+0xb0>
 801c0ac:	605a      	str	r2, [r3, #4]
 801c0ae:	e7f9      	b.n	801c0a4 <_malloc_r+0x9c>
 801c0b0:	6862      	ldr	r2, [r4, #4]
 801c0b2:	42a3      	cmp	r3, r4
 801c0b4:	d10e      	bne.n	801c0d4 <_malloc_r+0xcc>
 801c0b6:	6032      	str	r2, [r6, #0]
 801c0b8:	0028      	movs	r0, r5
 801c0ba:	f000 f82d 	bl	801c118 <__malloc_unlock>
 801c0be:	0020      	movs	r0, r4
 801c0c0:	2207      	movs	r2, #7
 801c0c2:	300b      	adds	r0, #11
 801c0c4:	1d23      	adds	r3, r4, #4
 801c0c6:	4390      	bics	r0, r2
 801c0c8:	1ac2      	subs	r2, r0, r3
 801c0ca:	4298      	cmp	r0, r3
 801c0cc:	d0df      	beq.n	801c08e <_malloc_r+0x86>
 801c0ce:	1a1b      	subs	r3, r3, r0
 801c0d0:	50a3      	str	r3, [r4, r2]
 801c0d2:	e7dc      	b.n	801c08e <_malloc_r+0x86>
 801c0d4:	605a      	str	r2, [r3, #4]
 801c0d6:	e7ef      	b.n	801c0b8 <_malloc_r+0xb0>
 801c0d8:	0023      	movs	r3, r4
 801c0da:	6864      	ldr	r4, [r4, #4]
 801c0dc:	e7a6      	b.n	801c02c <_malloc_r+0x24>
 801c0de:	9c00      	ldr	r4, [sp, #0]
 801c0e0:	6863      	ldr	r3, [r4, #4]
 801c0e2:	9300      	str	r3, [sp, #0]
 801c0e4:	e7ad      	b.n	801c042 <_malloc_r+0x3a>
 801c0e6:	001a      	movs	r2, r3
 801c0e8:	685b      	ldr	r3, [r3, #4]
 801c0ea:	42a3      	cmp	r3, r4
 801c0ec:	d1fb      	bne.n	801c0e6 <_malloc_r+0xde>
 801c0ee:	2300      	movs	r3, #0
 801c0f0:	e7da      	b.n	801c0a8 <_malloc_r+0xa0>
 801c0f2:	230c      	movs	r3, #12
 801c0f4:	0028      	movs	r0, r5
 801c0f6:	602b      	str	r3, [r5, #0]
 801c0f8:	f000 f80e 	bl	801c118 <__malloc_unlock>
 801c0fc:	e7c6      	b.n	801c08c <_malloc_r+0x84>
 801c0fe:	6007      	str	r7, [r0, #0]
 801c100:	e7da      	b.n	801c0b8 <_malloc_r+0xb0>
 801c102:	46c0      	nop			@ (mov r8, r8)
 801c104:	2000128c 	.word	0x2000128c

0801c108 <__malloc_lock>:
 801c108:	b510      	push	{r4, lr}
 801c10a:	4802      	ldr	r0, [pc, #8]	@ (801c114 <__malloc_lock+0xc>)
 801c10c:	f000 f882 	bl	801c214 <__retarget_lock_acquire_recursive>
 801c110:	bd10      	pop	{r4, pc}
 801c112:	46c0      	nop			@ (mov r8, r8)
 801c114:	200013cc 	.word	0x200013cc

0801c118 <__malloc_unlock>:
 801c118:	b510      	push	{r4, lr}
 801c11a:	4802      	ldr	r0, [pc, #8]	@ (801c124 <__malloc_unlock+0xc>)
 801c11c:	f000 f87b 	bl	801c216 <__retarget_lock_release_recursive>
 801c120:	bd10      	pop	{r4, pc}
 801c122:	46c0      	nop			@ (mov r8, r8)
 801c124:	200013cc 	.word	0x200013cc

0801c128 <memcmp>:
 801c128:	b530      	push	{r4, r5, lr}
 801c12a:	2400      	movs	r4, #0
 801c12c:	3901      	subs	r1, #1
 801c12e:	42a2      	cmp	r2, r4
 801c130:	d101      	bne.n	801c136 <memcmp+0xe>
 801c132:	2000      	movs	r0, #0
 801c134:	e005      	b.n	801c142 <memcmp+0x1a>
 801c136:	5d03      	ldrb	r3, [r0, r4]
 801c138:	3401      	adds	r4, #1
 801c13a:	5d0d      	ldrb	r5, [r1, r4]
 801c13c:	42ab      	cmp	r3, r5
 801c13e:	d0f6      	beq.n	801c12e <memcmp+0x6>
 801c140:	1b58      	subs	r0, r3, r5
 801c142:	bd30      	pop	{r4, r5, pc}

0801c144 <memset>:
 801c144:	0003      	movs	r3, r0
 801c146:	1882      	adds	r2, r0, r2
 801c148:	4293      	cmp	r3, r2
 801c14a:	d100      	bne.n	801c14e <memset+0xa>
 801c14c:	4770      	bx	lr
 801c14e:	7019      	strb	r1, [r3, #0]
 801c150:	3301      	adds	r3, #1
 801c152:	e7f9      	b.n	801c148 <memset+0x4>

0801c154 <strchr>:
 801c154:	b2c9      	uxtb	r1, r1
 801c156:	7803      	ldrb	r3, [r0, #0]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d004      	beq.n	801c166 <strchr+0x12>
 801c15c:	428b      	cmp	r3, r1
 801c15e:	d100      	bne.n	801c162 <strchr+0xe>
 801c160:	4770      	bx	lr
 801c162:	3001      	adds	r0, #1
 801c164:	e7f7      	b.n	801c156 <strchr+0x2>
 801c166:	424b      	negs	r3, r1
 801c168:	4159      	adcs	r1, r3
 801c16a:	4249      	negs	r1, r1
 801c16c:	4008      	ands	r0, r1
 801c16e:	e7f7      	b.n	801c160 <strchr+0xc>

0801c170 <strstr>:
 801c170:	780a      	ldrb	r2, [r1, #0]
 801c172:	b530      	push	{r4, r5, lr}
 801c174:	2a00      	cmp	r2, #0
 801c176:	d10c      	bne.n	801c192 <strstr+0x22>
 801c178:	bd30      	pop	{r4, r5, pc}
 801c17a:	429a      	cmp	r2, r3
 801c17c:	d108      	bne.n	801c190 <strstr+0x20>
 801c17e:	2301      	movs	r3, #1
 801c180:	5ccc      	ldrb	r4, [r1, r3]
 801c182:	2c00      	cmp	r4, #0
 801c184:	d0f8      	beq.n	801c178 <strstr+0x8>
 801c186:	5cc5      	ldrb	r5, [r0, r3]
 801c188:	42a5      	cmp	r5, r4
 801c18a:	d101      	bne.n	801c190 <strstr+0x20>
 801c18c:	3301      	adds	r3, #1
 801c18e:	e7f7      	b.n	801c180 <strstr+0x10>
 801c190:	3001      	adds	r0, #1
 801c192:	7803      	ldrb	r3, [r0, #0]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d1f0      	bne.n	801c17a <strstr+0xa>
 801c198:	0018      	movs	r0, r3
 801c19a:	e7ed      	b.n	801c178 <strstr+0x8>

0801c19c <_sbrk_r>:
 801c19c:	2300      	movs	r3, #0
 801c19e:	b570      	push	{r4, r5, r6, lr}
 801c1a0:	4d06      	ldr	r5, [pc, #24]	@ (801c1bc <_sbrk_r+0x20>)
 801c1a2:	0004      	movs	r4, r0
 801c1a4:	0008      	movs	r0, r1
 801c1a6:	602b      	str	r3, [r5, #0]
 801c1a8:	f7f0 fbb8 	bl	800c91c <_sbrk>
 801c1ac:	1c43      	adds	r3, r0, #1
 801c1ae:	d103      	bne.n	801c1b8 <_sbrk_r+0x1c>
 801c1b0:	682b      	ldr	r3, [r5, #0]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d000      	beq.n	801c1b8 <_sbrk_r+0x1c>
 801c1b6:	6023      	str	r3, [r4, #0]
 801c1b8:	bd70      	pop	{r4, r5, r6, pc}
 801c1ba:	46c0      	nop			@ (mov r8, r8)
 801c1bc:	200013c8 	.word	0x200013c8

0801c1c0 <__errno>:
 801c1c0:	4b01      	ldr	r3, [pc, #4]	@ (801c1c8 <__errno+0x8>)
 801c1c2:	6818      	ldr	r0, [r3, #0]
 801c1c4:	4770      	bx	lr
 801c1c6:	46c0      	nop			@ (mov r8, r8)
 801c1c8:	20000284 	.word	0x20000284

0801c1cc <__libc_init_array>:
 801c1cc:	b570      	push	{r4, r5, r6, lr}
 801c1ce:	2600      	movs	r6, #0
 801c1d0:	4c0c      	ldr	r4, [pc, #48]	@ (801c204 <__libc_init_array+0x38>)
 801c1d2:	4d0d      	ldr	r5, [pc, #52]	@ (801c208 <__libc_init_array+0x3c>)
 801c1d4:	1b64      	subs	r4, r4, r5
 801c1d6:	10a4      	asrs	r4, r4, #2
 801c1d8:	42a6      	cmp	r6, r4
 801c1da:	d109      	bne.n	801c1f0 <__libc_init_array+0x24>
 801c1dc:	2600      	movs	r6, #0
 801c1de:	f000 f979 	bl	801c4d4 <_init>
 801c1e2:	4c0a      	ldr	r4, [pc, #40]	@ (801c20c <__libc_init_array+0x40>)
 801c1e4:	4d0a      	ldr	r5, [pc, #40]	@ (801c210 <__libc_init_array+0x44>)
 801c1e6:	1b64      	subs	r4, r4, r5
 801c1e8:	10a4      	asrs	r4, r4, #2
 801c1ea:	42a6      	cmp	r6, r4
 801c1ec:	d105      	bne.n	801c1fa <__libc_init_array+0x2e>
 801c1ee:	bd70      	pop	{r4, r5, r6, pc}
 801c1f0:	00b3      	lsls	r3, r6, #2
 801c1f2:	58eb      	ldr	r3, [r5, r3]
 801c1f4:	4798      	blx	r3
 801c1f6:	3601      	adds	r6, #1
 801c1f8:	e7ee      	b.n	801c1d8 <__libc_init_array+0xc>
 801c1fa:	00b3      	lsls	r3, r6, #2
 801c1fc:	58eb      	ldr	r3, [r5, r3]
 801c1fe:	4798      	blx	r3
 801c200:	3601      	adds	r6, #1
 801c202:	e7f2      	b.n	801c1ea <__libc_init_array+0x1e>
 801c204:	0801c828 	.word	0x0801c828
 801c208:	0801c828 	.word	0x0801c828
 801c20c:	0801c82c 	.word	0x0801c82c
 801c210:	0801c828 	.word	0x0801c828

0801c214 <__retarget_lock_acquire_recursive>:
 801c214:	4770      	bx	lr

0801c216 <__retarget_lock_release_recursive>:
 801c216:	4770      	bx	lr

0801c218 <memcpy>:
 801c218:	2300      	movs	r3, #0
 801c21a:	b510      	push	{r4, lr}
 801c21c:	429a      	cmp	r2, r3
 801c21e:	d100      	bne.n	801c222 <memcpy+0xa>
 801c220:	bd10      	pop	{r4, pc}
 801c222:	5ccc      	ldrb	r4, [r1, r3]
 801c224:	54c4      	strb	r4, [r0, r3]
 801c226:	3301      	adds	r3, #1
 801c228:	e7f8      	b.n	801c21c <memcpy+0x4>
	...

0801c22c <_free_r>:
 801c22c:	b570      	push	{r4, r5, r6, lr}
 801c22e:	0005      	movs	r5, r0
 801c230:	1e0c      	subs	r4, r1, #0
 801c232:	d010      	beq.n	801c256 <_free_r+0x2a>
 801c234:	3c04      	subs	r4, #4
 801c236:	6823      	ldr	r3, [r4, #0]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	da00      	bge.n	801c23e <_free_r+0x12>
 801c23c:	18e4      	adds	r4, r4, r3
 801c23e:	0028      	movs	r0, r5
 801c240:	f7ff ff62 	bl	801c108 <__malloc_lock>
 801c244:	4a1d      	ldr	r2, [pc, #116]	@ (801c2bc <_free_r+0x90>)
 801c246:	6813      	ldr	r3, [r2, #0]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d105      	bne.n	801c258 <_free_r+0x2c>
 801c24c:	6063      	str	r3, [r4, #4]
 801c24e:	6014      	str	r4, [r2, #0]
 801c250:	0028      	movs	r0, r5
 801c252:	f7ff ff61 	bl	801c118 <__malloc_unlock>
 801c256:	bd70      	pop	{r4, r5, r6, pc}
 801c258:	42a3      	cmp	r3, r4
 801c25a:	d908      	bls.n	801c26e <_free_r+0x42>
 801c25c:	6820      	ldr	r0, [r4, #0]
 801c25e:	1821      	adds	r1, r4, r0
 801c260:	428b      	cmp	r3, r1
 801c262:	d1f3      	bne.n	801c24c <_free_r+0x20>
 801c264:	6819      	ldr	r1, [r3, #0]
 801c266:	685b      	ldr	r3, [r3, #4]
 801c268:	1809      	adds	r1, r1, r0
 801c26a:	6021      	str	r1, [r4, #0]
 801c26c:	e7ee      	b.n	801c24c <_free_r+0x20>
 801c26e:	001a      	movs	r2, r3
 801c270:	685b      	ldr	r3, [r3, #4]
 801c272:	2b00      	cmp	r3, #0
 801c274:	d001      	beq.n	801c27a <_free_r+0x4e>
 801c276:	42a3      	cmp	r3, r4
 801c278:	d9f9      	bls.n	801c26e <_free_r+0x42>
 801c27a:	6811      	ldr	r1, [r2, #0]
 801c27c:	1850      	adds	r0, r2, r1
 801c27e:	42a0      	cmp	r0, r4
 801c280:	d10b      	bne.n	801c29a <_free_r+0x6e>
 801c282:	6820      	ldr	r0, [r4, #0]
 801c284:	1809      	adds	r1, r1, r0
 801c286:	1850      	adds	r0, r2, r1
 801c288:	6011      	str	r1, [r2, #0]
 801c28a:	4283      	cmp	r3, r0
 801c28c:	d1e0      	bne.n	801c250 <_free_r+0x24>
 801c28e:	6818      	ldr	r0, [r3, #0]
 801c290:	685b      	ldr	r3, [r3, #4]
 801c292:	1841      	adds	r1, r0, r1
 801c294:	6011      	str	r1, [r2, #0]
 801c296:	6053      	str	r3, [r2, #4]
 801c298:	e7da      	b.n	801c250 <_free_r+0x24>
 801c29a:	42a0      	cmp	r0, r4
 801c29c:	d902      	bls.n	801c2a4 <_free_r+0x78>
 801c29e:	230c      	movs	r3, #12
 801c2a0:	602b      	str	r3, [r5, #0]
 801c2a2:	e7d5      	b.n	801c250 <_free_r+0x24>
 801c2a4:	6820      	ldr	r0, [r4, #0]
 801c2a6:	1821      	adds	r1, r4, r0
 801c2a8:	428b      	cmp	r3, r1
 801c2aa:	d103      	bne.n	801c2b4 <_free_r+0x88>
 801c2ac:	6819      	ldr	r1, [r3, #0]
 801c2ae:	685b      	ldr	r3, [r3, #4]
 801c2b0:	1809      	adds	r1, r1, r0
 801c2b2:	6021      	str	r1, [r4, #0]
 801c2b4:	6063      	str	r3, [r4, #4]
 801c2b6:	6054      	str	r4, [r2, #4]
 801c2b8:	e7ca      	b.n	801c250 <_free_r+0x24>
 801c2ba:	46c0      	nop			@ (mov r8, r8)
 801c2bc:	2000128c 	.word	0x2000128c

0801c2c0 <sqrt>:
 801c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2c2:	0004      	movs	r4, r0
 801c2c4:	000d      	movs	r5, r1
 801c2c6:	f000 f821 	bl	801c30c <__ieee754_sqrt>
 801c2ca:	0022      	movs	r2, r4
 801c2cc:	0006      	movs	r6, r0
 801c2ce:	000f      	movs	r7, r1
 801c2d0:	002b      	movs	r3, r5
 801c2d2:	0020      	movs	r0, r4
 801c2d4:	0029      	movs	r1, r5
 801c2d6:	f7e6 f8eb 	bl	80024b0 <__aeabi_dcmpun>
 801c2da:	2800      	cmp	r0, #0
 801c2dc:	d113      	bne.n	801c306 <sqrt+0x46>
 801c2de:	2200      	movs	r2, #0
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	0020      	movs	r0, r4
 801c2e4:	0029      	movs	r1, r5
 801c2e6:	f7e4 f8a3 	bl	8000430 <__aeabi_dcmplt>
 801c2ea:	2800      	cmp	r0, #0
 801c2ec:	d00b      	beq.n	801c306 <sqrt+0x46>
 801c2ee:	f7ff ff67 	bl	801c1c0 <__errno>
 801c2f2:	2321      	movs	r3, #33	@ 0x21
 801c2f4:	2200      	movs	r2, #0
 801c2f6:	6003      	str	r3, [r0, #0]
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	0010      	movs	r0, r2
 801c2fc:	0019      	movs	r1, r3
 801c2fe:	f7e4 fdad 	bl	8000e5c <__aeabi_ddiv>
 801c302:	0006      	movs	r6, r0
 801c304:	000f      	movs	r7, r1
 801c306:	0030      	movs	r0, r6
 801c308:	0039      	movs	r1, r7
 801c30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c30c <__ieee754_sqrt>:
 801c30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c30e:	000a      	movs	r2, r1
 801c310:	000d      	movs	r5, r1
 801c312:	496b      	ldr	r1, [pc, #428]	@ (801c4c0 <__ieee754_sqrt+0x1b4>)
 801c314:	0004      	movs	r4, r0
 801c316:	0003      	movs	r3, r0
 801c318:	0008      	movs	r0, r1
 801c31a:	b087      	sub	sp, #28
 801c31c:	4028      	ands	r0, r5
 801c31e:	4288      	cmp	r0, r1
 801c320:	d111      	bne.n	801c346 <__ieee754_sqrt+0x3a>
 801c322:	0022      	movs	r2, r4
 801c324:	002b      	movs	r3, r5
 801c326:	0020      	movs	r0, r4
 801c328:	0029      	movs	r1, r5
 801c32a:	f7e5 f9d1 	bl	80016d0 <__aeabi_dmul>
 801c32e:	0002      	movs	r2, r0
 801c330:	000b      	movs	r3, r1
 801c332:	0020      	movs	r0, r4
 801c334:	0029      	movs	r1, r5
 801c336:	f7e4 f9cb 	bl	80006d0 <__aeabi_dadd>
 801c33a:	0004      	movs	r4, r0
 801c33c:	000d      	movs	r5, r1
 801c33e:	0020      	movs	r0, r4
 801c340:	0029      	movs	r1, r5
 801c342:	b007      	add	sp, #28
 801c344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c346:	2d00      	cmp	r5, #0
 801c348:	dc11      	bgt.n	801c36e <__ieee754_sqrt+0x62>
 801c34a:	0069      	lsls	r1, r5, #1
 801c34c:	0849      	lsrs	r1, r1, #1
 801c34e:	4321      	orrs	r1, r4
 801c350:	d0f5      	beq.n	801c33e <__ieee754_sqrt+0x32>
 801c352:	2000      	movs	r0, #0
 801c354:	4285      	cmp	r5, r0
 801c356:	d010      	beq.n	801c37a <__ieee754_sqrt+0x6e>
 801c358:	0022      	movs	r2, r4
 801c35a:	002b      	movs	r3, r5
 801c35c:	0020      	movs	r0, r4
 801c35e:	0029      	movs	r1, r5
 801c360:	f7e5 fc9c 	bl	8001c9c <__aeabi_dsub>
 801c364:	0002      	movs	r2, r0
 801c366:	000b      	movs	r3, r1
 801c368:	f7e4 fd78 	bl	8000e5c <__aeabi_ddiv>
 801c36c:	e7e5      	b.n	801c33a <__ieee754_sqrt+0x2e>
 801c36e:	1528      	asrs	r0, r5, #20
 801c370:	d115      	bne.n	801c39e <__ieee754_sqrt+0x92>
 801c372:	2480      	movs	r4, #128	@ 0x80
 801c374:	2100      	movs	r1, #0
 801c376:	0364      	lsls	r4, r4, #13
 801c378:	e007      	b.n	801c38a <__ieee754_sqrt+0x7e>
 801c37a:	0ada      	lsrs	r2, r3, #11
 801c37c:	3815      	subs	r0, #21
 801c37e:	055b      	lsls	r3, r3, #21
 801c380:	2a00      	cmp	r2, #0
 801c382:	d0fa      	beq.n	801c37a <__ieee754_sqrt+0x6e>
 801c384:	e7f5      	b.n	801c372 <__ieee754_sqrt+0x66>
 801c386:	0052      	lsls	r2, r2, #1
 801c388:	3101      	adds	r1, #1
 801c38a:	4222      	tst	r2, r4
 801c38c:	d0fb      	beq.n	801c386 <__ieee754_sqrt+0x7a>
 801c38e:	1e4c      	subs	r4, r1, #1
 801c390:	1b00      	subs	r0, r0, r4
 801c392:	2420      	movs	r4, #32
 801c394:	001d      	movs	r5, r3
 801c396:	1a64      	subs	r4, r4, r1
 801c398:	40e5      	lsrs	r5, r4
 801c39a:	408b      	lsls	r3, r1
 801c39c:	432a      	orrs	r2, r5
 801c39e:	4949      	ldr	r1, [pc, #292]	@ (801c4c4 <__ieee754_sqrt+0x1b8>)
 801c3a0:	0312      	lsls	r2, r2, #12
 801c3a2:	1844      	adds	r4, r0, r1
 801c3a4:	2180      	movs	r1, #128	@ 0x80
 801c3a6:	0b12      	lsrs	r2, r2, #12
 801c3a8:	0349      	lsls	r1, r1, #13
 801c3aa:	4311      	orrs	r1, r2
 801c3ac:	07c0      	lsls	r0, r0, #31
 801c3ae:	d403      	bmi.n	801c3b8 <__ieee754_sqrt+0xac>
 801c3b0:	0fda      	lsrs	r2, r3, #31
 801c3b2:	0049      	lsls	r1, r1, #1
 801c3b4:	1851      	adds	r1, r2, r1
 801c3b6:	005b      	lsls	r3, r3, #1
 801c3b8:	2500      	movs	r5, #0
 801c3ba:	1062      	asrs	r2, r4, #1
 801c3bc:	0049      	lsls	r1, r1, #1
 801c3be:	2480      	movs	r4, #128	@ 0x80
 801c3c0:	9205      	str	r2, [sp, #20]
 801c3c2:	0fda      	lsrs	r2, r3, #31
 801c3c4:	1852      	adds	r2, r2, r1
 801c3c6:	2016      	movs	r0, #22
 801c3c8:	0029      	movs	r1, r5
 801c3ca:	005b      	lsls	r3, r3, #1
 801c3cc:	03a4      	lsls	r4, r4, #14
 801c3ce:	190e      	adds	r6, r1, r4
 801c3d0:	4296      	cmp	r6, r2
 801c3d2:	dc02      	bgt.n	801c3da <__ieee754_sqrt+0xce>
 801c3d4:	1931      	adds	r1, r6, r4
 801c3d6:	1b92      	subs	r2, r2, r6
 801c3d8:	192d      	adds	r5, r5, r4
 801c3da:	0fde      	lsrs	r6, r3, #31
 801c3dc:	0052      	lsls	r2, r2, #1
 801c3de:	3801      	subs	r0, #1
 801c3e0:	1992      	adds	r2, r2, r6
 801c3e2:	005b      	lsls	r3, r3, #1
 801c3e4:	0864      	lsrs	r4, r4, #1
 801c3e6:	2800      	cmp	r0, #0
 801c3e8:	d1f1      	bne.n	801c3ce <__ieee754_sqrt+0xc2>
 801c3ea:	2620      	movs	r6, #32
 801c3ec:	2780      	movs	r7, #128	@ 0x80
 801c3ee:	0004      	movs	r4, r0
 801c3f0:	9604      	str	r6, [sp, #16]
 801c3f2:	063f      	lsls	r7, r7, #24
 801c3f4:	183e      	adds	r6, r7, r0
 801c3f6:	46b4      	mov	ip, r6
 801c3f8:	428a      	cmp	r2, r1
 801c3fa:	dc02      	bgt.n	801c402 <__ieee754_sqrt+0xf6>
 801c3fc:	d114      	bne.n	801c428 <__ieee754_sqrt+0x11c>
 801c3fe:	429e      	cmp	r6, r3
 801c400:	d812      	bhi.n	801c428 <__ieee754_sqrt+0x11c>
 801c402:	4660      	mov	r0, ip
 801c404:	4666      	mov	r6, ip
 801c406:	19c0      	adds	r0, r0, r7
 801c408:	9100      	str	r1, [sp, #0]
 801c40a:	2e00      	cmp	r6, #0
 801c40c:	da03      	bge.n	801c416 <__ieee754_sqrt+0x10a>
 801c40e:	43c6      	mvns	r6, r0
 801c410:	0ff6      	lsrs	r6, r6, #31
 801c412:	198e      	adds	r6, r1, r6
 801c414:	9600      	str	r6, [sp, #0]
 801c416:	1a52      	subs	r2, r2, r1
 801c418:	4563      	cmp	r3, ip
 801c41a:	4189      	sbcs	r1, r1
 801c41c:	4249      	negs	r1, r1
 801c41e:	1a52      	subs	r2, r2, r1
 801c420:	4661      	mov	r1, ip
 801c422:	1a5b      	subs	r3, r3, r1
 801c424:	9900      	ldr	r1, [sp, #0]
 801c426:	19e4      	adds	r4, r4, r7
 801c428:	0fde      	lsrs	r6, r3, #31
 801c42a:	0052      	lsls	r2, r2, #1
 801c42c:	1992      	adds	r2, r2, r6
 801c42e:	9e04      	ldr	r6, [sp, #16]
 801c430:	005b      	lsls	r3, r3, #1
 801c432:	3e01      	subs	r6, #1
 801c434:	087f      	lsrs	r7, r7, #1
 801c436:	9604      	str	r6, [sp, #16]
 801c438:	2e00      	cmp	r6, #0
 801c43a:	d1db      	bne.n	801c3f4 <__ieee754_sqrt+0xe8>
 801c43c:	431a      	orrs	r2, r3
 801c43e:	d01f      	beq.n	801c480 <__ieee754_sqrt+0x174>
 801c440:	4e21      	ldr	r6, [pc, #132]	@ (801c4c8 <__ieee754_sqrt+0x1bc>)
 801c442:	4f22      	ldr	r7, [pc, #136]	@ (801c4cc <__ieee754_sqrt+0x1c0>)
 801c444:	6830      	ldr	r0, [r6, #0]
 801c446:	6871      	ldr	r1, [r6, #4]
 801c448:	683a      	ldr	r2, [r7, #0]
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	9200      	str	r2, [sp, #0]
 801c44e:	9301      	str	r3, [sp, #4]
 801c450:	6832      	ldr	r2, [r6, #0]
 801c452:	6873      	ldr	r3, [r6, #4]
 801c454:	9202      	str	r2, [sp, #8]
 801c456:	9303      	str	r3, [sp, #12]
 801c458:	9a00      	ldr	r2, [sp, #0]
 801c45a:	9b01      	ldr	r3, [sp, #4]
 801c45c:	f7e5 fc1e 	bl	8001c9c <__aeabi_dsub>
 801c460:	0002      	movs	r2, r0
 801c462:	000b      	movs	r3, r1
 801c464:	9802      	ldr	r0, [sp, #8]
 801c466:	9903      	ldr	r1, [sp, #12]
 801c468:	f7e3 ffec 	bl	8000444 <__aeabi_dcmple>
 801c46c:	2800      	cmp	r0, #0
 801c46e:	d007      	beq.n	801c480 <__ieee754_sqrt+0x174>
 801c470:	6830      	ldr	r0, [r6, #0]
 801c472:	6871      	ldr	r1, [r6, #4]
 801c474:	683a      	ldr	r2, [r7, #0]
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	1c67      	adds	r7, r4, #1
 801c47a:	d10c      	bne.n	801c496 <__ieee754_sqrt+0x18a>
 801c47c:	9c04      	ldr	r4, [sp, #16]
 801c47e:	3501      	adds	r5, #1
 801c480:	4a13      	ldr	r2, [pc, #76]	@ (801c4d0 <__ieee754_sqrt+0x1c4>)
 801c482:	106b      	asrs	r3, r5, #1
 801c484:	189b      	adds	r3, r3, r2
 801c486:	9a05      	ldr	r2, [sp, #20]
 801c488:	07ed      	lsls	r5, r5, #31
 801c48a:	0864      	lsrs	r4, r4, #1
 801c48c:	0512      	lsls	r2, r2, #20
 801c48e:	4325      	orrs	r5, r4
 801c490:	0028      	movs	r0, r5
 801c492:	18d1      	adds	r1, r2, r3
 801c494:	e751      	b.n	801c33a <__ieee754_sqrt+0x2e>
 801c496:	f7e4 f91b 	bl	80006d0 <__aeabi_dadd>
 801c49a:	6877      	ldr	r7, [r6, #4]
 801c49c:	6836      	ldr	r6, [r6, #0]
 801c49e:	0002      	movs	r2, r0
 801c4a0:	000b      	movs	r3, r1
 801c4a2:	0030      	movs	r0, r6
 801c4a4:	0039      	movs	r1, r7
 801c4a6:	f7e3 ffc3 	bl	8000430 <__aeabi_dcmplt>
 801c4aa:	2800      	cmp	r0, #0
 801c4ac:	d004      	beq.n	801c4b8 <__ieee754_sqrt+0x1ac>
 801c4ae:	3402      	adds	r4, #2
 801c4b0:	4263      	negs	r3, r4
 801c4b2:	4163      	adcs	r3, r4
 801c4b4:	18ed      	adds	r5, r5, r3
 801c4b6:	e7e3      	b.n	801c480 <__ieee754_sqrt+0x174>
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	3401      	adds	r4, #1
 801c4bc:	439c      	bics	r4, r3
 801c4be:	e7df      	b.n	801c480 <__ieee754_sqrt+0x174>
 801c4c0:	7ff00000 	.word	0x7ff00000
 801c4c4:	fffffc01 	.word	0xfffffc01
 801c4c8:	0801c818 	.word	0x0801c818
 801c4cc:	0801c810 	.word	0x0801c810
 801c4d0:	3fe00000 	.word	0x3fe00000

0801c4d4 <_init>:
 801c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4d6:	46c0      	nop			@ (mov r8, r8)
 801c4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c4da:	bc08      	pop	{r3}
 801c4dc:	469e      	mov	lr, r3
 801c4de:	4770      	bx	lr

0801c4e0 <_fini>:
 801c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4e2:	46c0      	nop			@ (mov r8, r8)
 801c4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c4e6:	bc08      	pop	{r3}
 801c4e8:	469e      	mov	lr, r3
 801c4ea:	4770      	bx	lr
 801c4ec:	0000      	movs	r0, r0
	...

0801c4f0 <__FLASH_Program_Fast_veneer>:
 801c4f0:	b401      	push	{r0}
 801c4f2:	4802      	ldr	r0, [pc, #8]	@ (801c4fc <__FLASH_Program_Fast_veneer+0xc>)
 801c4f4:	4684      	mov	ip, r0
 801c4f6:	bc01      	pop	{r0}
 801c4f8:	4760      	bx	ip
 801c4fa:	bf00      	nop
 801c4fc:	200002d5 	.word	0x200002d5

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <aTxBuffer>:
20000004:	ff000007 00080000                       ........

2000000c <dpytab>:
2000000c:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
2000001c:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
2000002c:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
2000003c:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

2000004c <BluetoothState>:
2000004c:	00000001                                ....

20000050 <Eventos>:
20000050:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

2000006c <Mediciones>:
2000006c:	12222111 00001333                       .!".3...

20000074 <Alarmas>:
20000074:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000084:	00000000                                ....

20000088 <DatosMAC>:
20000088:	56781234 00009999                       4.xV....

20000090 <DatosFirmware>:
20000090:	                                         ..

20000092 <PNU_0x3000>:
20000092:	                                         ..

20000094 <PNU_0x3004>:
20000094:	                                         (.

20000096 <PNU_0x3006>:
20000096:	                                         ..

20000098 <PNU_0x3008>:
20000098:	                                         ..

2000009a <PNU_0x300C>:
2000009a:	                                         ..

2000009c <PNU_0x3010>:
2000009c:	                                         ..

2000009e <PNU_0x3012>:
2000009e:	                                         (.

200000a0 <PNU_0x3014>:
200000a0:	                                         ..

200000a2 <PNU_0x3016>:
200000a2:	                                         ..

200000a4 <PNU_0x3018>:
200000a4:	                                         ..

200000a6 <PNU_0x301A>:
200000a6:	                                         2.

200000a8 <PNU_0x301C>:
200000a8:	                                         Z.

200000aa <PNU_0x301E>:
200000aa:	                                         ..

200000ac <PNU_0x3104>:
200000ac:	                                         ..

200000ae <PNU_0x3106>:
200000ae:	                                         ..

200000b0 <PNU_0x3108>:
200000b0:	                                         ..

200000b2 <PNU_0x310A>:
200000b2:	                                         ..

200000b4 <PNU_0x310C>:
200000b4:	                                         _.

200000b6 <PNU_0x310E>:
200000b6:	                                         d.

200000b8 <Plantilla>:
	...
20000100:	00000001 00000000 00000000 00000000     ................
	...

20000138 <copiaPlantilla>:
	...
20000180:	00000100 00000000 00000000 00000000     ................
	...

200001b8 <reevolt_div>:
200001b8:	                                         .

200001b9 <reevolt_mul>:
200001b9:	                                         .

200001ba <reeEstado1>:
200001ba:	                                         .

200001bb <reeLat1>:
200001bb:	                                         .

200001bc <reeLat2>:
200001bc:	                                         .

200001bd <reeLat3>:
200001bd:	                                         .

200001be <reeLat4>:
200001be:	                                         .

200001bf <reeLong1>:
200001bf:	                                         .

200001c0 <reeLong2>:
200001c0:	                                         .

200001c1 <reeLong3>:
200001c1:	                                         .

200001c2 <reeLong4>:
200001c2:	                                         ..

200001c4 <daysToMonth>:
200001c4:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001d4:	00000078 00000097 000000b6 000000d5     x...............
200001e4:	000000f3 00000111 00000130 0000014e     ........0...N...

200001f4 <PFULLDEF_Px_PORT>:
200001f4:	50000400 50000400 50000400 50000400     ...P...P...P...P
20000204:	50000400                                ...P

20000208 <PFULLDEF_Px_PIN>:
20000208:	40101010 00000010                       ...@....

20000210 <PFULLDEF_MPx_PORT>:
20000210:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000220 <PFULLDEF_MPx_PIN>:
20000220:	08080808                                ....

20000224 <firstFlagPuerta1>:
20000224:	00000001                                ....

20000228 <difName>:
20000228:	5f454c42 4e2b5441 49454d41 5245424d     BLE_AT+NAMEIMBER
20000238:	54432d41 462d464f 00000a0d 00000000     A-CTOF-F........
	...

2000025c <SystemCoreClock>:
2000025c:	003d0900                                ..=.

20000260 <tRTP1000>:
20000260:	00000008 00000000 00000000 00000000     ................

20000270 <pagina_borrado>:
20000270:	00000040                                @...

20000274 <direccion_fw>:
20000274:	08020000                                ....

20000278 <contador_bloques_fw>:
20000278:	00000010                                ....

2000027c <uwTickPrio>:
2000027c:	00000004                                ....

20000280 <uwTickFreq>:
20000280:	00000001                                ....

20000284 <_impure_ptr>:
20000284:	20000288                                ... 

20000288 <_impure_data>:
20000288:	00000000 20001290 200012f8 20001360     ....... ... `.. 
	...

200002d4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b088      	sub	sp, #32
200002d8:	af00      	add	r7, sp, #0
200002da:	6078      	str	r0, [r7, #4]
200002dc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200002de:	231f      	movs	r3, #31
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	2200      	movs	r2, #0
200002e4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200002e6:	687b      	ldr	r3, [r7, #4]
200002e8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200002ea:	683b      	ldr	r3, [r7, #0]
200002ec:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200002ee:	4b1a      	ldr	r3, [pc, #104]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f0:	695a      	ldr	r2, [r3, #20]
200002f2:	4b19      	ldr	r3, [pc, #100]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f4:	2180      	movs	r1, #128	@ 0x80
200002f6:	02c9      	lsls	r1, r1, #11
200002f8:	430a      	orrs	r2, r1
200002fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002fc:	f3ef 8310 	mrs	r3, PRIMASK
20000300:	60fb      	str	r3, [r7, #12]
  return(result);
20000302:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000306:	b672      	cpsid	i
}
20000308:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000030a:	e00f      	b.n	2000032c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000030c:	697a      	ldr	r2, [r7, #20]
2000030e:	69bb      	ldr	r3, [r7, #24]
20000310:	6812      	ldr	r2, [r2, #0]
20000312:	601a      	str	r2, [r3, #0]
    src += 4U;
20000314:	697b      	ldr	r3, [r7, #20]
20000316:	3304      	adds	r3, #4
20000318:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000031a:	69bb      	ldr	r3, [r7, #24]
2000031c:	3304      	adds	r3, #4
2000031e:	61bb      	str	r3, [r7, #24]
    index++;
20000320:	211f      	movs	r1, #31
20000322:	187b      	adds	r3, r7, r1
20000324:	781a      	ldrb	r2, [r3, #0]
20000326:	187b      	adds	r3, r7, r1
20000328:	3201      	adds	r2, #1
2000032a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000032c:	231f      	movs	r3, #31
2000032e:	18fb      	adds	r3, r7, r3
20000330:	781b      	ldrb	r3, [r3, #0]
20000332:	2b3f      	cmp	r3, #63	@ 0x3f
20000334:	d9ea      	bls.n	2000030c <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000336:	46c0      	nop			@ (mov r8, r8)
20000338:	4b07      	ldr	r3, [pc, #28]	@ (20000358 <FLASH_Program_Fast+0x84>)
2000033a:	691a      	ldr	r2, [r3, #16]
2000033c:	2380      	movs	r3, #128	@ 0x80
2000033e:	025b      	lsls	r3, r3, #9
20000340:	4013      	ands	r3, r2
20000342:	d1f9      	bne.n	20000338 <FLASH_Program_Fast+0x64>
20000344:	693b      	ldr	r3, [r7, #16]
20000346:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000348:	68bb      	ldr	r3, [r7, #8]
2000034a:	f383 8810 	msr	PRIMASK, r3
}
2000034e:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000350:	46c0      	nop			@ (mov r8, r8)
20000352:	46bd      	mov	sp, r7
20000354:	b008      	add	sp, #32
20000356:	bd80      	pop	{r7, pc}
20000358:	40022000 	.word	0x40022000
